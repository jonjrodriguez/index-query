#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/ReciprocalFloatFunction.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *ReciprocalFloatFunction::class$ = NULL;
            jmethodID *ReciprocalFloatFunction::mids$ = NULL;
            bool ReciprocalFloatFunction::live$ = false;

            jclass ReciprocalFloatFunction::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/ReciprocalFloatFunction");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_64f8c2b9] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queries/function/ValueSource;FFF)V");
                mids$[mid_createWeight_1b6125ba] = env->getMethodID(cls, "createWeight", "(Ljava/util/Map;Lorg/apache/lucene/search/IndexSearcher;)V");
                mids$[mid_description_14c7b5c5] = env->getMethodID(cls, "description", "()Ljava/lang/String;");
                mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_getValues_4c566485] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/queries/function/FunctionValues;");
                mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            ReciprocalFloatFunction::ReciprocalFloatFunction(const ::org::apache::lucene::queries::function::ValueSource & a0, jfloat a1, jfloat a2, jfloat a3) : ::org::apache::lucene::queries::function::ValueSource(env->newObject(initializeClass, &mids$, mid_init$_64f8c2b9, a0.this$, a1, a2, a3)) {}

            void ReciprocalFloatFunction::createWeight(const ::java::util::Map & a0, const ::org::apache::lucene::search::IndexSearcher & a1) const
            {
              env->callVoidMethod(this$, mids$[mid_createWeight_1b6125ba], a0.this$, a1.this$);
            }

            ::java::lang::String ReciprocalFloatFunction::description() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_description_14c7b5c5]));
            }

            jboolean ReciprocalFloatFunction::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
            }

            ::org::apache::lucene::queries::function::FunctionValues ReciprocalFloatFunction::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::FunctionValues(env->callObjectMethod(this$, mids$[mid_getValues_4c566485], a0.this$, a1.this$));
            }

            jint ReciprocalFloatFunction::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_ReciprocalFloatFunction_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_ReciprocalFloatFunction_instance_(PyTypeObject *type, PyObject *arg);
            static int t_ReciprocalFloatFunction_init_(t_ReciprocalFloatFunction *self, PyObject *args, PyObject *kwds);
            static PyObject *t_ReciprocalFloatFunction_createWeight(t_ReciprocalFloatFunction *self, PyObject *args);
            static PyObject *t_ReciprocalFloatFunction_description(t_ReciprocalFloatFunction *self, PyObject *args);
            static PyObject *t_ReciprocalFloatFunction_equals(t_ReciprocalFloatFunction *self, PyObject *args);
            static PyObject *t_ReciprocalFloatFunction_getValues(t_ReciprocalFloatFunction *self, PyObject *args);
            static PyObject *t_ReciprocalFloatFunction_hashCode(t_ReciprocalFloatFunction *self, PyObject *args);

            static PyMethodDef t_ReciprocalFloatFunction__methods_[] = {
              DECLARE_METHOD(t_ReciprocalFloatFunction, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_ReciprocalFloatFunction, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_ReciprocalFloatFunction, createWeight, METH_VARARGS),
              DECLARE_METHOD(t_ReciprocalFloatFunction, description, METH_VARARGS),
              DECLARE_METHOD(t_ReciprocalFloatFunction, equals, METH_VARARGS),
              DECLARE_METHOD(t_ReciprocalFloatFunction, getValues, METH_VARARGS),
              DECLARE_METHOD(t_ReciprocalFloatFunction, hashCode, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(ReciprocalFloatFunction, t_ReciprocalFloatFunction, ::org::apache::lucene::queries::function::ValueSource, ReciprocalFloatFunction, t_ReciprocalFloatFunction_init_, 0, 0, 0, 0, 0);

            void t_ReciprocalFloatFunction::install(PyObject *module)
            {
              installType(&PY_TYPE(ReciprocalFloatFunction), module, "ReciprocalFloatFunction", 0);
            }

            void t_ReciprocalFloatFunction::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(ReciprocalFloatFunction).tp_dict, "class_", make_descriptor(ReciprocalFloatFunction::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(ReciprocalFloatFunction).tp_dict, "wrapfn_", make_descriptor(t_ReciprocalFloatFunction::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(ReciprocalFloatFunction).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_ReciprocalFloatFunction_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, ReciprocalFloatFunction::initializeClass, 1)))
                return NULL;
              return t_ReciprocalFloatFunction::wrap_Object(ReciprocalFloatFunction(((t_ReciprocalFloatFunction *) arg)->object.this$));
            }
            static PyObject *t_ReciprocalFloatFunction_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, ReciprocalFloatFunction::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_ReciprocalFloatFunction_init_(t_ReciprocalFloatFunction *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::queries::function::ValueSource a0((jobject) NULL);
              jfloat a1;
              jfloat a2;
              jfloat a3;
              ReciprocalFloatFunction object((jobject) NULL);

              if (!parseArgs(args, "kFFF", ::org::apache::lucene::queries::function::ValueSource::initializeClass, &a0, &a1, &a2, &a3))
              {
                INT_CALL(object = ReciprocalFloatFunction(a0, a1, a2, a3));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_ReciprocalFloatFunction_createWeight(t_ReciprocalFloatFunction *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::search::IndexSearcher a1((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(self->object.createWeight(a0, a1));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(ReciprocalFloatFunction), (PyObject *) self, "createWeight", args, 2);
            }

            static PyObject *t_ReciprocalFloatFunction_description(t_ReciprocalFloatFunction *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.description());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(ReciprocalFloatFunction), (PyObject *) self, "description", args, 2);
            }

            static PyObject *t_ReciprocalFloatFunction_equals(t_ReciprocalFloatFunction *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(ReciprocalFloatFunction), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_ReciprocalFloatFunction_getValues(t_ReciprocalFloatFunction *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::FunctionValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::t_FunctionValues::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(ReciprocalFloatFunction), (PyObject *) self, "getValues", args, 2);
            }

            static PyObject *t_ReciprocalFloatFunction_hashCode(t_ReciprocalFloatFunction *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(ReciprocalFloatFunction), (PyObject *) self, "hashCode", args, 2);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/TimSorter.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *TimSorter::class$ = NULL;
        jmethodID *TimSorter::mids$ = NULL;
        bool TimSorter::live$ = false;

        jclass TimSorter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/TimSorter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_sort_d8d154a6] = env->getMethodID(cls, "sort", "(II)V");
            mids$[mid_save_d8d154a6] = env->getMethodID(cls, "save", "(II)V");
            mids$[mid_copy_d8d154a6] = env->getMethodID(cls, "copy", "(II)V");
            mids$[mid_restore_d8d154a6] = env->getMethodID(cls, "restore", "(II)V");
            mids$[mid_compareSaved_d8d154b9] = env->getMethodID(cls, "compareSaved", "(II)I");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void TimSorter::sort(jint a0, jint a1) const
        {
          env->callVoidMethod(this$, mids$[mid_sort_d8d154a6], a0, a1);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_TimSorter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TimSorter_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TimSorter_sort(t_TimSorter *self, PyObject *args);

        static PyMethodDef t_TimSorter__methods_[] = {
          DECLARE_METHOD(t_TimSorter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TimSorter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TimSorter, sort, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TimSorter, t_TimSorter, ::org::apache::lucene::util::Sorter, TimSorter, abstract_init, 0, 0, 0, 0, 0);

        void t_TimSorter::install(PyObject *module)
        {
          installType(&PY_TYPE(TimSorter), module, "TimSorter", 0);
        }

        void t_TimSorter::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TimSorter).tp_dict, "class_", make_descriptor(TimSorter::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TimSorter).tp_dict, "wrapfn_", make_descriptor(t_TimSorter::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TimSorter).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TimSorter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TimSorter::initializeClass, 1)))
            return NULL;
          return t_TimSorter::wrap_Object(TimSorter(((t_TimSorter *) arg)->object.this$));
        }
        static PyObject *t_TimSorter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TimSorter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_TimSorter_sort(t_TimSorter *self, PyObject *args)
        {
          jint a0;
          jint a1;

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(self->object.sort(a0, a1));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(TimSorter), (PyObject *) self, "sort", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/sv/SwedishLightStemFilterFactory.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace sv {

          ::java::lang::Class *SwedishLightStemFilterFactory::class$ = NULL;
          jmethodID *SwedishLightStemFilterFactory::mids$ = NULL;
          bool SwedishLightStemFilterFactory::live$ = false;

          jclass SwedishLightStemFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/sv/SwedishLightStemFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SwedishLightStemFilterFactory::SwedishLightStemFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream SwedishLightStemFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace sv {
          static PyObject *t_SwedishLightStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SwedishLightStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SwedishLightStemFilterFactory_init_(t_SwedishLightStemFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SwedishLightStemFilterFactory_create(t_SwedishLightStemFilterFactory *self, PyObject *args);

          static PyMethodDef t_SwedishLightStemFilterFactory__methods_[] = {
            DECLARE_METHOD(t_SwedishLightStemFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SwedishLightStemFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SwedishLightStemFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SwedishLightStemFilterFactory, t_SwedishLightStemFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, SwedishLightStemFilterFactory, t_SwedishLightStemFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_SwedishLightStemFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(SwedishLightStemFilterFactory), module, "SwedishLightStemFilterFactory", 0);
          }

          void t_SwedishLightStemFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SwedishLightStemFilterFactory).tp_dict, "class_", make_descriptor(SwedishLightStemFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SwedishLightStemFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_SwedishLightStemFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SwedishLightStemFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SwedishLightStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SwedishLightStemFilterFactory::initializeClass, 1)))
              return NULL;
            return t_SwedishLightStemFilterFactory::wrap_Object(SwedishLightStemFilterFactory(((t_SwedishLightStemFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_SwedishLightStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SwedishLightStemFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SwedishLightStemFilterFactory_init_(t_SwedishLightStemFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            SwedishLightStemFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = SwedishLightStemFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SwedishLightStemFilterFactory_create(t_SwedishLightStemFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(SwedishLightStemFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene46/Lucene46SegmentInfoReader.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "org/apache/lucene/store/IOContext.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene46 {

          ::java::lang::Class *Lucene46SegmentInfoReader::class$ = NULL;
          jmethodID *Lucene46SegmentInfoReader::mids$ = NULL;
          bool Lucene46SegmentInfoReader::live$ = false;

          jclass Lucene46SegmentInfoReader::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene46/Lucene46SegmentInfoReader");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_read_ff05cda4] = env->getMethodID(cls, "read", "(Lorg/apache/lucene/store/Directory;Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/index/SegmentInfo;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene46SegmentInfoReader::Lucene46SegmentInfoReader() : ::org::apache::lucene::codecs::SegmentInfoReader(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::index::SegmentInfo Lucene46SegmentInfoReader::read(const ::org::apache::lucene::store::Directory & a0, const ::java::lang::String & a1, const ::org::apache::lucene::store::IOContext & a2) const
          {
            return ::org::apache::lucene::index::SegmentInfo(env->callObjectMethod(this$, mids$[mid_read_ff05cda4], a0.this$, a1.this$, a2.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene46 {
          static PyObject *t_Lucene46SegmentInfoReader_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene46SegmentInfoReader_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene46SegmentInfoReader_init_(t_Lucene46SegmentInfoReader *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene46SegmentInfoReader_read(t_Lucene46SegmentInfoReader *self, PyObject *args);

          static PyMethodDef t_Lucene46SegmentInfoReader__methods_[] = {
            DECLARE_METHOD(t_Lucene46SegmentInfoReader, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene46SegmentInfoReader, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene46SegmentInfoReader, read, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene46SegmentInfoReader, t_Lucene46SegmentInfoReader, ::org::apache::lucene::codecs::SegmentInfoReader, Lucene46SegmentInfoReader, t_Lucene46SegmentInfoReader_init_, 0, 0, 0, 0, 0);

          void t_Lucene46SegmentInfoReader::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene46SegmentInfoReader), module, "Lucene46SegmentInfoReader", 0);
          }

          void t_Lucene46SegmentInfoReader::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene46SegmentInfoReader).tp_dict, "class_", make_descriptor(Lucene46SegmentInfoReader::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene46SegmentInfoReader).tp_dict, "wrapfn_", make_descriptor(t_Lucene46SegmentInfoReader::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene46SegmentInfoReader).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lucene46SegmentInfoReader_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene46SegmentInfoReader::initializeClass, 1)))
              return NULL;
            return t_Lucene46SegmentInfoReader::wrap_Object(Lucene46SegmentInfoReader(((t_Lucene46SegmentInfoReader *) arg)->object.this$));
          }
          static PyObject *t_Lucene46SegmentInfoReader_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene46SegmentInfoReader::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene46SegmentInfoReader_init_(t_Lucene46SegmentInfoReader *self, PyObject *args, PyObject *kwds)
          {
            Lucene46SegmentInfoReader object((jobject) NULL);

            INT_CALL(object = Lucene46SegmentInfoReader());
            self->object = object;

            return 0;
          }

          static PyObject *t_Lucene46SegmentInfoReader_read(t_Lucene46SegmentInfoReader *self, PyObject *args)
          {
            ::org::apache::lucene::store::Directory a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            ::org::apache::lucene::store::IOContext a2((jobject) NULL);
            ::org::apache::lucene::index::SegmentInfo result((jobject) NULL);

            if (!parseArgs(args, "ksk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.read(a0, a1, a2));
              return ::org::apache::lucene::index::t_SegmentInfo::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene46SegmentInfoReader), (PyObject *) self, "read", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/NumericDocValues.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *NumericDocValues::class$ = NULL;
        jmethodID *NumericDocValues::mids$ = NULL;
        bool NumericDocValues::live$ = false;

        jclass NumericDocValues::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/NumericDocValues");

            mids$ = new jmethodID[max_mid];
            mids$[mid_get_39c7bd20] = env->getMethodID(cls, "get", "(I)J");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jlong NumericDocValues::get(jint a0) const
        {
          return env->callLongMethod(this$, mids$[mid_get_39c7bd20], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_NumericDocValues_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NumericDocValues_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NumericDocValues_get(t_NumericDocValues *self, PyObject *arg);

        static PyMethodDef t_NumericDocValues__methods_[] = {
          DECLARE_METHOD(t_NumericDocValues, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NumericDocValues, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NumericDocValues, get, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(NumericDocValues, t_NumericDocValues, ::java::lang::Object, NumericDocValues, abstract_init, 0, 0, 0, 0, 0);

        void t_NumericDocValues::install(PyObject *module)
        {
          installType(&PY_TYPE(NumericDocValues), module, "NumericDocValues", 0);
        }

        void t_NumericDocValues::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(NumericDocValues).tp_dict, "class_", make_descriptor(NumericDocValues::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(NumericDocValues).tp_dict, "wrapfn_", make_descriptor(t_NumericDocValues::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(NumericDocValues).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_NumericDocValues_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, NumericDocValues::initializeClass, 1)))
            return NULL;
          return t_NumericDocValues::wrap_Object(NumericDocValues(((t_NumericDocValues *) arg)->object.this$));
        }
        static PyObject *t_NumericDocValues_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, NumericDocValues::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_NumericDocValues_get(t_NumericDocValues *self, PyObject *arg)
        {
          jint a0;
          jlong result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.get(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError((PyObject *) self, "get", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/standard/ClassicFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {

          ::java::lang::Class *ClassicFilter::class$ = NULL;
          jmethodID *ClassicFilter::mids$ = NULL;
          bool ClassicFilter::live$ = false;

          jclass ClassicFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/standard/ClassicFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ClassicFilter::ClassicFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean ClassicFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {
          static PyObject *t_ClassicFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ClassicFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ClassicFilter_init_(t_ClassicFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ClassicFilter_incrementToken(t_ClassicFilter *self, PyObject *args);

          static PyMethodDef t_ClassicFilter__methods_[] = {
            DECLARE_METHOD(t_ClassicFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ClassicFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ClassicFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ClassicFilter, t_ClassicFilter, ::org::apache::lucene::analysis::TokenFilter, ClassicFilter, t_ClassicFilter_init_, 0, 0, 0, 0, 0);

          void t_ClassicFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(ClassicFilter), module, "ClassicFilter", 0);
          }

          void t_ClassicFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ClassicFilter).tp_dict, "class_", make_descriptor(ClassicFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ClassicFilter).tp_dict, "wrapfn_", make_descriptor(t_ClassicFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ClassicFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ClassicFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ClassicFilter::initializeClass, 1)))
              return NULL;
            return t_ClassicFilter::wrap_Object(ClassicFilter(((t_ClassicFilter *) arg)->object.this$));
          }
          static PyObject *t_ClassicFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ClassicFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ClassicFilter_init_(t_ClassicFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ClassicFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = ClassicFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ClassicFilter_incrementToken(t_ClassicFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(ClassicFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/DocValues.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/AtomicReader.h"
#include "org/apache/lucene/index/SortedDocValues.h"
#include "org/apache/lucene/index/BinaryDocValues.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/Bits.h"
#include "org/apache/lucene/index/NumericDocValues.h"
#include "org/apache/lucene/index/SortedNumericDocValues.h"
#include "org/apache/lucene/index/RandomAccessOrds.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/SortedSetDocValues.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *DocValues::class$ = NULL;
        jmethodID *DocValues::mids$ = NULL;
        bool DocValues::live$ = false;

        jclass DocValues::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/DocValues");

            mids$ = new jmethodID[max_mid];
            mids$[mid_docsWithValue_6932366e] = env->getStaticMethodID(cls, "docsWithValue", "(Lorg/apache/lucene/index/SortedDocValues;I)Lorg/apache/lucene/util/Bits;");
            mids$[mid_docsWithValue_c7ef87d6] = env->getStaticMethodID(cls, "docsWithValue", "(Lorg/apache/lucene/index/SortedNumericDocValues;I)Lorg/apache/lucene/util/Bits;");
            mids$[mid_docsWithValue_f9286ac1] = env->getStaticMethodID(cls, "docsWithValue", "(Lorg/apache/lucene/index/SortedSetDocValues;I)Lorg/apache/lucene/util/Bits;");
            mids$[mid_emptyBinary_56a19500] = env->getStaticMethodID(cls, "emptyBinary", "()Lorg/apache/lucene/index/BinaryDocValues;");
            mids$[mid_emptyNumeric_729438c3] = env->getStaticMethodID(cls, "emptyNumeric", "()Lorg/apache/lucene/index/NumericDocValues;");
            mids$[mid_emptySorted_57832734] = env->getStaticMethodID(cls, "emptySorted", "()Lorg/apache/lucene/index/SortedDocValues;");
            mids$[mid_emptySortedNumeric_839d2a3a] = env->getStaticMethodID(cls, "emptySortedNumeric", "(I)Lorg/apache/lucene/index/SortedNumericDocValues;");
            mids$[mid_emptySortedSet_f316d093] = env->getStaticMethodID(cls, "emptySortedSet", "()Lorg/apache/lucene/index/RandomAccessOrds;");
            mids$[mid_getBinary_d197d479] = env->getStaticMethodID(cls, "getBinary", "(Lorg/apache/lucene/index/AtomicReader;Ljava/lang/String;)Lorg/apache/lucene/index/BinaryDocValues;");
            mids$[mid_getDocsWithField_b8ffc438] = env->getStaticMethodID(cls, "getDocsWithField", "(Lorg/apache/lucene/index/AtomicReader;Ljava/lang/String;)Lorg/apache/lucene/util/Bits;");
            mids$[mid_getNumeric_abcbf8b8] = env->getStaticMethodID(cls, "getNumeric", "(Lorg/apache/lucene/index/AtomicReader;Ljava/lang/String;)Lorg/apache/lucene/index/NumericDocValues;");
            mids$[mid_getSorted_e27a1341] = env->getStaticMethodID(cls, "getSorted", "(Lorg/apache/lucene/index/AtomicReader;Ljava/lang/String;)Lorg/apache/lucene/index/SortedDocValues;");
            mids$[mid_getSortedNumeric_593e885b] = env->getStaticMethodID(cls, "getSortedNumeric", "(Lorg/apache/lucene/index/AtomicReader;Ljava/lang/String;)Lorg/apache/lucene/index/SortedNumericDocValues;");
            mids$[mid_getSortedSet_1498712e] = env->getStaticMethodID(cls, "getSortedSet", "(Lorg/apache/lucene/index/AtomicReader;Ljava/lang/String;)Lorg/apache/lucene/index/SortedSetDocValues;");
            mids$[mid_singleton_be5b737a] = env->getStaticMethodID(cls, "singleton", "(Lorg/apache/lucene/index/SortedDocValues;)Lorg/apache/lucene/index/RandomAccessOrds;");
            mids$[mid_singleton_082bce56] = env->getStaticMethodID(cls, "singleton", "(Lorg/apache/lucene/index/NumericDocValues;Lorg/apache/lucene/util/Bits;)Lorg/apache/lucene/index/SortedNumericDocValues;");
            mids$[mid_unwrapSingleton_c9f185f6] = env->getStaticMethodID(cls, "unwrapSingleton", "(Lorg/apache/lucene/index/SortedSetDocValues;)Lorg/apache/lucene/index/SortedDocValues;");
            mids$[mid_unwrapSingleton_66807036] = env->getStaticMethodID(cls, "unwrapSingleton", "(Lorg/apache/lucene/index/SortedNumericDocValues;)Lorg/apache/lucene/index/NumericDocValues;");
            mids$[mid_unwrapSingletonBits_aa3508ee] = env->getStaticMethodID(cls, "unwrapSingletonBits", "(Lorg/apache/lucene/index/SortedNumericDocValues;)Lorg/apache/lucene/util/Bits;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::util::Bits DocValues::docsWithValue(const ::org::apache::lucene::index::SortedDocValues & a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::util::Bits(env->callStaticObjectMethod(cls, mids$[mid_docsWithValue_6932366e], a0.this$, a1));
        }

        ::org::apache::lucene::util::Bits DocValues::docsWithValue(const ::org::apache::lucene::index::SortedNumericDocValues & a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::util::Bits(env->callStaticObjectMethod(cls, mids$[mid_docsWithValue_c7ef87d6], a0.this$, a1));
        }

        ::org::apache::lucene::util::Bits DocValues::docsWithValue(const ::org::apache::lucene::index::SortedSetDocValues & a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::util::Bits(env->callStaticObjectMethod(cls, mids$[mid_docsWithValue_f9286ac1], a0.this$, a1));
        }

        ::org::apache::lucene::index::BinaryDocValues DocValues::emptyBinary()
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::BinaryDocValues(env->callStaticObjectMethod(cls, mids$[mid_emptyBinary_56a19500]));
        }

        ::org::apache::lucene::index::NumericDocValues DocValues::emptyNumeric()
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::NumericDocValues(env->callStaticObjectMethod(cls, mids$[mid_emptyNumeric_729438c3]));
        }

        ::org::apache::lucene::index::SortedDocValues DocValues::emptySorted()
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::SortedDocValues(env->callStaticObjectMethod(cls, mids$[mid_emptySorted_57832734]));
        }

        ::org::apache::lucene::index::SortedNumericDocValues DocValues::emptySortedNumeric(jint a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::SortedNumericDocValues(env->callStaticObjectMethod(cls, mids$[mid_emptySortedNumeric_839d2a3a], a0));
        }

        ::org::apache::lucene::index::RandomAccessOrds DocValues::emptySortedSet()
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::RandomAccessOrds(env->callStaticObjectMethod(cls, mids$[mid_emptySortedSet_f316d093]));
        }

        ::org::apache::lucene::index::BinaryDocValues DocValues::getBinary(const ::org::apache::lucene::index::AtomicReader & a0, const ::java::lang::String & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::BinaryDocValues(env->callStaticObjectMethod(cls, mids$[mid_getBinary_d197d479], a0.this$, a1.this$));
        }

        ::org::apache::lucene::util::Bits DocValues::getDocsWithField(const ::org::apache::lucene::index::AtomicReader & a0, const ::java::lang::String & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::util::Bits(env->callStaticObjectMethod(cls, mids$[mid_getDocsWithField_b8ffc438], a0.this$, a1.this$));
        }

        ::org::apache::lucene::index::NumericDocValues DocValues::getNumeric(const ::org::apache::lucene::index::AtomicReader & a0, const ::java::lang::String & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::NumericDocValues(env->callStaticObjectMethod(cls, mids$[mid_getNumeric_abcbf8b8], a0.this$, a1.this$));
        }

        ::org::apache::lucene::index::SortedDocValues DocValues::getSorted(const ::org::apache::lucene::index::AtomicReader & a0, const ::java::lang::String & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::SortedDocValues(env->callStaticObjectMethod(cls, mids$[mid_getSorted_e27a1341], a0.this$, a1.this$));
        }

        ::org::apache::lucene::index::SortedNumericDocValues DocValues::getSortedNumeric(const ::org::apache::lucene::index::AtomicReader & a0, const ::java::lang::String & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::SortedNumericDocValues(env->callStaticObjectMethod(cls, mids$[mid_getSortedNumeric_593e885b], a0.this$, a1.this$));
        }

        ::org::apache::lucene::index::SortedSetDocValues DocValues::getSortedSet(const ::org::apache::lucene::index::AtomicReader & a0, const ::java::lang::String & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::SortedSetDocValues(env->callStaticObjectMethod(cls, mids$[mid_getSortedSet_1498712e], a0.this$, a1.this$));
        }

        ::org::apache::lucene::index::RandomAccessOrds DocValues::singleton(const ::org::apache::lucene::index::SortedDocValues & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::RandomAccessOrds(env->callStaticObjectMethod(cls, mids$[mid_singleton_be5b737a], a0.this$));
        }

        ::org::apache::lucene::index::SortedNumericDocValues DocValues::singleton(const ::org::apache::lucene::index::NumericDocValues & a0, const ::org::apache::lucene::util::Bits & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::SortedNumericDocValues(env->callStaticObjectMethod(cls, mids$[mid_singleton_082bce56], a0.this$, a1.this$));
        }

        ::org::apache::lucene::index::SortedDocValues DocValues::unwrapSingleton(const ::org::apache::lucene::index::SortedSetDocValues & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::SortedDocValues(env->callStaticObjectMethod(cls, mids$[mid_unwrapSingleton_c9f185f6], a0.this$));
        }

        ::org::apache::lucene::index::NumericDocValues DocValues::unwrapSingleton(const ::org::apache::lucene::index::SortedNumericDocValues & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::NumericDocValues(env->callStaticObjectMethod(cls, mids$[mid_unwrapSingleton_66807036], a0.this$));
        }

        ::org::apache::lucene::util::Bits DocValues::unwrapSingletonBits(const ::org::apache::lucene::index::SortedNumericDocValues & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::util::Bits(env->callStaticObjectMethod(cls, mids$[mid_unwrapSingletonBits_aa3508ee], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_DocValues_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DocValues_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DocValues_docsWithValue(PyTypeObject *type, PyObject *args);
        static PyObject *t_DocValues_emptyBinary(PyTypeObject *type);
        static PyObject *t_DocValues_emptyNumeric(PyTypeObject *type);
        static PyObject *t_DocValues_emptySorted(PyTypeObject *type);
        static PyObject *t_DocValues_emptySortedNumeric(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DocValues_emptySortedSet(PyTypeObject *type);
        static PyObject *t_DocValues_getBinary(PyTypeObject *type, PyObject *args);
        static PyObject *t_DocValues_getDocsWithField(PyTypeObject *type, PyObject *args);
        static PyObject *t_DocValues_getNumeric(PyTypeObject *type, PyObject *args);
        static PyObject *t_DocValues_getSorted(PyTypeObject *type, PyObject *args);
        static PyObject *t_DocValues_getSortedNumeric(PyTypeObject *type, PyObject *args);
        static PyObject *t_DocValues_getSortedSet(PyTypeObject *type, PyObject *args);
        static PyObject *t_DocValues_singleton(PyTypeObject *type, PyObject *args);
        static PyObject *t_DocValues_unwrapSingleton(PyTypeObject *type, PyObject *args);
        static PyObject *t_DocValues_unwrapSingletonBits(PyTypeObject *type, PyObject *arg);

        static PyMethodDef t_DocValues__methods_[] = {
          DECLARE_METHOD(t_DocValues, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DocValues, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DocValues, docsWithValue, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_DocValues, emptyBinary, METH_NOARGS | METH_CLASS),
          DECLARE_METHOD(t_DocValues, emptyNumeric, METH_NOARGS | METH_CLASS),
          DECLARE_METHOD(t_DocValues, emptySorted, METH_NOARGS | METH_CLASS),
          DECLARE_METHOD(t_DocValues, emptySortedNumeric, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DocValues, emptySortedSet, METH_NOARGS | METH_CLASS),
          DECLARE_METHOD(t_DocValues, getBinary, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_DocValues, getDocsWithField, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_DocValues, getNumeric, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_DocValues, getSorted, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_DocValues, getSortedNumeric, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_DocValues, getSortedSet, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_DocValues, singleton, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_DocValues, unwrapSingleton, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_DocValues, unwrapSingletonBits, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(DocValues, t_DocValues, ::java::lang::Object, DocValues, abstract_init, 0, 0, 0, 0, 0);

        void t_DocValues::install(PyObject *module)
        {
          installType(&PY_TYPE(DocValues), module, "DocValues", 0);
        }

        void t_DocValues::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(DocValues).tp_dict, "class_", make_descriptor(DocValues::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(DocValues).tp_dict, "wrapfn_", make_descriptor(t_DocValues::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(DocValues).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_DocValues_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, DocValues::initializeClass, 1)))
            return NULL;
          return t_DocValues::wrap_Object(DocValues(((t_DocValues *) arg)->object.this$));
        }
        static PyObject *t_DocValues_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, DocValues::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_DocValues_docsWithValue(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::org::apache::lucene::index::SortedDocValues a0((jobject) NULL);
              jint a1;
              ::org::apache::lucene::util::Bits result((jobject) NULL);

              if (!parseArgs(args, "kI", ::org::apache::lucene::index::SortedDocValues::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::index::DocValues::docsWithValue(a0, a1));
                return ::org::apache::lucene::util::t_Bits::wrap_Object(result);
              }
            }
            {
              ::org::apache::lucene::index::SortedNumericDocValues a0((jobject) NULL);
              jint a1;
              ::org::apache::lucene::util::Bits result((jobject) NULL);

              if (!parseArgs(args, "kI", ::org::apache::lucene::index::SortedNumericDocValues::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::index::DocValues::docsWithValue(a0, a1));
                return ::org::apache::lucene::util::t_Bits::wrap_Object(result);
              }
            }
            {
              ::org::apache::lucene::index::SortedSetDocValues a0((jobject) NULL);
              jint a1;
              ::org::apache::lucene::util::Bits result((jobject) NULL);

              if (!parseArgs(args, "kI", ::org::apache::lucene::index::SortedSetDocValues::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::index::DocValues::docsWithValue(a0, a1));
                return ::org::apache::lucene::util::t_Bits::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError(type, "docsWithValue", args);
          return NULL;
        }

        static PyObject *t_DocValues_emptyBinary(PyTypeObject *type)
        {
          ::org::apache::lucene::index::BinaryDocValues result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::index::DocValues::emptyBinary());
          return ::org::apache::lucene::index::t_BinaryDocValues::wrap_Object(result);
        }

        static PyObject *t_DocValues_emptyNumeric(PyTypeObject *type)
        {
          ::org::apache::lucene::index::NumericDocValues result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::index::DocValues::emptyNumeric());
          return ::org::apache::lucene::index::t_NumericDocValues::wrap_Object(result);
        }

        static PyObject *t_DocValues_emptySorted(PyTypeObject *type)
        {
          ::org::apache::lucene::index::SortedDocValues result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::index::DocValues::emptySorted());
          return ::org::apache::lucene::index::t_SortedDocValues::wrap_Object(result);
        }

        static PyObject *t_DocValues_emptySortedNumeric(PyTypeObject *type, PyObject *arg)
        {
          jint a0;
          ::org::apache::lucene::index::SortedNumericDocValues result((jobject) NULL);

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::DocValues::emptySortedNumeric(a0));
            return ::org::apache::lucene::index::t_SortedNumericDocValues::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "emptySortedNumeric", arg);
          return NULL;
        }

        static PyObject *t_DocValues_emptySortedSet(PyTypeObject *type)
        {
          ::org::apache::lucene::index::RandomAccessOrds result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::index::DocValues::emptySortedSet());
          return ::org::apache::lucene::index::t_RandomAccessOrds::wrap_Object(result);
        }

        static PyObject *t_DocValues_getBinary(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::org::apache::lucene::index::BinaryDocValues result((jobject) NULL);

          if (!parseArgs(args, "ks", ::org::apache::lucene::index::AtomicReader::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::DocValues::getBinary(a0, a1));
            return ::org::apache::lucene::index::t_BinaryDocValues::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "getBinary", args);
          return NULL;
        }

        static PyObject *t_DocValues_getDocsWithField(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::org::apache::lucene::util::Bits result((jobject) NULL);

          if (!parseArgs(args, "ks", ::org::apache::lucene::index::AtomicReader::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::DocValues::getDocsWithField(a0, a1));
            return ::org::apache::lucene::util::t_Bits::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "getDocsWithField", args);
          return NULL;
        }

        static PyObject *t_DocValues_getNumeric(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::org::apache::lucene::index::NumericDocValues result((jobject) NULL);

          if (!parseArgs(args, "ks", ::org::apache::lucene::index::AtomicReader::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::DocValues::getNumeric(a0, a1));
            return ::org::apache::lucene::index::t_NumericDocValues::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "getNumeric", args);
          return NULL;
        }

        static PyObject *t_DocValues_getSorted(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::org::apache::lucene::index::SortedDocValues result((jobject) NULL);

          if (!parseArgs(args, "ks", ::org::apache::lucene::index::AtomicReader::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::DocValues::getSorted(a0, a1));
            return ::org::apache::lucene::index::t_SortedDocValues::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "getSorted", args);
          return NULL;
        }

        static PyObject *t_DocValues_getSortedNumeric(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::org::apache::lucene::index::SortedNumericDocValues result((jobject) NULL);

          if (!parseArgs(args, "ks", ::org::apache::lucene::index::AtomicReader::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::DocValues::getSortedNumeric(a0, a1));
            return ::org::apache::lucene::index::t_SortedNumericDocValues::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "getSortedNumeric", args);
          return NULL;
        }

        static PyObject *t_DocValues_getSortedSet(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::org::apache::lucene::index::SortedSetDocValues result((jobject) NULL);

          if (!parseArgs(args, "ks", ::org::apache::lucene::index::AtomicReader::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::DocValues::getSortedSet(a0, a1));
            return ::org::apache::lucene::index::t_SortedSetDocValues::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "getSortedSet", args);
          return NULL;
        }

        static PyObject *t_DocValues_singleton(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::index::SortedDocValues a0((jobject) NULL);
              ::org::apache::lucene::index::RandomAccessOrds result((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::index::SortedDocValues::initializeClass, &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::index::DocValues::singleton(a0));
                return ::org::apache::lucene::index::t_RandomAccessOrds::wrap_Object(result);
              }
            }
            break;
           case 2:
            {
              ::org::apache::lucene::index::NumericDocValues a0((jobject) NULL);
              ::org::apache::lucene::util::Bits a1((jobject) NULL);
              ::org::apache::lucene::index::SortedNumericDocValues result((jobject) NULL);

              if (!parseArgs(args, "kk", ::org::apache::lucene::index::NumericDocValues::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::index::DocValues::singleton(a0, a1));
                return ::org::apache::lucene::index::t_SortedNumericDocValues::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError(type, "singleton", args);
          return NULL;
        }

        static PyObject *t_DocValues_unwrapSingleton(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::index::SortedSetDocValues a0((jobject) NULL);
              ::org::apache::lucene::index::SortedDocValues result((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::index::SortedSetDocValues::initializeClass, &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::index::DocValues::unwrapSingleton(a0));
                return ::org::apache::lucene::index::t_SortedDocValues::wrap_Object(result);
              }
            }
            {
              ::org::apache::lucene::index::SortedNumericDocValues a0((jobject) NULL);
              ::org::apache::lucene::index::NumericDocValues result((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::index::SortedNumericDocValues::initializeClass, &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::index::DocValues::unwrapSingleton(a0));
                return ::org::apache::lucene::index::t_NumericDocValues::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError(type, "unwrapSingleton", args);
          return NULL;
        }

        static PyObject *t_DocValues_unwrapSingletonBits(PyTypeObject *type, PyObject *arg)
        {
          ::org::apache::lucene::index::SortedNumericDocValues a0((jobject) NULL);
          ::org::apache::lucene::util::Bits result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::SortedNumericDocValues::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::DocValues::unwrapSingletonBits(a0));
            return ::org::apache::lucene::util::t_Bits::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "unwrapSingletonBits", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/range/DoubleRange.h"
#include "org/apache/lucene/queries/function/ValueSource.h"
#include "org/apache/lucene/search/Filter.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace range {

          ::java::lang::Class *DoubleRange::class$ = NULL;
          jmethodID *DoubleRange::mids$ = NULL;
          jfieldID *DoubleRange::fids$ = NULL;
          bool DoubleRange::live$ = false;

          jclass DoubleRange::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/range/DoubleRange");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_1ac9f76c] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;DZDZ)V");
              mids$[mid_accept_5d1c7649] = env->getMethodID(cls, "accept", "(D)Z");
              mids$[mid_getFilter_fc904367] = env->getMethodID(cls, "getFilter", "(Lorg/apache/lucene/search/Filter;Lorg/apache/lucene/queries/function/ValueSource;)Lorg/apache/lucene/search/Filter;");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              fids$ = new jfieldID[max_fid];
              fids$[fid_max] = env->getFieldID(cls, "max", "D");
              fids$[fid_maxInclusive] = env->getFieldID(cls, "maxInclusive", "Z");
              fids$[fid_min] = env->getFieldID(cls, "min", "D");
              fids$[fid_minInclusive] = env->getFieldID(cls, "minInclusive", "Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          DoubleRange::DoubleRange(const ::java::lang::String & a0, jdouble a1, jboolean a2, jdouble a3, jboolean a4) : ::org::apache::lucene::facet::range::Range(env->newObject(initializeClass, &mids$, mid_init$_1ac9f76c, a0.this$, a1, a2, a3, a4)) {}

          jboolean DoubleRange::accept(jdouble a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_accept_5d1c7649], a0);
          }

          ::org::apache::lucene::search::Filter DoubleRange::getFilter(const ::org::apache::lucene::search::Filter & a0, const ::org::apache::lucene::queries::function::ValueSource & a1) const
          {
            return ::org::apache::lucene::search::Filter(env->callObjectMethod(this$, mids$[mid_getFilter_fc904367], a0.this$, a1.this$));
          }

          ::java::lang::String DoubleRange::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }

          jdouble DoubleRange::_get_max() const
          {
            return env->getDoubleField(this$, fids$[fid_max]);
          }

          jboolean DoubleRange::_get_maxInclusive() const
          {
            return env->getBooleanField(this$, fids$[fid_maxInclusive]);
          }

          jdouble DoubleRange::_get_min() const
          {
            return env->getDoubleField(this$, fids$[fid_min]);
          }

          jboolean DoubleRange::_get_minInclusive() const
          {
            return env->getBooleanField(this$, fids$[fid_minInclusive]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace range {
          static PyObject *t_DoubleRange_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DoubleRange_instance_(PyTypeObject *type, PyObject *arg);
          static int t_DoubleRange_init_(t_DoubleRange *self, PyObject *args, PyObject *kwds);
          static PyObject *t_DoubleRange_accept(t_DoubleRange *self, PyObject *arg);
          static PyObject *t_DoubleRange_getFilter(t_DoubleRange *self, PyObject *args);
          static PyObject *t_DoubleRange_toString(t_DoubleRange *self, PyObject *args);
          static PyObject *t_DoubleRange_get__max(t_DoubleRange *self, void *data);
          static PyObject *t_DoubleRange_get__maxInclusive(t_DoubleRange *self, void *data);
          static PyObject *t_DoubleRange_get__min(t_DoubleRange *self, void *data);
          static PyObject *t_DoubleRange_get__minInclusive(t_DoubleRange *self, void *data);

          static PyGetSetDef t_DoubleRange__fields_[] = {
            DECLARE_GET_FIELD(t_DoubleRange, max),
            DECLARE_GET_FIELD(t_DoubleRange, maxInclusive),
            DECLARE_GET_FIELD(t_DoubleRange, min),
            DECLARE_GET_FIELD(t_DoubleRange, minInclusive),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_DoubleRange__methods_[] = {
            DECLARE_METHOD(t_DoubleRange, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DoubleRange, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DoubleRange, accept, METH_O),
            DECLARE_METHOD(t_DoubleRange, getFilter, METH_VARARGS),
            DECLARE_METHOD(t_DoubleRange, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(DoubleRange, t_DoubleRange, ::org::apache::lucene::facet::range::Range, DoubleRange, t_DoubleRange_init_, 0, 0, t_DoubleRange__fields_, 0, 0);

          void t_DoubleRange::install(PyObject *module)
          {
            installType(&PY_TYPE(DoubleRange), module, "DoubleRange", 0);
          }

          void t_DoubleRange::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(DoubleRange).tp_dict, "class_", make_descriptor(DoubleRange::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(DoubleRange).tp_dict, "wrapfn_", make_descriptor(t_DoubleRange::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(DoubleRange).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_DoubleRange_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, DoubleRange::initializeClass, 1)))
              return NULL;
            return t_DoubleRange::wrap_Object(DoubleRange(((t_DoubleRange *) arg)->object.this$));
          }
          static PyObject *t_DoubleRange_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, DoubleRange::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_DoubleRange_init_(t_DoubleRange *self, PyObject *args, PyObject *kwds)
          {
            ::java::lang::String a0((jobject) NULL);
            jdouble a1;
            jboolean a2;
            jdouble a3;
            jboolean a4;
            DoubleRange object((jobject) NULL);

            if (!parseArgs(args, "sDZDZ", &a0, &a1, &a2, &a3, &a4))
            {
              INT_CALL(object = DoubleRange(a0, a1, a2, a3, a4));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_DoubleRange_accept(t_DoubleRange *self, PyObject *arg)
          {
            jdouble a0;
            jboolean result;

            if (!parseArg(arg, "D", &a0))
            {
              OBJ_CALL(result = self->object.accept(a0));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError((PyObject *) self, "accept", arg);
            return NULL;
          }

          static PyObject *t_DoubleRange_getFilter(t_DoubleRange *self, PyObject *args)
          {
            ::org::apache::lucene::search::Filter a0((jobject) NULL);
            ::org::apache::lucene::queries::function::ValueSource a1((jobject) NULL);
            ::org::apache::lucene::search::Filter result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::search::Filter::initializeClass, ::org::apache::lucene::queries::function::ValueSource::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.getFilter(a0, a1));
              return ::org::apache::lucene::search::t_Filter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(DoubleRange), (PyObject *) self, "getFilter", args, 2);
          }

          static PyObject *t_DoubleRange_toString(t_DoubleRange *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(DoubleRange), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_DoubleRange_get__max(t_DoubleRange *self, void *data)
          {
            jdouble value;
            OBJ_CALL(value = self->object._get_max());
            return PyFloat_FromDouble((double) value);
          }

          static PyObject *t_DoubleRange_get__maxInclusive(t_DoubleRange *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object._get_maxInclusive());
            Py_RETURN_BOOL(value);
          }

          static PyObject *t_DoubleRange_get__min(t_DoubleRange *self, void *data)
          {
            jdouble value;
            OBJ_CALL(value = self->object._get_min());
            return PyFloat_FromDouble((double) value);
          }

          static PyObject *t_DoubleRange_get__minInclusive(t_DoubleRange *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object._get_minInclusive());
            Py_RETURN_BOOL(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene45/Lucene45Codec.h"
#include "org/apache/lucene/codecs/FieldInfosFormat.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/codecs/LiveDocsFormat.h"
#include "org/apache/lucene/codecs/SegmentInfoFormat.h"
#include "org/apache/lucene/codecs/TermVectorsFormat.h"
#include "org/apache/lucene/codecs/DocValuesFormat.h"
#include "org/apache/lucene/codecs/NormsFormat.h"
#include "org/apache/lucene/codecs/StoredFieldsFormat.h"
#include "org/apache/lucene/codecs/PostingsFormat.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene45 {

          ::java::lang::Class *Lucene45Codec::class$ = NULL;
          jmethodID *Lucene45Codec::mids$ = NULL;
          bool Lucene45Codec::live$ = false;

          jclass Lucene45Codec::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene45/Lucene45Codec");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_docValuesFormat_9a259760] = env->getMethodID(cls, "docValuesFormat", "()Lorg/apache/lucene/codecs/DocValuesFormat;");
              mids$[mid_fieldInfosFormat_82160220] = env->getMethodID(cls, "fieldInfosFormat", "()Lorg/apache/lucene/codecs/FieldInfosFormat;");
              mids$[mid_getDocValuesFormatForField_36ef78ba] = env->getMethodID(cls, "getDocValuesFormatForField", "(Ljava/lang/String;)Lorg/apache/lucene/codecs/DocValuesFormat;");
              mids$[mid_getPostingsFormatForField_19d2f1c6] = env->getMethodID(cls, "getPostingsFormatForField", "(Ljava/lang/String;)Lorg/apache/lucene/codecs/PostingsFormat;");
              mids$[mid_liveDocsFormat_fcc69d9a] = env->getMethodID(cls, "liveDocsFormat", "()Lorg/apache/lucene/codecs/LiveDocsFormat;");
              mids$[mid_normsFormat_03b89e43] = env->getMethodID(cls, "normsFormat", "()Lorg/apache/lucene/codecs/NormsFormat;");
              mids$[mid_postingsFormat_d12d16c8] = env->getMethodID(cls, "postingsFormat", "()Lorg/apache/lucene/codecs/PostingsFormat;");
              mids$[mid_segmentInfoFormat_c24d8633] = env->getMethodID(cls, "segmentInfoFormat", "()Lorg/apache/lucene/codecs/SegmentInfoFormat;");
              mids$[mid_storedFieldsFormat_2b977101] = env->getMethodID(cls, "storedFieldsFormat", "()Lorg/apache/lucene/codecs/StoredFieldsFormat;");
              mids$[mid_termVectorsFormat_bcd1d8b8] = env->getMethodID(cls, "termVectorsFormat", "()Lorg/apache/lucene/codecs/TermVectorsFormat;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene45Codec::Lucene45Codec() : ::org::apache::lucene::codecs::Codec(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::codecs::DocValuesFormat Lucene45Codec::docValuesFormat() const
          {
            return ::org::apache::lucene::codecs::DocValuesFormat(env->callObjectMethod(this$, mids$[mid_docValuesFormat_9a259760]));
          }

          ::org::apache::lucene::codecs::FieldInfosFormat Lucene45Codec::fieldInfosFormat() const
          {
            return ::org::apache::lucene::codecs::FieldInfosFormat(env->callObjectMethod(this$, mids$[mid_fieldInfosFormat_82160220]));
          }

          ::org::apache::lucene::codecs::DocValuesFormat Lucene45Codec::getDocValuesFormatForField(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::codecs::DocValuesFormat(env->callObjectMethod(this$, mids$[mid_getDocValuesFormatForField_36ef78ba], a0.this$));
          }

          ::org::apache::lucene::codecs::PostingsFormat Lucene45Codec::getPostingsFormatForField(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::codecs::PostingsFormat(env->callObjectMethod(this$, mids$[mid_getPostingsFormatForField_19d2f1c6], a0.this$));
          }

          ::org::apache::lucene::codecs::LiveDocsFormat Lucene45Codec::liveDocsFormat() const
          {
            return ::org::apache::lucene::codecs::LiveDocsFormat(env->callObjectMethod(this$, mids$[mid_liveDocsFormat_fcc69d9a]));
          }

          ::org::apache::lucene::codecs::NormsFormat Lucene45Codec::normsFormat() const
          {
            return ::org::apache::lucene::codecs::NormsFormat(env->callObjectMethod(this$, mids$[mid_normsFormat_03b89e43]));
          }

          ::org::apache::lucene::codecs::PostingsFormat Lucene45Codec::postingsFormat() const
          {
            return ::org::apache::lucene::codecs::PostingsFormat(env->callObjectMethod(this$, mids$[mid_postingsFormat_d12d16c8]));
          }

          ::org::apache::lucene::codecs::SegmentInfoFormat Lucene45Codec::segmentInfoFormat() const
          {
            return ::org::apache::lucene::codecs::SegmentInfoFormat(env->callObjectMethod(this$, mids$[mid_segmentInfoFormat_c24d8633]));
          }

          ::org::apache::lucene::codecs::StoredFieldsFormat Lucene45Codec::storedFieldsFormat() const
          {
            return ::org::apache::lucene::codecs::StoredFieldsFormat(env->callObjectMethod(this$, mids$[mid_storedFieldsFormat_2b977101]));
          }

          ::org::apache::lucene::codecs::TermVectorsFormat Lucene45Codec::termVectorsFormat() const
          {
            return ::org::apache::lucene::codecs::TermVectorsFormat(env->callObjectMethod(this$, mids$[mid_termVectorsFormat_bcd1d8b8]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene45 {
          static PyObject *t_Lucene45Codec_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene45Codec_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene45Codec_init_(t_Lucene45Codec *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene45Codec_docValuesFormat(t_Lucene45Codec *self, PyObject *args);
          static PyObject *t_Lucene45Codec_fieldInfosFormat(t_Lucene45Codec *self, PyObject *args);
          static PyObject *t_Lucene45Codec_getDocValuesFormatForField(t_Lucene45Codec *self, PyObject *arg);
          static PyObject *t_Lucene45Codec_getPostingsFormatForField(t_Lucene45Codec *self, PyObject *arg);
          static PyObject *t_Lucene45Codec_liveDocsFormat(t_Lucene45Codec *self, PyObject *args);
          static PyObject *t_Lucene45Codec_normsFormat(t_Lucene45Codec *self, PyObject *args);
          static PyObject *t_Lucene45Codec_postingsFormat(t_Lucene45Codec *self, PyObject *args);
          static PyObject *t_Lucene45Codec_segmentInfoFormat(t_Lucene45Codec *self, PyObject *args);
          static PyObject *t_Lucene45Codec_storedFieldsFormat(t_Lucene45Codec *self, PyObject *args);
          static PyObject *t_Lucene45Codec_termVectorsFormat(t_Lucene45Codec *self, PyObject *args);

          static PyMethodDef t_Lucene45Codec__methods_[] = {
            DECLARE_METHOD(t_Lucene45Codec, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene45Codec, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene45Codec, docValuesFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene45Codec, fieldInfosFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene45Codec, getDocValuesFormatForField, METH_O),
            DECLARE_METHOD(t_Lucene45Codec, getPostingsFormatForField, METH_O),
            DECLARE_METHOD(t_Lucene45Codec, liveDocsFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene45Codec, normsFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene45Codec, postingsFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene45Codec, segmentInfoFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene45Codec, storedFieldsFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene45Codec, termVectorsFormat, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene45Codec, t_Lucene45Codec, ::org::apache::lucene::codecs::Codec, Lucene45Codec, t_Lucene45Codec_init_, 0, 0, 0, 0, 0);

          void t_Lucene45Codec::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene45Codec), module, "Lucene45Codec", 0);
          }

          void t_Lucene45Codec::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene45Codec).tp_dict, "class_", make_descriptor(Lucene45Codec::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene45Codec).tp_dict, "wrapfn_", make_descriptor(t_Lucene45Codec::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene45Codec).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lucene45Codec_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene45Codec::initializeClass, 1)))
              return NULL;
            return t_Lucene45Codec::wrap_Object(Lucene45Codec(((t_Lucene45Codec *) arg)->object.this$));
          }
          static PyObject *t_Lucene45Codec_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene45Codec::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene45Codec_init_(t_Lucene45Codec *self, PyObject *args, PyObject *kwds)
          {
            Lucene45Codec object((jobject) NULL);

            INT_CALL(object = Lucene45Codec());
            self->object = object;

            return 0;
          }

          static PyObject *t_Lucene45Codec_docValuesFormat(t_Lucene45Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::DocValuesFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.docValuesFormat());
              return ::org::apache::lucene::codecs::t_DocValuesFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene45Codec), (PyObject *) self, "docValuesFormat", args, 2);
          }

          static PyObject *t_Lucene45Codec_fieldInfosFormat(t_Lucene45Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::FieldInfosFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.fieldInfosFormat());
              return ::org::apache::lucene::codecs::t_FieldInfosFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene45Codec), (PyObject *) self, "fieldInfosFormat", args, 2);
          }

          static PyObject *t_Lucene45Codec_getDocValuesFormatForField(t_Lucene45Codec *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::codecs::DocValuesFormat result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.getDocValuesFormatForField(a0));
              return ::org::apache::lucene::codecs::t_DocValuesFormat::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getDocValuesFormatForField", arg);
            return NULL;
          }

          static PyObject *t_Lucene45Codec_getPostingsFormatForField(t_Lucene45Codec *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::codecs::PostingsFormat result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.getPostingsFormatForField(a0));
              return ::org::apache::lucene::codecs::t_PostingsFormat::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getPostingsFormatForField", arg);
            return NULL;
          }

          static PyObject *t_Lucene45Codec_liveDocsFormat(t_Lucene45Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::LiveDocsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.liveDocsFormat());
              return ::org::apache::lucene::codecs::t_LiveDocsFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene45Codec), (PyObject *) self, "liveDocsFormat", args, 2);
          }

          static PyObject *t_Lucene45Codec_normsFormat(t_Lucene45Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::NormsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.normsFormat());
              return ::org::apache::lucene::codecs::t_NormsFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene45Codec), (PyObject *) self, "normsFormat", args, 2);
          }

          static PyObject *t_Lucene45Codec_postingsFormat(t_Lucene45Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::PostingsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.postingsFormat());
              return ::org::apache::lucene::codecs::t_PostingsFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene45Codec), (PyObject *) self, "postingsFormat", args, 2);
          }

          static PyObject *t_Lucene45Codec_segmentInfoFormat(t_Lucene45Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::SegmentInfoFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.segmentInfoFormat());
              return ::org::apache::lucene::codecs::t_SegmentInfoFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene45Codec), (PyObject *) self, "segmentInfoFormat", args, 2);
          }

          static PyObject *t_Lucene45Codec_storedFieldsFormat(t_Lucene45Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::StoredFieldsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.storedFieldsFormat());
              return ::org::apache::lucene::codecs::t_StoredFieldsFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene45Codec), (PyObject *) self, "storedFieldsFormat", args, 2);
          }

          static PyObject *t_Lucene45Codec_termVectorsFormat(t_Lucene45Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::TermVectorsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.termVectorsFormat());
              return ::org::apache::lucene::codecs::t_TermVectorsFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene45Codec), (PyObject *) self, "termVectorsFormat", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/MappingMultiDocsAndPositionsEnum.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/MultiDocsAndPositionsEnum$EnumWithSlice.h"
#include "org/apache/lucene/index/MergeState.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {

        ::java::lang::Class *MappingMultiDocsAndPositionsEnum::class$ = NULL;
        jmethodID *MappingMultiDocsAndPositionsEnum::mids$ = NULL;
        bool MappingMultiDocsAndPositionsEnum::live$ = false;

        jclass MappingMultiDocsAndPositionsEnum::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/MappingMultiDocsAndPositionsEnum");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_advance_39c7bd23] = env->getMethodID(cls, "advance", "(I)I");
            mids$[mid_cost_54c6a17a] = env->getMethodID(cls, "cost", "()J");
            mids$[mid_docID_54c6a179] = env->getMethodID(cls, "docID", "()I");
            mids$[mid_endOffset_54c6a179] = env->getMethodID(cls, "endOffset", "()I");
            mids$[mid_freq_54c6a179] = env->getMethodID(cls, "freq", "()I");
            mids$[mid_getNumSubs_54c6a179] = env->getMethodID(cls, "getNumSubs", "()I");
            mids$[mid_getPayload_4ae19461] = env->getMethodID(cls, "getPayload", "()Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_getSubs_451af4aa] = env->getMethodID(cls, "getSubs", "()[Lorg/apache/lucene/index/MultiDocsAndPositionsEnum$EnumWithSlice;");
            mids$[mid_nextDoc_54c6a179] = env->getMethodID(cls, "nextDoc", "()I");
            mids$[mid_nextPosition_54c6a179] = env->getMethodID(cls, "nextPosition", "()I");
            mids$[mid_setMergeState_fd0cfdf4] = env->getMethodID(cls, "setMergeState", "(Lorg/apache/lucene/index/MergeState;)V");
            mids$[mid_startOffset_54c6a179] = env->getMethodID(cls, "startOffset", "()I");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        MappingMultiDocsAndPositionsEnum::MappingMultiDocsAndPositionsEnum() : ::org::apache::lucene::index::DocsAndPositionsEnum(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jint MappingMultiDocsAndPositionsEnum::advance(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_advance_39c7bd23], a0);
        }

        jlong MappingMultiDocsAndPositionsEnum::cost() const
        {
          return env->callLongMethod(this$, mids$[mid_cost_54c6a17a]);
        }

        jint MappingMultiDocsAndPositionsEnum::docID() const
        {
          return env->callIntMethod(this$, mids$[mid_docID_54c6a179]);
        }

        jint MappingMultiDocsAndPositionsEnum::endOffset() const
        {
          return env->callIntMethod(this$, mids$[mid_endOffset_54c6a179]);
        }

        jint MappingMultiDocsAndPositionsEnum::freq() const
        {
          return env->callIntMethod(this$, mids$[mid_freq_54c6a179]);
        }

        jint MappingMultiDocsAndPositionsEnum::getNumSubs() const
        {
          return env->callIntMethod(this$, mids$[mid_getNumSubs_54c6a179]);
        }

        ::org::apache::lucene::util::BytesRef MappingMultiDocsAndPositionsEnum::getPayload() const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_getPayload_4ae19461]));
        }

        JArray< ::org::apache::lucene::index::MultiDocsAndPositionsEnum$EnumWithSlice > MappingMultiDocsAndPositionsEnum::getSubs() const
        {
          return JArray< ::org::apache::lucene::index::MultiDocsAndPositionsEnum$EnumWithSlice >(env->callObjectMethod(this$, mids$[mid_getSubs_451af4aa]));
        }

        jint MappingMultiDocsAndPositionsEnum::nextDoc() const
        {
          return env->callIntMethod(this$, mids$[mid_nextDoc_54c6a179]);
        }

        jint MappingMultiDocsAndPositionsEnum::nextPosition() const
        {
          return env->callIntMethod(this$, mids$[mid_nextPosition_54c6a179]);
        }

        void MappingMultiDocsAndPositionsEnum::setMergeState(const ::org::apache::lucene::index::MergeState & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setMergeState_fd0cfdf4], a0.this$);
        }

        jint MappingMultiDocsAndPositionsEnum::startOffset() const
        {
          return env->callIntMethod(this$, mids$[mid_startOffset_54c6a179]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        static PyObject *t_MappingMultiDocsAndPositionsEnum_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MappingMultiDocsAndPositionsEnum_instance_(PyTypeObject *type, PyObject *arg);
        static int t_MappingMultiDocsAndPositionsEnum_init_(t_MappingMultiDocsAndPositionsEnum *self, PyObject *args, PyObject *kwds);
        static PyObject *t_MappingMultiDocsAndPositionsEnum_advance(t_MappingMultiDocsAndPositionsEnum *self, PyObject *args);
        static PyObject *t_MappingMultiDocsAndPositionsEnum_cost(t_MappingMultiDocsAndPositionsEnum *self, PyObject *args);
        static PyObject *t_MappingMultiDocsAndPositionsEnum_docID(t_MappingMultiDocsAndPositionsEnum *self, PyObject *args);
        static PyObject *t_MappingMultiDocsAndPositionsEnum_endOffset(t_MappingMultiDocsAndPositionsEnum *self, PyObject *args);
        static PyObject *t_MappingMultiDocsAndPositionsEnum_freq(t_MappingMultiDocsAndPositionsEnum *self, PyObject *args);
        static PyObject *t_MappingMultiDocsAndPositionsEnum_getNumSubs(t_MappingMultiDocsAndPositionsEnum *self);
        static PyObject *t_MappingMultiDocsAndPositionsEnum_getPayload(t_MappingMultiDocsAndPositionsEnum *self, PyObject *args);
        static PyObject *t_MappingMultiDocsAndPositionsEnum_getSubs(t_MappingMultiDocsAndPositionsEnum *self);
        static PyObject *t_MappingMultiDocsAndPositionsEnum_nextDoc(t_MappingMultiDocsAndPositionsEnum *self, PyObject *args);
        static PyObject *t_MappingMultiDocsAndPositionsEnum_nextPosition(t_MappingMultiDocsAndPositionsEnum *self, PyObject *args);
        static PyObject *t_MappingMultiDocsAndPositionsEnum_setMergeState(t_MappingMultiDocsAndPositionsEnum *self, PyObject *arg);
        static PyObject *t_MappingMultiDocsAndPositionsEnum_startOffset(t_MappingMultiDocsAndPositionsEnum *self, PyObject *args);
        static int t_MappingMultiDocsAndPositionsEnum_set__mergeState(t_MappingMultiDocsAndPositionsEnum *self, PyObject *arg, void *data);
        static PyObject *t_MappingMultiDocsAndPositionsEnum_get__numSubs(t_MappingMultiDocsAndPositionsEnum *self, void *data);
        static PyObject *t_MappingMultiDocsAndPositionsEnum_get__payload(t_MappingMultiDocsAndPositionsEnum *self, void *data);
        static PyObject *t_MappingMultiDocsAndPositionsEnum_get__subs(t_MappingMultiDocsAndPositionsEnum *self, void *data);
        static PyGetSetDef t_MappingMultiDocsAndPositionsEnum__fields_[] = {
          DECLARE_SET_FIELD(t_MappingMultiDocsAndPositionsEnum, mergeState),
          DECLARE_GET_FIELD(t_MappingMultiDocsAndPositionsEnum, numSubs),
          DECLARE_GET_FIELD(t_MappingMultiDocsAndPositionsEnum, payload),
          DECLARE_GET_FIELD(t_MappingMultiDocsAndPositionsEnum, subs),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_MappingMultiDocsAndPositionsEnum__methods_[] = {
          DECLARE_METHOD(t_MappingMultiDocsAndPositionsEnum, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MappingMultiDocsAndPositionsEnum, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MappingMultiDocsAndPositionsEnum, advance, METH_VARARGS),
          DECLARE_METHOD(t_MappingMultiDocsAndPositionsEnum, cost, METH_VARARGS),
          DECLARE_METHOD(t_MappingMultiDocsAndPositionsEnum, docID, METH_VARARGS),
          DECLARE_METHOD(t_MappingMultiDocsAndPositionsEnum, endOffset, METH_VARARGS),
          DECLARE_METHOD(t_MappingMultiDocsAndPositionsEnum, freq, METH_VARARGS),
          DECLARE_METHOD(t_MappingMultiDocsAndPositionsEnum, getNumSubs, METH_NOARGS),
          DECLARE_METHOD(t_MappingMultiDocsAndPositionsEnum, getPayload, METH_VARARGS),
          DECLARE_METHOD(t_MappingMultiDocsAndPositionsEnum, getSubs, METH_NOARGS),
          DECLARE_METHOD(t_MappingMultiDocsAndPositionsEnum, nextDoc, METH_VARARGS),
          DECLARE_METHOD(t_MappingMultiDocsAndPositionsEnum, nextPosition, METH_VARARGS),
          DECLARE_METHOD(t_MappingMultiDocsAndPositionsEnum, setMergeState, METH_O),
          DECLARE_METHOD(t_MappingMultiDocsAndPositionsEnum, startOffset, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MappingMultiDocsAndPositionsEnum, t_MappingMultiDocsAndPositionsEnum, ::org::apache::lucene::index::DocsAndPositionsEnum, MappingMultiDocsAndPositionsEnum, t_MappingMultiDocsAndPositionsEnum_init_, 0, 0, t_MappingMultiDocsAndPositionsEnum__fields_, 0, 0);

        void t_MappingMultiDocsAndPositionsEnum::install(PyObject *module)
        {
          installType(&PY_TYPE(MappingMultiDocsAndPositionsEnum), module, "MappingMultiDocsAndPositionsEnum", 0);
        }

        void t_MappingMultiDocsAndPositionsEnum::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MappingMultiDocsAndPositionsEnum).tp_dict, "class_", make_descriptor(MappingMultiDocsAndPositionsEnum::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MappingMultiDocsAndPositionsEnum).tp_dict, "wrapfn_", make_descriptor(t_MappingMultiDocsAndPositionsEnum::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MappingMultiDocsAndPositionsEnum).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MappingMultiDocsAndPositionsEnum_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MappingMultiDocsAndPositionsEnum::initializeClass, 1)))
            return NULL;
          return t_MappingMultiDocsAndPositionsEnum::wrap_Object(MappingMultiDocsAndPositionsEnum(((t_MappingMultiDocsAndPositionsEnum *) arg)->object.this$));
        }
        static PyObject *t_MappingMultiDocsAndPositionsEnum_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MappingMultiDocsAndPositionsEnum::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_MappingMultiDocsAndPositionsEnum_init_(t_MappingMultiDocsAndPositionsEnum *self, PyObject *args, PyObject *kwds)
        {
          MappingMultiDocsAndPositionsEnum object((jobject) NULL);

          INT_CALL(object = MappingMultiDocsAndPositionsEnum());
          self->object = object;

          return 0;
        }

        static PyObject *t_MappingMultiDocsAndPositionsEnum_advance(t_MappingMultiDocsAndPositionsEnum *self, PyObject *args)
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.advance(a0));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(MappingMultiDocsAndPositionsEnum), (PyObject *) self, "advance", args, 2);
        }

        static PyObject *t_MappingMultiDocsAndPositionsEnum_cost(t_MappingMultiDocsAndPositionsEnum *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.cost());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(MappingMultiDocsAndPositionsEnum), (PyObject *) self, "cost", args, 2);
        }

        static PyObject *t_MappingMultiDocsAndPositionsEnum_docID(t_MappingMultiDocsAndPositionsEnum *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.docID());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(MappingMultiDocsAndPositionsEnum), (PyObject *) self, "docID", args, 2);
        }

        static PyObject *t_MappingMultiDocsAndPositionsEnum_endOffset(t_MappingMultiDocsAndPositionsEnum *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.endOffset());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(MappingMultiDocsAndPositionsEnum), (PyObject *) self, "endOffset", args, 2);
        }

        static PyObject *t_MappingMultiDocsAndPositionsEnum_freq(t_MappingMultiDocsAndPositionsEnum *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.freq());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(MappingMultiDocsAndPositionsEnum), (PyObject *) self, "freq", args, 2);
        }

        static PyObject *t_MappingMultiDocsAndPositionsEnum_getNumSubs(t_MappingMultiDocsAndPositionsEnum *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getNumSubs());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_MappingMultiDocsAndPositionsEnum_getPayload(t_MappingMultiDocsAndPositionsEnum *self, PyObject *args)
        {
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getPayload());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(MappingMultiDocsAndPositionsEnum), (PyObject *) self, "getPayload", args, 2);
        }

        static PyObject *t_MappingMultiDocsAndPositionsEnum_getSubs(t_MappingMultiDocsAndPositionsEnum *self)
        {
          JArray< ::org::apache::lucene::index::MultiDocsAndPositionsEnum$EnumWithSlice > result((jobject) NULL);
          OBJ_CALL(result = self->object.getSubs());
          return JArray<jobject>(result.this$).wrap(::org::apache::lucene::index::t_MultiDocsAndPositionsEnum$EnumWithSlice::wrap_jobject);
        }

        static PyObject *t_MappingMultiDocsAndPositionsEnum_nextDoc(t_MappingMultiDocsAndPositionsEnum *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.nextDoc());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(MappingMultiDocsAndPositionsEnum), (PyObject *) self, "nextDoc", args, 2);
        }

        static PyObject *t_MappingMultiDocsAndPositionsEnum_nextPosition(t_MappingMultiDocsAndPositionsEnum *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.nextPosition());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(MappingMultiDocsAndPositionsEnum), (PyObject *) self, "nextPosition", args, 2);
        }

        static PyObject *t_MappingMultiDocsAndPositionsEnum_setMergeState(t_MappingMultiDocsAndPositionsEnum *self, PyObject *arg)
        {
          ::org::apache::lucene::index::MergeState a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::MergeState::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setMergeState(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setMergeState", arg);
          return NULL;
        }

        static PyObject *t_MappingMultiDocsAndPositionsEnum_startOffset(t_MappingMultiDocsAndPositionsEnum *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.startOffset());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(MappingMultiDocsAndPositionsEnum), (PyObject *) self, "startOffset", args, 2);
        }

        static int t_MappingMultiDocsAndPositionsEnum_set__mergeState(t_MappingMultiDocsAndPositionsEnum *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::index::MergeState value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::index::MergeState::initializeClass, &value))
            {
              INT_CALL(self->object.setMergeState(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "mergeState", arg);
          return -1;
        }

        static PyObject *t_MappingMultiDocsAndPositionsEnum_get__numSubs(t_MappingMultiDocsAndPositionsEnum *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getNumSubs());
          return PyInt_FromLong((long) value);
        }

        static PyObject *t_MappingMultiDocsAndPositionsEnum_get__payload(t_MappingMultiDocsAndPositionsEnum *self, void *data)
        {
          ::org::apache::lucene::util::BytesRef value((jobject) NULL);
          OBJ_CALL(value = self->object.getPayload());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(value);
        }

        static PyObject *t_MappingMultiDocsAndPositionsEnum_get__subs(t_MappingMultiDocsAndPositionsEnum *self, void *data)
        {
          JArray< ::org::apache::lucene::index::MultiDocsAndPositionsEnum$EnumWithSlice > value((jobject) NULL);
          OBJ_CALL(value = self->object.getSubs());
          return JArray<jobject>(value.this$).wrap(::org::apache::lucene::index::t_MultiDocsAndPositionsEnum$EnumWithSlice::wrap_jobject);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/packed/AbstractBlockPackedWriter.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {

          ::java::lang::Class *AbstractBlockPackedWriter::class$ = NULL;
          jmethodID *AbstractBlockPackedWriter::mids$ = NULL;
          bool AbstractBlockPackedWriter::live$ = false;

          jclass AbstractBlockPackedWriter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/packed/AbstractBlockPackedWriter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f4663c33] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/DataOutput;I)V");
              mids$[mid_add_0ee6df2f] = env->getMethodID(cls, "add", "(J)V");
              mids$[mid_finish_54c6a166] = env->getMethodID(cls, "finish", "()V");
              mids$[mid_ord_54c6a17a] = env->getMethodID(cls, "ord", "()J");
              mids$[mid_reset_27875f57] = env->getMethodID(cls, "reset", "(Lorg/apache/lucene/store/DataOutput;)V");
              mids$[mid_flush_54c6a166] = env->getMethodID(cls, "flush", "()V");
              mids$[mid_writeValues_39c7bd3c] = env->getMethodID(cls, "writeValues", "(I)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          AbstractBlockPackedWriter::AbstractBlockPackedWriter(const ::org::apache::lucene::store::DataOutput & a0, jint a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f4663c33, a0.this$, a1)) {}

          void AbstractBlockPackedWriter::add(jlong a0) const
          {
            env->callVoidMethod(this$, mids$[mid_add_0ee6df2f], a0);
          }

          void AbstractBlockPackedWriter::finish() const
          {
            env->callVoidMethod(this$, mids$[mid_finish_54c6a166]);
          }

          jlong AbstractBlockPackedWriter::ord() const
          {
            return env->callLongMethod(this$, mids$[mid_ord_54c6a17a]);
          }

          void AbstractBlockPackedWriter::reset(const ::org::apache::lucene::store::DataOutput & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_reset_27875f57], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {
          static PyObject *t_AbstractBlockPackedWriter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AbstractBlockPackedWriter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_AbstractBlockPackedWriter_init_(t_AbstractBlockPackedWriter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_AbstractBlockPackedWriter_add(t_AbstractBlockPackedWriter *self, PyObject *arg);
          static PyObject *t_AbstractBlockPackedWriter_finish(t_AbstractBlockPackedWriter *self);
          static PyObject *t_AbstractBlockPackedWriter_ord(t_AbstractBlockPackedWriter *self);
          static PyObject *t_AbstractBlockPackedWriter_reset(t_AbstractBlockPackedWriter *self, PyObject *arg);

          static PyMethodDef t_AbstractBlockPackedWriter__methods_[] = {
            DECLARE_METHOD(t_AbstractBlockPackedWriter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AbstractBlockPackedWriter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AbstractBlockPackedWriter, add, METH_O),
            DECLARE_METHOD(t_AbstractBlockPackedWriter, finish, METH_NOARGS),
            DECLARE_METHOD(t_AbstractBlockPackedWriter, ord, METH_NOARGS),
            DECLARE_METHOD(t_AbstractBlockPackedWriter, reset, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(AbstractBlockPackedWriter, t_AbstractBlockPackedWriter, ::java::lang::Object, AbstractBlockPackedWriter, t_AbstractBlockPackedWriter_init_, 0, 0, 0, 0, 0);

          void t_AbstractBlockPackedWriter::install(PyObject *module)
          {
            installType(&PY_TYPE(AbstractBlockPackedWriter), module, "AbstractBlockPackedWriter", 0);
          }

          void t_AbstractBlockPackedWriter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(AbstractBlockPackedWriter).tp_dict, "class_", make_descriptor(AbstractBlockPackedWriter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(AbstractBlockPackedWriter).tp_dict, "wrapfn_", make_descriptor(t_AbstractBlockPackedWriter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(AbstractBlockPackedWriter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_AbstractBlockPackedWriter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, AbstractBlockPackedWriter::initializeClass, 1)))
              return NULL;
            return t_AbstractBlockPackedWriter::wrap_Object(AbstractBlockPackedWriter(((t_AbstractBlockPackedWriter *) arg)->object.this$));
          }
          static PyObject *t_AbstractBlockPackedWriter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, AbstractBlockPackedWriter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_AbstractBlockPackedWriter_init_(t_AbstractBlockPackedWriter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::store::DataOutput a0((jobject) NULL);
            jint a1;
            AbstractBlockPackedWriter object((jobject) NULL);

            if (!parseArgs(args, "kI", ::org::apache::lucene::store::DataOutput::initializeClass, &a0, &a1))
            {
              INT_CALL(object = AbstractBlockPackedWriter(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_AbstractBlockPackedWriter_add(t_AbstractBlockPackedWriter *self, PyObject *arg)
          {
            jlong a0;

            if (!parseArg(arg, "J", &a0))
            {
              OBJ_CALL(self->object.add(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "add", arg);
            return NULL;
          }

          static PyObject *t_AbstractBlockPackedWriter_finish(t_AbstractBlockPackedWriter *self)
          {
            OBJ_CALL(self->object.finish());
            Py_RETURN_NONE;
          }

          static PyObject *t_AbstractBlockPackedWriter_ord(t_AbstractBlockPackedWriter *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.ord());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_AbstractBlockPackedWriter_reset(t_AbstractBlockPackedWriter *self, PyObject *arg)
          {
            ::org::apache::lucene::store::DataOutput a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::store::DataOutput::initializeClass, &a0))
            {
              OBJ_CALL(self->object.reset(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "reset", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/synonym/WordnetSynonymParser.h"
#include "java/io/Reader.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace synonym {

          ::java::lang::Class *WordnetSynonymParser::class$ = NULL;
          jmethodID *WordnetSynonymParser::mids$ = NULL;
          bool WordnetSynonymParser::live$ = false;

          jclass WordnetSynonymParser::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/synonym/WordnetSynonymParser");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_702f1f56] = env->getMethodID(cls, "<init>", "(ZZLorg/apache/lucene/analysis/Analyzer;)V");
              mids$[mid_parse_cf2e3c10] = env->getMethodID(cls, "parse", "(Ljava/io/Reader;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          WordnetSynonymParser::WordnetSynonymParser(jboolean a0, jboolean a1, const ::org::apache::lucene::analysis::Analyzer & a2) : ::org::apache::lucene::analysis::synonym::SynonymMap$Parser(env->newObject(initializeClass, &mids$, mid_init$_702f1f56, a0, a1, a2.this$)) {}

          void WordnetSynonymParser::parse(const ::java::io::Reader & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_parse_cf2e3c10], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace synonym {
          static PyObject *t_WordnetSynonymParser_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_WordnetSynonymParser_instance_(PyTypeObject *type, PyObject *arg);
          static int t_WordnetSynonymParser_init_(t_WordnetSynonymParser *self, PyObject *args, PyObject *kwds);
          static PyObject *t_WordnetSynonymParser_parse(t_WordnetSynonymParser *self, PyObject *args);

          static PyMethodDef t_WordnetSynonymParser__methods_[] = {
            DECLARE_METHOD(t_WordnetSynonymParser, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_WordnetSynonymParser, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_WordnetSynonymParser, parse, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(WordnetSynonymParser, t_WordnetSynonymParser, ::org::apache::lucene::analysis::synonym::SynonymMap$Parser, WordnetSynonymParser, t_WordnetSynonymParser_init_, 0, 0, 0, 0, 0);

          void t_WordnetSynonymParser::install(PyObject *module)
          {
            installType(&PY_TYPE(WordnetSynonymParser), module, "WordnetSynonymParser", 0);
          }

          void t_WordnetSynonymParser::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(WordnetSynonymParser).tp_dict, "class_", make_descriptor(WordnetSynonymParser::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(WordnetSynonymParser).tp_dict, "wrapfn_", make_descriptor(t_WordnetSynonymParser::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(WordnetSynonymParser).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_WordnetSynonymParser_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, WordnetSynonymParser::initializeClass, 1)))
              return NULL;
            return t_WordnetSynonymParser::wrap_Object(WordnetSynonymParser(((t_WordnetSynonymParser *) arg)->object.this$));
          }
          static PyObject *t_WordnetSynonymParser_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, WordnetSynonymParser::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_WordnetSynonymParser_init_(t_WordnetSynonymParser *self, PyObject *args, PyObject *kwds)
          {
            jboolean a0;
            jboolean a1;
            ::org::apache::lucene::analysis::Analyzer a2((jobject) NULL);
            WordnetSynonymParser object((jobject) NULL);

            if (!parseArgs(args, "ZZk", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1, &a2))
            {
              INT_CALL(object = WordnetSynonymParser(a0, a1, a2));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_WordnetSynonymParser_parse(t_WordnetSynonymParser *self, PyObject *args)
          {
            ::java::io::Reader a0((jobject) NULL);

            if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
            {
              OBJ_CALL(self->object.parse(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(WordnetSynonymParser), (PyObject *) self, "parse", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/hunspell/Dictionary.h"
#include "java/util/List.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace hunspell {

          ::java::lang::Class *Dictionary::class$ = NULL;
          jmethodID *Dictionary::mids$ = NULL;
          bool Dictionary::live$ = false;

          jclass Dictionary::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/hunspell/Dictionary");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_adde7c2e] = env->getMethodID(cls, "<init>", "(Ljava/io/InputStream;Ljava/io/InputStream;)V");
              mids$[mid_init$_1134ad3e] = env->getMethodID(cls, "<init>", "(Ljava/io/InputStream;Ljava/util/List;Z)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Dictionary::Dictionary(const ::java::io::InputStream & a0, const ::java::io::InputStream & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_adde7c2e, a0.this$, a1.this$)) {}

          Dictionary::Dictionary(const ::java::io::InputStream & a0, const ::java::util::List & a1, jboolean a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_1134ad3e, a0.this$, a1.this$, a2)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace hunspell {
          static PyObject *t_Dictionary_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Dictionary_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Dictionary_init_(t_Dictionary *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_Dictionary__methods_[] = {
            DECLARE_METHOD(t_Dictionary, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Dictionary, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Dictionary, t_Dictionary, ::java::lang::Object, Dictionary, t_Dictionary_init_, 0, 0, 0, 0, 0);

          void t_Dictionary::install(PyObject *module)
          {
            installType(&PY_TYPE(Dictionary), module, "Dictionary", 0);
          }

          void t_Dictionary::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Dictionary).tp_dict, "class_", make_descriptor(Dictionary::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Dictionary).tp_dict, "wrapfn_", make_descriptor(t_Dictionary::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Dictionary).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Dictionary_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Dictionary::initializeClass, 1)))
              return NULL;
            return t_Dictionary::wrap_Object(Dictionary(((t_Dictionary *) arg)->object.this$));
          }
          static PyObject *t_Dictionary_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Dictionary::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Dictionary_init_(t_Dictionary *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::java::io::InputStream a0((jobject) NULL);
                ::java::io::InputStream a1((jobject) NULL);
                Dictionary object((jobject) NULL);

                if (!parseArgs(args, "kk", ::java::io::InputStream::initializeClass, ::java::io::InputStream::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = Dictionary(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::java::io::InputStream a0((jobject) NULL);
                ::java::util::List a1((jobject) NULL);
                PyTypeObject **p1;
                jboolean a2;
                Dictionary object((jobject) NULL);

                if (!parseArgs(args, "kKZ", ::java::io::InputStream::initializeClass, ::java::util::List::initializeClass, &a0, &a1, &p1, ::java::util::t_List::parameters_, &a2))
                {
                  INT_CALL(object = Dictionary(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/FieldInvertState.h"
#include "org/apache/lucene/util/AttributeSource.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *FieldInvertState::class$ = NULL;
        jmethodID *FieldInvertState::mids$ = NULL;
        bool FieldInvertState::live$ = false;

        jclass FieldInvertState::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/FieldInvertState");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
            mids$[mid_init$_9f4a1ba9] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;IIIIF)V");
            mids$[mid_getAttributeSource_f901022b] = env->getMethodID(cls, "getAttributeSource", "()Lorg/apache/lucene/util/AttributeSource;");
            mids$[mid_getBoost_54c6a176] = env->getMethodID(cls, "getBoost", "()F");
            mids$[mid_getLength_54c6a179] = env->getMethodID(cls, "getLength", "()I");
            mids$[mid_getMaxTermFrequency_54c6a179] = env->getMethodID(cls, "getMaxTermFrequency", "()I");
            mids$[mid_getName_14c7b5c5] = env->getMethodID(cls, "getName", "()Ljava/lang/String;");
            mids$[mid_getNumOverlap_54c6a179] = env->getMethodID(cls, "getNumOverlap", "()I");
            mids$[mid_getOffset_54c6a179] = env->getMethodID(cls, "getOffset", "()I");
            mids$[mid_getPosition_54c6a179] = env->getMethodID(cls, "getPosition", "()I");
            mids$[mid_getUniqueTermCount_54c6a179] = env->getMethodID(cls, "getUniqueTermCount", "()I");
            mids$[mid_setBoost_06298cab] = env->getMethodID(cls, "setBoost", "(F)V");
            mids$[mid_setLength_39c7bd3c] = env->getMethodID(cls, "setLength", "(I)V");
            mids$[mid_setNumOverlap_39c7bd3c] = env->getMethodID(cls, "setNumOverlap", "(I)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FieldInvertState::FieldInvertState(const ::java::lang::String & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

        FieldInvertState::FieldInvertState(const ::java::lang::String & a0, jint a1, jint a2, jint a3, jint a4, jfloat a5) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_9f4a1ba9, a0.this$, a1, a2, a3, a4, a5)) {}

        ::org::apache::lucene::util::AttributeSource FieldInvertState::getAttributeSource() const
        {
          return ::org::apache::lucene::util::AttributeSource(env->callObjectMethod(this$, mids$[mid_getAttributeSource_f901022b]));
        }

        jfloat FieldInvertState::getBoost() const
        {
          return env->callFloatMethod(this$, mids$[mid_getBoost_54c6a176]);
        }

        jint FieldInvertState::getLength() const
        {
          return env->callIntMethod(this$, mids$[mid_getLength_54c6a179]);
        }

        jint FieldInvertState::getMaxTermFrequency() const
        {
          return env->callIntMethod(this$, mids$[mid_getMaxTermFrequency_54c6a179]);
        }

        ::java::lang::String FieldInvertState::getName() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getName_14c7b5c5]));
        }

        jint FieldInvertState::getNumOverlap() const
        {
          return env->callIntMethod(this$, mids$[mid_getNumOverlap_54c6a179]);
        }

        jint FieldInvertState::getOffset() const
        {
          return env->callIntMethod(this$, mids$[mid_getOffset_54c6a179]);
        }

        jint FieldInvertState::getPosition() const
        {
          return env->callIntMethod(this$, mids$[mid_getPosition_54c6a179]);
        }

        jint FieldInvertState::getUniqueTermCount() const
        {
          return env->callIntMethod(this$, mids$[mid_getUniqueTermCount_54c6a179]);
        }

        void FieldInvertState::setBoost(jfloat a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setBoost_06298cab], a0);
        }

        void FieldInvertState::setLength(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setLength_39c7bd3c], a0);
        }

        void FieldInvertState::setNumOverlap(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setNumOverlap_39c7bd3c], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_FieldInvertState_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldInvertState_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FieldInvertState_init_(t_FieldInvertState *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FieldInvertState_getAttributeSource(t_FieldInvertState *self);
        static PyObject *t_FieldInvertState_getBoost(t_FieldInvertState *self);
        static PyObject *t_FieldInvertState_getLength(t_FieldInvertState *self);
        static PyObject *t_FieldInvertState_getMaxTermFrequency(t_FieldInvertState *self);
        static PyObject *t_FieldInvertState_getName(t_FieldInvertState *self);
        static PyObject *t_FieldInvertState_getNumOverlap(t_FieldInvertState *self);
        static PyObject *t_FieldInvertState_getOffset(t_FieldInvertState *self);
        static PyObject *t_FieldInvertState_getPosition(t_FieldInvertState *self);
        static PyObject *t_FieldInvertState_getUniqueTermCount(t_FieldInvertState *self);
        static PyObject *t_FieldInvertState_setBoost(t_FieldInvertState *self, PyObject *arg);
        static PyObject *t_FieldInvertState_setLength(t_FieldInvertState *self, PyObject *arg);
        static PyObject *t_FieldInvertState_setNumOverlap(t_FieldInvertState *self, PyObject *arg);
        static PyObject *t_FieldInvertState_get__attributeSource(t_FieldInvertState *self, void *data);
        static PyObject *t_FieldInvertState_get__boost(t_FieldInvertState *self, void *data);
        static int t_FieldInvertState_set__boost(t_FieldInvertState *self, PyObject *arg, void *data);
        static PyObject *t_FieldInvertState_get__length(t_FieldInvertState *self, void *data);
        static int t_FieldInvertState_set__length(t_FieldInvertState *self, PyObject *arg, void *data);
        static PyObject *t_FieldInvertState_get__maxTermFrequency(t_FieldInvertState *self, void *data);
        static PyObject *t_FieldInvertState_get__name(t_FieldInvertState *self, void *data);
        static PyObject *t_FieldInvertState_get__numOverlap(t_FieldInvertState *self, void *data);
        static int t_FieldInvertState_set__numOverlap(t_FieldInvertState *self, PyObject *arg, void *data);
        static PyObject *t_FieldInvertState_get__offset(t_FieldInvertState *self, void *data);
        static PyObject *t_FieldInvertState_get__position(t_FieldInvertState *self, void *data);
        static PyObject *t_FieldInvertState_get__uniqueTermCount(t_FieldInvertState *self, void *data);
        static PyGetSetDef t_FieldInvertState__fields_[] = {
          DECLARE_GET_FIELD(t_FieldInvertState, attributeSource),
          DECLARE_GETSET_FIELD(t_FieldInvertState, boost),
          DECLARE_GETSET_FIELD(t_FieldInvertState, length),
          DECLARE_GET_FIELD(t_FieldInvertState, maxTermFrequency),
          DECLARE_GET_FIELD(t_FieldInvertState, name),
          DECLARE_GETSET_FIELD(t_FieldInvertState, numOverlap),
          DECLARE_GET_FIELD(t_FieldInvertState, offset),
          DECLARE_GET_FIELD(t_FieldInvertState, position),
          DECLARE_GET_FIELD(t_FieldInvertState, uniqueTermCount),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FieldInvertState__methods_[] = {
          DECLARE_METHOD(t_FieldInvertState, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldInvertState, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldInvertState, getAttributeSource, METH_NOARGS),
          DECLARE_METHOD(t_FieldInvertState, getBoost, METH_NOARGS),
          DECLARE_METHOD(t_FieldInvertState, getLength, METH_NOARGS),
          DECLARE_METHOD(t_FieldInvertState, getMaxTermFrequency, METH_NOARGS),
          DECLARE_METHOD(t_FieldInvertState, getName, METH_NOARGS),
          DECLARE_METHOD(t_FieldInvertState, getNumOverlap, METH_NOARGS),
          DECLARE_METHOD(t_FieldInvertState, getOffset, METH_NOARGS),
          DECLARE_METHOD(t_FieldInvertState, getPosition, METH_NOARGS),
          DECLARE_METHOD(t_FieldInvertState, getUniqueTermCount, METH_NOARGS),
          DECLARE_METHOD(t_FieldInvertState, setBoost, METH_O),
          DECLARE_METHOD(t_FieldInvertState, setLength, METH_O),
          DECLARE_METHOD(t_FieldInvertState, setNumOverlap, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldInvertState, t_FieldInvertState, ::java::lang::Object, FieldInvertState, t_FieldInvertState_init_, 0, 0, t_FieldInvertState__fields_, 0, 0);

        void t_FieldInvertState::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldInvertState), module, "FieldInvertState", 0);
        }

        void t_FieldInvertState::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldInvertState).tp_dict, "class_", make_descriptor(FieldInvertState::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldInvertState).tp_dict, "wrapfn_", make_descriptor(t_FieldInvertState::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldInvertState).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldInvertState_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldInvertState::initializeClass, 1)))
            return NULL;
          return t_FieldInvertState::wrap_Object(FieldInvertState(((t_FieldInvertState *) arg)->object.this$));
        }
        static PyObject *t_FieldInvertState_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldInvertState::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FieldInvertState_init_(t_FieldInvertState *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::lang::String a0((jobject) NULL);
              FieldInvertState object((jobject) NULL);

              if (!parseArgs(args, "s", &a0))
              {
                INT_CALL(object = FieldInvertState(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 6:
            {
              ::java::lang::String a0((jobject) NULL);
              jint a1;
              jint a2;
              jint a3;
              jint a4;
              jfloat a5;
              FieldInvertState object((jobject) NULL);

              if (!parseArgs(args, "sIIIIF", &a0, &a1, &a2, &a3, &a4, &a5))
              {
                INT_CALL(object = FieldInvertState(a0, a1, a2, a3, a4, a5));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FieldInvertState_getAttributeSource(t_FieldInvertState *self)
        {
          ::org::apache::lucene::util::AttributeSource result((jobject) NULL);
          OBJ_CALL(result = self->object.getAttributeSource());
          return ::org::apache::lucene::util::t_AttributeSource::wrap_Object(result);
        }

        static PyObject *t_FieldInvertState_getBoost(t_FieldInvertState *self)
        {
          jfloat result;
          OBJ_CALL(result = self->object.getBoost());
          return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_FieldInvertState_getLength(t_FieldInvertState *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getLength());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_FieldInvertState_getMaxTermFrequency(t_FieldInvertState *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getMaxTermFrequency());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_FieldInvertState_getName(t_FieldInvertState *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.getName());
          return j2p(result);
        }

        static PyObject *t_FieldInvertState_getNumOverlap(t_FieldInvertState *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getNumOverlap());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_FieldInvertState_getOffset(t_FieldInvertState *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getOffset());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_FieldInvertState_getPosition(t_FieldInvertState *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getPosition());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_FieldInvertState_getUniqueTermCount(t_FieldInvertState *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getUniqueTermCount());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_FieldInvertState_setBoost(t_FieldInvertState *self, PyObject *arg)
        {
          jfloat a0;

          if (!parseArg(arg, "F", &a0))
          {
            OBJ_CALL(self->object.setBoost(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setBoost", arg);
          return NULL;
        }

        static PyObject *t_FieldInvertState_setLength(t_FieldInvertState *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.setLength(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setLength", arg);
          return NULL;
        }

        static PyObject *t_FieldInvertState_setNumOverlap(t_FieldInvertState *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.setNumOverlap(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setNumOverlap", arg);
          return NULL;
        }

        static PyObject *t_FieldInvertState_get__attributeSource(t_FieldInvertState *self, void *data)
        {
          ::org::apache::lucene::util::AttributeSource value((jobject) NULL);
          OBJ_CALL(value = self->object.getAttributeSource());
          return ::org::apache::lucene::util::t_AttributeSource::wrap_Object(value);
        }

        static PyObject *t_FieldInvertState_get__boost(t_FieldInvertState *self, void *data)
        {
          jfloat value;
          OBJ_CALL(value = self->object.getBoost());
          return PyFloat_FromDouble((double) value);
        }
        static int t_FieldInvertState_set__boost(t_FieldInvertState *self, PyObject *arg, void *data)
        {
          {
            jfloat value;
            if (!parseArg(arg, "F", &value))
            {
              INT_CALL(self->object.setBoost(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "boost", arg);
          return -1;
        }

        static PyObject *t_FieldInvertState_get__length(t_FieldInvertState *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getLength());
          return PyInt_FromLong((long) value);
        }
        static int t_FieldInvertState_set__length(t_FieldInvertState *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setLength(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "length", arg);
          return -1;
        }

        static PyObject *t_FieldInvertState_get__maxTermFrequency(t_FieldInvertState *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getMaxTermFrequency());
          return PyInt_FromLong((long) value);
        }

        static PyObject *t_FieldInvertState_get__name(t_FieldInvertState *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object.getName());
          return j2p(value);
        }

        static PyObject *t_FieldInvertState_get__numOverlap(t_FieldInvertState *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getNumOverlap());
          return PyInt_FromLong((long) value);
        }
        static int t_FieldInvertState_set__numOverlap(t_FieldInvertState *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setNumOverlap(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "numOverlap", arg);
          return -1;
        }

        static PyObject *t_FieldInvertState_get__offset(t_FieldInvertState *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getOffset());
          return PyInt_FromLong((long) value);
        }

        static PyObject *t_FieldInvertState_get__position(t_FieldInvertState *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getPosition());
          return PyInt_FromLong((long) value);
        }

        static PyObject *t_FieldInvertState_get__uniqueTermCount(t_FieldInvertState *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getUniqueTermCount());
          return PyInt_FromLong((long) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/fst/Util$FSTPath.h"
#include "org/apache/lucene/util/fst/FST$Arc.h"
#include "java/lang/String.h"
#include "org/apache/lucene/util/IntsRefBuilder.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {

          ::java::lang::Class *Util$FSTPath::class$ = NULL;
          jmethodID *Util$FSTPath::mids$ = NULL;
          jfieldID *Util$FSTPath::fids$ = NULL;
          bool Util$FSTPath::live$ = false;

          jclass Util$FSTPath::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/fst/Util$FSTPath");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_aa3a694a] = env->getMethodID(cls, "<init>", "(Ljava/lang/Object;Lorg/apache/lucene/util/fst/FST$Arc;Lorg/apache/lucene/util/IntsRefBuilder;)V");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              fids$ = new jfieldID[max_fid];
              fids$[fid_arc] = env->getFieldID(cls, "arc", "Lorg/apache/lucene/util/fst/FST$Arc;");
              fids$[fid_cost] = env->getFieldID(cls, "cost", "Ljava/lang/Object;");
              fids$[fid_input] = env->getFieldID(cls, "input", "Lorg/apache/lucene/util/IntsRefBuilder;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Util$FSTPath::Util$FSTPath(const ::java::lang::Object & a0, const ::org::apache::lucene::util::fst::FST$Arc & a1, const ::org::apache::lucene::util::IntsRefBuilder & a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_aa3a694a, a0.this$, a1.this$, a2.this$)) {}

          ::java::lang::String Util$FSTPath::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }

          ::org::apache::lucene::util::fst::FST$Arc Util$FSTPath::_get_arc() const
          {
            return ::org::apache::lucene::util::fst::FST$Arc(env->getObjectField(this$, fids$[fid_arc]));
          }

          void Util$FSTPath::_set_arc(const ::org::apache::lucene::util::fst::FST$Arc & a0) const
          {
            env->setObjectField(this$, fids$[fid_arc], a0.this$);
          }

          ::java::lang::Object Util$FSTPath::_get_cost() const
          {
            return ::java::lang::Object(env->getObjectField(this$, fids$[fid_cost]));
          }

          void Util$FSTPath::_set_cost(const ::java::lang::Object & a0) const
          {
            env->setObjectField(this$, fids$[fid_cost], a0.this$);
          }

          ::org::apache::lucene::util::IntsRefBuilder Util$FSTPath::_get_input() const
          {
            return ::org::apache::lucene::util::IntsRefBuilder(env->getObjectField(this$, fids$[fid_input]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {
          static PyObject *t_Util$FSTPath_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Util$FSTPath_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Util$FSTPath_of_(t_Util$FSTPath *self, PyObject *args);
          static int t_Util$FSTPath_init_(t_Util$FSTPath *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Util$FSTPath_toString(t_Util$FSTPath *self, PyObject *args);
          static PyObject *t_Util$FSTPath_get__arc(t_Util$FSTPath *self, void *data);
          static int t_Util$FSTPath_set__arc(t_Util$FSTPath *self, PyObject *arg, void *data);
          static PyObject *t_Util$FSTPath_get__cost(t_Util$FSTPath *self, void *data);
          static int t_Util$FSTPath_set__cost(t_Util$FSTPath *self, PyObject *arg, void *data);
          static PyObject *t_Util$FSTPath_get__input(t_Util$FSTPath *self, void *data);

          static PyObject *t_Util$FSTPath_get__parameters_(t_Util$FSTPath *self, void *data);
          static PyGetSetDef t_Util$FSTPath__fields_[] = {
            DECLARE_GETSET_FIELD(t_Util$FSTPath, arc),
            DECLARE_GETSET_FIELD(t_Util$FSTPath, cost),
            DECLARE_GET_FIELD(t_Util$FSTPath, input),
            DECLARE_GET_FIELD(t_Util$FSTPath, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Util$FSTPath__methods_[] = {
            DECLARE_METHOD(t_Util$FSTPath, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Util$FSTPath, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Util$FSTPath, of_, METH_VARARGS),
            DECLARE_METHOD(t_Util$FSTPath, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Util$FSTPath, t_Util$FSTPath, ::java::lang::Object, Util$FSTPath, t_Util$FSTPath_init_, 0, 0, t_Util$FSTPath__fields_, 0, 0);
          PyObject *t_Util$FSTPath::wrap_Object(const Util$FSTPath& object, PyTypeObject *p0)
          {
            PyObject *obj = t_Util$FSTPath::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_Util$FSTPath *self = (t_Util$FSTPath *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_Util$FSTPath::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_Util$FSTPath::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_Util$FSTPath *self = (t_Util$FSTPath *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_Util$FSTPath::install(PyObject *module)
          {
            installType(&PY_TYPE(Util$FSTPath), module, "Util$FSTPath", 0);
          }

          void t_Util$FSTPath::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Util$FSTPath).tp_dict, "class_", make_descriptor(Util$FSTPath::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Util$FSTPath).tp_dict, "wrapfn_", make_descriptor(t_Util$FSTPath::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Util$FSTPath).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Util$FSTPath_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Util$FSTPath::initializeClass, 1)))
              return NULL;
            return t_Util$FSTPath::wrap_Object(Util$FSTPath(((t_Util$FSTPath *) arg)->object.this$));
          }
          static PyObject *t_Util$FSTPath_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Util$FSTPath::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_Util$FSTPath_of_(t_Util$FSTPath *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_Util$FSTPath_init_(t_Util$FSTPath *self, PyObject *args, PyObject *kwds)
          {
            ::java::lang::Object a0((jobject) NULL);
            ::org::apache::lucene::util::fst::FST$Arc a1((jobject) NULL);
            PyTypeObject **p1;
            ::org::apache::lucene::util::IntsRefBuilder a2((jobject) NULL);
            Util$FSTPath object((jobject) NULL);

            if (!parseArgs(args, "oKk", ::org::apache::lucene::util::fst::FST$Arc::initializeClass, ::org::apache::lucene::util::IntsRefBuilder::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::util::fst::t_FST$Arc::parameters_, &a2))
            {
              INT_CALL(object = Util$FSTPath(a0, a1, a2));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_Util$FSTPath_toString(t_Util$FSTPath *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(Util$FSTPath), (PyObject *) self, "toString", args, 2);
          }
          static PyObject *t_Util$FSTPath_get__parameters_(t_Util$FSTPath *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_Util$FSTPath_get__arc(t_Util$FSTPath *self, void *data)
          {
            ::org::apache::lucene::util::fst::FST$Arc value((jobject) NULL);
            OBJ_CALL(value = self->object._get_arc());
            return ::org::apache::lucene::util::fst::t_FST$Arc::wrap_Object(value);
          }
          static int t_Util$FSTPath_set__arc(t_Util$FSTPath *self, PyObject *arg, void *data)
          {
            ::org::apache::lucene::util::fst::FST$Arc value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::util::fst::FST$Arc::initializeClass, &value))
            {
              INT_CALL(self->object._set_arc(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "arc", arg);
            return -1;
          }

          static PyObject *t_Util$FSTPath_get__cost(t_Util$FSTPath *self, void *data)
          {
            ::java::lang::Object value((jobject) NULL);
            OBJ_CALL(value = self->object._get_cost());
            return ::java::lang::t_Object::wrap_Object(value);
          }
          static int t_Util$FSTPath_set__cost(t_Util$FSTPath *self, PyObject *arg, void *data)
          {
            ::java::lang::Object value((jobject) NULL);
            if (!parseArg(arg, "o", &value))
            {
              INT_CALL(self->object._set_cost(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "cost", arg);
            return -1;
          }

          static PyObject *t_Util$FSTPath_get__input(t_Util$FSTPath *self, void *data)
          {
            ::org::apache::lucene::util::IntsRefBuilder value((jobject) NULL);
            OBJ_CALL(value = self->object._get_input());
            return ::org::apache::lucene::util::t_IntsRefBuilder::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/FilterCodec.h"
#include "org/apache/lucene/codecs/FieldInfosFormat.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/codecs/LiveDocsFormat.h"
#include "org/apache/lucene/codecs/SegmentInfoFormat.h"
#include "org/apache/lucene/codecs/TermVectorsFormat.h"
#include "org/apache/lucene/codecs/NormsFormat.h"
#include "org/apache/lucene/codecs/StoredFieldsFormat.h"
#include "org/apache/lucene/codecs/PostingsFormat.h"
#include "org/apache/lucene/codecs/DocValuesFormat.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {

        ::java::lang::Class *FilterCodec::class$ = NULL;
        jmethodID *FilterCodec::mids$ = NULL;
        bool FilterCodec::live$ = false;

        jclass FilterCodec::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/FilterCodec");

            mids$ = new jmethodID[max_mid];
            mids$[mid_docValuesFormat_9a259760] = env->getMethodID(cls, "docValuesFormat", "()Lorg/apache/lucene/codecs/DocValuesFormat;");
            mids$[mid_fieldInfosFormat_82160220] = env->getMethodID(cls, "fieldInfosFormat", "()Lorg/apache/lucene/codecs/FieldInfosFormat;");
            mids$[mid_liveDocsFormat_fcc69d9a] = env->getMethodID(cls, "liveDocsFormat", "()Lorg/apache/lucene/codecs/LiveDocsFormat;");
            mids$[mid_normsFormat_03b89e43] = env->getMethodID(cls, "normsFormat", "()Lorg/apache/lucene/codecs/NormsFormat;");
            mids$[mid_postingsFormat_d12d16c8] = env->getMethodID(cls, "postingsFormat", "()Lorg/apache/lucene/codecs/PostingsFormat;");
            mids$[mid_segmentInfoFormat_c24d8633] = env->getMethodID(cls, "segmentInfoFormat", "()Lorg/apache/lucene/codecs/SegmentInfoFormat;");
            mids$[mid_storedFieldsFormat_2b977101] = env->getMethodID(cls, "storedFieldsFormat", "()Lorg/apache/lucene/codecs/StoredFieldsFormat;");
            mids$[mid_termVectorsFormat_bcd1d8b8] = env->getMethodID(cls, "termVectorsFormat", "()Lorg/apache/lucene/codecs/TermVectorsFormat;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::codecs::DocValuesFormat FilterCodec::docValuesFormat() const
        {
          return ::org::apache::lucene::codecs::DocValuesFormat(env->callObjectMethod(this$, mids$[mid_docValuesFormat_9a259760]));
        }

        ::org::apache::lucene::codecs::FieldInfosFormat FilterCodec::fieldInfosFormat() const
        {
          return ::org::apache::lucene::codecs::FieldInfosFormat(env->callObjectMethod(this$, mids$[mid_fieldInfosFormat_82160220]));
        }

        ::org::apache::lucene::codecs::LiveDocsFormat FilterCodec::liveDocsFormat() const
        {
          return ::org::apache::lucene::codecs::LiveDocsFormat(env->callObjectMethod(this$, mids$[mid_liveDocsFormat_fcc69d9a]));
        }

        ::org::apache::lucene::codecs::NormsFormat FilterCodec::normsFormat() const
        {
          return ::org::apache::lucene::codecs::NormsFormat(env->callObjectMethod(this$, mids$[mid_normsFormat_03b89e43]));
        }

        ::org::apache::lucene::codecs::PostingsFormat FilterCodec::postingsFormat() const
        {
          return ::org::apache::lucene::codecs::PostingsFormat(env->callObjectMethod(this$, mids$[mid_postingsFormat_d12d16c8]));
        }

        ::org::apache::lucene::codecs::SegmentInfoFormat FilterCodec::segmentInfoFormat() const
        {
          return ::org::apache::lucene::codecs::SegmentInfoFormat(env->callObjectMethod(this$, mids$[mid_segmentInfoFormat_c24d8633]));
        }

        ::org::apache::lucene::codecs::StoredFieldsFormat FilterCodec::storedFieldsFormat() const
        {
          return ::org::apache::lucene::codecs::StoredFieldsFormat(env->callObjectMethod(this$, mids$[mid_storedFieldsFormat_2b977101]));
        }

        ::org::apache::lucene::codecs::TermVectorsFormat FilterCodec::termVectorsFormat() const
        {
          return ::org::apache::lucene::codecs::TermVectorsFormat(env->callObjectMethod(this$, mids$[mid_termVectorsFormat_bcd1d8b8]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        static PyObject *t_FilterCodec_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FilterCodec_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FilterCodec_docValuesFormat(t_FilterCodec *self, PyObject *args);
        static PyObject *t_FilterCodec_fieldInfosFormat(t_FilterCodec *self, PyObject *args);
        static PyObject *t_FilterCodec_liveDocsFormat(t_FilterCodec *self, PyObject *args);
        static PyObject *t_FilterCodec_normsFormat(t_FilterCodec *self, PyObject *args);
        static PyObject *t_FilterCodec_postingsFormat(t_FilterCodec *self, PyObject *args);
        static PyObject *t_FilterCodec_segmentInfoFormat(t_FilterCodec *self, PyObject *args);
        static PyObject *t_FilterCodec_storedFieldsFormat(t_FilterCodec *self, PyObject *args);
        static PyObject *t_FilterCodec_termVectorsFormat(t_FilterCodec *self, PyObject *args);

        static PyMethodDef t_FilterCodec__methods_[] = {
          DECLARE_METHOD(t_FilterCodec, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilterCodec, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilterCodec, docValuesFormat, METH_VARARGS),
          DECLARE_METHOD(t_FilterCodec, fieldInfosFormat, METH_VARARGS),
          DECLARE_METHOD(t_FilterCodec, liveDocsFormat, METH_VARARGS),
          DECLARE_METHOD(t_FilterCodec, normsFormat, METH_VARARGS),
          DECLARE_METHOD(t_FilterCodec, postingsFormat, METH_VARARGS),
          DECLARE_METHOD(t_FilterCodec, segmentInfoFormat, METH_VARARGS),
          DECLARE_METHOD(t_FilterCodec, storedFieldsFormat, METH_VARARGS),
          DECLARE_METHOD(t_FilterCodec, termVectorsFormat, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FilterCodec, t_FilterCodec, ::org::apache::lucene::codecs::Codec, FilterCodec, abstract_init, 0, 0, 0, 0, 0);

        void t_FilterCodec::install(PyObject *module)
        {
          installType(&PY_TYPE(FilterCodec), module, "FilterCodec", 0);
        }

        void t_FilterCodec::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FilterCodec).tp_dict, "class_", make_descriptor(FilterCodec::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FilterCodec).tp_dict, "wrapfn_", make_descriptor(t_FilterCodec::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FilterCodec).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FilterCodec_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FilterCodec::initializeClass, 1)))
            return NULL;
          return t_FilterCodec::wrap_Object(FilterCodec(((t_FilterCodec *) arg)->object.this$));
        }
        static PyObject *t_FilterCodec_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FilterCodec::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FilterCodec_docValuesFormat(t_FilterCodec *self, PyObject *args)
        {
          ::org::apache::lucene::codecs::DocValuesFormat result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.docValuesFormat());
            return ::org::apache::lucene::codecs::t_DocValuesFormat::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilterCodec), (PyObject *) self, "docValuesFormat", args, 2);
        }

        static PyObject *t_FilterCodec_fieldInfosFormat(t_FilterCodec *self, PyObject *args)
        {
          ::org::apache::lucene::codecs::FieldInfosFormat result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.fieldInfosFormat());
            return ::org::apache::lucene::codecs::t_FieldInfosFormat::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilterCodec), (PyObject *) self, "fieldInfosFormat", args, 2);
        }

        static PyObject *t_FilterCodec_liveDocsFormat(t_FilterCodec *self, PyObject *args)
        {
          ::org::apache::lucene::codecs::LiveDocsFormat result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.liveDocsFormat());
            return ::org::apache::lucene::codecs::t_LiveDocsFormat::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilterCodec), (PyObject *) self, "liveDocsFormat", args, 2);
        }

        static PyObject *t_FilterCodec_normsFormat(t_FilterCodec *self, PyObject *args)
        {
          ::org::apache::lucene::codecs::NormsFormat result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.normsFormat());
            return ::org::apache::lucene::codecs::t_NormsFormat::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilterCodec), (PyObject *) self, "normsFormat", args, 2);
        }

        static PyObject *t_FilterCodec_postingsFormat(t_FilterCodec *self, PyObject *args)
        {
          ::org::apache::lucene::codecs::PostingsFormat result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.postingsFormat());
            return ::org::apache::lucene::codecs::t_PostingsFormat::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilterCodec), (PyObject *) self, "postingsFormat", args, 2);
        }

        static PyObject *t_FilterCodec_segmentInfoFormat(t_FilterCodec *self, PyObject *args)
        {
          ::org::apache::lucene::codecs::SegmentInfoFormat result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.segmentInfoFormat());
            return ::org::apache::lucene::codecs::t_SegmentInfoFormat::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilterCodec), (PyObject *) self, "segmentInfoFormat", args, 2);
        }

        static PyObject *t_FilterCodec_storedFieldsFormat(t_FilterCodec *self, PyObject *args)
        {
          ::org::apache::lucene::codecs::StoredFieldsFormat result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.storedFieldsFormat());
            return ::org::apache::lucene::codecs::t_StoredFieldsFormat::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilterCodec), (PyObject *) self, "storedFieldsFormat", args, 2);
        }

        static PyObject *t_FilterCodec_termVectorsFormat(t_FilterCodec *self, PyObject *args)
        {
          ::org::apache::lucene::codecs::TermVectorsFormat result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.termVectorsFormat());
            return ::org::apache::lucene::codecs::t_TermVectorsFormat::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilterCodec), (PyObject *) self, "termVectorsFormat", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/packed/BlockPackedWriter.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {

          ::java::lang::Class *BlockPackedWriter::class$ = NULL;
          jmethodID *BlockPackedWriter::mids$ = NULL;
          bool BlockPackedWriter::live$ = false;

          jclass BlockPackedWriter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/packed/BlockPackedWriter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f4663c33] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/DataOutput;I)V");
              mids$[mid_flush_54c6a166] = env->getMethodID(cls, "flush", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BlockPackedWriter::BlockPackedWriter(const ::org::apache::lucene::store::DataOutput & a0, jint a1) : ::org::apache::lucene::util::packed::AbstractBlockPackedWriter(env->newObject(initializeClass, &mids$, mid_init$_f4663c33, a0.this$, a1)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {
          static PyObject *t_BlockPackedWriter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BlockPackedWriter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_BlockPackedWriter_init_(t_BlockPackedWriter *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_BlockPackedWriter__methods_[] = {
            DECLARE_METHOD(t_BlockPackedWriter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BlockPackedWriter, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(BlockPackedWriter, t_BlockPackedWriter, ::org::apache::lucene::util::packed::AbstractBlockPackedWriter, BlockPackedWriter, t_BlockPackedWriter_init_, 0, 0, 0, 0, 0);

          void t_BlockPackedWriter::install(PyObject *module)
          {
            installType(&PY_TYPE(BlockPackedWriter), module, "BlockPackedWriter", 0);
          }

          void t_BlockPackedWriter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(BlockPackedWriter).tp_dict, "class_", make_descriptor(BlockPackedWriter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(BlockPackedWriter).tp_dict, "wrapfn_", make_descriptor(t_BlockPackedWriter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(BlockPackedWriter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_BlockPackedWriter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BlockPackedWriter::initializeClass, 1)))
              return NULL;
            return t_BlockPackedWriter::wrap_Object(BlockPackedWriter(((t_BlockPackedWriter *) arg)->object.this$));
          }
          static PyObject *t_BlockPackedWriter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BlockPackedWriter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_BlockPackedWriter_init_(t_BlockPackedWriter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::store::DataOutput a0((jobject) NULL);
            jint a1;
            BlockPackedWriter object((jobject) NULL);

            if (!parseArgs(args, "kI", ::org::apache::lucene::store::DataOutput::initializeClass, &a0, &a1))
            {
              INT_CALL(object = BlockPackedWriter(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/index/IndexCommit.h"
#include "java/util/Set.h"
#include "java/io/Closeable.h"
#include "org/apache/lucene/store/Directory.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/IndexReaderContext.h"
#include "org/apache/lucene/index/Terms.h"
#include "org/apache/lucene/index/IndexWriter.h"
#include "org/apache/lucene/document/Document.h"
#include "java/util/List.h"
#include "org/apache/lucene/index/StoredFieldVisitor.h"
#include "org/apache/lucene/index/Term.h"
#include "org/apache/lucene/index/Fields.h"
#include "org/apache/lucene/index/DirectoryReader.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/IndexReader$ReaderClosedListener.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *IndexReader::class$ = NULL;
        jmethodID *IndexReader::mids$ = NULL;
        bool IndexReader::live$ = false;

        jclass IndexReader::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/IndexReader");

            mids$ = new jmethodID[max_mid];
            mids$[mid_addReaderClosedListener_60172ded] = env->getMethodID(cls, "addReaderClosedListener", "(Lorg/apache/lucene/index/IndexReader$ReaderClosedListener;)V");
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_decRef_54c6a166] = env->getMethodID(cls, "decRef", "()V");
            mids$[mid_docFreq_7eca6a9e] = env->getMethodID(cls, "docFreq", "(Lorg/apache/lucene/index/Term;)I");
            mids$[mid_document_9c2cfcf9] = env->getMethodID(cls, "document", "(I)Lorg/apache/lucene/document/Document;");
            mids$[mid_document_f65cb155] = env->getMethodID(cls, "document", "(ILjava/util/Set;)Lorg/apache/lucene/document/Document;");
            mids$[mid_document_a2ea3ebe] = env->getMethodID(cls, "document", "(ILorg/apache/lucene/index/StoredFieldVisitor;)V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_getCombinedCoreAndDeletesKey_846352c3] = env->getMethodID(cls, "getCombinedCoreAndDeletesKey", "()Ljava/lang/Object;");
            mids$[mid_getContext_5823c99a] = env->getMethodID(cls, "getContext", "()Lorg/apache/lucene/index/IndexReaderContext;");
            mids$[mid_getCoreCacheKey_846352c3] = env->getMethodID(cls, "getCoreCacheKey", "()Ljava/lang/Object;");
            mids$[mid_getDocCount_5fdc3f57] = env->getMethodID(cls, "getDocCount", "(Ljava/lang/String;)I");
            mids$[mid_getRefCount_54c6a179] = env->getMethodID(cls, "getRefCount", "()I");
            mids$[mid_getSumDocFreq_5fdc3f54] = env->getMethodID(cls, "getSumDocFreq", "(Ljava/lang/String;)J");
            mids$[mid_getSumTotalTermFreq_5fdc3f54] = env->getMethodID(cls, "getSumTotalTermFreq", "(Ljava/lang/String;)J");
            mids$[mid_getTermVector_ffaa1be2] = env->getMethodID(cls, "getTermVector", "(ILjava/lang/String;)Lorg/apache/lucene/index/Terms;");
            mids$[mid_getTermVectors_ef1c9c73] = env->getMethodID(cls, "getTermVectors", "(I)Lorg/apache/lucene/index/Fields;");
            mids$[mid_hasDeletions_54c6a16a] = env->getMethodID(cls, "hasDeletions", "()Z");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_incRef_54c6a166] = env->getMethodID(cls, "incRef", "()V");
            mids$[mid_leaves_87851566] = env->getMethodID(cls, "leaves", "()Ljava/util/List;");
            mids$[mid_maxDoc_54c6a179] = env->getMethodID(cls, "maxDoc", "()I");
            mids$[mid_numDeletedDocs_54c6a179] = env->getMethodID(cls, "numDeletedDocs", "()I");
            mids$[mid_numDocs_54c6a179] = env->getMethodID(cls, "numDocs", "()I");
            mids$[mid_open_26fd6272] = env->getStaticMethodID(cls, "open", "(Lorg/apache/lucene/index/IndexCommit;)Lorg/apache/lucene/index/DirectoryReader;");
            mids$[mid_open_109b8ac7] = env->getStaticMethodID(cls, "open", "(Lorg/apache/lucene/store/Directory;)Lorg/apache/lucene/index/DirectoryReader;");
            mids$[mid_open_d7b74111] = env->getStaticMethodID(cls, "open", "(Lorg/apache/lucene/store/Directory;I)Lorg/apache/lucene/index/DirectoryReader;");
            mids$[mid_open_13bade12] = env->getStaticMethodID(cls, "open", "(Lorg/apache/lucene/index/IndexCommit;I)Lorg/apache/lucene/index/DirectoryReader;");
            mids$[mid_open_e4ee522b] = env->getStaticMethodID(cls, "open", "(Lorg/apache/lucene/index/IndexWriter;Z)Lorg/apache/lucene/index/DirectoryReader;");
            mids$[mid_registerParentReader_7d7eaea9] = env->getMethodID(cls, "registerParentReader", "(Lorg/apache/lucene/index/IndexReader;)V");
            mids$[mid_removeReaderClosedListener_60172ded] = env->getMethodID(cls, "removeReaderClosedListener", "(Lorg/apache/lucene/index/IndexReader$ReaderClosedListener;)V");
            mids$[mid_totalTermFreq_7eca6a9d] = env->getMethodID(cls, "totalTermFreq", "(Lorg/apache/lucene/index/Term;)J");
            mids$[mid_tryIncRef_54c6a16a] = env->getMethodID(cls, "tryIncRef", "()Z");
            mids$[mid_ensureOpen_54c6a166] = env->getMethodID(cls, "ensureOpen", "()V");
            mids$[mid_doClose_54c6a166] = env->getMethodID(cls, "doClose", "()V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void IndexReader::addReaderClosedListener(const ::org::apache::lucene::index::IndexReader$ReaderClosedListener & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_addReaderClosedListener_60172ded], a0.this$);
        }

        void IndexReader::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        void IndexReader::decRef() const
        {
          env->callVoidMethod(this$, mids$[mid_decRef_54c6a166]);
        }

        jint IndexReader::docFreq(const ::org::apache::lucene::index::Term & a0) const
        {
          return env->callIntMethod(this$, mids$[mid_docFreq_7eca6a9e], a0.this$);
        }

        ::org::apache::lucene::document::Document IndexReader::document(jint a0) const
        {
          return ::org::apache::lucene::document::Document(env->callObjectMethod(this$, mids$[mid_document_9c2cfcf9], a0));
        }

        ::org::apache::lucene::document::Document IndexReader::document(jint a0, const ::java::util::Set & a1) const
        {
          return ::org::apache::lucene::document::Document(env->callObjectMethod(this$, mids$[mid_document_f65cb155], a0, a1.this$));
        }

        void IndexReader::document(jint a0, const ::org::apache::lucene::index::StoredFieldVisitor & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_document_a2ea3ebe], a0, a1.this$);
        }

        jboolean IndexReader::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        ::java::lang::Object IndexReader::getCombinedCoreAndDeletesKey() const
        {
          return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_getCombinedCoreAndDeletesKey_846352c3]));
        }

        ::org::apache::lucene::index::IndexReaderContext IndexReader::getContext() const
        {
          return ::org::apache::lucene::index::IndexReaderContext(env->callObjectMethod(this$, mids$[mid_getContext_5823c99a]));
        }

        ::java::lang::Object IndexReader::getCoreCacheKey() const
        {
          return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_getCoreCacheKey_846352c3]));
        }

        jint IndexReader::getDocCount(const ::java::lang::String & a0) const
        {
          return env->callIntMethod(this$, mids$[mid_getDocCount_5fdc3f57], a0.this$);
        }

        jint IndexReader::getRefCount() const
        {
          return env->callIntMethod(this$, mids$[mid_getRefCount_54c6a179]);
        }

        jlong IndexReader::getSumDocFreq(const ::java::lang::String & a0) const
        {
          return env->callLongMethod(this$, mids$[mid_getSumDocFreq_5fdc3f54], a0.this$);
        }

        jlong IndexReader::getSumTotalTermFreq(const ::java::lang::String & a0) const
        {
          return env->callLongMethod(this$, mids$[mid_getSumTotalTermFreq_5fdc3f54], a0.this$);
        }

        ::org::apache::lucene::index::Terms IndexReader::getTermVector(jint a0, const ::java::lang::String & a1) const
        {
          return ::org::apache::lucene::index::Terms(env->callObjectMethod(this$, mids$[mid_getTermVector_ffaa1be2], a0, a1.this$));
        }

        ::org::apache::lucene::index::Fields IndexReader::getTermVectors(jint a0) const
        {
          return ::org::apache::lucene::index::Fields(env->callObjectMethod(this$, mids$[mid_getTermVectors_ef1c9c73], a0));
        }

        jboolean IndexReader::hasDeletions() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasDeletions_54c6a16a]);
        }

        jint IndexReader::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        void IndexReader::incRef() const
        {
          env->callVoidMethod(this$, mids$[mid_incRef_54c6a166]);
        }

        ::java::util::List IndexReader::leaves() const
        {
          return ::java::util::List(env->callObjectMethod(this$, mids$[mid_leaves_87851566]));
        }

        jint IndexReader::maxDoc() const
        {
          return env->callIntMethod(this$, mids$[mid_maxDoc_54c6a179]);
        }

        jint IndexReader::numDeletedDocs() const
        {
          return env->callIntMethod(this$, mids$[mid_numDeletedDocs_54c6a179]);
        }

        jint IndexReader::numDocs() const
        {
          return env->callIntMethod(this$, mids$[mid_numDocs_54c6a179]);
        }

        ::org::apache::lucene::index::DirectoryReader IndexReader::open(const ::org::apache::lucene::index::IndexCommit & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::DirectoryReader(env->callStaticObjectMethod(cls, mids$[mid_open_26fd6272], a0.this$));
        }

        ::org::apache::lucene::index::DirectoryReader IndexReader::open(const ::org::apache::lucene::store::Directory & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::DirectoryReader(env->callStaticObjectMethod(cls, mids$[mid_open_109b8ac7], a0.this$));
        }

        ::org::apache::lucene::index::DirectoryReader IndexReader::open(const ::org::apache::lucene::store::Directory & a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::DirectoryReader(env->callStaticObjectMethod(cls, mids$[mid_open_d7b74111], a0.this$, a1));
        }

        ::org::apache::lucene::index::DirectoryReader IndexReader::open(const ::org::apache::lucene::index::IndexCommit & a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::DirectoryReader(env->callStaticObjectMethod(cls, mids$[mid_open_13bade12], a0.this$, a1));
        }

        ::org::apache::lucene::index::DirectoryReader IndexReader::open(const ::org::apache::lucene::index::IndexWriter & a0, jboolean a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::DirectoryReader(env->callStaticObjectMethod(cls, mids$[mid_open_e4ee522b], a0.this$, a1));
        }

        void IndexReader::registerParentReader(const IndexReader & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_registerParentReader_7d7eaea9], a0.this$);
        }

        void IndexReader::removeReaderClosedListener(const ::org::apache::lucene::index::IndexReader$ReaderClosedListener & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_removeReaderClosedListener_60172ded], a0.this$);
        }

        jlong IndexReader::totalTermFreq(const ::org::apache::lucene::index::Term & a0) const
        {
          return env->callLongMethod(this$, mids$[mid_totalTermFreq_7eca6a9d], a0.this$);
        }

        jboolean IndexReader::tryIncRef() const
        {
          return env->callBooleanMethod(this$, mids$[mid_tryIncRef_54c6a16a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_IndexReader_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexReader_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexReader_addReaderClosedListener(t_IndexReader *self, PyObject *arg);
        static PyObject *t_IndexReader_close(t_IndexReader *self);
        static PyObject *t_IndexReader_decRef(t_IndexReader *self);
        static PyObject *t_IndexReader_docFreq(t_IndexReader *self, PyObject *arg);
        static PyObject *t_IndexReader_document(t_IndexReader *self, PyObject *args);
        static PyObject *t_IndexReader_equals(t_IndexReader *self, PyObject *args);
        static PyObject *t_IndexReader_getCombinedCoreAndDeletesKey(t_IndexReader *self);
        static PyObject *t_IndexReader_getContext(t_IndexReader *self);
        static PyObject *t_IndexReader_getCoreCacheKey(t_IndexReader *self);
        static PyObject *t_IndexReader_getDocCount(t_IndexReader *self, PyObject *arg);
        static PyObject *t_IndexReader_getRefCount(t_IndexReader *self);
        static PyObject *t_IndexReader_getSumDocFreq(t_IndexReader *self, PyObject *arg);
        static PyObject *t_IndexReader_getSumTotalTermFreq(t_IndexReader *self, PyObject *arg);
        static PyObject *t_IndexReader_getTermVector(t_IndexReader *self, PyObject *args);
        static PyObject *t_IndexReader_getTermVectors(t_IndexReader *self, PyObject *arg);
        static PyObject *t_IndexReader_hasDeletions(t_IndexReader *self);
        static PyObject *t_IndexReader_hashCode(t_IndexReader *self, PyObject *args);
        static PyObject *t_IndexReader_incRef(t_IndexReader *self);
        static PyObject *t_IndexReader_leaves(t_IndexReader *self);
        static PyObject *t_IndexReader_maxDoc(t_IndexReader *self);
        static PyObject *t_IndexReader_numDeletedDocs(t_IndexReader *self);
        static PyObject *t_IndexReader_numDocs(t_IndexReader *self);
        static PyObject *t_IndexReader_open(PyTypeObject *type, PyObject *args);
        static PyObject *t_IndexReader_registerParentReader(t_IndexReader *self, PyObject *arg);
        static PyObject *t_IndexReader_removeReaderClosedListener(t_IndexReader *self, PyObject *arg);
        static PyObject *t_IndexReader_totalTermFreq(t_IndexReader *self, PyObject *arg);
        static PyObject *t_IndexReader_tryIncRef(t_IndexReader *self);
        static PyObject *t_IndexReader_get__combinedCoreAndDeletesKey(t_IndexReader *self, void *data);
        static PyObject *t_IndexReader_get__context(t_IndexReader *self, void *data);
        static PyObject *t_IndexReader_get__coreCacheKey(t_IndexReader *self, void *data);
        static PyObject *t_IndexReader_get__refCount(t_IndexReader *self, void *data);
        static PyGetSetDef t_IndexReader__fields_[] = {
          DECLARE_GET_FIELD(t_IndexReader, combinedCoreAndDeletesKey),
          DECLARE_GET_FIELD(t_IndexReader, context),
          DECLARE_GET_FIELD(t_IndexReader, coreCacheKey),
          DECLARE_GET_FIELD(t_IndexReader, refCount),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_IndexReader__methods_[] = {
          DECLARE_METHOD(t_IndexReader, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexReader, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexReader, addReaderClosedListener, METH_O),
          DECLARE_METHOD(t_IndexReader, close, METH_NOARGS),
          DECLARE_METHOD(t_IndexReader, decRef, METH_NOARGS),
          DECLARE_METHOD(t_IndexReader, docFreq, METH_O),
          DECLARE_METHOD(t_IndexReader, document, METH_VARARGS),
          DECLARE_METHOD(t_IndexReader, equals, METH_VARARGS),
          DECLARE_METHOD(t_IndexReader, getCombinedCoreAndDeletesKey, METH_NOARGS),
          DECLARE_METHOD(t_IndexReader, getContext, METH_NOARGS),
          DECLARE_METHOD(t_IndexReader, getCoreCacheKey, METH_NOARGS),
          DECLARE_METHOD(t_IndexReader, getDocCount, METH_O),
          DECLARE_METHOD(t_IndexReader, getRefCount, METH_NOARGS),
          DECLARE_METHOD(t_IndexReader, getSumDocFreq, METH_O),
          DECLARE_METHOD(t_IndexReader, getSumTotalTermFreq, METH_O),
          DECLARE_METHOD(t_IndexReader, getTermVector, METH_VARARGS),
          DECLARE_METHOD(t_IndexReader, getTermVectors, METH_O),
          DECLARE_METHOD(t_IndexReader, hasDeletions, METH_NOARGS),
          DECLARE_METHOD(t_IndexReader, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_IndexReader, incRef, METH_NOARGS),
          DECLARE_METHOD(t_IndexReader, leaves, METH_NOARGS),
          DECLARE_METHOD(t_IndexReader, maxDoc, METH_NOARGS),
          DECLARE_METHOD(t_IndexReader, numDeletedDocs, METH_NOARGS),
          DECLARE_METHOD(t_IndexReader, numDocs, METH_NOARGS),
          DECLARE_METHOD(t_IndexReader, open, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_IndexReader, registerParentReader, METH_O),
          DECLARE_METHOD(t_IndexReader, removeReaderClosedListener, METH_O),
          DECLARE_METHOD(t_IndexReader, totalTermFreq, METH_O),
          DECLARE_METHOD(t_IndexReader, tryIncRef, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(IndexReader, t_IndexReader, ::java::lang::Object, IndexReader, abstract_init, 0, 0, t_IndexReader__fields_, 0, 0);

        void t_IndexReader::install(PyObject *module)
        {
          installType(&PY_TYPE(IndexReader), module, "IndexReader", 0);
          PyDict_SetItemString(PY_TYPE(IndexReader).tp_dict, "ReaderClosedListener", make_descriptor(&PY_TYPE(IndexReader$ReaderClosedListener)));
        }

        void t_IndexReader::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(IndexReader).tp_dict, "class_", make_descriptor(IndexReader::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(IndexReader).tp_dict, "wrapfn_", make_descriptor(t_IndexReader::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(IndexReader).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_IndexReader_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IndexReader::initializeClass, 1)))
            return NULL;
          return t_IndexReader::wrap_Object(IndexReader(((t_IndexReader *) arg)->object.this$));
        }
        static PyObject *t_IndexReader_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IndexReader::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_IndexReader_addReaderClosedListener(t_IndexReader *self, PyObject *arg)
        {
          ::org::apache::lucene::index::IndexReader$ReaderClosedListener a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::IndexReader$ReaderClosedListener::initializeClass, &a0))
          {
            OBJ_CALL(self->object.addReaderClosedListener(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "addReaderClosedListener", arg);
          return NULL;
        }

        static PyObject *t_IndexReader_close(t_IndexReader *self)
        {
          OBJ_CALL(self->object.close());
          Py_RETURN_NONE;
        }

        static PyObject *t_IndexReader_decRef(t_IndexReader *self)
        {
          OBJ_CALL(self->object.decRef());
          Py_RETURN_NONE;
        }

        static PyObject *t_IndexReader_docFreq(t_IndexReader *self, PyObject *arg)
        {
          ::org::apache::lucene::index::Term a0((jobject) NULL);
          jint result;

          if (!parseArg(arg, "k", ::org::apache::lucene::index::Term::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.docFreq(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "docFreq", arg);
          return NULL;
        }

        static PyObject *t_IndexReader_document(t_IndexReader *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jint a0;
              ::org::apache::lucene::document::Document result((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.document(a0));
                return ::org::apache::lucene::document::t_Document::wrap_Object(result);
              }
            }
            break;
           case 2:
            {
              jint a0;
              ::java::util::Set a1((jobject) NULL);
              PyTypeObject **p1;
              ::org::apache::lucene::document::Document result((jobject) NULL);

              if (!parseArgs(args, "IK", ::java::util::Set::initializeClass, &a0, &a1, &p1, ::java::util::t_Set::parameters_))
              {
                OBJ_CALL(result = self->object.document(a0, a1));
                return ::org::apache::lucene::document::t_Document::wrap_Object(result);
              }
            }
            {
              jint a0;
              ::org::apache::lucene::index::StoredFieldVisitor a1((jobject) NULL);

              if (!parseArgs(args, "Ik", ::org::apache::lucene::index::StoredFieldVisitor::initializeClass, &a0, &a1))
              {
                OBJ_CALL(self->object.document(a0, a1));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "document", args);
          return NULL;
        }

        static PyObject *t_IndexReader_equals(t_IndexReader *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(IndexReader), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_IndexReader_getCombinedCoreAndDeletesKey(t_IndexReader *self)
        {
          ::java::lang::Object result((jobject) NULL);
          OBJ_CALL(result = self->object.getCombinedCoreAndDeletesKey());
          return ::java::lang::t_Object::wrap_Object(result);
        }

        static PyObject *t_IndexReader_getContext(t_IndexReader *self)
        {
          ::org::apache::lucene::index::IndexReaderContext result((jobject) NULL);
          OBJ_CALL(result = self->object.getContext());
          return ::org::apache::lucene::index::t_IndexReaderContext::wrap_Object(result);
        }

        static PyObject *t_IndexReader_getCoreCacheKey(t_IndexReader *self)
        {
          ::java::lang::Object result((jobject) NULL);
          OBJ_CALL(result = self->object.getCoreCacheKey());
          return ::java::lang::t_Object::wrap_Object(result);
        }

        static PyObject *t_IndexReader_getDocCount(t_IndexReader *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          jint result;

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = self->object.getDocCount(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "getDocCount", arg);
          return NULL;
        }

        static PyObject *t_IndexReader_getRefCount(t_IndexReader *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getRefCount());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_IndexReader_getSumDocFreq(t_IndexReader *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          jlong result;

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = self->object.getSumDocFreq(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError((PyObject *) self, "getSumDocFreq", arg);
          return NULL;
        }

        static PyObject *t_IndexReader_getSumTotalTermFreq(t_IndexReader *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          jlong result;

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = self->object.getSumTotalTermFreq(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError((PyObject *) self, "getSumTotalTermFreq", arg);
          return NULL;
        }

        static PyObject *t_IndexReader_getTermVector(t_IndexReader *self, PyObject *args)
        {
          jint a0;
          ::java::lang::String a1((jobject) NULL);
          ::org::apache::lucene::index::Terms result((jobject) NULL);

          if (!parseArgs(args, "Is", &a0, &a1))
          {
            OBJ_CALL(result = self->object.getTermVector(a0, a1));
            return ::org::apache::lucene::index::t_Terms::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getTermVector", args);
          return NULL;
        }

        static PyObject *t_IndexReader_getTermVectors(t_IndexReader *self, PyObject *arg)
        {
          jint a0;
          ::org::apache::lucene::index::Fields result((jobject) NULL);

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.getTermVectors(a0));
            return ::org::apache::lucene::index::t_Fields::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getTermVectors", arg);
          return NULL;
        }

        static PyObject *t_IndexReader_hasDeletions(t_IndexReader *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.hasDeletions());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_IndexReader_hashCode(t_IndexReader *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(IndexReader), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_IndexReader_incRef(t_IndexReader *self)
        {
          OBJ_CALL(self->object.incRef());
          Py_RETURN_NONE;
        }

        static PyObject *t_IndexReader_leaves(t_IndexReader *self)
        {
          ::java::util::List result((jobject) NULL);
          OBJ_CALL(result = self->object.leaves());
          return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::index::PY_TYPE(AtomicReaderContext));
        }

        static PyObject *t_IndexReader_maxDoc(t_IndexReader *self)
        {
          jint result;
          OBJ_CALL(result = self->object.maxDoc());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_IndexReader_numDeletedDocs(t_IndexReader *self)
        {
          jint result;
          OBJ_CALL(result = self->object.numDeletedDocs());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_IndexReader_numDocs(t_IndexReader *self)
        {
          jint result;
          OBJ_CALL(result = self->object.numDocs());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_IndexReader_open(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::index::IndexCommit a0((jobject) NULL);
              ::org::apache::lucene::index::DirectoryReader result((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexCommit::initializeClass, &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::index::IndexReader::open(a0));
                return ::org::apache::lucene::index::t_DirectoryReader::wrap_Object(result);
              }
            }
            {
              ::org::apache::lucene::store::Directory a0((jobject) NULL);
              ::org::apache::lucene::index::DirectoryReader result((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::store::Directory::initializeClass, &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::index::IndexReader::open(a0));
                return ::org::apache::lucene::index::t_DirectoryReader::wrap_Object(result);
              }
            }
            break;
           case 2:
            {
              ::org::apache::lucene::store::Directory a0((jobject) NULL);
              jint a1;
              ::org::apache::lucene::index::DirectoryReader result((jobject) NULL);

              if (!parseArgs(args, "kI", ::org::apache::lucene::store::Directory::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::index::IndexReader::open(a0, a1));
                return ::org::apache::lucene::index::t_DirectoryReader::wrap_Object(result);
              }
            }
            {
              ::org::apache::lucene::index::IndexCommit a0((jobject) NULL);
              jint a1;
              ::org::apache::lucene::index::DirectoryReader result((jobject) NULL);

              if (!parseArgs(args, "kI", ::org::apache::lucene::index::IndexCommit::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::index::IndexReader::open(a0, a1));
                return ::org::apache::lucene::index::t_DirectoryReader::wrap_Object(result);
              }
            }
            {
              ::org::apache::lucene::index::IndexWriter a0((jobject) NULL);
              jboolean a1;
              ::org::apache::lucene::index::DirectoryReader result((jobject) NULL);

              if (!parseArgs(args, "kZ", ::org::apache::lucene::index::IndexWriter::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::index::IndexReader::open(a0, a1));
                return ::org::apache::lucene::index::t_DirectoryReader::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError(type, "open", args);
          return NULL;
        }

        static PyObject *t_IndexReader_registerParentReader(t_IndexReader *self, PyObject *arg)
        {
          IndexReader a0((jobject) NULL);

          if (!parseArg(arg, "k", IndexReader::initializeClass, &a0))
          {
            OBJ_CALL(self->object.registerParentReader(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "registerParentReader", arg);
          return NULL;
        }

        static PyObject *t_IndexReader_removeReaderClosedListener(t_IndexReader *self, PyObject *arg)
        {
          ::org::apache::lucene::index::IndexReader$ReaderClosedListener a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::IndexReader$ReaderClosedListener::initializeClass, &a0))
          {
            OBJ_CALL(self->object.removeReaderClosedListener(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "removeReaderClosedListener", arg);
          return NULL;
        }

        static PyObject *t_IndexReader_totalTermFreq(t_IndexReader *self, PyObject *arg)
        {
          ::org::apache::lucene::index::Term a0((jobject) NULL);
          jlong result;

          if (!parseArg(arg, "k", ::org::apache::lucene::index::Term::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.totalTermFreq(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError((PyObject *) self, "totalTermFreq", arg);
          return NULL;
        }

        static PyObject *t_IndexReader_tryIncRef(t_IndexReader *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.tryIncRef());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_IndexReader_get__combinedCoreAndDeletesKey(t_IndexReader *self, void *data)
        {
          ::java::lang::Object value((jobject) NULL);
          OBJ_CALL(value = self->object.getCombinedCoreAndDeletesKey());
          return ::java::lang::t_Object::wrap_Object(value);
        }

        static PyObject *t_IndexReader_get__context(t_IndexReader *self, void *data)
        {
          ::org::apache::lucene::index::IndexReaderContext value((jobject) NULL);
          OBJ_CALL(value = self->object.getContext());
          return ::org::apache::lucene::index::t_IndexReaderContext::wrap_Object(value);
        }

        static PyObject *t_IndexReader_get__coreCacheKey(t_IndexReader *self, void *data)
        {
          ::java::lang::Object value((jobject) NULL);
          OBJ_CALL(value = self->object.getCoreCacheKey());
          return ::java::lang::t_Object::wrap_Object(value);
        }

        static PyObject *t_IndexReader_get__refCount(t_IndexReader *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getRefCount());
          return PyInt_FromLong((long) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/xml/builders/NumericRangeFilterBuilder.h"
#include "org/apache/lucene/search/Filter.h"
#include "org/apache/lucene/queryparser/xml/FilterBuilder.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {

            ::java::lang::Class *NumericRangeFilterBuilder::class$ = NULL;
            jmethodID *NumericRangeFilterBuilder::mids$ = NULL;
            bool NumericRangeFilterBuilder::live$ = false;

            jclass NumericRangeFilterBuilder::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/xml/builders/NumericRangeFilterBuilder");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_setStrictMode_bb0c767f] = env->getMethodID(cls, "setStrictMode", "(Z)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            NumericRangeFilterBuilder::NumericRangeFilterBuilder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

            void NumericRangeFilterBuilder::setStrictMode(jboolean a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setStrictMode_bb0c767f], a0);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {
            static PyObject *t_NumericRangeFilterBuilder_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_NumericRangeFilterBuilder_instance_(PyTypeObject *type, PyObject *arg);
            static int t_NumericRangeFilterBuilder_init_(t_NumericRangeFilterBuilder *self, PyObject *args, PyObject *kwds);
            static PyObject *t_NumericRangeFilterBuilder_setStrictMode(t_NumericRangeFilterBuilder *self, PyObject *arg);
            static int t_NumericRangeFilterBuilder_set__strictMode(t_NumericRangeFilterBuilder *self, PyObject *arg, void *data);
            static PyGetSetDef t_NumericRangeFilterBuilder__fields_[] = {
              DECLARE_SET_FIELD(t_NumericRangeFilterBuilder, strictMode),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_NumericRangeFilterBuilder__methods_[] = {
              DECLARE_METHOD(t_NumericRangeFilterBuilder, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_NumericRangeFilterBuilder, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_NumericRangeFilterBuilder, setStrictMode, METH_O),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(NumericRangeFilterBuilder, t_NumericRangeFilterBuilder, ::java::lang::Object, NumericRangeFilterBuilder, t_NumericRangeFilterBuilder_init_, 0, 0, t_NumericRangeFilterBuilder__fields_, 0, 0);

            void t_NumericRangeFilterBuilder::install(PyObject *module)
            {
              installType(&PY_TYPE(NumericRangeFilterBuilder), module, "NumericRangeFilterBuilder", 0);
            }

            void t_NumericRangeFilterBuilder::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(NumericRangeFilterBuilder).tp_dict, "class_", make_descriptor(NumericRangeFilterBuilder::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(NumericRangeFilterBuilder).tp_dict, "wrapfn_", make_descriptor(t_NumericRangeFilterBuilder::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(NumericRangeFilterBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_NumericRangeFilterBuilder_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, NumericRangeFilterBuilder::initializeClass, 1)))
                return NULL;
              return t_NumericRangeFilterBuilder::wrap_Object(NumericRangeFilterBuilder(((t_NumericRangeFilterBuilder *) arg)->object.this$));
            }
            static PyObject *t_NumericRangeFilterBuilder_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, NumericRangeFilterBuilder::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_NumericRangeFilterBuilder_init_(t_NumericRangeFilterBuilder *self, PyObject *args, PyObject *kwds)
            {
              NumericRangeFilterBuilder object((jobject) NULL);

              INT_CALL(object = NumericRangeFilterBuilder());
              self->object = object;

              return 0;
            }

            static PyObject *t_NumericRangeFilterBuilder_setStrictMode(t_NumericRangeFilterBuilder *self, PyObject *arg)
            {
              jboolean a0;

              if (!parseArg(arg, "Z", &a0))
              {
                OBJ_CALL(self->object.setStrictMode(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setStrictMode", arg);
              return NULL;
            }

            static int t_NumericRangeFilterBuilder_set__strictMode(t_NumericRangeFilterBuilder *self, PyObject *arg, void *data)
            {
              {
                jboolean value;
                if (!parseArg(arg, "Z", &value))
                {
                  INT_CALL(self->object.setStrictMode(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "strictMode", arg);
              return -1;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/Constants.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *Constants::class$ = NULL;
        jmethodID *Constants::mids$ = NULL;
        bool Constants::live$ = false;
        jboolean Constants::FREE_BSD = (jboolean) 0;
        ::java::lang::String *Constants::JAVA_VENDOR = NULL;
        ::java::lang::String *Constants::JAVA_VERSION = NULL;
        jboolean Constants::JRE_IS_64BIT = (jboolean) 0;
        jboolean Constants::JRE_IS_MINIMUM_JAVA6 = (jboolean) 0;
        jboolean Constants::JRE_IS_MINIMUM_JAVA7 = (jboolean) 0;
        jboolean Constants::JRE_IS_MINIMUM_JAVA8 = (jboolean) 0;
        jboolean Constants::JRE_IS_MINIMUM_JAVA9 = (jboolean) 0;
        ::java::lang::String *Constants::JVM_NAME = NULL;
        ::java::lang::String *Constants::JVM_SPEC_VERSION = NULL;
        ::java::lang::String *Constants::JVM_VENDOR = NULL;
        ::java::lang::String *Constants::JVM_VERSION = NULL;
        jboolean Constants::LINUX = (jboolean) 0;
        ::java::lang::String *Constants::LUCENE_MAIN_VERSION = NULL;
        ::java::lang::String *Constants::LUCENE_VERSION = NULL;
        jboolean Constants::MAC_OS_X = (jboolean) 0;
        ::java::lang::String *Constants::OS_ARCH = NULL;
        ::java::lang::String *Constants::OS_NAME = NULL;
        ::java::lang::String *Constants::OS_VERSION = NULL;
        jboolean Constants::SUN_OS = (jboolean) 0;
        jboolean Constants::WINDOWS = (jboolean) 0;

        jclass Constants::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/Constants");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            FREE_BSD = env->getStaticBooleanField(cls, "FREE_BSD");
            JAVA_VENDOR = new ::java::lang::String(env->getStaticObjectField(cls, "JAVA_VENDOR", "Ljava/lang/String;"));
            JAVA_VERSION = new ::java::lang::String(env->getStaticObjectField(cls, "JAVA_VERSION", "Ljava/lang/String;"));
            JRE_IS_64BIT = env->getStaticBooleanField(cls, "JRE_IS_64BIT");
            JRE_IS_MINIMUM_JAVA6 = env->getStaticBooleanField(cls, "JRE_IS_MINIMUM_JAVA6");
            JRE_IS_MINIMUM_JAVA7 = env->getStaticBooleanField(cls, "JRE_IS_MINIMUM_JAVA7");
            JRE_IS_MINIMUM_JAVA8 = env->getStaticBooleanField(cls, "JRE_IS_MINIMUM_JAVA8");
            JRE_IS_MINIMUM_JAVA9 = env->getStaticBooleanField(cls, "JRE_IS_MINIMUM_JAVA9");
            JVM_NAME = new ::java::lang::String(env->getStaticObjectField(cls, "JVM_NAME", "Ljava/lang/String;"));
            JVM_SPEC_VERSION = new ::java::lang::String(env->getStaticObjectField(cls, "JVM_SPEC_VERSION", "Ljava/lang/String;"));
            JVM_VENDOR = new ::java::lang::String(env->getStaticObjectField(cls, "JVM_VENDOR", "Ljava/lang/String;"));
            JVM_VERSION = new ::java::lang::String(env->getStaticObjectField(cls, "JVM_VERSION", "Ljava/lang/String;"));
            LINUX = env->getStaticBooleanField(cls, "LINUX");
            LUCENE_MAIN_VERSION = new ::java::lang::String(env->getStaticObjectField(cls, "LUCENE_MAIN_VERSION", "Ljava/lang/String;"));
            LUCENE_VERSION = new ::java::lang::String(env->getStaticObjectField(cls, "LUCENE_VERSION", "Ljava/lang/String;"));
            MAC_OS_X = env->getStaticBooleanField(cls, "MAC_OS_X");
            OS_ARCH = new ::java::lang::String(env->getStaticObjectField(cls, "OS_ARCH", "Ljava/lang/String;"));
            OS_NAME = new ::java::lang::String(env->getStaticObjectField(cls, "OS_NAME", "Ljava/lang/String;"));
            OS_VERSION = new ::java::lang::String(env->getStaticObjectField(cls, "OS_VERSION", "Ljava/lang/String;"));
            SUN_OS = env->getStaticBooleanField(cls, "SUN_OS");
            WINDOWS = env->getStaticBooleanField(cls, "WINDOWS");
            live$ = true;
          }
          return (jclass) class$->this$;
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_Constants_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Constants_instance_(PyTypeObject *type, PyObject *arg);

        static PyMethodDef t_Constants__methods_[] = {
          DECLARE_METHOD(t_Constants, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Constants, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Constants, t_Constants, ::java::lang::Object, Constants, abstract_init, 0, 0, 0, 0, 0);

        void t_Constants::install(PyObject *module)
        {
          installType(&PY_TYPE(Constants), module, "Constants", 0);
        }

        void t_Constants::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(Constants).tp_dict, "class_", make_descriptor(Constants::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(Constants).tp_dict, "wrapfn_", make_descriptor(t_Constants::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(Constants).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(Constants::initializeClass);
          PyDict_SetItemString(PY_TYPE(Constants).tp_dict, "FREE_BSD", make_descriptor(Constants::FREE_BSD));
          PyDict_SetItemString(PY_TYPE(Constants).tp_dict, "JAVA_VENDOR", make_descriptor(j2p(*Constants::JAVA_VENDOR)));
          PyDict_SetItemString(PY_TYPE(Constants).tp_dict, "JAVA_VERSION", make_descriptor(j2p(*Constants::JAVA_VERSION)));
          PyDict_SetItemString(PY_TYPE(Constants).tp_dict, "JRE_IS_64BIT", make_descriptor(Constants::JRE_IS_64BIT));
          PyDict_SetItemString(PY_TYPE(Constants).tp_dict, "JRE_IS_MINIMUM_JAVA6", make_descriptor(Constants::JRE_IS_MINIMUM_JAVA6));
          PyDict_SetItemString(PY_TYPE(Constants).tp_dict, "JRE_IS_MINIMUM_JAVA7", make_descriptor(Constants::JRE_IS_MINIMUM_JAVA7));
          PyDict_SetItemString(PY_TYPE(Constants).tp_dict, "JRE_IS_MINIMUM_JAVA8", make_descriptor(Constants::JRE_IS_MINIMUM_JAVA8));
          PyDict_SetItemString(PY_TYPE(Constants).tp_dict, "JRE_IS_MINIMUM_JAVA9", make_descriptor(Constants::JRE_IS_MINIMUM_JAVA9));
          PyDict_SetItemString(PY_TYPE(Constants).tp_dict, "JVM_NAME", make_descriptor(j2p(*Constants::JVM_NAME)));
          PyDict_SetItemString(PY_TYPE(Constants).tp_dict, "JVM_SPEC_VERSION", make_descriptor(j2p(*Constants::JVM_SPEC_VERSION)));
          PyDict_SetItemString(PY_TYPE(Constants).tp_dict, "JVM_VENDOR", make_descriptor(j2p(*Constants::JVM_VENDOR)));
          PyDict_SetItemString(PY_TYPE(Constants).tp_dict, "JVM_VERSION", make_descriptor(j2p(*Constants::JVM_VERSION)));
          PyDict_SetItemString(PY_TYPE(Constants).tp_dict, "LINUX", make_descriptor(Constants::LINUX));
          PyDict_SetItemString(PY_TYPE(Constants).tp_dict, "LUCENE_MAIN_VERSION", make_descriptor(j2p(*Constants::LUCENE_MAIN_VERSION)));
          PyDict_SetItemString(PY_TYPE(Constants).tp_dict, "LUCENE_VERSION", make_descriptor(j2p(*Constants::LUCENE_VERSION)));
          PyDict_SetItemString(PY_TYPE(Constants).tp_dict, "MAC_OS_X", make_descriptor(Constants::MAC_OS_X));
          PyDict_SetItemString(PY_TYPE(Constants).tp_dict, "OS_ARCH", make_descriptor(j2p(*Constants::OS_ARCH)));
          PyDict_SetItemString(PY_TYPE(Constants).tp_dict, "OS_NAME", make_descriptor(j2p(*Constants::OS_NAME)));
          PyDict_SetItemString(PY_TYPE(Constants).tp_dict, "OS_VERSION", make_descriptor(j2p(*Constants::OS_VERSION)));
          PyDict_SetItemString(PY_TYPE(Constants).tp_dict, "SUN_OS", make_descriptor(Constants::SUN_OS));
          PyDict_SetItemString(PY_TYPE(Constants).tp_dict, "WINDOWS", make_descriptor(Constants::WINDOWS));
        }

        static PyObject *t_Constants_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Constants::initializeClass, 1)))
            return NULL;
          return t_Constants::wrap_Object(Constants(((t_Constants *) arg)->object.this$));
        }
        static PyObject *t_Constants_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Constants::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FieldCache$FloatParser.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FieldCache$FloatParser::class$ = NULL;
        jmethodID *FieldCache$FloatParser::mids$ = NULL;
        bool FieldCache$FloatParser::live$ = false;

        jclass FieldCache$FloatParser::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FieldCache$FloatParser");

            mids$ = new jmethodID[max_mid];
            mids$[mid_parseFloat_7bc03dd4] = env->getMethodID(cls, "parseFloat", "(Lorg/apache/lucene/util/BytesRef;)F");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jfloat FieldCache$FloatParser::parseFloat(const ::org::apache::lucene::util::BytesRef & a0) const
        {
          return env->callFloatMethod(this$, mids$[mid_parseFloat_7bc03dd4], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FieldCache$FloatParser_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldCache$FloatParser_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldCache$FloatParser_parseFloat(t_FieldCache$FloatParser *self, PyObject *arg);

        static PyMethodDef t_FieldCache$FloatParser__methods_[] = {
          DECLARE_METHOD(t_FieldCache$FloatParser, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCache$FloatParser, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCache$FloatParser, parseFloat, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldCache$FloatParser, t_FieldCache$FloatParser, ::org::apache::lucene::search::FieldCache$Parser, FieldCache$FloatParser, abstract_init, 0, 0, 0, 0, 0);

        void t_FieldCache$FloatParser::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldCache$FloatParser), module, "FieldCache$FloatParser", 0);
        }

        void t_FieldCache$FloatParser::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldCache$FloatParser).tp_dict, "class_", make_descriptor(FieldCache$FloatParser::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldCache$FloatParser).tp_dict, "wrapfn_", make_descriptor(t_FieldCache$FloatParser::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldCache$FloatParser).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldCache$FloatParser_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldCache$FloatParser::initializeClass, 1)))
            return NULL;
          return t_FieldCache$FloatParser::wrap_Object(FieldCache$FloatParser(((t_FieldCache$FloatParser *) arg)->object.this$));
        }
        static PyObject *t_FieldCache$FloatParser_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldCache$FloatParser::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FieldCache$FloatParser_parseFloat(t_FieldCache$FloatParser *self, PyObject *arg)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          jfloat result;

          if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.parseFloat(a0));
            return PyFloat_FromDouble((double) result);
          }

          PyErr_SetArgsError((PyObject *) self, "parseFloat", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/TermVectorsReader.h"
#include "java/io/Closeable.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/Accountable.h"
#include "org/apache/lucene/index/Fields.h"
#include "java/lang/Cloneable.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {

        ::java::lang::Class *TermVectorsReader::class$ = NULL;
        jmethodID *TermVectorsReader::mids$ = NULL;
        bool TermVectorsReader::live$ = false;

        jclass TermVectorsReader::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/TermVectorsReader");

            mids$ = new jmethodID[max_mid];
            mids$[mid_checkIntegrity_54c6a166] = env->getMethodID(cls, "checkIntegrity", "()V");
            mids$[mid_clone_475a2624] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/codecs/TermVectorsReader;");
            mids$[mid_get_ef1c9c73] = env->getMethodID(cls, "get", "(I)Lorg/apache/lucene/index/Fields;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void TermVectorsReader::checkIntegrity() const
        {
          env->callVoidMethod(this$, mids$[mid_checkIntegrity_54c6a166]);
        }

        TermVectorsReader TermVectorsReader::clone() const
        {
          return TermVectorsReader(env->callObjectMethod(this$, mids$[mid_clone_475a2624]));
        }

        ::org::apache::lucene::index::Fields TermVectorsReader::get(jint a0) const
        {
          return ::org::apache::lucene::index::Fields(env->callObjectMethod(this$, mids$[mid_get_ef1c9c73], a0));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        static PyObject *t_TermVectorsReader_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TermVectorsReader_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TermVectorsReader_checkIntegrity(t_TermVectorsReader *self);
        static PyObject *t_TermVectorsReader_clone(t_TermVectorsReader *self);
        static PyObject *t_TermVectorsReader_get(t_TermVectorsReader *self, PyObject *arg);

        static PyMethodDef t_TermVectorsReader__methods_[] = {
          DECLARE_METHOD(t_TermVectorsReader, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TermVectorsReader, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TermVectorsReader, checkIntegrity, METH_NOARGS),
          DECLARE_METHOD(t_TermVectorsReader, clone, METH_NOARGS),
          DECLARE_METHOD(t_TermVectorsReader, get, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TermVectorsReader, t_TermVectorsReader, ::java::lang::Object, TermVectorsReader, abstract_init, 0, 0, 0, 0, 0);

        void t_TermVectorsReader::install(PyObject *module)
        {
          installType(&PY_TYPE(TermVectorsReader), module, "TermVectorsReader", 0);
        }

        void t_TermVectorsReader::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TermVectorsReader).tp_dict, "class_", make_descriptor(TermVectorsReader::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TermVectorsReader).tp_dict, "wrapfn_", make_descriptor(t_TermVectorsReader::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TermVectorsReader).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TermVectorsReader_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TermVectorsReader::initializeClass, 1)))
            return NULL;
          return t_TermVectorsReader::wrap_Object(TermVectorsReader(((t_TermVectorsReader *) arg)->object.this$));
        }
        static PyObject *t_TermVectorsReader_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TermVectorsReader::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_TermVectorsReader_checkIntegrity(t_TermVectorsReader *self)
        {
          OBJ_CALL(self->object.checkIntegrity());
          Py_RETURN_NONE;
        }

        static PyObject *t_TermVectorsReader_clone(t_TermVectorsReader *self)
        {
          TermVectorsReader result((jobject) NULL);
          OBJ_CALL(result = self->object.clone());
          return t_TermVectorsReader::wrap_Object(result);
        }

        static PyObject *t_TermVectorsReader_get(t_TermVectorsReader *self, PyObject *arg)
        {
          jint a0;
          ::org::apache::lucene::index::Fields result((jobject) NULL);

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.get(a0));
            return ::org::apache::lucene::index::t_Fields::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "get", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/Lookup$LookupResult.h"
#include "java/lang/Class.h"
#include "java/lang/CharSequence.h"
#include "java/util/Set.h"
#include "java/lang/String.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Comparable.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {

          ::java::lang::Class *Lookup$LookupResult::class$ = NULL;
          jmethodID *Lookup$LookupResult::mids$ = NULL;
          jfieldID *Lookup$LookupResult::fids$ = NULL;
          bool Lookup$LookupResult::live$ = false;

          jclass Lookup$LookupResult::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/Lookup$LookupResult");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_03ea1383] = env->getMethodID(cls, "<init>", "(Ljava/lang/CharSequence;J)V");
              mids$[mid_init$_f8b7fcb9] = env->getMethodID(cls, "<init>", "(Ljava/lang/CharSequence;JLjava/util/Set;)V");
              mids$[mid_init$_bb9697af] = env->getMethodID(cls, "<init>", "(Ljava/lang/CharSequence;JLorg/apache/lucene/util/BytesRef;)V");
              mids$[mid_init$_a19b2ec9] = env->getMethodID(cls, "<init>", "(Ljava/lang/CharSequence;JLorg/apache/lucene/util/BytesRef;Ljava/util/Set;)V");
              mids$[mid_init$_37f21f6f] = env->getMethodID(cls, "<init>", "(Ljava/lang/CharSequence;Ljava/lang/Object;JLorg/apache/lucene/util/BytesRef;)V");
              mids$[mid_init$_f9089661] = env->getMethodID(cls, "<init>", "(Ljava/lang/CharSequence;Ljava/lang/Object;JLorg/apache/lucene/util/BytesRef;Ljava/util/Set;)V");
              mids$[mid_compareTo_2615e59a] = env->getMethodID(cls, "compareTo", "(Lorg/apache/lucene/search/suggest/Lookup$LookupResult;)I");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              fids$ = new jfieldID[max_fid];
              fids$[fid_contexts] = env->getFieldID(cls, "contexts", "Ljava/util/Set;");
              fids$[fid_highlightKey] = env->getFieldID(cls, "highlightKey", "Ljava/lang/Object;");
              fids$[fid_key] = env->getFieldID(cls, "key", "Ljava/lang/CharSequence;");
              fids$[fid_payload] = env->getFieldID(cls, "payload", "Lorg/apache/lucene/util/BytesRef;");
              fids$[fid_value] = env->getFieldID(cls, "value", "J");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lookup$LookupResult::Lookup$LookupResult(const ::java::lang::CharSequence & a0, jlong a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_03ea1383, a0.this$, a1)) {}

          Lookup$LookupResult::Lookup$LookupResult(const ::java::lang::CharSequence & a0, jlong a1, const ::java::util::Set & a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f8b7fcb9, a0.this$, a1, a2.this$)) {}

          Lookup$LookupResult::Lookup$LookupResult(const ::java::lang::CharSequence & a0, jlong a1, const ::org::apache::lucene::util::BytesRef & a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_bb9697af, a0.this$, a1, a2.this$)) {}

          Lookup$LookupResult::Lookup$LookupResult(const ::java::lang::CharSequence & a0, jlong a1, const ::org::apache::lucene::util::BytesRef & a2, const ::java::util::Set & a3) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_a19b2ec9, a0.this$, a1, a2.this$, a3.this$)) {}

          Lookup$LookupResult::Lookup$LookupResult(const ::java::lang::CharSequence & a0, const ::java::lang::Object & a1, jlong a2, const ::org::apache::lucene::util::BytesRef & a3) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_37f21f6f, a0.this$, a1.this$, a2, a3.this$)) {}

          Lookup$LookupResult::Lookup$LookupResult(const ::java::lang::CharSequence & a0, const ::java::lang::Object & a1, jlong a2, const ::org::apache::lucene::util::BytesRef & a3, const ::java::util::Set & a4) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f9089661, a0.this$, a1.this$, a2, a3.this$, a4.this$)) {}

          jint Lookup$LookupResult::compareTo(const Lookup$LookupResult & a0) const
          {
            return env->callIntMethod(this$, mids$[mid_compareTo_2615e59a], a0.this$);
          }

          ::java::lang::String Lookup$LookupResult::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }

          ::java::util::Set Lookup$LookupResult::_get_contexts() const
          {
            return ::java::util::Set(env->getObjectField(this$, fids$[fid_contexts]));
          }

          ::java::lang::Object Lookup$LookupResult::_get_highlightKey() const
          {
            return ::java::lang::Object(env->getObjectField(this$, fids$[fid_highlightKey]));
          }

          ::java::lang::CharSequence Lookup$LookupResult::_get_key() const
          {
            return ::java::lang::CharSequence(env->getObjectField(this$, fids$[fid_key]));
          }

          ::org::apache::lucene::util::BytesRef Lookup$LookupResult::_get_payload() const
          {
            return ::org::apache::lucene::util::BytesRef(env->getObjectField(this$, fids$[fid_payload]));
          }

          jlong Lookup$LookupResult::_get_value() const
          {
            return env->getLongField(this$, fids$[fid_value]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          static PyObject *t_Lookup$LookupResult_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lookup$LookupResult_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lookup$LookupResult_init_(t_Lookup$LookupResult *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lookup$LookupResult_compareTo(t_Lookup$LookupResult *self, PyObject *arg);
          static PyObject *t_Lookup$LookupResult_toString(t_Lookup$LookupResult *self, PyObject *args);
          static PyObject *t_Lookup$LookupResult_get__contexts(t_Lookup$LookupResult *self, void *data);
          static PyObject *t_Lookup$LookupResult_get__highlightKey(t_Lookup$LookupResult *self, void *data);
          static PyObject *t_Lookup$LookupResult_get__key(t_Lookup$LookupResult *self, void *data);
          static PyObject *t_Lookup$LookupResult_get__payload(t_Lookup$LookupResult *self, void *data);
          static PyObject *t_Lookup$LookupResult_get__value(t_Lookup$LookupResult *self, void *data);

          static PyGetSetDef t_Lookup$LookupResult__fields_[] = {
            DECLARE_GET_FIELD(t_Lookup$LookupResult, contexts),
            DECLARE_GET_FIELD(t_Lookup$LookupResult, highlightKey),
            DECLARE_GET_FIELD(t_Lookup$LookupResult, key),
            DECLARE_GET_FIELD(t_Lookup$LookupResult, payload),
            DECLARE_GET_FIELD(t_Lookup$LookupResult, value),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Lookup$LookupResult__methods_[] = {
            DECLARE_METHOD(t_Lookup$LookupResult, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lookup$LookupResult, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lookup$LookupResult, compareTo, METH_O),
            DECLARE_METHOD(t_Lookup$LookupResult, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lookup$LookupResult, t_Lookup$LookupResult, ::java::lang::Object, Lookup$LookupResult, t_Lookup$LookupResult_init_, 0, 0, t_Lookup$LookupResult__fields_, 0, 0);

          void t_Lookup$LookupResult::install(PyObject *module)
          {
            installType(&PY_TYPE(Lookup$LookupResult), module, "Lookup$LookupResult", 0);
          }

          void t_Lookup$LookupResult::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lookup$LookupResult).tp_dict, "class_", make_descriptor(Lookup$LookupResult::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lookup$LookupResult).tp_dict, "wrapfn_", make_descriptor(t_Lookup$LookupResult::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lookup$LookupResult).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lookup$LookupResult_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lookup$LookupResult::initializeClass, 1)))
              return NULL;
            return t_Lookup$LookupResult::wrap_Object(Lookup$LookupResult(((t_Lookup$LookupResult *) arg)->object.this$));
          }
          static PyObject *t_Lookup$LookupResult_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lookup$LookupResult::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lookup$LookupResult_init_(t_Lookup$LookupResult *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                jlong a1;
                Lookup$LookupResult object((jobject) NULL);

                if (!parseArgs(args, "OJ", &::java::lang::PY_TYPE(CharSequence), &a0, &a1))
                {
                  INT_CALL(object = Lookup$LookupResult(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                jlong a1;
                ::java::util::Set a2((jobject) NULL);
                PyTypeObject **p2;
                Lookup$LookupResult object((jobject) NULL);

                if (!parseArgs(args, "OJK", &::java::lang::PY_TYPE(CharSequence), ::java::util::Set::initializeClass, &a0, &a1, &a2, &p2, ::java::util::t_Set::parameters_))
                {
                  INT_CALL(object = Lookup$LookupResult(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                jlong a1;
                ::org::apache::lucene::util::BytesRef a2((jobject) NULL);
                Lookup$LookupResult object((jobject) NULL);

                if (!parseArgs(args, "OJk", &::java::lang::PY_TYPE(CharSequence), ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = Lookup$LookupResult(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 4:
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                jlong a1;
                ::org::apache::lucene::util::BytesRef a2((jobject) NULL);
                ::java::util::Set a3((jobject) NULL);
                PyTypeObject **p3;
                Lookup$LookupResult object((jobject) NULL);

                if (!parseArgs(args, "OJkK", &::java::lang::PY_TYPE(CharSequence), ::org::apache::lucene::util::BytesRef::initializeClass, ::java::util::Set::initializeClass, &a0, &a1, &a2, &a3, &p3, ::java::util::t_Set::parameters_))
                {
                  INT_CALL(object = Lookup$LookupResult(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                ::java::lang::Object a1((jobject) NULL);
                jlong a2;
                ::org::apache::lucene::util::BytesRef a3((jobject) NULL);
                Lookup$LookupResult object((jobject) NULL);

                if (!parseArgs(args, "OoJk", &::java::lang::PY_TYPE(CharSequence), ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2, &a3))
                {
                  INT_CALL(object = Lookup$LookupResult(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 5:
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                ::java::lang::Object a1((jobject) NULL);
                jlong a2;
                ::org::apache::lucene::util::BytesRef a3((jobject) NULL);
                ::java::util::Set a4((jobject) NULL);
                PyTypeObject **p4;
                Lookup$LookupResult object((jobject) NULL);

                if (!parseArgs(args, "OoJkK", &::java::lang::PY_TYPE(CharSequence), ::org::apache::lucene::util::BytesRef::initializeClass, ::java::util::Set::initializeClass, &a0, &a1, &a2, &a3, &a4, &p4, ::java::util::t_Set::parameters_))
                {
                  INT_CALL(object = Lookup$LookupResult(a0, a1, a2, a3, a4));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_Lookup$LookupResult_compareTo(t_Lookup$LookupResult *self, PyObject *arg)
          {
            Lookup$LookupResult a0((jobject) NULL);
            jint result;

            if (!parseArg(arg, "k", Lookup$LookupResult::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.compareTo(a0));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "compareTo", arg);
            return NULL;
          }

          static PyObject *t_Lookup$LookupResult_toString(t_Lookup$LookupResult *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(Lookup$LookupResult), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_Lookup$LookupResult_get__contexts(t_Lookup$LookupResult *self, void *data)
          {
            ::java::util::Set value((jobject) NULL);
            OBJ_CALL(value = self->object._get_contexts());
            return ::java::util::t_Set::wrap_Object(value);
          }

          static PyObject *t_Lookup$LookupResult_get__highlightKey(t_Lookup$LookupResult *self, void *data)
          {
            ::java::lang::Object value((jobject) NULL);
            OBJ_CALL(value = self->object._get_highlightKey());
            return ::java::lang::t_Object::wrap_Object(value);
          }

          static PyObject *t_Lookup$LookupResult_get__key(t_Lookup$LookupResult *self, void *data)
          {
            ::java::lang::CharSequence value((jobject) NULL);
            OBJ_CALL(value = self->object._get_key());
            return ::java::lang::t_CharSequence::wrap_Object(value);
          }

          static PyObject *t_Lookup$LookupResult_get__payload(t_Lookup$LookupResult *self, void *data)
          {
            ::org::apache::lucene::util::BytesRef value((jobject) NULL);
            OBJ_CALL(value = self->object._get_payload());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(value);
          }

          static PyObject *t_Lookup$LookupResult_get__value(t_Lookup$LookupResult *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object._get_value());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/Distribution.h"
#include "org/apache/lucene/search/Explanation.h"
#include "org/apache/lucene/search/similarities/BasicStats.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *Distribution::class$ = NULL;
          jmethodID *Distribution::mids$ = NULL;
          bool Distribution::live$ = false;

          jclass Distribution::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/Distribution");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_explain_aa9c2b5b] = env->getMethodID(cls, "explain", "(Lorg/apache/lucene/search/similarities/BasicStats;FF)Lorg/apache/lucene/search/Explanation;");
              mids$[mid_score_63482206] = env->getMethodID(cls, "score", "(Lorg/apache/lucene/search/similarities/BasicStats;FF)F");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Distribution::Distribution() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::search::Explanation Distribution::explain(const ::org::apache::lucene::search::similarities::BasicStats & a0, jfloat a1, jfloat a2) const
          {
            return ::org::apache::lucene::search::Explanation(env->callObjectMethod(this$, mids$[mid_explain_aa9c2b5b], a0.this$, a1, a2));
          }

          jfloat Distribution::score(const ::org::apache::lucene::search::similarities::BasicStats & a0, jfloat a1, jfloat a2) const
          {
            return env->callFloatMethod(this$, mids$[mid_score_63482206], a0.this$, a1, a2);
          }

          ::java::lang::String Distribution::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_Distribution_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Distribution_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Distribution_init_(t_Distribution *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Distribution_explain(t_Distribution *self, PyObject *args);
          static PyObject *t_Distribution_score(t_Distribution *self, PyObject *args);
          static PyObject *t_Distribution_toString(t_Distribution *self, PyObject *args);

          static PyMethodDef t_Distribution__methods_[] = {
            DECLARE_METHOD(t_Distribution, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Distribution, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Distribution, explain, METH_VARARGS),
            DECLARE_METHOD(t_Distribution, score, METH_VARARGS),
            DECLARE_METHOD(t_Distribution, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Distribution, t_Distribution, ::java::lang::Object, Distribution, t_Distribution_init_, 0, 0, 0, 0, 0);

          void t_Distribution::install(PyObject *module)
          {
            installType(&PY_TYPE(Distribution), module, "Distribution", 0);
          }

          void t_Distribution::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Distribution).tp_dict, "class_", make_descriptor(Distribution::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Distribution).tp_dict, "wrapfn_", make_descriptor(t_Distribution::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Distribution).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Distribution_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Distribution::initializeClass, 1)))
              return NULL;
            return t_Distribution::wrap_Object(Distribution(((t_Distribution *) arg)->object.this$));
          }
          static PyObject *t_Distribution_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Distribution::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Distribution_init_(t_Distribution *self, PyObject *args, PyObject *kwds)
          {
            Distribution object((jobject) NULL);

            INT_CALL(object = Distribution());
            self->object = object;

            return 0;
          }

          static PyObject *t_Distribution_explain(t_Distribution *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jfloat a1;
            jfloat a2;
            ::org::apache::lucene::search::Explanation result((jobject) NULL);

            if (!parseArgs(args, "kFF", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.explain(a0, a1, a2));
              return ::org::apache::lucene::search::t_Explanation::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "explain", args);
            return NULL;
          }

          static PyObject *t_Distribution_score(t_Distribution *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jfloat a1;
            jfloat a2;
            jfloat result;

            if (!parseArgs(args, "kFF", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.score(a0, a1, a2));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "score", args);
            return NULL;
          }

          static PyObject *t_Distribution_toString(t_Distribution *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(Distribution), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/postingshighlight/PostingsHighlighter.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/search/TopDocs.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace postingshighlight {

          ::java::lang::Class *PostingsHighlighter::class$ = NULL;
          jmethodID *PostingsHighlighter::mids$ = NULL;
          bool PostingsHighlighter::live$ = false;
          jint PostingsHighlighter::DEFAULT_MAX_LENGTH = (jint) 0;

          jclass PostingsHighlighter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/postingshighlight/PostingsHighlighter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
              mids$[mid_highlight_cfb8b283] = env->getMethodID(cls, "highlight", "(Ljava/lang/String;Lorg/apache/lucene/search/Query;Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/TopDocs;)[Ljava/lang/String;");
              mids$[mid_highlight_c287afc1] = env->getMethodID(cls, "highlight", "(Ljava/lang/String;Lorg/apache/lucene/search/Query;Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/TopDocs;I)[Ljava/lang/String;");
              mids$[mid_highlightFields_52512a83] = env->getMethodID(cls, "highlightFields", "([Ljava/lang/String;Lorg/apache/lucene/search/Query;Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/TopDocs;)Ljava/util/Map;");
              mids$[mid_highlightFields_d3afe138] = env->getMethodID(cls, "highlightFields", "([Ljava/lang/String;Lorg/apache/lucene/search/Query;Lorg/apache/lucene/search/IndexSearcher;[I[I)Ljava/util/Map;");
              mids$[mid_highlightFields_20e79c3d] = env->getMethodID(cls, "highlightFields", "([Ljava/lang/String;Lorg/apache/lucene/search/Query;Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/TopDocs;[I)Ljava/util/Map;");
              mids$[mid_getScorer_b8762390] = env->getMethodID(cls, "getScorer", "(Ljava/lang/String;)Lorg/apache/lucene/search/postingshighlight/PassageScorer;");
              mids$[mid_getMultiValuedSeparator_5fdc3f5d] = env->getMethodID(cls, "getMultiValuedSeparator", "(Ljava/lang/String;)C");
              mids$[mid_getFormatter_a176835f] = env->getMethodID(cls, "getFormatter", "(Ljava/lang/String;)Lorg/apache/lucene/search/postingshighlight/PassageFormatter;");
              mids$[mid_highlightFieldsAsObjects_d3afe138] = env->getMethodID(cls, "highlightFieldsAsObjects", "([Ljava/lang/String;Lorg/apache/lucene/search/Query;Lorg/apache/lucene/search/IndexSearcher;[I[I)Ljava/util/Map;");
              mids$[mid_getBreakIterator_4cb4d821] = env->getMethodID(cls, "getBreakIterator", "(Ljava/lang/String;)Ljava/text/BreakIterator;");
              mids$[mid_loadFieldValues_350d45ad] = env->getMethodID(cls, "loadFieldValues", "(Lorg/apache/lucene/search/IndexSearcher;[Ljava/lang/String;[II)[[Ljava/lang/String;");
              mids$[mid_getIndexAnalyzer_29a2299f] = env->getMethodID(cls, "getIndexAnalyzer", "(Ljava/lang/String;)Lorg/apache/lucene/analysis/Analyzer;");
              mids$[mid_getEmptyHighlight_863ca84c] = env->getMethodID(cls, "getEmptyHighlight", "(Ljava/lang/String;Ljava/text/BreakIterator;I)[Lorg/apache/lucene/search/postingshighlight/Passage;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_MAX_LENGTH = env->getStaticIntField(cls, "DEFAULT_MAX_LENGTH");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PostingsHighlighter::PostingsHighlighter() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          PostingsHighlighter::PostingsHighlighter(jint a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

          JArray< ::java::lang::String > PostingsHighlighter::highlight(const ::java::lang::String & a0, const ::org::apache::lucene::search::Query & a1, const ::org::apache::lucene::search::IndexSearcher & a2, const ::org::apache::lucene::search::TopDocs & a3) const
          {
            return JArray< ::java::lang::String >(env->callObjectMethod(this$, mids$[mid_highlight_cfb8b283], a0.this$, a1.this$, a2.this$, a3.this$));
          }

          JArray< ::java::lang::String > PostingsHighlighter::highlight(const ::java::lang::String & a0, const ::org::apache::lucene::search::Query & a1, const ::org::apache::lucene::search::IndexSearcher & a2, const ::org::apache::lucene::search::TopDocs & a3, jint a4) const
          {
            return JArray< ::java::lang::String >(env->callObjectMethod(this$, mids$[mid_highlight_c287afc1], a0.this$, a1.this$, a2.this$, a3.this$, a4));
          }

          ::java::util::Map PostingsHighlighter::highlightFields(const JArray< ::java::lang::String > & a0, const ::org::apache::lucene::search::Query & a1, const ::org::apache::lucene::search::IndexSearcher & a2, const ::org::apache::lucene::search::TopDocs & a3) const
          {
            return ::java::util::Map(env->callObjectMethod(this$, mids$[mid_highlightFields_52512a83], a0.this$, a1.this$, a2.this$, a3.this$));
          }

          ::java::util::Map PostingsHighlighter::highlightFields(const JArray< ::java::lang::String > & a0, const ::org::apache::lucene::search::Query & a1, const ::org::apache::lucene::search::IndexSearcher & a2, const JArray< jint > & a3, const JArray< jint > & a4) const
          {
            return ::java::util::Map(env->callObjectMethod(this$, mids$[mid_highlightFields_d3afe138], a0.this$, a1.this$, a2.this$, a3.this$, a4.this$));
          }

          ::java::util::Map PostingsHighlighter::highlightFields(const JArray< ::java::lang::String > & a0, const ::org::apache::lucene::search::Query & a1, const ::org::apache::lucene::search::IndexSearcher & a2, const ::org::apache::lucene::search::TopDocs & a3, const JArray< jint > & a4) const
          {
            return ::java::util::Map(env->callObjectMethod(this$, mids$[mid_highlightFields_20e79c3d], a0.this$, a1.this$, a2.this$, a3.this$, a4.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace postingshighlight {
          static PyObject *t_PostingsHighlighter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PostingsHighlighter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PostingsHighlighter_init_(t_PostingsHighlighter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PostingsHighlighter_highlight(t_PostingsHighlighter *self, PyObject *args);
          static PyObject *t_PostingsHighlighter_highlightFields(t_PostingsHighlighter *self, PyObject *args);

          static PyMethodDef t_PostingsHighlighter__methods_[] = {
            DECLARE_METHOD(t_PostingsHighlighter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PostingsHighlighter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PostingsHighlighter, highlight, METH_VARARGS),
            DECLARE_METHOD(t_PostingsHighlighter, highlightFields, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PostingsHighlighter, t_PostingsHighlighter, ::java::lang::Object, PostingsHighlighter, t_PostingsHighlighter_init_, 0, 0, 0, 0, 0);

          void t_PostingsHighlighter::install(PyObject *module)
          {
            installType(&PY_TYPE(PostingsHighlighter), module, "PostingsHighlighter", 0);
          }

          void t_PostingsHighlighter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PostingsHighlighter).tp_dict, "class_", make_descriptor(PostingsHighlighter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PostingsHighlighter).tp_dict, "wrapfn_", make_descriptor(t_PostingsHighlighter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PostingsHighlighter).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(PostingsHighlighter::initializeClass);
            PyDict_SetItemString(PY_TYPE(PostingsHighlighter).tp_dict, "DEFAULT_MAX_LENGTH", make_descriptor(PostingsHighlighter::DEFAULT_MAX_LENGTH));
          }

          static PyObject *t_PostingsHighlighter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PostingsHighlighter::initializeClass, 1)))
              return NULL;
            return t_PostingsHighlighter::wrap_Object(PostingsHighlighter(((t_PostingsHighlighter *) arg)->object.this$));
          }
          static PyObject *t_PostingsHighlighter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PostingsHighlighter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PostingsHighlighter_init_(t_PostingsHighlighter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                PostingsHighlighter object((jobject) NULL);

                INT_CALL(object = PostingsHighlighter());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                jint a0;
                PostingsHighlighter object((jobject) NULL);

                if (!parseArgs(args, "I", &a0))
                {
                  INT_CALL(object = PostingsHighlighter(a0));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PostingsHighlighter_highlight(t_PostingsHighlighter *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 4:
              {
                ::java::lang::String a0((jobject) NULL);
                ::org::apache::lucene::search::Query a1((jobject) NULL);
                ::org::apache::lucene::search::IndexSearcher a2((jobject) NULL);
                ::org::apache::lucene::search::TopDocs a3((jobject) NULL);
                JArray< ::java::lang::String > result((jobject) NULL);

                if (!parseArgs(args, "skkk", ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::search::TopDocs::initializeClass, &a0, &a1, &a2, &a3))
                {
                  OBJ_CALL(result = self->object.highlight(a0, a1, a2, a3));
                  return JArray<jstring>(result.this$).wrap();
                }
              }
              break;
             case 5:
              {
                ::java::lang::String a0((jobject) NULL);
                ::org::apache::lucene::search::Query a1((jobject) NULL);
                ::org::apache::lucene::search::IndexSearcher a2((jobject) NULL);
                ::org::apache::lucene::search::TopDocs a3((jobject) NULL);
                jint a4;
                JArray< ::java::lang::String > result((jobject) NULL);

                if (!parseArgs(args, "skkkI", ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::search::TopDocs::initializeClass, &a0, &a1, &a2, &a3, &a4))
                {
                  OBJ_CALL(result = self->object.highlight(a0, a1, a2, a3, a4));
                  return JArray<jstring>(result.this$).wrap();
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "highlight", args);
            return NULL;
          }

          static PyObject *t_PostingsHighlighter_highlightFields(t_PostingsHighlighter *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 4:
              {
                JArray< ::java::lang::String > a0((jobject) NULL);
                ::org::apache::lucene::search::Query a1((jobject) NULL);
                ::org::apache::lucene::search::IndexSearcher a2((jobject) NULL);
                ::org::apache::lucene::search::TopDocs a3((jobject) NULL);
                ::java::util::Map result((jobject) NULL);

                if (!parseArgs(args, "[skkk", ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::search::TopDocs::initializeClass, &a0, &a1, &a2, &a3))
                {
                  OBJ_CALL(result = self->object.highlightFields(a0, a1, a2, a3));
                  return ::java::util::t_Map::wrap_Object(result, &::java::lang::PY_TYPE(String), &::java::lang::PY_TYPE(Object));
                }
              }
              break;
             case 5:
              {
                JArray< ::java::lang::String > a0((jobject) NULL);
                ::org::apache::lucene::search::Query a1((jobject) NULL);
                ::org::apache::lucene::search::IndexSearcher a2((jobject) NULL);
                JArray< jint > a3((jobject) NULL);
                JArray< jint > a4((jobject) NULL);
                ::java::util::Map result((jobject) NULL);

                if (!parseArgs(args, "[skk[I[I", ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0, &a1, &a2, &a3, &a4))
                {
                  OBJ_CALL(result = self->object.highlightFields(a0, a1, a2, a3, a4));
                  return ::java::util::t_Map::wrap_Object(result, &::java::lang::PY_TYPE(String), &::java::lang::PY_TYPE(Object));
                }
              }
              {
                JArray< ::java::lang::String > a0((jobject) NULL);
                ::org::apache::lucene::search::Query a1((jobject) NULL);
                ::org::apache::lucene::search::IndexSearcher a2((jobject) NULL);
                ::org::apache::lucene::search::TopDocs a3((jobject) NULL);
                JArray< jint > a4((jobject) NULL);
                ::java::util::Map result((jobject) NULL);

                if (!parseArgs(args, "[skkk[I", ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::search::TopDocs::initializeClass, &a0, &a1, &a2, &a3, &a4))
                {
                  OBJ_CALL(result = self->object.highlightFields(a0, a1, a2, a3, a4));
                  return ::java::util::t_Map::wrap_Object(result, &::java::lang::PY_TYPE(String), &::java::lang::PY_TYPE(Object));
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "highlightFields", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/expressions/js/JavascriptParser$bitwise_xor_return.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {

          ::java::lang::Class *JavascriptParser$bitwise_xor_return::class$ = NULL;
          jmethodID *JavascriptParser$bitwise_xor_return::mids$ = NULL;
          bool JavascriptParser$bitwise_xor_return::live$ = false;

          jclass JavascriptParser$bitwise_xor_return::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/expressions/js/JavascriptParser$bitwise_xor_return");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          JavascriptParser$bitwise_xor_return::JavascriptParser$bitwise_xor_return() : ::org::antlr::runtime::ParserRuleReturnScope(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {
          static PyObject *t_JavascriptParser$bitwise_xor_return_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_JavascriptParser$bitwise_xor_return_instance_(PyTypeObject *type, PyObject *arg);
          static int t_JavascriptParser$bitwise_xor_return_init_(t_JavascriptParser$bitwise_xor_return *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_JavascriptParser$bitwise_xor_return__methods_[] = {
            DECLARE_METHOD(t_JavascriptParser$bitwise_xor_return, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_JavascriptParser$bitwise_xor_return, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(JavascriptParser$bitwise_xor_return, t_JavascriptParser$bitwise_xor_return, ::org::antlr::runtime::ParserRuleReturnScope, JavascriptParser$bitwise_xor_return, t_JavascriptParser$bitwise_xor_return_init_, 0, 0, 0, 0, 0);

          void t_JavascriptParser$bitwise_xor_return::install(PyObject *module)
          {
            installType(&PY_TYPE(JavascriptParser$bitwise_xor_return), module, "JavascriptParser$bitwise_xor_return", 0);
          }

          void t_JavascriptParser$bitwise_xor_return::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(JavascriptParser$bitwise_xor_return).tp_dict, "class_", make_descriptor(JavascriptParser$bitwise_xor_return::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(JavascriptParser$bitwise_xor_return).tp_dict, "wrapfn_", make_descriptor(t_JavascriptParser$bitwise_xor_return::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(JavascriptParser$bitwise_xor_return).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_JavascriptParser$bitwise_xor_return_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, JavascriptParser$bitwise_xor_return::initializeClass, 1)))
              return NULL;
            return t_JavascriptParser$bitwise_xor_return::wrap_Object(JavascriptParser$bitwise_xor_return(((t_JavascriptParser$bitwise_xor_return *) arg)->object.this$));
          }
          static PyObject *t_JavascriptParser$bitwise_xor_return_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, JavascriptParser$bitwise_xor_return::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_JavascriptParser$bitwise_xor_return_init_(t_JavascriptParser$bitwise_xor_return *self, PyObject *args, PyObject *kwds)
          {
            JavascriptParser$bitwise_xor_return object((jobject) NULL);

            INT_CALL(object = JavascriptParser$bitwise_xor_return());
            self->object = object;

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/util/LinkedHashMap.h"
#include "java/lang/Class.h"
#include "java/util/Collection.h"
#include "java/util/Set.h"
#include "java/lang/Object.h"
#include "java/util/Map$Entry.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace java {
  namespace util {

    ::java::lang::Class *LinkedHashMap::class$ = NULL;
    jmethodID *LinkedHashMap::mids$ = NULL;
    bool LinkedHashMap::live$ = false;

    jclass LinkedHashMap::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/util/LinkedHashMap");

        mids$ = new jmethodID[max_mid];
        mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
        mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
        mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
        mids$[mid_init$_abdf2c51] = env->getMethodID(cls, "<init>", "(IF)V");
        mids$[mid_init$_514f44c2] = env->getMethodID(cls, "<init>", "(IFZ)V");
        mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
        mids$[mid_containsValue_290588e2] = env->getMethodID(cls, "containsValue", "(Ljava/lang/Object;)Z");
        mids$[mid_entrySet_03e99967] = env->getMethodID(cls, "entrySet", "()Ljava/util/Set;");
        mids$[mid_get_a932a95f] = env->getMethodID(cls, "get", "(Ljava/lang/Object;)Ljava/lang/Object;");
        mids$[mid_getOrDefault_537d5bdf] = env->getMethodID(cls, "getOrDefault", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;");
        mids$[mid_keySet_03e99967] = env->getMethodID(cls, "keySet", "()Ljava/util/Set;");
        mids$[mid_values_2d2d7de4] = env->getMethodID(cls, "values", "()Ljava/util/Collection;");
        mids$[mid_removeEldestEntry_8e61453a] = env->getMethodID(cls, "removeEldestEntry", "(Ljava/util/Map$Entry;)Z");

        class$ = (::java::lang::Class *) new JObject(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    LinkedHashMap::LinkedHashMap() : ::java::util::HashMap(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

    LinkedHashMap::LinkedHashMap(const ::java::util::Map & a0) : ::java::util::HashMap(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

    LinkedHashMap::LinkedHashMap(jint a0) : ::java::util::HashMap(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

    LinkedHashMap::LinkedHashMap(jint a0, jfloat a1) : ::java::util::HashMap(env->newObject(initializeClass, &mids$, mid_init$_abdf2c51, a0, a1)) {}

    LinkedHashMap::LinkedHashMap(jint a0, jfloat a1, jboolean a2) : ::java::util::HashMap(env->newObject(initializeClass, &mids$, mid_init$_514f44c2, a0, a1, a2)) {}

    void LinkedHashMap::clear() const
    {
      env->callVoidMethod(this$, mids$[mid_clear_54c6a166]);
    }

    jboolean LinkedHashMap::containsValue(const ::java::lang::Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_containsValue_290588e2], a0.this$);
    }

    ::java::util::Set LinkedHashMap::entrySet() const
    {
      return ::java::util::Set(env->callObjectMethod(this$, mids$[mid_entrySet_03e99967]));
    }

    ::java::lang::Object LinkedHashMap::get(const ::java::lang::Object & a0) const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_get_a932a95f], a0.this$));
    }

    ::java::lang::Object LinkedHashMap::getOrDefault(const ::java::lang::Object & a0, const ::java::lang::Object & a1) const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_getOrDefault_537d5bdf], a0.this$, a1.this$));
    }

    ::java::util::Set LinkedHashMap::keySet() const
    {
      return ::java::util::Set(env->callObjectMethod(this$, mids$[mid_keySet_03e99967]));
    }

    ::java::util::Collection LinkedHashMap::values() const
    {
      return ::java::util::Collection(env->callObjectMethod(this$, mids$[mid_values_2d2d7de4]));
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace util {
    static PyObject *t_LinkedHashMap_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_LinkedHashMap_instance_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_LinkedHashMap_of_(t_LinkedHashMap *self, PyObject *args);
    static int t_LinkedHashMap_init_(t_LinkedHashMap *self, PyObject *args, PyObject *kwds);
    static PyObject *t_LinkedHashMap_clear(t_LinkedHashMap *self, PyObject *args);
    static PyObject *t_LinkedHashMap_containsValue(t_LinkedHashMap *self, PyObject *args);
    static PyObject *t_LinkedHashMap_entrySet(t_LinkedHashMap *self, PyObject *args);
    static PyObject *t_LinkedHashMap_get(t_LinkedHashMap *self, PyObject *args);
    static PyObject *t_LinkedHashMap_getOrDefault(t_LinkedHashMap *self, PyObject *args);
    static PyObject *t_LinkedHashMap_keySet(t_LinkedHashMap *self, PyObject *args);
    static PyObject *t_LinkedHashMap_values(t_LinkedHashMap *self, PyObject *args);
    static PyObject *t_LinkedHashMap_get__parameters_(t_LinkedHashMap *self, void *data);
    static PyGetSetDef t_LinkedHashMap__fields_[] = {
      DECLARE_GET_FIELD(t_LinkedHashMap, parameters_),
      { NULL, NULL, NULL, NULL, NULL }
    };

    static PyMethodDef t_LinkedHashMap__methods_[] = {
      DECLARE_METHOD(t_LinkedHashMap, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_LinkedHashMap, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_LinkedHashMap, of_, METH_VARARGS),
      DECLARE_METHOD(t_LinkedHashMap, clear, METH_VARARGS),
      DECLARE_METHOD(t_LinkedHashMap, containsValue, METH_VARARGS),
      DECLARE_METHOD(t_LinkedHashMap, entrySet, METH_VARARGS),
      DECLARE_METHOD(t_LinkedHashMap, get, METH_VARARGS),
      DECLARE_METHOD(t_LinkedHashMap, getOrDefault, METH_VARARGS),
      DECLARE_METHOD(t_LinkedHashMap, keySet, METH_VARARGS),
      DECLARE_METHOD(t_LinkedHashMap, values, METH_VARARGS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(LinkedHashMap, t_LinkedHashMap, ::java::util::HashMap, LinkedHashMap, t_LinkedHashMap_init_, 0, 0, t_LinkedHashMap__fields_, 0, 0);
    PyObject *t_LinkedHashMap::wrap_Object(const LinkedHashMap& object, PyTypeObject *p0, PyTypeObject *p1)
    {
      PyObject *obj = t_LinkedHashMap::wrap_Object(object);
      if (obj != NULL && obj != Py_None)
      {
        t_LinkedHashMap *self = (t_LinkedHashMap *) obj;
        self->parameters[0] = p0;
        self->parameters[1] = p1;
      }
      return obj;
    }

    PyObject *t_LinkedHashMap::wrap_jobject(const jobject& object, PyTypeObject *p0, PyTypeObject *p1)
    {
      PyObject *obj = t_LinkedHashMap::wrap_jobject(object);
      if (obj != NULL && obj != Py_None)
      {
        t_LinkedHashMap *self = (t_LinkedHashMap *) obj;
        self->parameters[0] = p0;
        self->parameters[1] = p1;
      }
      return obj;
    }

    void t_LinkedHashMap::install(PyObject *module)
    {
      installType(&PY_TYPE(LinkedHashMap), module, "LinkedHashMap", 0);
    }

    void t_LinkedHashMap::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(LinkedHashMap).tp_dict, "class_", make_descriptor(LinkedHashMap::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(LinkedHashMap).tp_dict, "wrapfn_", make_descriptor(t_LinkedHashMap::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(LinkedHashMap).tp_dict, "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_LinkedHashMap_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, LinkedHashMap::initializeClass, 1)))
        return NULL;
      return t_LinkedHashMap::wrap_Object(LinkedHashMap(((t_LinkedHashMap *) arg)->object.this$));
    }
    static PyObject *t_LinkedHashMap_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, LinkedHashMap::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static PyObject *t_LinkedHashMap_of_(t_LinkedHashMap *self, PyObject *args)
    {
      if (!parseArg(args, "T", 2, &(self->parameters)))
        Py_RETURN_SELF;
      return PyErr_SetArgsError((PyObject *) self, "of_", args);
    }

    static int t_LinkedHashMap_init_(t_LinkedHashMap *self, PyObject *args, PyObject *kwds)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          LinkedHashMap object((jobject) NULL);

          INT_CALL(object = LinkedHashMap());
          self->object = object;
          break;
        }
        goto err;
       case 1:
        {
          ::java::util::Map a0((jobject) NULL);
          PyTypeObject **p0;
          LinkedHashMap object((jobject) NULL);

          if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
          {
            INT_CALL(object = LinkedHashMap(a0));
            self->object = object;
            break;
          }
        }
        {
          jint a0;
          LinkedHashMap object((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            INT_CALL(object = LinkedHashMap(a0));
            self->object = object;
            break;
          }
        }
        goto err;
       case 2:
        {
          jint a0;
          jfloat a1;
          LinkedHashMap object((jobject) NULL);

          if (!parseArgs(args, "IF", &a0, &a1))
          {
            INT_CALL(object = LinkedHashMap(a0, a1));
            self->object = object;
            break;
          }
        }
        goto err;
       case 3:
        {
          jint a0;
          jfloat a1;
          jboolean a2;
          LinkedHashMap object((jobject) NULL);

          if (!parseArgs(args, "IFZ", &a0, &a1, &a2))
          {
            INT_CALL(object = LinkedHashMap(a0, a1, a2));
            self->object = object;
            break;
          }
        }
       default:
       err:
        PyErr_SetArgsError((PyObject *) self, "__init__", args);
        return -1;
      }

      return 0;
    }

    static PyObject *t_LinkedHashMap_clear(t_LinkedHashMap *self, PyObject *args)
    {

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(self->object.clear());
        Py_RETURN_NONE;
      }

      return callSuper(&PY_TYPE(LinkedHashMap), (PyObject *) self, "clear", args, 2);
    }

    static PyObject *t_LinkedHashMap_containsValue(t_LinkedHashMap *self, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      jboolean result;

      if (!parseArgs(args, "o", &a0))
      {
        OBJ_CALL(result = self->object.containsValue(a0));
        Py_RETURN_BOOL(result);
      }

      return callSuper(&PY_TYPE(LinkedHashMap), (PyObject *) self, "containsValue", args, 2);
    }

    static PyObject *t_LinkedHashMap_entrySet(t_LinkedHashMap *self, PyObject *args)
    {
      ::java::util::Set result((jobject) NULL);

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.entrySet());
        return ::java::util::t_Set::wrap_Object(result);
      }

      return callSuper(&PY_TYPE(LinkedHashMap), (PyObject *) self, "entrySet", args, 2);
    }

    static PyObject *t_LinkedHashMap_get(t_LinkedHashMap *self, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      ::java::lang::Object result((jobject) NULL);

      if (!parseArgs(args, "o", &a0))
      {
        OBJ_CALL(result = self->object.get(a0));
        return self->parameters[1] != NULL ? wrapType(self->parameters[1], result.this$) : ::java::lang::t_Object::wrap_Object(result);
      }

      return callSuper(&PY_TYPE(LinkedHashMap), (PyObject *) self, "get", args, 2);
    }

    static PyObject *t_LinkedHashMap_getOrDefault(t_LinkedHashMap *self, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      ::java::lang::Object a1((jobject) NULL);
      ::java::lang::Object result((jobject) NULL);

      if (!parseArgs(args, "oO", self->parameters[1], &a0, &a1))
      {
        OBJ_CALL(result = self->object.getOrDefault(a0, a1));
        return self->parameters[1] != NULL ? wrapType(self->parameters[1], result.this$) : ::java::lang::t_Object::wrap_Object(result);
      }

      return callSuper(&PY_TYPE(LinkedHashMap), (PyObject *) self, "getOrDefault", args, 2);
    }

    static PyObject *t_LinkedHashMap_keySet(t_LinkedHashMap *self, PyObject *args)
    {
      ::java::util::Set result((jobject) NULL);

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.keySet());
        return ::java::util::t_Set::wrap_Object(result, self->parameters[0]);
      }

      return callSuper(&PY_TYPE(LinkedHashMap), (PyObject *) self, "keySet", args, 2);
    }

    static PyObject *t_LinkedHashMap_values(t_LinkedHashMap *self, PyObject *args)
    {
      ::java::util::Collection result((jobject) NULL);

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.values());
        return ::java::util::t_Collection::wrap_Object(result, self->parameters[1]);
      }

      return callSuper(&PY_TYPE(LinkedHashMap), (PyObject *) self, "values", args, 2);
    }
    static PyObject *t_LinkedHashMap_get__parameters_(t_LinkedHashMap *self, void *data)
    {
      return typeParameters(self->parameters, sizeof(self->parameters));
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/pylucene/store/PythonLock.h"
#include "java/lang/Throwable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace store {

        ::java::lang::Class *PythonLock::class$ = NULL;
        jmethodID *PythonLock::mids$ = NULL;
        bool PythonLock::live$ = false;

        jclass PythonLock::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/pylucene/store/PythonLock");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_finalize_54c6a166] = env->getMethodID(cls, "finalize", "()V");
            mids$[mid_isLocked_54c6a16a] = env->getMethodID(cls, "isLocked", "()Z");
            mids$[mid_obtain_54c6a16a] = env->getMethodID(cls, "obtain", "()Z");
            mids$[mid_pythonDecRef_54c6a166] = env->getMethodID(cls, "pythonDecRef", "()V");
            mids$[mid_pythonExtension_54c6a17a] = env->getMethodID(cls, "pythonExtension", "()J");
            mids$[mid_pythonExtension_0ee6df2f] = env->getMethodID(cls, "pythonExtension", "(J)V");
            mids$[mid_release_54c6a166] = env->getMethodID(cls, "release", "()V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PythonLock::PythonLock() : ::org::apache::lucene::store::Lock(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void PythonLock::finalize() const
        {
          env->callVoidMethod(this$, mids$[mid_finalize_54c6a166]);
        }

        jlong PythonLock::pythonExtension() const
        {
          return env->callLongMethod(this$, mids$[mid_pythonExtension_54c6a17a]);
        }

        void PythonLock::pythonExtension(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_pythonExtension_0ee6df2f], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace store {
        static PyObject *t_PythonLock_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PythonLock_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PythonLock_init_(t_PythonLock *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PythonLock_finalize(t_PythonLock *self);
        static PyObject *t_PythonLock_pythonExtension(t_PythonLock *self, PyObject *args);
        static void JNICALL t_PythonLock_close0(JNIEnv *jenv, jobject jobj);
        static jboolean JNICALL t_PythonLock_isLocked1(JNIEnv *jenv, jobject jobj);
        static jboolean JNICALL t_PythonLock_obtain2(JNIEnv *jenv, jobject jobj);
        static void JNICALL t_PythonLock_pythonDecRef3(JNIEnv *jenv, jobject jobj);
        static void JNICALL t_PythonLock_release4(JNIEnv *jenv, jobject jobj);
        static PyObject *t_PythonLock_get__self(t_PythonLock *self, void *data);
        static PyGetSetDef t_PythonLock__fields_[] = {
          DECLARE_GET_FIELD(t_PythonLock, self),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PythonLock__methods_[] = {
          DECLARE_METHOD(t_PythonLock, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonLock, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonLock, finalize, METH_NOARGS),
          DECLARE_METHOD(t_PythonLock, pythonExtension, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PythonLock, t_PythonLock, ::org::apache::lucene::store::Lock, PythonLock, t_PythonLock_init_, 0, 0, t_PythonLock__fields_, 0, 0);

        void t_PythonLock::install(PyObject *module)
        {
          installType(&PY_TYPE(PythonLock), module, "PythonLock", 1);
        }

        void t_PythonLock::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PythonLock).tp_dict, "class_", make_descriptor(PythonLock::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PythonLock).tp_dict, "wrapfn_", make_descriptor(t_PythonLock::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PythonLock).tp_dict, "boxfn_", make_descriptor(boxObject));
          jclass cls = env->getClass(PythonLock::initializeClass);
          JNINativeMethod methods[] = {
            { "close", "()V", (void *) t_PythonLock_close0 },
            { "isLocked", "()Z", (void *) t_PythonLock_isLocked1 },
            { "obtain", "()Z", (void *) t_PythonLock_obtain2 },
            { "pythonDecRef", "()V", (void *) t_PythonLock_pythonDecRef3 },
            { "release", "()V", (void *) t_PythonLock_release4 },
          };
          env->registerNatives(cls, methods, 5);
        }

        static PyObject *t_PythonLock_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PythonLock::initializeClass, 1)))
            return NULL;
          return t_PythonLock::wrap_Object(PythonLock(((t_PythonLock *) arg)->object.this$));
        }
        static PyObject *t_PythonLock_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PythonLock::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PythonLock_init_(t_PythonLock *self, PyObject *args, PyObject *kwds)
        {
          PythonLock object((jobject) NULL);

          INT_CALL(object = PythonLock());
          self->object = object;

          Py_INCREF((PyObject *) self);
          self->object.pythonExtension((jlong) (Py_intptr_t) (void *) self);

          return 0;
        }

        static PyObject *t_PythonLock_finalize(t_PythonLock *self)
        {
          OBJ_CALL(self->object.finalize());
          Py_RETURN_NONE;
        }

        static PyObject *t_PythonLock_pythonExtension(t_PythonLock *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              jlong result;
              OBJ_CALL(result = self->object.pythonExtension());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }
            break;
           case 1:
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.pythonExtension(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "pythonExtension", args);
          return NULL;
        }

        static void JNICALL t_PythonLock_close0(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonLock::mids$[PythonLock::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          PyObject *result = PyObject_CallMethod(obj, "close", "");
          if (!result)
            throwPythonError();
          else
            Py_DECREF(result);
        }

        static jboolean JNICALL t_PythonLock_isLocked1(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonLock::mids$[PythonLock::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jboolean value;
          PyObject *result = PyObject_CallMethod(obj, "isLocked", "");
          if (!result)
            throwPythonError();
          else if (parseArg(result, "Z", &value))
          {
            throwTypeError("isLocked", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jboolean) 0;
        }

        static jboolean JNICALL t_PythonLock_obtain2(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonLock::mids$[PythonLock::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jboolean value;
          PyObject *result = PyObject_CallMethod(obj, "obtain", "");
          if (!result)
            throwPythonError();
          else if (parseArg(result, "Z", &value))
          {
            throwTypeError("obtain", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jboolean) 0;
        }

        static void JNICALL t_PythonLock_pythonDecRef3(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonLock::mids$[PythonLock::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            jenv->CallVoidMethod(jobj, PythonLock::mids$[PythonLock::mid_pythonExtension_0ee6df2f], (jlong) 0);
            env->finalizeObject(jenv, obj);
          }
        }

        static void JNICALL t_PythonLock_release4(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonLock::mids$[PythonLock::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          PyObject *result = PyObject_CallMethod(obj, "release", "");
          if (!result)
            throwPythonError();
          else
            Py_DECREF(result);
        }

        static PyObject *t_PythonLock_get__self(t_PythonLock *self, void *data)
        {
          jlong ptr;
          OBJ_CALL(ptr = self->object.pythonExtension());
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            Py_INCREF(obj);
            return obj;
          }
          else
            Py_RETURN_NONE;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/docvalues/FloatDocValues.h"
#include "org/apache/lucene/queries/function/ValueSource.h"
#include "org/apache/lucene/queries/function/FunctionValues$ValueFiller.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace docvalues {

            ::java::lang::Class *FloatDocValues::class$ = NULL;
            jmethodID *FloatDocValues::mids$ = NULL;
            bool FloatDocValues::live$ = false;

            jclass FloatDocValues::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/docvalues/FloatDocValues");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_ca78fe7a] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queries/function/ValueSource;)V");
                mids$[mid_byteVal_39c7bd28] = env->getMethodID(cls, "byteVal", "(I)B");
                mids$[mid_doubleVal_39c7bd2e] = env->getMethodID(cls, "doubleVal", "(I)D");
                mids$[mid_floatVal_39c7bd2c] = env->getMethodID(cls, "floatVal", "(I)F");
                mids$[mid_getValueFiller_7731f0bd] = env->getMethodID(cls, "getValueFiller", "()Lorg/apache/lucene/queries/function/FunctionValues$ValueFiller;");
                mids$[mid_intVal_39c7bd23] = env->getMethodID(cls, "intVal", "(I)I");
                mids$[mid_longVal_39c7bd20] = env->getMethodID(cls, "longVal", "(I)J");
                mids$[mid_objectVal_29be6a55] = env->getMethodID(cls, "objectVal", "(I)Ljava/lang/Object;");
                mids$[mid_shortVal_39c7bd39] = env->getMethodID(cls, "shortVal", "(I)S");
                mids$[mid_strVal_141401b3] = env->getMethodID(cls, "strVal", "(I)Ljava/lang/String;");
                mids$[mid_toString_141401b3] = env->getMethodID(cls, "toString", "(I)Ljava/lang/String;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            FloatDocValues::FloatDocValues(const ::org::apache::lucene::queries::function::ValueSource & a0) : ::org::apache::lucene::queries::function::FunctionValues(env->newObject(initializeClass, &mids$, mid_init$_ca78fe7a, a0.this$)) {}

            jbyte FloatDocValues::byteVal(jint a0) const
            {
              return env->callByteMethod(this$, mids$[mid_byteVal_39c7bd28], a0);
            }

            jdouble FloatDocValues::doubleVal(jint a0) const
            {
              return env->callDoubleMethod(this$, mids$[mid_doubleVal_39c7bd2e], a0);
            }

            jfloat FloatDocValues::floatVal(jint a0) const
            {
              return env->callFloatMethod(this$, mids$[mid_floatVal_39c7bd2c], a0);
            }

            ::org::apache::lucene::queries::function::FunctionValues$ValueFiller FloatDocValues::getValueFiller() const
            {
              return ::org::apache::lucene::queries::function::FunctionValues$ValueFiller(env->callObjectMethod(this$, mids$[mid_getValueFiller_7731f0bd]));
            }

            jint FloatDocValues::intVal(jint a0) const
            {
              return env->callIntMethod(this$, mids$[mid_intVal_39c7bd23], a0);
            }

            jlong FloatDocValues::longVal(jint a0) const
            {
              return env->callLongMethod(this$, mids$[mid_longVal_39c7bd20], a0);
            }

            ::java::lang::Object FloatDocValues::objectVal(jint a0) const
            {
              return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_objectVal_29be6a55], a0));
            }

            jshort FloatDocValues::shortVal(jint a0) const
            {
              return env->callShortMethod(this$, mids$[mid_shortVal_39c7bd39], a0);
            }

            ::java::lang::String FloatDocValues::strVal(jint a0) const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_strVal_141401b3], a0));
            }

            ::java::lang::String FloatDocValues::toString(jint a0) const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_141401b3], a0));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace docvalues {
            static PyObject *t_FloatDocValues_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_FloatDocValues_instance_(PyTypeObject *type, PyObject *arg);
            static int t_FloatDocValues_init_(t_FloatDocValues *self, PyObject *args, PyObject *kwds);
            static PyObject *t_FloatDocValues_byteVal(t_FloatDocValues *self, PyObject *args);
            static PyObject *t_FloatDocValues_doubleVal(t_FloatDocValues *self, PyObject *args);
            static PyObject *t_FloatDocValues_floatVal(t_FloatDocValues *self, PyObject *args);
            static PyObject *t_FloatDocValues_getValueFiller(t_FloatDocValues *self, PyObject *args);
            static PyObject *t_FloatDocValues_intVal(t_FloatDocValues *self, PyObject *args);
            static PyObject *t_FloatDocValues_longVal(t_FloatDocValues *self, PyObject *args);
            static PyObject *t_FloatDocValues_objectVal(t_FloatDocValues *self, PyObject *args);
            static PyObject *t_FloatDocValues_shortVal(t_FloatDocValues *self, PyObject *args);
            static PyObject *t_FloatDocValues_strVal(t_FloatDocValues *self, PyObject *args);
            static PyObject *t_FloatDocValues_toString(t_FloatDocValues *self, PyObject *args);
            static PyObject *t_FloatDocValues_get__valueFiller(t_FloatDocValues *self, void *data);
            static PyGetSetDef t_FloatDocValues__fields_[] = {
              DECLARE_GET_FIELD(t_FloatDocValues, valueFiller),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_FloatDocValues__methods_[] = {
              DECLARE_METHOD(t_FloatDocValues, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FloatDocValues, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FloatDocValues, byteVal, METH_VARARGS),
              DECLARE_METHOD(t_FloatDocValues, doubleVal, METH_VARARGS),
              DECLARE_METHOD(t_FloatDocValues, floatVal, METH_VARARGS),
              DECLARE_METHOD(t_FloatDocValues, getValueFiller, METH_VARARGS),
              DECLARE_METHOD(t_FloatDocValues, intVal, METH_VARARGS),
              DECLARE_METHOD(t_FloatDocValues, longVal, METH_VARARGS),
              DECLARE_METHOD(t_FloatDocValues, objectVal, METH_VARARGS),
              DECLARE_METHOD(t_FloatDocValues, shortVal, METH_VARARGS),
              DECLARE_METHOD(t_FloatDocValues, strVal, METH_VARARGS),
              DECLARE_METHOD(t_FloatDocValues, toString, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(FloatDocValues, t_FloatDocValues, ::org::apache::lucene::queries::function::FunctionValues, FloatDocValues, t_FloatDocValues_init_, 0, 0, t_FloatDocValues__fields_, 0, 0);

            void t_FloatDocValues::install(PyObject *module)
            {
              installType(&PY_TYPE(FloatDocValues), module, "FloatDocValues", 0);
            }

            void t_FloatDocValues::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(FloatDocValues).tp_dict, "class_", make_descriptor(FloatDocValues::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(FloatDocValues).tp_dict, "wrapfn_", make_descriptor(t_FloatDocValues::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(FloatDocValues).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_FloatDocValues_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, FloatDocValues::initializeClass, 1)))
                return NULL;
              return t_FloatDocValues::wrap_Object(FloatDocValues(((t_FloatDocValues *) arg)->object.this$));
            }
            static PyObject *t_FloatDocValues_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, FloatDocValues::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_FloatDocValues_init_(t_FloatDocValues *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::queries::function::ValueSource a0((jobject) NULL);
              FloatDocValues object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::queries::function::ValueSource::initializeClass, &a0))
              {
                INT_CALL(object = FloatDocValues(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_FloatDocValues_byteVal(t_FloatDocValues *self, PyObject *args)
            {
              jint a0;
              jbyte result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.byteVal(a0));
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(FloatDocValues), (PyObject *) self, "byteVal", args, 2);
            }

            static PyObject *t_FloatDocValues_doubleVal(t_FloatDocValues *self, PyObject *args)
            {
              jint a0;
              jdouble result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.doubleVal(a0));
                return PyFloat_FromDouble((double) result);
              }

              return callSuper(&PY_TYPE(FloatDocValues), (PyObject *) self, "doubleVal", args, 2);
            }

            static PyObject *t_FloatDocValues_floatVal(t_FloatDocValues *self, PyObject *args)
            {
              jint a0;
              jfloat result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.floatVal(a0));
                return PyFloat_FromDouble((double) result);
              }

              return callSuper(&PY_TYPE(FloatDocValues), (PyObject *) self, "floatVal", args, 2);
            }

            static PyObject *t_FloatDocValues_getValueFiller(t_FloatDocValues *self, PyObject *args)
            {
              ::org::apache::lucene::queries::function::FunctionValues$ValueFiller result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getValueFiller());
                return ::org::apache::lucene::queries::function::t_FunctionValues$ValueFiller::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(FloatDocValues), (PyObject *) self, "getValueFiller", args, 2);
            }

            static PyObject *t_FloatDocValues_intVal(t_FloatDocValues *self, PyObject *args)
            {
              jint a0;
              jint result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.intVal(a0));
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(FloatDocValues), (PyObject *) self, "intVal", args, 2);
            }

            static PyObject *t_FloatDocValues_longVal(t_FloatDocValues *self, PyObject *args)
            {
              jint a0;
              jlong result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.longVal(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }

              return callSuper(&PY_TYPE(FloatDocValues), (PyObject *) self, "longVal", args, 2);
            }

            static PyObject *t_FloatDocValues_objectVal(t_FloatDocValues *self, PyObject *args)
            {
              jint a0;
              ::java::lang::Object result((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.objectVal(a0));
                return ::java::lang::t_Object::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(FloatDocValues), (PyObject *) self, "objectVal", args, 2);
            }

            static PyObject *t_FloatDocValues_shortVal(t_FloatDocValues *self, PyObject *args)
            {
              jint a0;
              jshort result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.shortVal(a0));
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(FloatDocValues), (PyObject *) self, "shortVal", args, 2);
            }

            static PyObject *t_FloatDocValues_strVal(t_FloatDocValues *self, PyObject *args)
            {
              jint a0;
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.strVal(a0));
                return j2p(result);
              }

              return callSuper(&PY_TYPE(FloatDocValues), (PyObject *) self, "strVal", args, 2);
            }

            static PyObject *t_FloatDocValues_toString(t_FloatDocValues *self, PyObject *args)
            {
              jint a0;
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.toString(a0));
                return j2p(result);
              }

              return callSuper(&PY_TYPE(FloatDocValues), (PyObject *) self, "toString", args, 2);
            }

            static PyObject *t_FloatDocValues_get__valueFiller(t_FloatDocValues *self, void *data)
            {
              ::org::apache::lucene::queries::function::FunctionValues$ValueFiller value((jobject) NULL);
              OBJ_CALL(value = self->object.getValueFiller());
              return ::org::apache::lucene::queries::function::t_FunctionValues$ValueFiller::wrap_Object(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/PrefixFilter.h"
#include "org/apache/lucene/search/PrefixQuery.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/Term.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *PrefixFilter::class$ = NULL;
        jmethodID *PrefixFilter::mids$ = NULL;
        bool PrefixFilter::live$ = false;

        jclass PrefixFilter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/PrefixFilter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_7eca6a81] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/Term;)V");
            mids$[mid_getPrefix_0f71f314] = env->getMethodID(cls, "getPrefix", "()Lorg/apache/lucene/index/Term;");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PrefixFilter::PrefixFilter(const ::org::apache::lucene::index::Term & a0) : ::org::apache::lucene::search::MultiTermQueryWrapperFilter(env->newObject(initializeClass, &mids$, mid_init$_7eca6a81, a0.this$)) {}

        ::org::apache::lucene::index::Term PrefixFilter::getPrefix() const
        {
          return ::org::apache::lucene::index::Term(env->callObjectMethod(this$, mids$[mid_getPrefix_0f71f314]));
        }

        ::java::lang::String PrefixFilter::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_PrefixFilter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PrefixFilter_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PrefixFilter_of_(t_PrefixFilter *self, PyObject *args);
        static int t_PrefixFilter_init_(t_PrefixFilter *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PrefixFilter_getPrefix(t_PrefixFilter *self);
        static PyObject *t_PrefixFilter_toString(t_PrefixFilter *self, PyObject *args);
        static PyObject *t_PrefixFilter_get__prefix(t_PrefixFilter *self, void *data);
        static PyObject *t_PrefixFilter_get__parameters_(t_PrefixFilter *self, void *data);
        static PyGetSetDef t_PrefixFilter__fields_[] = {
          DECLARE_GET_FIELD(t_PrefixFilter, prefix),
          DECLARE_GET_FIELD(t_PrefixFilter, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PrefixFilter__methods_[] = {
          DECLARE_METHOD(t_PrefixFilter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PrefixFilter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PrefixFilter, of_, METH_VARARGS),
          DECLARE_METHOD(t_PrefixFilter, getPrefix, METH_NOARGS),
          DECLARE_METHOD(t_PrefixFilter, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PrefixFilter, t_PrefixFilter, ::org::apache::lucene::search::MultiTermQueryWrapperFilter, PrefixFilter, t_PrefixFilter_init_, 0, 0, t_PrefixFilter__fields_, 0, 0);
        PyObject *t_PrefixFilter::wrap_Object(const PrefixFilter& object, PyTypeObject *p0)
        {
          PyObject *obj = t_PrefixFilter::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_PrefixFilter *self = (t_PrefixFilter *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_PrefixFilter::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_PrefixFilter::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_PrefixFilter *self = (t_PrefixFilter *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_PrefixFilter::install(PyObject *module)
        {
          installType(&PY_TYPE(PrefixFilter), module, "PrefixFilter", 0);
        }

        void t_PrefixFilter::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PrefixFilter).tp_dict, "class_", make_descriptor(PrefixFilter::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PrefixFilter).tp_dict, "wrapfn_", make_descriptor(t_PrefixFilter::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PrefixFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_PrefixFilter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PrefixFilter::initializeClass, 1)))
            return NULL;
          return t_PrefixFilter::wrap_Object(PrefixFilter(((t_PrefixFilter *) arg)->object.this$));
        }
        static PyObject *t_PrefixFilter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PrefixFilter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_PrefixFilter_of_(t_PrefixFilter *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_PrefixFilter_init_(t_PrefixFilter *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::index::Term a0((jobject) NULL);
          PrefixFilter object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::Term::initializeClass, &a0))
          {
            INT_CALL(object = PrefixFilter(a0));
            self->object = object;
            self->parameters[0] = &::org::apache::lucene::search::PY_TYPE(PrefixQuery);
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_PrefixFilter_getPrefix(t_PrefixFilter *self)
        {
          ::org::apache::lucene::index::Term result((jobject) NULL);
          OBJ_CALL(result = self->object.getPrefix());
          return ::org::apache::lucene::index::t_Term::wrap_Object(result);
        }

        static PyObject *t_PrefixFilter_toString(t_PrefixFilter *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(PrefixFilter), (PyObject *) self, "toString", args, 2);
        }
        static PyObject *t_PrefixFilter_get__parameters_(t_PrefixFilter *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static PyObject *t_PrefixFilter_get__prefix(t_PrefixFilter *self, void *data)
        {
          ::org::apache::lucene::index::Term value((jobject) NULL);
          OBJ_CALL(value = self->object.getPrefix());
          return ::org::apache::lucene::index::t_Term::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/MultiLevelSkipListReader.h"
#include "java/io/IOException.h"
#include "java/io/Closeable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {

        ::java::lang::Class *MultiLevelSkipListReader::class$ = NULL;
        jmethodID *MultiLevelSkipListReader::mids$ = NULL;
        bool MultiLevelSkipListReader::live$ = false;

        jclass MultiLevelSkipListReader::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/MultiLevelSkipListReader");

            mids$ = new jmethodID[max_mid];
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_getDoc_54c6a179] = env->getMethodID(cls, "getDoc", "()I");
            mids$[mid_init_25d05c8f] = env->getMethodID(cls, "init", "(JI)V");
            mids$[mid_skipTo_39c7bd23] = env->getMethodID(cls, "skipTo", "(I)I");
            mids$[mid_seekChild_39c7bd3c] = env->getMethodID(cls, "seekChild", "(I)V");
            mids$[mid_setLastSkipData_39c7bd3c] = env->getMethodID(cls, "setLastSkipData", "(I)V");
            mids$[mid_readSkipData_5203bb2b] = env->getMethodID(cls, "readSkipData", "(ILorg/apache/lucene/store/IndexInput;)I");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void MultiLevelSkipListReader::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        jint MultiLevelSkipListReader::getDoc() const
        {
          return env->callIntMethod(this$, mids$[mid_getDoc_54c6a179]);
        }

        void MultiLevelSkipListReader::init(jlong a0, jint a1) const
        {
          env->callVoidMethod(this$, mids$[mid_init_25d05c8f], a0, a1);
        }

        jint MultiLevelSkipListReader::skipTo(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_skipTo_39c7bd23], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        static PyObject *t_MultiLevelSkipListReader_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiLevelSkipListReader_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiLevelSkipListReader_close(t_MultiLevelSkipListReader *self);
        static PyObject *t_MultiLevelSkipListReader_getDoc(t_MultiLevelSkipListReader *self);
        static PyObject *t_MultiLevelSkipListReader_init(t_MultiLevelSkipListReader *self, PyObject *args);
        static PyObject *t_MultiLevelSkipListReader_skipTo(t_MultiLevelSkipListReader *self, PyObject *arg);
        static PyObject *t_MultiLevelSkipListReader_get__doc(t_MultiLevelSkipListReader *self, void *data);
        static PyGetSetDef t_MultiLevelSkipListReader__fields_[] = {
          DECLARE_GET_FIELD(t_MultiLevelSkipListReader, doc),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_MultiLevelSkipListReader__methods_[] = {
          DECLARE_METHOD(t_MultiLevelSkipListReader, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiLevelSkipListReader, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiLevelSkipListReader, close, METH_NOARGS),
          DECLARE_METHOD(t_MultiLevelSkipListReader, getDoc, METH_NOARGS),
          DECLARE_METHOD(t_MultiLevelSkipListReader, init, METH_VARARGS),
          DECLARE_METHOD(t_MultiLevelSkipListReader, skipTo, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MultiLevelSkipListReader, t_MultiLevelSkipListReader, ::java::lang::Object, MultiLevelSkipListReader, abstract_init, 0, 0, t_MultiLevelSkipListReader__fields_, 0, 0);

        void t_MultiLevelSkipListReader::install(PyObject *module)
        {
          installType(&PY_TYPE(MultiLevelSkipListReader), module, "MultiLevelSkipListReader", 0);
        }

        void t_MultiLevelSkipListReader::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MultiLevelSkipListReader).tp_dict, "class_", make_descriptor(MultiLevelSkipListReader::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MultiLevelSkipListReader).tp_dict, "wrapfn_", make_descriptor(t_MultiLevelSkipListReader::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MultiLevelSkipListReader).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MultiLevelSkipListReader_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MultiLevelSkipListReader::initializeClass, 1)))
            return NULL;
          return t_MultiLevelSkipListReader::wrap_Object(MultiLevelSkipListReader(((t_MultiLevelSkipListReader *) arg)->object.this$));
        }
        static PyObject *t_MultiLevelSkipListReader_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MultiLevelSkipListReader::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_MultiLevelSkipListReader_close(t_MultiLevelSkipListReader *self)
        {
          OBJ_CALL(self->object.close());
          Py_RETURN_NONE;
        }

        static PyObject *t_MultiLevelSkipListReader_getDoc(t_MultiLevelSkipListReader *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getDoc());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_MultiLevelSkipListReader_init(t_MultiLevelSkipListReader *self, PyObject *args)
        {
          jlong a0;
          jint a1;

          if (!parseArgs(args, "JI", &a0, &a1))
          {
            OBJ_CALL(self->object.init(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "init", args);
          return NULL;
        }

        static PyObject *t_MultiLevelSkipListReader_skipTo(t_MultiLevelSkipListReader *self, PyObject *arg)
        {
          jint a0;
          jint result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.skipTo(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "skipTo", arg);
          return NULL;
        }

        static PyObject *t_MultiLevelSkipListReader_get__doc(t_MultiLevelSkipListReader *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getDoc());
          return PyInt_FromLong((long) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ar/ArabicAnalyzer.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ar {

          ::java::lang::Class *ArabicAnalyzer::class$ = NULL;
          jmethodID *ArabicAnalyzer::mids$ = NULL;
          bool ArabicAnalyzer::live$ = false;
          ::java::lang::String *ArabicAnalyzer::DEFAULT_STOPWORD_FILE = NULL;

          jclass ArabicAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ar/ArabicAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_6d1f9881] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_0d96cf33] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;)V");
              mids$[mid_init$_3ea629c6] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/util/CharArraySet;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_83eafe28] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_c9d7e4a3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_getDefaultStopSet_d2d3505c] = env->getStaticMethodID(cls, "getDefaultStopSet", "()Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_STOPWORD_FILE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_STOPWORD_FILE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ArabicAnalyzer::ArabicAnalyzer() : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ArabicAnalyzer::ArabicAnalyzer(const ::org::apache::lucene::analysis::util::CharArraySet & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_6d1f9881, a0.this$)) {}

          ArabicAnalyzer::ArabicAnalyzer(const ::org::apache::lucene::util::Version & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_0d96cf33, a0.this$)) {}

          ArabicAnalyzer::ArabicAnalyzer(const ::org::apache::lucene::analysis::util::CharArraySet & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_3ea629c6, a0.this$, a1.this$)) {}

          ArabicAnalyzer::ArabicAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_83eafe28, a0.this$, a1.this$)) {}

          ArabicAnalyzer::ArabicAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1, const ::org::apache::lucene::analysis::util::CharArraySet & a2) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_c9d7e4a3, a0.this$, a1.this$, a2.this$)) {}

          ::org::apache::lucene::analysis::util::CharArraySet ArabicAnalyzer::getDefaultStopSet()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getDefaultStopSet_d2d3505c]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ar {
          static PyObject *t_ArabicAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ArabicAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ArabicAnalyzer_init_(t_ArabicAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ArabicAnalyzer_getDefaultStopSet(PyTypeObject *type);
          static PyObject *t_ArabicAnalyzer_get__defaultStopSet(t_ArabicAnalyzer *self, void *data);
          static PyGetSetDef t_ArabicAnalyzer__fields_[] = {
            DECLARE_GET_FIELD(t_ArabicAnalyzer, defaultStopSet),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_ArabicAnalyzer__methods_[] = {
            DECLARE_METHOD(t_ArabicAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ArabicAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ArabicAnalyzer, getDefaultStopSet, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ArabicAnalyzer, t_ArabicAnalyzer, ::org::apache::lucene::analysis::util::StopwordAnalyzerBase, ArabicAnalyzer, t_ArabicAnalyzer_init_, 0, 0, t_ArabicAnalyzer__fields_, 0, 0);

          void t_ArabicAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(ArabicAnalyzer), module, "ArabicAnalyzer", 0);
          }

          void t_ArabicAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ArabicAnalyzer).tp_dict, "class_", make_descriptor(ArabicAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ArabicAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_ArabicAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ArabicAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(ArabicAnalyzer::initializeClass);
            PyDict_SetItemString(PY_TYPE(ArabicAnalyzer).tp_dict, "DEFAULT_STOPWORD_FILE", make_descriptor(j2p(*ArabicAnalyzer::DEFAULT_STOPWORD_FILE)));
          }

          static PyObject *t_ArabicAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ArabicAnalyzer::initializeClass, 1)))
              return NULL;
            return t_ArabicAnalyzer::wrap_Object(ArabicAnalyzer(((t_ArabicAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_ArabicAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ArabicAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ArabicAnalyzer_init_(t_ArabicAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                ArabicAnalyzer object((jobject) NULL);

                INT_CALL(object = ArabicAnalyzer());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                ::org::apache::lucene::analysis::util::CharArraySet a0((jobject) NULL);
                PyTypeObject **p0;
                ArabicAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = ArabicAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                ArabicAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::util::Version::initializeClass, &a0))
                {
                  INT_CALL(object = ArabicAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::analysis::util::CharArraySet a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                ArabicAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = ArabicAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                ArabicAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "kK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = ArabicAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                ::org::apache::lucene::analysis::util::CharArraySet a2((jobject) NULL);
                PyTypeObject **p2;
                ArabicAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "kKK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_, &a2, &p2, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = ArabicAnalyzer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ArabicAnalyzer_getDefaultStopSet(PyTypeObject *type)
          {
            ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::ar::ArabicAnalyzer::getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_ArabicAnalyzer_get__defaultStopSet(t_ArabicAnalyzer *self, void *data)
          {
            ::org::apache::lucene::analysis::util::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/MultiDocValues$MultiSortedDocValues.h"
#include "org/apache/lucene/index/MultiDocValues$OrdinalMap.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *MultiDocValues$MultiSortedDocValues::class$ = NULL;
        jmethodID *MultiDocValues$MultiSortedDocValues::mids$ = NULL;
        jfieldID *MultiDocValues$MultiSortedDocValues::fids$ = NULL;
        bool MultiDocValues$MultiSortedDocValues::live$ = false;

        jclass MultiDocValues$MultiSortedDocValues::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/MultiDocValues$MultiSortedDocValues");

            mids$ = new jmethodID[max_mid];
            mids$[mid_getOrd_39c7bd23] = env->getMethodID(cls, "getOrd", "(I)I");
            mids$[mid_getValueCount_54c6a179] = env->getMethodID(cls, "getValueCount", "()I");
            mids$[mid_lookupOrd_b57e9c3f] = env->getMethodID(cls, "lookupOrd", "(I)Lorg/apache/lucene/util/BytesRef;");

            fids$ = new jfieldID[max_fid];
            fids$[fid_docStarts] = env->getFieldID(cls, "docStarts", "[I");
            fids$[fid_mapping] = env->getFieldID(cls, "mapping", "Lorg/apache/lucene/index/MultiDocValues$OrdinalMap;");
            fids$[fid_values] = env->getFieldID(cls, "values", "[Lorg/apache/lucene/index/SortedDocValues;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jint MultiDocValues$MultiSortedDocValues::getOrd(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_getOrd_39c7bd23], a0);
        }

        jint MultiDocValues$MultiSortedDocValues::getValueCount() const
        {
          return env->callIntMethod(this$, mids$[mid_getValueCount_54c6a179]);
        }

        ::org::apache::lucene::util::BytesRef MultiDocValues$MultiSortedDocValues::lookupOrd(jint a0) const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_lookupOrd_b57e9c3f], a0));
        }

        JArray< jint > MultiDocValues$MultiSortedDocValues::_get_docStarts() const
        {
          return JArray< jint >(env->getObjectField(this$, fids$[fid_docStarts]));
        }

        ::org::apache::lucene::index::MultiDocValues$OrdinalMap MultiDocValues$MultiSortedDocValues::_get_mapping() const
        {
          return ::org::apache::lucene::index::MultiDocValues$OrdinalMap(env->getObjectField(this$, fids$[fid_mapping]));
        }

        JArray< ::org::apache::lucene::index::SortedDocValues > MultiDocValues$MultiSortedDocValues::_get_values() const
        {
          return JArray< ::org::apache::lucene::index::SortedDocValues >(env->getObjectField(this$, fids$[fid_values]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_MultiDocValues$MultiSortedDocValues_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiDocValues$MultiSortedDocValues_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiDocValues$MultiSortedDocValues_getOrd(t_MultiDocValues$MultiSortedDocValues *self, PyObject *args);
        static PyObject *t_MultiDocValues$MultiSortedDocValues_getValueCount(t_MultiDocValues$MultiSortedDocValues *self, PyObject *args);
        static PyObject *t_MultiDocValues$MultiSortedDocValues_lookupOrd(t_MultiDocValues$MultiSortedDocValues *self, PyObject *args);
        static PyObject *t_MultiDocValues$MultiSortedDocValues_get__docStarts(t_MultiDocValues$MultiSortedDocValues *self, void *data);
        static PyObject *t_MultiDocValues$MultiSortedDocValues_get__mapping(t_MultiDocValues$MultiSortedDocValues *self, void *data);
        static PyObject *t_MultiDocValues$MultiSortedDocValues_get__values(t_MultiDocValues$MultiSortedDocValues *self, void *data);

        static PyObject *t_MultiDocValues$MultiSortedDocValues_get__valueCount(t_MultiDocValues$MultiSortedDocValues *self, void *data);
        static PyGetSetDef t_MultiDocValues$MultiSortedDocValues__fields_[] = {
          DECLARE_GET_FIELD(t_MultiDocValues$MultiSortedDocValues, docStarts),
          DECLARE_GET_FIELD(t_MultiDocValues$MultiSortedDocValues, mapping),
          DECLARE_GET_FIELD(t_MultiDocValues$MultiSortedDocValues, values),
          DECLARE_GET_FIELD(t_MultiDocValues$MultiSortedDocValues, valueCount),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_MultiDocValues$MultiSortedDocValues__methods_[] = {
          DECLARE_METHOD(t_MultiDocValues$MultiSortedDocValues, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiDocValues$MultiSortedDocValues, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiDocValues$MultiSortedDocValues, getOrd, METH_VARARGS),
          DECLARE_METHOD(t_MultiDocValues$MultiSortedDocValues, getValueCount, METH_VARARGS),
          DECLARE_METHOD(t_MultiDocValues$MultiSortedDocValues, lookupOrd, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MultiDocValues$MultiSortedDocValues, t_MultiDocValues$MultiSortedDocValues, ::org::apache::lucene::index::SortedDocValues, MultiDocValues$MultiSortedDocValues, abstract_init, 0, 0, t_MultiDocValues$MultiSortedDocValues__fields_, 0, 0);

        void t_MultiDocValues$MultiSortedDocValues::install(PyObject *module)
        {
          installType(&PY_TYPE(MultiDocValues$MultiSortedDocValues), module, "MultiDocValues$MultiSortedDocValues", 0);
        }

        void t_MultiDocValues$MultiSortedDocValues::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MultiDocValues$MultiSortedDocValues).tp_dict, "class_", make_descriptor(MultiDocValues$MultiSortedDocValues::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MultiDocValues$MultiSortedDocValues).tp_dict, "wrapfn_", make_descriptor(t_MultiDocValues$MultiSortedDocValues::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MultiDocValues$MultiSortedDocValues).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MultiDocValues$MultiSortedDocValues_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MultiDocValues$MultiSortedDocValues::initializeClass, 1)))
            return NULL;
          return t_MultiDocValues$MultiSortedDocValues::wrap_Object(MultiDocValues$MultiSortedDocValues(((t_MultiDocValues$MultiSortedDocValues *) arg)->object.this$));
        }
        static PyObject *t_MultiDocValues$MultiSortedDocValues_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MultiDocValues$MultiSortedDocValues::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_MultiDocValues$MultiSortedDocValues_getOrd(t_MultiDocValues$MultiSortedDocValues *self, PyObject *args)
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.getOrd(a0));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(MultiDocValues$MultiSortedDocValues), (PyObject *) self, "getOrd", args, 2);
        }

        static PyObject *t_MultiDocValues$MultiSortedDocValues_getValueCount(t_MultiDocValues$MultiSortedDocValues *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getValueCount());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(MultiDocValues$MultiSortedDocValues), (PyObject *) self, "getValueCount", args, 2);
        }

        static PyObject *t_MultiDocValues$MultiSortedDocValues_lookupOrd(t_MultiDocValues$MultiSortedDocValues *self, PyObject *args)
        {
          jint a0;
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.lookupOrd(a0));
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(MultiDocValues$MultiSortedDocValues), (PyObject *) self, "lookupOrd", args, 2);
        }

        static PyObject *t_MultiDocValues$MultiSortedDocValues_get__docStarts(t_MultiDocValues$MultiSortedDocValues *self, void *data)
        {
          JArray< jint > value((jobject) NULL);
          OBJ_CALL(value = self->object._get_docStarts());
          return value.wrap();
        }

        static PyObject *t_MultiDocValues$MultiSortedDocValues_get__mapping(t_MultiDocValues$MultiSortedDocValues *self, void *data)
        {
          ::org::apache::lucene::index::MultiDocValues$OrdinalMap value((jobject) NULL);
          OBJ_CALL(value = self->object._get_mapping());
          return ::org::apache::lucene::index::t_MultiDocValues$OrdinalMap::wrap_Object(value);
        }

        static PyObject *t_MultiDocValues$MultiSortedDocValues_get__values(t_MultiDocValues$MultiSortedDocValues *self, void *data)
        {
          JArray< ::org::apache::lucene::index::SortedDocValues > value((jobject) NULL);
          OBJ_CALL(value = self->object._get_values());
          return JArray<jobject>(value.this$).wrap(::org::apache::lucene::index::t_SortedDocValues::wrap_jobject);
        }

        static PyObject *t_MultiDocValues$MultiSortedDocValues_get__valueCount(t_MultiDocValues$MultiSortedDocValues *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getValueCount());
          return PyInt_FromLong((long) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/tartarus/snowball/ext/ArmenianStemmer.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {

        ::java::lang::Class *ArmenianStemmer::class$ = NULL;
        jmethodID *ArmenianStemmer::mids$ = NULL;
        bool ArmenianStemmer::live$ = false;

        jclass ArmenianStemmer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/tartarus/snowball/ext/ArmenianStemmer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_stem_54c6a16a] = env->getMethodID(cls, "stem", "()Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ArmenianStemmer::ArmenianStemmer() : ::org::tartarus::snowball::SnowballProgram(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jboolean ArmenianStemmer::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        jint ArmenianStemmer::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jboolean ArmenianStemmer::stem() const
        {
          return env->callBooleanMethod(this$, mids$[mid_stem_54c6a16a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {
        static PyObject *t_ArmenianStemmer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ArmenianStemmer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_ArmenianStemmer_init_(t_ArmenianStemmer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_ArmenianStemmer_equals(t_ArmenianStemmer *self, PyObject *args);
        static PyObject *t_ArmenianStemmer_hashCode(t_ArmenianStemmer *self, PyObject *args);
        static PyObject *t_ArmenianStemmer_stem(t_ArmenianStemmer *self, PyObject *args);

        static PyMethodDef t_ArmenianStemmer__methods_[] = {
          DECLARE_METHOD(t_ArmenianStemmer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ArmenianStemmer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ArmenianStemmer, equals, METH_VARARGS),
          DECLARE_METHOD(t_ArmenianStemmer, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_ArmenianStemmer, stem, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(ArmenianStemmer, t_ArmenianStemmer, ::org::tartarus::snowball::SnowballProgram, ArmenianStemmer, t_ArmenianStemmer_init_, 0, 0, 0, 0, 0);

        void t_ArmenianStemmer::install(PyObject *module)
        {
          installType(&PY_TYPE(ArmenianStemmer), module, "ArmenianStemmer", 0);
        }

        void t_ArmenianStemmer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(ArmenianStemmer).tp_dict, "class_", make_descriptor(ArmenianStemmer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(ArmenianStemmer).tp_dict, "wrapfn_", make_descriptor(t_ArmenianStemmer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(ArmenianStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_ArmenianStemmer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, ArmenianStemmer::initializeClass, 1)))
            return NULL;
          return t_ArmenianStemmer::wrap_Object(ArmenianStemmer(((t_ArmenianStemmer *) arg)->object.this$));
        }
        static PyObject *t_ArmenianStemmer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, ArmenianStemmer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_ArmenianStemmer_init_(t_ArmenianStemmer *self, PyObject *args, PyObject *kwds)
        {
          ArmenianStemmer object((jobject) NULL);

          INT_CALL(object = ArmenianStemmer());
          self->object = object;

          return 0;
        }

        static PyObject *t_ArmenianStemmer_equals(t_ArmenianStemmer *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(ArmenianStemmer), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_ArmenianStemmer_hashCode(t_ArmenianStemmer *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(ArmenianStemmer), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_ArmenianStemmer_stem(t_ArmenianStemmer *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.stem());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(ArmenianStemmer), (PyObject *) self, "stem", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/ScandinavianFoldingFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *ScandinavianFoldingFilter::class$ = NULL;
          jmethodID *ScandinavianFoldingFilter::mids$ = NULL;
          bool ScandinavianFoldingFilter::live$ = false;

          jclass ScandinavianFoldingFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/ScandinavianFoldingFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ScandinavianFoldingFilter::ScandinavianFoldingFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean ScandinavianFoldingFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_ScandinavianFoldingFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ScandinavianFoldingFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ScandinavianFoldingFilter_init_(t_ScandinavianFoldingFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ScandinavianFoldingFilter_incrementToken(t_ScandinavianFoldingFilter *self, PyObject *args);

          static PyMethodDef t_ScandinavianFoldingFilter__methods_[] = {
            DECLARE_METHOD(t_ScandinavianFoldingFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ScandinavianFoldingFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ScandinavianFoldingFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ScandinavianFoldingFilter, t_ScandinavianFoldingFilter, ::org::apache::lucene::analysis::TokenFilter, ScandinavianFoldingFilter, t_ScandinavianFoldingFilter_init_, 0, 0, 0, 0, 0);

          void t_ScandinavianFoldingFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(ScandinavianFoldingFilter), module, "ScandinavianFoldingFilter", 0);
          }

          void t_ScandinavianFoldingFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ScandinavianFoldingFilter).tp_dict, "class_", make_descriptor(ScandinavianFoldingFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ScandinavianFoldingFilter).tp_dict, "wrapfn_", make_descriptor(t_ScandinavianFoldingFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ScandinavianFoldingFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ScandinavianFoldingFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ScandinavianFoldingFilter::initializeClass, 1)))
              return NULL;
            return t_ScandinavianFoldingFilter::wrap_Object(ScandinavianFoldingFilter(((t_ScandinavianFoldingFilter *) arg)->object.this$));
          }
          static PyObject *t_ScandinavianFoldingFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ScandinavianFoldingFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ScandinavianFoldingFilter_init_(t_ScandinavianFoldingFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ScandinavianFoldingFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = ScandinavianFoldingFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ScandinavianFoldingFilter_incrementToken(t_ScandinavianFoldingFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(ScandinavianFoldingFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/lang/Error.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace java {
  namespace lang {

    ::java::lang::Class *Error::class$ = NULL;
    jmethodID *Error::mids$ = NULL;
    bool Error::live$ = false;

    jclass Error::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/lang/Error");

        mids$ = new jmethodID[max_mid];
        mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
        mids$[mid_init$_c5ec8ca4] = env->getMethodID(cls, "<init>", "(Ljava/lang/Throwable;)V");
        mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
        mids$[mid_init$_01646a2e] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/Throwable;)V");

        class$ = (::java::lang::Class *) new JObject(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    Error::Error() : ::java::lang::Throwable(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

    Error::Error(const ::java::lang::Throwable & a0) : ::java::lang::Throwable(env->newObject(initializeClass, &mids$, mid_init$_c5ec8ca4, a0.this$)) {}

    Error::Error(const ::java::lang::String & a0) : ::java::lang::Throwable(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

    Error::Error(const ::java::lang::String & a0, const ::java::lang::Throwable & a1) : ::java::lang::Throwable(env->newObject(initializeClass, &mids$, mid_init$_01646a2e, a0.this$, a1.this$)) {}
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace lang {
    static PyObject *t_Error_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Error_instance_(PyTypeObject *type, PyObject *arg);
    static int t_Error_init_(t_Error *self, PyObject *args, PyObject *kwds);

    static PyMethodDef t_Error__methods_[] = {
      DECLARE_METHOD(t_Error, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Error, instance_, METH_O | METH_CLASS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(Error, t_Error, ::java::lang::Throwable, Error, t_Error_init_, 0, 0, 0, 0, 0);

    void t_Error::install(PyObject *module)
    {
      installType(&PY_TYPE(Error), module, "Error", 0);
    }

    void t_Error::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(Error).tp_dict, "class_", make_descriptor(Error::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(Error).tp_dict, "wrapfn_", make_descriptor(t_Error::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(Error).tp_dict, "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_Error_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, Error::initializeClass, 1)))
        return NULL;
      return t_Error::wrap_Object(Error(((t_Error *) arg)->object.this$));
    }
    static PyObject *t_Error_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, Error::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static int t_Error_init_(t_Error *self, PyObject *args, PyObject *kwds)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          Error object((jobject) NULL);

          INT_CALL(object = Error());
          self->object = object;
          break;
        }
        goto err;
       case 1:
        {
          ::java::lang::Throwable a0((jobject) NULL);
          Error object((jobject) NULL);

          if (!parseArgs(args, "k", ::java::lang::Throwable::initializeClass, &a0))
          {
            INT_CALL(object = Error(a0));
            self->object = object;
            break;
          }
        }
        {
          ::java::lang::String a0((jobject) NULL);
          Error object((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            INT_CALL(object = Error(a0));
            self->object = object;
            break;
          }
        }
        goto err;
       case 2:
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::Throwable a1((jobject) NULL);
          Error object((jobject) NULL);

          if (!parseArgs(args, "sk", ::java::lang::Throwable::initializeClass, &a0, &a1))
          {
            INT_CALL(object = Error(a0, a1));
            self->object = object;
            break;
          }
        }
       default:
       err:
        PyErr_SetArgsError((PyObject *) self, "__init__", args);
        return -1;
      }

      return 0;
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/NumDocsValueSource.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *NumDocsValueSource::class$ = NULL;
            jmethodID *NumDocsValueSource::mids$ = NULL;
            bool NumDocsValueSource::live$ = false;

            jclass NumDocsValueSource::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/NumDocsValueSource");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_description_14c7b5c5] = env->getMethodID(cls, "description", "()Ljava/lang/String;");
                mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_getValues_4c566485] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/queries/function/FunctionValues;");
                mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
                mids$[mid_name_14c7b5c5] = env->getMethodID(cls, "name", "()Ljava/lang/String;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            NumDocsValueSource::NumDocsValueSource() : ::org::apache::lucene::queries::function::ValueSource(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

            ::java::lang::String NumDocsValueSource::description() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_description_14c7b5c5]));
            }

            jboolean NumDocsValueSource::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
            }

            ::org::apache::lucene::queries::function::FunctionValues NumDocsValueSource::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::FunctionValues(env->callObjectMethod(this$, mids$[mid_getValues_4c566485], a0.this$, a1.this$));
            }

            jint NumDocsValueSource::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
            }

            ::java::lang::String NumDocsValueSource::name() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_name_14c7b5c5]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_NumDocsValueSource_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_NumDocsValueSource_instance_(PyTypeObject *type, PyObject *arg);
            static int t_NumDocsValueSource_init_(t_NumDocsValueSource *self, PyObject *args, PyObject *kwds);
            static PyObject *t_NumDocsValueSource_description(t_NumDocsValueSource *self, PyObject *args);
            static PyObject *t_NumDocsValueSource_equals(t_NumDocsValueSource *self, PyObject *args);
            static PyObject *t_NumDocsValueSource_getValues(t_NumDocsValueSource *self, PyObject *args);
            static PyObject *t_NumDocsValueSource_hashCode(t_NumDocsValueSource *self, PyObject *args);
            static PyObject *t_NumDocsValueSource_name(t_NumDocsValueSource *self);

            static PyMethodDef t_NumDocsValueSource__methods_[] = {
              DECLARE_METHOD(t_NumDocsValueSource, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_NumDocsValueSource, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_NumDocsValueSource, description, METH_VARARGS),
              DECLARE_METHOD(t_NumDocsValueSource, equals, METH_VARARGS),
              DECLARE_METHOD(t_NumDocsValueSource, getValues, METH_VARARGS),
              DECLARE_METHOD(t_NumDocsValueSource, hashCode, METH_VARARGS),
              DECLARE_METHOD(t_NumDocsValueSource, name, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(NumDocsValueSource, t_NumDocsValueSource, ::org::apache::lucene::queries::function::ValueSource, NumDocsValueSource, t_NumDocsValueSource_init_, 0, 0, 0, 0, 0);

            void t_NumDocsValueSource::install(PyObject *module)
            {
              installType(&PY_TYPE(NumDocsValueSource), module, "NumDocsValueSource", 0);
            }

            void t_NumDocsValueSource::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(NumDocsValueSource).tp_dict, "class_", make_descriptor(NumDocsValueSource::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(NumDocsValueSource).tp_dict, "wrapfn_", make_descriptor(t_NumDocsValueSource::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(NumDocsValueSource).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_NumDocsValueSource_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, NumDocsValueSource::initializeClass, 1)))
                return NULL;
              return t_NumDocsValueSource::wrap_Object(NumDocsValueSource(((t_NumDocsValueSource *) arg)->object.this$));
            }
            static PyObject *t_NumDocsValueSource_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, NumDocsValueSource::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_NumDocsValueSource_init_(t_NumDocsValueSource *self, PyObject *args, PyObject *kwds)
            {
              NumDocsValueSource object((jobject) NULL);

              INT_CALL(object = NumDocsValueSource());
              self->object = object;

              return 0;
            }

            static PyObject *t_NumDocsValueSource_description(t_NumDocsValueSource *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.description());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(NumDocsValueSource), (PyObject *) self, "description", args, 2);
            }

            static PyObject *t_NumDocsValueSource_equals(t_NumDocsValueSource *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(NumDocsValueSource), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_NumDocsValueSource_getValues(t_NumDocsValueSource *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::FunctionValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::t_FunctionValues::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(NumDocsValueSource), (PyObject *) self, "getValues", args, 2);
            }

            static PyObject *t_NumDocsValueSource_hashCode(t_NumDocsValueSource *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(NumDocsValueSource), (PyObject *) self, "hashCode", args, 2);
            }

            static PyObject *t_NumDocsValueSource_name(t_NumDocsValueSource *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.name());
              return j2p(result);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/util/HashSet.h"
#include "java/lang/Class.h"
#include "java/util/Collection.h"
#include "java/lang/Cloneable.h"
#include "java/util/Iterator.h"
#include "java/lang/Object.h"
#include "java/io/Serializable.h"
#include "java/util/Spliterator.h"
#include "JArray.h"

namespace java {
  namespace util {

    ::java::lang::Class *HashSet::class$ = NULL;
    jmethodID *HashSet::mids$ = NULL;
    bool HashSet::live$ = false;

    jclass HashSet::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/util/HashSet");

        mids$ = new jmethodID[max_mid];
        mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
        mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
        mids$[mid_init$_9bfb370d] = env->getMethodID(cls, "<init>", "(Ljava/util/Collection;)V");
        mids$[mid_init$_abdf2c51] = env->getMethodID(cls, "<init>", "(IF)V");
        mids$[mid_add_290588e2] = env->getMethodID(cls, "add", "(Ljava/lang/Object;)Z");
        mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
        mids$[mid_clone_846352c3] = env->getMethodID(cls, "clone", "()Ljava/lang/Object;");
        mids$[mid_contains_290588e2] = env->getMethodID(cls, "contains", "(Ljava/lang/Object;)Z");
        mids$[mid_isEmpty_54c6a16a] = env->getMethodID(cls, "isEmpty", "()Z");
        mids$[mid_iterator_40858c90] = env->getMethodID(cls, "iterator", "()Ljava/util/Iterator;");
        mids$[mid_remove_290588e2] = env->getMethodID(cls, "remove", "(Ljava/lang/Object;)Z");
        mids$[mid_size_54c6a179] = env->getMethodID(cls, "size", "()I");
        mids$[mid_spliterator_59b28390] = env->getMethodID(cls, "spliterator", "()Ljava/util/Spliterator;");

        class$ = (::java::lang::Class *) new JObject(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    HashSet::HashSet() : ::java::util::AbstractSet(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

    HashSet::HashSet(jint a0) : ::java::util::AbstractSet(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

    HashSet::HashSet(const ::java::util::Collection & a0) : ::java::util::AbstractSet(env->newObject(initializeClass, &mids$, mid_init$_9bfb370d, a0.this$)) {}

    HashSet::HashSet(jint a0, jfloat a1) : ::java::util::AbstractSet(env->newObject(initializeClass, &mids$, mid_init$_abdf2c51, a0, a1)) {}

    jboolean HashSet::add(const ::java::lang::Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_add_290588e2], a0.this$);
    }

    void HashSet::clear() const
    {
      env->callVoidMethod(this$, mids$[mid_clear_54c6a166]);
    }

    ::java::lang::Object HashSet::clone() const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_clone_846352c3]));
    }

    jboolean HashSet::contains(const ::java::lang::Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_contains_290588e2], a0.this$);
    }

    jboolean HashSet::isEmpty() const
    {
      return env->callBooleanMethod(this$, mids$[mid_isEmpty_54c6a16a]);
    }

    ::java::util::Iterator HashSet::iterator() const
    {
      return ::java::util::Iterator(env->callObjectMethod(this$, mids$[mid_iterator_40858c90]));
    }

    jboolean HashSet::remove(const ::java::lang::Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_remove_290588e2], a0.this$);
    }

    jint HashSet::size() const
    {
      return env->callIntMethod(this$, mids$[mid_size_54c6a179]);
    }

    ::java::util::Spliterator HashSet::spliterator() const
    {
      return ::java::util::Spliterator(env->callObjectMethod(this$, mids$[mid_spliterator_59b28390]));
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace util {
    static PyObject *t_HashSet_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_HashSet_instance_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_HashSet_of_(t_HashSet *self, PyObject *args);
    static int t_HashSet_init_(t_HashSet *self, PyObject *args, PyObject *kwds);
    static PyObject *t_HashSet_add(t_HashSet *self, PyObject *args);
    static PyObject *t_HashSet_clear(t_HashSet *self, PyObject *args);
    static PyObject *t_HashSet_clone(t_HashSet *self);
    static PyObject *t_HashSet_contains(t_HashSet *self, PyObject *args);
    static PyObject *t_HashSet_isEmpty(t_HashSet *self, PyObject *args);
    static PyObject *t_HashSet_iterator(t_HashSet *self, PyObject *args);
    static PyObject *t_HashSet_remove(t_HashSet *self, PyObject *args);
    static PyObject *t_HashSet_size(t_HashSet *self, PyObject *args);
    static PyObject *t_HashSet_spliterator(t_HashSet *self, PyObject *args);
    static PyObject *t_HashSet_get__empty(t_HashSet *self, void *data);
    static PyObject *t_HashSet_get__parameters_(t_HashSet *self, void *data);
    static PyGetSetDef t_HashSet__fields_[] = {
      DECLARE_GET_FIELD(t_HashSet, empty),
      DECLARE_GET_FIELD(t_HashSet, parameters_),
      { NULL, NULL, NULL, NULL, NULL }
    };

    static PyMethodDef t_HashSet__methods_[] = {
      DECLARE_METHOD(t_HashSet, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_HashSet, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_HashSet, of_, METH_VARARGS),
      DECLARE_METHOD(t_HashSet, add, METH_VARARGS),
      DECLARE_METHOD(t_HashSet, clear, METH_VARARGS),
      DECLARE_METHOD(t_HashSet, clone, METH_NOARGS),
      DECLARE_METHOD(t_HashSet, contains, METH_VARARGS),
      DECLARE_METHOD(t_HashSet, isEmpty, METH_VARARGS),
      DECLARE_METHOD(t_HashSet, iterator, METH_VARARGS),
      DECLARE_METHOD(t_HashSet, remove, METH_VARARGS),
      DECLARE_METHOD(t_HashSet, size, METH_VARARGS),
      DECLARE_METHOD(t_HashSet, spliterator, METH_VARARGS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(HashSet, t_HashSet, ::java::util::AbstractSet, HashSet, t_HashSet_init_, ((PyObject *(*)(t_HashSet *)) get_generic_iterator< t_HashSet >), 0, t_HashSet__fields_, 0, 0);
    PyObject *t_HashSet::wrap_Object(const HashSet& object, PyTypeObject *p0)
    {
      PyObject *obj = t_HashSet::wrap_Object(object);
      if (obj != NULL && obj != Py_None)
      {
        t_HashSet *self = (t_HashSet *) obj;
        self->parameters[0] = p0;
      }
      return obj;
    }

    PyObject *t_HashSet::wrap_jobject(const jobject& object, PyTypeObject *p0)
    {
      PyObject *obj = t_HashSet::wrap_jobject(object);
      if (obj != NULL && obj != Py_None)
      {
        t_HashSet *self = (t_HashSet *) obj;
        self->parameters[0] = p0;
      }
      return obj;
    }

    void t_HashSet::install(PyObject *module)
    {
      installType(&PY_TYPE(HashSet), module, "HashSet", 0);
    }

    void t_HashSet::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(HashSet).tp_dict, "class_", make_descriptor(HashSet::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(HashSet).tp_dict, "wrapfn_", make_descriptor(t_HashSet::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(HashSet).tp_dict, "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_HashSet_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, HashSet::initializeClass, 1)))
        return NULL;
      return t_HashSet::wrap_Object(HashSet(((t_HashSet *) arg)->object.this$));
    }
    static PyObject *t_HashSet_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, HashSet::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static PyObject *t_HashSet_of_(t_HashSet *self, PyObject *args)
    {
      if (!parseArg(args, "T", 1, &(self->parameters)))
        Py_RETURN_SELF;
      return PyErr_SetArgsError((PyObject *) self, "of_", args);
    }

    static int t_HashSet_init_(t_HashSet *self, PyObject *args, PyObject *kwds)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          HashSet object((jobject) NULL);

          INT_CALL(object = HashSet());
          self->object = object;
          break;
        }
        goto err;
       case 1:
        {
          jint a0;
          HashSet object((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            INT_CALL(object = HashSet(a0));
            self->object = object;
            break;
          }
        }
        {
          ::java::util::Collection a0((jobject) NULL);
          PyTypeObject **p0;
          HashSet object((jobject) NULL);

          if (!parseArgs(args, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
          {
            INT_CALL(object = HashSet(a0));
            self->object = object;
            break;
          }
        }
        goto err;
       case 2:
        {
          jint a0;
          jfloat a1;
          HashSet object((jobject) NULL);

          if (!parseArgs(args, "IF", &a0, &a1))
          {
            INT_CALL(object = HashSet(a0, a1));
            self->object = object;
            break;
          }
        }
       default:
       err:
        PyErr_SetArgsError((PyObject *) self, "__init__", args);
        return -1;
      }

      return 0;
    }

    static PyObject *t_HashSet_add(t_HashSet *self, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      jboolean result;

      if (!parseArgs(args, "O", self->parameters[0], &a0))
      {
        OBJ_CALL(result = self->object.add(a0));
        Py_RETURN_BOOL(result);
      }

      return callSuper(&PY_TYPE(HashSet), (PyObject *) self, "add", args, 2);
    }

    static PyObject *t_HashSet_clear(t_HashSet *self, PyObject *args)
    {

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(self->object.clear());
        Py_RETURN_NONE;
      }

      return callSuper(&PY_TYPE(HashSet), (PyObject *) self, "clear", args, 2);
    }

    static PyObject *t_HashSet_clone(t_HashSet *self)
    {
      ::java::lang::Object result((jobject) NULL);
      OBJ_CALL(result = self->object.clone());
      return ::java::lang::t_Object::wrap_Object(result);
    }

    static PyObject *t_HashSet_contains(t_HashSet *self, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      jboolean result;

      if (!parseArgs(args, "o", &a0))
      {
        OBJ_CALL(result = self->object.contains(a0));
        Py_RETURN_BOOL(result);
      }

      return callSuper(&PY_TYPE(HashSet), (PyObject *) self, "contains", args, 2);
    }

    static PyObject *t_HashSet_isEmpty(t_HashSet *self, PyObject *args)
    {
      jboolean result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.isEmpty());
        Py_RETURN_BOOL(result);
      }

      return callSuper(&PY_TYPE(HashSet), (PyObject *) self, "isEmpty", args, 2);
    }

    static PyObject *t_HashSet_iterator(t_HashSet *self, PyObject *args)
    {
      ::java::util::Iterator result((jobject) NULL);

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.iterator());
        return ::java::util::t_Iterator::wrap_Object(result, self->parameters[0]);
      }

      return callSuper(&PY_TYPE(HashSet), (PyObject *) self, "iterator", args, 2);
    }

    static PyObject *t_HashSet_remove(t_HashSet *self, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      jboolean result;

      if (!parseArgs(args, "o", &a0))
      {
        OBJ_CALL(result = self->object.remove(a0));
        Py_RETURN_BOOL(result);
      }

      return callSuper(&PY_TYPE(HashSet), (PyObject *) self, "remove", args, 2);
    }

    static PyObject *t_HashSet_size(t_HashSet *self, PyObject *args)
    {
      jint result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.size());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(HashSet), (PyObject *) self, "size", args, 2);
    }

    static PyObject *t_HashSet_spliterator(t_HashSet *self, PyObject *args)
    {
      ::java::util::Spliterator result((jobject) NULL);

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.spliterator());
        return ::java::util::t_Spliterator::wrap_Object(result, self->parameters[0]);
      }

      return callSuper(&PY_TYPE(HashSet), (PyObject *) self, "spliterator", args, 2);
    }
    static PyObject *t_HashSet_get__parameters_(t_HashSet *self, void *data)
    {
      return typeParameters(self->parameters, sizeof(self->parameters));
    }

    static PyObject *t_HashSet_get__empty(t_HashSet *self, void *data)
    {
      jboolean value;
      OBJ_CALL(value = self->object.isEmpty());
      Py_RETURN_BOOL(value);
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/classic/ParseException.h"
#include "org/apache/lucene/queryparser/classic/Token.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace classic {

          ::java::lang::Class *ParseException::class$ = NULL;
          jmethodID *ParseException::mids$ = NULL;
          jfieldID *ParseException::fids$ = NULL;
          bool ParseException::live$ = false;

          jclass ParseException::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/classic/ParseException");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
              mids$[mid_init$_8f0beb0f] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/classic/Token;[[I[Ljava/lang/String;)V");

              fids$ = new jfieldID[max_fid];
              fids$[fid_currentToken] = env->getFieldID(cls, "currentToken", "Lorg/apache/lucene/queryparser/classic/Token;");
              fids$[fid_expectedTokenSequences] = env->getFieldID(cls, "expectedTokenSequences", "[[I");
              fids$[fid_tokenImage] = env->getFieldID(cls, "tokenImage", "[Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ParseException::ParseException() : ::java::lang::Exception(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ParseException::ParseException(const ::java::lang::String & a0) : ::java::lang::Exception(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

          ParseException::ParseException(const ::org::apache::lucene::queryparser::classic::Token & a0, const JArray< JArray< jint > > & a1, const JArray< ::java::lang::String > & a2) : ::java::lang::Exception(env->newObject(initializeClass, &mids$, mid_init$_8f0beb0f, a0.this$, a1.this$, a2.this$)) {}

          ::org::apache::lucene::queryparser::classic::Token ParseException::_get_currentToken() const
          {
            return ::org::apache::lucene::queryparser::classic::Token(env->getObjectField(this$, fids$[fid_currentToken]));
          }

          void ParseException::_set_currentToken(const ::org::apache::lucene::queryparser::classic::Token & a0) const
          {
            env->setObjectField(this$, fids$[fid_currentToken], a0.this$);
          }

          JArray< JArray< jint > > ParseException::_get_expectedTokenSequences() const
          {
            return JArray< JArray< jint > >(env->getObjectField(this$, fids$[fid_expectedTokenSequences]));
          }

          void ParseException::_set_expectedTokenSequences(const JArray< JArray< jint > > & a0) const
          {
            env->setObjectField(this$, fids$[fid_expectedTokenSequences], a0.this$);
          }

          JArray< ::java::lang::String > ParseException::_get_tokenImage() const
          {
            return JArray< ::java::lang::String >(env->getObjectField(this$, fids$[fid_tokenImage]));
          }

          void ParseException::_set_tokenImage(const JArray< ::java::lang::String > & a0) const
          {
            env->setObjectField(this$, fids$[fid_tokenImage], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace classic {
          static PyObject *t_ParseException_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ParseException_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ParseException_init_(t_ParseException *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ParseException_get__currentToken(t_ParseException *self, void *data);
          static int t_ParseException_set__currentToken(t_ParseException *self, PyObject *arg, void *data);
          static PyObject *t_ParseException_get__expectedTokenSequences(t_ParseException *self, void *data);
          static int t_ParseException_set__expectedTokenSequences(t_ParseException *self, PyObject *arg, void *data);
          static PyObject *t_ParseException_get__tokenImage(t_ParseException *self, void *data);
          static int t_ParseException_set__tokenImage(t_ParseException *self, PyObject *arg, void *data);

          static PyGetSetDef t_ParseException__fields_[] = {
            DECLARE_GETSET_FIELD(t_ParseException, currentToken),
            DECLARE_GETSET_FIELD(t_ParseException, expectedTokenSequences),
            DECLARE_GETSET_FIELD(t_ParseException, tokenImage),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_ParseException__methods_[] = {
            DECLARE_METHOD(t_ParseException, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ParseException, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ParseException, t_ParseException, ::java::lang::Exception, ParseException, t_ParseException_init_, 0, 0, t_ParseException__fields_, 0, 0);

          void t_ParseException::install(PyObject *module)
          {
            installType(&PY_TYPE(ParseException), module, "ParseException", 0);
          }

          void t_ParseException::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ParseException).tp_dict, "class_", make_descriptor(ParseException::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ParseException).tp_dict, "wrapfn_", make_descriptor(t_ParseException::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ParseException).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ParseException_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ParseException::initializeClass, 1)))
              return NULL;
            return t_ParseException::wrap_Object(ParseException(((t_ParseException *) arg)->object.this$));
          }
          static PyObject *t_ParseException_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ParseException::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ParseException_init_(t_ParseException *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                ParseException object((jobject) NULL);

                INT_CALL(object = ParseException());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                ::java::lang::String a0((jobject) NULL);
                ParseException object((jobject) NULL);

                if (!parseArgs(args, "s", &a0))
                {
                  INT_CALL(object = ParseException(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::queryparser::classic::Token a0((jobject) NULL);
                JArray< JArray< jint > > a1((jobject) NULL);
                JArray< ::java::lang::String > a2((jobject) NULL);
                ParseException object((jobject) NULL);

                if (!parseArgs(args, "k[[I[s", ::org::apache::lucene::queryparser::classic::Token::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = ParseException(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ParseException_get__currentToken(t_ParseException *self, void *data)
          {
            ::org::apache::lucene::queryparser::classic::Token value((jobject) NULL);
            OBJ_CALL(value = self->object._get_currentToken());
            return ::org::apache::lucene::queryparser::classic::t_Token::wrap_Object(value);
          }
          static int t_ParseException_set__currentToken(t_ParseException *self, PyObject *arg, void *data)
          {
            ::org::apache::lucene::queryparser::classic::Token value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::classic::Token::initializeClass, &value))
            {
              INT_CALL(self->object._set_currentToken(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "currentToken", arg);
            return -1;
          }

          static PyObject *t_ParseException_get__expectedTokenSequences(t_ParseException *self, void *data)
          {
            JArray< JArray< jint > > value((jobject) NULL);
            OBJ_CALL(value = self->object._get_expectedTokenSequences());
            return JArray<jobject>(value.this$).wrap(NULL);
          }
          static int t_ParseException_set__expectedTokenSequences(t_ParseException *self, PyObject *arg, void *data)
          {
            JArray< JArray< jint > > value((jobject) NULL);
            if (!parseArg(arg, "[[I", &value))
            {
              INT_CALL(self->object._set_expectedTokenSequences(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "expectedTokenSequences", arg);
            return -1;
          }

          static PyObject *t_ParseException_get__tokenImage(t_ParseException *self, void *data)
          {
            JArray< ::java::lang::String > value((jobject) NULL);
            OBJ_CALL(value = self->object._get_tokenImage());
            return JArray<jstring>(value.this$).wrap();
          }
          static int t_ParseException_set__tokenImage(t_ParseException *self, PyObject *arg, void *data)
          {
            JArray< ::java::lang::String > value((jobject) NULL);
            if (!parseArg(arg, "[s", &value))
            {
              INT_CALL(self->object._set_tokenImage(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "tokenImage", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/core/StopFilterFactory.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/util/ResourceLoader.h"
#include "org/apache/lucene/analysis/util/ResourceLoaderAware.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {

          ::java::lang::Class *StopFilterFactory::class$ = NULL;
          jmethodID *StopFilterFactory::mids$ = NULL;
          bool StopFilterFactory::live$ = false;
          ::java::lang::String *StopFilterFactory::FORMAT_SNOWBALL = NULL;
          ::java::lang::String *StopFilterFactory::FORMAT_WORDSET = NULL;

          jclass StopFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/core/StopFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");
              mids$[mid_getStopWords_d2d3505c] = env->getMethodID(cls, "getStopWords", "()Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_inform_d6a4bc97] = env->getMethodID(cls, "inform", "(Lorg/apache/lucene/analysis/util/ResourceLoader;)V");
              mids$[mid_isEnablePositionIncrements_54c6a16a] = env->getMethodID(cls, "isEnablePositionIncrements", "()Z");
              mids$[mid_isIgnoreCase_54c6a16a] = env->getMethodID(cls, "isIgnoreCase", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              FORMAT_SNOWBALL = new ::java::lang::String(env->getStaticObjectField(cls, "FORMAT_SNOWBALL", "Ljava/lang/String;"));
              FORMAT_WORDSET = new ::java::lang::String(env->getStaticObjectField(cls, "FORMAT_WORDSET", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          StopFilterFactory::StopFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream StopFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }

          ::org::apache::lucene::analysis::util::CharArraySet StopFilterFactory::getStopWords() const
          {
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callObjectMethod(this$, mids$[mid_getStopWords_d2d3505c]));
          }

          void StopFilterFactory::inform(const ::org::apache::lucene::analysis::util::ResourceLoader & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_inform_d6a4bc97], a0.this$);
          }

          jboolean StopFilterFactory::isEnablePositionIncrements() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isEnablePositionIncrements_54c6a16a]);
          }

          jboolean StopFilterFactory::isIgnoreCase() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isIgnoreCase_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {
          static PyObject *t_StopFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_StopFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_StopFilterFactory_init_(t_StopFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_StopFilterFactory_create(t_StopFilterFactory *self, PyObject *args);
          static PyObject *t_StopFilterFactory_getStopWords(t_StopFilterFactory *self);
          static PyObject *t_StopFilterFactory_inform(t_StopFilterFactory *self, PyObject *arg);
          static PyObject *t_StopFilterFactory_isEnablePositionIncrements(t_StopFilterFactory *self);
          static PyObject *t_StopFilterFactory_isIgnoreCase(t_StopFilterFactory *self);
          static PyObject *t_StopFilterFactory_get__enablePositionIncrements(t_StopFilterFactory *self, void *data);
          static PyObject *t_StopFilterFactory_get__ignoreCase(t_StopFilterFactory *self, void *data);
          static PyObject *t_StopFilterFactory_get__stopWords(t_StopFilterFactory *self, void *data);
          static PyGetSetDef t_StopFilterFactory__fields_[] = {
            DECLARE_GET_FIELD(t_StopFilterFactory, enablePositionIncrements),
            DECLARE_GET_FIELD(t_StopFilterFactory, ignoreCase),
            DECLARE_GET_FIELD(t_StopFilterFactory, stopWords),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_StopFilterFactory__methods_[] = {
            DECLARE_METHOD(t_StopFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StopFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StopFilterFactory, create, METH_VARARGS),
            DECLARE_METHOD(t_StopFilterFactory, getStopWords, METH_NOARGS),
            DECLARE_METHOD(t_StopFilterFactory, inform, METH_O),
            DECLARE_METHOD(t_StopFilterFactory, isEnablePositionIncrements, METH_NOARGS),
            DECLARE_METHOD(t_StopFilterFactory, isIgnoreCase, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(StopFilterFactory, t_StopFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, StopFilterFactory, t_StopFilterFactory_init_, 0, 0, t_StopFilterFactory__fields_, 0, 0);

          void t_StopFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(StopFilterFactory), module, "StopFilterFactory", 0);
          }

          void t_StopFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(StopFilterFactory).tp_dict, "class_", make_descriptor(StopFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(StopFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_StopFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(StopFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(StopFilterFactory::initializeClass);
            PyDict_SetItemString(PY_TYPE(StopFilterFactory).tp_dict, "FORMAT_SNOWBALL", make_descriptor(j2p(*StopFilterFactory::FORMAT_SNOWBALL)));
            PyDict_SetItemString(PY_TYPE(StopFilterFactory).tp_dict, "FORMAT_WORDSET", make_descriptor(j2p(*StopFilterFactory::FORMAT_WORDSET)));
          }

          static PyObject *t_StopFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, StopFilterFactory::initializeClass, 1)))
              return NULL;
            return t_StopFilterFactory::wrap_Object(StopFilterFactory(((t_StopFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_StopFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, StopFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_StopFilterFactory_init_(t_StopFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            StopFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = StopFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_StopFilterFactory_create(t_StopFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(StopFilterFactory), (PyObject *) self, "create", args, 2);
          }

          static PyObject *t_StopFilterFactory_getStopWords(t_StopFilterFactory *self)
          {
            ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = self->object.getStopWords());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_StopFilterFactory_inform(t_StopFilterFactory *self, PyObject *arg)
          {
            ::org::apache::lucene::analysis::util::ResourceLoader a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::analysis::util::ResourceLoader::initializeClass, &a0))
            {
              OBJ_CALL(self->object.inform(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "inform", arg);
            return NULL;
          }

          static PyObject *t_StopFilterFactory_isEnablePositionIncrements(t_StopFilterFactory *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isEnablePositionIncrements());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_StopFilterFactory_isIgnoreCase(t_StopFilterFactory *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isIgnoreCase());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_StopFilterFactory_get__enablePositionIncrements(t_StopFilterFactory *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isEnablePositionIncrements());
            Py_RETURN_BOOL(value);
          }

          static PyObject *t_StopFilterFactory_get__ignoreCase(t_StopFilterFactory *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isIgnoreCase());
            Py_RETURN_BOOL(value);
          }

          static PyObject *t_StopFilterFactory_get__stopWords(t_StopFilterFactory *self, void *data)
          {
            ::org::apache::lucene::analysis::util::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getStopWords());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/ModifierQueryNode.h"
#include "java/lang/Class.h"
#include "java/lang/CharSequence.h"
#include "org/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax.h"
#include "java/lang/CloneNotSupportedException.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/ModifierQueryNode$Modifier.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {

              ::java::lang::Class *ModifierQueryNode::class$ = NULL;
              jmethodID *ModifierQueryNode::mids$ = NULL;
              bool ModifierQueryNode::live$ = false;

              jclass ModifierQueryNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/nodes/ModifierQueryNode");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_6bd34b3d] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;Lorg/apache/lucene/queryparser/flexible/core/nodes/ModifierQueryNode$Modifier;)V");
                  mids$[mid_cloneTree_b387c5e6] = env->getMethodID(cls, "cloneTree", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_getChild_b387c5e6] = env->getMethodID(cls, "getChild", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_getModifier_511690a9] = env->getMethodID(cls, "getModifier", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/ModifierQueryNode$Modifier;");
                  mids$[mid_setChild_cc04aeef] = env->getMethodID(cls, "setChild", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)V");
                  mids$[mid_toQueryString_99b8dfe1] = env->getMethodID(cls, "toQueryString", "(Lorg/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax;)Ljava/lang/CharSequence;");
                  mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              ModifierQueryNode::ModifierQueryNode(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0, const ::org::apache::lucene::queryparser::flexible::core::nodes::ModifierQueryNode$Modifier & a1) : ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNodeImpl(env->newObject(initializeClass, &mids$, mid_init$_6bd34b3d, a0.this$, a1.this$)) {}

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode ModifierQueryNode::cloneTree() const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_cloneTree_b387c5e6]));
              }

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode ModifierQueryNode::getChild() const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_getChild_b387c5e6]));
              }

              ::org::apache::lucene::queryparser::flexible::core::nodes::ModifierQueryNode$Modifier ModifierQueryNode::getModifier() const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::ModifierQueryNode$Modifier(env->callObjectMethod(this$, mids$[mid_getModifier_511690a9]));
              }

              void ModifierQueryNode::setChild(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setChild_cc04aeef], a0.this$);
              }

              ::java::lang::CharSequence ModifierQueryNode::toQueryString(const ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax & a0) const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_toQueryString_99b8dfe1], a0.this$));
              }

              ::java::lang::String ModifierQueryNode::toString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {
              static PyObject *t_ModifierQueryNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_ModifierQueryNode_instance_(PyTypeObject *type, PyObject *arg);
              static int t_ModifierQueryNode_init_(t_ModifierQueryNode *self, PyObject *args, PyObject *kwds);
              static PyObject *t_ModifierQueryNode_cloneTree(t_ModifierQueryNode *self, PyObject *args);
              static PyObject *t_ModifierQueryNode_getChild(t_ModifierQueryNode *self);
              static PyObject *t_ModifierQueryNode_getModifier(t_ModifierQueryNode *self);
              static PyObject *t_ModifierQueryNode_setChild(t_ModifierQueryNode *self, PyObject *arg);
              static PyObject *t_ModifierQueryNode_toQueryString(t_ModifierQueryNode *self, PyObject *args);
              static PyObject *t_ModifierQueryNode_toString(t_ModifierQueryNode *self, PyObject *args);
              static PyObject *t_ModifierQueryNode_get__child(t_ModifierQueryNode *self, void *data);
              static int t_ModifierQueryNode_set__child(t_ModifierQueryNode *self, PyObject *arg, void *data);
              static PyObject *t_ModifierQueryNode_get__modifier(t_ModifierQueryNode *self, void *data);
              static PyGetSetDef t_ModifierQueryNode__fields_[] = {
                DECLARE_GETSET_FIELD(t_ModifierQueryNode, child),
                DECLARE_GET_FIELD(t_ModifierQueryNode, modifier),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_ModifierQueryNode__methods_[] = {
                DECLARE_METHOD(t_ModifierQueryNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_ModifierQueryNode, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_ModifierQueryNode, cloneTree, METH_VARARGS),
                DECLARE_METHOD(t_ModifierQueryNode, getChild, METH_NOARGS),
                DECLARE_METHOD(t_ModifierQueryNode, getModifier, METH_NOARGS),
                DECLARE_METHOD(t_ModifierQueryNode, setChild, METH_O),
                DECLARE_METHOD(t_ModifierQueryNode, toQueryString, METH_VARARGS),
                DECLARE_METHOD(t_ModifierQueryNode, toString, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(ModifierQueryNode, t_ModifierQueryNode, ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNodeImpl, ModifierQueryNode, t_ModifierQueryNode_init_, 0, 0, t_ModifierQueryNode__fields_, 0, 0);

              void t_ModifierQueryNode::install(PyObject *module)
              {
                installType(&PY_TYPE(ModifierQueryNode), module, "ModifierQueryNode", 0);
                PyDict_SetItemString(PY_TYPE(ModifierQueryNode).tp_dict, "Modifier", make_descriptor(&PY_TYPE(ModifierQueryNode$Modifier)));
              }

              void t_ModifierQueryNode::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(ModifierQueryNode).tp_dict, "class_", make_descriptor(ModifierQueryNode::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(ModifierQueryNode).tp_dict, "wrapfn_", make_descriptor(t_ModifierQueryNode::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(ModifierQueryNode).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_ModifierQueryNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, ModifierQueryNode::initializeClass, 1)))
                  return NULL;
                return t_ModifierQueryNode::wrap_Object(ModifierQueryNode(((t_ModifierQueryNode *) arg)->object.this$));
              }
              static PyObject *t_ModifierQueryNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, ModifierQueryNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_ModifierQueryNode_init_(t_ModifierQueryNode *self, PyObject *args, PyObject *kwds)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::queryparser::flexible::core::nodes::ModifierQueryNode$Modifier a1((jobject) NULL);
                PyTypeObject **p1;
                ModifierQueryNode object((jobject) NULL);

                if (!parseArgs(args, "kK", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, ::org::apache::lucene::queryparser::flexible::core::nodes::ModifierQueryNode$Modifier::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::queryparser::flexible::core::nodes::t_ModifierQueryNode$Modifier::parameters_))
                {
                  INT_CALL(object = ModifierQueryNode(a0, a1));
                  self->object = object;
                }
                else
                {
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_ModifierQueryNode_cloneTree(t_ModifierQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.cloneTree());
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(ModifierQueryNode), (PyObject *) self, "cloneTree", args, 2);
              }

              static PyObject *t_ModifierQueryNode_getChild(t_ModifierQueryNode *self)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);
                OBJ_CALL(result = self->object.getChild());
                return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
              }

              static PyObject *t_ModifierQueryNode_getModifier(t_ModifierQueryNode *self)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::ModifierQueryNode$Modifier result((jobject) NULL);
                OBJ_CALL(result = self->object.getModifier());
                return ::org::apache::lucene::queryparser::flexible::core::nodes::t_ModifierQueryNode$Modifier::wrap_Object(result);
              }

              static PyObject *t_ModifierQueryNode_setChild(t_ModifierQueryNode *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(self->object.setChild(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setChild", arg);
                return NULL;
              }

              static PyObject *t_ModifierQueryNode_toQueryString(t_ModifierQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax a0((jobject) NULL);
                ::java::lang::CharSequence result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.toQueryString(a0));
                  return ::java::lang::t_CharSequence::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(ModifierQueryNode), (PyObject *) self, "toQueryString", args, 2);
              }

              static PyObject *t_ModifierQueryNode_toString(t_ModifierQueryNode *self, PyObject *args)
              {
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.toString());
                  return j2p(result);
                }

                return callSuper(&PY_TYPE(ModifierQueryNode), (PyObject *) self, "toString", args, 2);
              }

              static PyObject *t_ModifierQueryNode_get__child(t_ModifierQueryNode *self, void *data)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode value((jobject) NULL);
                OBJ_CALL(value = self->object.getChild());
                return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(value);
              }
              static int t_ModifierQueryNode_set__child(t_ModifierQueryNode *self, PyObject *arg, void *data)
              {
                {
                  ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode value((jobject) NULL);
                  if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &value))
                  {
                    INT_CALL(self->object.setChild(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "child", arg);
                return -1;
              }

              static PyObject *t_ModifierQueryNode_get__modifier(t_ModifierQueryNode *self, void *data)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::ModifierQueryNode$Modifier value((jobject) NULL);
                OBJ_CALL(value = self->object.getModifier());
                return ::org::apache::lucene::queryparser::flexible::core::nodes::t_ModifierQueryNode$Modifier::wrap_Object(value);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/config/NumericFieldConfigListener.h"
#include "org/apache/lucene/queryparser/flexible/core/config/FieldConfigListener.h"
#include "org/apache/lucene/queryparser/flexible/core/config/FieldConfig.h"
#include "org/apache/lucene/queryparser/flexible/core/config/QueryConfigHandler.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace config {

              ::java::lang::Class *NumericFieldConfigListener::class$ = NULL;
              jmethodID *NumericFieldConfigListener::mids$ = NULL;
              bool NumericFieldConfigListener::live$ = false;

              jclass NumericFieldConfigListener::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/config/NumericFieldConfigListener");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_0b1f7132] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/flexible/core/config/QueryConfigHandler;)V");
                  mids$[mid_buildFieldConfig_aaab7c6b] = env->getMethodID(cls, "buildFieldConfig", "(Lorg/apache/lucene/queryparser/flexible/core/config/FieldConfig;)V");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              NumericFieldConfigListener::NumericFieldConfigListener(const ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_0b1f7132, a0.this$)) {}

              void NumericFieldConfigListener::buildFieldConfig(const ::org::apache::lucene::queryparser::flexible::core::config::FieldConfig & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_buildFieldConfig_aaab7c6b], a0.this$);
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace config {
              static PyObject *t_NumericFieldConfigListener_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_NumericFieldConfigListener_instance_(PyTypeObject *type, PyObject *arg);
              static int t_NumericFieldConfigListener_init_(t_NumericFieldConfigListener *self, PyObject *args, PyObject *kwds);
              static PyObject *t_NumericFieldConfigListener_buildFieldConfig(t_NumericFieldConfigListener *self, PyObject *arg);

              static PyMethodDef t_NumericFieldConfigListener__methods_[] = {
                DECLARE_METHOD(t_NumericFieldConfigListener, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_NumericFieldConfigListener, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_NumericFieldConfigListener, buildFieldConfig, METH_O),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(NumericFieldConfigListener, t_NumericFieldConfigListener, ::java::lang::Object, NumericFieldConfigListener, t_NumericFieldConfigListener_init_, 0, 0, 0, 0, 0);

              void t_NumericFieldConfigListener::install(PyObject *module)
              {
                installType(&PY_TYPE(NumericFieldConfigListener), module, "NumericFieldConfigListener", 0);
              }

              void t_NumericFieldConfigListener::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(NumericFieldConfigListener).tp_dict, "class_", make_descriptor(NumericFieldConfigListener::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(NumericFieldConfigListener).tp_dict, "wrapfn_", make_descriptor(t_NumericFieldConfigListener::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(NumericFieldConfigListener).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_NumericFieldConfigListener_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, NumericFieldConfigListener::initializeClass, 1)))
                  return NULL;
                return t_NumericFieldConfigListener::wrap_Object(NumericFieldConfigListener(((t_NumericFieldConfigListener *) arg)->object.this$));
              }
              static PyObject *t_NumericFieldConfigListener_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, NumericFieldConfigListener::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_NumericFieldConfigListener_init_(t_NumericFieldConfigListener *self, PyObject *args, PyObject *kwds)
              {
                ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler a0((jobject) NULL);
                NumericFieldConfigListener object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler::initializeClass, &a0))
                {
                  INT_CALL(object = NumericFieldConfigListener(a0));
                  self->object = object;
                }
                else
                {
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_NumericFieldConfigListener_buildFieldConfig(t_NumericFieldConfigListener *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::config::FieldConfig a0((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::config::FieldConfig::initializeClass, &a0))
                {
                  OBJ_CALL(self->object.buildFieldConfig(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "buildFieldConfig", arg);
                return NULL;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/processors/QueryNodeProcessorPipeline.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/queryparser/flexible/core/config/QueryConfigHandler.h"
#include "java/lang/Class.h"
#include "java/util/Collection.h"
#include "org/apache/lucene/queryparser/flexible/core/processors/QueryNodeProcessor.h"
#include "java/util/Iterator.h"
#include "java/util/ListIterator.h"
#include "java/util/List.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace processors {

              ::java::lang::Class *QueryNodeProcessorPipeline::class$ = NULL;
              jmethodID *QueryNodeProcessorPipeline::mids$ = NULL;
              bool QueryNodeProcessorPipeline::live$ = false;

              jclass QueryNodeProcessorPipeline::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/processors/QueryNodeProcessorPipeline");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_init$_0b1f7132] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/flexible/core/config/QueryConfigHandler;)V");
                  mids$[mid_add_507a7d19] = env->getMethodID(cls, "add", "(Lorg/apache/lucene/queryparser/flexible/core/processors/QueryNodeProcessor;)Z");
                  mids$[mid_add_f6ca4173] = env->getMethodID(cls, "add", "(ILorg/apache/lucene/queryparser/flexible/core/processors/QueryNodeProcessor;)V");
                  mids$[mid_addAll_9bfb3701] = env->getMethodID(cls, "addAll", "(Ljava/util/Collection;)Z");
                  mids$[mid_addAll_006cd2b7] = env->getMethodID(cls, "addAll", "(ILjava/util/Collection;)Z");
                  mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
                  mids$[mid_contains_290588e2] = env->getMethodID(cls, "contains", "(Ljava/lang/Object;)Z");
                  mids$[mid_containsAll_9bfb3701] = env->getMethodID(cls, "containsAll", "(Ljava/util/Collection;)Z");
                  mids$[mid_get_b9090432] = env->getMethodID(cls, "get", "(I)Lorg/apache/lucene/queryparser/flexible/core/processors/QueryNodeProcessor;");
                  mids$[mid_getQueryConfigHandler_3636d8c3] = env->getMethodID(cls, "getQueryConfigHandler", "()Lorg/apache/lucene/queryparser/flexible/core/config/QueryConfigHandler;");
                  mids$[mid_indexOf_290588f1] = env->getMethodID(cls, "indexOf", "(Ljava/lang/Object;)I");
                  mids$[mid_isEmpty_54c6a16a] = env->getMethodID(cls, "isEmpty", "()Z");
                  mids$[mid_iterator_40858c90] = env->getMethodID(cls, "iterator", "()Ljava/util/Iterator;");
                  mids$[mid_lastIndexOf_290588f1] = env->getMethodID(cls, "lastIndexOf", "(Ljava/lang/Object;)I");
                  mids$[mid_listIterator_b5be4e14] = env->getMethodID(cls, "listIterator", "()Ljava/util/ListIterator;");
                  mids$[mid_listIterator_4145ee6a] = env->getMethodID(cls, "listIterator", "(I)Ljava/util/ListIterator;");
                  mids$[mid_process_6705aed7] = env->getMethodID(cls, "process", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_remove_b9090432] = env->getMethodID(cls, "remove", "(I)Lorg/apache/lucene/queryparser/flexible/core/processors/QueryNodeProcessor;");
                  mids$[mid_remove_290588e2] = env->getMethodID(cls, "remove", "(Ljava/lang/Object;)Z");
                  mids$[mid_removeAll_9bfb3701] = env->getMethodID(cls, "removeAll", "(Ljava/util/Collection;)Z");
                  mids$[mid_retainAll_9bfb3701] = env->getMethodID(cls, "retainAll", "(Ljava/util/Collection;)Z");
                  mids$[mid_set_adfc5df1] = env->getMethodID(cls, "set", "(ILorg/apache/lucene/queryparser/flexible/core/processors/QueryNodeProcessor;)Lorg/apache/lucene/queryparser/flexible/core/processors/QueryNodeProcessor;");
                  mids$[mid_setQueryConfigHandler_0b1f7132] = env->getMethodID(cls, "setQueryConfigHandler", "(Lorg/apache/lucene/queryparser/flexible/core/config/QueryConfigHandler;)V");
                  mids$[mid_size_54c6a179] = env->getMethodID(cls, "size", "()I");
                  mids$[mid_subList_6bc635fe] = env->getMethodID(cls, "subList", "(II)Ljava/util/List;");
                  mids$[mid_toArray_94e49c77] = env->getMethodID(cls, "toArray", "()[Ljava/lang/Object;");
                  mids$[mid_toArray_ae67dbcf] = env->getMethodID(cls, "toArray", "([Ljava/lang/Object;)[Ljava/lang/Object;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              QueryNodeProcessorPipeline::QueryNodeProcessorPipeline() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              QueryNodeProcessorPipeline::QueryNodeProcessorPipeline(const ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_0b1f7132, a0.this$)) {}

              jboolean QueryNodeProcessorPipeline::add(const ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessor & a0) const
              {
                return env->callBooleanMethod(this$, mids$[mid_add_507a7d19], a0.this$);
              }

              void QueryNodeProcessorPipeline::add(jint a0, const ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessor & a1) const
              {
                env->callVoidMethod(this$, mids$[mid_add_f6ca4173], a0, a1.this$);
              }

              jboolean QueryNodeProcessorPipeline::addAll(const ::java::util::Collection & a0) const
              {
                return env->callBooleanMethod(this$, mids$[mid_addAll_9bfb3701], a0.this$);
              }

              jboolean QueryNodeProcessorPipeline::addAll(jint a0, const ::java::util::Collection & a1) const
              {
                return env->callBooleanMethod(this$, mids$[mid_addAll_006cd2b7], a0, a1.this$);
              }

              void QueryNodeProcessorPipeline::clear() const
              {
                env->callVoidMethod(this$, mids$[mid_clear_54c6a166]);
              }

              jboolean QueryNodeProcessorPipeline::contains(const ::java::lang::Object & a0) const
              {
                return env->callBooleanMethod(this$, mids$[mid_contains_290588e2], a0.this$);
              }

              jboolean QueryNodeProcessorPipeline::containsAll(const ::java::util::Collection & a0) const
              {
                return env->callBooleanMethod(this$, mids$[mid_containsAll_9bfb3701], a0.this$);
              }

              ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessor QueryNodeProcessorPipeline::get(jint a0) const
              {
                return ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessor(env->callObjectMethod(this$, mids$[mid_get_b9090432], a0));
              }

              ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler QueryNodeProcessorPipeline::getQueryConfigHandler() const
              {
                return ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler(env->callObjectMethod(this$, mids$[mid_getQueryConfigHandler_3636d8c3]));
              }

              jint QueryNodeProcessorPipeline::indexOf(const ::java::lang::Object & a0) const
              {
                return env->callIntMethod(this$, mids$[mid_indexOf_290588f1], a0.this$);
              }

              jboolean QueryNodeProcessorPipeline::isEmpty() const
              {
                return env->callBooleanMethod(this$, mids$[mid_isEmpty_54c6a16a]);
              }

              ::java::util::Iterator QueryNodeProcessorPipeline::iterator() const
              {
                return ::java::util::Iterator(env->callObjectMethod(this$, mids$[mid_iterator_40858c90]));
              }

              jint QueryNodeProcessorPipeline::lastIndexOf(const ::java::lang::Object & a0) const
              {
                return env->callIntMethod(this$, mids$[mid_lastIndexOf_290588f1], a0.this$);
              }

              ::java::util::ListIterator QueryNodeProcessorPipeline::listIterator() const
              {
                return ::java::util::ListIterator(env->callObjectMethod(this$, mids$[mid_listIterator_b5be4e14]));
              }

              ::java::util::ListIterator QueryNodeProcessorPipeline::listIterator(jint a0) const
              {
                return ::java::util::ListIterator(env->callObjectMethod(this$, mids$[mid_listIterator_4145ee6a], a0));
              }

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode QueryNodeProcessorPipeline::process(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_process_6705aed7], a0.this$));
              }

              ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessor QueryNodeProcessorPipeline::remove(jint a0) const
              {
                return ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessor(env->callObjectMethod(this$, mids$[mid_remove_b9090432], a0));
              }

              jboolean QueryNodeProcessorPipeline::remove(const ::java::lang::Object & a0) const
              {
                return env->callBooleanMethod(this$, mids$[mid_remove_290588e2], a0.this$);
              }

              jboolean QueryNodeProcessorPipeline::removeAll(const ::java::util::Collection & a0) const
              {
                return env->callBooleanMethod(this$, mids$[mid_removeAll_9bfb3701], a0.this$);
              }

              jboolean QueryNodeProcessorPipeline::retainAll(const ::java::util::Collection & a0) const
              {
                return env->callBooleanMethod(this$, mids$[mid_retainAll_9bfb3701], a0.this$);
              }

              ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessor QueryNodeProcessorPipeline::set(jint a0, const ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessor & a1) const
              {
                return ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessor(env->callObjectMethod(this$, mids$[mid_set_adfc5df1], a0, a1.this$));
              }

              void QueryNodeProcessorPipeline::setQueryConfigHandler(const ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setQueryConfigHandler_0b1f7132], a0.this$);
              }

              jint QueryNodeProcessorPipeline::size() const
              {
                return env->callIntMethod(this$, mids$[mid_size_54c6a179]);
              }

              ::java::util::List QueryNodeProcessorPipeline::subList(jint a0, jint a1) const
              {
                return ::java::util::List(env->callObjectMethod(this$, mids$[mid_subList_6bc635fe], a0, a1));
              }

              JArray< ::java::lang::Object > QueryNodeProcessorPipeline::toArray() const
              {
                return JArray< ::java::lang::Object >(env->callObjectMethod(this$, mids$[mid_toArray_94e49c77]));
              }

              JArray< ::java::lang::Object > QueryNodeProcessorPipeline::toArray(const JArray< ::java::lang::Object > & a0) const
              {
                return JArray< ::java::lang::Object >(env->callObjectMethod(this$, mids$[mid_toArray_ae67dbcf], a0.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace processors {
              static PyObject *t_QueryNodeProcessorPipeline_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_QueryNodeProcessorPipeline_instance_(PyTypeObject *type, PyObject *arg);
              static int t_QueryNodeProcessorPipeline_init_(t_QueryNodeProcessorPipeline *self, PyObject *args, PyObject *kwds);
              static PyObject *t_QueryNodeProcessorPipeline_add(t_QueryNodeProcessorPipeline *self, PyObject *args);
              static PyObject *t_QueryNodeProcessorPipeline_addAll(t_QueryNodeProcessorPipeline *self, PyObject *args);
              static PyObject *t_QueryNodeProcessorPipeline_clear(t_QueryNodeProcessorPipeline *self);
              static PyObject *t_QueryNodeProcessorPipeline_contains(t_QueryNodeProcessorPipeline *self, PyObject *arg);
              static PyObject *t_QueryNodeProcessorPipeline_containsAll(t_QueryNodeProcessorPipeline *self, PyObject *arg);
              static PyObject *t_QueryNodeProcessorPipeline_get(t_QueryNodeProcessorPipeline *self, PyObject *arg);
              static PyObject *t_QueryNodeProcessorPipeline_getQueryConfigHandler(t_QueryNodeProcessorPipeline *self);
              static PyObject *t_QueryNodeProcessorPipeline_indexOf(t_QueryNodeProcessorPipeline *self, PyObject *arg);
              static PyObject *t_QueryNodeProcessorPipeline_isEmpty(t_QueryNodeProcessorPipeline *self);
              static PyObject *t_QueryNodeProcessorPipeline_iterator(t_QueryNodeProcessorPipeline *self);
              static PyObject *t_QueryNodeProcessorPipeline_lastIndexOf(t_QueryNodeProcessorPipeline *self, PyObject *arg);
              static PyObject *t_QueryNodeProcessorPipeline_listIterator(t_QueryNodeProcessorPipeline *self, PyObject *args);
              static PyObject *t_QueryNodeProcessorPipeline_process(t_QueryNodeProcessorPipeline *self, PyObject *arg);
              static PyObject *t_QueryNodeProcessorPipeline_remove(t_QueryNodeProcessorPipeline *self, PyObject *args);
              static PyObject *t_QueryNodeProcessorPipeline_removeAll(t_QueryNodeProcessorPipeline *self, PyObject *arg);
              static PyObject *t_QueryNodeProcessorPipeline_retainAll(t_QueryNodeProcessorPipeline *self, PyObject *arg);
              static PyObject *t_QueryNodeProcessorPipeline_set(t_QueryNodeProcessorPipeline *self, PyObject *args);
              static PyObject *t_QueryNodeProcessorPipeline_setQueryConfigHandler(t_QueryNodeProcessorPipeline *self, PyObject *arg);
              static PyObject *t_QueryNodeProcessorPipeline_size(t_QueryNodeProcessorPipeline *self);
              static PyObject *t_QueryNodeProcessorPipeline_subList(t_QueryNodeProcessorPipeline *self, PyObject *args);
              static PyObject *t_QueryNodeProcessorPipeline_toArray(t_QueryNodeProcessorPipeline *self, PyObject *args);
              static PyObject *t_QueryNodeProcessorPipeline_get__empty(t_QueryNodeProcessorPipeline *self, void *data);
              static PyObject *t_QueryNodeProcessorPipeline_get__queryConfigHandler(t_QueryNodeProcessorPipeline *self, void *data);
              static int t_QueryNodeProcessorPipeline_set__queryConfigHandler(t_QueryNodeProcessorPipeline *self, PyObject *arg, void *data);
              static PyGetSetDef t_QueryNodeProcessorPipeline__fields_[] = {
                DECLARE_GET_FIELD(t_QueryNodeProcessorPipeline, empty),
                DECLARE_GETSET_FIELD(t_QueryNodeProcessorPipeline, queryConfigHandler),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_QueryNodeProcessorPipeline__methods_[] = {
                DECLARE_METHOD(t_QueryNodeProcessorPipeline, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_QueryNodeProcessorPipeline, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_QueryNodeProcessorPipeline, add, METH_VARARGS),
                DECLARE_METHOD(t_QueryNodeProcessorPipeline, addAll, METH_VARARGS),
                DECLARE_METHOD(t_QueryNodeProcessorPipeline, clear, METH_NOARGS),
                DECLARE_METHOD(t_QueryNodeProcessorPipeline, contains, METH_O),
                DECLARE_METHOD(t_QueryNodeProcessorPipeline, containsAll, METH_O),
                DECLARE_METHOD(t_QueryNodeProcessorPipeline, get, METH_O),
                DECLARE_METHOD(t_QueryNodeProcessorPipeline, getQueryConfigHandler, METH_NOARGS),
                DECLARE_METHOD(t_QueryNodeProcessorPipeline, indexOf, METH_O),
                DECLARE_METHOD(t_QueryNodeProcessorPipeline, isEmpty, METH_NOARGS),
                DECLARE_METHOD(t_QueryNodeProcessorPipeline, iterator, METH_NOARGS),
                DECLARE_METHOD(t_QueryNodeProcessorPipeline, lastIndexOf, METH_O),
                DECLARE_METHOD(t_QueryNodeProcessorPipeline, listIterator, METH_VARARGS),
                DECLARE_METHOD(t_QueryNodeProcessorPipeline, process, METH_O),
                DECLARE_METHOD(t_QueryNodeProcessorPipeline, remove, METH_VARARGS),
                DECLARE_METHOD(t_QueryNodeProcessorPipeline, removeAll, METH_O),
                DECLARE_METHOD(t_QueryNodeProcessorPipeline, retainAll, METH_O),
                DECLARE_METHOD(t_QueryNodeProcessorPipeline, set, METH_VARARGS),
                DECLARE_METHOD(t_QueryNodeProcessorPipeline, setQueryConfigHandler, METH_O),
                DECLARE_METHOD(t_QueryNodeProcessorPipeline, size, METH_NOARGS),
                DECLARE_METHOD(t_QueryNodeProcessorPipeline, subList, METH_VARARGS),
                DECLARE_METHOD(t_QueryNodeProcessorPipeline, toArray, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(QueryNodeProcessorPipeline, t_QueryNodeProcessorPipeline, ::java::lang::Object, QueryNodeProcessorPipeline, t_QueryNodeProcessorPipeline_init_, ((PyObject *(*)(t_QueryNodeProcessorPipeline *)) get_iterator< t_QueryNodeProcessorPipeline >), 0, t_QueryNodeProcessorPipeline__fields_, 0, 0);

              void t_QueryNodeProcessorPipeline::install(PyObject *module)
              {
                installType(&PY_TYPE(QueryNodeProcessorPipeline), module, "QueryNodeProcessorPipeline", 0);
              }

              void t_QueryNodeProcessorPipeline::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(QueryNodeProcessorPipeline).tp_dict, "class_", make_descriptor(QueryNodeProcessorPipeline::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(QueryNodeProcessorPipeline).tp_dict, "wrapfn_", make_descriptor(t_QueryNodeProcessorPipeline::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(QueryNodeProcessorPipeline).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_QueryNodeProcessorPipeline_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, QueryNodeProcessorPipeline::initializeClass, 1)))
                  return NULL;
                return t_QueryNodeProcessorPipeline::wrap_Object(QueryNodeProcessorPipeline(((t_QueryNodeProcessorPipeline *) arg)->object.this$));
              }
              static PyObject *t_QueryNodeProcessorPipeline_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, QueryNodeProcessorPipeline::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_QueryNodeProcessorPipeline_init_(t_QueryNodeProcessorPipeline *self, PyObject *args, PyObject *kwds)
              {
                switch (PyTuple_GET_SIZE(args)) {
                 case 0:
                  {
                    QueryNodeProcessorPipeline object((jobject) NULL);

                    INT_CALL(object = QueryNodeProcessorPipeline());
                    self->object = object;
                    break;
                  }
                  goto err;
                 case 1:
                  {
                    ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler a0((jobject) NULL);
                    QueryNodeProcessorPipeline object((jobject) NULL);

                    if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler::initializeClass, &a0))
                    {
                      INT_CALL(object = QueryNodeProcessorPipeline(a0));
                      self->object = object;
                      break;
                    }
                  }
                 default:
                 err:
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_QueryNodeProcessorPipeline_add(t_QueryNodeProcessorPipeline *self, PyObject *args)
              {
                switch (PyTuple_GET_SIZE(args)) {
                 case 1:
                  {
                    ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessor a0((jobject) NULL);
                    jboolean result;

                    if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessor::initializeClass, &a0))
                    {
                      OBJ_CALL(result = self->object.add(a0));
                      Py_RETURN_BOOL(result);
                    }
                  }
                  break;
                 case 2:
                  {
                    jint a0;
                    ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessor a1((jobject) NULL);

                    if (!parseArgs(args, "Ik", ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessor::initializeClass, &a0, &a1))
                    {
                      OBJ_CALL(self->object.add(a0, a1));
                      Py_RETURN_NONE;
                    }
                  }
                }

                PyErr_SetArgsError((PyObject *) self, "add", args);
                return NULL;
              }

              static PyObject *t_QueryNodeProcessorPipeline_addAll(t_QueryNodeProcessorPipeline *self, PyObject *args)
              {
                switch (PyTuple_GET_SIZE(args)) {
                 case 1:
                  {
                    ::java::util::Collection a0((jobject) NULL);
                    PyTypeObject **p0;
                    jboolean result;

                    if (!parseArgs(args, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
                    {
                      OBJ_CALL(result = self->object.addAll(a0));
                      Py_RETURN_BOOL(result);
                    }
                  }
                  break;
                 case 2:
                  {
                    jint a0;
                    ::java::util::Collection a1((jobject) NULL);
                    PyTypeObject **p1;
                    jboolean result;

                    if (!parseArgs(args, "IK", ::java::util::Collection::initializeClass, &a0, &a1, &p1, ::java::util::t_Collection::parameters_))
                    {
                      OBJ_CALL(result = self->object.addAll(a0, a1));
                      Py_RETURN_BOOL(result);
                    }
                  }
                }

                PyErr_SetArgsError((PyObject *) self, "addAll", args);
                return NULL;
              }

              static PyObject *t_QueryNodeProcessorPipeline_clear(t_QueryNodeProcessorPipeline *self)
              {
                OBJ_CALL(self->object.clear());
                Py_RETURN_NONE;
              }

              static PyObject *t_QueryNodeProcessorPipeline_contains(t_QueryNodeProcessorPipeline *self, PyObject *arg)
              {
                ::java::lang::Object a0((jobject) NULL);
                jboolean result;

                if (!parseArg(arg, "o", &a0))
                {
                  OBJ_CALL(result = self->object.contains(a0));
                  Py_RETURN_BOOL(result);
                }

                PyErr_SetArgsError((PyObject *) self, "contains", arg);
                return NULL;
              }

              static PyObject *t_QueryNodeProcessorPipeline_containsAll(t_QueryNodeProcessorPipeline *self, PyObject *arg)
              {
                ::java::util::Collection a0((jobject) NULL);
                PyTypeObject **p0;
                jboolean result;

                if (!parseArg(arg, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
                {
                  OBJ_CALL(result = self->object.containsAll(a0));
                  Py_RETURN_BOOL(result);
                }

                PyErr_SetArgsError((PyObject *) self, "containsAll", arg);
                return NULL;
              }

              static PyObject *t_QueryNodeProcessorPipeline_get(t_QueryNodeProcessorPipeline *self, PyObject *arg)
              {
                jint a0;
                ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessor result((jobject) NULL);

                if (!parseArg(arg, "I", &a0))
                {
                  OBJ_CALL(result = self->object.get(a0));
                  return ::org::apache::lucene::queryparser::flexible::core::processors::t_QueryNodeProcessor::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "get", arg);
                return NULL;
              }

              static PyObject *t_QueryNodeProcessorPipeline_getQueryConfigHandler(t_QueryNodeProcessorPipeline *self)
              {
                ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler result((jobject) NULL);
                OBJ_CALL(result = self->object.getQueryConfigHandler());
                return ::org::apache::lucene::queryparser::flexible::core::config::t_QueryConfigHandler::wrap_Object(result);
              }

              static PyObject *t_QueryNodeProcessorPipeline_indexOf(t_QueryNodeProcessorPipeline *self, PyObject *arg)
              {
                ::java::lang::Object a0((jobject) NULL);
                jint result;

                if (!parseArg(arg, "o", &a0))
                {
                  OBJ_CALL(result = self->object.indexOf(a0));
                  return PyInt_FromLong((long) result);
                }

                PyErr_SetArgsError((PyObject *) self, "indexOf", arg);
                return NULL;
              }

              static PyObject *t_QueryNodeProcessorPipeline_isEmpty(t_QueryNodeProcessorPipeline *self)
              {
                jboolean result;
                OBJ_CALL(result = self->object.isEmpty());
                Py_RETURN_BOOL(result);
              }

              static PyObject *t_QueryNodeProcessorPipeline_iterator(t_QueryNodeProcessorPipeline *self)
              {
                ::java::util::Iterator result((jobject) NULL);
                OBJ_CALL(result = self->object.iterator());
                return ::java::util::t_Iterator::wrap_Object(result, &::org::apache::lucene::queryparser::flexible::core::processors::PY_TYPE(QueryNodeProcessor));
              }

              static PyObject *t_QueryNodeProcessorPipeline_lastIndexOf(t_QueryNodeProcessorPipeline *self, PyObject *arg)
              {
                ::java::lang::Object a0((jobject) NULL);
                jint result;

                if (!parseArg(arg, "o", &a0))
                {
                  OBJ_CALL(result = self->object.lastIndexOf(a0));
                  return PyInt_FromLong((long) result);
                }

                PyErr_SetArgsError((PyObject *) self, "lastIndexOf", arg);
                return NULL;
              }

              static PyObject *t_QueryNodeProcessorPipeline_listIterator(t_QueryNodeProcessorPipeline *self, PyObject *args)
              {
                switch (PyTuple_GET_SIZE(args)) {
                 case 0:
                  {
                    ::java::util::ListIterator result((jobject) NULL);
                    OBJ_CALL(result = self->object.listIterator());
                    return ::java::util::t_ListIterator::wrap_Object(result, &::org::apache::lucene::queryparser::flexible::core::processors::PY_TYPE(QueryNodeProcessor));
                  }
                  break;
                 case 1:
                  {
                    jint a0;
                    ::java::util::ListIterator result((jobject) NULL);

                    if (!parseArgs(args, "I", &a0))
                    {
                      OBJ_CALL(result = self->object.listIterator(a0));
                      return ::java::util::t_ListIterator::wrap_Object(result, &::org::apache::lucene::queryparser::flexible::core::processors::PY_TYPE(QueryNodeProcessor));
                    }
                  }
                }

                PyErr_SetArgsError((PyObject *) self, "listIterator", args);
                return NULL;
              }

              static PyObject *t_QueryNodeProcessorPipeline_process(t_QueryNodeProcessorPipeline *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.process(a0));
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "process", arg);
                return NULL;
              }

              static PyObject *t_QueryNodeProcessorPipeline_remove(t_QueryNodeProcessorPipeline *self, PyObject *args)
              {
                switch (PyTuple_GET_SIZE(args)) {
                 case 1:
                  {
                    jint a0;
                    ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessor result((jobject) NULL);

                    if (!parseArgs(args, "I", &a0))
                    {
                      OBJ_CALL(result = self->object.remove(a0));
                      return ::org::apache::lucene::queryparser::flexible::core::processors::t_QueryNodeProcessor::wrap_Object(result);
                    }
                  }
                  {
                    ::java::lang::Object a0((jobject) NULL);
                    jboolean result;

                    if (!parseArgs(args, "o", &a0))
                    {
                      OBJ_CALL(result = self->object.remove(a0));
                      Py_RETURN_BOOL(result);
                    }
                  }
                }

                PyErr_SetArgsError((PyObject *) self, "remove", args);
                return NULL;
              }

              static PyObject *t_QueryNodeProcessorPipeline_removeAll(t_QueryNodeProcessorPipeline *self, PyObject *arg)
              {
                ::java::util::Collection a0((jobject) NULL);
                PyTypeObject **p0;
                jboolean result;

                if (!parseArg(arg, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
                {
                  OBJ_CALL(result = self->object.removeAll(a0));
                  Py_RETURN_BOOL(result);
                }

                PyErr_SetArgsError((PyObject *) self, "removeAll", arg);
                return NULL;
              }

              static PyObject *t_QueryNodeProcessorPipeline_retainAll(t_QueryNodeProcessorPipeline *self, PyObject *arg)
              {
                ::java::util::Collection a0((jobject) NULL);
                PyTypeObject **p0;
                jboolean result;

                if (!parseArg(arg, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
                {
                  OBJ_CALL(result = self->object.retainAll(a0));
                  Py_RETURN_BOOL(result);
                }

                PyErr_SetArgsError((PyObject *) self, "retainAll", arg);
                return NULL;
              }

              static PyObject *t_QueryNodeProcessorPipeline_set(t_QueryNodeProcessorPipeline *self, PyObject *args)
              {
                jint a0;
                ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessor a1((jobject) NULL);
                ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessor result((jobject) NULL);

                if (!parseArgs(args, "Ik", ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessor::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(result = self->object.set(a0, a1));
                  return ::org::apache::lucene::queryparser::flexible::core::processors::t_QueryNodeProcessor::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "set", args);
                return NULL;
              }

              static PyObject *t_QueryNodeProcessorPipeline_setQueryConfigHandler(t_QueryNodeProcessorPipeline *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler a0((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler::initializeClass, &a0))
                {
                  OBJ_CALL(self->object.setQueryConfigHandler(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setQueryConfigHandler", arg);
                return NULL;
              }

              static PyObject *t_QueryNodeProcessorPipeline_size(t_QueryNodeProcessorPipeline *self)
              {
                jint result;
                OBJ_CALL(result = self->object.size());
                return PyInt_FromLong((long) result);
              }

              static PyObject *t_QueryNodeProcessorPipeline_subList(t_QueryNodeProcessorPipeline *self, PyObject *args)
              {
                jint a0;
                jint a1;
                ::java::util::List result((jobject) NULL);

                if (!parseArgs(args, "II", &a0, &a1))
                {
                  OBJ_CALL(result = self->object.subList(a0, a1));
                  return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::queryparser::flexible::core::processors::PY_TYPE(QueryNodeProcessor));
                }

                PyErr_SetArgsError((PyObject *) self, "subList", args);
                return NULL;
              }

              static PyObject *t_QueryNodeProcessorPipeline_toArray(t_QueryNodeProcessorPipeline *self, PyObject *args)
              {
                switch (PyTuple_GET_SIZE(args)) {
                 case 0:
                  {
                    JArray< ::java::lang::Object > result((jobject) NULL);
                    OBJ_CALL(result = self->object.toArray());
                    return JArray<jobject>(result.this$).wrap(::java::lang::t_Object::wrap_jobject);
                  }
                  break;
                 case 1:
                  {
                    JArray< ::java::lang::Object > a0((jobject) NULL);
                    JArray< ::java::lang::Object > result((jobject) NULL);

                    if (!parseArgs(args, "[o", &a0))
                    {
                      OBJ_CALL(result = self->object.toArray(a0));
                      return JArray<jobject>(result.this$).wrap(::java::lang::t_Object::wrap_jobject);
                    }
                  }
                }

                PyErr_SetArgsError((PyObject *) self, "toArray", args);
                return NULL;
              }

              static PyObject *t_QueryNodeProcessorPipeline_get__empty(t_QueryNodeProcessorPipeline *self, void *data)
              {
                jboolean value;
                OBJ_CALL(value = self->object.isEmpty());
                Py_RETURN_BOOL(value);
              }

              static PyObject *t_QueryNodeProcessorPipeline_get__queryConfigHandler(t_QueryNodeProcessorPipeline *self, void *data)
              {
                ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler value((jobject) NULL);
                OBJ_CALL(value = self->object.getQueryConfigHandler());
                return ::org::apache::lucene::queryparser::flexible::core::config::t_QueryConfigHandler::wrap_Object(value);
              }
              static int t_QueryNodeProcessorPipeline_set__queryConfigHandler(t_QueryNodeProcessorPipeline *self, PyObject *arg, void *data)
              {
                {
                  ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler value((jobject) NULL);
                  if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler::initializeClass, &value))
                  {
                    INT_CALL(self->object.setQueryConfigHandler(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "queryConfigHandler", arg);
                return -1;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/VirtualMethod.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *VirtualMethod::class$ = NULL;
        jmethodID *VirtualMethod::mids$ = NULL;
        bool VirtualMethod::live$ = false;

        jclass VirtualMethod::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/VirtualMethod");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_a7992850] = env->getMethodID(cls, "<init>", "(Ljava/lang/Class;Ljava/lang/String;[Ljava/lang/Class;)V");
            mids$[mid_compareImplementationDistance_3e1352c7] = env->getStaticMethodID(cls, "compareImplementationDistance", "(Ljava/lang/Class;Lorg/apache/lucene/util/VirtualMethod;Lorg/apache/lucene/util/VirtualMethod;)I");
            mids$[mid_getImplementationDistance_a5deafeb] = env->getMethodID(cls, "getImplementationDistance", "(Ljava/lang/Class;)I");
            mids$[mid_isOverriddenAsOf_a5deaff8] = env->getMethodID(cls, "isOverriddenAsOf", "(Ljava/lang/Class;)Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        VirtualMethod::VirtualMethod(const ::java::lang::Class & a0, const ::java::lang::String & a1, const JArray< ::java::lang::Class > & a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_a7992850, a0.this$, a1.this$, a2.this$)) {}

        jint VirtualMethod::compareImplementationDistance(const ::java::lang::Class & a0, const VirtualMethod & a1, const VirtualMethod & a2)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_compareImplementationDistance_3e1352c7], a0.this$, a1.this$, a2.this$);
        }

        jint VirtualMethod::getImplementationDistance(const ::java::lang::Class & a0) const
        {
          return env->callIntMethod(this$, mids$[mid_getImplementationDistance_a5deafeb], a0.this$);
        }

        jboolean VirtualMethod::isOverriddenAsOf(const ::java::lang::Class & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_isOverriddenAsOf_a5deaff8], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_VirtualMethod_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_VirtualMethod_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_VirtualMethod_of_(t_VirtualMethod *self, PyObject *args);
        static int t_VirtualMethod_init_(t_VirtualMethod *self, PyObject *args, PyObject *kwds);
        static PyObject *t_VirtualMethod_compareImplementationDistance(PyTypeObject *type, PyObject *args);
        static PyObject *t_VirtualMethod_getImplementationDistance(t_VirtualMethod *self, PyObject *arg);
        static PyObject *t_VirtualMethod_isOverriddenAsOf(t_VirtualMethod *self, PyObject *arg);
        static PyObject *t_VirtualMethod_get__parameters_(t_VirtualMethod *self, void *data);
        static PyGetSetDef t_VirtualMethod__fields_[] = {
          DECLARE_GET_FIELD(t_VirtualMethod, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_VirtualMethod__methods_[] = {
          DECLARE_METHOD(t_VirtualMethod, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_VirtualMethod, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_VirtualMethod, of_, METH_VARARGS),
          DECLARE_METHOD(t_VirtualMethod, compareImplementationDistance, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_VirtualMethod, getImplementationDistance, METH_O),
          DECLARE_METHOD(t_VirtualMethod, isOverriddenAsOf, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(VirtualMethod, t_VirtualMethod, ::java::lang::Object, VirtualMethod, t_VirtualMethod_init_, 0, 0, t_VirtualMethod__fields_, 0, 0);
        PyObject *t_VirtualMethod::wrap_Object(const VirtualMethod& object, PyTypeObject *p0)
        {
          PyObject *obj = t_VirtualMethod::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_VirtualMethod *self = (t_VirtualMethod *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_VirtualMethod::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_VirtualMethod::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_VirtualMethod *self = (t_VirtualMethod *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_VirtualMethod::install(PyObject *module)
        {
          installType(&PY_TYPE(VirtualMethod), module, "VirtualMethod", 0);
        }

        void t_VirtualMethod::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(VirtualMethod).tp_dict, "class_", make_descriptor(VirtualMethod::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(VirtualMethod).tp_dict, "wrapfn_", make_descriptor(t_VirtualMethod::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(VirtualMethod).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_VirtualMethod_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, VirtualMethod::initializeClass, 1)))
            return NULL;
          return t_VirtualMethod::wrap_Object(VirtualMethod(((t_VirtualMethod *) arg)->object.this$));
        }
        static PyObject *t_VirtualMethod_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, VirtualMethod::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_VirtualMethod_of_(t_VirtualMethod *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_VirtualMethod_init_(t_VirtualMethod *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::Class a0((jobject) NULL);
          PyTypeObject **p0;
          ::java::lang::String a1((jobject) NULL);
          JArray< ::java::lang::Class > a2((jobject) NULL);
          PyTypeObject **p2;
          VirtualMethod object((jobject) NULL);

          if (!parseArgs(args, "Ks[K", ::java::lang::Class::initializeClass, ::java::lang::Class::initializeClass, &a0, &p0, ::java::lang::t_Class::parameters_, &a1, &a2, &p2, ::java::lang::t_Class::parameters_))
          {
            INT_CALL(object = VirtualMethod(a0, a1, a2));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_VirtualMethod_compareImplementationDistance(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::Class a0((jobject) NULL);
          PyTypeObject **p0;
          VirtualMethod a1((jobject) NULL);
          PyTypeObject **p1;
          VirtualMethod a2((jobject) NULL);
          PyTypeObject **p2;
          jint result;

          if (!parseArgs(args, "KKK", ::java::lang::Class::initializeClass, VirtualMethod::initializeClass, VirtualMethod::initializeClass, &a0, &p0, ::java::lang::t_Class::parameters_, &a1, &p1, t_VirtualMethod::parameters_, &a2, &p2, t_VirtualMethod::parameters_))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::VirtualMethod::compareImplementationDistance(a0, a1, a2));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError(type, "compareImplementationDistance", args);
          return NULL;
        }

        static PyObject *t_VirtualMethod_getImplementationDistance(t_VirtualMethod *self, PyObject *arg)
        {
          ::java::lang::Class a0((jobject) NULL);
          PyTypeObject **p0;
          jint result;

          if (!parseArg(arg, "K", ::java::lang::Class::initializeClass, &a0, &p0, ::java::lang::t_Class::parameters_))
          {
            OBJ_CALL(result = self->object.getImplementationDistance(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "getImplementationDistance", arg);
          return NULL;
        }

        static PyObject *t_VirtualMethod_isOverriddenAsOf(t_VirtualMethod *self, PyObject *arg)
        {
          ::java::lang::Class a0((jobject) NULL);
          PyTypeObject **p0;
          jboolean result;

          if (!parseArg(arg, "K", ::java::lang::Class::initializeClass, &a0, &p0, ::java::lang::t_Class::parameters_))
          {
            OBJ_CALL(result = self->object.isOverriddenAsOf(a0));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError((PyObject *) self, "isOverriddenAsOf", arg);
          return NULL;
        }
        static PyObject *t_VirtualMethod_get__parameters_(t_VirtualMethod *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/sandbox/queries/SlowFuzzyTermsEnum.h"
#include "org/apache/lucene/util/AttributeSource.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/Terms.h"
#include "org/apache/lucene/index/Term.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace sandbox {
        namespace queries {

          ::java::lang::Class *SlowFuzzyTermsEnum::class$ = NULL;
          jmethodID *SlowFuzzyTermsEnum::mids$ = NULL;
          bool SlowFuzzyTermsEnum::live$ = false;

          jclass SlowFuzzyTermsEnum::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/sandbox/queries/SlowFuzzyTermsEnum");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_40b71111] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/Terms;Lorg/apache/lucene/util/AttributeSource;Lorg/apache/lucene/index/Term;FI)V");
              mids$[mid_maxEditDistanceChanged_0741f897] = env->getMethodID(cls, "maxEditDistanceChanged", "(Lorg/apache/lucene/util/BytesRef;IZ)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SlowFuzzyTermsEnum::SlowFuzzyTermsEnum(const ::org::apache::lucene::index::Terms & a0, const ::org::apache::lucene::util::AttributeSource & a1, const ::org::apache::lucene::index::Term & a2, jfloat a3, jint a4) : ::org::apache::lucene::search::FuzzyTermsEnum(env->newObject(initializeClass, &mids$, mid_init$_40b71111, a0.this$, a1.this$, a2.this$, a3, a4)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace sandbox {
        namespace queries {
          static PyObject *t_SlowFuzzyTermsEnum_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SlowFuzzyTermsEnum_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SlowFuzzyTermsEnum_init_(t_SlowFuzzyTermsEnum *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_SlowFuzzyTermsEnum__methods_[] = {
            DECLARE_METHOD(t_SlowFuzzyTermsEnum, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SlowFuzzyTermsEnum, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SlowFuzzyTermsEnum, t_SlowFuzzyTermsEnum, ::org::apache::lucene::search::FuzzyTermsEnum, SlowFuzzyTermsEnum, t_SlowFuzzyTermsEnum_init_, 0, 0, 0, 0, 0);

          void t_SlowFuzzyTermsEnum::install(PyObject *module)
          {
            installType(&PY_TYPE(SlowFuzzyTermsEnum), module, "SlowFuzzyTermsEnum", 0);
          }

          void t_SlowFuzzyTermsEnum::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SlowFuzzyTermsEnum).tp_dict, "class_", make_descriptor(SlowFuzzyTermsEnum::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SlowFuzzyTermsEnum).tp_dict, "wrapfn_", make_descriptor(t_SlowFuzzyTermsEnum::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SlowFuzzyTermsEnum).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SlowFuzzyTermsEnum_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SlowFuzzyTermsEnum::initializeClass, 1)))
              return NULL;
            return t_SlowFuzzyTermsEnum::wrap_Object(SlowFuzzyTermsEnum(((t_SlowFuzzyTermsEnum *) arg)->object.this$));
          }
          static PyObject *t_SlowFuzzyTermsEnum_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SlowFuzzyTermsEnum::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SlowFuzzyTermsEnum_init_(t_SlowFuzzyTermsEnum *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::index::Terms a0((jobject) NULL);
            ::org::apache::lucene::util::AttributeSource a1((jobject) NULL);
            ::org::apache::lucene::index::Term a2((jobject) NULL);
            jfloat a3;
            jint a4;
            SlowFuzzyTermsEnum object((jobject) NULL);

            if (!parseArgs(args, "kkkFI", ::org::apache::lucene::index::Terms::initializeClass, ::org::apache::lucene::util::AttributeSource::initializeClass, ::org::apache::lucene::index::Term::initializeClass, &a0, &a1, &a2, &a3, &a4))
            {
              INT_CALL(object = SlowFuzzyTermsEnum(a0, a1, a2, a3, a4));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spans/SpanNotQuery.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/index/Term.h"
#include "org/apache/lucene/index/TermContext.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "java/util/Set.h"
#include "org/apache/lucene/util/Bits.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/search/Query.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/spans/Spans.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {

          ::java::lang::Class *SpanNotQuery::class$ = NULL;
          jmethodID *SpanNotQuery::mids$ = NULL;
          bool SpanNotQuery::live$ = false;

          jclass SpanNotQuery::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spans/SpanNotQuery");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c77562f2] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/spans/SpanQuery;Lorg/apache/lucene/search/spans/SpanQuery;)V");
              mids$[mid_init$_2606b720] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/spans/SpanQuery;Lorg/apache/lucene/search/spans/SpanQuery;I)V");
              mids$[mid_init$_0c3ef6ba] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/spans/SpanQuery;Lorg/apache/lucene/search/spans/SpanQuery;II)V");
              mids$[mid_clone_4b6f9500] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/search/spans/SpanNotQuery;");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_extractTerms_fb4f2b26] = env->getMethodID(cls, "extractTerms", "(Ljava/util/Set;)V");
              mids$[mid_getExclude_d3aa0332] = env->getMethodID(cls, "getExclude", "()Lorg/apache/lucene/search/spans/SpanQuery;");
              mids$[mid_getField_14c7b5c5] = env->getMethodID(cls, "getField", "()Ljava/lang/String;");
              mids$[mid_getInclude_d3aa0332] = env->getMethodID(cls, "getInclude", "()Lorg/apache/lucene/search/spans/SpanQuery;");
              mids$[mid_getSpans_f003cb44] = env->getMethodID(cls, "getSpans", "(Lorg/apache/lucene/index/AtomicReaderContext;Lorg/apache/lucene/util/Bits;Ljava/util/Map;)Lorg/apache/lucene/search/spans/Spans;");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_rewrite_7edcaa43] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/index/IndexReader;)Lorg/apache/lucene/search/Query;");
              mids$[mid_toString_97a5258f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SpanNotQuery::SpanNotQuery(const ::org::apache::lucene::search::spans::SpanQuery & a0, const ::org::apache::lucene::search::spans::SpanQuery & a1) : ::org::apache::lucene::search::spans::SpanQuery(env->newObject(initializeClass, &mids$, mid_init$_c77562f2, a0.this$, a1.this$)) {}

          SpanNotQuery::SpanNotQuery(const ::org::apache::lucene::search::spans::SpanQuery & a0, const ::org::apache::lucene::search::spans::SpanQuery & a1, jint a2) : ::org::apache::lucene::search::spans::SpanQuery(env->newObject(initializeClass, &mids$, mid_init$_2606b720, a0.this$, a1.this$, a2)) {}

          SpanNotQuery::SpanNotQuery(const ::org::apache::lucene::search::spans::SpanQuery & a0, const ::org::apache::lucene::search::spans::SpanQuery & a1, jint a2, jint a3) : ::org::apache::lucene::search::spans::SpanQuery(env->newObject(initializeClass, &mids$, mid_init$_0c3ef6ba, a0.this$, a1.this$, a2, a3)) {}

          SpanNotQuery SpanNotQuery::clone() const
          {
            return SpanNotQuery(env->callObjectMethod(this$, mids$[mid_clone_4b6f9500]));
          }

          jboolean SpanNotQuery::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          void SpanNotQuery::extractTerms(const ::java::util::Set & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_extractTerms_fb4f2b26], a0.this$);
          }

          ::org::apache::lucene::search::spans::SpanQuery SpanNotQuery::getExclude() const
          {
            return ::org::apache::lucene::search::spans::SpanQuery(env->callObjectMethod(this$, mids$[mid_getExclude_d3aa0332]));
          }

          ::java::lang::String SpanNotQuery::getField() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getField_14c7b5c5]));
          }

          ::org::apache::lucene::search::spans::SpanQuery SpanNotQuery::getInclude() const
          {
            return ::org::apache::lucene::search::spans::SpanQuery(env->callObjectMethod(this$, mids$[mid_getInclude_d3aa0332]));
          }

          ::org::apache::lucene::search::spans::Spans SpanNotQuery::getSpans(const ::org::apache::lucene::index::AtomicReaderContext & a0, const ::org::apache::lucene::util::Bits & a1, const ::java::util::Map & a2) const
          {
            return ::org::apache::lucene::search::spans::Spans(env->callObjectMethod(this$, mids$[mid_getSpans_f003cb44], a0.this$, a1.this$, a2.this$));
          }

          jint SpanNotQuery::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          ::org::apache::lucene::search::Query SpanNotQuery::rewrite(const ::org::apache::lucene::index::IndexReader & a0) const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_rewrite_7edcaa43], a0.this$));
          }

          ::java::lang::String SpanNotQuery::toString(const ::java::lang::String & a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_97a5258f], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {
          static PyObject *t_SpanNotQuery_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SpanNotQuery_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SpanNotQuery_init_(t_SpanNotQuery *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SpanNotQuery_clone(t_SpanNotQuery *self, PyObject *args);
          static PyObject *t_SpanNotQuery_equals(t_SpanNotQuery *self, PyObject *args);
          static PyObject *t_SpanNotQuery_extractTerms(t_SpanNotQuery *self, PyObject *args);
          static PyObject *t_SpanNotQuery_getExclude(t_SpanNotQuery *self);
          static PyObject *t_SpanNotQuery_getField(t_SpanNotQuery *self, PyObject *args);
          static PyObject *t_SpanNotQuery_getInclude(t_SpanNotQuery *self);
          static PyObject *t_SpanNotQuery_getSpans(t_SpanNotQuery *self, PyObject *args);
          static PyObject *t_SpanNotQuery_hashCode(t_SpanNotQuery *self, PyObject *args);
          static PyObject *t_SpanNotQuery_rewrite(t_SpanNotQuery *self, PyObject *args);
          static PyObject *t_SpanNotQuery_toString(t_SpanNotQuery *self, PyObject *args);
          static PyObject *t_SpanNotQuery_get__exclude(t_SpanNotQuery *self, void *data);
          static PyObject *t_SpanNotQuery_get__field(t_SpanNotQuery *self, void *data);
          static PyObject *t_SpanNotQuery_get__include(t_SpanNotQuery *self, void *data);
          static PyGetSetDef t_SpanNotQuery__fields_[] = {
            DECLARE_GET_FIELD(t_SpanNotQuery, exclude),
            DECLARE_GET_FIELD(t_SpanNotQuery, field),
            DECLARE_GET_FIELD(t_SpanNotQuery, include),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SpanNotQuery__methods_[] = {
            DECLARE_METHOD(t_SpanNotQuery, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanNotQuery, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanNotQuery, clone, METH_VARARGS),
            DECLARE_METHOD(t_SpanNotQuery, equals, METH_VARARGS),
            DECLARE_METHOD(t_SpanNotQuery, extractTerms, METH_VARARGS),
            DECLARE_METHOD(t_SpanNotQuery, getExclude, METH_NOARGS),
            DECLARE_METHOD(t_SpanNotQuery, getField, METH_VARARGS),
            DECLARE_METHOD(t_SpanNotQuery, getInclude, METH_NOARGS),
            DECLARE_METHOD(t_SpanNotQuery, getSpans, METH_VARARGS),
            DECLARE_METHOD(t_SpanNotQuery, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_SpanNotQuery, rewrite, METH_VARARGS),
            DECLARE_METHOD(t_SpanNotQuery, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SpanNotQuery, t_SpanNotQuery, ::org::apache::lucene::search::spans::SpanQuery, SpanNotQuery, t_SpanNotQuery_init_, 0, 0, t_SpanNotQuery__fields_, 0, 0);

          void t_SpanNotQuery::install(PyObject *module)
          {
            installType(&PY_TYPE(SpanNotQuery), module, "SpanNotQuery", 0);
          }

          void t_SpanNotQuery::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SpanNotQuery).tp_dict, "class_", make_descriptor(SpanNotQuery::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SpanNotQuery).tp_dict, "wrapfn_", make_descriptor(t_SpanNotQuery::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SpanNotQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SpanNotQuery_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SpanNotQuery::initializeClass, 1)))
              return NULL;
            return t_SpanNotQuery::wrap_Object(SpanNotQuery(((t_SpanNotQuery *) arg)->object.this$));
          }
          static PyObject *t_SpanNotQuery_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SpanNotQuery::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SpanNotQuery_init_(t_SpanNotQuery *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::search::spans::SpanQuery a0((jobject) NULL);
                ::org::apache::lucene::search::spans::SpanQuery a1((jobject) NULL);
                SpanNotQuery object((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::search::spans::SpanQuery::initializeClass, ::org::apache::lucene::search::spans::SpanQuery::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = SpanNotQuery(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::search::spans::SpanQuery a0((jobject) NULL);
                ::org::apache::lucene::search::spans::SpanQuery a1((jobject) NULL);
                jint a2;
                SpanNotQuery object((jobject) NULL);

                if (!parseArgs(args, "kkI", ::org::apache::lucene::search::spans::SpanQuery::initializeClass, ::org::apache::lucene::search::spans::SpanQuery::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = SpanNotQuery(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 4:
              {
                ::org::apache::lucene::search::spans::SpanQuery a0((jobject) NULL);
                ::org::apache::lucene::search::spans::SpanQuery a1((jobject) NULL);
                jint a2;
                jint a3;
                SpanNotQuery object((jobject) NULL);

                if (!parseArgs(args, "kkII", ::org::apache::lucene::search::spans::SpanQuery::initializeClass, ::org::apache::lucene::search::spans::SpanQuery::initializeClass, &a0, &a1, &a2, &a3))
                {
                  INT_CALL(object = SpanNotQuery(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SpanNotQuery_clone(t_SpanNotQuery *self, PyObject *args)
          {
            SpanNotQuery result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.clone());
              return t_SpanNotQuery::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(SpanNotQuery), (PyObject *) self, "clone", args, 2);
          }

          static PyObject *t_SpanNotQuery_equals(t_SpanNotQuery *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(SpanNotQuery), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_SpanNotQuery_extractTerms(t_SpanNotQuery *self, PyObject *args)
          {
            ::java::util::Set a0((jobject) NULL);
            PyTypeObject **p0;

            if (!parseArgs(args, "K", ::java::util::Set::initializeClass, &a0, &p0, ::java::util::t_Set::parameters_))
            {
              OBJ_CALL(self->object.extractTerms(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(SpanNotQuery), (PyObject *) self, "extractTerms", args, 2);
          }

          static PyObject *t_SpanNotQuery_getExclude(t_SpanNotQuery *self)
          {
            ::org::apache::lucene::search::spans::SpanQuery result((jobject) NULL);
            OBJ_CALL(result = self->object.getExclude());
            return ::org::apache::lucene::search::spans::t_SpanQuery::wrap_Object(result);
          }

          static PyObject *t_SpanNotQuery_getField(t_SpanNotQuery *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getField());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(SpanNotQuery), (PyObject *) self, "getField", args, 2);
          }

          static PyObject *t_SpanNotQuery_getInclude(t_SpanNotQuery *self)
          {
            ::org::apache::lucene::search::spans::SpanQuery result((jobject) NULL);
            OBJ_CALL(result = self->object.getInclude());
            return ::org::apache::lucene::search::spans::t_SpanQuery::wrap_Object(result);
          }

          static PyObject *t_SpanNotQuery_getSpans(t_SpanNotQuery *self, PyObject *args)
          {
            ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
            ::org::apache::lucene::util::Bits a1((jobject) NULL);
            ::java::util::Map a2((jobject) NULL);
            PyTypeObject **p2;
            ::org::apache::lucene::search::spans::Spans result((jobject) NULL);

            if (!parseArgs(args, "kkK", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, ::java::util::Map::initializeClass, &a0, &a1, &a2, &p2, ::java::util::t_Map::parameters_))
            {
              OBJ_CALL(result = self->object.getSpans(a0, a1, a2));
              return ::org::apache::lucene::search::spans::t_Spans::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(SpanNotQuery), (PyObject *) self, "getSpans", args, 2);
          }

          static PyObject *t_SpanNotQuery_hashCode(t_SpanNotQuery *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(SpanNotQuery), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_SpanNotQuery_rewrite(t_SpanNotQuery *self, PyObject *args)
          {
            ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.rewrite(a0));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(SpanNotQuery), (PyObject *) self, "rewrite", args, 2);
          }

          static PyObject *t_SpanNotQuery_toString(t_SpanNotQuery *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = self->object.toString(a0));
              return j2p(result);
            }

            return callSuper(&PY_TYPE(SpanNotQuery), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_SpanNotQuery_get__exclude(t_SpanNotQuery *self, void *data)
          {
            ::org::apache::lucene::search::spans::SpanQuery value((jobject) NULL);
            OBJ_CALL(value = self->object.getExclude());
            return ::org::apache::lucene::search::spans::t_SpanQuery::wrap_Object(value);
          }

          static PyObject *t_SpanNotQuery_get__field(t_SpanNotQuery *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getField());
            return j2p(value);
          }

          static PyObject *t_SpanNotQuery_get__include(t_SpanNotQuery *self, void *data)
          {
            ::org::apache::lucene::search::spans::SpanQuery value((jobject) NULL);
            OBJ_CALL(value = self->object.getInclude());
            return ::org::apache::lucene::search::spans::t_SpanQuery::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/fst/FSTCompletion$Completion.h"
#include "java/lang/String.h"
#include "java/lang/Comparable.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace fst {

            ::java::lang::Class *FSTCompletion$Completion::class$ = NULL;
            jmethodID *FSTCompletion$Completion::mids$ = NULL;
            jfieldID *FSTCompletion$Completion::fids$ = NULL;
            bool FSTCompletion$Completion::live$ = false;

            jclass FSTCompletion$Completion::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/fst/FSTCompletion$Completion");

                mids$ = new jmethodID[max_mid];
                mids$[mid_compareTo_2db77dab] = env->getMethodID(cls, "compareTo", "(Lorg/apache/lucene/search/suggest/fst/FSTCompletion$Completion;)I");
                mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                fids$ = new jfieldID[max_fid];
                fids$[fid_bucket] = env->getFieldID(cls, "bucket", "I");
                fids$[fid_utf8] = env->getFieldID(cls, "utf8", "Lorg/apache/lucene/util/BytesRef;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            jint FSTCompletion$Completion::compareTo(const FSTCompletion$Completion & a0) const
            {
              return env->callIntMethod(this$, mids$[mid_compareTo_2db77dab], a0.this$);
            }

            ::java::lang::String FSTCompletion$Completion::toString() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
            }

            jint FSTCompletion$Completion::_get_bucket() const
            {
              return env->getIntField(this$, fids$[fid_bucket]);
            }

            ::org::apache::lucene::util::BytesRef FSTCompletion$Completion::_get_utf8() const
            {
              return ::org::apache::lucene::util::BytesRef(env->getObjectField(this$, fids$[fid_utf8]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace fst {
            static PyObject *t_FSTCompletion$Completion_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_FSTCompletion$Completion_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_FSTCompletion$Completion_compareTo(t_FSTCompletion$Completion *self, PyObject *arg);
            static PyObject *t_FSTCompletion$Completion_toString(t_FSTCompletion$Completion *self, PyObject *args);
            static PyObject *t_FSTCompletion$Completion_get__bucket(t_FSTCompletion$Completion *self, void *data);
            static PyObject *t_FSTCompletion$Completion_get__utf8(t_FSTCompletion$Completion *self, void *data);

            static PyGetSetDef t_FSTCompletion$Completion__fields_[] = {
              DECLARE_GET_FIELD(t_FSTCompletion$Completion, bucket),
              DECLARE_GET_FIELD(t_FSTCompletion$Completion, utf8),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_FSTCompletion$Completion__methods_[] = {
              DECLARE_METHOD(t_FSTCompletion$Completion, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FSTCompletion$Completion, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FSTCompletion$Completion, compareTo, METH_O),
              DECLARE_METHOD(t_FSTCompletion$Completion, toString, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(FSTCompletion$Completion, t_FSTCompletion$Completion, ::java::lang::Object, FSTCompletion$Completion, abstract_init, 0, 0, t_FSTCompletion$Completion__fields_, 0, 0);

            void t_FSTCompletion$Completion::install(PyObject *module)
            {
              installType(&PY_TYPE(FSTCompletion$Completion), module, "FSTCompletion$Completion", 0);
            }

            void t_FSTCompletion$Completion::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(FSTCompletion$Completion).tp_dict, "class_", make_descriptor(FSTCompletion$Completion::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(FSTCompletion$Completion).tp_dict, "wrapfn_", make_descriptor(t_FSTCompletion$Completion::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(FSTCompletion$Completion).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_FSTCompletion$Completion_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, FSTCompletion$Completion::initializeClass, 1)))
                return NULL;
              return t_FSTCompletion$Completion::wrap_Object(FSTCompletion$Completion(((t_FSTCompletion$Completion *) arg)->object.this$));
            }
            static PyObject *t_FSTCompletion$Completion_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, FSTCompletion$Completion::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_FSTCompletion$Completion_compareTo(t_FSTCompletion$Completion *self, PyObject *arg)
            {
              FSTCompletion$Completion a0((jobject) NULL);
              jint result;

              if (!parseArg(arg, "k", FSTCompletion$Completion::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.compareTo(a0));
                return PyInt_FromLong((long) result);
              }

              PyErr_SetArgsError((PyObject *) self, "compareTo", arg);
              return NULL;
            }

            static PyObject *t_FSTCompletion$Completion_toString(t_FSTCompletion$Completion *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.toString());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(FSTCompletion$Completion), (PyObject *) self, "toString", args, 2);
            }

            static PyObject *t_FSTCompletion$Completion_get__bucket(t_FSTCompletion$Completion *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object._get_bucket());
              return PyInt_FromLong((long) value);
            }

            static PyObject *t_FSTCompletion$Completion_get__utf8(t_FSTCompletion$Completion *self, void *data)
            {
              ::org::apache::lucene::util::BytesRef value((jobject) NULL);
              OBJ_CALL(value = self->object._get_utf8());
              return ::org::apache::lucene::util::t_BytesRef::wrap_Object(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/MultiCollector.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/Scorer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *MultiCollector::class$ = NULL;
        jmethodID *MultiCollector::mids$ = NULL;
        bool MultiCollector::live$ = false;

        jclass MultiCollector::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/MultiCollector");

            mids$ = new jmethodID[max_mid];
            mids$[mid_acceptsDocsOutOfOrder_54c6a16a] = env->getMethodID(cls, "acceptsDocsOutOfOrder", "()Z");
            mids$[mid_collect_39c7bd3c] = env->getMethodID(cls, "collect", "(I)V");
            mids$[mid_setNextReader_a6f59947] = env->getMethodID(cls, "setNextReader", "(Lorg/apache/lucene/index/AtomicReaderContext;)V");
            mids$[mid_setScorer_8be0880c] = env->getMethodID(cls, "setScorer", "(Lorg/apache/lucene/search/Scorer;)V");
            mids$[mid_wrap_e0c58317] = env->getStaticMethodID(cls, "wrap", "([Lorg/apache/lucene/search/Collector;)Lorg/apache/lucene/search/Collector;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jboolean MultiCollector::acceptsDocsOutOfOrder() const
        {
          return env->callBooleanMethod(this$, mids$[mid_acceptsDocsOutOfOrder_54c6a16a]);
        }

        void MultiCollector::collect(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_collect_39c7bd3c], a0);
        }

        void MultiCollector::setNextReader(const ::org::apache::lucene::index::AtomicReaderContext & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setNextReader_a6f59947], a0.this$);
        }

        void MultiCollector::setScorer(const ::org::apache::lucene::search::Scorer & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setScorer_8be0880c], a0.this$);
        }

        ::org::apache::lucene::search::Collector MultiCollector::wrap(const JArray< ::org::apache::lucene::search::Collector > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::Collector(env->callStaticObjectMethod(cls, mids$[mid_wrap_e0c58317], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_MultiCollector_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiCollector_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiCollector_acceptsDocsOutOfOrder(t_MultiCollector *self, PyObject *args);
        static PyObject *t_MultiCollector_collect(t_MultiCollector *self, PyObject *args);
        static PyObject *t_MultiCollector_setNextReader(t_MultiCollector *self, PyObject *args);
        static PyObject *t_MultiCollector_setScorer(t_MultiCollector *self, PyObject *args);
        static PyObject *t_MultiCollector_wrap(PyTypeObject *type, PyObject *arg);
        static int t_MultiCollector_set__nextReader(t_MultiCollector *self, PyObject *arg, void *data);
        static int t_MultiCollector_set__scorer(t_MultiCollector *self, PyObject *arg, void *data);
        static PyGetSetDef t_MultiCollector__fields_[] = {
          DECLARE_SET_FIELD(t_MultiCollector, nextReader),
          DECLARE_SET_FIELD(t_MultiCollector, scorer),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_MultiCollector__methods_[] = {
          DECLARE_METHOD(t_MultiCollector, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiCollector, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiCollector, acceptsDocsOutOfOrder, METH_VARARGS),
          DECLARE_METHOD(t_MultiCollector, collect, METH_VARARGS),
          DECLARE_METHOD(t_MultiCollector, setNextReader, METH_VARARGS),
          DECLARE_METHOD(t_MultiCollector, setScorer, METH_VARARGS),
          DECLARE_METHOD(t_MultiCollector, wrap, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MultiCollector, t_MultiCollector, ::org::apache::lucene::search::Collector, MultiCollector, abstract_init, 0, 0, t_MultiCollector__fields_, 0, 0);

        void t_MultiCollector::install(PyObject *module)
        {
          installType(&PY_TYPE(MultiCollector), module, "MultiCollector", 0);
        }

        void t_MultiCollector::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MultiCollector).tp_dict, "class_", make_descriptor(MultiCollector::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MultiCollector).tp_dict, "wrapfn_", make_descriptor(t_MultiCollector::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MultiCollector).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MultiCollector_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MultiCollector::initializeClass, 1)))
            return NULL;
          return t_MultiCollector::wrap_Object(MultiCollector(((t_MultiCollector *) arg)->object.this$));
        }
        static PyObject *t_MultiCollector_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MultiCollector::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_MultiCollector_acceptsDocsOutOfOrder(t_MultiCollector *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.acceptsDocsOutOfOrder());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(MultiCollector), (PyObject *) self, "acceptsDocsOutOfOrder", args, 2);
        }

        static PyObject *t_MultiCollector_collect(t_MultiCollector *self, PyObject *args)
        {
          jint a0;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(self->object.collect(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(MultiCollector), (PyObject *) self, "collect", args, 2);
        }

        static PyObject *t_MultiCollector_setNextReader(t_MultiCollector *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setNextReader(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(MultiCollector), (PyObject *) self, "setNextReader", args, 2);
        }

        static PyObject *t_MultiCollector_setScorer(t_MultiCollector *self, PyObject *args)
        {
          ::org::apache::lucene::search::Scorer a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::search::Scorer::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setScorer(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(MultiCollector), (PyObject *) self, "setScorer", args, 2);
        }

        static PyObject *t_MultiCollector_wrap(PyTypeObject *type, PyObject *arg)
        {
          JArray< ::org::apache::lucene::search::Collector > a0((jobject) NULL);
          ::org::apache::lucene::search::Collector result((jobject) NULL);

          if (!parseArg(arg, "[k", ::org::apache::lucene::search::Collector::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::search::MultiCollector::wrap(a0));
            return ::org::apache::lucene::search::t_Collector::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "wrap", arg);
          return NULL;
        }

        static int t_MultiCollector_set__nextReader(t_MultiCollector *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::index::AtomicReaderContext value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &value))
            {
              INT_CALL(self->object.setNextReader(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "nextReader", arg);
          return -1;
        }

        static int t_MultiCollector_set__scorer(t_MultiCollector *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::search::Scorer value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::search::Scorer::initializeClass, &value))
            {
              INT_CALL(self->object.setScorer(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "scorer", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/grouping/term/TermAllGroupsCollector.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/Class.h"
#include "java/util/Collection.h"
#include "java/lang/String.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          namespace term {

            ::java::lang::Class *TermAllGroupsCollector::class$ = NULL;
            jmethodID *TermAllGroupsCollector::mids$ = NULL;
            bool TermAllGroupsCollector::live$ = false;

            jclass TermAllGroupsCollector::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/grouping/term/TermAllGroupsCollector");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
                mids$[mid_init$_6e53ccc6] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;I)V");
                mids$[mid_collect_39c7bd3c] = env->getMethodID(cls, "collect", "(I)V");
                mids$[mid_getGroups_2d2d7de4] = env->getMethodID(cls, "getGroups", "()Ljava/util/Collection;");
                mids$[mid_setNextReader_a6f59947] = env->getMethodID(cls, "setNextReader", "(Lorg/apache/lucene/index/AtomicReaderContext;)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            TermAllGroupsCollector::TermAllGroupsCollector(const ::java::lang::String & a0) : ::org::apache::lucene::search::grouping::AbstractAllGroupsCollector(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

            TermAllGroupsCollector::TermAllGroupsCollector(const ::java::lang::String & a0, jint a1) : ::org::apache::lucene::search::grouping::AbstractAllGroupsCollector(env->newObject(initializeClass, &mids$, mid_init$_6e53ccc6, a0.this$, a1)) {}

            void TermAllGroupsCollector::collect(jint a0) const
            {
              env->callVoidMethod(this$, mids$[mid_collect_39c7bd3c], a0);
            }

            ::java::util::Collection TermAllGroupsCollector::getGroups() const
            {
              return ::java::util::Collection(env->callObjectMethod(this$, mids$[mid_getGroups_2d2d7de4]));
            }

            void TermAllGroupsCollector::setNextReader(const ::org::apache::lucene::index::AtomicReaderContext & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setNextReader_a6f59947], a0.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          namespace term {
            static PyObject *t_TermAllGroupsCollector_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_TermAllGroupsCollector_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_TermAllGroupsCollector_of_(t_TermAllGroupsCollector *self, PyObject *args);
            static int t_TermAllGroupsCollector_init_(t_TermAllGroupsCollector *self, PyObject *args, PyObject *kwds);
            static PyObject *t_TermAllGroupsCollector_collect(t_TermAllGroupsCollector *self, PyObject *args);
            static PyObject *t_TermAllGroupsCollector_getGroups(t_TermAllGroupsCollector *self, PyObject *args);
            static PyObject *t_TermAllGroupsCollector_setNextReader(t_TermAllGroupsCollector *self, PyObject *args);
            static PyObject *t_TermAllGroupsCollector_get__groups(t_TermAllGroupsCollector *self, void *data);
            static int t_TermAllGroupsCollector_set__nextReader(t_TermAllGroupsCollector *self, PyObject *arg, void *data);
            static PyObject *t_TermAllGroupsCollector_get__parameters_(t_TermAllGroupsCollector *self, void *data);
            static PyGetSetDef t_TermAllGroupsCollector__fields_[] = {
              DECLARE_GET_FIELD(t_TermAllGroupsCollector, groups),
              DECLARE_SET_FIELD(t_TermAllGroupsCollector, nextReader),
              DECLARE_GET_FIELD(t_TermAllGroupsCollector, parameters_),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_TermAllGroupsCollector__methods_[] = {
              DECLARE_METHOD(t_TermAllGroupsCollector, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TermAllGroupsCollector, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TermAllGroupsCollector, of_, METH_VARARGS),
              DECLARE_METHOD(t_TermAllGroupsCollector, collect, METH_VARARGS),
              DECLARE_METHOD(t_TermAllGroupsCollector, getGroups, METH_VARARGS),
              DECLARE_METHOD(t_TermAllGroupsCollector, setNextReader, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(TermAllGroupsCollector, t_TermAllGroupsCollector, ::org::apache::lucene::search::grouping::AbstractAllGroupsCollector, TermAllGroupsCollector, t_TermAllGroupsCollector_init_, 0, 0, t_TermAllGroupsCollector__fields_, 0, 0);
            PyObject *t_TermAllGroupsCollector::wrap_Object(const TermAllGroupsCollector& object, PyTypeObject *p0)
            {
              PyObject *obj = t_TermAllGroupsCollector::wrap_Object(object);
              if (obj != NULL && obj != Py_None)
              {
                t_TermAllGroupsCollector *self = (t_TermAllGroupsCollector *) obj;
                self->parameters[0] = p0;
              }
              return obj;
            }

            PyObject *t_TermAllGroupsCollector::wrap_jobject(const jobject& object, PyTypeObject *p0)
            {
              PyObject *obj = t_TermAllGroupsCollector::wrap_jobject(object);
              if (obj != NULL && obj != Py_None)
              {
                t_TermAllGroupsCollector *self = (t_TermAllGroupsCollector *) obj;
                self->parameters[0] = p0;
              }
              return obj;
            }

            void t_TermAllGroupsCollector::install(PyObject *module)
            {
              installType(&PY_TYPE(TermAllGroupsCollector), module, "TermAllGroupsCollector", 0);
            }

            void t_TermAllGroupsCollector::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(TermAllGroupsCollector).tp_dict, "class_", make_descriptor(TermAllGroupsCollector::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(TermAllGroupsCollector).tp_dict, "wrapfn_", make_descriptor(t_TermAllGroupsCollector::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(TermAllGroupsCollector).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_TermAllGroupsCollector_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, TermAllGroupsCollector::initializeClass, 1)))
                return NULL;
              return t_TermAllGroupsCollector::wrap_Object(TermAllGroupsCollector(((t_TermAllGroupsCollector *) arg)->object.this$));
            }
            static PyObject *t_TermAllGroupsCollector_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, TermAllGroupsCollector::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_TermAllGroupsCollector_of_(t_TermAllGroupsCollector *self, PyObject *args)
            {
              if (!parseArg(args, "T", 1, &(self->parameters)))
                Py_RETURN_SELF;
              return PyErr_SetArgsError((PyObject *) self, "of_", args);
            }

            static int t_TermAllGroupsCollector_init_(t_TermAllGroupsCollector *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 1:
                {
                  ::java::lang::String a0((jobject) NULL);
                  TermAllGroupsCollector object((jobject) NULL);

                  if (!parseArgs(args, "s", &a0))
                  {
                    INT_CALL(object = TermAllGroupsCollector(a0));
                    self->object = object;
                    self->parameters[0] = &::org::apache::lucene::util::PY_TYPE(BytesRef);
                    break;
                  }
                }
                goto err;
               case 2:
                {
                  ::java::lang::String a0((jobject) NULL);
                  jint a1;
                  TermAllGroupsCollector object((jobject) NULL);

                  if (!parseArgs(args, "sI", &a0, &a1))
                  {
                    INT_CALL(object = TermAllGroupsCollector(a0, a1));
                    self->object = object;
                    self->parameters[0] = &::org::apache::lucene::util::PY_TYPE(BytesRef);
                    break;
                  }
                }
               default:
               err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_TermAllGroupsCollector_collect(t_TermAllGroupsCollector *self, PyObject *args)
            {
              jint a0;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(self->object.collect(a0));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(TermAllGroupsCollector), (PyObject *) self, "collect", args, 2);
            }

            static PyObject *t_TermAllGroupsCollector_getGroups(t_TermAllGroupsCollector *self, PyObject *args)
            {
              ::java::util::Collection result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getGroups());
                return ::java::util::t_Collection::wrap_Object(result, &::org::apache::lucene::util::PY_TYPE(BytesRef));
              }

              return callSuper(&PY_TYPE(TermAllGroupsCollector), (PyObject *) self, "getGroups", args, 2);
            }

            static PyObject *t_TermAllGroupsCollector_setNextReader(t_TermAllGroupsCollector *self, PyObject *args)
            {
              ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0))
              {
                OBJ_CALL(self->object.setNextReader(a0));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(TermAllGroupsCollector), (PyObject *) self, "setNextReader", args, 2);
            }
            static PyObject *t_TermAllGroupsCollector_get__parameters_(t_TermAllGroupsCollector *self, void *data)
            {
              return typeParameters(self->parameters, sizeof(self->parameters));
            }

            static PyObject *t_TermAllGroupsCollector_get__groups(t_TermAllGroupsCollector *self, void *data)
            {
              ::java::util::Collection value((jobject) NULL);
              OBJ_CALL(value = self->object.getGroups());
              return ::java::util::t_Collection::wrap_Object(value);
            }

            static int t_TermAllGroupsCollector_set__nextReader(t_TermAllGroupsCollector *self, PyObject *arg, void *data)
            {
              {
                ::org::apache::lucene::index::AtomicReaderContext value((jobject) NULL);
                if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &value))
                {
                  INT_CALL(self->object.setNextReader(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "nextReader", arg);
              return -1;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/highlight/GradientFormatter.h"
#include "org/apache/lucene/search/highlight/Formatter.h"
#include "org/apache/lucene/search/highlight/TokenGroup.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {

          ::java::lang::Class *GradientFormatter::class$ = NULL;
          jmethodID *GradientFormatter::mids$ = NULL;
          bool GradientFormatter::live$ = false;

          jclass GradientFormatter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/highlight/GradientFormatter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_ecfb0f33] = env->getMethodID(cls, "<init>", "(FLjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V");
              mids$[mid_hexToInt_5fdc3f57] = env->getStaticMethodID(cls, "hexToInt", "(Ljava/lang/String;)I");
              mids$[mid_highlightTerm_8838cc58] = env->getMethodID(cls, "highlightTerm", "(Ljava/lang/String;Lorg/apache/lucene/search/highlight/TokenGroup;)Ljava/lang/String;");
              mids$[mid_getForegroundColorString_5ded254a] = env->getMethodID(cls, "getForegroundColorString", "(F)Ljava/lang/String;");
              mids$[mid_getBackgroundColorString_5ded254a] = env->getMethodID(cls, "getBackgroundColorString", "(F)Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          GradientFormatter::GradientFormatter(jfloat a0, const ::java::lang::String & a1, const ::java::lang::String & a2, const ::java::lang::String & a3, const ::java::lang::String & a4) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_ecfb0f33, a0, a1.this$, a2.this$, a3.this$, a4.this$)) {}

          jint GradientFormatter::hexToInt(const ::java::lang::String & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticIntMethod(cls, mids$[mid_hexToInt_5fdc3f57], a0.this$);
          }

          ::java::lang::String GradientFormatter::highlightTerm(const ::java::lang::String & a0, const ::org::apache::lucene::search::highlight::TokenGroup & a1) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_highlightTerm_8838cc58], a0.this$, a1.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {
          static PyObject *t_GradientFormatter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GradientFormatter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_GradientFormatter_init_(t_GradientFormatter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_GradientFormatter_hexToInt(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GradientFormatter_highlightTerm(t_GradientFormatter *self, PyObject *args);

          static PyMethodDef t_GradientFormatter__methods_[] = {
            DECLARE_METHOD(t_GradientFormatter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GradientFormatter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GradientFormatter, hexToInt, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GradientFormatter, highlightTerm, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(GradientFormatter, t_GradientFormatter, ::java::lang::Object, GradientFormatter, t_GradientFormatter_init_, 0, 0, 0, 0, 0);

          void t_GradientFormatter::install(PyObject *module)
          {
            installType(&PY_TYPE(GradientFormatter), module, "GradientFormatter", 0);
          }

          void t_GradientFormatter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(GradientFormatter).tp_dict, "class_", make_descriptor(GradientFormatter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(GradientFormatter).tp_dict, "wrapfn_", make_descriptor(t_GradientFormatter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(GradientFormatter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_GradientFormatter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GradientFormatter::initializeClass, 1)))
              return NULL;
            return t_GradientFormatter::wrap_Object(GradientFormatter(((t_GradientFormatter *) arg)->object.this$));
          }
          static PyObject *t_GradientFormatter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GradientFormatter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_GradientFormatter_init_(t_GradientFormatter *self, PyObject *args, PyObject *kwds)
          {
            jfloat a0;
            ::java::lang::String a1((jobject) NULL);
            ::java::lang::String a2((jobject) NULL);
            ::java::lang::String a3((jobject) NULL);
            ::java::lang::String a4((jobject) NULL);
            GradientFormatter object((jobject) NULL);

            if (!parseArgs(args, "Fssss", &a0, &a1, &a2, &a3, &a4))
            {
              INT_CALL(object = GradientFormatter(a0, a1, a2, a3, a4));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_GradientFormatter_hexToInt(PyTypeObject *type, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            jint result;

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::search::highlight::GradientFormatter::hexToInt(a0));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError(type, "hexToInt", arg);
            return NULL;
          }

          static PyObject *t_GradientFormatter_highlightTerm(t_GradientFormatter *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::search::highlight::TokenGroup a1((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "sk", ::org::apache::lucene::search::highlight::TokenGroup::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.highlightTerm(a0, a1));
              return j2p(result);
            }

            PyErr_SetArgsError((PyObject *) self, "highlightTerm", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/FacetsConfig$DimConfig.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {

        ::java::lang::Class *FacetsConfig$DimConfig::class$ = NULL;
        jmethodID *FacetsConfig$DimConfig::mids$ = NULL;
        jfieldID *FacetsConfig$DimConfig::fids$ = NULL;
        bool FacetsConfig$DimConfig::live$ = false;

        jclass FacetsConfig$DimConfig::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/facet/FacetsConfig$DimConfig");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

            fids$ = new jfieldID[max_fid];
            fids$[fid_hierarchical] = env->getFieldID(cls, "hierarchical", "Z");
            fids$[fid_indexFieldName] = env->getFieldID(cls, "indexFieldName", "Ljava/lang/String;");
            fids$[fid_multiValued] = env->getFieldID(cls, "multiValued", "Z");
            fids$[fid_requireDimCount] = env->getFieldID(cls, "requireDimCount", "Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FacetsConfig$DimConfig::FacetsConfig$DimConfig() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jboolean FacetsConfig$DimConfig::_get_hierarchical() const
        {
          return env->getBooleanField(this$, fids$[fid_hierarchical]);
        }

        void FacetsConfig$DimConfig::_set_hierarchical(jboolean a0) const
        {
          env->setBooleanField(this$, fids$[fid_hierarchical], a0);
        }

        ::java::lang::String FacetsConfig$DimConfig::_get_indexFieldName() const
        {
          return ::java::lang::String(env->getObjectField(this$, fids$[fid_indexFieldName]));
        }

        void FacetsConfig$DimConfig::_set_indexFieldName(const ::java::lang::String & a0) const
        {
          env->setObjectField(this$, fids$[fid_indexFieldName], a0.this$);
        }

        jboolean FacetsConfig$DimConfig::_get_multiValued() const
        {
          return env->getBooleanField(this$, fids$[fid_multiValued]);
        }

        void FacetsConfig$DimConfig::_set_multiValued(jboolean a0) const
        {
          env->setBooleanField(this$, fids$[fid_multiValued], a0);
        }

        jboolean FacetsConfig$DimConfig::_get_requireDimCount() const
        {
          return env->getBooleanField(this$, fids$[fid_requireDimCount]);
        }

        void FacetsConfig$DimConfig::_set_requireDimCount(jboolean a0) const
        {
          env->setBooleanField(this$, fids$[fid_requireDimCount], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        static PyObject *t_FacetsConfig$DimConfig_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FacetsConfig$DimConfig_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FacetsConfig$DimConfig_init_(t_FacetsConfig$DimConfig *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FacetsConfig$DimConfig_get__hierarchical(t_FacetsConfig$DimConfig *self, void *data);
        static int t_FacetsConfig$DimConfig_set__hierarchical(t_FacetsConfig$DimConfig *self, PyObject *arg, void *data);
        static PyObject *t_FacetsConfig$DimConfig_get__indexFieldName(t_FacetsConfig$DimConfig *self, void *data);
        static int t_FacetsConfig$DimConfig_set__indexFieldName(t_FacetsConfig$DimConfig *self, PyObject *arg, void *data);
        static PyObject *t_FacetsConfig$DimConfig_get__multiValued(t_FacetsConfig$DimConfig *self, void *data);
        static int t_FacetsConfig$DimConfig_set__multiValued(t_FacetsConfig$DimConfig *self, PyObject *arg, void *data);
        static PyObject *t_FacetsConfig$DimConfig_get__requireDimCount(t_FacetsConfig$DimConfig *self, void *data);
        static int t_FacetsConfig$DimConfig_set__requireDimCount(t_FacetsConfig$DimConfig *self, PyObject *arg, void *data);

        static PyGetSetDef t_FacetsConfig$DimConfig__fields_[] = {
          DECLARE_GETSET_FIELD(t_FacetsConfig$DimConfig, hierarchical),
          DECLARE_GETSET_FIELD(t_FacetsConfig$DimConfig, indexFieldName),
          DECLARE_GETSET_FIELD(t_FacetsConfig$DimConfig, multiValued),
          DECLARE_GETSET_FIELD(t_FacetsConfig$DimConfig, requireDimCount),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FacetsConfig$DimConfig__methods_[] = {
          DECLARE_METHOD(t_FacetsConfig$DimConfig, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FacetsConfig$DimConfig, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FacetsConfig$DimConfig, t_FacetsConfig$DimConfig, ::java::lang::Object, FacetsConfig$DimConfig, t_FacetsConfig$DimConfig_init_, 0, 0, t_FacetsConfig$DimConfig__fields_, 0, 0);

        void t_FacetsConfig$DimConfig::install(PyObject *module)
        {
          installType(&PY_TYPE(FacetsConfig$DimConfig), module, "FacetsConfig$DimConfig", 0);
        }

        void t_FacetsConfig$DimConfig::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FacetsConfig$DimConfig).tp_dict, "class_", make_descriptor(FacetsConfig$DimConfig::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FacetsConfig$DimConfig).tp_dict, "wrapfn_", make_descriptor(t_FacetsConfig$DimConfig::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FacetsConfig$DimConfig).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FacetsConfig$DimConfig_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FacetsConfig$DimConfig::initializeClass, 1)))
            return NULL;
          return t_FacetsConfig$DimConfig::wrap_Object(FacetsConfig$DimConfig(((t_FacetsConfig$DimConfig *) arg)->object.this$));
        }
        static PyObject *t_FacetsConfig$DimConfig_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FacetsConfig$DimConfig::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FacetsConfig$DimConfig_init_(t_FacetsConfig$DimConfig *self, PyObject *args, PyObject *kwds)
        {
          FacetsConfig$DimConfig object((jobject) NULL);

          INT_CALL(object = FacetsConfig$DimConfig());
          self->object = object;

          return 0;
        }

        static PyObject *t_FacetsConfig$DimConfig_get__hierarchical(t_FacetsConfig$DimConfig *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object._get_hierarchical());
          Py_RETURN_BOOL(value);
        }
        static int t_FacetsConfig$DimConfig_set__hierarchical(t_FacetsConfig$DimConfig *self, PyObject *arg, void *data)
        {
          jboolean value;
          if (!parseArg(arg, "Z", &value))
          {
            INT_CALL(self->object._set_hierarchical(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "hierarchical", arg);
          return -1;
        }

        static PyObject *t_FacetsConfig$DimConfig_get__indexFieldName(t_FacetsConfig$DimConfig *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object._get_indexFieldName());
          return j2p(value);
        }
        static int t_FacetsConfig$DimConfig_set__indexFieldName(t_FacetsConfig$DimConfig *self, PyObject *arg, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          if (!parseArg(arg, "s", &value))
          {
            INT_CALL(self->object._set_indexFieldName(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "indexFieldName", arg);
          return -1;
        }

        static PyObject *t_FacetsConfig$DimConfig_get__multiValued(t_FacetsConfig$DimConfig *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object._get_multiValued());
          Py_RETURN_BOOL(value);
        }
        static int t_FacetsConfig$DimConfig_set__multiValued(t_FacetsConfig$DimConfig *self, PyObject *arg, void *data)
        {
          jboolean value;
          if (!parseArg(arg, "Z", &value))
          {
            INT_CALL(self->object._set_multiValued(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "multiValued", arg);
          return -1;
        }

        static PyObject *t_FacetsConfig$DimConfig_get__requireDimCount(t_FacetsConfig$DimConfig *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object._get_requireDimCount());
          Py_RETURN_BOOL(value);
        }
        static int t_FacetsConfig$DimConfig_set__requireDimCount(t_FacetsConfig$DimConfig *self, PyObject *arg, void *data)
        {
          jboolean value;
          if (!parseArg(arg, "Z", &value))
          {
            INT_CALL(self->object._set_requireDimCount(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "requireDimCount", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/ControlledRealTimeReopenThread.h"
#include "org/apache/lucene/search/ReferenceManager.h"
#include "org/apache/lucene/index/TrackingIndexWriter.h"
#include "java/io/Closeable.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *ControlledRealTimeReopenThread::class$ = NULL;
        jmethodID *ControlledRealTimeReopenThread::mids$ = NULL;
        bool ControlledRealTimeReopenThread::live$ = false;

        jclass ControlledRealTimeReopenThread::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/ControlledRealTimeReopenThread");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_a0c538a8] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/TrackingIndexWriter;Lorg/apache/lucene/search/ReferenceManager;DD)V");
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_run_54c6a166] = env->getMethodID(cls, "run", "()V");
            mids$[mid_waitForGeneration_0ee6df2f] = env->getMethodID(cls, "waitForGeneration", "(J)V");
            mids$[mid_waitForGeneration_25d05c83] = env->getMethodID(cls, "waitForGeneration", "(JI)Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ControlledRealTimeReopenThread::ControlledRealTimeReopenThread(const ::org::apache::lucene::index::TrackingIndexWriter & a0, const ::org::apache::lucene::search::ReferenceManager & a1, jdouble a2, jdouble a3) : ::java::lang::Thread(env->newObject(initializeClass, &mids$, mid_init$_a0c538a8, a0.this$, a1.this$, a2, a3)) {}

        void ControlledRealTimeReopenThread::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        void ControlledRealTimeReopenThread::run() const
        {
          env->callVoidMethod(this$, mids$[mid_run_54c6a166]);
        }

        void ControlledRealTimeReopenThread::waitForGeneration(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_waitForGeneration_0ee6df2f], a0);
        }

        jboolean ControlledRealTimeReopenThread::waitForGeneration(jlong a0, jint a1) const
        {
          return env->callBooleanMethod(this$, mids$[mid_waitForGeneration_25d05c83], a0, a1);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_ControlledRealTimeReopenThread_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ControlledRealTimeReopenThread_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ControlledRealTimeReopenThread_of_(t_ControlledRealTimeReopenThread *self, PyObject *args);
        static int t_ControlledRealTimeReopenThread_init_(t_ControlledRealTimeReopenThread *self, PyObject *args, PyObject *kwds);
        static PyObject *t_ControlledRealTimeReopenThread_close(t_ControlledRealTimeReopenThread *self);
        static PyObject *t_ControlledRealTimeReopenThread_run(t_ControlledRealTimeReopenThread *self, PyObject *args);
        static PyObject *t_ControlledRealTimeReopenThread_waitForGeneration(t_ControlledRealTimeReopenThread *self, PyObject *args);
        static PyObject *t_ControlledRealTimeReopenThread_get__parameters_(t_ControlledRealTimeReopenThread *self, void *data);
        static PyGetSetDef t_ControlledRealTimeReopenThread__fields_[] = {
          DECLARE_GET_FIELD(t_ControlledRealTimeReopenThread, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_ControlledRealTimeReopenThread__methods_[] = {
          DECLARE_METHOD(t_ControlledRealTimeReopenThread, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ControlledRealTimeReopenThread, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ControlledRealTimeReopenThread, of_, METH_VARARGS),
          DECLARE_METHOD(t_ControlledRealTimeReopenThread, close, METH_NOARGS),
          DECLARE_METHOD(t_ControlledRealTimeReopenThread, run, METH_VARARGS),
          DECLARE_METHOD(t_ControlledRealTimeReopenThread, waitForGeneration, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(ControlledRealTimeReopenThread, t_ControlledRealTimeReopenThread, ::java::lang::Thread, ControlledRealTimeReopenThread, t_ControlledRealTimeReopenThread_init_, 0, 0, t_ControlledRealTimeReopenThread__fields_, 0, 0);
        PyObject *t_ControlledRealTimeReopenThread::wrap_Object(const ControlledRealTimeReopenThread& object, PyTypeObject *p0)
        {
          PyObject *obj = t_ControlledRealTimeReopenThread::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_ControlledRealTimeReopenThread *self = (t_ControlledRealTimeReopenThread *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_ControlledRealTimeReopenThread::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_ControlledRealTimeReopenThread::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_ControlledRealTimeReopenThread *self = (t_ControlledRealTimeReopenThread *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_ControlledRealTimeReopenThread::install(PyObject *module)
        {
          installType(&PY_TYPE(ControlledRealTimeReopenThread), module, "ControlledRealTimeReopenThread", 0);
        }

        void t_ControlledRealTimeReopenThread::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(ControlledRealTimeReopenThread).tp_dict, "class_", make_descriptor(ControlledRealTimeReopenThread::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(ControlledRealTimeReopenThread).tp_dict, "wrapfn_", make_descriptor(t_ControlledRealTimeReopenThread::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(ControlledRealTimeReopenThread).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_ControlledRealTimeReopenThread_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, ControlledRealTimeReopenThread::initializeClass, 1)))
            return NULL;
          return t_ControlledRealTimeReopenThread::wrap_Object(ControlledRealTimeReopenThread(((t_ControlledRealTimeReopenThread *) arg)->object.this$));
        }
        static PyObject *t_ControlledRealTimeReopenThread_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, ControlledRealTimeReopenThread::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_ControlledRealTimeReopenThread_of_(t_ControlledRealTimeReopenThread *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_ControlledRealTimeReopenThread_init_(t_ControlledRealTimeReopenThread *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::index::TrackingIndexWriter a0((jobject) NULL);
          ::org::apache::lucene::search::ReferenceManager a1((jobject) NULL);
          PyTypeObject **p1;
          jdouble a2;
          jdouble a3;
          ControlledRealTimeReopenThread object((jobject) NULL);

          if (!parseArgs(args, "kKDD", ::org::apache::lucene::index::TrackingIndexWriter::initializeClass, ::org::apache::lucene::search::ReferenceManager::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::search::t_ReferenceManager::parameters_, &a2, &a3))
          {
            INT_CALL(object = ControlledRealTimeReopenThread(a0, a1, a2, a3));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_ControlledRealTimeReopenThread_close(t_ControlledRealTimeReopenThread *self)
        {
          OBJ_CALL(self->object.close());
          Py_RETURN_NONE;
        }

        static PyObject *t_ControlledRealTimeReopenThread_run(t_ControlledRealTimeReopenThread *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.run());
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(ControlledRealTimeReopenThread), (PyObject *) self, "run", args, 2);
        }

        static PyObject *t_ControlledRealTimeReopenThread_waitForGeneration(t_ControlledRealTimeReopenThread *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.waitForGeneration(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 2:
            {
              jlong a0;
              jint a1;
              jboolean result;

              if (!parseArgs(args, "JI", &a0, &a1))
              {
                OBJ_CALL(result = self->object.waitForGeneration(a0, a1));
                Py_RETURN_BOOL(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "waitForGeneration", args);
          return NULL;
        }
        static PyObject *t_ControlledRealTimeReopenThread_get__parameters_(t_ControlledRealTimeReopenThread *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/BooleanFilter.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/util/List.h"
#include "java/util/Iterator.h"
#include "java/lang/Class.h"
#include "java/lang/Iterable.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/BooleanClause$Occur.h"
#include "org/apache/lucene/queries/FilterClause.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/search/DocIdSet.h"
#include "org/apache/lucene/util/Bits.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {

        ::java::lang::Class *BooleanFilter::class$ = NULL;
        jmethodID *BooleanFilter::mids$ = NULL;
        bool BooleanFilter::live$ = false;

        jclass BooleanFilter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/queries/BooleanFilter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_add_ef4f412a] = env->getMethodID(cls, "add", "(Lorg/apache/lucene/queries/FilterClause;)V");
            mids$[mid_add_7373f548] = env->getMethodID(cls, "add", "(Lorg/apache/lucene/search/Filter;Lorg/apache/lucene/search/BooleanClause$Occur;)V");
            mids$[mid_clauses_87851566] = env->getMethodID(cls, "clauses", "()Ljava/util/List;");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_getDocIdSet_ccce0897] = env->getMethodID(cls, "getDocIdSet", "(Lorg/apache/lucene/index/AtomicReaderContext;Lorg/apache/lucene/util/Bits;)Lorg/apache/lucene/search/DocIdSet;");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_iterator_40858c90] = env->getMethodID(cls, "iterator", "()Ljava/util/Iterator;");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        BooleanFilter::BooleanFilter() : ::org::apache::lucene::search::Filter(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void BooleanFilter::add(const ::org::apache::lucene::queries::FilterClause & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_add_ef4f412a], a0.this$);
        }

        void BooleanFilter::add(const ::org::apache::lucene::search::Filter & a0, const ::org::apache::lucene::search::BooleanClause$Occur & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_add_7373f548], a0.this$, a1.this$);
        }

        ::java::util::List BooleanFilter::clauses() const
        {
          return ::java::util::List(env->callObjectMethod(this$, mids$[mid_clauses_87851566]));
        }

        jboolean BooleanFilter::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        ::org::apache::lucene::search::DocIdSet BooleanFilter::getDocIdSet(const ::org::apache::lucene::index::AtomicReaderContext & a0, const ::org::apache::lucene::util::Bits & a1) const
        {
          return ::org::apache::lucene::search::DocIdSet(env->callObjectMethod(this$, mids$[mid_getDocIdSet_ccce0897], a0.this$, a1.this$));
        }

        jint BooleanFilter::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        ::java::util::Iterator BooleanFilter::iterator() const
        {
          return ::java::util::Iterator(env->callObjectMethod(this$, mids$[mid_iterator_40858c90]));
        }

        ::java::lang::String BooleanFilter::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        static PyObject *t_BooleanFilter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BooleanFilter_instance_(PyTypeObject *type, PyObject *arg);
        static int t_BooleanFilter_init_(t_BooleanFilter *self, PyObject *args, PyObject *kwds);
        static PyObject *t_BooleanFilter_add(t_BooleanFilter *self, PyObject *args);
        static PyObject *t_BooleanFilter_clauses(t_BooleanFilter *self);
        static PyObject *t_BooleanFilter_equals(t_BooleanFilter *self, PyObject *args);
        static PyObject *t_BooleanFilter_getDocIdSet(t_BooleanFilter *self, PyObject *args);
        static PyObject *t_BooleanFilter_hashCode(t_BooleanFilter *self, PyObject *args);
        static PyObject *t_BooleanFilter_iterator(t_BooleanFilter *self);
        static PyObject *t_BooleanFilter_toString(t_BooleanFilter *self, PyObject *args);

        static PyMethodDef t_BooleanFilter__methods_[] = {
          DECLARE_METHOD(t_BooleanFilter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BooleanFilter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BooleanFilter, add, METH_VARARGS),
          DECLARE_METHOD(t_BooleanFilter, clauses, METH_NOARGS),
          DECLARE_METHOD(t_BooleanFilter, equals, METH_VARARGS),
          DECLARE_METHOD(t_BooleanFilter, getDocIdSet, METH_VARARGS),
          DECLARE_METHOD(t_BooleanFilter, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_BooleanFilter, iterator, METH_NOARGS),
          DECLARE_METHOD(t_BooleanFilter, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(BooleanFilter, t_BooleanFilter, ::org::apache::lucene::search::Filter, BooleanFilter, t_BooleanFilter_init_, ((PyObject *(*)(t_BooleanFilter *)) get_iterator< t_BooleanFilter >), 0, 0, 0, 0);

        void t_BooleanFilter::install(PyObject *module)
        {
          installType(&PY_TYPE(BooleanFilter), module, "BooleanFilter", 0);
        }

        void t_BooleanFilter::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(BooleanFilter).tp_dict, "class_", make_descriptor(BooleanFilter::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(BooleanFilter).tp_dict, "wrapfn_", make_descriptor(t_BooleanFilter::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(BooleanFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_BooleanFilter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, BooleanFilter::initializeClass, 1)))
            return NULL;
          return t_BooleanFilter::wrap_Object(BooleanFilter(((t_BooleanFilter *) arg)->object.this$));
        }
        static PyObject *t_BooleanFilter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, BooleanFilter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_BooleanFilter_init_(t_BooleanFilter *self, PyObject *args, PyObject *kwds)
        {
          BooleanFilter object((jobject) NULL);

          INT_CALL(object = BooleanFilter());
          self->object = object;

          return 0;
        }

        static PyObject *t_BooleanFilter_add(t_BooleanFilter *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::queries::FilterClause a0((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::queries::FilterClause::initializeClass, &a0))
              {
                OBJ_CALL(self->object.add(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 2:
            {
              ::org::apache::lucene::search::Filter a0((jobject) NULL);
              ::org::apache::lucene::search::BooleanClause$Occur a1((jobject) NULL);
              PyTypeObject **p1;

              if (!parseArgs(args, "kK", ::org::apache::lucene::search::Filter::initializeClass, ::org::apache::lucene::search::BooleanClause$Occur::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::search::t_BooleanClause$Occur::parameters_))
              {
                OBJ_CALL(self->object.add(a0, a1));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "add", args);
          return NULL;
        }

        static PyObject *t_BooleanFilter_clauses(t_BooleanFilter *self)
        {
          ::java::util::List result((jobject) NULL);
          OBJ_CALL(result = self->object.clauses());
          return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::queries::PY_TYPE(FilterClause));
        }

        static PyObject *t_BooleanFilter_equals(t_BooleanFilter *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(BooleanFilter), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_BooleanFilter_getDocIdSet(t_BooleanFilter *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
          ::org::apache::lucene::util::Bits a1((jobject) NULL);
          ::org::apache::lucene::search::DocIdSet result((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.getDocIdSet(a0, a1));
            return ::org::apache::lucene::search::t_DocIdSet::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(BooleanFilter), (PyObject *) self, "getDocIdSet", args, 2);
        }

        static PyObject *t_BooleanFilter_hashCode(t_BooleanFilter *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(BooleanFilter), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_BooleanFilter_iterator(t_BooleanFilter *self)
        {
          ::java::util::Iterator result((jobject) NULL);
          OBJ_CALL(result = self->object.iterator());
          return ::java::util::t_Iterator::wrap_Object(result, &::org::apache::lucene::queries::PY_TYPE(FilterClause));
        }

        static PyObject *t_BooleanFilter_toString(t_BooleanFilter *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(BooleanFilter), (PyObject *) self, "toString", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/charfilter/MappingCharFilter.h"
#include "java/io/IOException.h"
#include "java/io/Reader.h"
#include "org/apache/lucene/analysis/charfilter/NormalizeCharMap.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace charfilter {

          ::java::lang::Class *MappingCharFilter::class$ = NULL;
          jmethodID *MappingCharFilter::mids$ = NULL;
          bool MappingCharFilter::live$ = false;

          jclass MappingCharFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/charfilter/MappingCharFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_0fc966df] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/charfilter/NormalizeCharMap;Ljava/io/Reader;)V");
              mids$[mid_read_54c6a179] = env->getMethodID(cls, "read", "()I");
              mids$[mid_read_6f0bb349] = env->getMethodID(cls, "read", "([CII)I");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          MappingCharFilter::MappingCharFilter(const ::org::apache::lucene::analysis::charfilter::NormalizeCharMap & a0, const ::java::io::Reader & a1) : ::org::apache::lucene::analysis::charfilter::BaseCharFilter(env->newObject(initializeClass, &mids$, mid_init$_0fc966df, a0.this$, a1.this$)) {}

          jint MappingCharFilter::read() const
          {
            return env->callIntMethod(this$, mids$[mid_read_54c6a179]);
          }

          jint MappingCharFilter::read(const JArray< jchar > & a0, jint a1, jint a2) const
          {
            return env->callIntMethod(this$, mids$[mid_read_6f0bb349], a0.this$, a1, a2);
          }

          void MappingCharFilter::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace charfilter {
          static PyObject *t_MappingCharFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_MappingCharFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_MappingCharFilter_init_(t_MappingCharFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_MappingCharFilter_read(t_MappingCharFilter *self, PyObject *args);
          static PyObject *t_MappingCharFilter_reset(t_MappingCharFilter *self, PyObject *args);

          static PyMethodDef t_MappingCharFilter__methods_[] = {
            DECLARE_METHOD(t_MappingCharFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MappingCharFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MappingCharFilter, read, METH_VARARGS),
            DECLARE_METHOD(t_MappingCharFilter, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(MappingCharFilter, t_MappingCharFilter, ::org::apache::lucene::analysis::charfilter::BaseCharFilter, MappingCharFilter, t_MappingCharFilter_init_, 0, 0, 0, 0, 0);

          void t_MappingCharFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(MappingCharFilter), module, "MappingCharFilter", 0);
          }

          void t_MappingCharFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(MappingCharFilter).tp_dict, "class_", make_descriptor(MappingCharFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(MappingCharFilter).tp_dict, "wrapfn_", make_descriptor(t_MappingCharFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(MappingCharFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_MappingCharFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, MappingCharFilter::initializeClass, 1)))
              return NULL;
            return t_MappingCharFilter::wrap_Object(MappingCharFilter(((t_MappingCharFilter *) arg)->object.this$));
          }
          static PyObject *t_MappingCharFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, MappingCharFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_MappingCharFilter_init_(t_MappingCharFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::charfilter::NormalizeCharMap a0((jobject) NULL);
            ::java::io::Reader a1((jobject) NULL);
            MappingCharFilter object((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::analysis::charfilter::NormalizeCharMap::initializeClass, ::java::io::Reader::initializeClass, &a0, &a1))
            {
              INT_CALL(object = MappingCharFilter(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_MappingCharFilter_read(t_MappingCharFilter *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                jint result;
                OBJ_CALL(result = self->object.read());
                return PyInt_FromLong((long) result);
              }
              break;
             case 3:
              {
                JArray< jchar > a0((jobject) NULL);
                jint a1;
                jint a2;
                jint result;

                if (!parseArgs(args, "[CII", &a0, &a1, &a2))
                {
                  OBJ_CALL(result = self->object.read(a0, a1, a2));
                  return PyInt_FromLong((long) result);
                }
              }
            }

            return callSuper(&PY_TYPE(MappingCharFilter), (PyObject *) self, "read", args, 2);
          }

          static PyObject *t_MappingCharFilter_reset(t_MappingCharFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(MappingCharFilter), (PyObject *) self, "reset", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/th/ThaiTokenizerFactory.h"
#include "java/lang/Class.h"
#include "java/io/Reader.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "org/apache/lucene/analysis/Tokenizer.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace th {

          ::java::lang::Class *ThaiTokenizerFactory::class$ = NULL;
          jmethodID *ThaiTokenizerFactory::mids$ = NULL;
          bool ThaiTokenizerFactory::live$ = false;

          jclass ThaiTokenizerFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/th/ThaiTokenizerFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_e51780e9] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Tokenizer;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ThaiTokenizerFactory::ThaiTokenizerFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenizerFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::Tokenizer ThaiTokenizerFactory::create(const ::org::apache::lucene::util::AttributeFactory & a0, const ::java::io::Reader & a1) const
          {
            return ::org::apache::lucene::analysis::Tokenizer(env->callObjectMethod(this$, mids$[mid_create_e51780e9], a0.this$, a1.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace th {
          static PyObject *t_ThaiTokenizerFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ThaiTokenizerFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ThaiTokenizerFactory_init_(t_ThaiTokenizerFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ThaiTokenizerFactory_create(t_ThaiTokenizerFactory *self, PyObject *args);

          static PyMethodDef t_ThaiTokenizerFactory__methods_[] = {
            DECLARE_METHOD(t_ThaiTokenizerFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ThaiTokenizerFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ThaiTokenizerFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ThaiTokenizerFactory, t_ThaiTokenizerFactory, ::org::apache::lucene::analysis::util::TokenizerFactory, ThaiTokenizerFactory, t_ThaiTokenizerFactory_init_, 0, 0, 0, 0, 0);

          void t_ThaiTokenizerFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(ThaiTokenizerFactory), module, "ThaiTokenizerFactory", 0);
          }

          void t_ThaiTokenizerFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ThaiTokenizerFactory).tp_dict, "class_", make_descriptor(ThaiTokenizerFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ThaiTokenizerFactory).tp_dict, "wrapfn_", make_descriptor(t_ThaiTokenizerFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ThaiTokenizerFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ThaiTokenizerFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ThaiTokenizerFactory::initializeClass, 1)))
              return NULL;
            return t_ThaiTokenizerFactory::wrap_Object(ThaiTokenizerFactory(((t_ThaiTokenizerFactory *) arg)->object.this$));
          }
          static PyObject *t_ThaiTokenizerFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ThaiTokenizerFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ThaiTokenizerFactory_init_(t_ThaiTokenizerFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            ThaiTokenizerFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = ThaiTokenizerFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ThaiTokenizerFactory_create(t_ThaiTokenizerFactory *self, PyObject *args)
          {
            ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
            ::java::io::Reader a1((jobject) NULL);
            ::org::apache::lucene::analysis::Tokenizer result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.create(a0, a1));
              return ::org::apache::lucene::analysis::t_Tokenizer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(ThaiTokenizerFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FieldCacheTermsFilter.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/search/FieldCache.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/DocIdSet.h"
#include "org/apache/lucene/util/Bits.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FieldCacheTermsFilter::class$ = NULL;
        jmethodID *FieldCacheTermsFilter::mids$ = NULL;
        bool FieldCacheTermsFilter::live$ = false;

        jclass FieldCacheTermsFilter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FieldCacheTermsFilter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_8fbc1a2e] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;[Lorg/apache/lucene/util/BytesRef;)V");
            mids$[mid_init$_ba45d66a] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;[Ljava/lang/String;)V");
            mids$[mid_getDocIdSet_ccce0897] = env->getMethodID(cls, "getDocIdSet", "(Lorg/apache/lucene/index/AtomicReaderContext;Lorg/apache/lucene/util/Bits;)Lorg/apache/lucene/search/DocIdSet;");
            mids$[mid_getFieldCache_a7c1cc27] = env->getMethodID(cls, "getFieldCache", "()Lorg/apache/lucene/search/FieldCache;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FieldCacheTermsFilter::FieldCacheTermsFilter(const ::java::lang::String & a0, const JArray< ::org::apache::lucene::util::BytesRef > & a1) : ::org::apache::lucene::search::Filter(env->newObject(initializeClass, &mids$, mid_init$_8fbc1a2e, a0.this$, a1.this$)) {}

        FieldCacheTermsFilter::FieldCacheTermsFilter(const ::java::lang::String & a0, const JArray< ::java::lang::String > & a1) : ::org::apache::lucene::search::Filter(env->newObject(initializeClass, &mids$, mid_init$_ba45d66a, a0.this$, a1.this$)) {}

        ::org::apache::lucene::search::DocIdSet FieldCacheTermsFilter::getDocIdSet(const ::org::apache::lucene::index::AtomicReaderContext & a0, const ::org::apache::lucene::util::Bits & a1) const
        {
          return ::org::apache::lucene::search::DocIdSet(env->callObjectMethod(this$, mids$[mid_getDocIdSet_ccce0897], a0.this$, a1.this$));
        }

        ::org::apache::lucene::search::FieldCache FieldCacheTermsFilter::getFieldCache() const
        {
          return ::org::apache::lucene::search::FieldCache(env->callObjectMethod(this$, mids$[mid_getFieldCache_a7c1cc27]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FieldCacheTermsFilter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldCacheTermsFilter_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FieldCacheTermsFilter_init_(t_FieldCacheTermsFilter *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FieldCacheTermsFilter_getDocIdSet(t_FieldCacheTermsFilter *self, PyObject *args);
        static PyObject *t_FieldCacheTermsFilter_getFieldCache(t_FieldCacheTermsFilter *self);
        static PyObject *t_FieldCacheTermsFilter_get__fieldCache(t_FieldCacheTermsFilter *self, void *data);
        static PyGetSetDef t_FieldCacheTermsFilter__fields_[] = {
          DECLARE_GET_FIELD(t_FieldCacheTermsFilter, fieldCache),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FieldCacheTermsFilter__methods_[] = {
          DECLARE_METHOD(t_FieldCacheTermsFilter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCacheTermsFilter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCacheTermsFilter, getDocIdSet, METH_VARARGS),
          DECLARE_METHOD(t_FieldCacheTermsFilter, getFieldCache, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldCacheTermsFilter, t_FieldCacheTermsFilter, ::org::apache::lucene::search::Filter, FieldCacheTermsFilter, t_FieldCacheTermsFilter_init_, 0, 0, t_FieldCacheTermsFilter__fields_, 0, 0);

        void t_FieldCacheTermsFilter::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldCacheTermsFilter), module, "FieldCacheTermsFilter", 0);
        }

        void t_FieldCacheTermsFilter::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldCacheTermsFilter).tp_dict, "class_", make_descriptor(FieldCacheTermsFilter::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldCacheTermsFilter).tp_dict, "wrapfn_", make_descriptor(t_FieldCacheTermsFilter::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldCacheTermsFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldCacheTermsFilter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldCacheTermsFilter::initializeClass, 1)))
            return NULL;
          return t_FieldCacheTermsFilter::wrap_Object(FieldCacheTermsFilter(((t_FieldCacheTermsFilter *) arg)->object.this$));
        }
        static PyObject *t_FieldCacheTermsFilter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldCacheTermsFilter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FieldCacheTermsFilter_init_(t_FieldCacheTermsFilter *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::java::lang::String a0((jobject) NULL);
              JArray< ::org::apache::lucene::util::BytesRef > a1((jobject) NULL);
              FieldCacheTermsFilter object((jobject) NULL);

              if (!parseArgs(args, "s[k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
              {
                INT_CALL(object = FieldCacheTermsFilter(a0, a1));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              JArray< ::java::lang::String > a1((jobject) NULL);
              FieldCacheTermsFilter object((jobject) NULL);

              if (!parseArgs(args, "s[s", &a0, &a1))
              {
                INT_CALL(object = FieldCacheTermsFilter(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FieldCacheTermsFilter_getDocIdSet(t_FieldCacheTermsFilter *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
          ::org::apache::lucene::util::Bits a1((jobject) NULL);
          ::org::apache::lucene::search::DocIdSet result((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.getDocIdSet(a0, a1));
            return ::org::apache::lucene::search::t_DocIdSet::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FieldCacheTermsFilter), (PyObject *) self, "getDocIdSet", args, 2);
        }

        static PyObject *t_FieldCacheTermsFilter_getFieldCache(t_FieldCacheTermsFilter *self)
        {
          ::org::apache::lucene::search::FieldCache result((jobject) NULL);
          OBJ_CALL(result = self->object.getFieldCache());
          return ::org::apache::lucene::search::t_FieldCache::wrap_Object(result);
        }

        static PyObject *t_FieldCacheTermsFilter_get__fieldCache(t_FieldCacheTermsFilter *self, void *data)
        {
          ::org::apache::lucene::search::FieldCache value((jobject) NULL);
          OBJ_CALL(value = self->object.getFieldCache());
          return ::org::apache::lucene::search::t_FieldCache::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/FunctionQuery.h"
#include "org/apache/lucene/queries/function/ValueSource.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "java/util/Set.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/index/Term.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/search/Weight.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {

          ::java::lang::Class *FunctionQuery::class$ = NULL;
          jmethodID *FunctionQuery::mids$ = NULL;
          bool FunctionQuery::live$ = false;

          jclass FunctionQuery::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/FunctionQuery");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_ca78fe7a] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queries/function/ValueSource;)V");
              mids$[mid_createWeight_367763cb] = env->getMethodID(cls, "createWeight", "(Lorg/apache/lucene/search/IndexSearcher;)Lorg/apache/lucene/search/Weight;");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_extractTerms_fb4f2b26] = env->getMethodID(cls, "extractTerms", "(Ljava/util/Set;)V");
              mids$[mid_getValueSource_b62b6193] = env->getMethodID(cls, "getValueSource", "()Lorg/apache/lucene/queries/function/ValueSource;");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_rewrite_7edcaa43] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/index/IndexReader;)Lorg/apache/lucene/search/Query;");
              mids$[mid_toString_97a5258f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FunctionQuery::FunctionQuery(const ::org::apache::lucene::queries::function::ValueSource & a0) : ::org::apache::lucene::search::Query(env->newObject(initializeClass, &mids$, mid_init$_ca78fe7a, a0.this$)) {}

          ::org::apache::lucene::search::Weight FunctionQuery::createWeight(const ::org::apache::lucene::search::IndexSearcher & a0) const
          {
            return ::org::apache::lucene::search::Weight(env->callObjectMethod(this$, mids$[mid_createWeight_367763cb], a0.this$));
          }

          jboolean FunctionQuery::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          void FunctionQuery::extractTerms(const ::java::util::Set & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_extractTerms_fb4f2b26], a0.this$);
          }

          ::org::apache::lucene::queries::function::ValueSource FunctionQuery::getValueSource() const
          {
            return ::org::apache::lucene::queries::function::ValueSource(env->callObjectMethod(this$, mids$[mid_getValueSource_b62b6193]));
          }

          jint FunctionQuery::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          ::org::apache::lucene::search::Query FunctionQuery::rewrite(const ::org::apache::lucene::index::IndexReader & a0) const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_rewrite_7edcaa43], a0.this$));
          }

          ::java::lang::String FunctionQuery::toString(const ::java::lang::String & a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_97a5258f], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          static PyObject *t_FunctionQuery_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FunctionQuery_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FunctionQuery_init_(t_FunctionQuery *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FunctionQuery_createWeight(t_FunctionQuery *self, PyObject *args);
          static PyObject *t_FunctionQuery_equals(t_FunctionQuery *self, PyObject *args);
          static PyObject *t_FunctionQuery_extractTerms(t_FunctionQuery *self, PyObject *args);
          static PyObject *t_FunctionQuery_getValueSource(t_FunctionQuery *self);
          static PyObject *t_FunctionQuery_hashCode(t_FunctionQuery *self, PyObject *args);
          static PyObject *t_FunctionQuery_rewrite(t_FunctionQuery *self, PyObject *args);
          static PyObject *t_FunctionQuery_toString(t_FunctionQuery *self, PyObject *args);
          static PyObject *t_FunctionQuery_get__valueSource(t_FunctionQuery *self, void *data);
          static PyGetSetDef t_FunctionQuery__fields_[] = {
            DECLARE_GET_FIELD(t_FunctionQuery, valueSource),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_FunctionQuery__methods_[] = {
            DECLARE_METHOD(t_FunctionQuery, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FunctionQuery, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FunctionQuery, createWeight, METH_VARARGS),
            DECLARE_METHOD(t_FunctionQuery, equals, METH_VARARGS),
            DECLARE_METHOD(t_FunctionQuery, extractTerms, METH_VARARGS),
            DECLARE_METHOD(t_FunctionQuery, getValueSource, METH_NOARGS),
            DECLARE_METHOD(t_FunctionQuery, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_FunctionQuery, rewrite, METH_VARARGS),
            DECLARE_METHOD(t_FunctionQuery, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FunctionQuery, t_FunctionQuery, ::org::apache::lucene::search::Query, FunctionQuery, t_FunctionQuery_init_, 0, 0, t_FunctionQuery__fields_, 0, 0);

          void t_FunctionQuery::install(PyObject *module)
          {
            installType(&PY_TYPE(FunctionQuery), module, "FunctionQuery", 0);
          }

          void t_FunctionQuery::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FunctionQuery).tp_dict, "class_", make_descriptor(FunctionQuery::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FunctionQuery).tp_dict, "wrapfn_", make_descriptor(t_FunctionQuery::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FunctionQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FunctionQuery_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FunctionQuery::initializeClass, 1)))
              return NULL;
            return t_FunctionQuery::wrap_Object(FunctionQuery(((t_FunctionQuery *) arg)->object.this$));
          }
          static PyObject *t_FunctionQuery_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FunctionQuery::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FunctionQuery_init_(t_FunctionQuery *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::queries::function::ValueSource a0((jobject) NULL);
            FunctionQuery object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::queries::function::ValueSource::initializeClass, &a0))
            {
              INT_CALL(object = FunctionQuery(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_FunctionQuery_createWeight(t_FunctionQuery *self, PyObject *args)
          {
            ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
            ::org::apache::lucene::search::Weight result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.createWeight(a0));
              return ::org::apache::lucene::search::t_Weight::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(FunctionQuery), (PyObject *) self, "createWeight", args, 2);
          }

          static PyObject *t_FunctionQuery_equals(t_FunctionQuery *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(FunctionQuery), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_FunctionQuery_extractTerms(t_FunctionQuery *self, PyObject *args)
          {
            ::java::util::Set a0((jobject) NULL);
            PyTypeObject **p0;

            if (!parseArgs(args, "K", ::java::util::Set::initializeClass, &a0, &p0, ::java::util::t_Set::parameters_))
            {
              OBJ_CALL(self->object.extractTerms(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(FunctionQuery), (PyObject *) self, "extractTerms", args, 2);
          }

          static PyObject *t_FunctionQuery_getValueSource(t_FunctionQuery *self)
          {
            ::org::apache::lucene::queries::function::ValueSource result((jobject) NULL);
            OBJ_CALL(result = self->object.getValueSource());
            return ::org::apache::lucene::queries::function::t_ValueSource::wrap_Object(result);
          }

          static PyObject *t_FunctionQuery_hashCode(t_FunctionQuery *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(FunctionQuery), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_FunctionQuery_rewrite(t_FunctionQuery *self, PyObject *args)
          {
            ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.rewrite(a0));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(FunctionQuery), (PyObject *) self, "rewrite", args, 2);
          }

          static PyObject *t_FunctionQuery_toString(t_FunctionQuery *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = self->object.toString(a0));
              return j2p(result);
            }

            return callSuper(&PY_TYPE(FunctionQuery), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_FunctionQuery_get__valueSource(t_FunctionQuery *self, void *data)
          {
            ::org::apache::lucene::queries::function::ValueSource value((jobject) NULL);
            OBJ_CALL(value = self->object.getValueSource());
            return ::org::apache::lucene::queries::function::t_ValueSource::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/BytesRefBuilder.h"
#include "java/lang/CharSequence.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *BytesRefBuilder::class$ = NULL;
        jmethodID *BytesRefBuilder::mids$ = NULL;
        bool BytesRefBuilder::live$ = false;

        jclass BytesRefBuilder::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/BytesRefBuilder");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_append_b2271687] = env->getMethodID(cls, "append", "(B)V");
            mids$[mid_append_7bc03dc4] = env->getMethodID(cls, "append", "(Lorg/apache/lucene/util/BytesRef;)V");
            mids$[mid_append_96c112dc] = env->getMethodID(cls, "append", "(Lorg/apache/lucene/util/BytesRefBuilder;)V");
            mids$[mid_append_86f4435f] = env->getMethodID(cls, "append", "([BII)V");
            mids$[mid_byteAt_39c7bd28] = env->getMethodID(cls, "byteAt", "(I)B");
            mids$[mid_bytes_dab10e7e] = env->getMethodID(cls, "bytes", "()[B");
            mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
            mids$[mid_copyBytes_7bc03dc4] = env->getMethodID(cls, "copyBytes", "(Lorg/apache/lucene/util/BytesRef;)V");
            mids$[mid_copyBytes_96c112dc] = env->getMethodID(cls, "copyBytes", "(Lorg/apache/lucene/util/BytesRefBuilder;)V");
            mids$[mid_copyBytes_86f4435f] = env->getMethodID(cls, "copyBytes", "([BII)V");
            mids$[mid_copyChars_a8afc64a] = env->getMethodID(cls, "copyChars", "(Ljava/lang/CharSequence;)V");
            mids$[mid_copyChars_6f0bb356] = env->getMethodID(cls, "copyChars", "([CII)V");
            mids$[mid_copyChars_6cc8d7e2] = env->getMethodID(cls, "copyChars", "(Ljava/lang/CharSequence;II)V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_get_4ae19461] = env->getMethodID(cls, "get", "()Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_grow_39c7bd3c] = env->getMethodID(cls, "grow", "(I)V");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_length_54c6a179] = env->getMethodID(cls, "length", "()I");
            mids$[mid_setByteAt_58d0da5d] = env->getMethodID(cls, "setByteAt", "(IB)V");
            mids$[mid_setLength_39c7bd3c] = env->getMethodID(cls, "setLength", "(I)V");
            mids$[mid_toBytesRef_4ae19461] = env->getMethodID(cls, "toBytesRef", "()Lorg/apache/lucene/util/BytesRef;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        BytesRefBuilder::BytesRefBuilder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void BytesRefBuilder::append(jbyte a0) const
        {
          env->callVoidMethod(this$, mids$[mid_append_b2271687], a0);
        }

        void BytesRefBuilder::append(const ::org::apache::lucene::util::BytesRef & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_append_7bc03dc4], a0.this$);
        }

        void BytesRefBuilder::append(const BytesRefBuilder & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_append_96c112dc], a0.this$);
        }

        void BytesRefBuilder::append(const JArray< jbyte > & a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_append_86f4435f], a0.this$, a1, a2);
        }

        jbyte BytesRefBuilder::byteAt(jint a0) const
        {
          return env->callByteMethod(this$, mids$[mid_byteAt_39c7bd28], a0);
        }

        JArray< jbyte > BytesRefBuilder::bytes() const
        {
          return JArray< jbyte >(env->callObjectMethod(this$, mids$[mid_bytes_dab10e7e]));
        }

        void BytesRefBuilder::clear() const
        {
          env->callVoidMethod(this$, mids$[mid_clear_54c6a166]);
        }

        void BytesRefBuilder::copyBytes(const ::org::apache::lucene::util::BytesRef & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_copyBytes_7bc03dc4], a0.this$);
        }

        void BytesRefBuilder::copyBytes(const BytesRefBuilder & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_copyBytes_96c112dc], a0.this$);
        }

        void BytesRefBuilder::copyBytes(const JArray< jbyte > & a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_copyBytes_86f4435f], a0.this$, a1, a2);
        }

        void BytesRefBuilder::copyChars(const ::java::lang::CharSequence & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_copyChars_a8afc64a], a0.this$);
        }

        void BytesRefBuilder::copyChars(const JArray< jchar > & a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_copyChars_6f0bb356], a0.this$, a1, a2);
        }

        void BytesRefBuilder::copyChars(const ::java::lang::CharSequence & a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_copyChars_6cc8d7e2], a0.this$, a1, a2);
        }

        jboolean BytesRefBuilder::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        ::org::apache::lucene::util::BytesRef BytesRefBuilder::get() const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_get_4ae19461]));
        }

        void BytesRefBuilder::grow(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_grow_39c7bd3c], a0);
        }

        jint BytesRefBuilder::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jint BytesRefBuilder::length() const
        {
          return env->callIntMethod(this$, mids$[mid_length_54c6a179]);
        }

        void BytesRefBuilder::setByteAt(jint a0, jbyte a1) const
        {
          env->callVoidMethod(this$, mids$[mid_setByteAt_58d0da5d], a0, a1);
        }

        void BytesRefBuilder::setLength(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setLength_39c7bd3c], a0);
        }

        ::org::apache::lucene::util::BytesRef BytesRefBuilder::toBytesRef() const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_toBytesRef_4ae19461]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_BytesRefBuilder_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BytesRefBuilder_instance_(PyTypeObject *type, PyObject *arg);
        static int t_BytesRefBuilder_init_(t_BytesRefBuilder *self, PyObject *args, PyObject *kwds);
        static PyObject *t_BytesRefBuilder_append(t_BytesRefBuilder *self, PyObject *args);
        static PyObject *t_BytesRefBuilder_byteAt(t_BytesRefBuilder *self, PyObject *arg);
        static PyObject *t_BytesRefBuilder_bytes(t_BytesRefBuilder *self);
        static PyObject *t_BytesRefBuilder_clear(t_BytesRefBuilder *self);
        static PyObject *t_BytesRefBuilder_copyBytes(t_BytesRefBuilder *self, PyObject *args);
        static PyObject *t_BytesRefBuilder_copyChars(t_BytesRefBuilder *self, PyObject *args);
        static PyObject *t_BytesRefBuilder_equals(t_BytesRefBuilder *self, PyObject *args);
        static PyObject *t_BytesRefBuilder_get(t_BytesRefBuilder *self);
        static PyObject *t_BytesRefBuilder_grow(t_BytesRefBuilder *self, PyObject *arg);
        static PyObject *t_BytesRefBuilder_hashCode(t_BytesRefBuilder *self, PyObject *args);
        static PyObject *t_BytesRefBuilder_length(t_BytesRefBuilder *self);
        static PyObject *t_BytesRefBuilder_setByteAt(t_BytesRefBuilder *self, PyObject *args);
        static PyObject *t_BytesRefBuilder_setLength(t_BytesRefBuilder *self, PyObject *arg);
        static PyObject *t_BytesRefBuilder_toBytesRef(t_BytesRefBuilder *self);

        static PyMethodDef t_BytesRefBuilder__methods_[] = {
          DECLARE_METHOD(t_BytesRefBuilder, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BytesRefBuilder, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BytesRefBuilder, append, METH_VARARGS),
          DECLARE_METHOD(t_BytesRefBuilder, byteAt, METH_O),
          DECLARE_METHOD(t_BytesRefBuilder, bytes, METH_NOARGS),
          DECLARE_METHOD(t_BytesRefBuilder, clear, METH_NOARGS),
          DECLARE_METHOD(t_BytesRefBuilder, copyBytes, METH_VARARGS),
          DECLARE_METHOD(t_BytesRefBuilder, copyChars, METH_VARARGS),
          DECLARE_METHOD(t_BytesRefBuilder, equals, METH_VARARGS),
          DECLARE_METHOD(t_BytesRefBuilder, get, METH_NOARGS),
          DECLARE_METHOD(t_BytesRefBuilder, grow, METH_O),
          DECLARE_METHOD(t_BytesRefBuilder, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_BytesRefBuilder, length, METH_NOARGS),
          DECLARE_METHOD(t_BytesRefBuilder, setByteAt, METH_VARARGS),
          DECLARE_METHOD(t_BytesRefBuilder, setLength, METH_O),
          DECLARE_METHOD(t_BytesRefBuilder, toBytesRef, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(BytesRefBuilder, t_BytesRefBuilder, ::java::lang::Object, BytesRefBuilder, t_BytesRefBuilder_init_, 0, 0, 0, 0, 0);

        void t_BytesRefBuilder::install(PyObject *module)
        {
          installType(&PY_TYPE(BytesRefBuilder), module, "BytesRefBuilder", 0);
        }

        void t_BytesRefBuilder::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(BytesRefBuilder).tp_dict, "class_", make_descriptor(BytesRefBuilder::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(BytesRefBuilder).tp_dict, "wrapfn_", make_descriptor(t_BytesRefBuilder::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(BytesRefBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_BytesRefBuilder_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, BytesRefBuilder::initializeClass, 1)))
            return NULL;
          return t_BytesRefBuilder::wrap_Object(BytesRefBuilder(((t_BytesRefBuilder *) arg)->object.this$));
        }
        static PyObject *t_BytesRefBuilder_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, BytesRefBuilder::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_BytesRefBuilder_init_(t_BytesRefBuilder *self, PyObject *args, PyObject *kwds)
        {
          BytesRefBuilder object((jobject) NULL);

          INT_CALL(object = BytesRefBuilder());
          self->object = object;

          return 0;
        }

        static PyObject *t_BytesRefBuilder_append(t_BytesRefBuilder *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jbyte a0;

              if (!parseArgs(args, "B", &a0))
              {
                OBJ_CALL(self->object.append(a0));
                Py_RETURN_NONE;
              }
            }
            {
              ::org::apache::lucene::util::BytesRef a0((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
              {
                OBJ_CALL(self->object.append(a0));
                Py_RETURN_NONE;
              }
            }
            {
              BytesRefBuilder a0((jobject) NULL);

              if (!parseArgs(args, "k", BytesRefBuilder::initializeClass, &a0))
              {
                OBJ_CALL(self->object.append(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 3:
            {
              JArray< jbyte > a0((jobject) NULL);
              jint a1;
              jint a2;

              if (!parseArgs(args, "[BII", &a0, &a1, &a2))
              {
                OBJ_CALL(self->object.append(a0, a1, a2));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "append", args);
          return NULL;
        }

        static PyObject *t_BytesRefBuilder_byteAt(t_BytesRefBuilder *self, PyObject *arg)
        {
          jint a0;
          jbyte result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.byteAt(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "byteAt", arg);
          return NULL;
        }

        static PyObject *t_BytesRefBuilder_bytes(t_BytesRefBuilder *self)
        {
          JArray< jbyte > result((jobject) NULL);
          OBJ_CALL(result = self->object.bytes());
          return result.wrap();
        }

        static PyObject *t_BytesRefBuilder_clear(t_BytesRefBuilder *self)
        {
          OBJ_CALL(self->object.clear());
          Py_RETURN_NONE;
        }

        static PyObject *t_BytesRefBuilder_copyBytes(t_BytesRefBuilder *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::util::BytesRef a0((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
              {
                OBJ_CALL(self->object.copyBytes(a0));
                Py_RETURN_NONE;
              }
            }
            {
              BytesRefBuilder a0((jobject) NULL);

              if (!parseArgs(args, "k", BytesRefBuilder::initializeClass, &a0))
              {
                OBJ_CALL(self->object.copyBytes(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 3:
            {
              JArray< jbyte > a0((jobject) NULL);
              jint a1;
              jint a2;

              if (!parseArgs(args, "[BII", &a0, &a1, &a2))
              {
                OBJ_CALL(self->object.copyBytes(a0, a1, a2));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "copyBytes", args);
          return NULL;
        }

        static PyObject *t_BytesRefBuilder_copyChars(t_BytesRefBuilder *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::lang::CharSequence a0((jobject) NULL);

              if (!parseArgs(args, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
              {
                OBJ_CALL(self->object.copyChars(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 3:
            {
              JArray< jchar > a0((jobject) NULL);
              jint a1;
              jint a2;

              if (!parseArgs(args, "[CII", &a0, &a1, &a2))
              {
                OBJ_CALL(self->object.copyChars(a0, a1, a2));
                Py_RETURN_NONE;
              }
            }
            {
              ::java::lang::CharSequence a0((jobject) NULL);
              jint a1;
              jint a2;

              if (!parseArgs(args, "OII", &::java::lang::PY_TYPE(CharSequence), &a0, &a1, &a2))
              {
                OBJ_CALL(self->object.copyChars(a0, a1, a2));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "copyChars", args);
          return NULL;
        }

        static PyObject *t_BytesRefBuilder_equals(t_BytesRefBuilder *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(BytesRefBuilder), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_BytesRefBuilder_get(t_BytesRefBuilder *self)
        {
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);
          OBJ_CALL(result = self->object.get());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
        }

        static PyObject *t_BytesRefBuilder_grow(t_BytesRefBuilder *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.grow(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "grow", arg);
          return NULL;
        }

        static PyObject *t_BytesRefBuilder_hashCode(t_BytesRefBuilder *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(BytesRefBuilder), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_BytesRefBuilder_length(t_BytesRefBuilder *self)
        {
          jint result;
          OBJ_CALL(result = self->object.length());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_BytesRefBuilder_setByteAt(t_BytesRefBuilder *self, PyObject *args)
        {
          jint a0;
          jbyte a1;

          if (!parseArgs(args, "IB", &a0, &a1))
          {
            OBJ_CALL(self->object.setByteAt(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setByteAt", args);
          return NULL;
        }

        static PyObject *t_BytesRefBuilder_setLength(t_BytesRefBuilder *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.setLength(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setLength", arg);
          return NULL;
        }

        static PyObject *t_BytesRefBuilder_toBytesRef(t_BytesRefBuilder *self)
        {
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);
          OBJ_CALL(result = self->object.toBytesRef());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/pylucene/queryparser/classic/PythonQueryParser.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/classic/ParseException.h"
#include "java/util/List.h"
#include "java/lang/Throwable.h"
#include "org/apache/lucene/queryparser/classic/CharStream.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Query.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace queryparser {
        namespace classic {

          ::java::lang::Class *PythonQueryParser::class$ = NULL;
          jmethodID *PythonQueryParser::mids$ = NULL;
          bool PythonQueryParser::live$ = false;

          jclass PythonQueryParser::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/pylucene/queryparser/classic/PythonQueryParser");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_24bde9d3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/classic/CharStream;)V");
              mids$[mid_init$_504c192d] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Ljava/lang/String;Lorg/apache/lucene/analysis/Analyzer;)V");
              mids$[mid_finalize_54c6a166] = env->getMethodID(cls, "finalize", "()V");
              mids$[mid_getBooleanQuery_3d190f1c] = env->getMethodID(cls, "getBooleanQuery", "(Ljava/util/List;Z)Lorg/apache/lucene/search/Query;");
              mids$[mid_getFieldQuery_bd696f55] = env->getMethodID(cls, "getFieldQuery", "(Ljava/lang/String;Ljava/lang/String;Z)Lorg/apache/lucene/search/Query;");
              mids$[mid_getFieldQuery_c7c8d9a8] = env->getMethodID(cls, "getFieldQuery", "(Ljava/lang/String;Ljava/lang/String;I)Lorg/apache/lucene/search/Query;");
              mids$[mid_getFieldQuery_quoted_bd696f55] = env->getMethodID(cls, "getFieldQuery_quoted", "(Ljava/lang/String;Ljava/lang/String;Z)Lorg/apache/lucene/search/Query;");
              mids$[mid_getFieldQuery_quoted_super_bd696f55] = env->getMethodID(cls, "getFieldQuery_quoted_super", "(Ljava/lang/String;Ljava/lang/String;Z)Lorg/apache/lucene/search/Query;");
              mids$[mid_getFieldQuery_slop_c7c8d9a8] = env->getMethodID(cls, "getFieldQuery_slop", "(Ljava/lang/String;Ljava/lang/String;I)Lorg/apache/lucene/search/Query;");
              mids$[mid_getFieldQuery_slop_super_c7c8d9a8] = env->getMethodID(cls, "getFieldQuery_slop_super", "(Ljava/lang/String;Ljava/lang/String;I)Lorg/apache/lucene/search/Query;");
              mids$[mid_getFuzzyQuery_45995161] = env->getMethodID(cls, "getFuzzyQuery", "(Ljava/lang/String;Ljava/lang/String;F)Lorg/apache/lucene/search/Query;");
              mids$[mid_getPrefixQuery_38d6e77e] = env->getMethodID(cls, "getPrefixQuery", "(Ljava/lang/String;Ljava/lang/String;)Lorg/apache/lucene/search/Query;");
              mids$[mid_getRangeQuery_75fd45b6] = env->getMethodID(cls, "getRangeQuery", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ZZ)Lorg/apache/lucene/search/Query;");
              mids$[mid_getWildcardQuery_38d6e77e] = env->getMethodID(cls, "getWildcardQuery", "(Ljava/lang/String;Ljava/lang/String;)Lorg/apache/lucene/search/Query;");
              mids$[mid_pythonDecRef_54c6a166] = env->getMethodID(cls, "pythonDecRef", "()V");
              mids$[mid_pythonExtension_54c6a17a] = env->getMethodID(cls, "pythonExtension", "()J");
              mids$[mid_pythonExtension_0ee6df2f] = env->getMethodID(cls, "pythonExtension", "(J)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PythonQueryParser::PythonQueryParser(const ::org::apache::lucene::queryparser::classic::CharStream & a0) : ::org::apache::lucene::queryparser::classic::QueryParser(env->newObject(initializeClass, &mids$, mid_init$_24bde9d3, a0.this$)) {}

          PythonQueryParser::PythonQueryParser(const ::org::apache::lucene::util::Version & a0, const ::java::lang::String & a1, const ::org::apache::lucene::analysis::Analyzer & a2) : ::org::apache::lucene::queryparser::classic::QueryParser(env->newObject(initializeClass, &mids$, mid_init$_504c192d, a0.this$, a1.this$, a2.this$)) {}

          void PythonQueryParser::finalize() const
          {
            env->callVoidMethod(this$, mids$[mid_finalize_54c6a166]);
          }

          ::org::apache::lucene::search::Query PythonQueryParser::getBooleanQuery(const ::java::util::List & a0, jboolean a1) const
          {
            return ::org::apache::lucene::search::Query(env->callNonvirtualObjectMethod(this$, (jclass) ::org::apache::lucene::queryparser::classic::QueryParser::class$->this$, ::org::apache::lucene::queryparser::classic::QueryParserBase::mids$[::org::apache::lucene::queryparser::classic::QueryParserBase::mid_getBooleanQuery_3d190f1c], a0.this$, a1));
          }

          ::org::apache::lucene::search::Query PythonQueryParser::getFieldQuery(const ::java::lang::String & a0, const ::java::lang::String & a1, jboolean a2) const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_getFieldQuery_bd696f55], a0.this$, a1.this$, a2));
          }

          ::org::apache::lucene::search::Query PythonQueryParser::getFieldQuery(const ::java::lang::String & a0, const ::java::lang::String & a1, jint a2) const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_getFieldQuery_c7c8d9a8], a0.this$, a1.this$, a2));
          }

          ::org::apache::lucene::search::Query PythonQueryParser::getFieldQuery_quoted_super(const ::java::lang::String & a0, const ::java::lang::String & a1, jboolean a2) const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_getFieldQuery_quoted_super_bd696f55], a0.this$, a1.this$, a2));
          }

          ::org::apache::lucene::search::Query PythonQueryParser::getFieldQuery_slop_super(const ::java::lang::String & a0, const ::java::lang::String & a1, jint a2) const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_getFieldQuery_slop_super_c7c8d9a8], a0.this$, a1.this$, a2));
          }

          ::org::apache::lucene::search::Query PythonQueryParser::getFuzzyQuery(const ::java::lang::String & a0, const ::java::lang::String & a1, jfloat a2) const
          {
            return ::org::apache::lucene::search::Query(env->callNonvirtualObjectMethod(this$, (jclass) ::org::apache::lucene::queryparser::classic::QueryParser::class$->this$, ::org::apache::lucene::queryparser::classic::QueryParserBase::mids$[::org::apache::lucene::queryparser::classic::QueryParserBase::mid_getFuzzyQuery_45995161], a0.this$, a1.this$, a2));
          }

          ::org::apache::lucene::search::Query PythonQueryParser::getPrefixQuery(const ::java::lang::String & a0, const ::java::lang::String & a1) const
          {
            return ::org::apache::lucene::search::Query(env->callNonvirtualObjectMethod(this$, (jclass) ::org::apache::lucene::queryparser::classic::QueryParser::class$->this$, ::org::apache::lucene::queryparser::classic::QueryParserBase::mids$[::org::apache::lucene::queryparser::classic::QueryParserBase::mid_getPrefixQuery_38d6e77e], a0.this$, a1.this$));
          }

          ::org::apache::lucene::search::Query PythonQueryParser::getRangeQuery(const ::java::lang::String & a0, const ::java::lang::String & a1, const ::java::lang::String & a2, jboolean a3, jboolean a4) const
          {
            return ::org::apache::lucene::search::Query(env->callNonvirtualObjectMethod(this$, (jclass) ::org::apache::lucene::queryparser::classic::QueryParser::class$->this$, ::org::apache::lucene::queryparser::classic::QueryParserBase::mids$[::org::apache::lucene::queryparser::classic::QueryParserBase::mid_getRangeQuery_75fd45b6], a0.this$, a1.this$, a2.this$, a3, a4));
          }

          ::org::apache::lucene::search::Query PythonQueryParser::getWildcardQuery(const ::java::lang::String & a0, const ::java::lang::String & a1) const
          {
            return ::org::apache::lucene::search::Query(env->callNonvirtualObjectMethod(this$, (jclass) ::org::apache::lucene::queryparser::classic::QueryParser::class$->this$, ::org::apache::lucene::queryparser::classic::QueryParserBase::mids$[::org::apache::lucene::queryparser::classic::QueryParserBase::mid_getWildcardQuery_38d6e77e], a0.this$, a1.this$));
          }

          jlong PythonQueryParser::pythonExtension() const
          {
            return env->callLongMethod(this$, mids$[mid_pythonExtension_54c6a17a]);
          }

          void PythonQueryParser::pythonExtension(jlong a0) const
          {
            env->callVoidMethod(this$, mids$[mid_pythonExtension_0ee6df2f], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace queryparser {
        namespace classic {
          static PyObject *t_PythonQueryParser_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PythonQueryParser_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PythonQueryParser_init_(t_PythonQueryParser *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PythonQueryParser_finalize(t_PythonQueryParser *self);
          static PyObject *t_PythonQueryParser_getBooleanQuery(t_PythonQueryParser *self, PyObject *args);
          static PyObject *t_PythonQueryParser_getFieldQuery(t_PythonQueryParser *self, PyObject *args);
          static PyObject *t_PythonQueryParser_getFieldQuery_quoted_super(t_PythonQueryParser *self, PyObject *args);
          static PyObject *t_PythonQueryParser_getFieldQuery_slop_super(t_PythonQueryParser *self, PyObject *args);
          static PyObject *t_PythonQueryParser_getFuzzyQuery(t_PythonQueryParser *self, PyObject *args);
          static PyObject *t_PythonQueryParser_getPrefixQuery(t_PythonQueryParser *self, PyObject *args);
          static PyObject *t_PythonQueryParser_getRangeQuery(t_PythonQueryParser *self, PyObject *args);
          static PyObject *t_PythonQueryParser_getWildcardQuery(t_PythonQueryParser *self, PyObject *args);
          static PyObject *t_PythonQueryParser_pythonExtension(t_PythonQueryParser *self, PyObject *args);
          static jobject JNICALL t_PythonQueryParser_getBooleanQuery0(JNIEnv *jenv, jobject jobj, jobject a0, jboolean a1);
          static jobject JNICALL t_PythonQueryParser_getFieldQuery_quoted1(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1, jboolean a2);
          static jobject JNICALL t_PythonQueryParser_getFieldQuery_slop2(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1, jint a2);
          static jobject JNICALL t_PythonQueryParser_getFuzzyQuery3(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1, jfloat a2);
          static jobject JNICALL t_PythonQueryParser_getPrefixQuery4(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1);
          static jobject JNICALL t_PythonQueryParser_getRangeQuery5(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1, jobject a2, jboolean a3, jboolean a4);
          static jobject JNICALL t_PythonQueryParser_getWildcardQuery6(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1);
          static void JNICALL t_PythonQueryParser_pythonDecRef7(JNIEnv *jenv, jobject jobj);
          static PyObject *t_PythonQueryParser_get__self(t_PythonQueryParser *self, void *data);
          static PyGetSetDef t_PythonQueryParser__fields_[] = {
            DECLARE_GET_FIELD(t_PythonQueryParser, self),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_PythonQueryParser__methods_[] = {
            DECLARE_METHOD(t_PythonQueryParser, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PythonQueryParser, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PythonQueryParser, finalize, METH_NOARGS),
            DECLARE_METHOD(t_PythonQueryParser, getBooleanQuery, METH_VARARGS),
            DECLARE_METHOD(t_PythonQueryParser, getFieldQuery, METH_VARARGS),
            DECLARE_METHOD(t_PythonQueryParser, getFieldQuery_quoted_super, METH_VARARGS),
            DECLARE_METHOD(t_PythonQueryParser, getFieldQuery_slop_super, METH_VARARGS),
            DECLARE_METHOD(t_PythonQueryParser, getFuzzyQuery, METH_VARARGS),
            DECLARE_METHOD(t_PythonQueryParser, getPrefixQuery, METH_VARARGS),
            DECLARE_METHOD(t_PythonQueryParser, getRangeQuery, METH_VARARGS),
            DECLARE_METHOD(t_PythonQueryParser, getWildcardQuery, METH_VARARGS),
            DECLARE_METHOD(t_PythonQueryParser, pythonExtension, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PythonQueryParser, t_PythonQueryParser, ::org::apache::lucene::queryparser::classic::QueryParser, PythonQueryParser, t_PythonQueryParser_init_, 0, 0, t_PythonQueryParser__fields_, 0, 0);

          void t_PythonQueryParser::install(PyObject *module)
          {
            installType(&PY_TYPE(PythonQueryParser), module, "PythonQueryParser", 1);
          }

          void t_PythonQueryParser::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PythonQueryParser).tp_dict, "class_", make_descriptor(PythonQueryParser::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PythonQueryParser).tp_dict, "wrapfn_", make_descriptor(t_PythonQueryParser::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PythonQueryParser).tp_dict, "boxfn_", make_descriptor(boxObject));
            jclass cls = env->getClass(PythonQueryParser::initializeClass);
            JNINativeMethod methods[] = {
              { "getBooleanQuery", "(Ljava/util/List;Z)Lorg/apache/lucene/search/Query;", (void *) t_PythonQueryParser_getBooleanQuery0 },
              { "getFieldQuery_quoted", "(Ljava/lang/String;Ljava/lang/String;Z)Lorg/apache/lucene/search/Query;", (void *) t_PythonQueryParser_getFieldQuery_quoted1 },
              { "getFieldQuery_slop", "(Ljava/lang/String;Ljava/lang/String;I)Lorg/apache/lucene/search/Query;", (void *) t_PythonQueryParser_getFieldQuery_slop2 },
              { "getFuzzyQuery", "(Ljava/lang/String;Ljava/lang/String;F)Lorg/apache/lucene/search/Query;", (void *) t_PythonQueryParser_getFuzzyQuery3 },
              { "getPrefixQuery", "(Ljava/lang/String;Ljava/lang/String;)Lorg/apache/lucene/search/Query;", (void *) t_PythonQueryParser_getPrefixQuery4 },
              { "getRangeQuery", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ZZ)Lorg/apache/lucene/search/Query;", (void *) t_PythonQueryParser_getRangeQuery5 },
              { "getWildcardQuery", "(Ljava/lang/String;Ljava/lang/String;)Lorg/apache/lucene/search/Query;", (void *) t_PythonQueryParser_getWildcardQuery6 },
              { "pythonDecRef", "()V", (void *) t_PythonQueryParser_pythonDecRef7 },
            };
            env->registerNatives(cls, methods, 8);
          }

          static PyObject *t_PythonQueryParser_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PythonQueryParser::initializeClass, 1)))
              return NULL;
            return t_PythonQueryParser::wrap_Object(PythonQueryParser(((t_PythonQueryParser *) arg)->object.this$));
          }
          static PyObject *t_PythonQueryParser_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PythonQueryParser::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PythonQueryParser_init_(t_PythonQueryParser *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::queryparser::classic::CharStream a0((jobject) NULL);
                PythonQueryParser object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::classic::CharStream::initializeClass, &a0))
                {
                  INT_CALL(object = PythonQueryParser(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                ::org::apache::lucene::analysis::Analyzer a2((jobject) NULL);
                PythonQueryParser object((jobject) NULL);

                if (!parseArgs(args, "ksk", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = PythonQueryParser(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            Py_INCREF((PyObject *) self);
            self->object.pythonExtension((jlong) (Py_intptr_t) (void *) self);

            return 0;
          }

          static PyObject *t_PythonQueryParser_finalize(t_PythonQueryParser *self)
          {
            OBJ_CALL(self->object.finalize());
            Py_RETURN_NONE;
          }

          static PyObject *t_PythonQueryParser_getBooleanQuery(t_PythonQueryParser *self, PyObject *args)
          {
            ::java::util::List a0((jobject) NULL);
            PyTypeObject **p0;
            jboolean a1;
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArgs(args, "KZ", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_, &a1))
            {
              OBJ_CALL(result = self->object.getBooleanQuery(a0, a1));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getBooleanQuery", args);
            return NULL;
          }

          static PyObject *t_PythonQueryParser_getFieldQuery(t_PythonQueryParser *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 3:
              {
                ::java::lang::String a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                jboolean a2;
                ::org::apache::lucene::search::Query result((jobject) NULL);

                if (!parseArgs(args, "ssZ", &a0, &a1, &a2))
                {
                  OBJ_CALL(result = self->object.getFieldQuery(a0, a1, a2));
                  return ::org::apache::lucene::search::t_Query::wrap_Object(result);
                }
              }
              {
                ::java::lang::String a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                jint a2;
                ::org::apache::lucene::search::Query result((jobject) NULL);

                if (!parseArgs(args, "ssI", &a0, &a1, &a2))
                {
                  OBJ_CALL(result = self->object.getFieldQuery(a0, a1, a2));
                  return ::org::apache::lucene::search::t_Query::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "getFieldQuery", args);
            return NULL;
          }

          static PyObject *t_PythonQueryParser_getFieldQuery_quoted_super(t_PythonQueryParser *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            jboolean a2;
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArgs(args, "ssZ", &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.getFieldQuery_quoted_super(a0, a1, a2));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getFieldQuery_quoted_super", args);
            return NULL;
          }

          static PyObject *t_PythonQueryParser_getFieldQuery_slop_super(t_PythonQueryParser *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            jint a2;
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArgs(args, "ssI", &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.getFieldQuery_slop_super(a0, a1, a2));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getFieldQuery_slop_super", args);
            return NULL;
          }

          static PyObject *t_PythonQueryParser_getFuzzyQuery(t_PythonQueryParser *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            jfloat a2;
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArgs(args, "ssF", &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.getFuzzyQuery(a0, a1, a2));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getFuzzyQuery", args);
            return NULL;
          }

          static PyObject *t_PythonQueryParser_getPrefixQuery(t_PythonQueryParser *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArgs(args, "ss", &a0, &a1))
            {
              OBJ_CALL(result = self->object.getPrefixQuery(a0, a1));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getPrefixQuery", args);
            return NULL;
          }

          static PyObject *t_PythonQueryParser_getRangeQuery(t_PythonQueryParser *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            ::java::lang::String a2((jobject) NULL);
            jboolean a3;
            jboolean a4;
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArgs(args, "sssZZ", &a0, &a1, &a2, &a3, &a4))
            {
              OBJ_CALL(result = self->object.getRangeQuery(a0, a1, a2, a3, a4));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getRangeQuery", args);
            return NULL;
          }

          static PyObject *t_PythonQueryParser_getWildcardQuery(t_PythonQueryParser *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArgs(args, "ss", &a0, &a1))
            {
              OBJ_CALL(result = self->object.getWildcardQuery(a0, a1));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getWildcardQuery", args);
            return NULL;
          }

          static PyObject *t_PythonQueryParser_pythonExtension(t_PythonQueryParser *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                jlong result;
                OBJ_CALL(result = self->object.pythonExtension());
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
              break;
             case 1:
              {
                jlong a0;

                if (!parseArgs(args, "J", &a0))
                {
                  OBJ_CALL(self->object.pythonExtension(a0));
                  Py_RETURN_NONE;
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "pythonExtension", args);
            return NULL;
          }

          static jobject JNICALL t_PythonQueryParser_getBooleanQuery0(JNIEnv *jenv, jobject jobj, jobject a0, jboolean a1)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonQueryParser::mids$[PythonQueryParser::mid_pythonExtension_54c6a17a]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
            PythonGIL gil(jenv);
            ::org::apache::lucene::search::Query value((jobject) NULL);
            PyObject *o0 = ::java::util::t_List::wrap_Object(::java::util::List(a0));
            PyObject *o1 = (a1 ? Py_True : Py_False);
            PyObject *result = PyObject_CallMethod(obj, "getBooleanQuery", "OO", o0, o1);
            Py_DECREF(o0);
            if (!result)
              throwPythonError();
            else if (parseArg(result, "k", ::org::apache::lucene::search::Query::initializeClass, &value))
            {
              throwTypeError("getBooleanQuery", result);
              Py_DECREF(result);
            }
            else
            {
              jobj = jenv->NewLocalRef(value.this$);
              Py_DECREF(result);
              return jobj;
            }

            return (jobject) NULL;
          }

          static jobject JNICALL t_PythonQueryParser_getFieldQuery_quoted1(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1, jboolean a2)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonQueryParser::mids$[PythonQueryParser::mid_pythonExtension_54c6a17a]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
            PythonGIL gil(jenv);
            ::org::apache::lucene::search::Query value((jobject) NULL);
            PyObject *o0 = env->fromJString((jstring) a0, 0);
            PyObject *o1 = env->fromJString((jstring) a1, 0);
            PyObject *o2 = (a2 ? Py_True : Py_False);
            PyObject *result = PyObject_CallMethod(obj, "getFieldQuery_quoted", "OOO", o0, o1, o2);
            Py_DECREF(o0);
            Py_DECREF(o1);
            if (!result)
              throwPythonError();
            else if (parseArg(result, "k", ::org::apache::lucene::search::Query::initializeClass, &value))
            {
              throwTypeError("getFieldQuery_quoted", result);
              Py_DECREF(result);
            }
            else
            {
              jobj = jenv->NewLocalRef(value.this$);
              Py_DECREF(result);
              return jobj;
            }

            return (jobject) NULL;
          }

          static jobject JNICALL t_PythonQueryParser_getFieldQuery_slop2(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1, jint a2)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonQueryParser::mids$[PythonQueryParser::mid_pythonExtension_54c6a17a]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
            PythonGIL gil(jenv);
            ::org::apache::lucene::search::Query value((jobject) NULL);
            PyObject *o0 = env->fromJString((jstring) a0, 0);
            PyObject *o1 = env->fromJString((jstring) a1, 0);
            PyObject *result = PyObject_CallMethod(obj, "getFieldQuery_slop", "OOi", o0, o1, (int) a2);
            Py_DECREF(o0);
            Py_DECREF(o1);
            if (!result)
              throwPythonError();
            else if (parseArg(result, "k", ::org::apache::lucene::search::Query::initializeClass, &value))
            {
              throwTypeError("getFieldQuery_slop", result);
              Py_DECREF(result);
            }
            else
            {
              jobj = jenv->NewLocalRef(value.this$);
              Py_DECREF(result);
              return jobj;
            }

            return (jobject) NULL;
          }

          static jobject JNICALL t_PythonQueryParser_getFuzzyQuery3(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1, jfloat a2)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonQueryParser::mids$[PythonQueryParser::mid_pythonExtension_54c6a17a]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
            PythonGIL gil(jenv);
            ::org::apache::lucene::search::Query value((jobject) NULL);
            PyObject *o0 = env->fromJString((jstring) a0, 0);
            PyObject *o1 = env->fromJString((jstring) a1, 0);
            PyObject *result = PyObject_CallMethod(obj, "getFuzzyQuery", "OOf", o0, o1, (float) a2);
            Py_DECREF(o0);
            Py_DECREF(o1);
            if (!result)
              throwPythonError();
            else if (parseArg(result, "k", ::org::apache::lucene::search::Query::initializeClass, &value))
            {
              throwTypeError("getFuzzyQuery", result);
              Py_DECREF(result);
            }
            else
            {
              jobj = jenv->NewLocalRef(value.this$);
              Py_DECREF(result);
              return jobj;
            }

            return (jobject) NULL;
          }

          static jobject JNICALL t_PythonQueryParser_getPrefixQuery4(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonQueryParser::mids$[PythonQueryParser::mid_pythonExtension_54c6a17a]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
            PythonGIL gil(jenv);
            ::org::apache::lucene::search::Query value((jobject) NULL);
            PyObject *o0 = env->fromJString((jstring) a0, 0);
            PyObject *o1 = env->fromJString((jstring) a1, 0);
            PyObject *result = PyObject_CallMethod(obj, "getPrefixQuery", "OO", o0, o1);
            Py_DECREF(o0);
            Py_DECREF(o1);
            if (!result)
              throwPythonError();
            else if (parseArg(result, "k", ::org::apache::lucene::search::Query::initializeClass, &value))
            {
              throwTypeError("getPrefixQuery", result);
              Py_DECREF(result);
            }
            else
            {
              jobj = jenv->NewLocalRef(value.this$);
              Py_DECREF(result);
              return jobj;
            }

            return (jobject) NULL;
          }

          static jobject JNICALL t_PythonQueryParser_getRangeQuery5(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1, jobject a2, jboolean a3, jboolean a4)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonQueryParser::mids$[PythonQueryParser::mid_pythonExtension_54c6a17a]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
            PythonGIL gil(jenv);
            ::org::apache::lucene::search::Query value((jobject) NULL);
            PyObject *o0 = env->fromJString((jstring) a0, 0);
            PyObject *o1 = env->fromJString((jstring) a1, 0);
            PyObject *o2 = env->fromJString((jstring) a2, 0);
            PyObject *o3 = (a3 ? Py_True : Py_False);
            PyObject *o4 = (a4 ? Py_True : Py_False);
            PyObject *result = PyObject_CallMethod(obj, "getRangeQuery", "OOOOO", o0, o1, o2, o3, o4);
            Py_DECREF(o0);
            Py_DECREF(o1);
            Py_DECREF(o2);
            if (!result)
              throwPythonError();
            else if (parseArg(result, "k", ::org::apache::lucene::search::Query::initializeClass, &value))
            {
              throwTypeError("getRangeQuery", result);
              Py_DECREF(result);
            }
            else
            {
              jobj = jenv->NewLocalRef(value.this$);
              Py_DECREF(result);
              return jobj;
            }

            return (jobject) NULL;
          }

          static jobject JNICALL t_PythonQueryParser_getWildcardQuery6(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonQueryParser::mids$[PythonQueryParser::mid_pythonExtension_54c6a17a]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
            PythonGIL gil(jenv);
            ::org::apache::lucene::search::Query value((jobject) NULL);
            PyObject *o0 = env->fromJString((jstring) a0, 0);
            PyObject *o1 = env->fromJString((jstring) a1, 0);
            PyObject *result = PyObject_CallMethod(obj, "getWildcardQuery", "OO", o0, o1);
            Py_DECREF(o0);
            Py_DECREF(o1);
            if (!result)
              throwPythonError();
            else if (parseArg(result, "k", ::org::apache::lucene::search::Query::initializeClass, &value))
            {
              throwTypeError("getWildcardQuery", result);
              Py_DECREF(result);
            }
            else
            {
              jobj = jenv->NewLocalRef(value.this$);
              Py_DECREF(result);
              return jobj;
            }

            return (jobject) NULL;
          }

          static void JNICALL t_PythonQueryParser_pythonDecRef7(JNIEnv *jenv, jobject jobj)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonQueryParser::mids$[PythonQueryParser::mid_pythonExtension_54c6a17a]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

            if (obj != NULL)
            {
              jenv->CallVoidMethod(jobj, PythonQueryParser::mids$[PythonQueryParser::mid_pythonExtension_0ee6df2f], (jlong) 0);
              env->finalizeObject(jenv, obj);
            }
          }

          static PyObject *t_PythonQueryParser_get__self(t_PythonQueryParser *self, void *data)
          {
            jlong ptr;
            OBJ_CALL(ptr = self->object.pythonExtension());
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

            if (obj != NULL)
            {
              Py_INCREF(obj);
              return obj;
            }
            else
              Py_RETURN_NONE;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/grouping/term/TermDistinctValuesCollector$GroupCount.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          namespace term {

            ::java::lang::Class *TermDistinctValuesCollector$GroupCount::class$ = NULL;
            jmethodID *TermDistinctValuesCollector$GroupCount::mids$ = NULL;
            bool TermDistinctValuesCollector$GroupCount::live$ = false;

            jclass TermDistinctValuesCollector$GroupCount::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/grouping/term/TermDistinctValuesCollector$GroupCount");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          namespace term {
            static PyObject *t_TermDistinctValuesCollector$GroupCount_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_TermDistinctValuesCollector$GroupCount_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_TermDistinctValuesCollector$GroupCount_of_(t_TermDistinctValuesCollector$GroupCount *self, PyObject *args);
            static PyObject *t_TermDistinctValuesCollector$GroupCount_get__parameters_(t_TermDistinctValuesCollector$GroupCount *self, void *data);
            static PyGetSetDef t_TermDistinctValuesCollector$GroupCount__fields_[] = {
              DECLARE_GET_FIELD(t_TermDistinctValuesCollector$GroupCount, parameters_),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_TermDistinctValuesCollector$GroupCount__methods_[] = {
              DECLARE_METHOD(t_TermDistinctValuesCollector$GroupCount, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TermDistinctValuesCollector$GroupCount, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TermDistinctValuesCollector$GroupCount, of_, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(TermDistinctValuesCollector$GroupCount, t_TermDistinctValuesCollector$GroupCount, ::org::apache::lucene::search::grouping::AbstractDistinctValuesCollector$GroupCount, TermDistinctValuesCollector$GroupCount, abstract_init, 0, 0, t_TermDistinctValuesCollector$GroupCount__fields_, 0, 0);
            PyObject *t_TermDistinctValuesCollector$GroupCount::wrap_Object(const TermDistinctValuesCollector$GroupCount& object, PyTypeObject *p0)
            {
              PyObject *obj = t_TermDistinctValuesCollector$GroupCount::wrap_Object(object);
              if (obj != NULL && obj != Py_None)
              {
                t_TermDistinctValuesCollector$GroupCount *self = (t_TermDistinctValuesCollector$GroupCount *) obj;
                self->parameters[0] = p0;
              }
              return obj;
            }

            PyObject *t_TermDistinctValuesCollector$GroupCount::wrap_jobject(const jobject& object, PyTypeObject *p0)
            {
              PyObject *obj = t_TermDistinctValuesCollector$GroupCount::wrap_jobject(object);
              if (obj != NULL && obj != Py_None)
              {
                t_TermDistinctValuesCollector$GroupCount *self = (t_TermDistinctValuesCollector$GroupCount *) obj;
                self->parameters[0] = p0;
              }
              return obj;
            }

            void t_TermDistinctValuesCollector$GroupCount::install(PyObject *module)
            {
              installType(&PY_TYPE(TermDistinctValuesCollector$GroupCount), module, "TermDistinctValuesCollector$GroupCount", 0);
            }

            void t_TermDistinctValuesCollector$GroupCount::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(TermDistinctValuesCollector$GroupCount).tp_dict, "class_", make_descriptor(TermDistinctValuesCollector$GroupCount::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(TermDistinctValuesCollector$GroupCount).tp_dict, "wrapfn_", make_descriptor(t_TermDistinctValuesCollector$GroupCount::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(TermDistinctValuesCollector$GroupCount).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_TermDistinctValuesCollector$GroupCount_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, TermDistinctValuesCollector$GroupCount::initializeClass, 1)))
                return NULL;
              return t_TermDistinctValuesCollector$GroupCount::wrap_Object(TermDistinctValuesCollector$GroupCount(((t_TermDistinctValuesCollector$GroupCount *) arg)->object.this$));
            }
            static PyObject *t_TermDistinctValuesCollector$GroupCount_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, TermDistinctValuesCollector$GroupCount::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_TermDistinctValuesCollector$GroupCount_of_(t_TermDistinctValuesCollector$GroupCount *self, PyObject *args)
            {
              if (!parseArg(args, "T", 1, &(self->parameters)))
                Py_RETURN_SELF;
              return PyErr_SetArgsError((PyObject *) self, "of_", args);
            }
            static PyObject *t_TermDistinctValuesCollector$GroupCount_get__parameters_(t_TermDistinctValuesCollector$GroupCount *self, void *data)
            {
              return typeParameters(self->parameters, sizeof(self->parameters));
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FieldCache$Shorts.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FieldCache$Shorts::class$ = NULL;
        jmethodID *FieldCache$Shorts::mids$ = NULL;
        bool FieldCache$Shorts::live$ = false;
        FieldCache$Shorts *FieldCache$Shorts::EMPTY = NULL;

        jclass FieldCache$Shorts::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FieldCache$Shorts");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_get_39c7bd39] = env->getMethodID(cls, "get", "(I)S");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            EMPTY = new FieldCache$Shorts(env->getStaticObjectField(cls, "EMPTY", "Lorg/apache/lucene/search/FieldCache$Shorts;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FieldCache$Shorts::FieldCache$Shorts() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jshort FieldCache$Shorts::get(jint a0) const
        {
          return env->callShortMethod(this$, mids$[mid_get_39c7bd39], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FieldCache$Shorts_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldCache$Shorts_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FieldCache$Shorts_init_(t_FieldCache$Shorts *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FieldCache$Shorts_get(t_FieldCache$Shorts *self, PyObject *arg);

        static PyMethodDef t_FieldCache$Shorts__methods_[] = {
          DECLARE_METHOD(t_FieldCache$Shorts, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCache$Shorts, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCache$Shorts, get, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldCache$Shorts, t_FieldCache$Shorts, ::java::lang::Object, FieldCache$Shorts, t_FieldCache$Shorts_init_, 0, 0, 0, 0, 0);

        void t_FieldCache$Shorts::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldCache$Shorts), module, "FieldCache$Shorts", 0);
        }

        void t_FieldCache$Shorts::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldCache$Shorts).tp_dict, "class_", make_descriptor(FieldCache$Shorts::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldCache$Shorts).tp_dict, "wrapfn_", make_descriptor(t_FieldCache$Shorts::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldCache$Shorts).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(FieldCache$Shorts::initializeClass);
          PyDict_SetItemString(PY_TYPE(FieldCache$Shorts).tp_dict, "EMPTY", make_descriptor(t_FieldCache$Shorts::wrap_Object(*FieldCache$Shorts::EMPTY)));
        }

        static PyObject *t_FieldCache$Shorts_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldCache$Shorts::initializeClass, 1)))
            return NULL;
          return t_FieldCache$Shorts::wrap_Object(FieldCache$Shorts(((t_FieldCache$Shorts *) arg)->object.this$));
        }
        static PyObject *t_FieldCache$Shorts_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldCache$Shorts::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FieldCache$Shorts_init_(t_FieldCache$Shorts *self, PyObject *args, PyObject *kwds)
        {
          FieldCache$Shorts object((jobject) NULL);

          INT_CALL(object = FieldCache$Shorts());
          self->object = object;

          return 0;
        }

        static PyObject *t_FieldCache$Shorts_get(t_FieldCache$Shorts *self, PyObject *arg)
        {
          jint a0;
          jshort result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.get(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "get", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "java/util/Collection.h"
#include "java/util/Set.h"
#include "org/apache/lucene/codecs/Codec.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *SegmentInfo::class$ = NULL;
        jmethodID *SegmentInfo::mids$ = NULL;
        jfieldID *SegmentInfo::fids$ = NULL;
        bool SegmentInfo::live$ = false;
        jint SegmentInfo::NO = (jint) 0;
        jint SegmentInfo::YES = (jint) 0;

        jclass SegmentInfo::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/SegmentInfo");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_5d76ee98] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/util/Version;Ljava/lang/String;IZLorg/apache/lucene/codecs/Codec;Ljava/util/Map;)V");
            mids$[mid_init$_55cf371a] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/util/Version;Ljava/lang/String;IZLorg/apache/lucene/codecs/Codec;Ljava/util/Map;Ljava/util/Map;)V");
            mids$[mid_addFile_5fdc3f48] = env->getMethodID(cls, "addFile", "(Ljava/lang/String;)V");
            mids$[mid_addFiles_9bfb370d] = env->getMethodID(cls, "addFiles", "(Ljava/util/Collection;)V");
            mids$[mid_attributes_db60befd] = env->getMethodID(cls, "attributes", "()Ljava/util/Map;");
            mids$[mid_clone_ee6d9df2] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/index/SegmentInfo;");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_files_03e99967] = env->getMethodID(cls, "files", "()Ljava/util/Set;");
            mids$[mid_getAttribute_97a5258f] = env->getMethodID(cls, "getAttribute", "(Ljava/lang/String;)Ljava/lang/String;");
            mids$[mid_getCodec_27f0a02b] = env->getMethodID(cls, "getCodec", "()Lorg/apache/lucene/codecs/Codec;");
            mids$[mid_getDiagnostics_db60befd] = env->getMethodID(cls, "getDiagnostics", "()Ljava/util/Map;");
            mids$[mid_getDocCount_54c6a179] = env->getMethodID(cls, "getDocCount", "()I");
            mids$[mid_getUseCompoundFile_54c6a16a] = env->getMethodID(cls, "getUseCompoundFile", "()Z");
            mids$[mid_getVersion_a83d688e] = env->getMethodID(cls, "getVersion", "()Lorg/apache/lucene/util/Version;");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_putAttribute_aacea7e9] = env->getMethodID(cls, "putAttribute", "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;");
            mids$[mid_setCodec_848f310e] = env->getMethodID(cls, "setCodec", "(Lorg/apache/lucene/codecs/Codec;)V");
            mids$[mid_setFiles_fb4f2b26] = env->getMethodID(cls, "setFiles", "(Ljava/util/Set;)V");
            mids$[mid_setVersion_0d96cf33] = env->getMethodID(cls, "setVersion", "(Lorg/apache/lucene/util/Version;)V");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
            mids$[mid_toString_889826bf] = env->getMethodID(cls, "toString", "(Lorg/apache/lucene/store/Directory;I)Ljava/lang/String;");

            fids$ = new jfieldID[max_fid];
            fids$[fid_dir] = env->getFieldID(cls, "dir", "Lorg/apache/lucene/store/Directory;");
            fids$[fid_name] = env->getFieldID(cls, "name", "Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            NO = env->getStaticIntField(cls, "NO");
            YES = env->getStaticIntField(cls, "YES");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SegmentInfo::SegmentInfo(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::util::Version & a1, const ::java::lang::String & a2, jint a3, jboolean a4, const ::org::apache::lucene::codecs::Codec & a5, const ::java::util::Map & a6) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_5d76ee98, a0.this$, a1.this$, a2.this$, a3, a4, a5.this$, a6.this$)) {}

        SegmentInfo::SegmentInfo(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::util::Version & a1, const ::java::lang::String & a2, jint a3, jboolean a4, const ::org::apache::lucene::codecs::Codec & a5, const ::java::util::Map & a6, const ::java::util::Map & a7) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_55cf371a, a0.this$, a1.this$, a2.this$, a3, a4, a5.this$, a6.this$, a7.this$)) {}

        void SegmentInfo::addFile(const ::java::lang::String & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_addFile_5fdc3f48], a0.this$);
        }

        void SegmentInfo::addFiles(const ::java::util::Collection & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_addFiles_9bfb370d], a0.this$);
        }

        ::java::util::Map SegmentInfo::attributes() const
        {
          return ::java::util::Map(env->callObjectMethod(this$, mids$[mid_attributes_db60befd]));
        }

        SegmentInfo SegmentInfo::clone() const
        {
          return SegmentInfo(env->callObjectMethod(this$, mids$[mid_clone_ee6d9df2]));
        }

        jboolean SegmentInfo::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        ::java::util::Set SegmentInfo::files() const
        {
          return ::java::util::Set(env->callObjectMethod(this$, mids$[mid_files_03e99967]));
        }

        ::java::lang::String SegmentInfo::getAttribute(const ::java::lang::String & a0) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getAttribute_97a5258f], a0.this$));
        }

        ::org::apache::lucene::codecs::Codec SegmentInfo::getCodec() const
        {
          return ::org::apache::lucene::codecs::Codec(env->callObjectMethod(this$, mids$[mid_getCodec_27f0a02b]));
        }

        ::java::util::Map SegmentInfo::getDiagnostics() const
        {
          return ::java::util::Map(env->callObjectMethod(this$, mids$[mid_getDiagnostics_db60befd]));
        }

        jint SegmentInfo::getDocCount() const
        {
          return env->callIntMethod(this$, mids$[mid_getDocCount_54c6a179]);
        }

        jboolean SegmentInfo::getUseCompoundFile() const
        {
          return env->callBooleanMethod(this$, mids$[mid_getUseCompoundFile_54c6a16a]);
        }

        ::org::apache::lucene::util::Version SegmentInfo::getVersion() const
        {
          return ::org::apache::lucene::util::Version(env->callObjectMethod(this$, mids$[mid_getVersion_a83d688e]));
        }

        jint SegmentInfo::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        ::java::lang::String SegmentInfo::putAttribute(const ::java::lang::String & a0, const ::java::lang::String & a1) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_putAttribute_aacea7e9], a0.this$, a1.this$));
        }

        void SegmentInfo::setCodec(const ::org::apache::lucene::codecs::Codec & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setCodec_848f310e], a0.this$);
        }

        void SegmentInfo::setFiles(const ::java::util::Set & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setFiles_fb4f2b26], a0.this$);
        }

        void SegmentInfo::setVersion(const ::org::apache::lucene::util::Version & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setVersion_0d96cf33], a0.this$);
        }

        ::java::lang::String SegmentInfo::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }

        ::java::lang::String SegmentInfo::toString(const ::org::apache::lucene::store::Directory & a0, jint a1) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_889826bf], a0.this$, a1));
        }

        ::org::apache::lucene::store::Directory SegmentInfo::_get_dir() const
        {
          return ::org::apache::lucene::store::Directory(env->getObjectField(this$, fids$[fid_dir]));
        }

        ::java::lang::String SegmentInfo::_get_name() const
        {
          return ::java::lang::String(env->getObjectField(this$, fids$[fid_name]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_SegmentInfo_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SegmentInfo_instance_(PyTypeObject *type, PyObject *arg);
        static int t_SegmentInfo_init_(t_SegmentInfo *self, PyObject *args, PyObject *kwds);
        static PyObject *t_SegmentInfo_addFile(t_SegmentInfo *self, PyObject *arg);
        static PyObject *t_SegmentInfo_addFiles(t_SegmentInfo *self, PyObject *arg);
        static PyObject *t_SegmentInfo_attributes(t_SegmentInfo *self);
        static PyObject *t_SegmentInfo_clone(t_SegmentInfo *self);
        static PyObject *t_SegmentInfo_equals(t_SegmentInfo *self, PyObject *args);
        static PyObject *t_SegmentInfo_files(t_SegmentInfo *self);
        static PyObject *t_SegmentInfo_getAttribute(t_SegmentInfo *self, PyObject *arg);
        static PyObject *t_SegmentInfo_getCodec(t_SegmentInfo *self);
        static PyObject *t_SegmentInfo_getDiagnostics(t_SegmentInfo *self);
        static PyObject *t_SegmentInfo_getDocCount(t_SegmentInfo *self);
        static PyObject *t_SegmentInfo_getUseCompoundFile(t_SegmentInfo *self);
        static PyObject *t_SegmentInfo_getVersion(t_SegmentInfo *self);
        static PyObject *t_SegmentInfo_hashCode(t_SegmentInfo *self, PyObject *args);
        static PyObject *t_SegmentInfo_putAttribute(t_SegmentInfo *self, PyObject *args);
        static PyObject *t_SegmentInfo_setCodec(t_SegmentInfo *self, PyObject *arg);
        static PyObject *t_SegmentInfo_setFiles(t_SegmentInfo *self, PyObject *arg);
        static PyObject *t_SegmentInfo_setVersion(t_SegmentInfo *self, PyObject *arg);
        static PyObject *t_SegmentInfo_toString(t_SegmentInfo *self, PyObject *args);
        static PyObject *t_SegmentInfo_get__dir(t_SegmentInfo *self, void *data);
        static PyObject *t_SegmentInfo_get__name(t_SegmentInfo *self, void *data);

        static PyObject *t_SegmentInfo_get__codec(t_SegmentInfo *self, void *data);
        static int t_SegmentInfo_set__codec(t_SegmentInfo *self, PyObject *arg, void *data);
        static PyObject *t_SegmentInfo_get__diagnostics(t_SegmentInfo *self, void *data);
        static PyObject *t_SegmentInfo_get__docCount(t_SegmentInfo *self, void *data);
        static PyObject *t_SegmentInfo_get__useCompoundFile(t_SegmentInfo *self, void *data);
        static PyObject *t_SegmentInfo_get__version(t_SegmentInfo *self, void *data);
        static int t_SegmentInfo_set__version(t_SegmentInfo *self, PyObject *arg, void *data);
        static PyGetSetDef t_SegmentInfo__fields_[] = {
          DECLARE_GET_FIELD(t_SegmentInfo, dir),
          DECLARE_GET_FIELD(t_SegmentInfo, name),
          DECLARE_GETSET_FIELD(t_SegmentInfo, codec),
          DECLARE_GET_FIELD(t_SegmentInfo, diagnostics),
          DECLARE_GET_FIELD(t_SegmentInfo, docCount),
          DECLARE_GET_FIELD(t_SegmentInfo, useCompoundFile),
          DECLARE_GETSET_FIELD(t_SegmentInfo, version),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_SegmentInfo__methods_[] = {
          DECLARE_METHOD(t_SegmentInfo, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SegmentInfo, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SegmentInfo, addFile, METH_O),
          DECLARE_METHOD(t_SegmentInfo, addFiles, METH_O),
          DECLARE_METHOD(t_SegmentInfo, attributes, METH_NOARGS),
          DECLARE_METHOD(t_SegmentInfo, clone, METH_NOARGS),
          DECLARE_METHOD(t_SegmentInfo, equals, METH_VARARGS),
          DECLARE_METHOD(t_SegmentInfo, files, METH_NOARGS),
          DECLARE_METHOD(t_SegmentInfo, getAttribute, METH_O),
          DECLARE_METHOD(t_SegmentInfo, getCodec, METH_NOARGS),
          DECLARE_METHOD(t_SegmentInfo, getDiagnostics, METH_NOARGS),
          DECLARE_METHOD(t_SegmentInfo, getDocCount, METH_NOARGS),
          DECLARE_METHOD(t_SegmentInfo, getUseCompoundFile, METH_NOARGS),
          DECLARE_METHOD(t_SegmentInfo, getVersion, METH_NOARGS),
          DECLARE_METHOD(t_SegmentInfo, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_SegmentInfo, putAttribute, METH_VARARGS),
          DECLARE_METHOD(t_SegmentInfo, setCodec, METH_O),
          DECLARE_METHOD(t_SegmentInfo, setFiles, METH_O),
          DECLARE_METHOD(t_SegmentInfo, setVersion, METH_O),
          DECLARE_METHOD(t_SegmentInfo, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SegmentInfo, t_SegmentInfo, ::java::lang::Object, SegmentInfo, t_SegmentInfo_init_, 0, 0, t_SegmentInfo__fields_, 0, 0);

        void t_SegmentInfo::install(PyObject *module)
        {
          installType(&PY_TYPE(SegmentInfo), module, "SegmentInfo", 0);
        }

        void t_SegmentInfo::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SegmentInfo).tp_dict, "class_", make_descriptor(SegmentInfo::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SegmentInfo).tp_dict, "wrapfn_", make_descriptor(t_SegmentInfo::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SegmentInfo).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(SegmentInfo::initializeClass);
          PyDict_SetItemString(PY_TYPE(SegmentInfo).tp_dict, "NO", make_descriptor(SegmentInfo::NO));
          PyDict_SetItemString(PY_TYPE(SegmentInfo).tp_dict, "YES", make_descriptor(SegmentInfo::YES));
        }

        static PyObject *t_SegmentInfo_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SegmentInfo::initializeClass, 1)))
            return NULL;
          return t_SegmentInfo::wrap_Object(SegmentInfo(((t_SegmentInfo *) arg)->object.this$));
        }
        static PyObject *t_SegmentInfo_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SegmentInfo::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_SegmentInfo_init_(t_SegmentInfo *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 7:
            {
              ::org::apache::lucene::store::Directory a0((jobject) NULL);
              ::org::apache::lucene::util::Version a1((jobject) NULL);
              ::java::lang::String a2((jobject) NULL);
              jint a3;
              jboolean a4;
              ::org::apache::lucene::codecs::Codec a5((jobject) NULL);
              ::java::util::Map a6((jobject) NULL);
              PyTypeObject **p6;
              SegmentInfo object((jobject) NULL);

              if (!parseArgs(args, "kksIZkK", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::codecs::Codec::initializeClass, ::java::util::Map::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5, &a6, &p6, ::java::util::t_Map::parameters_))
              {
                INT_CALL(object = SegmentInfo(a0, a1, a2, a3, a4, a5, a6));
                self->object = object;
                break;
              }
            }
            goto err;
           case 8:
            {
              ::org::apache::lucene::store::Directory a0((jobject) NULL);
              ::org::apache::lucene::util::Version a1((jobject) NULL);
              ::java::lang::String a2((jobject) NULL);
              jint a3;
              jboolean a4;
              ::org::apache::lucene::codecs::Codec a5((jobject) NULL);
              ::java::util::Map a6((jobject) NULL);
              PyTypeObject **p6;
              ::java::util::Map a7((jobject) NULL);
              PyTypeObject **p7;
              SegmentInfo object((jobject) NULL);

              if (!parseArgs(args, "kksIZkKK", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::codecs::Codec::initializeClass, ::java::util::Map::initializeClass, ::java::util::Map::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5, &a6, &p6, ::java::util::t_Map::parameters_, &a7, &p7, ::java::util::t_Map::parameters_))
              {
                INT_CALL(object = SegmentInfo(a0, a1, a2, a3, a4, a5, a6, a7));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_SegmentInfo_addFile(t_SegmentInfo *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(self->object.addFile(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "addFile", arg);
          return NULL;
        }

        static PyObject *t_SegmentInfo_addFiles(t_SegmentInfo *self, PyObject *arg)
        {
          ::java::util::Collection a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArg(arg, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
          {
            OBJ_CALL(self->object.addFiles(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "addFiles", arg);
          return NULL;
        }

        static PyObject *t_SegmentInfo_attributes(t_SegmentInfo *self)
        {
          ::java::util::Map result((jobject) NULL);
          OBJ_CALL(result = self->object.attributes());
          return ::java::util::t_Map::wrap_Object(result, &::java::lang::PY_TYPE(String), &::java::lang::PY_TYPE(String));
        }

        static PyObject *t_SegmentInfo_clone(t_SegmentInfo *self)
        {
          SegmentInfo result((jobject) NULL);
          OBJ_CALL(result = self->object.clone());
          return t_SegmentInfo::wrap_Object(result);
        }

        static PyObject *t_SegmentInfo_equals(t_SegmentInfo *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(SegmentInfo), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_SegmentInfo_files(t_SegmentInfo *self)
        {
          ::java::util::Set result((jobject) NULL);
          OBJ_CALL(result = self->object.files());
          return ::java::util::t_Set::wrap_Object(result, &::java::lang::PY_TYPE(String));
        }

        static PyObject *t_SegmentInfo_getAttribute(t_SegmentInfo *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = self->object.getAttribute(a0));
            return j2p(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getAttribute", arg);
          return NULL;
        }

        static PyObject *t_SegmentInfo_getCodec(t_SegmentInfo *self)
        {
          ::org::apache::lucene::codecs::Codec result((jobject) NULL);
          OBJ_CALL(result = self->object.getCodec());
          return ::org::apache::lucene::codecs::t_Codec::wrap_Object(result);
        }

        static PyObject *t_SegmentInfo_getDiagnostics(t_SegmentInfo *self)
        {
          ::java::util::Map result((jobject) NULL);
          OBJ_CALL(result = self->object.getDiagnostics());
          return ::java::util::t_Map::wrap_Object(result, &::java::lang::PY_TYPE(String), &::java::lang::PY_TYPE(String));
        }

        static PyObject *t_SegmentInfo_getDocCount(t_SegmentInfo *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getDocCount());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_SegmentInfo_getUseCompoundFile(t_SegmentInfo *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.getUseCompoundFile());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_SegmentInfo_getVersion(t_SegmentInfo *self)
        {
          ::org::apache::lucene::util::Version result((jobject) NULL);
          OBJ_CALL(result = self->object.getVersion());
          return ::org::apache::lucene::util::t_Version::wrap_Object(result);
        }

        static PyObject *t_SegmentInfo_hashCode(t_SegmentInfo *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(SegmentInfo), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_SegmentInfo_putAttribute(t_SegmentInfo *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "ss", &a0, &a1))
          {
            OBJ_CALL(result = self->object.putAttribute(a0, a1));
            return j2p(result);
          }

          PyErr_SetArgsError((PyObject *) self, "putAttribute", args);
          return NULL;
        }

        static PyObject *t_SegmentInfo_setCodec(t_SegmentInfo *self, PyObject *arg)
        {
          ::org::apache::lucene::codecs::Codec a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::codecs::Codec::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setCodec(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setCodec", arg);
          return NULL;
        }

        static PyObject *t_SegmentInfo_setFiles(t_SegmentInfo *self, PyObject *arg)
        {
          ::java::util::Set a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArg(arg, "K", ::java::util::Set::initializeClass, &a0, &p0, ::java::util::t_Set::parameters_))
          {
            OBJ_CALL(self->object.setFiles(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setFiles", arg);
          return NULL;
        }

        static PyObject *t_SegmentInfo_setVersion(t_SegmentInfo *self, PyObject *arg)
        {
          ::org::apache::lucene::util::Version a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::util::Version::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setVersion(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setVersion", arg);
          return NULL;
        }

        static PyObject *t_SegmentInfo_toString(t_SegmentInfo *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }
            break;
           case 2:
            {
              ::org::apache::lucene::store::Directory a0((jobject) NULL);
              jint a1;
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "kI", ::org::apache::lucene::store::Directory::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = self->object.toString(a0, a1));
                return j2p(result);
              }
            }
          }

          return callSuper(&PY_TYPE(SegmentInfo), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_SegmentInfo_get__dir(t_SegmentInfo *self, void *data)
        {
          ::org::apache::lucene::store::Directory value((jobject) NULL);
          OBJ_CALL(value = self->object._get_dir());
          return ::org::apache::lucene::store::t_Directory::wrap_Object(value);
        }

        static PyObject *t_SegmentInfo_get__name(t_SegmentInfo *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object._get_name());
          return j2p(value);
        }

        static PyObject *t_SegmentInfo_get__codec(t_SegmentInfo *self, void *data)
        {
          ::org::apache::lucene::codecs::Codec value((jobject) NULL);
          OBJ_CALL(value = self->object.getCodec());
          return ::org::apache::lucene::codecs::t_Codec::wrap_Object(value);
        }
        static int t_SegmentInfo_set__codec(t_SegmentInfo *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::codecs::Codec value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::codecs::Codec::initializeClass, &value))
            {
              INT_CALL(self->object.setCodec(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "codec", arg);
          return -1;
        }

        static PyObject *t_SegmentInfo_get__diagnostics(t_SegmentInfo *self, void *data)
        {
          ::java::util::Map value((jobject) NULL);
          OBJ_CALL(value = self->object.getDiagnostics());
          return ::java::util::t_Map::wrap_Object(value);
        }

        static PyObject *t_SegmentInfo_get__docCount(t_SegmentInfo *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getDocCount());
          return PyInt_FromLong((long) value);
        }

        static PyObject *t_SegmentInfo_get__useCompoundFile(t_SegmentInfo *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.getUseCompoundFile());
          Py_RETURN_BOOL(value);
        }

        static PyObject *t_SegmentInfo_get__version(t_SegmentInfo *self, void *data)
        {
          ::org::apache::lucene::util::Version value((jobject) NULL);
          OBJ_CALL(value = self->object.getVersion());
          return ::org::apache::lucene::util::t_Version::wrap_Object(value);
        }
        static int t_SegmentInfo_set__version(t_SegmentInfo *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::util::Version value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::util::Version::initializeClass, &value))
            {
              INT_CALL(self->object.setVersion(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "version", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/LongField.h"
#include "org/apache/lucene/document/FieldType.h"
#include "org/apache/lucene/document/Field$Store.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *LongField::class$ = NULL;
        jmethodID *LongField::mids$ = NULL;
        bool LongField::live$ = false;
        ::org::apache::lucene::document::FieldType *LongField::TYPE_NOT_STORED = NULL;
        ::org::apache::lucene::document::FieldType *LongField::TYPE_STORED = NULL;

        jclass LongField::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/LongField");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_45798648] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;JLorg/apache/lucene/document/Field$Store;)V");
            mids$[mid_init$_4cb133a7] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;JLorg/apache/lucene/document/FieldType;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            TYPE_NOT_STORED = new ::org::apache::lucene::document::FieldType(env->getStaticObjectField(cls, "TYPE_NOT_STORED", "Lorg/apache/lucene/document/FieldType;"));
            TYPE_STORED = new ::org::apache::lucene::document::FieldType(env->getStaticObjectField(cls, "TYPE_STORED", "Lorg/apache/lucene/document/FieldType;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        LongField::LongField(const ::java::lang::String & a0, jlong a1, const ::org::apache::lucene::document::Field$Store & a2) : ::org::apache::lucene::document::Field(env->newObject(initializeClass, &mids$, mid_init$_45798648, a0.this$, a1, a2.this$)) {}

        LongField::LongField(const ::java::lang::String & a0, jlong a1, const ::org::apache::lucene::document::FieldType & a2) : ::org::apache::lucene::document::Field(env->newObject(initializeClass, &mids$, mid_init$_4cb133a7, a0.this$, a1, a2.this$)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_LongField_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_LongField_instance_(PyTypeObject *type, PyObject *arg);
        static int t_LongField_init_(t_LongField *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_LongField__methods_[] = {
          DECLARE_METHOD(t_LongField, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LongField, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(LongField, t_LongField, ::org::apache::lucene::document::Field, LongField, t_LongField_init_, 0, 0, 0, 0, 0);

        void t_LongField::install(PyObject *module)
        {
          installType(&PY_TYPE(LongField), module, "LongField", 0);
        }

        void t_LongField::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(LongField).tp_dict, "class_", make_descriptor(LongField::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(LongField).tp_dict, "wrapfn_", make_descriptor(t_LongField::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(LongField).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(LongField::initializeClass);
          PyDict_SetItemString(PY_TYPE(LongField).tp_dict, "TYPE_NOT_STORED", make_descriptor(::org::apache::lucene::document::t_FieldType::wrap_Object(*LongField::TYPE_NOT_STORED)));
          PyDict_SetItemString(PY_TYPE(LongField).tp_dict, "TYPE_STORED", make_descriptor(::org::apache::lucene::document::t_FieldType::wrap_Object(*LongField::TYPE_STORED)));
        }

        static PyObject *t_LongField_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, LongField::initializeClass, 1)))
            return NULL;
          return t_LongField::wrap_Object(LongField(((t_LongField *) arg)->object.this$));
        }
        static PyObject *t_LongField_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, LongField::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_LongField_init_(t_LongField *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 3:
            {
              ::java::lang::String a0((jobject) NULL);
              jlong a1;
              ::org::apache::lucene::document::Field$Store a2((jobject) NULL);
              PyTypeObject **p2;
              LongField object((jobject) NULL);

              if (!parseArgs(args, "sJK", ::org::apache::lucene::document::Field$Store::initializeClass, &a0, &a1, &a2, &p2, ::org::apache::lucene::document::t_Field$Store::parameters_))
              {
                INT_CALL(object = LongField(a0, a1, a2));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              jlong a1;
              ::org::apache::lucene::document::FieldType a2((jobject) NULL);
              LongField object((jobject) NULL);

              if (!parseArgs(args, "sJk", ::org::apache::lucene::document::FieldType::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = LongField(a0, a1, a2));
                self->object = object;
                break;
              }
            }
           default:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/lv/LatvianAnalyzer.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace lv {

          ::java::lang::Class *LatvianAnalyzer::class$ = NULL;
          jmethodID *LatvianAnalyzer::mids$ = NULL;
          bool LatvianAnalyzer::live$ = false;
          ::java::lang::String *LatvianAnalyzer::DEFAULT_STOPWORD_FILE = NULL;

          jclass LatvianAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/lv/LatvianAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_6d1f9881] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_0d96cf33] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;)V");
              mids$[mid_init$_3ea629c6] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/util/CharArraySet;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_83eafe28] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_c9d7e4a3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_getDefaultStopSet_d2d3505c] = env->getStaticMethodID(cls, "getDefaultStopSet", "()Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_STOPWORD_FILE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_STOPWORD_FILE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          LatvianAnalyzer::LatvianAnalyzer() : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          LatvianAnalyzer::LatvianAnalyzer(const ::org::apache::lucene::analysis::util::CharArraySet & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_6d1f9881, a0.this$)) {}

          LatvianAnalyzer::LatvianAnalyzer(const ::org::apache::lucene::util::Version & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_0d96cf33, a0.this$)) {}

          LatvianAnalyzer::LatvianAnalyzer(const ::org::apache::lucene::analysis::util::CharArraySet & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_3ea629c6, a0.this$, a1.this$)) {}

          LatvianAnalyzer::LatvianAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_83eafe28, a0.this$, a1.this$)) {}

          LatvianAnalyzer::LatvianAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1, const ::org::apache::lucene::analysis::util::CharArraySet & a2) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_c9d7e4a3, a0.this$, a1.this$, a2.this$)) {}

          ::org::apache::lucene::analysis::util::CharArraySet LatvianAnalyzer::getDefaultStopSet()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getDefaultStopSet_d2d3505c]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace lv {
          static PyObject *t_LatvianAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LatvianAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_LatvianAnalyzer_init_(t_LatvianAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_LatvianAnalyzer_getDefaultStopSet(PyTypeObject *type);
          static PyObject *t_LatvianAnalyzer_get__defaultStopSet(t_LatvianAnalyzer *self, void *data);
          static PyGetSetDef t_LatvianAnalyzer__fields_[] = {
            DECLARE_GET_FIELD(t_LatvianAnalyzer, defaultStopSet),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_LatvianAnalyzer__methods_[] = {
            DECLARE_METHOD(t_LatvianAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LatvianAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LatvianAnalyzer, getDefaultStopSet, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(LatvianAnalyzer, t_LatvianAnalyzer, ::org::apache::lucene::analysis::util::StopwordAnalyzerBase, LatvianAnalyzer, t_LatvianAnalyzer_init_, 0, 0, t_LatvianAnalyzer__fields_, 0, 0);

          void t_LatvianAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(LatvianAnalyzer), module, "LatvianAnalyzer", 0);
          }

          void t_LatvianAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(LatvianAnalyzer).tp_dict, "class_", make_descriptor(LatvianAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(LatvianAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_LatvianAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(LatvianAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(LatvianAnalyzer::initializeClass);
            PyDict_SetItemString(PY_TYPE(LatvianAnalyzer).tp_dict, "DEFAULT_STOPWORD_FILE", make_descriptor(j2p(*LatvianAnalyzer::DEFAULT_STOPWORD_FILE)));
          }

          static PyObject *t_LatvianAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LatvianAnalyzer::initializeClass, 1)))
              return NULL;
            return t_LatvianAnalyzer::wrap_Object(LatvianAnalyzer(((t_LatvianAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_LatvianAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LatvianAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_LatvianAnalyzer_init_(t_LatvianAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                LatvianAnalyzer object((jobject) NULL);

                INT_CALL(object = LatvianAnalyzer());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                ::org::apache::lucene::analysis::util::CharArraySet a0((jobject) NULL);
                PyTypeObject **p0;
                LatvianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = LatvianAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                LatvianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::util::Version::initializeClass, &a0))
                {
                  INT_CALL(object = LatvianAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::analysis::util::CharArraySet a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                LatvianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = LatvianAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                LatvianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "kK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = LatvianAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                ::org::apache::lucene::analysis::util::CharArraySet a2((jobject) NULL);
                PyTypeObject **p2;
                LatvianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "kKK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_, &a2, &p2, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = LatvianAnalyzer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_LatvianAnalyzer_getDefaultStopSet(PyTypeObject *type)
          {
            ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::lv::LatvianAnalyzer::getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_LatvianAnalyzer_get__defaultStopSet(t_LatvianAnalyzer *self, void *data)
          {
            ::org::apache::lucene::analysis::util::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/classic/QueryParserBase$MethodRemovedUseAnother.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace classic {

          ::java::lang::Class *QueryParserBase$MethodRemovedUseAnother::class$ = NULL;
          jmethodID *QueryParserBase$MethodRemovedUseAnother::mids$ = NULL;
          bool QueryParserBase$MethodRemovedUseAnother::live$ = false;

          jclass QueryParserBase$MethodRemovedUseAnother::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/classic/QueryParserBase$MethodRemovedUseAnother");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          QueryParserBase$MethodRemovedUseAnother::QueryParserBase$MethodRemovedUseAnother() : ::java::lang::Throwable(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace classic {
          static PyObject *t_QueryParserBase$MethodRemovedUseAnother_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_QueryParserBase$MethodRemovedUseAnother_instance_(PyTypeObject *type, PyObject *arg);
          static int t_QueryParserBase$MethodRemovedUseAnother_init_(t_QueryParserBase$MethodRemovedUseAnother *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_QueryParserBase$MethodRemovedUseAnother__methods_[] = {
            DECLARE_METHOD(t_QueryParserBase$MethodRemovedUseAnother, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_QueryParserBase$MethodRemovedUseAnother, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(QueryParserBase$MethodRemovedUseAnother, t_QueryParserBase$MethodRemovedUseAnother, ::java::lang::Throwable, QueryParserBase$MethodRemovedUseAnother, t_QueryParserBase$MethodRemovedUseAnother_init_, 0, 0, 0, 0, 0);

          void t_QueryParserBase$MethodRemovedUseAnother::install(PyObject *module)
          {
            installType(&PY_TYPE(QueryParserBase$MethodRemovedUseAnother), module, "QueryParserBase$MethodRemovedUseAnother", 0);
          }

          void t_QueryParserBase$MethodRemovedUseAnother::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(QueryParserBase$MethodRemovedUseAnother).tp_dict, "class_", make_descriptor(QueryParserBase$MethodRemovedUseAnother::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(QueryParserBase$MethodRemovedUseAnother).tp_dict, "wrapfn_", make_descriptor(t_QueryParserBase$MethodRemovedUseAnother::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(QueryParserBase$MethodRemovedUseAnother).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_QueryParserBase$MethodRemovedUseAnother_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, QueryParserBase$MethodRemovedUseAnother::initializeClass, 1)))
              return NULL;
            return t_QueryParserBase$MethodRemovedUseAnother::wrap_Object(QueryParserBase$MethodRemovedUseAnother(((t_QueryParserBase$MethodRemovedUseAnother *) arg)->object.this$));
          }
          static PyObject *t_QueryParserBase$MethodRemovedUseAnother_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, QueryParserBase$MethodRemovedUseAnother::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_QueryParserBase$MethodRemovedUseAnother_init_(t_QueryParserBase$MethodRemovedUseAnother *self, PyObject *args, PyObject *kwds)
          {
            QueryParserBase$MethodRemovedUseAnother object((jobject) NULL);

            INT_CALL(object = QueryParserBase$MethodRemovedUseAnother());
            self->object = object;

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/automaton/Automaton$Builder.h"
#include "org/apache/lucene/util/automaton/Automaton.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {

          ::java::lang::Class *Automaton$Builder::class$ = NULL;
          jmethodID *Automaton$Builder::mids$ = NULL;
          bool Automaton$Builder::live$ = false;

          jclass Automaton$Builder::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/automaton/Automaton$Builder");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_addTransition_d3236aa4] = env->getMethodID(cls, "addTransition", "(III)V");
              mids$[mid_addTransition_ca5a6f66] = env->getMethodID(cls, "addTransition", "(IIII)V");
              mids$[mid_copy_fc7cf394] = env->getMethodID(cls, "copy", "(Lorg/apache/lucene/util/automaton/Automaton;)V");
              mids$[mid_createState_54c6a179] = env->getMethodID(cls, "createState", "()I");
              mids$[mid_finish_9b0d5999] = env->getMethodID(cls, "finish", "()Lorg/apache/lucene/util/automaton/Automaton;");
              mids$[mid_getNumStates_54c6a179] = env->getMethodID(cls, "getNumStates", "()I");
              mids$[mid_isAccept_39c7bd30] = env->getMethodID(cls, "isAccept", "(I)Z");
              mids$[mid_setAccept_b3a85a05] = env->getMethodID(cls, "setAccept", "(IZ)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Automaton$Builder::Automaton$Builder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          void Automaton$Builder::addTransition(jint a0, jint a1, jint a2) const
          {
            env->callVoidMethod(this$, mids$[mid_addTransition_d3236aa4], a0, a1, a2);
          }

          void Automaton$Builder::addTransition(jint a0, jint a1, jint a2, jint a3) const
          {
            env->callVoidMethod(this$, mids$[mid_addTransition_ca5a6f66], a0, a1, a2, a3);
          }

          void Automaton$Builder::copy(const ::org::apache::lucene::util::automaton::Automaton & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_copy_fc7cf394], a0.this$);
          }

          jint Automaton$Builder::createState() const
          {
            return env->callIntMethod(this$, mids$[mid_createState_54c6a179]);
          }

          ::org::apache::lucene::util::automaton::Automaton Automaton$Builder::finish() const
          {
            return ::org::apache::lucene::util::automaton::Automaton(env->callObjectMethod(this$, mids$[mid_finish_9b0d5999]));
          }

          jint Automaton$Builder::getNumStates() const
          {
            return env->callIntMethod(this$, mids$[mid_getNumStates_54c6a179]);
          }

          jboolean Automaton$Builder::isAccept(jint a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_isAccept_39c7bd30], a0);
          }

          void Automaton$Builder::setAccept(jint a0, jboolean a1) const
          {
            env->callVoidMethod(this$, mids$[mid_setAccept_b3a85a05], a0, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {
          static PyObject *t_Automaton$Builder_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Automaton$Builder_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Automaton$Builder_init_(t_Automaton$Builder *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Automaton$Builder_addTransition(t_Automaton$Builder *self, PyObject *args);
          static PyObject *t_Automaton$Builder_copy(t_Automaton$Builder *self, PyObject *arg);
          static PyObject *t_Automaton$Builder_createState(t_Automaton$Builder *self);
          static PyObject *t_Automaton$Builder_finish(t_Automaton$Builder *self);
          static PyObject *t_Automaton$Builder_getNumStates(t_Automaton$Builder *self);
          static PyObject *t_Automaton$Builder_isAccept(t_Automaton$Builder *self, PyObject *arg);
          static PyObject *t_Automaton$Builder_setAccept(t_Automaton$Builder *self, PyObject *args);
          static PyObject *t_Automaton$Builder_get__numStates(t_Automaton$Builder *self, void *data);
          static PyGetSetDef t_Automaton$Builder__fields_[] = {
            DECLARE_GET_FIELD(t_Automaton$Builder, numStates),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Automaton$Builder__methods_[] = {
            DECLARE_METHOD(t_Automaton$Builder, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Automaton$Builder, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Automaton$Builder, addTransition, METH_VARARGS),
            DECLARE_METHOD(t_Automaton$Builder, copy, METH_O),
            DECLARE_METHOD(t_Automaton$Builder, createState, METH_NOARGS),
            DECLARE_METHOD(t_Automaton$Builder, finish, METH_NOARGS),
            DECLARE_METHOD(t_Automaton$Builder, getNumStates, METH_NOARGS),
            DECLARE_METHOD(t_Automaton$Builder, isAccept, METH_O),
            DECLARE_METHOD(t_Automaton$Builder, setAccept, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Automaton$Builder, t_Automaton$Builder, ::java::lang::Object, Automaton$Builder, t_Automaton$Builder_init_, 0, 0, t_Automaton$Builder__fields_, 0, 0);

          void t_Automaton$Builder::install(PyObject *module)
          {
            installType(&PY_TYPE(Automaton$Builder), module, "Automaton$Builder", 0);
          }

          void t_Automaton$Builder::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Automaton$Builder).tp_dict, "class_", make_descriptor(Automaton$Builder::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Automaton$Builder).tp_dict, "wrapfn_", make_descriptor(t_Automaton$Builder::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Automaton$Builder).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Automaton$Builder_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Automaton$Builder::initializeClass, 1)))
              return NULL;
            return t_Automaton$Builder::wrap_Object(Automaton$Builder(((t_Automaton$Builder *) arg)->object.this$));
          }
          static PyObject *t_Automaton$Builder_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Automaton$Builder::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Automaton$Builder_init_(t_Automaton$Builder *self, PyObject *args, PyObject *kwds)
          {
            Automaton$Builder object((jobject) NULL);

            INT_CALL(object = Automaton$Builder());
            self->object = object;

            return 0;
          }

          static PyObject *t_Automaton$Builder_addTransition(t_Automaton$Builder *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 3:
              {
                jint a0;
                jint a1;
                jint a2;

                if (!parseArgs(args, "III", &a0, &a1, &a2))
                {
                  OBJ_CALL(self->object.addTransition(a0, a1, a2));
                  Py_RETURN_NONE;
                }
              }
              break;
             case 4:
              {
                jint a0;
                jint a1;
                jint a2;
                jint a3;

                if (!parseArgs(args, "IIII", &a0, &a1, &a2, &a3))
                {
                  OBJ_CALL(self->object.addTransition(a0, a1, a2, a3));
                  Py_RETURN_NONE;
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "addTransition", args);
            return NULL;
          }

          static PyObject *t_Automaton$Builder_copy(t_Automaton$Builder *self, PyObject *arg)
          {
            ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0))
            {
              OBJ_CALL(self->object.copy(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "copy", arg);
            return NULL;
          }

          static PyObject *t_Automaton$Builder_createState(t_Automaton$Builder *self)
          {
            jint result;
            OBJ_CALL(result = self->object.createState());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_Automaton$Builder_finish(t_Automaton$Builder *self)
          {
            ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);
            OBJ_CALL(result = self->object.finish());
            return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
          }

          static PyObject *t_Automaton$Builder_getNumStates(t_Automaton$Builder *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getNumStates());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_Automaton$Builder_isAccept(t_Automaton$Builder *self, PyObject *arg)
          {
            jint a0;
            jboolean result;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.isAccept(a0));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError((PyObject *) self, "isAccept", arg);
            return NULL;
          }

          static PyObject *t_Automaton$Builder_setAccept(t_Automaton$Builder *self, PyObject *args)
          {
            jint a0;
            jboolean a1;

            if (!parseArgs(args, "IZ", &a0, &a1))
            {
              OBJ_CALL(self->object.setAccept(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setAccept", args);
            return NULL;
          }

          static PyObject *t_Automaton$Builder_get__numStates(t_Automaton$Builder *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getNumStates());
            return PyInt_FromLong((long) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax.h"
#include "java/lang/CharSequence.h"
#include "org/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax$Type.h"
#include "java/util/Locale.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace parser {

              ::java::lang::Class *EscapeQuerySyntax::class$ = NULL;
              jmethodID *EscapeQuerySyntax::mids$ = NULL;
              bool EscapeQuerySyntax::live$ = false;

              jclass EscapeQuerySyntax::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_escape_dd58ce7f] = env->getMethodID(cls, "escape", "(Ljava/lang/CharSequence;Ljava/util/Locale;Lorg/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax$Type;)Ljava/lang/CharSequence;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              ::java::lang::CharSequence EscapeQuerySyntax::escape(const ::java::lang::CharSequence & a0, const ::java::util::Locale & a1, const ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax$Type & a2) const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_escape_dd58ce7f], a0.this$, a1.this$, a2.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace parser {
              static PyObject *t_EscapeQuerySyntax_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_EscapeQuerySyntax_instance_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_EscapeQuerySyntax_escape(t_EscapeQuerySyntax *self, PyObject *args);

              static PyMethodDef t_EscapeQuerySyntax__methods_[] = {
                DECLARE_METHOD(t_EscapeQuerySyntax, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_EscapeQuerySyntax, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_EscapeQuerySyntax, escape, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(EscapeQuerySyntax, t_EscapeQuerySyntax, ::java::lang::Object, EscapeQuerySyntax, abstract_init, 0, 0, 0, 0, 0);

              void t_EscapeQuerySyntax::install(PyObject *module)
              {
                installType(&PY_TYPE(EscapeQuerySyntax), module, "EscapeQuerySyntax", 0);
                PyDict_SetItemString(PY_TYPE(EscapeQuerySyntax).tp_dict, "Type", make_descriptor(&PY_TYPE(EscapeQuerySyntax$Type)));
              }

              void t_EscapeQuerySyntax::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(EscapeQuerySyntax).tp_dict, "class_", make_descriptor(EscapeQuerySyntax::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(EscapeQuerySyntax).tp_dict, "wrapfn_", make_descriptor(t_EscapeQuerySyntax::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(EscapeQuerySyntax).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_EscapeQuerySyntax_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, EscapeQuerySyntax::initializeClass, 1)))
                  return NULL;
                return t_EscapeQuerySyntax::wrap_Object(EscapeQuerySyntax(((t_EscapeQuerySyntax *) arg)->object.this$));
              }
              static PyObject *t_EscapeQuerySyntax_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, EscapeQuerySyntax::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static PyObject *t_EscapeQuerySyntax_escape(t_EscapeQuerySyntax *self, PyObject *args)
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                ::java::util::Locale a1((jobject) NULL);
                ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax$Type a2((jobject) NULL);
                PyTypeObject **p2;
                ::java::lang::CharSequence result((jobject) NULL);

                if (!parseArgs(args, "OkK", &::java::lang::PY_TYPE(CharSequence), ::java::util::Locale::initializeClass, ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax$Type::initializeClass, &a0, &a1, &a2, &p2, ::org::apache::lucene::queryparser::flexible::core::parser::t_EscapeQuerySyntax$Type::parameters_))
                {
                  OBJ_CALL(result = self->object.escape(a0, a1, a2));
                  return ::java::lang::t_CharSequence::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "escape", args);
                return NULL;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/highlight/SimpleSpanFragmenter.h"
#include "org/apache/lucene/search/highlight/QueryScorer.h"
#include "org/apache/lucene/search/highlight/Fragmenter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {

          ::java::lang::Class *SimpleSpanFragmenter::class$ = NULL;
          jmethodID *SimpleSpanFragmenter::mids$ = NULL;
          bool SimpleSpanFragmenter::live$ = false;

          jclass SimpleSpanFragmenter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/highlight/SimpleSpanFragmenter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_fe38f734] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/highlight/QueryScorer;)V");
              mids$[mid_init$_14d972ea] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/highlight/QueryScorer;I)V");
              mids$[mid_isNewFragment_54c6a16a] = env->getMethodID(cls, "isNewFragment", "()Z");
              mids$[mid_start_7d0c5392] = env->getMethodID(cls, "start", "(Ljava/lang/String;Lorg/apache/lucene/analysis/TokenStream;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SimpleSpanFragmenter::SimpleSpanFragmenter(const ::org::apache::lucene::search::highlight::QueryScorer & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_fe38f734, a0.this$)) {}

          SimpleSpanFragmenter::SimpleSpanFragmenter(const ::org::apache::lucene::search::highlight::QueryScorer & a0, jint a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_14d972ea, a0.this$, a1)) {}

          jboolean SimpleSpanFragmenter::isNewFragment() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isNewFragment_54c6a16a]);
          }

          void SimpleSpanFragmenter::start(const ::java::lang::String & a0, const ::org::apache::lucene::analysis::TokenStream & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_start_7d0c5392], a0.this$, a1.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {
          static PyObject *t_SimpleSpanFragmenter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SimpleSpanFragmenter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SimpleSpanFragmenter_init_(t_SimpleSpanFragmenter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SimpleSpanFragmenter_isNewFragment(t_SimpleSpanFragmenter *self);
          static PyObject *t_SimpleSpanFragmenter_start(t_SimpleSpanFragmenter *self, PyObject *args);
          static PyObject *t_SimpleSpanFragmenter_get__newFragment(t_SimpleSpanFragmenter *self, void *data);
          static PyGetSetDef t_SimpleSpanFragmenter__fields_[] = {
            DECLARE_GET_FIELD(t_SimpleSpanFragmenter, newFragment),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SimpleSpanFragmenter__methods_[] = {
            DECLARE_METHOD(t_SimpleSpanFragmenter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SimpleSpanFragmenter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SimpleSpanFragmenter, isNewFragment, METH_NOARGS),
            DECLARE_METHOD(t_SimpleSpanFragmenter, start, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SimpleSpanFragmenter, t_SimpleSpanFragmenter, ::java::lang::Object, SimpleSpanFragmenter, t_SimpleSpanFragmenter_init_, 0, 0, t_SimpleSpanFragmenter__fields_, 0, 0);

          void t_SimpleSpanFragmenter::install(PyObject *module)
          {
            installType(&PY_TYPE(SimpleSpanFragmenter), module, "SimpleSpanFragmenter", 0);
          }

          void t_SimpleSpanFragmenter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SimpleSpanFragmenter).tp_dict, "class_", make_descriptor(SimpleSpanFragmenter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SimpleSpanFragmenter).tp_dict, "wrapfn_", make_descriptor(t_SimpleSpanFragmenter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SimpleSpanFragmenter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SimpleSpanFragmenter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SimpleSpanFragmenter::initializeClass, 1)))
              return NULL;
            return t_SimpleSpanFragmenter::wrap_Object(SimpleSpanFragmenter(((t_SimpleSpanFragmenter *) arg)->object.this$));
          }
          static PyObject *t_SimpleSpanFragmenter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SimpleSpanFragmenter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SimpleSpanFragmenter_init_(t_SimpleSpanFragmenter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::search::highlight::QueryScorer a0((jobject) NULL);
                SimpleSpanFragmenter object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::search::highlight::QueryScorer::initializeClass, &a0))
                {
                  INT_CALL(object = SimpleSpanFragmenter(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::search::highlight::QueryScorer a0((jobject) NULL);
                jint a1;
                SimpleSpanFragmenter object((jobject) NULL);

                if (!parseArgs(args, "kI", ::org::apache::lucene::search::highlight::QueryScorer::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = SimpleSpanFragmenter(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SimpleSpanFragmenter_isNewFragment(t_SimpleSpanFragmenter *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isNewFragment());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_SimpleSpanFragmenter_start(t_SimpleSpanFragmenter *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);

            if (!parseArgs(args, "sk", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.start(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "start", args);
            return NULL;
          }

          static PyObject *t_SimpleSpanFragmenter_get__newFragment(t_SimpleSpanFragmenter *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isNewFragment());
            Py_RETURN_BOOL(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/el/GreekLowerCaseFilterFactory.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/analysis/util/MultiTermAwareComponent.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/util/AbstractAnalysisFactory.h"
#include "org/apache/lucene/analysis/el/GreekLowerCaseFilter.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace el {

          ::java::lang::Class *GreekLowerCaseFilterFactory::class$ = NULL;
          jmethodID *GreekLowerCaseFilterFactory::mids$ = NULL;
          bool GreekLowerCaseFilterFactory::live$ = false;

          jclass GreekLowerCaseFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/el/GreekLowerCaseFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_ce990bd7] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/el/GreekLowerCaseFilter;");
              mids$[mid_getMultiTermComponent_0a3f1d72] = env->getMethodID(cls, "getMultiTermComponent", "()Lorg/apache/lucene/analysis/util/AbstractAnalysisFactory;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          GreekLowerCaseFilterFactory::GreekLowerCaseFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::el::GreekLowerCaseFilter GreekLowerCaseFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::el::GreekLowerCaseFilter(env->callObjectMethod(this$, mids$[mid_create_ce990bd7], a0.this$));
          }

          ::org::apache::lucene::analysis::util::AbstractAnalysisFactory GreekLowerCaseFilterFactory::getMultiTermComponent() const
          {
            return ::org::apache::lucene::analysis::util::AbstractAnalysisFactory(env->callObjectMethod(this$, mids$[mid_getMultiTermComponent_0a3f1d72]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace el {
          static PyObject *t_GreekLowerCaseFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GreekLowerCaseFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_GreekLowerCaseFilterFactory_init_(t_GreekLowerCaseFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_GreekLowerCaseFilterFactory_create(t_GreekLowerCaseFilterFactory *self, PyObject *args);
          static PyObject *t_GreekLowerCaseFilterFactory_getMultiTermComponent(t_GreekLowerCaseFilterFactory *self);
          static PyObject *t_GreekLowerCaseFilterFactory_get__multiTermComponent(t_GreekLowerCaseFilterFactory *self, void *data);
          static PyGetSetDef t_GreekLowerCaseFilterFactory__fields_[] = {
            DECLARE_GET_FIELD(t_GreekLowerCaseFilterFactory, multiTermComponent),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_GreekLowerCaseFilterFactory__methods_[] = {
            DECLARE_METHOD(t_GreekLowerCaseFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GreekLowerCaseFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GreekLowerCaseFilterFactory, create, METH_VARARGS),
            DECLARE_METHOD(t_GreekLowerCaseFilterFactory, getMultiTermComponent, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(GreekLowerCaseFilterFactory, t_GreekLowerCaseFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, GreekLowerCaseFilterFactory, t_GreekLowerCaseFilterFactory_init_, 0, 0, t_GreekLowerCaseFilterFactory__fields_, 0, 0);

          void t_GreekLowerCaseFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(GreekLowerCaseFilterFactory), module, "GreekLowerCaseFilterFactory", 0);
          }

          void t_GreekLowerCaseFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(GreekLowerCaseFilterFactory).tp_dict, "class_", make_descriptor(GreekLowerCaseFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(GreekLowerCaseFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_GreekLowerCaseFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(GreekLowerCaseFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_GreekLowerCaseFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GreekLowerCaseFilterFactory::initializeClass, 1)))
              return NULL;
            return t_GreekLowerCaseFilterFactory::wrap_Object(GreekLowerCaseFilterFactory(((t_GreekLowerCaseFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_GreekLowerCaseFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GreekLowerCaseFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_GreekLowerCaseFilterFactory_init_(t_GreekLowerCaseFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            GreekLowerCaseFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = GreekLowerCaseFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_GreekLowerCaseFilterFactory_create(t_GreekLowerCaseFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::el::GreekLowerCaseFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::el::t_GreekLowerCaseFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(GreekLowerCaseFilterFactory), (PyObject *) self, "create", args, 2);
          }

          static PyObject *t_GreekLowerCaseFilterFactory_getMultiTermComponent(t_GreekLowerCaseFilterFactory *self)
          {
            ::org::apache::lucene::analysis::util::AbstractAnalysisFactory result((jobject) NULL);
            OBJ_CALL(result = self->object.getMultiTermComponent());
            return ::org::apache::lucene::analysis::util::t_AbstractAnalysisFactory::wrap_Object(result);
          }

          static PyObject *t_GreekLowerCaseFilterFactory_get__multiTermComponent(t_GreekLowerCaseFilterFactory *self, void *data)
          {
            ::org::apache::lucene::analysis::util::AbstractAnalysisFactory value((jobject) NULL);
            OBJ_CALL(value = self->object.getMultiTermComponent());
            return ::org::apache::lucene::analysis::util::t_AbstractAnalysisFactory::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/classic/FastCharStream.h"
#include "java/io/Reader.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/queryparser/classic/CharStream.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace classic {

          ::java::lang::Class *FastCharStream::class$ = NULL;
          jmethodID *FastCharStream::mids$ = NULL;
          bool FastCharStream::live$ = false;

          jclass FastCharStream::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/classic/FastCharStream");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_cf2e3c10] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;)V");
              mids$[mid_BeginToken_54c6a173] = env->getMethodID(cls, "BeginToken", "()C");
              mids$[mid_Done_54c6a166] = env->getMethodID(cls, "Done", "()V");
              mids$[mid_GetImage_14c7b5c5] = env->getMethodID(cls, "GetImage", "()Ljava/lang/String;");
              mids$[mid_GetSuffix_b4292e99] = env->getMethodID(cls, "GetSuffix", "(I)[C");
              mids$[mid_backup_39c7bd3c] = env->getMethodID(cls, "backup", "(I)V");
              mids$[mid_getBeginColumn_54c6a179] = env->getMethodID(cls, "getBeginColumn", "()I");
              mids$[mid_getBeginLine_54c6a179] = env->getMethodID(cls, "getBeginLine", "()I");
              mids$[mid_getColumn_54c6a179] = env->getMethodID(cls, "getColumn", "()I");
              mids$[mid_getEndColumn_54c6a179] = env->getMethodID(cls, "getEndColumn", "()I");
              mids$[mid_getEndLine_54c6a179] = env->getMethodID(cls, "getEndLine", "()I");
              mids$[mid_getLine_54c6a179] = env->getMethodID(cls, "getLine", "()I");
              mids$[mid_readChar_54c6a173] = env->getMethodID(cls, "readChar", "()C");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FastCharStream::FastCharStream(const ::java::io::Reader & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_cf2e3c10, a0.this$)) {}

          jchar FastCharStream::BeginToken() const
          {
            return env->callCharMethod(this$, mids$[mid_BeginToken_54c6a173]);
          }

          void FastCharStream::Done() const
          {
            env->callVoidMethod(this$, mids$[mid_Done_54c6a166]);
          }

          ::java::lang::String FastCharStream::GetImage() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_GetImage_14c7b5c5]));
          }

          JArray< jchar > FastCharStream::GetSuffix(jint a0) const
          {
            return JArray< jchar >(env->callObjectMethod(this$, mids$[mid_GetSuffix_b4292e99], a0));
          }

          void FastCharStream::backup(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_backup_39c7bd3c], a0);
          }

          jint FastCharStream::getBeginColumn() const
          {
            return env->callIntMethod(this$, mids$[mid_getBeginColumn_54c6a179]);
          }

          jint FastCharStream::getBeginLine() const
          {
            return env->callIntMethod(this$, mids$[mid_getBeginLine_54c6a179]);
          }

          jint FastCharStream::getColumn() const
          {
            return env->callIntMethod(this$, mids$[mid_getColumn_54c6a179]);
          }

          jint FastCharStream::getEndColumn() const
          {
            return env->callIntMethod(this$, mids$[mid_getEndColumn_54c6a179]);
          }

          jint FastCharStream::getEndLine() const
          {
            return env->callIntMethod(this$, mids$[mid_getEndLine_54c6a179]);
          }

          jint FastCharStream::getLine() const
          {
            return env->callIntMethod(this$, mids$[mid_getLine_54c6a179]);
          }

          jchar FastCharStream::readChar() const
          {
            return env->callCharMethod(this$, mids$[mid_readChar_54c6a173]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace classic {
          static PyObject *t_FastCharStream_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FastCharStream_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FastCharStream_init_(t_FastCharStream *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FastCharStream_BeginToken(t_FastCharStream *self);
          static PyObject *t_FastCharStream_Done(t_FastCharStream *self);
          static PyObject *t_FastCharStream_GetImage(t_FastCharStream *self);
          static PyObject *t_FastCharStream_GetSuffix(t_FastCharStream *self, PyObject *arg);
          static PyObject *t_FastCharStream_backup(t_FastCharStream *self, PyObject *arg);
          static PyObject *t_FastCharStream_getBeginColumn(t_FastCharStream *self);
          static PyObject *t_FastCharStream_getBeginLine(t_FastCharStream *self);
          static PyObject *t_FastCharStream_getColumn(t_FastCharStream *self);
          static PyObject *t_FastCharStream_getEndColumn(t_FastCharStream *self);
          static PyObject *t_FastCharStream_getEndLine(t_FastCharStream *self);
          static PyObject *t_FastCharStream_getLine(t_FastCharStream *self);
          static PyObject *t_FastCharStream_readChar(t_FastCharStream *self);
          static PyObject *t_FastCharStream_get__beginColumn(t_FastCharStream *self, void *data);
          static PyObject *t_FastCharStream_get__beginLine(t_FastCharStream *self, void *data);
          static PyObject *t_FastCharStream_get__column(t_FastCharStream *self, void *data);
          static PyObject *t_FastCharStream_get__endColumn(t_FastCharStream *self, void *data);
          static PyObject *t_FastCharStream_get__endLine(t_FastCharStream *self, void *data);
          static PyObject *t_FastCharStream_get__line(t_FastCharStream *self, void *data);
          static PyGetSetDef t_FastCharStream__fields_[] = {
            DECLARE_GET_FIELD(t_FastCharStream, beginColumn),
            DECLARE_GET_FIELD(t_FastCharStream, beginLine),
            DECLARE_GET_FIELD(t_FastCharStream, column),
            DECLARE_GET_FIELD(t_FastCharStream, endColumn),
            DECLARE_GET_FIELD(t_FastCharStream, endLine),
            DECLARE_GET_FIELD(t_FastCharStream, line),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_FastCharStream__methods_[] = {
            DECLARE_METHOD(t_FastCharStream, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FastCharStream, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FastCharStream, BeginToken, METH_NOARGS),
            DECLARE_METHOD(t_FastCharStream, Done, METH_NOARGS),
            DECLARE_METHOD(t_FastCharStream, GetImage, METH_NOARGS),
            DECLARE_METHOD(t_FastCharStream, GetSuffix, METH_O),
            DECLARE_METHOD(t_FastCharStream, backup, METH_O),
            DECLARE_METHOD(t_FastCharStream, getBeginColumn, METH_NOARGS),
            DECLARE_METHOD(t_FastCharStream, getBeginLine, METH_NOARGS),
            DECLARE_METHOD(t_FastCharStream, getColumn, METH_NOARGS),
            DECLARE_METHOD(t_FastCharStream, getEndColumn, METH_NOARGS),
            DECLARE_METHOD(t_FastCharStream, getEndLine, METH_NOARGS),
            DECLARE_METHOD(t_FastCharStream, getLine, METH_NOARGS),
            DECLARE_METHOD(t_FastCharStream, readChar, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FastCharStream, t_FastCharStream, ::java::lang::Object, FastCharStream, t_FastCharStream_init_, 0, 0, t_FastCharStream__fields_, 0, 0);

          void t_FastCharStream::install(PyObject *module)
          {
            installType(&PY_TYPE(FastCharStream), module, "FastCharStream", 0);
          }

          void t_FastCharStream::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FastCharStream).tp_dict, "class_", make_descriptor(FastCharStream::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FastCharStream).tp_dict, "wrapfn_", make_descriptor(t_FastCharStream::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FastCharStream).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FastCharStream_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FastCharStream::initializeClass, 1)))
              return NULL;
            return t_FastCharStream::wrap_Object(FastCharStream(((t_FastCharStream *) arg)->object.this$));
          }
          static PyObject *t_FastCharStream_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FastCharStream::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FastCharStream_init_(t_FastCharStream *self, PyObject *args, PyObject *kwds)
          {
            ::java::io::Reader a0((jobject) NULL);
            FastCharStream object((jobject) NULL);

            if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
            {
              INT_CALL(object = FastCharStream(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_FastCharStream_BeginToken(t_FastCharStream *self)
          {
            jchar result;
            OBJ_CALL(result = self->object.BeginToken());
            return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
          }

          static PyObject *t_FastCharStream_Done(t_FastCharStream *self)
          {
            OBJ_CALL(self->object.Done());
            Py_RETURN_NONE;
          }

          static PyObject *t_FastCharStream_GetImage(t_FastCharStream *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.GetImage());
            return j2p(result);
          }

          static PyObject *t_FastCharStream_GetSuffix(t_FastCharStream *self, PyObject *arg)
          {
            jint a0;
            JArray< jchar > result((jobject) NULL);

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.GetSuffix(a0));
              return result.wrap();
            }

            PyErr_SetArgsError((PyObject *) self, "GetSuffix", arg);
            return NULL;
          }

          static PyObject *t_FastCharStream_backup(t_FastCharStream *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.backup(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "backup", arg);
            return NULL;
          }

          static PyObject *t_FastCharStream_getBeginColumn(t_FastCharStream *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getBeginColumn());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_FastCharStream_getBeginLine(t_FastCharStream *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getBeginLine());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_FastCharStream_getColumn(t_FastCharStream *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getColumn());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_FastCharStream_getEndColumn(t_FastCharStream *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getEndColumn());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_FastCharStream_getEndLine(t_FastCharStream *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getEndLine());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_FastCharStream_getLine(t_FastCharStream *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getLine());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_FastCharStream_readChar(t_FastCharStream *self)
          {
            jchar result;
            OBJ_CALL(result = self->object.readChar());
            return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
          }

          static PyObject *t_FastCharStream_get__beginColumn(t_FastCharStream *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getBeginColumn());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_FastCharStream_get__beginLine(t_FastCharStream *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getBeginLine());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_FastCharStream_get__column(t_FastCharStream *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getColumn());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_FastCharStream_get__endColumn(t_FastCharStream *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getEndColumn());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_FastCharStream_get__endLine(t_FastCharStream *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getEndLine());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_FastCharStream_get__line(t_FastCharStream *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getLine());
            return PyInt_FromLong((long) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/highlight/TextFragment.h"
#include "java/lang/CharSequence.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {

          ::java::lang::Class *TextFragment::class$ = NULL;
          jmethodID *TextFragment::mids$ = NULL;
          bool TextFragment::live$ = false;

          jclass TextFragment::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/highlight/TextFragment");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_6cc8d7e2] = env->getMethodID(cls, "<init>", "(Ljava/lang/CharSequence;II)V");
              mids$[mid_follows_0335a786] = env->getMethodID(cls, "follows", "(Lorg/apache/lucene/search/highlight/TextFragment;)Z");
              mids$[mid_getFragNum_54c6a179] = env->getMethodID(cls, "getFragNum", "()I");
              mids$[mid_getScore_54c6a176] = env->getMethodID(cls, "getScore", "()F");
              mids$[mid_merge_0335a78a] = env->getMethodID(cls, "merge", "(Lorg/apache/lucene/search/highlight/TextFragment;)V");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TextFragment::TextFragment(const ::java::lang::CharSequence & a0, jint a1, jint a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_6cc8d7e2, a0.this$, a1, a2)) {}

          jboolean TextFragment::follows(const TextFragment & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_follows_0335a786], a0.this$);
          }

          jint TextFragment::getFragNum() const
          {
            return env->callIntMethod(this$, mids$[mid_getFragNum_54c6a179]);
          }

          jfloat TextFragment::getScore() const
          {
            return env->callFloatMethod(this$, mids$[mid_getScore_54c6a176]);
          }

          void TextFragment::merge(const TextFragment & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_merge_0335a78a], a0.this$);
          }

          ::java::lang::String TextFragment::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {
          static PyObject *t_TextFragment_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TextFragment_instance_(PyTypeObject *type, PyObject *arg);
          static int t_TextFragment_init_(t_TextFragment *self, PyObject *args, PyObject *kwds);
          static PyObject *t_TextFragment_follows(t_TextFragment *self, PyObject *arg);
          static PyObject *t_TextFragment_getFragNum(t_TextFragment *self);
          static PyObject *t_TextFragment_getScore(t_TextFragment *self);
          static PyObject *t_TextFragment_merge(t_TextFragment *self, PyObject *arg);
          static PyObject *t_TextFragment_toString(t_TextFragment *self, PyObject *args);
          static PyObject *t_TextFragment_get__fragNum(t_TextFragment *self, void *data);
          static PyObject *t_TextFragment_get__score(t_TextFragment *self, void *data);
          static PyGetSetDef t_TextFragment__fields_[] = {
            DECLARE_GET_FIELD(t_TextFragment, fragNum),
            DECLARE_GET_FIELD(t_TextFragment, score),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_TextFragment__methods_[] = {
            DECLARE_METHOD(t_TextFragment, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TextFragment, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TextFragment, follows, METH_O),
            DECLARE_METHOD(t_TextFragment, getFragNum, METH_NOARGS),
            DECLARE_METHOD(t_TextFragment, getScore, METH_NOARGS),
            DECLARE_METHOD(t_TextFragment, merge, METH_O),
            DECLARE_METHOD(t_TextFragment, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(TextFragment, t_TextFragment, ::java::lang::Object, TextFragment, t_TextFragment_init_, 0, 0, t_TextFragment__fields_, 0, 0);

          void t_TextFragment::install(PyObject *module)
          {
            installType(&PY_TYPE(TextFragment), module, "TextFragment", 0);
          }

          void t_TextFragment::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(TextFragment).tp_dict, "class_", make_descriptor(TextFragment::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(TextFragment).tp_dict, "wrapfn_", make_descriptor(t_TextFragment::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(TextFragment).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TextFragment_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TextFragment::initializeClass, 1)))
              return NULL;
            return t_TextFragment::wrap_Object(TextFragment(((t_TextFragment *) arg)->object.this$));
          }
          static PyObject *t_TextFragment_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TextFragment::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_TextFragment_init_(t_TextFragment *self, PyObject *args, PyObject *kwds)
          {
            ::java::lang::CharSequence a0((jobject) NULL);
            jint a1;
            jint a2;
            TextFragment object((jobject) NULL);

            if (!parseArgs(args, "OII", &::java::lang::PY_TYPE(CharSequence), &a0, &a1, &a2))
            {
              INT_CALL(object = TextFragment(a0, a1, a2));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_TextFragment_follows(t_TextFragment *self, PyObject *arg)
          {
            TextFragment a0((jobject) NULL);
            jboolean result;

            if (!parseArg(arg, "k", TextFragment::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.follows(a0));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError((PyObject *) self, "follows", arg);
            return NULL;
          }

          static PyObject *t_TextFragment_getFragNum(t_TextFragment *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getFragNum());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_TextFragment_getScore(t_TextFragment *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getScore());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_TextFragment_merge(t_TextFragment *self, PyObject *arg)
          {
            TextFragment a0((jobject) NULL);

            if (!parseArg(arg, "k", TextFragment::initializeClass, &a0))
            {
              OBJ_CALL(self->object.merge(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "merge", arg);
            return NULL;
          }

          static PyObject *t_TextFragment_toString(t_TextFragment *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(TextFragment), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_TextFragment_get__fragNum(t_TextFragment *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getFragNum());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_TextFragment_get__score(t_TextFragment *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getScore());
            return PyFloat_FromDouble((double) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParserConstants.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace parser {

              ::java::lang::Class *StandardSyntaxParserConstants::class$ = NULL;
              jmethodID *StandardSyntaxParserConstants::mids$ = NULL;
              bool StandardSyntaxParserConstants::live$ = false;
              jint StandardSyntaxParserConstants::AND = (jint) 0;
              jint StandardSyntaxParserConstants::Boost = (jint) 0;
              jint StandardSyntaxParserConstants::CARAT = (jint) 0;
              jint StandardSyntaxParserConstants::DEFAULT = (jint) 0;
              jint StandardSyntaxParserConstants::EOF = (jint) 0;
              jint StandardSyntaxParserConstants::FUZZY_SLOP = (jint) 0;
              jint StandardSyntaxParserConstants::LPAREN = (jint) 0;
              jint StandardSyntaxParserConstants::MINUS = (jint) 0;
              jint StandardSyntaxParserConstants::NOT = (jint) 0;
              jint StandardSyntaxParserConstants::NUMBER = (jint) 0;
              jint StandardSyntaxParserConstants::OP_COLON = (jint) 0;
              jint StandardSyntaxParserConstants::OP_EQUAL = (jint) 0;
              jint StandardSyntaxParserConstants::OP_LESSTHAN = (jint) 0;
              jint StandardSyntaxParserConstants::OP_LESSTHANEQ = (jint) 0;
              jint StandardSyntaxParserConstants::OP_MORETHAN = (jint) 0;
              jint StandardSyntaxParserConstants::OP_MORETHANEQ = (jint) 0;
              jint StandardSyntaxParserConstants::OR = (jint) 0;
              jint StandardSyntaxParserConstants::PLUS = (jint) 0;
              jint StandardSyntaxParserConstants::QUOTED = (jint) 0;
              jint StandardSyntaxParserConstants::RANGEEX_END = (jint) 0;
              jint StandardSyntaxParserConstants::RANGEEX_START = (jint) 0;
              jint StandardSyntaxParserConstants::RANGEIN_END = (jint) 0;
              jint StandardSyntaxParserConstants::RANGEIN_START = (jint) 0;
              jint StandardSyntaxParserConstants::RANGE_GOOP = (jint) 0;
              jint StandardSyntaxParserConstants::RANGE_QUOTED = (jint) 0;
              jint StandardSyntaxParserConstants::RANGE_TO = (jint) 0;
              jint StandardSyntaxParserConstants::REGEXPTERM = (jint) 0;
              jint StandardSyntaxParserConstants::RPAREN = (jint) 0;
              jint StandardSyntaxParserConstants::Range = (jint) 0;
              jint StandardSyntaxParserConstants::TERM = (jint) 0;
              jint StandardSyntaxParserConstants::_ESCAPED_CHAR = (jint) 0;
              jint StandardSyntaxParserConstants::_NUM_CHAR = (jint) 0;
              jint StandardSyntaxParserConstants::_QUOTED_CHAR = (jint) 0;
              jint StandardSyntaxParserConstants::_TERM_CHAR = (jint) 0;
              jint StandardSyntaxParserConstants::_TERM_START_CHAR = (jint) 0;
              jint StandardSyntaxParserConstants::_WHITESPACE = (jint) 0;
              JArray< ::java::lang::String > *StandardSyntaxParserConstants::tokenImage = NULL;

              jclass StandardSyntaxParserConstants::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParserConstants");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  cls = (jclass) class$->this$;

                  AND = env->getStaticIntField(cls, "AND");
                  Boost = env->getStaticIntField(cls, "Boost");
                  CARAT = env->getStaticIntField(cls, "CARAT");
                  DEFAULT = env->getStaticIntField(cls, "DEFAULT");
                  EOF = env->getStaticIntField(cls, "EOF");
                  FUZZY_SLOP = env->getStaticIntField(cls, "FUZZY_SLOP");
                  LPAREN = env->getStaticIntField(cls, "LPAREN");
                  MINUS = env->getStaticIntField(cls, "MINUS");
                  NOT = env->getStaticIntField(cls, "NOT");
                  NUMBER = env->getStaticIntField(cls, "NUMBER");
                  OP_COLON = env->getStaticIntField(cls, "OP_COLON");
                  OP_EQUAL = env->getStaticIntField(cls, "OP_EQUAL");
                  OP_LESSTHAN = env->getStaticIntField(cls, "OP_LESSTHAN");
                  OP_LESSTHANEQ = env->getStaticIntField(cls, "OP_LESSTHANEQ");
                  OP_MORETHAN = env->getStaticIntField(cls, "OP_MORETHAN");
                  OP_MORETHANEQ = env->getStaticIntField(cls, "OP_MORETHANEQ");
                  OR = env->getStaticIntField(cls, "OR");
                  PLUS = env->getStaticIntField(cls, "PLUS");
                  QUOTED = env->getStaticIntField(cls, "QUOTED");
                  RANGEEX_END = env->getStaticIntField(cls, "RANGEEX_END");
                  RANGEEX_START = env->getStaticIntField(cls, "RANGEEX_START");
                  RANGEIN_END = env->getStaticIntField(cls, "RANGEIN_END");
                  RANGEIN_START = env->getStaticIntField(cls, "RANGEIN_START");
                  RANGE_GOOP = env->getStaticIntField(cls, "RANGE_GOOP");
                  RANGE_QUOTED = env->getStaticIntField(cls, "RANGE_QUOTED");
                  RANGE_TO = env->getStaticIntField(cls, "RANGE_TO");
                  REGEXPTERM = env->getStaticIntField(cls, "REGEXPTERM");
                  RPAREN = env->getStaticIntField(cls, "RPAREN");
                  Range = env->getStaticIntField(cls, "Range");
                  TERM = env->getStaticIntField(cls, "TERM");
                  _ESCAPED_CHAR = env->getStaticIntField(cls, "_ESCAPED_CHAR");
                  _NUM_CHAR = env->getStaticIntField(cls, "_NUM_CHAR");
                  _QUOTED_CHAR = env->getStaticIntField(cls, "_QUOTED_CHAR");
                  _TERM_CHAR = env->getStaticIntField(cls, "_TERM_CHAR");
                  _TERM_START_CHAR = env->getStaticIntField(cls, "_TERM_START_CHAR");
                  _WHITESPACE = env->getStaticIntField(cls, "_WHITESPACE");
                  tokenImage = new JArray< ::java::lang::String >(env->getStaticObjectField(cls, "tokenImage", "[Ljava/lang/String;"));
                  live$ = true;
                }
                return (jclass) class$->this$;
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace parser {
              static PyObject *t_StandardSyntaxParserConstants_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_StandardSyntaxParserConstants_instance_(PyTypeObject *type, PyObject *arg);

              static PyMethodDef t_StandardSyntaxParserConstants__methods_[] = {
                DECLARE_METHOD(t_StandardSyntaxParserConstants, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_StandardSyntaxParserConstants, instance_, METH_O | METH_CLASS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(StandardSyntaxParserConstants, t_StandardSyntaxParserConstants, ::java::lang::Object, StandardSyntaxParserConstants, abstract_init, 0, 0, 0, 0, 0);

              void t_StandardSyntaxParserConstants::install(PyObject *module)
              {
                installType(&PY_TYPE(StandardSyntaxParserConstants), module, "StandardSyntaxParserConstants", 0);
              }

              void t_StandardSyntaxParserConstants::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserConstants).tp_dict, "class_", make_descriptor(StandardSyntaxParserConstants::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserConstants).tp_dict, "wrapfn_", make_descriptor(t_StandardSyntaxParserConstants::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserConstants).tp_dict, "boxfn_", make_descriptor(boxObject));
                env->getClass(StandardSyntaxParserConstants::initializeClass);
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserConstants).tp_dict, "AND", make_descriptor(StandardSyntaxParserConstants::AND));
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserConstants).tp_dict, "Boost", make_descriptor(StandardSyntaxParserConstants::Boost));
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserConstants).tp_dict, "CARAT", make_descriptor(StandardSyntaxParserConstants::CARAT));
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserConstants).tp_dict, "DEFAULT", make_descriptor(StandardSyntaxParserConstants::DEFAULT));
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserConstants).tp_dict, "EOF", make_descriptor(StandardSyntaxParserConstants::EOF));
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserConstants).tp_dict, "FUZZY_SLOP", make_descriptor(StandardSyntaxParserConstants::FUZZY_SLOP));
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserConstants).tp_dict, "LPAREN", make_descriptor(StandardSyntaxParserConstants::LPAREN));
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserConstants).tp_dict, "MINUS", make_descriptor(StandardSyntaxParserConstants::MINUS));
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserConstants).tp_dict, "NOT", make_descriptor(StandardSyntaxParserConstants::NOT));
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserConstants).tp_dict, "NUMBER", make_descriptor(StandardSyntaxParserConstants::NUMBER));
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserConstants).tp_dict, "OP_COLON", make_descriptor(StandardSyntaxParserConstants::OP_COLON));
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserConstants).tp_dict, "OP_EQUAL", make_descriptor(StandardSyntaxParserConstants::OP_EQUAL));
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserConstants).tp_dict, "OP_LESSTHAN", make_descriptor(StandardSyntaxParserConstants::OP_LESSTHAN));
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserConstants).tp_dict, "OP_LESSTHANEQ", make_descriptor(StandardSyntaxParserConstants::OP_LESSTHANEQ));
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserConstants).tp_dict, "OP_MORETHAN", make_descriptor(StandardSyntaxParserConstants::OP_MORETHAN));
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserConstants).tp_dict, "OP_MORETHANEQ", make_descriptor(StandardSyntaxParserConstants::OP_MORETHANEQ));
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserConstants).tp_dict, "OR", make_descriptor(StandardSyntaxParserConstants::OR));
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserConstants).tp_dict, "PLUS", make_descriptor(StandardSyntaxParserConstants::PLUS));
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserConstants).tp_dict, "QUOTED", make_descriptor(StandardSyntaxParserConstants::QUOTED));
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserConstants).tp_dict, "RANGEEX_END", make_descriptor(StandardSyntaxParserConstants::RANGEEX_END));
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserConstants).tp_dict, "RANGEEX_START", make_descriptor(StandardSyntaxParserConstants::RANGEEX_START));
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserConstants).tp_dict, "RANGEIN_END", make_descriptor(StandardSyntaxParserConstants::RANGEIN_END));
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserConstants).tp_dict, "RANGEIN_START", make_descriptor(StandardSyntaxParserConstants::RANGEIN_START));
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserConstants).tp_dict, "RANGE_GOOP", make_descriptor(StandardSyntaxParserConstants::RANGE_GOOP));
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserConstants).tp_dict, "RANGE_QUOTED", make_descriptor(StandardSyntaxParserConstants::RANGE_QUOTED));
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserConstants).tp_dict, "RANGE_TO", make_descriptor(StandardSyntaxParserConstants::RANGE_TO));
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserConstants).tp_dict, "REGEXPTERM", make_descriptor(StandardSyntaxParserConstants::REGEXPTERM));
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserConstants).tp_dict, "RPAREN", make_descriptor(StandardSyntaxParserConstants::RPAREN));
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserConstants).tp_dict, "Range", make_descriptor(StandardSyntaxParserConstants::Range));
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserConstants).tp_dict, "TERM", make_descriptor(StandardSyntaxParserConstants::TERM));
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserConstants).tp_dict, "_ESCAPED_CHAR", make_descriptor(StandardSyntaxParserConstants::_ESCAPED_CHAR));
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserConstants).tp_dict, "_NUM_CHAR", make_descriptor(StandardSyntaxParserConstants::_NUM_CHAR));
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserConstants).tp_dict, "_QUOTED_CHAR", make_descriptor(StandardSyntaxParserConstants::_QUOTED_CHAR));
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserConstants).tp_dict, "_TERM_CHAR", make_descriptor(StandardSyntaxParserConstants::_TERM_CHAR));
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserConstants).tp_dict, "_TERM_START_CHAR", make_descriptor(StandardSyntaxParserConstants::_TERM_START_CHAR));
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserConstants).tp_dict, "_WHITESPACE", make_descriptor(StandardSyntaxParserConstants::_WHITESPACE));
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserConstants).tp_dict, "tokenImage", make_descriptor(JArray<jstring>(StandardSyntaxParserConstants::tokenImage->this$).wrap()));
              }

              static PyObject *t_StandardSyntaxParserConstants_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, StandardSyntaxParserConstants::initializeClass, 1)))
                  return NULL;
                return t_StandardSyntaxParserConstants::wrap_Object(StandardSyntaxParserConstants(((t_StandardSyntaxParserConstants *) arg)->object.this$));
              }
              static PyObject *t_StandardSyntaxParserConstants_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, StandardSyntaxParserConstants::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/IndexSearcher$LeafSlice.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *IndexSearcher$LeafSlice::class$ = NULL;
        jmethodID *IndexSearcher$LeafSlice::mids$ = NULL;
        bool IndexSearcher$LeafSlice::live$ = false;

        jclass IndexSearcher$LeafSlice::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/IndexSearcher$LeafSlice");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_683a6c7f] = env->getMethodID(cls, "<init>", "([Lorg/apache/lucene/index/AtomicReaderContext;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        IndexSearcher$LeafSlice::IndexSearcher$LeafSlice(const JArray< ::org::apache::lucene::index::AtomicReaderContext > & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_683a6c7f, a0.this$)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_IndexSearcher$LeafSlice_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexSearcher$LeafSlice_instance_(PyTypeObject *type, PyObject *arg);
        static int t_IndexSearcher$LeafSlice_init_(t_IndexSearcher$LeafSlice *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_IndexSearcher$LeafSlice__methods_[] = {
          DECLARE_METHOD(t_IndexSearcher$LeafSlice, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexSearcher$LeafSlice, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(IndexSearcher$LeafSlice, t_IndexSearcher$LeafSlice, ::java::lang::Object, IndexSearcher$LeafSlice, t_IndexSearcher$LeafSlice_init_, 0, 0, 0, 0, 0);

        void t_IndexSearcher$LeafSlice::install(PyObject *module)
        {
          installType(&PY_TYPE(IndexSearcher$LeafSlice), module, "IndexSearcher$LeafSlice", 0);
        }

        void t_IndexSearcher$LeafSlice::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(IndexSearcher$LeafSlice).tp_dict, "class_", make_descriptor(IndexSearcher$LeafSlice::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(IndexSearcher$LeafSlice).tp_dict, "wrapfn_", make_descriptor(t_IndexSearcher$LeafSlice::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(IndexSearcher$LeafSlice).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_IndexSearcher$LeafSlice_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IndexSearcher$LeafSlice::initializeClass, 1)))
            return NULL;
          return t_IndexSearcher$LeafSlice::wrap_Object(IndexSearcher$LeafSlice(((t_IndexSearcher$LeafSlice *) arg)->object.this$));
        }
        static PyObject *t_IndexSearcher$LeafSlice_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IndexSearcher$LeafSlice::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_IndexSearcher$LeafSlice_init_(t_IndexSearcher$LeafSlice *self, PyObject *args, PyObject *kwds)
        {
          JArray< ::org::apache::lucene::index::AtomicReaderContext > a0((jobject) NULL);
          IndexSearcher$LeafSlice object((jobject) NULL);

          if (!parseArgs(args, "[k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0))
          {
            INT_CALL(object = IndexSearcher$LeafSlice(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/TermStats.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {

        ::java::lang::Class *TermStats::class$ = NULL;
        jmethodID *TermStats::mids$ = NULL;
        jfieldID *TermStats::fids$ = NULL;
        bool TermStats::live$ = false;

        jclass TermStats::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/TermStats");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_03b232b5] = env->getMethodID(cls, "<init>", "(IJ)V");

            fids$ = new jfieldID[max_fid];
            fids$[fid_docFreq] = env->getFieldID(cls, "docFreq", "I");
            fids$[fid_totalTermFreq] = env->getFieldID(cls, "totalTermFreq", "J");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        TermStats::TermStats(jint a0, jlong a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_03b232b5, a0, a1)) {}

        jint TermStats::_get_docFreq() const
        {
          return env->getIntField(this$, fids$[fid_docFreq]);
        }

        jlong TermStats::_get_totalTermFreq() const
        {
          return env->getLongField(this$, fids$[fid_totalTermFreq]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        static PyObject *t_TermStats_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TermStats_instance_(PyTypeObject *type, PyObject *arg);
        static int t_TermStats_init_(t_TermStats *self, PyObject *args, PyObject *kwds);
        static PyObject *t_TermStats_get__docFreq(t_TermStats *self, void *data);
        static PyObject *t_TermStats_get__totalTermFreq(t_TermStats *self, void *data);

        static PyGetSetDef t_TermStats__fields_[] = {
          DECLARE_GET_FIELD(t_TermStats, docFreq),
          DECLARE_GET_FIELD(t_TermStats, totalTermFreq),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_TermStats__methods_[] = {
          DECLARE_METHOD(t_TermStats, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TermStats, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TermStats, t_TermStats, ::java::lang::Object, TermStats, t_TermStats_init_, 0, 0, t_TermStats__fields_, 0, 0);

        void t_TermStats::install(PyObject *module)
        {
          installType(&PY_TYPE(TermStats), module, "TermStats", 0);
        }

        void t_TermStats::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TermStats).tp_dict, "class_", make_descriptor(TermStats::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TermStats).tp_dict, "wrapfn_", make_descriptor(t_TermStats::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TermStats).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TermStats_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TermStats::initializeClass, 1)))
            return NULL;
          return t_TermStats::wrap_Object(TermStats(((t_TermStats *) arg)->object.this$));
        }
        static PyObject *t_TermStats_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TermStats::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_TermStats_init_(t_TermStats *self, PyObject *args, PyObject *kwds)
        {
          jint a0;
          jlong a1;
          TermStats object((jobject) NULL);

          if (!parseArgs(args, "IJ", &a0, &a1))
          {
            INT_CALL(object = TermStats(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_TermStats_get__docFreq(t_TermStats *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_docFreq());
          return PyInt_FromLong((long) value);
        }

        static PyObject *t_TermStats_get__totalTermFreq(t_TermStats *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object._get_totalTermFreq());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/expressions/js/VariableContext$Type.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {

          ::java::lang::Class *VariableContext$Type::class$ = NULL;
          jmethodID *VariableContext$Type::mids$ = NULL;
          bool VariableContext$Type::live$ = false;
          VariableContext$Type *VariableContext$Type::INT_INDEX = NULL;
          VariableContext$Type *VariableContext$Type::MEMBER = NULL;
          VariableContext$Type *VariableContext$Type::STR_INDEX = NULL;

          jclass VariableContext$Type::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/expressions/js/VariableContext$Type");

              mids$ = new jmethodID[max_mid];
              mids$[mid_valueOf_af8a4fdd] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/expressions/js/VariableContext$Type;");
              mids$[mid_values_eb78fcbf] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/expressions/js/VariableContext$Type;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              INT_INDEX = new VariableContext$Type(env->getStaticObjectField(cls, "INT_INDEX", "Lorg/apache/lucene/expressions/js/VariableContext$Type;"));
              MEMBER = new VariableContext$Type(env->getStaticObjectField(cls, "MEMBER", "Lorg/apache/lucene/expressions/js/VariableContext$Type;"));
              STR_INDEX = new VariableContext$Type(env->getStaticObjectField(cls, "STR_INDEX", "Lorg/apache/lucene/expressions/js/VariableContext$Type;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          VariableContext$Type VariableContext$Type::valueOf(const ::java::lang::String & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return VariableContext$Type(env->callStaticObjectMethod(cls, mids$[mid_valueOf_af8a4fdd], a0.this$));
          }

          JArray< VariableContext$Type > VariableContext$Type::values()
          {
            jclass cls = env->getClass(initializeClass);
            return JArray< VariableContext$Type >(env->callStaticObjectMethod(cls, mids$[mid_values_eb78fcbf]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {
          static PyObject *t_VariableContext$Type_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_VariableContext$Type_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_VariableContext$Type_of_(t_VariableContext$Type *self, PyObject *args);
          static PyObject *t_VariableContext$Type_valueOf(PyTypeObject *type, PyObject *args);
          static PyObject *t_VariableContext$Type_values(PyTypeObject *type);
          static PyObject *t_VariableContext$Type_get__parameters_(t_VariableContext$Type *self, void *data);
          static PyGetSetDef t_VariableContext$Type__fields_[] = {
            DECLARE_GET_FIELD(t_VariableContext$Type, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_VariableContext$Type__methods_[] = {
            DECLARE_METHOD(t_VariableContext$Type, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_VariableContext$Type, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_VariableContext$Type, of_, METH_VARARGS),
            DECLARE_METHOD(t_VariableContext$Type, valueOf, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_VariableContext$Type, values, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(VariableContext$Type, t_VariableContext$Type, ::java::lang::Enum, VariableContext$Type, abstract_init, 0, 0, t_VariableContext$Type__fields_, 0, 0);
          PyObject *t_VariableContext$Type::wrap_Object(const VariableContext$Type& object, PyTypeObject *p0)
          {
            PyObject *obj = t_VariableContext$Type::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_VariableContext$Type *self = (t_VariableContext$Type *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_VariableContext$Type::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_VariableContext$Type::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_VariableContext$Type *self = (t_VariableContext$Type *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_VariableContext$Type::install(PyObject *module)
          {
            installType(&PY_TYPE(VariableContext$Type), module, "VariableContext$Type", 0);
          }

          void t_VariableContext$Type::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(VariableContext$Type).tp_dict, "class_", make_descriptor(VariableContext$Type::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(VariableContext$Type).tp_dict, "wrapfn_", make_descriptor(t_VariableContext$Type::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(VariableContext$Type).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(VariableContext$Type::initializeClass);
            PyDict_SetItemString(PY_TYPE(VariableContext$Type).tp_dict, "INT_INDEX", make_descriptor(t_VariableContext$Type::wrap_Object(*VariableContext$Type::INT_INDEX)));
            PyDict_SetItemString(PY_TYPE(VariableContext$Type).tp_dict, "MEMBER", make_descriptor(t_VariableContext$Type::wrap_Object(*VariableContext$Type::MEMBER)));
            PyDict_SetItemString(PY_TYPE(VariableContext$Type).tp_dict, "STR_INDEX", make_descriptor(t_VariableContext$Type::wrap_Object(*VariableContext$Type::STR_INDEX)));
          }

          static PyObject *t_VariableContext$Type_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, VariableContext$Type::initializeClass, 1)))
              return NULL;
            return t_VariableContext$Type::wrap_Object(VariableContext$Type(((t_VariableContext$Type *) arg)->object.this$));
          }
          static PyObject *t_VariableContext$Type_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, VariableContext$Type::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_VariableContext$Type_of_(t_VariableContext$Type *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static PyObject *t_VariableContext$Type_valueOf(PyTypeObject *type, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            VariableContext$Type result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::expressions::js::VariableContext$Type::valueOf(a0));
              return t_VariableContext$Type::wrap_Object(result);
            }

            return callSuper(type, "valueOf", args, 2);
          }

          static PyObject *t_VariableContext$Type_values(PyTypeObject *type)
          {
            JArray< VariableContext$Type > result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::expressions::js::VariableContext$Type::values());
            return JArray<jobject>(result.this$).wrap(t_VariableContext$Type::wrap_jobject);
          }
          static PyObject *t_VariableContext$Type_get__parameters_(t_VariableContext$Type *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FieldComparator$RelevanceComparator.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/Scorer.h"
#include "java/lang/Float.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FieldComparator$RelevanceComparator::class$ = NULL;
        jmethodID *FieldComparator$RelevanceComparator::mids$ = NULL;
        bool FieldComparator$RelevanceComparator::live$ = false;

        jclass FieldComparator$RelevanceComparator::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FieldComparator$RelevanceComparator");

            mids$ = new jmethodID[max_mid];
            mids$[mid_compare_d8d154b9] = env->getMethodID(cls, "compare", "(II)I");
            mids$[mid_compareBottom_39c7bd23] = env->getMethodID(cls, "compareBottom", "(I)I");
            mids$[mid_compareTop_39c7bd23] = env->getMethodID(cls, "compareTop", "(I)I");
            mids$[mid_compareValues_f4628831] = env->getMethodID(cls, "compareValues", "(Ljava/lang/Float;Ljava/lang/Float;)I");
            mids$[mid_copy_d8d154a6] = env->getMethodID(cls, "copy", "(II)V");
            mids$[mid_setBottom_39c7bd3c] = env->getMethodID(cls, "setBottom", "(I)V");
            mids$[mid_setNextReader_6329aed7] = env->getMethodID(cls, "setNextReader", "(Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/search/FieldComparator;");
            mids$[mid_setScorer_8be0880c] = env->getMethodID(cls, "setScorer", "(Lorg/apache/lucene/search/Scorer;)V");
            mids$[mid_setTopValue_6b30eb6a] = env->getMethodID(cls, "setTopValue", "(Ljava/lang/Float;)V");
            mids$[mid_value_c4acb5a1] = env->getMethodID(cls, "value", "(I)Ljava/lang/Float;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jint FieldComparator$RelevanceComparator::compare(jint a0, jint a1) const
        {
          return env->callIntMethod(this$, mids$[mid_compare_d8d154b9], a0, a1);
        }

        jint FieldComparator$RelevanceComparator::compareBottom(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_compareBottom_39c7bd23], a0);
        }

        jint FieldComparator$RelevanceComparator::compareTop(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_compareTop_39c7bd23], a0);
        }

        jint FieldComparator$RelevanceComparator::compareValues(const ::java::lang::Float & a0, const ::java::lang::Float & a1) const
        {
          return env->callIntMethod(this$, mids$[mid_compareValues_f4628831], a0.this$, a1.this$);
        }

        void FieldComparator$RelevanceComparator::copy(jint a0, jint a1) const
        {
          env->callVoidMethod(this$, mids$[mid_copy_d8d154a6], a0, a1);
        }

        void FieldComparator$RelevanceComparator::setBottom(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setBottom_39c7bd3c], a0);
        }

        ::org::apache::lucene::search::FieldComparator FieldComparator$RelevanceComparator::setNextReader(const ::org::apache::lucene::index::AtomicReaderContext & a0) const
        {
          return ::org::apache::lucene::search::FieldComparator(env->callObjectMethod(this$, mids$[mid_setNextReader_6329aed7], a0.this$));
        }

        void FieldComparator$RelevanceComparator::setScorer(const ::org::apache::lucene::search::Scorer & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setScorer_8be0880c], a0.this$);
        }

        void FieldComparator$RelevanceComparator::setTopValue(const ::java::lang::Float & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setTopValue_6b30eb6a], a0.this$);
        }

        ::java::lang::Float FieldComparator$RelevanceComparator::value(jint a0) const
        {
          return ::java::lang::Float(env->callObjectMethod(this$, mids$[mid_value_c4acb5a1], a0));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FieldComparator$RelevanceComparator_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldComparator$RelevanceComparator_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldComparator$RelevanceComparator_of_(t_FieldComparator$RelevanceComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$RelevanceComparator_compare(t_FieldComparator$RelevanceComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$RelevanceComparator_compareBottom(t_FieldComparator$RelevanceComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$RelevanceComparator_compareTop(t_FieldComparator$RelevanceComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$RelevanceComparator_compareValues(t_FieldComparator$RelevanceComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$RelevanceComparator_copy(t_FieldComparator$RelevanceComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$RelevanceComparator_setBottom(t_FieldComparator$RelevanceComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$RelevanceComparator_setNextReader(t_FieldComparator$RelevanceComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$RelevanceComparator_setScorer(t_FieldComparator$RelevanceComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$RelevanceComparator_setTopValue(t_FieldComparator$RelevanceComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$RelevanceComparator_value(t_FieldComparator$RelevanceComparator *self, PyObject *args);
        static int t_FieldComparator$RelevanceComparator_set__bottom(t_FieldComparator$RelevanceComparator *self, PyObject *arg, void *data);
        static int t_FieldComparator$RelevanceComparator_set__nextReader(t_FieldComparator$RelevanceComparator *self, PyObject *arg, void *data);
        static int t_FieldComparator$RelevanceComparator_set__scorer(t_FieldComparator$RelevanceComparator *self, PyObject *arg, void *data);
        static int t_FieldComparator$RelevanceComparator_set__topValue(t_FieldComparator$RelevanceComparator *self, PyObject *arg, void *data);
        static PyObject *t_FieldComparator$RelevanceComparator_get__parameters_(t_FieldComparator$RelevanceComparator *self, void *data);
        static PyGetSetDef t_FieldComparator$RelevanceComparator__fields_[] = {
          DECLARE_SET_FIELD(t_FieldComparator$RelevanceComparator, bottom),
          DECLARE_SET_FIELD(t_FieldComparator$RelevanceComparator, nextReader),
          DECLARE_SET_FIELD(t_FieldComparator$RelevanceComparator, scorer),
          DECLARE_SET_FIELD(t_FieldComparator$RelevanceComparator, topValue),
          DECLARE_GET_FIELD(t_FieldComparator$RelevanceComparator, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FieldComparator$RelevanceComparator__methods_[] = {
          DECLARE_METHOD(t_FieldComparator$RelevanceComparator, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldComparator$RelevanceComparator, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldComparator$RelevanceComparator, of_, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$RelevanceComparator, compare, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$RelevanceComparator, compareBottom, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$RelevanceComparator, compareTop, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$RelevanceComparator, compareValues, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$RelevanceComparator, copy, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$RelevanceComparator, setBottom, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$RelevanceComparator, setNextReader, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$RelevanceComparator, setScorer, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$RelevanceComparator, setTopValue, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$RelevanceComparator, value, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldComparator$RelevanceComparator, t_FieldComparator$RelevanceComparator, ::org::apache::lucene::search::FieldComparator, FieldComparator$RelevanceComparator, abstract_init, 0, 0, t_FieldComparator$RelevanceComparator__fields_, 0, 0);
        PyObject *t_FieldComparator$RelevanceComparator::wrap_Object(const FieldComparator$RelevanceComparator& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FieldComparator$RelevanceComparator::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FieldComparator$RelevanceComparator *self = (t_FieldComparator$RelevanceComparator *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_FieldComparator$RelevanceComparator::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FieldComparator$RelevanceComparator::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FieldComparator$RelevanceComparator *self = (t_FieldComparator$RelevanceComparator *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_FieldComparator$RelevanceComparator::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldComparator$RelevanceComparator), module, "FieldComparator$RelevanceComparator", 0);
        }

        void t_FieldComparator$RelevanceComparator::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldComparator$RelevanceComparator).tp_dict, "class_", make_descriptor(FieldComparator$RelevanceComparator::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldComparator$RelevanceComparator).tp_dict, "wrapfn_", make_descriptor(t_FieldComparator$RelevanceComparator::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldComparator$RelevanceComparator).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldComparator$RelevanceComparator_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldComparator$RelevanceComparator::initializeClass, 1)))
            return NULL;
          return t_FieldComparator$RelevanceComparator::wrap_Object(FieldComparator$RelevanceComparator(((t_FieldComparator$RelevanceComparator *) arg)->object.this$));
        }
        static PyObject *t_FieldComparator$RelevanceComparator_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldComparator$RelevanceComparator::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FieldComparator$RelevanceComparator_of_(t_FieldComparator$RelevanceComparator *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_FieldComparator$RelevanceComparator_compare(t_FieldComparator$RelevanceComparator *self, PyObject *args)
        {
          jint a0;
          jint a1;
          jint result;

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(result = self->object.compare(a0, a1));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FieldComparator$RelevanceComparator), (PyObject *) self, "compare", args, 2);
        }

        static PyObject *t_FieldComparator$RelevanceComparator_compareBottom(t_FieldComparator$RelevanceComparator *self, PyObject *args)
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.compareBottom(a0));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FieldComparator$RelevanceComparator), (PyObject *) self, "compareBottom", args, 2);
        }

        static PyObject *t_FieldComparator$RelevanceComparator_compareTop(t_FieldComparator$RelevanceComparator *self, PyObject *args)
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.compareTop(a0));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FieldComparator$RelevanceComparator), (PyObject *) self, "compareTop", args, 2);
        }

        static PyObject *t_FieldComparator$RelevanceComparator_compareValues(t_FieldComparator$RelevanceComparator *self, PyObject *args)
        {
          ::java::lang::Float a0((jobject) NULL);
          ::java::lang::Float a1((jobject) NULL);
          jint result;

          if (!parseArgs(args, "OO", &::java::lang::PY_TYPE(Float), &::java::lang::PY_TYPE(Float), &a0, &a1))
          {
            OBJ_CALL(result = self->object.compareValues(a0, a1));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FieldComparator$RelevanceComparator), (PyObject *) self, "compareValues", args, 2);
        }

        static PyObject *t_FieldComparator$RelevanceComparator_copy(t_FieldComparator$RelevanceComparator *self, PyObject *args)
        {
          jint a0;
          jint a1;

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(self->object.copy(a0, a1));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FieldComparator$RelevanceComparator), (PyObject *) self, "copy", args, 2);
        }

        static PyObject *t_FieldComparator$RelevanceComparator_setBottom(t_FieldComparator$RelevanceComparator *self, PyObject *args)
        {
          jint a0;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(self->object.setBottom(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FieldComparator$RelevanceComparator), (PyObject *) self, "setBottom", args, 2);
        }

        static PyObject *t_FieldComparator$RelevanceComparator_setNextReader(t_FieldComparator$RelevanceComparator *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
          ::org::apache::lucene::search::FieldComparator result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.setNextReader(a0));
            return ::org::apache::lucene::search::t_FieldComparator::wrap_Object(result, &::java::lang::PY_TYPE(Float));
          }

          return callSuper(&PY_TYPE(FieldComparator$RelevanceComparator), (PyObject *) self, "setNextReader", args, 2);
        }

        static PyObject *t_FieldComparator$RelevanceComparator_setScorer(t_FieldComparator$RelevanceComparator *self, PyObject *args)
        {
          ::org::apache::lucene::search::Scorer a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::search::Scorer::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setScorer(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FieldComparator$RelevanceComparator), (PyObject *) self, "setScorer", args, 2);
        }

        static PyObject *t_FieldComparator$RelevanceComparator_setTopValue(t_FieldComparator$RelevanceComparator *self, PyObject *args)
        {
          ::java::lang::Float a0((jobject) NULL);

          if (!parseArgs(args, "O", &::java::lang::PY_TYPE(Float), &a0))
          {
            OBJ_CALL(self->object.setTopValue(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FieldComparator$RelevanceComparator), (PyObject *) self, "setTopValue", args, 2);
        }

        static PyObject *t_FieldComparator$RelevanceComparator_value(t_FieldComparator$RelevanceComparator *self, PyObject *args)
        {
          jint a0;
          ::java::lang::Float result((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.value(a0));
            return ::java::lang::t_Float::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FieldComparator$RelevanceComparator), (PyObject *) self, "value", args, 2);
        }
        static PyObject *t_FieldComparator$RelevanceComparator_get__parameters_(t_FieldComparator$RelevanceComparator *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static int t_FieldComparator$RelevanceComparator_set__bottom(t_FieldComparator$RelevanceComparator *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setBottom(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "bottom", arg);
          return -1;
        }

        static int t_FieldComparator$RelevanceComparator_set__nextReader(t_FieldComparator$RelevanceComparator *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::index::AtomicReaderContext value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &value))
            {
              INT_CALL(self->object.setNextReader(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "nextReader", arg);
          return -1;
        }

        static int t_FieldComparator$RelevanceComparator_set__scorer(t_FieldComparator$RelevanceComparator *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::search::Scorer value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::search::Scorer::initializeClass, &value))
            {
              INT_CALL(self->object.setScorer(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "scorer", arg);
          return -1;
        }

        static int t_FieldComparator$RelevanceComparator_set__topValue(t_FieldComparator$RelevanceComparator *self, PyObject *arg, void *data)
        {
          {
            ::java::lang::Float value((jobject) NULL);
            if (!parseArg(arg, "O", &::java::lang::PY_TYPE(Float), &value))
            {
              INT_CALL(self->object.setTopValue(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "topValue", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ngram/EdgeNGramFilterFactory.h"
#include "org/apache/lucene/analysis/TokenFilter.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ngram {

          ::java::lang::Class *EdgeNGramFilterFactory::class$ = NULL;
          jmethodID *EdgeNGramFilterFactory::mids$ = NULL;
          bool EdgeNGramFilterFactory::live$ = false;

          jclass EdgeNGramFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ngram/EdgeNGramFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_2969f76d] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenFilter;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          EdgeNGramFilterFactory::EdgeNGramFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenFilter EdgeNGramFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenFilter(env->callObjectMethod(this$, mids$[mid_create_2969f76d], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ngram {
          static PyObject *t_EdgeNGramFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_EdgeNGramFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_EdgeNGramFilterFactory_init_(t_EdgeNGramFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_EdgeNGramFilterFactory_create(t_EdgeNGramFilterFactory *self, PyObject *args);

          static PyMethodDef t_EdgeNGramFilterFactory__methods_[] = {
            DECLARE_METHOD(t_EdgeNGramFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_EdgeNGramFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_EdgeNGramFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(EdgeNGramFilterFactory, t_EdgeNGramFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, EdgeNGramFilterFactory, t_EdgeNGramFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_EdgeNGramFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(EdgeNGramFilterFactory), module, "EdgeNGramFilterFactory", 0);
          }

          void t_EdgeNGramFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(EdgeNGramFilterFactory).tp_dict, "class_", make_descriptor(EdgeNGramFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(EdgeNGramFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_EdgeNGramFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(EdgeNGramFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_EdgeNGramFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, EdgeNGramFilterFactory::initializeClass, 1)))
              return NULL;
            return t_EdgeNGramFilterFactory::wrap_Object(EdgeNGramFilterFactory(((t_EdgeNGramFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_EdgeNGramFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, EdgeNGramFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_EdgeNGramFilterFactory_init_(t_EdgeNGramFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            EdgeNGramFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = EdgeNGramFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_EdgeNGramFilterFactory_create(t_EdgeNGramFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(EdgeNGramFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/lang/IndexOutOfBoundsException.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace java {
  namespace lang {

    ::java::lang::Class *IndexOutOfBoundsException::class$ = NULL;
    jmethodID *IndexOutOfBoundsException::mids$ = NULL;
    bool IndexOutOfBoundsException::live$ = false;

    jclass IndexOutOfBoundsException::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/lang/IndexOutOfBoundsException");

        mids$ = new jmethodID[max_mid];
        mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
        mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");

        class$ = (::java::lang::Class *) new JObject(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    IndexOutOfBoundsException::IndexOutOfBoundsException() : ::java::lang::RuntimeException(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

    IndexOutOfBoundsException::IndexOutOfBoundsException(const ::java::lang::String & a0) : ::java::lang::RuntimeException(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace lang {
    static PyObject *t_IndexOutOfBoundsException_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_IndexOutOfBoundsException_instance_(PyTypeObject *type, PyObject *arg);
    static int t_IndexOutOfBoundsException_init_(t_IndexOutOfBoundsException *self, PyObject *args, PyObject *kwds);

    static PyMethodDef t_IndexOutOfBoundsException__methods_[] = {
      DECLARE_METHOD(t_IndexOutOfBoundsException, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_IndexOutOfBoundsException, instance_, METH_O | METH_CLASS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(IndexOutOfBoundsException, t_IndexOutOfBoundsException, ::java::lang::RuntimeException, IndexOutOfBoundsException, t_IndexOutOfBoundsException_init_, 0, 0, 0, 0, 0);

    void t_IndexOutOfBoundsException::install(PyObject *module)
    {
      installType(&PY_TYPE(IndexOutOfBoundsException), module, "IndexOutOfBoundsException", 0);
    }

    void t_IndexOutOfBoundsException::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(IndexOutOfBoundsException).tp_dict, "class_", make_descriptor(IndexOutOfBoundsException::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(IndexOutOfBoundsException).tp_dict, "wrapfn_", make_descriptor(t_IndexOutOfBoundsException::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(IndexOutOfBoundsException).tp_dict, "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_IndexOutOfBoundsException_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, IndexOutOfBoundsException::initializeClass, 1)))
        return NULL;
      return t_IndexOutOfBoundsException::wrap_Object(IndexOutOfBoundsException(((t_IndexOutOfBoundsException *) arg)->object.this$));
    }
    static PyObject *t_IndexOutOfBoundsException_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, IndexOutOfBoundsException::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static int t_IndexOutOfBoundsException_init_(t_IndexOutOfBoundsException *self, PyObject *args, PyObject *kwds)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          IndexOutOfBoundsException object((jobject) NULL);

          INT_CALL(object = IndexOutOfBoundsException());
          self->object = object;
          break;
        }
        goto err;
       case 1:
        {
          ::java::lang::String a0((jobject) NULL);
          IndexOutOfBoundsException object((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            INT_CALL(object = IndexOutOfBoundsException(a0));
            self->object = object;
            break;
          }
        }
       default:
       err:
        PyErr_SetArgsError((PyObject *) self, "__init__", args);
        return -1;
      }

      return 0;
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/processors/BooleanQuery2ModifierNodeProcessor.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/queryparser/flexible/core/processors/QueryNodeProcessor.h"
#include "org/apache/lucene/queryparser/flexible/core/config/QueryConfigHandler.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {

              ::java::lang::Class *BooleanQuery2ModifierNodeProcessor::class$ = NULL;
              jmethodID *BooleanQuery2ModifierNodeProcessor::mids$ = NULL;
              bool BooleanQuery2ModifierNodeProcessor::live$ = false;

              jclass BooleanQuery2ModifierNodeProcessor::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/processors/BooleanQuery2ModifierNodeProcessor");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_getQueryConfigHandler_3636d8c3] = env->getMethodID(cls, "getQueryConfigHandler", "()Lorg/apache/lucene/queryparser/flexible/core/config/QueryConfigHandler;");
                  mids$[mid_process_6705aed7] = env->getMethodID(cls, "process", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_setQueryConfigHandler_0b1f7132] = env->getMethodID(cls, "setQueryConfigHandler", "(Lorg/apache/lucene/queryparser/flexible/core/config/QueryConfigHandler;)V");
                  mids$[mid_fillChildrenBufferAndApplyModifiery_cc04aeef] = env->getMethodID(cls, "fillChildrenBufferAndApplyModifiery", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)V");
                  mids$[mid_isDefaultBooleanQueryNode_cc04aee3] = env->getMethodID(cls, "isDefaultBooleanQueryNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Z");
                  mids$[mid_tagModifierButDoNotOverride_6bd34b3d] = env->getMethodID(cls, "tagModifierButDoNotOverride", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;Lorg/apache/lucene/queryparser/flexible/core/nodes/ModifierQueryNode$Modifier;)V");
                  mids$[mid_postProcessNode_6705aed7] = env->getMethodID(cls, "postProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_preProcessNode_6705aed7] = env->getMethodID(cls, "preProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_processChildren_cc04aeef] = env->getMethodID(cls, "processChildren", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)V");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              BooleanQuery2ModifierNodeProcessor::BooleanQuery2ModifierNodeProcessor() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler BooleanQuery2ModifierNodeProcessor::getQueryConfigHandler() const
              {
                return ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler(env->callObjectMethod(this$, mids$[mid_getQueryConfigHandler_3636d8c3]));
              }

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode BooleanQuery2ModifierNodeProcessor::process(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_process_6705aed7], a0.this$));
              }

              void BooleanQuery2ModifierNodeProcessor::setQueryConfigHandler(const ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setQueryConfigHandler_0b1f7132], a0.this$);
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {
              static PyObject *t_BooleanQuery2ModifierNodeProcessor_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_BooleanQuery2ModifierNodeProcessor_instance_(PyTypeObject *type, PyObject *arg);
              static int t_BooleanQuery2ModifierNodeProcessor_init_(t_BooleanQuery2ModifierNodeProcessor *self, PyObject *args, PyObject *kwds);
              static PyObject *t_BooleanQuery2ModifierNodeProcessor_getQueryConfigHandler(t_BooleanQuery2ModifierNodeProcessor *self);
              static PyObject *t_BooleanQuery2ModifierNodeProcessor_process(t_BooleanQuery2ModifierNodeProcessor *self, PyObject *arg);
              static PyObject *t_BooleanQuery2ModifierNodeProcessor_setQueryConfigHandler(t_BooleanQuery2ModifierNodeProcessor *self, PyObject *arg);
              static PyObject *t_BooleanQuery2ModifierNodeProcessor_get__queryConfigHandler(t_BooleanQuery2ModifierNodeProcessor *self, void *data);
              static int t_BooleanQuery2ModifierNodeProcessor_set__queryConfigHandler(t_BooleanQuery2ModifierNodeProcessor *self, PyObject *arg, void *data);
              static PyGetSetDef t_BooleanQuery2ModifierNodeProcessor__fields_[] = {
                DECLARE_GETSET_FIELD(t_BooleanQuery2ModifierNodeProcessor, queryConfigHandler),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_BooleanQuery2ModifierNodeProcessor__methods_[] = {
                DECLARE_METHOD(t_BooleanQuery2ModifierNodeProcessor, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_BooleanQuery2ModifierNodeProcessor, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_BooleanQuery2ModifierNodeProcessor, getQueryConfigHandler, METH_NOARGS),
                DECLARE_METHOD(t_BooleanQuery2ModifierNodeProcessor, process, METH_O),
                DECLARE_METHOD(t_BooleanQuery2ModifierNodeProcessor, setQueryConfigHandler, METH_O),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(BooleanQuery2ModifierNodeProcessor, t_BooleanQuery2ModifierNodeProcessor, ::java::lang::Object, BooleanQuery2ModifierNodeProcessor, t_BooleanQuery2ModifierNodeProcessor_init_, 0, 0, t_BooleanQuery2ModifierNodeProcessor__fields_, 0, 0);

              void t_BooleanQuery2ModifierNodeProcessor::install(PyObject *module)
              {
                installType(&PY_TYPE(BooleanQuery2ModifierNodeProcessor), module, "BooleanQuery2ModifierNodeProcessor", 0);
              }

              void t_BooleanQuery2ModifierNodeProcessor::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(BooleanQuery2ModifierNodeProcessor).tp_dict, "class_", make_descriptor(BooleanQuery2ModifierNodeProcessor::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(BooleanQuery2ModifierNodeProcessor).tp_dict, "wrapfn_", make_descriptor(t_BooleanQuery2ModifierNodeProcessor::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(BooleanQuery2ModifierNodeProcessor).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_BooleanQuery2ModifierNodeProcessor_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, BooleanQuery2ModifierNodeProcessor::initializeClass, 1)))
                  return NULL;
                return t_BooleanQuery2ModifierNodeProcessor::wrap_Object(BooleanQuery2ModifierNodeProcessor(((t_BooleanQuery2ModifierNodeProcessor *) arg)->object.this$));
              }
              static PyObject *t_BooleanQuery2ModifierNodeProcessor_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, BooleanQuery2ModifierNodeProcessor::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_BooleanQuery2ModifierNodeProcessor_init_(t_BooleanQuery2ModifierNodeProcessor *self, PyObject *args, PyObject *kwds)
              {
                BooleanQuery2ModifierNodeProcessor object((jobject) NULL);

                INT_CALL(object = BooleanQuery2ModifierNodeProcessor());
                self->object = object;

                return 0;
              }

              static PyObject *t_BooleanQuery2ModifierNodeProcessor_getQueryConfigHandler(t_BooleanQuery2ModifierNodeProcessor *self)
              {
                ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler result((jobject) NULL);
                OBJ_CALL(result = self->object.getQueryConfigHandler());
                return ::org::apache::lucene::queryparser::flexible::core::config::t_QueryConfigHandler::wrap_Object(result);
              }

              static PyObject *t_BooleanQuery2ModifierNodeProcessor_process(t_BooleanQuery2ModifierNodeProcessor *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.process(a0));
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "process", arg);
                return NULL;
              }

              static PyObject *t_BooleanQuery2ModifierNodeProcessor_setQueryConfigHandler(t_BooleanQuery2ModifierNodeProcessor *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler a0((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler::initializeClass, &a0))
                {
                  OBJ_CALL(self->object.setQueryConfigHandler(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setQueryConfigHandler", arg);
                return NULL;
              }

              static PyObject *t_BooleanQuery2ModifierNodeProcessor_get__queryConfigHandler(t_BooleanQuery2ModifierNodeProcessor *self, void *data)
              {
                ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler value((jobject) NULL);
                OBJ_CALL(value = self->object.getQueryConfigHandler());
                return ::org::apache::lucene::queryparser::flexible::core::config::t_QueryConfigHandler::wrap_Object(value);
              }
              static int t_BooleanQuery2ModifierNodeProcessor_set__queryConfigHandler(t_BooleanQuery2ModifierNodeProcessor *self, PyObject *arg, void *data)
              {
                {
                  ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler value((jobject) NULL);
                  if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler::initializeClass, &value))
                  {
                    INT_CALL(self->object.setQueryConfigHandler(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "queryConfigHandler", arg);
                return -1;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spell/NGramDistance.h"
#include "org/apache/lucene/search/spell/StringDistance.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {

          ::java::lang::Class *NGramDistance::class$ = NULL;
          jmethodID *NGramDistance::mids$ = NULL;
          bool NGramDistance::live$ = false;

          jclass NGramDistance::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spell/NGramDistance");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_getDistance_4a264752] = env->getMethodID(cls, "getDistance", "(Ljava/lang/String;Ljava/lang/String;)F");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          NGramDistance::NGramDistance() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          NGramDistance::NGramDistance(jint a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

          jboolean NGramDistance::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          jfloat NGramDistance::getDistance(const ::java::lang::String & a0, const ::java::lang::String & a1) const
          {
            return env->callFloatMethod(this$, mids$[mid_getDistance_4a264752], a0.this$, a1.this$);
          }

          jint NGramDistance::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          ::java::lang::String NGramDistance::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {
          static PyObject *t_NGramDistance_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_NGramDistance_instance_(PyTypeObject *type, PyObject *arg);
          static int t_NGramDistance_init_(t_NGramDistance *self, PyObject *args, PyObject *kwds);
          static PyObject *t_NGramDistance_equals(t_NGramDistance *self, PyObject *args);
          static PyObject *t_NGramDistance_getDistance(t_NGramDistance *self, PyObject *args);
          static PyObject *t_NGramDistance_hashCode(t_NGramDistance *self, PyObject *args);
          static PyObject *t_NGramDistance_toString(t_NGramDistance *self, PyObject *args);

          static PyMethodDef t_NGramDistance__methods_[] = {
            DECLARE_METHOD(t_NGramDistance, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NGramDistance, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NGramDistance, equals, METH_VARARGS),
            DECLARE_METHOD(t_NGramDistance, getDistance, METH_VARARGS),
            DECLARE_METHOD(t_NGramDistance, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_NGramDistance, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(NGramDistance, t_NGramDistance, ::java::lang::Object, NGramDistance, t_NGramDistance_init_, 0, 0, 0, 0, 0);

          void t_NGramDistance::install(PyObject *module)
          {
            installType(&PY_TYPE(NGramDistance), module, "NGramDistance", 0);
          }

          void t_NGramDistance::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(NGramDistance).tp_dict, "class_", make_descriptor(NGramDistance::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(NGramDistance).tp_dict, "wrapfn_", make_descriptor(t_NGramDistance::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(NGramDistance).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_NGramDistance_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, NGramDistance::initializeClass, 1)))
              return NULL;
            return t_NGramDistance::wrap_Object(NGramDistance(((t_NGramDistance *) arg)->object.this$));
          }
          static PyObject *t_NGramDistance_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, NGramDistance::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_NGramDistance_init_(t_NGramDistance *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                NGramDistance object((jobject) NULL);

                INT_CALL(object = NGramDistance());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                jint a0;
                NGramDistance object((jobject) NULL);

                if (!parseArgs(args, "I", &a0))
                {
                  INT_CALL(object = NGramDistance(a0));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_NGramDistance_equals(t_NGramDistance *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(NGramDistance), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_NGramDistance_getDistance(t_NGramDistance *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            jfloat result;

            if (!parseArgs(args, "ss", &a0, &a1))
            {
              OBJ_CALL(result = self->object.getDistance(a0, a1));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "getDistance", args);
            return NULL;
          }

          static PyObject *t_NGramDistance_hashCode(t_NGramDistance *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(NGramDistance), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_NGramDistance_toString(t_NGramDistance *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(NGramDistance), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/commongrams/CommonGramsQueryFilterFactory.h"
#include "org/apache/lucene/analysis/TokenFilter.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace commongrams {

          ::java::lang::Class *CommonGramsQueryFilterFactory::class$ = NULL;
          jmethodID *CommonGramsQueryFilterFactory::mids$ = NULL;
          bool CommonGramsQueryFilterFactory::live$ = false;

          jclass CommonGramsQueryFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/commongrams/CommonGramsQueryFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_2969f76d] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenFilter;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CommonGramsQueryFilterFactory::CommonGramsQueryFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::commongrams::CommonGramsFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenFilter CommonGramsQueryFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenFilter(env->callObjectMethod(this$, mids$[mid_create_2969f76d], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace commongrams {
          static PyObject *t_CommonGramsQueryFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CommonGramsQueryFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CommonGramsQueryFilterFactory_init_(t_CommonGramsQueryFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CommonGramsQueryFilterFactory_create(t_CommonGramsQueryFilterFactory *self, PyObject *args);

          static PyMethodDef t_CommonGramsQueryFilterFactory__methods_[] = {
            DECLARE_METHOD(t_CommonGramsQueryFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CommonGramsQueryFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CommonGramsQueryFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CommonGramsQueryFilterFactory, t_CommonGramsQueryFilterFactory, ::org::apache::lucene::analysis::commongrams::CommonGramsFilterFactory, CommonGramsQueryFilterFactory, t_CommonGramsQueryFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_CommonGramsQueryFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(CommonGramsQueryFilterFactory), module, "CommonGramsQueryFilterFactory", 0);
          }

          void t_CommonGramsQueryFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CommonGramsQueryFilterFactory).tp_dict, "class_", make_descriptor(CommonGramsQueryFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CommonGramsQueryFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_CommonGramsQueryFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CommonGramsQueryFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CommonGramsQueryFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CommonGramsQueryFilterFactory::initializeClass, 1)))
              return NULL;
            return t_CommonGramsQueryFilterFactory::wrap_Object(CommonGramsQueryFilterFactory(((t_CommonGramsQueryFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_CommonGramsQueryFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CommonGramsQueryFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CommonGramsQueryFilterFactory_init_(t_CommonGramsQueryFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            CommonGramsQueryFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = CommonGramsQueryFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_CommonGramsQueryFilterFactory_create(t_CommonGramsQueryFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(CommonGramsQueryFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/snowball/SnowballPorterFilterFactory.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/analysis/TokenFilter.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/util/ResourceLoader.h"
#include "org/apache/lucene/analysis/util/ResourceLoaderAware.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace snowball {

          ::java::lang::Class *SnowballPorterFilterFactory::class$ = NULL;
          jmethodID *SnowballPorterFilterFactory::mids$ = NULL;
          bool SnowballPorterFilterFactory::live$ = false;
          ::java::lang::String *SnowballPorterFilterFactory::PROTECTED_TOKENS = NULL;

          jclass SnowballPorterFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/snowball/SnowballPorterFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_2969f76d] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenFilter;");
              mids$[mid_inform_d6a4bc97] = env->getMethodID(cls, "inform", "(Lorg/apache/lucene/analysis/util/ResourceLoader;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              PROTECTED_TOKENS = new ::java::lang::String(env->getStaticObjectField(cls, "PROTECTED_TOKENS", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SnowballPorterFilterFactory::SnowballPorterFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenFilter SnowballPorterFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenFilter(env->callObjectMethod(this$, mids$[mid_create_2969f76d], a0.this$));
          }

          void SnowballPorterFilterFactory::inform(const ::org::apache::lucene::analysis::util::ResourceLoader & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_inform_d6a4bc97], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace snowball {
          static PyObject *t_SnowballPorterFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SnowballPorterFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SnowballPorterFilterFactory_init_(t_SnowballPorterFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SnowballPorterFilterFactory_create(t_SnowballPorterFilterFactory *self, PyObject *args);
          static PyObject *t_SnowballPorterFilterFactory_inform(t_SnowballPorterFilterFactory *self, PyObject *arg);

          static PyMethodDef t_SnowballPorterFilterFactory__methods_[] = {
            DECLARE_METHOD(t_SnowballPorterFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SnowballPorterFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SnowballPorterFilterFactory, create, METH_VARARGS),
            DECLARE_METHOD(t_SnowballPorterFilterFactory, inform, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SnowballPorterFilterFactory, t_SnowballPorterFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, SnowballPorterFilterFactory, t_SnowballPorterFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_SnowballPorterFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(SnowballPorterFilterFactory), module, "SnowballPorterFilterFactory", 0);
          }

          void t_SnowballPorterFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SnowballPorterFilterFactory).tp_dict, "class_", make_descriptor(SnowballPorterFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SnowballPorterFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_SnowballPorterFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SnowballPorterFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(SnowballPorterFilterFactory::initializeClass);
            PyDict_SetItemString(PY_TYPE(SnowballPorterFilterFactory).tp_dict, "PROTECTED_TOKENS", make_descriptor(j2p(*SnowballPorterFilterFactory::PROTECTED_TOKENS)));
          }

          static PyObject *t_SnowballPorterFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SnowballPorterFilterFactory::initializeClass, 1)))
              return NULL;
            return t_SnowballPorterFilterFactory::wrap_Object(SnowballPorterFilterFactory(((t_SnowballPorterFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_SnowballPorterFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SnowballPorterFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SnowballPorterFilterFactory_init_(t_SnowballPorterFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            SnowballPorterFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = SnowballPorterFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SnowballPorterFilterFactory_create(t_SnowballPorterFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(SnowballPorterFilterFactory), (PyObject *) self, "create", args, 2);
          }

          static PyObject *t_SnowballPorterFilterFactory_inform(t_SnowballPorterFilterFactory *self, PyObject *arg)
          {
            ::org::apache::lucene::analysis::util::ResourceLoader a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::analysis::util::ResourceLoader::initializeClass, &a0))
            {
              OBJ_CALL(self->object.inform(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "inform", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/util/StringUtils.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace util {

              ::java::lang::Class *StringUtils::class$ = NULL;
              jmethodID *StringUtils::mids$ = NULL;
              bool StringUtils::live$ = false;

              jclass StringUtils::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/util/StringUtils");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_toString_c9db4eed] = env->getStaticMethodID(cls, "toString", "(Ljava/lang/Object;)Ljava/lang/String;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              StringUtils::StringUtils() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              ::java::lang::String StringUtils::toString(const ::java::lang::Object & a0)
              {
                jclass cls = env->getClass(initializeClass);
                return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toString_c9db4eed], a0.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace util {
              static PyObject *t_StringUtils_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_StringUtils_instance_(PyTypeObject *type, PyObject *arg);
              static int t_StringUtils_init_(t_StringUtils *self, PyObject *args, PyObject *kwds);
              static PyObject *t_StringUtils_toString(PyTypeObject *type, PyObject *args);

              static PyMethodDef t_StringUtils__methods_[] = {
                DECLARE_METHOD(t_StringUtils, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_StringUtils, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_StringUtils, toString, METH_VARARGS | METH_CLASS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(StringUtils, t_StringUtils, ::java::lang::Object, StringUtils, t_StringUtils_init_, 0, 0, 0, 0, 0);

              void t_StringUtils::install(PyObject *module)
              {
                installType(&PY_TYPE(StringUtils), module, "StringUtils", 0);
              }

              void t_StringUtils::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(StringUtils).tp_dict, "class_", make_descriptor(StringUtils::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(StringUtils).tp_dict, "wrapfn_", make_descriptor(t_StringUtils::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(StringUtils).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_StringUtils_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, StringUtils::initializeClass, 1)))
                  return NULL;
                return t_StringUtils::wrap_Object(StringUtils(((t_StringUtils *) arg)->object.this$));
              }
              static PyObject *t_StringUtils_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, StringUtils::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_StringUtils_init_(t_StringUtils *self, PyObject *args, PyObject *kwds)
              {
                StringUtils object((jobject) NULL);

                INT_CALL(object = StringUtils());
                self->object = object;

                return 0;
              }

              static PyObject *t_StringUtils_toString(PyTypeObject *type, PyObject *args)
              {
                ::java::lang::Object a0((jobject) NULL);
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, "o", &a0))
                {
                  OBJ_CALL(result = ::org::apache::lucene::queryparser::flexible::core::util::StringUtils::toString(a0));
                  return j2p(result);
                }

                return callSuper(type, "toString", args, 2);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/pylucene/store/PythonIndexInput.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/store/IOContext.h"
#include "java/lang/Throwable.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace store {

        ::java::lang::Class *PythonIndexInput::class$ = NULL;
        jmethodID *PythonIndexInput::mids$ = NULL;
        bool PythonIndexInput::live$ = false;

        jclass PythonIndexInput::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/pylucene/store/PythonIndexInput");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
            mids$[mid_init$_501c6f1c] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)V");
            mids$[mid_init$_6e53ccc6] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;I)V");
            mids$[mid_clone_f5aaa2d0] = env->getMethodID(cls, "clone", "()Lorg/apache/pylucene/store/PythonIndexInput;");
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_finalize_54c6a166] = env->getMethodID(cls, "finalize", "()V");
            mids$[mid_length_54c6a17a] = env->getMethodID(cls, "length", "()J");
            mids$[mid_pythonDecRef_54c6a166] = env->getMethodID(cls, "pythonDecRef", "()V");
            mids$[mid_pythonExtension_54c6a17a] = env->getMethodID(cls, "pythonExtension", "()J");
            mids$[mid_pythonExtension_0ee6df2f] = env->getMethodID(cls, "pythonExtension", "(J)V");
            mids$[mid_readInternal_e1cb0133] = env->getMethodID(cls, "readInternal", "(IJ)[B");
            mids$[mid_seekInternal_0ee6df2f] = env->getMethodID(cls, "seekInternal", "(J)V");
            mids$[mid_readInternal_86f4435f] = env->getMethodID(cls, "readInternal", "([BII)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PythonIndexInput::PythonIndexInput(const ::java::lang::String & a0) : ::org::apache::lucene::store::BufferedIndexInput(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

        PythonIndexInput::PythonIndexInput(const ::java::lang::String & a0, const ::org::apache::lucene::store::IOContext & a1) : ::org::apache::lucene::store::BufferedIndexInput(env->newObject(initializeClass, &mids$, mid_init$_501c6f1c, a0.this$, a1.this$)) {}

        PythonIndexInput::PythonIndexInput(const ::java::lang::String & a0, jint a1) : ::org::apache::lucene::store::BufferedIndexInput(env->newObject(initializeClass, &mids$, mid_init$_6e53ccc6, a0.this$, a1)) {}

        PythonIndexInput PythonIndexInput::clone() const
        {
          return PythonIndexInput(env->callNonvirtualObjectMethod(this$, (jclass) ::org::apache::lucene::store::BufferedIndexInput::class$->this$, ::org::apache::lucene::store::BufferedIndexInput::mids$[::org::apache::lucene::store::BufferedIndexInput::mid_clone_c014db58]));
        }

        void PythonIndexInput::finalize() const
        {
          env->callVoidMethod(this$, mids$[mid_finalize_54c6a166]);
        }

        jlong PythonIndexInput::pythonExtension() const
        {
          return env->callLongMethod(this$, mids$[mid_pythonExtension_54c6a17a]);
        }

        void PythonIndexInput::pythonExtension(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_pythonExtension_0ee6df2f], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace store {
        static PyObject *t_PythonIndexInput_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PythonIndexInput_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PythonIndexInput_init_(t_PythonIndexInput *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PythonIndexInput_clone(t_PythonIndexInput *self, PyObject *arg);
        static PyObject *t_PythonIndexInput_finalize(t_PythonIndexInput *self);
        static PyObject *t_PythonIndexInput_pythonExtension(t_PythonIndexInput *self, PyObject *args);
        static jobject JNICALL t_PythonIndexInput_clone0(JNIEnv *jenv, jobject jobj);
        static void JNICALL t_PythonIndexInput_close1(JNIEnv *jenv, jobject jobj);
        static jlong JNICALL t_PythonIndexInput_length2(JNIEnv *jenv, jobject jobj);
        static void JNICALL t_PythonIndexInput_pythonDecRef3(JNIEnv *jenv, jobject jobj);
        static jobject JNICALL t_PythonIndexInput_readInternal4(JNIEnv *jenv, jobject jobj, jint a0, jlong a1);
        static void JNICALL t_PythonIndexInput_seekInternal5(JNIEnv *jenv, jobject jobj, jlong a0);
        static PyObject *t_PythonIndexInput_get__self(t_PythonIndexInput *self, void *data);
        static PyGetSetDef t_PythonIndexInput__fields_[] = {
          DECLARE_GET_FIELD(t_PythonIndexInput, self),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PythonIndexInput__methods_[] = {
          DECLARE_METHOD(t_PythonIndexInput, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonIndexInput, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonIndexInput, clone, METH_O),
          DECLARE_METHOD(t_PythonIndexInput, finalize, METH_NOARGS),
          DECLARE_METHOD(t_PythonIndexInput, pythonExtension, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PythonIndexInput, t_PythonIndexInput, ::org::apache::lucene::store::BufferedIndexInput, PythonIndexInput, t_PythonIndexInput_init_, 0, 0, t_PythonIndexInput__fields_, 0, 0);

        void t_PythonIndexInput::install(PyObject *module)
        {
          installType(&PY_TYPE(PythonIndexInput), module, "PythonIndexInput", 1);
        }

        void t_PythonIndexInput::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PythonIndexInput).tp_dict, "class_", make_descriptor(PythonIndexInput::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PythonIndexInput).tp_dict, "wrapfn_", make_descriptor(t_PythonIndexInput::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PythonIndexInput).tp_dict, "boxfn_", make_descriptor(boxObject));
          jclass cls = env->getClass(PythonIndexInput::initializeClass);
          JNINativeMethod methods[] = {
            { "clone", "()Lorg/apache/pylucene/store/PythonIndexInput;", (void *) t_PythonIndexInput_clone0 },
            { "close", "()V", (void *) t_PythonIndexInput_close1 },
            { "length", "()J", (void *) t_PythonIndexInput_length2 },
            { "pythonDecRef", "()V", (void *) t_PythonIndexInput_pythonDecRef3 },
            { "readInternal", "(IJ)[B", (void *) t_PythonIndexInput_readInternal4 },
            { "seekInternal", "(J)V", (void *) t_PythonIndexInput_seekInternal5 },
          };
          env->registerNatives(cls, methods, 6);
        }

        static PyObject *t_PythonIndexInput_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PythonIndexInput::initializeClass, 1)))
            return NULL;
          return t_PythonIndexInput::wrap_Object(PythonIndexInput(((t_PythonIndexInput *) arg)->object.this$));
        }
        static PyObject *t_PythonIndexInput_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PythonIndexInput::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PythonIndexInput_init_(t_PythonIndexInput *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::lang::String a0((jobject) NULL);
              PythonIndexInput object((jobject) NULL);

              if (!parseArgs(args, "s", &a0))
              {
                INT_CALL(object = PythonIndexInput(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::store::IOContext a1((jobject) NULL);
              PythonIndexInput object((jobject) NULL);

              if (!parseArgs(args, "sk", ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1))
              {
                INT_CALL(object = PythonIndexInput(a0, a1));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              jint a1;
              PythonIndexInput object((jobject) NULL);

              if (!parseArgs(args, "sI", &a0, &a1))
              {
                INT_CALL(object = PythonIndexInput(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          Py_INCREF((PyObject *) self);
          self->object.pythonExtension((jlong) (Py_intptr_t) (void *) self);

          return 0;
        }

        static PyObject *t_PythonIndexInput_clone(t_PythonIndexInput *self, PyObject *arg)
        {
          PythonIndexInput result((jobject) NULL);

          if (arg)
          {
            OBJ_CALL(result = self->object.clone());

            PythonIndexInput object(result.this$);
            if (PyObject_TypeCheck(arg, &PY_TYPE(FinalizerProxy)) &&
                PyObject_TypeCheck(((t_fp *) arg)->object, self->ob_type))
            {
              PyObject *_arg = ((t_fp *) arg)->object;
              ((t_JObject *) _arg)->object = object;
              Py_INCREF(_arg);
              object.pythonExtension((jlong) (Py_intptr_t) (void *) _arg);
              Py_INCREF(arg);
              return arg;
            }
            return PyErr_SetArgsError("clone", arg);
          }

          return callSuper(&PY_TYPE(PythonIndexInput), (PyObject *) self, "clone", arg, 1);
        }

        static PyObject *t_PythonIndexInput_finalize(t_PythonIndexInput *self)
        {
          OBJ_CALL(self->object.finalize());
          Py_RETURN_NONE;
        }

        static PyObject *t_PythonIndexInput_pythonExtension(t_PythonIndexInput *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              jlong result;
              OBJ_CALL(result = self->object.pythonExtension());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }
            break;
           case 1:
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.pythonExtension(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "pythonExtension", args);
          return NULL;
        }

        static jobject JNICALL t_PythonIndexInput_clone0(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonIndexInput::mids$[PythonIndexInput::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          PythonIndexInput value((jobject) NULL);
          PyObject *result = PyObject_CallMethod(obj, "clone", "");
          if (!result)
            throwPythonError();
          else if (parseArg(result, "k", PythonIndexInput::initializeClass, &value))
          {
            throwTypeError("clone", result);
            Py_DECREF(result);
          }
          else
          {
            jobj = jenv->NewLocalRef(value.this$);
            Py_DECREF(result);
            return jobj;
          }

          return (jobject) NULL;
        }

        static void JNICALL t_PythonIndexInput_close1(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonIndexInput::mids$[PythonIndexInput::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          PyObject *result = PyObject_CallMethod(obj, "close", "");
          if (!result)
            throwPythonError();
          else
            Py_DECREF(result);
        }

        static jlong JNICALL t_PythonIndexInput_length2(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonIndexInput::mids$[PythonIndexInput::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jlong value;
          PyObject *result = PyObject_CallMethod(obj, "length", "");
          if (!result)
            throwPythonError();
          else if (parseArg(result, "J", &value))
          {
            throwTypeError("length", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jlong) 0;
        }

        static void JNICALL t_PythonIndexInput_pythonDecRef3(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonIndexInput::mids$[PythonIndexInput::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            jenv->CallVoidMethod(jobj, PythonIndexInput::mids$[PythonIndexInput::mid_pythonExtension_0ee6df2f], (jlong) 0);
            env->finalizeObject(jenv, obj);
          }
        }

        static jobject JNICALL t_PythonIndexInput_readInternal4(JNIEnv *jenv, jobject jobj, jint a0, jlong a1)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonIndexInput::mids$[PythonIndexInput::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          JArray< jbyte > value((jobject) NULL);
          PyObject *result = PyObject_CallMethod(obj, "readInternal", "iL", (int) a0, (long long) a1);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "[B", &value))
          {
            throwTypeError("readInternal", result);
            Py_DECREF(result);
          }
          else
          {
            jobj = jenv->NewLocalRef(value.this$);
            Py_DECREF(result);
            return jobj;
          }

          return (jobject) NULL;
        }

        static void JNICALL t_PythonIndexInput_seekInternal5(JNIEnv *jenv, jobject jobj, jlong a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonIndexInput::mids$[PythonIndexInput::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          PyObject *result = PyObject_CallMethod(obj, "seekInternal", "L", (long long) a0);
          if (!result)
            throwPythonError();
          else
            Py_DECREF(result);
        }

        static PyObject *t_PythonIndexInput_get__self(t_PythonIndexInput *self, void *data)
        {
          jlong ptr;
          OBJ_CALL(ptr = self->object.pythonExtension());
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            Py_INCREF(obj);
            return obj;
          }
          else
            Py_RETURN_NONE;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/NoSuchDirectoryException.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *NoSuchDirectoryException::class$ = NULL;
        jmethodID *NoSuchDirectoryException::mids$ = NULL;
        bool NoSuchDirectoryException::live$ = false;

        jclass NoSuchDirectoryException::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/NoSuchDirectoryException");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        NoSuchDirectoryException::NoSuchDirectoryException(const ::java::lang::String & a0) : ::java::io::FileNotFoundException(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_NoSuchDirectoryException_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NoSuchDirectoryException_instance_(PyTypeObject *type, PyObject *arg);
        static int t_NoSuchDirectoryException_init_(t_NoSuchDirectoryException *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_NoSuchDirectoryException__methods_[] = {
          DECLARE_METHOD(t_NoSuchDirectoryException, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NoSuchDirectoryException, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(NoSuchDirectoryException, t_NoSuchDirectoryException, ::java::io::FileNotFoundException, NoSuchDirectoryException, t_NoSuchDirectoryException_init_, 0, 0, 0, 0, 0);

        void t_NoSuchDirectoryException::install(PyObject *module)
        {
          installType(&PY_TYPE(NoSuchDirectoryException), module, "NoSuchDirectoryException", 0);
        }

        void t_NoSuchDirectoryException::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(NoSuchDirectoryException).tp_dict, "class_", make_descriptor(NoSuchDirectoryException::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(NoSuchDirectoryException).tp_dict, "wrapfn_", make_descriptor(t_NoSuchDirectoryException::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(NoSuchDirectoryException).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_NoSuchDirectoryException_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, NoSuchDirectoryException::initializeClass, 1)))
            return NULL;
          return t_NoSuchDirectoryException::wrap_Object(NoSuchDirectoryException(((t_NoSuchDirectoryException *) arg)->object.this$));
        }
        static PyObject *t_NoSuchDirectoryException_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, NoSuchDirectoryException::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_NoSuchDirectoryException_init_(t_NoSuchDirectoryException *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::String a0((jobject) NULL);
          NoSuchDirectoryException object((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            INT_CALL(object = NoSuchDirectoryException(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "java/lang/Class.h"
#include "java/lang/CharSequence.h"
#include "java/util/List.h"
#include "org/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax.h"
#include "java/lang/CloneNotSupportedException.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {

              ::java::lang::Class *QueryNode::class$ = NULL;
              jmethodID *QueryNode::mids$ = NULL;
              bool QueryNode::live$ = false;

              jclass QueryNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/nodes/QueryNode");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_add_cc04aeef] = env->getMethodID(cls, "add", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)V");
                  mids$[mid_add_1fde8fc3] = env->getMethodID(cls, "add", "(Ljava/util/List;)V");
                  mids$[mid_cloneTree_b387c5e6] = env->getMethodID(cls, "cloneTree", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_containsTag_5fdc3f44] = env->getMethodID(cls, "containsTag", "(Ljava/lang/String;)Z");
                  mids$[mid_getChildren_87851566] = env->getMethodID(cls, "getChildren", "()Ljava/util/List;");
                  mids$[mid_getParent_b387c5e6] = env->getMethodID(cls, "getParent", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_getTag_2a1c4d09] = env->getMethodID(cls, "getTag", "(Ljava/lang/String;)Ljava/lang/Object;");
                  mids$[mid_getTagMap_db60befd] = env->getMethodID(cls, "getTagMap", "()Ljava/util/Map;");
                  mids$[mid_isLeaf_54c6a16a] = env->getMethodID(cls, "isLeaf", "()Z");
                  mids$[mid_removeFromParent_54c6a166] = env->getMethodID(cls, "removeFromParent", "()V");
                  mids$[mid_set_1fde8fc3] = env->getMethodID(cls, "set", "(Ljava/util/List;)V");
                  mids$[mid_setTag_2da4da24] = env->getMethodID(cls, "setTag", "(Ljava/lang/String;Ljava/lang/Object;)V");
                  mids$[mid_toQueryString_99b8dfe1] = env->getMethodID(cls, "toQueryString", "(Lorg/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax;)Ljava/lang/CharSequence;");
                  mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
                  mids$[mid_unsetTag_5fdc3f48] = env->getMethodID(cls, "unsetTag", "(Ljava/lang/String;)V");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              void QueryNode::add(const QueryNode & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_add_cc04aeef], a0.this$);
              }

              void QueryNode::add(const ::java::util::List & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_add_1fde8fc3], a0.this$);
              }

              QueryNode QueryNode::cloneTree() const
              {
                return QueryNode(env->callObjectMethod(this$, mids$[mid_cloneTree_b387c5e6]));
              }

              jboolean QueryNode::containsTag(const ::java::lang::String & a0) const
              {
                return env->callBooleanMethod(this$, mids$[mid_containsTag_5fdc3f44], a0.this$);
              }

              ::java::util::List QueryNode::getChildren() const
              {
                return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getChildren_87851566]));
              }

              QueryNode QueryNode::getParent() const
              {
                return QueryNode(env->callObjectMethod(this$, mids$[mid_getParent_b387c5e6]));
              }

              ::java::lang::Object QueryNode::getTag(const ::java::lang::String & a0) const
              {
                return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_getTag_2a1c4d09], a0.this$));
              }

              ::java::util::Map QueryNode::getTagMap() const
              {
                return ::java::util::Map(env->callObjectMethod(this$, mids$[mid_getTagMap_db60befd]));
              }

              jboolean QueryNode::isLeaf() const
              {
                return env->callBooleanMethod(this$, mids$[mid_isLeaf_54c6a16a]);
              }

              void QueryNode::removeFromParent() const
              {
                env->callVoidMethod(this$, mids$[mid_removeFromParent_54c6a166]);
              }

              void QueryNode::set(const ::java::util::List & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_set_1fde8fc3], a0.this$);
              }

              void QueryNode::setTag(const ::java::lang::String & a0, const ::java::lang::Object & a1) const
              {
                env->callVoidMethod(this$, mids$[mid_setTag_2da4da24], a0.this$, a1.this$);
              }

              ::java::lang::CharSequence QueryNode::toQueryString(const ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax & a0) const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_toQueryString_99b8dfe1], a0.this$));
              }

              ::java::lang::String QueryNode::toString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
              }

              void QueryNode::unsetTag(const ::java::lang::String & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_unsetTag_5fdc3f48], a0.this$);
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {
              static PyObject *t_QueryNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_QueryNode_instance_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_QueryNode_add(t_QueryNode *self, PyObject *args);
              static PyObject *t_QueryNode_cloneTree(t_QueryNode *self);
              static PyObject *t_QueryNode_containsTag(t_QueryNode *self, PyObject *arg);
              static PyObject *t_QueryNode_getChildren(t_QueryNode *self);
              static PyObject *t_QueryNode_getParent(t_QueryNode *self);
              static PyObject *t_QueryNode_getTag(t_QueryNode *self, PyObject *arg);
              static PyObject *t_QueryNode_getTagMap(t_QueryNode *self);
              static PyObject *t_QueryNode_isLeaf(t_QueryNode *self);
              static PyObject *t_QueryNode_removeFromParent(t_QueryNode *self);
              static PyObject *t_QueryNode_set(t_QueryNode *self, PyObject *arg);
              static PyObject *t_QueryNode_setTag(t_QueryNode *self, PyObject *args);
              static PyObject *t_QueryNode_toQueryString(t_QueryNode *self, PyObject *arg);
              static PyObject *t_QueryNode_toString(t_QueryNode *self, PyObject *args);
              static PyObject *t_QueryNode_unsetTag(t_QueryNode *self, PyObject *arg);
              static PyObject *t_QueryNode_get__children(t_QueryNode *self, void *data);
              static PyObject *t_QueryNode_get__leaf(t_QueryNode *self, void *data);
              static PyObject *t_QueryNode_get__parent(t_QueryNode *self, void *data);
              static PyObject *t_QueryNode_get__tagMap(t_QueryNode *self, void *data);
              static PyGetSetDef t_QueryNode__fields_[] = {
                DECLARE_GET_FIELD(t_QueryNode, children),
                DECLARE_GET_FIELD(t_QueryNode, leaf),
                DECLARE_GET_FIELD(t_QueryNode, parent),
                DECLARE_GET_FIELD(t_QueryNode, tagMap),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_QueryNode__methods_[] = {
                DECLARE_METHOD(t_QueryNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_QueryNode, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_QueryNode, add, METH_VARARGS),
                DECLARE_METHOD(t_QueryNode, cloneTree, METH_NOARGS),
                DECLARE_METHOD(t_QueryNode, containsTag, METH_O),
                DECLARE_METHOD(t_QueryNode, getChildren, METH_NOARGS),
                DECLARE_METHOD(t_QueryNode, getParent, METH_NOARGS),
                DECLARE_METHOD(t_QueryNode, getTag, METH_O),
                DECLARE_METHOD(t_QueryNode, getTagMap, METH_NOARGS),
                DECLARE_METHOD(t_QueryNode, isLeaf, METH_NOARGS),
                DECLARE_METHOD(t_QueryNode, removeFromParent, METH_NOARGS),
                DECLARE_METHOD(t_QueryNode, set, METH_O),
                DECLARE_METHOD(t_QueryNode, setTag, METH_VARARGS),
                DECLARE_METHOD(t_QueryNode, toQueryString, METH_O),
                DECLARE_METHOD(t_QueryNode, toString, METH_VARARGS),
                DECLARE_METHOD(t_QueryNode, unsetTag, METH_O),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(QueryNode, t_QueryNode, ::java::lang::Object, QueryNode, abstract_init, 0, 0, t_QueryNode__fields_, 0, 0);

              void t_QueryNode::install(PyObject *module)
              {
                installType(&PY_TYPE(QueryNode), module, "QueryNode", 0);
              }

              void t_QueryNode::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(QueryNode).tp_dict, "class_", make_descriptor(QueryNode::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(QueryNode).tp_dict, "wrapfn_", make_descriptor(t_QueryNode::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(QueryNode).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_QueryNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, QueryNode::initializeClass, 1)))
                  return NULL;
                return t_QueryNode::wrap_Object(QueryNode(((t_QueryNode *) arg)->object.this$));
              }
              static PyObject *t_QueryNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, QueryNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static PyObject *t_QueryNode_add(t_QueryNode *self, PyObject *args)
              {
                switch (PyTuple_GET_SIZE(args)) {
                 case 1:
                  {
                    QueryNode a0((jobject) NULL);

                    if (!parseArgs(args, "k", QueryNode::initializeClass, &a0))
                    {
                      OBJ_CALL(self->object.add(a0));
                      Py_RETURN_NONE;
                    }
                  }
                  {
                    ::java::util::List a0((jobject) NULL);
                    PyTypeObject **p0;

                    if (!parseArgs(args, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
                    {
                      OBJ_CALL(self->object.add(a0));
                      Py_RETURN_NONE;
                    }
                  }
                }

                PyErr_SetArgsError((PyObject *) self, "add", args);
                return NULL;
              }

              static PyObject *t_QueryNode_cloneTree(t_QueryNode *self)
              {
                QueryNode result((jobject) NULL);
                OBJ_CALL(result = self->object.cloneTree());
                return t_QueryNode::wrap_Object(result);
              }

              static PyObject *t_QueryNode_containsTag(t_QueryNode *self, PyObject *arg)
              {
                ::java::lang::String a0((jobject) NULL);
                jboolean result;

                if (!parseArg(arg, "s", &a0))
                {
                  OBJ_CALL(result = self->object.containsTag(a0));
                  Py_RETURN_BOOL(result);
                }

                PyErr_SetArgsError((PyObject *) self, "containsTag", arg);
                return NULL;
              }

              static PyObject *t_QueryNode_getChildren(t_QueryNode *self)
              {
                ::java::util::List result((jobject) NULL);
                OBJ_CALL(result = self->object.getChildren());
                return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::queryparser::flexible::core::nodes::PY_TYPE(QueryNode));
              }

              static PyObject *t_QueryNode_getParent(t_QueryNode *self)
              {
                QueryNode result((jobject) NULL);
                OBJ_CALL(result = self->object.getParent());
                return t_QueryNode::wrap_Object(result);
              }

              static PyObject *t_QueryNode_getTag(t_QueryNode *self, PyObject *arg)
              {
                ::java::lang::String a0((jobject) NULL);
                ::java::lang::Object result((jobject) NULL);

                if (!parseArg(arg, "s", &a0))
                {
                  OBJ_CALL(result = self->object.getTag(a0));
                  return ::java::lang::t_Object::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "getTag", arg);
                return NULL;
              }

              static PyObject *t_QueryNode_getTagMap(t_QueryNode *self)
              {
                ::java::util::Map result((jobject) NULL);
                OBJ_CALL(result = self->object.getTagMap());
                return ::java::util::t_Map::wrap_Object(result, &::java::lang::PY_TYPE(String), &::java::lang::PY_TYPE(Object));
              }

              static PyObject *t_QueryNode_isLeaf(t_QueryNode *self)
              {
                jboolean result;
                OBJ_CALL(result = self->object.isLeaf());
                Py_RETURN_BOOL(result);
              }

              static PyObject *t_QueryNode_removeFromParent(t_QueryNode *self)
              {
                OBJ_CALL(self->object.removeFromParent());
                Py_RETURN_NONE;
              }

              static PyObject *t_QueryNode_set(t_QueryNode *self, PyObject *arg)
              {
                ::java::util::List a0((jobject) NULL);
                PyTypeObject **p0;

                if (!parseArg(arg, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
                {
                  OBJ_CALL(self->object.set(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "set", arg);
                return NULL;
              }

              static PyObject *t_QueryNode_setTag(t_QueryNode *self, PyObject *args)
              {
                ::java::lang::String a0((jobject) NULL);
                ::java::lang::Object a1((jobject) NULL);

                if (!parseArgs(args, "so", &a0, &a1))
                {
                  OBJ_CALL(self->object.setTag(a0, a1));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setTag", args);
                return NULL;
              }

              static PyObject *t_QueryNode_toQueryString(t_QueryNode *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax a0((jobject) NULL);
                ::java::lang::CharSequence result((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.toQueryString(a0));
                  return ::java::lang::t_CharSequence::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "toQueryString", arg);
                return NULL;
              }

              static PyObject *t_QueryNode_toString(t_QueryNode *self, PyObject *args)
              {
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.toString());
                  return j2p(result);
                }

                return callSuper(&PY_TYPE(QueryNode), (PyObject *) self, "toString", args, 2);
              }

              static PyObject *t_QueryNode_unsetTag(t_QueryNode *self, PyObject *arg)
              {
                ::java::lang::String a0((jobject) NULL);

                if (!parseArg(arg, "s", &a0))
                {
                  OBJ_CALL(self->object.unsetTag(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "unsetTag", arg);
                return NULL;
              }

              static PyObject *t_QueryNode_get__children(t_QueryNode *self, void *data)
              {
                ::java::util::List value((jobject) NULL);
                OBJ_CALL(value = self->object.getChildren());
                return ::java::util::t_List::wrap_Object(value);
              }

              static PyObject *t_QueryNode_get__leaf(t_QueryNode *self, void *data)
              {
                jboolean value;
                OBJ_CALL(value = self->object.isLeaf());
                Py_RETURN_BOOL(value);
              }

              static PyObject *t_QueryNode_get__parent(t_QueryNode *self, void *data)
              {
                QueryNode value((jobject) NULL);
                OBJ_CALL(value = self->object.getParent());
                return t_QueryNode::wrap_Object(value);
              }

              static PyObject *t_QueryNode_get__tagMap(t_QueryNode *self, void *data)
              {
                ::java::util::Map value((jobject) NULL);
                OBJ_CALL(value = self->object.getTagMap());
                return ::java::util::t_Map::wrap_Object(value);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/StandardQueryTreeBuilder.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/StandardQueryBuilder.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {

              ::java::lang::Class *StandardQueryTreeBuilder::class$ = NULL;
              jmethodID *StandardQueryTreeBuilder::mids$ = NULL;
              bool StandardQueryTreeBuilder::live$ = false;

              jclass StandardQueryTreeBuilder::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/builders/StandardQueryTreeBuilder");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_build_7f6ce179] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/search/Query;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              StandardQueryTreeBuilder::StandardQueryTreeBuilder() : ::org::apache::lucene::queryparser::flexible::core::builders::QueryTreeBuilder(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              ::org::apache::lucene::search::Query StandardQueryTreeBuilder::build(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_build_7f6ce179], a0.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {
              static PyObject *t_StandardQueryTreeBuilder_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_StandardQueryTreeBuilder_instance_(PyTypeObject *type, PyObject *arg);
              static int t_StandardQueryTreeBuilder_init_(t_StandardQueryTreeBuilder *self, PyObject *args, PyObject *kwds);
              static PyObject *t_StandardQueryTreeBuilder_build(t_StandardQueryTreeBuilder *self, PyObject *args);

              static PyMethodDef t_StandardQueryTreeBuilder__methods_[] = {
                DECLARE_METHOD(t_StandardQueryTreeBuilder, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_StandardQueryTreeBuilder, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_StandardQueryTreeBuilder, build, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(StandardQueryTreeBuilder, t_StandardQueryTreeBuilder, ::org::apache::lucene::queryparser::flexible::core::builders::QueryTreeBuilder, StandardQueryTreeBuilder, t_StandardQueryTreeBuilder_init_, 0, 0, 0, 0, 0);

              void t_StandardQueryTreeBuilder::install(PyObject *module)
              {
                installType(&PY_TYPE(StandardQueryTreeBuilder), module, "StandardQueryTreeBuilder", 0);
              }

              void t_StandardQueryTreeBuilder::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(StandardQueryTreeBuilder).tp_dict, "class_", make_descriptor(StandardQueryTreeBuilder::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(StandardQueryTreeBuilder).tp_dict, "wrapfn_", make_descriptor(t_StandardQueryTreeBuilder::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(StandardQueryTreeBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_StandardQueryTreeBuilder_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, StandardQueryTreeBuilder::initializeClass, 1)))
                  return NULL;
                return t_StandardQueryTreeBuilder::wrap_Object(StandardQueryTreeBuilder(((t_StandardQueryTreeBuilder *) arg)->object.this$));
              }
              static PyObject *t_StandardQueryTreeBuilder_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, StandardQueryTreeBuilder::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_StandardQueryTreeBuilder_init_(t_StandardQueryTreeBuilder *self, PyObject *args, PyObject *kwds)
              {
                StandardQueryTreeBuilder object((jobject) NULL);

                INT_CALL(object = StandardQueryTreeBuilder());
                self->object = object;

                return 0;
              }

              static PyObject *t_StandardQueryTreeBuilder_build(t_StandardQueryTreeBuilder *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::search::Query result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.build(a0));
                  return ::org::apache::lucene::search::t_Query::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(StandardQueryTreeBuilder), (PyObject *) self, "build", args, 2);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/expressions/Bindings.h"
#include "org/apache/lucene/queries/function/ValueSource.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {

        ::java::lang::Class *Bindings::class$ = NULL;
        jmethodID *Bindings::mids$ = NULL;
        bool Bindings::live$ = false;

        jclass Bindings::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/expressions/Bindings");

            mids$ = new jmethodID[max_mid];
            mids$[mid_getValueSource_3afe260d] = env->getMethodID(cls, "getValueSource", "(Ljava/lang/String;)Lorg/apache/lucene/queries/function/ValueSource;");
            mids$[mid_getScoreValueSource_b62b6193] = env->getMethodID(cls, "getScoreValueSource", "()Lorg/apache/lucene/queries/function/ValueSource;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::queries::function::ValueSource Bindings::getValueSource(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::queries::function::ValueSource(env->callObjectMethod(this$, mids$[mid_getValueSource_3afe260d], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        static PyObject *t_Bindings_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Bindings_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Bindings_getValueSource(t_Bindings *self, PyObject *arg);

        static PyMethodDef t_Bindings__methods_[] = {
          DECLARE_METHOD(t_Bindings, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Bindings, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Bindings, getValueSource, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Bindings, t_Bindings, ::java::lang::Object, Bindings, abstract_init, 0, 0, 0, 0, 0);

        void t_Bindings::install(PyObject *module)
        {
          installType(&PY_TYPE(Bindings), module, "Bindings", 0);
        }

        void t_Bindings::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(Bindings).tp_dict, "class_", make_descriptor(Bindings::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(Bindings).tp_dict, "wrapfn_", make_descriptor(t_Bindings::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(Bindings).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Bindings_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Bindings::initializeClass, 1)))
            return NULL;
          return t_Bindings::wrap_Object(Bindings(((t_Bindings *) arg)->object.this$));
        }
        static PyObject *t_Bindings_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Bindings::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_Bindings_getValueSource(t_Bindings *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::queries::function::ValueSource result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = self->object.getValueSource(a0));
            return ::org::apache::lucene::queries::function::t_ValueSource::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getValueSource", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/gl/GalicianAnalyzer.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace gl {

          ::java::lang::Class *GalicianAnalyzer::class$ = NULL;
          jmethodID *GalicianAnalyzer::mids$ = NULL;
          bool GalicianAnalyzer::live$ = false;
          ::java::lang::String *GalicianAnalyzer::DEFAULT_STOPWORD_FILE = NULL;

          jclass GalicianAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/gl/GalicianAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_6d1f9881] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_0d96cf33] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;)V");
              mids$[mid_init$_3ea629c6] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/util/CharArraySet;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_83eafe28] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_c9d7e4a3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_getDefaultStopSet_d2d3505c] = env->getStaticMethodID(cls, "getDefaultStopSet", "()Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_STOPWORD_FILE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_STOPWORD_FILE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          GalicianAnalyzer::GalicianAnalyzer() : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          GalicianAnalyzer::GalicianAnalyzer(const ::org::apache::lucene::analysis::util::CharArraySet & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_6d1f9881, a0.this$)) {}

          GalicianAnalyzer::GalicianAnalyzer(const ::org::apache::lucene::util::Version & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_0d96cf33, a0.this$)) {}

          GalicianAnalyzer::GalicianAnalyzer(const ::org::apache::lucene::analysis::util::CharArraySet & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_3ea629c6, a0.this$, a1.this$)) {}

          GalicianAnalyzer::GalicianAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_83eafe28, a0.this$, a1.this$)) {}

          GalicianAnalyzer::GalicianAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1, const ::org::apache::lucene::analysis::util::CharArraySet & a2) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_c9d7e4a3, a0.this$, a1.this$, a2.this$)) {}

          ::org::apache::lucene::analysis::util::CharArraySet GalicianAnalyzer::getDefaultStopSet()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getDefaultStopSet_d2d3505c]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace gl {
          static PyObject *t_GalicianAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GalicianAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_GalicianAnalyzer_init_(t_GalicianAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_GalicianAnalyzer_getDefaultStopSet(PyTypeObject *type);
          static PyObject *t_GalicianAnalyzer_get__defaultStopSet(t_GalicianAnalyzer *self, void *data);
          static PyGetSetDef t_GalicianAnalyzer__fields_[] = {
            DECLARE_GET_FIELD(t_GalicianAnalyzer, defaultStopSet),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_GalicianAnalyzer__methods_[] = {
            DECLARE_METHOD(t_GalicianAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GalicianAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GalicianAnalyzer, getDefaultStopSet, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(GalicianAnalyzer, t_GalicianAnalyzer, ::org::apache::lucene::analysis::util::StopwordAnalyzerBase, GalicianAnalyzer, t_GalicianAnalyzer_init_, 0, 0, t_GalicianAnalyzer__fields_, 0, 0);

          void t_GalicianAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(GalicianAnalyzer), module, "GalicianAnalyzer", 0);
          }

          void t_GalicianAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(GalicianAnalyzer).tp_dict, "class_", make_descriptor(GalicianAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(GalicianAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_GalicianAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(GalicianAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(GalicianAnalyzer::initializeClass);
            PyDict_SetItemString(PY_TYPE(GalicianAnalyzer).tp_dict, "DEFAULT_STOPWORD_FILE", make_descriptor(j2p(*GalicianAnalyzer::DEFAULT_STOPWORD_FILE)));
          }

          static PyObject *t_GalicianAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GalicianAnalyzer::initializeClass, 1)))
              return NULL;
            return t_GalicianAnalyzer::wrap_Object(GalicianAnalyzer(((t_GalicianAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_GalicianAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GalicianAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_GalicianAnalyzer_init_(t_GalicianAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                GalicianAnalyzer object((jobject) NULL);

                INT_CALL(object = GalicianAnalyzer());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                ::org::apache::lucene::analysis::util::CharArraySet a0((jobject) NULL);
                PyTypeObject **p0;
                GalicianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = GalicianAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                GalicianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::util::Version::initializeClass, &a0))
                {
                  INT_CALL(object = GalicianAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::analysis::util::CharArraySet a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                GalicianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = GalicianAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                GalicianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "kK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = GalicianAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                ::org::apache::lucene::analysis::util::CharArraySet a2((jobject) NULL);
                PyTypeObject **p2;
                GalicianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "kKK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_, &a2, &p2, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = GalicianAnalyzer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_GalicianAnalyzer_getDefaultStopSet(PyTypeObject *type)
          {
            ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::gl::GalicianAnalyzer::getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_GalicianAnalyzer_get__defaultStopSet(t_GalicianAnalyzer *self, void *data)
          {
            ::org::apache::lucene::analysis::util::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/FSLockFactory.h"
#include "java/io/File.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *FSLockFactory::class$ = NULL;
        jmethodID *FSLockFactory::mids$ = NULL;
        bool FSLockFactory::live$ = false;

        jclass FSLockFactory::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/FSLockFactory");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_getLockDir_a8eb7bbe] = env->getMethodID(cls, "getLockDir", "()Ljava/io/File;");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
            mids$[mid_setLockDir_c3dacf57] = env->getMethodID(cls, "setLockDir", "(Ljava/io/File;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FSLockFactory::FSLockFactory() : ::org::apache::lucene::store::LockFactory(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        ::java::io::File FSLockFactory::getLockDir() const
        {
          return ::java::io::File(env->callObjectMethod(this$, mids$[mid_getLockDir_a8eb7bbe]));
        }

        ::java::lang::String FSLockFactory::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_FSLockFactory_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FSLockFactory_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FSLockFactory_init_(t_FSLockFactory *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FSLockFactory_getLockDir(t_FSLockFactory *self);
        static PyObject *t_FSLockFactory_toString(t_FSLockFactory *self, PyObject *args);
        static PyObject *t_FSLockFactory_get__lockDir(t_FSLockFactory *self, void *data);
        static PyGetSetDef t_FSLockFactory__fields_[] = {
          DECLARE_GET_FIELD(t_FSLockFactory, lockDir),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FSLockFactory__methods_[] = {
          DECLARE_METHOD(t_FSLockFactory, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FSLockFactory, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FSLockFactory, getLockDir, METH_NOARGS),
          DECLARE_METHOD(t_FSLockFactory, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FSLockFactory, t_FSLockFactory, ::org::apache::lucene::store::LockFactory, FSLockFactory, t_FSLockFactory_init_, 0, 0, t_FSLockFactory__fields_, 0, 0);

        void t_FSLockFactory::install(PyObject *module)
        {
          installType(&PY_TYPE(FSLockFactory), module, "FSLockFactory", 0);
        }

        void t_FSLockFactory::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FSLockFactory).tp_dict, "class_", make_descriptor(FSLockFactory::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FSLockFactory).tp_dict, "wrapfn_", make_descriptor(t_FSLockFactory::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FSLockFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FSLockFactory_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FSLockFactory::initializeClass, 1)))
            return NULL;
          return t_FSLockFactory::wrap_Object(FSLockFactory(((t_FSLockFactory *) arg)->object.this$));
        }
        static PyObject *t_FSLockFactory_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FSLockFactory::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FSLockFactory_init_(t_FSLockFactory *self, PyObject *args, PyObject *kwds)
        {
          FSLockFactory object((jobject) NULL);

          INT_CALL(object = FSLockFactory());
          self->object = object;

          return 0;
        }

        static PyObject *t_FSLockFactory_getLockDir(t_FSLockFactory *self)
        {
          ::java::io::File result((jobject) NULL);
          OBJ_CALL(result = self->object.getLockDir());
          return ::java::io::t_File::wrap_Object(result);
        }

        static PyObject *t_FSLockFactory_toString(t_FSLockFactory *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(FSLockFactory), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_FSLockFactory_get__lockDir(t_FSLockFactory *self, void *data)
        {
          ::java::io::File value((jobject) NULL);
          OBJ_CALL(value = self->object.getLockDir());
          return ::java::io::t_File::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/BasicModelIF.h"
#include "org/apache/lucene/search/similarities/BasicStats.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *BasicModelIF::class$ = NULL;
          jmethodID *BasicModelIF::mids$ = NULL;
          bool BasicModelIF::live$ = false;

          jclass BasicModelIF::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/BasicModelIF");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_score_076760a9] = env->getMethodID(cls, "score", "(Lorg/apache/lucene/search/similarities/BasicStats;F)F");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BasicModelIF::BasicModelIF() : ::org::apache::lucene::search::similarities::BasicModel(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jfloat BasicModelIF::score(const ::org::apache::lucene::search::similarities::BasicStats & a0, jfloat a1) const
          {
            return env->callFloatMethod(this$, mids$[mid_score_076760a9], a0.this$, a1);
          }

          ::java::lang::String BasicModelIF::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_BasicModelIF_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BasicModelIF_instance_(PyTypeObject *type, PyObject *arg);
          static int t_BasicModelIF_init_(t_BasicModelIF *self, PyObject *args, PyObject *kwds);
          static PyObject *t_BasicModelIF_score(t_BasicModelIF *self, PyObject *args);
          static PyObject *t_BasicModelIF_toString(t_BasicModelIF *self, PyObject *args);

          static PyMethodDef t_BasicModelIF__methods_[] = {
            DECLARE_METHOD(t_BasicModelIF, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BasicModelIF, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BasicModelIF, score, METH_VARARGS),
            DECLARE_METHOD(t_BasicModelIF, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(BasicModelIF, t_BasicModelIF, ::org::apache::lucene::search::similarities::BasicModel, BasicModelIF, t_BasicModelIF_init_, 0, 0, 0, 0, 0);

          void t_BasicModelIF::install(PyObject *module)
          {
            installType(&PY_TYPE(BasicModelIF), module, "BasicModelIF", 0);
          }

          void t_BasicModelIF::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(BasicModelIF).tp_dict, "class_", make_descriptor(BasicModelIF::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(BasicModelIF).tp_dict, "wrapfn_", make_descriptor(t_BasicModelIF::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(BasicModelIF).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_BasicModelIF_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BasicModelIF::initializeClass, 1)))
              return NULL;
            return t_BasicModelIF::wrap_Object(BasicModelIF(((t_BasicModelIF *) arg)->object.this$));
          }
          static PyObject *t_BasicModelIF_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BasicModelIF::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_BasicModelIF_init_(t_BasicModelIF *self, PyObject *args, PyObject *kwds)
          {
            BasicModelIF object((jobject) NULL);

            INT_CALL(object = BasicModelIF());
            self->object = object;

            return 0;
          }

          static PyObject *t_BasicModelIF_score(t_BasicModelIF *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jfloat a1;
            jfloat result;

            if (!parseArgs(args, "kF", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.score(a0, a1));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(BasicModelIF), (PyObject *) self, "score", args, 2);
          }

          static PyObject *t_BasicModelIF_toString(t_BasicModelIF *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(BasicModelIF), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ckb/SoraniStemFilterFactory.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/ckb/SoraniStemFilter.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ckb {

          ::java::lang::Class *SoraniStemFilterFactory::class$ = NULL;
          jmethodID *SoraniStemFilterFactory::mids$ = NULL;
          bool SoraniStemFilterFactory::live$ = false;

          jclass SoraniStemFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ckb/SoraniStemFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_84ba1585] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/ckb/SoraniStemFilter;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SoraniStemFilterFactory::SoraniStemFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::ckb::SoraniStemFilter SoraniStemFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::ckb::SoraniStemFilter(env->callObjectMethod(this$, mids$[mid_create_84ba1585], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ckb {
          static PyObject *t_SoraniStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SoraniStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SoraniStemFilterFactory_init_(t_SoraniStemFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SoraniStemFilterFactory_create(t_SoraniStemFilterFactory *self, PyObject *args);

          static PyMethodDef t_SoraniStemFilterFactory__methods_[] = {
            DECLARE_METHOD(t_SoraniStemFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SoraniStemFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SoraniStemFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SoraniStemFilterFactory, t_SoraniStemFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, SoraniStemFilterFactory, t_SoraniStemFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_SoraniStemFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(SoraniStemFilterFactory), module, "SoraniStemFilterFactory", 0);
          }

          void t_SoraniStemFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SoraniStemFilterFactory).tp_dict, "class_", make_descriptor(SoraniStemFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SoraniStemFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_SoraniStemFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SoraniStemFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SoraniStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SoraniStemFilterFactory::initializeClass, 1)))
              return NULL;
            return t_SoraniStemFilterFactory::wrap_Object(SoraniStemFilterFactory(((t_SoraniStemFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_SoraniStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SoraniStemFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SoraniStemFilterFactory_init_(t_SoraniStemFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            SoraniStemFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = SoraniStemFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SoraniStemFilterFactory_create(t_SoraniStemFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::ckb::SoraniStemFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::ckb::t_SoraniStemFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(SoraniStemFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/packed/PackedDataOutput.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {

          ::java::lang::Class *PackedDataOutput::class$ = NULL;
          jmethodID *PackedDataOutput::mids$ = NULL;
          bool PackedDataOutput::live$ = false;

          jclass PackedDataOutput::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/packed/PackedDataOutput");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_27875f57] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/DataOutput;)V");
              mids$[mid_flush_54c6a166] = env->getMethodID(cls, "flush", "()V");
              mids$[mid_writeLong_25d05c8f] = env->getMethodID(cls, "writeLong", "(JI)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PackedDataOutput::PackedDataOutput(const ::org::apache::lucene::store::DataOutput & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_27875f57, a0.this$)) {}

          void PackedDataOutput::flush() const
          {
            env->callVoidMethod(this$, mids$[mid_flush_54c6a166]);
          }

          void PackedDataOutput::writeLong(jlong a0, jint a1) const
          {
            env->callVoidMethod(this$, mids$[mid_writeLong_25d05c8f], a0, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {
          static PyObject *t_PackedDataOutput_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PackedDataOutput_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PackedDataOutput_init_(t_PackedDataOutput *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PackedDataOutput_flush(t_PackedDataOutput *self);
          static PyObject *t_PackedDataOutput_writeLong(t_PackedDataOutput *self, PyObject *args);

          static PyMethodDef t_PackedDataOutput__methods_[] = {
            DECLARE_METHOD(t_PackedDataOutput, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedDataOutput, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedDataOutput, flush, METH_NOARGS),
            DECLARE_METHOD(t_PackedDataOutput, writeLong, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PackedDataOutput, t_PackedDataOutput, ::java::lang::Object, PackedDataOutput, t_PackedDataOutput_init_, 0, 0, 0, 0, 0);

          void t_PackedDataOutput::install(PyObject *module)
          {
            installType(&PY_TYPE(PackedDataOutput), module, "PackedDataOutput", 0);
          }

          void t_PackedDataOutput::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PackedDataOutput).tp_dict, "class_", make_descriptor(PackedDataOutput::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PackedDataOutput).tp_dict, "wrapfn_", make_descriptor(t_PackedDataOutput::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PackedDataOutput).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PackedDataOutput_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PackedDataOutput::initializeClass, 1)))
              return NULL;
            return t_PackedDataOutput::wrap_Object(PackedDataOutput(((t_PackedDataOutput *) arg)->object.this$));
          }
          static PyObject *t_PackedDataOutput_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PackedDataOutput::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PackedDataOutput_init_(t_PackedDataOutput *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::store::DataOutput a0((jobject) NULL);
            PackedDataOutput object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::store::DataOutput::initializeClass, &a0))
            {
              INT_CALL(object = PackedDataOutput(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PackedDataOutput_flush(t_PackedDataOutput *self)
          {
            OBJ_CALL(self->object.flush());
            Py_RETURN_NONE;
          }

          static PyObject *t_PackedDataOutput_writeLong(t_PackedDataOutput *self, PyObject *args)
          {
            jlong a0;
            jint a1;

            if (!parseArgs(args, "JI", &a0, &a1))
            {
              OBJ_CALL(self->object.writeLong(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "writeLong", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/gl/GalicianStemFilterFactory.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace gl {

          ::java::lang::Class *GalicianStemFilterFactory::class$ = NULL;
          jmethodID *GalicianStemFilterFactory::mids$ = NULL;
          bool GalicianStemFilterFactory::live$ = false;

          jclass GalicianStemFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/gl/GalicianStemFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          GalicianStemFilterFactory::GalicianStemFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream GalicianStemFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace gl {
          static PyObject *t_GalicianStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GalicianStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_GalicianStemFilterFactory_init_(t_GalicianStemFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_GalicianStemFilterFactory_create(t_GalicianStemFilterFactory *self, PyObject *args);

          static PyMethodDef t_GalicianStemFilterFactory__methods_[] = {
            DECLARE_METHOD(t_GalicianStemFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GalicianStemFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GalicianStemFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(GalicianStemFilterFactory, t_GalicianStemFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, GalicianStemFilterFactory, t_GalicianStemFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_GalicianStemFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(GalicianStemFilterFactory), module, "GalicianStemFilterFactory", 0);
          }

          void t_GalicianStemFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(GalicianStemFilterFactory).tp_dict, "class_", make_descriptor(GalicianStemFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(GalicianStemFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_GalicianStemFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(GalicianStemFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_GalicianStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GalicianStemFilterFactory::initializeClass, 1)))
              return NULL;
            return t_GalicianStemFilterFactory::wrap_Object(GalicianStemFilterFactory(((t_GalicianStemFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_GalicianStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GalicianStemFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_GalicianStemFilterFactory_init_(t_GalicianStemFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            GalicianStemFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = GalicianStemFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_GalicianStemFilterFactory_create(t_GalicianStemFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(GalicianStemFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/io/Writer.h"
#include "java/lang/Appendable.h"
#include "java/io/Flushable.h"
#include "java/io/Closeable.h"
#include "java/lang/CharSequence.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace java {
  namespace io {

    ::java::lang::Class *Writer::class$ = NULL;
    jmethodID *Writer::mids$ = NULL;
    bool Writer::live$ = false;

    jclass Writer::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/io/Writer");

        mids$ = new jmethodID[max_mid];
        mids$[mid_append_368f1679] = env->getMethodID(cls, "append", "(C)Ljava/io/Writer;");
        mids$[mid_append_31d2f801] = env->getMethodID(cls, "append", "(Ljava/lang/CharSequence;)Ljava/io/Writer;");
        mids$[mid_append_b3d4aa31] = env->getMethodID(cls, "append", "(Ljava/lang/CharSequence;II)Ljava/io/Writer;");
        mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
        mids$[mid_flush_54c6a166] = env->getMethodID(cls, "flush", "()V");
        mids$[mid_write_5fdc3f48] = env->getMethodID(cls, "write", "(Ljava/lang/String;)V");
        mids$[mid_write_39c7bd3c] = env->getMethodID(cls, "write", "(I)V");
        mids$[mid_write_700e23d6] = env->getMethodID(cls, "write", "([C)V");
        mids$[mid_write_6f0bb356] = env->getMethodID(cls, "write", "([CII)V");
        mids$[mid_write_555f322c] = env->getMethodID(cls, "write", "(Ljava/lang/String;II)V");

        class$ = (::java::lang::Class *) new JObject(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    Writer Writer::append(jchar a0) const
    {
      return Writer(env->callObjectMethod(this$, mids$[mid_append_368f1679], a0));
    }

    Writer Writer::append(const ::java::lang::CharSequence & a0) const
    {
      return Writer(env->callObjectMethod(this$, mids$[mid_append_31d2f801], a0.this$));
    }

    Writer Writer::append(const ::java::lang::CharSequence & a0, jint a1, jint a2) const
    {
      return Writer(env->callObjectMethod(this$, mids$[mid_append_b3d4aa31], a0.this$, a1, a2));
    }

    void Writer::close() const
    {
      env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
    }

    void Writer::flush() const
    {
      env->callVoidMethod(this$, mids$[mid_flush_54c6a166]);
    }

    void Writer::write(const ::java::lang::String & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_write_5fdc3f48], a0.this$);
    }

    void Writer::write(jint a0) const
    {
      env->callVoidMethod(this$, mids$[mid_write_39c7bd3c], a0);
    }

    void Writer::write(const JArray< jchar > & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_write_700e23d6], a0.this$);
    }

    void Writer::write(const JArray< jchar > & a0, jint a1, jint a2) const
    {
      env->callVoidMethod(this$, mids$[mid_write_6f0bb356], a0.this$, a1, a2);
    }

    void Writer::write(const ::java::lang::String & a0, jint a1, jint a2) const
    {
      env->callVoidMethod(this$, mids$[mid_write_555f322c], a0.this$, a1, a2);
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace io {
    static PyObject *t_Writer_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Writer_instance_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Writer_append(t_Writer *self, PyObject *args);
    static PyObject *t_Writer_close(t_Writer *self);
    static PyObject *t_Writer_flush(t_Writer *self);
    static PyObject *t_Writer_write(t_Writer *self, PyObject *args);

    static PyMethodDef t_Writer__methods_[] = {
      DECLARE_METHOD(t_Writer, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Writer, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Writer, append, METH_VARARGS),
      DECLARE_METHOD(t_Writer, close, METH_NOARGS),
      DECLARE_METHOD(t_Writer, flush, METH_NOARGS),
      DECLARE_METHOD(t_Writer, write, METH_VARARGS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(Writer, t_Writer, ::java::lang::Object, Writer, abstract_init, 0, 0, 0, 0, 0);

    void t_Writer::install(PyObject *module)
    {
      installType(&PY_TYPE(Writer), module, "Writer", 0);
    }

    void t_Writer::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(Writer).tp_dict, "class_", make_descriptor(Writer::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(Writer).tp_dict, "wrapfn_", make_descriptor(t_Writer::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(Writer).tp_dict, "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_Writer_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, Writer::initializeClass, 1)))
        return NULL;
      return t_Writer::wrap_Object(Writer(((t_Writer *) arg)->object.this$));
    }
    static PyObject *t_Writer_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, Writer::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static PyObject *t_Writer_append(t_Writer *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jchar a0;
          Writer result((jobject) NULL);

          if (!parseArgs(args, "C", &a0))
          {
            OBJ_CALL(result = self->object.append(a0));
            return t_Writer::wrap_Object(result);
          }
        }
        {
          ::java::lang::CharSequence a0((jobject) NULL);
          Writer result((jobject) NULL);

          if (!parseArgs(args, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
          {
            OBJ_CALL(result = self->object.append(a0));
            return t_Writer::wrap_Object(result);
          }
        }
        break;
       case 3:
        {
          ::java::lang::CharSequence a0((jobject) NULL);
          jint a1;
          jint a2;
          Writer result((jobject) NULL);

          if (!parseArgs(args, "OII", &::java::lang::PY_TYPE(CharSequence), &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.append(a0, a1, a2));
            return t_Writer::wrap_Object(result);
          }
        }
      }

      PyErr_SetArgsError((PyObject *) self, "append", args);
      return NULL;
    }

    static PyObject *t_Writer_close(t_Writer *self)
    {
      OBJ_CALL(self->object.close());
      Py_RETURN_NONE;
    }

    static PyObject *t_Writer_flush(t_Writer *self)
    {
      OBJ_CALL(self->object.flush());
      Py_RETURN_NONE;
    }

    static PyObject *t_Writer_write(t_Writer *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          ::java::lang::String a0((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(self->object.write(a0));
            Py_RETURN_NONE;
          }
        }
        {
          jint a0;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(self->object.write(a0));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jchar > a0((jobject) NULL);

          if (!parseArgs(args, "[C", &a0))
          {
            OBJ_CALL(self->object.write(a0));
            Py_RETURN_NONE;
          }
        }
        break;
       case 3:
        {
          JArray< jchar > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[CII", &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.write(a0, a1, a2));
            Py_RETURN_NONE;
          }
        }
        {
          ::java::lang::String a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "sII", &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.write(a0, a1, a2));
            Py_RETURN_NONE;
          }
        }
      }

      PyErr_SetArgsError((PyObject *) self, "write", args);
      return NULL;
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/RegexpQueryNodeBuilder.h"
#include "org/apache/lucene/search/RegexpQuery.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/StandardQueryBuilder.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {

              ::java::lang::Class *RegexpQueryNodeBuilder::class$ = NULL;
              jmethodID *RegexpQueryNodeBuilder::mids$ = NULL;
              bool RegexpQueryNodeBuilder::live$ = false;

              jclass RegexpQueryNodeBuilder::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/builders/RegexpQueryNodeBuilder");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_build_261cecb0] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/search/RegexpQuery;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              RegexpQueryNodeBuilder::RegexpQueryNodeBuilder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              ::org::apache::lucene::search::RegexpQuery RegexpQueryNodeBuilder::build(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                return ::org::apache::lucene::search::RegexpQuery(env->callObjectMethod(this$, mids$[mid_build_261cecb0], a0.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {
              static PyObject *t_RegexpQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_RegexpQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg);
              static int t_RegexpQueryNodeBuilder_init_(t_RegexpQueryNodeBuilder *self, PyObject *args, PyObject *kwds);
              static PyObject *t_RegexpQueryNodeBuilder_build(t_RegexpQueryNodeBuilder *self, PyObject *arg);

              static PyMethodDef t_RegexpQueryNodeBuilder__methods_[] = {
                DECLARE_METHOD(t_RegexpQueryNodeBuilder, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_RegexpQueryNodeBuilder, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_RegexpQueryNodeBuilder, build, METH_O),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(RegexpQueryNodeBuilder, t_RegexpQueryNodeBuilder, ::java::lang::Object, RegexpQueryNodeBuilder, t_RegexpQueryNodeBuilder_init_, 0, 0, 0, 0, 0);

              void t_RegexpQueryNodeBuilder::install(PyObject *module)
              {
                installType(&PY_TYPE(RegexpQueryNodeBuilder), module, "RegexpQueryNodeBuilder", 0);
              }

              void t_RegexpQueryNodeBuilder::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(RegexpQueryNodeBuilder).tp_dict, "class_", make_descriptor(RegexpQueryNodeBuilder::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(RegexpQueryNodeBuilder).tp_dict, "wrapfn_", make_descriptor(t_RegexpQueryNodeBuilder::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(RegexpQueryNodeBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_RegexpQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, RegexpQueryNodeBuilder::initializeClass, 1)))
                  return NULL;
                return t_RegexpQueryNodeBuilder::wrap_Object(RegexpQueryNodeBuilder(((t_RegexpQueryNodeBuilder *) arg)->object.this$));
              }
              static PyObject *t_RegexpQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, RegexpQueryNodeBuilder::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_RegexpQueryNodeBuilder_init_(t_RegexpQueryNodeBuilder *self, PyObject *args, PyObject *kwds)
              {
                RegexpQueryNodeBuilder object((jobject) NULL);

                INT_CALL(object = RegexpQueryNodeBuilder());
                self->object = object;

                return 0;
              }

              static PyObject *t_RegexpQueryNodeBuilder_build(t_RegexpQueryNodeBuilder *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::search::RegexpQuery result((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.build(a0));
                  return ::org::apache::lucene::search::t_RegexpQuery::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "build", arg);
                return NULL;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FieldComparator$ByteComparator.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/FieldComparator.h"
#include "java/lang/Byte.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FieldComparator$ByteComparator::class$ = NULL;
        jmethodID *FieldComparator$ByteComparator::mids$ = NULL;
        bool FieldComparator$ByteComparator::live$ = false;

        jclass FieldComparator$ByteComparator::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FieldComparator$ByteComparator");

            mids$ = new jmethodID[max_mid];
            mids$[mid_compare_d8d154b9] = env->getMethodID(cls, "compare", "(II)I");
            mids$[mid_compareBottom_39c7bd23] = env->getMethodID(cls, "compareBottom", "(I)I");
            mids$[mid_compareTop_39c7bd23] = env->getMethodID(cls, "compareTop", "(I)I");
            mids$[mid_copy_d8d154a6] = env->getMethodID(cls, "copy", "(II)V");
            mids$[mid_setBottom_39c7bd3c] = env->getMethodID(cls, "setBottom", "(I)V");
            mids$[mid_setNextReader_6329aed7] = env->getMethodID(cls, "setNextReader", "(Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/search/FieldComparator;");
            mids$[mid_setTopValue_c2b89a85] = env->getMethodID(cls, "setTopValue", "(Ljava/lang/Byte;)V");
            mids$[mid_value_b801bfbe] = env->getMethodID(cls, "value", "(I)Ljava/lang/Byte;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jint FieldComparator$ByteComparator::compare(jint a0, jint a1) const
        {
          return env->callIntMethod(this$, mids$[mid_compare_d8d154b9], a0, a1);
        }

        jint FieldComparator$ByteComparator::compareBottom(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_compareBottom_39c7bd23], a0);
        }

        jint FieldComparator$ByteComparator::compareTop(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_compareTop_39c7bd23], a0);
        }

        void FieldComparator$ByteComparator::copy(jint a0, jint a1) const
        {
          env->callVoidMethod(this$, mids$[mid_copy_d8d154a6], a0, a1);
        }

        void FieldComparator$ByteComparator::setBottom(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setBottom_39c7bd3c], a0);
        }

        ::org::apache::lucene::search::FieldComparator FieldComparator$ByteComparator::setNextReader(const ::org::apache::lucene::index::AtomicReaderContext & a0) const
        {
          return ::org::apache::lucene::search::FieldComparator(env->callObjectMethod(this$, mids$[mid_setNextReader_6329aed7], a0.this$));
        }

        void FieldComparator$ByteComparator::setTopValue(const ::java::lang::Byte & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setTopValue_c2b89a85], a0.this$);
        }

        ::java::lang::Byte FieldComparator$ByteComparator::value(jint a0) const
        {
          return ::java::lang::Byte(env->callObjectMethod(this$, mids$[mid_value_b801bfbe], a0));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FieldComparator$ByteComparator_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldComparator$ByteComparator_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldComparator$ByteComparator_of_(t_FieldComparator$ByteComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$ByteComparator_compare(t_FieldComparator$ByteComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$ByteComparator_compareBottom(t_FieldComparator$ByteComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$ByteComparator_compareTop(t_FieldComparator$ByteComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$ByteComparator_copy(t_FieldComparator$ByteComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$ByteComparator_setBottom(t_FieldComparator$ByteComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$ByteComparator_setNextReader(t_FieldComparator$ByteComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$ByteComparator_setTopValue(t_FieldComparator$ByteComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$ByteComparator_value(t_FieldComparator$ByteComparator *self, PyObject *args);
        static int t_FieldComparator$ByteComparator_set__bottom(t_FieldComparator$ByteComparator *self, PyObject *arg, void *data);
        static int t_FieldComparator$ByteComparator_set__nextReader(t_FieldComparator$ByteComparator *self, PyObject *arg, void *data);
        static int t_FieldComparator$ByteComparator_set__topValue(t_FieldComparator$ByteComparator *self, PyObject *arg, void *data);
        static PyObject *t_FieldComparator$ByteComparator_get__parameters_(t_FieldComparator$ByteComparator *self, void *data);
        static PyGetSetDef t_FieldComparator$ByteComparator__fields_[] = {
          DECLARE_SET_FIELD(t_FieldComparator$ByteComparator, bottom),
          DECLARE_SET_FIELD(t_FieldComparator$ByteComparator, nextReader),
          DECLARE_SET_FIELD(t_FieldComparator$ByteComparator, topValue),
          DECLARE_GET_FIELD(t_FieldComparator$ByteComparator, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FieldComparator$ByteComparator__methods_[] = {
          DECLARE_METHOD(t_FieldComparator$ByteComparator, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldComparator$ByteComparator, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldComparator$ByteComparator, of_, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$ByteComparator, compare, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$ByteComparator, compareBottom, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$ByteComparator, compareTop, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$ByteComparator, copy, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$ByteComparator, setBottom, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$ByteComparator, setNextReader, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$ByteComparator, setTopValue, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$ByteComparator, value, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldComparator$ByteComparator, t_FieldComparator$ByteComparator, ::org::apache::lucene::search::FieldComparator$NumericComparator, FieldComparator$ByteComparator, abstract_init, 0, 0, t_FieldComparator$ByteComparator__fields_, 0, 0);
        PyObject *t_FieldComparator$ByteComparator::wrap_Object(const FieldComparator$ByteComparator& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FieldComparator$ByteComparator::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FieldComparator$ByteComparator *self = (t_FieldComparator$ByteComparator *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_FieldComparator$ByteComparator::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FieldComparator$ByteComparator::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FieldComparator$ByteComparator *self = (t_FieldComparator$ByteComparator *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_FieldComparator$ByteComparator::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldComparator$ByteComparator), module, "FieldComparator$ByteComparator", 0);
        }

        void t_FieldComparator$ByteComparator::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldComparator$ByteComparator).tp_dict, "class_", make_descriptor(FieldComparator$ByteComparator::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldComparator$ByteComparator).tp_dict, "wrapfn_", make_descriptor(t_FieldComparator$ByteComparator::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldComparator$ByteComparator).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldComparator$ByteComparator_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldComparator$ByteComparator::initializeClass, 1)))
            return NULL;
          return t_FieldComparator$ByteComparator::wrap_Object(FieldComparator$ByteComparator(((t_FieldComparator$ByteComparator *) arg)->object.this$));
        }
        static PyObject *t_FieldComparator$ByteComparator_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldComparator$ByteComparator::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FieldComparator$ByteComparator_of_(t_FieldComparator$ByteComparator *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_FieldComparator$ByteComparator_compare(t_FieldComparator$ByteComparator *self, PyObject *args)
        {
          jint a0;
          jint a1;
          jint result;

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(result = self->object.compare(a0, a1));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FieldComparator$ByteComparator), (PyObject *) self, "compare", args, 2);
        }

        static PyObject *t_FieldComparator$ByteComparator_compareBottom(t_FieldComparator$ByteComparator *self, PyObject *args)
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.compareBottom(a0));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FieldComparator$ByteComparator), (PyObject *) self, "compareBottom", args, 2);
        }

        static PyObject *t_FieldComparator$ByteComparator_compareTop(t_FieldComparator$ByteComparator *self, PyObject *args)
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.compareTop(a0));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FieldComparator$ByteComparator), (PyObject *) self, "compareTop", args, 2);
        }

        static PyObject *t_FieldComparator$ByteComparator_copy(t_FieldComparator$ByteComparator *self, PyObject *args)
        {
          jint a0;
          jint a1;

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(self->object.copy(a0, a1));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FieldComparator$ByteComparator), (PyObject *) self, "copy", args, 2);
        }

        static PyObject *t_FieldComparator$ByteComparator_setBottom(t_FieldComparator$ByteComparator *self, PyObject *args)
        {
          jint a0;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(self->object.setBottom(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FieldComparator$ByteComparator), (PyObject *) self, "setBottom", args, 2);
        }

        static PyObject *t_FieldComparator$ByteComparator_setNextReader(t_FieldComparator$ByteComparator *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
          ::org::apache::lucene::search::FieldComparator result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.setNextReader(a0));
            return ::org::apache::lucene::search::t_FieldComparator::wrap_Object(result, &::java::lang::PY_TYPE(Byte));
          }

          return callSuper(&PY_TYPE(FieldComparator$ByteComparator), (PyObject *) self, "setNextReader", args, 2);
        }

        static PyObject *t_FieldComparator$ByteComparator_setTopValue(t_FieldComparator$ByteComparator *self, PyObject *args)
        {
          ::java::lang::Byte a0((jobject) NULL);

          if (!parseArgs(args, "O", &::java::lang::PY_TYPE(Byte), &a0))
          {
            OBJ_CALL(self->object.setTopValue(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FieldComparator$ByteComparator), (PyObject *) self, "setTopValue", args, 2);
        }

        static PyObject *t_FieldComparator$ByteComparator_value(t_FieldComparator$ByteComparator *self, PyObject *args)
        {
          jint a0;
          ::java::lang::Byte result((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.value(a0));
            return ::java::lang::t_Byte::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FieldComparator$ByteComparator), (PyObject *) self, "value", args, 2);
        }
        static PyObject *t_FieldComparator$ByteComparator_get__parameters_(t_FieldComparator$ByteComparator *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static int t_FieldComparator$ByteComparator_set__bottom(t_FieldComparator$ByteComparator *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setBottom(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "bottom", arg);
          return -1;
        }

        static int t_FieldComparator$ByteComparator_set__nextReader(t_FieldComparator$ByteComparator *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::index::AtomicReaderContext value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &value))
            {
              INT_CALL(self->object.setNextReader(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "nextReader", arg);
          return -1;
        }

        static int t_FieldComparator$ByteComparator_set__topValue(t_FieldComparator$ByteComparator *self, PyObject *arg, void *data)
        {
          {
            ::java::lang::Byte value((jobject) NULL);
            if (!parseArg(arg, "O", &::java::lang::PY_TYPE(Byte), &value))
            {
              INT_CALL(self->object.setTopValue(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "topValue", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/PrintStreamInfoStream.h"
#include "java/io/IOException.h"
#include "java/lang/String.h"
#include "java/io/PrintStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *PrintStreamInfoStream::class$ = NULL;
        jmethodID *PrintStreamInfoStream::mids$ = NULL;
        bool PrintStreamInfoStream::live$ = false;

        jclass PrintStreamInfoStream::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/PrintStreamInfoStream");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_1b7c898b] = env->getMethodID(cls, "<init>", "(Ljava/io/PrintStream;)V");
            mids$[mid_init$_be16aeab] = env->getMethodID(cls, "<init>", "(Ljava/io/PrintStream;I)V");
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_isEnabled_5fdc3f44] = env->getMethodID(cls, "isEnabled", "(Ljava/lang/String;)Z");
            mids$[mid_isSystemStream_54c6a16a] = env->getMethodID(cls, "isSystemStream", "()Z");
            mids$[mid_message_4a264742] = env->getMethodID(cls, "message", "(Ljava/lang/String;Ljava/lang/String;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PrintStreamInfoStream::PrintStreamInfoStream(const ::java::io::PrintStream & a0) : ::org::apache::lucene::util::InfoStream(env->newObject(initializeClass, &mids$, mid_init$_1b7c898b, a0.this$)) {}

        PrintStreamInfoStream::PrintStreamInfoStream(const ::java::io::PrintStream & a0, jint a1) : ::org::apache::lucene::util::InfoStream(env->newObject(initializeClass, &mids$, mid_init$_be16aeab, a0.this$, a1)) {}

        void PrintStreamInfoStream::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        jboolean PrintStreamInfoStream::isEnabled(const ::java::lang::String & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_isEnabled_5fdc3f44], a0.this$);
        }

        jboolean PrintStreamInfoStream::isSystemStream() const
        {
          return env->callBooleanMethod(this$, mids$[mid_isSystemStream_54c6a16a]);
        }

        void PrintStreamInfoStream::message(const ::java::lang::String & a0, const ::java::lang::String & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_message_4a264742], a0.this$, a1.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_PrintStreamInfoStream_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PrintStreamInfoStream_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PrintStreamInfoStream_init_(t_PrintStreamInfoStream *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PrintStreamInfoStream_close(t_PrintStreamInfoStream *self, PyObject *args);
        static PyObject *t_PrintStreamInfoStream_isEnabled(t_PrintStreamInfoStream *self, PyObject *args);
        static PyObject *t_PrintStreamInfoStream_isSystemStream(t_PrintStreamInfoStream *self);
        static PyObject *t_PrintStreamInfoStream_message(t_PrintStreamInfoStream *self, PyObject *args);
        static PyObject *t_PrintStreamInfoStream_get__systemStream(t_PrintStreamInfoStream *self, void *data);
        static PyGetSetDef t_PrintStreamInfoStream__fields_[] = {
          DECLARE_GET_FIELD(t_PrintStreamInfoStream, systemStream),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PrintStreamInfoStream__methods_[] = {
          DECLARE_METHOD(t_PrintStreamInfoStream, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PrintStreamInfoStream, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PrintStreamInfoStream, close, METH_VARARGS),
          DECLARE_METHOD(t_PrintStreamInfoStream, isEnabled, METH_VARARGS),
          DECLARE_METHOD(t_PrintStreamInfoStream, isSystemStream, METH_NOARGS),
          DECLARE_METHOD(t_PrintStreamInfoStream, message, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PrintStreamInfoStream, t_PrintStreamInfoStream, ::org::apache::lucene::util::InfoStream, PrintStreamInfoStream, t_PrintStreamInfoStream_init_, 0, 0, t_PrintStreamInfoStream__fields_, 0, 0);

        void t_PrintStreamInfoStream::install(PyObject *module)
        {
          installType(&PY_TYPE(PrintStreamInfoStream), module, "PrintStreamInfoStream", 0);
        }

        void t_PrintStreamInfoStream::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PrintStreamInfoStream).tp_dict, "class_", make_descriptor(PrintStreamInfoStream::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PrintStreamInfoStream).tp_dict, "wrapfn_", make_descriptor(t_PrintStreamInfoStream::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PrintStreamInfoStream).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_PrintStreamInfoStream_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PrintStreamInfoStream::initializeClass, 1)))
            return NULL;
          return t_PrintStreamInfoStream::wrap_Object(PrintStreamInfoStream(((t_PrintStreamInfoStream *) arg)->object.this$));
        }
        static PyObject *t_PrintStreamInfoStream_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PrintStreamInfoStream::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PrintStreamInfoStream_init_(t_PrintStreamInfoStream *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::io::PrintStream a0((jobject) NULL);
              PrintStreamInfoStream object((jobject) NULL);

              if (!parseArgs(args, "k", ::java::io::PrintStream::initializeClass, &a0))
              {
                INT_CALL(object = PrintStreamInfoStream(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              ::java::io::PrintStream a0((jobject) NULL);
              jint a1;
              PrintStreamInfoStream object((jobject) NULL);

              if (!parseArgs(args, "kI", ::java::io::PrintStream::initializeClass, &a0, &a1))
              {
                INT_CALL(object = PrintStreamInfoStream(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_PrintStreamInfoStream_close(t_PrintStreamInfoStream *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.close());
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(PrintStreamInfoStream), (PyObject *) self, "close", args, 2);
        }

        static PyObject *t_PrintStreamInfoStream_isEnabled(t_PrintStreamInfoStream *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.isEnabled(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(PrintStreamInfoStream), (PyObject *) self, "isEnabled", args, 2);
        }

        static PyObject *t_PrintStreamInfoStream_isSystemStream(t_PrintStreamInfoStream *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.isSystemStream());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_PrintStreamInfoStream_message(t_PrintStreamInfoStream *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);

          if (!parseArgs(args, "ss", &a0, &a1))
          {
            OBJ_CALL(self->object.message(a0, a1));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(PrintStreamInfoStream), (PyObject *) self, "message", args, 2);
        }

        static PyObject *t_PrintStreamInfoStream_get__systemStream(t_PrintStreamInfoStream *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.isSystemStream());
          Py_RETURN_BOOL(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapper.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace shingle {

          ::java::lang::Class *ShingleAnalyzerWrapper::class$ = NULL;
          jmethodID *ShingleAnalyzerWrapper::mids$ = NULL;
          bool ShingleAnalyzerWrapper::live$ = false;

          jclass ShingleAnalyzerWrapper::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapper");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_31619410] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Analyzer;)V");
              mids$[mid_init$_d8d154a6] = env->getMethodID(cls, "<init>", "(II)V");
              mids$[mid_init$_e882998a] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Analyzer;I)V");
              mids$[mid_init$_ad527988] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Analyzer;II)V");
              mids$[mid_init$_05cde3fa] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Analyzer;IILjava/lang/String;ZZLjava/lang/String;)V");
              mids$[mid_getFillerToken_14c7b5c5] = env->getMethodID(cls, "getFillerToken", "()Ljava/lang/String;");
              mids$[mid_getMaxShingleSize_54c6a179] = env->getMethodID(cls, "getMaxShingleSize", "()I");
              mids$[mid_getMinShingleSize_54c6a179] = env->getMethodID(cls, "getMinShingleSize", "()I");
              mids$[mid_getTokenSeparator_14c7b5c5] = env->getMethodID(cls, "getTokenSeparator", "()Ljava/lang/String;");
              mids$[mid_getWrappedAnalyzer_29a2299f] = env->getMethodID(cls, "getWrappedAnalyzer", "(Ljava/lang/String;)Lorg/apache/lucene/analysis/Analyzer;");
              mids$[mid_isOutputUnigrams_54c6a16a] = env->getMethodID(cls, "isOutputUnigrams", "()Z");
              mids$[mid_isOutputUnigramsIfNoShingles_54c6a16a] = env->getMethodID(cls, "isOutputUnigramsIfNoShingles", "()Z");
              mids$[mid_wrapComponents_46d74455] = env->getMethodID(cls, "wrapComponents", "(Ljava/lang/String;Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ShingleAnalyzerWrapper::ShingleAnalyzerWrapper() : ::org::apache::lucene::analysis::AnalyzerWrapper(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ShingleAnalyzerWrapper::ShingleAnalyzerWrapper(const ::org::apache::lucene::analysis::Analyzer & a0) : ::org::apache::lucene::analysis::AnalyzerWrapper(env->newObject(initializeClass, &mids$, mid_init$_31619410, a0.this$)) {}

          ShingleAnalyzerWrapper::ShingleAnalyzerWrapper(jint a0, jint a1) : ::org::apache::lucene::analysis::AnalyzerWrapper(env->newObject(initializeClass, &mids$, mid_init$_d8d154a6, a0, a1)) {}

          ShingleAnalyzerWrapper::ShingleAnalyzerWrapper(const ::org::apache::lucene::analysis::Analyzer & a0, jint a1) : ::org::apache::lucene::analysis::AnalyzerWrapper(env->newObject(initializeClass, &mids$, mid_init$_e882998a, a0.this$, a1)) {}

          ShingleAnalyzerWrapper::ShingleAnalyzerWrapper(const ::org::apache::lucene::analysis::Analyzer & a0, jint a1, jint a2) : ::org::apache::lucene::analysis::AnalyzerWrapper(env->newObject(initializeClass, &mids$, mid_init$_ad527988, a0.this$, a1, a2)) {}

          ShingleAnalyzerWrapper::ShingleAnalyzerWrapper(const ::org::apache::lucene::analysis::Analyzer & a0, jint a1, jint a2, const ::java::lang::String & a3, jboolean a4, jboolean a5, const ::java::lang::String & a6) : ::org::apache::lucene::analysis::AnalyzerWrapper(env->newObject(initializeClass, &mids$, mid_init$_05cde3fa, a0.this$, a1, a2, a3.this$, a4, a5, a6.this$)) {}

          ::java::lang::String ShingleAnalyzerWrapper::getFillerToken() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getFillerToken_14c7b5c5]));
          }

          jint ShingleAnalyzerWrapper::getMaxShingleSize() const
          {
            return env->callIntMethod(this$, mids$[mid_getMaxShingleSize_54c6a179]);
          }

          jint ShingleAnalyzerWrapper::getMinShingleSize() const
          {
            return env->callIntMethod(this$, mids$[mid_getMinShingleSize_54c6a179]);
          }

          ::java::lang::String ShingleAnalyzerWrapper::getTokenSeparator() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getTokenSeparator_14c7b5c5]));
          }

          ::org::apache::lucene::analysis::Analyzer ShingleAnalyzerWrapper::getWrappedAnalyzer(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::analysis::Analyzer(env->callObjectMethod(this$, mids$[mid_getWrappedAnalyzer_29a2299f], a0.this$));
          }

          jboolean ShingleAnalyzerWrapper::isOutputUnigrams() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isOutputUnigrams_54c6a16a]);
          }

          jboolean ShingleAnalyzerWrapper::isOutputUnigramsIfNoShingles() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isOutputUnigramsIfNoShingles_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace shingle {
          static PyObject *t_ShingleAnalyzerWrapper_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ShingleAnalyzerWrapper_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ShingleAnalyzerWrapper_init_(t_ShingleAnalyzerWrapper *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ShingleAnalyzerWrapper_getFillerToken(t_ShingleAnalyzerWrapper *self);
          static PyObject *t_ShingleAnalyzerWrapper_getMaxShingleSize(t_ShingleAnalyzerWrapper *self);
          static PyObject *t_ShingleAnalyzerWrapper_getMinShingleSize(t_ShingleAnalyzerWrapper *self);
          static PyObject *t_ShingleAnalyzerWrapper_getTokenSeparator(t_ShingleAnalyzerWrapper *self);
          static PyObject *t_ShingleAnalyzerWrapper_getWrappedAnalyzer(t_ShingleAnalyzerWrapper *self, PyObject *arg);
          static PyObject *t_ShingleAnalyzerWrapper_isOutputUnigrams(t_ShingleAnalyzerWrapper *self);
          static PyObject *t_ShingleAnalyzerWrapper_isOutputUnigramsIfNoShingles(t_ShingleAnalyzerWrapper *self);
          static PyObject *t_ShingleAnalyzerWrapper_get__fillerToken(t_ShingleAnalyzerWrapper *self, void *data);
          static PyObject *t_ShingleAnalyzerWrapper_get__maxShingleSize(t_ShingleAnalyzerWrapper *self, void *data);
          static PyObject *t_ShingleAnalyzerWrapper_get__minShingleSize(t_ShingleAnalyzerWrapper *self, void *data);
          static PyObject *t_ShingleAnalyzerWrapper_get__outputUnigrams(t_ShingleAnalyzerWrapper *self, void *data);
          static PyObject *t_ShingleAnalyzerWrapper_get__outputUnigramsIfNoShingles(t_ShingleAnalyzerWrapper *self, void *data);
          static PyObject *t_ShingleAnalyzerWrapper_get__tokenSeparator(t_ShingleAnalyzerWrapper *self, void *data);
          static PyGetSetDef t_ShingleAnalyzerWrapper__fields_[] = {
            DECLARE_GET_FIELD(t_ShingleAnalyzerWrapper, fillerToken),
            DECLARE_GET_FIELD(t_ShingleAnalyzerWrapper, maxShingleSize),
            DECLARE_GET_FIELD(t_ShingleAnalyzerWrapper, minShingleSize),
            DECLARE_GET_FIELD(t_ShingleAnalyzerWrapper, outputUnigrams),
            DECLARE_GET_FIELD(t_ShingleAnalyzerWrapper, outputUnigramsIfNoShingles),
            DECLARE_GET_FIELD(t_ShingleAnalyzerWrapper, tokenSeparator),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_ShingleAnalyzerWrapper__methods_[] = {
            DECLARE_METHOD(t_ShingleAnalyzerWrapper, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ShingleAnalyzerWrapper, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ShingleAnalyzerWrapper, getFillerToken, METH_NOARGS),
            DECLARE_METHOD(t_ShingleAnalyzerWrapper, getMaxShingleSize, METH_NOARGS),
            DECLARE_METHOD(t_ShingleAnalyzerWrapper, getMinShingleSize, METH_NOARGS),
            DECLARE_METHOD(t_ShingleAnalyzerWrapper, getTokenSeparator, METH_NOARGS),
            DECLARE_METHOD(t_ShingleAnalyzerWrapper, getWrappedAnalyzer, METH_O),
            DECLARE_METHOD(t_ShingleAnalyzerWrapper, isOutputUnigrams, METH_NOARGS),
            DECLARE_METHOD(t_ShingleAnalyzerWrapper, isOutputUnigramsIfNoShingles, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ShingleAnalyzerWrapper, t_ShingleAnalyzerWrapper, ::org::apache::lucene::analysis::AnalyzerWrapper, ShingleAnalyzerWrapper, t_ShingleAnalyzerWrapper_init_, 0, 0, t_ShingleAnalyzerWrapper__fields_, 0, 0);

          void t_ShingleAnalyzerWrapper::install(PyObject *module)
          {
            installType(&PY_TYPE(ShingleAnalyzerWrapper), module, "ShingleAnalyzerWrapper", 0);
          }

          void t_ShingleAnalyzerWrapper::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ShingleAnalyzerWrapper).tp_dict, "class_", make_descriptor(ShingleAnalyzerWrapper::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ShingleAnalyzerWrapper).tp_dict, "wrapfn_", make_descriptor(t_ShingleAnalyzerWrapper::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ShingleAnalyzerWrapper).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ShingleAnalyzerWrapper_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ShingleAnalyzerWrapper::initializeClass, 1)))
              return NULL;
            return t_ShingleAnalyzerWrapper::wrap_Object(ShingleAnalyzerWrapper(((t_ShingleAnalyzerWrapper *) arg)->object.this$));
          }
          static PyObject *t_ShingleAnalyzerWrapper_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ShingleAnalyzerWrapper::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ShingleAnalyzerWrapper_init_(t_ShingleAnalyzerWrapper *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                ShingleAnalyzerWrapper object((jobject) NULL);

                INT_CALL(object = ShingleAnalyzerWrapper());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
                ShingleAnalyzerWrapper object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0))
                {
                  INT_CALL(object = ShingleAnalyzerWrapper(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                jint a0;
                jint a1;
                ShingleAnalyzerWrapper object((jobject) NULL);

                if (!parseArgs(args, "II", &a0, &a1))
                {
                  INT_CALL(object = ShingleAnalyzerWrapper(a0, a1));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
                jint a1;
                ShingleAnalyzerWrapper object((jobject) NULL);

                if (!parseArgs(args, "kI", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = ShingleAnalyzerWrapper(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
                jint a1;
                jint a2;
                ShingleAnalyzerWrapper object((jobject) NULL);

                if (!parseArgs(args, "kII", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = ShingleAnalyzerWrapper(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 7:
              {
                ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
                jint a1;
                jint a2;
                ::java::lang::String a3((jobject) NULL);
                jboolean a4;
                jboolean a5;
                ::java::lang::String a6((jobject) NULL);
                ShingleAnalyzerWrapper object((jobject) NULL);

                if (!parseArgs(args, "kIIsZZs", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5, &a6))
                {
                  INT_CALL(object = ShingleAnalyzerWrapper(a0, a1, a2, a3, a4, a5, a6));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ShingleAnalyzerWrapper_getFillerToken(t_ShingleAnalyzerWrapper *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.getFillerToken());
            return j2p(result);
          }

          static PyObject *t_ShingleAnalyzerWrapper_getMaxShingleSize(t_ShingleAnalyzerWrapper *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getMaxShingleSize());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_ShingleAnalyzerWrapper_getMinShingleSize(t_ShingleAnalyzerWrapper *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getMinShingleSize());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_ShingleAnalyzerWrapper_getTokenSeparator(t_ShingleAnalyzerWrapper *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.getTokenSeparator());
            return j2p(result);
          }

          static PyObject *t_ShingleAnalyzerWrapper_getWrappedAnalyzer(t_ShingleAnalyzerWrapper *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::analysis::Analyzer result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.getWrappedAnalyzer(a0));
              return ::org::apache::lucene::analysis::t_Analyzer::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getWrappedAnalyzer", arg);
            return NULL;
          }

          static PyObject *t_ShingleAnalyzerWrapper_isOutputUnigrams(t_ShingleAnalyzerWrapper *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isOutputUnigrams());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_ShingleAnalyzerWrapper_isOutputUnigramsIfNoShingles(t_ShingleAnalyzerWrapper *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isOutputUnigramsIfNoShingles());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_ShingleAnalyzerWrapper_get__fillerToken(t_ShingleAnalyzerWrapper *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getFillerToken());
            return j2p(value);
          }

          static PyObject *t_ShingleAnalyzerWrapper_get__maxShingleSize(t_ShingleAnalyzerWrapper *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getMaxShingleSize());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_ShingleAnalyzerWrapper_get__minShingleSize(t_ShingleAnalyzerWrapper *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getMinShingleSize());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_ShingleAnalyzerWrapper_get__outputUnigrams(t_ShingleAnalyzerWrapper *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isOutputUnigrams());
            Py_RETURN_BOOL(value);
          }

          static PyObject *t_ShingleAnalyzerWrapper_get__outputUnigramsIfNoShingles(t_ShingleAnalyzerWrapper *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isOutputUnigramsIfNoShingles());
            Py_RETURN_BOOL(value);
          }

          static PyObject *t_ShingleAnalyzerWrapper_get__tokenSeparator(t_ShingleAnalyzerWrapper *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getTokenSeparator());
            return j2p(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/LengthFilterFactory.h"
#include "org/apache/lucene/analysis/miscellaneous/LengthFilter.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *LengthFilterFactory::class$ = NULL;
          jmethodID *LengthFilterFactory::mids$ = NULL;
          bool LengthFilterFactory::live$ = false;
          ::java::lang::String *LengthFilterFactory::MAX_KEY = NULL;
          ::java::lang::String *LengthFilterFactory::MIN_KEY = NULL;

          jclass LengthFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/LengthFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_c5f48534] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/miscellaneous/LengthFilter;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              MAX_KEY = new ::java::lang::String(env->getStaticObjectField(cls, "MAX_KEY", "Ljava/lang/String;"));
              MIN_KEY = new ::java::lang::String(env->getStaticObjectField(cls, "MIN_KEY", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          LengthFilterFactory::LengthFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::miscellaneous::LengthFilter LengthFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::miscellaneous::LengthFilter(env->callObjectMethod(this$, mids$[mid_create_c5f48534], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_LengthFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LengthFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_LengthFilterFactory_init_(t_LengthFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_LengthFilterFactory_create(t_LengthFilterFactory *self, PyObject *args);

          static PyMethodDef t_LengthFilterFactory__methods_[] = {
            DECLARE_METHOD(t_LengthFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LengthFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LengthFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(LengthFilterFactory, t_LengthFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, LengthFilterFactory, t_LengthFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_LengthFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(LengthFilterFactory), module, "LengthFilterFactory", 0);
          }

          void t_LengthFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(LengthFilterFactory).tp_dict, "class_", make_descriptor(LengthFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(LengthFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_LengthFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(LengthFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(LengthFilterFactory::initializeClass);
            PyDict_SetItemString(PY_TYPE(LengthFilterFactory).tp_dict, "MAX_KEY", make_descriptor(j2p(*LengthFilterFactory::MAX_KEY)));
            PyDict_SetItemString(PY_TYPE(LengthFilterFactory).tp_dict, "MIN_KEY", make_descriptor(j2p(*LengthFilterFactory::MIN_KEY)));
          }

          static PyObject *t_LengthFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LengthFilterFactory::initializeClass, 1)))
              return NULL;
            return t_LengthFilterFactory::wrap_Object(LengthFilterFactory(((t_LengthFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_LengthFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LengthFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_LengthFilterFactory_init_(t_LengthFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            LengthFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = LengthFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_LengthFilterFactory_create(t_LengthFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::miscellaneous::LengthFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::miscellaneous::t_LengthFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(LengthFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/processors/NoChildOptimizationQueryNodeProcessor.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace processors {

              ::java::lang::Class *NoChildOptimizationQueryNodeProcessor::class$ = NULL;
              jmethodID *NoChildOptimizationQueryNodeProcessor::mids$ = NULL;
              bool NoChildOptimizationQueryNodeProcessor::live$ = false;

              jclass NoChildOptimizationQueryNodeProcessor::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/processors/NoChildOptimizationQueryNodeProcessor");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_postProcessNode_6705aed7] = env->getMethodID(cls, "postProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_preProcessNode_6705aed7] = env->getMethodID(cls, "preProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_setChildrenOrder_4f378251] = env->getMethodID(cls, "setChildrenOrder", "(Ljava/util/List;)Ljava/util/List;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              NoChildOptimizationQueryNodeProcessor::NoChildOptimizationQueryNodeProcessor() : ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace processors {
              static PyObject *t_NoChildOptimizationQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_NoChildOptimizationQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg);
              static int t_NoChildOptimizationQueryNodeProcessor_init_(t_NoChildOptimizationQueryNodeProcessor *self, PyObject *args, PyObject *kwds);

              static PyMethodDef t_NoChildOptimizationQueryNodeProcessor__methods_[] = {
                DECLARE_METHOD(t_NoChildOptimizationQueryNodeProcessor, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_NoChildOptimizationQueryNodeProcessor, instance_, METH_O | METH_CLASS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(NoChildOptimizationQueryNodeProcessor, t_NoChildOptimizationQueryNodeProcessor, ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl, NoChildOptimizationQueryNodeProcessor, t_NoChildOptimizationQueryNodeProcessor_init_, 0, 0, 0, 0, 0);

              void t_NoChildOptimizationQueryNodeProcessor::install(PyObject *module)
              {
                installType(&PY_TYPE(NoChildOptimizationQueryNodeProcessor), module, "NoChildOptimizationQueryNodeProcessor", 0);
              }

              void t_NoChildOptimizationQueryNodeProcessor::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(NoChildOptimizationQueryNodeProcessor).tp_dict, "class_", make_descriptor(NoChildOptimizationQueryNodeProcessor::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(NoChildOptimizationQueryNodeProcessor).tp_dict, "wrapfn_", make_descriptor(t_NoChildOptimizationQueryNodeProcessor::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(NoChildOptimizationQueryNodeProcessor).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_NoChildOptimizationQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, NoChildOptimizationQueryNodeProcessor::initializeClass, 1)))
                  return NULL;
                return t_NoChildOptimizationQueryNodeProcessor::wrap_Object(NoChildOptimizationQueryNodeProcessor(((t_NoChildOptimizationQueryNodeProcessor *) arg)->object.this$));
              }
              static PyObject *t_NoChildOptimizationQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, NoChildOptimizationQueryNodeProcessor::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_NoChildOptimizationQueryNodeProcessor_init_(t_NoChildOptimizationQueryNodeProcessor *self, PyObject *args, PyObject *kwds)
              {
                NoChildOptimizationQueryNodeProcessor object((jobject) NULL);

                INT_CALL(object = NoChildOptimizationQueryNodeProcessor());
                self->object = object;

                return 0;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/text/SimpleDateFormat.h"
#include "java/lang/Class.h"
#include "java/lang/StringBuffer.h"
#include "java/lang/Object.h"
#include "java/util/Locale.h"
#include "java/util/Date.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace java {
  namespace text {

    ::java::lang::Class *SimpleDateFormat::class$ = NULL;
    jmethodID *SimpleDateFormat::mids$ = NULL;
    bool SimpleDateFormat::live$ = false;

    jclass SimpleDateFormat::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/text/SimpleDateFormat");

        mids$ = new jmethodID[max_mid];
        mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
        mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
        mids$[mid_init$_f32a91b9] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/util/Locale;)V");
        mids$[mid_applyLocalizedPattern_5fdc3f48] = env->getMethodID(cls, "applyLocalizedPattern", "(Ljava/lang/String;)V");
        mids$[mid_applyPattern_5fdc3f48] = env->getMethodID(cls, "applyPattern", "(Ljava/lang/String;)V");
        mids$[mid_clone_846352c3] = env->getMethodID(cls, "clone", "()Ljava/lang/Object;");
        mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
        mids$[mid_get2DigitYearStart_6e14513a] = env->getMethodID(cls, "get2DigitYearStart", "()Ljava/util/Date;");
        mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
        mids$[mid_set2DigitYearStart_aa83a4b3] = env->getMethodID(cls, "set2DigitYearStart", "(Ljava/util/Date;)V");
        mids$[mid_toLocalizedPattern_14c7b5c5] = env->getMethodID(cls, "toLocalizedPattern", "()Ljava/lang/String;");
        mids$[mid_toPattern_14c7b5c5] = env->getMethodID(cls, "toPattern", "()Ljava/lang/String;");

        class$ = (::java::lang::Class *) new JObject(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    SimpleDateFormat::SimpleDateFormat() : ::java::text::DateFormat(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

    SimpleDateFormat::SimpleDateFormat(const ::java::lang::String & a0) : ::java::text::DateFormat(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

    SimpleDateFormat::SimpleDateFormat(const ::java::lang::String & a0, const ::java::util::Locale & a1) : ::java::text::DateFormat(env->newObject(initializeClass, &mids$, mid_init$_f32a91b9, a0.this$, a1.this$)) {}

    void SimpleDateFormat::applyLocalizedPattern(const ::java::lang::String & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_applyLocalizedPattern_5fdc3f48], a0.this$);
    }

    void SimpleDateFormat::applyPattern(const ::java::lang::String & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_applyPattern_5fdc3f48], a0.this$);
    }

    ::java::lang::Object SimpleDateFormat::clone() const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_clone_846352c3]));
    }

    jboolean SimpleDateFormat::equals(const ::java::lang::Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
    }

    ::java::util::Date SimpleDateFormat::get2DigitYearStart() const
    {
      return ::java::util::Date(env->callObjectMethod(this$, mids$[mid_get2DigitYearStart_6e14513a]));
    }

    jint SimpleDateFormat::hashCode() const
    {
      return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
    }

    void SimpleDateFormat::set2DigitYearStart(const ::java::util::Date & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_set2DigitYearStart_aa83a4b3], a0.this$);
    }

    ::java::lang::String SimpleDateFormat::toLocalizedPattern() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toLocalizedPattern_14c7b5c5]));
    }

    ::java::lang::String SimpleDateFormat::toPattern() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toPattern_14c7b5c5]));
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace text {
    static PyObject *t_SimpleDateFormat_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_SimpleDateFormat_instance_(PyTypeObject *type, PyObject *arg);
    static int t_SimpleDateFormat_init_(t_SimpleDateFormat *self, PyObject *args, PyObject *kwds);
    static PyObject *t_SimpleDateFormat_applyLocalizedPattern(t_SimpleDateFormat *self, PyObject *arg);
    static PyObject *t_SimpleDateFormat_applyPattern(t_SimpleDateFormat *self, PyObject *arg);
    static PyObject *t_SimpleDateFormat_clone(t_SimpleDateFormat *self, PyObject *args);
    static PyObject *t_SimpleDateFormat_equals(t_SimpleDateFormat *self, PyObject *args);
    static PyObject *t_SimpleDateFormat_get2DigitYearStart(t_SimpleDateFormat *self);
    static PyObject *t_SimpleDateFormat_hashCode(t_SimpleDateFormat *self, PyObject *args);
    static PyObject *t_SimpleDateFormat_set2DigitYearStart(t_SimpleDateFormat *self, PyObject *arg);
    static PyObject *t_SimpleDateFormat_toLocalizedPattern(t_SimpleDateFormat *self);
    static PyObject *t_SimpleDateFormat_toPattern(t_SimpleDateFormat *self);
    static PyObject *t_SimpleDateFormat_get__2DigitYearStart(t_SimpleDateFormat *self, void *data);
    static int t_SimpleDateFormat_set__2DigitYearStart(t_SimpleDateFormat *self, PyObject *arg, void *data);
    static PyGetSetDef t_SimpleDateFormat__fields_[] = {
      DECLARE_GETSET_FIELD(t_SimpleDateFormat, 2DigitYearStart),
      { NULL, NULL, NULL, NULL, NULL }
    };

    static PyMethodDef t_SimpleDateFormat__methods_[] = {
      DECLARE_METHOD(t_SimpleDateFormat, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_SimpleDateFormat, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_SimpleDateFormat, applyLocalizedPattern, METH_O),
      DECLARE_METHOD(t_SimpleDateFormat, applyPattern, METH_O),
      DECLARE_METHOD(t_SimpleDateFormat, clone, METH_VARARGS),
      DECLARE_METHOD(t_SimpleDateFormat, equals, METH_VARARGS),
      DECLARE_METHOD(t_SimpleDateFormat, get2DigitYearStart, METH_NOARGS),
      DECLARE_METHOD(t_SimpleDateFormat, hashCode, METH_VARARGS),
      DECLARE_METHOD(t_SimpleDateFormat, set2DigitYearStart, METH_O),
      DECLARE_METHOD(t_SimpleDateFormat, toLocalizedPattern, METH_NOARGS),
      DECLARE_METHOD(t_SimpleDateFormat, toPattern, METH_NOARGS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(SimpleDateFormat, t_SimpleDateFormat, ::java::text::DateFormat, SimpleDateFormat, t_SimpleDateFormat_init_, 0, 0, t_SimpleDateFormat__fields_, 0, 0);

    void t_SimpleDateFormat::install(PyObject *module)
    {
      installType(&PY_TYPE(SimpleDateFormat), module, "SimpleDateFormat", 0);
    }

    void t_SimpleDateFormat::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(SimpleDateFormat).tp_dict, "class_", make_descriptor(SimpleDateFormat::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(SimpleDateFormat).tp_dict, "wrapfn_", make_descriptor(t_SimpleDateFormat::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(SimpleDateFormat).tp_dict, "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_SimpleDateFormat_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, SimpleDateFormat::initializeClass, 1)))
        return NULL;
      return t_SimpleDateFormat::wrap_Object(SimpleDateFormat(((t_SimpleDateFormat *) arg)->object.this$));
    }
    static PyObject *t_SimpleDateFormat_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, SimpleDateFormat::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static int t_SimpleDateFormat_init_(t_SimpleDateFormat *self, PyObject *args, PyObject *kwds)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          SimpleDateFormat object((jobject) NULL);

          INT_CALL(object = SimpleDateFormat());
          self->object = object;
          break;
        }
        goto err;
       case 1:
        {
          ::java::lang::String a0((jobject) NULL);
          SimpleDateFormat object((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            INT_CALL(object = SimpleDateFormat(a0));
            self->object = object;
            break;
          }
        }
        goto err;
       case 2:
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::util::Locale a1((jobject) NULL);
          SimpleDateFormat object((jobject) NULL);

          if (!parseArgs(args, "sk", ::java::util::Locale::initializeClass, &a0, &a1))
          {
            INT_CALL(object = SimpleDateFormat(a0, a1));
            self->object = object;
            break;
          }
        }
       default:
       err:
        PyErr_SetArgsError((PyObject *) self, "__init__", args);
        return -1;
      }

      return 0;
    }

    static PyObject *t_SimpleDateFormat_applyLocalizedPattern(t_SimpleDateFormat *self, PyObject *arg)
    {
      ::java::lang::String a0((jobject) NULL);

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(self->object.applyLocalizedPattern(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "applyLocalizedPattern", arg);
      return NULL;
    }

    static PyObject *t_SimpleDateFormat_applyPattern(t_SimpleDateFormat *self, PyObject *arg)
    {
      ::java::lang::String a0((jobject) NULL);

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(self->object.applyPattern(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "applyPattern", arg);
      return NULL;
    }

    static PyObject *t_SimpleDateFormat_clone(t_SimpleDateFormat *self, PyObject *args)
    {
      ::java::lang::Object result((jobject) NULL);

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.clone());
        return ::java::lang::t_Object::wrap_Object(result);
      }

      return callSuper(&PY_TYPE(SimpleDateFormat), (PyObject *) self, "clone", args, 2);
    }

    static PyObject *t_SimpleDateFormat_equals(t_SimpleDateFormat *self, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      jboolean result;

      if (!parseArgs(args, "o", &a0))
      {
        OBJ_CALL(result = self->object.equals(a0));
        Py_RETURN_BOOL(result);
      }

      return callSuper(&PY_TYPE(SimpleDateFormat), (PyObject *) self, "equals", args, 2);
    }

    static PyObject *t_SimpleDateFormat_get2DigitYearStart(t_SimpleDateFormat *self)
    {
      ::java::util::Date result((jobject) NULL);
      OBJ_CALL(result = self->object.get2DigitYearStart());
      return ::java::util::t_Date::wrap_Object(result);
    }

    static PyObject *t_SimpleDateFormat_hashCode(t_SimpleDateFormat *self, PyObject *args)
    {
      jint result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.hashCode());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(SimpleDateFormat), (PyObject *) self, "hashCode", args, 2);
    }

    static PyObject *t_SimpleDateFormat_set2DigitYearStart(t_SimpleDateFormat *self, PyObject *arg)
    {
      ::java::util::Date a0((jobject) NULL);

      if (!parseArg(arg, "k", ::java::util::Date::initializeClass, &a0))
      {
        OBJ_CALL(self->object.set2DigitYearStart(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "set2DigitYearStart", arg);
      return NULL;
    }

    static PyObject *t_SimpleDateFormat_toLocalizedPattern(t_SimpleDateFormat *self)
    {
      ::java::lang::String result((jobject) NULL);
      OBJ_CALL(result = self->object.toLocalizedPattern());
      return j2p(result);
    }

    static PyObject *t_SimpleDateFormat_toPattern(t_SimpleDateFormat *self)
    {
      ::java::lang::String result((jobject) NULL);
      OBJ_CALL(result = self->object.toPattern());
      return j2p(result);
    }

    static PyObject *t_SimpleDateFormat_get__2DigitYearStart(t_SimpleDateFormat *self, void *data)
    {
      ::java::util::Date value((jobject) NULL);
      OBJ_CALL(value = self->object.get2DigitYearStart());
      return ::java::util::t_Date::wrap_Object(value);
    }
    static int t_SimpleDateFormat_set__2DigitYearStart(t_SimpleDateFormat *self, PyObject *arg, void *data)
    {
      {
        ::java::util::Date value((jobject) NULL);
        if (!parseArg(arg, "k", ::java::util::Date::initializeClass, &value))
        {
          INT_CALL(self->object.set2DigitYearStart(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "2DigitYearStart", arg);
      return -1;
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spans/SpanPositionRangeQuery.h"
#include "org/apache/lucene/search/spans/SpanQuery.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {

          ::java::lang::Class *SpanPositionRangeQuery::class$ = NULL;
          jmethodID *SpanPositionRangeQuery::mids$ = NULL;
          bool SpanPositionRangeQuery::live$ = false;

          jclass SpanPositionRangeQuery::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spans/SpanPositionRangeQuery");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_d606f0cb] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/spans/SpanQuery;II)V");
              mids$[mid_clone_718ddad5] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/search/spans/SpanPositionRangeQuery;");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_getEnd_54c6a179] = env->getMethodID(cls, "getEnd", "()I");
              mids$[mid_getStart_54c6a179] = env->getMethodID(cls, "getStart", "()I");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_toString_97a5258f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");
              mids$[mid_acceptPosition_5342f73f] = env->getMethodID(cls, "acceptPosition", "(Lorg/apache/lucene/search/spans/Spans;)Lorg/apache/lucene/search/spans/SpanPositionCheckQuery$AcceptStatus;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SpanPositionRangeQuery::SpanPositionRangeQuery(const ::org::apache::lucene::search::spans::SpanQuery & a0, jint a1, jint a2) : ::org::apache::lucene::search::spans::SpanPositionCheckQuery(env->newObject(initializeClass, &mids$, mid_init$_d606f0cb, a0.this$, a1, a2)) {}

          SpanPositionRangeQuery SpanPositionRangeQuery::clone() const
          {
            return SpanPositionRangeQuery(env->callObjectMethod(this$, mids$[mid_clone_718ddad5]));
          }

          jboolean SpanPositionRangeQuery::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          jint SpanPositionRangeQuery::getEnd() const
          {
            return env->callIntMethod(this$, mids$[mid_getEnd_54c6a179]);
          }

          jint SpanPositionRangeQuery::getStart() const
          {
            return env->callIntMethod(this$, mids$[mid_getStart_54c6a179]);
          }

          jint SpanPositionRangeQuery::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          ::java::lang::String SpanPositionRangeQuery::toString(const ::java::lang::String & a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_97a5258f], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {
          static PyObject *t_SpanPositionRangeQuery_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SpanPositionRangeQuery_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SpanPositionRangeQuery_init_(t_SpanPositionRangeQuery *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SpanPositionRangeQuery_clone(t_SpanPositionRangeQuery *self, PyObject *args);
          static PyObject *t_SpanPositionRangeQuery_equals(t_SpanPositionRangeQuery *self, PyObject *args);
          static PyObject *t_SpanPositionRangeQuery_getEnd(t_SpanPositionRangeQuery *self);
          static PyObject *t_SpanPositionRangeQuery_getStart(t_SpanPositionRangeQuery *self);
          static PyObject *t_SpanPositionRangeQuery_hashCode(t_SpanPositionRangeQuery *self, PyObject *args);
          static PyObject *t_SpanPositionRangeQuery_toString(t_SpanPositionRangeQuery *self, PyObject *args);
          static PyObject *t_SpanPositionRangeQuery_get__end(t_SpanPositionRangeQuery *self, void *data);
          static PyObject *t_SpanPositionRangeQuery_get__start(t_SpanPositionRangeQuery *self, void *data);
          static PyGetSetDef t_SpanPositionRangeQuery__fields_[] = {
            DECLARE_GET_FIELD(t_SpanPositionRangeQuery, end),
            DECLARE_GET_FIELD(t_SpanPositionRangeQuery, start),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SpanPositionRangeQuery__methods_[] = {
            DECLARE_METHOD(t_SpanPositionRangeQuery, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanPositionRangeQuery, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanPositionRangeQuery, clone, METH_VARARGS),
            DECLARE_METHOD(t_SpanPositionRangeQuery, equals, METH_VARARGS),
            DECLARE_METHOD(t_SpanPositionRangeQuery, getEnd, METH_NOARGS),
            DECLARE_METHOD(t_SpanPositionRangeQuery, getStart, METH_NOARGS),
            DECLARE_METHOD(t_SpanPositionRangeQuery, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_SpanPositionRangeQuery, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SpanPositionRangeQuery, t_SpanPositionRangeQuery, ::org::apache::lucene::search::spans::SpanPositionCheckQuery, SpanPositionRangeQuery, t_SpanPositionRangeQuery_init_, 0, 0, t_SpanPositionRangeQuery__fields_, 0, 0);

          void t_SpanPositionRangeQuery::install(PyObject *module)
          {
            installType(&PY_TYPE(SpanPositionRangeQuery), module, "SpanPositionRangeQuery", 0);
          }

          void t_SpanPositionRangeQuery::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SpanPositionRangeQuery).tp_dict, "class_", make_descriptor(SpanPositionRangeQuery::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SpanPositionRangeQuery).tp_dict, "wrapfn_", make_descriptor(t_SpanPositionRangeQuery::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SpanPositionRangeQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SpanPositionRangeQuery_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SpanPositionRangeQuery::initializeClass, 1)))
              return NULL;
            return t_SpanPositionRangeQuery::wrap_Object(SpanPositionRangeQuery(((t_SpanPositionRangeQuery *) arg)->object.this$));
          }
          static PyObject *t_SpanPositionRangeQuery_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SpanPositionRangeQuery::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SpanPositionRangeQuery_init_(t_SpanPositionRangeQuery *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::search::spans::SpanQuery a0((jobject) NULL);
            jint a1;
            jint a2;
            SpanPositionRangeQuery object((jobject) NULL);

            if (!parseArgs(args, "kII", ::org::apache::lucene::search::spans::SpanQuery::initializeClass, &a0, &a1, &a2))
            {
              INT_CALL(object = SpanPositionRangeQuery(a0, a1, a2));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SpanPositionRangeQuery_clone(t_SpanPositionRangeQuery *self, PyObject *args)
          {
            SpanPositionRangeQuery result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.clone());
              return t_SpanPositionRangeQuery::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(SpanPositionRangeQuery), (PyObject *) self, "clone", args, 2);
          }

          static PyObject *t_SpanPositionRangeQuery_equals(t_SpanPositionRangeQuery *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(SpanPositionRangeQuery), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_SpanPositionRangeQuery_getEnd(t_SpanPositionRangeQuery *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getEnd());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_SpanPositionRangeQuery_getStart(t_SpanPositionRangeQuery *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getStart());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_SpanPositionRangeQuery_hashCode(t_SpanPositionRangeQuery *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(SpanPositionRangeQuery), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_SpanPositionRangeQuery_toString(t_SpanPositionRangeQuery *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = self->object.toString(a0));
              return j2p(result);
            }

            return callSuper(&PY_TYPE(SpanPositionRangeQuery), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_SpanPositionRangeQuery_get__end(t_SpanPositionRangeQuery *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getEnd());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_SpanPositionRangeQuery_get__start(t_SpanPositionRangeQuery *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getStart());
            return PyInt_FromLong((long) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/hu/HungarianLightStemFilterFactory.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace hu {

          ::java::lang::Class *HungarianLightStemFilterFactory::class$ = NULL;
          jmethodID *HungarianLightStemFilterFactory::mids$ = NULL;
          bool HungarianLightStemFilterFactory::live$ = false;

          jclass HungarianLightStemFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/hu/HungarianLightStemFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          HungarianLightStemFilterFactory::HungarianLightStemFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream HungarianLightStemFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace hu {
          static PyObject *t_HungarianLightStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_HungarianLightStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_HungarianLightStemFilterFactory_init_(t_HungarianLightStemFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_HungarianLightStemFilterFactory_create(t_HungarianLightStemFilterFactory *self, PyObject *args);

          static PyMethodDef t_HungarianLightStemFilterFactory__methods_[] = {
            DECLARE_METHOD(t_HungarianLightStemFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HungarianLightStemFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HungarianLightStemFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(HungarianLightStemFilterFactory, t_HungarianLightStemFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, HungarianLightStemFilterFactory, t_HungarianLightStemFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_HungarianLightStemFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(HungarianLightStemFilterFactory), module, "HungarianLightStemFilterFactory", 0);
          }

          void t_HungarianLightStemFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(HungarianLightStemFilterFactory).tp_dict, "class_", make_descriptor(HungarianLightStemFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(HungarianLightStemFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_HungarianLightStemFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(HungarianLightStemFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_HungarianLightStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, HungarianLightStemFilterFactory::initializeClass, 1)))
              return NULL;
            return t_HungarianLightStemFilterFactory::wrap_Object(HungarianLightStemFilterFactory(((t_HungarianLightStemFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_HungarianLightStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, HungarianLightStemFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_HungarianLightStemFilterFactory_init_(t_HungarianLightStemFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            HungarianLightStemFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = HungarianLightStemFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_HungarianLightStemFilterFactory_create(t_HungarianLightStemFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(HungarianLightStemFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/util/FilteringTokenFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {

          ::java::lang::Class *FilteringTokenFilter::class$ = NULL;
          jmethodID *FilteringTokenFilter::mids$ = NULL;
          bool FilteringTokenFilter::live$ = false;

          jclass FilteringTokenFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/util/FilteringTokenFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_init$_8f50e725] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_init$_f31dee3a] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;ZLorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_end_54c6a166] = env->getMethodID(cls, "end", "()V");
              mids$[mid_getEnablePositionIncrements_54c6a16a] = env->getMethodID(cls, "getEnablePositionIncrements", "()Z");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");
              mids$[mid_setEnablePositionIncrements_bb0c767f] = env->getMethodID(cls, "setEnablePositionIncrements", "(Z)V");
              mids$[mid_accept_54c6a16a] = env->getMethodID(cls, "accept", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FilteringTokenFilter::FilteringTokenFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          FilteringTokenFilter::FilteringTokenFilter(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::TokenStream & a1) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_8f50e725, a0.this$, a1.this$)) {}

          FilteringTokenFilter::FilteringTokenFilter(const ::org::apache::lucene::util::Version & a0, jboolean a1, const ::org::apache::lucene::analysis::TokenStream & a2) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_f31dee3a, a0.this$, a1, a2.this$)) {}

          void FilteringTokenFilter::end() const
          {
            env->callVoidMethod(this$, mids$[mid_end_54c6a166]);
          }

          jboolean FilteringTokenFilter::getEnablePositionIncrements() const
          {
            return env->callBooleanMethod(this$, mids$[mid_getEnablePositionIncrements_54c6a16a]);
          }

          jboolean FilteringTokenFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void FilteringTokenFilter::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }

          void FilteringTokenFilter::setEnablePositionIncrements(jboolean a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setEnablePositionIncrements_bb0c767f], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {
          static PyObject *t_FilteringTokenFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FilteringTokenFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FilteringTokenFilter_init_(t_FilteringTokenFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FilteringTokenFilter_end(t_FilteringTokenFilter *self, PyObject *args);
          static PyObject *t_FilteringTokenFilter_getEnablePositionIncrements(t_FilteringTokenFilter *self);
          static PyObject *t_FilteringTokenFilter_incrementToken(t_FilteringTokenFilter *self, PyObject *args);
          static PyObject *t_FilteringTokenFilter_reset(t_FilteringTokenFilter *self, PyObject *args);
          static PyObject *t_FilteringTokenFilter_setEnablePositionIncrements(t_FilteringTokenFilter *self, PyObject *arg);
          static PyObject *t_FilteringTokenFilter_get__enablePositionIncrements(t_FilteringTokenFilter *self, void *data);
          static int t_FilteringTokenFilter_set__enablePositionIncrements(t_FilteringTokenFilter *self, PyObject *arg, void *data);
          static PyGetSetDef t_FilteringTokenFilter__fields_[] = {
            DECLARE_GETSET_FIELD(t_FilteringTokenFilter, enablePositionIncrements),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_FilteringTokenFilter__methods_[] = {
            DECLARE_METHOD(t_FilteringTokenFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FilteringTokenFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FilteringTokenFilter, end, METH_VARARGS),
            DECLARE_METHOD(t_FilteringTokenFilter, getEnablePositionIncrements, METH_NOARGS),
            DECLARE_METHOD(t_FilteringTokenFilter, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_FilteringTokenFilter, reset, METH_VARARGS),
            DECLARE_METHOD(t_FilteringTokenFilter, setEnablePositionIncrements, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FilteringTokenFilter, t_FilteringTokenFilter, ::org::apache::lucene::analysis::TokenFilter, FilteringTokenFilter, t_FilteringTokenFilter_init_, 0, 0, t_FilteringTokenFilter__fields_, 0, 0);

          void t_FilteringTokenFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(FilteringTokenFilter), module, "FilteringTokenFilter", 0);
          }

          void t_FilteringTokenFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FilteringTokenFilter).tp_dict, "class_", make_descriptor(FilteringTokenFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FilteringTokenFilter).tp_dict, "wrapfn_", make_descriptor(t_FilteringTokenFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FilteringTokenFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FilteringTokenFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FilteringTokenFilter::initializeClass, 1)))
              return NULL;
            return t_FilteringTokenFilter::wrap_Object(FilteringTokenFilter(((t_FilteringTokenFilter *) arg)->object.this$));
          }
          static PyObject *t_FilteringTokenFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FilteringTokenFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FilteringTokenFilter_init_(t_FilteringTokenFilter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                FilteringTokenFilter object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
                {
                  INT_CALL(object = FilteringTokenFilter(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
                FilteringTokenFilter object((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = FilteringTokenFilter(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                jboolean a1;
                ::org::apache::lucene::analysis::TokenStream a2((jobject) NULL);
                FilteringTokenFilter object((jobject) NULL);

                if (!parseArgs(args, "kZk", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = FilteringTokenFilter(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_FilteringTokenFilter_end(t_FilteringTokenFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.end());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(FilteringTokenFilter), (PyObject *) self, "end", args, 2);
          }

          static PyObject *t_FilteringTokenFilter_getEnablePositionIncrements(t_FilteringTokenFilter *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.getEnablePositionIncrements());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_FilteringTokenFilter_incrementToken(t_FilteringTokenFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(FilteringTokenFilter), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_FilteringTokenFilter_reset(t_FilteringTokenFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(FilteringTokenFilter), (PyObject *) self, "reset", args, 2);
          }

          static PyObject *t_FilteringTokenFilter_setEnablePositionIncrements(t_FilteringTokenFilter *self, PyObject *arg)
          {
            jboolean a0;

            if (!parseArg(arg, "Z", &a0))
            {
              OBJ_CALL(self->object.setEnablePositionIncrements(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setEnablePositionIncrements", arg);
            return NULL;
          }

          static PyObject *t_FilteringTokenFilter_get__enablePositionIncrements(t_FilteringTokenFilter *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.getEnablePositionIncrements());
            Py_RETURN_BOOL(value);
          }
          static int t_FilteringTokenFilter_set__enablePositionIncrements(t_FilteringTokenFilter *self, PyObject *arg, void *data)
          {
            {
              jboolean value;
              if (!parseArg(arg, "Z", &value))
              {
                INT_CALL(self->object.setEnablePositionIncrements(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "enablePositionIncrements", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/pylucene/util/PythonComparable.h"
#include "java/lang/Comparable.h"
#include "java/lang/Throwable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace util {

        ::java::lang::Class *PythonComparable::class$ = NULL;
        jmethodID *PythonComparable::mids$ = NULL;
        bool PythonComparable::live$ = false;

        jclass PythonComparable::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/pylucene/util/PythonComparable");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_compareTo_290588f1] = env->getMethodID(cls, "compareTo", "(Ljava/lang/Object;)I");
            mids$[mid_finalize_54c6a166] = env->getMethodID(cls, "finalize", "()V");
            mids$[mid_pythonDecRef_54c6a166] = env->getMethodID(cls, "pythonDecRef", "()V");
            mids$[mid_pythonExtension_54c6a17a] = env->getMethodID(cls, "pythonExtension", "()J");
            mids$[mid_pythonExtension_0ee6df2f] = env->getMethodID(cls, "pythonExtension", "(J)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PythonComparable::PythonComparable() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void PythonComparable::finalize() const
        {
          env->callVoidMethod(this$, mids$[mid_finalize_54c6a166]);
        }

        jlong PythonComparable::pythonExtension() const
        {
          return env->callLongMethod(this$, mids$[mid_pythonExtension_54c6a17a]);
        }

        void PythonComparable::pythonExtension(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_pythonExtension_0ee6df2f], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace util {
        static PyObject *t_PythonComparable_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PythonComparable_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PythonComparable_init_(t_PythonComparable *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PythonComparable_finalize(t_PythonComparable *self);
        static PyObject *t_PythonComparable_pythonExtension(t_PythonComparable *self, PyObject *args);
        static jint JNICALL t_PythonComparable_compareTo0(JNIEnv *jenv, jobject jobj, jobject a0);
        static void JNICALL t_PythonComparable_pythonDecRef1(JNIEnv *jenv, jobject jobj);
        static PyObject *t_PythonComparable_get__self(t_PythonComparable *self, void *data);
        static PyGetSetDef t_PythonComparable__fields_[] = {
          DECLARE_GET_FIELD(t_PythonComparable, self),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PythonComparable__methods_[] = {
          DECLARE_METHOD(t_PythonComparable, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonComparable, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonComparable, finalize, METH_NOARGS),
          DECLARE_METHOD(t_PythonComparable, pythonExtension, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PythonComparable, t_PythonComparable, ::java::lang::Object, PythonComparable, t_PythonComparable_init_, 0, 0, t_PythonComparable__fields_, 0, 0);

        void t_PythonComparable::install(PyObject *module)
        {
          installType(&PY_TYPE(PythonComparable), module, "PythonComparable", 1);
        }

        void t_PythonComparable::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PythonComparable).tp_dict, "class_", make_descriptor(PythonComparable::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PythonComparable).tp_dict, "wrapfn_", make_descriptor(t_PythonComparable::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PythonComparable).tp_dict, "boxfn_", make_descriptor(boxObject));
          jclass cls = env->getClass(PythonComparable::initializeClass);
          JNINativeMethod methods[] = {
            { "compareTo", "(Ljava/lang/Object;)I", (void *) t_PythonComparable_compareTo0 },
            { "pythonDecRef", "()V", (void *) t_PythonComparable_pythonDecRef1 },
          };
          env->registerNatives(cls, methods, 2);
        }

        static PyObject *t_PythonComparable_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PythonComparable::initializeClass, 1)))
            return NULL;
          return t_PythonComparable::wrap_Object(PythonComparable(((t_PythonComparable *) arg)->object.this$));
        }
        static PyObject *t_PythonComparable_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PythonComparable::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PythonComparable_init_(t_PythonComparable *self, PyObject *args, PyObject *kwds)
        {
          PythonComparable object((jobject) NULL);

          INT_CALL(object = PythonComparable());
          self->object = object;

          Py_INCREF((PyObject *) self);
          self->object.pythonExtension((jlong) (Py_intptr_t) (void *) self);

          return 0;
        }

        static PyObject *t_PythonComparable_finalize(t_PythonComparable *self)
        {
          OBJ_CALL(self->object.finalize());
          Py_RETURN_NONE;
        }

        static PyObject *t_PythonComparable_pythonExtension(t_PythonComparable *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              jlong result;
              OBJ_CALL(result = self->object.pythonExtension());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }
            break;
           case 1:
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.pythonExtension(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "pythonExtension", args);
          return NULL;
        }

        static jint JNICALL t_PythonComparable_compareTo0(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonComparable::mids$[PythonComparable::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jint value;
          PyObject *o0 = ::java::lang::t_Object::wrap_Object(::java::lang::Object(a0));
          PyObject *result = PyObject_CallMethod(obj, "compareTo", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "I", &value))
          {
            throwTypeError("compareTo", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jint) 0;
        }

        static void JNICALL t_PythonComparable_pythonDecRef1(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonComparable::mids$[PythonComparable::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            jenv->CallVoidMethod(jobj, PythonComparable::mids$[PythonComparable::mid_pythonExtension_0ee6df2f], (jlong) 0);
            env->finalizeObject(jenv, obj);
          }
        }

        static PyObject *t_PythonComparable_get__self(t_PythonComparable *self, void *data)
        {
          jlong ptr;
          OBJ_CALL(ptr = self->object.pythonExtension());
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            Py_INCREF(obj);
            return obj;
          }
          else
            Py_RETURN_NONE;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/pylucene/util/PythonIterator.h"
#include "java/util/Iterator.h"
#include "java/lang/Throwable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace util {

        ::java::lang::Class *PythonIterator::class$ = NULL;
        jmethodID *PythonIterator::mids$ = NULL;
        bool PythonIterator::live$ = false;

        jclass PythonIterator::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/pylucene/util/PythonIterator");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_finalize_54c6a166] = env->getMethodID(cls, "finalize", "()V");
            mids$[mid_hasNext_54c6a16a] = env->getMethodID(cls, "hasNext", "()Z");
            mids$[mid_next_846352c3] = env->getMethodID(cls, "next", "()Ljava/lang/Object;");
            mids$[mid_pythonDecRef_54c6a166] = env->getMethodID(cls, "pythonDecRef", "()V");
            mids$[mid_pythonExtension_54c6a17a] = env->getMethodID(cls, "pythonExtension", "()J");
            mids$[mid_pythonExtension_0ee6df2f] = env->getMethodID(cls, "pythonExtension", "(J)V");
            mids$[mid_remove_54c6a166] = env->getMethodID(cls, "remove", "()V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PythonIterator::PythonIterator() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void PythonIterator::finalize() const
        {
          env->callVoidMethod(this$, mids$[mid_finalize_54c6a166]);
        }

        jlong PythonIterator::pythonExtension() const
        {
          return env->callLongMethod(this$, mids$[mid_pythonExtension_54c6a17a]);
        }

        void PythonIterator::pythonExtension(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_pythonExtension_0ee6df2f], a0);
        }

        void PythonIterator::remove() const
        {
          env->callVoidMethod(this$, mids$[mid_remove_54c6a166]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace util {
        static PyObject *t_PythonIterator_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PythonIterator_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PythonIterator_init_(t_PythonIterator *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PythonIterator_finalize(t_PythonIterator *self);
        static PyObject *t_PythonIterator_pythonExtension(t_PythonIterator *self, PyObject *args);
        static PyObject *t_PythonIterator_remove(t_PythonIterator *self);
        static jboolean JNICALL t_PythonIterator_hasNext0(JNIEnv *jenv, jobject jobj);
        static jobject JNICALL t_PythonIterator_next1(JNIEnv *jenv, jobject jobj);
        static void JNICALL t_PythonIterator_pythonDecRef2(JNIEnv *jenv, jobject jobj);
        static PyObject *t_PythonIterator_get__self(t_PythonIterator *self, void *data);
        static PyGetSetDef t_PythonIterator__fields_[] = {
          DECLARE_GET_FIELD(t_PythonIterator, self),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PythonIterator__methods_[] = {
          DECLARE_METHOD(t_PythonIterator, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonIterator, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonIterator, finalize, METH_NOARGS),
          DECLARE_METHOD(t_PythonIterator, pythonExtension, METH_VARARGS),
          DECLARE_METHOD(t_PythonIterator, remove, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PythonIterator, t_PythonIterator, ::java::lang::Object, PythonIterator, t_PythonIterator_init_, PyObject_SelfIter, get_extension_next, t_PythonIterator__fields_, 0, 0);

        void t_PythonIterator::install(PyObject *module)
        {
          installType(&PY_TYPE(PythonIterator), module, "PythonIterator", 1);
        }

        void t_PythonIterator::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PythonIterator).tp_dict, "class_", make_descriptor(PythonIterator::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PythonIterator).tp_dict, "wrapfn_", make_descriptor(t_PythonIterator::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PythonIterator).tp_dict, "boxfn_", make_descriptor(boxObject));
          jclass cls = env->getClass(PythonIterator::initializeClass);
          JNINativeMethod methods[] = {
            { "hasNext", "()Z", (void *) t_PythonIterator_hasNext0 },
            { "next", "()Ljava/lang/Object;", (void *) t_PythonIterator_next1 },
            { "pythonDecRef", "()V", (void *) t_PythonIterator_pythonDecRef2 },
          };
          env->registerNatives(cls, methods, 3);
        }

        static PyObject *t_PythonIterator_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PythonIterator::initializeClass, 1)))
            return NULL;
          return t_PythonIterator::wrap_Object(PythonIterator(((t_PythonIterator *) arg)->object.this$));
        }
        static PyObject *t_PythonIterator_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PythonIterator::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PythonIterator_init_(t_PythonIterator *self, PyObject *args, PyObject *kwds)
        {
          PythonIterator object((jobject) NULL);

          INT_CALL(object = PythonIterator());
          self->object = object;

          Py_INCREF((PyObject *) self);
          self->object.pythonExtension((jlong) (Py_intptr_t) (void *) self);

          return 0;
        }

        static PyObject *t_PythonIterator_finalize(t_PythonIterator *self)
        {
          OBJ_CALL(self->object.finalize());
          Py_RETURN_NONE;
        }

        static PyObject *t_PythonIterator_pythonExtension(t_PythonIterator *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              jlong result;
              OBJ_CALL(result = self->object.pythonExtension());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }
            break;
           case 1:
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.pythonExtension(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "pythonExtension", args);
          return NULL;
        }

        static PyObject *t_PythonIterator_remove(t_PythonIterator *self)
        {
          OBJ_CALL(self->object.remove());
          Py_RETURN_NONE;
        }

        static jboolean JNICALL t_PythonIterator_hasNext0(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonIterator::mids$[PythonIterator::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jboolean value;
          PyObject *result = PyObject_CallMethod(obj, "hasNext", "");
          if (!result)
            throwPythonError();
          else if (parseArg(result, "Z", &value))
          {
            throwTypeError("hasNext", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jboolean) 0;
        }

        static jobject JNICALL t_PythonIterator_next1(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonIterator::mids$[PythonIterator::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          ::java::lang::Object value((jobject) NULL);
          PyObject *result = PyObject_CallMethod(obj, "next", "");
          if (!result)
            throwPythonError();
          else if (parseArg(result, "o", &value))
          {
            throwTypeError("next", result);
            Py_DECREF(result);
          }
          else
          {
            jobj = jenv->NewLocalRef(value.this$);
            Py_DECREF(result);
            return jobj;
          }

          return (jobject) NULL;
        }

        static void JNICALL t_PythonIterator_pythonDecRef2(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonIterator::mids$[PythonIterator::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            jenv->CallVoidMethod(jobj, PythonIterator::mids$[PythonIterator::mid_pythonExtension_0ee6df2f], (jlong) 0);
            env->finalizeObject(jenv, obj);
          }
        }

        static PyObject *t_PythonIterator_get__self(t_PythonIterator *self, void *data)
        {
          jlong ptr;
          OBJ_CALL(ptr = self->object.pythonExtension());
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            Py_INCREF(obj);
            return obj;
          }
          else
            Py_RETURN_NONE;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/packed/PackedInts$FormatAndBits.h"
#include "org/apache/lucene/util/packed/PackedInts$Format.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {

          ::java::lang::Class *PackedInts$FormatAndBits::class$ = NULL;
          jmethodID *PackedInts$FormatAndBits::mids$ = NULL;
          jfieldID *PackedInts$FormatAndBits::fids$ = NULL;
          bool PackedInts$FormatAndBits::live$ = false;

          jclass PackedInts$FormatAndBits::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/packed/PackedInts$FormatAndBits");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_41c85b58] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/packed/PackedInts$Format;I)V");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              fids$ = new jfieldID[max_fid];
              fids$[fid_bitsPerValue] = env->getFieldID(cls, "bitsPerValue", "I");
              fids$[fid_format] = env->getFieldID(cls, "format", "Lorg/apache/lucene/util/packed/PackedInts$Format;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PackedInts$FormatAndBits::PackedInts$FormatAndBits(const ::org::apache::lucene::util::packed::PackedInts$Format & a0, jint a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_41c85b58, a0.this$, a1)) {}

          ::java::lang::String PackedInts$FormatAndBits::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }

          jint PackedInts$FormatAndBits::_get_bitsPerValue() const
          {
            return env->getIntField(this$, fids$[fid_bitsPerValue]);
          }

          ::org::apache::lucene::util::packed::PackedInts$Format PackedInts$FormatAndBits::_get_format() const
          {
            return ::org::apache::lucene::util::packed::PackedInts$Format(env->getObjectField(this$, fids$[fid_format]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {
          static PyObject *t_PackedInts$FormatAndBits_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PackedInts$FormatAndBits_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PackedInts$FormatAndBits_init_(t_PackedInts$FormatAndBits *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PackedInts$FormatAndBits_toString(t_PackedInts$FormatAndBits *self, PyObject *args);
          static PyObject *t_PackedInts$FormatAndBits_get__bitsPerValue(t_PackedInts$FormatAndBits *self, void *data);
          static PyObject *t_PackedInts$FormatAndBits_get__format(t_PackedInts$FormatAndBits *self, void *data);

          static PyGetSetDef t_PackedInts$FormatAndBits__fields_[] = {
            DECLARE_GET_FIELD(t_PackedInts$FormatAndBits, bitsPerValue),
            DECLARE_GET_FIELD(t_PackedInts$FormatAndBits, format),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_PackedInts$FormatAndBits__methods_[] = {
            DECLARE_METHOD(t_PackedInts$FormatAndBits, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedInts$FormatAndBits, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedInts$FormatAndBits, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PackedInts$FormatAndBits, t_PackedInts$FormatAndBits, ::java::lang::Object, PackedInts$FormatAndBits, t_PackedInts$FormatAndBits_init_, 0, 0, t_PackedInts$FormatAndBits__fields_, 0, 0);

          void t_PackedInts$FormatAndBits::install(PyObject *module)
          {
            installType(&PY_TYPE(PackedInts$FormatAndBits), module, "PackedInts$FormatAndBits", 0);
          }

          void t_PackedInts$FormatAndBits::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PackedInts$FormatAndBits).tp_dict, "class_", make_descriptor(PackedInts$FormatAndBits::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PackedInts$FormatAndBits).tp_dict, "wrapfn_", make_descriptor(t_PackedInts$FormatAndBits::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PackedInts$FormatAndBits).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PackedInts$FormatAndBits_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PackedInts$FormatAndBits::initializeClass, 1)))
              return NULL;
            return t_PackedInts$FormatAndBits::wrap_Object(PackedInts$FormatAndBits(((t_PackedInts$FormatAndBits *) arg)->object.this$));
          }
          static PyObject *t_PackedInts$FormatAndBits_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PackedInts$FormatAndBits::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PackedInts$FormatAndBits_init_(t_PackedInts$FormatAndBits *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::util::packed::PackedInts$Format a0((jobject) NULL);
            PyTypeObject **p0;
            jint a1;
            PackedInts$FormatAndBits object((jobject) NULL);

            if (!parseArgs(args, "KI", ::org::apache::lucene::util::packed::PackedInts$Format::initializeClass, &a0, &p0, ::org::apache::lucene::util::packed::t_PackedInts$Format::parameters_, &a1))
            {
              INT_CALL(object = PackedInts$FormatAndBits(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PackedInts$FormatAndBits_toString(t_PackedInts$FormatAndBits *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(PackedInts$FormatAndBits), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_PackedInts$FormatAndBits_get__bitsPerValue(t_PackedInts$FormatAndBits *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object._get_bitsPerValue());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_PackedInts$FormatAndBits_get__format(t_PackedInts$FormatAndBits *self, void *data)
          {
            ::org::apache::lucene::util::packed::PackedInts$Format value((jobject) NULL);
            OBJ_CALL(value = self->object._get_format());
            return ::org::apache::lucene::util::packed::t_PackedInts$Format::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/de/GermanLightStemFilterFactory.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace de {

          ::java::lang::Class *GermanLightStemFilterFactory::class$ = NULL;
          jmethodID *GermanLightStemFilterFactory::mids$ = NULL;
          bool GermanLightStemFilterFactory::live$ = false;

          jclass GermanLightStemFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/de/GermanLightStemFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          GermanLightStemFilterFactory::GermanLightStemFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream GermanLightStemFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace de {
          static PyObject *t_GermanLightStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GermanLightStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_GermanLightStemFilterFactory_init_(t_GermanLightStemFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_GermanLightStemFilterFactory_create(t_GermanLightStemFilterFactory *self, PyObject *args);

          static PyMethodDef t_GermanLightStemFilterFactory__methods_[] = {
            DECLARE_METHOD(t_GermanLightStemFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GermanLightStemFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GermanLightStemFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(GermanLightStemFilterFactory, t_GermanLightStemFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, GermanLightStemFilterFactory, t_GermanLightStemFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_GermanLightStemFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(GermanLightStemFilterFactory), module, "GermanLightStemFilterFactory", 0);
          }

          void t_GermanLightStemFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(GermanLightStemFilterFactory).tp_dict, "class_", make_descriptor(GermanLightStemFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(GermanLightStemFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_GermanLightStemFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(GermanLightStemFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_GermanLightStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GermanLightStemFilterFactory::initializeClass, 1)))
              return NULL;
            return t_GermanLightStemFilterFactory::wrap_Object(GermanLightStemFilterFactory(((t_GermanLightStemFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_GermanLightStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GermanLightStemFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_GermanLightStemFilterFactory_init_(t_GermanLightStemFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            GermanLightStemFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = GermanLightStemFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_GermanLightStemFilterFactory_create(t_GermanLightStemFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(GermanLightStemFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/sinks/DateRecognizerSinkFilter.h"
#include "org/apache/lucene/util/AttributeSource.h"
#include "java/lang/String.h"
#include "java/text/DateFormat.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace sinks {

          ::java::lang::Class *DateRecognizerSinkFilter::class$ = NULL;
          jmethodID *DateRecognizerSinkFilter::mids$ = NULL;
          bool DateRecognizerSinkFilter::live$ = false;
          ::java::lang::String *DateRecognizerSinkFilter::DATE_TYPE = NULL;

          jclass DateRecognizerSinkFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/sinks/DateRecognizerSinkFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_0105dadb] = env->getMethodID(cls, "<init>", "(Ljava/text/DateFormat;)V");
              mids$[mid_accept_aea2d6e6] = env->getMethodID(cls, "accept", "(Lorg/apache/lucene/util/AttributeSource;)Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DATE_TYPE = new ::java::lang::String(env->getStaticObjectField(cls, "DATE_TYPE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          DateRecognizerSinkFilter::DateRecognizerSinkFilter() : ::org::apache::lucene::analysis::sinks::TeeSinkTokenFilter$SinkFilter(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          DateRecognizerSinkFilter::DateRecognizerSinkFilter(const ::java::text::DateFormat & a0) : ::org::apache::lucene::analysis::sinks::TeeSinkTokenFilter$SinkFilter(env->newObject(initializeClass, &mids$, mid_init$_0105dadb, a0.this$)) {}

          jboolean DateRecognizerSinkFilter::accept(const ::org::apache::lucene::util::AttributeSource & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_accept_aea2d6e6], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace sinks {
          static PyObject *t_DateRecognizerSinkFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DateRecognizerSinkFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_DateRecognizerSinkFilter_init_(t_DateRecognizerSinkFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_DateRecognizerSinkFilter_accept(t_DateRecognizerSinkFilter *self, PyObject *args);

          static PyMethodDef t_DateRecognizerSinkFilter__methods_[] = {
            DECLARE_METHOD(t_DateRecognizerSinkFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DateRecognizerSinkFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DateRecognizerSinkFilter, accept, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(DateRecognizerSinkFilter, t_DateRecognizerSinkFilter, ::org::apache::lucene::analysis::sinks::TeeSinkTokenFilter$SinkFilter, DateRecognizerSinkFilter, t_DateRecognizerSinkFilter_init_, 0, 0, 0, 0, 0);

          void t_DateRecognizerSinkFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(DateRecognizerSinkFilter), module, "DateRecognizerSinkFilter", 0);
          }

          void t_DateRecognizerSinkFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(DateRecognizerSinkFilter).tp_dict, "class_", make_descriptor(DateRecognizerSinkFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(DateRecognizerSinkFilter).tp_dict, "wrapfn_", make_descriptor(t_DateRecognizerSinkFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(DateRecognizerSinkFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(DateRecognizerSinkFilter::initializeClass);
            PyDict_SetItemString(PY_TYPE(DateRecognizerSinkFilter).tp_dict, "DATE_TYPE", make_descriptor(j2p(*DateRecognizerSinkFilter::DATE_TYPE)));
          }

          static PyObject *t_DateRecognizerSinkFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, DateRecognizerSinkFilter::initializeClass, 1)))
              return NULL;
            return t_DateRecognizerSinkFilter::wrap_Object(DateRecognizerSinkFilter(((t_DateRecognizerSinkFilter *) arg)->object.this$));
          }
          static PyObject *t_DateRecognizerSinkFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, DateRecognizerSinkFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_DateRecognizerSinkFilter_init_(t_DateRecognizerSinkFilter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                DateRecognizerSinkFilter object((jobject) NULL);

                INT_CALL(object = DateRecognizerSinkFilter());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                ::java::text::DateFormat a0((jobject) NULL);
                DateRecognizerSinkFilter object((jobject) NULL);

                if (!parseArgs(args, "k", ::java::text::DateFormat::initializeClass, &a0))
                {
                  INT_CALL(object = DateRecognizerSinkFilter(a0));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_DateRecognizerSinkFilter_accept(t_DateRecognizerSinkFilter *self, PyObject *args)
          {
            ::org::apache::lucene::util::AttributeSource a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "k", ::org::apache::lucene::util::AttributeSource::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.accept(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(DateRecognizerSinkFilter), (PyObject *) self, "accept", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/DummyQueryNodeBuilder.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/search/TermQuery.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/StandardQueryBuilder.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {

              ::java::lang::Class *DummyQueryNodeBuilder::class$ = NULL;
              jmethodID *DummyQueryNodeBuilder::mids$ = NULL;
              bool DummyQueryNodeBuilder::live$ = false;

              jclass DummyQueryNodeBuilder::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/builders/DummyQueryNodeBuilder");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_build_0cc6eb13] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/search/TermQuery;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              DummyQueryNodeBuilder::DummyQueryNodeBuilder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              ::org::apache::lucene::search::TermQuery DummyQueryNodeBuilder::build(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                return ::org::apache::lucene::search::TermQuery(env->callObjectMethod(this$, mids$[mid_build_0cc6eb13], a0.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {
              static PyObject *t_DummyQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_DummyQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg);
              static int t_DummyQueryNodeBuilder_init_(t_DummyQueryNodeBuilder *self, PyObject *args, PyObject *kwds);
              static PyObject *t_DummyQueryNodeBuilder_build(t_DummyQueryNodeBuilder *self, PyObject *arg);

              static PyMethodDef t_DummyQueryNodeBuilder__methods_[] = {
                DECLARE_METHOD(t_DummyQueryNodeBuilder, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_DummyQueryNodeBuilder, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_DummyQueryNodeBuilder, build, METH_O),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(DummyQueryNodeBuilder, t_DummyQueryNodeBuilder, ::java::lang::Object, DummyQueryNodeBuilder, t_DummyQueryNodeBuilder_init_, 0, 0, 0, 0, 0);

              void t_DummyQueryNodeBuilder::install(PyObject *module)
              {
                installType(&PY_TYPE(DummyQueryNodeBuilder), module, "DummyQueryNodeBuilder", 0);
              }

              void t_DummyQueryNodeBuilder::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(DummyQueryNodeBuilder).tp_dict, "class_", make_descriptor(DummyQueryNodeBuilder::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(DummyQueryNodeBuilder).tp_dict, "wrapfn_", make_descriptor(t_DummyQueryNodeBuilder::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(DummyQueryNodeBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_DummyQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, DummyQueryNodeBuilder::initializeClass, 1)))
                  return NULL;
                return t_DummyQueryNodeBuilder::wrap_Object(DummyQueryNodeBuilder(((t_DummyQueryNodeBuilder *) arg)->object.this$));
              }
              static PyObject *t_DummyQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, DummyQueryNodeBuilder::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_DummyQueryNodeBuilder_init_(t_DummyQueryNodeBuilder *self, PyObject *args, PyObject *kwds)
              {
                DummyQueryNodeBuilder object((jobject) NULL);

                INT_CALL(object = DummyQueryNodeBuilder());
                self->object = object;

                return 0;
              }

              static PyObject *t_DummyQueryNodeBuilder_build(t_DummyQueryNodeBuilder *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::search::TermQuery result((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.build(a0));
                  return ::org::apache::lucene::search::t_TermQuery::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "build", arg);
                return NULL;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/SegmentInfos.h"
#include "org/apache/lucene/index/SegmentCommitInfo.h"
#include "java/lang/Class.h"
#include "java/lang/Iterable.h"
#include "java/util/Collection.h"
#include "java/util/List.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "java/lang/Cloneable.h"
#include "org/apache/lucene/store/Directory.h"
#include "java/util/Iterator.h"
#include "java/io/PrintStream.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/store/IOContext.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *SegmentInfos::class$ = NULL;
        jmethodID *SegmentInfos::mids$ = NULL;
        jfieldID *SegmentInfos::fids$ = NULL;
        bool SegmentInfos::live$ = false;
        jint SegmentInfos::FORMAT_SEGMENTS_GEN_CURRENT = (jint) 0;
        jint SegmentInfos::VERSION_40 = (jint) 0;
        jint SegmentInfos::VERSION_46 = (jint) 0;
        jint SegmentInfos::VERSION_48 = (jint) 0;
        jint SegmentInfos::VERSION_49 = (jint) 0;

        jclass SegmentInfos::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/SegmentInfos");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_add_6649cdf4] = env->getMethodID(cls, "add", "(Lorg/apache/lucene/index/SegmentCommitInfo;)V");
            mids$[mid_addAll_d1cac205] = env->getMethodID(cls, "addAll", "(Ljava/lang/Iterable;)V");
            mids$[mid_asList_87851566] = env->getMethodID(cls, "asList", "()Ljava/util/List;");
            mids$[mid_changed_54c6a166] = env->getMethodID(cls, "changed", "()V");
            mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
            mids$[mid_clone_e585ba04] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/index/SegmentInfos;");
            mids$[mid_files_b47d57a7] = env->getMethodID(cls, "files", "(Lorg/apache/lucene/store/Directory;Z)Ljava/util/Collection;");
            mids$[mid_generationFromSegmentsFileName_5fdc3f54] = env->getStaticMethodID(cls, "generationFromSegmentsFileName", "(Ljava/lang/String;)J");
            mids$[mid_getDefaultGenLookahedCount_54c6a179] = env->getStaticMethodID(cls, "getDefaultGenLookahedCount", "()I");
            mids$[mid_getGeneration_54c6a17a] = env->getMethodID(cls, "getGeneration", "()J");
            mids$[mid_getInfoStream_00215d9e] = env->getStaticMethodID(cls, "getInfoStream", "()Ljava/io/PrintStream;");
            mids$[mid_getLastCommitGeneration_4dd45410] = env->getStaticMethodID(cls, "getLastCommitGeneration", "([Ljava/lang/String;)J");
            mids$[mid_getLastCommitGeneration_2e261eee] = env->getStaticMethodID(cls, "getLastCommitGeneration", "(Lorg/apache/lucene/store/Directory;)J");
            mids$[mid_getLastCommitSegmentsFileName_1034289b] = env->getStaticMethodID(cls, "getLastCommitSegmentsFileName", "([Ljava/lang/String;)Ljava/lang/String;");
            mids$[mid_getLastCommitSegmentsFileName_0451c495] = env->getStaticMethodID(cls, "getLastCommitSegmentsFileName", "(Lorg/apache/lucene/store/Directory;)Ljava/lang/String;");
            mids$[mid_getLastGeneration_54c6a17a] = env->getMethodID(cls, "getLastGeneration", "()J");
            mids$[mid_getNextSegmentFileName_14c7b5c5] = env->getMethodID(cls, "getNextSegmentFileName", "()Ljava/lang/String;");
            mids$[mid_getSegmentsFileName_14c7b5c5] = env->getMethodID(cls, "getSegmentsFileName", "()Ljava/lang/String;");
            mids$[mid_getUserData_db60befd] = env->getMethodID(cls, "getUserData", "()Ljava/util/Map;");
            mids$[mid_getVersion_54c6a17a] = env->getMethodID(cls, "getVersion", "()J");
            mids$[mid_info_924229db] = env->getMethodID(cls, "info", "(I)Lorg/apache/lucene/index/SegmentCommitInfo;");
            mids$[mid_iterator_40858c90] = env->getMethodID(cls, "iterator", "()Ljava/util/Iterator;");
            mids$[mid_read_2e261ef2] = env->getMethodID(cls, "read", "(Lorg/apache/lucene/store/Directory;)V");
            mids$[mid_read_54f2a16c] = env->getMethodID(cls, "read", "(Lorg/apache/lucene/store/Directory;Ljava/lang/String;)V");
            mids$[mid_remove_6649cdf4] = env->getMethodID(cls, "remove", "(Lorg/apache/lucene/index/SegmentCommitInfo;)V");
            mids$[mid_setDefaultGenLookaheadCount_39c7bd3c] = env->getStaticMethodID(cls, "setDefaultGenLookaheadCount", "(I)V");
            mids$[mid_setInfoStream_1b7c898b] = env->getStaticMethodID(cls, "setInfoStream", "(Ljava/io/PrintStream;)V");
            mids$[mid_size_54c6a179] = env->getMethodID(cls, "size", "()I");
            mids$[mid_toString_0451c495] = env->getMethodID(cls, "toString", "(Lorg/apache/lucene/store/Directory;)Ljava/lang/String;");
            mids$[mid_totalDocCount_54c6a179] = env->getMethodID(cls, "totalDocCount", "()I");
            mids$[mid_write3xInfo_1fab7fdc] = env->getStaticMethodID(cls, "write3xInfo", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/SegmentInfo;Lorg/apache/lucene/store/IOContext;)Ljava/lang/String;");
            mids$[mid_writeSegmentsGen_3dc02513] = env->getStaticMethodID(cls, "writeSegmentsGen", "(Lorg/apache/lucene/store/Directory;J)V");

            fids$ = new jfieldID[max_fid];
            fids$[fid_counter] = env->getFieldID(cls, "counter", "I");
            fids$[fid_userData] = env->getFieldID(cls, "userData", "Ljava/util/Map;");
            fids$[fid_version] = env->getFieldID(cls, "version", "J");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            FORMAT_SEGMENTS_GEN_CURRENT = env->getStaticIntField(cls, "FORMAT_SEGMENTS_GEN_CURRENT");
            VERSION_40 = env->getStaticIntField(cls, "VERSION_40");
            VERSION_46 = env->getStaticIntField(cls, "VERSION_46");
            VERSION_48 = env->getStaticIntField(cls, "VERSION_48");
            VERSION_49 = env->getStaticIntField(cls, "VERSION_49");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SegmentInfos::SegmentInfos() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void SegmentInfos::add(const ::org::apache::lucene::index::SegmentCommitInfo & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_add_6649cdf4], a0.this$);
        }

        void SegmentInfos::addAll(const ::java::lang::Iterable & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_addAll_d1cac205], a0.this$);
        }

        ::java::util::List SegmentInfos::asList() const
        {
          return ::java::util::List(env->callObjectMethod(this$, mids$[mid_asList_87851566]));
        }

        void SegmentInfos::changed() const
        {
          env->callVoidMethod(this$, mids$[mid_changed_54c6a166]);
        }

        void SegmentInfos::clear() const
        {
          env->callVoidMethod(this$, mids$[mid_clear_54c6a166]);
        }

        SegmentInfos SegmentInfos::clone() const
        {
          return SegmentInfos(env->callObjectMethod(this$, mids$[mid_clone_e585ba04]));
        }

        ::java::util::Collection SegmentInfos::files(const ::org::apache::lucene::store::Directory & a0, jboolean a1) const
        {
          return ::java::util::Collection(env->callObjectMethod(this$, mids$[mid_files_b47d57a7], a0.this$, a1));
        }

        jlong SegmentInfos::generationFromSegmentsFileName(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_generationFromSegmentsFileName_5fdc3f54], a0.this$);
        }

        jint SegmentInfos::getDefaultGenLookahedCount()
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_getDefaultGenLookahedCount_54c6a179]);
        }

        jlong SegmentInfos::getGeneration() const
        {
          return env->callLongMethod(this$, mids$[mid_getGeneration_54c6a17a]);
        }

        ::java::io::PrintStream SegmentInfos::getInfoStream()
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::io::PrintStream(env->callStaticObjectMethod(cls, mids$[mid_getInfoStream_00215d9e]));
        }

        jlong SegmentInfos::getLastCommitGeneration(const JArray< ::java::lang::String > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_getLastCommitGeneration_4dd45410], a0.this$);
        }

        jlong SegmentInfos::getLastCommitGeneration(const ::org::apache::lucene::store::Directory & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_getLastCommitGeneration_2e261eee], a0.this$);
        }

        ::java::lang::String SegmentInfos::getLastCommitSegmentsFileName(const JArray< ::java::lang::String > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_getLastCommitSegmentsFileName_1034289b], a0.this$));
        }

        ::java::lang::String SegmentInfos::getLastCommitSegmentsFileName(const ::org::apache::lucene::store::Directory & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_getLastCommitSegmentsFileName_0451c495], a0.this$));
        }

        jlong SegmentInfos::getLastGeneration() const
        {
          return env->callLongMethod(this$, mids$[mid_getLastGeneration_54c6a17a]);
        }

        ::java::lang::String SegmentInfos::getNextSegmentFileName() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getNextSegmentFileName_14c7b5c5]));
        }

        ::java::lang::String SegmentInfos::getSegmentsFileName() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getSegmentsFileName_14c7b5c5]));
        }

        ::java::util::Map SegmentInfos::getUserData() const
        {
          return ::java::util::Map(env->callObjectMethod(this$, mids$[mid_getUserData_db60befd]));
        }

        jlong SegmentInfos::getVersion() const
        {
          return env->callLongMethod(this$, mids$[mid_getVersion_54c6a17a]);
        }

        ::org::apache::lucene::index::SegmentCommitInfo SegmentInfos::info(jint a0) const
        {
          return ::org::apache::lucene::index::SegmentCommitInfo(env->callObjectMethod(this$, mids$[mid_info_924229db], a0));
        }

        ::java::util::Iterator SegmentInfos::iterator() const
        {
          return ::java::util::Iterator(env->callObjectMethod(this$, mids$[mid_iterator_40858c90]));
        }

        void SegmentInfos::read(const ::org::apache::lucene::store::Directory & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_read_2e261ef2], a0.this$);
        }

        void SegmentInfos::read(const ::org::apache::lucene::store::Directory & a0, const ::java::lang::String & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_read_54f2a16c], a0.this$, a1.this$);
        }

        void SegmentInfos::remove(const ::org::apache::lucene::index::SegmentCommitInfo & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_remove_6649cdf4], a0.this$);
        }

        void SegmentInfos::setDefaultGenLookaheadCount(jint a0)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_setDefaultGenLookaheadCount_39c7bd3c], a0);
        }

        void SegmentInfos::setInfoStream(const ::java::io::PrintStream & a0)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_setInfoStream_1b7c898b], a0.this$);
        }

        jint SegmentInfos::size() const
        {
          return env->callIntMethod(this$, mids$[mid_size_54c6a179]);
        }

        ::java::lang::String SegmentInfos::toString(const ::org::apache::lucene::store::Directory & a0) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_0451c495], a0.this$));
        }

        jint SegmentInfos::totalDocCount() const
        {
          return env->callIntMethod(this$, mids$[mid_totalDocCount_54c6a179]);
        }

        ::java::lang::String SegmentInfos::write3xInfo(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::SegmentInfo & a1, const ::org::apache::lucene::store::IOContext & a2)
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_write3xInfo_1fab7fdc], a0.this$, a1.this$, a2.this$));
        }

        void SegmentInfos::writeSegmentsGen(const ::org::apache::lucene::store::Directory & a0, jlong a1)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_writeSegmentsGen_3dc02513], a0.this$, a1);
        }

        jint SegmentInfos::_get_counter() const
        {
          return env->getIntField(this$, fids$[fid_counter]);
        }

        void SegmentInfos::_set_counter(jint a0) const
        {
          env->setIntField(this$, fids$[fid_counter], a0);
        }

        ::java::util::Map SegmentInfos::_get_userData() const
        {
          return ::java::util::Map(env->getObjectField(this$, fids$[fid_userData]));
        }

        void SegmentInfos::_set_userData(const ::java::util::Map & a0) const
        {
          env->setObjectField(this$, fids$[fid_userData], a0.this$);
        }

        jlong SegmentInfos::_get_version() const
        {
          return env->getLongField(this$, fids$[fid_version]);
        }

        void SegmentInfos::_set_version(jlong a0) const
        {
          env->setLongField(this$, fids$[fid_version], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/index/SegmentInfos$FindSegmentsFile.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_SegmentInfos_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SegmentInfos_instance_(PyTypeObject *type, PyObject *arg);
        static int t_SegmentInfos_init_(t_SegmentInfos *self, PyObject *args, PyObject *kwds);
        static PyObject *t_SegmentInfos_add(t_SegmentInfos *self, PyObject *arg);
        static PyObject *t_SegmentInfos_addAll(t_SegmentInfos *self, PyObject *arg);
        static PyObject *t_SegmentInfos_asList(t_SegmentInfos *self);
        static PyObject *t_SegmentInfos_changed(t_SegmentInfos *self);
        static PyObject *t_SegmentInfos_clear(t_SegmentInfos *self);
        static PyObject *t_SegmentInfos_clone(t_SegmentInfos *self);
        static PyObject *t_SegmentInfos_files(t_SegmentInfos *self, PyObject *args);
        static PyObject *t_SegmentInfos_generationFromSegmentsFileName(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SegmentInfos_getDefaultGenLookahedCount(PyTypeObject *type);
        static PyObject *t_SegmentInfos_getGeneration(t_SegmentInfos *self);
        static PyObject *t_SegmentInfos_getInfoStream(PyTypeObject *type);
        static PyObject *t_SegmentInfos_getLastCommitGeneration(PyTypeObject *type, PyObject *args);
        static PyObject *t_SegmentInfos_getLastCommitSegmentsFileName(PyTypeObject *type, PyObject *args);
        static PyObject *t_SegmentInfos_getLastGeneration(t_SegmentInfos *self);
        static PyObject *t_SegmentInfos_getNextSegmentFileName(t_SegmentInfos *self);
        static PyObject *t_SegmentInfos_getSegmentsFileName(t_SegmentInfos *self);
        static PyObject *t_SegmentInfos_getUserData(t_SegmentInfos *self);
        static PyObject *t_SegmentInfos_getVersion(t_SegmentInfos *self);
        static PyObject *t_SegmentInfos_info(t_SegmentInfos *self, PyObject *arg);
        static PyObject *t_SegmentInfos_iterator(t_SegmentInfos *self);
        static PyObject *t_SegmentInfos_read(t_SegmentInfos *self, PyObject *args);
        static PyObject *t_SegmentInfos_remove(t_SegmentInfos *self, PyObject *arg);
        static PyObject *t_SegmentInfos_setDefaultGenLookaheadCount(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SegmentInfos_setInfoStream(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SegmentInfos_size(t_SegmentInfos *self);
        static PyObject *t_SegmentInfos_toString(t_SegmentInfos *self, PyObject *args);
        static PyObject *t_SegmentInfos_totalDocCount(t_SegmentInfos *self);
        static PyObject *t_SegmentInfos_write3xInfo(PyTypeObject *type, PyObject *args);
        static PyObject *t_SegmentInfos_writeSegmentsGen(PyTypeObject *type, PyObject *args);
        static PyObject *t_SegmentInfos_get__counter(t_SegmentInfos *self, void *data);
        static int t_SegmentInfos_set__counter(t_SegmentInfos *self, PyObject *arg, void *data);

        static int t_SegmentInfos_set__defaultGenLookaheadCount(t_SegmentInfos *self, PyObject *arg, void *data);
        static PyObject *t_SegmentInfos_get__defaultGenLookahedCount(t_SegmentInfos *self, void *data);
        static PyObject *t_SegmentInfos_get__generation(t_SegmentInfos *self, void *data);
        static PyObject *t_SegmentInfos_get__infoStream(t_SegmentInfos *self, void *data);
        static int t_SegmentInfos_set__infoStream(t_SegmentInfos *self, PyObject *arg, void *data);
        static PyObject *t_SegmentInfos_get__lastGeneration(t_SegmentInfos *self, void *data);
        static PyObject *t_SegmentInfos_get__nextSegmentFileName(t_SegmentInfos *self, void *data);
        static PyObject *t_SegmentInfos_get__segmentsFileName(t_SegmentInfos *self, void *data);
        static PyObject *t_SegmentInfos_get__userData(t_SegmentInfos *self, void *data);
        static PyObject *t_SegmentInfos_get__version(t_SegmentInfos *self, void *data);
        static PyGetSetDef t_SegmentInfos__fields_[] = {
          DECLARE_GETSET_FIELD(t_SegmentInfos, counter),
          DECLARE_SET_FIELD(t_SegmentInfos, defaultGenLookaheadCount),
          DECLARE_GET_FIELD(t_SegmentInfos, defaultGenLookahedCount),
          DECLARE_GET_FIELD(t_SegmentInfos, generation),
          DECLARE_GETSET_FIELD(t_SegmentInfos, infoStream),
          DECLARE_GET_FIELD(t_SegmentInfos, lastGeneration),
          DECLARE_GET_FIELD(t_SegmentInfos, nextSegmentFileName),
          DECLARE_GET_FIELD(t_SegmentInfos, segmentsFileName),
          DECLARE_GET_FIELD(t_SegmentInfos, userData),
          DECLARE_GET_FIELD(t_SegmentInfos, version),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_SegmentInfos__methods_[] = {
          DECLARE_METHOD(t_SegmentInfos, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SegmentInfos, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SegmentInfos, add, METH_O),
          DECLARE_METHOD(t_SegmentInfos, addAll, METH_O),
          DECLARE_METHOD(t_SegmentInfos, asList, METH_NOARGS),
          DECLARE_METHOD(t_SegmentInfos, changed, METH_NOARGS),
          DECLARE_METHOD(t_SegmentInfos, clear, METH_NOARGS),
          DECLARE_METHOD(t_SegmentInfos, clone, METH_NOARGS),
          DECLARE_METHOD(t_SegmentInfos, files, METH_VARARGS),
          DECLARE_METHOD(t_SegmentInfos, generationFromSegmentsFileName, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SegmentInfos, getDefaultGenLookahedCount, METH_NOARGS | METH_CLASS),
          DECLARE_METHOD(t_SegmentInfos, getGeneration, METH_NOARGS),
          DECLARE_METHOD(t_SegmentInfos, getInfoStream, METH_NOARGS | METH_CLASS),
          DECLARE_METHOD(t_SegmentInfos, getLastCommitGeneration, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_SegmentInfos, getLastCommitSegmentsFileName, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_SegmentInfos, getLastGeneration, METH_NOARGS),
          DECLARE_METHOD(t_SegmentInfos, getNextSegmentFileName, METH_NOARGS),
          DECLARE_METHOD(t_SegmentInfos, getSegmentsFileName, METH_NOARGS),
          DECLARE_METHOD(t_SegmentInfos, getUserData, METH_NOARGS),
          DECLARE_METHOD(t_SegmentInfos, getVersion, METH_NOARGS),
          DECLARE_METHOD(t_SegmentInfos, info, METH_O),
          DECLARE_METHOD(t_SegmentInfos, iterator, METH_NOARGS),
          DECLARE_METHOD(t_SegmentInfos, read, METH_VARARGS),
          DECLARE_METHOD(t_SegmentInfos, remove, METH_O),
          DECLARE_METHOD(t_SegmentInfos, setDefaultGenLookaheadCount, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SegmentInfos, setInfoStream, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SegmentInfos, size, METH_NOARGS),
          DECLARE_METHOD(t_SegmentInfos, toString, METH_VARARGS),
          DECLARE_METHOD(t_SegmentInfos, totalDocCount, METH_NOARGS),
          DECLARE_METHOD(t_SegmentInfos, write3xInfo, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_SegmentInfos, writeSegmentsGen, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SegmentInfos, t_SegmentInfos, ::java::lang::Object, SegmentInfos, t_SegmentInfos_init_, ((PyObject *(*)(t_SegmentInfos *)) get_iterator< t_SegmentInfos >), 0, t_SegmentInfos__fields_, 0, 0);

        void t_SegmentInfos::install(PyObject *module)
        {
          installType(&PY_TYPE(SegmentInfos), module, "SegmentInfos", 0);
          PyDict_SetItemString(PY_TYPE(SegmentInfos).tp_dict, "FindSegmentsFile", make_descriptor(&PY_TYPE(SegmentInfos$FindSegmentsFile)));
        }

        void t_SegmentInfos::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SegmentInfos).tp_dict, "class_", make_descriptor(SegmentInfos::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SegmentInfos).tp_dict, "wrapfn_", make_descriptor(t_SegmentInfos::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SegmentInfos).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(SegmentInfos::initializeClass);
          PyDict_SetItemString(PY_TYPE(SegmentInfos).tp_dict, "FORMAT_SEGMENTS_GEN_CURRENT", make_descriptor(SegmentInfos::FORMAT_SEGMENTS_GEN_CURRENT));
          PyDict_SetItemString(PY_TYPE(SegmentInfos).tp_dict, "VERSION_40", make_descriptor(SegmentInfos::VERSION_40));
          PyDict_SetItemString(PY_TYPE(SegmentInfos).tp_dict, "VERSION_46", make_descriptor(SegmentInfos::VERSION_46));
          PyDict_SetItemString(PY_TYPE(SegmentInfos).tp_dict, "VERSION_48", make_descriptor(SegmentInfos::VERSION_48));
          PyDict_SetItemString(PY_TYPE(SegmentInfos).tp_dict, "VERSION_49", make_descriptor(SegmentInfos::VERSION_49));
        }

        static PyObject *t_SegmentInfos_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SegmentInfos::initializeClass, 1)))
            return NULL;
          return t_SegmentInfos::wrap_Object(SegmentInfos(((t_SegmentInfos *) arg)->object.this$));
        }
        static PyObject *t_SegmentInfos_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SegmentInfos::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_SegmentInfos_init_(t_SegmentInfos *self, PyObject *args, PyObject *kwds)
        {
          SegmentInfos object((jobject) NULL);

          INT_CALL(object = SegmentInfos());
          self->object = object;

          return 0;
        }

        static PyObject *t_SegmentInfos_add(t_SegmentInfos *self, PyObject *arg)
        {
          ::org::apache::lucene::index::SegmentCommitInfo a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::SegmentCommitInfo::initializeClass, &a0))
          {
            OBJ_CALL(self->object.add(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "add", arg);
          return NULL;
        }

        static PyObject *t_SegmentInfos_addAll(t_SegmentInfos *self, PyObject *arg)
        {
          ::java::lang::Iterable a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArg(arg, "K", ::java::lang::Iterable::initializeClass, &a0, &p0, ::java::lang::t_Iterable::parameters_))
          {
            OBJ_CALL(self->object.addAll(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "addAll", arg);
          return NULL;
        }

        static PyObject *t_SegmentInfos_asList(t_SegmentInfos *self)
        {
          ::java::util::List result((jobject) NULL);
          OBJ_CALL(result = self->object.asList());
          return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::index::PY_TYPE(SegmentCommitInfo));
        }

        static PyObject *t_SegmentInfos_changed(t_SegmentInfos *self)
        {
          OBJ_CALL(self->object.changed());
          Py_RETURN_NONE;
        }

        static PyObject *t_SegmentInfos_clear(t_SegmentInfos *self)
        {
          OBJ_CALL(self->object.clear());
          Py_RETURN_NONE;
        }

        static PyObject *t_SegmentInfos_clone(t_SegmentInfos *self)
        {
          SegmentInfos result((jobject) NULL);
          OBJ_CALL(result = self->object.clone());
          return t_SegmentInfos::wrap_Object(result);
        }

        static PyObject *t_SegmentInfos_files(t_SegmentInfos *self, PyObject *args)
        {
          ::org::apache::lucene::store::Directory a0((jobject) NULL);
          jboolean a1;
          ::java::util::Collection result((jobject) NULL);

          if (!parseArgs(args, "kZ", ::org::apache::lucene::store::Directory::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.files(a0, a1));
            return ::java::util::t_Collection::wrap_Object(result, &::java::lang::PY_TYPE(String));
          }

          PyErr_SetArgsError((PyObject *) self, "files", args);
          return NULL;
        }

        static PyObject *t_SegmentInfos_generationFromSegmentsFileName(PyTypeObject *type, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          jlong result;

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::SegmentInfos::generationFromSegmentsFileName(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError(type, "generationFromSegmentsFileName", arg);
          return NULL;
        }

        static PyObject *t_SegmentInfos_getDefaultGenLookahedCount(PyTypeObject *type)
        {
          jint result;
          OBJ_CALL(result = ::org::apache::lucene::index::SegmentInfos::getDefaultGenLookahedCount());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_SegmentInfos_getGeneration(t_SegmentInfos *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getGeneration());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_SegmentInfos_getInfoStream(PyTypeObject *type)
        {
          ::java::io::PrintStream result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::index::SegmentInfos::getInfoStream());
          return ::java::io::t_PrintStream::wrap_Object(result);
        }

        static PyObject *t_SegmentInfos_getLastCommitGeneration(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              JArray< ::java::lang::String > a0((jobject) NULL);
              jlong result;

              if (!parseArgs(args, "[s", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::index::SegmentInfos::getLastCommitGeneration(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
            {
              ::org::apache::lucene::store::Directory a0((jobject) NULL);
              jlong result;

              if (!parseArgs(args, "k", ::org::apache::lucene::store::Directory::initializeClass, &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::index::SegmentInfos::getLastCommitGeneration(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
          }

          PyErr_SetArgsError(type, "getLastCommitGeneration", args);
          return NULL;
        }

        static PyObject *t_SegmentInfos_getLastCommitSegmentsFileName(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              JArray< ::java::lang::String > a0((jobject) NULL);
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "[s", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::index::SegmentInfos::getLastCommitSegmentsFileName(a0));
                return j2p(result);
              }
            }
            {
              ::org::apache::lucene::store::Directory a0((jobject) NULL);
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::store::Directory::initializeClass, &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::index::SegmentInfos::getLastCommitSegmentsFileName(a0));
                return j2p(result);
              }
            }
          }

          PyErr_SetArgsError(type, "getLastCommitSegmentsFileName", args);
          return NULL;
        }

        static PyObject *t_SegmentInfos_getLastGeneration(t_SegmentInfos *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getLastGeneration());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_SegmentInfos_getNextSegmentFileName(t_SegmentInfos *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.getNextSegmentFileName());
          return j2p(result);
        }

        static PyObject *t_SegmentInfos_getSegmentsFileName(t_SegmentInfos *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.getSegmentsFileName());
          return j2p(result);
        }

        static PyObject *t_SegmentInfos_getUserData(t_SegmentInfos *self)
        {
          ::java::util::Map result((jobject) NULL);
          OBJ_CALL(result = self->object.getUserData());
          return ::java::util::t_Map::wrap_Object(result, &::java::lang::PY_TYPE(String), &::java::lang::PY_TYPE(String));
        }

        static PyObject *t_SegmentInfos_getVersion(t_SegmentInfos *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getVersion());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_SegmentInfos_info(t_SegmentInfos *self, PyObject *arg)
        {
          jint a0;
          ::org::apache::lucene::index::SegmentCommitInfo result((jobject) NULL);

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.info(a0));
            return ::org::apache::lucene::index::t_SegmentCommitInfo::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "info", arg);
          return NULL;
        }

        static PyObject *t_SegmentInfos_iterator(t_SegmentInfos *self)
        {
          ::java::util::Iterator result((jobject) NULL);
          OBJ_CALL(result = self->object.iterator());
          return ::java::util::t_Iterator::wrap_Object(result, &::org::apache::lucene::index::PY_TYPE(SegmentCommitInfo));
        }

        static PyObject *t_SegmentInfos_read(t_SegmentInfos *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::store::Directory a0((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::store::Directory::initializeClass, &a0))
              {
                OBJ_CALL(self->object.read(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 2:
            {
              ::org::apache::lucene::store::Directory a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);

              if (!parseArgs(args, "ks", ::org::apache::lucene::store::Directory::initializeClass, &a0, &a1))
              {
                OBJ_CALL(self->object.read(a0, a1));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "read", args);
          return NULL;
        }

        static PyObject *t_SegmentInfos_remove(t_SegmentInfos *self, PyObject *arg)
        {
          ::org::apache::lucene::index::SegmentCommitInfo a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::SegmentCommitInfo::initializeClass, &a0))
          {
            OBJ_CALL(self->object.remove(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "remove", arg);
          return NULL;
        }

        static PyObject *t_SegmentInfos_setDefaultGenLookaheadCount(PyTypeObject *type, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(::org::apache::lucene::index::SegmentInfos::setDefaultGenLookaheadCount(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "setDefaultGenLookaheadCount", arg);
          return NULL;
        }

        static PyObject *t_SegmentInfos_setInfoStream(PyTypeObject *type, PyObject *arg)
        {
          ::java::io::PrintStream a0((jobject) NULL);

          if (!parseArg(arg, "k", ::java::io::PrintStream::initializeClass, &a0))
          {
            OBJ_CALL(::org::apache::lucene::index::SegmentInfos::setInfoStream(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "setInfoStream", arg);
          return NULL;
        }

        static PyObject *t_SegmentInfos_size(t_SegmentInfos *self)
        {
          jint result;
          OBJ_CALL(result = self->object.size());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_SegmentInfos_toString(t_SegmentInfos *self, PyObject *args)
        {
          ::org::apache::lucene::store::Directory a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::store::Directory::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.toString(a0));
            return j2p(result);
          }

          return callSuper(&PY_TYPE(SegmentInfos), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_SegmentInfos_totalDocCount(t_SegmentInfos *self)
        {
          jint result;
          OBJ_CALL(result = self->object.totalDocCount());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_SegmentInfos_write3xInfo(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::store::Directory a0((jobject) NULL);
          ::org::apache::lucene::index::SegmentInfo a1((jobject) NULL);
          ::org::apache::lucene::store::IOContext a2((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "kkk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::SegmentInfo::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::SegmentInfos::write3xInfo(a0, a1, a2));
            return j2p(result);
          }

          PyErr_SetArgsError(type, "write3xInfo", args);
          return NULL;
        }

        static PyObject *t_SegmentInfos_writeSegmentsGen(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::store::Directory a0((jobject) NULL);
          jlong a1;

          if (!parseArgs(args, "kJ", ::org::apache::lucene::store::Directory::initializeClass, &a0, &a1))
          {
            OBJ_CALL(::org::apache::lucene::index::SegmentInfos::writeSegmentsGen(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "writeSegmentsGen", args);
          return NULL;
        }

        static PyObject *t_SegmentInfos_get__counter(t_SegmentInfos *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_counter());
          return PyInt_FromLong((long) value);
        }
        static int t_SegmentInfos_set__counter(t_SegmentInfos *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_counter(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "counter", arg);
          return -1;
        }

        static int t_SegmentInfos_set__defaultGenLookaheadCount(t_SegmentInfos *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setDefaultGenLookaheadCount(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "defaultGenLookaheadCount", arg);
          return -1;
        }

        static PyObject *t_SegmentInfos_get__defaultGenLookahedCount(t_SegmentInfos *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getDefaultGenLookahedCount());
          return PyInt_FromLong((long) value);
        }

        static PyObject *t_SegmentInfos_get__generation(t_SegmentInfos *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getGeneration());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }

        static PyObject *t_SegmentInfos_get__infoStream(t_SegmentInfos *self, void *data)
        {
          ::java::io::PrintStream value((jobject) NULL);
          OBJ_CALL(value = self->object.getInfoStream());
          return ::java::io::t_PrintStream::wrap_Object(value);
        }
        static int t_SegmentInfos_set__infoStream(t_SegmentInfos *self, PyObject *arg, void *data)
        {
          {
            ::java::io::PrintStream value((jobject) NULL);
            if (!parseArg(arg, "k", ::java::io::PrintStream::initializeClass, &value))
            {
              INT_CALL(self->object.setInfoStream(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "infoStream", arg);
          return -1;
        }

        static PyObject *t_SegmentInfos_get__lastGeneration(t_SegmentInfos *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getLastGeneration());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }

        static PyObject *t_SegmentInfos_get__nextSegmentFileName(t_SegmentInfos *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object.getNextSegmentFileName());
          return j2p(value);
        }

        static PyObject *t_SegmentInfos_get__segmentsFileName(t_SegmentInfos *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object.getSegmentsFileName());
          return j2p(value);
        }

        static PyObject *t_SegmentInfos_get__userData(t_SegmentInfos *self, void *data)
        {
          ::java::util::Map value((jobject) NULL);
          OBJ_CALL(value = self->object.getUserData());
          return ::java::util::t_Map::wrap_Object(value);
        }

        static PyObject *t_SegmentInfos_get__version(t_SegmentInfos *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getVersion());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/AttributeFactory$StaticImplementationAttributeFactory.h"
#include "org/apache/lucene/util/AttributeImpl.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/util/Attribute.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *AttributeFactory$StaticImplementationAttributeFactory::class$ = NULL;
        jmethodID *AttributeFactory$StaticImplementationAttributeFactory::mids$ = NULL;
        bool AttributeFactory$StaticImplementationAttributeFactory::live$ = false;

        jclass AttributeFactory$StaticImplementationAttributeFactory::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/AttributeFactory$StaticImplementationAttributeFactory");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_a612bb24] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/AttributeFactory;Ljava/lang/Class;)V");
            mids$[mid_createAttributeInstance_4f9d0910] = env->getMethodID(cls, "createAttributeInstance", "(Ljava/lang/Class;)Lorg/apache/lucene/util/AttributeImpl;");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_createInstance_a200d3c2] = env->getMethodID(cls, "createInstance", "()Lorg/apache/lucene/util/AttributeImpl;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        AttributeFactory$StaticImplementationAttributeFactory::AttributeFactory$StaticImplementationAttributeFactory(const ::org::apache::lucene::util::AttributeFactory & a0, const ::java::lang::Class & a1) : ::org::apache::lucene::util::AttributeFactory(env->newObject(initializeClass, &mids$, mid_init$_a612bb24, a0.this$, a1.this$)) {}

        ::org::apache::lucene::util::AttributeImpl AttributeFactory$StaticImplementationAttributeFactory::createAttributeInstance(const ::java::lang::Class & a0) const
        {
          return ::org::apache::lucene::util::AttributeImpl(env->callObjectMethod(this$, mids$[mid_createAttributeInstance_4f9d0910], a0.this$));
        }

        jboolean AttributeFactory$StaticImplementationAttributeFactory::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        jint AttributeFactory$StaticImplementationAttributeFactory::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_AttributeFactory$StaticImplementationAttributeFactory_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_AttributeFactory$StaticImplementationAttributeFactory_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_AttributeFactory$StaticImplementationAttributeFactory_of_(t_AttributeFactory$StaticImplementationAttributeFactory *self, PyObject *args);
        static int t_AttributeFactory$StaticImplementationAttributeFactory_init_(t_AttributeFactory$StaticImplementationAttributeFactory *self, PyObject *args, PyObject *kwds);
        static PyObject *t_AttributeFactory$StaticImplementationAttributeFactory_createAttributeInstance(t_AttributeFactory$StaticImplementationAttributeFactory *self, PyObject *args);
        static PyObject *t_AttributeFactory$StaticImplementationAttributeFactory_equals(t_AttributeFactory$StaticImplementationAttributeFactory *self, PyObject *args);
        static PyObject *t_AttributeFactory$StaticImplementationAttributeFactory_hashCode(t_AttributeFactory$StaticImplementationAttributeFactory *self, PyObject *args);
        static PyObject *t_AttributeFactory$StaticImplementationAttributeFactory_get__parameters_(t_AttributeFactory$StaticImplementationAttributeFactory *self, void *data);
        static PyGetSetDef t_AttributeFactory$StaticImplementationAttributeFactory__fields_[] = {
          DECLARE_GET_FIELD(t_AttributeFactory$StaticImplementationAttributeFactory, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_AttributeFactory$StaticImplementationAttributeFactory__methods_[] = {
          DECLARE_METHOD(t_AttributeFactory$StaticImplementationAttributeFactory, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_AttributeFactory$StaticImplementationAttributeFactory, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_AttributeFactory$StaticImplementationAttributeFactory, of_, METH_VARARGS),
          DECLARE_METHOD(t_AttributeFactory$StaticImplementationAttributeFactory, createAttributeInstance, METH_VARARGS),
          DECLARE_METHOD(t_AttributeFactory$StaticImplementationAttributeFactory, equals, METH_VARARGS),
          DECLARE_METHOD(t_AttributeFactory$StaticImplementationAttributeFactory, hashCode, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(AttributeFactory$StaticImplementationAttributeFactory, t_AttributeFactory$StaticImplementationAttributeFactory, ::org::apache::lucene::util::AttributeFactory, AttributeFactory$StaticImplementationAttributeFactory, t_AttributeFactory$StaticImplementationAttributeFactory_init_, 0, 0, t_AttributeFactory$StaticImplementationAttributeFactory__fields_, 0, 0);
        PyObject *t_AttributeFactory$StaticImplementationAttributeFactory::wrap_Object(const AttributeFactory$StaticImplementationAttributeFactory& object, PyTypeObject *p0)
        {
          PyObject *obj = t_AttributeFactory$StaticImplementationAttributeFactory::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_AttributeFactory$StaticImplementationAttributeFactory *self = (t_AttributeFactory$StaticImplementationAttributeFactory *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_AttributeFactory$StaticImplementationAttributeFactory::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_AttributeFactory$StaticImplementationAttributeFactory::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_AttributeFactory$StaticImplementationAttributeFactory *self = (t_AttributeFactory$StaticImplementationAttributeFactory *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_AttributeFactory$StaticImplementationAttributeFactory::install(PyObject *module)
        {
          installType(&PY_TYPE(AttributeFactory$StaticImplementationAttributeFactory), module, "AttributeFactory$StaticImplementationAttributeFactory", 0);
        }

        void t_AttributeFactory$StaticImplementationAttributeFactory::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(AttributeFactory$StaticImplementationAttributeFactory).tp_dict, "class_", make_descriptor(AttributeFactory$StaticImplementationAttributeFactory::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(AttributeFactory$StaticImplementationAttributeFactory).tp_dict, "wrapfn_", make_descriptor(t_AttributeFactory$StaticImplementationAttributeFactory::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(AttributeFactory$StaticImplementationAttributeFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_AttributeFactory$StaticImplementationAttributeFactory_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, AttributeFactory$StaticImplementationAttributeFactory::initializeClass, 1)))
            return NULL;
          return t_AttributeFactory$StaticImplementationAttributeFactory::wrap_Object(AttributeFactory$StaticImplementationAttributeFactory(((t_AttributeFactory$StaticImplementationAttributeFactory *) arg)->object.this$));
        }
        static PyObject *t_AttributeFactory$StaticImplementationAttributeFactory_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, AttributeFactory$StaticImplementationAttributeFactory::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_AttributeFactory$StaticImplementationAttributeFactory_of_(t_AttributeFactory$StaticImplementationAttributeFactory *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_AttributeFactory$StaticImplementationAttributeFactory_init_(t_AttributeFactory$StaticImplementationAttributeFactory *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
          ::java::lang::Class a1((jobject) NULL);
          PyTypeObject **p1;
          AttributeFactory$StaticImplementationAttributeFactory object((jobject) NULL);

          if (!parseArgs(args, "kK", ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::lang::Class::initializeClass, &a0, &a1, &p1, ::java::lang::t_Class::parameters_))
          {
            INT_CALL(object = AttributeFactory$StaticImplementationAttributeFactory(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_AttributeFactory$StaticImplementationAttributeFactory_createAttributeInstance(t_AttributeFactory$StaticImplementationAttributeFactory *self, PyObject *args)
        {
          ::java::lang::Class a0((jobject) NULL);
          PyTypeObject **p0;
          ::org::apache::lucene::util::AttributeImpl result((jobject) NULL);

          if (!parseArgs(args, "K", ::java::lang::Class::initializeClass, &a0, &p0, ::java::lang::t_Class::parameters_))
          {
            OBJ_CALL(result = self->object.createAttributeInstance(a0));
            return ::org::apache::lucene::util::t_AttributeImpl::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(AttributeFactory$StaticImplementationAttributeFactory), (PyObject *) self, "createAttributeInstance", args, 2);
        }

        static PyObject *t_AttributeFactory$StaticImplementationAttributeFactory_equals(t_AttributeFactory$StaticImplementationAttributeFactory *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(AttributeFactory$StaticImplementationAttributeFactory), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_AttributeFactory$StaticImplementationAttributeFactory_hashCode(t_AttributeFactory$StaticImplementationAttributeFactory *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(AttributeFactory$StaticImplementationAttributeFactory), (PyObject *) self, "hashCode", args, 2);
        }
        static PyObject *t_AttributeFactory$StaticImplementationAttributeFactory_get__parameters_(t_AttributeFactory$StaticImplementationAttributeFactory *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/TermVectorsFormat.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/codecs/TermVectorsReader.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "org/apache/lucene/store/IOContext.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/codecs/TermVectorsWriter.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {

        ::java::lang::Class *TermVectorsFormat::class$ = NULL;
        jmethodID *TermVectorsFormat::mids$ = NULL;
        bool TermVectorsFormat::live$ = false;

        jclass TermVectorsFormat::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/TermVectorsFormat");

            mids$ = new jmethodID[max_mid];
            mids$[mid_vectorsReader_9c23221f] = env->getMethodID(cls, "vectorsReader", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/SegmentInfo;Lorg/apache/lucene/index/FieldInfos;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/codecs/TermVectorsReader;");
            mids$[mid_vectorsWriter_0c8458c9] = env->getMethodID(cls, "vectorsWriter", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/SegmentInfo;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/codecs/TermVectorsWriter;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::codecs::TermVectorsReader TermVectorsFormat::vectorsReader(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::SegmentInfo & a1, const ::org::apache::lucene::index::FieldInfos & a2, const ::org::apache::lucene::store::IOContext & a3) const
        {
          return ::org::apache::lucene::codecs::TermVectorsReader(env->callObjectMethod(this$, mids$[mid_vectorsReader_9c23221f], a0.this$, a1.this$, a2.this$, a3.this$));
        }

        ::org::apache::lucene::codecs::TermVectorsWriter TermVectorsFormat::vectorsWriter(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::SegmentInfo & a1, const ::org::apache::lucene::store::IOContext & a2) const
        {
          return ::org::apache::lucene::codecs::TermVectorsWriter(env->callObjectMethod(this$, mids$[mid_vectorsWriter_0c8458c9], a0.this$, a1.this$, a2.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        static PyObject *t_TermVectorsFormat_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TermVectorsFormat_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TermVectorsFormat_vectorsReader(t_TermVectorsFormat *self, PyObject *args);
        static PyObject *t_TermVectorsFormat_vectorsWriter(t_TermVectorsFormat *self, PyObject *args);

        static PyMethodDef t_TermVectorsFormat__methods_[] = {
          DECLARE_METHOD(t_TermVectorsFormat, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TermVectorsFormat, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TermVectorsFormat, vectorsReader, METH_VARARGS),
          DECLARE_METHOD(t_TermVectorsFormat, vectorsWriter, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TermVectorsFormat, t_TermVectorsFormat, ::java::lang::Object, TermVectorsFormat, abstract_init, 0, 0, 0, 0, 0);

        void t_TermVectorsFormat::install(PyObject *module)
        {
          installType(&PY_TYPE(TermVectorsFormat), module, "TermVectorsFormat", 0);
        }

        void t_TermVectorsFormat::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TermVectorsFormat).tp_dict, "class_", make_descriptor(TermVectorsFormat::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TermVectorsFormat).tp_dict, "wrapfn_", make_descriptor(t_TermVectorsFormat::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TermVectorsFormat).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TermVectorsFormat_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TermVectorsFormat::initializeClass, 1)))
            return NULL;
          return t_TermVectorsFormat::wrap_Object(TermVectorsFormat(((t_TermVectorsFormat *) arg)->object.this$));
        }
        static PyObject *t_TermVectorsFormat_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TermVectorsFormat::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_TermVectorsFormat_vectorsReader(t_TermVectorsFormat *self, PyObject *args)
        {
          ::org::apache::lucene::store::Directory a0((jobject) NULL);
          ::org::apache::lucene::index::SegmentInfo a1((jobject) NULL);
          ::org::apache::lucene::index::FieldInfos a2((jobject) NULL);
          ::org::apache::lucene::store::IOContext a3((jobject) NULL);
          ::org::apache::lucene::codecs::TermVectorsReader result((jobject) NULL);

          if (!parseArgs(args, "kkkk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::SegmentInfo::initializeClass, ::org::apache::lucene::index::FieldInfos::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(result = self->object.vectorsReader(a0, a1, a2, a3));
            return ::org::apache::lucene::codecs::t_TermVectorsReader::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "vectorsReader", args);
          return NULL;
        }

        static PyObject *t_TermVectorsFormat_vectorsWriter(t_TermVectorsFormat *self, PyObject *args)
        {
          ::org::apache::lucene::store::Directory a0((jobject) NULL);
          ::org::apache::lucene::index::SegmentInfo a1((jobject) NULL);
          ::org::apache::lucene::store::IOContext a2((jobject) NULL);
          ::org::apache::lucene::codecs::TermVectorsWriter result((jobject) NULL);

          if (!parseArgs(args, "kkk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::SegmentInfo::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.vectorsWriter(a0, a1, a2));
            return ::org::apache::lucene::codecs::t_TermVectorsWriter::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "vectorsWriter", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/lang/Integer.h"
#include "java/lang/Class.h"
#include "java/lang/Comparable.h"
#include "java/lang/Object.h"
#include "java/lang/NumberFormatException.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace java {
  namespace lang {

    ::java::lang::Class *Integer::class$ = NULL;
    jmethodID *Integer::mids$ = NULL;
    bool Integer::live$ = false;
    jint Integer::BYTES = (jint) 0;
    jint Integer::MAX_VALUE = (jint) 0;
    jint Integer::MIN_VALUE = (jint) 0;
    jint Integer::SIZE = (jint) 0;
    ::java::lang::Class *Integer::TYPE = NULL;

    jclass Integer::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/lang/Integer");

        mids$ = new jmethodID[max_mid];
        mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
        mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
        mids$[mid_bitCount_39c7bd23] = env->getStaticMethodID(cls, "bitCount", "(I)I");
        mids$[mid_byteValue_54c6a172] = env->getMethodID(cls, "byteValue", "()B");
        mids$[mid_compare_d8d154b9] = env->getStaticMethodID(cls, "compare", "(II)I");
        mids$[mid_compareTo_af7b73bb] = env->getMethodID(cls, "compareTo", "(Ljava/lang/Integer;)I");
        mids$[mid_compareUnsigned_d8d154b9] = env->getStaticMethodID(cls, "compareUnsigned", "(II)I");
        mids$[mid_decode_da36ea2b] = env->getStaticMethodID(cls, "decode", "(Ljava/lang/String;)Ljava/lang/Integer;");
        mids$[mid_divideUnsigned_d8d154b9] = env->getStaticMethodID(cls, "divideUnsigned", "(II)I");
        mids$[mid_doubleValue_54c6a174] = env->getMethodID(cls, "doubleValue", "()D");
        mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
        mids$[mid_floatValue_54c6a176] = env->getMethodID(cls, "floatValue", "()F");
        mids$[mid_getInteger_da36ea2b] = env->getStaticMethodID(cls, "getInteger", "(Ljava/lang/String;)Ljava/lang/Integer;");
        mids$[mid_getInteger_fe9eddb1] = env->getStaticMethodID(cls, "getInteger", "(Ljava/lang/String;Ljava/lang/Integer;)Ljava/lang/Integer;");
        mids$[mid_getInteger_39b2b79d] = env->getStaticMethodID(cls, "getInteger", "(Ljava/lang/String;I)Ljava/lang/Integer;");
        mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
        mids$[mid_hashCode_39c7bd23] = env->getStaticMethodID(cls, "hashCode", "(I)I");
        mids$[mid_highestOneBit_39c7bd23] = env->getStaticMethodID(cls, "highestOneBit", "(I)I");
        mids$[mid_intValue_54c6a179] = env->getMethodID(cls, "intValue", "()I");
        mids$[mid_longValue_54c6a17a] = env->getMethodID(cls, "longValue", "()J");
        mids$[mid_lowestOneBit_39c7bd23] = env->getStaticMethodID(cls, "lowestOneBit", "(I)I");
        mids$[mid_max_d8d154b9] = env->getStaticMethodID(cls, "max", "(II)I");
        mids$[mid_min_d8d154b9] = env->getStaticMethodID(cls, "min", "(II)I");
        mids$[mid_numberOfLeadingZeros_39c7bd23] = env->getStaticMethodID(cls, "numberOfLeadingZeros", "(I)I");
        mids$[mid_numberOfTrailingZeros_39c7bd23] = env->getStaticMethodID(cls, "numberOfTrailingZeros", "(I)I");
        mids$[mid_parseInt_5fdc3f57] = env->getStaticMethodID(cls, "parseInt", "(Ljava/lang/String;)I");
        mids$[mid_parseInt_6e53ccd9] = env->getStaticMethodID(cls, "parseInt", "(Ljava/lang/String;I)I");
        mids$[mid_parseUnsignedInt_5fdc3f57] = env->getStaticMethodID(cls, "parseUnsignedInt", "(Ljava/lang/String;)I");
        mids$[mid_parseUnsignedInt_6e53ccd9] = env->getStaticMethodID(cls, "parseUnsignedInt", "(Ljava/lang/String;I)I");
        mids$[mid_remainderUnsigned_d8d154b9] = env->getStaticMethodID(cls, "remainderUnsigned", "(II)I");
        mids$[mid_reverse_39c7bd23] = env->getStaticMethodID(cls, "reverse", "(I)I");
        mids$[mid_reverseBytes_39c7bd23] = env->getStaticMethodID(cls, "reverseBytes", "(I)I");
        mids$[mid_rotateLeft_d8d154b9] = env->getStaticMethodID(cls, "rotateLeft", "(II)I");
        mids$[mid_rotateRight_d8d154b9] = env->getStaticMethodID(cls, "rotateRight", "(II)I");
        mids$[mid_shortValue_54c6a163] = env->getMethodID(cls, "shortValue", "()S");
        mids$[mid_signum_39c7bd23] = env->getStaticMethodID(cls, "signum", "(I)I");
        mids$[mid_sum_d8d154b9] = env->getStaticMethodID(cls, "sum", "(II)I");
        mids$[mid_toBinaryString_141401b3] = env->getStaticMethodID(cls, "toBinaryString", "(I)Ljava/lang/String;");
        mids$[mid_toHexString_141401b3] = env->getStaticMethodID(cls, "toHexString", "(I)Ljava/lang/String;");
        mids$[mid_toOctalString_141401b3] = env->getStaticMethodID(cls, "toOctalString", "(I)Ljava/lang/String;");
        mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
        mids$[mid_toString_141401b3] = env->getStaticMethodID(cls, "toString", "(I)Ljava/lang/String;");
        mids$[mid_toString_f9118fe5] = env->getStaticMethodID(cls, "toString", "(II)Ljava/lang/String;");
        mids$[mid_toUnsignedLong_39c7bd20] = env->getStaticMethodID(cls, "toUnsignedLong", "(I)J");
        mids$[mid_toUnsignedString_141401b3] = env->getStaticMethodID(cls, "toUnsignedString", "(I)Ljava/lang/String;");
        mids$[mid_toUnsignedString_f9118fe5] = env->getStaticMethodID(cls, "toUnsignedString", "(II)Ljava/lang/String;");
        mids$[mid_valueOf_7266dabb] = env->getStaticMethodID(cls, "valueOf", "(I)Ljava/lang/Integer;");
        mids$[mid_valueOf_da36ea2b] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Ljava/lang/Integer;");
        mids$[mid_valueOf_39b2b79d] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;I)Ljava/lang/Integer;");

        class$ = (::java::lang::Class *) new JObject(cls);
        cls = (jclass) class$->this$;

        BYTES = env->getStaticIntField(cls, "BYTES");
        MAX_VALUE = env->getStaticIntField(cls, "MAX_VALUE");
        MIN_VALUE = env->getStaticIntField(cls, "MIN_VALUE");
        SIZE = env->getStaticIntField(cls, "SIZE");
        TYPE = new ::java::lang::Class(env->getStaticObjectField(cls, "TYPE", "Ljava/lang/Class;"));
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    Integer::Integer(jint a0) : ::java::lang::Number(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

    Integer::Integer(const ::java::lang::String & a0) : ::java::lang::Number(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

    jint Integer::bitCount(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_bitCount_39c7bd23], a0);
    }

    jbyte Integer::byteValue() const
    {
      return env->callByteMethod(this$, mids$[mid_byteValue_54c6a172]);
    }

    jint Integer::compare(jint a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_compare_d8d154b9], a0, a1);
    }

    jint Integer::compareTo(const Integer & a0) const
    {
      return env->callIntMethod(this$, mids$[mid_compareTo_af7b73bb], a0.this$);
    }

    jint Integer::compareUnsigned(jint a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_compareUnsigned_d8d154b9], a0, a1);
    }

    Integer Integer::decode(const ::java::lang::String & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return Integer(env->callStaticObjectMethod(cls, mids$[mid_decode_da36ea2b], a0.this$));
    }

    jint Integer::divideUnsigned(jint a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_divideUnsigned_d8d154b9], a0, a1);
    }

    jdouble Integer::doubleValue() const
    {
      return env->callDoubleMethod(this$, mids$[mid_doubleValue_54c6a174]);
    }

    jboolean Integer::equals(const ::java::lang::Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
    }

    jfloat Integer::floatValue() const
    {
      return env->callFloatMethod(this$, mids$[mid_floatValue_54c6a176]);
    }

    Integer Integer::getInteger(const ::java::lang::String & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return Integer(env->callStaticObjectMethod(cls, mids$[mid_getInteger_da36ea2b], a0.this$));
    }

    Integer Integer::getInteger(const ::java::lang::String & a0, const Integer & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return Integer(env->callStaticObjectMethod(cls, mids$[mid_getInteger_fe9eddb1], a0.this$, a1.this$));
    }

    Integer Integer::getInteger(const ::java::lang::String & a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return Integer(env->callStaticObjectMethod(cls, mids$[mid_getInteger_39b2b79d], a0.this$, a1));
    }

    jint Integer::hashCode() const
    {
      return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
    }

    jint Integer::hashCode(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_hashCode_39c7bd23], a0);
    }

    jint Integer::highestOneBit(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_highestOneBit_39c7bd23], a0);
    }

    jint Integer::intValue() const
    {
      return env->callIntMethod(this$, mids$[mid_intValue_54c6a179]);
    }

    jlong Integer::longValue() const
    {
      return env->callLongMethod(this$, mids$[mid_longValue_54c6a17a]);
    }

    jint Integer::lowestOneBit(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_lowestOneBit_39c7bd23], a0);
    }

    jint Integer::max$(jint a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_max_d8d154b9], a0, a1);
    }

    jint Integer::min$(jint a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_min_d8d154b9], a0, a1);
    }

    jint Integer::numberOfLeadingZeros(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_numberOfLeadingZeros_39c7bd23], a0);
    }

    jint Integer::numberOfTrailingZeros(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_numberOfTrailingZeros_39c7bd23], a0);
    }

    jint Integer::parseInt(const ::java::lang::String & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_parseInt_5fdc3f57], a0.this$);
    }

    jint Integer::parseInt(const ::java::lang::String & a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_parseInt_6e53ccd9], a0.this$, a1);
    }

    jint Integer::parseUnsignedInt(const ::java::lang::String & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_parseUnsignedInt_5fdc3f57], a0.this$);
    }

    jint Integer::parseUnsignedInt(const ::java::lang::String & a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_parseUnsignedInt_6e53ccd9], a0.this$, a1);
    }

    jint Integer::remainderUnsigned(jint a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_remainderUnsigned_d8d154b9], a0, a1);
    }

    jint Integer::reverse(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_reverse_39c7bd23], a0);
    }

    jint Integer::reverseBytes(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_reverseBytes_39c7bd23], a0);
    }

    jint Integer::rotateLeft(jint a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_rotateLeft_d8d154b9], a0, a1);
    }

    jint Integer::rotateRight(jint a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_rotateRight_d8d154b9], a0, a1);
    }

    jshort Integer::shortValue() const
    {
      return env->callShortMethod(this$, mids$[mid_shortValue_54c6a163]);
    }

    jint Integer::signum(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_signum_39c7bd23], a0);
    }

    jint Integer::sum(jint a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_sum_d8d154b9], a0, a1);
    }

    ::java::lang::String Integer::toBinaryString(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toBinaryString_141401b3], a0));
    }

    ::java::lang::String Integer::toHexString(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toHexString_141401b3], a0));
    }

    ::java::lang::String Integer::toOctalString(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toOctalString_141401b3], a0));
    }

    ::java::lang::String Integer::toString() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
    }

    ::java::lang::String Integer::toString(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toString_141401b3], a0));
    }

    ::java::lang::String Integer::toString(jint a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toString_f9118fe5], a0, a1));
    }

    jlong Integer::toUnsignedLong(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticLongMethod(cls, mids$[mid_toUnsignedLong_39c7bd20], a0);
    }

    ::java::lang::String Integer::toUnsignedString(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toUnsignedString_141401b3], a0));
    }

    ::java::lang::String Integer::toUnsignedString(jint a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toUnsignedString_f9118fe5], a0, a1));
    }

    Integer Integer::valueOf(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return Integer(env->callStaticObjectMethod(cls, mids$[mid_valueOf_7266dabb], a0));
    }

    Integer Integer::valueOf(const ::java::lang::String & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return Integer(env->callStaticObjectMethod(cls, mids$[mid_valueOf_da36ea2b], a0.this$));
    }

    Integer Integer::valueOf(const ::java::lang::String & a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return Integer(env->callStaticObjectMethod(cls, mids$[mid_valueOf_39b2b79d], a0.this$, a1));
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace lang {
    static PyObject *t_Integer_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Integer_instance_(PyTypeObject *type, PyObject *arg);
    static int t_Integer_init_(t_Integer *self, PyObject *args, PyObject *kwds);
    static PyObject *t_Integer_bitCount(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Integer_byteValue(t_Integer *self, PyObject *args);
    static PyObject *t_Integer_compare(PyTypeObject *type, PyObject *args);
    static PyObject *t_Integer_compareTo(t_Integer *self, PyObject *arg);
    static PyObject *t_Integer_compareUnsigned(PyTypeObject *type, PyObject *args);
    static PyObject *t_Integer_decode(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Integer_divideUnsigned(PyTypeObject *type, PyObject *args);
    static PyObject *t_Integer_doubleValue(t_Integer *self, PyObject *args);
    static PyObject *t_Integer_equals(t_Integer *self, PyObject *args);
    static PyObject *t_Integer_floatValue(t_Integer *self, PyObject *args);
    static PyObject *t_Integer_getInteger(PyTypeObject *type, PyObject *args);
    static PyObject *t_Integer_hashCode(t_Integer *self, PyObject *args);
    static PyObject *t_Integer_hashCode_(PyTypeObject *type, PyObject *args);
    static PyObject *t_Integer_highestOneBit(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Integer_intValue(t_Integer *self, PyObject *args);
    static PyObject *t_Integer_longValue(t_Integer *self, PyObject *args);
    static PyObject *t_Integer_lowestOneBit(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Integer_max(PyTypeObject *type, PyObject *args);
    static PyObject *t_Integer_min(PyTypeObject *type, PyObject *args);
    static PyObject *t_Integer_numberOfLeadingZeros(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Integer_numberOfTrailingZeros(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Integer_parseInt(PyTypeObject *type, PyObject *args);
    static PyObject *t_Integer_parseUnsignedInt(PyTypeObject *type, PyObject *args);
    static PyObject *t_Integer_remainderUnsigned(PyTypeObject *type, PyObject *args);
    static PyObject *t_Integer_reverse(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Integer_reverseBytes(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Integer_rotateLeft(PyTypeObject *type, PyObject *args);
    static PyObject *t_Integer_rotateRight(PyTypeObject *type, PyObject *args);
    static PyObject *t_Integer_shortValue(t_Integer *self, PyObject *args);
    static PyObject *t_Integer_signum(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Integer_sum(PyTypeObject *type, PyObject *args);
    static PyObject *t_Integer_toBinaryString(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Integer_toHexString(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Integer_toOctalString(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Integer_toString(t_Integer *self, PyObject *args);
    static PyObject *t_Integer_toString_(PyTypeObject *type, PyObject *args);
    static PyObject *t_Integer_toUnsignedLong(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Integer_toUnsignedString(PyTypeObject *type, PyObject *args);
    static PyObject *t_Integer_valueOf(PyTypeObject *type, PyObject *args);

    static PyMethodDef t_Integer__methods_[] = {
      DECLARE_METHOD(t_Integer, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Integer, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Integer, bitCount, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Integer, byteValue, METH_VARARGS),
      DECLARE_METHOD(t_Integer, compare, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Integer, compareTo, METH_O),
      DECLARE_METHOD(t_Integer, compareUnsigned, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Integer, decode, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Integer, divideUnsigned, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Integer, doubleValue, METH_VARARGS),
      DECLARE_METHOD(t_Integer, equals, METH_VARARGS),
      DECLARE_METHOD(t_Integer, floatValue, METH_VARARGS),
      DECLARE_METHOD(t_Integer, getInteger, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Integer, hashCode, METH_VARARGS),
      DECLARE_METHOD(t_Integer, hashCode_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Integer, highestOneBit, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Integer, intValue, METH_VARARGS),
      DECLARE_METHOD(t_Integer, longValue, METH_VARARGS),
      DECLARE_METHOD(t_Integer, lowestOneBit, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Integer, max, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Integer, min, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Integer, numberOfLeadingZeros, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Integer, numberOfTrailingZeros, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Integer, parseInt, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Integer, parseUnsignedInt, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Integer, remainderUnsigned, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Integer, reverse, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Integer, reverseBytes, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Integer, rotateLeft, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Integer, rotateRight, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Integer, shortValue, METH_VARARGS),
      DECLARE_METHOD(t_Integer, signum, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Integer, sum, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Integer, toBinaryString, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Integer, toHexString, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Integer, toOctalString, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Integer, toString, METH_VARARGS),
      DECLARE_METHOD(t_Integer, toString_, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Integer, toUnsignedLong, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Integer, toUnsignedString, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Integer, valueOf, METH_VARARGS | METH_CLASS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(Integer, t_Integer, ::java::lang::Number, Integer, t_Integer_init_, 0, 0, 0, 0, 0);

    void t_Integer::install(PyObject *module)
    {
      installType(&PY_TYPE(Integer), module, "Integer", 0);
    }

    void t_Integer::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(Integer).tp_dict, "class_", make_descriptor(Integer::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(Integer).tp_dict, "wrapfn_", make_descriptor(unboxInteger));
      PyDict_SetItemString(PY_TYPE(Integer).tp_dict, "boxfn_", make_descriptor(boxInteger));
      env->getClass(Integer::initializeClass);
      PyDict_SetItemString(PY_TYPE(Integer).tp_dict, "BYTES", make_descriptor(Integer::BYTES));
      PyDict_SetItemString(PY_TYPE(Integer).tp_dict, "MAX_VALUE", make_descriptor(Integer::MAX_VALUE));
      PyDict_SetItemString(PY_TYPE(Integer).tp_dict, "MIN_VALUE", make_descriptor(Integer::MIN_VALUE));
      PyDict_SetItemString(PY_TYPE(Integer).tp_dict, "SIZE", make_descriptor(Integer::SIZE));
      PyDict_SetItemString(PY_TYPE(Integer).tp_dict, "TYPE", make_descriptor(::java::lang::t_Class::wrap_Object(*Integer::TYPE)));
    }

    static PyObject *t_Integer_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, Integer::initializeClass, 1)))
        return NULL;
      return t_Integer::wrap_Object(Integer(((t_Integer *) arg)->object.this$));
    }
    static PyObject *t_Integer_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, Integer::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static int t_Integer_init_(t_Integer *self, PyObject *args, PyObject *kwds)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jint a0;
          Integer object((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            INT_CALL(object = Integer(a0));
            self->object = object;
            break;
          }
        }
        {
          ::java::lang::String a0((jobject) NULL);
          Integer object((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            INT_CALL(object = Integer(a0));
            self->object = object;
            break;
          }
        }
       default:
        PyErr_SetArgsError((PyObject *) self, "__init__", args);
        return -1;
      }

      return 0;
    }

    static PyObject *t_Integer_bitCount(PyTypeObject *type, PyObject *arg)
    {
      jint a0;
      jint result;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(result = ::java::lang::Integer::bitCount(a0));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "bitCount", arg);
      return NULL;
    }

    static PyObject *t_Integer_byteValue(t_Integer *self, PyObject *args)
    {
      jbyte result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.byteValue());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(Integer), (PyObject *) self, "byteValue", args, 2);
    }

    static PyObject *t_Integer_compare(PyTypeObject *type, PyObject *args)
    {
      jint a0;
      jint a1;
      jint result;

      if (!parseArgs(args, "II", &a0, &a1))
      {
        OBJ_CALL(result = ::java::lang::Integer::compare(a0, a1));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "compare", args);
      return NULL;
    }

    static PyObject *t_Integer_compareTo(t_Integer *self, PyObject *arg)
    {
      Integer a0((jobject) NULL);
      jint result;

      if (!parseArg(arg, "O", &::java::lang::PY_TYPE(Integer), &a0))
      {
        OBJ_CALL(result = self->object.compareTo(a0));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError((PyObject *) self, "compareTo", arg);
      return NULL;
    }

    static PyObject *t_Integer_compareUnsigned(PyTypeObject *type, PyObject *args)
    {
      jint a0;
      jint a1;
      jint result;

      if (!parseArgs(args, "II", &a0, &a1))
      {
        OBJ_CALL(result = ::java::lang::Integer::compareUnsigned(a0, a1));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "compareUnsigned", args);
      return NULL;
    }

    static PyObject *t_Integer_decode(PyTypeObject *type, PyObject *arg)
    {
      ::java::lang::String a0((jobject) NULL);
      Integer result((jobject) NULL);

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(result = ::java::lang::Integer::decode(a0));
        return t_Integer::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "decode", arg);
      return NULL;
    }

    static PyObject *t_Integer_divideUnsigned(PyTypeObject *type, PyObject *args)
    {
      jint a0;
      jint a1;
      jint result;

      if (!parseArgs(args, "II", &a0, &a1))
      {
        OBJ_CALL(result = ::java::lang::Integer::divideUnsigned(a0, a1));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "divideUnsigned", args);
      return NULL;
    }

    static PyObject *t_Integer_doubleValue(t_Integer *self, PyObject *args)
    {
      jdouble result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.doubleValue());
        return PyFloat_FromDouble((double) result);
      }

      return callSuper(&PY_TYPE(Integer), (PyObject *) self, "doubleValue", args, 2);
    }

    static PyObject *t_Integer_equals(t_Integer *self, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      jboolean result;

      if (!parseArgs(args, "o", &a0))
      {
        OBJ_CALL(result = self->object.equals(a0));
        Py_RETURN_BOOL(result);
      }

      return callSuper(&PY_TYPE(Integer), (PyObject *) self, "equals", args, 2);
    }

    static PyObject *t_Integer_floatValue(t_Integer *self, PyObject *args)
    {
      jfloat result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.floatValue());
        return PyFloat_FromDouble((double) result);
      }

      return callSuper(&PY_TYPE(Integer), (PyObject *) self, "floatValue", args, 2);
    }

    static PyObject *t_Integer_getInteger(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          ::java::lang::String a0((jobject) NULL);
          Integer result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::java::lang::Integer::getInteger(a0));
            return t_Integer::wrap_Object(result);
          }
        }
        break;
       case 2:
        {
          ::java::lang::String a0((jobject) NULL);
          Integer a1((jobject) NULL);
          Integer result((jobject) NULL);

          if (!parseArgs(args, "sO", &::java::lang::PY_TYPE(Integer), &a0, &a1))
          {
            OBJ_CALL(result = ::java::lang::Integer::getInteger(a0, a1));
            return t_Integer::wrap_Object(result);
          }
        }
        {
          ::java::lang::String a0((jobject) NULL);
          jint a1;
          Integer result((jobject) NULL);

          if (!parseArgs(args, "sI", &a0, &a1))
          {
            OBJ_CALL(result = ::java::lang::Integer::getInteger(a0, a1));
            return t_Integer::wrap_Object(result);
          }
        }
      }

      PyErr_SetArgsError(type, "getInteger", args);
      return NULL;
    }

    static PyObject *t_Integer_hashCode(t_Integer *self, PyObject *args)
    {
      jint result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.hashCode());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(Integer), (PyObject *) self, "hashCode", args, 2);
    }

    static PyObject *t_Integer_hashCode_(PyTypeObject *type, PyObject *args)
    {
      jint a0;
      jint result;

      if (!parseArgs(args, "I", &a0))
      {
        OBJ_CALL(result = ::java::lang::Integer::hashCode(a0));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "hashCode_", args);
      return NULL;
    }

    static PyObject *t_Integer_highestOneBit(PyTypeObject *type, PyObject *arg)
    {
      jint a0;
      jint result;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(result = ::java::lang::Integer::highestOneBit(a0));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "highestOneBit", arg);
      return NULL;
    }

    static PyObject *t_Integer_intValue(t_Integer *self, PyObject *args)
    {
      jint result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.intValue());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(Integer), (PyObject *) self, "intValue", args, 2);
    }

    static PyObject *t_Integer_longValue(t_Integer *self, PyObject *args)
    {
      jlong result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.longValue());
        return PyLong_FromLongLong((PY_LONG_LONG) result);
      }

      return callSuper(&PY_TYPE(Integer), (PyObject *) self, "longValue", args, 2);
    }

    static PyObject *t_Integer_lowestOneBit(PyTypeObject *type, PyObject *arg)
    {
      jint a0;
      jint result;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(result = ::java::lang::Integer::lowestOneBit(a0));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "lowestOneBit", arg);
      return NULL;
    }

    static PyObject *t_Integer_max(PyTypeObject *type, PyObject *args)
    {
      jint a0;
      jint a1;
      jint result;

      if (!parseArgs(args, "II", &a0, &a1))
      {
        OBJ_CALL(result = ::java::lang::Integer::max$(a0, a1));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "max", args);
      return NULL;
    }

    static PyObject *t_Integer_min(PyTypeObject *type, PyObject *args)
    {
      jint a0;
      jint a1;
      jint result;

      if (!parseArgs(args, "II", &a0, &a1))
      {
        OBJ_CALL(result = ::java::lang::Integer::min$(a0, a1));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "min", args);
      return NULL;
    }

    static PyObject *t_Integer_numberOfLeadingZeros(PyTypeObject *type, PyObject *arg)
    {
      jint a0;
      jint result;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(result = ::java::lang::Integer::numberOfLeadingZeros(a0));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "numberOfLeadingZeros", arg);
      return NULL;
    }

    static PyObject *t_Integer_numberOfTrailingZeros(PyTypeObject *type, PyObject *arg)
    {
      jint a0;
      jint result;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(result = ::java::lang::Integer::numberOfTrailingZeros(a0));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "numberOfTrailingZeros", arg);
      return NULL;
    }

    static PyObject *t_Integer_parseInt(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          ::java::lang::String a0((jobject) NULL);
          jint result;

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::java::lang::Integer::parseInt(a0));
            return PyInt_FromLong((long) result);
          }
        }
        break;
       case 2:
        {
          ::java::lang::String a0((jobject) NULL);
          jint a1;
          jint result;

          if (!parseArgs(args, "sI", &a0, &a1))
          {
            OBJ_CALL(result = ::java::lang::Integer::parseInt(a0, a1));
            return PyInt_FromLong((long) result);
          }
        }
      }

      PyErr_SetArgsError(type, "parseInt", args);
      return NULL;
    }

    static PyObject *t_Integer_parseUnsignedInt(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          ::java::lang::String a0((jobject) NULL);
          jint result;

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::java::lang::Integer::parseUnsignedInt(a0));
            return PyInt_FromLong((long) result);
          }
        }
        break;
       case 2:
        {
          ::java::lang::String a0((jobject) NULL);
          jint a1;
          jint result;

          if (!parseArgs(args, "sI", &a0, &a1))
          {
            OBJ_CALL(result = ::java::lang::Integer::parseUnsignedInt(a0, a1));
            return PyInt_FromLong((long) result);
          }
        }
      }

      PyErr_SetArgsError(type, "parseUnsignedInt", args);
      return NULL;
    }

    static PyObject *t_Integer_remainderUnsigned(PyTypeObject *type, PyObject *args)
    {
      jint a0;
      jint a1;
      jint result;

      if (!parseArgs(args, "II", &a0, &a1))
      {
        OBJ_CALL(result = ::java::lang::Integer::remainderUnsigned(a0, a1));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "remainderUnsigned", args);
      return NULL;
    }

    static PyObject *t_Integer_reverse(PyTypeObject *type, PyObject *arg)
    {
      jint a0;
      jint result;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(result = ::java::lang::Integer::reverse(a0));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "reverse", arg);
      return NULL;
    }

    static PyObject *t_Integer_reverseBytes(PyTypeObject *type, PyObject *arg)
    {
      jint a0;
      jint result;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(result = ::java::lang::Integer::reverseBytes(a0));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "reverseBytes", arg);
      return NULL;
    }

    static PyObject *t_Integer_rotateLeft(PyTypeObject *type, PyObject *args)
    {
      jint a0;
      jint a1;
      jint result;

      if (!parseArgs(args, "II", &a0, &a1))
      {
        OBJ_CALL(result = ::java::lang::Integer::rotateLeft(a0, a1));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "rotateLeft", args);
      return NULL;
    }

    static PyObject *t_Integer_rotateRight(PyTypeObject *type, PyObject *args)
    {
      jint a0;
      jint a1;
      jint result;

      if (!parseArgs(args, "II", &a0, &a1))
      {
        OBJ_CALL(result = ::java::lang::Integer::rotateRight(a0, a1));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "rotateRight", args);
      return NULL;
    }

    static PyObject *t_Integer_shortValue(t_Integer *self, PyObject *args)
    {
      jshort result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.shortValue());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(Integer), (PyObject *) self, "shortValue", args, 2);
    }

    static PyObject *t_Integer_signum(PyTypeObject *type, PyObject *arg)
    {
      jint a0;
      jint result;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(result = ::java::lang::Integer::signum(a0));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "signum", arg);
      return NULL;
    }

    static PyObject *t_Integer_sum(PyTypeObject *type, PyObject *args)
    {
      jint a0;
      jint a1;
      jint result;

      if (!parseArgs(args, "II", &a0, &a1))
      {
        OBJ_CALL(result = ::java::lang::Integer::sum(a0, a1));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "sum", args);
      return NULL;
    }

    static PyObject *t_Integer_toBinaryString(PyTypeObject *type, PyObject *arg)
    {
      jint a0;
      ::java::lang::String result((jobject) NULL);

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(result = ::java::lang::Integer::toBinaryString(a0));
        return j2p(result);
      }

      PyErr_SetArgsError(type, "toBinaryString", arg);
      return NULL;
    }

    static PyObject *t_Integer_toHexString(PyTypeObject *type, PyObject *arg)
    {
      jint a0;
      ::java::lang::String result((jobject) NULL);

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(result = ::java::lang::Integer::toHexString(a0));
        return j2p(result);
      }

      PyErr_SetArgsError(type, "toHexString", arg);
      return NULL;
    }

    static PyObject *t_Integer_toOctalString(PyTypeObject *type, PyObject *arg)
    {
      jint a0;
      ::java::lang::String result((jobject) NULL);

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(result = ::java::lang::Integer::toOctalString(a0));
        return j2p(result);
      }

      PyErr_SetArgsError(type, "toOctalString", arg);
      return NULL;
    }

    static PyObject *t_Integer_toString(t_Integer *self, PyObject *args)
    {
      ::java::lang::String result((jobject) NULL);

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.toString());
        return j2p(result);
      }

      return callSuper(&PY_TYPE(Integer), (PyObject *) self, "toString", args, 2);
    }

    static PyObject *t_Integer_toString_(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jint a0;
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = ::java::lang::Integer::toString(a0));
            return j2p(result);
          }
        }
        break;
       case 2:
        {
          jint a0;
          jint a1;
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(result = ::java::lang::Integer::toString(a0, a1));
            return j2p(result);
          }
        }
      }

      PyErr_SetArgsError(type, "toString_", args);
      return NULL;
    }

    static PyObject *t_Integer_toUnsignedLong(PyTypeObject *type, PyObject *arg)
    {
      jint a0;
      jlong result;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(result = ::java::lang::Integer::toUnsignedLong(a0));
        return PyLong_FromLongLong((PY_LONG_LONG) result);
      }

      PyErr_SetArgsError(type, "toUnsignedLong", arg);
      return NULL;
    }

    static PyObject *t_Integer_toUnsignedString(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jint a0;
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = ::java::lang::Integer::toUnsignedString(a0));
            return j2p(result);
          }
        }
        break;
       case 2:
        {
          jint a0;
          jint a1;
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(result = ::java::lang::Integer::toUnsignedString(a0, a1));
            return j2p(result);
          }
        }
      }

      PyErr_SetArgsError(type, "toUnsignedString", args);
      return NULL;
    }

    static PyObject *t_Integer_valueOf(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jint a0;
          Integer result((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = ::java::lang::Integer::valueOf(a0));
            return t_Integer::wrap_Object(result);
          }
        }
        {
          ::java::lang::String a0((jobject) NULL);
          Integer result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::java::lang::Integer::valueOf(a0));
            return t_Integer::wrap_Object(result);
          }
        }
        break;
       case 2:
        {
          ::java::lang::String a0((jobject) NULL);
          jint a1;
          Integer result((jobject) NULL);

          if (!parseArgs(args, "sI", &a0, &a1))
          {
            OBJ_CALL(result = ::java::lang::Integer::valueOf(a0, a1));
            return t_Integer::wrap_Object(result);
          }
        }
      }

      PyErr_SetArgsError(type, "valueOf", args);
      return NULL;
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/packed/PackedInts$Decoder.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {

          ::java::lang::Class *PackedInts$Decoder::class$ = NULL;
          jmethodID *PackedInts$Decoder::mids$ = NULL;
          bool PackedInts$Decoder::live$ = false;

          jclass PackedInts$Decoder::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/packed/PackedInts$Decoder");

              mids$ = new jmethodID[max_mid];
              mids$[mid_byteBlockCount_54c6a179] = env->getMethodID(cls, "byteBlockCount", "()I");
              mids$[mid_byteValueCount_54c6a179] = env->getMethodID(cls, "byteValueCount", "()I");
              mids$[mid_decode_d1f472ca] = env->getMethodID(cls, "decode", "([BI[JII)V");
              mids$[mid_decode_6b7ac502] = env->getMethodID(cls, "decode", "([JI[JII)V");
              mids$[mid_decode_9d91d181] = env->getMethodID(cls, "decode", "([BI[III)V");
              mids$[mid_decode_ff13be19] = env->getMethodID(cls, "decode", "([JI[III)V");
              mids$[mid_longBlockCount_54c6a179] = env->getMethodID(cls, "longBlockCount", "()I");
              mids$[mid_longValueCount_54c6a179] = env->getMethodID(cls, "longValueCount", "()I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jint PackedInts$Decoder::byteBlockCount() const
          {
            return env->callIntMethod(this$, mids$[mid_byteBlockCount_54c6a179]);
          }

          jint PackedInts$Decoder::byteValueCount() const
          {
            return env->callIntMethod(this$, mids$[mid_byteValueCount_54c6a179]);
          }

          void PackedInts$Decoder::decode(const JArray< jbyte > & a0, jint a1, const JArray< jlong > & a2, jint a3, jint a4) const
          {
            env->callVoidMethod(this$, mids$[mid_decode_d1f472ca], a0.this$, a1, a2.this$, a3, a4);
          }

          void PackedInts$Decoder::decode(const JArray< jlong > & a0, jint a1, const JArray< jlong > & a2, jint a3, jint a4) const
          {
            env->callVoidMethod(this$, mids$[mid_decode_6b7ac502], a0.this$, a1, a2.this$, a3, a4);
          }

          void PackedInts$Decoder::decode(const JArray< jbyte > & a0, jint a1, const JArray< jint > & a2, jint a3, jint a4) const
          {
            env->callVoidMethod(this$, mids$[mid_decode_9d91d181], a0.this$, a1, a2.this$, a3, a4);
          }

          void PackedInts$Decoder::decode(const JArray< jlong > & a0, jint a1, const JArray< jint > & a2, jint a3, jint a4) const
          {
            env->callVoidMethod(this$, mids$[mid_decode_ff13be19], a0.this$, a1, a2.this$, a3, a4);
          }

          jint PackedInts$Decoder::longBlockCount() const
          {
            return env->callIntMethod(this$, mids$[mid_longBlockCount_54c6a179]);
          }

          jint PackedInts$Decoder::longValueCount() const
          {
            return env->callIntMethod(this$, mids$[mid_longValueCount_54c6a179]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {
          static PyObject *t_PackedInts$Decoder_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PackedInts$Decoder_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PackedInts$Decoder_byteBlockCount(t_PackedInts$Decoder *self);
          static PyObject *t_PackedInts$Decoder_byteValueCount(t_PackedInts$Decoder *self);
          static PyObject *t_PackedInts$Decoder_decode(t_PackedInts$Decoder *self, PyObject *args);
          static PyObject *t_PackedInts$Decoder_longBlockCount(t_PackedInts$Decoder *self);
          static PyObject *t_PackedInts$Decoder_longValueCount(t_PackedInts$Decoder *self);

          static PyMethodDef t_PackedInts$Decoder__methods_[] = {
            DECLARE_METHOD(t_PackedInts$Decoder, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedInts$Decoder, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedInts$Decoder, byteBlockCount, METH_NOARGS),
            DECLARE_METHOD(t_PackedInts$Decoder, byteValueCount, METH_NOARGS),
            DECLARE_METHOD(t_PackedInts$Decoder, decode, METH_VARARGS),
            DECLARE_METHOD(t_PackedInts$Decoder, longBlockCount, METH_NOARGS),
            DECLARE_METHOD(t_PackedInts$Decoder, longValueCount, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PackedInts$Decoder, t_PackedInts$Decoder, ::java::lang::Object, PackedInts$Decoder, abstract_init, 0, 0, 0, 0, 0);

          void t_PackedInts$Decoder::install(PyObject *module)
          {
            installType(&PY_TYPE(PackedInts$Decoder), module, "PackedInts$Decoder", 0);
          }

          void t_PackedInts$Decoder::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PackedInts$Decoder).tp_dict, "class_", make_descriptor(PackedInts$Decoder::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PackedInts$Decoder).tp_dict, "wrapfn_", make_descriptor(t_PackedInts$Decoder::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PackedInts$Decoder).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PackedInts$Decoder_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PackedInts$Decoder::initializeClass, 1)))
              return NULL;
            return t_PackedInts$Decoder::wrap_Object(PackedInts$Decoder(((t_PackedInts$Decoder *) arg)->object.this$));
          }
          static PyObject *t_PackedInts$Decoder_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PackedInts$Decoder::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_PackedInts$Decoder_byteBlockCount(t_PackedInts$Decoder *self)
          {
            jint result;
            OBJ_CALL(result = self->object.byteBlockCount());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_PackedInts$Decoder_byteValueCount(t_PackedInts$Decoder *self)
          {
            jint result;
            OBJ_CALL(result = self->object.byteValueCount());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_PackedInts$Decoder_decode(t_PackedInts$Decoder *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 5:
              {
                JArray< jbyte > a0((jobject) NULL);
                jint a1;
                JArray< jlong > a2((jobject) NULL);
                jint a3;
                jint a4;

                if (!parseArgs(args, "[BI[JII", &a0, &a1, &a2, &a3, &a4))
                {
                  OBJ_CALL(self->object.decode(a0, a1, a2, a3, a4));
                  Py_RETURN_NONE;
                }
              }
              {
                JArray< jlong > a0((jobject) NULL);
                jint a1;
                JArray< jlong > a2((jobject) NULL);
                jint a3;
                jint a4;

                if (!parseArgs(args, "[JI[JII", &a0, &a1, &a2, &a3, &a4))
                {
                  OBJ_CALL(self->object.decode(a0, a1, a2, a3, a4));
                  Py_RETURN_NONE;
                }
              }
              {
                JArray< jbyte > a0((jobject) NULL);
                jint a1;
                JArray< jint > a2((jobject) NULL);
                jint a3;
                jint a4;

                if (!parseArgs(args, "[BI[III", &a0, &a1, &a2, &a3, &a4))
                {
                  OBJ_CALL(self->object.decode(a0, a1, a2, a3, a4));
                  Py_RETURN_NONE;
                }
              }
              {
                JArray< jlong > a0((jobject) NULL);
                jint a1;
                JArray< jint > a2((jobject) NULL);
                jint a3;
                jint a4;

                if (!parseArgs(args, "[JI[III", &a0, &a1, &a2, &a3, &a4))
                {
                  OBJ_CALL(self->object.decode(a0, a1, a2, a3, a4));
                  Py_RETURN_NONE;
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "decode", args);
            return NULL;
          }

          static PyObject *t_PackedInts$Decoder_longBlockCount(t_PackedInts$Decoder *self)
          {
            jint result;
            OBJ_CALL(result = self->object.longBlockCount());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_PackedInts$Decoder_longValueCount(t_PackedInts$Decoder *self)
          {
            jint result;
            OBJ_CALL(result = self->object.longValueCount());
            return PyInt_FromLong((long) result);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/pattern/PatternCaptureGroupFilterFactory.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/pattern/PatternCaptureGroupTokenFilter.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pattern {

          ::java::lang::Class *PatternCaptureGroupFilterFactory::class$ = NULL;
          jmethodID *PatternCaptureGroupFilterFactory::mids$ = NULL;
          bool PatternCaptureGroupFilterFactory::live$ = false;

          jclass PatternCaptureGroupFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/pattern/PatternCaptureGroupFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_c840bb3a] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/pattern/PatternCaptureGroupTokenFilter;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PatternCaptureGroupFilterFactory::PatternCaptureGroupFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::pattern::PatternCaptureGroupTokenFilter PatternCaptureGroupFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::pattern::PatternCaptureGroupTokenFilter(env->callObjectMethod(this$, mids$[mid_create_c840bb3a], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pattern {
          static PyObject *t_PatternCaptureGroupFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PatternCaptureGroupFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PatternCaptureGroupFilterFactory_init_(t_PatternCaptureGroupFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PatternCaptureGroupFilterFactory_create(t_PatternCaptureGroupFilterFactory *self, PyObject *args);

          static PyMethodDef t_PatternCaptureGroupFilterFactory__methods_[] = {
            DECLARE_METHOD(t_PatternCaptureGroupFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PatternCaptureGroupFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PatternCaptureGroupFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PatternCaptureGroupFilterFactory, t_PatternCaptureGroupFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, PatternCaptureGroupFilterFactory, t_PatternCaptureGroupFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_PatternCaptureGroupFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(PatternCaptureGroupFilterFactory), module, "PatternCaptureGroupFilterFactory", 0);
          }

          void t_PatternCaptureGroupFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PatternCaptureGroupFilterFactory).tp_dict, "class_", make_descriptor(PatternCaptureGroupFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PatternCaptureGroupFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_PatternCaptureGroupFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PatternCaptureGroupFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PatternCaptureGroupFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PatternCaptureGroupFilterFactory::initializeClass, 1)))
              return NULL;
            return t_PatternCaptureGroupFilterFactory::wrap_Object(PatternCaptureGroupFilterFactory(((t_PatternCaptureGroupFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_PatternCaptureGroupFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PatternCaptureGroupFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PatternCaptureGroupFilterFactory_init_(t_PatternCaptureGroupFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            PatternCaptureGroupFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = PatternCaptureGroupFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PatternCaptureGroupFilterFactory_create(t_PatternCaptureGroupFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::pattern::PatternCaptureGroupTokenFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::pattern::t_PatternCaptureGroupTokenFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(PatternCaptureGroupFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/classic/Token.h"
#include "java/io/Serializable.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace classic {

          ::java::lang::Class *Token::class$ = NULL;
          jmethodID *Token::mids$ = NULL;
          jfieldID *Token::fids$ = NULL;
          bool Token::live$ = false;

          jclass Token::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/classic/Token");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
              mids$[mid_init$_d40a4f2e] = env->getMethodID(cls, "<init>", "(ILjava/lang/String;)V");
              mids$[mid_getValue_846352c3] = env->getMethodID(cls, "getValue", "()Ljava/lang/Object;");
              mids$[mid_newToken_61c98f04] = env->getStaticMethodID(cls, "newToken", "(I)Lorg/apache/lucene/queryparser/classic/Token;");
              mids$[mid_newToken_73220176] = env->getStaticMethodID(cls, "newToken", "(ILjava/lang/String;)Lorg/apache/lucene/queryparser/classic/Token;");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              fids$ = new jfieldID[max_fid];
              fids$[fid_beginColumn] = env->getFieldID(cls, "beginColumn", "I");
              fids$[fid_beginLine] = env->getFieldID(cls, "beginLine", "I");
              fids$[fid_endColumn] = env->getFieldID(cls, "endColumn", "I");
              fids$[fid_endLine] = env->getFieldID(cls, "endLine", "I");
              fids$[fid_image] = env->getFieldID(cls, "image", "Ljava/lang/String;");
              fids$[fid_kind] = env->getFieldID(cls, "kind", "I");
              fids$[fid_next] = env->getFieldID(cls, "next", "Lorg/apache/lucene/queryparser/classic/Token;");
              fids$[fid_specialToken] = env->getFieldID(cls, "specialToken", "Lorg/apache/lucene/queryparser/classic/Token;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Token::Token() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          Token::Token(jint a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

          Token::Token(jint a0, const ::java::lang::String & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_d40a4f2e, a0, a1.this$)) {}

          ::java::lang::Object Token::getValue() const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_getValue_846352c3]));
          }

          Token Token::newToken(jint a0)
          {
            jclass cls = env->getClass(initializeClass);
            return Token(env->callStaticObjectMethod(cls, mids$[mid_newToken_61c98f04], a0));
          }

          Token Token::newToken(jint a0, const ::java::lang::String & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return Token(env->callStaticObjectMethod(cls, mids$[mid_newToken_73220176], a0, a1.this$));
          }

          ::java::lang::String Token::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }

          jint Token::_get_beginColumn() const
          {
            return env->getIntField(this$, fids$[fid_beginColumn]);
          }

          void Token::_set_beginColumn(jint a0) const
          {
            env->setIntField(this$, fids$[fid_beginColumn], a0);
          }

          jint Token::_get_beginLine() const
          {
            return env->getIntField(this$, fids$[fid_beginLine]);
          }

          void Token::_set_beginLine(jint a0) const
          {
            env->setIntField(this$, fids$[fid_beginLine], a0);
          }

          jint Token::_get_endColumn() const
          {
            return env->getIntField(this$, fids$[fid_endColumn]);
          }

          void Token::_set_endColumn(jint a0) const
          {
            env->setIntField(this$, fids$[fid_endColumn], a0);
          }

          jint Token::_get_endLine() const
          {
            return env->getIntField(this$, fids$[fid_endLine]);
          }

          void Token::_set_endLine(jint a0) const
          {
            env->setIntField(this$, fids$[fid_endLine], a0);
          }

          ::java::lang::String Token::_get_image() const
          {
            return ::java::lang::String(env->getObjectField(this$, fids$[fid_image]));
          }

          void Token::_set_image(const ::java::lang::String & a0) const
          {
            env->setObjectField(this$, fids$[fid_image], a0.this$);
          }

          jint Token::_get_kind() const
          {
            return env->getIntField(this$, fids$[fid_kind]);
          }

          void Token::_set_kind(jint a0) const
          {
            env->setIntField(this$, fids$[fid_kind], a0);
          }

          Token Token::_get_next() const
          {
            return Token(env->getObjectField(this$, fids$[fid_next]));
          }

          void Token::_set_next(const Token & a0) const
          {
            env->setObjectField(this$, fids$[fid_next], a0.this$);
          }

          Token Token::_get_specialToken() const
          {
            return Token(env->getObjectField(this$, fids$[fid_specialToken]));
          }

          void Token::_set_specialToken(const Token & a0) const
          {
            env->setObjectField(this$, fids$[fid_specialToken], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace classic {
          static PyObject *t_Token_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Token_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Token_init_(t_Token *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Token_getValue(t_Token *self);
          static PyObject *t_Token_newToken(PyTypeObject *type, PyObject *args);
          static PyObject *t_Token_toString(t_Token *self, PyObject *args);
          static PyObject *t_Token_get__beginColumn(t_Token *self, void *data);
          static int t_Token_set__beginColumn(t_Token *self, PyObject *arg, void *data);
          static PyObject *t_Token_get__beginLine(t_Token *self, void *data);
          static int t_Token_set__beginLine(t_Token *self, PyObject *arg, void *data);
          static PyObject *t_Token_get__endColumn(t_Token *self, void *data);
          static int t_Token_set__endColumn(t_Token *self, PyObject *arg, void *data);
          static PyObject *t_Token_get__endLine(t_Token *self, void *data);
          static int t_Token_set__endLine(t_Token *self, PyObject *arg, void *data);
          static PyObject *t_Token_get__image(t_Token *self, void *data);
          static int t_Token_set__image(t_Token *self, PyObject *arg, void *data);
          static PyObject *t_Token_get__kind(t_Token *self, void *data);
          static int t_Token_set__kind(t_Token *self, PyObject *arg, void *data);
          static PyObject *t_Token_get__next(t_Token *self, void *data);
          static int t_Token_set__next(t_Token *self, PyObject *arg, void *data);
          static PyObject *t_Token_get__specialToken(t_Token *self, void *data);
          static int t_Token_set__specialToken(t_Token *self, PyObject *arg, void *data);

          static PyObject *t_Token_get__value(t_Token *self, void *data);
          static PyGetSetDef t_Token__fields_[] = {
            DECLARE_GETSET_FIELD(t_Token, beginColumn),
            DECLARE_GETSET_FIELD(t_Token, beginLine),
            DECLARE_GETSET_FIELD(t_Token, endColumn),
            DECLARE_GETSET_FIELD(t_Token, endLine),
            DECLARE_GETSET_FIELD(t_Token, image),
            DECLARE_GETSET_FIELD(t_Token, kind),
            DECLARE_GETSET_FIELD(t_Token, next),
            DECLARE_GETSET_FIELD(t_Token, specialToken),
            DECLARE_GET_FIELD(t_Token, value),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Token__methods_[] = {
            DECLARE_METHOD(t_Token, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Token, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Token, getValue, METH_NOARGS),
            DECLARE_METHOD(t_Token, newToken, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_Token, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Token, t_Token, ::java::lang::Object, Token, t_Token_init_, 0, 0, t_Token__fields_, 0, 0);

          void t_Token::install(PyObject *module)
          {
            installType(&PY_TYPE(Token), module, "Token", 0);
          }

          void t_Token::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Token).tp_dict, "class_", make_descriptor(Token::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Token).tp_dict, "wrapfn_", make_descriptor(t_Token::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Token).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Token_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Token::initializeClass, 1)))
              return NULL;
            return t_Token::wrap_Object(Token(((t_Token *) arg)->object.this$));
          }
          static PyObject *t_Token_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Token::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Token_init_(t_Token *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                Token object((jobject) NULL);

                INT_CALL(object = Token());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                jint a0;
                Token object((jobject) NULL);

                if (!parseArgs(args, "I", &a0))
                {
                  INT_CALL(object = Token(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                jint a0;
                ::java::lang::String a1((jobject) NULL);
                Token object((jobject) NULL);

                if (!parseArgs(args, "Is", &a0, &a1))
                {
                  INT_CALL(object = Token(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_Token_getValue(t_Token *self)
          {
            ::java::lang::Object result((jobject) NULL);
            OBJ_CALL(result = self->object.getValue());
            return ::java::lang::t_Object::wrap_Object(result);
          }

          static PyObject *t_Token_newToken(PyTypeObject *type, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                jint a0;
                Token result((jobject) NULL);

                if (!parseArgs(args, "I", &a0))
                {
                  OBJ_CALL(result = ::org::apache::lucene::queryparser::classic::Token::newToken(a0));
                  return t_Token::wrap_Object(result);
                }
              }
              break;
             case 2:
              {
                jint a0;
                ::java::lang::String a1((jobject) NULL);
                Token result((jobject) NULL);

                if (!parseArgs(args, "Is", &a0, &a1))
                {
                  OBJ_CALL(result = ::org::apache::lucene::queryparser::classic::Token::newToken(a0, a1));
                  return t_Token::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError(type, "newToken", args);
            return NULL;
          }

          static PyObject *t_Token_toString(t_Token *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(Token), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_Token_get__beginColumn(t_Token *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object._get_beginColumn());
            return PyInt_FromLong((long) value);
          }
          static int t_Token_set__beginColumn(t_Token *self, PyObject *arg, void *data)
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object._set_beginColumn(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "beginColumn", arg);
            return -1;
          }

          static PyObject *t_Token_get__beginLine(t_Token *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object._get_beginLine());
            return PyInt_FromLong((long) value);
          }
          static int t_Token_set__beginLine(t_Token *self, PyObject *arg, void *data)
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object._set_beginLine(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "beginLine", arg);
            return -1;
          }

          static PyObject *t_Token_get__endColumn(t_Token *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object._get_endColumn());
            return PyInt_FromLong((long) value);
          }
          static int t_Token_set__endColumn(t_Token *self, PyObject *arg, void *data)
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object._set_endColumn(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "endColumn", arg);
            return -1;
          }

          static PyObject *t_Token_get__endLine(t_Token *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object._get_endLine());
            return PyInt_FromLong((long) value);
          }
          static int t_Token_set__endLine(t_Token *self, PyObject *arg, void *data)
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object._set_endLine(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "endLine", arg);
            return -1;
          }

          static PyObject *t_Token_get__image(t_Token *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object._get_image());
            return j2p(value);
          }
          static int t_Token_set__image(t_Token *self, PyObject *arg, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            if (!parseArg(arg, "s", &value))
            {
              INT_CALL(self->object._set_image(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "image", arg);
            return -1;
          }

          static PyObject *t_Token_get__kind(t_Token *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object._get_kind());
            return PyInt_FromLong((long) value);
          }
          static int t_Token_set__kind(t_Token *self, PyObject *arg, void *data)
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object._set_kind(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "kind", arg);
            return -1;
          }

          static PyObject *t_Token_get__next(t_Token *self, void *data)
          {
            Token value((jobject) NULL);
            OBJ_CALL(value = self->object._get_next());
            return t_Token::wrap_Object(value);
          }
          static int t_Token_set__next(t_Token *self, PyObject *arg, void *data)
          {
            Token value((jobject) NULL);
            if (!parseArg(arg, "k", Token::initializeClass, &value))
            {
              INT_CALL(self->object._set_next(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "next", arg);
            return -1;
          }

          static PyObject *t_Token_get__specialToken(t_Token *self, void *data)
          {
            Token value((jobject) NULL);
            OBJ_CALL(value = self->object._get_specialToken());
            return t_Token::wrap_Object(value);
          }
          static int t_Token_set__specialToken(t_Token *self, PyObject *arg, void *data)
          {
            Token value((jobject) NULL);
            if (!parseArg(arg, "k", Token::initializeClass, &value))
            {
              INT_CALL(self->object._set_specialToken(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "specialToken", arg);
            return -1;
          }

          static PyObject *t_Token_get__value(t_Token *self, void *data)
          {
            ::java::lang::Object value((jobject) NULL);
            OBJ_CALL(value = self->object.getValue());
            return ::java::lang::t_Object::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/fst/FST.h"
#include "org/apache/lucene/util/fst/FST$Arc.h"
#include "org/apache/lucene/util/fst/FST$INPUT_TYPE.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/fst/Outputs.h"
#include "org/apache/lucene/store/DataInput.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/Accountable.h"
#include "java/io/File.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "org/apache/lucene/util/fst/FST$BytesReader.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {

          ::java::lang::Class *FST::class$ = NULL;
          jmethodID *FST::mids$ = NULL;
          jfieldID *FST::fids$ = NULL;
          bool FST::live$ = false;
          jint FST::BIT_ARC_HAS_OUTPUT = (jint) 0;
          jint FST::DEFAULT_MAX_BLOCK_BITS = (jint) 0;
          jint FST::END_LABEL = (jint) 0;

          jclass FST::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/fst/FST");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_ed0a14d8] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/DataInput;Lorg/apache/lucene/util/fst/Outputs;)V");
              mids$[mid_init$_f8dfeffa] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/DataInput;Lorg/apache/lucene/util/fst/Outputs;I)V");
              mids$[mid_findTargetArc_12322441] = env->getMethodID(cls, "findTargetArc", "(ILorg/apache/lucene/util/fst/FST$Arc;Lorg/apache/lucene/util/fst/FST$Arc;Lorg/apache/lucene/util/fst/FST$BytesReader;)Lorg/apache/lucene/util/fst/FST$Arc;");
              mids$[mid_getArcCount_54c6a17a] = env->getMethodID(cls, "getArcCount", "()J");
              mids$[mid_getArcWithOutputCount_54c6a17a] = env->getMethodID(cls, "getArcWithOutputCount", "()J");
              mids$[mid_getBytesReader_92a3fc65] = env->getMethodID(cls, "getBytesReader", "()Lorg/apache/lucene/util/fst/FST$BytesReader;");
              mids$[mid_getEmptyOutput_846352c3] = env->getMethodID(cls, "getEmptyOutput", "()Ljava/lang/Object;");
              mids$[mid_getFirstArc_8c07e6cb] = env->getMethodID(cls, "getFirstArc", "(Lorg/apache/lucene/util/fst/FST$Arc;)Lorg/apache/lucene/util/fst/FST$Arc;");
              mids$[mid_getInputType_ae922153] = env->getMethodID(cls, "getInputType", "()Lorg/apache/lucene/util/fst/FST$INPUT_TYPE;");
              mids$[mid_getNodeCount_54c6a17a] = env->getMethodID(cls, "getNodeCount", "()J");
              mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");
              mids$[mid_read_fd85abc1] = env->getStaticMethodID(cls, "read", "(Ljava/io/File;Lorg/apache/lucene/util/fst/Outputs;)Lorg/apache/lucene/util/fst/FST;");
              mids$[mid_readFirstRealTargetArc_e3f5aada] = env->getMethodID(cls, "readFirstRealTargetArc", "(JLorg/apache/lucene/util/fst/FST$Arc;Lorg/apache/lucene/util/fst/FST$BytesReader;)Lorg/apache/lucene/util/fst/FST$Arc;");
              mids$[mid_readFirstTargetArc_ec7dd60b] = env->getMethodID(cls, "readFirstTargetArc", "(Lorg/apache/lucene/util/fst/FST$Arc;Lorg/apache/lucene/util/fst/FST$Arc;Lorg/apache/lucene/util/fst/FST$BytesReader;)Lorg/apache/lucene/util/fst/FST$Arc;");
              mids$[mid_readLabel_f5d6a54e] = env->getMethodID(cls, "readLabel", "(Lorg/apache/lucene/store/DataInput;)I");
              mids$[mid_readLastTargetArc_ec7dd60b] = env->getMethodID(cls, "readLastTargetArc", "(Lorg/apache/lucene/util/fst/FST$Arc;Lorg/apache/lucene/util/fst/FST$Arc;Lorg/apache/lucene/util/fst/FST$BytesReader;)Lorg/apache/lucene/util/fst/FST$Arc;");
              mids$[mid_readNextArc_1deb4fc1] = env->getMethodID(cls, "readNextArc", "(Lorg/apache/lucene/util/fst/FST$Arc;Lorg/apache/lucene/util/fst/FST$BytesReader;)Lorg/apache/lucene/util/fst/FST$Arc;");
              mids$[mid_readNextArcLabel_614f52e1] = env->getMethodID(cls, "readNextArcLabel", "(Lorg/apache/lucene/util/fst/FST$Arc;Lorg/apache/lucene/util/fst/FST$BytesReader;)I");
              mids$[mid_readNextRealArc_1deb4fc1] = env->getMethodID(cls, "readNextRealArc", "(Lorg/apache/lucene/util/fst/FST$Arc;Lorg/apache/lucene/util/fst/FST$BytesReader;)Lorg/apache/lucene/util/fst/FST$Arc;");
              mids$[mid_readRootArcs_a2b77668] = env->getMethodID(cls, "readRootArcs", "([Lorg/apache/lucene/util/fst/FST$Arc;)V");
              mids$[mid_save_27875f57] = env->getMethodID(cls, "save", "(Lorg/apache/lucene/store/DataOutput;)V");
              mids$[mid_save_c3dacf57] = env->getMethodID(cls, "save", "(Ljava/io/File;)V");
              mids$[mid_targetHasArcs_0c8cc6dc] = env->getStaticMethodID(cls, "targetHasArcs", "(Lorg/apache/lucene/util/fst/FST$Arc;)Z");

              fids$ = new jfieldID[max_fid];
              fids$[fid_arcCount] = env->getFieldID(cls, "arcCount", "J");
              fids$[fid_arcWithOutputCount] = env->getFieldID(cls, "arcWithOutputCount", "J");
              fids$[fid_inputType] = env->getFieldID(cls, "inputType", "Lorg/apache/lucene/util/fst/FST$INPUT_TYPE;");
              fids$[fid_nodeCount] = env->getFieldID(cls, "nodeCount", "J");
              fids$[fid_outputs] = env->getFieldID(cls, "outputs", "Lorg/apache/lucene/util/fst/Outputs;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              BIT_ARC_HAS_OUTPUT = env->getStaticIntField(cls, "BIT_ARC_HAS_OUTPUT");
              DEFAULT_MAX_BLOCK_BITS = env->getStaticIntField(cls, "DEFAULT_MAX_BLOCK_BITS");
              END_LABEL = env->getStaticIntField(cls, "END_LABEL");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FST::FST(const ::org::apache::lucene::store::DataInput & a0, const ::org::apache::lucene::util::fst::Outputs & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_ed0a14d8, a0.this$, a1.this$)) {}

          FST::FST(const ::org::apache::lucene::store::DataInput & a0, const ::org::apache::lucene::util::fst::Outputs & a1, jint a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f8dfeffa, a0.this$, a1.this$, a2)) {}

          ::org::apache::lucene::util::fst::FST$Arc FST::findTargetArc(jint a0, const ::org::apache::lucene::util::fst::FST$Arc & a1, const ::org::apache::lucene::util::fst::FST$Arc & a2, const ::org::apache::lucene::util::fst::FST$BytesReader & a3) const
          {
            return ::org::apache::lucene::util::fst::FST$Arc(env->callObjectMethod(this$, mids$[mid_findTargetArc_12322441], a0, a1.this$, a2.this$, a3.this$));
          }

          jlong FST::getArcCount() const
          {
            return env->callLongMethod(this$, mids$[mid_getArcCount_54c6a17a]);
          }

          jlong FST::getArcWithOutputCount() const
          {
            return env->callLongMethod(this$, mids$[mid_getArcWithOutputCount_54c6a17a]);
          }

          ::org::apache::lucene::util::fst::FST$BytesReader FST::getBytesReader() const
          {
            return ::org::apache::lucene::util::fst::FST$BytesReader(env->callObjectMethod(this$, mids$[mid_getBytesReader_92a3fc65]));
          }

          ::java::lang::Object FST::getEmptyOutput() const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_getEmptyOutput_846352c3]));
          }

          ::org::apache::lucene::util::fst::FST$Arc FST::getFirstArc(const ::org::apache::lucene::util::fst::FST$Arc & a0) const
          {
            return ::org::apache::lucene::util::fst::FST$Arc(env->callObjectMethod(this$, mids$[mid_getFirstArc_8c07e6cb], a0.this$));
          }

          ::org::apache::lucene::util::fst::FST$INPUT_TYPE FST::getInputType() const
          {
            return ::org::apache::lucene::util::fst::FST$INPUT_TYPE(env->callObjectMethod(this$, mids$[mid_getInputType_ae922153]));
          }

          jlong FST::getNodeCount() const
          {
            return env->callLongMethod(this$, mids$[mid_getNodeCount_54c6a17a]);
          }

          jlong FST::ramBytesUsed() const
          {
            return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
          }

          FST FST::read(const ::java::io::File & a0, const ::org::apache::lucene::util::fst::Outputs & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return FST(env->callStaticObjectMethod(cls, mids$[mid_read_fd85abc1], a0.this$, a1.this$));
          }

          ::org::apache::lucene::util::fst::FST$Arc FST::readFirstRealTargetArc(jlong a0, const ::org::apache::lucene::util::fst::FST$Arc & a1, const ::org::apache::lucene::util::fst::FST$BytesReader & a2) const
          {
            return ::org::apache::lucene::util::fst::FST$Arc(env->callObjectMethod(this$, mids$[mid_readFirstRealTargetArc_e3f5aada], a0, a1.this$, a2.this$));
          }

          ::org::apache::lucene::util::fst::FST$Arc FST::readFirstTargetArc(const ::org::apache::lucene::util::fst::FST$Arc & a0, const ::org::apache::lucene::util::fst::FST$Arc & a1, const ::org::apache::lucene::util::fst::FST$BytesReader & a2) const
          {
            return ::org::apache::lucene::util::fst::FST$Arc(env->callObjectMethod(this$, mids$[mid_readFirstTargetArc_ec7dd60b], a0.this$, a1.this$, a2.this$));
          }

          jint FST::readLabel(const ::org::apache::lucene::store::DataInput & a0) const
          {
            return env->callIntMethod(this$, mids$[mid_readLabel_f5d6a54e], a0.this$);
          }

          ::org::apache::lucene::util::fst::FST$Arc FST::readLastTargetArc(const ::org::apache::lucene::util::fst::FST$Arc & a0, const ::org::apache::lucene::util::fst::FST$Arc & a1, const ::org::apache::lucene::util::fst::FST$BytesReader & a2) const
          {
            return ::org::apache::lucene::util::fst::FST$Arc(env->callObjectMethod(this$, mids$[mid_readLastTargetArc_ec7dd60b], a0.this$, a1.this$, a2.this$));
          }

          ::org::apache::lucene::util::fst::FST$Arc FST::readNextArc(const ::org::apache::lucene::util::fst::FST$Arc & a0, const ::org::apache::lucene::util::fst::FST$BytesReader & a1) const
          {
            return ::org::apache::lucene::util::fst::FST$Arc(env->callObjectMethod(this$, mids$[mid_readNextArc_1deb4fc1], a0.this$, a1.this$));
          }

          jint FST::readNextArcLabel(const ::org::apache::lucene::util::fst::FST$Arc & a0, const ::org::apache::lucene::util::fst::FST$BytesReader & a1) const
          {
            return env->callIntMethod(this$, mids$[mid_readNextArcLabel_614f52e1], a0.this$, a1.this$);
          }

          ::org::apache::lucene::util::fst::FST$Arc FST::readNextRealArc(const ::org::apache::lucene::util::fst::FST$Arc & a0, const ::org::apache::lucene::util::fst::FST$BytesReader & a1) const
          {
            return ::org::apache::lucene::util::fst::FST$Arc(env->callObjectMethod(this$, mids$[mid_readNextRealArc_1deb4fc1], a0.this$, a1.this$));
          }

          void FST::readRootArcs(const JArray< ::org::apache::lucene::util::fst::FST$Arc > & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_readRootArcs_a2b77668], a0.this$);
          }

          void FST::save(const ::org::apache::lucene::store::DataOutput & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_save_27875f57], a0.this$);
          }

          void FST::save(const ::java::io::File & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_save_c3dacf57], a0.this$);
          }

          jboolean FST::targetHasArcs(const ::org::apache::lucene::util::fst::FST$Arc & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticBooleanMethod(cls, mids$[mid_targetHasArcs_0c8cc6dc], a0.this$);
          }

          jlong FST::_get_arcCount() const
          {
            return env->getLongField(this$, fids$[fid_arcCount]);
          }

          void FST::_set_arcCount(jlong a0) const
          {
            env->setLongField(this$, fids$[fid_arcCount], a0);
          }

          jlong FST::_get_arcWithOutputCount() const
          {
            return env->getLongField(this$, fids$[fid_arcWithOutputCount]);
          }

          void FST::_set_arcWithOutputCount(jlong a0) const
          {
            env->setLongField(this$, fids$[fid_arcWithOutputCount], a0);
          }

          ::org::apache::lucene::util::fst::FST$INPUT_TYPE FST::_get_inputType() const
          {
            return ::org::apache::lucene::util::fst::FST$INPUT_TYPE(env->getObjectField(this$, fids$[fid_inputType]));
          }

          jlong FST::_get_nodeCount() const
          {
            return env->getLongField(this$, fids$[fid_nodeCount]);
          }

          void FST::_set_nodeCount(jlong a0) const
          {
            env->setLongField(this$, fids$[fid_nodeCount], a0);
          }

          ::org::apache::lucene::util::fst::Outputs FST::_get_outputs() const
          {
            return ::org::apache::lucene::util::fst::Outputs(env->getObjectField(this$, fids$[fid_outputs]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {
          static PyObject *t_FST_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FST_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FST_of_(t_FST *self, PyObject *args);
          static int t_FST_init_(t_FST *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FST_findTargetArc(t_FST *self, PyObject *args);
          static PyObject *t_FST_getArcCount(t_FST *self);
          static PyObject *t_FST_getArcWithOutputCount(t_FST *self);
          static PyObject *t_FST_getBytesReader(t_FST *self);
          static PyObject *t_FST_getEmptyOutput(t_FST *self);
          static PyObject *t_FST_getFirstArc(t_FST *self, PyObject *arg);
          static PyObject *t_FST_getInputType(t_FST *self);
          static PyObject *t_FST_getNodeCount(t_FST *self);
          static PyObject *t_FST_ramBytesUsed(t_FST *self);
          static PyObject *t_FST_read(PyTypeObject *type, PyObject *args);
          static PyObject *t_FST_readFirstRealTargetArc(t_FST *self, PyObject *args);
          static PyObject *t_FST_readFirstTargetArc(t_FST *self, PyObject *args);
          static PyObject *t_FST_readLabel(t_FST *self, PyObject *arg);
          static PyObject *t_FST_readLastTargetArc(t_FST *self, PyObject *args);
          static PyObject *t_FST_readNextArc(t_FST *self, PyObject *args);
          static PyObject *t_FST_readNextArcLabel(t_FST *self, PyObject *args);
          static PyObject *t_FST_readNextRealArc(t_FST *self, PyObject *args);
          static PyObject *t_FST_readRootArcs(t_FST *self, PyObject *arg);
          static PyObject *t_FST_save(t_FST *self, PyObject *args);
          static PyObject *t_FST_targetHasArcs(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FST_get__outputs(t_FST *self, void *data);

          static PyObject *t_FST_get__arcCount(t_FST *self, void *data);
          static PyObject *t_FST_get__arcWithOutputCount(t_FST *self, void *data);
          static PyObject *t_FST_get__bytesReader(t_FST *self, void *data);
          static PyObject *t_FST_get__emptyOutput(t_FST *self, void *data);
          static PyObject *t_FST_get__inputType(t_FST *self, void *data);
          static PyObject *t_FST_get__nodeCount(t_FST *self, void *data);
          static PyObject *t_FST_get__parameters_(t_FST *self, void *data);
          static PyGetSetDef t_FST__fields_[] = {
            DECLARE_GET_FIELD(t_FST, outputs),
            DECLARE_GET_FIELD(t_FST, arcCount),
            DECLARE_GET_FIELD(t_FST, arcWithOutputCount),
            DECLARE_GET_FIELD(t_FST, bytesReader),
            DECLARE_GET_FIELD(t_FST, emptyOutput),
            DECLARE_GET_FIELD(t_FST, inputType),
            DECLARE_GET_FIELD(t_FST, nodeCount),
            DECLARE_GET_FIELD(t_FST, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_FST__methods_[] = {
            DECLARE_METHOD(t_FST, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FST, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FST, of_, METH_VARARGS),
            DECLARE_METHOD(t_FST, findTargetArc, METH_VARARGS),
            DECLARE_METHOD(t_FST, getArcCount, METH_NOARGS),
            DECLARE_METHOD(t_FST, getArcWithOutputCount, METH_NOARGS),
            DECLARE_METHOD(t_FST, getBytesReader, METH_NOARGS),
            DECLARE_METHOD(t_FST, getEmptyOutput, METH_NOARGS),
            DECLARE_METHOD(t_FST, getFirstArc, METH_O),
            DECLARE_METHOD(t_FST, getInputType, METH_NOARGS),
            DECLARE_METHOD(t_FST, getNodeCount, METH_NOARGS),
            DECLARE_METHOD(t_FST, ramBytesUsed, METH_NOARGS),
            DECLARE_METHOD(t_FST, read, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_FST, readFirstRealTargetArc, METH_VARARGS),
            DECLARE_METHOD(t_FST, readFirstTargetArc, METH_VARARGS),
            DECLARE_METHOD(t_FST, readLabel, METH_O),
            DECLARE_METHOD(t_FST, readLastTargetArc, METH_VARARGS),
            DECLARE_METHOD(t_FST, readNextArc, METH_VARARGS),
            DECLARE_METHOD(t_FST, readNextArcLabel, METH_VARARGS),
            DECLARE_METHOD(t_FST, readNextRealArc, METH_VARARGS),
            DECLARE_METHOD(t_FST, readRootArcs, METH_O),
            DECLARE_METHOD(t_FST, save, METH_VARARGS),
            DECLARE_METHOD(t_FST, targetHasArcs, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FST, t_FST, ::java::lang::Object, FST, t_FST_init_, 0, 0, t_FST__fields_, 0, 0);
          PyObject *t_FST::wrap_Object(const FST& object, PyTypeObject *p0)
          {
            PyObject *obj = t_FST::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_FST *self = (t_FST *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_FST::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_FST::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_FST *self = (t_FST *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_FST::install(PyObject *module)
          {
            installType(&PY_TYPE(FST), module, "FST", 0);
            PyDict_SetItemString(PY_TYPE(FST).tp_dict, "BytesReader", make_descriptor(&PY_TYPE(FST$BytesReader)));
            PyDict_SetItemString(PY_TYPE(FST).tp_dict, "Arc", make_descriptor(&PY_TYPE(FST$Arc)));
            PyDict_SetItemString(PY_TYPE(FST).tp_dict, "INPUT_TYPE", make_descriptor(&PY_TYPE(FST$INPUT_TYPE)));
          }

          void t_FST::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FST).tp_dict, "class_", make_descriptor(FST::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FST).tp_dict, "wrapfn_", make_descriptor(t_FST::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FST).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(FST::initializeClass);
            PyDict_SetItemString(PY_TYPE(FST).tp_dict, "BIT_ARC_HAS_OUTPUT", make_descriptor(FST::BIT_ARC_HAS_OUTPUT));
            PyDict_SetItemString(PY_TYPE(FST).tp_dict, "DEFAULT_MAX_BLOCK_BITS", make_descriptor(FST::DEFAULT_MAX_BLOCK_BITS));
            PyDict_SetItemString(PY_TYPE(FST).tp_dict, "END_LABEL", make_descriptor(FST::END_LABEL));
          }

          static PyObject *t_FST_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FST::initializeClass, 1)))
              return NULL;
            return t_FST::wrap_Object(FST(((t_FST *) arg)->object.this$));
          }
          static PyObject *t_FST_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FST::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_FST_of_(t_FST *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_FST_init_(t_FST *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::store::DataInput a0((jobject) NULL);
                ::org::apache::lucene::util::fst::Outputs a1((jobject) NULL);
                PyTypeObject **p1;
                FST object((jobject) NULL);

                if (!parseArgs(args, "kK", ::org::apache::lucene::store::DataInput::initializeClass, ::org::apache::lucene::util::fst::Outputs::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::util::fst::t_Outputs::parameters_))
                {
                  INT_CALL(object = FST(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::store::DataInput a0((jobject) NULL);
                ::org::apache::lucene::util::fst::Outputs a1((jobject) NULL);
                PyTypeObject **p1;
                jint a2;
                FST object((jobject) NULL);

                if (!parseArgs(args, "kKI", ::org::apache::lucene::store::DataInput::initializeClass, ::org::apache::lucene::util::fst::Outputs::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::util::fst::t_Outputs::parameters_, &a2))
                {
                  INT_CALL(object = FST(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_FST_findTargetArc(t_FST *self, PyObject *args)
          {
            jint a0;
            ::org::apache::lucene::util::fst::FST$Arc a1((jobject) NULL);
            PyTypeObject **p1;
            ::org::apache::lucene::util::fst::FST$Arc a2((jobject) NULL);
            PyTypeObject **p2;
            ::org::apache::lucene::util::fst::FST$BytesReader a3((jobject) NULL);
            PyTypeObject **p3;
            ::org::apache::lucene::util::fst::FST$Arc result((jobject) NULL);

            if (!parseArgs(args, "IKKK", ::org::apache::lucene::util::fst::FST$Arc::initializeClass, ::org::apache::lucene::util::fst::FST$Arc::initializeClass, ::org::apache::lucene::util::fst::FST$BytesReader::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::util::fst::t_FST$Arc::parameters_, &a2, &p2, ::org::apache::lucene::util::fst::t_FST$Arc::parameters_, &a3, &p3, ::org::apache::lucene::util::fst::t_FST$BytesReader::parameters_))
            {
              OBJ_CALL(result = self->object.findTargetArc(a0, a1, a2, a3));
              return ::org::apache::lucene::util::fst::t_FST$Arc::wrap_Object(result, self->parameters[0]);
            }

            PyErr_SetArgsError((PyObject *) self, "findTargetArc", args);
            return NULL;
          }

          static PyObject *t_FST_getArcCount(t_FST *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.getArcCount());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_FST_getArcWithOutputCount(t_FST *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.getArcWithOutputCount());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_FST_getBytesReader(t_FST *self)
          {
            ::org::apache::lucene::util::fst::FST$BytesReader result((jobject) NULL);
            OBJ_CALL(result = self->object.getBytesReader());
            return ::org::apache::lucene::util::fst::t_FST$BytesReader::wrap_Object(result);
          }

          static PyObject *t_FST_getEmptyOutput(t_FST *self)
          {
            ::java::lang::Object result((jobject) NULL);
            OBJ_CALL(result = self->object.getEmptyOutput());
            return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
          }

          static PyObject *t_FST_getFirstArc(t_FST *self, PyObject *arg)
          {
            ::org::apache::lucene::util::fst::FST$Arc a0((jobject) NULL);
            PyTypeObject **p0;
            ::org::apache::lucene::util::fst::FST$Arc result((jobject) NULL);

            if (!parseArg(arg, "K", ::org::apache::lucene::util::fst::FST$Arc::initializeClass, &a0, &p0, ::org::apache::lucene::util::fst::t_FST$Arc::parameters_))
            {
              OBJ_CALL(result = self->object.getFirstArc(a0));
              return ::org::apache::lucene::util::fst::t_FST$Arc::wrap_Object(result, self->parameters[0]);
            }

            PyErr_SetArgsError((PyObject *) self, "getFirstArc", arg);
            return NULL;
          }

          static PyObject *t_FST_getInputType(t_FST *self)
          {
            ::org::apache::lucene::util::fst::FST$INPUT_TYPE result((jobject) NULL);
            OBJ_CALL(result = self->object.getInputType());
            return ::org::apache::lucene::util::fst::t_FST$INPUT_TYPE::wrap_Object(result);
          }

          static PyObject *t_FST_getNodeCount(t_FST *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.getNodeCount());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_FST_ramBytesUsed(t_FST *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.ramBytesUsed());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_FST_read(PyTypeObject *type, PyObject *args)
          {
            ::java::io::File a0((jobject) NULL);
            ::org::apache::lucene::util::fst::Outputs a1((jobject) NULL);
            PyTypeObject **p1;
            FST result((jobject) NULL);

            if (!parseArgs(args, "kK", ::java::io::File::initializeClass, ::org::apache::lucene::util::fst::Outputs::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::util::fst::t_Outputs::parameters_))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::fst::FST::read(a0, a1));
              return t_FST::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "read", args);
            return NULL;
          }

          static PyObject *t_FST_readFirstRealTargetArc(t_FST *self, PyObject *args)
          {
            jlong a0;
            ::org::apache::lucene::util::fst::FST$Arc a1((jobject) NULL);
            PyTypeObject **p1;
            ::org::apache::lucene::util::fst::FST$BytesReader a2((jobject) NULL);
            PyTypeObject **p2;
            ::org::apache::lucene::util::fst::FST$Arc result((jobject) NULL);

            if (!parseArgs(args, "JKK", ::org::apache::lucene::util::fst::FST$Arc::initializeClass, ::org::apache::lucene::util::fst::FST$BytesReader::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::util::fst::t_FST$Arc::parameters_, &a2, &p2, ::org::apache::lucene::util::fst::t_FST$BytesReader::parameters_))
            {
              OBJ_CALL(result = self->object.readFirstRealTargetArc(a0, a1, a2));
              return ::org::apache::lucene::util::fst::t_FST$Arc::wrap_Object(result, self->parameters[0]);
            }

            PyErr_SetArgsError((PyObject *) self, "readFirstRealTargetArc", args);
            return NULL;
          }

          static PyObject *t_FST_readFirstTargetArc(t_FST *self, PyObject *args)
          {
            ::org::apache::lucene::util::fst::FST$Arc a0((jobject) NULL);
            PyTypeObject **p0;
            ::org::apache::lucene::util::fst::FST$Arc a1((jobject) NULL);
            PyTypeObject **p1;
            ::org::apache::lucene::util::fst::FST$BytesReader a2((jobject) NULL);
            PyTypeObject **p2;
            ::org::apache::lucene::util::fst::FST$Arc result((jobject) NULL);

            if (!parseArgs(args, "KKK", ::org::apache::lucene::util::fst::FST$Arc::initializeClass, ::org::apache::lucene::util::fst::FST$Arc::initializeClass, ::org::apache::lucene::util::fst::FST$BytesReader::initializeClass, &a0, &p0, ::org::apache::lucene::util::fst::t_FST$Arc::parameters_, &a1, &p1, ::org::apache::lucene::util::fst::t_FST$Arc::parameters_, &a2, &p2, ::org::apache::lucene::util::fst::t_FST$BytesReader::parameters_))
            {
              OBJ_CALL(result = self->object.readFirstTargetArc(a0, a1, a2));
              return ::org::apache::lucene::util::fst::t_FST$Arc::wrap_Object(result, self->parameters[0]);
            }

            PyErr_SetArgsError((PyObject *) self, "readFirstTargetArc", args);
            return NULL;
          }

          static PyObject *t_FST_readLabel(t_FST *self, PyObject *arg)
          {
            ::org::apache::lucene::store::DataInput a0((jobject) NULL);
            jint result;

            if (!parseArg(arg, "k", ::org::apache::lucene::store::DataInput::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.readLabel(a0));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "readLabel", arg);
            return NULL;
          }

          static PyObject *t_FST_readLastTargetArc(t_FST *self, PyObject *args)
          {
            ::org::apache::lucene::util::fst::FST$Arc a0((jobject) NULL);
            PyTypeObject **p0;
            ::org::apache::lucene::util::fst::FST$Arc a1((jobject) NULL);
            PyTypeObject **p1;
            ::org::apache::lucene::util::fst::FST$BytesReader a2((jobject) NULL);
            PyTypeObject **p2;
            ::org::apache::lucene::util::fst::FST$Arc result((jobject) NULL);

            if (!parseArgs(args, "KKK", ::org::apache::lucene::util::fst::FST$Arc::initializeClass, ::org::apache::lucene::util::fst::FST$Arc::initializeClass, ::org::apache::lucene::util::fst::FST$BytesReader::initializeClass, &a0, &p0, ::org::apache::lucene::util::fst::t_FST$Arc::parameters_, &a1, &p1, ::org::apache::lucene::util::fst::t_FST$Arc::parameters_, &a2, &p2, ::org::apache::lucene::util::fst::t_FST$BytesReader::parameters_))
            {
              OBJ_CALL(result = self->object.readLastTargetArc(a0, a1, a2));
              return ::org::apache::lucene::util::fst::t_FST$Arc::wrap_Object(result, self->parameters[0]);
            }

            PyErr_SetArgsError((PyObject *) self, "readLastTargetArc", args);
            return NULL;
          }

          static PyObject *t_FST_readNextArc(t_FST *self, PyObject *args)
          {
            ::org::apache::lucene::util::fst::FST$Arc a0((jobject) NULL);
            PyTypeObject **p0;
            ::org::apache::lucene::util::fst::FST$BytesReader a1((jobject) NULL);
            PyTypeObject **p1;
            ::org::apache::lucene::util::fst::FST$Arc result((jobject) NULL);

            if (!parseArgs(args, "KK", ::org::apache::lucene::util::fst::FST$Arc::initializeClass, ::org::apache::lucene::util::fst::FST$BytesReader::initializeClass, &a0, &p0, ::org::apache::lucene::util::fst::t_FST$Arc::parameters_, &a1, &p1, ::org::apache::lucene::util::fst::t_FST$BytesReader::parameters_))
            {
              OBJ_CALL(result = self->object.readNextArc(a0, a1));
              return ::org::apache::lucene::util::fst::t_FST$Arc::wrap_Object(result, self->parameters[0]);
            }

            PyErr_SetArgsError((PyObject *) self, "readNextArc", args);
            return NULL;
          }

          static PyObject *t_FST_readNextArcLabel(t_FST *self, PyObject *args)
          {
            ::org::apache::lucene::util::fst::FST$Arc a0((jobject) NULL);
            PyTypeObject **p0;
            ::org::apache::lucene::util::fst::FST$BytesReader a1((jobject) NULL);
            PyTypeObject **p1;
            jint result;

            if (!parseArgs(args, "KK", ::org::apache::lucene::util::fst::FST$Arc::initializeClass, ::org::apache::lucene::util::fst::FST$BytesReader::initializeClass, &a0, &p0, ::org::apache::lucene::util::fst::t_FST$Arc::parameters_, &a1, &p1, ::org::apache::lucene::util::fst::t_FST$BytesReader::parameters_))
            {
              OBJ_CALL(result = self->object.readNextArcLabel(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "readNextArcLabel", args);
            return NULL;
          }

          static PyObject *t_FST_readNextRealArc(t_FST *self, PyObject *args)
          {
            ::org::apache::lucene::util::fst::FST$Arc a0((jobject) NULL);
            PyTypeObject **p0;
            ::org::apache::lucene::util::fst::FST$BytesReader a1((jobject) NULL);
            PyTypeObject **p1;
            ::org::apache::lucene::util::fst::FST$Arc result((jobject) NULL);

            if (!parseArgs(args, "KK", ::org::apache::lucene::util::fst::FST$Arc::initializeClass, ::org::apache::lucene::util::fst::FST$BytesReader::initializeClass, &a0, &p0, ::org::apache::lucene::util::fst::t_FST$Arc::parameters_, &a1, &p1, ::org::apache::lucene::util::fst::t_FST$BytesReader::parameters_))
            {
              OBJ_CALL(result = self->object.readNextRealArc(a0, a1));
              return ::org::apache::lucene::util::fst::t_FST$Arc::wrap_Object(result, self->parameters[0]);
            }

            PyErr_SetArgsError((PyObject *) self, "readNextRealArc", args);
            return NULL;
          }

          static PyObject *t_FST_readRootArcs(t_FST *self, PyObject *arg)
          {
            JArray< ::org::apache::lucene::util::fst::FST$Arc > a0((jobject) NULL);
            PyTypeObject **p0;

            if (!parseArg(arg, "[K", ::org::apache::lucene::util::fst::FST$Arc::initializeClass, &a0, &p0, ::org::apache::lucene::util::fst::t_FST$Arc::parameters_))
            {
              OBJ_CALL(self->object.readRootArcs(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "readRootArcs", arg);
            return NULL;
          }

          static PyObject *t_FST_save(t_FST *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::store::DataOutput a0((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::store::DataOutput::initializeClass, &a0))
                {
                  OBJ_CALL(self->object.save(a0));
                  Py_RETURN_NONE;
                }
              }
              {
                ::java::io::File a0((jobject) NULL);

                if (!parseArgs(args, "k", ::java::io::File::initializeClass, &a0))
                {
                  OBJ_CALL(self->object.save(a0));
                  Py_RETURN_NONE;
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "save", args);
            return NULL;
          }

          static PyObject *t_FST_targetHasArcs(PyTypeObject *type, PyObject *arg)
          {
            ::org::apache::lucene::util::fst::FST$Arc a0((jobject) NULL);
            PyTypeObject **p0;
            jboolean result;

            if (!parseArg(arg, "K", ::org::apache::lucene::util::fst::FST$Arc::initializeClass, &a0, &p0, ::org::apache::lucene::util::fst::t_FST$Arc::parameters_))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::fst::FST::targetHasArcs(a0));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError(type, "targetHasArcs", arg);
            return NULL;
          }
          static PyObject *t_FST_get__parameters_(t_FST *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_FST_get__outputs(t_FST *self, void *data)
          {
            ::org::apache::lucene::util::fst::Outputs value((jobject) NULL);
            OBJ_CALL(value = self->object._get_outputs());
            return ::org::apache::lucene::util::fst::t_Outputs::wrap_Object(value);
          }

          static PyObject *t_FST_get__arcCount(t_FST *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object.getArcCount());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }

          static PyObject *t_FST_get__arcWithOutputCount(t_FST *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object.getArcWithOutputCount());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }

          static PyObject *t_FST_get__bytesReader(t_FST *self, void *data)
          {
            ::org::apache::lucene::util::fst::FST$BytesReader value((jobject) NULL);
            OBJ_CALL(value = self->object.getBytesReader());
            return ::org::apache::lucene::util::fst::t_FST$BytesReader::wrap_Object(value);
          }

          static PyObject *t_FST_get__emptyOutput(t_FST *self, void *data)
          {
            ::java::lang::Object value((jobject) NULL);
            OBJ_CALL(value = self->object.getEmptyOutput());
            return ::java::lang::t_Object::wrap_Object(value);
          }

          static PyObject *t_FST_get__inputType(t_FST *self, void *data)
          {
            ::org::apache::lucene::util::fst::FST$INPUT_TYPE value((jobject) NULL);
            OBJ_CALL(value = self->object.getInputType());
            return ::org::apache::lucene::util::fst::t_FST$INPUT_TYPE::wrap_Object(value);
          }

          static PyObject *t_FST_get__nodeCount(t_FST *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object.getNodeCount());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/CodecUtil.h"
#include "org/apache/lucene/store/ChecksumIndexInput.h"
#include "org/apache/lucene/store/IndexOutput.h"
#include "org/apache/lucene/store/IndexInput.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "org/apache/lucene/store/DataInput.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {

        ::java::lang::Class *CodecUtil::class$ = NULL;
        jmethodID *CodecUtil::mids$ = NULL;
        bool CodecUtil::live$ = false;
        jint CodecUtil::CODEC_MAGIC = (jint) 0;
        jint CodecUtil::FOOTER_MAGIC = (jint) 0;

        jclass CodecUtil::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/CodecUtil");

            mids$ = new jmethodID[max_mid];
            mids$[mid_checkEOF_0441f0b2] = env->getStaticMethodID(cls, "checkEOF", "(Lorg/apache/lucene/store/IndexInput;)V");
            mids$[mid_checkFooter_f5e506b9] = env->getStaticMethodID(cls, "checkFooter", "(Lorg/apache/lucene/store/ChecksumIndexInput;)J");
            mids$[mid_checkHeader_128b127c] = env->getStaticMethodID(cls, "checkHeader", "(Lorg/apache/lucene/store/DataInput;Ljava/lang/String;II)I");
            mids$[mid_checkHeaderNoMagic_128b127c] = env->getStaticMethodID(cls, "checkHeaderNoMagic", "(Lorg/apache/lucene/store/DataInput;Ljava/lang/String;II)I");
            mids$[mid_checksumEntireFile_0441f0ae] = env->getStaticMethodID(cls, "checksumEntireFile", "(Lorg/apache/lucene/store/IndexInput;)J");
            mids$[mid_footerLength_54c6a179] = env->getStaticMethodID(cls, "footerLength", "()I");
            mids$[mid_headerLength_5fdc3f57] = env->getStaticMethodID(cls, "headerLength", "(Ljava/lang/String;)I");
            mids$[mid_retrieveChecksum_0441f0ae] = env->getStaticMethodID(cls, "retrieveChecksum", "(Lorg/apache/lucene/store/IndexInput;)J");
            mids$[mid_writeFooter_faad620a] = env->getStaticMethodID(cls, "writeFooter", "(Lorg/apache/lucene/store/IndexOutput;)V");
            mids$[mid_writeHeader_6b5c1111] = env->getStaticMethodID(cls, "writeHeader", "(Lorg/apache/lucene/store/DataOutput;Ljava/lang/String;I)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            CODEC_MAGIC = env->getStaticIntField(cls, "CODEC_MAGIC");
            FOOTER_MAGIC = env->getStaticIntField(cls, "FOOTER_MAGIC");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void CodecUtil::checkEOF(const ::org::apache::lucene::store::IndexInput & a0)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_checkEOF_0441f0b2], a0.this$);
        }

        jlong CodecUtil::checkFooter(const ::org::apache::lucene::store::ChecksumIndexInput & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_checkFooter_f5e506b9], a0.this$);
        }

        jint CodecUtil::checkHeader(const ::org::apache::lucene::store::DataInput & a0, const ::java::lang::String & a1, jint a2, jint a3)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_checkHeader_128b127c], a0.this$, a1.this$, a2, a3);
        }

        jint CodecUtil::checkHeaderNoMagic(const ::org::apache::lucene::store::DataInput & a0, const ::java::lang::String & a1, jint a2, jint a3)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_checkHeaderNoMagic_128b127c], a0.this$, a1.this$, a2, a3);
        }

        jlong CodecUtil::checksumEntireFile(const ::org::apache::lucene::store::IndexInput & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_checksumEntireFile_0441f0ae], a0.this$);
        }

        jint CodecUtil::footerLength()
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_footerLength_54c6a179]);
        }

        jint CodecUtil::headerLength(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_headerLength_5fdc3f57], a0.this$);
        }

        jlong CodecUtil::retrieveChecksum(const ::org::apache::lucene::store::IndexInput & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_retrieveChecksum_0441f0ae], a0.this$);
        }

        void CodecUtil::writeFooter(const ::org::apache::lucene::store::IndexOutput & a0)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_writeFooter_faad620a], a0.this$);
        }

        void CodecUtil::writeHeader(const ::org::apache::lucene::store::DataOutput & a0, const ::java::lang::String & a1, jint a2)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_writeHeader_6b5c1111], a0.this$, a1.this$, a2);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        static PyObject *t_CodecUtil_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CodecUtil_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CodecUtil_checkEOF(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CodecUtil_checkFooter(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CodecUtil_checkHeader(PyTypeObject *type, PyObject *args);
        static PyObject *t_CodecUtil_checkHeaderNoMagic(PyTypeObject *type, PyObject *args);
        static PyObject *t_CodecUtil_checksumEntireFile(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CodecUtil_footerLength(PyTypeObject *type);
        static PyObject *t_CodecUtil_headerLength(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CodecUtil_retrieveChecksum(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CodecUtil_writeFooter(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CodecUtil_writeHeader(PyTypeObject *type, PyObject *args);

        static PyMethodDef t_CodecUtil__methods_[] = {
          DECLARE_METHOD(t_CodecUtil, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CodecUtil, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CodecUtil, checkEOF, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CodecUtil, checkFooter, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CodecUtil, checkHeader, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_CodecUtil, checkHeaderNoMagic, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_CodecUtil, checksumEntireFile, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CodecUtil, footerLength, METH_NOARGS | METH_CLASS),
          DECLARE_METHOD(t_CodecUtil, headerLength, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CodecUtil, retrieveChecksum, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CodecUtil, writeFooter, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CodecUtil, writeHeader, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(CodecUtil, t_CodecUtil, ::java::lang::Object, CodecUtil, abstract_init, 0, 0, 0, 0, 0);

        void t_CodecUtil::install(PyObject *module)
        {
          installType(&PY_TYPE(CodecUtil), module, "CodecUtil", 0);
        }

        void t_CodecUtil::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(CodecUtil).tp_dict, "class_", make_descriptor(CodecUtil::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(CodecUtil).tp_dict, "wrapfn_", make_descriptor(t_CodecUtil::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(CodecUtil).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(CodecUtil::initializeClass);
          PyDict_SetItemString(PY_TYPE(CodecUtil).tp_dict, "CODEC_MAGIC", make_descriptor(CodecUtil::CODEC_MAGIC));
          PyDict_SetItemString(PY_TYPE(CodecUtil).tp_dict, "FOOTER_MAGIC", make_descriptor(CodecUtil::FOOTER_MAGIC));
        }

        static PyObject *t_CodecUtil_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CodecUtil::initializeClass, 1)))
            return NULL;
          return t_CodecUtil::wrap_Object(CodecUtil(((t_CodecUtil *) arg)->object.this$));
        }
        static PyObject *t_CodecUtil_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CodecUtil::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_CodecUtil_checkEOF(PyTypeObject *type, PyObject *arg)
        {
          ::org::apache::lucene::store::IndexInput a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::store::IndexInput::initializeClass, &a0))
          {
            OBJ_CALL(::org::apache::lucene::codecs::CodecUtil::checkEOF(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "checkEOF", arg);
          return NULL;
        }

        static PyObject *t_CodecUtil_checkFooter(PyTypeObject *type, PyObject *arg)
        {
          ::org::apache::lucene::store::ChecksumIndexInput a0((jobject) NULL);
          jlong result;

          if (!parseArg(arg, "k", ::org::apache::lucene::store::ChecksumIndexInput::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::codecs::CodecUtil::checkFooter(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError(type, "checkFooter", arg);
          return NULL;
        }

        static PyObject *t_CodecUtil_checkHeader(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::store::DataInput a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          jint a2;
          jint a3;
          jint result;

          if (!parseArgs(args, "ksII", ::org::apache::lucene::store::DataInput::initializeClass, &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(result = ::org::apache::lucene::codecs::CodecUtil::checkHeader(a0, a1, a2, a3));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError(type, "checkHeader", args);
          return NULL;
        }

        static PyObject *t_CodecUtil_checkHeaderNoMagic(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::store::DataInput a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          jint a2;
          jint a3;
          jint result;

          if (!parseArgs(args, "ksII", ::org::apache::lucene::store::DataInput::initializeClass, &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(result = ::org::apache::lucene::codecs::CodecUtil::checkHeaderNoMagic(a0, a1, a2, a3));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError(type, "checkHeaderNoMagic", args);
          return NULL;
        }

        static PyObject *t_CodecUtil_checksumEntireFile(PyTypeObject *type, PyObject *arg)
        {
          ::org::apache::lucene::store::IndexInput a0((jobject) NULL);
          jlong result;

          if (!parseArg(arg, "k", ::org::apache::lucene::store::IndexInput::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::codecs::CodecUtil::checksumEntireFile(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError(type, "checksumEntireFile", arg);
          return NULL;
        }

        static PyObject *t_CodecUtil_footerLength(PyTypeObject *type)
        {
          jint result;
          OBJ_CALL(result = ::org::apache::lucene::codecs::CodecUtil::footerLength());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_CodecUtil_headerLength(PyTypeObject *type, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          jint result;

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::codecs::CodecUtil::headerLength(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError(type, "headerLength", arg);
          return NULL;
        }

        static PyObject *t_CodecUtil_retrieveChecksum(PyTypeObject *type, PyObject *arg)
        {
          ::org::apache::lucene::store::IndexInput a0((jobject) NULL);
          jlong result;

          if (!parseArg(arg, "k", ::org::apache::lucene::store::IndexInput::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::codecs::CodecUtil::retrieveChecksum(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError(type, "retrieveChecksum", arg);
          return NULL;
        }

        static PyObject *t_CodecUtil_writeFooter(PyTypeObject *type, PyObject *arg)
        {
          ::org::apache::lucene::store::IndexOutput a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::store::IndexOutput::initializeClass, &a0))
          {
            OBJ_CALL(::org::apache::lucene::codecs::CodecUtil::writeFooter(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "writeFooter", arg);
          return NULL;
        }

        static PyObject *t_CodecUtil_writeHeader(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::store::DataOutput a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          jint a2;

          if (!parseArgs(args, "ksI", ::org::apache::lucene::store::DataOutput::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(::org::apache::lucene::codecs::CodecUtil::writeHeader(a0, a1, a2));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "writeHeader", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/processors/NumericRangeQueryNodeProcessor.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {

              ::java::lang::Class *NumericRangeQueryNodeProcessor::class$ = NULL;
              jmethodID *NumericRangeQueryNodeProcessor::mids$ = NULL;
              bool NumericRangeQueryNodeProcessor::live$ = false;

              jclass NumericRangeQueryNodeProcessor::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/processors/NumericRangeQueryNodeProcessor");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_postProcessNode_6705aed7] = env->getMethodID(cls, "postProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_preProcessNode_6705aed7] = env->getMethodID(cls, "preProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_setChildrenOrder_4f378251] = env->getMethodID(cls, "setChildrenOrder", "(Ljava/util/List;)Ljava/util/List;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              NumericRangeQueryNodeProcessor::NumericRangeQueryNodeProcessor() : ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {
              static PyObject *t_NumericRangeQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_NumericRangeQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg);
              static int t_NumericRangeQueryNodeProcessor_init_(t_NumericRangeQueryNodeProcessor *self, PyObject *args, PyObject *kwds);

              static PyMethodDef t_NumericRangeQueryNodeProcessor__methods_[] = {
                DECLARE_METHOD(t_NumericRangeQueryNodeProcessor, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_NumericRangeQueryNodeProcessor, instance_, METH_O | METH_CLASS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(NumericRangeQueryNodeProcessor, t_NumericRangeQueryNodeProcessor, ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl, NumericRangeQueryNodeProcessor, t_NumericRangeQueryNodeProcessor_init_, 0, 0, 0, 0, 0);

              void t_NumericRangeQueryNodeProcessor::install(PyObject *module)
              {
                installType(&PY_TYPE(NumericRangeQueryNodeProcessor), module, "NumericRangeQueryNodeProcessor", 0);
              }

              void t_NumericRangeQueryNodeProcessor::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(NumericRangeQueryNodeProcessor).tp_dict, "class_", make_descriptor(NumericRangeQueryNodeProcessor::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(NumericRangeQueryNodeProcessor).tp_dict, "wrapfn_", make_descriptor(t_NumericRangeQueryNodeProcessor::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(NumericRangeQueryNodeProcessor).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_NumericRangeQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, NumericRangeQueryNodeProcessor::initializeClass, 1)))
                  return NULL;
                return t_NumericRangeQueryNodeProcessor::wrap_Object(NumericRangeQueryNodeProcessor(((t_NumericRangeQueryNodeProcessor *) arg)->object.this$));
              }
              static PyObject *t_NumericRangeQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, NumericRangeQueryNodeProcessor::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_NumericRangeQueryNodeProcessor_init_(t_NumericRangeQueryNodeProcessor *self, PyObject *args, PyObject *kwds)
              {
                NumericRangeQueryNodeProcessor object((jobject) NULL);

                INT_CALL(object = NumericRangeQueryNodeProcessor());
                self->object = object;

                return 0;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/LabelAndValue.h"
#include "java/lang/Number.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {

        ::java::lang::Class *LabelAndValue::class$ = NULL;
        jmethodID *LabelAndValue::mids$ = NULL;
        jfieldID *LabelAndValue::fids$ = NULL;
        bool LabelAndValue::live$ = false;

        jclass LabelAndValue::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/facet/LabelAndValue");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_158d1296] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/Number;)V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            fids$ = new jfieldID[max_fid];
            fids$[fid_label] = env->getFieldID(cls, "label", "Ljava/lang/String;");
            fids$[fid_value] = env->getFieldID(cls, "value", "Ljava/lang/Number;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        LabelAndValue::LabelAndValue(const ::java::lang::String & a0, const ::java::lang::Number & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_158d1296, a0.this$, a1.this$)) {}

        jboolean LabelAndValue::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        jint LabelAndValue::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        ::java::lang::String LabelAndValue::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }

        ::java::lang::String LabelAndValue::_get_label() const
        {
          return ::java::lang::String(env->getObjectField(this$, fids$[fid_label]));
        }

        ::java::lang::Number LabelAndValue::_get_value() const
        {
          return ::java::lang::Number(env->getObjectField(this$, fids$[fid_value]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        static PyObject *t_LabelAndValue_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_LabelAndValue_instance_(PyTypeObject *type, PyObject *arg);
        static int t_LabelAndValue_init_(t_LabelAndValue *self, PyObject *args, PyObject *kwds);
        static PyObject *t_LabelAndValue_equals(t_LabelAndValue *self, PyObject *args);
        static PyObject *t_LabelAndValue_hashCode(t_LabelAndValue *self, PyObject *args);
        static PyObject *t_LabelAndValue_toString(t_LabelAndValue *self, PyObject *args);
        static PyObject *t_LabelAndValue_get__label(t_LabelAndValue *self, void *data);
        static PyObject *t_LabelAndValue_get__value(t_LabelAndValue *self, void *data);

        static PyGetSetDef t_LabelAndValue__fields_[] = {
          DECLARE_GET_FIELD(t_LabelAndValue, label),
          DECLARE_GET_FIELD(t_LabelAndValue, value),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_LabelAndValue__methods_[] = {
          DECLARE_METHOD(t_LabelAndValue, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LabelAndValue, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LabelAndValue, equals, METH_VARARGS),
          DECLARE_METHOD(t_LabelAndValue, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_LabelAndValue, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(LabelAndValue, t_LabelAndValue, ::java::lang::Object, LabelAndValue, t_LabelAndValue_init_, 0, 0, t_LabelAndValue__fields_, 0, 0);

        void t_LabelAndValue::install(PyObject *module)
        {
          installType(&PY_TYPE(LabelAndValue), module, "LabelAndValue", 0);
        }

        void t_LabelAndValue::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(LabelAndValue).tp_dict, "class_", make_descriptor(LabelAndValue::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(LabelAndValue).tp_dict, "wrapfn_", make_descriptor(t_LabelAndValue::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(LabelAndValue).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_LabelAndValue_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, LabelAndValue::initializeClass, 1)))
            return NULL;
          return t_LabelAndValue::wrap_Object(LabelAndValue(((t_LabelAndValue *) arg)->object.this$));
        }
        static PyObject *t_LabelAndValue_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, LabelAndValue::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_LabelAndValue_init_(t_LabelAndValue *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::Number a1((jobject) NULL);
          LabelAndValue object((jobject) NULL);

          if (!parseArgs(args, "sO", &::java::lang::PY_TYPE(Number), &a0, &a1))
          {
            INT_CALL(object = LabelAndValue(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_LabelAndValue_equals(t_LabelAndValue *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(LabelAndValue), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_LabelAndValue_hashCode(t_LabelAndValue *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(LabelAndValue), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_LabelAndValue_toString(t_LabelAndValue *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(LabelAndValue), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_LabelAndValue_get__label(t_LabelAndValue *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object._get_label());
          return j2p(value);
        }

        static PyObject *t_LabelAndValue_get__value(t_LabelAndValue *self, void *data)
        {
          ::java::lang::Number value((jobject) NULL);
          OBJ_CALL(value = self->object._get_value());
          return ::java::lang::t_Number::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/join/ToParentBlockJoinFieldComparator$Highest.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/FieldComparator.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/search/Filter.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace join {

          ::java::lang::Class *ToParentBlockJoinFieldComparator$Highest::class$ = NULL;
          jmethodID *ToParentBlockJoinFieldComparator$Highest::mids$ = NULL;
          bool ToParentBlockJoinFieldComparator$Highest::live$ = false;

          jclass ToParentBlockJoinFieldComparator$Highest::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/join/ToParentBlockJoinFieldComparator$Highest");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2105569] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/FieldComparator;Lorg/apache/lucene/search/Filter;Lorg/apache/lucene/search/Filter;I)V");
              mids$[mid_compareBottom_39c7bd23] = env->getMethodID(cls, "compareBottom", "(I)I");
              mids$[mid_compareTop_39c7bd23] = env->getMethodID(cls, "compareTop", "(I)I");
              mids$[mid_copy_d8d154a6] = env->getMethodID(cls, "copy", "(II)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ToParentBlockJoinFieldComparator$Highest::ToParentBlockJoinFieldComparator$Highest(const ::org::apache::lucene::search::FieldComparator & a0, const ::org::apache::lucene::search::Filter & a1, const ::org::apache::lucene::search::Filter & a2, jint a3) : ::org::apache::lucene::search::join::ToParentBlockJoinFieldComparator(env->newObject(initializeClass, &mids$, mid_init$_f2105569, a0.this$, a1.this$, a2.this$, a3)) {}

          jint ToParentBlockJoinFieldComparator$Highest::compareBottom(jint a0) const
          {
            return env->callIntMethod(this$, mids$[mid_compareBottom_39c7bd23], a0);
          }

          jint ToParentBlockJoinFieldComparator$Highest::compareTop(jint a0) const
          {
            return env->callIntMethod(this$, mids$[mid_compareTop_39c7bd23], a0);
          }

          void ToParentBlockJoinFieldComparator$Highest::copy(jint a0, jint a1) const
          {
            env->callVoidMethod(this$, mids$[mid_copy_d8d154a6], a0, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace join {
          static PyObject *t_ToParentBlockJoinFieldComparator$Highest_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ToParentBlockJoinFieldComparator$Highest_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ToParentBlockJoinFieldComparator$Highest_of_(t_ToParentBlockJoinFieldComparator$Highest *self, PyObject *args);
          static int t_ToParentBlockJoinFieldComparator$Highest_init_(t_ToParentBlockJoinFieldComparator$Highest *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ToParentBlockJoinFieldComparator$Highest_compareBottom(t_ToParentBlockJoinFieldComparator$Highest *self, PyObject *args);
          static PyObject *t_ToParentBlockJoinFieldComparator$Highest_compareTop(t_ToParentBlockJoinFieldComparator$Highest *self, PyObject *args);
          static PyObject *t_ToParentBlockJoinFieldComparator$Highest_copy(t_ToParentBlockJoinFieldComparator$Highest *self, PyObject *args);
          static PyObject *t_ToParentBlockJoinFieldComparator$Highest_get__parameters_(t_ToParentBlockJoinFieldComparator$Highest *self, void *data);
          static PyGetSetDef t_ToParentBlockJoinFieldComparator$Highest__fields_[] = {
            DECLARE_GET_FIELD(t_ToParentBlockJoinFieldComparator$Highest, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_ToParentBlockJoinFieldComparator$Highest__methods_[] = {
            DECLARE_METHOD(t_ToParentBlockJoinFieldComparator$Highest, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ToParentBlockJoinFieldComparator$Highest, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ToParentBlockJoinFieldComparator$Highest, of_, METH_VARARGS),
            DECLARE_METHOD(t_ToParentBlockJoinFieldComparator$Highest, compareBottom, METH_VARARGS),
            DECLARE_METHOD(t_ToParentBlockJoinFieldComparator$Highest, compareTop, METH_VARARGS),
            DECLARE_METHOD(t_ToParentBlockJoinFieldComparator$Highest, copy, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ToParentBlockJoinFieldComparator$Highest, t_ToParentBlockJoinFieldComparator$Highest, ::org::apache::lucene::search::join::ToParentBlockJoinFieldComparator, ToParentBlockJoinFieldComparator$Highest, t_ToParentBlockJoinFieldComparator$Highest_init_, 0, 0, t_ToParentBlockJoinFieldComparator$Highest__fields_, 0, 0);
          PyObject *t_ToParentBlockJoinFieldComparator$Highest::wrap_Object(const ToParentBlockJoinFieldComparator$Highest& object, PyTypeObject *p0)
          {
            PyObject *obj = t_ToParentBlockJoinFieldComparator$Highest::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_ToParentBlockJoinFieldComparator$Highest *self = (t_ToParentBlockJoinFieldComparator$Highest *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_ToParentBlockJoinFieldComparator$Highest::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_ToParentBlockJoinFieldComparator$Highest::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_ToParentBlockJoinFieldComparator$Highest *self = (t_ToParentBlockJoinFieldComparator$Highest *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_ToParentBlockJoinFieldComparator$Highest::install(PyObject *module)
          {
            installType(&PY_TYPE(ToParentBlockJoinFieldComparator$Highest), module, "ToParentBlockJoinFieldComparator$Highest", 0);
          }

          void t_ToParentBlockJoinFieldComparator$Highest::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ToParentBlockJoinFieldComparator$Highest).tp_dict, "class_", make_descriptor(ToParentBlockJoinFieldComparator$Highest::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ToParentBlockJoinFieldComparator$Highest).tp_dict, "wrapfn_", make_descriptor(t_ToParentBlockJoinFieldComparator$Highest::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ToParentBlockJoinFieldComparator$Highest).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ToParentBlockJoinFieldComparator$Highest_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ToParentBlockJoinFieldComparator$Highest::initializeClass, 1)))
              return NULL;
            return t_ToParentBlockJoinFieldComparator$Highest::wrap_Object(ToParentBlockJoinFieldComparator$Highest(((t_ToParentBlockJoinFieldComparator$Highest *) arg)->object.this$));
          }
          static PyObject *t_ToParentBlockJoinFieldComparator$Highest_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ToParentBlockJoinFieldComparator$Highest::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_ToParentBlockJoinFieldComparator$Highest_of_(t_ToParentBlockJoinFieldComparator$Highest *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_ToParentBlockJoinFieldComparator$Highest_init_(t_ToParentBlockJoinFieldComparator$Highest *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::search::FieldComparator a0((jobject) NULL);
            PyTypeObject **p0;
            ::org::apache::lucene::search::Filter a1((jobject) NULL);
            ::org::apache::lucene::search::Filter a2((jobject) NULL);
            jint a3;
            ToParentBlockJoinFieldComparator$Highest object((jobject) NULL);

            if (!parseArgs(args, "KkkI", ::org::apache::lucene::search::FieldComparator::initializeClass, ::org::apache::lucene::search::Filter::initializeClass, ::org::apache::lucene::search::Filter::initializeClass, &a0, &p0, ::org::apache::lucene::search::t_FieldComparator::parameters_, &a1, &a2, &a3))
            {
              INT_CALL(object = ToParentBlockJoinFieldComparator$Highest(a0, a1, a2, a3));
              self->object = object;
              self->parameters[0] = &::java::lang::PY_TYPE(Object);
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ToParentBlockJoinFieldComparator$Highest_compareBottom(t_ToParentBlockJoinFieldComparator$Highest *self, PyObject *args)
          {
            jint a0;
            jint result;

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(result = self->object.compareBottom(a0));
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(ToParentBlockJoinFieldComparator$Highest), (PyObject *) self, "compareBottom", args, 2);
          }

          static PyObject *t_ToParentBlockJoinFieldComparator$Highest_compareTop(t_ToParentBlockJoinFieldComparator$Highest *self, PyObject *args)
          {
            jint a0;
            jint result;

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(result = self->object.compareTop(a0));
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(ToParentBlockJoinFieldComparator$Highest), (PyObject *) self, "compareTop", args, 2);
          }

          static PyObject *t_ToParentBlockJoinFieldComparator$Highest_copy(t_ToParentBlockJoinFieldComparator$Highest *self, PyObject *args)
          {
            jint a0;
            jint a1;

            if (!parseArgs(args, "II", &a0, &a1))
            {
              OBJ_CALL(self->object.copy(a0, a1));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(ToParentBlockJoinFieldComparator$Highest), (PyObject *) self, "copy", args, 2);
          }
          static PyObject *t_ToParentBlockJoinFieldComparator$Highest_get__parameters_(t_ToParentBlockJoinFieldComparator$Highest *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/IOContext$Context.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *IOContext$Context::class$ = NULL;
        jmethodID *IOContext$Context::mids$ = NULL;
        bool IOContext$Context::live$ = false;
        IOContext$Context *IOContext$Context::DEFAULT = NULL;
        IOContext$Context *IOContext$Context::FLUSH = NULL;
        IOContext$Context *IOContext$Context::MERGE = NULL;
        IOContext$Context *IOContext$Context::READ = NULL;

        jclass IOContext$Context::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/IOContext$Context");

            mids$ = new jmethodID[max_mid];
            mids$[mid_valueOf_6cdc8b82] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/store/IOContext$Context;");
            mids$[mid_values_8c68e654] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/store/IOContext$Context;");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            DEFAULT = new IOContext$Context(env->getStaticObjectField(cls, "DEFAULT", "Lorg/apache/lucene/store/IOContext$Context;"));
            FLUSH = new IOContext$Context(env->getStaticObjectField(cls, "FLUSH", "Lorg/apache/lucene/store/IOContext$Context;"));
            MERGE = new IOContext$Context(env->getStaticObjectField(cls, "MERGE", "Lorg/apache/lucene/store/IOContext$Context;"));
            READ = new IOContext$Context(env->getStaticObjectField(cls, "READ", "Lorg/apache/lucene/store/IOContext$Context;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        IOContext$Context IOContext$Context::valueOf(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return IOContext$Context(env->callStaticObjectMethod(cls, mids$[mid_valueOf_6cdc8b82], a0.this$));
        }

        JArray< IOContext$Context > IOContext$Context::values()
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< IOContext$Context >(env->callStaticObjectMethod(cls, mids$[mid_values_8c68e654]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_IOContext$Context_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IOContext$Context_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IOContext$Context_of_(t_IOContext$Context *self, PyObject *args);
        static PyObject *t_IOContext$Context_valueOf(PyTypeObject *type, PyObject *args);
        static PyObject *t_IOContext$Context_values(PyTypeObject *type);
        static PyObject *t_IOContext$Context_get__parameters_(t_IOContext$Context *self, void *data);
        static PyGetSetDef t_IOContext$Context__fields_[] = {
          DECLARE_GET_FIELD(t_IOContext$Context, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_IOContext$Context__methods_[] = {
          DECLARE_METHOD(t_IOContext$Context, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IOContext$Context, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IOContext$Context, of_, METH_VARARGS),
          DECLARE_METHOD(t_IOContext$Context, valueOf, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_IOContext$Context, values, METH_NOARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(IOContext$Context, t_IOContext$Context, ::java::lang::Enum, IOContext$Context, abstract_init, 0, 0, t_IOContext$Context__fields_, 0, 0);
        PyObject *t_IOContext$Context::wrap_Object(const IOContext$Context& object, PyTypeObject *p0)
        {
          PyObject *obj = t_IOContext$Context::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_IOContext$Context *self = (t_IOContext$Context *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_IOContext$Context::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_IOContext$Context::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_IOContext$Context *self = (t_IOContext$Context *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_IOContext$Context::install(PyObject *module)
        {
          installType(&PY_TYPE(IOContext$Context), module, "IOContext$Context", 0);
        }

        void t_IOContext$Context::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(IOContext$Context).tp_dict, "class_", make_descriptor(IOContext$Context::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(IOContext$Context).tp_dict, "wrapfn_", make_descriptor(t_IOContext$Context::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(IOContext$Context).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(IOContext$Context::initializeClass);
          PyDict_SetItemString(PY_TYPE(IOContext$Context).tp_dict, "DEFAULT", make_descriptor(t_IOContext$Context::wrap_Object(*IOContext$Context::DEFAULT)));
          PyDict_SetItemString(PY_TYPE(IOContext$Context).tp_dict, "FLUSH", make_descriptor(t_IOContext$Context::wrap_Object(*IOContext$Context::FLUSH)));
          PyDict_SetItemString(PY_TYPE(IOContext$Context).tp_dict, "MERGE", make_descriptor(t_IOContext$Context::wrap_Object(*IOContext$Context::MERGE)));
          PyDict_SetItemString(PY_TYPE(IOContext$Context).tp_dict, "READ", make_descriptor(t_IOContext$Context::wrap_Object(*IOContext$Context::READ)));
        }

        static PyObject *t_IOContext$Context_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IOContext$Context::initializeClass, 1)))
            return NULL;
          return t_IOContext$Context::wrap_Object(IOContext$Context(((t_IOContext$Context *) arg)->object.this$));
        }
        static PyObject *t_IOContext$Context_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IOContext$Context::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_IOContext$Context_of_(t_IOContext$Context *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_IOContext$Context_valueOf(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          IOContext$Context result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::store::IOContext$Context::valueOf(a0));
            return t_IOContext$Context::wrap_Object(result);
          }

          return callSuper(type, "valueOf", args, 2);
        }

        static PyObject *t_IOContext$Context_values(PyTypeObject *type)
        {
          JArray< IOContext$Context > result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::store::IOContext$Context::values());
          return JArray<jobject>(result.this$).wrap(t_IOContext$Context::wrap_jobject);
        }
        static PyObject *t_IOContext$Context_get__parameters_(t_IOContext$Context *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/blocktree/BlockTreeTermsReader.h"
#include "org/apache/lucene/index/Terms.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "org/apache/lucene/store/IOContext.h"
#include "java/util/Iterator.h"
#include "org/apache/lucene/codecs/PostingsReaderBase.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace blocktree {

          ::java::lang::Class *BlockTreeTermsReader::class$ = NULL;
          jmethodID *BlockTreeTermsReader::mids$ = NULL;
          bool BlockTreeTermsReader::live$ = false;

          jclass BlockTreeTermsReader::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/blocktree/BlockTreeTermsReader");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_72076db5] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/FieldInfos;Lorg/apache/lucene/index/SegmentInfo;Lorg/apache/lucene/codecs/PostingsReaderBase;Lorg/apache/lucene/store/IOContext;Ljava/lang/String;I)V");
              mids$[mid_checkIntegrity_54c6a166] = env->getMethodID(cls, "checkIntegrity", "()V");
              mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
              mids$[mid_iterator_40858c90] = env->getMethodID(cls, "iterator", "()Ljava/util/Iterator;");
              mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");
              mids$[mid_size_54c6a179] = env->getMethodID(cls, "size", "()I");
              mids$[mid_terms_ee262ab4] = env->getMethodID(cls, "terms", "(Ljava/lang/String;)Lorg/apache/lucene/index/Terms;");
              mids$[mid_seekDir_ec9e0593] = env->getMethodID(cls, "seekDir", "(Lorg/apache/lucene/store/IndexInput;J)V");
              mids$[mid_readHeader_0441f0ad] = env->getMethodID(cls, "readHeader", "(Lorg/apache/lucene/store/IndexInput;)I");
              mids$[mid_readIndexHeader_0441f0ad] = env->getMethodID(cls, "readIndexHeader", "(Lorg/apache/lucene/store/IndexInput;)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BlockTreeTermsReader::BlockTreeTermsReader(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::FieldInfos & a1, const ::org::apache::lucene::index::SegmentInfo & a2, const ::org::apache::lucene::codecs::PostingsReaderBase & a3, const ::org::apache::lucene::store::IOContext & a4, const ::java::lang::String & a5, jint a6) : ::org::apache::lucene::codecs::FieldsProducer(env->newObject(initializeClass, &mids$, mid_init$_72076db5, a0.this$, a1.this$, a2.this$, a3.this$, a4.this$, a5.this$, a6)) {}

          void BlockTreeTermsReader::checkIntegrity() const
          {
            env->callVoidMethod(this$, mids$[mid_checkIntegrity_54c6a166]);
          }

          void BlockTreeTermsReader::close() const
          {
            env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
          }

          ::java::util::Iterator BlockTreeTermsReader::iterator() const
          {
            return ::java::util::Iterator(env->callObjectMethod(this$, mids$[mid_iterator_40858c90]));
          }

          jlong BlockTreeTermsReader::ramBytesUsed() const
          {
            return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
          }

          jint BlockTreeTermsReader::size() const
          {
            return env->callIntMethod(this$, mids$[mid_size_54c6a179]);
          }

          ::org::apache::lucene::index::Terms BlockTreeTermsReader::terms(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::index::Terms(env->callObjectMethod(this$, mids$[mid_terms_ee262ab4], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace blocktree {
          static PyObject *t_BlockTreeTermsReader_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BlockTreeTermsReader_instance_(PyTypeObject *type, PyObject *arg);
          static int t_BlockTreeTermsReader_init_(t_BlockTreeTermsReader *self, PyObject *args, PyObject *kwds);
          static PyObject *t_BlockTreeTermsReader_checkIntegrity(t_BlockTreeTermsReader *self, PyObject *args);
          static PyObject *t_BlockTreeTermsReader_close(t_BlockTreeTermsReader *self, PyObject *args);
          static PyObject *t_BlockTreeTermsReader_iterator(t_BlockTreeTermsReader *self, PyObject *args);
          static PyObject *t_BlockTreeTermsReader_ramBytesUsed(t_BlockTreeTermsReader *self, PyObject *args);
          static PyObject *t_BlockTreeTermsReader_size(t_BlockTreeTermsReader *self, PyObject *args);
          static PyObject *t_BlockTreeTermsReader_terms(t_BlockTreeTermsReader *self, PyObject *args);

          static PyMethodDef t_BlockTreeTermsReader__methods_[] = {
            DECLARE_METHOD(t_BlockTreeTermsReader, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BlockTreeTermsReader, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BlockTreeTermsReader, checkIntegrity, METH_VARARGS),
            DECLARE_METHOD(t_BlockTreeTermsReader, close, METH_VARARGS),
            DECLARE_METHOD(t_BlockTreeTermsReader, iterator, METH_VARARGS),
            DECLARE_METHOD(t_BlockTreeTermsReader, ramBytesUsed, METH_VARARGS),
            DECLARE_METHOD(t_BlockTreeTermsReader, size, METH_VARARGS),
            DECLARE_METHOD(t_BlockTreeTermsReader, terms, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(BlockTreeTermsReader, t_BlockTreeTermsReader, ::org::apache::lucene::codecs::FieldsProducer, BlockTreeTermsReader, t_BlockTreeTermsReader_init_, ((PyObject *(*)(t_BlockTreeTermsReader *)) get_iterator< t_BlockTreeTermsReader >), 0, 0, 0, 0);

          void t_BlockTreeTermsReader::install(PyObject *module)
          {
            installType(&PY_TYPE(BlockTreeTermsReader), module, "BlockTreeTermsReader", 0);
          }

          void t_BlockTreeTermsReader::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(BlockTreeTermsReader).tp_dict, "class_", make_descriptor(BlockTreeTermsReader::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(BlockTreeTermsReader).tp_dict, "wrapfn_", make_descriptor(t_BlockTreeTermsReader::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(BlockTreeTermsReader).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_BlockTreeTermsReader_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BlockTreeTermsReader::initializeClass, 1)))
              return NULL;
            return t_BlockTreeTermsReader::wrap_Object(BlockTreeTermsReader(((t_BlockTreeTermsReader *) arg)->object.this$));
          }
          static PyObject *t_BlockTreeTermsReader_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BlockTreeTermsReader::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_BlockTreeTermsReader_init_(t_BlockTreeTermsReader *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::store::Directory a0((jobject) NULL);
            ::org::apache::lucene::index::FieldInfos a1((jobject) NULL);
            ::org::apache::lucene::index::SegmentInfo a2((jobject) NULL);
            ::org::apache::lucene::codecs::PostingsReaderBase a3((jobject) NULL);
            ::org::apache::lucene::store::IOContext a4((jobject) NULL);
            ::java::lang::String a5((jobject) NULL);
            jint a6;
            BlockTreeTermsReader object((jobject) NULL);

            if (!parseArgs(args, "kkkkksI", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::FieldInfos::initializeClass, ::org::apache::lucene::index::SegmentInfo::initializeClass, ::org::apache::lucene::codecs::PostingsReaderBase::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5, &a6))
            {
              INT_CALL(object = BlockTreeTermsReader(a0, a1, a2, a3, a4, a5, a6));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_BlockTreeTermsReader_checkIntegrity(t_BlockTreeTermsReader *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.checkIntegrity());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(BlockTreeTermsReader), (PyObject *) self, "checkIntegrity", args, 2);
          }

          static PyObject *t_BlockTreeTermsReader_close(t_BlockTreeTermsReader *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.close());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(BlockTreeTermsReader), (PyObject *) self, "close", args, 2);
          }

          static PyObject *t_BlockTreeTermsReader_iterator(t_BlockTreeTermsReader *self, PyObject *args)
          {
            ::java::util::Iterator result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.iterator());
              return ::java::util::t_Iterator::wrap_Object(result, &::java::lang::PY_TYPE(String));
            }

            return callSuper(&PY_TYPE(BlockTreeTermsReader), (PyObject *) self, "iterator", args, 2);
          }

          static PyObject *t_BlockTreeTermsReader_ramBytesUsed(t_BlockTreeTermsReader *self, PyObject *args)
          {
            jlong result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.ramBytesUsed());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(&PY_TYPE(BlockTreeTermsReader), (PyObject *) self, "ramBytesUsed", args, 2);
          }

          static PyObject *t_BlockTreeTermsReader_size(t_BlockTreeTermsReader *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.size());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(BlockTreeTermsReader), (PyObject *) self, "size", args, 2);
          }

          static PyObject *t_BlockTreeTermsReader_terms(t_BlockTreeTermsReader *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::index::Terms result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = self->object.terms(a0));
              return ::org::apache::lucene::index::t_Terms::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(BlockTreeTermsReader), (PyObject *) self, "terms", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/xml/builders/DuplicateFilterBuilder.h"
#include "org/apache/lucene/search/Filter.h"
#include "org/apache/lucene/queryparser/xml/FilterBuilder.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {

            ::java::lang::Class *DuplicateFilterBuilder::class$ = NULL;
            jmethodID *DuplicateFilterBuilder::mids$ = NULL;
            bool DuplicateFilterBuilder::live$ = false;

            jclass DuplicateFilterBuilder::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/xml/builders/DuplicateFilterBuilder");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            DuplicateFilterBuilder::DuplicateFilterBuilder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {
            static PyObject *t_DuplicateFilterBuilder_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_DuplicateFilterBuilder_instance_(PyTypeObject *type, PyObject *arg);
            static int t_DuplicateFilterBuilder_init_(t_DuplicateFilterBuilder *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_DuplicateFilterBuilder__methods_[] = {
              DECLARE_METHOD(t_DuplicateFilterBuilder, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_DuplicateFilterBuilder, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(DuplicateFilterBuilder, t_DuplicateFilterBuilder, ::java::lang::Object, DuplicateFilterBuilder, t_DuplicateFilterBuilder_init_, 0, 0, 0, 0, 0);

            void t_DuplicateFilterBuilder::install(PyObject *module)
            {
              installType(&PY_TYPE(DuplicateFilterBuilder), module, "DuplicateFilterBuilder", 0);
            }

            void t_DuplicateFilterBuilder::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(DuplicateFilterBuilder).tp_dict, "class_", make_descriptor(DuplicateFilterBuilder::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(DuplicateFilterBuilder).tp_dict, "wrapfn_", make_descriptor(t_DuplicateFilterBuilder::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(DuplicateFilterBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_DuplicateFilterBuilder_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, DuplicateFilterBuilder::initializeClass, 1)))
                return NULL;
              return t_DuplicateFilterBuilder::wrap_Object(DuplicateFilterBuilder(((t_DuplicateFilterBuilder *) arg)->object.this$));
            }
            static PyObject *t_DuplicateFilterBuilder_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, DuplicateFilterBuilder::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_DuplicateFilterBuilder_init_(t_DuplicateFilterBuilder *self, PyObject *args, PyObject *kwds)
            {
              DuplicateFilterBuilder object((jobject) NULL);

              INT_CALL(object = DuplicateFilterBuilder());
              self->object = object;

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/AtomicReader.h"
#include "org/apache/lucene/index/Terms.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/index/DocsEnum.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/DocsAndPositionsEnum.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/BinaryDocValues.h"
#include "org/apache/lucene/index/Fields.h"
#include "org/apache/lucene/util/Bits.h"
#include "org/apache/lucene/index/NumericDocValues.h"
#include "org/apache/lucene/index/SortedNumericDocValues.h"
#include "org/apache/lucene/index/Term.h"
#include "org/apache/lucene/index/SortedDocValues.h"
#include "org/apache/lucene/index/AtomicReader$CoreClosedListener.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/SortedSetDocValues.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *AtomicReader::class$ = NULL;
        jmethodID *AtomicReader::mids$ = NULL;
        bool AtomicReader::live$ = false;

        jclass AtomicReader::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/AtomicReader");

            mids$ = new jmethodID[max_mid];
            mids$[mid_addCoreClosedListener_cbc2818f] = env->getMethodID(cls, "addCoreClosedListener", "(Lorg/apache/lucene/index/AtomicReader$CoreClosedListener;)V");
            mids$[mid_checkIntegrity_54c6a166] = env->getMethodID(cls, "checkIntegrity", "()V");
            mids$[mid_docFreq_7eca6a9e] = env->getMethodID(cls, "docFreq", "(Lorg/apache/lucene/index/Term;)I");
            mids$[mid_fields_77db581d] = env->getMethodID(cls, "fields", "()Lorg/apache/lucene/index/Fields;");
            mids$[mid_getBinaryDocValues_ecab96be] = env->getMethodID(cls, "getBinaryDocValues", "(Ljava/lang/String;)Lorg/apache/lucene/index/BinaryDocValues;");
            mids$[mid_getContext_c2ef2576] = env->getMethodID(cls, "getContext", "()Lorg/apache/lucene/index/AtomicReaderContext;");
            mids$[mid_getDocCount_5fdc3f57] = env->getMethodID(cls, "getDocCount", "(Ljava/lang/String;)I");
            mids$[mid_getDocsWithField_e1c6a7db] = env->getMethodID(cls, "getDocsWithField", "(Ljava/lang/String;)Lorg/apache/lucene/util/Bits;");
            mids$[mid_getFieldInfos_9ba20825] = env->getMethodID(cls, "getFieldInfos", "()Lorg/apache/lucene/index/FieldInfos;");
            mids$[mid_getLiveDocs_03c2457d] = env->getMethodID(cls, "getLiveDocs", "()Lorg/apache/lucene/util/Bits;");
            mids$[mid_getNormValues_d2b19f49] = env->getMethodID(cls, "getNormValues", "(Ljava/lang/String;)Lorg/apache/lucene/index/NumericDocValues;");
            mids$[mid_getNumericDocValues_d2b19f49] = env->getMethodID(cls, "getNumericDocValues", "(Ljava/lang/String;)Lorg/apache/lucene/index/NumericDocValues;");
            mids$[mid_getSortedDocValues_7b8b1a0a] = env->getMethodID(cls, "getSortedDocValues", "(Ljava/lang/String;)Lorg/apache/lucene/index/SortedDocValues;");
            mids$[mid_getSortedNumericDocValues_37cd1812] = env->getMethodID(cls, "getSortedNumericDocValues", "(Ljava/lang/String;)Lorg/apache/lucene/index/SortedNumericDocValues;");
            mids$[mid_getSortedSetDocValues_43e0e807] = env->getMethodID(cls, "getSortedSetDocValues", "(Ljava/lang/String;)Lorg/apache/lucene/index/SortedSetDocValues;");
            mids$[mid_getSumDocFreq_5fdc3f54] = env->getMethodID(cls, "getSumDocFreq", "(Ljava/lang/String;)J");
            mids$[mid_getSumTotalTermFreq_5fdc3f54] = env->getMethodID(cls, "getSumTotalTermFreq", "(Ljava/lang/String;)J");
            mids$[mid_hasNorms_5fdc3f44] = env->getMethodID(cls, "hasNorms", "(Ljava/lang/String;)Z");
            mids$[mid_removeCoreClosedListener_cbc2818f] = env->getMethodID(cls, "removeCoreClosedListener", "(Lorg/apache/lucene/index/AtomicReader$CoreClosedListener;)V");
            mids$[mid_termDocsEnum_d9acd275] = env->getMethodID(cls, "termDocsEnum", "(Lorg/apache/lucene/index/Term;)Lorg/apache/lucene/index/DocsEnum;");
            mids$[mid_termPositionsEnum_bf42c6a6] = env->getMethodID(cls, "termPositionsEnum", "(Lorg/apache/lucene/index/Term;)Lorg/apache/lucene/index/DocsAndPositionsEnum;");
            mids$[mid_terms_ee262ab4] = env->getMethodID(cls, "terms", "(Ljava/lang/String;)Lorg/apache/lucene/index/Terms;");
            mids$[mid_totalTermFreq_7eca6a9d] = env->getMethodID(cls, "totalTermFreq", "(Lorg/apache/lucene/index/Term;)J");
            mids$[mid_addCoreClosedListenerAsReaderClosedListener_36772e26] = env->getStaticMethodID(cls, "addCoreClosedListenerAsReaderClosedListener", "(Lorg/apache/lucene/index/IndexReader;Lorg/apache/lucene/index/AtomicReader$CoreClosedListener;)V");
            mids$[mid_removeCoreClosedListenerAsReaderClosedListener_36772e26] = env->getStaticMethodID(cls, "removeCoreClosedListenerAsReaderClosedListener", "(Lorg/apache/lucene/index/IndexReader;Lorg/apache/lucene/index/AtomicReader$CoreClosedListener;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void AtomicReader::addCoreClosedListener(const ::org::apache::lucene::index::AtomicReader$CoreClosedListener & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_addCoreClosedListener_cbc2818f], a0.this$);
        }

        void AtomicReader::checkIntegrity() const
        {
          env->callVoidMethod(this$, mids$[mid_checkIntegrity_54c6a166]);
        }

        jint AtomicReader::docFreq(const ::org::apache::lucene::index::Term & a0) const
        {
          return env->callIntMethod(this$, mids$[mid_docFreq_7eca6a9e], a0.this$);
        }

        ::org::apache::lucene::index::Fields AtomicReader::fields() const
        {
          return ::org::apache::lucene::index::Fields(env->callObjectMethod(this$, mids$[mid_fields_77db581d]));
        }

        ::org::apache::lucene::index::BinaryDocValues AtomicReader::getBinaryDocValues(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::BinaryDocValues(env->callObjectMethod(this$, mids$[mid_getBinaryDocValues_ecab96be], a0.this$));
        }

        ::org::apache::lucene::index::AtomicReaderContext AtomicReader::getContext() const
        {
          return ::org::apache::lucene::index::AtomicReaderContext(env->callObjectMethod(this$, mids$[mid_getContext_c2ef2576]));
        }

        jint AtomicReader::getDocCount(const ::java::lang::String & a0) const
        {
          return env->callIntMethod(this$, mids$[mid_getDocCount_5fdc3f57], a0.this$);
        }

        ::org::apache::lucene::util::Bits AtomicReader::getDocsWithField(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::util::Bits(env->callObjectMethod(this$, mids$[mid_getDocsWithField_e1c6a7db], a0.this$));
        }

        ::org::apache::lucene::index::FieldInfos AtomicReader::getFieldInfos() const
        {
          return ::org::apache::lucene::index::FieldInfos(env->callObjectMethod(this$, mids$[mid_getFieldInfos_9ba20825]));
        }

        ::org::apache::lucene::util::Bits AtomicReader::getLiveDocs() const
        {
          return ::org::apache::lucene::util::Bits(env->callObjectMethod(this$, mids$[mid_getLiveDocs_03c2457d]));
        }

        ::org::apache::lucene::index::NumericDocValues AtomicReader::getNormValues(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::NumericDocValues(env->callObjectMethod(this$, mids$[mid_getNormValues_d2b19f49], a0.this$));
        }

        ::org::apache::lucene::index::NumericDocValues AtomicReader::getNumericDocValues(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::NumericDocValues(env->callObjectMethod(this$, mids$[mid_getNumericDocValues_d2b19f49], a0.this$));
        }

        ::org::apache::lucene::index::SortedDocValues AtomicReader::getSortedDocValues(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::SortedDocValues(env->callObjectMethod(this$, mids$[mid_getSortedDocValues_7b8b1a0a], a0.this$));
        }

        ::org::apache::lucene::index::SortedNumericDocValues AtomicReader::getSortedNumericDocValues(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::SortedNumericDocValues(env->callObjectMethod(this$, mids$[mid_getSortedNumericDocValues_37cd1812], a0.this$));
        }

        ::org::apache::lucene::index::SortedSetDocValues AtomicReader::getSortedSetDocValues(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::SortedSetDocValues(env->callObjectMethod(this$, mids$[mid_getSortedSetDocValues_43e0e807], a0.this$));
        }

        jlong AtomicReader::getSumDocFreq(const ::java::lang::String & a0) const
        {
          return env->callLongMethod(this$, mids$[mid_getSumDocFreq_5fdc3f54], a0.this$);
        }

        jlong AtomicReader::getSumTotalTermFreq(const ::java::lang::String & a0) const
        {
          return env->callLongMethod(this$, mids$[mid_getSumTotalTermFreq_5fdc3f54], a0.this$);
        }

        jboolean AtomicReader::hasNorms(const ::java::lang::String & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasNorms_5fdc3f44], a0.this$);
        }

        void AtomicReader::removeCoreClosedListener(const ::org::apache::lucene::index::AtomicReader$CoreClosedListener & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_removeCoreClosedListener_cbc2818f], a0.this$);
        }

        ::org::apache::lucene::index::DocsEnum AtomicReader::termDocsEnum(const ::org::apache::lucene::index::Term & a0) const
        {
          return ::org::apache::lucene::index::DocsEnum(env->callObjectMethod(this$, mids$[mid_termDocsEnum_d9acd275], a0.this$));
        }

        ::org::apache::lucene::index::DocsAndPositionsEnum AtomicReader::termPositionsEnum(const ::org::apache::lucene::index::Term & a0) const
        {
          return ::org::apache::lucene::index::DocsAndPositionsEnum(env->callObjectMethod(this$, mids$[mid_termPositionsEnum_bf42c6a6], a0.this$));
        }

        ::org::apache::lucene::index::Terms AtomicReader::terms(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::Terms(env->callObjectMethod(this$, mids$[mid_terms_ee262ab4], a0.this$));
        }

        jlong AtomicReader::totalTermFreq(const ::org::apache::lucene::index::Term & a0) const
        {
          return env->callLongMethod(this$, mids$[mid_totalTermFreq_7eca6a9d], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_AtomicReader_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_AtomicReader_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_AtomicReader_addCoreClosedListener(t_AtomicReader *self, PyObject *arg);
        static PyObject *t_AtomicReader_checkIntegrity(t_AtomicReader *self);
        static PyObject *t_AtomicReader_docFreq(t_AtomicReader *self, PyObject *args);
        static PyObject *t_AtomicReader_fields(t_AtomicReader *self);
        static PyObject *t_AtomicReader_getBinaryDocValues(t_AtomicReader *self, PyObject *arg);
        static PyObject *t_AtomicReader_getContext(t_AtomicReader *self, PyObject *args);
        static PyObject *t_AtomicReader_getDocCount(t_AtomicReader *self, PyObject *args);
        static PyObject *t_AtomicReader_getDocsWithField(t_AtomicReader *self, PyObject *arg);
        static PyObject *t_AtomicReader_getFieldInfos(t_AtomicReader *self);
        static PyObject *t_AtomicReader_getLiveDocs(t_AtomicReader *self);
        static PyObject *t_AtomicReader_getNormValues(t_AtomicReader *self, PyObject *arg);
        static PyObject *t_AtomicReader_getNumericDocValues(t_AtomicReader *self, PyObject *arg);
        static PyObject *t_AtomicReader_getSortedDocValues(t_AtomicReader *self, PyObject *arg);
        static PyObject *t_AtomicReader_getSortedNumericDocValues(t_AtomicReader *self, PyObject *arg);
        static PyObject *t_AtomicReader_getSortedSetDocValues(t_AtomicReader *self, PyObject *arg);
        static PyObject *t_AtomicReader_getSumDocFreq(t_AtomicReader *self, PyObject *args);
        static PyObject *t_AtomicReader_getSumTotalTermFreq(t_AtomicReader *self, PyObject *args);
        static PyObject *t_AtomicReader_hasNorms(t_AtomicReader *self, PyObject *arg);
        static PyObject *t_AtomicReader_removeCoreClosedListener(t_AtomicReader *self, PyObject *arg);
        static PyObject *t_AtomicReader_termDocsEnum(t_AtomicReader *self, PyObject *arg);
        static PyObject *t_AtomicReader_termPositionsEnum(t_AtomicReader *self, PyObject *arg);
        static PyObject *t_AtomicReader_terms(t_AtomicReader *self, PyObject *arg);
        static PyObject *t_AtomicReader_totalTermFreq(t_AtomicReader *self, PyObject *args);
        static PyObject *t_AtomicReader_get__context(t_AtomicReader *self, void *data);
        static PyObject *t_AtomicReader_get__fieldInfos(t_AtomicReader *self, void *data);
        static PyObject *t_AtomicReader_get__liveDocs(t_AtomicReader *self, void *data);
        static PyGetSetDef t_AtomicReader__fields_[] = {
          DECLARE_GET_FIELD(t_AtomicReader, context),
          DECLARE_GET_FIELD(t_AtomicReader, fieldInfos),
          DECLARE_GET_FIELD(t_AtomicReader, liveDocs),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_AtomicReader__methods_[] = {
          DECLARE_METHOD(t_AtomicReader, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_AtomicReader, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_AtomicReader, addCoreClosedListener, METH_O),
          DECLARE_METHOD(t_AtomicReader, checkIntegrity, METH_NOARGS),
          DECLARE_METHOD(t_AtomicReader, docFreq, METH_VARARGS),
          DECLARE_METHOD(t_AtomicReader, fields, METH_NOARGS),
          DECLARE_METHOD(t_AtomicReader, getBinaryDocValues, METH_O),
          DECLARE_METHOD(t_AtomicReader, getContext, METH_VARARGS),
          DECLARE_METHOD(t_AtomicReader, getDocCount, METH_VARARGS),
          DECLARE_METHOD(t_AtomicReader, getDocsWithField, METH_O),
          DECLARE_METHOD(t_AtomicReader, getFieldInfos, METH_NOARGS),
          DECLARE_METHOD(t_AtomicReader, getLiveDocs, METH_NOARGS),
          DECLARE_METHOD(t_AtomicReader, getNormValues, METH_O),
          DECLARE_METHOD(t_AtomicReader, getNumericDocValues, METH_O),
          DECLARE_METHOD(t_AtomicReader, getSortedDocValues, METH_O),
          DECLARE_METHOD(t_AtomicReader, getSortedNumericDocValues, METH_O),
          DECLARE_METHOD(t_AtomicReader, getSortedSetDocValues, METH_O),
          DECLARE_METHOD(t_AtomicReader, getSumDocFreq, METH_VARARGS),
          DECLARE_METHOD(t_AtomicReader, getSumTotalTermFreq, METH_VARARGS),
          DECLARE_METHOD(t_AtomicReader, hasNorms, METH_O),
          DECLARE_METHOD(t_AtomicReader, removeCoreClosedListener, METH_O),
          DECLARE_METHOD(t_AtomicReader, termDocsEnum, METH_O),
          DECLARE_METHOD(t_AtomicReader, termPositionsEnum, METH_O),
          DECLARE_METHOD(t_AtomicReader, terms, METH_O),
          DECLARE_METHOD(t_AtomicReader, totalTermFreq, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(AtomicReader, t_AtomicReader, ::org::apache::lucene::index::IndexReader, AtomicReader, abstract_init, 0, 0, t_AtomicReader__fields_, 0, 0);

        void t_AtomicReader::install(PyObject *module)
        {
          installType(&PY_TYPE(AtomicReader), module, "AtomicReader", 0);
          PyDict_SetItemString(PY_TYPE(AtomicReader).tp_dict, "CoreClosedListener", make_descriptor(&PY_TYPE(AtomicReader$CoreClosedListener)));
        }

        void t_AtomicReader::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(AtomicReader).tp_dict, "class_", make_descriptor(AtomicReader::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(AtomicReader).tp_dict, "wrapfn_", make_descriptor(t_AtomicReader::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(AtomicReader).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_AtomicReader_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, AtomicReader::initializeClass, 1)))
            return NULL;
          return t_AtomicReader::wrap_Object(AtomicReader(((t_AtomicReader *) arg)->object.this$));
        }
        static PyObject *t_AtomicReader_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, AtomicReader::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_AtomicReader_addCoreClosedListener(t_AtomicReader *self, PyObject *arg)
        {
          ::org::apache::lucene::index::AtomicReader$CoreClosedListener a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReader$CoreClosedListener::initializeClass, &a0))
          {
            OBJ_CALL(self->object.addCoreClosedListener(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "addCoreClosedListener", arg);
          return NULL;
        }

        static PyObject *t_AtomicReader_checkIntegrity(t_AtomicReader *self)
        {
          OBJ_CALL(self->object.checkIntegrity());
          Py_RETURN_NONE;
        }

        static PyObject *t_AtomicReader_docFreq(t_AtomicReader *self, PyObject *args)
        {
          ::org::apache::lucene::index::Term a0((jobject) NULL);
          jint result;

          if (!parseArgs(args, "k", ::org::apache::lucene::index::Term::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.docFreq(a0));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(AtomicReader), (PyObject *) self, "docFreq", args, 2);
        }

        static PyObject *t_AtomicReader_fields(t_AtomicReader *self)
        {
          ::org::apache::lucene::index::Fields result((jobject) NULL);
          OBJ_CALL(result = self->object.fields());
          return ::org::apache::lucene::index::t_Fields::wrap_Object(result);
        }

        static PyObject *t_AtomicReader_getBinaryDocValues(t_AtomicReader *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::BinaryDocValues result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = self->object.getBinaryDocValues(a0));
            return ::org::apache::lucene::index::t_BinaryDocValues::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getBinaryDocValues", arg);
          return NULL;
        }

        static PyObject *t_AtomicReader_getContext(t_AtomicReader *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReaderContext result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getContext());
            return ::org::apache::lucene::index::t_AtomicReaderContext::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(AtomicReader), (PyObject *) self, "getContext", args, 2);
        }

        static PyObject *t_AtomicReader_getDocCount(t_AtomicReader *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          jint result;

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getDocCount(a0));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(AtomicReader), (PyObject *) self, "getDocCount", args, 2);
        }

        static PyObject *t_AtomicReader_getDocsWithField(t_AtomicReader *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::util::Bits result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = self->object.getDocsWithField(a0));
            return ::org::apache::lucene::util::t_Bits::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getDocsWithField", arg);
          return NULL;
        }

        static PyObject *t_AtomicReader_getFieldInfos(t_AtomicReader *self)
        {
          ::org::apache::lucene::index::FieldInfos result((jobject) NULL);
          OBJ_CALL(result = self->object.getFieldInfos());
          return ::org::apache::lucene::index::t_FieldInfos::wrap_Object(result);
        }

        static PyObject *t_AtomicReader_getLiveDocs(t_AtomicReader *self)
        {
          ::org::apache::lucene::util::Bits result((jobject) NULL);
          OBJ_CALL(result = self->object.getLiveDocs());
          return ::org::apache::lucene::util::t_Bits::wrap_Object(result);
        }

        static PyObject *t_AtomicReader_getNormValues(t_AtomicReader *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::NumericDocValues result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = self->object.getNormValues(a0));
            return ::org::apache::lucene::index::t_NumericDocValues::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getNormValues", arg);
          return NULL;
        }

        static PyObject *t_AtomicReader_getNumericDocValues(t_AtomicReader *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::NumericDocValues result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = self->object.getNumericDocValues(a0));
            return ::org::apache::lucene::index::t_NumericDocValues::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getNumericDocValues", arg);
          return NULL;
        }

        static PyObject *t_AtomicReader_getSortedDocValues(t_AtomicReader *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::SortedDocValues result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = self->object.getSortedDocValues(a0));
            return ::org::apache::lucene::index::t_SortedDocValues::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getSortedDocValues", arg);
          return NULL;
        }

        static PyObject *t_AtomicReader_getSortedNumericDocValues(t_AtomicReader *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::SortedNumericDocValues result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = self->object.getSortedNumericDocValues(a0));
            return ::org::apache::lucene::index::t_SortedNumericDocValues::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getSortedNumericDocValues", arg);
          return NULL;
        }

        static PyObject *t_AtomicReader_getSortedSetDocValues(t_AtomicReader *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::SortedSetDocValues result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = self->object.getSortedSetDocValues(a0));
            return ::org::apache::lucene::index::t_SortedSetDocValues::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getSortedSetDocValues", arg);
          return NULL;
        }

        static PyObject *t_AtomicReader_getSumDocFreq(t_AtomicReader *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          jlong result;

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getSumDocFreq(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(AtomicReader), (PyObject *) self, "getSumDocFreq", args, 2);
        }

        static PyObject *t_AtomicReader_getSumTotalTermFreq(t_AtomicReader *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          jlong result;

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getSumTotalTermFreq(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(AtomicReader), (PyObject *) self, "getSumTotalTermFreq", args, 2);
        }

        static PyObject *t_AtomicReader_hasNorms(t_AtomicReader *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          jboolean result;

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = self->object.hasNorms(a0));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError((PyObject *) self, "hasNorms", arg);
          return NULL;
        }

        static PyObject *t_AtomicReader_removeCoreClosedListener(t_AtomicReader *self, PyObject *arg)
        {
          ::org::apache::lucene::index::AtomicReader$CoreClosedListener a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReader$CoreClosedListener::initializeClass, &a0))
          {
            OBJ_CALL(self->object.removeCoreClosedListener(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "removeCoreClosedListener", arg);
          return NULL;
        }

        static PyObject *t_AtomicReader_termDocsEnum(t_AtomicReader *self, PyObject *arg)
        {
          ::org::apache::lucene::index::Term a0((jobject) NULL);
          ::org::apache::lucene::index::DocsEnum result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::Term::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.termDocsEnum(a0));
            return ::org::apache::lucene::index::t_DocsEnum::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "termDocsEnum", arg);
          return NULL;
        }

        static PyObject *t_AtomicReader_termPositionsEnum(t_AtomicReader *self, PyObject *arg)
        {
          ::org::apache::lucene::index::Term a0((jobject) NULL);
          ::org::apache::lucene::index::DocsAndPositionsEnum result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::Term::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.termPositionsEnum(a0));
            return ::org::apache::lucene::index::t_DocsAndPositionsEnum::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "termPositionsEnum", arg);
          return NULL;
        }

        static PyObject *t_AtomicReader_terms(t_AtomicReader *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::Terms result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = self->object.terms(a0));
            return ::org::apache::lucene::index::t_Terms::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "terms", arg);
          return NULL;
        }

        static PyObject *t_AtomicReader_totalTermFreq(t_AtomicReader *self, PyObject *args)
        {
          ::org::apache::lucene::index::Term a0((jobject) NULL);
          jlong result;

          if (!parseArgs(args, "k", ::org::apache::lucene::index::Term::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.totalTermFreq(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(AtomicReader), (PyObject *) self, "totalTermFreq", args, 2);
        }

        static PyObject *t_AtomicReader_get__context(t_AtomicReader *self, void *data)
        {
          ::org::apache::lucene::index::AtomicReaderContext value((jobject) NULL);
          OBJ_CALL(value = self->object.getContext());
          return ::org::apache::lucene::index::t_AtomicReaderContext::wrap_Object(value);
        }

        static PyObject *t_AtomicReader_get__fieldInfos(t_AtomicReader *self, void *data)
        {
          ::org::apache::lucene::index::FieldInfos value((jobject) NULL);
          OBJ_CALL(value = self->object.getFieldInfos());
          return ::org::apache::lucene::index::t_FieldInfos::wrap_Object(value);
        }

        static PyObject *t_AtomicReader_get__liveDocs(t_AtomicReader *self, void *data)
        {
          ::org::apache::lucene::util::Bits value((jobject) NULL);
          OBJ_CALL(value = self->object.getLiveDocs());
          return ::org::apache::lucene::util::t_Bits::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene40/Lucene40LiveDocsFormat.h"
#include "org/apache/lucene/index/SegmentCommitInfo.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "java/util/Collection.h"
#include "org/apache/lucene/util/Bits.h"
#include "org/apache/lucene/store/IOContext.h"
#include "org/apache/lucene/util/MutableBits.h"
#include "java/io/IOException.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene40 {

          ::java::lang::Class *Lucene40LiveDocsFormat::class$ = NULL;
          jmethodID *Lucene40LiveDocsFormat::mids$ = NULL;
          bool Lucene40LiveDocsFormat::live$ = false;

          jclass Lucene40LiveDocsFormat::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene40/Lucene40LiveDocsFormat");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_files_cb8dcbcf] = env->getMethodID(cls, "files", "(Lorg/apache/lucene/index/SegmentCommitInfo;Ljava/util/Collection;)V");
              mids$[mid_newLiveDocs_f311e97a] = env->getMethodID(cls, "newLiveDocs", "(I)Lorg/apache/lucene/util/MutableBits;");
              mids$[mid_newLiveDocs_e3a7ca1a] = env->getMethodID(cls, "newLiveDocs", "(Lorg/apache/lucene/util/Bits;)Lorg/apache/lucene/util/MutableBits;");
              mids$[mid_readLiveDocs_60c7b77b] = env->getMethodID(cls, "readLiveDocs", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/SegmentCommitInfo;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/util/Bits;");
              mids$[mid_writeLiveDocs_37123b35] = env->getMethodID(cls, "writeLiveDocs", "(Lorg/apache/lucene/util/MutableBits;Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/SegmentCommitInfo;ILorg/apache/lucene/store/IOContext;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene40LiveDocsFormat::Lucene40LiveDocsFormat() : ::org::apache::lucene::codecs::LiveDocsFormat(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          void Lucene40LiveDocsFormat::files(const ::org::apache::lucene::index::SegmentCommitInfo & a0, const ::java::util::Collection & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_files_cb8dcbcf], a0.this$, a1.this$);
          }

          ::org::apache::lucene::util::MutableBits Lucene40LiveDocsFormat::newLiveDocs(jint a0) const
          {
            return ::org::apache::lucene::util::MutableBits(env->callObjectMethod(this$, mids$[mid_newLiveDocs_f311e97a], a0));
          }

          ::org::apache::lucene::util::MutableBits Lucene40LiveDocsFormat::newLiveDocs(const ::org::apache::lucene::util::Bits & a0) const
          {
            return ::org::apache::lucene::util::MutableBits(env->callObjectMethod(this$, mids$[mid_newLiveDocs_e3a7ca1a], a0.this$));
          }

          ::org::apache::lucene::util::Bits Lucene40LiveDocsFormat::readLiveDocs(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::SegmentCommitInfo & a1, const ::org::apache::lucene::store::IOContext & a2) const
          {
            return ::org::apache::lucene::util::Bits(env->callObjectMethod(this$, mids$[mid_readLiveDocs_60c7b77b], a0.this$, a1.this$, a2.this$));
          }

          void Lucene40LiveDocsFormat::writeLiveDocs(const ::org::apache::lucene::util::MutableBits & a0, const ::org::apache::lucene::store::Directory & a1, const ::org::apache::lucene::index::SegmentCommitInfo & a2, jint a3, const ::org::apache::lucene::store::IOContext & a4) const
          {
            env->callVoidMethod(this$, mids$[mid_writeLiveDocs_37123b35], a0.this$, a1.this$, a2.this$, a3, a4.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene40 {
          static PyObject *t_Lucene40LiveDocsFormat_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene40LiveDocsFormat_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene40LiveDocsFormat_init_(t_Lucene40LiveDocsFormat *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene40LiveDocsFormat_files(t_Lucene40LiveDocsFormat *self, PyObject *args);
          static PyObject *t_Lucene40LiveDocsFormat_newLiveDocs(t_Lucene40LiveDocsFormat *self, PyObject *args);
          static PyObject *t_Lucene40LiveDocsFormat_readLiveDocs(t_Lucene40LiveDocsFormat *self, PyObject *args);
          static PyObject *t_Lucene40LiveDocsFormat_writeLiveDocs(t_Lucene40LiveDocsFormat *self, PyObject *args);

          static PyMethodDef t_Lucene40LiveDocsFormat__methods_[] = {
            DECLARE_METHOD(t_Lucene40LiveDocsFormat, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene40LiveDocsFormat, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene40LiveDocsFormat, files, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40LiveDocsFormat, newLiveDocs, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40LiveDocsFormat, readLiveDocs, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40LiveDocsFormat, writeLiveDocs, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene40LiveDocsFormat, t_Lucene40LiveDocsFormat, ::org::apache::lucene::codecs::LiveDocsFormat, Lucene40LiveDocsFormat, t_Lucene40LiveDocsFormat_init_, 0, 0, 0, 0, 0);

          void t_Lucene40LiveDocsFormat::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene40LiveDocsFormat), module, "Lucene40LiveDocsFormat", 0);
          }

          void t_Lucene40LiveDocsFormat::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene40LiveDocsFormat).tp_dict, "class_", make_descriptor(Lucene40LiveDocsFormat::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene40LiveDocsFormat).tp_dict, "wrapfn_", make_descriptor(t_Lucene40LiveDocsFormat::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene40LiveDocsFormat).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lucene40LiveDocsFormat_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene40LiveDocsFormat::initializeClass, 1)))
              return NULL;
            return t_Lucene40LiveDocsFormat::wrap_Object(Lucene40LiveDocsFormat(((t_Lucene40LiveDocsFormat *) arg)->object.this$));
          }
          static PyObject *t_Lucene40LiveDocsFormat_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene40LiveDocsFormat::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene40LiveDocsFormat_init_(t_Lucene40LiveDocsFormat *self, PyObject *args, PyObject *kwds)
          {
            Lucene40LiveDocsFormat object((jobject) NULL);

            INT_CALL(object = Lucene40LiveDocsFormat());
            self->object = object;

            return 0;
          }

          static PyObject *t_Lucene40LiveDocsFormat_files(t_Lucene40LiveDocsFormat *self, PyObject *args)
          {
            ::org::apache::lucene::index::SegmentCommitInfo a0((jobject) NULL);
            ::java::util::Collection a1((jobject) NULL);
            PyTypeObject **p1;

            if (!parseArgs(args, "kK", ::org::apache::lucene::index::SegmentCommitInfo::initializeClass, ::java::util::Collection::initializeClass, &a0, &a1, &p1, ::java::util::t_Collection::parameters_))
            {
              OBJ_CALL(self->object.files(a0, a1));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene40LiveDocsFormat), (PyObject *) self, "files", args, 2);
          }

          static PyObject *t_Lucene40LiveDocsFormat_newLiveDocs(t_Lucene40LiveDocsFormat *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                jint a0;
                ::org::apache::lucene::util::MutableBits result((jobject) NULL);

                if (!parseArgs(args, "I", &a0))
                {
                  OBJ_CALL(result = self->object.newLiveDocs(a0));
                  return ::org::apache::lucene::util::t_MutableBits::wrap_Object(result);
                }
              }
              {
                ::org::apache::lucene::util::Bits a0((jobject) NULL);
                ::org::apache::lucene::util::MutableBits result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::util::Bits::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.newLiveDocs(a0));
                  return ::org::apache::lucene::util::t_MutableBits::wrap_Object(result);
                }
              }
            }

            return callSuper(&PY_TYPE(Lucene40LiveDocsFormat), (PyObject *) self, "newLiveDocs", args, 2);
          }

          static PyObject *t_Lucene40LiveDocsFormat_readLiveDocs(t_Lucene40LiveDocsFormat *self, PyObject *args)
          {
            ::org::apache::lucene::store::Directory a0((jobject) NULL);
            ::org::apache::lucene::index::SegmentCommitInfo a1((jobject) NULL);
            ::org::apache::lucene::store::IOContext a2((jobject) NULL);
            ::org::apache::lucene::util::Bits result((jobject) NULL);

            if (!parseArgs(args, "kkk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::SegmentCommitInfo::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.readLiveDocs(a0, a1, a2));
              return ::org::apache::lucene::util::t_Bits::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene40LiveDocsFormat), (PyObject *) self, "readLiveDocs", args, 2);
          }

          static PyObject *t_Lucene40LiveDocsFormat_writeLiveDocs(t_Lucene40LiveDocsFormat *self, PyObject *args)
          {
            ::org::apache::lucene::util::MutableBits a0((jobject) NULL);
            ::org::apache::lucene::store::Directory a1((jobject) NULL);
            ::org::apache::lucene::index::SegmentCommitInfo a2((jobject) NULL);
            jint a3;
            ::org::apache::lucene::store::IOContext a4((jobject) NULL);

            if (!parseArgs(args, "kkkIk", ::org::apache::lucene::util::MutableBits::initializeClass, ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::SegmentCommitInfo::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2, &a3, &a4))
            {
              OBJ_CALL(self->object.writeLiveDocs(a0, a1, a2, a3, a4));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene40LiveDocsFormat), (PyObject *) self, "writeLiveDocs", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/MaxNonCompetitiveBoostAttributeImpl.h"
#include "org/apache/lucene/search/MaxNonCompetitiveBoostAttribute.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *MaxNonCompetitiveBoostAttributeImpl::class$ = NULL;
        jmethodID *MaxNonCompetitiveBoostAttributeImpl::mids$ = NULL;
        bool MaxNonCompetitiveBoostAttributeImpl::live$ = false;

        jclass MaxNonCompetitiveBoostAttributeImpl::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/MaxNonCompetitiveBoostAttributeImpl");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
            mids$[mid_copyTo_d86caa9f] = env->getMethodID(cls, "copyTo", "(Lorg/apache/lucene/util/AttributeImpl;)V");
            mids$[mid_getCompetitiveTerm_4ae19461] = env->getMethodID(cls, "getCompetitiveTerm", "()Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_getMaxNonCompetitiveBoost_54c6a176] = env->getMethodID(cls, "getMaxNonCompetitiveBoost", "()F");
            mids$[mid_setCompetitiveTerm_7bc03dc4] = env->getMethodID(cls, "setCompetitiveTerm", "(Lorg/apache/lucene/util/BytesRef;)V");
            mids$[mid_setMaxNonCompetitiveBoost_06298cab] = env->getMethodID(cls, "setMaxNonCompetitiveBoost", "(F)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        MaxNonCompetitiveBoostAttributeImpl::MaxNonCompetitiveBoostAttributeImpl() : ::org::apache::lucene::util::AttributeImpl(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void MaxNonCompetitiveBoostAttributeImpl::clear() const
        {
          env->callVoidMethod(this$, mids$[mid_clear_54c6a166]);
        }

        void MaxNonCompetitiveBoostAttributeImpl::copyTo(const ::org::apache::lucene::util::AttributeImpl & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_copyTo_d86caa9f], a0.this$);
        }

        ::org::apache::lucene::util::BytesRef MaxNonCompetitiveBoostAttributeImpl::getCompetitiveTerm() const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_getCompetitiveTerm_4ae19461]));
        }

        jfloat MaxNonCompetitiveBoostAttributeImpl::getMaxNonCompetitiveBoost() const
        {
          return env->callFloatMethod(this$, mids$[mid_getMaxNonCompetitiveBoost_54c6a176]);
        }

        void MaxNonCompetitiveBoostAttributeImpl::setCompetitiveTerm(const ::org::apache::lucene::util::BytesRef & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setCompetitiveTerm_7bc03dc4], a0.this$);
        }

        void MaxNonCompetitiveBoostAttributeImpl::setMaxNonCompetitiveBoost(jfloat a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setMaxNonCompetitiveBoost_06298cab], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_MaxNonCompetitiveBoostAttributeImpl_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MaxNonCompetitiveBoostAttributeImpl_instance_(PyTypeObject *type, PyObject *arg);
        static int t_MaxNonCompetitiveBoostAttributeImpl_init_(t_MaxNonCompetitiveBoostAttributeImpl *self, PyObject *args, PyObject *kwds);
        static PyObject *t_MaxNonCompetitiveBoostAttributeImpl_clear(t_MaxNonCompetitiveBoostAttributeImpl *self, PyObject *args);
        static PyObject *t_MaxNonCompetitiveBoostAttributeImpl_copyTo(t_MaxNonCompetitiveBoostAttributeImpl *self, PyObject *args);
        static PyObject *t_MaxNonCompetitiveBoostAttributeImpl_getCompetitiveTerm(t_MaxNonCompetitiveBoostAttributeImpl *self);
        static PyObject *t_MaxNonCompetitiveBoostAttributeImpl_getMaxNonCompetitiveBoost(t_MaxNonCompetitiveBoostAttributeImpl *self);
        static PyObject *t_MaxNonCompetitiveBoostAttributeImpl_setCompetitiveTerm(t_MaxNonCompetitiveBoostAttributeImpl *self, PyObject *arg);
        static PyObject *t_MaxNonCompetitiveBoostAttributeImpl_setMaxNonCompetitiveBoost(t_MaxNonCompetitiveBoostAttributeImpl *self, PyObject *arg);
        static PyObject *t_MaxNonCompetitiveBoostAttributeImpl_get__competitiveTerm(t_MaxNonCompetitiveBoostAttributeImpl *self, void *data);
        static int t_MaxNonCompetitiveBoostAttributeImpl_set__competitiveTerm(t_MaxNonCompetitiveBoostAttributeImpl *self, PyObject *arg, void *data);
        static PyObject *t_MaxNonCompetitiveBoostAttributeImpl_get__maxNonCompetitiveBoost(t_MaxNonCompetitiveBoostAttributeImpl *self, void *data);
        static int t_MaxNonCompetitiveBoostAttributeImpl_set__maxNonCompetitiveBoost(t_MaxNonCompetitiveBoostAttributeImpl *self, PyObject *arg, void *data);
        static PyGetSetDef t_MaxNonCompetitiveBoostAttributeImpl__fields_[] = {
          DECLARE_GETSET_FIELD(t_MaxNonCompetitiveBoostAttributeImpl, competitiveTerm),
          DECLARE_GETSET_FIELD(t_MaxNonCompetitiveBoostAttributeImpl, maxNonCompetitiveBoost),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_MaxNonCompetitiveBoostAttributeImpl__methods_[] = {
          DECLARE_METHOD(t_MaxNonCompetitiveBoostAttributeImpl, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MaxNonCompetitiveBoostAttributeImpl, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MaxNonCompetitiveBoostAttributeImpl, clear, METH_VARARGS),
          DECLARE_METHOD(t_MaxNonCompetitiveBoostAttributeImpl, copyTo, METH_VARARGS),
          DECLARE_METHOD(t_MaxNonCompetitiveBoostAttributeImpl, getCompetitiveTerm, METH_NOARGS),
          DECLARE_METHOD(t_MaxNonCompetitiveBoostAttributeImpl, getMaxNonCompetitiveBoost, METH_NOARGS),
          DECLARE_METHOD(t_MaxNonCompetitiveBoostAttributeImpl, setCompetitiveTerm, METH_O),
          DECLARE_METHOD(t_MaxNonCompetitiveBoostAttributeImpl, setMaxNonCompetitiveBoost, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MaxNonCompetitiveBoostAttributeImpl, t_MaxNonCompetitiveBoostAttributeImpl, ::org::apache::lucene::util::AttributeImpl, MaxNonCompetitiveBoostAttributeImpl, t_MaxNonCompetitiveBoostAttributeImpl_init_, 0, 0, t_MaxNonCompetitiveBoostAttributeImpl__fields_, 0, 0);

        void t_MaxNonCompetitiveBoostAttributeImpl::install(PyObject *module)
        {
          installType(&PY_TYPE(MaxNonCompetitiveBoostAttributeImpl), module, "MaxNonCompetitiveBoostAttributeImpl", 0);
        }

        void t_MaxNonCompetitiveBoostAttributeImpl::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MaxNonCompetitiveBoostAttributeImpl).tp_dict, "class_", make_descriptor(MaxNonCompetitiveBoostAttributeImpl::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MaxNonCompetitiveBoostAttributeImpl).tp_dict, "wrapfn_", make_descriptor(t_MaxNonCompetitiveBoostAttributeImpl::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MaxNonCompetitiveBoostAttributeImpl).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MaxNonCompetitiveBoostAttributeImpl_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MaxNonCompetitiveBoostAttributeImpl::initializeClass, 1)))
            return NULL;
          return t_MaxNonCompetitiveBoostAttributeImpl::wrap_Object(MaxNonCompetitiveBoostAttributeImpl(((t_MaxNonCompetitiveBoostAttributeImpl *) arg)->object.this$));
        }
        static PyObject *t_MaxNonCompetitiveBoostAttributeImpl_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MaxNonCompetitiveBoostAttributeImpl::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_MaxNonCompetitiveBoostAttributeImpl_init_(t_MaxNonCompetitiveBoostAttributeImpl *self, PyObject *args, PyObject *kwds)
        {
          MaxNonCompetitiveBoostAttributeImpl object((jobject) NULL);

          INT_CALL(object = MaxNonCompetitiveBoostAttributeImpl());
          self->object = object;

          return 0;
        }

        static PyObject *t_MaxNonCompetitiveBoostAttributeImpl_clear(t_MaxNonCompetitiveBoostAttributeImpl *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.clear());
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(MaxNonCompetitiveBoostAttributeImpl), (PyObject *) self, "clear", args, 2);
        }

        static PyObject *t_MaxNonCompetitiveBoostAttributeImpl_copyTo(t_MaxNonCompetitiveBoostAttributeImpl *self, PyObject *args)
        {
          ::org::apache::lucene::util::AttributeImpl a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::util::AttributeImpl::initializeClass, &a0))
          {
            OBJ_CALL(self->object.copyTo(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(MaxNonCompetitiveBoostAttributeImpl), (PyObject *) self, "copyTo", args, 2);
        }

        static PyObject *t_MaxNonCompetitiveBoostAttributeImpl_getCompetitiveTerm(t_MaxNonCompetitiveBoostAttributeImpl *self)
        {
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);
          OBJ_CALL(result = self->object.getCompetitiveTerm());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
        }

        static PyObject *t_MaxNonCompetitiveBoostAttributeImpl_getMaxNonCompetitiveBoost(t_MaxNonCompetitiveBoostAttributeImpl *self)
        {
          jfloat result;
          OBJ_CALL(result = self->object.getMaxNonCompetitiveBoost());
          return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_MaxNonCompetitiveBoostAttributeImpl_setCompetitiveTerm(t_MaxNonCompetitiveBoostAttributeImpl *self, PyObject *arg)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setCompetitiveTerm(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setCompetitiveTerm", arg);
          return NULL;
        }

        static PyObject *t_MaxNonCompetitiveBoostAttributeImpl_setMaxNonCompetitiveBoost(t_MaxNonCompetitiveBoostAttributeImpl *self, PyObject *arg)
        {
          jfloat a0;

          if (!parseArg(arg, "F", &a0))
          {
            OBJ_CALL(self->object.setMaxNonCompetitiveBoost(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setMaxNonCompetitiveBoost", arg);
          return NULL;
        }

        static PyObject *t_MaxNonCompetitiveBoostAttributeImpl_get__competitiveTerm(t_MaxNonCompetitiveBoostAttributeImpl *self, void *data)
        {
          ::org::apache::lucene::util::BytesRef value((jobject) NULL);
          OBJ_CALL(value = self->object.getCompetitiveTerm());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(value);
        }
        static int t_MaxNonCompetitiveBoostAttributeImpl_set__competitiveTerm(t_MaxNonCompetitiveBoostAttributeImpl *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::util::BytesRef value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &value))
            {
              INT_CALL(self->object.setCompetitiveTerm(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "competitiveTerm", arg);
          return -1;
        }

        static PyObject *t_MaxNonCompetitiveBoostAttributeImpl_get__maxNonCompetitiveBoost(t_MaxNonCompetitiveBoostAttributeImpl *self, void *data)
        {
          jfloat value;
          OBJ_CALL(value = self->object.getMaxNonCompetitiveBoost());
          return PyFloat_FromDouble((double) value);
        }
        static int t_MaxNonCompetitiveBoostAttributeImpl_set__maxNonCompetitiveBoost(t_MaxNonCompetitiveBoostAttributeImpl *self, PyObject *arg, void *data)
        {
          {
            jfloat value;
            if (!parseArg(arg, "F", &value))
            {
              INT_CALL(self->object.setMaxNonCompetitiveBoost(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "maxNonCompetitiveBoost", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/lang/Enum.h"
#include "java/lang/Class.h"
#include "java/lang/Comparable.h"
#include "java/io/Serializable.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace java {
  namespace lang {

    ::java::lang::Class *Enum::class$ = NULL;
    jmethodID *Enum::mids$ = NULL;
    bool Enum::live$ = false;

    jclass Enum::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/lang/Enum");

        mids$ = new jmethodID[max_mid];
        mids$[mid_compareTo_618aa849] = env->getMethodID(cls, "compareTo", "(Ljava/lang/Enum;)I");
        mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
        mids$[mid_getDeclaringClass_44a5f2c9] = env->getMethodID(cls, "getDeclaringClass", "()Ljava/lang/Class;");
        mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
        mids$[mid_name_14c7b5c5] = env->getMethodID(cls, "name", "()Ljava/lang/String;");
        mids$[mid_ordinal_54c6a179] = env->getMethodID(cls, "ordinal", "()I");
        mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
        mids$[mid_valueOf_46e8491f] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Enum;");
        mids$[mid_finalize_54c6a166] = env->getMethodID(cls, "finalize", "()V");
        mids$[mid_clone_846352c3] = env->getMethodID(cls, "clone", "()Ljava/lang/Object;");

        class$ = (::java::lang::Class *) new JObject(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    jint Enum::compareTo(const Enum & a0) const
    {
      return env->callIntMethod(this$, mids$[mid_compareTo_618aa849], a0.this$);
    }

    jboolean Enum::equals(const ::java::lang::Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
    }

    ::java::lang::Class Enum::getDeclaringClass() const
    {
      return ::java::lang::Class(env->callObjectMethod(this$, mids$[mid_getDeclaringClass_44a5f2c9]));
    }

    jint Enum::hashCode() const
    {
      return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
    }

    ::java::lang::String Enum::name() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_name_14c7b5c5]));
    }

    jint Enum::ordinal() const
    {
      return env->callIntMethod(this$, mids$[mid_ordinal_54c6a179]);
    }

    ::java::lang::String Enum::toString() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
    }

    Enum Enum::valueOf(const ::java::lang::Class & a0, const ::java::lang::String & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return Enum(env->callStaticObjectMethod(cls, mids$[mid_valueOf_46e8491f], a0.this$, a1.this$));
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace lang {
    static PyObject *t_Enum_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Enum_instance_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Enum_of_(t_Enum *self, PyObject *args);
    static PyObject *t_Enum_compareTo(t_Enum *self, PyObject *arg);
    static PyObject *t_Enum_equals(t_Enum *self, PyObject *args);
    static PyObject *t_Enum_getDeclaringClass(t_Enum *self);
    static PyObject *t_Enum_hashCode(t_Enum *self, PyObject *args);
    static PyObject *t_Enum_name(t_Enum *self);
    static PyObject *t_Enum_ordinal(t_Enum *self);
    static PyObject *t_Enum_toString(t_Enum *self, PyObject *args);
    static PyObject *t_Enum_valueOf(PyTypeObject *type, PyObject *args);
    static PyObject *t_Enum_get__declaringClass(t_Enum *self, void *data);
    static PyObject *t_Enum_get__parameters_(t_Enum *self, void *data);
    static PyGetSetDef t_Enum__fields_[] = {
      DECLARE_GET_FIELD(t_Enum, declaringClass),
      DECLARE_GET_FIELD(t_Enum, parameters_),
      { NULL, NULL, NULL, NULL, NULL }
    };

    static PyMethodDef t_Enum__methods_[] = {
      DECLARE_METHOD(t_Enum, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Enum, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Enum, of_, METH_VARARGS),
      DECLARE_METHOD(t_Enum, compareTo, METH_O),
      DECLARE_METHOD(t_Enum, equals, METH_VARARGS),
      DECLARE_METHOD(t_Enum, getDeclaringClass, METH_NOARGS),
      DECLARE_METHOD(t_Enum, hashCode, METH_VARARGS),
      DECLARE_METHOD(t_Enum, name, METH_NOARGS),
      DECLARE_METHOD(t_Enum, ordinal, METH_NOARGS),
      DECLARE_METHOD(t_Enum, toString, METH_VARARGS),
      DECLARE_METHOD(t_Enum, valueOf, METH_VARARGS | METH_CLASS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(Enum, t_Enum, ::java::lang::Object, Enum, abstract_init, 0, 0, t_Enum__fields_, 0, 0);
    PyObject *t_Enum::wrap_Object(const Enum& object, PyTypeObject *p0)
    {
      PyObject *obj = t_Enum::wrap_Object(object);
      if (obj != NULL && obj != Py_None)
      {
        t_Enum *self = (t_Enum *) obj;
        self->parameters[0] = p0;
      }
      return obj;
    }

    PyObject *t_Enum::wrap_jobject(const jobject& object, PyTypeObject *p0)
    {
      PyObject *obj = t_Enum::wrap_jobject(object);
      if (obj != NULL && obj != Py_None)
      {
        t_Enum *self = (t_Enum *) obj;
        self->parameters[0] = p0;
      }
      return obj;
    }

    void t_Enum::install(PyObject *module)
    {
      installType(&PY_TYPE(Enum), module, "Enum", 0);
    }

    void t_Enum::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(Enum).tp_dict, "class_", make_descriptor(Enum::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(Enum).tp_dict, "wrapfn_", make_descriptor(t_Enum::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(Enum).tp_dict, "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_Enum_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, Enum::initializeClass, 1)))
        return NULL;
      return t_Enum::wrap_Object(Enum(((t_Enum *) arg)->object.this$));
    }
    static PyObject *t_Enum_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, Enum::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static PyObject *t_Enum_of_(t_Enum *self, PyObject *args)
    {
      if (!parseArg(args, "T", 1, &(self->parameters)))
        Py_RETURN_SELF;
      return PyErr_SetArgsError((PyObject *) self, "of_", args);
    }

    static PyObject *t_Enum_compareTo(t_Enum *self, PyObject *arg)
    {
      Enum a0((jobject) NULL);
      PyTypeObject **p0;
      jint result;

      if (!parseArg(arg, "K", Enum::initializeClass, &a0, &p0, t_Enum::parameters_))
      {
        OBJ_CALL(result = self->object.compareTo(a0));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError((PyObject *) self, "compareTo", arg);
      return NULL;
    }

    static PyObject *t_Enum_equals(t_Enum *self, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      jboolean result;

      if (!parseArgs(args, "o", &a0))
      {
        OBJ_CALL(result = self->object.equals(a0));
        Py_RETURN_BOOL(result);
      }

      return callSuper(&PY_TYPE(Enum), (PyObject *) self, "equals", args, 2);
    }

    static PyObject *t_Enum_getDeclaringClass(t_Enum *self)
    {
      ::java::lang::Class result((jobject) NULL);
      OBJ_CALL(result = self->object.getDeclaringClass());
      return ::java::lang::t_Class::wrap_Object(result, self->parameters[0]);
    }

    static PyObject *t_Enum_hashCode(t_Enum *self, PyObject *args)
    {
      jint result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.hashCode());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(Enum), (PyObject *) self, "hashCode", args, 2);
    }

    static PyObject *t_Enum_name(t_Enum *self)
    {
      ::java::lang::String result((jobject) NULL);
      OBJ_CALL(result = self->object.name());
      return j2p(result);
    }

    static PyObject *t_Enum_ordinal(t_Enum *self)
    {
      jint result;
      OBJ_CALL(result = self->object.ordinal());
      return PyInt_FromLong((long) result);
    }

    static PyObject *t_Enum_toString(t_Enum *self, PyObject *args)
    {
      ::java::lang::String result((jobject) NULL);

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.toString());
        return j2p(result);
      }

      return callSuper(&PY_TYPE(Enum), (PyObject *) self, "toString", args, 2);
    }

    static PyObject *t_Enum_valueOf(PyTypeObject *type, PyObject *args)
    {
      ::java::lang::Class a0((jobject) NULL);
      PyTypeObject **p0;
      ::java::lang::String a1((jobject) NULL);
      Enum result((jobject) NULL);

      if (!parseArgs(args, "Ks", ::java::lang::Class::initializeClass, &a0, &p0, ::java::lang::t_Class::parameters_, &a1))
      {
        OBJ_CALL(result = ::java::lang::Enum::valueOf(a0, a1));
        return p0 != NULL && p0[0] != NULL ? wrapType(p0[0], result.this$) : t_Enum::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "valueOf", args);
      return NULL;
    }
    static PyObject *t_Enum_get__parameters_(t_Enum *self, void *data)
    {
      return typeParameters(self->parameters, sizeof(self->parameters));
    }

    static PyObject *t_Enum_get__declaringClass(t_Enum *self, void *data)
    {
      ::java::lang::Class value((jobject) NULL);
      OBJ_CALL(value = self->object.getDeclaringClass());
      return ::java::lang::t_Class::wrap_Object(value);
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spans/SpanQuery.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "org/apache/lucene/index/TermContext.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/Bits.h"
#include "org/apache/lucene/index/Term.h"
#include "org/apache/lucene/search/Weight.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/spans/Spans.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {

          ::java::lang::Class *SpanQuery::class$ = NULL;
          jmethodID *SpanQuery::mids$ = NULL;
          bool SpanQuery::live$ = false;

          jclass SpanQuery::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spans/SpanQuery");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_createWeight_367763cb] = env->getMethodID(cls, "createWeight", "(Lorg/apache/lucene/search/IndexSearcher;)Lorg/apache/lucene/search/Weight;");
              mids$[mid_getField_14c7b5c5] = env->getMethodID(cls, "getField", "()Ljava/lang/String;");
              mids$[mid_getSpans_f003cb44] = env->getMethodID(cls, "getSpans", "(Lorg/apache/lucene/index/AtomicReaderContext;Lorg/apache/lucene/util/Bits;Ljava/util/Map;)Lorg/apache/lucene/search/spans/Spans;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SpanQuery::SpanQuery() : ::org::apache::lucene::search::Query(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::search::Weight SpanQuery::createWeight(const ::org::apache::lucene::search::IndexSearcher & a0) const
          {
            return ::org::apache::lucene::search::Weight(env->callObjectMethod(this$, mids$[mid_createWeight_367763cb], a0.this$));
          }

          ::java::lang::String SpanQuery::getField() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getField_14c7b5c5]));
          }

          ::org::apache::lucene::search::spans::Spans SpanQuery::getSpans(const ::org::apache::lucene::index::AtomicReaderContext & a0, const ::org::apache::lucene::util::Bits & a1, const ::java::util::Map & a2) const
          {
            return ::org::apache::lucene::search::spans::Spans(env->callObjectMethod(this$, mids$[mid_getSpans_f003cb44], a0.this$, a1.this$, a2.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {
          static PyObject *t_SpanQuery_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SpanQuery_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SpanQuery_init_(t_SpanQuery *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SpanQuery_createWeight(t_SpanQuery *self, PyObject *args);
          static PyObject *t_SpanQuery_getField(t_SpanQuery *self);
          static PyObject *t_SpanQuery_getSpans(t_SpanQuery *self, PyObject *args);
          static PyObject *t_SpanQuery_get__field(t_SpanQuery *self, void *data);
          static PyGetSetDef t_SpanQuery__fields_[] = {
            DECLARE_GET_FIELD(t_SpanQuery, field),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SpanQuery__methods_[] = {
            DECLARE_METHOD(t_SpanQuery, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanQuery, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanQuery, createWeight, METH_VARARGS),
            DECLARE_METHOD(t_SpanQuery, getField, METH_NOARGS),
            DECLARE_METHOD(t_SpanQuery, getSpans, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SpanQuery, t_SpanQuery, ::org::apache::lucene::search::Query, SpanQuery, t_SpanQuery_init_, 0, 0, t_SpanQuery__fields_, 0, 0);

          void t_SpanQuery::install(PyObject *module)
          {
            installType(&PY_TYPE(SpanQuery), module, "SpanQuery", 0);
          }

          void t_SpanQuery::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SpanQuery).tp_dict, "class_", make_descriptor(SpanQuery::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SpanQuery).tp_dict, "wrapfn_", make_descriptor(t_SpanQuery::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SpanQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SpanQuery_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SpanQuery::initializeClass, 1)))
              return NULL;
            return t_SpanQuery::wrap_Object(SpanQuery(((t_SpanQuery *) arg)->object.this$));
          }
          static PyObject *t_SpanQuery_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SpanQuery::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SpanQuery_init_(t_SpanQuery *self, PyObject *args, PyObject *kwds)
          {
            SpanQuery object((jobject) NULL);

            INT_CALL(object = SpanQuery());
            self->object = object;

            return 0;
          }

          static PyObject *t_SpanQuery_createWeight(t_SpanQuery *self, PyObject *args)
          {
            ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
            ::org::apache::lucene::search::Weight result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.createWeight(a0));
              return ::org::apache::lucene::search::t_Weight::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(SpanQuery), (PyObject *) self, "createWeight", args, 2);
          }

          static PyObject *t_SpanQuery_getField(t_SpanQuery *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.getField());
            return j2p(result);
          }

          static PyObject *t_SpanQuery_getSpans(t_SpanQuery *self, PyObject *args)
          {
            ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
            ::org::apache::lucene::util::Bits a1((jobject) NULL);
            ::java::util::Map a2((jobject) NULL);
            PyTypeObject **p2;
            ::org::apache::lucene::search::spans::Spans result((jobject) NULL);

            if (!parseArgs(args, "kkK", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, ::java::util::Map::initializeClass, &a0, &a1, &a2, &p2, ::java::util::t_Map::parameters_))
            {
              OBJ_CALL(result = self->object.getSpans(a0, a1, a2));
              return ::org::apache::lucene::search::spans::t_Spans::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getSpans", args);
            return NULL;
          }

          static PyObject *t_SpanQuery_get__field(t_SpanQuery *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getField());
            return j2p(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/highlight/Formatter.h"
#include "org/apache/lucene/search/highlight/TokenGroup.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {

          ::java::lang::Class *Formatter::class$ = NULL;
          jmethodID *Formatter::mids$ = NULL;
          bool Formatter::live$ = false;

          jclass Formatter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/highlight/Formatter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_highlightTerm_8838cc58] = env->getMethodID(cls, "highlightTerm", "(Ljava/lang/String;Lorg/apache/lucene/search/highlight/TokenGroup;)Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::java::lang::String Formatter::highlightTerm(const ::java::lang::String & a0, const ::org::apache::lucene::search::highlight::TokenGroup & a1) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_highlightTerm_8838cc58], a0.this$, a1.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {
          static PyObject *t_Formatter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Formatter_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Formatter_highlightTerm(t_Formatter *self, PyObject *args);

          static PyMethodDef t_Formatter__methods_[] = {
            DECLARE_METHOD(t_Formatter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Formatter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Formatter, highlightTerm, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Formatter, t_Formatter, ::java::lang::Object, Formatter, abstract_init, 0, 0, 0, 0, 0);

          void t_Formatter::install(PyObject *module)
          {
            installType(&PY_TYPE(Formatter), module, "Formatter", 0);
          }

          void t_Formatter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Formatter).tp_dict, "class_", make_descriptor(Formatter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Formatter).tp_dict, "wrapfn_", make_descriptor(t_Formatter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Formatter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Formatter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Formatter::initializeClass, 1)))
              return NULL;
            return t_Formatter::wrap_Object(Formatter(((t_Formatter *) arg)->object.this$));
          }
          static PyObject *t_Formatter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Formatter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_Formatter_highlightTerm(t_Formatter *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::search::highlight::TokenGroup a1((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "sk", ::org::apache::lucene::search::highlight::TokenGroup::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.highlightTerm(a0, a1));
              return j2p(result);
            }

            PyErr_SetArgsError((PyObject *) self, "highlightTerm", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/surround/parser/CharStream.h"
#include "java/io/IOException.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace parser {

            ::java::lang::Class *CharStream::class$ = NULL;
            jmethodID *CharStream::mids$ = NULL;
            bool CharStream::live$ = false;

            jclass CharStream::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/surround/parser/CharStream");

                mids$ = new jmethodID[max_mid];
                mids$[mid_BeginToken_54c6a173] = env->getMethodID(cls, "BeginToken", "()C");
                mids$[mid_Done_54c6a166] = env->getMethodID(cls, "Done", "()V");
                mids$[mid_GetImage_14c7b5c5] = env->getMethodID(cls, "GetImage", "()Ljava/lang/String;");
                mids$[mid_GetSuffix_b4292e99] = env->getMethodID(cls, "GetSuffix", "(I)[C");
                mids$[mid_backup_39c7bd3c] = env->getMethodID(cls, "backup", "(I)V");
                mids$[mid_getBeginColumn_54c6a179] = env->getMethodID(cls, "getBeginColumn", "()I");
                mids$[mid_getBeginLine_54c6a179] = env->getMethodID(cls, "getBeginLine", "()I");
                mids$[mid_getColumn_54c6a179] = env->getMethodID(cls, "getColumn", "()I");
                mids$[mid_getEndColumn_54c6a179] = env->getMethodID(cls, "getEndColumn", "()I");
                mids$[mid_getEndLine_54c6a179] = env->getMethodID(cls, "getEndLine", "()I");
                mids$[mid_getLine_54c6a179] = env->getMethodID(cls, "getLine", "()I");
                mids$[mid_readChar_54c6a173] = env->getMethodID(cls, "readChar", "()C");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            jchar CharStream::BeginToken() const
            {
              return env->callCharMethod(this$, mids$[mid_BeginToken_54c6a173]);
            }

            void CharStream::Done() const
            {
              env->callVoidMethod(this$, mids$[mid_Done_54c6a166]);
            }

            ::java::lang::String CharStream::GetImage() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_GetImage_14c7b5c5]));
            }

            JArray< jchar > CharStream::GetSuffix(jint a0) const
            {
              return JArray< jchar >(env->callObjectMethod(this$, mids$[mid_GetSuffix_b4292e99], a0));
            }

            void CharStream::backup(jint a0) const
            {
              env->callVoidMethod(this$, mids$[mid_backup_39c7bd3c], a0);
            }

            jint CharStream::getBeginColumn() const
            {
              return env->callIntMethod(this$, mids$[mid_getBeginColumn_54c6a179]);
            }

            jint CharStream::getBeginLine() const
            {
              return env->callIntMethod(this$, mids$[mid_getBeginLine_54c6a179]);
            }

            jint CharStream::getColumn() const
            {
              return env->callIntMethod(this$, mids$[mid_getColumn_54c6a179]);
            }

            jint CharStream::getEndColumn() const
            {
              return env->callIntMethod(this$, mids$[mid_getEndColumn_54c6a179]);
            }

            jint CharStream::getEndLine() const
            {
              return env->callIntMethod(this$, mids$[mid_getEndLine_54c6a179]);
            }

            jint CharStream::getLine() const
            {
              return env->callIntMethod(this$, mids$[mid_getLine_54c6a179]);
            }

            jchar CharStream::readChar() const
            {
              return env->callCharMethod(this$, mids$[mid_readChar_54c6a173]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace parser {
            static PyObject *t_CharStream_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_CharStream_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_CharStream_BeginToken(t_CharStream *self);
            static PyObject *t_CharStream_Done(t_CharStream *self);
            static PyObject *t_CharStream_GetImage(t_CharStream *self);
            static PyObject *t_CharStream_GetSuffix(t_CharStream *self, PyObject *arg);
            static PyObject *t_CharStream_backup(t_CharStream *self, PyObject *arg);
            static PyObject *t_CharStream_getBeginColumn(t_CharStream *self);
            static PyObject *t_CharStream_getBeginLine(t_CharStream *self);
            static PyObject *t_CharStream_getColumn(t_CharStream *self);
            static PyObject *t_CharStream_getEndColumn(t_CharStream *self);
            static PyObject *t_CharStream_getEndLine(t_CharStream *self);
            static PyObject *t_CharStream_getLine(t_CharStream *self);
            static PyObject *t_CharStream_readChar(t_CharStream *self);
            static PyObject *t_CharStream_get__beginColumn(t_CharStream *self, void *data);
            static PyObject *t_CharStream_get__beginLine(t_CharStream *self, void *data);
            static PyObject *t_CharStream_get__column(t_CharStream *self, void *data);
            static PyObject *t_CharStream_get__endColumn(t_CharStream *self, void *data);
            static PyObject *t_CharStream_get__endLine(t_CharStream *self, void *data);
            static PyObject *t_CharStream_get__line(t_CharStream *self, void *data);
            static PyGetSetDef t_CharStream__fields_[] = {
              DECLARE_GET_FIELD(t_CharStream, beginColumn),
              DECLARE_GET_FIELD(t_CharStream, beginLine),
              DECLARE_GET_FIELD(t_CharStream, column),
              DECLARE_GET_FIELD(t_CharStream, endColumn),
              DECLARE_GET_FIELD(t_CharStream, endLine),
              DECLARE_GET_FIELD(t_CharStream, line),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_CharStream__methods_[] = {
              DECLARE_METHOD(t_CharStream, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_CharStream, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_CharStream, BeginToken, METH_NOARGS),
              DECLARE_METHOD(t_CharStream, Done, METH_NOARGS),
              DECLARE_METHOD(t_CharStream, GetImage, METH_NOARGS),
              DECLARE_METHOD(t_CharStream, GetSuffix, METH_O),
              DECLARE_METHOD(t_CharStream, backup, METH_O),
              DECLARE_METHOD(t_CharStream, getBeginColumn, METH_NOARGS),
              DECLARE_METHOD(t_CharStream, getBeginLine, METH_NOARGS),
              DECLARE_METHOD(t_CharStream, getColumn, METH_NOARGS),
              DECLARE_METHOD(t_CharStream, getEndColumn, METH_NOARGS),
              DECLARE_METHOD(t_CharStream, getEndLine, METH_NOARGS),
              DECLARE_METHOD(t_CharStream, getLine, METH_NOARGS),
              DECLARE_METHOD(t_CharStream, readChar, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(CharStream, t_CharStream, ::java::lang::Object, CharStream, abstract_init, 0, 0, t_CharStream__fields_, 0, 0);

            void t_CharStream::install(PyObject *module)
            {
              installType(&PY_TYPE(CharStream), module, "CharStream", 0);
            }

            void t_CharStream::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(CharStream).tp_dict, "class_", make_descriptor(CharStream::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(CharStream).tp_dict, "wrapfn_", make_descriptor(t_CharStream::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(CharStream).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_CharStream_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, CharStream::initializeClass, 1)))
                return NULL;
              return t_CharStream::wrap_Object(CharStream(((t_CharStream *) arg)->object.this$));
            }
            static PyObject *t_CharStream_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, CharStream::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_CharStream_BeginToken(t_CharStream *self)
            {
              jchar result;
              OBJ_CALL(result = self->object.BeginToken());
              return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
            }

            static PyObject *t_CharStream_Done(t_CharStream *self)
            {
              OBJ_CALL(self->object.Done());
              Py_RETURN_NONE;
            }

            static PyObject *t_CharStream_GetImage(t_CharStream *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.GetImage());
              return j2p(result);
            }

            static PyObject *t_CharStream_GetSuffix(t_CharStream *self, PyObject *arg)
            {
              jint a0;
              JArray< jchar > result((jobject) NULL);

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(result = self->object.GetSuffix(a0));
                return result.wrap();
              }

              PyErr_SetArgsError((PyObject *) self, "GetSuffix", arg);
              return NULL;
            }

            static PyObject *t_CharStream_backup(t_CharStream *self, PyObject *arg)
            {
              jint a0;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(self->object.backup(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "backup", arg);
              return NULL;
            }

            static PyObject *t_CharStream_getBeginColumn(t_CharStream *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getBeginColumn());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_CharStream_getBeginLine(t_CharStream *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getBeginLine());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_CharStream_getColumn(t_CharStream *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getColumn());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_CharStream_getEndColumn(t_CharStream *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getEndColumn());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_CharStream_getEndLine(t_CharStream *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getEndLine());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_CharStream_getLine(t_CharStream *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getLine());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_CharStream_readChar(t_CharStream *self)
            {
              jchar result;
              OBJ_CALL(result = self->object.readChar());
              return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
            }

            static PyObject *t_CharStream_get__beginColumn(t_CharStream *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getBeginColumn());
              return PyInt_FromLong((long) value);
            }

            static PyObject *t_CharStream_get__beginLine(t_CharStream *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getBeginLine());
              return PyInt_FromLong((long) value);
            }

            static PyObject *t_CharStream_get__column(t_CharStream *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getColumn());
              return PyInt_FromLong((long) value);
            }

            static PyObject *t_CharStream_get__endColumn(t_CharStream *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getEndColumn());
              return PyInt_FromLong((long) value);
            }

            static PyObject *t_CharStream_get__endLine(t_CharStream *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getEndLine());
              return PyInt_FromLong((long) value);
            }

            static PyObject *t_CharStream_get__line(t_CharStream *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getLine());
              return PyInt_FromLong((long) value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/FloatAssociationFacetField.h"
#include "java/lang/String.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {

          ::java::lang::Class *FloatAssociationFacetField::class$ = NULL;
          jmethodID *FloatAssociationFacetField::mids$ = NULL;
          bool FloatAssociationFacetField::live$ = false;

          jclass FloatAssociationFacetField::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/FloatAssociationFacetField");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_000acdbd] = env->getMethodID(cls, "<init>", "(FLjava/lang/String;[Ljava/lang/String;)V");
              mids$[mid_bytesRefToFloat_7bc03dd4] = env->getStaticMethodID(cls, "bytesRefToFloat", "(Lorg/apache/lucene/util/BytesRef;)F");
              mids$[mid_floatToBytesRef_291d8a68] = env->getStaticMethodID(cls, "floatToBytesRef", "(F)Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FloatAssociationFacetField::FloatAssociationFacetField(jfloat a0, const ::java::lang::String & a1, const JArray< ::java::lang::String > & a2) : ::org::apache::lucene::facet::taxonomy::AssociationFacetField(env->newObject(initializeClass, &mids$, mid_init$_000acdbd, a0, a1.this$, a2.this$)) {}

          jfloat FloatAssociationFacetField::bytesRefToFloat(const ::org::apache::lucene::util::BytesRef & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticFloatMethod(cls, mids$[mid_bytesRefToFloat_7bc03dd4], a0.this$);
          }

          ::org::apache::lucene::util::BytesRef FloatAssociationFacetField::floatToBytesRef(jfloat a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::BytesRef(env->callStaticObjectMethod(cls, mids$[mid_floatToBytesRef_291d8a68], a0));
          }

          ::java::lang::String FloatAssociationFacetField::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          static PyObject *t_FloatAssociationFacetField_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FloatAssociationFacetField_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FloatAssociationFacetField_init_(t_FloatAssociationFacetField *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FloatAssociationFacetField_bytesRefToFloat(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FloatAssociationFacetField_floatToBytesRef(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FloatAssociationFacetField_toString(t_FloatAssociationFacetField *self, PyObject *args);

          static PyMethodDef t_FloatAssociationFacetField__methods_[] = {
            DECLARE_METHOD(t_FloatAssociationFacetField, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FloatAssociationFacetField, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FloatAssociationFacetField, bytesRefToFloat, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FloatAssociationFacetField, floatToBytesRef, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FloatAssociationFacetField, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FloatAssociationFacetField, t_FloatAssociationFacetField, ::org::apache::lucene::facet::taxonomy::AssociationFacetField, FloatAssociationFacetField, t_FloatAssociationFacetField_init_, 0, 0, 0, 0, 0);

          void t_FloatAssociationFacetField::install(PyObject *module)
          {
            installType(&PY_TYPE(FloatAssociationFacetField), module, "FloatAssociationFacetField", 0);
          }

          void t_FloatAssociationFacetField::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FloatAssociationFacetField).tp_dict, "class_", make_descriptor(FloatAssociationFacetField::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FloatAssociationFacetField).tp_dict, "wrapfn_", make_descriptor(t_FloatAssociationFacetField::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FloatAssociationFacetField).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FloatAssociationFacetField_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FloatAssociationFacetField::initializeClass, 1)))
              return NULL;
            return t_FloatAssociationFacetField::wrap_Object(FloatAssociationFacetField(((t_FloatAssociationFacetField *) arg)->object.this$));
          }
          static PyObject *t_FloatAssociationFacetField_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FloatAssociationFacetField::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FloatAssociationFacetField_init_(t_FloatAssociationFacetField *self, PyObject *args, PyObject *kwds)
          {
            jfloat a0;
            ::java::lang::String a1((jobject) NULL);
            JArray< ::java::lang::String > a2((jobject) NULL);
            FloatAssociationFacetField object((jobject) NULL);

            if (!parseArgs(args, "Fs[s", &a0, &a1, &a2))
            {
              INT_CALL(object = FloatAssociationFacetField(a0, a1, a2));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_FloatAssociationFacetField_bytesRefToFloat(PyTypeObject *type, PyObject *arg)
          {
            ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
            jfloat result;

            if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::facet::taxonomy::FloatAssociationFacetField::bytesRefToFloat(a0));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError(type, "bytesRefToFloat", arg);
            return NULL;
          }

          static PyObject *t_FloatAssociationFacetField_floatToBytesRef(PyTypeObject *type, PyObject *arg)
          {
            jfloat a0;
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);

            if (!parseArg(arg, "F", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::facet::taxonomy::FloatAssociationFacetField::floatToBytesRef(a0));
              return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "floatToBytesRef", arg);
            return NULL;
          }

          static PyObject *t_FloatAssociationFacetField_toString(t_FloatAssociationFacetField *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(FloatAssociationFacetField), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/FileSwitchDirectory.h"
#include "org/apache/lucene/store/IndexOutput.h"
#include "org/apache/lucene/store/IndexInput.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "java/util/Collection.h"
#include "java/util/Set.h"
#include "org/apache/lucene/store/IOContext.h"
#include "java/io/IOException.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *FileSwitchDirectory::class$ = NULL;
        jmethodID *FileSwitchDirectory::mids$ = NULL;
        bool FileSwitchDirectory::live$ = false;

        jclass FileSwitchDirectory::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/FileSwitchDirectory");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_4575167f] = env->getMethodID(cls, "<init>", "(Ljava/util/Set;Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/store/Directory;Z)V");
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_createOutput_5ad5358d] = env->getMethodID(cls, "createOutput", "(Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/store/IndexOutput;");
            mids$[mid_deleteFile_5fdc3f48] = env->getMethodID(cls, "deleteFile", "(Ljava/lang/String;)V");
            mids$[mid_fileExists_5fdc3f44] = env->getMethodID(cls, "fileExists", "(Ljava/lang/String;)Z");
            mids$[mid_fileLength_5fdc3f54] = env->getMethodID(cls, "fileLength", "(Ljava/lang/String;)J");
            mids$[mid_getExtension_97a5258f] = env->getStaticMethodID(cls, "getExtension", "(Ljava/lang/String;)Ljava/lang/String;");
            mids$[mid_getPrimaryDir_1f3934bb] = env->getMethodID(cls, "getPrimaryDir", "()Lorg/apache/lucene/store/Directory;");
            mids$[mid_getSecondaryDir_1f3934bb] = env->getMethodID(cls, "getSecondaryDir", "()Lorg/apache/lucene/store/Directory;");
            mids$[mid_listAll_2e6d5245] = env->getMethodID(cls, "listAll", "()[Ljava/lang/String;");
            mids$[mid_openInput_3e1b5375] = env->getMethodID(cls, "openInput", "(Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/store/IndexInput;");
            mids$[mid_sync_9bfb370d] = env->getMethodID(cls, "sync", "(Ljava/util/Collection;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FileSwitchDirectory::FileSwitchDirectory(const ::java::util::Set & a0, const ::org::apache::lucene::store::Directory & a1, const ::org::apache::lucene::store::Directory & a2, jboolean a3) : ::org::apache::lucene::store::BaseDirectory(env->newObject(initializeClass, &mids$, mid_init$_4575167f, a0.this$, a1.this$, a2.this$, a3)) {}

        void FileSwitchDirectory::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        ::org::apache::lucene::store::IndexOutput FileSwitchDirectory::createOutput(const ::java::lang::String & a0, const ::org::apache::lucene::store::IOContext & a1) const
        {
          return ::org::apache::lucene::store::IndexOutput(env->callObjectMethod(this$, mids$[mid_createOutput_5ad5358d], a0.this$, a1.this$));
        }

        void FileSwitchDirectory::deleteFile(const ::java::lang::String & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_deleteFile_5fdc3f48], a0.this$);
        }

        jboolean FileSwitchDirectory::fileExists(const ::java::lang::String & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_fileExists_5fdc3f44], a0.this$);
        }

        jlong FileSwitchDirectory::fileLength(const ::java::lang::String & a0) const
        {
          return env->callLongMethod(this$, mids$[mid_fileLength_5fdc3f54], a0.this$);
        }

        ::java::lang::String FileSwitchDirectory::getExtension(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_getExtension_97a5258f], a0.this$));
        }

        ::org::apache::lucene::store::Directory FileSwitchDirectory::getPrimaryDir() const
        {
          return ::org::apache::lucene::store::Directory(env->callObjectMethod(this$, mids$[mid_getPrimaryDir_1f3934bb]));
        }

        ::org::apache::lucene::store::Directory FileSwitchDirectory::getSecondaryDir() const
        {
          return ::org::apache::lucene::store::Directory(env->callObjectMethod(this$, mids$[mid_getSecondaryDir_1f3934bb]));
        }

        JArray< ::java::lang::String > FileSwitchDirectory::listAll() const
        {
          return JArray< ::java::lang::String >(env->callObjectMethod(this$, mids$[mid_listAll_2e6d5245]));
        }

        ::org::apache::lucene::store::IndexInput FileSwitchDirectory::openInput(const ::java::lang::String & a0, const ::org::apache::lucene::store::IOContext & a1) const
        {
          return ::org::apache::lucene::store::IndexInput(env->callObjectMethod(this$, mids$[mid_openInput_3e1b5375], a0.this$, a1.this$));
        }

        void FileSwitchDirectory::sync(const ::java::util::Collection & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_sync_9bfb370d], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_FileSwitchDirectory_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FileSwitchDirectory_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FileSwitchDirectory_init_(t_FileSwitchDirectory *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FileSwitchDirectory_close(t_FileSwitchDirectory *self, PyObject *args);
        static PyObject *t_FileSwitchDirectory_createOutput(t_FileSwitchDirectory *self, PyObject *args);
        static PyObject *t_FileSwitchDirectory_deleteFile(t_FileSwitchDirectory *self, PyObject *args);
        static PyObject *t_FileSwitchDirectory_fileExists(t_FileSwitchDirectory *self, PyObject *args);
        static PyObject *t_FileSwitchDirectory_fileLength(t_FileSwitchDirectory *self, PyObject *args);
        static PyObject *t_FileSwitchDirectory_getExtension(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FileSwitchDirectory_getPrimaryDir(t_FileSwitchDirectory *self);
        static PyObject *t_FileSwitchDirectory_getSecondaryDir(t_FileSwitchDirectory *self);
        static PyObject *t_FileSwitchDirectory_listAll(t_FileSwitchDirectory *self, PyObject *args);
        static PyObject *t_FileSwitchDirectory_openInput(t_FileSwitchDirectory *self, PyObject *args);
        static PyObject *t_FileSwitchDirectory_sync(t_FileSwitchDirectory *self, PyObject *args);
        static PyObject *t_FileSwitchDirectory_get__primaryDir(t_FileSwitchDirectory *self, void *data);
        static PyObject *t_FileSwitchDirectory_get__secondaryDir(t_FileSwitchDirectory *self, void *data);
        static PyGetSetDef t_FileSwitchDirectory__fields_[] = {
          DECLARE_GET_FIELD(t_FileSwitchDirectory, primaryDir),
          DECLARE_GET_FIELD(t_FileSwitchDirectory, secondaryDir),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FileSwitchDirectory__methods_[] = {
          DECLARE_METHOD(t_FileSwitchDirectory, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FileSwitchDirectory, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FileSwitchDirectory, close, METH_VARARGS),
          DECLARE_METHOD(t_FileSwitchDirectory, createOutput, METH_VARARGS),
          DECLARE_METHOD(t_FileSwitchDirectory, deleteFile, METH_VARARGS),
          DECLARE_METHOD(t_FileSwitchDirectory, fileExists, METH_VARARGS),
          DECLARE_METHOD(t_FileSwitchDirectory, fileLength, METH_VARARGS),
          DECLARE_METHOD(t_FileSwitchDirectory, getExtension, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FileSwitchDirectory, getPrimaryDir, METH_NOARGS),
          DECLARE_METHOD(t_FileSwitchDirectory, getSecondaryDir, METH_NOARGS),
          DECLARE_METHOD(t_FileSwitchDirectory, listAll, METH_VARARGS),
          DECLARE_METHOD(t_FileSwitchDirectory, openInput, METH_VARARGS),
          DECLARE_METHOD(t_FileSwitchDirectory, sync, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FileSwitchDirectory, t_FileSwitchDirectory, ::org::apache::lucene::store::BaseDirectory, FileSwitchDirectory, t_FileSwitchDirectory_init_, 0, 0, t_FileSwitchDirectory__fields_, 0, 0);

        void t_FileSwitchDirectory::install(PyObject *module)
        {
          installType(&PY_TYPE(FileSwitchDirectory), module, "FileSwitchDirectory", 0);
        }

        void t_FileSwitchDirectory::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FileSwitchDirectory).tp_dict, "class_", make_descriptor(FileSwitchDirectory::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FileSwitchDirectory).tp_dict, "wrapfn_", make_descriptor(t_FileSwitchDirectory::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FileSwitchDirectory).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FileSwitchDirectory_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FileSwitchDirectory::initializeClass, 1)))
            return NULL;
          return t_FileSwitchDirectory::wrap_Object(FileSwitchDirectory(((t_FileSwitchDirectory *) arg)->object.this$));
        }
        static PyObject *t_FileSwitchDirectory_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FileSwitchDirectory::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FileSwitchDirectory_init_(t_FileSwitchDirectory *self, PyObject *args, PyObject *kwds)
        {
          ::java::util::Set a0((jobject) NULL);
          PyTypeObject **p0;
          ::org::apache::lucene::store::Directory a1((jobject) NULL);
          ::org::apache::lucene::store::Directory a2((jobject) NULL);
          jboolean a3;
          FileSwitchDirectory object((jobject) NULL);

          if (!parseArgs(args, "KkkZ", ::java::util::Set::initializeClass, ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::store::Directory::initializeClass, &a0, &p0, ::java::util::t_Set::parameters_, &a1, &a2, &a3))
          {
            INT_CALL(object = FileSwitchDirectory(a0, a1, a2, a3));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FileSwitchDirectory_close(t_FileSwitchDirectory *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.close());
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FileSwitchDirectory), (PyObject *) self, "close", args, 2);
        }

        static PyObject *t_FileSwitchDirectory_createOutput(t_FileSwitchDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::store::IOContext a1((jobject) NULL);
          ::org::apache::lucene::store::IndexOutput result((jobject) NULL);

          if (!parseArgs(args, "sk", ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.createOutput(a0, a1));
            return ::org::apache::lucene::store::t_IndexOutput::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FileSwitchDirectory), (PyObject *) self, "createOutput", args, 2);
        }

        static PyObject *t_FileSwitchDirectory_deleteFile(t_FileSwitchDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(self->object.deleteFile(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FileSwitchDirectory), (PyObject *) self, "deleteFile", args, 2);
        }

        static PyObject *t_FileSwitchDirectory_fileExists(t_FileSwitchDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.fileExists(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(FileSwitchDirectory), (PyObject *) self, "fileExists", args, 2);
        }

        static PyObject *t_FileSwitchDirectory_fileLength(t_FileSwitchDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          jlong result;

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.fileLength(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(FileSwitchDirectory), (PyObject *) self, "fileLength", args, 2);
        }

        static PyObject *t_FileSwitchDirectory_getExtension(PyTypeObject *type, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::store::FileSwitchDirectory::getExtension(a0));
            return j2p(result);
          }

          PyErr_SetArgsError(type, "getExtension", arg);
          return NULL;
        }

        static PyObject *t_FileSwitchDirectory_getPrimaryDir(t_FileSwitchDirectory *self)
        {
          ::org::apache::lucene::store::Directory result((jobject) NULL);
          OBJ_CALL(result = self->object.getPrimaryDir());
          return ::org::apache::lucene::store::t_Directory::wrap_Object(result);
        }

        static PyObject *t_FileSwitchDirectory_getSecondaryDir(t_FileSwitchDirectory *self)
        {
          ::org::apache::lucene::store::Directory result((jobject) NULL);
          OBJ_CALL(result = self->object.getSecondaryDir());
          return ::org::apache::lucene::store::t_Directory::wrap_Object(result);
        }

        static PyObject *t_FileSwitchDirectory_listAll(t_FileSwitchDirectory *self, PyObject *args)
        {
          JArray< ::java::lang::String > result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.listAll());
            return JArray<jstring>(result.this$).wrap();
          }

          return callSuper(&PY_TYPE(FileSwitchDirectory), (PyObject *) self, "listAll", args, 2);
        }

        static PyObject *t_FileSwitchDirectory_openInput(t_FileSwitchDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::store::IOContext a1((jobject) NULL);
          ::org::apache::lucene::store::IndexInput result((jobject) NULL);

          if (!parseArgs(args, "sk", ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.openInput(a0, a1));
            return ::org::apache::lucene::store::t_IndexInput::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FileSwitchDirectory), (PyObject *) self, "openInput", args, 2);
        }

        static PyObject *t_FileSwitchDirectory_sync(t_FileSwitchDirectory *self, PyObject *args)
        {
          ::java::util::Collection a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArgs(args, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
          {
            OBJ_CALL(self->object.sync(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FileSwitchDirectory), (PyObject *) self, "sync", args, 2);
        }

        static PyObject *t_FileSwitchDirectory_get__primaryDir(t_FileSwitchDirectory *self, void *data)
        {
          ::org::apache::lucene::store::Directory value((jobject) NULL);
          OBJ_CALL(value = self->object.getPrimaryDir());
          return ::org::apache::lucene::store::t_Directory::wrap_Object(value);
        }

        static PyObject *t_FileSwitchDirectory_get__secondaryDir(t_FileSwitchDirectory *self, void *data)
        {
          ::org::apache::lucene::store::Directory value((jobject) NULL);
          OBJ_CALL(value = self->object.getSecondaryDir());
          return ::org::apache::lucene::store::t_Directory::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/sandbox/queries/SortedSetSortField$Selector.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace sandbox {
        namespace queries {

          ::java::lang::Class *SortedSetSortField$Selector::class$ = NULL;
          jmethodID *SortedSetSortField$Selector::mids$ = NULL;
          bool SortedSetSortField$Selector::live$ = false;
          SortedSetSortField$Selector *SortedSetSortField$Selector::MAX = NULL;
          SortedSetSortField$Selector *SortedSetSortField$Selector::MIDDLE_MAX = NULL;
          SortedSetSortField$Selector *SortedSetSortField$Selector::MIDDLE_MIN = NULL;
          SortedSetSortField$Selector *SortedSetSortField$Selector::MIN = NULL;

          jclass SortedSetSortField$Selector::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/sandbox/queries/SortedSetSortField$Selector");

              mids$ = new jmethodID[max_mid];
              mids$[mid_valueOf_1826b9b5] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/sandbox/queries/SortedSetSortField$Selector;");
              mids$[mid_values_ab359d3f] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/sandbox/queries/SortedSetSortField$Selector;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              MAX = new SortedSetSortField$Selector(env->getStaticObjectField(cls, "MAX", "Lorg/apache/lucene/sandbox/queries/SortedSetSortField$Selector;"));
              MIDDLE_MAX = new SortedSetSortField$Selector(env->getStaticObjectField(cls, "MIDDLE_MAX", "Lorg/apache/lucene/sandbox/queries/SortedSetSortField$Selector;"));
              MIDDLE_MIN = new SortedSetSortField$Selector(env->getStaticObjectField(cls, "MIDDLE_MIN", "Lorg/apache/lucene/sandbox/queries/SortedSetSortField$Selector;"));
              MIN = new SortedSetSortField$Selector(env->getStaticObjectField(cls, "MIN", "Lorg/apache/lucene/sandbox/queries/SortedSetSortField$Selector;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SortedSetSortField$Selector SortedSetSortField$Selector::valueOf(const ::java::lang::String & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return SortedSetSortField$Selector(env->callStaticObjectMethod(cls, mids$[mid_valueOf_1826b9b5], a0.this$));
          }

          JArray< SortedSetSortField$Selector > SortedSetSortField$Selector::values()
          {
            jclass cls = env->getClass(initializeClass);
            return JArray< SortedSetSortField$Selector >(env->callStaticObjectMethod(cls, mids$[mid_values_ab359d3f]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace sandbox {
        namespace queries {
          static PyObject *t_SortedSetSortField$Selector_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SortedSetSortField$Selector_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SortedSetSortField$Selector_of_(t_SortedSetSortField$Selector *self, PyObject *args);
          static PyObject *t_SortedSetSortField$Selector_valueOf(PyTypeObject *type, PyObject *args);
          static PyObject *t_SortedSetSortField$Selector_values(PyTypeObject *type);
          static PyObject *t_SortedSetSortField$Selector_get__parameters_(t_SortedSetSortField$Selector *self, void *data);
          static PyGetSetDef t_SortedSetSortField$Selector__fields_[] = {
            DECLARE_GET_FIELD(t_SortedSetSortField$Selector, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SortedSetSortField$Selector__methods_[] = {
            DECLARE_METHOD(t_SortedSetSortField$Selector, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SortedSetSortField$Selector, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SortedSetSortField$Selector, of_, METH_VARARGS),
            DECLARE_METHOD(t_SortedSetSortField$Selector, valueOf, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_SortedSetSortField$Selector, values, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SortedSetSortField$Selector, t_SortedSetSortField$Selector, ::java::lang::Enum, SortedSetSortField$Selector, abstract_init, 0, 0, t_SortedSetSortField$Selector__fields_, 0, 0);
          PyObject *t_SortedSetSortField$Selector::wrap_Object(const SortedSetSortField$Selector& object, PyTypeObject *p0)
          {
            PyObject *obj = t_SortedSetSortField$Selector::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_SortedSetSortField$Selector *self = (t_SortedSetSortField$Selector *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_SortedSetSortField$Selector::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_SortedSetSortField$Selector::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_SortedSetSortField$Selector *self = (t_SortedSetSortField$Selector *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_SortedSetSortField$Selector::install(PyObject *module)
          {
            installType(&PY_TYPE(SortedSetSortField$Selector), module, "SortedSetSortField$Selector", 0);
          }

          void t_SortedSetSortField$Selector::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SortedSetSortField$Selector).tp_dict, "class_", make_descriptor(SortedSetSortField$Selector::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SortedSetSortField$Selector).tp_dict, "wrapfn_", make_descriptor(t_SortedSetSortField$Selector::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SortedSetSortField$Selector).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(SortedSetSortField$Selector::initializeClass);
            PyDict_SetItemString(PY_TYPE(SortedSetSortField$Selector).tp_dict, "MAX", make_descriptor(t_SortedSetSortField$Selector::wrap_Object(*SortedSetSortField$Selector::MAX)));
            PyDict_SetItemString(PY_TYPE(SortedSetSortField$Selector).tp_dict, "MIDDLE_MAX", make_descriptor(t_SortedSetSortField$Selector::wrap_Object(*SortedSetSortField$Selector::MIDDLE_MAX)));
            PyDict_SetItemString(PY_TYPE(SortedSetSortField$Selector).tp_dict, "MIDDLE_MIN", make_descriptor(t_SortedSetSortField$Selector::wrap_Object(*SortedSetSortField$Selector::MIDDLE_MIN)));
            PyDict_SetItemString(PY_TYPE(SortedSetSortField$Selector).tp_dict, "MIN", make_descriptor(t_SortedSetSortField$Selector::wrap_Object(*SortedSetSortField$Selector::MIN)));
          }

          static PyObject *t_SortedSetSortField$Selector_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SortedSetSortField$Selector::initializeClass, 1)))
              return NULL;
            return t_SortedSetSortField$Selector::wrap_Object(SortedSetSortField$Selector(((t_SortedSetSortField$Selector *) arg)->object.this$));
          }
          static PyObject *t_SortedSetSortField$Selector_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SortedSetSortField$Selector::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_SortedSetSortField$Selector_of_(t_SortedSetSortField$Selector *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static PyObject *t_SortedSetSortField$Selector_valueOf(PyTypeObject *type, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            SortedSetSortField$Selector result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::sandbox::queries::SortedSetSortField$Selector::valueOf(a0));
              return t_SortedSetSortField$Selector::wrap_Object(result);
            }

            return callSuper(type, "valueOf", args, 2);
          }

          static PyObject *t_SortedSetSortField$Selector_values(PyTypeObject *type)
          {
            JArray< SortedSetSortField$Selector > result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::sandbox::queries::SortedSetSortField$Selector::values());
            return JArray<jobject>(result.this$).wrap(t_SortedSetSortField$Selector::wrap_jobject);
          }
          static PyObject *t_SortedSetSortField$Selector_get__parameters_(t_SortedSetSortField$Selector *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spans/SpanPositionCheckQuery.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/index/TermContext.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "java/util/Set.h"
#include "org/apache/lucene/util/Bits.h"
#include "org/apache/lucene/index/Term.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/search/Query.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/spans/Spans.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {

          ::java::lang::Class *SpanPositionCheckQuery::class$ = NULL;
          jmethodID *SpanPositionCheckQuery::mids$ = NULL;
          bool SpanPositionCheckQuery::live$ = false;

          jclass SpanPositionCheckQuery::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spans/SpanPositionCheckQuery");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_056c1897] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/spans/SpanQuery;)V");
              mids$[mid_extractTerms_fb4f2b26] = env->getMethodID(cls, "extractTerms", "(Ljava/util/Set;)V");
              mids$[mid_getField_14c7b5c5] = env->getMethodID(cls, "getField", "()Ljava/lang/String;");
              mids$[mid_getMatch_d3aa0332] = env->getMethodID(cls, "getMatch", "()Lorg/apache/lucene/search/spans/SpanQuery;");
              mids$[mid_getSpans_f003cb44] = env->getMethodID(cls, "getSpans", "(Lorg/apache/lucene/index/AtomicReaderContext;Lorg/apache/lucene/util/Bits;Ljava/util/Map;)Lorg/apache/lucene/search/spans/Spans;");
              mids$[mid_rewrite_7edcaa43] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/index/IndexReader;)Lorg/apache/lucene/search/Query;");
              mids$[mid_acceptPosition_5342f73f] = env->getMethodID(cls, "acceptPosition", "(Lorg/apache/lucene/search/spans/Spans;)Lorg/apache/lucene/search/spans/SpanPositionCheckQuery$AcceptStatus;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SpanPositionCheckQuery::SpanPositionCheckQuery(const ::org::apache::lucene::search::spans::SpanQuery & a0) : ::org::apache::lucene::search::spans::SpanQuery(env->newObject(initializeClass, &mids$, mid_init$_056c1897, a0.this$)) {}

          void SpanPositionCheckQuery::extractTerms(const ::java::util::Set & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_extractTerms_fb4f2b26], a0.this$);
          }

          ::java::lang::String SpanPositionCheckQuery::getField() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getField_14c7b5c5]));
          }

          ::org::apache::lucene::search::spans::SpanQuery SpanPositionCheckQuery::getMatch() const
          {
            return ::org::apache::lucene::search::spans::SpanQuery(env->callObjectMethod(this$, mids$[mid_getMatch_d3aa0332]));
          }

          ::org::apache::lucene::search::spans::Spans SpanPositionCheckQuery::getSpans(const ::org::apache::lucene::index::AtomicReaderContext & a0, const ::org::apache::lucene::util::Bits & a1, const ::java::util::Map & a2) const
          {
            return ::org::apache::lucene::search::spans::Spans(env->callObjectMethod(this$, mids$[mid_getSpans_f003cb44], a0.this$, a1.this$, a2.this$));
          }

          ::org::apache::lucene::search::Query SpanPositionCheckQuery::rewrite(const ::org::apache::lucene::index::IndexReader & a0) const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_rewrite_7edcaa43], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {
          static PyObject *t_SpanPositionCheckQuery_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SpanPositionCheckQuery_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SpanPositionCheckQuery_init_(t_SpanPositionCheckQuery *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SpanPositionCheckQuery_extractTerms(t_SpanPositionCheckQuery *self, PyObject *args);
          static PyObject *t_SpanPositionCheckQuery_getField(t_SpanPositionCheckQuery *self, PyObject *args);
          static PyObject *t_SpanPositionCheckQuery_getMatch(t_SpanPositionCheckQuery *self);
          static PyObject *t_SpanPositionCheckQuery_getSpans(t_SpanPositionCheckQuery *self, PyObject *args);
          static PyObject *t_SpanPositionCheckQuery_rewrite(t_SpanPositionCheckQuery *self, PyObject *args);
          static PyObject *t_SpanPositionCheckQuery_get__field(t_SpanPositionCheckQuery *self, void *data);
          static PyObject *t_SpanPositionCheckQuery_get__match(t_SpanPositionCheckQuery *self, void *data);
          static PyGetSetDef t_SpanPositionCheckQuery__fields_[] = {
            DECLARE_GET_FIELD(t_SpanPositionCheckQuery, field),
            DECLARE_GET_FIELD(t_SpanPositionCheckQuery, match),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SpanPositionCheckQuery__methods_[] = {
            DECLARE_METHOD(t_SpanPositionCheckQuery, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanPositionCheckQuery, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanPositionCheckQuery, extractTerms, METH_VARARGS),
            DECLARE_METHOD(t_SpanPositionCheckQuery, getField, METH_VARARGS),
            DECLARE_METHOD(t_SpanPositionCheckQuery, getMatch, METH_NOARGS),
            DECLARE_METHOD(t_SpanPositionCheckQuery, getSpans, METH_VARARGS),
            DECLARE_METHOD(t_SpanPositionCheckQuery, rewrite, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SpanPositionCheckQuery, t_SpanPositionCheckQuery, ::org::apache::lucene::search::spans::SpanQuery, SpanPositionCheckQuery, t_SpanPositionCheckQuery_init_, 0, 0, t_SpanPositionCheckQuery__fields_, 0, 0);

          void t_SpanPositionCheckQuery::install(PyObject *module)
          {
            installType(&PY_TYPE(SpanPositionCheckQuery), module, "SpanPositionCheckQuery", 0);
          }

          void t_SpanPositionCheckQuery::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SpanPositionCheckQuery).tp_dict, "class_", make_descriptor(SpanPositionCheckQuery::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SpanPositionCheckQuery).tp_dict, "wrapfn_", make_descriptor(t_SpanPositionCheckQuery::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SpanPositionCheckQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SpanPositionCheckQuery_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SpanPositionCheckQuery::initializeClass, 1)))
              return NULL;
            return t_SpanPositionCheckQuery::wrap_Object(SpanPositionCheckQuery(((t_SpanPositionCheckQuery *) arg)->object.this$));
          }
          static PyObject *t_SpanPositionCheckQuery_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SpanPositionCheckQuery::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SpanPositionCheckQuery_init_(t_SpanPositionCheckQuery *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::search::spans::SpanQuery a0((jobject) NULL);
            SpanPositionCheckQuery object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::search::spans::SpanQuery::initializeClass, &a0))
            {
              INT_CALL(object = SpanPositionCheckQuery(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SpanPositionCheckQuery_extractTerms(t_SpanPositionCheckQuery *self, PyObject *args)
          {
            ::java::util::Set a0((jobject) NULL);
            PyTypeObject **p0;

            if (!parseArgs(args, "K", ::java::util::Set::initializeClass, &a0, &p0, ::java::util::t_Set::parameters_))
            {
              OBJ_CALL(self->object.extractTerms(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(SpanPositionCheckQuery), (PyObject *) self, "extractTerms", args, 2);
          }

          static PyObject *t_SpanPositionCheckQuery_getField(t_SpanPositionCheckQuery *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getField());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(SpanPositionCheckQuery), (PyObject *) self, "getField", args, 2);
          }

          static PyObject *t_SpanPositionCheckQuery_getMatch(t_SpanPositionCheckQuery *self)
          {
            ::org::apache::lucene::search::spans::SpanQuery result((jobject) NULL);
            OBJ_CALL(result = self->object.getMatch());
            return ::org::apache::lucene::search::spans::t_SpanQuery::wrap_Object(result);
          }

          static PyObject *t_SpanPositionCheckQuery_getSpans(t_SpanPositionCheckQuery *self, PyObject *args)
          {
            ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
            ::org::apache::lucene::util::Bits a1((jobject) NULL);
            ::java::util::Map a2((jobject) NULL);
            PyTypeObject **p2;
            ::org::apache::lucene::search::spans::Spans result((jobject) NULL);

            if (!parseArgs(args, "kkK", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, ::java::util::Map::initializeClass, &a0, &a1, &a2, &p2, ::java::util::t_Map::parameters_))
            {
              OBJ_CALL(result = self->object.getSpans(a0, a1, a2));
              return ::org::apache::lucene::search::spans::t_Spans::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(SpanPositionCheckQuery), (PyObject *) self, "getSpans", args, 2);
          }

          static PyObject *t_SpanPositionCheckQuery_rewrite(t_SpanPositionCheckQuery *self, PyObject *args)
          {
            ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.rewrite(a0));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(SpanPositionCheckQuery), (PyObject *) self, "rewrite", args, 2);
          }

          static PyObject *t_SpanPositionCheckQuery_get__field(t_SpanPositionCheckQuery *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getField());
            return j2p(value);
          }

          static PyObject *t_SpanPositionCheckQuery_get__match(t_SpanPositionCheckQuery *self, void *data)
          {
            ::org::apache::lucene::search::spans::SpanQuery value((jobject) NULL);
            OBJ_CALL(value = self->object.getMatch());
            return ::org::apache::lucene::search::spans::t_SpanQuery::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/analyzing/FSTUtil$Path.h"
#include "org/apache/lucene/util/fst/FST$Arc.h"
#include "org/apache/lucene/util/IntsRefBuilder.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace analyzing {

            ::java::lang::Class *FSTUtil$Path::class$ = NULL;
            jmethodID *FSTUtil$Path::mids$ = NULL;
            jfieldID *FSTUtil$Path::fids$ = NULL;
            bool FSTUtil$Path::live$ = false;

            jclass FSTUtil$Path::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/analyzing/FSTUtil$Path");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_887ce3f0] = env->getMethodID(cls, "<init>", "(ILorg/apache/lucene/util/fst/FST$Arc;Ljava/lang/Object;Lorg/apache/lucene/util/IntsRefBuilder;)V");

                fids$ = new jfieldID[max_fid];
                fids$[fid_fstNode] = env->getFieldID(cls, "fstNode", "Lorg/apache/lucene/util/fst/FST$Arc;");
                fids$[fid_input] = env->getFieldID(cls, "input", "Lorg/apache/lucene/util/IntsRefBuilder;");
                fids$[fid_state] = env->getFieldID(cls, "state", "I");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            FSTUtil$Path::FSTUtil$Path(jint a0, const ::org::apache::lucene::util::fst::FST$Arc & a1, const ::java::lang::Object & a2, const ::org::apache::lucene::util::IntsRefBuilder & a3) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_887ce3f0, a0, a1.this$, a2.this$, a3.this$)) {}

            ::org::apache::lucene::util::fst::FST$Arc FSTUtil$Path::_get_fstNode() const
            {
              return ::org::apache::lucene::util::fst::FST$Arc(env->getObjectField(this$, fids$[fid_fstNode]));
            }

            ::org::apache::lucene::util::IntsRefBuilder FSTUtil$Path::_get_input() const
            {
              return ::org::apache::lucene::util::IntsRefBuilder(env->getObjectField(this$, fids$[fid_input]));
            }

            jint FSTUtil$Path::_get_state() const
            {
              return env->getIntField(this$, fids$[fid_state]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace analyzing {
            static PyObject *t_FSTUtil$Path_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_FSTUtil$Path_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_FSTUtil$Path_of_(t_FSTUtil$Path *self, PyObject *args);
            static int t_FSTUtil$Path_init_(t_FSTUtil$Path *self, PyObject *args, PyObject *kwds);
            static PyObject *t_FSTUtil$Path_get__fstNode(t_FSTUtil$Path *self, void *data);
            static PyObject *t_FSTUtil$Path_get__input(t_FSTUtil$Path *self, void *data);
            static PyObject *t_FSTUtil$Path_get__state(t_FSTUtil$Path *self, void *data);

            static PyObject *t_FSTUtil$Path_get__parameters_(t_FSTUtil$Path *self, void *data);
            static PyGetSetDef t_FSTUtil$Path__fields_[] = {
              DECLARE_GET_FIELD(t_FSTUtil$Path, fstNode),
              DECLARE_GET_FIELD(t_FSTUtil$Path, input),
              DECLARE_GET_FIELD(t_FSTUtil$Path, state),
              DECLARE_GET_FIELD(t_FSTUtil$Path, parameters_),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_FSTUtil$Path__methods_[] = {
              DECLARE_METHOD(t_FSTUtil$Path, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FSTUtil$Path, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FSTUtil$Path, of_, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(FSTUtil$Path, t_FSTUtil$Path, ::java::lang::Object, FSTUtil$Path, t_FSTUtil$Path_init_, 0, 0, t_FSTUtil$Path__fields_, 0, 0);
            PyObject *t_FSTUtil$Path::wrap_Object(const FSTUtil$Path& object, PyTypeObject *p0)
            {
              PyObject *obj = t_FSTUtil$Path::wrap_Object(object);
              if (obj != NULL && obj != Py_None)
              {
                t_FSTUtil$Path *self = (t_FSTUtil$Path *) obj;
                self->parameters[0] = p0;
              }
              return obj;
            }

            PyObject *t_FSTUtil$Path::wrap_jobject(const jobject& object, PyTypeObject *p0)
            {
              PyObject *obj = t_FSTUtil$Path::wrap_jobject(object);
              if (obj != NULL && obj != Py_None)
              {
                t_FSTUtil$Path *self = (t_FSTUtil$Path *) obj;
                self->parameters[0] = p0;
              }
              return obj;
            }

            void t_FSTUtil$Path::install(PyObject *module)
            {
              installType(&PY_TYPE(FSTUtil$Path), module, "FSTUtil$Path", 0);
            }

            void t_FSTUtil$Path::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(FSTUtil$Path).tp_dict, "class_", make_descriptor(FSTUtil$Path::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(FSTUtil$Path).tp_dict, "wrapfn_", make_descriptor(t_FSTUtil$Path::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(FSTUtil$Path).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_FSTUtil$Path_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, FSTUtil$Path::initializeClass, 1)))
                return NULL;
              return t_FSTUtil$Path::wrap_Object(FSTUtil$Path(((t_FSTUtil$Path *) arg)->object.this$));
            }
            static PyObject *t_FSTUtil$Path_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, FSTUtil$Path::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_FSTUtil$Path_of_(t_FSTUtil$Path *self, PyObject *args)
            {
              if (!parseArg(args, "T", 1, &(self->parameters)))
                Py_RETURN_SELF;
              return PyErr_SetArgsError((PyObject *) self, "of_", args);
            }

            static int t_FSTUtil$Path_init_(t_FSTUtil$Path *self, PyObject *args, PyObject *kwds)
            {
              jint a0;
              ::org::apache::lucene::util::fst::FST$Arc a1((jobject) NULL);
              PyTypeObject **p1;
              ::java::lang::Object a2((jobject) NULL);
              ::org::apache::lucene::util::IntsRefBuilder a3((jobject) NULL);
              FSTUtil$Path object((jobject) NULL);

              if (!parseArgs(args, "IKok", ::org::apache::lucene::util::fst::FST$Arc::initializeClass, ::org::apache::lucene::util::IntsRefBuilder::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::util::fst::t_FST$Arc::parameters_, &a2, &a3))
              {
                INT_CALL(object = FSTUtil$Path(a0, a1, a2, a3));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }
            static PyObject *t_FSTUtil$Path_get__parameters_(t_FSTUtil$Path *self, void *data)
            {
              return typeParameters(self->parameters, sizeof(self->parameters));
            }

            static PyObject *t_FSTUtil$Path_get__fstNode(t_FSTUtil$Path *self, void *data)
            {
              ::org::apache::lucene::util::fst::FST$Arc value((jobject) NULL);
              OBJ_CALL(value = self->object._get_fstNode());
              return ::org::apache::lucene::util::fst::t_FST$Arc::wrap_Object(value);
            }

            static PyObject *t_FSTUtil$Path_get__input(t_FSTUtil$Path *self, void *data)
            {
              ::org::apache::lucene::util::IntsRefBuilder value((jobject) NULL);
              OBJ_CALL(value = self->object._get_input());
              return ::org::apache::lucene::util::t_IntsRefBuilder::wrap_Object(value);
            }

            static PyObject *t_FSTUtil$Path_get__state(t_FSTUtil$Path *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object._get_state());
              return PyInt_FromLong((long) value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/BoolFunction.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *BoolFunction::class$ = NULL;
            jmethodID *BoolFunction::mids$ = NULL;
            bool BoolFunction::live$ = false;

            jclass BoolFunction::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/BoolFunction");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            BoolFunction::BoolFunction() : ::org::apache::lucene::queries::function::ValueSource(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_BoolFunction_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_BoolFunction_instance_(PyTypeObject *type, PyObject *arg);
            static int t_BoolFunction_init_(t_BoolFunction *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_BoolFunction__methods_[] = {
              DECLARE_METHOD(t_BoolFunction, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_BoolFunction, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(BoolFunction, t_BoolFunction, ::org::apache::lucene::queries::function::ValueSource, BoolFunction, t_BoolFunction_init_, 0, 0, 0, 0, 0);

            void t_BoolFunction::install(PyObject *module)
            {
              installType(&PY_TYPE(BoolFunction), module, "BoolFunction", 0);
            }

            void t_BoolFunction::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(BoolFunction).tp_dict, "class_", make_descriptor(BoolFunction::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(BoolFunction).tp_dict, "wrapfn_", make_descriptor(t_BoolFunction::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(BoolFunction).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_BoolFunction_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, BoolFunction::initializeClass, 1)))
                return NULL;
              return t_BoolFunction::wrap_Object(BoolFunction(((t_BoolFunction *) arg)->object.this$));
            }
            static PyObject *t_BoolFunction_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, BoolFunction::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_BoolFunction_init_(t_BoolFunction *self, PyObject *args, PyObject *kwds)
            {
              BoolFunction object((jobject) NULL);

              INT_CALL(object = BoolFunction());
              self->object = object;

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/ShortFieldSource.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/search/FieldCache$ShortParser.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *ShortFieldSource::class$ = NULL;
            jmethodID *ShortFieldSource::mids$ = NULL;
            bool ShortFieldSource::live$ = false;

            jclass ShortFieldSource::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/ShortFieldSource");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
                mids$[mid_init$_0d9308c5] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/search/FieldCache$ShortParser;)V");
                mids$[mid_description_14c7b5c5] = env->getMethodID(cls, "description", "()Ljava/lang/String;");
                mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_getValues_4c566485] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/queries/function/FunctionValues;");
                mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            ShortFieldSource::ShortFieldSource(const ::java::lang::String & a0) : ::org::apache::lucene::queries::function::valuesource::FieldCacheSource(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

            ShortFieldSource::ShortFieldSource(const ::java::lang::String & a0, const ::org::apache::lucene::search::FieldCache$ShortParser & a1) : ::org::apache::lucene::queries::function::valuesource::FieldCacheSource(env->newObject(initializeClass, &mids$, mid_init$_0d9308c5, a0.this$, a1.this$)) {}

            ::java::lang::String ShortFieldSource::description() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_description_14c7b5c5]));
            }

            jboolean ShortFieldSource::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
            }

            ::org::apache::lucene::queries::function::FunctionValues ShortFieldSource::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::FunctionValues(env->callObjectMethod(this$, mids$[mid_getValues_4c566485], a0.this$, a1.this$));
            }

            jint ShortFieldSource::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_ShortFieldSource_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_ShortFieldSource_instance_(PyTypeObject *type, PyObject *arg);
            static int t_ShortFieldSource_init_(t_ShortFieldSource *self, PyObject *args, PyObject *kwds);
            static PyObject *t_ShortFieldSource_description(t_ShortFieldSource *self, PyObject *args);
            static PyObject *t_ShortFieldSource_equals(t_ShortFieldSource *self, PyObject *args);
            static PyObject *t_ShortFieldSource_getValues(t_ShortFieldSource *self, PyObject *args);
            static PyObject *t_ShortFieldSource_hashCode(t_ShortFieldSource *self, PyObject *args);

            static PyMethodDef t_ShortFieldSource__methods_[] = {
              DECLARE_METHOD(t_ShortFieldSource, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_ShortFieldSource, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_ShortFieldSource, description, METH_VARARGS),
              DECLARE_METHOD(t_ShortFieldSource, equals, METH_VARARGS),
              DECLARE_METHOD(t_ShortFieldSource, getValues, METH_VARARGS),
              DECLARE_METHOD(t_ShortFieldSource, hashCode, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(ShortFieldSource, t_ShortFieldSource, ::org::apache::lucene::queries::function::valuesource::FieldCacheSource, ShortFieldSource, t_ShortFieldSource_init_, 0, 0, 0, 0, 0);

            void t_ShortFieldSource::install(PyObject *module)
            {
              installType(&PY_TYPE(ShortFieldSource), module, "ShortFieldSource", 0);
            }

            void t_ShortFieldSource::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(ShortFieldSource).tp_dict, "class_", make_descriptor(ShortFieldSource::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(ShortFieldSource).tp_dict, "wrapfn_", make_descriptor(t_ShortFieldSource::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(ShortFieldSource).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_ShortFieldSource_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, ShortFieldSource::initializeClass, 1)))
                return NULL;
              return t_ShortFieldSource::wrap_Object(ShortFieldSource(((t_ShortFieldSource *) arg)->object.this$));
            }
            static PyObject *t_ShortFieldSource_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, ShortFieldSource::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_ShortFieldSource_init_(t_ShortFieldSource *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 1:
                {
                  ::java::lang::String a0((jobject) NULL);
                  ShortFieldSource object((jobject) NULL);

                  if (!parseArgs(args, "s", &a0))
                  {
                    INT_CALL(object = ShortFieldSource(a0));
                    self->object = object;
                    break;
                  }
                }
                goto err;
               case 2:
                {
                  ::java::lang::String a0((jobject) NULL);
                  ::org::apache::lucene::search::FieldCache$ShortParser a1((jobject) NULL);
                  ShortFieldSource object((jobject) NULL);

                  if (!parseArgs(args, "sk", ::org::apache::lucene::search::FieldCache$ShortParser::initializeClass, &a0, &a1))
                  {
                    INT_CALL(object = ShortFieldSource(a0, a1));
                    self->object = object;
                    break;
                  }
                }
               default:
               err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_ShortFieldSource_description(t_ShortFieldSource *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.description());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(ShortFieldSource), (PyObject *) self, "description", args, 2);
            }

            static PyObject *t_ShortFieldSource_equals(t_ShortFieldSource *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(ShortFieldSource), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_ShortFieldSource_getValues(t_ShortFieldSource *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::FunctionValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::t_FunctionValues::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(ShortFieldSource), (PyObject *) self, "getValues", args, 2);
            }

            static PyObject *t_ShortFieldSource_hashCode(t_ShortFieldSource *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(ShortFieldSource), (PyObject *) self, "hashCode", args, 2);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/PositiveScoresOnlyCollector.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/Scorer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *PositiveScoresOnlyCollector::class$ = NULL;
        jmethodID *PositiveScoresOnlyCollector::mids$ = NULL;
        bool PositiveScoresOnlyCollector::live$ = false;

        jclass PositiveScoresOnlyCollector::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/PositiveScoresOnlyCollector");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_77379ce0] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Collector;)V");
            mids$[mid_acceptsDocsOutOfOrder_54c6a16a] = env->getMethodID(cls, "acceptsDocsOutOfOrder", "()Z");
            mids$[mid_collect_39c7bd3c] = env->getMethodID(cls, "collect", "(I)V");
            mids$[mid_setNextReader_a6f59947] = env->getMethodID(cls, "setNextReader", "(Lorg/apache/lucene/index/AtomicReaderContext;)V");
            mids$[mid_setScorer_8be0880c] = env->getMethodID(cls, "setScorer", "(Lorg/apache/lucene/search/Scorer;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PositiveScoresOnlyCollector::PositiveScoresOnlyCollector(const ::org::apache::lucene::search::Collector & a0) : ::org::apache::lucene::search::Collector(env->newObject(initializeClass, &mids$, mid_init$_77379ce0, a0.this$)) {}

        jboolean PositiveScoresOnlyCollector::acceptsDocsOutOfOrder() const
        {
          return env->callBooleanMethod(this$, mids$[mid_acceptsDocsOutOfOrder_54c6a16a]);
        }

        void PositiveScoresOnlyCollector::collect(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_collect_39c7bd3c], a0);
        }

        void PositiveScoresOnlyCollector::setNextReader(const ::org::apache::lucene::index::AtomicReaderContext & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setNextReader_a6f59947], a0.this$);
        }

        void PositiveScoresOnlyCollector::setScorer(const ::org::apache::lucene::search::Scorer & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setScorer_8be0880c], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_PositiveScoresOnlyCollector_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PositiveScoresOnlyCollector_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PositiveScoresOnlyCollector_init_(t_PositiveScoresOnlyCollector *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PositiveScoresOnlyCollector_acceptsDocsOutOfOrder(t_PositiveScoresOnlyCollector *self, PyObject *args);
        static PyObject *t_PositiveScoresOnlyCollector_collect(t_PositiveScoresOnlyCollector *self, PyObject *args);
        static PyObject *t_PositiveScoresOnlyCollector_setNextReader(t_PositiveScoresOnlyCollector *self, PyObject *args);
        static PyObject *t_PositiveScoresOnlyCollector_setScorer(t_PositiveScoresOnlyCollector *self, PyObject *args);
        static int t_PositiveScoresOnlyCollector_set__nextReader(t_PositiveScoresOnlyCollector *self, PyObject *arg, void *data);
        static int t_PositiveScoresOnlyCollector_set__scorer(t_PositiveScoresOnlyCollector *self, PyObject *arg, void *data);
        static PyGetSetDef t_PositiveScoresOnlyCollector__fields_[] = {
          DECLARE_SET_FIELD(t_PositiveScoresOnlyCollector, nextReader),
          DECLARE_SET_FIELD(t_PositiveScoresOnlyCollector, scorer),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PositiveScoresOnlyCollector__methods_[] = {
          DECLARE_METHOD(t_PositiveScoresOnlyCollector, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PositiveScoresOnlyCollector, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PositiveScoresOnlyCollector, acceptsDocsOutOfOrder, METH_VARARGS),
          DECLARE_METHOD(t_PositiveScoresOnlyCollector, collect, METH_VARARGS),
          DECLARE_METHOD(t_PositiveScoresOnlyCollector, setNextReader, METH_VARARGS),
          DECLARE_METHOD(t_PositiveScoresOnlyCollector, setScorer, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PositiveScoresOnlyCollector, t_PositiveScoresOnlyCollector, ::org::apache::lucene::search::Collector, PositiveScoresOnlyCollector, t_PositiveScoresOnlyCollector_init_, 0, 0, t_PositiveScoresOnlyCollector__fields_, 0, 0);

        void t_PositiveScoresOnlyCollector::install(PyObject *module)
        {
          installType(&PY_TYPE(PositiveScoresOnlyCollector), module, "PositiveScoresOnlyCollector", 0);
        }

        void t_PositiveScoresOnlyCollector::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PositiveScoresOnlyCollector).tp_dict, "class_", make_descriptor(PositiveScoresOnlyCollector::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PositiveScoresOnlyCollector).tp_dict, "wrapfn_", make_descriptor(t_PositiveScoresOnlyCollector::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PositiveScoresOnlyCollector).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_PositiveScoresOnlyCollector_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PositiveScoresOnlyCollector::initializeClass, 1)))
            return NULL;
          return t_PositiveScoresOnlyCollector::wrap_Object(PositiveScoresOnlyCollector(((t_PositiveScoresOnlyCollector *) arg)->object.this$));
        }
        static PyObject *t_PositiveScoresOnlyCollector_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PositiveScoresOnlyCollector::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PositiveScoresOnlyCollector_init_(t_PositiveScoresOnlyCollector *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::search::Collector a0((jobject) NULL);
          PositiveScoresOnlyCollector object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::search::Collector::initializeClass, &a0))
          {
            INT_CALL(object = PositiveScoresOnlyCollector(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_PositiveScoresOnlyCollector_acceptsDocsOutOfOrder(t_PositiveScoresOnlyCollector *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.acceptsDocsOutOfOrder());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(PositiveScoresOnlyCollector), (PyObject *) self, "acceptsDocsOutOfOrder", args, 2);
        }

        static PyObject *t_PositiveScoresOnlyCollector_collect(t_PositiveScoresOnlyCollector *self, PyObject *args)
        {
          jint a0;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(self->object.collect(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(PositiveScoresOnlyCollector), (PyObject *) self, "collect", args, 2);
        }

        static PyObject *t_PositiveScoresOnlyCollector_setNextReader(t_PositiveScoresOnlyCollector *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setNextReader(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(PositiveScoresOnlyCollector), (PyObject *) self, "setNextReader", args, 2);
        }

        static PyObject *t_PositiveScoresOnlyCollector_setScorer(t_PositiveScoresOnlyCollector *self, PyObject *args)
        {
          ::org::apache::lucene::search::Scorer a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::search::Scorer::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setScorer(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(PositiveScoresOnlyCollector), (PyObject *) self, "setScorer", args, 2);
        }

        static int t_PositiveScoresOnlyCollector_set__nextReader(t_PositiveScoresOnlyCollector *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::index::AtomicReaderContext value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &value))
            {
              INT_CALL(self->object.setNextReader(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "nextReader", arg);
          return -1;
        }

        static int t_PositiveScoresOnlyCollector_set__scorer(t_PositiveScoresOnlyCollector *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::search::Scorer value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::search::Scorer::initializeClass, &value))
            {
              INT_CALL(self->object.setScorer(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "scorer", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/writercache/TaxonomyWriterCache.h"
#include "org/apache/lucene/facet/taxonomy/FacetLabel.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          namespace writercache {

            ::java::lang::Class *TaxonomyWriterCache::class$ = NULL;
            jmethodID *TaxonomyWriterCache::mids$ = NULL;
            bool TaxonomyWriterCache::live$ = false;

            jclass TaxonomyWriterCache::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/writercache/TaxonomyWriterCache");

                mids$ = new jmethodID[max_mid];
                mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
                mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
                mids$[mid_get_283f83f5] = env->getMethodID(cls, "get", "(Lorg/apache/lucene/facet/taxonomy/FacetLabel;)I");
                mids$[mid_isFull_54c6a16a] = env->getMethodID(cls, "isFull", "()Z");
                mids$[mid_put_7ba580a4] = env->getMethodID(cls, "put", "(Lorg/apache/lucene/facet/taxonomy/FacetLabel;I)Z");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            void TaxonomyWriterCache::clear() const
            {
              env->callVoidMethod(this$, mids$[mid_clear_54c6a166]);
            }

            void TaxonomyWriterCache::close() const
            {
              env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
            }

            jint TaxonomyWriterCache::get(const ::org::apache::lucene::facet::taxonomy::FacetLabel & a0) const
            {
              return env->callIntMethod(this$, mids$[mid_get_283f83f5], a0.this$);
            }

            jboolean TaxonomyWriterCache::isFull() const
            {
              return env->callBooleanMethod(this$, mids$[mid_isFull_54c6a16a]);
            }

            jboolean TaxonomyWriterCache::put(const ::org::apache::lucene::facet::taxonomy::FacetLabel & a0, jint a1) const
            {
              return env->callBooleanMethod(this$, mids$[mid_put_7ba580a4], a0.this$, a1);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          namespace writercache {
            static PyObject *t_TaxonomyWriterCache_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_TaxonomyWriterCache_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_TaxonomyWriterCache_clear(t_TaxonomyWriterCache *self);
            static PyObject *t_TaxonomyWriterCache_close(t_TaxonomyWriterCache *self);
            static PyObject *t_TaxonomyWriterCache_get(t_TaxonomyWriterCache *self, PyObject *arg);
            static PyObject *t_TaxonomyWriterCache_isFull(t_TaxonomyWriterCache *self);
            static PyObject *t_TaxonomyWriterCache_put(t_TaxonomyWriterCache *self, PyObject *args);
            static PyObject *t_TaxonomyWriterCache_get__full(t_TaxonomyWriterCache *self, void *data);
            static PyGetSetDef t_TaxonomyWriterCache__fields_[] = {
              DECLARE_GET_FIELD(t_TaxonomyWriterCache, full),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_TaxonomyWriterCache__methods_[] = {
              DECLARE_METHOD(t_TaxonomyWriterCache, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TaxonomyWriterCache, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TaxonomyWriterCache, clear, METH_NOARGS),
              DECLARE_METHOD(t_TaxonomyWriterCache, close, METH_NOARGS),
              DECLARE_METHOD(t_TaxonomyWriterCache, get, METH_O),
              DECLARE_METHOD(t_TaxonomyWriterCache, isFull, METH_NOARGS),
              DECLARE_METHOD(t_TaxonomyWriterCache, put, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(TaxonomyWriterCache, t_TaxonomyWriterCache, ::java::lang::Object, TaxonomyWriterCache, abstract_init, 0, 0, t_TaxonomyWriterCache__fields_, 0, 0);

            void t_TaxonomyWriterCache::install(PyObject *module)
            {
              installType(&PY_TYPE(TaxonomyWriterCache), module, "TaxonomyWriterCache", 0);
            }

            void t_TaxonomyWriterCache::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(TaxonomyWriterCache).tp_dict, "class_", make_descriptor(TaxonomyWriterCache::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(TaxonomyWriterCache).tp_dict, "wrapfn_", make_descriptor(t_TaxonomyWriterCache::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(TaxonomyWriterCache).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_TaxonomyWriterCache_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, TaxonomyWriterCache::initializeClass, 1)))
                return NULL;
              return t_TaxonomyWriterCache::wrap_Object(TaxonomyWriterCache(((t_TaxonomyWriterCache *) arg)->object.this$));
            }
            static PyObject *t_TaxonomyWriterCache_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, TaxonomyWriterCache::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_TaxonomyWriterCache_clear(t_TaxonomyWriterCache *self)
            {
              OBJ_CALL(self->object.clear());
              Py_RETURN_NONE;
            }

            static PyObject *t_TaxonomyWriterCache_close(t_TaxonomyWriterCache *self)
            {
              OBJ_CALL(self->object.close());
              Py_RETURN_NONE;
            }

            static PyObject *t_TaxonomyWriterCache_get(t_TaxonomyWriterCache *self, PyObject *arg)
            {
              ::org::apache::lucene::facet::taxonomy::FacetLabel a0((jobject) NULL);
              jint result;

              if (!parseArg(arg, "k", ::org::apache::lucene::facet::taxonomy::FacetLabel::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.get(a0));
                return PyInt_FromLong((long) result);
              }

              PyErr_SetArgsError((PyObject *) self, "get", arg);
              return NULL;
            }

            static PyObject *t_TaxonomyWriterCache_isFull(t_TaxonomyWriterCache *self)
            {
              jboolean result;
              OBJ_CALL(result = self->object.isFull());
              Py_RETURN_BOOL(result);
            }

            static PyObject *t_TaxonomyWriterCache_put(t_TaxonomyWriterCache *self, PyObject *args)
            {
              ::org::apache::lucene::facet::taxonomy::FacetLabel a0((jobject) NULL);
              jint a1;
              jboolean result;

              if (!parseArgs(args, "kI", ::org::apache::lucene::facet::taxonomy::FacetLabel::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = self->object.put(a0, a1));
                Py_RETURN_BOOL(result);
              }

              PyErr_SetArgsError((PyObject *) self, "put", args);
              return NULL;
            }

            static PyObject *t_TaxonomyWriterCache_get__full(t_TaxonomyWriterCache *self, void *data)
            {
              jboolean value;
              OBJ_CALL(value = self->object.isFull());
              Py_RETURN_BOOL(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/de/GermanLightStemmer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace de {

          ::java::lang::Class *GermanLightStemmer::class$ = NULL;
          jmethodID *GermanLightStemmer::mids$ = NULL;
          bool GermanLightStemmer::live$ = false;

          jclass GermanLightStemmer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/de/GermanLightStemmer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_stem_ec6430eb] = env->getMethodID(cls, "stem", "([CI)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          GermanLightStemmer::GermanLightStemmer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint GermanLightStemmer::stem(const JArray< jchar > & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_stem_ec6430eb], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace de {
          static PyObject *t_GermanLightStemmer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GermanLightStemmer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_GermanLightStemmer_init_(t_GermanLightStemmer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_GermanLightStemmer_stem(t_GermanLightStemmer *self, PyObject *args);

          static PyMethodDef t_GermanLightStemmer__methods_[] = {
            DECLARE_METHOD(t_GermanLightStemmer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GermanLightStemmer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GermanLightStemmer, stem, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(GermanLightStemmer, t_GermanLightStemmer, ::java::lang::Object, GermanLightStemmer, t_GermanLightStemmer_init_, 0, 0, 0, 0, 0);

          void t_GermanLightStemmer::install(PyObject *module)
          {
            installType(&PY_TYPE(GermanLightStemmer), module, "GermanLightStemmer", 0);
          }

          void t_GermanLightStemmer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(GermanLightStemmer).tp_dict, "class_", make_descriptor(GermanLightStemmer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(GermanLightStemmer).tp_dict, "wrapfn_", make_descriptor(t_GermanLightStemmer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(GermanLightStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_GermanLightStemmer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GermanLightStemmer::initializeClass, 1)))
              return NULL;
            return t_GermanLightStemmer::wrap_Object(GermanLightStemmer(((t_GermanLightStemmer *) arg)->object.this$));
          }
          static PyObject *t_GermanLightStemmer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GermanLightStemmer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_GermanLightStemmer_init_(t_GermanLightStemmer *self, PyObject *args, PyObject *kwds)
          {
            GermanLightStemmer object((jobject) NULL);

            INT_CALL(object = GermanLightStemmer());
            self->object = object;

            return 0;
          }

          static PyObject *t_GermanLightStemmer_stem(t_GermanLightStemmer *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(result = self->object.stem(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "stem", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/tr/TurkishLowerCaseFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tr {

          ::java::lang::Class *TurkishLowerCaseFilter::class$ = NULL;
          jmethodID *TurkishLowerCaseFilter::mids$ = NULL;
          bool TurkishLowerCaseFilter::live$ = false;

          jclass TurkishLowerCaseFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/tr/TurkishLowerCaseFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TurkishLowerCaseFilter::TurkishLowerCaseFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean TurkishLowerCaseFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tr {
          static PyObject *t_TurkishLowerCaseFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TurkishLowerCaseFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_TurkishLowerCaseFilter_init_(t_TurkishLowerCaseFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_TurkishLowerCaseFilter_incrementToken(t_TurkishLowerCaseFilter *self, PyObject *args);

          static PyMethodDef t_TurkishLowerCaseFilter__methods_[] = {
            DECLARE_METHOD(t_TurkishLowerCaseFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TurkishLowerCaseFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TurkishLowerCaseFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(TurkishLowerCaseFilter, t_TurkishLowerCaseFilter, ::org::apache::lucene::analysis::TokenFilter, TurkishLowerCaseFilter, t_TurkishLowerCaseFilter_init_, 0, 0, 0, 0, 0);

          void t_TurkishLowerCaseFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(TurkishLowerCaseFilter), module, "TurkishLowerCaseFilter", 0);
          }

          void t_TurkishLowerCaseFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(TurkishLowerCaseFilter).tp_dict, "class_", make_descriptor(TurkishLowerCaseFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(TurkishLowerCaseFilter).tp_dict, "wrapfn_", make_descriptor(t_TurkishLowerCaseFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(TurkishLowerCaseFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TurkishLowerCaseFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TurkishLowerCaseFilter::initializeClass, 1)))
              return NULL;
            return t_TurkishLowerCaseFilter::wrap_Object(TurkishLowerCaseFilter(((t_TurkishLowerCaseFilter *) arg)->object.this$));
          }
          static PyObject *t_TurkishLowerCaseFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TurkishLowerCaseFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_TurkishLowerCaseFilter_init_(t_TurkishLowerCaseFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            TurkishLowerCaseFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = TurkishLowerCaseFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_TurkishLowerCaseFilter_incrementToken(t_TurkishLowerCaseFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(TurkishLowerCaseFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/en/EnglishPossessiveFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace en {

          ::java::lang::Class *EnglishPossessiveFilter::class$ = NULL;
          jmethodID *EnglishPossessiveFilter::mids$ = NULL;
          bool EnglishPossessiveFilter::live$ = false;

          jclass EnglishPossessiveFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/en/EnglishPossessiveFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_init$_8f50e725] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          EnglishPossessiveFilter::EnglishPossessiveFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          EnglishPossessiveFilter::EnglishPossessiveFilter(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::TokenStream & a1) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_8f50e725, a0.this$, a1.this$)) {}

          jboolean EnglishPossessiveFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace en {
          static PyObject *t_EnglishPossessiveFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_EnglishPossessiveFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_EnglishPossessiveFilter_init_(t_EnglishPossessiveFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_EnglishPossessiveFilter_incrementToken(t_EnglishPossessiveFilter *self, PyObject *args);

          static PyMethodDef t_EnglishPossessiveFilter__methods_[] = {
            DECLARE_METHOD(t_EnglishPossessiveFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_EnglishPossessiveFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_EnglishPossessiveFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(EnglishPossessiveFilter, t_EnglishPossessiveFilter, ::org::apache::lucene::analysis::TokenFilter, EnglishPossessiveFilter, t_EnglishPossessiveFilter_init_, 0, 0, 0, 0, 0);

          void t_EnglishPossessiveFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(EnglishPossessiveFilter), module, "EnglishPossessiveFilter", 0);
          }

          void t_EnglishPossessiveFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(EnglishPossessiveFilter).tp_dict, "class_", make_descriptor(EnglishPossessiveFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(EnglishPossessiveFilter).tp_dict, "wrapfn_", make_descriptor(t_EnglishPossessiveFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(EnglishPossessiveFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_EnglishPossessiveFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, EnglishPossessiveFilter::initializeClass, 1)))
              return NULL;
            return t_EnglishPossessiveFilter::wrap_Object(EnglishPossessiveFilter(((t_EnglishPossessiveFilter *) arg)->object.this$));
          }
          static PyObject *t_EnglishPossessiveFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, EnglishPossessiveFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_EnglishPossessiveFilter_init_(t_EnglishPossessiveFilter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                EnglishPossessiveFilter object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
                {
                  INT_CALL(object = EnglishPossessiveFilter(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
                EnglishPossessiveFilter object((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = EnglishPossessiveFilter(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_EnglishPossessiveFilter_incrementToken(t_EnglishPossessiveFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(EnglishPossessiveFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/Terms.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/TermsEnum.h"
#include "org/apache/lucene/util/automaton/CompiledAutomaton.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/util/Comparator.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *Terms::class$ = NULL;
        jmethodID *Terms::mids$ = NULL;
        bool Terms::live$ = false;
        JArray< Terms > *Terms::EMPTY_ARRAY = NULL;

        jclass Terms::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/Terms");

            mids$ = new jmethodID[max_mid];
            mids$[mid_getComparator_5a7ff2fc] = env->getMethodID(cls, "getComparator", "()Ljava/util/Comparator;");
            mids$[mid_getDocCount_54c6a179] = env->getMethodID(cls, "getDocCount", "()I");
            mids$[mid_getMax_4ae19461] = env->getMethodID(cls, "getMax", "()Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_getMin_4ae19461] = env->getMethodID(cls, "getMin", "()Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_getSumDocFreq_54c6a17a] = env->getMethodID(cls, "getSumDocFreq", "()J");
            mids$[mid_getSumTotalTermFreq_54c6a17a] = env->getMethodID(cls, "getSumTotalTermFreq", "()J");
            mids$[mid_hasFreqs_54c6a16a] = env->getMethodID(cls, "hasFreqs", "()Z");
            mids$[mid_hasOffsets_54c6a16a] = env->getMethodID(cls, "hasOffsets", "()Z");
            mids$[mid_hasPayloads_54c6a16a] = env->getMethodID(cls, "hasPayloads", "()Z");
            mids$[mid_hasPositions_54c6a16a] = env->getMethodID(cls, "hasPositions", "()Z");
            mids$[mid_intersect_b8f2b1bc] = env->getMethodID(cls, "intersect", "(Lorg/apache/lucene/util/automaton/CompiledAutomaton;Lorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/index/TermsEnum;");
            mids$[mid_iterator_d737078b] = env->getMethodID(cls, "iterator", "(Lorg/apache/lucene/index/TermsEnum;)Lorg/apache/lucene/index/TermsEnum;");
            mids$[mid_size_54c6a17a] = env->getMethodID(cls, "size", "()J");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            EMPTY_ARRAY = new JArray< Terms >(env->getStaticObjectField(cls, "EMPTY_ARRAY", "[Lorg/apache/lucene/index/Terms;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::java::util::Comparator Terms::getComparator() const
        {
          return ::java::util::Comparator(env->callObjectMethod(this$, mids$[mid_getComparator_5a7ff2fc]));
        }

        jint Terms::getDocCount() const
        {
          return env->callIntMethod(this$, mids$[mid_getDocCount_54c6a179]);
        }

        ::org::apache::lucene::util::BytesRef Terms::getMax() const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_getMax_4ae19461]));
        }

        ::org::apache::lucene::util::BytesRef Terms::getMin() const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_getMin_4ae19461]));
        }

        jlong Terms::getSumDocFreq() const
        {
          return env->callLongMethod(this$, mids$[mid_getSumDocFreq_54c6a17a]);
        }

        jlong Terms::getSumTotalTermFreq() const
        {
          return env->callLongMethod(this$, mids$[mid_getSumTotalTermFreq_54c6a17a]);
        }

        jboolean Terms::hasFreqs() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasFreqs_54c6a16a]);
        }

        jboolean Terms::hasOffsets() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasOffsets_54c6a16a]);
        }

        jboolean Terms::hasPayloads() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasPayloads_54c6a16a]);
        }

        jboolean Terms::hasPositions() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasPositions_54c6a16a]);
        }

        ::org::apache::lucene::index::TermsEnum Terms::intersect(const ::org::apache::lucene::util::automaton::CompiledAutomaton & a0, const ::org::apache::lucene::util::BytesRef & a1) const
        {
          return ::org::apache::lucene::index::TermsEnum(env->callObjectMethod(this$, mids$[mid_intersect_b8f2b1bc], a0.this$, a1.this$));
        }

        ::org::apache::lucene::index::TermsEnum Terms::iterator(const ::org::apache::lucene::index::TermsEnum & a0) const
        {
          return ::org::apache::lucene::index::TermsEnum(env->callObjectMethod(this$, mids$[mid_iterator_d737078b], a0.this$));
        }

        jlong Terms::size() const
        {
          return env->callLongMethod(this$, mids$[mid_size_54c6a17a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_Terms_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Terms_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Terms_getComparator(t_Terms *self);
        static PyObject *t_Terms_getDocCount(t_Terms *self);
        static PyObject *t_Terms_getMax(t_Terms *self);
        static PyObject *t_Terms_getMin(t_Terms *self);
        static PyObject *t_Terms_getSumDocFreq(t_Terms *self);
        static PyObject *t_Terms_getSumTotalTermFreq(t_Terms *self);
        static PyObject *t_Terms_hasFreqs(t_Terms *self);
        static PyObject *t_Terms_hasOffsets(t_Terms *self);
        static PyObject *t_Terms_hasPayloads(t_Terms *self);
        static PyObject *t_Terms_hasPositions(t_Terms *self);
        static PyObject *t_Terms_intersect(t_Terms *self, PyObject *args);
        static PyObject *t_Terms_iterator(t_Terms *self, PyObject *arg);
        static PyObject *t_Terms_size(t_Terms *self);
        static PyObject *t_Terms_get__comparator(t_Terms *self, void *data);
        static PyObject *t_Terms_get__docCount(t_Terms *self, void *data);
        static PyObject *t_Terms_get__max(t_Terms *self, void *data);
        static PyObject *t_Terms_get__min(t_Terms *self, void *data);
        static PyObject *t_Terms_get__sumDocFreq(t_Terms *self, void *data);
        static PyObject *t_Terms_get__sumTotalTermFreq(t_Terms *self, void *data);
        static PyGetSetDef t_Terms__fields_[] = {
          DECLARE_GET_FIELD(t_Terms, comparator),
          DECLARE_GET_FIELD(t_Terms, docCount),
          DECLARE_GET_FIELD(t_Terms, max),
          DECLARE_GET_FIELD(t_Terms, min),
          DECLARE_GET_FIELD(t_Terms, sumDocFreq),
          DECLARE_GET_FIELD(t_Terms, sumTotalTermFreq),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_Terms__methods_[] = {
          DECLARE_METHOD(t_Terms, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Terms, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Terms, getComparator, METH_NOARGS),
          DECLARE_METHOD(t_Terms, getDocCount, METH_NOARGS),
          DECLARE_METHOD(t_Terms, getMax, METH_NOARGS),
          DECLARE_METHOD(t_Terms, getMin, METH_NOARGS),
          DECLARE_METHOD(t_Terms, getSumDocFreq, METH_NOARGS),
          DECLARE_METHOD(t_Terms, getSumTotalTermFreq, METH_NOARGS),
          DECLARE_METHOD(t_Terms, hasFreqs, METH_NOARGS),
          DECLARE_METHOD(t_Terms, hasOffsets, METH_NOARGS),
          DECLARE_METHOD(t_Terms, hasPayloads, METH_NOARGS),
          DECLARE_METHOD(t_Terms, hasPositions, METH_NOARGS),
          DECLARE_METHOD(t_Terms, intersect, METH_VARARGS),
          DECLARE_METHOD(t_Terms, iterator, METH_O),
          DECLARE_METHOD(t_Terms, size, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Terms, t_Terms, ::java::lang::Object, Terms, abstract_init, 0, 0, t_Terms__fields_, 0, 0);

        void t_Terms::install(PyObject *module)
        {
          installType(&PY_TYPE(Terms), module, "Terms", 0);
        }

        void t_Terms::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(Terms).tp_dict, "class_", make_descriptor(Terms::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(Terms).tp_dict, "wrapfn_", make_descriptor(t_Terms::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(Terms).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(Terms::initializeClass);
          PyDict_SetItemString(PY_TYPE(Terms).tp_dict, "EMPTY_ARRAY", make_descriptor(JArray<jobject>(Terms::EMPTY_ARRAY->this$).wrap(t_Terms::wrap_jobject)));
        }

        static PyObject *t_Terms_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Terms::initializeClass, 1)))
            return NULL;
          return t_Terms::wrap_Object(Terms(((t_Terms *) arg)->object.this$));
        }
        static PyObject *t_Terms_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Terms::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_Terms_getComparator(t_Terms *self)
        {
          ::java::util::Comparator result((jobject) NULL);
          OBJ_CALL(result = self->object.getComparator());
          return ::java::util::t_Comparator::wrap_Object(result, &::org::apache::lucene::util::PY_TYPE(BytesRef));
        }

        static PyObject *t_Terms_getDocCount(t_Terms *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getDocCount());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_Terms_getMax(t_Terms *self)
        {
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);
          OBJ_CALL(result = self->object.getMax());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
        }

        static PyObject *t_Terms_getMin(t_Terms *self)
        {
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);
          OBJ_CALL(result = self->object.getMin());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
        }

        static PyObject *t_Terms_getSumDocFreq(t_Terms *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getSumDocFreq());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_Terms_getSumTotalTermFreq(t_Terms *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getSumTotalTermFreq());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_Terms_hasFreqs(t_Terms *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.hasFreqs());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_Terms_hasOffsets(t_Terms *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.hasOffsets());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_Terms_hasPayloads(t_Terms *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.hasPayloads());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_Terms_hasPositions(t_Terms *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.hasPositions());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_Terms_intersect(t_Terms *self, PyObject *args)
        {
          ::org::apache::lucene::util::automaton::CompiledAutomaton a0((jobject) NULL);
          ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
          ::org::apache::lucene::index::TermsEnum result((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::util::automaton::CompiledAutomaton::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.intersect(a0, a1));
            return ::org::apache::lucene::index::t_TermsEnum::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "intersect", args);
          return NULL;
        }

        static PyObject *t_Terms_iterator(t_Terms *self, PyObject *arg)
        {
          ::org::apache::lucene::index::TermsEnum a0((jobject) NULL);
          ::org::apache::lucene::index::TermsEnum result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::TermsEnum::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.iterator(a0));
            return ::org::apache::lucene::index::t_TermsEnum::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "iterator", arg);
          return NULL;
        }

        static PyObject *t_Terms_size(t_Terms *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.size());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_Terms_get__comparator(t_Terms *self, void *data)
        {
          ::java::util::Comparator value((jobject) NULL);
          OBJ_CALL(value = self->object.getComparator());
          return ::java::util::t_Comparator::wrap_Object(value);
        }

        static PyObject *t_Terms_get__docCount(t_Terms *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getDocCount());
          return PyInt_FromLong((long) value);
        }

        static PyObject *t_Terms_get__max(t_Terms *self, void *data)
        {
          ::org::apache::lucene::util::BytesRef value((jobject) NULL);
          OBJ_CALL(value = self->object.getMax());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(value);
        }

        static PyObject *t_Terms_get__min(t_Terms *self, void *data)
        {
          ::org::apache::lucene::util::BytesRef value((jobject) NULL);
          OBJ_CALL(value = self->object.getMin());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(value);
        }

        static PyObject *t_Terms_get__sumDocFreq(t_Terms *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getSumDocFreq());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }

        static PyObject *t_Terms_get__sumTotalTermFreq(t_Terms *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getSumTotalTermFreq());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/NumericTokenStream$NumericTermAttribute.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {

        ::java::lang::Class *NumericTokenStream$NumericTermAttribute::class$ = NULL;
        jmethodID *NumericTokenStream$NumericTermAttribute::mids$ = NULL;
        bool NumericTokenStream$NumericTermAttribute::live$ = false;

        jclass NumericTokenStream$NumericTermAttribute::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/NumericTokenStream$NumericTermAttribute");

            mids$ = new jmethodID[max_mid];
            mids$[mid_getRawValue_54c6a17a] = env->getMethodID(cls, "getRawValue", "()J");
            mids$[mid_getShift_54c6a179] = env->getMethodID(cls, "getShift", "()I");
            mids$[mid_getValueSize_54c6a179] = env->getMethodID(cls, "getValueSize", "()I");
            mids$[mid_incShift_54c6a179] = env->getMethodID(cls, "incShift", "()I");
            mids$[mid_init_72e1d373] = env->getMethodID(cls, "init", "(JIII)V");
            mids$[mid_setShift_39c7bd3c] = env->getMethodID(cls, "setShift", "(I)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jlong NumericTokenStream$NumericTermAttribute::getRawValue() const
        {
          return env->callLongMethod(this$, mids$[mid_getRawValue_54c6a17a]);
        }

        jint NumericTokenStream$NumericTermAttribute::getShift() const
        {
          return env->callIntMethod(this$, mids$[mid_getShift_54c6a179]);
        }

        jint NumericTokenStream$NumericTermAttribute::getValueSize() const
        {
          return env->callIntMethod(this$, mids$[mid_getValueSize_54c6a179]);
        }

        jint NumericTokenStream$NumericTermAttribute::incShift() const
        {
          return env->callIntMethod(this$, mids$[mid_incShift_54c6a179]);
        }

        void NumericTokenStream$NumericTermAttribute::init(jlong a0, jint a1, jint a2, jint a3) const
        {
          env->callVoidMethod(this$, mids$[mid_init_72e1d373], a0, a1, a2, a3);
        }

        void NumericTokenStream$NumericTermAttribute::setShift(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setShift_39c7bd3c], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        static PyObject *t_NumericTokenStream$NumericTermAttribute_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NumericTokenStream$NumericTermAttribute_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NumericTokenStream$NumericTermAttribute_getRawValue(t_NumericTokenStream$NumericTermAttribute *self);
        static PyObject *t_NumericTokenStream$NumericTermAttribute_getShift(t_NumericTokenStream$NumericTermAttribute *self);
        static PyObject *t_NumericTokenStream$NumericTermAttribute_getValueSize(t_NumericTokenStream$NumericTermAttribute *self);
        static PyObject *t_NumericTokenStream$NumericTermAttribute_incShift(t_NumericTokenStream$NumericTermAttribute *self);
        static PyObject *t_NumericTokenStream$NumericTermAttribute_init(t_NumericTokenStream$NumericTermAttribute *self, PyObject *args);
        static PyObject *t_NumericTokenStream$NumericTermAttribute_setShift(t_NumericTokenStream$NumericTermAttribute *self, PyObject *arg);
        static PyObject *t_NumericTokenStream$NumericTermAttribute_get__rawValue(t_NumericTokenStream$NumericTermAttribute *self, void *data);
        static PyObject *t_NumericTokenStream$NumericTermAttribute_get__shift(t_NumericTokenStream$NumericTermAttribute *self, void *data);
        static int t_NumericTokenStream$NumericTermAttribute_set__shift(t_NumericTokenStream$NumericTermAttribute *self, PyObject *arg, void *data);
        static PyObject *t_NumericTokenStream$NumericTermAttribute_get__valueSize(t_NumericTokenStream$NumericTermAttribute *self, void *data);
        static PyGetSetDef t_NumericTokenStream$NumericTermAttribute__fields_[] = {
          DECLARE_GET_FIELD(t_NumericTokenStream$NumericTermAttribute, rawValue),
          DECLARE_GETSET_FIELD(t_NumericTokenStream$NumericTermAttribute, shift),
          DECLARE_GET_FIELD(t_NumericTokenStream$NumericTermAttribute, valueSize),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_NumericTokenStream$NumericTermAttribute__methods_[] = {
          DECLARE_METHOD(t_NumericTokenStream$NumericTermAttribute, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NumericTokenStream$NumericTermAttribute, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NumericTokenStream$NumericTermAttribute, getRawValue, METH_NOARGS),
          DECLARE_METHOD(t_NumericTokenStream$NumericTermAttribute, getShift, METH_NOARGS),
          DECLARE_METHOD(t_NumericTokenStream$NumericTermAttribute, getValueSize, METH_NOARGS),
          DECLARE_METHOD(t_NumericTokenStream$NumericTermAttribute, incShift, METH_NOARGS),
          DECLARE_METHOD(t_NumericTokenStream$NumericTermAttribute, init, METH_VARARGS),
          DECLARE_METHOD(t_NumericTokenStream$NumericTermAttribute, setShift, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(NumericTokenStream$NumericTermAttribute, t_NumericTokenStream$NumericTermAttribute, ::org::apache::lucene::util::Attribute, NumericTokenStream$NumericTermAttribute, abstract_init, 0, 0, t_NumericTokenStream$NumericTermAttribute__fields_, 0, 0);

        void t_NumericTokenStream$NumericTermAttribute::install(PyObject *module)
        {
          installType(&PY_TYPE(NumericTokenStream$NumericTermAttribute), module, "NumericTokenStream$NumericTermAttribute", 0);
        }

        void t_NumericTokenStream$NumericTermAttribute::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(NumericTokenStream$NumericTermAttribute).tp_dict, "class_", make_descriptor(NumericTokenStream$NumericTermAttribute::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(NumericTokenStream$NumericTermAttribute).tp_dict, "wrapfn_", make_descriptor(t_NumericTokenStream$NumericTermAttribute::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(NumericTokenStream$NumericTermAttribute).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_NumericTokenStream$NumericTermAttribute_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, NumericTokenStream$NumericTermAttribute::initializeClass, 1)))
            return NULL;
          return t_NumericTokenStream$NumericTermAttribute::wrap_Object(NumericTokenStream$NumericTermAttribute(((t_NumericTokenStream$NumericTermAttribute *) arg)->object.this$));
        }
        static PyObject *t_NumericTokenStream$NumericTermAttribute_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, NumericTokenStream$NumericTermAttribute::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_NumericTokenStream$NumericTermAttribute_getRawValue(t_NumericTokenStream$NumericTermAttribute *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getRawValue());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_NumericTokenStream$NumericTermAttribute_getShift(t_NumericTokenStream$NumericTermAttribute *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getShift());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_NumericTokenStream$NumericTermAttribute_getValueSize(t_NumericTokenStream$NumericTermAttribute *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getValueSize());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_NumericTokenStream$NumericTermAttribute_incShift(t_NumericTokenStream$NumericTermAttribute *self)
        {
          jint result;
          OBJ_CALL(result = self->object.incShift());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_NumericTokenStream$NumericTermAttribute_init(t_NumericTokenStream$NumericTermAttribute *self, PyObject *args)
        {
          jlong a0;
          jint a1;
          jint a2;
          jint a3;

          if (!parseArgs(args, "JIII", &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(self->object.init(a0, a1, a2, a3));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "init", args);
          return NULL;
        }

        static PyObject *t_NumericTokenStream$NumericTermAttribute_setShift(t_NumericTokenStream$NumericTermAttribute *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.setShift(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setShift", arg);
          return NULL;
        }

        static PyObject *t_NumericTokenStream$NumericTermAttribute_get__rawValue(t_NumericTokenStream$NumericTermAttribute *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getRawValue());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }

        static PyObject *t_NumericTokenStream$NumericTermAttribute_get__shift(t_NumericTokenStream$NumericTermAttribute *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getShift());
          return PyInt_FromLong((long) value);
        }
        static int t_NumericTokenStream$NumericTermAttribute_set__shift(t_NumericTokenStream$NumericTermAttribute *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setShift(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "shift", arg);
          return -1;
        }

        static PyObject *t_NumericTokenStream$NumericTermAttribute_get__valueSize(t_NumericTokenStream$NumericTermAttribute *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getValueSize());
          return PyInt_FromLong((long) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/util/CharTokenizer.h"
#include "java/io/IOException.h"
#include "java/io/Reader.h"
#include "org/apache/lucene/util/Version.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {

          ::java::lang::Class *CharTokenizer::class$ = NULL;
          jmethodID *CharTokenizer::mids$ = NULL;
          bool CharTokenizer::live$ = false;

          jclass CharTokenizer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/util/CharTokenizer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_cf2e3c10] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;)V");
              mids$[mid_init$_5877b8f0] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;)V");
              mids$[mid_init$_7997a391] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Ljava/io/Reader;)V");
              mids$[mid_init$_be7a3ecf] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;)V");
              mids$[mid_end_54c6a166] = env->getMethodID(cls, "end", "()V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");
              mids$[mid_normalize_39c7bd23] = env->getMethodID(cls, "normalize", "(I)I");
              mids$[mid_isTokenChar_39c7bd30] = env->getMethodID(cls, "isTokenChar", "(I)Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CharTokenizer::CharTokenizer(const ::java::io::Reader & a0) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_cf2e3c10, a0.this$)) {}

          CharTokenizer::CharTokenizer(const ::org::apache::lucene::util::AttributeFactory & a0, const ::java::io::Reader & a1) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_5877b8f0, a0.this$, a1.this$)) {}

          CharTokenizer::CharTokenizer(const ::org::apache::lucene::util::Version & a0, const ::java::io::Reader & a1) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_7997a391, a0.this$, a1.this$)) {}

          CharTokenizer::CharTokenizer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::util::AttributeFactory & a1, const ::java::io::Reader & a2) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_be7a3ecf, a0.this$, a1.this$, a2.this$)) {}

          void CharTokenizer::end() const
          {
            env->callVoidMethod(this$, mids$[mid_end_54c6a166]);
          }

          jboolean CharTokenizer::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void CharTokenizer::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {
          static PyObject *t_CharTokenizer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CharTokenizer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CharTokenizer_init_(t_CharTokenizer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CharTokenizer_end(t_CharTokenizer *self, PyObject *args);
          static PyObject *t_CharTokenizer_incrementToken(t_CharTokenizer *self, PyObject *args);
          static PyObject *t_CharTokenizer_reset(t_CharTokenizer *self, PyObject *args);

          static PyMethodDef t_CharTokenizer__methods_[] = {
            DECLARE_METHOD(t_CharTokenizer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CharTokenizer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CharTokenizer, end, METH_VARARGS),
            DECLARE_METHOD(t_CharTokenizer, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_CharTokenizer, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CharTokenizer, t_CharTokenizer, ::org::apache::lucene::analysis::Tokenizer, CharTokenizer, t_CharTokenizer_init_, 0, 0, 0, 0, 0);

          void t_CharTokenizer::install(PyObject *module)
          {
            installType(&PY_TYPE(CharTokenizer), module, "CharTokenizer", 0);
          }

          void t_CharTokenizer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CharTokenizer).tp_dict, "class_", make_descriptor(CharTokenizer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CharTokenizer).tp_dict, "wrapfn_", make_descriptor(t_CharTokenizer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CharTokenizer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CharTokenizer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CharTokenizer::initializeClass, 1)))
              return NULL;
            return t_CharTokenizer::wrap_Object(CharTokenizer(((t_CharTokenizer *) arg)->object.this$));
          }
          static PyObject *t_CharTokenizer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CharTokenizer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CharTokenizer_init_(t_CharTokenizer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::java::io::Reader a0((jobject) NULL);
                CharTokenizer object((jobject) NULL);

                if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
                {
                  INT_CALL(object = CharTokenizer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
                ::java::io::Reader a1((jobject) NULL);
                CharTokenizer object((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = CharTokenizer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                ::java::io::Reader a1((jobject) NULL);
                CharTokenizer object((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::util::Version::initializeClass, ::java::io::Reader::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = CharTokenizer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                ::org::apache::lucene::util::AttributeFactory a1((jobject) NULL);
                ::java::io::Reader a2((jobject) NULL);
                CharTokenizer object((jobject) NULL);

                if (!parseArgs(args, "kkk", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = CharTokenizer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_CharTokenizer_end(t_CharTokenizer *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.end());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(CharTokenizer), (PyObject *) self, "end", args, 2);
          }

          static PyObject *t_CharTokenizer_incrementToken(t_CharTokenizer *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(CharTokenizer), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_CharTokenizer_reset(t_CharTokenizer *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(CharTokenizer), (PyObject *) self, "reset", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/vectorhighlight/FieldQuery.h"
#include "java/util/List.h"
#include "org/apache/lucene/search/vectorhighlight/FieldTermStack$TermInfo.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/vectorhighlight/FieldQuery$QueryPhraseMap.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {

          ::java::lang::Class *FieldQuery::class$ = NULL;
          jmethodID *FieldQuery::mids$ = NULL;
          bool FieldQuery::live$ = false;

          jclass FieldQuery::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/vectorhighlight/FieldQuery");

              mids$ = new jmethodID[max_mid];
              mids$[mid_getFieldTermMap_e027f4d1] = env->getMethodID(cls, "getFieldTermMap", "(Ljava/lang/String;Ljava/lang/String;)Lorg/apache/lucene/search/vectorhighlight/FieldQuery$QueryPhraseMap;");
              mids$[mid_searchPhrase_361b35e4] = env->getMethodID(cls, "searchPhrase", "(Ljava/lang/String;Ljava/util/List;)Lorg/apache/lucene/search/vectorhighlight/FieldQuery$QueryPhraseMap;");
              mids$[mid_applyParentBoost_aaf01f72] = env->getMethodID(cls, "applyParentBoost", "(Lorg/apache/lucene/search/Query;Lorg/apache/lucene/search/Query;)Lorg/apache/lucene/search/Query;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::org::apache::lucene::search::vectorhighlight::FieldQuery$QueryPhraseMap FieldQuery::getFieldTermMap(const ::java::lang::String & a0, const ::java::lang::String & a1) const
          {
            return ::org::apache::lucene::search::vectorhighlight::FieldQuery$QueryPhraseMap(env->callObjectMethod(this$, mids$[mid_getFieldTermMap_e027f4d1], a0.this$, a1.this$));
          }

          ::org::apache::lucene::search::vectorhighlight::FieldQuery$QueryPhraseMap FieldQuery::searchPhrase(const ::java::lang::String & a0, const ::java::util::List & a1) const
          {
            return ::org::apache::lucene::search::vectorhighlight::FieldQuery$QueryPhraseMap(env->callObjectMethod(this$, mids$[mid_searchPhrase_361b35e4], a0.this$, a1.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {
          static PyObject *t_FieldQuery_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FieldQuery_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FieldQuery_getFieldTermMap(t_FieldQuery *self, PyObject *args);
          static PyObject *t_FieldQuery_searchPhrase(t_FieldQuery *self, PyObject *args);

          static PyMethodDef t_FieldQuery__methods_[] = {
            DECLARE_METHOD(t_FieldQuery, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FieldQuery, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FieldQuery, getFieldTermMap, METH_VARARGS),
            DECLARE_METHOD(t_FieldQuery, searchPhrase, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FieldQuery, t_FieldQuery, ::java::lang::Object, FieldQuery, abstract_init, 0, 0, 0, 0, 0);

          void t_FieldQuery::install(PyObject *module)
          {
            installType(&PY_TYPE(FieldQuery), module, "FieldQuery", 0);
            PyDict_SetItemString(PY_TYPE(FieldQuery).tp_dict, "QueryPhraseMap", make_descriptor(&PY_TYPE(FieldQuery$QueryPhraseMap)));
          }

          void t_FieldQuery::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FieldQuery).tp_dict, "class_", make_descriptor(FieldQuery::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FieldQuery).tp_dict, "wrapfn_", make_descriptor(t_FieldQuery::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FieldQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FieldQuery_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FieldQuery::initializeClass, 1)))
              return NULL;
            return t_FieldQuery::wrap_Object(FieldQuery(((t_FieldQuery *) arg)->object.this$));
          }
          static PyObject *t_FieldQuery_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FieldQuery::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_FieldQuery_getFieldTermMap(t_FieldQuery *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            ::org::apache::lucene::search::vectorhighlight::FieldQuery$QueryPhraseMap result((jobject) NULL);

            if (!parseArgs(args, "ss", &a0, &a1))
            {
              OBJ_CALL(result = self->object.getFieldTermMap(a0, a1));
              return ::org::apache::lucene::search::vectorhighlight::t_FieldQuery$QueryPhraseMap::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getFieldTermMap", args);
            return NULL;
          }

          static PyObject *t_FieldQuery_searchPhrase(t_FieldQuery *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::util::List a1((jobject) NULL);
            PyTypeObject **p1;
            ::org::apache::lucene::search::vectorhighlight::FieldQuery$QueryPhraseMap result((jobject) NULL);

            if (!parseArgs(args, "sK", ::java::util::List::initializeClass, &a0, &a1, &p1, ::java::util::t_List::parameters_))
            {
              OBJ_CALL(result = self->object.searchPhrase(a0, a1));
              return ::org::apache::lucene::search::vectorhighlight::t_FieldQuery$QueryPhraseMap::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "searchPhrase", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/tokenattributes/PayloadAttributeImpl.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/analysis/tokenattributes/PayloadAttribute.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {

          ::java::lang::Class *PayloadAttributeImpl::class$ = NULL;
          jmethodID *PayloadAttributeImpl::mids$ = NULL;
          bool PayloadAttributeImpl::live$ = false;

          jclass PayloadAttributeImpl::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/tokenattributes/PayloadAttributeImpl");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_7bc03dc4] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/BytesRef;)V");
              mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
              mids$[mid_clone_fdeb4a36] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/analysis/tokenattributes/PayloadAttributeImpl;");
              mids$[mid_copyTo_d86caa9f] = env->getMethodID(cls, "copyTo", "(Lorg/apache/lucene/util/AttributeImpl;)V");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_getPayload_4ae19461] = env->getMethodID(cls, "getPayload", "()Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_setPayload_7bc03dc4] = env->getMethodID(cls, "setPayload", "(Lorg/apache/lucene/util/BytesRef;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PayloadAttributeImpl::PayloadAttributeImpl() : ::org::apache::lucene::util::AttributeImpl(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          PayloadAttributeImpl::PayloadAttributeImpl(const ::org::apache::lucene::util::BytesRef & a0) : ::org::apache::lucene::util::AttributeImpl(env->newObject(initializeClass, &mids$, mid_init$_7bc03dc4, a0.this$)) {}

          void PayloadAttributeImpl::clear() const
          {
            env->callVoidMethod(this$, mids$[mid_clear_54c6a166]);
          }

          PayloadAttributeImpl PayloadAttributeImpl::clone() const
          {
            return PayloadAttributeImpl(env->callObjectMethod(this$, mids$[mid_clone_fdeb4a36]));
          }

          void PayloadAttributeImpl::copyTo(const ::org::apache::lucene::util::AttributeImpl & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_copyTo_d86caa9f], a0.this$);
          }

          jboolean PayloadAttributeImpl::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          ::org::apache::lucene::util::BytesRef PayloadAttributeImpl::getPayload() const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_getPayload_4ae19461]));
          }

          jint PayloadAttributeImpl::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          void PayloadAttributeImpl::setPayload(const ::org::apache::lucene::util::BytesRef & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setPayload_7bc03dc4], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {
          static PyObject *t_PayloadAttributeImpl_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PayloadAttributeImpl_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PayloadAttributeImpl_init_(t_PayloadAttributeImpl *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PayloadAttributeImpl_clear(t_PayloadAttributeImpl *self, PyObject *args);
          static PyObject *t_PayloadAttributeImpl_clone(t_PayloadAttributeImpl *self, PyObject *args);
          static PyObject *t_PayloadAttributeImpl_copyTo(t_PayloadAttributeImpl *self, PyObject *args);
          static PyObject *t_PayloadAttributeImpl_equals(t_PayloadAttributeImpl *self, PyObject *args);
          static PyObject *t_PayloadAttributeImpl_getPayload(t_PayloadAttributeImpl *self);
          static PyObject *t_PayloadAttributeImpl_hashCode(t_PayloadAttributeImpl *self, PyObject *args);
          static PyObject *t_PayloadAttributeImpl_setPayload(t_PayloadAttributeImpl *self, PyObject *arg);
          static PyObject *t_PayloadAttributeImpl_get__payload(t_PayloadAttributeImpl *self, void *data);
          static int t_PayloadAttributeImpl_set__payload(t_PayloadAttributeImpl *self, PyObject *arg, void *data);
          static PyGetSetDef t_PayloadAttributeImpl__fields_[] = {
            DECLARE_GETSET_FIELD(t_PayloadAttributeImpl, payload),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_PayloadAttributeImpl__methods_[] = {
            DECLARE_METHOD(t_PayloadAttributeImpl, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PayloadAttributeImpl, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PayloadAttributeImpl, clear, METH_VARARGS),
            DECLARE_METHOD(t_PayloadAttributeImpl, clone, METH_VARARGS),
            DECLARE_METHOD(t_PayloadAttributeImpl, copyTo, METH_VARARGS),
            DECLARE_METHOD(t_PayloadAttributeImpl, equals, METH_VARARGS),
            DECLARE_METHOD(t_PayloadAttributeImpl, getPayload, METH_NOARGS),
            DECLARE_METHOD(t_PayloadAttributeImpl, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_PayloadAttributeImpl, setPayload, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PayloadAttributeImpl, t_PayloadAttributeImpl, ::org::apache::lucene::util::AttributeImpl, PayloadAttributeImpl, t_PayloadAttributeImpl_init_, 0, 0, t_PayloadAttributeImpl__fields_, 0, 0);

          void t_PayloadAttributeImpl::install(PyObject *module)
          {
            installType(&PY_TYPE(PayloadAttributeImpl), module, "PayloadAttributeImpl", 0);
          }

          void t_PayloadAttributeImpl::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PayloadAttributeImpl).tp_dict, "class_", make_descriptor(PayloadAttributeImpl::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PayloadAttributeImpl).tp_dict, "wrapfn_", make_descriptor(t_PayloadAttributeImpl::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PayloadAttributeImpl).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PayloadAttributeImpl_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PayloadAttributeImpl::initializeClass, 1)))
              return NULL;
            return t_PayloadAttributeImpl::wrap_Object(PayloadAttributeImpl(((t_PayloadAttributeImpl *) arg)->object.this$));
          }
          static PyObject *t_PayloadAttributeImpl_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PayloadAttributeImpl::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PayloadAttributeImpl_init_(t_PayloadAttributeImpl *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                PayloadAttributeImpl object((jobject) NULL);

                INT_CALL(object = PayloadAttributeImpl());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
                PayloadAttributeImpl object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
                {
                  INT_CALL(object = PayloadAttributeImpl(a0));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PayloadAttributeImpl_clear(t_PayloadAttributeImpl *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.clear());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(PayloadAttributeImpl), (PyObject *) self, "clear", args, 2);
          }

          static PyObject *t_PayloadAttributeImpl_clone(t_PayloadAttributeImpl *self, PyObject *args)
          {
            PayloadAttributeImpl result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.clone());
              return t_PayloadAttributeImpl::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(PayloadAttributeImpl), (PyObject *) self, "clone", args, 2);
          }

          static PyObject *t_PayloadAttributeImpl_copyTo(t_PayloadAttributeImpl *self, PyObject *args)
          {
            ::org::apache::lucene::util::AttributeImpl a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::util::AttributeImpl::initializeClass, &a0))
            {
              OBJ_CALL(self->object.copyTo(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(PayloadAttributeImpl), (PyObject *) self, "copyTo", args, 2);
          }

          static PyObject *t_PayloadAttributeImpl_equals(t_PayloadAttributeImpl *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(PayloadAttributeImpl), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_PayloadAttributeImpl_getPayload(t_PayloadAttributeImpl *self)
          {
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);
            OBJ_CALL(result = self->object.getPayload());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          static PyObject *t_PayloadAttributeImpl_hashCode(t_PayloadAttributeImpl *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(PayloadAttributeImpl), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_PayloadAttributeImpl_setPayload(t_PayloadAttributeImpl *self, PyObject *arg)
          {
            ::org::apache::lucene::util::BytesRef a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
            {
              OBJ_CALL(self->object.setPayload(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setPayload", arg);
            return NULL;
          }

          static PyObject *t_PayloadAttributeImpl_get__payload(t_PayloadAttributeImpl *self, void *data)
          {
            ::org::apache::lucene::util::BytesRef value((jobject) NULL);
            OBJ_CALL(value = self->object.getPayload());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(value);
          }
          static int t_PayloadAttributeImpl_set__payload(t_PayloadAttributeImpl *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::util::BytesRef value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &value))
              {
                INT_CALL(self->object.setPayload(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "payload", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FieldComparator$ShortComparator.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/FieldComparator.h"
#include "java/lang/Short.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FieldComparator$ShortComparator::class$ = NULL;
        jmethodID *FieldComparator$ShortComparator::mids$ = NULL;
        bool FieldComparator$ShortComparator::live$ = false;

        jclass FieldComparator$ShortComparator::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FieldComparator$ShortComparator");

            mids$ = new jmethodID[max_mid];
            mids$[mid_compare_d8d154b9] = env->getMethodID(cls, "compare", "(II)I");
            mids$[mid_compareBottom_39c7bd23] = env->getMethodID(cls, "compareBottom", "(I)I");
            mids$[mid_compareTop_39c7bd23] = env->getMethodID(cls, "compareTop", "(I)I");
            mids$[mid_copy_d8d154a6] = env->getMethodID(cls, "copy", "(II)V");
            mids$[mid_setBottom_39c7bd3c] = env->getMethodID(cls, "setBottom", "(I)V");
            mids$[mid_setNextReader_6329aed7] = env->getMethodID(cls, "setNextReader", "(Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/search/FieldComparator;");
            mids$[mid_setTopValue_6b8573ce] = env->getMethodID(cls, "setTopValue", "(Ljava/lang/Short;)V");
            mids$[mid_value_5bcaf269] = env->getMethodID(cls, "value", "(I)Ljava/lang/Short;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jint FieldComparator$ShortComparator::compare(jint a0, jint a1) const
        {
          return env->callIntMethod(this$, mids$[mid_compare_d8d154b9], a0, a1);
        }

        jint FieldComparator$ShortComparator::compareBottom(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_compareBottom_39c7bd23], a0);
        }

        jint FieldComparator$ShortComparator::compareTop(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_compareTop_39c7bd23], a0);
        }

        void FieldComparator$ShortComparator::copy(jint a0, jint a1) const
        {
          env->callVoidMethod(this$, mids$[mid_copy_d8d154a6], a0, a1);
        }

        void FieldComparator$ShortComparator::setBottom(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setBottom_39c7bd3c], a0);
        }

        ::org::apache::lucene::search::FieldComparator FieldComparator$ShortComparator::setNextReader(const ::org::apache::lucene::index::AtomicReaderContext & a0) const
        {
          return ::org::apache::lucene::search::FieldComparator(env->callObjectMethod(this$, mids$[mid_setNextReader_6329aed7], a0.this$));
        }

        void FieldComparator$ShortComparator::setTopValue(const ::java::lang::Short & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setTopValue_6b8573ce], a0.this$);
        }

        ::java::lang::Short FieldComparator$ShortComparator::value(jint a0) const
        {
          return ::java::lang::Short(env->callObjectMethod(this$, mids$[mid_value_5bcaf269], a0));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FieldComparator$ShortComparator_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldComparator$ShortComparator_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldComparator$ShortComparator_of_(t_FieldComparator$ShortComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$ShortComparator_compare(t_FieldComparator$ShortComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$ShortComparator_compareBottom(t_FieldComparator$ShortComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$ShortComparator_compareTop(t_FieldComparator$ShortComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$ShortComparator_copy(t_FieldComparator$ShortComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$ShortComparator_setBottom(t_FieldComparator$ShortComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$ShortComparator_setNextReader(t_FieldComparator$ShortComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$ShortComparator_setTopValue(t_FieldComparator$ShortComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$ShortComparator_value(t_FieldComparator$ShortComparator *self, PyObject *args);
        static int t_FieldComparator$ShortComparator_set__bottom(t_FieldComparator$ShortComparator *self, PyObject *arg, void *data);
        static int t_FieldComparator$ShortComparator_set__nextReader(t_FieldComparator$ShortComparator *self, PyObject *arg, void *data);
        static int t_FieldComparator$ShortComparator_set__topValue(t_FieldComparator$ShortComparator *self, PyObject *arg, void *data);
        static PyObject *t_FieldComparator$ShortComparator_get__parameters_(t_FieldComparator$ShortComparator *self, void *data);
        static PyGetSetDef t_FieldComparator$ShortComparator__fields_[] = {
          DECLARE_SET_FIELD(t_FieldComparator$ShortComparator, bottom),
          DECLARE_SET_FIELD(t_FieldComparator$ShortComparator, nextReader),
          DECLARE_SET_FIELD(t_FieldComparator$ShortComparator, topValue),
          DECLARE_GET_FIELD(t_FieldComparator$ShortComparator, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FieldComparator$ShortComparator__methods_[] = {
          DECLARE_METHOD(t_FieldComparator$ShortComparator, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldComparator$ShortComparator, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldComparator$ShortComparator, of_, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$ShortComparator, compare, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$ShortComparator, compareBottom, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$ShortComparator, compareTop, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$ShortComparator, copy, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$ShortComparator, setBottom, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$ShortComparator, setNextReader, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$ShortComparator, setTopValue, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$ShortComparator, value, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldComparator$ShortComparator, t_FieldComparator$ShortComparator, ::org::apache::lucene::search::FieldComparator$NumericComparator, FieldComparator$ShortComparator, abstract_init, 0, 0, t_FieldComparator$ShortComparator__fields_, 0, 0);
        PyObject *t_FieldComparator$ShortComparator::wrap_Object(const FieldComparator$ShortComparator& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FieldComparator$ShortComparator::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FieldComparator$ShortComparator *self = (t_FieldComparator$ShortComparator *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_FieldComparator$ShortComparator::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FieldComparator$ShortComparator::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FieldComparator$ShortComparator *self = (t_FieldComparator$ShortComparator *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_FieldComparator$ShortComparator::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldComparator$ShortComparator), module, "FieldComparator$ShortComparator", 0);
        }

        void t_FieldComparator$ShortComparator::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldComparator$ShortComparator).tp_dict, "class_", make_descriptor(FieldComparator$ShortComparator::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldComparator$ShortComparator).tp_dict, "wrapfn_", make_descriptor(t_FieldComparator$ShortComparator::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldComparator$ShortComparator).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldComparator$ShortComparator_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldComparator$ShortComparator::initializeClass, 1)))
            return NULL;
          return t_FieldComparator$ShortComparator::wrap_Object(FieldComparator$ShortComparator(((t_FieldComparator$ShortComparator *) arg)->object.this$));
        }
        static PyObject *t_FieldComparator$ShortComparator_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldComparator$ShortComparator::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FieldComparator$ShortComparator_of_(t_FieldComparator$ShortComparator *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_FieldComparator$ShortComparator_compare(t_FieldComparator$ShortComparator *self, PyObject *args)
        {
          jint a0;
          jint a1;
          jint result;

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(result = self->object.compare(a0, a1));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FieldComparator$ShortComparator), (PyObject *) self, "compare", args, 2);
        }

        static PyObject *t_FieldComparator$ShortComparator_compareBottom(t_FieldComparator$ShortComparator *self, PyObject *args)
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.compareBottom(a0));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FieldComparator$ShortComparator), (PyObject *) self, "compareBottom", args, 2);
        }

        static PyObject *t_FieldComparator$ShortComparator_compareTop(t_FieldComparator$ShortComparator *self, PyObject *args)
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.compareTop(a0));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FieldComparator$ShortComparator), (PyObject *) self, "compareTop", args, 2);
        }

        static PyObject *t_FieldComparator$ShortComparator_copy(t_FieldComparator$ShortComparator *self, PyObject *args)
        {
          jint a0;
          jint a1;

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(self->object.copy(a0, a1));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FieldComparator$ShortComparator), (PyObject *) self, "copy", args, 2);
        }

        static PyObject *t_FieldComparator$ShortComparator_setBottom(t_FieldComparator$ShortComparator *self, PyObject *args)
        {
          jint a0;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(self->object.setBottom(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FieldComparator$ShortComparator), (PyObject *) self, "setBottom", args, 2);
        }

        static PyObject *t_FieldComparator$ShortComparator_setNextReader(t_FieldComparator$ShortComparator *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
          ::org::apache::lucene::search::FieldComparator result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.setNextReader(a0));
            return ::org::apache::lucene::search::t_FieldComparator::wrap_Object(result, &::java::lang::PY_TYPE(Short));
          }

          return callSuper(&PY_TYPE(FieldComparator$ShortComparator), (PyObject *) self, "setNextReader", args, 2);
        }

        static PyObject *t_FieldComparator$ShortComparator_setTopValue(t_FieldComparator$ShortComparator *self, PyObject *args)
        {
          ::java::lang::Short a0((jobject) NULL);

          if (!parseArgs(args, "O", &::java::lang::PY_TYPE(Short), &a0))
          {
            OBJ_CALL(self->object.setTopValue(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FieldComparator$ShortComparator), (PyObject *) self, "setTopValue", args, 2);
        }

        static PyObject *t_FieldComparator$ShortComparator_value(t_FieldComparator$ShortComparator *self, PyObject *args)
        {
          jint a0;
          ::java::lang::Short result((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.value(a0));
            return ::java::lang::t_Short::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FieldComparator$ShortComparator), (PyObject *) self, "value", args, 2);
        }
        static PyObject *t_FieldComparator$ShortComparator_get__parameters_(t_FieldComparator$ShortComparator *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static int t_FieldComparator$ShortComparator_set__bottom(t_FieldComparator$ShortComparator *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setBottom(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "bottom", arg);
          return -1;
        }

        static int t_FieldComparator$ShortComparator_set__nextReader(t_FieldComparator$ShortComparator *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::index::AtomicReaderContext value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &value))
            {
              INT_CALL(self->object.setNextReader(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "nextReader", arg);
          return -1;
        }

        static int t_FieldComparator$ShortComparator_set__topValue(t_FieldComparator$ShortComparator *self, PyObject *arg, void *data)
        {
          {
            ::java::lang::Short value((jobject) NULL);
            if (!parseArg(arg, "O", &::java::lang::PY_TYPE(Short), &value))
            {
              INT_CALL(self->object.setTopValue(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "topValue", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/xml/builders/SpanBuilderBase.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/queryparser/xml/builders/SpanQueryBuilder.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {

            ::java::lang::Class *SpanBuilderBase::class$ = NULL;
            jmethodID *SpanBuilderBase::mids$ = NULL;
            bool SpanBuilderBase::live$ = false;

            jclass SpanBuilderBase::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/xml/builders/SpanBuilderBase");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            SpanBuilderBase::SpanBuilderBase() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {
            static PyObject *t_SpanBuilderBase_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_SpanBuilderBase_instance_(PyTypeObject *type, PyObject *arg);
            static int t_SpanBuilderBase_init_(t_SpanBuilderBase *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_SpanBuilderBase__methods_[] = {
              DECLARE_METHOD(t_SpanBuilderBase, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SpanBuilderBase, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(SpanBuilderBase, t_SpanBuilderBase, ::java::lang::Object, SpanBuilderBase, t_SpanBuilderBase_init_, 0, 0, 0, 0, 0);

            void t_SpanBuilderBase::install(PyObject *module)
            {
              installType(&PY_TYPE(SpanBuilderBase), module, "SpanBuilderBase", 0);
            }

            void t_SpanBuilderBase::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(SpanBuilderBase).tp_dict, "class_", make_descriptor(SpanBuilderBase::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(SpanBuilderBase).tp_dict, "wrapfn_", make_descriptor(t_SpanBuilderBase::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(SpanBuilderBase).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_SpanBuilderBase_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, SpanBuilderBase::initializeClass, 1)))
                return NULL;
              return t_SpanBuilderBase::wrap_Object(SpanBuilderBase(((t_SpanBuilderBase *) arg)->object.this$));
            }
            static PyObject *t_SpanBuilderBase_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, SpanBuilderBase::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_SpanBuilderBase_init_(t_SpanBuilderBase *self, PyObject *args, PyObject *kwds)
            {
              SpanBuilderBase object((jobject) NULL);

              INT_CALL(object = SpanBuilderBase());
              self->object = object;

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/ScandinavianFoldingFilterFactory.h"
#include "org/apache/lucene/analysis/miscellaneous/ScandinavianFoldingFilter.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *ScandinavianFoldingFilterFactory::class$ = NULL;
          jmethodID *ScandinavianFoldingFilterFactory::mids$ = NULL;
          bool ScandinavianFoldingFilterFactory::live$ = false;

          jclass ScandinavianFoldingFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/ScandinavianFoldingFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_507bf659] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/miscellaneous/ScandinavianFoldingFilter;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ScandinavianFoldingFilterFactory::ScandinavianFoldingFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::miscellaneous::ScandinavianFoldingFilter ScandinavianFoldingFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::miscellaneous::ScandinavianFoldingFilter(env->callObjectMethod(this$, mids$[mid_create_507bf659], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_ScandinavianFoldingFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ScandinavianFoldingFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ScandinavianFoldingFilterFactory_init_(t_ScandinavianFoldingFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ScandinavianFoldingFilterFactory_create(t_ScandinavianFoldingFilterFactory *self, PyObject *args);

          static PyMethodDef t_ScandinavianFoldingFilterFactory__methods_[] = {
            DECLARE_METHOD(t_ScandinavianFoldingFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ScandinavianFoldingFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ScandinavianFoldingFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ScandinavianFoldingFilterFactory, t_ScandinavianFoldingFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, ScandinavianFoldingFilterFactory, t_ScandinavianFoldingFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_ScandinavianFoldingFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(ScandinavianFoldingFilterFactory), module, "ScandinavianFoldingFilterFactory", 0);
          }

          void t_ScandinavianFoldingFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ScandinavianFoldingFilterFactory).tp_dict, "class_", make_descriptor(ScandinavianFoldingFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ScandinavianFoldingFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_ScandinavianFoldingFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ScandinavianFoldingFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ScandinavianFoldingFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ScandinavianFoldingFilterFactory::initializeClass, 1)))
              return NULL;
            return t_ScandinavianFoldingFilterFactory::wrap_Object(ScandinavianFoldingFilterFactory(((t_ScandinavianFoldingFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_ScandinavianFoldingFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ScandinavianFoldingFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ScandinavianFoldingFilterFactory_init_(t_ScandinavianFoldingFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            ScandinavianFoldingFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = ScandinavianFoldingFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ScandinavianFoldingFilterFactory_create(t_ScandinavianFoldingFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::miscellaneous::ScandinavianFoldingFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::miscellaneous::t_ScandinavianFoldingFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(ScandinavianFoldingFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/xml/builders/BooleanQueryBuilder.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/queryparser/xml/QueryBuilder.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {

            ::java::lang::Class *BooleanQueryBuilder::class$ = NULL;
            jmethodID *BooleanQueryBuilder::mids$ = NULL;
            bool BooleanQueryBuilder::live$ = false;

            jclass BooleanQueryBuilder::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/xml/builders/BooleanQueryBuilder");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_6566a539] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/xml/QueryBuilder;)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            BooleanQueryBuilder::BooleanQueryBuilder(const ::org::apache::lucene::queryparser::xml::QueryBuilder & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_6566a539, a0.this$)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {
            static PyObject *t_BooleanQueryBuilder_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_BooleanQueryBuilder_instance_(PyTypeObject *type, PyObject *arg);
            static int t_BooleanQueryBuilder_init_(t_BooleanQueryBuilder *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_BooleanQueryBuilder__methods_[] = {
              DECLARE_METHOD(t_BooleanQueryBuilder, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_BooleanQueryBuilder, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(BooleanQueryBuilder, t_BooleanQueryBuilder, ::java::lang::Object, BooleanQueryBuilder, t_BooleanQueryBuilder_init_, 0, 0, 0, 0, 0);

            void t_BooleanQueryBuilder::install(PyObject *module)
            {
              installType(&PY_TYPE(BooleanQueryBuilder), module, "BooleanQueryBuilder", 0);
            }

            void t_BooleanQueryBuilder::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(BooleanQueryBuilder).tp_dict, "class_", make_descriptor(BooleanQueryBuilder::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(BooleanQueryBuilder).tp_dict, "wrapfn_", make_descriptor(t_BooleanQueryBuilder::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(BooleanQueryBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_BooleanQueryBuilder_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, BooleanQueryBuilder::initializeClass, 1)))
                return NULL;
              return t_BooleanQueryBuilder::wrap_Object(BooleanQueryBuilder(((t_BooleanQueryBuilder *) arg)->object.this$));
            }
            static PyObject *t_BooleanQueryBuilder_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, BooleanQueryBuilder::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_BooleanQueryBuilder_init_(t_BooleanQueryBuilder *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::queryparser::xml::QueryBuilder a0((jobject) NULL);
              BooleanQueryBuilder object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::xml::QueryBuilder::initializeClass, &a0))
              {
                INT_CALL(object = BooleanQueryBuilder(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/DualFloatFunction.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *DualFloatFunction::class$ = NULL;
            jmethodID *DualFloatFunction::mids$ = NULL;
            bool DualFloatFunction::live$ = false;

            jclass DualFloatFunction::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/DualFloatFunction");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_74aa307e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queries/function/ValueSource;Lorg/apache/lucene/queries/function/ValueSource;)V");
                mids$[mid_createWeight_1b6125ba] = env->getMethodID(cls, "createWeight", "(Ljava/util/Map;Lorg/apache/lucene/search/IndexSearcher;)V");
                mids$[mid_description_14c7b5c5] = env->getMethodID(cls, "description", "()Ljava/lang/String;");
                mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_getValues_4c566485] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/queries/function/FunctionValues;");
                mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
                mids$[mid_name_14c7b5c5] = env->getMethodID(cls, "name", "()Ljava/lang/String;");
                mids$[mid_func_3711414a] = env->getMethodID(cls, "func", "(ILorg/apache/lucene/queries/function/FunctionValues;Lorg/apache/lucene/queries/function/FunctionValues;)F");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            DualFloatFunction::DualFloatFunction(const ::org::apache::lucene::queries::function::ValueSource & a0, const ::org::apache::lucene::queries::function::ValueSource & a1) : ::org::apache::lucene::queries::function::ValueSource(env->newObject(initializeClass, &mids$, mid_init$_74aa307e, a0.this$, a1.this$)) {}

            void DualFloatFunction::createWeight(const ::java::util::Map & a0, const ::org::apache::lucene::search::IndexSearcher & a1) const
            {
              env->callVoidMethod(this$, mids$[mid_createWeight_1b6125ba], a0.this$, a1.this$);
            }

            ::java::lang::String DualFloatFunction::description() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_description_14c7b5c5]));
            }

            jboolean DualFloatFunction::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
            }

            ::org::apache::lucene::queries::function::FunctionValues DualFloatFunction::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::FunctionValues(env->callObjectMethod(this$, mids$[mid_getValues_4c566485], a0.this$, a1.this$));
            }

            jint DualFloatFunction::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_DualFloatFunction_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_DualFloatFunction_instance_(PyTypeObject *type, PyObject *arg);
            static int t_DualFloatFunction_init_(t_DualFloatFunction *self, PyObject *args, PyObject *kwds);
            static PyObject *t_DualFloatFunction_createWeight(t_DualFloatFunction *self, PyObject *args);
            static PyObject *t_DualFloatFunction_description(t_DualFloatFunction *self, PyObject *args);
            static PyObject *t_DualFloatFunction_equals(t_DualFloatFunction *self, PyObject *args);
            static PyObject *t_DualFloatFunction_getValues(t_DualFloatFunction *self, PyObject *args);
            static PyObject *t_DualFloatFunction_hashCode(t_DualFloatFunction *self, PyObject *args);

            static PyMethodDef t_DualFloatFunction__methods_[] = {
              DECLARE_METHOD(t_DualFloatFunction, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_DualFloatFunction, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_DualFloatFunction, createWeight, METH_VARARGS),
              DECLARE_METHOD(t_DualFloatFunction, description, METH_VARARGS),
              DECLARE_METHOD(t_DualFloatFunction, equals, METH_VARARGS),
              DECLARE_METHOD(t_DualFloatFunction, getValues, METH_VARARGS),
              DECLARE_METHOD(t_DualFloatFunction, hashCode, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(DualFloatFunction, t_DualFloatFunction, ::org::apache::lucene::queries::function::ValueSource, DualFloatFunction, t_DualFloatFunction_init_, 0, 0, 0, 0, 0);

            void t_DualFloatFunction::install(PyObject *module)
            {
              installType(&PY_TYPE(DualFloatFunction), module, "DualFloatFunction", 0);
            }

            void t_DualFloatFunction::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(DualFloatFunction).tp_dict, "class_", make_descriptor(DualFloatFunction::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(DualFloatFunction).tp_dict, "wrapfn_", make_descriptor(t_DualFloatFunction::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(DualFloatFunction).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_DualFloatFunction_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, DualFloatFunction::initializeClass, 1)))
                return NULL;
              return t_DualFloatFunction::wrap_Object(DualFloatFunction(((t_DualFloatFunction *) arg)->object.this$));
            }
            static PyObject *t_DualFloatFunction_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, DualFloatFunction::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_DualFloatFunction_init_(t_DualFloatFunction *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::queries::function::ValueSource a0((jobject) NULL);
              ::org::apache::lucene::queries::function::ValueSource a1((jobject) NULL);
              DualFloatFunction object((jobject) NULL);

              if (!parseArgs(args, "kk", ::org::apache::lucene::queries::function::ValueSource::initializeClass, ::org::apache::lucene::queries::function::ValueSource::initializeClass, &a0, &a1))
              {
                INT_CALL(object = DualFloatFunction(a0, a1));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_DualFloatFunction_createWeight(t_DualFloatFunction *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::search::IndexSearcher a1((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(self->object.createWeight(a0, a1));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(DualFloatFunction), (PyObject *) self, "createWeight", args, 2);
            }

            static PyObject *t_DualFloatFunction_description(t_DualFloatFunction *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.description());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(DualFloatFunction), (PyObject *) self, "description", args, 2);
            }

            static PyObject *t_DualFloatFunction_equals(t_DualFloatFunction *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(DualFloatFunction), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_DualFloatFunction_getValues(t_DualFloatFunction *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::FunctionValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::t_FunctionValues::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(DualFloatFunction), (PyObject *) self, "getValues", args, 2);
            }

            static PyObject *t_DualFloatFunction_hashCode(t_DualFloatFunction *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(DualFloatFunction), (PyObject *) self, "hashCode", args, 2);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/IndexFormatTooOldException.h"
#include "org/apache/lucene/store/DataInput.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *IndexFormatTooOldException::class$ = NULL;
        jmethodID *IndexFormatTooOldException::mids$ = NULL;
        bool IndexFormatTooOldException::live$ = false;

        jclass IndexFormatTooOldException::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/IndexFormatTooOldException");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_e6fb04e3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/DataInput;Ljava/lang/String;)V");
            mids$[mid_init$_4a264742] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/String;)V");
            mids$[mid_init$_9c112331] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/DataInput;III)V");
            mids$[mid_init$_b8e753a2] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;III)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        IndexFormatTooOldException::IndexFormatTooOldException(const ::org::apache::lucene::store::DataInput & a0, const ::java::lang::String & a1) : ::org::apache::lucene::index::CorruptIndexException(env->newObject(initializeClass, &mids$, mid_init$_e6fb04e3, a0.this$, a1.this$)) {}

        IndexFormatTooOldException::IndexFormatTooOldException(const ::java::lang::String & a0, const ::java::lang::String & a1) : ::org::apache::lucene::index::CorruptIndexException(env->newObject(initializeClass, &mids$, mid_init$_4a264742, a0.this$, a1.this$)) {}

        IndexFormatTooOldException::IndexFormatTooOldException(const ::org::apache::lucene::store::DataInput & a0, jint a1, jint a2, jint a3) : ::org::apache::lucene::index::CorruptIndexException(env->newObject(initializeClass, &mids$, mid_init$_9c112331, a0.this$, a1, a2, a3)) {}

        IndexFormatTooOldException::IndexFormatTooOldException(const ::java::lang::String & a0, jint a1, jint a2, jint a3) : ::org::apache::lucene::index::CorruptIndexException(env->newObject(initializeClass, &mids$, mid_init$_b8e753a2, a0.this$, a1, a2, a3)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_IndexFormatTooOldException_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexFormatTooOldException_instance_(PyTypeObject *type, PyObject *arg);
        static int t_IndexFormatTooOldException_init_(t_IndexFormatTooOldException *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_IndexFormatTooOldException__methods_[] = {
          DECLARE_METHOD(t_IndexFormatTooOldException, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexFormatTooOldException, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(IndexFormatTooOldException, t_IndexFormatTooOldException, ::org::apache::lucene::index::CorruptIndexException, IndexFormatTooOldException, t_IndexFormatTooOldException_init_, 0, 0, 0, 0, 0);

        void t_IndexFormatTooOldException::install(PyObject *module)
        {
          installType(&PY_TYPE(IndexFormatTooOldException), module, "IndexFormatTooOldException", 0);
        }

        void t_IndexFormatTooOldException::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(IndexFormatTooOldException).tp_dict, "class_", make_descriptor(IndexFormatTooOldException::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(IndexFormatTooOldException).tp_dict, "wrapfn_", make_descriptor(t_IndexFormatTooOldException::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(IndexFormatTooOldException).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_IndexFormatTooOldException_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IndexFormatTooOldException::initializeClass, 1)))
            return NULL;
          return t_IndexFormatTooOldException::wrap_Object(IndexFormatTooOldException(((t_IndexFormatTooOldException *) arg)->object.this$));
        }
        static PyObject *t_IndexFormatTooOldException_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IndexFormatTooOldException::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_IndexFormatTooOldException_init_(t_IndexFormatTooOldException *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::org::apache::lucene::store::DataInput a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              IndexFormatTooOldException object((jobject) NULL);

              if (!parseArgs(args, "ks", ::org::apache::lucene::store::DataInput::initializeClass, &a0, &a1))
              {
                INT_CALL(object = IndexFormatTooOldException(a0, a1));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              IndexFormatTooOldException object((jobject) NULL);

              if (!parseArgs(args, "ss", &a0, &a1))
              {
                INT_CALL(object = IndexFormatTooOldException(a0, a1));
                self->object = object;
                break;
              }
            }
            goto err;
           case 4:
            {
              ::org::apache::lucene::store::DataInput a0((jobject) NULL);
              jint a1;
              jint a2;
              jint a3;
              IndexFormatTooOldException object((jobject) NULL);

              if (!parseArgs(args, "kIII", ::org::apache::lucene::store::DataInput::initializeClass, &a0, &a1, &a2, &a3))
              {
                INT_CALL(object = IndexFormatTooOldException(a0, a1, a2, a3));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              jint a1;
              jint a2;
              jint a3;
              IndexFormatTooOldException object((jobject) NULL);

              if (!parseArgs(args, "sIII", &a0, &a1, &a2, &a3))
              {
                INT_CALL(object = IndexFormatTooOldException(a0, a1, a2, a3));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/TermRangeQuery.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *TermRangeQuery::class$ = NULL;
        jmethodID *TermRangeQuery::mids$ = NULL;
        bool TermRangeQuery::live$ = false;

        jclass TermRangeQuery::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/TermRangeQuery");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_d3423b66] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/util/BytesRef;ZZ)V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_getLowerTerm_4ae19461] = env->getMethodID(cls, "getLowerTerm", "()Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_getUpperTerm_4ae19461] = env->getMethodID(cls, "getUpperTerm", "()Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_includesLower_54c6a16a] = env->getMethodID(cls, "includesLower", "()Z");
            mids$[mid_includesUpper_54c6a16a] = env->getMethodID(cls, "includesUpper", "()Z");
            mids$[mid_newStringRange_ae529bcc] = env->getStaticMethodID(cls, "newStringRange", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ZZ)Lorg/apache/lucene/search/TermRangeQuery;");
            mids$[mid_toString_97a5258f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");
            mids$[mid_getTermsEnum_67b5a29a] = env->getMethodID(cls, "getTermsEnum", "(Lorg/apache/lucene/index/Terms;Lorg/apache/lucene/util/AttributeSource;)Lorg/apache/lucene/index/TermsEnum;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        TermRangeQuery::TermRangeQuery(const ::java::lang::String & a0, const ::org::apache::lucene::util::BytesRef & a1, const ::org::apache::lucene::util::BytesRef & a2, jboolean a3, jboolean a4) : ::org::apache::lucene::search::MultiTermQuery(env->newObject(initializeClass, &mids$, mid_init$_d3423b66, a0.this$, a1.this$, a2.this$, a3, a4)) {}

        jboolean TermRangeQuery::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        ::org::apache::lucene::util::BytesRef TermRangeQuery::getLowerTerm() const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_getLowerTerm_4ae19461]));
        }

        ::org::apache::lucene::util::BytesRef TermRangeQuery::getUpperTerm() const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_getUpperTerm_4ae19461]));
        }

        jint TermRangeQuery::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jboolean TermRangeQuery::includesLower() const
        {
          return env->callBooleanMethod(this$, mids$[mid_includesLower_54c6a16a]);
        }

        jboolean TermRangeQuery::includesUpper() const
        {
          return env->callBooleanMethod(this$, mids$[mid_includesUpper_54c6a16a]);
        }

        TermRangeQuery TermRangeQuery::newStringRange(const ::java::lang::String & a0, const ::java::lang::String & a1, const ::java::lang::String & a2, jboolean a3, jboolean a4)
        {
          jclass cls = env->getClass(initializeClass);
          return TermRangeQuery(env->callStaticObjectMethod(cls, mids$[mid_newStringRange_ae529bcc], a0.this$, a1.this$, a2.this$, a3, a4));
        }

        ::java::lang::String TermRangeQuery::toString(const ::java::lang::String & a0) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_97a5258f], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_TermRangeQuery_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TermRangeQuery_instance_(PyTypeObject *type, PyObject *arg);
        static int t_TermRangeQuery_init_(t_TermRangeQuery *self, PyObject *args, PyObject *kwds);
        static PyObject *t_TermRangeQuery_equals(t_TermRangeQuery *self, PyObject *args);
        static PyObject *t_TermRangeQuery_getLowerTerm(t_TermRangeQuery *self);
        static PyObject *t_TermRangeQuery_getUpperTerm(t_TermRangeQuery *self);
        static PyObject *t_TermRangeQuery_hashCode(t_TermRangeQuery *self, PyObject *args);
        static PyObject *t_TermRangeQuery_includesLower(t_TermRangeQuery *self);
        static PyObject *t_TermRangeQuery_includesUpper(t_TermRangeQuery *self);
        static PyObject *t_TermRangeQuery_newStringRange(PyTypeObject *type, PyObject *args);
        static PyObject *t_TermRangeQuery_toString(t_TermRangeQuery *self, PyObject *args);
        static PyObject *t_TermRangeQuery_get__lowerTerm(t_TermRangeQuery *self, void *data);
        static PyObject *t_TermRangeQuery_get__upperTerm(t_TermRangeQuery *self, void *data);
        static PyGetSetDef t_TermRangeQuery__fields_[] = {
          DECLARE_GET_FIELD(t_TermRangeQuery, lowerTerm),
          DECLARE_GET_FIELD(t_TermRangeQuery, upperTerm),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_TermRangeQuery__methods_[] = {
          DECLARE_METHOD(t_TermRangeQuery, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TermRangeQuery, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TermRangeQuery, equals, METH_VARARGS),
          DECLARE_METHOD(t_TermRangeQuery, getLowerTerm, METH_NOARGS),
          DECLARE_METHOD(t_TermRangeQuery, getUpperTerm, METH_NOARGS),
          DECLARE_METHOD(t_TermRangeQuery, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_TermRangeQuery, includesLower, METH_NOARGS),
          DECLARE_METHOD(t_TermRangeQuery, includesUpper, METH_NOARGS),
          DECLARE_METHOD(t_TermRangeQuery, newStringRange, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_TermRangeQuery, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TermRangeQuery, t_TermRangeQuery, ::org::apache::lucene::search::MultiTermQuery, TermRangeQuery, t_TermRangeQuery_init_, 0, 0, t_TermRangeQuery__fields_, 0, 0);

        void t_TermRangeQuery::install(PyObject *module)
        {
          installType(&PY_TYPE(TermRangeQuery), module, "TermRangeQuery", 0);
        }

        void t_TermRangeQuery::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TermRangeQuery).tp_dict, "class_", make_descriptor(TermRangeQuery::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TermRangeQuery).tp_dict, "wrapfn_", make_descriptor(t_TermRangeQuery::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TermRangeQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TermRangeQuery_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TermRangeQuery::initializeClass, 1)))
            return NULL;
          return t_TermRangeQuery::wrap_Object(TermRangeQuery(((t_TermRangeQuery *) arg)->object.this$));
        }
        static PyObject *t_TermRangeQuery_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TermRangeQuery::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_TermRangeQuery_init_(t_TermRangeQuery *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
          ::org::apache::lucene::util::BytesRef a2((jobject) NULL);
          jboolean a3;
          jboolean a4;
          TermRangeQuery object((jobject) NULL);

          if (!parseArgs(args, "skkZZ", ::org::apache::lucene::util::BytesRef::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2, &a3, &a4))
          {
            INT_CALL(object = TermRangeQuery(a0, a1, a2, a3, a4));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_TermRangeQuery_equals(t_TermRangeQuery *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(TermRangeQuery), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_TermRangeQuery_getLowerTerm(t_TermRangeQuery *self)
        {
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);
          OBJ_CALL(result = self->object.getLowerTerm());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
        }

        static PyObject *t_TermRangeQuery_getUpperTerm(t_TermRangeQuery *self)
        {
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);
          OBJ_CALL(result = self->object.getUpperTerm());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
        }

        static PyObject *t_TermRangeQuery_hashCode(t_TermRangeQuery *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(TermRangeQuery), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_TermRangeQuery_includesLower(t_TermRangeQuery *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.includesLower());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_TermRangeQuery_includesUpper(t_TermRangeQuery *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.includesUpper());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_TermRangeQuery_newStringRange(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::java::lang::String a2((jobject) NULL);
          jboolean a3;
          jboolean a4;
          TermRangeQuery result((jobject) NULL);

          if (!parseArgs(args, "sssZZ", &a0, &a1, &a2, &a3, &a4))
          {
            OBJ_CALL(result = ::org::apache::lucene::search::TermRangeQuery::newStringRange(a0, a1, a2, a3, a4));
            return t_TermRangeQuery::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "newStringRange", args);
          return NULL;
        }

        static PyObject *t_TermRangeQuery_toString(t_TermRangeQuery *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.toString(a0));
            return j2p(result);
          }

          return callSuper(&PY_TYPE(TermRangeQuery), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_TermRangeQuery_get__lowerTerm(t_TermRangeQuery *self, void *data)
        {
          ::org::apache::lucene::util::BytesRef value((jobject) NULL);
          OBJ_CALL(value = self->object.getLowerTerm());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(value);
        }

        static PyObject *t_TermRangeQuery_get__upperTerm(t_TermRangeQuery *self, void *data)
        {
          ::org::apache::lucene::util::BytesRef value((jobject) NULL);
          OBJ_CALL(value = self->object.getUpperTerm());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/Document.h"
#include "java/lang/Class.h"
#include "java/lang/Iterable.h"
#include "java/util/List.h"
#include "org/apache/lucene/index/IndexableField.h"
#include "java/util/Iterator.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *Document::class$ = NULL;
        jmethodID *Document::mids$ = NULL;
        bool Document::live$ = false;

        jclass Document::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/Document");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_add_d86aadad] = env->getMethodID(cls, "add", "(Lorg/apache/lucene/index/IndexableField;)V");
            mids$[mid_get_97a5258f] = env->getMethodID(cls, "get", "(Ljava/lang/String;)Ljava/lang/String;");
            mids$[mid_getBinaryValue_14551a1f] = env->getMethodID(cls, "getBinaryValue", "(Ljava/lang/String;)Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_getBinaryValues_eb7e4f07] = env->getMethodID(cls, "getBinaryValues", "(Ljava/lang/String;)[Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_getField_3e59ba6e] = env->getMethodID(cls, "getField", "(Ljava/lang/String;)Lorg/apache/lucene/index/IndexableField;");
            mids$[mid_getFields_87851566] = env->getMethodID(cls, "getFields", "()Ljava/util/List;");
            mids$[mid_getFields_0aa85a96] = env->getMethodID(cls, "getFields", "(Ljava/lang/String;)[Lorg/apache/lucene/index/IndexableField;");
            mids$[mid_getValues_1f6a174f] = env->getMethodID(cls, "getValues", "(Ljava/lang/String;)[Ljava/lang/String;");
            mids$[mid_iterator_40858c90] = env->getMethodID(cls, "iterator", "()Ljava/util/Iterator;");
            mids$[mid_removeField_5fdc3f48] = env->getMethodID(cls, "removeField", "(Ljava/lang/String;)V");
            mids$[mid_removeFields_5fdc3f48] = env->getMethodID(cls, "removeFields", "(Ljava/lang/String;)V");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        Document::Document() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void Document::add(const ::org::apache::lucene::index::IndexableField & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_add_d86aadad], a0.this$);
        }

        ::java::lang::String Document::get(const ::java::lang::String & a0) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_get_97a5258f], a0.this$));
        }

        ::org::apache::lucene::util::BytesRef Document::getBinaryValue(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_getBinaryValue_14551a1f], a0.this$));
        }

        JArray< ::org::apache::lucene::util::BytesRef > Document::getBinaryValues(const ::java::lang::String & a0) const
        {
          return JArray< ::org::apache::lucene::util::BytesRef >(env->callObjectMethod(this$, mids$[mid_getBinaryValues_eb7e4f07], a0.this$));
        }

        ::org::apache::lucene::index::IndexableField Document::getField(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::IndexableField(env->callObjectMethod(this$, mids$[mid_getField_3e59ba6e], a0.this$));
        }

        ::java::util::List Document::getFields() const
        {
          return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getFields_87851566]));
        }

        JArray< ::org::apache::lucene::index::IndexableField > Document::getFields(const ::java::lang::String & a0) const
        {
          return JArray< ::org::apache::lucene::index::IndexableField >(env->callObjectMethod(this$, mids$[mid_getFields_0aa85a96], a0.this$));
        }

        JArray< ::java::lang::String > Document::getValues(const ::java::lang::String & a0) const
        {
          return JArray< ::java::lang::String >(env->callObjectMethod(this$, mids$[mid_getValues_1f6a174f], a0.this$));
        }

        ::java::util::Iterator Document::iterator() const
        {
          return ::java::util::Iterator(env->callObjectMethod(this$, mids$[mid_iterator_40858c90]));
        }

        void Document::removeField(const ::java::lang::String & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_removeField_5fdc3f48], a0.this$);
        }

        void Document::removeFields(const ::java::lang::String & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_removeFields_5fdc3f48], a0.this$);
        }

        ::java::lang::String Document::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_Document_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Document_instance_(PyTypeObject *type, PyObject *arg);
        static int t_Document_init_(t_Document *self, PyObject *args, PyObject *kwds);
        static PyObject *t_Document_add(t_Document *self, PyObject *arg);
        static PyObject *t_Document_get(t_Document *self, PyObject *arg);
        static PyObject *t_Document_getBinaryValue(t_Document *self, PyObject *arg);
        static PyObject *t_Document_getBinaryValues(t_Document *self, PyObject *arg);
        static PyObject *t_Document_getField(t_Document *self, PyObject *arg);
        static PyObject *t_Document_getFields(t_Document *self, PyObject *args);
        static PyObject *t_Document_getValues(t_Document *self, PyObject *arg);
        static PyObject *t_Document_iterator(t_Document *self);
        static PyObject *t_Document_removeField(t_Document *self, PyObject *arg);
        static PyObject *t_Document_removeFields(t_Document *self, PyObject *arg);
        static PyObject *t_Document_toString(t_Document *self, PyObject *args);
        static PyObject *t_Document_get__fields(t_Document *self, void *data);
        static PyGetSetDef t_Document__fields_[] = {
          DECLARE_GET_FIELD(t_Document, fields),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_Document__methods_[] = {
          DECLARE_METHOD(t_Document, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Document, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Document, add, METH_O),
          DECLARE_METHOD(t_Document, get, METH_O),
          DECLARE_METHOD(t_Document, getBinaryValue, METH_O),
          DECLARE_METHOD(t_Document, getBinaryValues, METH_O),
          DECLARE_METHOD(t_Document, getField, METH_O),
          DECLARE_METHOD(t_Document, getFields, METH_VARARGS),
          DECLARE_METHOD(t_Document, getValues, METH_O),
          DECLARE_METHOD(t_Document, iterator, METH_NOARGS),
          DECLARE_METHOD(t_Document, removeField, METH_O),
          DECLARE_METHOD(t_Document, removeFields, METH_O),
          DECLARE_METHOD(t_Document, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyMappingMethods t_Document_as_mapping = {
          0,
          (binaryfunc) t_Document_get,
          0,
        };

        DECLARE_TYPE(Document, t_Document, ::java::lang::Object, Document, t_Document_init_, ((PyObject *(*)(t_Document *)) get_iterator< t_Document >), 0, t_Document__fields_, &t_Document_as_mapping, 0);

        void t_Document::install(PyObject *module)
        {
          installType(&PY_TYPE(Document), module, "Document", 0);
        }

        void t_Document::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(Document).tp_dict, "class_", make_descriptor(Document::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(Document).tp_dict, "wrapfn_", make_descriptor(t_Document::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(Document).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Document_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Document::initializeClass, 1)))
            return NULL;
          return t_Document::wrap_Object(Document(((t_Document *) arg)->object.this$));
        }
        static PyObject *t_Document_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Document::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_Document_init_(t_Document *self, PyObject *args, PyObject *kwds)
        {
          Document object((jobject) NULL);

          INT_CALL(object = Document());
          self->object = object;

          return 0;
        }

        static PyObject *t_Document_add(t_Document *self, PyObject *arg)
        {
          ::org::apache::lucene::index::IndexableField a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::IndexableField::initializeClass, &a0))
          {
            OBJ_CALL(self->object.add(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "add", arg);
          return NULL;
        }

        static PyObject *t_Document_get(t_Document *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = self->object.get(a0));
            return j2p(result);
          }

          PyErr_SetArgsError((PyObject *) self, "get", arg);
          return NULL;
        }

        static PyObject *t_Document_getBinaryValue(t_Document *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = self->object.getBinaryValue(a0));
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getBinaryValue", arg);
          return NULL;
        }

        static PyObject *t_Document_getBinaryValues(t_Document *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          JArray< ::org::apache::lucene::util::BytesRef > result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = self->object.getBinaryValues(a0));
            return JArray<jobject>(result.this$).wrap(::org::apache::lucene::util::t_BytesRef::wrap_jobject);
          }

          PyErr_SetArgsError((PyObject *) self, "getBinaryValues", arg);
          return NULL;
        }

        static PyObject *t_Document_getField(t_Document *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::IndexableField result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = self->object.getField(a0));
            return ::org::apache::lucene::index::t_IndexableField::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getField", arg);
          return NULL;
        }

        static PyObject *t_Document_getFields(t_Document *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              ::java::util::List result((jobject) NULL);
              OBJ_CALL(result = self->object.getFields());
              return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::index::PY_TYPE(IndexableField));
            }
            break;
           case 1:
            {
              ::java::lang::String a0((jobject) NULL);
              JArray< ::org::apache::lucene::index::IndexableField > result((jobject) NULL);

              if (!parseArgs(args, "s", &a0))
              {
                OBJ_CALL(result = self->object.getFields(a0));
                return JArray<jobject>(result.this$).wrap(::org::apache::lucene::index::t_IndexableField::wrap_jobject);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "getFields", args);
          return NULL;
        }

        static PyObject *t_Document_getValues(t_Document *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          JArray< ::java::lang::String > result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = self->object.getValues(a0));
            return JArray<jstring>(result.this$).wrap();
          }

          PyErr_SetArgsError((PyObject *) self, "getValues", arg);
          return NULL;
        }

        static PyObject *t_Document_iterator(t_Document *self)
        {
          ::java::util::Iterator result((jobject) NULL);
          OBJ_CALL(result = self->object.iterator());
          return ::java::util::t_Iterator::wrap_Object(result, &::org::apache::lucene::index::PY_TYPE(IndexableField));
        }

        static PyObject *t_Document_removeField(t_Document *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(self->object.removeField(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "removeField", arg);
          return NULL;
        }

        static PyObject *t_Document_removeFields(t_Document *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(self->object.removeFields(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "removeFields", arg);
          return NULL;
        }

        static PyObject *t_Document_toString(t_Document *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(Document), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_Document_get__fields(t_Document *self, void *data)
        {
          ::java::util::List value((jobject) NULL);
          OBJ_CALL(value = self->object.getFields());
          return ::java::util::t_List::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/standard/ClassicTokenizerFactory.h"
#include "java/lang/Class.h"
#include "java/io/Reader.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "org/apache/lucene/analysis/standard/ClassicTokenizer.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {

          ::java::lang::Class *ClassicTokenizerFactory::class$ = NULL;
          jmethodID *ClassicTokenizerFactory::mids$ = NULL;
          bool ClassicTokenizerFactory::live$ = false;

          jclass ClassicTokenizerFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/standard/ClassicTokenizerFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_ee8ef5f7] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;)Lorg/apache/lucene/analysis/standard/ClassicTokenizer;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ClassicTokenizerFactory::ClassicTokenizerFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenizerFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::standard::ClassicTokenizer ClassicTokenizerFactory::create(const ::org::apache::lucene::util::AttributeFactory & a0, const ::java::io::Reader & a1) const
          {
            return ::org::apache::lucene::analysis::standard::ClassicTokenizer(env->callObjectMethod(this$, mids$[mid_create_ee8ef5f7], a0.this$, a1.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {
          static PyObject *t_ClassicTokenizerFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ClassicTokenizerFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ClassicTokenizerFactory_init_(t_ClassicTokenizerFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ClassicTokenizerFactory_create(t_ClassicTokenizerFactory *self, PyObject *args);

          static PyMethodDef t_ClassicTokenizerFactory__methods_[] = {
            DECLARE_METHOD(t_ClassicTokenizerFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ClassicTokenizerFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ClassicTokenizerFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ClassicTokenizerFactory, t_ClassicTokenizerFactory, ::org::apache::lucene::analysis::util::TokenizerFactory, ClassicTokenizerFactory, t_ClassicTokenizerFactory_init_, 0, 0, 0, 0, 0);

          void t_ClassicTokenizerFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(ClassicTokenizerFactory), module, "ClassicTokenizerFactory", 0);
          }

          void t_ClassicTokenizerFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ClassicTokenizerFactory).tp_dict, "class_", make_descriptor(ClassicTokenizerFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ClassicTokenizerFactory).tp_dict, "wrapfn_", make_descriptor(t_ClassicTokenizerFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ClassicTokenizerFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ClassicTokenizerFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ClassicTokenizerFactory::initializeClass, 1)))
              return NULL;
            return t_ClassicTokenizerFactory::wrap_Object(ClassicTokenizerFactory(((t_ClassicTokenizerFactory *) arg)->object.this$));
          }
          static PyObject *t_ClassicTokenizerFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ClassicTokenizerFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ClassicTokenizerFactory_init_(t_ClassicTokenizerFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            ClassicTokenizerFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = ClassicTokenizerFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ClassicTokenizerFactory_create(t_ClassicTokenizerFactory *self, PyObject *args)
          {
            ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
            ::java::io::Reader a1((jobject) NULL);
            ::org::apache::lucene::analysis::standard::ClassicTokenizer result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.create(a0, a1));
              return ::org::apache::lucene::analysis::standard::t_ClassicTokenizer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(ClassicTokenizerFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/MaxDocValueSource.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *MaxDocValueSource::class$ = NULL;
            jmethodID *MaxDocValueSource::mids$ = NULL;
            bool MaxDocValueSource::live$ = false;

            jclass MaxDocValueSource::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/MaxDocValueSource");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_createWeight_1b6125ba] = env->getMethodID(cls, "createWeight", "(Ljava/util/Map;Lorg/apache/lucene/search/IndexSearcher;)V");
                mids$[mid_description_14c7b5c5] = env->getMethodID(cls, "description", "()Ljava/lang/String;");
                mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_getValues_4c566485] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/queries/function/FunctionValues;");
                mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
                mids$[mid_name_14c7b5c5] = env->getMethodID(cls, "name", "()Ljava/lang/String;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            MaxDocValueSource::MaxDocValueSource() : ::org::apache::lucene::queries::function::ValueSource(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

            void MaxDocValueSource::createWeight(const ::java::util::Map & a0, const ::org::apache::lucene::search::IndexSearcher & a1) const
            {
              env->callVoidMethod(this$, mids$[mid_createWeight_1b6125ba], a0.this$, a1.this$);
            }

            ::java::lang::String MaxDocValueSource::description() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_description_14c7b5c5]));
            }

            jboolean MaxDocValueSource::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
            }

            ::org::apache::lucene::queries::function::FunctionValues MaxDocValueSource::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::FunctionValues(env->callObjectMethod(this$, mids$[mid_getValues_4c566485], a0.this$, a1.this$));
            }

            jint MaxDocValueSource::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
            }

            ::java::lang::String MaxDocValueSource::name() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_name_14c7b5c5]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_MaxDocValueSource_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_MaxDocValueSource_instance_(PyTypeObject *type, PyObject *arg);
            static int t_MaxDocValueSource_init_(t_MaxDocValueSource *self, PyObject *args, PyObject *kwds);
            static PyObject *t_MaxDocValueSource_createWeight(t_MaxDocValueSource *self, PyObject *args);
            static PyObject *t_MaxDocValueSource_description(t_MaxDocValueSource *self, PyObject *args);
            static PyObject *t_MaxDocValueSource_equals(t_MaxDocValueSource *self, PyObject *args);
            static PyObject *t_MaxDocValueSource_getValues(t_MaxDocValueSource *self, PyObject *args);
            static PyObject *t_MaxDocValueSource_hashCode(t_MaxDocValueSource *self, PyObject *args);
            static PyObject *t_MaxDocValueSource_name(t_MaxDocValueSource *self);

            static PyMethodDef t_MaxDocValueSource__methods_[] = {
              DECLARE_METHOD(t_MaxDocValueSource, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_MaxDocValueSource, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_MaxDocValueSource, createWeight, METH_VARARGS),
              DECLARE_METHOD(t_MaxDocValueSource, description, METH_VARARGS),
              DECLARE_METHOD(t_MaxDocValueSource, equals, METH_VARARGS),
              DECLARE_METHOD(t_MaxDocValueSource, getValues, METH_VARARGS),
              DECLARE_METHOD(t_MaxDocValueSource, hashCode, METH_VARARGS),
              DECLARE_METHOD(t_MaxDocValueSource, name, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(MaxDocValueSource, t_MaxDocValueSource, ::org::apache::lucene::queries::function::ValueSource, MaxDocValueSource, t_MaxDocValueSource_init_, 0, 0, 0, 0, 0);

            void t_MaxDocValueSource::install(PyObject *module)
            {
              installType(&PY_TYPE(MaxDocValueSource), module, "MaxDocValueSource", 0);
            }

            void t_MaxDocValueSource::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(MaxDocValueSource).tp_dict, "class_", make_descriptor(MaxDocValueSource::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(MaxDocValueSource).tp_dict, "wrapfn_", make_descriptor(t_MaxDocValueSource::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(MaxDocValueSource).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_MaxDocValueSource_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, MaxDocValueSource::initializeClass, 1)))
                return NULL;
              return t_MaxDocValueSource::wrap_Object(MaxDocValueSource(((t_MaxDocValueSource *) arg)->object.this$));
            }
            static PyObject *t_MaxDocValueSource_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, MaxDocValueSource::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_MaxDocValueSource_init_(t_MaxDocValueSource *self, PyObject *args, PyObject *kwds)
            {
              MaxDocValueSource object((jobject) NULL);

              INT_CALL(object = MaxDocValueSource());
              self->object = object;

              return 0;
            }

            static PyObject *t_MaxDocValueSource_createWeight(t_MaxDocValueSource *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::search::IndexSearcher a1((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(self->object.createWeight(a0, a1));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(MaxDocValueSource), (PyObject *) self, "createWeight", args, 2);
            }

            static PyObject *t_MaxDocValueSource_description(t_MaxDocValueSource *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.description());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(MaxDocValueSource), (PyObject *) self, "description", args, 2);
            }

            static PyObject *t_MaxDocValueSource_equals(t_MaxDocValueSource *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(MaxDocValueSource), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_MaxDocValueSource_getValues(t_MaxDocValueSource *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::FunctionValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::t_FunctionValues::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(MaxDocValueSource), (PyObject *) self, "getValues", args, 2);
            }

            static PyObject *t_MaxDocValueSource_hashCode(t_MaxDocValueSource *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(MaxDocValueSource), (PyObject *) self, "hashCode", args, 2);
            }

            static PyObject *t_MaxDocValueSource_name(t_MaxDocValueSource *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.name());
              return j2p(result);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/tokenattributes/OffsetAttributeImpl.h"
#include "org/apache/lucene/analysis/tokenattributes/OffsetAttribute.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {

          ::java::lang::Class *OffsetAttributeImpl::class$ = NULL;
          jmethodID *OffsetAttributeImpl::mids$ = NULL;
          bool OffsetAttributeImpl::live$ = false;

          jclass OffsetAttributeImpl::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/tokenattributes/OffsetAttributeImpl");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
              mids$[mid_copyTo_d86caa9f] = env->getMethodID(cls, "copyTo", "(Lorg/apache/lucene/util/AttributeImpl;)V");
              mids$[mid_endOffset_54c6a179] = env->getMethodID(cls, "endOffset", "()I");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_setOffset_d8d154a6] = env->getMethodID(cls, "setOffset", "(II)V");
              mids$[mid_startOffset_54c6a179] = env->getMethodID(cls, "startOffset", "()I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          OffsetAttributeImpl::OffsetAttributeImpl() : ::org::apache::lucene::util::AttributeImpl(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          void OffsetAttributeImpl::clear() const
          {
            env->callVoidMethod(this$, mids$[mid_clear_54c6a166]);
          }

          void OffsetAttributeImpl::copyTo(const ::org::apache::lucene::util::AttributeImpl & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_copyTo_d86caa9f], a0.this$);
          }

          jint OffsetAttributeImpl::endOffset() const
          {
            return env->callIntMethod(this$, mids$[mid_endOffset_54c6a179]);
          }

          jboolean OffsetAttributeImpl::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          jint OffsetAttributeImpl::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          void OffsetAttributeImpl::setOffset(jint a0, jint a1) const
          {
            env->callVoidMethod(this$, mids$[mid_setOffset_d8d154a6], a0, a1);
          }

          jint OffsetAttributeImpl::startOffset() const
          {
            return env->callIntMethod(this$, mids$[mid_startOffset_54c6a179]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {
          static PyObject *t_OffsetAttributeImpl_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_OffsetAttributeImpl_instance_(PyTypeObject *type, PyObject *arg);
          static int t_OffsetAttributeImpl_init_(t_OffsetAttributeImpl *self, PyObject *args, PyObject *kwds);
          static PyObject *t_OffsetAttributeImpl_clear(t_OffsetAttributeImpl *self, PyObject *args);
          static PyObject *t_OffsetAttributeImpl_copyTo(t_OffsetAttributeImpl *self, PyObject *args);
          static PyObject *t_OffsetAttributeImpl_endOffset(t_OffsetAttributeImpl *self);
          static PyObject *t_OffsetAttributeImpl_equals(t_OffsetAttributeImpl *self, PyObject *args);
          static PyObject *t_OffsetAttributeImpl_hashCode(t_OffsetAttributeImpl *self, PyObject *args);
          static PyObject *t_OffsetAttributeImpl_setOffset(t_OffsetAttributeImpl *self, PyObject *args);
          static PyObject *t_OffsetAttributeImpl_startOffset(t_OffsetAttributeImpl *self);

          static PyMethodDef t_OffsetAttributeImpl__methods_[] = {
            DECLARE_METHOD(t_OffsetAttributeImpl, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_OffsetAttributeImpl, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_OffsetAttributeImpl, clear, METH_VARARGS),
            DECLARE_METHOD(t_OffsetAttributeImpl, copyTo, METH_VARARGS),
            DECLARE_METHOD(t_OffsetAttributeImpl, endOffset, METH_NOARGS),
            DECLARE_METHOD(t_OffsetAttributeImpl, equals, METH_VARARGS),
            DECLARE_METHOD(t_OffsetAttributeImpl, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_OffsetAttributeImpl, setOffset, METH_VARARGS),
            DECLARE_METHOD(t_OffsetAttributeImpl, startOffset, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(OffsetAttributeImpl, t_OffsetAttributeImpl, ::org::apache::lucene::util::AttributeImpl, OffsetAttributeImpl, t_OffsetAttributeImpl_init_, 0, 0, 0, 0, 0);

          void t_OffsetAttributeImpl::install(PyObject *module)
          {
            installType(&PY_TYPE(OffsetAttributeImpl), module, "OffsetAttributeImpl", 0);
          }

          void t_OffsetAttributeImpl::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(OffsetAttributeImpl).tp_dict, "class_", make_descriptor(OffsetAttributeImpl::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(OffsetAttributeImpl).tp_dict, "wrapfn_", make_descriptor(t_OffsetAttributeImpl::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(OffsetAttributeImpl).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_OffsetAttributeImpl_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, OffsetAttributeImpl::initializeClass, 1)))
              return NULL;
            return t_OffsetAttributeImpl::wrap_Object(OffsetAttributeImpl(((t_OffsetAttributeImpl *) arg)->object.this$));
          }
          static PyObject *t_OffsetAttributeImpl_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, OffsetAttributeImpl::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_OffsetAttributeImpl_init_(t_OffsetAttributeImpl *self, PyObject *args, PyObject *kwds)
          {
            OffsetAttributeImpl object((jobject) NULL);

            INT_CALL(object = OffsetAttributeImpl());
            self->object = object;

            return 0;
          }

          static PyObject *t_OffsetAttributeImpl_clear(t_OffsetAttributeImpl *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.clear());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(OffsetAttributeImpl), (PyObject *) self, "clear", args, 2);
          }

          static PyObject *t_OffsetAttributeImpl_copyTo(t_OffsetAttributeImpl *self, PyObject *args)
          {
            ::org::apache::lucene::util::AttributeImpl a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::util::AttributeImpl::initializeClass, &a0))
            {
              OBJ_CALL(self->object.copyTo(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(OffsetAttributeImpl), (PyObject *) self, "copyTo", args, 2);
          }

          static PyObject *t_OffsetAttributeImpl_endOffset(t_OffsetAttributeImpl *self)
          {
            jint result;
            OBJ_CALL(result = self->object.endOffset());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_OffsetAttributeImpl_equals(t_OffsetAttributeImpl *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(OffsetAttributeImpl), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_OffsetAttributeImpl_hashCode(t_OffsetAttributeImpl *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(OffsetAttributeImpl), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_OffsetAttributeImpl_setOffset(t_OffsetAttributeImpl *self, PyObject *args)
          {
            jint a0;
            jint a1;

            if (!parseArgs(args, "II", &a0, &a1))
            {
              OBJ_CALL(self->object.setOffset(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setOffset", args);
            return NULL;
          }

          static PyObject *t_OffsetAttributeImpl_startOffset(t_OffsetAttributeImpl *self)
          {
            jint result;
            OBJ_CALL(result = self->object.startOffset());
            return PyInt_FromLong((long) result);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/SearcherFactory.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *SearcherFactory::class$ = NULL;
        jmethodID *SearcherFactory::mids$ = NULL;
        bool SearcherFactory::live$ = false;

        jclass SearcherFactory::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/SearcherFactory");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_newSearcher_bd3e99c0] = env->getMethodID(cls, "newSearcher", "(Lorg/apache/lucene/index/IndexReader;)Lorg/apache/lucene/search/IndexSearcher;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SearcherFactory::SearcherFactory() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        ::org::apache::lucene::search::IndexSearcher SearcherFactory::newSearcher(const ::org::apache::lucene::index::IndexReader & a0) const
        {
          return ::org::apache::lucene::search::IndexSearcher(env->callObjectMethod(this$, mids$[mid_newSearcher_bd3e99c0], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_SearcherFactory_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SearcherFactory_instance_(PyTypeObject *type, PyObject *arg);
        static int t_SearcherFactory_init_(t_SearcherFactory *self, PyObject *args, PyObject *kwds);
        static PyObject *t_SearcherFactory_newSearcher(t_SearcherFactory *self, PyObject *arg);

        static PyMethodDef t_SearcherFactory__methods_[] = {
          DECLARE_METHOD(t_SearcherFactory, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SearcherFactory, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SearcherFactory, newSearcher, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SearcherFactory, t_SearcherFactory, ::java::lang::Object, SearcherFactory, t_SearcherFactory_init_, 0, 0, 0, 0, 0);

        void t_SearcherFactory::install(PyObject *module)
        {
          installType(&PY_TYPE(SearcherFactory), module, "SearcherFactory", 0);
        }

        void t_SearcherFactory::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SearcherFactory).tp_dict, "class_", make_descriptor(SearcherFactory::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SearcherFactory).tp_dict, "wrapfn_", make_descriptor(t_SearcherFactory::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SearcherFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SearcherFactory_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SearcherFactory::initializeClass, 1)))
            return NULL;
          return t_SearcherFactory::wrap_Object(SearcherFactory(((t_SearcherFactory *) arg)->object.this$));
        }
        static PyObject *t_SearcherFactory_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SearcherFactory::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_SearcherFactory_init_(t_SearcherFactory *self, PyObject *args, PyObject *kwds)
        {
          SearcherFactory object((jobject) NULL);

          INT_CALL(object = SearcherFactory());
          self->object = object;

          return 0;
        }

        static PyObject *t_SearcherFactory_newSearcher(t_SearcherFactory *self, PyObject *arg)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::org::apache::lucene::search::IndexSearcher result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.newSearcher(a0));
            return ::org::apache::lucene::search::t_IndexSearcher::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "newSearcher", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/Lambda.h"
#include "org/apache/lucene/search/Explanation.h"
#include "org/apache/lucene/search/similarities/BasicStats.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *Lambda::class$ = NULL;
          jmethodID *Lambda::mids$ = NULL;
          bool Lambda::live$ = false;

          jclass Lambda::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/Lambda");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_explain_eddc6641] = env->getMethodID(cls, "explain", "(Lorg/apache/lucene/search/similarities/BasicStats;)Lorg/apache/lucene/search/Explanation;");
              mids$[mid_lambda_cb225ea0] = env->getMethodID(cls, "lambda", "(Lorg/apache/lucene/search/similarities/BasicStats;)F");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lambda::Lambda() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::search::Explanation Lambda::explain(const ::org::apache::lucene::search::similarities::BasicStats & a0) const
          {
            return ::org::apache::lucene::search::Explanation(env->callObjectMethod(this$, mids$[mid_explain_eddc6641], a0.this$));
          }

          jfloat Lambda::lambda(const ::org::apache::lucene::search::similarities::BasicStats & a0) const
          {
            return env->callFloatMethod(this$, mids$[mid_lambda_cb225ea0], a0.this$);
          }

          ::java::lang::String Lambda::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_Lambda_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lambda_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lambda_init_(t_Lambda *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lambda_explain(t_Lambda *self, PyObject *arg);
          static PyObject *t_Lambda_lambda(t_Lambda *self, PyObject *arg);
          static PyObject *t_Lambda_toString(t_Lambda *self, PyObject *args);

          static PyMethodDef t_Lambda__methods_[] = {
            DECLARE_METHOD(t_Lambda, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lambda, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lambda, explain, METH_O),
            DECLARE_METHOD(t_Lambda, lambda, METH_O),
            DECLARE_METHOD(t_Lambda, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lambda, t_Lambda, ::java::lang::Object, Lambda, t_Lambda_init_, 0, 0, 0, 0, 0);

          void t_Lambda::install(PyObject *module)
          {
            installType(&PY_TYPE(Lambda), module, "Lambda", 0);
          }

          void t_Lambda::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lambda).tp_dict, "class_", make_descriptor(Lambda::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lambda).tp_dict, "wrapfn_", make_descriptor(t_Lambda::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lambda).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lambda_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lambda::initializeClass, 1)))
              return NULL;
            return t_Lambda::wrap_Object(Lambda(((t_Lambda *) arg)->object.this$));
          }
          static PyObject *t_Lambda_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lambda::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lambda_init_(t_Lambda *self, PyObject *args, PyObject *kwds)
          {
            Lambda object((jobject) NULL);

            INT_CALL(object = Lambda());
            self->object = object;

            return 0;
          }

          static PyObject *t_Lambda_explain(t_Lambda *self, PyObject *arg)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            ::org::apache::lucene::search::Explanation result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.explain(a0));
              return ::org::apache::lucene::search::t_Explanation::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "explain", arg);
            return NULL;
          }

          static PyObject *t_Lambda_lambda(t_Lambda *self, PyObject *arg)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jfloat result;

            if (!parseArg(arg, "k", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.lambda(a0));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "lambda", arg);
            return NULL;
          }

          static PyObject *t_Lambda_toString(t_Lambda *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(Lambda), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/Lookup$LookupPriorityQueue.h"
#include "org/apache/lucene/search/suggest/Lookup$LookupResult.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {

          ::java::lang::Class *Lookup$LookupPriorityQueue::class$ = NULL;
          jmethodID *Lookup$LookupPriorityQueue::mids$ = NULL;
          bool Lookup$LookupPriorityQueue::live$ = false;

          jclass Lookup$LookupPriorityQueue::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/Lookup$LookupPriorityQueue");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
              mids$[mid_getResults_95554974] = env->getMethodID(cls, "getResults", "()[Lorg/apache/lucene/search/suggest/Lookup$LookupResult;");
              mids$[mid_lessThan_4deadb0a] = env->getMethodID(cls, "lessThan", "(Lorg/apache/lucene/search/suggest/Lookup$LookupResult;Lorg/apache/lucene/search/suggest/Lookup$LookupResult;)Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lookup$LookupPriorityQueue::Lookup$LookupPriorityQueue(jint a0) : ::org::apache::lucene::util::PriorityQueue(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

          JArray< ::org::apache::lucene::search::suggest::Lookup$LookupResult > Lookup$LookupPriorityQueue::getResults() const
          {
            return JArray< ::org::apache::lucene::search::suggest::Lookup$LookupResult >(env->callObjectMethod(this$, mids$[mid_getResults_95554974]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          static PyObject *t_Lookup$LookupPriorityQueue_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lookup$LookupPriorityQueue_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lookup$LookupPriorityQueue_of_(t_Lookup$LookupPriorityQueue *self, PyObject *args);
          static int t_Lookup$LookupPriorityQueue_init_(t_Lookup$LookupPriorityQueue *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lookup$LookupPriorityQueue_getResults(t_Lookup$LookupPriorityQueue *self);
          static PyObject *t_Lookup$LookupPriorityQueue_get__results(t_Lookup$LookupPriorityQueue *self, void *data);
          static PyObject *t_Lookup$LookupPriorityQueue_get__parameters_(t_Lookup$LookupPriorityQueue *self, void *data);
          static PyGetSetDef t_Lookup$LookupPriorityQueue__fields_[] = {
            DECLARE_GET_FIELD(t_Lookup$LookupPriorityQueue, results),
            DECLARE_GET_FIELD(t_Lookup$LookupPriorityQueue, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Lookup$LookupPriorityQueue__methods_[] = {
            DECLARE_METHOD(t_Lookup$LookupPriorityQueue, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lookup$LookupPriorityQueue, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lookup$LookupPriorityQueue, of_, METH_VARARGS),
            DECLARE_METHOD(t_Lookup$LookupPriorityQueue, getResults, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lookup$LookupPriorityQueue, t_Lookup$LookupPriorityQueue, ::org::apache::lucene::util::PriorityQueue, Lookup$LookupPriorityQueue, t_Lookup$LookupPriorityQueue_init_, 0, 0, t_Lookup$LookupPriorityQueue__fields_, 0, 0);
          PyObject *t_Lookup$LookupPriorityQueue::wrap_Object(const Lookup$LookupPriorityQueue& object, PyTypeObject *p0)
          {
            PyObject *obj = t_Lookup$LookupPriorityQueue::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_Lookup$LookupPriorityQueue *self = (t_Lookup$LookupPriorityQueue *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_Lookup$LookupPriorityQueue::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_Lookup$LookupPriorityQueue::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_Lookup$LookupPriorityQueue *self = (t_Lookup$LookupPriorityQueue *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_Lookup$LookupPriorityQueue::install(PyObject *module)
          {
            installType(&PY_TYPE(Lookup$LookupPriorityQueue), module, "Lookup$LookupPriorityQueue", 0);
          }

          void t_Lookup$LookupPriorityQueue::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lookup$LookupPriorityQueue).tp_dict, "class_", make_descriptor(Lookup$LookupPriorityQueue::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lookup$LookupPriorityQueue).tp_dict, "wrapfn_", make_descriptor(t_Lookup$LookupPriorityQueue::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lookup$LookupPriorityQueue).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lookup$LookupPriorityQueue_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lookup$LookupPriorityQueue::initializeClass, 1)))
              return NULL;
            return t_Lookup$LookupPriorityQueue::wrap_Object(Lookup$LookupPriorityQueue(((t_Lookup$LookupPriorityQueue *) arg)->object.this$));
          }
          static PyObject *t_Lookup$LookupPriorityQueue_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lookup$LookupPriorityQueue::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_Lookup$LookupPriorityQueue_of_(t_Lookup$LookupPriorityQueue *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_Lookup$LookupPriorityQueue_init_(t_Lookup$LookupPriorityQueue *self, PyObject *args, PyObject *kwds)
          {
            jint a0;
            Lookup$LookupPriorityQueue object((jobject) NULL);

            if (!parseArgs(args, "I", &a0))
            {
              INT_CALL(object = Lookup$LookupPriorityQueue(a0));
              self->object = object;
              self->parameters[0] = &::org::apache::lucene::search::suggest::PY_TYPE(Lookup$LookupResult);
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_Lookup$LookupPriorityQueue_getResults(t_Lookup$LookupPriorityQueue *self)
          {
            JArray< ::org::apache::lucene::search::suggest::Lookup$LookupResult > result((jobject) NULL);
            OBJ_CALL(result = self->object.getResults());
            return JArray<jobject>(result.this$).wrap(::org::apache::lucene::search::suggest::t_Lookup$LookupResult::wrap_jobject);
          }
          static PyObject *t_Lookup$LookupPriorityQueue_get__parameters_(t_Lookup$LookupPriorityQueue *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_Lookup$LookupPriorityQueue_get__results(t_Lookup$LookupPriorityQueue *self, void *data)
          {
            JArray< ::org::apache::lucene::search::suggest::Lookup$LookupResult > value((jobject) NULL);
            OBJ_CALL(value = self->object.getResults());
            return JArray<jobject>(value.this$).wrap(::org::apache::lucene::search::suggest::t_Lookup$LookupResult::wrap_jobject);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/AlreadyClosedException.h"
#include "java/lang/String.h"
#include "java/lang/Throwable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *AlreadyClosedException::class$ = NULL;
        jmethodID *AlreadyClosedException::mids$ = NULL;
        bool AlreadyClosedException::live$ = false;

        jclass AlreadyClosedException::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/AlreadyClosedException");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
            mids$[mid_init$_01646a2e] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/Throwable;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        AlreadyClosedException::AlreadyClosedException(const ::java::lang::String & a0) : ::java::lang::IllegalStateException(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

        AlreadyClosedException::AlreadyClosedException(const ::java::lang::String & a0, const ::java::lang::Throwable & a1) : ::java::lang::IllegalStateException(env->newObject(initializeClass, &mids$, mid_init$_01646a2e, a0.this$, a1.this$)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_AlreadyClosedException_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_AlreadyClosedException_instance_(PyTypeObject *type, PyObject *arg);
        static int t_AlreadyClosedException_init_(t_AlreadyClosedException *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_AlreadyClosedException__methods_[] = {
          DECLARE_METHOD(t_AlreadyClosedException, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_AlreadyClosedException, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(AlreadyClosedException, t_AlreadyClosedException, ::java::lang::IllegalStateException, AlreadyClosedException, t_AlreadyClosedException_init_, 0, 0, 0, 0, 0);

        void t_AlreadyClosedException::install(PyObject *module)
        {
          installType(&PY_TYPE(AlreadyClosedException), module, "AlreadyClosedException", 0);
        }

        void t_AlreadyClosedException::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(AlreadyClosedException).tp_dict, "class_", make_descriptor(AlreadyClosedException::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(AlreadyClosedException).tp_dict, "wrapfn_", make_descriptor(t_AlreadyClosedException::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(AlreadyClosedException).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_AlreadyClosedException_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, AlreadyClosedException::initializeClass, 1)))
            return NULL;
          return t_AlreadyClosedException::wrap_Object(AlreadyClosedException(((t_AlreadyClosedException *) arg)->object.this$));
        }
        static PyObject *t_AlreadyClosedException_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, AlreadyClosedException::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_AlreadyClosedException_init_(t_AlreadyClosedException *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::lang::String a0((jobject) NULL);
              AlreadyClosedException object((jobject) NULL);

              if (!parseArgs(args, "s", &a0))
              {
                INT_CALL(object = AlreadyClosedException(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::Throwable a1((jobject) NULL);
              AlreadyClosedException object((jobject) NULL);

              if (!parseArgs(args, "sk", ::java::lang::Throwable::initializeClass, &a0, &a1))
              {
                INT_CALL(object = AlreadyClosedException(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/sinks/TeeSinkTokenFilter$SinkFilter.h"
#include "org/apache/lucene/util/AttributeSource.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace sinks {

          ::java::lang::Class *TeeSinkTokenFilter$SinkFilter::class$ = NULL;
          jmethodID *TeeSinkTokenFilter$SinkFilter::mids$ = NULL;
          bool TeeSinkTokenFilter$SinkFilter::live$ = false;

          jclass TeeSinkTokenFilter$SinkFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/sinks/TeeSinkTokenFilter$SinkFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_accept_aea2d6e6] = env->getMethodID(cls, "accept", "(Lorg/apache/lucene/util/AttributeSource;)Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TeeSinkTokenFilter$SinkFilter::TeeSinkTokenFilter$SinkFilter() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jboolean TeeSinkTokenFilter$SinkFilter::accept(const ::org::apache::lucene::util::AttributeSource & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_accept_aea2d6e6], a0.this$);
          }

          void TeeSinkTokenFilter$SinkFilter::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace sinks {
          static PyObject *t_TeeSinkTokenFilter$SinkFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TeeSinkTokenFilter$SinkFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_TeeSinkTokenFilter$SinkFilter_init_(t_TeeSinkTokenFilter$SinkFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_TeeSinkTokenFilter$SinkFilter_accept(t_TeeSinkTokenFilter$SinkFilter *self, PyObject *arg);
          static PyObject *t_TeeSinkTokenFilter$SinkFilter_reset(t_TeeSinkTokenFilter$SinkFilter *self);

          static PyMethodDef t_TeeSinkTokenFilter$SinkFilter__methods_[] = {
            DECLARE_METHOD(t_TeeSinkTokenFilter$SinkFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TeeSinkTokenFilter$SinkFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TeeSinkTokenFilter$SinkFilter, accept, METH_O),
            DECLARE_METHOD(t_TeeSinkTokenFilter$SinkFilter, reset, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(TeeSinkTokenFilter$SinkFilter, t_TeeSinkTokenFilter$SinkFilter, ::java::lang::Object, TeeSinkTokenFilter$SinkFilter, t_TeeSinkTokenFilter$SinkFilter_init_, 0, 0, 0, 0, 0);

          void t_TeeSinkTokenFilter$SinkFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(TeeSinkTokenFilter$SinkFilter), module, "TeeSinkTokenFilter$SinkFilter", 0);
          }

          void t_TeeSinkTokenFilter$SinkFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(TeeSinkTokenFilter$SinkFilter).tp_dict, "class_", make_descriptor(TeeSinkTokenFilter$SinkFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(TeeSinkTokenFilter$SinkFilter).tp_dict, "wrapfn_", make_descriptor(t_TeeSinkTokenFilter$SinkFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(TeeSinkTokenFilter$SinkFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TeeSinkTokenFilter$SinkFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TeeSinkTokenFilter$SinkFilter::initializeClass, 1)))
              return NULL;
            return t_TeeSinkTokenFilter$SinkFilter::wrap_Object(TeeSinkTokenFilter$SinkFilter(((t_TeeSinkTokenFilter$SinkFilter *) arg)->object.this$));
          }
          static PyObject *t_TeeSinkTokenFilter$SinkFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TeeSinkTokenFilter$SinkFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_TeeSinkTokenFilter$SinkFilter_init_(t_TeeSinkTokenFilter$SinkFilter *self, PyObject *args, PyObject *kwds)
          {
            TeeSinkTokenFilter$SinkFilter object((jobject) NULL);

            INT_CALL(object = TeeSinkTokenFilter$SinkFilter());
            self->object = object;

            return 0;
          }

          static PyObject *t_TeeSinkTokenFilter$SinkFilter_accept(t_TeeSinkTokenFilter$SinkFilter *self, PyObject *arg)
          {
            ::org::apache::lucene::util::AttributeSource a0((jobject) NULL);
            jboolean result;

            if (!parseArg(arg, "k", ::org::apache::lucene::util::AttributeSource::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.accept(a0));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError((PyObject *) self, "accept", arg);
            return NULL;
          }

          static PyObject *t_TeeSinkTokenFilter$SinkFilter_reset(t_TeeSinkTokenFilter$SinkFilter *self)
          {
            OBJ_CALL(self->object.reset());
            Py_RETURN_NONE;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/WildcardQueryNodeBuilder.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/StandardQueryBuilder.h"
#include "org/apache/lucene/search/WildcardQuery.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {

              ::java::lang::Class *WildcardQueryNodeBuilder::class$ = NULL;
              jmethodID *WildcardQueryNodeBuilder::mids$ = NULL;
              bool WildcardQueryNodeBuilder::live$ = false;

              jclass WildcardQueryNodeBuilder::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/builders/WildcardQueryNodeBuilder");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_build_143b8b5f] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/search/WildcardQuery;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              WildcardQueryNodeBuilder::WildcardQueryNodeBuilder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              ::org::apache::lucene::search::WildcardQuery WildcardQueryNodeBuilder::build(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                return ::org::apache::lucene::search::WildcardQuery(env->callObjectMethod(this$, mids$[mid_build_143b8b5f], a0.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {
              static PyObject *t_WildcardQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_WildcardQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg);
              static int t_WildcardQueryNodeBuilder_init_(t_WildcardQueryNodeBuilder *self, PyObject *args, PyObject *kwds);
              static PyObject *t_WildcardQueryNodeBuilder_build(t_WildcardQueryNodeBuilder *self, PyObject *arg);

              static PyMethodDef t_WildcardQueryNodeBuilder__methods_[] = {
                DECLARE_METHOD(t_WildcardQueryNodeBuilder, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_WildcardQueryNodeBuilder, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_WildcardQueryNodeBuilder, build, METH_O),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(WildcardQueryNodeBuilder, t_WildcardQueryNodeBuilder, ::java::lang::Object, WildcardQueryNodeBuilder, t_WildcardQueryNodeBuilder_init_, 0, 0, 0, 0, 0);

              void t_WildcardQueryNodeBuilder::install(PyObject *module)
              {
                installType(&PY_TYPE(WildcardQueryNodeBuilder), module, "WildcardQueryNodeBuilder", 0);
              }

              void t_WildcardQueryNodeBuilder::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(WildcardQueryNodeBuilder).tp_dict, "class_", make_descriptor(WildcardQueryNodeBuilder::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(WildcardQueryNodeBuilder).tp_dict, "wrapfn_", make_descriptor(t_WildcardQueryNodeBuilder::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(WildcardQueryNodeBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_WildcardQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, WildcardQueryNodeBuilder::initializeClass, 1)))
                  return NULL;
                return t_WildcardQueryNodeBuilder::wrap_Object(WildcardQueryNodeBuilder(((t_WildcardQueryNodeBuilder *) arg)->object.this$));
              }
              static PyObject *t_WildcardQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, WildcardQueryNodeBuilder::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_WildcardQueryNodeBuilder_init_(t_WildcardQueryNodeBuilder *self, PyObject *args, PyObject *kwds)
              {
                WildcardQueryNodeBuilder object((jobject) NULL);

                INT_CALL(object = WildcardQueryNodeBuilder());
                self->object = object;

                return 0;
              }

              static PyObject *t_WildcardQueryNodeBuilder_build(t_WildcardQueryNodeBuilder *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::search::WildcardQuery result((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.build(a0));
                  return ::org::apache::lucene::search::t_WildcardQuery::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "build", arg);
                return NULL;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/en/EnglishMinimalStemmer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace en {

          ::java::lang::Class *EnglishMinimalStemmer::class$ = NULL;
          jmethodID *EnglishMinimalStemmer::mids$ = NULL;
          bool EnglishMinimalStemmer::live$ = false;

          jclass EnglishMinimalStemmer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/en/EnglishMinimalStemmer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_stem_ec6430eb] = env->getMethodID(cls, "stem", "([CI)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          EnglishMinimalStemmer::EnglishMinimalStemmer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint EnglishMinimalStemmer::stem(const JArray< jchar > & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_stem_ec6430eb], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace en {
          static PyObject *t_EnglishMinimalStemmer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_EnglishMinimalStemmer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_EnglishMinimalStemmer_init_(t_EnglishMinimalStemmer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_EnglishMinimalStemmer_stem(t_EnglishMinimalStemmer *self, PyObject *args);

          static PyMethodDef t_EnglishMinimalStemmer__methods_[] = {
            DECLARE_METHOD(t_EnglishMinimalStemmer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_EnglishMinimalStemmer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_EnglishMinimalStemmer, stem, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(EnglishMinimalStemmer, t_EnglishMinimalStemmer, ::java::lang::Object, EnglishMinimalStemmer, t_EnglishMinimalStemmer_init_, 0, 0, 0, 0, 0);

          void t_EnglishMinimalStemmer::install(PyObject *module)
          {
            installType(&PY_TYPE(EnglishMinimalStemmer), module, "EnglishMinimalStemmer", 0);
          }

          void t_EnglishMinimalStemmer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(EnglishMinimalStemmer).tp_dict, "class_", make_descriptor(EnglishMinimalStemmer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(EnglishMinimalStemmer).tp_dict, "wrapfn_", make_descriptor(t_EnglishMinimalStemmer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(EnglishMinimalStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_EnglishMinimalStemmer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, EnglishMinimalStemmer::initializeClass, 1)))
              return NULL;
            return t_EnglishMinimalStemmer::wrap_Object(EnglishMinimalStemmer(((t_EnglishMinimalStemmer *) arg)->object.this$));
          }
          static PyObject *t_EnglishMinimalStemmer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, EnglishMinimalStemmer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_EnglishMinimalStemmer_init_(t_EnglishMinimalStemmer *self, PyObject *args, PyObject *kwds)
          {
            EnglishMinimalStemmer object((jobject) NULL);

            INT_CALL(object = EnglishMinimalStemmer());
            self->object = object;

            return 0;
          }

          static PyObject *t_EnglishMinimalStemmer_stem(t_EnglishMinimalStemmer *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(result = self->object.stem(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "stem", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/el/GreekStemFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace el {

          ::java::lang::Class *GreekStemFilter::class$ = NULL;
          jmethodID *GreekStemFilter::mids$ = NULL;
          bool GreekStemFilter::live$ = false;

          jclass GreekStemFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/el/GreekStemFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          GreekStemFilter::GreekStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean GreekStemFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace el {
          static PyObject *t_GreekStemFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GreekStemFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_GreekStemFilter_init_(t_GreekStemFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_GreekStemFilter_incrementToken(t_GreekStemFilter *self, PyObject *args);

          static PyMethodDef t_GreekStemFilter__methods_[] = {
            DECLARE_METHOD(t_GreekStemFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GreekStemFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GreekStemFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(GreekStemFilter, t_GreekStemFilter, ::org::apache::lucene::analysis::TokenFilter, GreekStemFilter, t_GreekStemFilter_init_, 0, 0, 0, 0, 0);

          void t_GreekStemFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(GreekStemFilter), module, "GreekStemFilter", 0);
          }

          void t_GreekStemFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(GreekStemFilter).tp_dict, "class_", make_descriptor(GreekStemFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(GreekStemFilter).tp_dict, "wrapfn_", make_descriptor(t_GreekStemFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(GreekStemFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_GreekStemFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GreekStemFilter::initializeClass, 1)))
              return NULL;
            return t_GreekStemFilter::wrap_Object(GreekStemFilter(((t_GreekStemFilter *) arg)->object.this$));
          }
          static PyObject *t_GreekStemFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GreekStemFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_GreekStemFilter_init_(t_GreekStemFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            GreekStemFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = GreekStemFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_GreekStemFilter_incrementToken(t_GreekStemFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(GreekStemFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/PrefixWildcardQueryNodeBuilder.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/search/PrefixQuery.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/StandardQueryBuilder.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {

              ::java::lang::Class *PrefixWildcardQueryNodeBuilder::class$ = NULL;
              jmethodID *PrefixWildcardQueryNodeBuilder::mids$ = NULL;
              bool PrefixWildcardQueryNodeBuilder::live$ = false;

              jclass PrefixWildcardQueryNodeBuilder::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/builders/PrefixWildcardQueryNodeBuilder");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_build_652a8ae7] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/search/PrefixQuery;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              PrefixWildcardQueryNodeBuilder::PrefixWildcardQueryNodeBuilder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              ::org::apache::lucene::search::PrefixQuery PrefixWildcardQueryNodeBuilder::build(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                return ::org::apache::lucene::search::PrefixQuery(env->callObjectMethod(this$, mids$[mid_build_652a8ae7], a0.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {
              static PyObject *t_PrefixWildcardQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_PrefixWildcardQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg);
              static int t_PrefixWildcardQueryNodeBuilder_init_(t_PrefixWildcardQueryNodeBuilder *self, PyObject *args, PyObject *kwds);
              static PyObject *t_PrefixWildcardQueryNodeBuilder_build(t_PrefixWildcardQueryNodeBuilder *self, PyObject *arg);

              static PyMethodDef t_PrefixWildcardQueryNodeBuilder__methods_[] = {
                DECLARE_METHOD(t_PrefixWildcardQueryNodeBuilder, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_PrefixWildcardQueryNodeBuilder, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_PrefixWildcardQueryNodeBuilder, build, METH_O),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(PrefixWildcardQueryNodeBuilder, t_PrefixWildcardQueryNodeBuilder, ::java::lang::Object, PrefixWildcardQueryNodeBuilder, t_PrefixWildcardQueryNodeBuilder_init_, 0, 0, 0, 0, 0);

              void t_PrefixWildcardQueryNodeBuilder::install(PyObject *module)
              {
                installType(&PY_TYPE(PrefixWildcardQueryNodeBuilder), module, "PrefixWildcardQueryNodeBuilder", 0);
              }

              void t_PrefixWildcardQueryNodeBuilder::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(PrefixWildcardQueryNodeBuilder).tp_dict, "class_", make_descriptor(PrefixWildcardQueryNodeBuilder::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(PrefixWildcardQueryNodeBuilder).tp_dict, "wrapfn_", make_descriptor(t_PrefixWildcardQueryNodeBuilder::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(PrefixWildcardQueryNodeBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_PrefixWildcardQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, PrefixWildcardQueryNodeBuilder::initializeClass, 1)))
                  return NULL;
                return t_PrefixWildcardQueryNodeBuilder::wrap_Object(PrefixWildcardQueryNodeBuilder(((t_PrefixWildcardQueryNodeBuilder *) arg)->object.this$));
              }
              static PyObject *t_PrefixWildcardQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, PrefixWildcardQueryNodeBuilder::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_PrefixWildcardQueryNodeBuilder_init_(t_PrefixWildcardQueryNodeBuilder *self, PyObject *args, PyObject *kwds)
              {
                PrefixWildcardQueryNodeBuilder object((jobject) NULL);

                INT_CALL(object = PrefixWildcardQueryNodeBuilder());
                self->object = object;

                return 0;
              }

              static PyObject *t_PrefixWildcardQueryNodeBuilder_build(t_PrefixWildcardQueryNodeBuilder *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::search::PrefixQuery result((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.build(a0));
                  return ::org::apache::lucene::search::t_PrefixQuery::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "build", arg);
                return NULL;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/io/IOException.h"
#include "java/lang/String.h"
#include "java/lang/Throwable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace java {
  namespace io {

    ::java::lang::Class *IOException::class$ = NULL;
    jmethodID *IOException::mids$ = NULL;
    bool IOException::live$ = false;

    jclass IOException::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/io/IOException");

        mids$ = new jmethodID[max_mid];
        mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
        mids$[mid_init$_c5ec8ca4] = env->getMethodID(cls, "<init>", "(Ljava/lang/Throwable;)V");
        mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
        mids$[mid_init$_01646a2e] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/Throwable;)V");

        class$ = (::java::lang::Class *) new JObject(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    IOException::IOException() : ::java::lang::Exception(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

    IOException::IOException(const ::java::lang::Throwable & a0) : ::java::lang::Exception(env->newObject(initializeClass, &mids$, mid_init$_c5ec8ca4, a0.this$)) {}

    IOException::IOException(const ::java::lang::String & a0) : ::java::lang::Exception(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

    IOException::IOException(const ::java::lang::String & a0, const ::java::lang::Throwable & a1) : ::java::lang::Exception(env->newObject(initializeClass, &mids$, mid_init$_01646a2e, a0.this$, a1.this$)) {}
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace io {
    static PyObject *t_IOException_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_IOException_instance_(PyTypeObject *type, PyObject *arg);
    static int t_IOException_init_(t_IOException *self, PyObject *args, PyObject *kwds);

    static PyMethodDef t_IOException__methods_[] = {
      DECLARE_METHOD(t_IOException, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_IOException, instance_, METH_O | METH_CLASS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(IOException, t_IOException, ::java::lang::Exception, IOException, t_IOException_init_, 0, 0, 0, 0, 0);

    void t_IOException::install(PyObject *module)
    {
      installType(&PY_TYPE(IOException), module, "IOException", 0);
    }

    void t_IOException::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(IOException).tp_dict, "class_", make_descriptor(IOException::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(IOException).tp_dict, "wrapfn_", make_descriptor(t_IOException::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(IOException).tp_dict, "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_IOException_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, IOException::initializeClass, 1)))
        return NULL;
      return t_IOException::wrap_Object(IOException(((t_IOException *) arg)->object.this$));
    }
    static PyObject *t_IOException_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, IOException::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static int t_IOException_init_(t_IOException *self, PyObject *args, PyObject *kwds)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          IOException object((jobject) NULL);

          INT_CALL(object = IOException());
          self->object = object;
          break;
        }
        goto err;
       case 1:
        {
          ::java::lang::Throwable a0((jobject) NULL);
          IOException object((jobject) NULL);

          if (!parseArgs(args, "k", ::java::lang::Throwable::initializeClass, &a0))
          {
            INT_CALL(object = IOException(a0));
            self->object = object;
            break;
          }
        }
        {
          ::java::lang::String a0((jobject) NULL);
          IOException object((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            INT_CALL(object = IOException(a0));
            self->object = object;
            break;
          }
        }
        goto err;
       case 2:
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::Throwable a1((jobject) NULL);
          IOException object((jobject) NULL);

          if (!parseArgs(args, "sk", ::java::lang::Throwable::initializeClass, &a0, &a1))
          {
            INT_CALL(object = IOException(a0, a1));
            self->object = object;
            break;
          }
        }
       default:
       err:
        PyErr_SetArgsError((PyObject *) self, "__init__", args);
        return -1;
      }

      return 0;
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/NRTCachingDirectory.h"
#include "org/apache/lucene/store/IndexOutput.h"
#include "org/apache/lucene/store/IndexInput.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "java/util/Collection.h"
#include "org/apache/lucene/util/Accountable.h"
#include "org/apache/lucene/store/IOContext.h"
#include "java/io/IOException.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *NRTCachingDirectory::class$ = NULL;
        jmethodID *NRTCachingDirectory::mids$ = NULL;
        bool NRTCachingDirectory::live$ = false;

        jclass NRTCachingDirectory::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/NRTCachingDirectory");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_a6a83a1c] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;DD)V");
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_createOutput_5ad5358d] = env->getMethodID(cls, "createOutput", "(Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/store/IndexOutput;");
            mids$[mid_deleteFile_5fdc3f48] = env->getMethodID(cls, "deleteFile", "(Ljava/lang/String;)V");
            mids$[mid_fileExists_5fdc3f44] = env->getMethodID(cls, "fileExists", "(Ljava/lang/String;)Z");
            mids$[mid_fileLength_5fdc3f54] = env->getMethodID(cls, "fileLength", "(Ljava/lang/String;)J");
            mids$[mid_listAll_2e6d5245] = env->getMethodID(cls, "listAll", "()[Ljava/lang/String;");
            mids$[mid_listCachedFiles_2e6d5245] = env->getMethodID(cls, "listCachedFiles", "()[Ljava/lang/String;");
            mids$[mid_openInput_3e1b5375] = env->getMethodID(cls, "openInput", "(Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/store/IndexInput;");
            mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");
            mids$[mid_sync_9bfb370d] = env->getMethodID(cls, "sync", "(Ljava/util/Collection;)V");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
            mids$[mid_doCacheWrite_501c6f10] = env->getMethodID(cls, "doCacheWrite", "(Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        NRTCachingDirectory::NRTCachingDirectory(const ::org::apache::lucene::store::Directory & a0, jdouble a1, jdouble a2) : ::org::apache::lucene::store::FilterDirectory(env->newObject(initializeClass, &mids$, mid_init$_a6a83a1c, a0.this$, a1, a2)) {}

        void NRTCachingDirectory::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        ::org::apache::lucene::store::IndexOutput NRTCachingDirectory::createOutput(const ::java::lang::String & a0, const ::org::apache::lucene::store::IOContext & a1) const
        {
          return ::org::apache::lucene::store::IndexOutput(env->callObjectMethod(this$, mids$[mid_createOutput_5ad5358d], a0.this$, a1.this$));
        }

        void NRTCachingDirectory::deleteFile(const ::java::lang::String & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_deleteFile_5fdc3f48], a0.this$);
        }

        jboolean NRTCachingDirectory::fileExists(const ::java::lang::String & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_fileExists_5fdc3f44], a0.this$);
        }

        jlong NRTCachingDirectory::fileLength(const ::java::lang::String & a0) const
        {
          return env->callLongMethod(this$, mids$[mid_fileLength_5fdc3f54], a0.this$);
        }

        JArray< ::java::lang::String > NRTCachingDirectory::listAll() const
        {
          return JArray< ::java::lang::String >(env->callObjectMethod(this$, mids$[mid_listAll_2e6d5245]));
        }

        JArray< ::java::lang::String > NRTCachingDirectory::listCachedFiles() const
        {
          return JArray< ::java::lang::String >(env->callObjectMethod(this$, mids$[mid_listCachedFiles_2e6d5245]));
        }

        ::org::apache::lucene::store::IndexInput NRTCachingDirectory::openInput(const ::java::lang::String & a0, const ::org::apache::lucene::store::IOContext & a1) const
        {
          return ::org::apache::lucene::store::IndexInput(env->callObjectMethod(this$, mids$[mid_openInput_3e1b5375], a0.this$, a1.this$));
        }

        jlong NRTCachingDirectory::ramBytesUsed() const
        {
          return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
        }

        void NRTCachingDirectory::sync(const ::java::util::Collection & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_sync_9bfb370d], a0.this$);
        }

        ::java::lang::String NRTCachingDirectory::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_NRTCachingDirectory_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NRTCachingDirectory_instance_(PyTypeObject *type, PyObject *arg);
        static int t_NRTCachingDirectory_init_(t_NRTCachingDirectory *self, PyObject *args, PyObject *kwds);
        static PyObject *t_NRTCachingDirectory_close(t_NRTCachingDirectory *self, PyObject *args);
        static PyObject *t_NRTCachingDirectory_createOutput(t_NRTCachingDirectory *self, PyObject *args);
        static PyObject *t_NRTCachingDirectory_deleteFile(t_NRTCachingDirectory *self, PyObject *args);
        static PyObject *t_NRTCachingDirectory_fileExists(t_NRTCachingDirectory *self, PyObject *args);
        static PyObject *t_NRTCachingDirectory_fileLength(t_NRTCachingDirectory *self, PyObject *args);
        static PyObject *t_NRTCachingDirectory_listAll(t_NRTCachingDirectory *self, PyObject *args);
        static PyObject *t_NRTCachingDirectory_listCachedFiles(t_NRTCachingDirectory *self);
        static PyObject *t_NRTCachingDirectory_openInput(t_NRTCachingDirectory *self, PyObject *args);
        static PyObject *t_NRTCachingDirectory_ramBytesUsed(t_NRTCachingDirectory *self);
        static PyObject *t_NRTCachingDirectory_sync(t_NRTCachingDirectory *self, PyObject *args);
        static PyObject *t_NRTCachingDirectory_toString(t_NRTCachingDirectory *self, PyObject *args);

        static PyMethodDef t_NRTCachingDirectory__methods_[] = {
          DECLARE_METHOD(t_NRTCachingDirectory, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NRTCachingDirectory, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NRTCachingDirectory, close, METH_VARARGS),
          DECLARE_METHOD(t_NRTCachingDirectory, createOutput, METH_VARARGS),
          DECLARE_METHOD(t_NRTCachingDirectory, deleteFile, METH_VARARGS),
          DECLARE_METHOD(t_NRTCachingDirectory, fileExists, METH_VARARGS),
          DECLARE_METHOD(t_NRTCachingDirectory, fileLength, METH_VARARGS),
          DECLARE_METHOD(t_NRTCachingDirectory, listAll, METH_VARARGS),
          DECLARE_METHOD(t_NRTCachingDirectory, listCachedFiles, METH_NOARGS),
          DECLARE_METHOD(t_NRTCachingDirectory, openInput, METH_VARARGS),
          DECLARE_METHOD(t_NRTCachingDirectory, ramBytesUsed, METH_NOARGS),
          DECLARE_METHOD(t_NRTCachingDirectory, sync, METH_VARARGS),
          DECLARE_METHOD(t_NRTCachingDirectory, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(NRTCachingDirectory, t_NRTCachingDirectory, ::org::apache::lucene::store::FilterDirectory, NRTCachingDirectory, t_NRTCachingDirectory_init_, 0, 0, 0, 0, 0);

        void t_NRTCachingDirectory::install(PyObject *module)
        {
          installType(&PY_TYPE(NRTCachingDirectory), module, "NRTCachingDirectory", 0);
        }

        void t_NRTCachingDirectory::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(NRTCachingDirectory).tp_dict, "class_", make_descriptor(NRTCachingDirectory::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(NRTCachingDirectory).tp_dict, "wrapfn_", make_descriptor(t_NRTCachingDirectory::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(NRTCachingDirectory).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_NRTCachingDirectory_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, NRTCachingDirectory::initializeClass, 1)))
            return NULL;
          return t_NRTCachingDirectory::wrap_Object(NRTCachingDirectory(((t_NRTCachingDirectory *) arg)->object.this$));
        }
        static PyObject *t_NRTCachingDirectory_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, NRTCachingDirectory::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_NRTCachingDirectory_init_(t_NRTCachingDirectory *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::store::Directory a0((jobject) NULL);
          jdouble a1;
          jdouble a2;
          NRTCachingDirectory object((jobject) NULL);

          if (!parseArgs(args, "kDD", ::org::apache::lucene::store::Directory::initializeClass, &a0, &a1, &a2))
          {
            INT_CALL(object = NRTCachingDirectory(a0, a1, a2));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_NRTCachingDirectory_close(t_NRTCachingDirectory *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.close());
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(NRTCachingDirectory), (PyObject *) self, "close", args, 2);
        }

        static PyObject *t_NRTCachingDirectory_createOutput(t_NRTCachingDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::store::IOContext a1((jobject) NULL);
          ::org::apache::lucene::store::IndexOutput result((jobject) NULL);

          if (!parseArgs(args, "sk", ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.createOutput(a0, a1));
            return ::org::apache::lucene::store::t_IndexOutput::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(NRTCachingDirectory), (PyObject *) self, "createOutput", args, 2);
        }

        static PyObject *t_NRTCachingDirectory_deleteFile(t_NRTCachingDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(self->object.deleteFile(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(NRTCachingDirectory), (PyObject *) self, "deleteFile", args, 2);
        }

        static PyObject *t_NRTCachingDirectory_fileExists(t_NRTCachingDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.fileExists(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(NRTCachingDirectory), (PyObject *) self, "fileExists", args, 2);
        }

        static PyObject *t_NRTCachingDirectory_fileLength(t_NRTCachingDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          jlong result;

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.fileLength(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(NRTCachingDirectory), (PyObject *) self, "fileLength", args, 2);
        }

        static PyObject *t_NRTCachingDirectory_listAll(t_NRTCachingDirectory *self, PyObject *args)
        {
          JArray< ::java::lang::String > result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.listAll());
            return JArray<jstring>(result.this$).wrap();
          }

          return callSuper(&PY_TYPE(NRTCachingDirectory), (PyObject *) self, "listAll", args, 2);
        }

        static PyObject *t_NRTCachingDirectory_listCachedFiles(t_NRTCachingDirectory *self)
        {
          JArray< ::java::lang::String > result((jobject) NULL);
          OBJ_CALL(result = self->object.listCachedFiles());
          return JArray<jstring>(result.this$).wrap();
        }

        static PyObject *t_NRTCachingDirectory_openInput(t_NRTCachingDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::store::IOContext a1((jobject) NULL);
          ::org::apache::lucene::store::IndexInput result((jobject) NULL);

          if (!parseArgs(args, "sk", ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.openInput(a0, a1));
            return ::org::apache::lucene::store::t_IndexInput::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(NRTCachingDirectory), (PyObject *) self, "openInput", args, 2);
        }

        static PyObject *t_NRTCachingDirectory_ramBytesUsed(t_NRTCachingDirectory *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.ramBytesUsed());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_NRTCachingDirectory_sync(t_NRTCachingDirectory *self, PyObject *args)
        {
          ::java::util::Collection a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArgs(args, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
          {
            OBJ_CALL(self->object.sync(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(NRTCachingDirectory), (PyObject *) self, "sync", args, 2);
        }

        static PyObject *t_NRTCachingDirectory_toString(t_NRTCachingDirectory *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(NRTCachingDirectory), (PyObject *) self, "toString", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/Field$TermVector.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *Field$TermVector::class$ = NULL;
        jmethodID *Field$TermVector::mids$ = NULL;
        bool Field$TermVector::live$ = false;
        Field$TermVector *Field$TermVector::NO = NULL;
        Field$TermVector *Field$TermVector::WITH_OFFSETS = NULL;
        Field$TermVector *Field$TermVector::WITH_POSITIONS = NULL;
        Field$TermVector *Field$TermVector::WITH_POSITIONS_OFFSETS = NULL;
        Field$TermVector *Field$TermVector::YES = NULL;

        jclass Field$TermVector::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/Field$TermVector");

            mids$ = new jmethodID[max_mid];
            mids$[mid_isStored_54c6a16a] = env->getMethodID(cls, "isStored", "()Z");
            mids$[mid_toTermVector_e3e77410] = env->getStaticMethodID(cls, "toTermVector", "(ZZZ)Lorg/apache/lucene/document/Field$TermVector;");
            mids$[mid_valueOf_dd40625d] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/document/Field$TermVector;");
            mids$[mid_values_3d8f8203] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/document/Field$TermVector;");
            mids$[mid_withOffsets_54c6a16a] = env->getMethodID(cls, "withOffsets", "()Z");
            mids$[mid_withPositions_54c6a16a] = env->getMethodID(cls, "withPositions", "()Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            NO = new Field$TermVector(env->getStaticObjectField(cls, "NO", "Lorg/apache/lucene/document/Field$TermVector;"));
            WITH_OFFSETS = new Field$TermVector(env->getStaticObjectField(cls, "WITH_OFFSETS", "Lorg/apache/lucene/document/Field$TermVector;"));
            WITH_POSITIONS = new Field$TermVector(env->getStaticObjectField(cls, "WITH_POSITIONS", "Lorg/apache/lucene/document/Field$TermVector;"));
            WITH_POSITIONS_OFFSETS = new Field$TermVector(env->getStaticObjectField(cls, "WITH_POSITIONS_OFFSETS", "Lorg/apache/lucene/document/Field$TermVector;"));
            YES = new Field$TermVector(env->getStaticObjectField(cls, "YES", "Lorg/apache/lucene/document/Field$TermVector;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jboolean Field$TermVector::isStored() const
        {
          return env->callBooleanMethod(this$, mids$[mid_isStored_54c6a16a]);
        }

        Field$TermVector Field$TermVector::toTermVector(jboolean a0, jboolean a1, jboolean a2)
        {
          jclass cls = env->getClass(initializeClass);
          return Field$TermVector(env->callStaticObjectMethod(cls, mids$[mid_toTermVector_e3e77410], a0, a1, a2));
        }

        Field$TermVector Field$TermVector::valueOf(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return Field$TermVector(env->callStaticObjectMethod(cls, mids$[mid_valueOf_dd40625d], a0.this$));
        }

        JArray< Field$TermVector > Field$TermVector::values()
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< Field$TermVector >(env->callStaticObjectMethod(cls, mids$[mid_values_3d8f8203]));
        }

        jboolean Field$TermVector::withOffsets() const
        {
          return env->callBooleanMethod(this$, mids$[mid_withOffsets_54c6a16a]);
        }

        jboolean Field$TermVector::withPositions() const
        {
          return env->callBooleanMethod(this$, mids$[mid_withPositions_54c6a16a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_Field$TermVector_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Field$TermVector_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Field$TermVector_of_(t_Field$TermVector *self, PyObject *args);
        static PyObject *t_Field$TermVector_isStored(t_Field$TermVector *self);
        static PyObject *t_Field$TermVector_toTermVector(PyTypeObject *type, PyObject *args);
        static PyObject *t_Field$TermVector_valueOf(PyTypeObject *type, PyObject *args);
        static PyObject *t_Field$TermVector_values(PyTypeObject *type);
        static PyObject *t_Field$TermVector_withOffsets(t_Field$TermVector *self);
        static PyObject *t_Field$TermVector_withPositions(t_Field$TermVector *self);
        static PyObject *t_Field$TermVector_get__stored(t_Field$TermVector *self, void *data);
        static PyObject *t_Field$TermVector_get__parameters_(t_Field$TermVector *self, void *data);
        static PyGetSetDef t_Field$TermVector__fields_[] = {
          DECLARE_GET_FIELD(t_Field$TermVector, stored),
          DECLARE_GET_FIELD(t_Field$TermVector, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_Field$TermVector__methods_[] = {
          DECLARE_METHOD(t_Field$TermVector, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Field$TermVector, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Field$TermVector, of_, METH_VARARGS),
          DECLARE_METHOD(t_Field$TermVector, isStored, METH_NOARGS),
          DECLARE_METHOD(t_Field$TermVector, toTermVector, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_Field$TermVector, valueOf, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_Field$TermVector, values, METH_NOARGS | METH_CLASS),
          DECLARE_METHOD(t_Field$TermVector, withOffsets, METH_NOARGS),
          DECLARE_METHOD(t_Field$TermVector, withPositions, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Field$TermVector, t_Field$TermVector, ::java::lang::Enum, Field$TermVector, abstract_init, 0, 0, t_Field$TermVector__fields_, 0, 0);
        PyObject *t_Field$TermVector::wrap_Object(const Field$TermVector& object, PyTypeObject *p0)
        {
          PyObject *obj = t_Field$TermVector::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_Field$TermVector *self = (t_Field$TermVector *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_Field$TermVector::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_Field$TermVector::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_Field$TermVector *self = (t_Field$TermVector *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_Field$TermVector::install(PyObject *module)
        {
          installType(&PY_TYPE(Field$TermVector), module, "Field$TermVector", 0);
        }

        void t_Field$TermVector::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(Field$TermVector).tp_dict, "class_", make_descriptor(Field$TermVector::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(Field$TermVector).tp_dict, "wrapfn_", make_descriptor(t_Field$TermVector::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(Field$TermVector).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(Field$TermVector::initializeClass);
          PyDict_SetItemString(PY_TYPE(Field$TermVector).tp_dict, "NO", make_descriptor(t_Field$TermVector::wrap_Object(*Field$TermVector::NO)));
          PyDict_SetItemString(PY_TYPE(Field$TermVector).tp_dict, "WITH_OFFSETS", make_descriptor(t_Field$TermVector::wrap_Object(*Field$TermVector::WITH_OFFSETS)));
          PyDict_SetItemString(PY_TYPE(Field$TermVector).tp_dict, "WITH_POSITIONS", make_descriptor(t_Field$TermVector::wrap_Object(*Field$TermVector::WITH_POSITIONS)));
          PyDict_SetItemString(PY_TYPE(Field$TermVector).tp_dict, "WITH_POSITIONS_OFFSETS", make_descriptor(t_Field$TermVector::wrap_Object(*Field$TermVector::WITH_POSITIONS_OFFSETS)));
          PyDict_SetItemString(PY_TYPE(Field$TermVector).tp_dict, "YES", make_descriptor(t_Field$TermVector::wrap_Object(*Field$TermVector::YES)));
        }

        static PyObject *t_Field$TermVector_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Field$TermVector::initializeClass, 1)))
            return NULL;
          return t_Field$TermVector::wrap_Object(Field$TermVector(((t_Field$TermVector *) arg)->object.this$));
        }
        static PyObject *t_Field$TermVector_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Field$TermVector::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_Field$TermVector_of_(t_Field$TermVector *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_Field$TermVector_isStored(t_Field$TermVector *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.isStored());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_Field$TermVector_toTermVector(PyTypeObject *type, PyObject *args)
        {
          jboolean a0;
          jboolean a1;
          jboolean a2;
          Field$TermVector result((jobject) NULL);

          if (!parseArgs(args, "ZZZ", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::org::apache::lucene::document::Field$TermVector::toTermVector(a0, a1, a2));
            return t_Field$TermVector::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "toTermVector", args);
          return NULL;
        }

        static PyObject *t_Field$TermVector_valueOf(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          Field$TermVector result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::document::Field$TermVector::valueOf(a0));
            return t_Field$TermVector::wrap_Object(result);
          }

          return callSuper(type, "valueOf", args, 2);
        }

        static PyObject *t_Field$TermVector_values(PyTypeObject *type)
        {
          JArray< Field$TermVector > result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::document::Field$TermVector::values());
          return JArray<jobject>(result.this$).wrap(t_Field$TermVector::wrap_jobject);
        }

        static PyObject *t_Field$TermVector_withOffsets(t_Field$TermVector *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.withOffsets());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_Field$TermVector_withPositions(t_Field$TermVector *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.withPositions());
          Py_RETURN_BOOL(result);
        }
        static PyObject *t_Field$TermVector_get__parameters_(t_Field$TermVector *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static PyObject *t_Field$TermVector_get__stored(t_Field$TermVector *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.isStored());
          Py_RETURN_BOOL(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/br/BrazilianStemmer.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace br {

          ::java::lang::Class *BrazilianStemmer::class$ = NULL;
          jmethodID *BrazilianStemmer::mids$ = NULL;
          bool BrazilianStemmer::live$ = false;

          jclass BrazilianStemmer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/br/BrazilianStemmer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_log_14c7b5c5] = env->getMethodID(cls, "log", "()Ljava/lang/String;");
              mids$[mid_stem_97a5258f] = env->getMethodID(cls, "stem", "(Ljava/lang/String;)Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BrazilianStemmer::BrazilianStemmer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::java::lang::String BrazilianStemmer::log() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_log_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace br {
          static PyObject *t_BrazilianStemmer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BrazilianStemmer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_BrazilianStemmer_init_(t_BrazilianStemmer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_BrazilianStemmer_log(t_BrazilianStemmer *self);

          static PyMethodDef t_BrazilianStemmer__methods_[] = {
            DECLARE_METHOD(t_BrazilianStemmer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BrazilianStemmer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BrazilianStemmer, log, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(BrazilianStemmer, t_BrazilianStemmer, ::java::lang::Object, BrazilianStemmer, t_BrazilianStemmer_init_, 0, 0, 0, 0, 0);

          void t_BrazilianStemmer::install(PyObject *module)
          {
            installType(&PY_TYPE(BrazilianStemmer), module, "BrazilianStemmer", 0);
          }

          void t_BrazilianStemmer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(BrazilianStemmer).tp_dict, "class_", make_descriptor(BrazilianStemmer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(BrazilianStemmer).tp_dict, "wrapfn_", make_descriptor(t_BrazilianStemmer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(BrazilianStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_BrazilianStemmer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BrazilianStemmer::initializeClass, 1)))
              return NULL;
            return t_BrazilianStemmer::wrap_Object(BrazilianStemmer(((t_BrazilianStemmer *) arg)->object.this$));
          }
          static PyObject *t_BrazilianStemmer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BrazilianStemmer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_BrazilianStemmer_init_(t_BrazilianStemmer *self, PyObject *args, PyObject *kwds)
          {
            BrazilianStemmer object((jobject) NULL);

            INT_CALL(object = BrazilianStemmer());
            self->object = object;

            return 0;
          }

          static PyObject *t_BrazilianStemmer_log(t_BrazilianStemmer *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.log());
            return j2p(result);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spans/SpanPayloadCheckQuery.h"
#include "java/lang/Class.h"
#include "java/util/Collection.h"
#include "org/apache/lucene/search/spans/SpanQuery.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {

          ::java::lang::Class *SpanPayloadCheckQuery::class$ = NULL;
          jmethodID *SpanPayloadCheckQuery::mids$ = NULL;
          bool SpanPayloadCheckQuery::live$ = false;

          jclass SpanPayloadCheckQuery::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spans/SpanPayloadCheckQuery");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_8621bfa8] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/spans/SpanQuery;Ljava/util/Collection;)V");
              mids$[mid_clone_5574a424] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/search/spans/SpanPayloadCheckQuery;");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_toString_97a5258f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");
              mids$[mid_acceptPosition_5342f73f] = env->getMethodID(cls, "acceptPosition", "(Lorg/apache/lucene/search/spans/Spans;)Lorg/apache/lucene/search/spans/SpanPositionCheckQuery$AcceptStatus;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SpanPayloadCheckQuery::SpanPayloadCheckQuery(const ::org::apache::lucene::search::spans::SpanQuery & a0, const ::java::util::Collection & a1) : ::org::apache::lucene::search::spans::SpanPositionCheckQuery(env->newObject(initializeClass, &mids$, mid_init$_8621bfa8, a0.this$, a1.this$)) {}

          SpanPayloadCheckQuery SpanPayloadCheckQuery::clone() const
          {
            return SpanPayloadCheckQuery(env->callObjectMethod(this$, mids$[mid_clone_5574a424]));
          }

          jboolean SpanPayloadCheckQuery::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          jint SpanPayloadCheckQuery::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          ::java::lang::String SpanPayloadCheckQuery::toString(const ::java::lang::String & a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_97a5258f], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {
          static PyObject *t_SpanPayloadCheckQuery_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SpanPayloadCheckQuery_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SpanPayloadCheckQuery_init_(t_SpanPayloadCheckQuery *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SpanPayloadCheckQuery_clone(t_SpanPayloadCheckQuery *self, PyObject *args);
          static PyObject *t_SpanPayloadCheckQuery_equals(t_SpanPayloadCheckQuery *self, PyObject *args);
          static PyObject *t_SpanPayloadCheckQuery_hashCode(t_SpanPayloadCheckQuery *self, PyObject *args);
          static PyObject *t_SpanPayloadCheckQuery_toString(t_SpanPayloadCheckQuery *self, PyObject *args);

          static PyMethodDef t_SpanPayloadCheckQuery__methods_[] = {
            DECLARE_METHOD(t_SpanPayloadCheckQuery, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanPayloadCheckQuery, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanPayloadCheckQuery, clone, METH_VARARGS),
            DECLARE_METHOD(t_SpanPayloadCheckQuery, equals, METH_VARARGS),
            DECLARE_METHOD(t_SpanPayloadCheckQuery, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_SpanPayloadCheckQuery, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SpanPayloadCheckQuery, t_SpanPayloadCheckQuery, ::org::apache::lucene::search::spans::SpanPositionCheckQuery, SpanPayloadCheckQuery, t_SpanPayloadCheckQuery_init_, 0, 0, 0, 0, 0);

          void t_SpanPayloadCheckQuery::install(PyObject *module)
          {
            installType(&PY_TYPE(SpanPayloadCheckQuery), module, "SpanPayloadCheckQuery", 0);
          }

          void t_SpanPayloadCheckQuery::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SpanPayloadCheckQuery).tp_dict, "class_", make_descriptor(SpanPayloadCheckQuery::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SpanPayloadCheckQuery).tp_dict, "wrapfn_", make_descriptor(t_SpanPayloadCheckQuery::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SpanPayloadCheckQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SpanPayloadCheckQuery_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SpanPayloadCheckQuery::initializeClass, 1)))
              return NULL;
            return t_SpanPayloadCheckQuery::wrap_Object(SpanPayloadCheckQuery(((t_SpanPayloadCheckQuery *) arg)->object.this$));
          }
          static PyObject *t_SpanPayloadCheckQuery_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SpanPayloadCheckQuery::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SpanPayloadCheckQuery_init_(t_SpanPayloadCheckQuery *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::search::spans::SpanQuery a0((jobject) NULL);
            ::java::util::Collection a1((jobject) NULL);
            PyTypeObject **p1;
            SpanPayloadCheckQuery object((jobject) NULL);

            if (!parseArgs(args, "kK", ::org::apache::lucene::search::spans::SpanQuery::initializeClass, ::java::util::Collection::initializeClass, &a0, &a1, &p1, ::java::util::t_Collection::parameters_))
            {
              INT_CALL(object = SpanPayloadCheckQuery(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SpanPayloadCheckQuery_clone(t_SpanPayloadCheckQuery *self, PyObject *args)
          {
            SpanPayloadCheckQuery result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.clone());
              return t_SpanPayloadCheckQuery::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(SpanPayloadCheckQuery), (PyObject *) self, "clone", args, 2);
          }

          static PyObject *t_SpanPayloadCheckQuery_equals(t_SpanPayloadCheckQuery *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(SpanPayloadCheckQuery), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_SpanPayloadCheckQuery_hashCode(t_SpanPayloadCheckQuery *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(SpanPayloadCheckQuery), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_SpanPayloadCheckQuery_toString(t_SpanPayloadCheckQuery *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = self->object.toString(a0));
              return j2p(result);
            }

            return callSuper(&PY_TYPE(SpanPayloadCheckQuery), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/ParallelCompositeReader.h"
#include "org/apache/lucene/index/CompositeReader.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *ParallelCompositeReader::class$ = NULL;
        jmethodID *ParallelCompositeReader::mids$ = NULL;
        bool ParallelCompositeReader::live$ = false;

        jclass ParallelCompositeReader::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/ParallelCompositeReader");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_0cab4ef6] = env->getMethodID(cls, "<init>", "([Lorg/apache/lucene/index/CompositeReader;)V");
            mids$[mid_init$_24b17b53] = env->getMethodID(cls, "<init>", "(Z[Lorg/apache/lucene/index/CompositeReader;)V");
            mids$[mid_init$_9dc0978b] = env->getMethodID(cls, "<init>", "(Z[Lorg/apache/lucene/index/CompositeReader;[Lorg/apache/lucene/index/CompositeReader;)V");
            mids$[mid_doClose_54c6a166] = env->getMethodID(cls, "doClose", "()V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ParallelCompositeReader::ParallelCompositeReader(const JArray< ::org::apache::lucene::index::CompositeReader > & a0) : ::org::apache::lucene::index::BaseCompositeReader(env->newObject(initializeClass, &mids$, mid_init$_0cab4ef6, a0.this$)) {}

        ParallelCompositeReader::ParallelCompositeReader(jboolean a0, const JArray< ::org::apache::lucene::index::CompositeReader > & a1) : ::org::apache::lucene::index::BaseCompositeReader(env->newObject(initializeClass, &mids$, mid_init$_24b17b53, a0, a1.this$)) {}

        ParallelCompositeReader::ParallelCompositeReader(jboolean a0, const JArray< ::org::apache::lucene::index::CompositeReader > & a1, const JArray< ::org::apache::lucene::index::CompositeReader > & a2) : ::org::apache::lucene::index::BaseCompositeReader(env->newObject(initializeClass, &mids$, mid_init$_9dc0978b, a0, a1.this$, a2.this$)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_ParallelCompositeReader_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ParallelCompositeReader_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ParallelCompositeReader_of_(t_ParallelCompositeReader *self, PyObject *args);
        static int t_ParallelCompositeReader_init_(t_ParallelCompositeReader *self, PyObject *args, PyObject *kwds);
        static PyObject *t_ParallelCompositeReader_get__parameters_(t_ParallelCompositeReader *self, void *data);
        static PyGetSetDef t_ParallelCompositeReader__fields_[] = {
          DECLARE_GET_FIELD(t_ParallelCompositeReader, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_ParallelCompositeReader__methods_[] = {
          DECLARE_METHOD(t_ParallelCompositeReader, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ParallelCompositeReader, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ParallelCompositeReader, of_, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(ParallelCompositeReader, t_ParallelCompositeReader, ::org::apache::lucene::index::BaseCompositeReader, ParallelCompositeReader, t_ParallelCompositeReader_init_, 0, 0, t_ParallelCompositeReader__fields_, 0, 0);
        PyObject *t_ParallelCompositeReader::wrap_Object(const ParallelCompositeReader& object, PyTypeObject *p0)
        {
          PyObject *obj = t_ParallelCompositeReader::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_ParallelCompositeReader *self = (t_ParallelCompositeReader *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_ParallelCompositeReader::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_ParallelCompositeReader::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_ParallelCompositeReader *self = (t_ParallelCompositeReader *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_ParallelCompositeReader::install(PyObject *module)
        {
          installType(&PY_TYPE(ParallelCompositeReader), module, "ParallelCompositeReader", 0);
        }

        void t_ParallelCompositeReader::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(ParallelCompositeReader).tp_dict, "class_", make_descriptor(ParallelCompositeReader::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(ParallelCompositeReader).tp_dict, "wrapfn_", make_descriptor(t_ParallelCompositeReader::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(ParallelCompositeReader).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_ParallelCompositeReader_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, ParallelCompositeReader::initializeClass, 1)))
            return NULL;
          return t_ParallelCompositeReader::wrap_Object(ParallelCompositeReader(((t_ParallelCompositeReader *) arg)->object.this$));
        }
        static PyObject *t_ParallelCompositeReader_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, ParallelCompositeReader::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_ParallelCompositeReader_of_(t_ParallelCompositeReader *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_ParallelCompositeReader_init_(t_ParallelCompositeReader *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              JArray< ::org::apache::lucene::index::CompositeReader > a0((jobject) NULL);
              ParallelCompositeReader object((jobject) NULL);

              if (!parseArgs(args, "[k", ::org::apache::lucene::index::CompositeReader::initializeClass, &a0))
              {
                INT_CALL(object = ParallelCompositeReader(a0));
                self->object = object;
                self->parameters[0] = &::org::apache::lucene::index::PY_TYPE(IndexReader);
                break;
              }
            }
            goto err;
           case 2:
            {
              jboolean a0;
              JArray< ::org::apache::lucene::index::CompositeReader > a1((jobject) NULL);
              ParallelCompositeReader object((jobject) NULL);

              if (!parseArgs(args, "Z[k", ::org::apache::lucene::index::CompositeReader::initializeClass, &a0, &a1))
              {
                INT_CALL(object = ParallelCompositeReader(a0, a1));
                self->object = object;
                self->parameters[0] = &::org::apache::lucene::index::PY_TYPE(IndexReader);
                break;
              }
            }
            goto err;
           case 3:
            {
              jboolean a0;
              JArray< ::org::apache::lucene::index::CompositeReader > a1((jobject) NULL);
              JArray< ::org::apache::lucene::index::CompositeReader > a2((jobject) NULL);
              ParallelCompositeReader object((jobject) NULL);

              if (!parseArgs(args, "Z[k[k", ::org::apache::lucene::index::CompositeReader::initializeClass, ::org::apache::lucene::index::CompositeReader::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = ParallelCompositeReader(a0, a1, a2));
                self->object = object;
                self->parameters[0] = &::org::apache::lucene::index::PY_TYPE(IndexReader);
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
        static PyObject *t_ParallelCompositeReader_get__parameters_(t_ParallelCompositeReader *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/FieldValuePairQueryNode.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/ValueQueryNode.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {

              ::java::lang::Class *FieldValuePairQueryNode::class$ = NULL;
              jmethodID *FieldValuePairQueryNode::mids$ = NULL;
              bool FieldValuePairQueryNode::live$ = false;

              jclass FieldValuePairQueryNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/nodes/FieldValuePairQueryNode");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {
              static PyObject *t_FieldValuePairQueryNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_FieldValuePairQueryNode_instance_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_FieldValuePairQueryNode_of_(t_FieldValuePairQueryNode *self, PyObject *args);
              static PyObject *t_FieldValuePairQueryNode_get__parameters_(t_FieldValuePairQueryNode *self, void *data);
              static PyGetSetDef t_FieldValuePairQueryNode__fields_[] = {
                DECLARE_GET_FIELD(t_FieldValuePairQueryNode, parameters_),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_FieldValuePairQueryNode__methods_[] = {
                DECLARE_METHOD(t_FieldValuePairQueryNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_FieldValuePairQueryNode, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_FieldValuePairQueryNode, of_, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(FieldValuePairQueryNode, t_FieldValuePairQueryNode, ::org::apache::lucene::queryparser::flexible::core::nodes::FieldableNode, FieldValuePairQueryNode, abstract_init, 0, 0, t_FieldValuePairQueryNode__fields_, 0, 0);
              PyObject *t_FieldValuePairQueryNode::wrap_Object(const FieldValuePairQueryNode& object, PyTypeObject *p0)
              {
                PyObject *obj = t_FieldValuePairQueryNode::wrap_Object(object);
                if (obj != NULL && obj != Py_None)
                {
                  t_FieldValuePairQueryNode *self = (t_FieldValuePairQueryNode *) obj;
                  self->parameters[0] = p0;
                }
                return obj;
              }

              PyObject *t_FieldValuePairQueryNode::wrap_jobject(const jobject& object, PyTypeObject *p0)
              {
                PyObject *obj = t_FieldValuePairQueryNode::wrap_jobject(object);
                if (obj != NULL && obj != Py_None)
                {
                  t_FieldValuePairQueryNode *self = (t_FieldValuePairQueryNode *) obj;
                  self->parameters[0] = p0;
                }
                return obj;
              }

              void t_FieldValuePairQueryNode::install(PyObject *module)
              {
                installType(&PY_TYPE(FieldValuePairQueryNode), module, "FieldValuePairQueryNode", 0);
              }

              void t_FieldValuePairQueryNode::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(FieldValuePairQueryNode).tp_dict, "class_", make_descriptor(FieldValuePairQueryNode::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(FieldValuePairQueryNode).tp_dict, "wrapfn_", make_descriptor(t_FieldValuePairQueryNode::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(FieldValuePairQueryNode).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_FieldValuePairQueryNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, FieldValuePairQueryNode::initializeClass, 1)))
                  return NULL;
                return t_FieldValuePairQueryNode::wrap_Object(FieldValuePairQueryNode(((t_FieldValuePairQueryNode *) arg)->object.this$));
              }
              static PyObject *t_FieldValuePairQueryNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, FieldValuePairQueryNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static PyObject *t_FieldValuePairQueryNode_of_(t_FieldValuePairQueryNode *self, PyObject *args)
              {
                if (!parseArg(args, "T", 1, &(self->parameters)))
                  Py_RETURN_SELF;
                return PyErr_SetArgsError((PyObject *) self, "of_", args);
              }
              static PyObject *t_FieldValuePairQueryNode_get__parameters_(t_FieldValuePairQueryNode *self, void *data)
              {
                return typeParameters(self->parameters, sizeof(self->parameters));
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FuzzyTermsEnum$LevenshteinAutomataAttribute.h"
#include "java/util/List.h"
#include "org/apache/lucene/util/automaton/CompiledAutomaton.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FuzzyTermsEnum$LevenshteinAutomataAttribute::class$ = NULL;
        jmethodID *FuzzyTermsEnum$LevenshteinAutomataAttribute::mids$ = NULL;
        bool FuzzyTermsEnum$LevenshteinAutomataAttribute::live$ = false;

        jclass FuzzyTermsEnum$LevenshteinAutomataAttribute::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FuzzyTermsEnum$LevenshteinAutomataAttribute");

            mids$ = new jmethodID[max_mid];
            mids$[mid_automata_87851566] = env->getMethodID(cls, "automata", "()Ljava/util/List;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::java::util::List FuzzyTermsEnum$LevenshteinAutomataAttribute::automata() const
        {
          return ::java::util::List(env->callObjectMethod(this$, mids$[mid_automata_87851566]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FuzzyTermsEnum$LevenshteinAutomataAttribute_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FuzzyTermsEnum$LevenshteinAutomataAttribute_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FuzzyTermsEnum$LevenshteinAutomataAttribute_automata(t_FuzzyTermsEnum$LevenshteinAutomataAttribute *self);

        static PyMethodDef t_FuzzyTermsEnum$LevenshteinAutomataAttribute__methods_[] = {
          DECLARE_METHOD(t_FuzzyTermsEnum$LevenshteinAutomataAttribute, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FuzzyTermsEnum$LevenshteinAutomataAttribute, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FuzzyTermsEnum$LevenshteinAutomataAttribute, automata, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FuzzyTermsEnum$LevenshteinAutomataAttribute, t_FuzzyTermsEnum$LevenshteinAutomataAttribute, ::org::apache::lucene::util::Attribute, FuzzyTermsEnum$LevenshteinAutomataAttribute, abstract_init, 0, 0, 0, 0, 0);

        void t_FuzzyTermsEnum$LevenshteinAutomataAttribute::install(PyObject *module)
        {
          installType(&PY_TYPE(FuzzyTermsEnum$LevenshteinAutomataAttribute), module, "FuzzyTermsEnum$LevenshteinAutomataAttribute", 0);
        }

        void t_FuzzyTermsEnum$LevenshteinAutomataAttribute::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FuzzyTermsEnum$LevenshteinAutomataAttribute).tp_dict, "class_", make_descriptor(FuzzyTermsEnum$LevenshteinAutomataAttribute::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FuzzyTermsEnum$LevenshteinAutomataAttribute).tp_dict, "wrapfn_", make_descriptor(t_FuzzyTermsEnum$LevenshteinAutomataAttribute::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FuzzyTermsEnum$LevenshteinAutomataAttribute).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FuzzyTermsEnum$LevenshteinAutomataAttribute_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FuzzyTermsEnum$LevenshteinAutomataAttribute::initializeClass, 1)))
            return NULL;
          return t_FuzzyTermsEnum$LevenshteinAutomataAttribute::wrap_Object(FuzzyTermsEnum$LevenshteinAutomataAttribute(((t_FuzzyTermsEnum$LevenshteinAutomataAttribute *) arg)->object.this$));
        }
        static PyObject *t_FuzzyTermsEnum$LevenshteinAutomataAttribute_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FuzzyTermsEnum$LevenshteinAutomataAttribute::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FuzzyTermsEnum$LevenshteinAutomataAttribute_automata(t_FuzzyTermsEnum$LevenshteinAutomataAttribute *self)
        {
          ::java::util::List result((jobject) NULL);
          OBJ_CALL(result = self->object.automata());
          return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::util::automaton::PY_TYPE(CompiledAutomaton));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/ReaderUtil.h"
#include "java/util/List.h"
#include "org/apache/lucene/index/IndexReaderContext.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *ReaderUtil::class$ = NULL;
        jmethodID *ReaderUtil::mids$ = NULL;
        bool ReaderUtil::live$ = false;

        jclass ReaderUtil::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/ReaderUtil");

            mids$ = new jmethodID[max_mid];
            mids$[mid_getTopLevelContext_4ecc3919] = env->getStaticMethodID(cls, "getTopLevelContext", "(Lorg/apache/lucene/index/IndexReaderContext;)Lorg/apache/lucene/index/IndexReaderContext;");
            mids$[mid_subIndex_dd2db701] = env->getStaticMethodID(cls, "subIndex", "(I[I)I");
            mids$[mid_subIndex_f2e17962] = env->getStaticMethodID(cls, "subIndex", "(ILjava/util/List;)I");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::index::IndexReaderContext ReaderUtil::getTopLevelContext(const ::org::apache::lucene::index::IndexReaderContext & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::IndexReaderContext(env->callStaticObjectMethod(cls, mids$[mid_getTopLevelContext_4ecc3919], a0.this$));
        }

        jint ReaderUtil::subIndex(jint a0, const JArray< jint > & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_subIndex_dd2db701], a0, a1.this$);
        }

        jint ReaderUtil::subIndex(jint a0, const ::java::util::List & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_subIndex_f2e17962], a0, a1.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_ReaderUtil_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ReaderUtil_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ReaderUtil_getTopLevelContext(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ReaderUtil_subIndex(PyTypeObject *type, PyObject *args);

        static PyMethodDef t_ReaderUtil__methods_[] = {
          DECLARE_METHOD(t_ReaderUtil, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ReaderUtil, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ReaderUtil, getTopLevelContext, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ReaderUtil, subIndex, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(ReaderUtil, t_ReaderUtil, ::java::lang::Object, ReaderUtil, abstract_init, 0, 0, 0, 0, 0);

        void t_ReaderUtil::install(PyObject *module)
        {
          installType(&PY_TYPE(ReaderUtil), module, "ReaderUtil", 0);
        }

        void t_ReaderUtil::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(ReaderUtil).tp_dict, "class_", make_descriptor(ReaderUtil::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(ReaderUtil).tp_dict, "wrapfn_", make_descriptor(t_ReaderUtil::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(ReaderUtil).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_ReaderUtil_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, ReaderUtil::initializeClass, 1)))
            return NULL;
          return t_ReaderUtil::wrap_Object(ReaderUtil(((t_ReaderUtil *) arg)->object.this$));
        }
        static PyObject *t_ReaderUtil_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, ReaderUtil::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_ReaderUtil_getTopLevelContext(PyTypeObject *type, PyObject *arg)
        {
          ::org::apache::lucene::index::IndexReaderContext a0((jobject) NULL);
          ::org::apache::lucene::index::IndexReaderContext result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::IndexReaderContext::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::ReaderUtil::getTopLevelContext(a0));
            return ::org::apache::lucene::index::t_IndexReaderContext::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "getTopLevelContext", arg);
          return NULL;
        }

        static PyObject *t_ReaderUtil_subIndex(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              jint a0;
              JArray< jint > a1((jobject) NULL);
              jint result;

              if (!parseArgs(args, "I[I", &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::index::ReaderUtil::subIndex(a0, a1));
                return PyInt_FromLong((long) result);
              }
            }
            {
              jint a0;
              ::java::util::List a1((jobject) NULL);
              PyTypeObject **p1;
              jint result;

              if (!parseArgs(args, "IK", ::java::util::List::initializeClass, &a0, &a1, &p1, ::java::util::t_List::parameters_))
              {
                OBJ_CALL(result = ::org::apache::lucene::index::ReaderUtil::subIndex(a0, a1));
                return PyInt_FromLong((long) result);
              }
            }
          }

          PyErr_SetArgsError(type, "subIndex", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/ReverseOrdFieldSource.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *ReverseOrdFieldSource::class$ = NULL;
            jmethodID *ReverseOrdFieldSource::mids$ = NULL;
            jfieldID *ReverseOrdFieldSource::fids$ = NULL;
            bool ReverseOrdFieldSource::live$ = false;

            jclass ReverseOrdFieldSource::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/ReverseOrdFieldSource");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
                mids$[mid_description_14c7b5c5] = env->getMethodID(cls, "description", "()Ljava/lang/String;");
                mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_getValues_4c566485] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/queries/function/FunctionValues;");
                mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");

                fids$ = new jfieldID[max_fid];
                fids$[fid_field] = env->getFieldID(cls, "field", "Ljava/lang/String;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            ReverseOrdFieldSource::ReverseOrdFieldSource(const ::java::lang::String & a0) : ::org::apache::lucene::queries::function::ValueSource(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

            ::java::lang::String ReverseOrdFieldSource::description() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_description_14c7b5c5]));
            }

            jboolean ReverseOrdFieldSource::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
            }

            ::org::apache::lucene::queries::function::FunctionValues ReverseOrdFieldSource::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::FunctionValues(env->callObjectMethod(this$, mids$[mid_getValues_4c566485], a0.this$, a1.this$));
            }

            jint ReverseOrdFieldSource::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
            }

            ::java::lang::String ReverseOrdFieldSource::_get_field() const
            {
              return ::java::lang::String(env->getObjectField(this$, fids$[fid_field]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_ReverseOrdFieldSource_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_ReverseOrdFieldSource_instance_(PyTypeObject *type, PyObject *arg);
            static int t_ReverseOrdFieldSource_init_(t_ReverseOrdFieldSource *self, PyObject *args, PyObject *kwds);
            static PyObject *t_ReverseOrdFieldSource_description(t_ReverseOrdFieldSource *self, PyObject *args);
            static PyObject *t_ReverseOrdFieldSource_equals(t_ReverseOrdFieldSource *self, PyObject *args);
            static PyObject *t_ReverseOrdFieldSource_getValues(t_ReverseOrdFieldSource *self, PyObject *args);
            static PyObject *t_ReverseOrdFieldSource_hashCode(t_ReverseOrdFieldSource *self, PyObject *args);
            static PyObject *t_ReverseOrdFieldSource_get__field(t_ReverseOrdFieldSource *self, void *data);

            static PyGetSetDef t_ReverseOrdFieldSource__fields_[] = {
              DECLARE_GET_FIELD(t_ReverseOrdFieldSource, field),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_ReverseOrdFieldSource__methods_[] = {
              DECLARE_METHOD(t_ReverseOrdFieldSource, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_ReverseOrdFieldSource, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_ReverseOrdFieldSource, description, METH_VARARGS),
              DECLARE_METHOD(t_ReverseOrdFieldSource, equals, METH_VARARGS),
              DECLARE_METHOD(t_ReverseOrdFieldSource, getValues, METH_VARARGS),
              DECLARE_METHOD(t_ReverseOrdFieldSource, hashCode, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(ReverseOrdFieldSource, t_ReverseOrdFieldSource, ::org::apache::lucene::queries::function::ValueSource, ReverseOrdFieldSource, t_ReverseOrdFieldSource_init_, 0, 0, t_ReverseOrdFieldSource__fields_, 0, 0);

            void t_ReverseOrdFieldSource::install(PyObject *module)
            {
              installType(&PY_TYPE(ReverseOrdFieldSource), module, "ReverseOrdFieldSource", 0);
            }

            void t_ReverseOrdFieldSource::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(ReverseOrdFieldSource).tp_dict, "class_", make_descriptor(ReverseOrdFieldSource::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(ReverseOrdFieldSource).tp_dict, "wrapfn_", make_descriptor(t_ReverseOrdFieldSource::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(ReverseOrdFieldSource).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_ReverseOrdFieldSource_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, ReverseOrdFieldSource::initializeClass, 1)))
                return NULL;
              return t_ReverseOrdFieldSource::wrap_Object(ReverseOrdFieldSource(((t_ReverseOrdFieldSource *) arg)->object.this$));
            }
            static PyObject *t_ReverseOrdFieldSource_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, ReverseOrdFieldSource::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_ReverseOrdFieldSource_init_(t_ReverseOrdFieldSource *self, PyObject *args, PyObject *kwds)
            {
              ::java::lang::String a0((jobject) NULL);
              ReverseOrdFieldSource object((jobject) NULL);

              if (!parseArgs(args, "s", &a0))
              {
                INT_CALL(object = ReverseOrdFieldSource(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_ReverseOrdFieldSource_description(t_ReverseOrdFieldSource *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.description());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(ReverseOrdFieldSource), (PyObject *) self, "description", args, 2);
            }

            static PyObject *t_ReverseOrdFieldSource_equals(t_ReverseOrdFieldSource *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(ReverseOrdFieldSource), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_ReverseOrdFieldSource_getValues(t_ReverseOrdFieldSource *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::FunctionValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::t_FunctionValues::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(ReverseOrdFieldSource), (PyObject *) self, "getValues", args, 2);
            }

            static PyObject *t_ReverseOrdFieldSource_hashCode(t_ReverseOrdFieldSource *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(ReverseOrdFieldSource), (PyObject *) self, "hashCode", args, 2);
            }

            static PyObject *t_ReverseOrdFieldSource_get__field(t_ReverseOrdFieldSource *self, void *data)
            {
              ::java::lang::String value((jobject) NULL);
              OBJ_CALL(value = self->object._get_field());
              return j2p(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/pattern/PatternTokenizerFactory.h"
#include "org/apache/lucene/analysis/pattern/PatternTokenizer.h"
#include "java/lang/Class.h"
#include "java/io/Reader.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pattern {

          ::java::lang::Class *PatternTokenizerFactory::class$ = NULL;
          jmethodID *PatternTokenizerFactory::mids$ = NULL;
          bool PatternTokenizerFactory::live$ = false;
          ::java::lang::String *PatternTokenizerFactory::GROUP = NULL;
          ::java::lang::String *PatternTokenizerFactory::PATTERN = NULL;

          jclass PatternTokenizerFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/pattern/PatternTokenizerFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_79576cd1] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;)Lorg/apache/lucene/analysis/pattern/PatternTokenizer;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              GROUP = new ::java::lang::String(env->getStaticObjectField(cls, "GROUP", "Ljava/lang/String;"));
              PATTERN = new ::java::lang::String(env->getStaticObjectField(cls, "PATTERN", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PatternTokenizerFactory::PatternTokenizerFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenizerFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::pattern::PatternTokenizer PatternTokenizerFactory::create(const ::org::apache::lucene::util::AttributeFactory & a0, const ::java::io::Reader & a1) const
          {
            return ::org::apache::lucene::analysis::pattern::PatternTokenizer(env->callObjectMethod(this$, mids$[mid_create_79576cd1], a0.this$, a1.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pattern {
          static PyObject *t_PatternTokenizerFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PatternTokenizerFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PatternTokenizerFactory_init_(t_PatternTokenizerFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PatternTokenizerFactory_create(t_PatternTokenizerFactory *self, PyObject *args);

          static PyMethodDef t_PatternTokenizerFactory__methods_[] = {
            DECLARE_METHOD(t_PatternTokenizerFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PatternTokenizerFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PatternTokenizerFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PatternTokenizerFactory, t_PatternTokenizerFactory, ::org::apache::lucene::analysis::util::TokenizerFactory, PatternTokenizerFactory, t_PatternTokenizerFactory_init_, 0, 0, 0, 0, 0);

          void t_PatternTokenizerFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(PatternTokenizerFactory), module, "PatternTokenizerFactory", 0);
          }

          void t_PatternTokenizerFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PatternTokenizerFactory).tp_dict, "class_", make_descriptor(PatternTokenizerFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PatternTokenizerFactory).tp_dict, "wrapfn_", make_descriptor(t_PatternTokenizerFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PatternTokenizerFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(PatternTokenizerFactory::initializeClass);
            PyDict_SetItemString(PY_TYPE(PatternTokenizerFactory).tp_dict, "GROUP", make_descriptor(j2p(*PatternTokenizerFactory::GROUP)));
            PyDict_SetItemString(PY_TYPE(PatternTokenizerFactory).tp_dict, "PATTERN", make_descriptor(j2p(*PatternTokenizerFactory::PATTERN)));
          }

          static PyObject *t_PatternTokenizerFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PatternTokenizerFactory::initializeClass, 1)))
              return NULL;
            return t_PatternTokenizerFactory::wrap_Object(PatternTokenizerFactory(((t_PatternTokenizerFactory *) arg)->object.this$));
          }
          static PyObject *t_PatternTokenizerFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PatternTokenizerFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PatternTokenizerFactory_init_(t_PatternTokenizerFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            PatternTokenizerFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = PatternTokenizerFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PatternTokenizerFactory_create(t_PatternTokenizerFactory *self, PyObject *args)
          {
            ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
            ::java::io::Reader a1((jobject) NULL);
            ::org::apache::lucene::analysis::pattern::PatternTokenizer result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.create(a0, a1));
              return ::org::apache::lucene::analysis::pattern::t_PatternTokenizer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(PatternTokenizerFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/highlight/DefaultEncoder.h"
#include "org/apache/lucene/search/highlight/Encoder.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {

          ::java::lang::Class *DefaultEncoder::class$ = NULL;
          jmethodID *DefaultEncoder::mids$ = NULL;
          bool DefaultEncoder::live$ = false;

          jclass DefaultEncoder::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/highlight/DefaultEncoder");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_encodeText_97a5258f] = env->getMethodID(cls, "encodeText", "(Ljava/lang/String;)Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          DefaultEncoder::DefaultEncoder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::java::lang::String DefaultEncoder::encodeText(const ::java::lang::String & a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_encodeText_97a5258f], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {
          static PyObject *t_DefaultEncoder_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DefaultEncoder_instance_(PyTypeObject *type, PyObject *arg);
          static int t_DefaultEncoder_init_(t_DefaultEncoder *self, PyObject *args, PyObject *kwds);
          static PyObject *t_DefaultEncoder_encodeText(t_DefaultEncoder *self, PyObject *arg);

          static PyMethodDef t_DefaultEncoder__methods_[] = {
            DECLARE_METHOD(t_DefaultEncoder, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DefaultEncoder, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DefaultEncoder, encodeText, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(DefaultEncoder, t_DefaultEncoder, ::java::lang::Object, DefaultEncoder, t_DefaultEncoder_init_, 0, 0, 0, 0, 0);

          void t_DefaultEncoder::install(PyObject *module)
          {
            installType(&PY_TYPE(DefaultEncoder), module, "DefaultEncoder", 0);
          }

          void t_DefaultEncoder::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(DefaultEncoder).tp_dict, "class_", make_descriptor(DefaultEncoder::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(DefaultEncoder).tp_dict, "wrapfn_", make_descriptor(t_DefaultEncoder::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(DefaultEncoder).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_DefaultEncoder_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, DefaultEncoder::initializeClass, 1)))
              return NULL;
            return t_DefaultEncoder::wrap_Object(DefaultEncoder(((t_DefaultEncoder *) arg)->object.this$));
          }
          static PyObject *t_DefaultEncoder_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, DefaultEncoder::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_DefaultEncoder_init_(t_DefaultEncoder *self, PyObject *args, PyObject *kwds)
          {
            DefaultEncoder object((jobject) NULL);

            INT_CALL(object = DefaultEncoder());
            self->object = object;

            return 0;
          }

          static PyObject *t_DefaultEncoder_encodeText(t_DefaultEncoder *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.encodeText(a0));
              return j2p(result);
            }

            PyErr_SetArgsError((PyObject *) self, "encodeText", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/hunspell/HunspellStemFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/analysis/hunspell/Dictionary.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace hunspell {

          ::java::lang::Class *HunspellStemFilter::class$ = NULL;
          jmethodID *HunspellStemFilter::mids$ = NULL;
          bool HunspellStemFilter::live$ = false;

          jclass HunspellStemFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/hunspell/HunspellStemFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_05177913] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;Lorg/apache/lucene/analysis/hunspell/Dictionary;)V");
              mids$[mid_init$_d3f3208c] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;Lorg/apache/lucene/analysis/hunspell/Dictionary;Z)V");
              mids$[mid_init$_6c7575a5] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;Lorg/apache/lucene/analysis/hunspell/Dictionary;ZZ)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          HunspellStemFilter::HunspellStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0, const ::org::apache::lucene::analysis::hunspell::Dictionary & a1) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_05177913, a0.this$, a1.this$)) {}

          HunspellStemFilter::HunspellStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0, const ::org::apache::lucene::analysis::hunspell::Dictionary & a1, jboolean a2) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_d3f3208c, a0.this$, a1.this$, a2)) {}

          HunspellStemFilter::HunspellStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0, const ::org::apache::lucene::analysis::hunspell::Dictionary & a1, jboolean a2, jboolean a3) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_6c7575a5, a0.this$, a1.this$, a2, a3)) {}

          jboolean HunspellStemFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void HunspellStemFilter::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace hunspell {
          static PyObject *t_HunspellStemFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_HunspellStemFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_HunspellStemFilter_init_(t_HunspellStemFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_HunspellStemFilter_incrementToken(t_HunspellStemFilter *self, PyObject *args);
          static PyObject *t_HunspellStemFilter_reset(t_HunspellStemFilter *self, PyObject *args);

          static PyMethodDef t_HunspellStemFilter__methods_[] = {
            DECLARE_METHOD(t_HunspellStemFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HunspellStemFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HunspellStemFilter, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_HunspellStemFilter, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(HunspellStemFilter, t_HunspellStemFilter, ::org::apache::lucene::analysis::TokenFilter, HunspellStemFilter, t_HunspellStemFilter_init_, 0, 0, 0, 0, 0);

          void t_HunspellStemFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(HunspellStemFilter), module, "HunspellStemFilter", 0);
          }

          void t_HunspellStemFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(HunspellStemFilter).tp_dict, "class_", make_descriptor(HunspellStemFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(HunspellStemFilter).tp_dict, "wrapfn_", make_descriptor(t_HunspellStemFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(HunspellStemFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_HunspellStemFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, HunspellStemFilter::initializeClass, 1)))
              return NULL;
            return t_HunspellStemFilter::wrap_Object(HunspellStemFilter(((t_HunspellStemFilter *) arg)->object.this$));
          }
          static PyObject *t_HunspellStemFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, HunspellStemFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_HunspellStemFilter_init_(t_HunspellStemFilter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                ::org::apache::lucene::analysis::hunspell::Dictionary a1((jobject) NULL);
                HunspellStemFilter object((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::analysis::hunspell::Dictionary::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = HunspellStemFilter(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                ::org::apache::lucene::analysis::hunspell::Dictionary a1((jobject) NULL);
                jboolean a2;
                HunspellStemFilter object((jobject) NULL);

                if (!parseArgs(args, "kkZ", ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::analysis::hunspell::Dictionary::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = HunspellStemFilter(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 4:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                ::org::apache::lucene::analysis::hunspell::Dictionary a1((jobject) NULL);
                jboolean a2;
                jboolean a3;
                HunspellStemFilter object((jobject) NULL);

                if (!parseArgs(args, "kkZZ", ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::analysis::hunspell::Dictionary::initializeClass, &a0, &a1, &a2, &a3))
                {
                  INT_CALL(object = HunspellStemFilter(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_HunspellStemFilter_incrementToken(t_HunspellStemFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(HunspellStemFilter), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_HunspellStemFilter_reset(t_HunspellStemFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(HunspellStemFilter), (PyObject *) self, "reset", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/sinks/TeeSinkTokenFilter$SinkTokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace sinks {

          ::java::lang::Class *TeeSinkTokenFilter$SinkTokenStream::class$ = NULL;
          jmethodID *TeeSinkTokenFilter$SinkTokenStream::mids$ = NULL;
          bool TeeSinkTokenFilter$SinkTokenStream::live$ = false;

          jclass TeeSinkTokenFilter$SinkTokenStream::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/sinks/TeeSinkTokenFilter$SinkTokenStream");

              mids$ = new jmethodID[max_mid];
              mids$[mid_end_54c6a166] = env->getMethodID(cls, "end", "()V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          void TeeSinkTokenFilter$SinkTokenStream::end() const
          {
            env->callVoidMethod(this$, mids$[mid_end_54c6a166]);
          }

          jboolean TeeSinkTokenFilter$SinkTokenStream::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void TeeSinkTokenFilter$SinkTokenStream::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace sinks {
          static PyObject *t_TeeSinkTokenFilter$SinkTokenStream_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TeeSinkTokenFilter$SinkTokenStream_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TeeSinkTokenFilter$SinkTokenStream_end(t_TeeSinkTokenFilter$SinkTokenStream *self, PyObject *args);
          static PyObject *t_TeeSinkTokenFilter$SinkTokenStream_incrementToken(t_TeeSinkTokenFilter$SinkTokenStream *self, PyObject *args);
          static PyObject *t_TeeSinkTokenFilter$SinkTokenStream_reset(t_TeeSinkTokenFilter$SinkTokenStream *self, PyObject *args);

          static PyMethodDef t_TeeSinkTokenFilter$SinkTokenStream__methods_[] = {
            DECLARE_METHOD(t_TeeSinkTokenFilter$SinkTokenStream, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TeeSinkTokenFilter$SinkTokenStream, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TeeSinkTokenFilter$SinkTokenStream, end, METH_VARARGS),
            DECLARE_METHOD(t_TeeSinkTokenFilter$SinkTokenStream, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_TeeSinkTokenFilter$SinkTokenStream, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(TeeSinkTokenFilter$SinkTokenStream, t_TeeSinkTokenFilter$SinkTokenStream, ::org::apache::lucene::analysis::TokenStream, TeeSinkTokenFilter$SinkTokenStream, abstract_init, 0, 0, 0, 0, 0);

          void t_TeeSinkTokenFilter$SinkTokenStream::install(PyObject *module)
          {
            installType(&PY_TYPE(TeeSinkTokenFilter$SinkTokenStream), module, "TeeSinkTokenFilter$SinkTokenStream", 0);
          }

          void t_TeeSinkTokenFilter$SinkTokenStream::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(TeeSinkTokenFilter$SinkTokenStream).tp_dict, "class_", make_descriptor(TeeSinkTokenFilter$SinkTokenStream::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(TeeSinkTokenFilter$SinkTokenStream).tp_dict, "wrapfn_", make_descriptor(t_TeeSinkTokenFilter$SinkTokenStream::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(TeeSinkTokenFilter$SinkTokenStream).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TeeSinkTokenFilter$SinkTokenStream_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TeeSinkTokenFilter$SinkTokenStream::initializeClass, 1)))
              return NULL;
            return t_TeeSinkTokenFilter$SinkTokenStream::wrap_Object(TeeSinkTokenFilter$SinkTokenStream(((t_TeeSinkTokenFilter$SinkTokenStream *) arg)->object.this$));
          }
          static PyObject *t_TeeSinkTokenFilter$SinkTokenStream_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TeeSinkTokenFilter$SinkTokenStream::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_TeeSinkTokenFilter$SinkTokenStream_end(t_TeeSinkTokenFilter$SinkTokenStream *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.end());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(TeeSinkTokenFilter$SinkTokenStream), (PyObject *) self, "end", args, 2);
          }

          static PyObject *t_TeeSinkTokenFilter$SinkTokenStream_incrementToken(t_TeeSinkTokenFilter$SinkTokenStream *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(TeeSinkTokenFilter$SinkTokenStream), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_TeeSinkTokenFilter$SinkTokenStream_reset(t_TeeSinkTokenFilter$SinkTokenStream *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(TeeSinkTokenFilter$SinkTokenStream), (PyObject *) self, "reset", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/automaton/Operations.h"
#include "org/apache/lucene/util/automaton/Automaton.h"
#include "java/lang/Class.h"
#include "java/util/Collection.h"
#include "java/util/Set.h"
#include "java/util/List.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/util/IntsRef.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {

          ::java::lang::Class *Operations::class$ = NULL;
          jmethodID *Operations::mids$ = NULL;
          bool Operations::live$ = false;

          jclass Operations::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/automaton/Operations");

              mids$ = new jmethodID[max_mid];
              mids$[mid_complement_7aca8e1f] = env->getStaticMethodID(cls, "complement", "(Lorg/apache/lucene/util/automaton/Automaton;)Lorg/apache/lucene/util/automaton/Automaton;");
              mids$[mid_concatenate_3449867a] = env->getStaticMethodID(cls, "concatenate", "(Ljava/util/List;)Lorg/apache/lucene/util/automaton/Automaton;");
              mids$[mid_concatenate_fa852915] = env->getStaticMethodID(cls, "concatenate", "(Lorg/apache/lucene/util/automaton/Automaton;Lorg/apache/lucene/util/automaton/Automaton;)Lorg/apache/lucene/util/automaton/Automaton;");
              mids$[mid_determinize_7aca8e1f] = env->getStaticMethodID(cls, "determinize", "(Lorg/apache/lucene/util/automaton/Automaton;)Lorg/apache/lucene/util/automaton/Automaton;");
              mids$[mid_getCommonPrefix_c2342f4b] = env->getStaticMethodID(cls, "getCommonPrefix", "(Lorg/apache/lucene/util/automaton/Automaton;)Ljava/lang/String;");
              mids$[mid_getCommonPrefixBytesRef_b889220f] = env->getStaticMethodID(cls, "getCommonPrefixBytesRef", "(Lorg/apache/lucene/util/automaton/Automaton;)Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_getCommonSuffixBytesRef_b889220f] = env->getStaticMethodID(cls, "getCommonSuffixBytesRef", "(Lorg/apache/lucene/util/automaton/Automaton;)Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_getFiniteStrings_4e50ce8f] = env->getStaticMethodID(cls, "getFiniteStrings", "(Lorg/apache/lucene/util/automaton/Automaton;I)Ljava/util/Set;");
              mids$[mid_hasDeadStates_fc7cf398] = env->getStaticMethodID(cls, "hasDeadStates", "(Lorg/apache/lucene/util/automaton/Automaton;)Z");
              mids$[mid_hasDeadStatesFromInitial_fc7cf398] = env->getStaticMethodID(cls, "hasDeadStatesFromInitial", "(Lorg/apache/lucene/util/automaton/Automaton;)Z");
              mids$[mid_hasDeadStatesToAccept_fc7cf398] = env->getStaticMethodID(cls, "hasDeadStatesToAccept", "(Lorg/apache/lucene/util/automaton/Automaton;)Z");
              mids$[mid_intersection_fa852915] = env->getStaticMethodID(cls, "intersection", "(Lorg/apache/lucene/util/automaton/Automaton;Lorg/apache/lucene/util/automaton/Automaton;)Lorg/apache/lucene/util/automaton/Automaton;");
              mids$[mid_isEmpty_fc7cf398] = env->getStaticMethodID(cls, "isEmpty", "(Lorg/apache/lucene/util/automaton/Automaton;)Z");
              mids$[mid_isFinite_fc7cf398] = env->getStaticMethodID(cls, "isFinite", "(Lorg/apache/lucene/util/automaton/Automaton;)Z");
              mids$[mid_isTotal_fc7cf398] = env->getStaticMethodID(cls, "isTotal", "(Lorg/apache/lucene/util/automaton/Automaton;)Z");
              mids$[mid_minus_fa852915] = env->getStaticMethodID(cls, "minus", "(Lorg/apache/lucene/util/automaton/Automaton;Lorg/apache/lucene/util/automaton/Automaton;)Lorg/apache/lucene/util/automaton/Automaton;");
              mids$[mid_optional_7aca8e1f] = env->getStaticMethodID(cls, "optional", "(Lorg/apache/lucene/util/automaton/Automaton;)Lorg/apache/lucene/util/automaton/Automaton;");
              mids$[mid_removeDeadStates_7aca8e1f] = env->getStaticMethodID(cls, "removeDeadStates", "(Lorg/apache/lucene/util/automaton/Automaton;)Lorg/apache/lucene/util/automaton/Automaton;");
              mids$[mid_repeat_7aca8e1f] = env->getStaticMethodID(cls, "repeat", "(Lorg/apache/lucene/util/automaton/Automaton;)Lorg/apache/lucene/util/automaton/Automaton;");
              mids$[mid_repeat_df52766d] = env->getStaticMethodID(cls, "repeat", "(Lorg/apache/lucene/util/automaton/Automaton;I)Lorg/apache/lucene/util/automaton/Automaton;");
              mids$[mid_repeat_6e1cfc6f] = env->getStaticMethodID(cls, "repeat", "(Lorg/apache/lucene/util/automaton/Automaton;II)Lorg/apache/lucene/util/automaton/Automaton;");
              mids$[mid_reverse_7aca8e1f] = env->getStaticMethodID(cls, "reverse", "(Lorg/apache/lucene/util/automaton/Automaton;)Lorg/apache/lucene/util/automaton/Automaton;");
              mids$[mid_run_7b2da936] = env->getStaticMethodID(cls, "run", "(Lorg/apache/lucene/util/automaton/Automaton;Lorg/apache/lucene/util/IntsRef;)Z");
              mids$[mid_run_b3a03722] = env->getStaticMethodID(cls, "run", "(Lorg/apache/lucene/util/automaton/Automaton;Ljava/lang/String;)Z");
              mids$[mid_sameLanguage_7d21690e] = env->getStaticMethodID(cls, "sameLanguage", "(Lorg/apache/lucene/util/automaton/Automaton;Lorg/apache/lucene/util/automaton/Automaton;)Z");
              mids$[mid_subsetOf_7d21690e] = env->getStaticMethodID(cls, "subsetOf", "(Lorg/apache/lucene/util/automaton/Automaton;Lorg/apache/lucene/util/automaton/Automaton;)Z");
              mids$[mid_union_40d33194] = env->getStaticMethodID(cls, "union", "(Ljava/util/Collection;)Lorg/apache/lucene/util/automaton/Automaton;");
              mids$[mid_union_fa852915] = env->getStaticMethodID(cls, "union", "(Lorg/apache/lucene/util/automaton/Automaton;Lorg/apache/lucene/util/automaton/Automaton;)Lorg/apache/lucene/util/automaton/Automaton;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::org::apache::lucene::util::automaton::Automaton Operations::complement(const ::org::apache::lucene::util::automaton::Automaton & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::automaton::Automaton(env->callStaticObjectMethod(cls, mids$[mid_complement_7aca8e1f], a0.this$));
          }

          ::org::apache::lucene::util::automaton::Automaton Operations::concatenate(const ::java::util::List & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::automaton::Automaton(env->callStaticObjectMethod(cls, mids$[mid_concatenate_3449867a], a0.this$));
          }

          ::org::apache::lucene::util::automaton::Automaton Operations::concatenate(const ::org::apache::lucene::util::automaton::Automaton & a0, const ::org::apache::lucene::util::automaton::Automaton & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::automaton::Automaton(env->callStaticObjectMethod(cls, mids$[mid_concatenate_fa852915], a0.this$, a1.this$));
          }

          ::org::apache::lucene::util::automaton::Automaton Operations::determinize(const ::org::apache::lucene::util::automaton::Automaton & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::automaton::Automaton(env->callStaticObjectMethod(cls, mids$[mid_determinize_7aca8e1f], a0.this$));
          }

          ::java::lang::String Operations::getCommonPrefix(const ::org::apache::lucene::util::automaton::Automaton & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_getCommonPrefix_c2342f4b], a0.this$));
          }

          ::org::apache::lucene::util::BytesRef Operations::getCommonPrefixBytesRef(const ::org::apache::lucene::util::automaton::Automaton & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::BytesRef(env->callStaticObjectMethod(cls, mids$[mid_getCommonPrefixBytesRef_b889220f], a0.this$));
          }

          ::org::apache::lucene::util::BytesRef Operations::getCommonSuffixBytesRef(const ::org::apache::lucene::util::automaton::Automaton & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::BytesRef(env->callStaticObjectMethod(cls, mids$[mid_getCommonSuffixBytesRef_b889220f], a0.this$));
          }

          ::java::util::Set Operations::getFiniteStrings(const ::org::apache::lucene::util::automaton::Automaton & a0, jint a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::java::util::Set(env->callStaticObjectMethod(cls, mids$[mid_getFiniteStrings_4e50ce8f], a0.this$, a1));
          }

          jboolean Operations::hasDeadStates(const ::org::apache::lucene::util::automaton::Automaton & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticBooleanMethod(cls, mids$[mid_hasDeadStates_fc7cf398], a0.this$);
          }

          jboolean Operations::hasDeadStatesFromInitial(const ::org::apache::lucene::util::automaton::Automaton & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticBooleanMethod(cls, mids$[mid_hasDeadStatesFromInitial_fc7cf398], a0.this$);
          }

          jboolean Operations::hasDeadStatesToAccept(const ::org::apache::lucene::util::automaton::Automaton & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticBooleanMethod(cls, mids$[mid_hasDeadStatesToAccept_fc7cf398], a0.this$);
          }

          ::org::apache::lucene::util::automaton::Automaton Operations::intersection(const ::org::apache::lucene::util::automaton::Automaton & a0, const ::org::apache::lucene::util::automaton::Automaton & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::automaton::Automaton(env->callStaticObjectMethod(cls, mids$[mid_intersection_fa852915], a0.this$, a1.this$));
          }

          jboolean Operations::isEmpty(const ::org::apache::lucene::util::automaton::Automaton & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticBooleanMethod(cls, mids$[mid_isEmpty_fc7cf398], a0.this$);
          }

          jboolean Operations::isFinite(const ::org::apache::lucene::util::automaton::Automaton & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticBooleanMethod(cls, mids$[mid_isFinite_fc7cf398], a0.this$);
          }

          jboolean Operations::isTotal(const ::org::apache::lucene::util::automaton::Automaton & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticBooleanMethod(cls, mids$[mid_isTotal_fc7cf398], a0.this$);
          }

          ::org::apache::lucene::util::automaton::Automaton Operations::minus(const ::org::apache::lucene::util::automaton::Automaton & a0, const ::org::apache::lucene::util::automaton::Automaton & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::automaton::Automaton(env->callStaticObjectMethod(cls, mids$[mid_minus_fa852915], a0.this$, a1.this$));
          }

          ::org::apache::lucene::util::automaton::Automaton Operations::optional(const ::org::apache::lucene::util::automaton::Automaton & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::automaton::Automaton(env->callStaticObjectMethod(cls, mids$[mid_optional_7aca8e1f], a0.this$));
          }

          ::org::apache::lucene::util::automaton::Automaton Operations::removeDeadStates(const ::org::apache::lucene::util::automaton::Automaton & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::automaton::Automaton(env->callStaticObjectMethod(cls, mids$[mid_removeDeadStates_7aca8e1f], a0.this$));
          }

          ::org::apache::lucene::util::automaton::Automaton Operations::repeat(const ::org::apache::lucene::util::automaton::Automaton & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::automaton::Automaton(env->callStaticObjectMethod(cls, mids$[mid_repeat_7aca8e1f], a0.this$));
          }

          ::org::apache::lucene::util::automaton::Automaton Operations::repeat(const ::org::apache::lucene::util::automaton::Automaton & a0, jint a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::automaton::Automaton(env->callStaticObjectMethod(cls, mids$[mid_repeat_df52766d], a0.this$, a1));
          }

          ::org::apache::lucene::util::automaton::Automaton Operations::repeat(const ::org::apache::lucene::util::automaton::Automaton & a0, jint a1, jint a2)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::automaton::Automaton(env->callStaticObjectMethod(cls, mids$[mid_repeat_6e1cfc6f], a0.this$, a1, a2));
          }

          ::org::apache::lucene::util::automaton::Automaton Operations::reverse(const ::org::apache::lucene::util::automaton::Automaton & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::automaton::Automaton(env->callStaticObjectMethod(cls, mids$[mid_reverse_7aca8e1f], a0.this$));
          }

          jboolean Operations::run(const ::org::apache::lucene::util::automaton::Automaton & a0, const ::org::apache::lucene::util::IntsRef & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticBooleanMethod(cls, mids$[mid_run_7b2da936], a0.this$, a1.this$);
          }

          jboolean Operations::run(const ::org::apache::lucene::util::automaton::Automaton & a0, const ::java::lang::String & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticBooleanMethod(cls, mids$[mid_run_b3a03722], a0.this$, a1.this$);
          }

          jboolean Operations::sameLanguage(const ::org::apache::lucene::util::automaton::Automaton & a0, const ::org::apache::lucene::util::automaton::Automaton & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticBooleanMethod(cls, mids$[mid_sameLanguage_7d21690e], a0.this$, a1.this$);
          }

          jboolean Operations::subsetOf(const ::org::apache::lucene::util::automaton::Automaton & a0, const ::org::apache::lucene::util::automaton::Automaton & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticBooleanMethod(cls, mids$[mid_subsetOf_7d21690e], a0.this$, a1.this$);
          }

          ::org::apache::lucene::util::automaton::Automaton Operations::union$(const ::java::util::Collection & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::automaton::Automaton(env->callStaticObjectMethod(cls, mids$[mid_union_40d33194], a0.this$));
          }

          ::org::apache::lucene::util::automaton::Automaton Operations::union$(const ::org::apache::lucene::util::automaton::Automaton & a0, const ::org::apache::lucene::util::automaton::Automaton & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::automaton::Automaton(env->callStaticObjectMethod(cls, mids$[mid_union_fa852915], a0.this$, a1.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {
          static PyObject *t_Operations_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Operations_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Operations_complement(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Operations_concatenate(PyTypeObject *type, PyObject *args);
          static PyObject *t_Operations_determinize(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Operations_getCommonPrefix(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Operations_getCommonPrefixBytesRef(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Operations_getCommonSuffixBytesRef(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Operations_getFiniteStrings(PyTypeObject *type, PyObject *args);
          static PyObject *t_Operations_hasDeadStates(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Operations_hasDeadStatesFromInitial(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Operations_hasDeadStatesToAccept(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Operations_intersection(PyTypeObject *type, PyObject *args);
          static PyObject *t_Operations_isEmpty(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Operations_isFinite(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Operations_isTotal(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Operations_minus(PyTypeObject *type, PyObject *args);
          static PyObject *t_Operations_optional(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Operations_removeDeadStates(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Operations_repeat(PyTypeObject *type, PyObject *args);
          static PyObject *t_Operations_reverse(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Operations_run(PyTypeObject *type, PyObject *args);
          static PyObject *t_Operations_sameLanguage(PyTypeObject *type, PyObject *args);
          static PyObject *t_Operations_subsetOf(PyTypeObject *type, PyObject *args);
          static PyObject *t_Operations_union(PyTypeObject *type, PyObject *args);

          static PyMethodDef t_Operations__methods_[] = {
            DECLARE_METHOD(t_Operations, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Operations, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Operations, complement, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Operations, concatenate, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_Operations, determinize, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Operations, getCommonPrefix, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Operations, getCommonPrefixBytesRef, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Operations, getCommonSuffixBytesRef, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Operations, getFiniteStrings, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_Operations, hasDeadStates, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Operations, hasDeadStatesFromInitial, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Operations, hasDeadStatesToAccept, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Operations, intersection, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_Operations, isEmpty, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Operations, isFinite, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Operations, isTotal, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Operations, minus, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_Operations, optional, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Operations, removeDeadStates, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Operations, repeat, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_Operations, reverse, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Operations, run, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_Operations, sameLanguage, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_Operations, subsetOf, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_Operations, union, METH_VARARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Operations, t_Operations, ::java::lang::Object, Operations, abstract_init, 0, 0, 0, 0, 0);

          void t_Operations::install(PyObject *module)
          {
            installType(&PY_TYPE(Operations), module, "Operations", 0);
          }

          void t_Operations::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Operations).tp_dict, "class_", make_descriptor(Operations::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Operations).tp_dict, "wrapfn_", make_descriptor(t_Operations::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Operations).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Operations_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Operations::initializeClass, 1)))
              return NULL;
            return t_Operations::wrap_Object(Operations(((t_Operations *) arg)->object.this$));
          }
          static PyObject *t_Operations_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Operations::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_Operations_complement(PyTypeObject *type, PyObject *arg)
          {
            ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
            ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::automaton::Operations::complement(a0));
              return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "complement", arg);
            return NULL;
          }

          static PyObject *t_Operations_concatenate(PyTypeObject *type, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::java::util::List a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);

                if (!parseArgs(args, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
                {
                  OBJ_CALL(result = ::org::apache::lucene::util::automaton::Operations::concatenate(a0));
                  return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
                }
              }
              break;
             case 2:
              {
                ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
                ::org::apache::lucene::util::automaton::Automaton a1((jobject) NULL);
                ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::util::automaton::Automaton::initializeClass, ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(result = ::org::apache::lucene::util::automaton::Operations::concatenate(a0, a1));
                  return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError(type, "concatenate", args);
            return NULL;
          }

          static PyObject *t_Operations_determinize(PyTypeObject *type, PyObject *arg)
          {
            ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
            ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::automaton::Operations::determinize(a0));
              return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "determinize", arg);
            return NULL;
          }

          static PyObject *t_Operations_getCommonPrefix(PyTypeObject *type, PyObject *arg)
          {
            ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::automaton::Operations::getCommonPrefix(a0));
              return j2p(result);
            }

            PyErr_SetArgsError(type, "getCommonPrefix", arg);
            return NULL;
          }

          static PyObject *t_Operations_getCommonPrefixBytesRef(PyTypeObject *type, PyObject *arg)
          {
            ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::automaton::Operations::getCommonPrefixBytesRef(a0));
              return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "getCommonPrefixBytesRef", arg);
            return NULL;
          }

          static PyObject *t_Operations_getCommonSuffixBytesRef(PyTypeObject *type, PyObject *arg)
          {
            ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::automaton::Operations::getCommonSuffixBytesRef(a0));
              return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "getCommonSuffixBytesRef", arg);
            return NULL;
          }

          static PyObject *t_Operations_getFiniteStrings(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
            jint a1;
            ::java::util::Set result((jobject) NULL);

            if (!parseArgs(args, "kI", ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::automaton::Operations::getFiniteStrings(a0, a1));
              return ::java::util::t_Set::wrap_Object(result, &::org::apache::lucene::util::PY_TYPE(IntsRef));
            }

            PyErr_SetArgsError(type, "getFiniteStrings", args);
            return NULL;
          }

          static PyObject *t_Operations_hasDeadStates(PyTypeObject *type, PyObject *arg)
          {
            ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
            jboolean result;

            if (!parseArg(arg, "k", ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::automaton::Operations::hasDeadStates(a0));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError(type, "hasDeadStates", arg);
            return NULL;
          }

          static PyObject *t_Operations_hasDeadStatesFromInitial(PyTypeObject *type, PyObject *arg)
          {
            ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
            jboolean result;

            if (!parseArg(arg, "k", ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::automaton::Operations::hasDeadStatesFromInitial(a0));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError(type, "hasDeadStatesFromInitial", arg);
            return NULL;
          }

          static PyObject *t_Operations_hasDeadStatesToAccept(PyTypeObject *type, PyObject *arg)
          {
            ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
            jboolean result;

            if (!parseArg(arg, "k", ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::automaton::Operations::hasDeadStatesToAccept(a0));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError(type, "hasDeadStatesToAccept", arg);
            return NULL;
          }

          static PyObject *t_Operations_intersection(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
            ::org::apache::lucene::util::automaton::Automaton a1((jobject) NULL);
            ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::automaton::Automaton::initializeClass, ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::automaton::Operations::intersection(a0, a1));
              return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "intersection", args);
            return NULL;
          }

          static PyObject *t_Operations_isEmpty(PyTypeObject *type, PyObject *arg)
          {
            ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
            jboolean result;

            if (!parseArg(arg, "k", ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::automaton::Operations::isEmpty(a0));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError(type, "isEmpty", arg);
            return NULL;
          }

          static PyObject *t_Operations_isFinite(PyTypeObject *type, PyObject *arg)
          {
            ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
            jboolean result;

            if (!parseArg(arg, "k", ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::automaton::Operations::isFinite(a0));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError(type, "isFinite", arg);
            return NULL;
          }

          static PyObject *t_Operations_isTotal(PyTypeObject *type, PyObject *arg)
          {
            ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
            jboolean result;

            if (!parseArg(arg, "k", ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::automaton::Operations::isTotal(a0));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError(type, "isTotal", arg);
            return NULL;
          }

          static PyObject *t_Operations_minus(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
            ::org::apache::lucene::util::automaton::Automaton a1((jobject) NULL);
            ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::automaton::Automaton::initializeClass, ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::automaton::Operations::minus(a0, a1));
              return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "minus", args);
            return NULL;
          }

          static PyObject *t_Operations_optional(PyTypeObject *type, PyObject *arg)
          {
            ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
            ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::automaton::Operations::optional(a0));
              return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "optional", arg);
            return NULL;
          }

          static PyObject *t_Operations_removeDeadStates(PyTypeObject *type, PyObject *arg)
          {
            ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
            ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::automaton::Operations::removeDeadStates(a0));
              return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "removeDeadStates", arg);
            return NULL;
          }

          static PyObject *t_Operations_repeat(PyTypeObject *type, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
                ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0))
                {
                  OBJ_CALL(result = ::org::apache::lucene::util::automaton::Operations::repeat(a0));
                  return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
                }
              }
              break;
             case 2:
              {
                ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
                jint a1;
                ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);

                if (!parseArgs(args, "kI", ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(result = ::org::apache::lucene::util::automaton::Operations::repeat(a0, a1));
                  return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
                }
              }
              break;
             case 3:
              {
                ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
                jint a1;
                jint a2;
                ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);

                if (!parseArgs(args, "kII", ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0, &a1, &a2))
                {
                  OBJ_CALL(result = ::org::apache::lucene::util::automaton::Operations::repeat(a0, a1, a2));
                  return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError(type, "repeat", args);
            return NULL;
          }

          static PyObject *t_Operations_reverse(PyTypeObject *type, PyObject *arg)
          {
            ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
            ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::automaton::Operations::reverse(a0));
              return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "reverse", arg);
            return NULL;
          }

          static PyObject *t_Operations_run(PyTypeObject *type, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
                ::org::apache::lucene::util::IntsRef a1((jobject) NULL);
                jboolean result;

                if (!parseArgs(args, "kk", ::org::apache::lucene::util::automaton::Automaton::initializeClass, ::org::apache::lucene::util::IntsRef::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(result = ::org::apache::lucene::util::automaton::Operations::run(a0, a1));
                  Py_RETURN_BOOL(result);
                }
              }
              {
                ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                jboolean result;

                if (!parseArgs(args, "ks", ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(result = ::org::apache::lucene::util::automaton::Operations::run(a0, a1));
                  Py_RETURN_BOOL(result);
                }
              }
            }

            PyErr_SetArgsError(type, "run", args);
            return NULL;
          }

          static PyObject *t_Operations_sameLanguage(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
            ::org::apache::lucene::util::automaton::Automaton a1((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::automaton::Automaton::initializeClass, ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::automaton::Operations::sameLanguage(a0, a1));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError(type, "sameLanguage", args);
            return NULL;
          }

          static PyObject *t_Operations_subsetOf(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
            ::org::apache::lucene::util::automaton::Automaton a1((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::automaton::Automaton::initializeClass, ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::automaton::Operations::subsetOf(a0, a1));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError(type, "subsetOf", args);
            return NULL;
          }

          static PyObject *t_Operations_union(PyTypeObject *type, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::java::util::Collection a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);

                if (!parseArgs(args, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
                {
                  OBJ_CALL(result = ::org::apache::lucene::util::automaton::Operations::union$(a0));
                  return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
                }
              }
              break;
             case 2:
              {
                ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
                ::org::apache::lucene::util::automaton::Automaton a1((jobject) NULL);
                ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::util::automaton::Automaton::initializeClass, ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(result = ::org::apache::lucene::util::automaton::Operations::union$(a0, a1));
                  return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError(type, "union", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/FSDirectory.h"
#include "org/apache/lucene/store/IndexOutput.h"
#include "java/lang/Class.h"
#include "java/util/Collection.h"
#include "org/apache/lucene/store/IOContext.h"
#include "java/io/File.h"
#include "org/apache/lucene/store/LockFactory.h"
#include "java/io/IOException.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *FSDirectory::class$ = NULL;
        jmethodID *FSDirectory::mids$ = NULL;
        bool FSDirectory::live$ = false;
        jint FSDirectory::DEFAULT_READ_CHUNK_SIZE = (jint) 0;

        jclass FSDirectory::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/FSDirectory");

            mids$ = new jmethodID[max_mid];
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_createOutput_5ad5358d] = env->getMethodID(cls, "createOutput", "(Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/store/IndexOutput;");
            mids$[mid_deleteFile_5fdc3f48] = env->getMethodID(cls, "deleteFile", "(Ljava/lang/String;)V");
            mids$[mid_fileExists_5fdc3f44] = env->getMethodID(cls, "fileExists", "(Ljava/lang/String;)Z");
            mids$[mid_fileLength_5fdc3f54] = env->getMethodID(cls, "fileLength", "(Ljava/lang/String;)J");
            mids$[mid_getDirectory_a8eb7bbe] = env->getMethodID(cls, "getDirectory", "()Ljava/io/File;");
            mids$[mid_getLockID_14c7b5c5] = env->getMethodID(cls, "getLockID", "()Ljava/lang/String;");
            mids$[mid_getReadChunkSize_54c6a179] = env->getMethodID(cls, "getReadChunkSize", "()I");
            mids$[mid_listAll_2e6d5245] = env->getMethodID(cls, "listAll", "()[Ljava/lang/String;");
            mids$[mid_listAll_10b06d64] = env->getStaticMethodID(cls, "listAll", "(Ljava/io/File;)[Ljava/lang/String;");
            mids$[mid_open_89cf4235] = env->getStaticMethodID(cls, "open", "(Ljava/io/File;)Lorg/apache/lucene/store/FSDirectory;");
            mids$[mid_open_588132c1] = env->getStaticMethodID(cls, "open", "(Ljava/io/File;Lorg/apache/lucene/store/LockFactory;)Lorg/apache/lucene/store/FSDirectory;");
            mids$[mid_setLockFactory_9892eb8c] = env->getMethodID(cls, "setLockFactory", "(Lorg/apache/lucene/store/LockFactory;)V");
            mids$[mid_setReadChunkSize_39c7bd3c] = env->getMethodID(cls, "setReadChunkSize", "(I)V");
            mids$[mid_sync_9bfb370d] = env->getMethodID(cls, "sync", "(Ljava/util/Collection;)V");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
            mids$[mid_ensureCanWrite_5fdc3f48] = env->getMethodID(cls, "ensureCanWrite", "(Ljava/lang/String;)V");
            mids$[mid_onIndexOutputClosed_5fdc3f48] = env->getMethodID(cls, "onIndexOutputClosed", "(Ljava/lang/String;)V");
            mids$[mid_fsync_5fdc3f48] = env->getMethodID(cls, "fsync", "(Ljava/lang/String;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            DEFAULT_READ_CHUNK_SIZE = env->getStaticIntField(cls, "DEFAULT_READ_CHUNK_SIZE");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void FSDirectory::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        ::org::apache::lucene::store::IndexOutput FSDirectory::createOutput(const ::java::lang::String & a0, const ::org::apache::lucene::store::IOContext & a1) const
        {
          return ::org::apache::lucene::store::IndexOutput(env->callObjectMethod(this$, mids$[mid_createOutput_5ad5358d], a0.this$, a1.this$));
        }

        void FSDirectory::deleteFile(const ::java::lang::String & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_deleteFile_5fdc3f48], a0.this$);
        }

        jboolean FSDirectory::fileExists(const ::java::lang::String & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_fileExists_5fdc3f44], a0.this$);
        }

        jlong FSDirectory::fileLength(const ::java::lang::String & a0) const
        {
          return env->callLongMethod(this$, mids$[mid_fileLength_5fdc3f54], a0.this$);
        }

        ::java::io::File FSDirectory::getDirectory() const
        {
          return ::java::io::File(env->callObjectMethod(this$, mids$[mid_getDirectory_a8eb7bbe]));
        }

        ::java::lang::String FSDirectory::getLockID() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getLockID_14c7b5c5]));
        }

        jint FSDirectory::getReadChunkSize() const
        {
          return env->callIntMethod(this$, mids$[mid_getReadChunkSize_54c6a179]);
        }

        JArray< ::java::lang::String > FSDirectory::listAll() const
        {
          return JArray< ::java::lang::String >(env->callObjectMethod(this$, mids$[mid_listAll_2e6d5245]));
        }

        JArray< ::java::lang::String > FSDirectory::listAll(const ::java::io::File & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< ::java::lang::String >(env->callStaticObjectMethod(cls, mids$[mid_listAll_10b06d64], a0.this$));
        }

        FSDirectory FSDirectory::open(const ::java::io::File & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return FSDirectory(env->callStaticObjectMethod(cls, mids$[mid_open_89cf4235], a0.this$));
        }

        FSDirectory FSDirectory::open(const ::java::io::File & a0, const ::org::apache::lucene::store::LockFactory & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return FSDirectory(env->callStaticObjectMethod(cls, mids$[mid_open_588132c1], a0.this$, a1.this$));
        }

        void FSDirectory::setLockFactory(const ::org::apache::lucene::store::LockFactory & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setLockFactory_9892eb8c], a0.this$);
        }

        void FSDirectory::setReadChunkSize(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setReadChunkSize_39c7bd3c], a0);
        }

        void FSDirectory::sync(const ::java::util::Collection & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_sync_9bfb370d], a0.this$);
        }

        ::java::lang::String FSDirectory::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_FSDirectory_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FSDirectory_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FSDirectory_close(t_FSDirectory *self, PyObject *args);
        static PyObject *t_FSDirectory_createOutput(t_FSDirectory *self, PyObject *args);
        static PyObject *t_FSDirectory_deleteFile(t_FSDirectory *self, PyObject *args);
        static PyObject *t_FSDirectory_fileExists(t_FSDirectory *self, PyObject *args);
        static PyObject *t_FSDirectory_fileLength(t_FSDirectory *self, PyObject *args);
        static PyObject *t_FSDirectory_getDirectory(t_FSDirectory *self);
        static PyObject *t_FSDirectory_getLockID(t_FSDirectory *self, PyObject *args);
        static PyObject *t_FSDirectory_getReadChunkSize(t_FSDirectory *self);
        static PyObject *t_FSDirectory_listAll(t_FSDirectory *self, PyObject *args);
        static PyObject *t_FSDirectory_listAll_(PyTypeObject *type, PyObject *args);
        static PyObject *t_FSDirectory_open(PyTypeObject *type, PyObject *args);
        static PyObject *t_FSDirectory_setLockFactory(t_FSDirectory *self, PyObject *args);
        static PyObject *t_FSDirectory_setReadChunkSize(t_FSDirectory *self, PyObject *arg);
        static PyObject *t_FSDirectory_sync(t_FSDirectory *self, PyObject *args);
        static PyObject *t_FSDirectory_toString(t_FSDirectory *self, PyObject *args);
        static PyObject *t_FSDirectory_get__directory(t_FSDirectory *self, void *data);
        static int t_FSDirectory_set__lockFactory(t_FSDirectory *self, PyObject *arg, void *data);
        static PyObject *t_FSDirectory_get__lockID(t_FSDirectory *self, void *data);
        static PyObject *t_FSDirectory_get__readChunkSize(t_FSDirectory *self, void *data);
        static int t_FSDirectory_set__readChunkSize(t_FSDirectory *self, PyObject *arg, void *data);
        static PyGetSetDef t_FSDirectory__fields_[] = {
          DECLARE_GET_FIELD(t_FSDirectory, directory),
          DECLARE_SET_FIELD(t_FSDirectory, lockFactory),
          DECLARE_GET_FIELD(t_FSDirectory, lockID),
          DECLARE_GETSET_FIELD(t_FSDirectory, readChunkSize),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FSDirectory__methods_[] = {
          DECLARE_METHOD(t_FSDirectory, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FSDirectory, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FSDirectory, close, METH_VARARGS),
          DECLARE_METHOD(t_FSDirectory, createOutput, METH_VARARGS),
          DECLARE_METHOD(t_FSDirectory, deleteFile, METH_VARARGS),
          DECLARE_METHOD(t_FSDirectory, fileExists, METH_VARARGS),
          DECLARE_METHOD(t_FSDirectory, fileLength, METH_VARARGS),
          DECLARE_METHOD(t_FSDirectory, getDirectory, METH_NOARGS),
          DECLARE_METHOD(t_FSDirectory, getLockID, METH_VARARGS),
          DECLARE_METHOD(t_FSDirectory, getReadChunkSize, METH_NOARGS),
          DECLARE_METHOD(t_FSDirectory, listAll, METH_VARARGS),
          DECLARE_METHOD(t_FSDirectory, listAll_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FSDirectory, open, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_FSDirectory, setLockFactory, METH_VARARGS),
          DECLARE_METHOD(t_FSDirectory, setReadChunkSize, METH_O),
          DECLARE_METHOD(t_FSDirectory, sync, METH_VARARGS),
          DECLARE_METHOD(t_FSDirectory, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FSDirectory, t_FSDirectory, ::org::apache::lucene::store::BaseDirectory, FSDirectory, abstract_init, 0, 0, t_FSDirectory__fields_, 0, 0);

        void t_FSDirectory::install(PyObject *module)
        {
          installType(&PY_TYPE(FSDirectory), module, "FSDirectory", 0);
        }

        void t_FSDirectory::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FSDirectory).tp_dict, "class_", make_descriptor(FSDirectory::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FSDirectory).tp_dict, "wrapfn_", make_descriptor(t_FSDirectory::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FSDirectory).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(FSDirectory::initializeClass);
          PyDict_SetItemString(PY_TYPE(FSDirectory).tp_dict, "DEFAULT_READ_CHUNK_SIZE", make_descriptor(FSDirectory::DEFAULT_READ_CHUNK_SIZE));
        }

        static PyObject *t_FSDirectory_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FSDirectory::initializeClass, 1)))
            return NULL;
          return t_FSDirectory::wrap_Object(FSDirectory(((t_FSDirectory *) arg)->object.this$));
        }
        static PyObject *t_FSDirectory_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FSDirectory::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FSDirectory_close(t_FSDirectory *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.close());
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FSDirectory), (PyObject *) self, "close", args, 2);
        }

        static PyObject *t_FSDirectory_createOutput(t_FSDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::store::IOContext a1((jobject) NULL);
          ::org::apache::lucene::store::IndexOutput result((jobject) NULL);

          if (!parseArgs(args, "sk", ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.createOutput(a0, a1));
            return ::org::apache::lucene::store::t_IndexOutput::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FSDirectory), (PyObject *) self, "createOutput", args, 2);
        }

        static PyObject *t_FSDirectory_deleteFile(t_FSDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(self->object.deleteFile(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FSDirectory), (PyObject *) self, "deleteFile", args, 2);
        }

        static PyObject *t_FSDirectory_fileExists(t_FSDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.fileExists(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(FSDirectory), (PyObject *) self, "fileExists", args, 2);
        }

        static PyObject *t_FSDirectory_fileLength(t_FSDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          jlong result;

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.fileLength(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(FSDirectory), (PyObject *) self, "fileLength", args, 2);
        }

        static PyObject *t_FSDirectory_getDirectory(t_FSDirectory *self)
        {
          ::java::io::File result((jobject) NULL);
          OBJ_CALL(result = self->object.getDirectory());
          return ::java::io::t_File::wrap_Object(result);
        }

        static PyObject *t_FSDirectory_getLockID(t_FSDirectory *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getLockID());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(FSDirectory), (PyObject *) self, "getLockID", args, 2);
        }

        static PyObject *t_FSDirectory_getReadChunkSize(t_FSDirectory *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getReadChunkSize());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_FSDirectory_listAll(t_FSDirectory *self, PyObject *args)
        {
          JArray< ::java::lang::String > result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.listAll());
            return JArray<jstring>(result.this$).wrap();
          }

          return callSuper(&PY_TYPE(FSDirectory), (PyObject *) self, "listAll", args, 2);
        }

        static PyObject *t_FSDirectory_listAll_(PyTypeObject *type, PyObject *args)
        {
          ::java::io::File a0((jobject) NULL);
          JArray< ::java::lang::String > result((jobject) NULL);

          if (!parseArgs(args, "k", ::java::io::File::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::store::FSDirectory::listAll(a0));
            return JArray<jstring>(result.this$).wrap();
          }

          PyErr_SetArgsError(type, "listAll_", args);
          return NULL;
        }

        static PyObject *t_FSDirectory_open(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::io::File a0((jobject) NULL);
              FSDirectory result((jobject) NULL);

              if (!parseArgs(args, "k", ::java::io::File::initializeClass, &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::store::FSDirectory::open(a0));
                return t_FSDirectory::wrap_Object(result);
              }
            }
            break;
           case 2:
            {
              ::java::io::File a0((jobject) NULL);
              ::org::apache::lucene::store::LockFactory a1((jobject) NULL);
              FSDirectory result((jobject) NULL);

              if (!parseArgs(args, "kk", ::java::io::File::initializeClass, ::org::apache::lucene::store::LockFactory::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::store::FSDirectory::open(a0, a1));
                return t_FSDirectory::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError(type, "open", args);
          return NULL;
        }

        static PyObject *t_FSDirectory_setLockFactory(t_FSDirectory *self, PyObject *args)
        {
          ::org::apache::lucene::store::LockFactory a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::store::LockFactory::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setLockFactory(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FSDirectory), (PyObject *) self, "setLockFactory", args, 2);
        }

        static PyObject *t_FSDirectory_setReadChunkSize(t_FSDirectory *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.setReadChunkSize(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setReadChunkSize", arg);
          return NULL;
        }

        static PyObject *t_FSDirectory_sync(t_FSDirectory *self, PyObject *args)
        {
          ::java::util::Collection a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArgs(args, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
          {
            OBJ_CALL(self->object.sync(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FSDirectory), (PyObject *) self, "sync", args, 2);
        }

        static PyObject *t_FSDirectory_toString(t_FSDirectory *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(FSDirectory), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_FSDirectory_get__directory(t_FSDirectory *self, void *data)
        {
          ::java::io::File value((jobject) NULL);
          OBJ_CALL(value = self->object.getDirectory());
          return ::java::io::t_File::wrap_Object(value);
        }

        static int t_FSDirectory_set__lockFactory(t_FSDirectory *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::store::LockFactory value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::store::LockFactory::initializeClass, &value))
            {
              INT_CALL(self->object.setLockFactory(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "lockFactory", arg);
          return -1;
        }

        static PyObject *t_FSDirectory_get__lockID(t_FSDirectory *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object.getLockID());
          return j2p(value);
        }

        static PyObject *t_FSDirectory_get__readChunkSize(t_FSDirectory *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getReadChunkSize());
          return PyInt_FromLong((long) value);
        }
        static int t_FSDirectory_set__readChunkSize(t_FSDirectory *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setReadChunkSize(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "readChunkSize", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/fr/FrenchMinimalStemFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fr {

          ::java::lang::Class *FrenchMinimalStemFilter::class$ = NULL;
          jmethodID *FrenchMinimalStemFilter::mids$ = NULL;
          bool FrenchMinimalStemFilter::live$ = false;

          jclass FrenchMinimalStemFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/fr/FrenchMinimalStemFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FrenchMinimalStemFilter::FrenchMinimalStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean FrenchMinimalStemFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fr {
          static PyObject *t_FrenchMinimalStemFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FrenchMinimalStemFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FrenchMinimalStemFilter_init_(t_FrenchMinimalStemFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FrenchMinimalStemFilter_incrementToken(t_FrenchMinimalStemFilter *self, PyObject *args);

          static PyMethodDef t_FrenchMinimalStemFilter__methods_[] = {
            DECLARE_METHOD(t_FrenchMinimalStemFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FrenchMinimalStemFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FrenchMinimalStemFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FrenchMinimalStemFilter, t_FrenchMinimalStemFilter, ::org::apache::lucene::analysis::TokenFilter, FrenchMinimalStemFilter, t_FrenchMinimalStemFilter_init_, 0, 0, 0, 0, 0);

          void t_FrenchMinimalStemFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(FrenchMinimalStemFilter), module, "FrenchMinimalStemFilter", 0);
          }

          void t_FrenchMinimalStemFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FrenchMinimalStemFilter).tp_dict, "class_", make_descriptor(FrenchMinimalStemFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FrenchMinimalStemFilter).tp_dict, "wrapfn_", make_descriptor(t_FrenchMinimalStemFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FrenchMinimalStemFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FrenchMinimalStemFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FrenchMinimalStemFilter::initializeClass, 1)))
              return NULL;
            return t_FrenchMinimalStemFilter::wrap_Object(FrenchMinimalStemFilter(((t_FrenchMinimalStemFilter *) arg)->object.this$));
          }
          static PyObject *t_FrenchMinimalStemFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FrenchMinimalStemFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FrenchMinimalStemFilter_init_(t_FrenchMinimalStemFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            FrenchMinimalStemFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = FrenchMinimalStemFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_FrenchMinimalStemFilter_incrementToken(t_FrenchMinimalStemFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(FrenchMinimalStemFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ckb/SoraniNormalizationFilterFactory.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/analysis/util/MultiTermAwareComponent.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/util/AbstractAnalysisFactory.h"
#include "org/apache/lucene/analysis/ckb/SoraniNormalizationFilter.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ckb {

          ::java::lang::Class *SoraniNormalizationFilterFactory::class$ = NULL;
          jmethodID *SoraniNormalizationFilterFactory::mids$ = NULL;
          bool SoraniNormalizationFilterFactory::live$ = false;

          jclass SoraniNormalizationFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ckb/SoraniNormalizationFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_3fe7ed52] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/ckb/SoraniNormalizationFilter;");
              mids$[mid_getMultiTermComponent_0a3f1d72] = env->getMethodID(cls, "getMultiTermComponent", "()Lorg/apache/lucene/analysis/util/AbstractAnalysisFactory;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SoraniNormalizationFilterFactory::SoraniNormalizationFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::ckb::SoraniNormalizationFilter SoraniNormalizationFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::ckb::SoraniNormalizationFilter(env->callObjectMethod(this$, mids$[mid_create_3fe7ed52], a0.this$));
          }

          ::org::apache::lucene::analysis::util::AbstractAnalysisFactory SoraniNormalizationFilterFactory::getMultiTermComponent() const
          {
            return ::org::apache::lucene::analysis::util::AbstractAnalysisFactory(env->callObjectMethod(this$, mids$[mid_getMultiTermComponent_0a3f1d72]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ckb {
          static PyObject *t_SoraniNormalizationFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SoraniNormalizationFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SoraniNormalizationFilterFactory_init_(t_SoraniNormalizationFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SoraniNormalizationFilterFactory_create(t_SoraniNormalizationFilterFactory *self, PyObject *args);
          static PyObject *t_SoraniNormalizationFilterFactory_getMultiTermComponent(t_SoraniNormalizationFilterFactory *self);
          static PyObject *t_SoraniNormalizationFilterFactory_get__multiTermComponent(t_SoraniNormalizationFilterFactory *self, void *data);
          static PyGetSetDef t_SoraniNormalizationFilterFactory__fields_[] = {
            DECLARE_GET_FIELD(t_SoraniNormalizationFilterFactory, multiTermComponent),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SoraniNormalizationFilterFactory__methods_[] = {
            DECLARE_METHOD(t_SoraniNormalizationFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SoraniNormalizationFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SoraniNormalizationFilterFactory, create, METH_VARARGS),
            DECLARE_METHOD(t_SoraniNormalizationFilterFactory, getMultiTermComponent, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SoraniNormalizationFilterFactory, t_SoraniNormalizationFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, SoraniNormalizationFilterFactory, t_SoraniNormalizationFilterFactory_init_, 0, 0, t_SoraniNormalizationFilterFactory__fields_, 0, 0);

          void t_SoraniNormalizationFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(SoraniNormalizationFilterFactory), module, "SoraniNormalizationFilterFactory", 0);
          }

          void t_SoraniNormalizationFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SoraniNormalizationFilterFactory).tp_dict, "class_", make_descriptor(SoraniNormalizationFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SoraniNormalizationFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_SoraniNormalizationFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SoraniNormalizationFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SoraniNormalizationFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SoraniNormalizationFilterFactory::initializeClass, 1)))
              return NULL;
            return t_SoraniNormalizationFilterFactory::wrap_Object(SoraniNormalizationFilterFactory(((t_SoraniNormalizationFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_SoraniNormalizationFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SoraniNormalizationFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SoraniNormalizationFilterFactory_init_(t_SoraniNormalizationFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            SoraniNormalizationFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = SoraniNormalizationFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SoraniNormalizationFilterFactory_create(t_SoraniNormalizationFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::ckb::SoraniNormalizationFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::ckb::t_SoraniNormalizationFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(SoraniNormalizationFilterFactory), (PyObject *) self, "create", args, 2);
          }

          static PyObject *t_SoraniNormalizationFilterFactory_getMultiTermComponent(t_SoraniNormalizationFilterFactory *self)
          {
            ::org::apache::lucene::analysis::util::AbstractAnalysisFactory result((jobject) NULL);
            OBJ_CALL(result = self->object.getMultiTermComponent());
            return ::org::apache::lucene::analysis::util::t_AbstractAnalysisFactory::wrap_Object(result);
          }

          static PyObject *t_SoraniNormalizationFilterFactory_get__multiTermComponent(t_SoraniNormalizationFilterFactory *self, void *data)
          {
            ::org::apache::lucene::analysis::util::AbstractAnalysisFactory value((jobject) NULL);
            OBJ_CALL(value = self->object.getMultiTermComponent());
            return ::org::apache::lucene::analysis::util::t_AbstractAnalysisFactory::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/OrdinalsReader.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/facet/taxonomy/OrdinalsReader$OrdinalsSegmentReader.h"
#include "java/io/IOException.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {

          ::java::lang::Class *OrdinalsReader::class$ = NULL;
          jmethodID *OrdinalsReader::mids$ = NULL;
          bool OrdinalsReader::live$ = false;

          jclass OrdinalsReader::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/OrdinalsReader");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_getIndexFieldName_14c7b5c5] = env->getMethodID(cls, "getIndexFieldName", "()Ljava/lang/String;");
              mids$[mid_getReader_7c7f912a] = env->getMethodID(cls, "getReader", "(Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/facet/taxonomy/OrdinalsReader$OrdinalsSegmentReader;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          OrdinalsReader::OrdinalsReader() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::java::lang::String OrdinalsReader::getIndexFieldName() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getIndexFieldName_14c7b5c5]));
          }

          ::org::apache::lucene::facet::taxonomy::OrdinalsReader$OrdinalsSegmentReader OrdinalsReader::getReader(const ::org::apache::lucene::index::AtomicReaderContext & a0) const
          {
            return ::org::apache::lucene::facet::taxonomy::OrdinalsReader$OrdinalsSegmentReader(env->callObjectMethod(this$, mids$[mid_getReader_7c7f912a], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          static PyObject *t_OrdinalsReader_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_OrdinalsReader_instance_(PyTypeObject *type, PyObject *arg);
          static int t_OrdinalsReader_init_(t_OrdinalsReader *self, PyObject *args, PyObject *kwds);
          static PyObject *t_OrdinalsReader_getIndexFieldName(t_OrdinalsReader *self);
          static PyObject *t_OrdinalsReader_getReader(t_OrdinalsReader *self, PyObject *arg);
          static PyObject *t_OrdinalsReader_get__indexFieldName(t_OrdinalsReader *self, void *data);
          static PyGetSetDef t_OrdinalsReader__fields_[] = {
            DECLARE_GET_FIELD(t_OrdinalsReader, indexFieldName),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_OrdinalsReader__methods_[] = {
            DECLARE_METHOD(t_OrdinalsReader, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_OrdinalsReader, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_OrdinalsReader, getIndexFieldName, METH_NOARGS),
            DECLARE_METHOD(t_OrdinalsReader, getReader, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(OrdinalsReader, t_OrdinalsReader, ::java::lang::Object, OrdinalsReader, t_OrdinalsReader_init_, 0, 0, t_OrdinalsReader__fields_, 0, 0);

          void t_OrdinalsReader::install(PyObject *module)
          {
            installType(&PY_TYPE(OrdinalsReader), module, "OrdinalsReader", 0);
            PyDict_SetItemString(PY_TYPE(OrdinalsReader).tp_dict, "OrdinalsSegmentReader", make_descriptor(&PY_TYPE(OrdinalsReader$OrdinalsSegmentReader)));
          }

          void t_OrdinalsReader::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(OrdinalsReader).tp_dict, "class_", make_descriptor(OrdinalsReader::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(OrdinalsReader).tp_dict, "wrapfn_", make_descriptor(t_OrdinalsReader::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(OrdinalsReader).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_OrdinalsReader_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, OrdinalsReader::initializeClass, 1)))
              return NULL;
            return t_OrdinalsReader::wrap_Object(OrdinalsReader(((t_OrdinalsReader *) arg)->object.this$));
          }
          static PyObject *t_OrdinalsReader_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, OrdinalsReader::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_OrdinalsReader_init_(t_OrdinalsReader *self, PyObject *args, PyObject *kwds)
          {
            OrdinalsReader object((jobject) NULL);

            INT_CALL(object = OrdinalsReader());
            self->object = object;

            return 0;
          }

          static PyObject *t_OrdinalsReader_getIndexFieldName(t_OrdinalsReader *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.getIndexFieldName());
            return j2p(result);
          }

          static PyObject *t_OrdinalsReader_getReader(t_OrdinalsReader *self, PyObject *arg)
          {
            ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
            ::org::apache::lucene::facet::taxonomy::OrdinalsReader$OrdinalsSegmentReader result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.getReader(a0));
              return ::org::apache::lucene::facet::taxonomy::t_OrdinalsReader$OrdinalsSegmentReader::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getReader", arg);
            return NULL;
          }

          static PyObject *t_OrdinalsReader_get__indexFieldName(t_OrdinalsReader *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getIndexFieldName());
            return j2p(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/config/StandardQueryConfigHandler.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace config {

              ::java::lang::Class *StandardQueryConfigHandler::class$ = NULL;
              jmethodID *StandardQueryConfigHandler::mids$ = NULL;
              bool StandardQueryConfigHandler::live$ = false;

              jclass StandardQueryConfigHandler::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/config/StandardQueryConfigHandler");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              StandardQueryConfigHandler::StandardQueryConfigHandler() : ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/queryparser/flexible/standard/config/StandardQueryConfigHandler$Operator.h"
#include "org/apache/lucene/queryparser/flexible/standard/config/StandardQueryConfigHandler$ConfigurationKeys.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace config {
              static PyObject *t_StandardQueryConfigHandler_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_StandardQueryConfigHandler_instance_(PyTypeObject *type, PyObject *arg);
              static int t_StandardQueryConfigHandler_init_(t_StandardQueryConfigHandler *self, PyObject *args, PyObject *kwds);

              static PyMethodDef t_StandardQueryConfigHandler__methods_[] = {
                DECLARE_METHOD(t_StandardQueryConfigHandler, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_StandardQueryConfigHandler, instance_, METH_O | METH_CLASS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(StandardQueryConfigHandler, t_StandardQueryConfigHandler, ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler, StandardQueryConfigHandler, t_StandardQueryConfigHandler_init_, 0, 0, 0, 0, 0);

              void t_StandardQueryConfigHandler::install(PyObject *module)
              {
                installType(&PY_TYPE(StandardQueryConfigHandler), module, "StandardQueryConfigHandler", 0);
                PyDict_SetItemString(PY_TYPE(StandardQueryConfigHandler).tp_dict, "Operator", make_descriptor(&PY_TYPE(StandardQueryConfigHandler$Operator)));
                PyDict_SetItemString(PY_TYPE(StandardQueryConfigHandler).tp_dict, "ConfigurationKeys", make_descriptor(&PY_TYPE(StandardQueryConfigHandler$ConfigurationKeys)));
              }

              void t_StandardQueryConfigHandler::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(StandardQueryConfigHandler).tp_dict, "class_", make_descriptor(StandardQueryConfigHandler::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(StandardQueryConfigHandler).tp_dict, "wrapfn_", make_descriptor(t_StandardQueryConfigHandler::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(StandardQueryConfigHandler).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_StandardQueryConfigHandler_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, StandardQueryConfigHandler::initializeClass, 1)))
                  return NULL;
                return t_StandardQueryConfigHandler::wrap_Object(StandardQueryConfigHandler(((t_StandardQueryConfigHandler *) arg)->object.this$));
              }
              static PyObject *t_StandardQueryConfigHandler_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, StandardQueryConfigHandler::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_StandardQueryConfigHandler_init_(t_StandardQueryConfigHandler *self, PyObject *args, PyObject *kwds)
              {
                StandardQueryConfigHandler object((jobject) NULL);

                INT_CALL(object = StandardQueryConfigHandler());
                self->object = object;

                return 0;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/TermQuery.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "org/apache/lucene/index/Term.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "java/util/Set.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/index/TermContext.h"
#include "org/apache/lucene/search/Weight.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *TermQuery::class$ = NULL;
        jmethodID *TermQuery::mids$ = NULL;
        bool TermQuery::live$ = false;

        jclass TermQuery::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/TermQuery");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_7eca6a81] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/Term;)V");
            mids$[mid_init$_ec3f6ef2] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/Term;Lorg/apache/lucene/index/TermContext;)V");
            mids$[mid_init$_05555589] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/Term;I)V");
            mids$[mid_createWeight_367763cb] = env->getMethodID(cls, "createWeight", "(Lorg/apache/lucene/search/IndexSearcher;)Lorg/apache/lucene/search/Weight;");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_extractTerms_fb4f2b26] = env->getMethodID(cls, "extractTerms", "(Ljava/util/Set;)V");
            mids$[mid_getTerm_0f71f314] = env->getMethodID(cls, "getTerm", "()Lorg/apache/lucene/index/Term;");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_toString_97a5258f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        TermQuery::TermQuery(const ::org::apache::lucene::index::Term & a0) : ::org::apache::lucene::search::Query(env->newObject(initializeClass, &mids$, mid_init$_7eca6a81, a0.this$)) {}

        TermQuery::TermQuery(const ::org::apache::lucene::index::Term & a0, const ::org::apache::lucene::index::TermContext & a1) : ::org::apache::lucene::search::Query(env->newObject(initializeClass, &mids$, mid_init$_ec3f6ef2, a0.this$, a1.this$)) {}

        TermQuery::TermQuery(const ::org::apache::lucene::index::Term & a0, jint a1) : ::org::apache::lucene::search::Query(env->newObject(initializeClass, &mids$, mid_init$_05555589, a0.this$, a1)) {}

        ::org::apache::lucene::search::Weight TermQuery::createWeight(const ::org::apache::lucene::search::IndexSearcher & a0) const
        {
          return ::org::apache::lucene::search::Weight(env->callObjectMethod(this$, mids$[mid_createWeight_367763cb], a0.this$));
        }

        jboolean TermQuery::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        void TermQuery::extractTerms(const ::java::util::Set & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_extractTerms_fb4f2b26], a0.this$);
        }

        ::org::apache::lucene::index::Term TermQuery::getTerm() const
        {
          return ::org::apache::lucene::index::Term(env->callObjectMethod(this$, mids$[mid_getTerm_0f71f314]));
        }

        jint TermQuery::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        ::java::lang::String TermQuery::toString(const ::java::lang::String & a0) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_97a5258f], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_TermQuery_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TermQuery_instance_(PyTypeObject *type, PyObject *arg);
        static int t_TermQuery_init_(t_TermQuery *self, PyObject *args, PyObject *kwds);
        static PyObject *t_TermQuery_createWeight(t_TermQuery *self, PyObject *args);
        static PyObject *t_TermQuery_equals(t_TermQuery *self, PyObject *args);
        static PyObject *t_TermQuery_extractTerms(t_TermQuery *self, PyObject *args);
        static PyObject *t_TermQuery_getTerm(t_TermQuery *self);
        static PyObject *t_TermQuery_hashCode(t_TermQuery *self, PyObject *args);
        static PyObject *t_TermQuery_toString(t_TermQuery *self, PyObject *args);
        static PyObject *t_TermQuery_get__term(t_TermQuery *self, void *data);
        static PyGetSetDef t_TermQuery__fields_[] = {
          DECLARE_GET_FIELD(t_TermQuery, term),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_TermQuery__methods_[] = {
          DECLARE_METHOD(t_TermQuery, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TermQuery, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TermQuery, createWeight, METH_VARARGS),
          DECLARE_METHOD(t_TermQuery, equals, METH_VARARGS),
          DECLARE_METHOD(t_TermQuery, extractTerms, METH_VARARGS),
          DECLARE_METHOD(t_TermQuery, getTerm, METH_NOARGS),
          DECLARE_METHOD(t_TermQuery, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_TermQuery, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TermQuery, t_TermQuery, ::org::apache::lucene::search::Query, TermQuery, t_TermQuery_init_, 0, 0, t_TermQuery__fields_, 0, 0);

        void t_TermQuery::install(PyObject *module)
        {
          installType(&PY_TYPE(TermQuery), module, "TermQuery", 0);
        }

        void t_TermQuery::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TermQuery).tp_dict, "class_", make_descriptor(TermQuery::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TermQuery).tp_dict, "wrapfn_", make_descriptor(t_TermQuery::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TermQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TermQuery_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TermQuery::initializeClass, 1)))
            return NULL;
          return t_TermQuery::wrap_Object(TermQuery(((t_TermQuery *) arg)->object.this$));
        }
        static PyObject *t_TermQuery_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TermQuery::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_TermQuery_init_(t_TermQuery *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::index::Term a0((jobject) NULL);
              TermQuery object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::index::Term::initializeClass, &a0))
              {
                INT_CALL(object = TermQuery(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              ::org::apache::lucene::index::Term a0((jobject) NULL);
              ::org::apache::lucene::index::TermContext a1((jobject) NULL);
              TermQuery object((jobject) NULL);

              if (!parseArgs(args, "kk", ::org::apache::lucene::index::Term::initializeClass, ::org::apache::lucene::index::TermContext::initializeClass, &a0, &a1))
              {
                INT_CALL(object = TermQuery(a0, a1));
                self->object = object;
                break;
              }
            }
            {
              ::org::apache::lucene::index::Term a0((jobject) NULL);
              jint a1;
              TermQuery object((jobject) NULL);

              if (!parseArgs(args, "kI", ::org::apache::lucene::index::Term::initializeClass, &a0, &a1))
              {
                INT_CALL(object = TermQuery(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_TermQuery_createWeight(t_TermQuery *self, PyObject *args)
        {
          ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
          ::org::apache::lucene::search::Weight result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.createWeight(a0));
            return ::org::apache::lucene::search::t_Weight::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(TermQuery), (PyObject *) self, "createWeight", args, 2);
        }

        static PyObject *t_TermQuery_equals(t_TermQuery *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(TermQuery), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_TermQuery_extractTerms(t_TermQuery *self, PyObject *args)
        {
          ::java::util::Set a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArgs(args, "K", ::java::util::Set::initializeClass, &a0, &p0, ::java::util::t_Set::parameters_))
          {
            OBJ_CALL(self->object.extractTerms(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(TermQuery), (PyObject *) self, "extractTerms", args, 2);
        }

        static PyObject *t_TermQuery_getTerm(t_TermQuery *self)
        {
          ::org::apache::lucene::index::Term result((jobject) NULL);
          OBJ_CALL(result = self->object.getTerm());
          return ::org::apache::lucene::index::t_Term::wrap_Object(result);
        }

        static PyObject *t_TermQuery_hashCode(t_TermQuery *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(TermQuery), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_TermQuery_toString(t_TermQuery *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.toString(a0));
            return j2p(result);
          }

          return callSuper(&PY_TYPE(TermQuery), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_TermQuery_get__term(t_TermQuery *self, void *data)
        {
          ::org::apache::lucene::index::Term value((jobject) NULL);
          OBJ_CALL(value = self->object.getTerm());
          return ::org::apache::lucene::index::t_Term::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/KeepWordFilter.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *KeepWordFilter::class$ = NULL;
          jmethodID *KeepWordFilter::mids$ = NULL;
          bool KeepWordFilter::live$ = false;

          jclass KeepWordFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/KeepWordFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_64fb9de3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_e67dd59e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/TokenStream;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_c97b7f85] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;ZLorg/apache/lucene/analysis/TokenStream;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_accept_54c6a16a] = env->getMethodID(cls, "accept", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          KeepWordFilter::KeepWordFilter(const ::org::apache::lucene::analysis::TokenStream & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::util::FilteringTokenFilter(env->newObject(initializeClass, &mids$, mid_init$_64fb9de3, a0.this$, a1.this$)) {}

          KeepWordFilter::KeepWordFilter(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::TokenStream & a1, const ::org::apache::lucene::analysis::util::CharArraySet & a2) : ::org::apache::lucene::analysis::util::FilteringTokenFilter(env->newObject(initializeClass, &mids$, mid_init$_e67dd59e, a0.this$, a1.this$, a2.this$)) {}

          KeepWordFilter::KeepWordFilter(const ::org::apache::lucene::util::Version & a0, jboolean a1, const ::org::apache::lucene::analysis::TokenStream & a2, const ::org::apache::lucene::analysis::util::CharArraySet & a3) : ::org::apache::lucene::analysis::util::FilteringTokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c97b7f85, a0.this$, a1, a2.this$, a3.this$)) {}

          jboolean KeepWordFilter::accept() const
          {
            return env->callBooleanMethod(this$, mids$[mid_accept_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_KeepWordFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_KeepWordFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_KeepWordFilter_init_(t_KeepWordFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_KeepWordFilter_accept(t_KeepWordFilter *self);

          static PyMethodDef t_KeepWordFilter__methods_[] = {
            DECLARE_METHOD(t_KeepWordFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_KeepWordFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_KeepWordFilter, accept, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(KeepWordFilter, t_KeepWordFilter, ::org::apache::lucene::analysis::util::FilteringTokenFilter, KeepWordFilter, t_KeepWordFilter_init_, 0, 0, 0, 0, 0);

          void t_KeepWordFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(KeepWordFilter), module, "KeepWordFilter", 0);
          }

          void t_KeepWordFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(KeepWordFilter).tp_dict, "class_", make_descriptor(KeepWordFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(KeepWordFilter).tp_dict, "wrapfn_", make_descriptor(t_KeepWordFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(KeepWordFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_KeepWordFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, KeepWordFilter::initializeClass, 1)))
              return NULL;
            return t_KeepWordFilter::wrap_Object(KeepWordFilter(((t_KeepWordFilter *) arg)->object.this$));
          }
          static PyObject *t_KeepWordFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, KeepWordFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_KeepWordFilter_init_(t_KeepWordFilter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                KeepWordFilter object((jobject) NULL);

                if (!parseArgs(args, "kK", ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = KeepWordFilter(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
                ::org::apache::lucene::analysis::util::CharArraySet a2((jobject) NULL);
                PyTypeObject **p2;
                KeepWordFilter object((jobject) NULL);

                if (!parseArgs(args, "kkK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &a1, &a2, &p2, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = KeepWordFilter(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 4:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                jboolean a1;
                ::org::apache::lucene::analysis::TokenStream a2((jobject) NULL);
                ::org::apache::lucene::analysis::util::CharArraySet a3((jobject) NULL);
                PyTypeObject **p3;
                KeepWordFilter object((jobject) NULL);

                if (!parseArgs(args, "kZkK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &a1, &a2, &a3, &p3, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = KeepWordFilter(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_KeepWordFilter_accept(t_KeepWordFilter *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.accept());
            Py_RETURN_BOOL(result);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/analyzing/SuggestStopFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace analyzing {

            ::java::lang::Class *SuggestStopFilter::class$ = NULL;
            jmethodID *SuggestStopFilter::mids$ = NULL;
            bool SuggestStopFilter::live$ = false;

            jclass SuggestStopFilter::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/analyzing/SuggestStopFilter");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_64fb9de3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
                mids$[mid_end_54c6a166] = env->getMethodID(cls, "end", "()V");
                mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
                mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            SuggestStopFilter::SuggestStopFilter(const ::org::apache::lucene::analysis::TokenStream & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_64fb9de3, a0.this$, a1.this$)) {}

            void SuggestStopFilter::end() const
            {
              env->callVoidMethod(this$, mids$[mid_end_54c6a166]);
            }

            jboolean SuggestStopFilter::incrementToken() const
            {
              return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
            }

            void SuggestStopFilter::reset() const
            {
              env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace analyzing {
            static PyObject *t_SuggestStopFilter_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_SuggestStopFilter_instance_(PyTypeObject *type, PyObject *arg);
            static int t_SuggestStopFilter_init_(t_SuggestStopFilter *self, PyObject *args, PyObject *kwds);
            static PyObject *t_SuggestStopFilter_end(t_SuggestStopFilter *self, PyObject *args);
            static PyObject *t_SuggestStopFilter_incrementToken(t_SuggestStopFilter *self, PyObject *args);
            static PyObject *t_SuggestStopFilter_reset(t_SuggestStopFilter *self, PyObject *args);

            static PyMethodDef t_SuggestStopFilter__methods_[] = {
              DECLARE_METHOD(t_SuggestStopFilter, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SuggestStopFilter, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SuggestStopFilter, end, METH_VARARGS),
              DECLARE_METHOD(t_SuggestStopFilter, incrementToken, METH_VARARGS),
              DECLARE_METHOD(t_SuggestStopFilter, reset, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(SuggestStopFilter, t_SuggestStopFilter, ::org::apache::lucene::analysis::TokenFilter, SuggestStopFilter, t_SuggestStopFilter_init_, 0, 0, 0, 0, 0);

            void t_SuggestStopFilter::install(PyObject *module)
            {
              installType(&PY_TYPE(SuggestStopFilter), module, "SuggestStopFilter", 0);
            }

            void t_SuggestStopFilter::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(SuggestStopFilter).tp_dict, "class_", make_descriptor(SuggestStopFilter::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(SuggestStopFilter).tp_dict, "wrapfn_", make_descriptor(t_SuggestStopFilter::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(SuggestStopFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_SuggestStopFilter_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, SuggestStopFilter::initializeClass, 1)))
                return NULL;
              return t_SuggestStopFilter::wrap_Object(SuggestStopFilter(((t_SuggestStopFilter *) arg)->object.this$));
            }
            static PyObject *t_SuggestStopFilter_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, SuggestStopFilter::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_SuggestStopFilter_init_(t_SuggestStopFilter *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
              ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
              PyTypeObject **p1;
              SuggestStopFilter object((jobject) NULL);

              if (!parseArgs(args, "kK", ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
              {
                INT_CALL(object = SuggestStopFilter(a0, a1));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_SuggestStopFilter_end(t_SuggestStopFilter *self, PyObject *args)
            {

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(self->object.end());
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(SuggestStopFilter), (PyObject *) self, "end", args, 2);
            }

            static PyObject *t_SuggestStopFilter_incrementToken(t_SuggestStopFilter *self, PyObject *args)
            {
              jboolean result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.incrementToken());
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(SuggestStopFilter), (PyObject *) self, "incrementToken", args, 2);
            }

            static PyObject *t_SuggestStopFilter_reset(t_SuggestStopFilter *self, PyObject *args)
            {

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(self->object.reset());
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(SuggestStopFilter), (PyObject *) self, "reset", args, 2);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/postingshighlight/WholeBreakIterator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace postingshighlight {

          ::java::lang::Class *WholeBreakIterator::class$ = NULL;
          jmethodID *WholeBreakIterator::mids$ = NULL;
          bool WholeBreakIterator::live$ = false;

          jclass WholeBreakIterator::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/postingshighlight/WholeBreakIterator");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_current_54c6a179] = env->getMethodID(cls, "current", "()I");
              mids$[mid_first_54c6a179] = env->getMethodID(cls, "first", "()I");
              mids$[mid_following_39c7bd23] = env->getMethodID(cls, "following", "(I)I");
              mids$[mid_last_54c6a179] = env->getMethodID(cls, "last", "()I");
              mids$[mid_next_54c6a179] = env->getMethodID(cls, "next", "()I");
              mids$[mid_next_39c7bd23] = env->getMethodID(cls, "next", "(I)I");
              mids$[mid_preceding_39c7bd23] = env->getMethodID(cls, "preceding", "(I)I");
              mids$[mid_previous_54c6a179] = env->getMethodID(cls, "previous", "()I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          WholeBreakIterator::WholeBreakIterator() : ::java::text::BreakIterator(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint WholeBreakIterator::current() const
          {
            return env->callIntMethod(this$, mids$[mid_current_54c6a179]);
          }

          jint WholeBreakIterator::first() const
          {
            return env->callIntMethod(this$, mids$[mid_first_54c6a179]);
          }

          jint WholeBreakIterator::following(jint a0) const
          {
            return env->callIntMethod(this$, mids$[mid_following_39c7bd23], a0);
          }

          jint WholeBreakIterator::last() const
          {
            return env->callIntMethod(this$, mids$[mid_last_54c6a179]);
          }

          jint WholeBreakIterator::next() const
          {
            return env->callIntMethod(this$, mids$[mid_next_54c6a179]);
          }

          jint WholeBreakIterator::next(jint a0) const
          {
            return env->callIntMethod(this$, mids$[mid_next_39c7bd23], a0);
          }

          jint WholeBreakIterator::preceding(jint a0) const
          {
            return env->callIntMethod(this$, mids$[mid_preceding_39c7bd23], a0);
          }

          jint WholeBreakIterator::previous() const
          {
            return env->callIntMethod(this$, mids$[mid_previous_54c6a179]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace postingshighlight {
          static PyObject *t_WholeBreakIterator_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_WholeBreakIterator_instance_(PyTypeObject *type, PyObject *arg);
          static int t_WholeBreakIterator_init_(t_WholeBreakIterator *self, PyObject *args, PyObject *kwds);
          static PyObject *t_WholeBreakIterator_current(t_WholeBreakIterator *self, PyObject *args);
          static PyObject *t_WholeBreakIterator_first(t_WholeBreakIterator *self, PyObject *args);
          static PyObject *t_WholeBreakIterator_following(t_WholeBreakIterator *self, PyObject *args);
          static PyObject *t_WholeBreakIterator_last(t_WholeBreakIterator *self, PyObject *args);
          static PyObject *t_WholeBreakIterator_next(t_WholeBreakIterator *self, PyObject *args);
          static PyObject *t_WholeBreakIterator_preceding(t_WholeBreakIterator *self, PyObject *args);
          static PyObject *t_WholeBreakIterator_previous(t_WholeBreakIterator *self, PyObject *args);

          static PyMethodDef t_WholeBreakIterator__methods_[] = {
            DECLARE_METHOD(t_WholeBreakIterator, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_WholeBreakIterator, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_WholeBreakIterator, current, METH_VARARGS),
            DECLARE_METHOD(t_WholeBreakIterator, first, METH_VARARGS),
            DECLARE_METHOD(t_WholeBreakIterator, following, METH_VARARGS),
            DECLARE_METHOD(t_WholeBreakIterator, last, METH_VARARGS),
            DECLARE_METHOD(t_WholeBreakIterator, next, METH_VARARGS),
            DECLARE_METHOD(t_WholeBreakIterator, preceding, METH_VARARGS),
            DECLARE_METHOD(t_WholeBreakIterator, previous, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(WholeBreakIterator, t_WholeBreakIterator, ::java::text::BreakIterator, WholeBreakIterator, t_WholeBreakIterator_init_, 0, 0, 0, 0, 0);

          void t_WholeBreakIterator::install(PyObject *module)
          {
            installType(&PY_TYPE(WholeBreakIterator), module, "WholeBreakIterator", 0);
          }

          void t_WholeBreakIterator::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(WholeBreakIterator).tp_dict, "class_", make_descriptor(WholeBreakIterator::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(WholeBreakIterator).tp_dict, "wrapfn_", make_descriptor(t_WholeBreakIterator::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(WholeBreakIterator).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_WholeBreakIterator_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, WholeBreakIterator::initializeClass, 1)))
              return NULL;
            return t_WholeBreakIterator::wrap_Object(WholeBreakIterator(((t_WholeBreakIterator *) arg)->object.this$));
          }
          static PyObject *t_WholeBreakIterator_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, WholeBreakIterator::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_WholeBreakIterator_init_(t_WholeBreakIterator *self, PyObject *args, PyObject *kwds)
          {
            WholeBreakIterator object((jobject) NULL);

            INT_CALL(object = WholeBreakIterator());
            self->object = object;

            return 0;
          }

          static PyObject *t_WholeBreakIterator_current(t_WholeBreakIterator *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.current());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(WholeBreakIterator), (PyObject *) self, "current", args, 2);
          }

          static PyObject *t_WholeBreakIterator_first(t_WholeBreakIterator *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.first());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(WholeBreakIterator), (PyObject *) self, "first", args, 2);
          }

          static PyObject *t_WholeBreakIterator_following(t_WholeBreakIterator *self, PyObject *args)
          {
            jint a0;
            jint result;

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(result = self->object.following(a0));
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(WholeBreakIterator), (PyObject *) self, "following", args, 2);
          }

          static PyObject *t_WholeBreakIterator_last(t_WholeBreakIterator *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.last());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(WholeBreakIterator), (PyObject *) self, "last", args, 2);
          }

          static PyObject *t_WholeBreakIterator_next(t_WholeBreakIterator *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                jint result;
                OBJ_CALL(result = self->object.next());
                return PyInt_FromLong((long) result);
              }
              break;
             case 1:
              {
                jint a0;
                jint result;

                if (!parseArgs(args, "I", &a0))
                {
                  OBJ_CALL(result = self->object.next(a0));
                  return PyInt_FromLong((long) result);
                }
              }
            }

            return callSuper(&PY_TYPE(WholeBreakIterator), (PyObject *) self, "next", args, 2);
          }

          static PyObject *t_WholeBreakIterator_preceding(t_WholeBreakIterator *self, PyObject *args)
          {
            jint a0;
            jint result;

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(result = self->object.preceding(a0));
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(WholeBreakIterator), (PyObject *) self, "preceding", args, 2);
          }

          static PyObject *t_WholeBreakIterator_previous(t_WholeBreakIterator *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.previous());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(WholeBreakIterator), (PyObject *) self, "previous", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene46/Lucene46SegmentInfoFormat.h"
#include "org/apache/lucene/codecs/SegmentInfoWriter.h"
#include "java/lang/String.h"
#include "org/apache/lucene/codecs/SegmentInfoReader.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene46 {

          ::java::lang::Class *Lucene46SegmentInfoFormat::class$ = NULL;
          jmethodID *Lucene46SegmentInfoFormat::mids$ = NULL;
          bool Lucene46SegmentInfoFormat::live$ = false;
          ::java::lang::String *Lucene46SegmentInfoFormat::SI_EXTENSION = NULL;

          jclass Lucene46SegmentInfoFormat::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene46/Lucene46SegmentInfoFormat");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_getSegmentInfoReader_1e88b6e7] = env->getMethodID(cls, "getSegmentInfoReader", "()Lorg/apache/lucene/codecs/SegmentInfoReader;");
              mids$[mid_getSegmentInfoWriter_2d4ab533] = env->getMethodID(cls, "getSegmentInfoWriter", "()Lorg/apache/lucene/codecs/SegmentInfoWriter;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              SI_EXTENSION = new ::java::lang::String(env->getStaticObjectField(cls, "SI_EXTENSION", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene46SegmentInfoFormat::Lucene46SegmentInfoFormat() : ::org::apache::lucene::codecs::SegmentInfoFormat(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::codecs::SegmentInfoReader Lucene46SegmentInfoFormat::getSegmentInfoReader() const
          {
            return ::org::apache::lucene::codecs::SegmentInfoReader(env->callObjectMethod(this$, mids$[mid_getSegmentInfoReader_1e88b6e7]));
          }

          ::org::apache::lucene::codecs::SegmentInfoWriter Lucene46SegmentInfoFormat::getSegmentInfoWriter() const
          {
            return ::org::apache::lucene::codecs::SegmentInfoWriter(env->callObjectMethod(this$, mids$[mid_getSegmentInfoWriter_2d4ab533]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene46 {
          static PyObject *t_Lucene46SegmentInfoFormat_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene46SegmentInfoFormat_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene46SegmentInfoFormat_init_(t_Lucene46SegmentInfoFormat *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene46SegmentInfoFormat_getSegmentInfoReader(t_Lucene46SegmentInfoFormat *self, PyObject *args);
          static PyObject *t_Lucene46SegmentInfoFormat_getSegmentInfoWriter(t_Lucene46SegmentInfoFormat *self, PyObject *args);
          static PyObject *t_Lucene46SegmentInfoFormat_get__segmentInfoReader(t_Lucene46SegmentInfoFormat *self, void *data);
          static PyObject *t_Lucene46SegmentInfoFormat_get__segmentInfoWriter(t_Lucene46SegmentInfoFormat *self, void *data);
          static PyGetSetDef t_Lucene46SegmentInfoFormat__fields_[] = {
            DECLARE_GET_FIELD(t_Lucene46SegmentInfoFormat, segmentInfoReader),
            DECLARE_GET_FIELD(t_Lucene46SegmentInfoFormat, segmentInfoWriter),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Lucene46SegmentInfoFormat__methods_[] = {
            DECLARE_METHOD(t_Lucene46SegmentInfoFormat, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene46SegmentInfoFormat, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene46SegmentInfoFormat, getSegmentInfoReader, METH_VARARGS),
            DECLARE_METHOD(t_Lucene46SegmentInfoFormat, getSegmentInfoWriter, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene46SegmentInfoFormat, t_Lucene46SegmentInfoFormat, ::org::apache::lucene::codecs::SegmentInfoFormat, Lucene46SegmentInfoFormat, t_Lucene46SegmentInfoFormat_init_, 0, 0, t_Lucene46SegmentInfoFormat__fields_, 0, 0);

          void t_Lucene46SegmentInfoFormat::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene46SegmentInfoFormat), module, "Lucene46SegmentInfoFormat", 0);
          }

          void t_Lucene46SegmentInfoFormat::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene46SegmentInfoFormat).tp_dict, "class_", make_descriptor(Lucene46SegmentInfoFormat::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene46SegmentInfoFormat).tp_dict, "wrapfn_", make_descriptor(t_Lucene46SegmentInfoFormat::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene46SegmentInfoFormat).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(Lucene46SegmentInfoFormat::initializeClass);
            PyDict_SetItemString(PY_TYPE(Lucene46SegmentInfoFormat).tp_dict, "SI_EXTENSION", make_descriptor(j2p(*Lucene46SegmentInfoFormat::SI_EXTENSION)));
          }

          static PyObject *t_Lucene46SegmentInfoFormat_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene46SegmentInfoFormat::initializeClass, 1)))
              return NULL;
            return t_Lucene46SegmentInfoFormat::wrap_Object(Lucene46SegmentInfoFormat(((t_Lucene46SegmentInfoFormat *) arg)->object.this$));
          }
          static PyObject *t_Lucene46SegmentInfoFormat_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene46SegmentInfoFormat::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene46SegmentInfoFormat_init_(t_Lucene46SegmentInfoFormat *self, PyObject *args, PyObject *kwds)
          {
            Lucene46SegmentInfoFormat object((jobject) NULL);

            INT_CALL(object = Lucene46SegmentInfoFormat());
            self->object = object;

            return 0;
          }

          static PyObject *t_Lucene46SegmentInfoFormat_getSegmentInfoReader(t_Lucene46SegmentInfoFormat *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::SegmentInfoReader result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getSegmentInfoReader());
              return ::org::apache::lucene::codecs::t_SegmentInfoReader::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene46SegmentInfoFormat), (PyObject *) self, "getSegmentInfoReader", args, 2);
          }

          static PyObject *t_Lucene46SegmentInfoFormat_getSegmentInfoWriter(t_Lucene46SegmentInfoFormat *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::SegmentInfoWriter result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getSegmentInfoWriter());
              return ::org::apache::lucene::codecs::t_SegmentInfoWriter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene46SegmentInfoFormat), (PyObject *) self, "getSegmentInfoWriter", args, 2);
          }

          static PyObject *t_Lucene46SegmentInfoFormat_get__segmentInfoReader(t_Lucene46SegmentInfoFormat *self, void *data)
          {
            ::org::apache::lucene::codecs::SegmentInfoReader value((jobject) NULL);
            OBJ_CALL(value = self->object.getSegmentInfoReader());
            return ::org::apache::lucene::codecs::t_SegmentInfoReader::wrap_Object(value);
          }

          static PyObject *t_Lucene46SegmentInfoFormat_get__segmentInfoWriter(t_Lucene46SegmentInfoFormat *self, void *data)
          {
            ::org::apache::lucene::codecs::SegmentInfoWriter value((jobject) NULL);
            OBJ_CALL(value = self->object.getSegmentInfoWriter());
            return ::org::apache::lucene::codecs::t_SegmentInfoWriter::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/compressing/CompressingStoredFieldsIndexWriter.h"
#include "java/io/IOException.h"
#include "java/io/Closeable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace compressing {

          ::java::lang::Class *CompressingStoredFieldsIndexWriter::class$ = NULL;
          jmethodID *CompressingStoredFieldsIndexWriter::mids$ = NULL;
          bool CompressingStoredFieldsIndexWriter::live$ = false;

          jclass CompressingStoredFieldsIndexWriter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/compressing/CompressingStoredFieldsIndexWriter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          void CompressingStoredFieldsIndexWriter::close() const
          {
            env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace compressing {
          static PyObject *t_CompressingStoredFieldsIndexWriter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CompressingStoredFieldsIndexWriter_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CompressingStoredFieldsIndexWriter_close(t_CompressingStoredFieldsIndexWriter *self);

          static PyMethodDef t_CompressingStoredFieldsIndexWriter__methods_[] = {
            DECLARE_METHOD(t_CompressingStoredFieldsIndexWriter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CompressingStoredFieldsIndexWriter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CompressingStoredFieldsIndexWriter, close, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CompressingStoredFieldsIndexWriter, t_CompressingStoredFieldsIndexWriter, ::java::lang::Object, CompressingStoredFieldsIndexWriter, abstract_init, 0, 0, 0, 0, 0);

          void t_CompressingStoredFieldsIndexWriter::install(PyObject *module)
          {
            installType(&PY_TYPE(CompressingStoredFieldsIndexWriter), module, "CompressingStoredFieldsIndexWriter", 0);
          }

          void t_CompressingStoredFieldsIndexWriter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CompressingStoredFieldsIndexWriter).tp_dict, "class_", make_descriptor(CompressingStoredFieldsIndexWriter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CompressingStoredFieldsIndexWriter).tp_dict, "wrapfn_", make_descriptor(t_CompressingStoredFieldsIndexWriter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CompressingStoredFieldsIndexWriter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CompressingStoredFieldsIndexWriter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CompressingStoredFieldsIndexWriter::initializeClass, 1)))
              return NULL;
            return t_CompressingStoredFieldsIndexWriter::wrap_Object(CompressingStoredFieldsIndexWriter(((t_CompressingStoredFieldsIndexWriter *) arg)->object.this$));
          }
          static PyObject *t_CompressingStoredFieldsIndexWriter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CompressingStoredFieldsIndexWriter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_CompressingStoredFieldsIndexWriter_close(t_CompressingStoredFieldsIndexWriter *self)
          {
            OBJ_CALL(self->object.close());
            Py_RETURN_NONE;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/ChainedFilter.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/util/Bits.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/DocIdSet.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {

        ::java::lang::Class *ChainedFilter::class$ = NULL;
        jmethodID *ChainedFilter::mids$ = NULL;
        bool ChainedFilter::live$ = false;
        jint ChainedFilter::AND = (jint) 0;
        jint ChainedFilter::ANDNOT = (jint) 0;
        jint ChainedFilter::DEFAULT = (jint) 0;
        jint ChainedFilter::OR = (jint) 0;
        jint ChainedFilter::XOR = (jint) 0;

        jclass ChainedFilter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/queries/ChainedFilter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_cbb0d6f6] = env->getMethodID(cls, "<init>", "([Lorg/apache/lucene/search/Filter;)V");
            mids$[mid_init$_571f09d4] = env->getMethodID(cls, "<init>", "([Lorg/apache/lucene/search/Filter;I)V");
            mids$[mid_init$_fa4768a0] = env->getMethodID(cls, "<init>", "([Lorg/apache/lucene/search/Filter;[I)V");
            mids$[mid_getDocIdSet_ccce0897] = env->getMethodID(cls, "getDocIdSet", "(Lorg/apache/lucene/index/AtomicReaderContext;Lorg/apache/lucene/util/Bits;)Lorg/apache/lucene/search/DocIdSet;");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            AND = env->getStaticIntField(cls, "AND");
            ANDNOT = env->getStaticIntField(cls, "ANDNOT");
            DEFAULT = env->getStaticIntField(cls, "DEFAULT");
            OR = env->getStaticIntField(cls, "OR");
            XOR = env->getStaticIntField(cls, "XOR");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ChainedFilter::ChainedFilter(const JArray< ::org::apache::lucene::search::Filter > & a0) : ::org::apache::lucene::search::Filter(env->newObject(initializeClass, &mids$, mid_init$_cbb0d6f6, a0.this$)) {}

        ChainedFilter::ChainedFilter(const JArray< ::org::apache::lucene::search::Filter > & a0, jint a1) : ::org::apache::lucene::search::Filter(env->newObject(initializeClass, &mids$, mid_init$_571f09d4, a0.this$, a1)) {}

        ChainedFilter::ChainedFilter(const JArray< ::org::apache::lucene::search::Filter > & a0, const JArray< jint > & a1) : ::org::apache::lucene::search::Filter(env->newObject(initializeClass, &mids$, mid_init$_fa4768a0, a0.this$, a1.this$)) {}

        ::org::apache::lucene::search::DocIdSet ChainedFilter::getDocIdSet(const ::org::apache::lucene::index::AtomicReaderContext & a0, const ::org::apache::lucene::util::Bits & a1) const
        {
          return ::org::apache::lucene::search::DocIdSet(env->callObjectMethod(this$, mids$[mid_getDocIdSet_ccce0897], a0.this$, a1.this$));
        }

        ::java::lang::String ChainedFilter::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        static PyObject *t_ChainedFilter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ChainedFilter_instance_(PyTypeObject *type, PyObject *arg);
        static int t_ChainedFilter_init_(t_ChainedFilter *self, PyObject *args, PyObject *kwds);
        static PyObject *t_ChainedFilter_getDocIdSet(t_ChainedFilter *self, PyObject *args);
        static PyObject *t_ChainedFilter_toString(t_ChainedFilter *self, PyObject *args);

        static PyMethodDef t_ChainedFilter__methods_[] = {
          DECLARE_METHOD(t_ChainedFilter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ChainedFilter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ChainedFilter, getDocIdSet, METH_VARARGS),
          DECLARE_METHOD(t_ChainedFilter, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(ChainedFilter, t_ChainedFilter, ::org::apache::lucene::search::Filter, ChainedFilter, t_ChainedFilter_init_, 0, 0, 0, 0, 0);

        void t_ChainedFilter::install(PyObject *module)
        {
          installType(&PY_TYPE(ChainedFilter), module, "ChainedFilter", 0);
        }

        void t_ChainedFilter::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(ChainedFilter).tp_dict, "class_", make_descriptor(ChainedFilter::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(ChainedFilter).tp_dict, "wrapfn_", make_descriptor(t_ChainedFilter::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(ChainedFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(ChainedFilter::initializeClass);
          PyDict_SetItemString(PY_TYPE(ChainedFilter).tp_dict, "AND", make_descriptor(ChainedFilter::AND));
          PyDict_SetItemString(PY_TYPE(ChainedFilter).tp_dict, "ANDNOT", make_descriptor(ChainedFilter::ANDNOT));
          PyDict_SetItemString(PY_TYPE(ChainedFilter).tp_dict, "DEFAULT", make_descriptor(ChainedFilter::DEFAULT));
          PyDict_SetItemString(PY_TYPE(ChainedFilter).tp_dict, "OR", make_descriptor(ChainedFilter::OR));
          PyDict_SetItemString(PY_TYPE(ChainedFilter).tp_dict, "XOR", make_descriptor(ChainedFilter::XOR));
        }

        static PyObject *t_ChainedFilter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, ChainedFilter::initializeClass, 1)))
            return NULL;
          return t_ChainedFilter::wrap_Object(ChainedFilter(((t_ChainedFilter *) arg)->object.this$));
        }
        static PyObject *t_ChainedFilter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, ChainedFilter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_ChainedFilter_init_(t_ChainedFilter *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              JArray< ::org::apache::lucene::search::Filter > a0((jobject) NULL);
              ChainedFilter object((jobject) NULL);

              if (!parseArgs(args, "[k", ::org::apache::lucene::search::Filter::initializeClass, &a0))
              {
                INT_CALL(object = ChainedFilter(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              JArray< ::org::apache::lucene::search::Filter > a0((jobject) NULL);
              jint a1;
              ChainedFilter object((jobject) NULL);

              if (!parseArgs(args, "[kI", ::org::apache::lucene::search::Filter::initializeClass, &a0, &a1))
              {
                INT_CALL(object = ChainedFilter(a0, a1));
                self->object = object;
                break;
              }
            }
            {
              JArray< ::org::apache::lucene::search::Filter > a0((jobject) NULL);
              JArray< jint > a1((jobject) NULL);
              ChainedFilter object((jobject) NULL);

              if (!parseArgs(args, "[k[I", ::org::apache::lucene::search::Filter::initializeClass, &a0, &a1))
              {
                INT_CALL(object = ChainedFilter(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_ChainedFilter_getDocIdSet(t_ChainedFilter *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
          ::org::apache::lucene::util::Bits a1((jobject) NULL);
          ::org::apache::lucene::search::DocIdSet result((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.getDocIdSet(a0, a1));
            return ::org::apache::lucene::search::t_DocIdSet::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(ChainedFilter), (PyObject *) self, "getDocIdSet", args, 2);
        }

        static PyObject *t_ChainedFilter_toString(t_ChainedFilter *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(ChainedFilter), (PyObject *) self, "toString", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/util/TreeSet.h"
#include "java/lang/Class.h"
#include "java/util/Collection.h"
#include "java/util/Iterator.h"
#include "java/lang/Cloneable.h"
#include "java/util/NavigableSet.h"
#include "java/lang/Object.h"
#include "java/io/Serializable.h"
#include "java/util/SortedSet.h"
#include "java/util/Comparator.h"
#include "java/util/Spliterator.h"
#include "JArray.h"

namespace java {
  namespace util {

    ::java::lang::Class *TreeSet::class$ = NULL;
    jmethodID *TreeSet::mids$ = NULL;
    bool TreeSet::live$ = false;

    jclass TreeSet::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/util/TreeSet");

        mids$ = new jmethodID[max_mid];
        mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
        mids$[mid_init$_0c3f2ecf] = env->getMethodID(cls, "<init>", "(Ljava/util/SortedSet;)V");
        mids$[mid_init$_9bfb370d] = env->getMethodID(cls, "<init>", "(Ljava/util/Collection;)V");
        mids$[mid_init$_6ffdd545] = env->getMethodID(cls, "<init>", "(Ljava/util/Comparator;)V");
        mids$[mid_add_290588e2] = env->getMethodID(cls, "add", "(Ljava/lang/Object;)Z");
        mids$[mid_addAll_9bfb3701] = env->getMethodID(cls, "addAll", "(Ljava/util/Collection;)Z");
        mids$[mid_ceiling_a932a95f] = env->getMethodID(cls, "ceiling", "(Ljava/lang/Object;)Ljava/lang/Object;");
        mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
        mids$[mid_clone_846352c3] = env->getMethodID(cls, "clone", "()Ljava/lang/Object;");
        mids$[mid_comparator_5a7ff2fc] = env->getMethodID(cls, "comparator", "()Ljava/util/Comparator;");
        mids$[mid_contains_290588e2] = env->getMethodID(cls, "contains", "(Ljava/lang/Object;)Z");
        mids$[mid_descendingIterator_40858c90] = env->getMethodID(cls, "descendingIterator", "()Ljava/util/Iterator;");
        mids$[mid_descendingSet_1d81e42d] = env->getMethodID(cls, "descendingSet", "()Ljava/util/NavigableSet;");
        mids$[mid_first_846352c3] = env->getMethodID(cls, "first", "()Ljava/lang/Object;");
        mids$[mid_floor_a932a95f] = env->getMethodID(cls, "floor", "(Ljava/lang/Object;)Ljava/lang/Object;");
        mids$[mid_headSet_39f27c22] = env->getMethodID(cls, "headSet", "(Ljava/lang/Object;)Ljava/util/SortedSet;");
        mids$[mid_headSet_a72e541e] = env->getMethodID(cls, "headSet", "(Ljava/lang/Object;Z)Ljava/util/NavigableSet;");
        mids$[mid_higher_a932a95f] = env->getMethodID(cls, "higher", "(Ljava/lang/Object;)Ljava/lang/Object;");
        mids$[mid_isEmpty_54c6a16a] = env->getMethodID(cls, "isEmpty", "()Z");
        mids$[mid_iterator_40858c90] = env->getMethodID(cls, "iterator", "()Ljava/util/Iterator;");
        mids$[mid_last_846352c3] = env->getMethodID(cls, "last", "()Ljava/lang/Object;");
        mids$[mid_lower_a932a95f] = env->getMethodID(cls, "lower", "(Ljava/lang/Object;)Ljava/lang/Object;");
        mids$[mid_pollFirst_846352c3] = env->getMethodID(cls, "pollFirst", "()Ljava/lang/Object;");
        mids$[mid_pollLast_846352c3] = env->getMethodID(cls, "pollLast", "()Ljava/lang/Object;");
        mids$[mid_remove_290588e2] = env->getMethodID(cls, "remove", "(Ljava/lang/Object;)Z");
        mids$[mid_size_54c6a179] = env->getMethodID(cls, "size", "()I");
        mids$[mid_spliterator_59b28390] = env->getMethodID(cls, "spliterator", "()Ljava/util/Spliterator;");
        mids$[mid_subSet_cf2accb6] = env->getMethodID(cls, "subSet", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/SortedSet;");
        mids$[mid_subSet_34a398b7] = env->getMethodID(cls, "subSet", "(Ljava/lang/Object;ZLjava/lang/Object;Z)Ljava/util/NavigableSet;");
        mids$[mid_tailSet_39f27c22] = env->getMethodID(cls, "tailSet", "(Ljava/lang/Object;)Ljava/util/SortedSet;");
        mids$[mid_tailSet_a72e541e] = env->getMethodID(cls, "tailSet", "(Ljava/lang/Object;Z)Ljava/util/NavigableSet;");

        class$ = (::java::lang::Class *) new JObject(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    TreeSet::TreeSet() : ::java::util::AbstractSet(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

    TreeSet::TreeSet(const ::java::util::SortedSet & a0) : ::java::util::AbstractSet(env->newObject(initializeClass, &mids$, mid_init$_0c3f2ecf, a0.this$)) {}

    TreeSet::TreeSet(const ::java::util::Collection & a0) : ::java::util::AbstractSet(env->newObject(initializeClass, &mids$, mid_init$_9bfb370d, a0.this$)) {}

    TreeSet::TreeSet(const ::java::util::Comparator & a0) : ::java::util::AbstractSet(env->newObject(initializeClass, &mids$, mid_init$_6ffdd545, a0.this$)) {}

    jboolean TreeSet::add(const ::java::lang::Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_add_290588e2], a0.this$);
    }

    jboolean TreeSet::addAll(const ::java::util::Collection & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_addAll_9bfb3701], a0.this$);
    }

    ::java::lang::Object TreeSet::ceiling(const ::java::lang::Object & a0) const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_ceiling_a932a95f], a0.this$));
    }

    void TreeSet::clear() const
    {
      env->callVoidMethod(this$, mids$[mid_clear_54c6a166]);
    }

    ::java::lang::Object TreeSet::clone() const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_clone_846352c3]));
    }

    ::java::util::Comparator TreeSet::comparator() const
    {
      return ::java::util::Comparator(env->callObjectMethod(this$, mids$[mid_comparator_5a7ff2fc]));
    }

    jboolean TreeSet::contains(const ::java::lang::Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_contains_290588e2], a0.this$);
    }

    ::java::util::Iterator TreeSet::descendingIterator() const
    {
      return ::java::util::Iterator(env->callObjectMethod(this$, mids$[mid_descendingIterator_40858c90]));
    }

    ::java::util::NavigableSet TreeSet::descendingSet() const
    {
      return ::java::util::NavigableSet(env->callObjectMethod(this$, mids$[mid_descendingSet_1d81e42d]));
    }

    ::java::lang::Object TreeSet::first() const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_first_846352c3]));
    }

    ::java::lang::Object TreeSet::floor(const ::java::lang::Object & a0) const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_floor_a932a95f], a0.this$));
    }

    ::java::util::SortedSet TreeSet::headSet(const ::java::lang::Object & a0) const
    {
      return ::java::util::SortedSet(env->callObjectMethod(this$, mids$[mid_headSet_39f27c22], a0.this$));
    }

    ::java::util::NavigableSet TreeSet::headSet(const ::java::lang::Object & a0, jboolean a1) const
    {
      return ::java::util::NavigableSet(env->callObjectMethod(this$, mids$[mid_headSet_a72e541e], a0.this$, a1));
    }

    ::java::lang::Object TreeSet::higher(const ::java::lang::Object & a0) const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_higher_a932a95f], a0.this$));
    }

    jboolean TreeSet::isEmpty() const
    {
      return env->callBooleanMethod(this$, mids$[mid_isEmpty_54c6a16a]);
    }

    ::java::util::Iterator TreeSet::iterator() const
    {
      return ::java::util::Iterator(env->callObjectMethod(this$, mids$[mid_iterator_40858c90]));
    }

    ::java::lang::Object TreeSet::last() const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_last_846352c3]));
    }

    ::java::lang::Object TreeSet::lower(const ::java::lang::Object & a0) const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_lower_a932a95f], a0.this$));
    }

    ::java::lang::Object TreeSet::pollFirst() const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_pollFirst_846352c3]));
    }

    ::java::lang::Object TreeSet::pollLast() const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_pollLast_846352c3]));
    }

    jboolean TreeSet::remove(const ::java::lang::Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_remove_290588e2], a0.this$);
    }

    jint TreeSet::size() const
    {
      return env->callIntMethod(this$, mids$[mid_size_54c6a179]);
    }

    ::java::util::Spliterator TreeSet::spliterator() const
    {
      return ::java::util::Spliterator(env->callObjectMethod(this$, mids$[mid_spliterator_59b28390]));
    }

    ::java::util::SortedSet TreeSet::subSet(const ::java::lang::Object & a0, const ::java::lang::Object & a1) const
    {
      return ::java::util::SortedSet(env->callObjectMethod(this$, mids$[mid_subSet_cf2accb6], a0.this$, a1.this$));
    }

    ::java::util::NavigableSet TreeSet::subSet(const ::java::lang::Object & a0, jboolean a1, const ::java::lang::Object & a2, jboolean a3) const
    {
      return ::java::util::NavigableSet(env->callObjectMethod(this$, mids$[mid_subSet_34a398b7], a0.this$, a1, a2.this$, a3));
    }

    ::java::util::SortedSet TreeSet::tailSet(const ::java::lang::Object & a0) const
    {
      return ::java::util::SortedSet(env->callObjectMethod(this$, mids$[mid_tailSet_39f27c22], a0.this$));
    }

    ::java::util::NavigableSet TreeSet::tailSet(const ::java::lang::Object & a0, jboolean a1) const
    {
      return ::java::util::NavigableSet(env->callObjectMethod(this$, mids$[mid_tailSet_a72e541e], a0.this$, a1));
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace util {
    static PyObject *t_TreeSet_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_TreeSet_instance_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_TreeSet_of_(t_TreeSet *self, PyObject *args);
    static int t_TreeSet_init_(t_TreeSet *self, PyObject *args, PyObject *kwds);
    static PyObject *t_TreeSet_add(t_TreeSet *self, PyObject *args);
    static PyObject *t_TreeSet_addAll(t_TreeSet *self, PyObject *args);
    static PyObject *t_TreeSet_ceiling(t_TreeSet *self, PyObject *arg);
    static PyObject *t_TreeSet_clear(t_TreeSet *self, PyObject *args);
    static PyObject *t_TreeSet_clone(t_TreeSet *self);
    static PyObject *t_TreeSet_comparator(t_TreeSet *self);
    static PyObject *t_TreeSet_contains(t_TreeSet *self, PyObject *args);
    static PyObject *t_TreeSet_descendingIterator(t_TreeSet *self);
    static PyObject *t_TreeSet_descendingSet(t_TreeSet *self);
    static PyObject *t_TreeSet_first(t_TreeSet *self);
    static PyObject *t_TreeSet_floor(t_TreeSet *self, PyObject *arg);
    static PyObject *t_TreeSet_headSet(t_TreeSet *self, PyObject *args);
    static PyObject *t_TreeSet_higher(t_TreeSet *self, PyObject *arg);
    static PyObject *t_TreeSet_isEmpty(t_TreeSet *self, PyObject *args);
    static PyObject *t_TreeSet_iterator(t_TreeSet *self, PyObject *args);
    static PyObject *t_TreeSet_last(t_TreeSet *self);
    static PyObject *t_TreeSet_lower(t_TreeSet *self, PyObject *arg);
    static PyObject *t_TreeSet_pollFirst(t_TreeSet *self);
    static PyObject *t_TreeSet_pollLast(t_TreeSet *self);
    static PyObject *t_TreeSet_remove(t_TreeSet *self, PyObject *args);
    static PyObject *t_TreeSet_size(t_TreeSet *self, PyObject *args);
    static PyObject *t_TreeSet_spliterator(t_TreeSet *self, PyObject *args);
    static PyObject *t_TreeSet_subSet(t_TreeSet *self, PyObject *args);
    static PyObject *t_TreeSet_tailSet(t_TreeSet *self, PyObject *args);
    static PyObject *t_TreeSet_get__empty(t_TreeSet *self, void *data);
    static PyObject *t_TreeSet_get__parameters_(t_TreeSet *self, void *data);
    static PyGetSetDef t_TreeSet__fields_[] = {
      DECLARE_GET_FIELD(t_TreeSet, empty),
      DECLARE_GET_FIELD(t_TreeSet, parameters_),
      { NULL, NULL, NULL, NULL, NULL }
    };

    static PyMethodDef t_TreeSet__methods_[] = {
      DECLARE_METHOD(t_TreeSet, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_TreeSet, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_TreeSet, of_, METH_VARARGS),
      DECLARE_METHOD(t_TreeSet, add, METH_VARARGS),
      DECLARE_METHOD(t_TreeSet, addAll, METH_VARARGS),
      DECLARE_METHOD(t_TreeSet, ceiling, METH_O),
      DECLARE_METHOD(t_TreeSet, clear, METH_VARARGS),
      DECLARE_METHOD(t_TreeSet, clone, METH_NOARGS),
      DECLARE_METHOD(t_TreeSet, comparator, METH_NOARGS),
      DECLARE_METHOD(t_TreeSet, contains, METH_VARARGS),
      DECLARE_METHOD(t_TreeSet, descendingIterator, METH_NOARGS),
      DECLARE_METHOD(t_TreeSet, descendingSet, METH_NOARGS),
      DECLARE_METHOD(t_TreeSet, first, METH_NOARGS),
      DECLARE_METHOD(t_TreeSet, floor, METH_O),
      DECLARE_METHOD(t_TreeSet, headSet, METH_VARARGS),
      DECLARE_METHOD(t_TreeSet, higher, METH_O),
      DECLARE_METHOD(t_TreeSet, isEmpty, METH_VARARGS),
      DECLARE_METHOD(t_TreeSet, iterator, METH_VARARGS),
      DECLARE_METHOD(t_TreeSet, last, METH_NOARGS),
      DECLARE_METHOD(t_TreeSet, lower, METH_O),
      DECLARE_METHOD(t_TreeSet, pollFirst, METH_NOARGS),
      DECLARE_METHOD(t_TreeSet, pollLast, METH_NOARGS),
      DECLARE_METHOD(t_TreeSet, remove, METH_VARARGS),
      DECLARE_METHOD(t_TreeSet, size, METH_VARARGS),
      DECLARE_METHOD(t_TreeSet, spliterator, METH_VARARGS),
      DECLARE_METHOD(t_TreeSet, subSet, METH_VARARGS),
      DECLARE_METHOD(t_TreeSet, tailSet, METH_VARARGS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(TreeSet, t_TreeSet, ::java::util::AbstractSet, TreeSet, t_TreeSet_init_, ((PyObject *(*)(t_TreeSet *)) get_generic_iterator< t_TreeSet >), 0, t_TreeSet__fields_, 0, 0);
    PyObject *t_TreeSet::wrap_Object(const TreeSet& object, PyTypeObject *p0)
    {
      PyObject *obj = t_TreeSet::wrap_Object(object);
      if (obj != NULL && obj != Py_None)
      {
        t_TreeSet *self = (t_TreeSet *) obj;
        self->parameters[0] = p0;
      }
      return obj;
    }

    PyObject *t_TreeSet::wrap_jobject(const jobject& object, PyTypeObject *p0)
    {
      PyObject *obj = t_TreeSet::wrap_jobject(object);
      if (obj != NULL && obj != Py_None)
      {
        t_TreeSet *self = (t_TreeSet *) obj;
        self->parameters[0] = p0;
      }
      return obj;
    }

    void t_TreeSet::install(PyObject *module)
    {
      installType(&PY_TYPE(TreeSet), module, "TreeSet", 0);
    }

    void t_TreeSet::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(TreeSet).tp_dict, "class_", make_descriptor(TreeSet::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(TreeSet).tp_dict, "wrapfn_", make_descriptor(t_TreeSet::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(TreeSet).tp_dict, "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_TreeSet_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, TreeSet::initializeClass, 1)))
        return NULL;
      return t_TreeSet::wrap_Object(TreeSet(((t_TreeSet *) arg)->object.this$));
    }
    static PyObject *t_TreeSet_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, TreeSet::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static PyObject *t_TreeSet_of_(t_TreeSet *self, PyObject *args)
    {
      if (!parseArg(args, "T", 1, &(self->parameters)))
        Py_RETURN_SELF;
      return PyErr_SetArgsError((PyObject *) self, "of_", args);
    }

    static int t_TreeSet_init_(t_TreeSet *self, PyObject *args, PyObject *kwds)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          TreeSet object((jobject) NULL);

          INT_CALL(object = TreeSet());
          self->object = object;
          break;
        }
        goto err;
       case 1:
        {
          ::java::util::SortedSet a0((jobject) NULL);
          PyTypeObject **p0;
          TreeSet object((jobject) NULL);

          if (!parseArgs(args, "K", ::java::util::SortedSet::initializeClass, &a0, &p0, ::java::util::t_SortedSet::parameters_))
          {
            INT_CALL(object = TreeSet(a0));
            self->object = object;
            break;
          }
        }
        {
          ::java::util::Collection a0((jobject) NULL);
          PyTypeObject **p0;
          TreeSet object((jobject) NULL);

          if (!parseArgs(args, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
          {
            INT_CALL(object = TreeSet(a0));
            self->object = object;
            break;
          }
        }
        {
          ::java::util::Comparator a0((jobject) NULL);
          PyTypeObject **p0;
          TreeSet object((jobject) NULL);

          if (!parseArgs(args, "K", ::java::util::Comparator::initializeClass, &a0, &p0, ::java::util::t_Comparator::parameters_))
          {
            INT_CALL(object = TreeSet(a0));
            self->object = object;
            break;
          }
        }
       default:
       err:
        PyErr_SetArgsError((PyObject *) self, "__init__", args);
        return -1;
      }

      return 0;
    }

    static PyObject *t_TreeSet_add(t_TreeSet *self, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      jboolean result;

      if (!parseArgs(args, "O", self->parameters[0], &a0))
      {
        OBJ_CALL(result = self->object.add(a0));
        Py_RETURN_BOOL(result);
      }

      return callSuper(&PY_TYPE(TreeSet), (PyObject *) self, "add", args, 2);
    }

    static PyObject *t_TreeSet_addAll(t_TreeSet *self, PyObject *args)
    {
      ::java::util::Collection a0((jobject) NULL);
      PyTypeObject **p0;
      jboolean result;

      if (!parseArgs(args, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
      {
        OBJ_CALL(result = self->object.addAll(a0));
        Py_RETURN_BOOL(result);
      }

      return callSuper(&PY_TYPE(TreeSet), (PyObject *) self, "addAll", args, 2);
    }

    static PyObject *t_TreeSet_ceiling(t_TreeSet *self, PyObject *arg)
    {
      ::java::lang::Object a0((jobject) NULL);
      ::java::lang::Object result((jobject) NULL);

      if (!parseArg(arg, "O", self->parameters[0], &a0))
      {
        OBJ_CALL(result = self->object.ceiling(a0));
        return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
      }

      PyErr_SetArgsError((PyObject *) self, "ceiling", arg);
      return NULL;
    }

    static PyObject *t_TreeSet_clear(t_TreeSet *self, PyObject *args)
    {

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(self->object.clear());
        Py_RETURN_NONE;
      }

      return callSuper(&PY_TYPE(TreeSet), (PyObject *) self, "clear", args, 2);
    }

    static PyObject *t_TreeSet_clone(t_TreeSet *self)
    {
      ::java::lang::Object result((jobject) NULL);
      OBJ_CALL(result = self->object.clone());
      return ::java::lang::t_Object::wrap_Object(result);
    }

    static PyObject *t_TreeSet_comparator(t_TreeSet *self)
    {
      ::java::util::Comparator result((jobject) NULL);
      OBJ_CALL(result = self->object.comparator());
      return ::java::util::t_Comparator::wrap_Object(result);
    }

    static PyObject *t_TreeSet_contains(t_TreeSet *self, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      jboolean result;

      if (!parseArgs(args, "o", &a0))
      {
        OBJ_CALL(result = self->object.contains(a0));
        Py_RETURN_BOOL(result);
      }

      return callSuper(&PY_TYPE(TreeSet), (PyObject *) self, "contains", args, 2);
    }

    static PyObject *t_TreeSet_descendingIterator(t_TreeSet *self)
    {
      ::java::util::Iterator result((jobject) NULL);
      OBJ_CALL(result = self->object.descendingIterator());
      return ::java::util::t_Iterator::wrap_Object(result, self->parameters[0]);
    }

    static PyObject *t_TreeSet_descendingSet(t_TreeSet *self)
    {
      ::java::util::NavigableSet result((jobject) NULL);
      OBJ_CALL(result = self->object.descendingSet());
      return ::java::util::t_NavigableSet::wrap_Object(result, self->parameters[0]);
    }

    static PyObject *t_TreeSet_first(t_TreeSet *self)
    {
      ::java::lang::Object result((jobject) NULL);
      OBJ_CALL(result = self->object.first());
      return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
    }

    static PyObject *t_TreeSet_floor(t_TreeSet *self, PyObject *arg)
    {
      ::java::lang::Object a0((jobject) NULL);
      ::java::lang::Object result((jobject) NULL);

      if (!parseArg(arg, "O", self->parameters[0], &a0))
      {
        OBJ_CALL(result = self->object.floor(a0));
        return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
      }

      PyErr_SetArgsError((PyObject *) self, "floor", arg);
      return NULL;
    }

    static PyObject *t_TreeSet_headSet(t_TreeSet *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          ::java::lang::Object a0((jobject) NULL);
          ::java::util::SortedSet result((jobject) NULL);

          if (!parseArgs(args, "O", self->parameters[0], &a0))
          {
            OBJ_CALL(result = self->object.headSet(a0));
            return ::java::util::t_SortedSet::wrap_Object(result, self->parameters[0]);
          }
        }
        break;
       case 2:
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean a1;
          ::java::util::NavigableSet result((jobject) NULL);

          if (!parseArgs(args, "OZ", self->parameters[0], &a0, &a1))
          {
            OBJ_CALL(result = self->object.headSet(a0, a1));
            return ::java::util::t_NavigableSet::wrap_Object(result, self->parameters[0]);
          }
        }
      }

      PyErr_SetArgsError((PyObject *) self, "headSet", args);
      return NULL;
    }

    static PyObject *t_TreeSet_higher(t_TreeSet *self, PyObject *arg)
    {
      ::java::lang::Object a0((jobject) NULL);
      ::java::lang::Object result((jobject) NULL);

      if (!parseArg(arg, "O", self->parameters[0], &a0))
      {
        OBJ_CALL(result = self->object.higher(a0));
        return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
      }

      PyErr_SetArgsError((PyObject *) self, "higher", arg);
      return NULL;
    }

    static PyObject *t_TreeSet_isEmpty(t_TreeSet *self, PyObject *args)
    {
      jboolean result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.isEmpty());
        Py_RETURN_BOOL(result);
      }

      return callSuper(&PY_TYPE(TreeSet), (PyObject *) self, "isEmpty", args, 2);
    }

    static PyObject *t_TreeSet_iterator(t_TreeSet *self, PyObject *args)
    {
      ::java::util::Iterator result((jobject) NULL);

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.iterator());
        return ::java::util::t_Iterator::wrap_Object(result, self->parameters[0]);
      }

      return callSuper(&PY_TYPE(TreeSet), (PyObject *) self, "iterator", args, 2);
    }

    static PyObject *t_TreeSet_last(t_TreeSet *self)
    {
      ::java::lang::Object result((jobject) NULL);
      OBJ_CALL(result = self->object.last());
      return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
    }

    static PyObject *t_TreeSet_lower(t_TreeSet *self, PyObject *arg)
    {
      ::java::lang::Object a0((jobject) NULL);
      ::java::lang::Object result((jobject) NULL);

      if (!parseArg(arg, "O", self->parameters[0], &a0))
      {
        OBJ_CALL(result = self->object.lower(a0));
        return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
      }

      PyErr_SetArgsError((PyObject *) self, "lower", arg);
      return NULL;
    }

    static PyObject *t_TreeSet_pollFirst(t_TreeSet *self)
    {
      ::java::lang::Object result((jobject) NULL);
      OBJ_CALL(result = self->object.pollFirst());
      return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
    }

    static PyObject *t_TreeSet_pollLast(t_TreeSet *self)
    {
      ::java::lang::Object result((jobject) NULL);
      OBJ_CALL(result = self->object.pollLast());
      return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
    }

    static PyObject *t_TreeSet_remove(t_TreeSet *self, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      jboolean result;

      if (!parseArgs(args, "o", &a0))
      {
        OBJ_CALL(result = self->object.remove(a0));
        Py_RETURN_BOOL(result);
      }

      return callSuper(&PY_TYPE(TreeSet), (PyObject *) self, "remove", args, 2);
    }

    static PyObject *t_TreeSet_size(t_TreeSet *self, PyObject *args)
    {
      jint result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.size());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(TreeSet), (PyObject *) self, "size", args, 2);
    }

    static PyObject *t_TreeSet_spliterator(t_TreeSet *self, PyObject *args)
    {
      ::java::util::Spliterator result((jobject) NULL);

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.spliterator());
        return ::java::util::t_Spliterator::wrap_Object(result, self->parameters[0]);
      }

      return callSuper(&PY_TYPE(TreeSet), (PyObject *) self, "spliterator", args, 2);
    }

    static PyObject *t_TreeSet_subSet(t_TreeSet *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 2:
        {
          ::java::lang::Object a0((jobject) NULL);
          ::java::lang::Object a1((jobject) NULL);
          ::java::util::SortedSet result((jobject) NULL);

          if (!parseArgs(args, "OO", self->parameters[0], self->parameters[0], &a0, &a1))
          {
            OBJ_CALL(result = self->object.subSet(a0, a1));
            return ::java::util::t_SortedSet::wrap_Object(result, self->parameters[0]);
          }
        }
        break;
       case 4:
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean a1;
          ::java::lang::Object a2((jobject) NULL);
          jboolean a3;
          ::java::util::NavigableSet result((jobject) NULL);

          if (!parseArgs(args, "OZOZ", self->parameters[0], self->parameters[0], &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(result = self->object.subSet(a0, a1, a2, a3));
            return ::java::util::t_NavigableSet::wrap_Object(result, self->parameters[0]);
          }
        }
      }

      PyErr_SetArgsError((PyObject *) self, "subSet", args);
      return NULL;
    }

    static PyObject *t_TreeSet_tailSet(t_TreeSet *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          ::java::lang::Object a0((jobject) NULL);
          ::java::util::SortedSet result((jobject) NULL);

          if (!parseArgs(args, "O", self->parameters[0], &a0))
          {
            OBJ_CALL(result = self->object.tailSet(a0));
            return ::java::util::t_SortedSet::wrap_Object(result, self->parameters[0]);
          }
        }
        break;
       case 2:
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean a1;
          ::java::util::NavigableSet result((jobject) NULL);

          if (!parseArgs(args, "OZ", self->parameters[0], &a0, &a1))
          {
            OBJ_CALL(result = self->object.tailSet(a0, a1));
            return ::java::util::t_NavigableSet::wrap_Object(result, self->parameters[0]);
          }
        }
      }

      PyErr_SetArgsError((PyObject *) self, "tailSet", args);
      return NULL;
    }
    static PyObject *t_TreeSet_get__parameters_(t_TreeSet *self, void *data)
    {
      return typeParameters(self->parameters, sizeof(self->parameters));
    }

    static PyObject *t_TreeSet_get__empty(t_TreeSet *self, void *data)
    {
      jboolean value;
      OBJ_CALL(value = self->object.isEmpty());
      Py_RETURN_BOOL(value);
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FieldValueHitQueue.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/FieldComparator.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/search/SortField.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FieldValueHitQueue::class$ = NULL;
        jmethodID *FieldValueHitQueue::mids$ = NULL;
        bool FieldValueHitQueue::live$ = false;

        jclass FieldValueHitQueue::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FieldValueHitQueue");

            mids$ = new jmethodID[max_mid];
            mids$[mid_create_c78d73c1] = env->getStaticMethodID(cls, "create", "([Lorg/apache/lucene/search/SortField;I)Lorg/apache/lucene/search/FieldValueHitQueue;");
            mids$[mid_getComparators_cbcbe6bc] = env->getMethodID(cls, "getComparators", "()[Lorg/apache/lucene/search/FieldComparator;");
            mids$[mid_getReverseMul_dab10e75] = env->getMethodID(cls, "getReverseMul", "()[I");
            mids$[mid_setComparator_205d9ea7] = env->getMethodID(cls, "setComparator", "(ILorg/apache/lucene/search/FieldComparator;)V");
            mids$[mid_lessThan_90234960] = env->getMethodID(cls, "lessThan", "(Lorg/apache/lucene/search/FieldValueHitQueue$Entry;Lorg/apache/lucene/search/FieldValueHitQueue$Entry;)Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FieldValueHitQueue FieldValueHitQueue::create(const JArray< ::org::apache::lucene::search::SortField > & a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return FieldValueHitQueue(env->callStaticObjectMethod(cls, mids$[mid_create_c78d73c1], a0.this$, a1));
        }

        JArray< ::org::apache::lucene::search::FieldComparator > FieldValueHitQueue::getComparators() const
        {
          return JArray< ::org::apache::lucene::search::FieldComparator >(env->callObjectMethod(this$, mids$[mid_getComparators_cbcbe6bc]));
        }

        JArray< jint > FieldValueHitQueue::getReverseMul() const
        {
          return JArray< jint >(env->callObjectMethod(this$, mids$[mid_getReverseMul_dab10e75]));
        }

        void FieldValueHitQueue::setComparator(jint a0, const ::org::apache::lucene::search::FieldComparator & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_setComparator_205d9ea7], a0, a1.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/search/FieldValueHitQueue$Entry.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FieldValueHitQueue_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldValueHitQueue_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldValueHitQueue_of_(t_FieldValueHitQueue *self, PyObject *args);
        static PyObject *t_FieldValueHitQueue_create(PyTypeObject *type, PyObject *args);
        static PyObject *t_FieldValueHitQueue_getComparators(t_FieldValueHitQueue *self);
        static PyObject *t_FieldValueHitQueue_getReverseMul(t_FieldValueHitQueue *self);
        static PyObject *t_FieldValueHitQueue_setComparator(t_FieldValueHitQueue *self, PyObject *args);
        static PyObject *t_FieldValueHitQueue_get__comparators(t_FieldValueHitQueue *self, void *data);
        static PyObject *t_FieldValueHitQueue_get__reverseMul(t_FieldValueHitQueue *self, void *data);
        static PyObject *t_FieldValueHitQueue_get__parameters_(t_FieldValueHitQueue *self, void *data);
        static PyGetSetDef t_FieldValueHitQueue__fields_[] = {
          DECLARE_GET_FIELD(t_FieldValueHitQueue, comparators),
          DECLARE_GET_FIELD(t_FieldValueHitQueue, reverseMul),
          DECLARE_GET_FIELD(t_FieldValueHitQueue, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FieldValueHitQueue__methods_[] = {
          DECLARE_METHOD(t_FieldValueHitQueue, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldValueHitQueue, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldValueHitQueue, of_, METH_VARARGS),
          DECLARE_METHOD(t_FieldValueHitQueue, create, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_FieldValueHitQueue, getComparators, METH_NOARGS),
          DECLARE_METHOD(t_FieldValueHitQueue, getReverseMul, METH_NOARGS),
          DECLARE_METHOD(t_FieldValueHitQueue, setComparator, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldValueHitQueue, t_FieldValueHitQueue, ::org::apache::lucene::util::PriorityQueue, FieldValueHitQueue, abstract_init, 0, 0, t_FieldValueHitQueue__fields_, 0, 0);
        PyObject *t_FieldValueHitQueue::wrap_Object(const FieldValueHitQueue& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FieldValueHitQueue::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FieldValueHitQueue *self = (t_FieldValueHitQueue *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_FieldValueHitQueue::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FieldValueHitQueue::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FieldValueHitQueue *self = (t_FieldValueHitQueue *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_FieldValueHitQueue::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldValueHitQueue), module, "FieldValueHitQueue", 0);
          PyDict_SetItemString(PY_TYPE(FieldValueHitQueue).tp_dict, "Entry", make_descriptor(&PY_TYPE(FieldValueHitQueue$Entry)));
        }

        void t_FieldValueHitQueue::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldValueHitQueue).tp_dict, "class_", make_descriptor(FieldValueHitQueue::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldValueHitQueue).tp_dict, "wrapfn_", make_descriptor(t_FieldValueHitQueue::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldValueHitQueue).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldValueHitQueue_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldValueHitQueue::initializeClass, 1)))
            return NULL;
          return t_FieldValueHitQueue::wrap_Object(FieldValueHitQueue(((t_FieldValueHitQueue *) arg)->object.this$));
        }
        static PyObject *t_FieldValueHitQueue_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldValueHitQueue::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FieldValueHitQueue_of_(t_FieldValueHitQueue *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_FieldValueHitQueue_create(PyTypeObject *type, PyObject *args)
        {
          JArray< ::org::apache::lucene::search::SortField > a0((jobject) NULL);
          jint a1;
          FieldValueHitQueue result((jobject) NULL);

          if (!parseArgs(args, "[kI", ::org::apache::lucene::search::SortField::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::search::FieldValueHitQueue::create(a0, a1));
            return t_FieldValueHitQueue::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "create", args);
          return NULL;
        }

        static PyObject *t_FieldValueHitQueue_getComparators(t_FieldValueHitQueue *self)
        {
          JArray< ::org::apache::lucene::search::FieldComparator > result((jobject) NULL);
          OBJ_CALL(result = self->object.getComparators());
          return JArray<jobject>(result.this$).wrap(::org::apache::lucene::search::t_FieldComparator::wrap_jobject);
        }

        static PyObject *t_FieldValueHitQueue_getReverseMul(t_FieldValueHitQueue *self)
        {
          JArray< jint > result((jobject) NULL);
          OBJ_CALL(result = self->object.getReverseMul());
          return result.wrap();
        }

        static PyObject *t_FieldValueHitQueue_setComparator(t_FieldValueHitQueue *self, PyObject *args)
        {
          jint a0;
          ::org::apache::lucene::search::FieldComparator a1((jobject) NULL);
          PyTypeObject **p1;

          if (!parseArgs(args, "IK", ::org::apache::lucene::search::FieldComparator::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::search::t_FieldComparator::parameters_))
          {
            OBJ_CALL(self->object.setComparator(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setComparator", args);
          return NULL;
        }
        static PyObject *t_FieldValueHitQueue_get__parameters_(t_FieldValueHitQueue *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static PyObject *t_FieldValueHitQueue_get__comparators(t_FieldValueHitQueue *self, void *data)
        {
          JArray< ::org::apache::lucene::search::FieldComparator > value((jobject) NULL);
          OBJ_CALL(value = self->object.getComparators());
          return JArray<jobject>(value.this$).wrap(::org::apache::lucene::search::t_FieldComparator::wrap_jobject);
        }

        static PyObject *t_FieldValueHitQueue_get__reverseMul(t_FieldValueHitQueue *self, void *data)
        {
          JArray< jint > value((jobject) NULL);
          OBJ_CALL(value = self->object.getReverseMul());
          return value.wrap();
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/th/ThaiAnalyzer.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "java/lang/String.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace th {

          ::java::lang::Class *ThaiAnalyzer::class$ = NULL;
          jmethodID *ThaiAnalyzer::mids$ = NULL;
          bool ThaiAnalyzer::live$ = false;
          ::java::lang::String *ThaiAnalyzer::DEFAULT_STOPWORD_FILE = NULL;

          jclass ThaiAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/th/ThaiAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_0d96cf33] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;)V");
              mids$[mid_init$_6d1f9881] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_83eafe28] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_getDefaultStopSet_d2d3505c] = env->getStaticMethodID(cls, "getDefaultStopSet", "()Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_STOPWORD_FILE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_STOPWORD_FILE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ThaiAnalyzer::ThaiAnalyzer() : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ThaiAnalyzer::ThaiAnalyzer(const ::org::apache::lucene::util::Version & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_0d96cf33, a0.this$)) {}

          ThaiAnalyzer::ThaiAnalyzer(const ::org::apache::lucene::analysis::util::CharArraySet & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_6d1f9881, a0.this$)) {}

          ThaiAnalyzer::ThaiAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_83eafe28, a0.this$, a1.this$)) {}

          ::org::apache::lucene::analysis::util::CharArraySet ThaiAnalyzer::getDefaultStopSet()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getDefaultStopSet_d2d3505c]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace th {
          static PyObject *t_ThaiAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ThaiAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ThaiAnalyzer_init_(t_ThaiAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ThaiAnalyzer_getDefaultStopSet(PyTypeObject *type);
          static PyObject *t_ThaiAnalyzer_get__defaultStopSet(t_ThaiAnalyzer *self, void *data);
          static PyGetSetDef t_ThaiAnalyzer__fields_[] = {
            DECLARE_GET_FIELD(t_ThaiAnalyzer, defaultStopSet),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_ThaiAnalyzer__methods_[] = {
            DECLARE_METHOD(t_ThaiAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ThaiAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ThaiAnalyzer, getDefaultStopSet, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ThaiAnalyzer, t_ThaiAnalyzer, ::org::apache::lucene::analysis::util::StopwordAnalyzerBase, ThaiAnalyzer, t_ThaiAnalyzer_init_, 0, 0, t_ThaiAnalyzer__fields_, 0, 0);

          void t_ThaiAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(ThaiAnalyzer), module, "ThaiAnalyzer", 0);
          }

          void t_ThaiAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ThaiAnalyzer).tp_dict, "class_", make_descriptor(ThaiAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ThaiAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_ThaiAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ThaiAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(ThaiAnalyzer::initializeClass);
            PyDict_SetItemString(PY_TYPE(ThaiAnalyzer).tp_dict, "DEFAULT_STOPWORD_FILE", make_descriptor(j2p(*ThaiAnalyzer::DEFAULT_STOPWORD_FILE)));
          }

          static PyObject *t_ThaiAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ThaiAnalyzer::initializeClass, 1)))
              return NULL;
            return t_ThaiAnalyzer::wrap_Object(ThaiAnalyzer(((t_ThaiAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_ThaiAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ThaiAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ThaiAnalyzer_init_(t_ThaiAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                ThaiAnalyzer object((jobject) NULL);

                INT_CALL(object = ThaiAnalyzer());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                ThaiAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::util::Version::initializeClass, &a0))
                {
                  INT_CALL(object = ThaiAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::analysis::util::CharArraySet a0((jobject) NULL);
                PyTypeObject **p0;
                ThaiAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = ThaiAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                ThaiAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "kK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = ThaiAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ThaiAnalyzer_getDefaultStopSet(PyTypeObject *type)
          {
            ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::th::ThaiAnalyzer::getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_ThaiAnalyzer_get__defaultStopSet(t_ThaiAnalyzer *self, void *data)
          {
            ::org::apache::lucene::analysis::util::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/NoMergeScheduler.h"
#include "org/apache/lucene/index/IndexWriter.h"
#include "org/apache/lucene/index/MergeTrigger.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *NoMergeScheduler::class$ = NULL;
        jmethodID *NoMergeScheduler::mids$ = NULL;
        bool NoMergeScheduler::live$ = false;
        ::org::apache::lucene::index::MergeScheduler *NoMergeScheduler::INSTANCE = NULL;

        jclass NoMergeScheduler::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/NoMergeScheduler");

            mids$ = new jmethodID[max_mid];
            mids$[mid_clone_ff96d655] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/index/MergeScheduler;");
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_merge_5fd7a9f9] = env->getMethodID(cls, "merge", "(Lorg/apache/lucene/index/IndexWriter;Lorg/apache/lucene/index/MergeTrigger;Z)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            INSTANCE = new ::org::apache::lucene::index::MergeScheduler(env->getStaticObjectField(cls, "INSTANCE", "Lorg/apache/lucene/index/MergeScheduler;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::index::MergeScheduler NoMergeScheduler::clone() const
        {
          return ::org::apache::lucene::index::MergeScheduler(env->callObjectMethod(this$, mids$[mid_clone_ff96d655]));
        }

        void NoMergeScheduler::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        void NoMergeScheduler::merge(const ::org::apache::lucene::index::IndexWriter & a0, const ::org::apache::lucene::index::MergeTrigger & a1, jboolean a2) const
        {
          env->callVoidMethod(this$, mids$[mid_merge_5fd7a9f9], a0.this$, a1.this$, a2);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_NoMergeScheduler_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NoMergeScheduler_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NoMergeScheduler_clone(t_NoMergeScheduler *self);
        static PyObject *t_NoMergeScheduler_close(t_NoMergeScheduler *self, PyObject *args);
        static PyObject *t_NoMergeScheduler_merge(t_NoMergeScheduler *self, PyObject *args);

        static PyMethodDef t_NoMergeScheduler__methods_[] = {
          DECLARE_METHOD(t_NoMergeScheduler, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NoMergeScheduler, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NoMergeScheduler, clone, METH_NOARGS),
          DECLARE_METHOD(t_NoMergeScheduler, close, METH_VARARGS),
          DECLARE_METHOD(t_NoMergeScheduler, merge, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(NoMergeScheduler, t_NoMergeScheduler, ::org::apache::lucene::index::MergeScheduler, NoMergeScheduler, abstract_init, 0, 0, 0, 0, 0);

        void t_NoMergeScheduler::install(PyObject *module)
        {
          installType(&PY_TYPE(NoMergeScheduler), module, "NoMergeScheduler", 0);
        }

        void t_NoMergeScheduler::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(NoMergeScheduler).tp_dict, "class_", make_descriptor(NoMergeScheduler::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(NoMergeScheduler).tp_dict, "wrapfn_", make_descriptor(t_NoMergeScheduler::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(NoMergeScheduler).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(NoMergeScheduler::initializeClass);
          PyDict_SetItemString(PY_TYPE(NoMergeScheduler).tp_dict, "INSTANCE", make_descriptor(::org::apache::lucene::index::t_MergeScheduler::wrap_Object(*NoMergeScheduler::INSTANCE)));
        }

        static PyObject *t_NoMergeScheduler_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, NoMergeScheduler::initializeClass, 1)))
            return NULL;
          return t_NoMergeScheduler::wrap_Object(NoMergeScheduler(((t_NoMergeScheduler *) arg)->object.this$));
        }
        static PyObject *t_NoMergeScheduler_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, NoMergeScheduler::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_NoMergeScheduler_clone(t_NoMergeScheduler *self)
        {
          ::org::apache::lucene::index::MergeScheduler result((jobject) NULL);
          OBJ_CALL(result = self->object.clone());
          return ::org::apache::lucene::index::t_MergeScheduler::wrap_Object(result);
        }

        static PyObject *t_NoMergeScheduler_close(t_NoMergeScheduler *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.close());
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(NoMergeScheduler), (PyObject *) self, "close", args, 2);
        }

        static PyObject *t_NoMergeScheduler_merge(t_NoMergeScheduler *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexWriter a0((jobject) NULL);
          ::org::apache::lucene::index::MergeTrigger a1((jobject) NULL);
          PyTypeObject **p1;
          jboolean a2;

          if (!parseArgs(args, "kKZ", ::org::apache::lucene::index::IndexWriter::initializeClass, ::org::apache::lucene::index::MergeTrigger::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::index::t_MergeTrigger::parameters_, &a2))
          {
            OBJ_CALL(self->object.merge(a0, a1, a2));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(NoMergeScheduler), (PyObject *) self, "merge", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/DocumentStoredFieldVisitor.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "java/util/Set.h"
#include "org/apache/lucene/index/FieldInfo.h"
#include "org/apache/lucene/document/Document.h"
#include "org/apache/lucene/index/StoredFieldVisitor$Status.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *DocumentStoredFieldVisitor::class$ = NULL;
        jmethodID *DocumentStoredFieldVisitor::mids$ = NULL;
        bool DocumentStoredFieldVisitor::live$ = false;

        jclass DocumentStoredFieldVisitor::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/DocumentStoredFieldVisitor");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_init$_4dd4540c] = env->getMethodID(cls, "<init>", "([Ljava/lang/String;)V");
            mids$[mid_init$_fb4f2b26] = env->getMethodID(cls, "<init>", "(Ljava/util/Set;)V");
            mids$[mid_binaryField_f0c94359] = env->getMethodID(cls, "binaryField", "(Lorg/apache/lucene/index/FieldInfo;[B)V");
            mids$[mid_doubleField_59cb8283] = env->getMethodID(cls, "doubleField", "(Lorg/apache/lucene/index/FieldInfo;D)V");
            mids$[mid_floatField_04c0e245] = env->getMethodID(cls, "floatField", "(Lorg/apache/lucene/index/FieldInfo;F)V");
            mids$[mid_getDocument_005b06cf] = env->getMethodID(cls, "getDocument", "()Lorg/apache/lucene/document/Document;");
            mids$[mid_intField_d8ebe062] = env->getMethodID(cls, "intField", "(Lorg/apache/lucene/index/FieldInfo;I)V");
            mids$[mid_longField_54f2c7e9] = env->getMethodID(cls, "longField", "(Lorg/apache/lucene/index/FieldInfo;J)V");
            mids$[mid_needsField_be88ccfe] = env->getMethodID(cls, "needsField", "(Lorg/apache/lucene/index/FieldInfo;)Lorg/apache/lucene/index/StoredFieldVisitor$Status;");
            mids$[mid_stringField_20e02bfa] = env->getMethodID(cls, "stringField", "(Lorg/apache/lucene/index/FieldInfo;Ljava/lang/String;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        DocumentStoredFieldVisitor::DocumentStoredFieldVisitor() : ::org::apache::lucene::index::StoredFieldVisitor(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        DocumentStoredFieldVisitor::DocumentStoredFieldVisitor(const JArray< ::java::lang::String > & a0) : ::org::apache::lucene::index::StoredFieldVisitor(env->newObject(initializeClass, &mids$, mid_init$_4dd4540c, a0.this$)) {}

        DocumentStoredFieldVisitor::DocumentStoredFieldVisitor(const ::java::util::Set & a0) : ::org::apache::lucene::index::StoredFieldVisitor(env->newObject(initializeClass, &mids$, mid_init$_fb4f2b26, a0.this$)) {}

        void DocumentStoredFieldVisitor::binaryField(const ::org::apache::lucene::index::FieldInfo & a0, const JArray< jbyte > & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_binaryField_f0c94359], a0.this$, a1.this$);
        }

        void DocumentStoredFieldVisitor::doubleField(const ::org::apache::lucene::index::FieldInfo & a0, jdouble a1) const
        {
          env->callVoidMethod(this$, mids$[mid_doubleField_59cb8283], a0.this$, a1);
        }

        void DocumentStoredFieldVisitor::floatField(const ::org::apache::lucene::index::FieldInfo & a0, jfloat a1) const
        {
          env->callVoidMethod(this$, mids$[mid_floatField_04c0e245], a0.this$, a1);
        }

        ::org::apache::lucene::document::Document DocumentStoredFieldVisitor::getDocument() const
        {
          return ::org::apache::lucene::document::Document(env->callObjectMethod(this$, mids$[mid_getDocument_005b06cf]));
        }

        void DocumentStoredFieldVisitor::intField(const ::org::apache::lucene::index::FieldInfo & a0, jint a1) const
        {
          env->callVoidMethod(this$, mids$[mid_intField_d8ebe062], a0.this$, a1);
        }

        void DocumentStoredFieldVisitor::longField(const ::org::apache::lucene::index::FieldInfo & a0, jlong a1) const
        {
          env->callVoidMethod(this$, mids$[mid_longField_54f2c7e9], a0.this$, a1);
        }

        ::org::apache::lucene::index::StoredFieldVisitor$Status DocumentStoredFieldVisitor::needsField(const ::org::apache::lucene::index::FieldInfo & a0) const
        {
          return ::org::apache::lucene::index::StoredFieldVisitor$Status(env->callObjectMethod(this$, mids$[mid_needsField_be88ccfe], a0.this$));
        }

        void DocumentStoredFieldVisitor::stringField(const ::org::apache::lucene::index::FieldInfo & a0, const ::java::lang::String & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_stringField_20e02bfa], a0.this$, a1.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_DocumentStoredFieldVisitor_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DocumentStoredFieldVisitor_instance_(PyTypeObject *type, PyObject *arg);
        static int t_DocumentStoredFieldVisitor_init_(t_DocumentStoredFieldVisitor *self, PyObject *args, PyObject *kwds);
        static PyObject *t_DocumentStoredFieldVisitor_binaryField(t_DocumentStoredFieldVisitor *self, PyObject *args);
        static PyObject *t_DocumentStoredFieldVisitor_doubleField(t_DocumentStoredFieldVisitor *self, PyObject *args);
        static PyObject *t_DocumentStoredFieldVisitor_floatField(t_DocumentStoredFieldVisitor *self, PyObject *args);
        static PyObject *t_DocumentStoredFieldVisitor_getDocument(t_DocumentStoredFieldVisitor *self);
        static PyObject *t_DocumentStoredFieldVisitor_intField(t_DocumentStoredFieldVisitor *self, PyObject *args);
        static PyObject *t_DocumentStoredFieldVisitor_longField(t_DocumentStoredFieldVisitor *self, PyObject *args);
        static PyObject *t_DocumentStoredFieldVisitor_needsField(t_DocumentStoredFieldVisitor *self, PyObject *args);
        static PyObject *t_DocumentStoredFieldVisitor_stringField(t_DocumentStoredFieldVisitor *self, PyObject *args);
        static PyObject *t_DocumentStoredFieldVisitor_get__document(t_DocumentStoredFieldVisitor *self, void *data);
        static PyGetSetDef t_DocumentStoredFieldVisitor__fields_[] = {
          DECLARE_GET_FIELD(t_DocumentStoredFieldVisitor, document),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_DocumentStoredFieldVisitor__methods_[] = {
          DECLARE_METHOD(t_DocumentStoredFieldVisitor, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DocumentStoredFieldVisitor, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DocumentStoredFieldVisitor, binaryField, METH_VARARGS),
          DECLARE_METHOD(t_DocumentStoredFieldVisitor, doubleField, METH_VARARGS),
          DECLARE_METHOD(t_DocumentStoredFieldVisitor, floatField, METH_VARARGS),
          DECLARE_METHOD(t_DocumentStoredFieldVisitor, getDocument, METH_NOARGS),
          DECLARE_METHOD(t_DocumentStoredFieldVisitor, intField, METH_VARARGS),
          DECLARE_METHOD(t_DocumentStoredFieldVisitor, longField, METH_VARARGS),
          DECLARE_METHOD(t_DocumentStoredFieldVisitor, needsField, METH_VARARGS),
          DECLARE_METHOD(t_DocumentStoredFieldVisitor, stringField, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(DocumentStoredFieldVisitor, t_DocumentStoredFieldVisitor, ::org::apache::lucene::index::StoredFieldVisitor, DocumentStoredFieldVisitor, t_DocumentStoredFieldVisitor_init_, 0, 0, t_DocumentStoredFieldVisitor__fields_, 0, 0);

        void t_DocumentStoredFieldVisitor::install(PyObject *module)
        {
          installType(&PY_TYPE(DocumentStoredFieldVisitor), module, "DocumentStoredFieldVisitor", 0);
        }

        void t_DocumentStoredFieldVisitor::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(DocumentStoredFieldVisitor).tp_dict, "class_", make_descriptor(DocumentStoredFieldVisitor::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(DocumentStoredFieldVisitor).tp_dict, "wrapfn_", make_descriptor(t_DocumentStoredFieldVisitor::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(DocumentStoredFieldVisitor).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_DocumentStoredFieldVisitor_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, DocumentStoredFieldVisitor::initializeClass, 1)))
            return NULL;
          return t_DocumentStoredFieldVisitor::wrap_Object(DocumentStoredFieldVisitor(((t_DocumentStoredFieldVisitor *) arg)->object.this$));
        }
        static PyObject *t_DocumentStoredFieldVisitor_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, DocumentStoredFieldVisitor::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_DocumentStoredFieldVisitor_init_(t_DocumentStoredFieldVisitor *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              DocumentStoredFieldVisitor object((jobject) NULL);

              INT_CALL(object = DocumentStoredFieldVisitor());
              self->object = object;
              break;
            }
            goto err;
           case 1:
            {
              JArray< ::java::lang::String > a0((jobject) NULL);
              DocumentStoredFieldVisitor object((jobject) NULL);

              if (!parseArgs(args, "[s", &a0))
              {
                INT_CALL(object = DocumentStoredFieldVisitor(a0));
                self->object = object;
                break;
              }
            }
            {
              ::java::util::Set a0((jobject) NULL);
              PyTypeObject **p0;
              DocumentStoredFieldVisitor object((jobject) NULL);

              if (!parseArgs(args, "K", ::java::util::Set::initializeClass, &a0, &p0, ::java::util::t_Set::parameters_))
              {
                INT_CALL(object = DocumentStoredFieldVisitor(a0));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_DocumentStoredFieldVisitor_binaryField(t_DocumentStoredFieldVisitor *self, PyObject *args)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          JArray< jbyte > a1((jobject) NULL);

          if (!parseArgs(args, "k[B", ::org::apache::lucene::index::FieldInfo::initializeClass, &a0, &a1))
          {
            OBJ_CALL(self->object.binaryField(a0, a1));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(DocumentStoredFieldVisitor), (PyObject *) self, "binaryField", args, 2);
        }

        static PyObject *t_DocumentStoredFieldVisitor_doubleField(t_DocumentStoredFieldVisitor *self, PyObject *args)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          jdouble a1;

          if (!parseArgs(args, "kD", ::org::apache::lucene::index::FieldInfo::initializeClass, &a0, &a1))
          {
            OBJ_CALL(self->object.doubleField(a0, a1));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(DocumentStoredFieldVisitor), (PyObject *) self, "doubleField", args, 2);
        }

        static PyObject *t_DocumentStoredFieldVisitor_floatField(t_DocumentStoredFieldVisitor *self, PyObject *args)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          jfloat a1;

          if (!parseArgs(args, "kF", ::org::apache::lucene::index::FieldInfo::initializeClass, &a0, &a1))
          {
            OBJ_CALL(self->object.floatField(a0, a1));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(DocumentStoredFieldVisitor), (PyObject *) self, "floatField", args, 2);
        }

        static PyObject *t_DocumentStoredFieldVisitor_getDocument(t_DocumentStoredFieldVisitor *self)
        {
          ::org::apache::lucene::document::Document result((jobject) NULL);
          OBJ_CALL(result = self->object.getDocument());
          return ::org::apache::lucene::document::t_Document::wrap_Object(result);
        }

        static PyObject *t_DocumentStoredFieldVisitor_intField(t_DocumentStoredFieldVisitor *self, PyObject *args)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          jint a1;

          if (!parseArgs(args, "kI", ::org::apache::lucene::index::FieldInfo::initializeClass, &a0, &a1))
          {
            OBJ_CALL(self->object.intField(a0, a1));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(DocumentStoredFieldVisitor), (PyObject *) self, "intField", args, 2);
        }

        static PyObject *t_DocumentStoredFieldVisitor_longField(t_DocumentStoredFieldVisitor *self, PyObject *args)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          jlong a1;

          if (!parseArgs(args, "kJ", ::org::apache::lucene::index::FieldInfo::initializeClass, &a0, &a1))
          {
            OBJ_CALL(self->object.longField(a0, a1));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(DocumentStoredFieldVisitor), (PyObject *) self, "longField", args, 2);
        }

        static PyObject *t_DocumentStoredFieldVisitor_needsField(t_DocumentStoredFieldVisitor *self, PyObject *args)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          ::org::apache::lucene::index::StoredFieldVisitor$Status result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::FieldInfo::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.needsField(a0));
            return ::org::apache::lucene::index::t_StoredFieldVisitor$Status::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(DocumentStoredFieldVisitor), (PyObject *) self, "needsField", args, 2);
        }

        static PyObject *t_DocumentStoredFieldVisitor_stringField(t_DocumentStoredFieldVisitor *self, PyObject *args)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);

          if (!parseArgs(args, "ks", ::org::apache::lucene::index::FieldInfo::initializeClass, &a0, &a1))
          {
            OBJ_CALL(self->object.stringField(a0, a1));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(DocumentStoredFieldVisitor), (PyObject *) self, "stringField", args, 2);
        }

        static PyObject *t_DocumentStoredFieldVisitor_get__document(t_DocumentStoredFieldVisitor *self, void *data)
        {
          ::org::apache::lucene::document::Document value((jobject) NULL);
          OBJ_CALL(value = self->object.getDocument());
          return ::org::apache::lucene::document::t_Document::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/simple/SimpleQueryParser.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/BooleanClause$Occur.h"
#include "java/util/Map.h"
#include "java/lang/Float.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Query.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace simple {

          ::java::lang::Class *SimpleQueryParser::class$ = NULL;
          jmethodID *SimpleQueryParser::mids$ = NULL;
          bool SimpleQueryParser::live$ = false;
          jint SimpleQueryParser::AND_OPERATOR = (jint) 0;
          jint SimpleQueryParser::ESCAPE_OPERATOR = (jint) 0;
          jint SimpleQueryParser::FUZZY_OPERATOR = (jint) 0;
          jint SimpleQueryParser::NEAR_OPERATOR = (jint) 0;
          jint SimpleQueryParser::NOT_OPERATOR = (jint) 0;
          jint SimpleQueryParser::OR_OPERATOR = (jint) 0;
          jint SimpleQueryParser::PHRASE_OPERATOR = (jint) 0;
          jint SimpleQueryParser::PRECEDENCE_OPERATORS = (jint) 0;
          jint SimpleQueryParser::PREFIX_OPERATOR = (jint) 0;
          jint SimpleQueryParser::WHITESPACE_OPERATOR = (jint) 0;

          jclass SimpleQueryParser::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/simple/SimpleQueryParser");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_b5f2d646] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Analyzer;Ljava/util/Map;)V");
              mids$[mid_init$_55ca1e02] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Analyzer;Ljava/lang/String;)V");
              mids$[mid_init$_284c8124] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Analyzer;Ljava/util/Map;I)V");
              mids$[mid_getDefaultOperator_157730ed] = env->getMethodID(cls, "getDefaultOperator", "()Lorg/apache/lucene/search/BooleanClause$Occur;");
              mids$[mid_parse_fbed2634] = env->getMethodID(cls, "parse", "(Ljava/lang/String;)Lorg/apache/lucene/search/Query;");
              mids$[mid_setDefaultOperator_23bdc104] = env->getMethodID(cls, "setDefaultOperator", "(Lorg/apache/lucene/search/BooleanClause$Occur;)V");
              mids$[mid_simplify_1ffd0b56] = env->getMethodID(cls, "simplify", "(Lorg/apache/lucene/search/BooleanQuery;)Lorg/apache/lucene/search/Query;");
              mids$[mid_newPrefixQuery_fbed2634] = env->getMethodID(cls, "newPrefixQuery", "(Ljava/lang/String;)Lorg/apache/lucene/search/Query;");
              mids$[mid_newFuzzyQuery_936f6c82] = env->getMethodID(cls, "newFuzzyQuery", "(Ljava/lang/String;I)Lorg/apache/lucene/search/Query;");
              mids$[mid_newPhraseQuery_936f6c82] = env->getMethodID(cls, "newPhraseQuery", "(Ljava/lang/String;I)Lorg/apache/lucene/search/Query;");
              mids$[mid_newDefaultQuery_fbed2634] = env->getMethodID(cls, "newDefaultQuery", "(Ljava/lang/String;)Lorg/apache/lucene/search/Query;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              AND_OPERATOR = env->getStaticIntField(cls, "AND_OPERATOR");
              ESCAPE_OPERATOR = env->getStaticIntField(cls, "ESCAPE_OPERATOR");
              FUZZY_OPERATOR = env->getStaticIntField(cls, "FUZZY_OPERATOR");
              NEAR_OPERATOR = env->getStaticIntField(cls, "NEAR_OPERATOR");
              NOT_OPERATOR = env->getStaticIntField(cls, "NOT_OPERATOR");
              OR_OPERATOR = env->getStaticIntField(cls, "OR_OPERATOR");
              PHRASE_OPERATOR = env->getStaticIntField(cls, "PHRASE_OPERATOR");
              PRECEDENCE_OPERATORS = env->getStaticIntField(cls, "PRECEDENCE_OPERATORS");
              PREFIX_OPERATOR = env->getStaticIntField(cls, "PREFIX_OPERATOR");
              WHITESPACE_OPERATOR = env->getStaticIntField(cls, "WHITESPACE_OPERATOR");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SimpleQueryParser::SimpleQueryParser(const ::org::apache::lucene::analysis::Analyzer & a0, const ::java::util::Map & a1) : ::org::apache::lucene::util::QueryBuilder(env->newObject(initializeClass, &mids$, mid_init$_b5f2d646, a0.this$, a1.this$)) {}

          SimpleQueryParser::SimpleQueryParser(const ::org::apache::lucene::analysis::Analyzer & a0, const ::java::lang::String & a1) : ::org::apache::lucene::util::QueryBuilder(env->newObject(initializeClass, &mids$, mid_init$_55ca1e02, a0.this$, a1.this$)) {}

          SimpleQueryParser::SimpleQueryParser(const ::org::apache::lucene::analysis::Analyzer & a0, const ::java::util::Map & a1, jint a2) : ::org::apache::lucene::util::QueryBuilder(env->newObject(initializeClass, &mids$, mid_init$_284c8124, a0.this$, a1.this$, a2)) {}

          ::org::apache::lucene::search::BooleanClause$Occur SimpleQueryParser::getDefaultOperator() const
          {
            return ::org::apache::lucene::search::BooleanClause$Occur(env->callObjectMethod(this$, mids$[mid_getDefaultOperator_157730ed]));
          }

          ::org::apache::lucene::search::Query SimpleQueryParser::parse(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_parse_fbed2634], a0.this$));
          }

          void SimpleQueryParser::setDefaultOperator(const ::org::apache::lucene::search::BooleanClause$Occur & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setDefaultOperator_23bdc104], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace simple {
          static PyObject *t_SimpleQueryParser_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SimpleQueryParser_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SimpleQueryParser_init_(t_SimpleQueryParser *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SimpleQueryParser_getDefaultOperator(t_SimpleQueryParser *self);
          static PyObject *t_SimpleQueryParser_parse(t_SimpleQueryParser *self, PyObject *arg);
          static PyObject *t_SimpleQueryParser_setDefaultOperator(t_SimpleQueryParser *self, PyObject *arg);
          static PyObject *t_SimpleQueryParser_get__defaultOperator(t_SimpleQueryParser *self, void *data);
          static int t_SimpleQueryParser_set__defaultOperator(t_SimpleQueryParser *self, PyObject *arg, void *data);
          static PyGetSetDef t_SimpleQueryParser__fields_[] = {
            DECLARE_GETSET_FIELD(t_SimpleQueryParser, defaultOperator),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SimpleQueryParser__methods_[] = {
            DECLARE_METHOD(t_SimpleQueryParser, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SimpleQueryParser, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SimpleQueryParser, getDefaultOperator, METH_NOARGS),
            DECLARE_METHOD(t_SimpleQueryParser, parse, METH_O),
            DECLARE_METHOD(t_SimpleQueryParser, setDefaultOperator, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SimpleQueryParser, t_SimpleQueryParser, ::org::apache::lucene::util::QueryBuilder, SimpleQueryParser, t_SimpleQueryParser_init_, 0, 0, t_SimpleQueryParser__fields_, 0, 0);

          void t_SimpleQueryParser::install(PyObject *module)
          {
            installType(&PY_TYPE(SimpleQueryParser), module, "SimpleQueryParser", 0);
          }

          void t_SimpleQueryParser::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SimpleQueryParser).tp_dict, "class_", make_descriptor(SimpleQueryParser::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SimpleQueryParser).tp_dict, "wrapfn_", make_descriptor(t_SimpleQueryParser::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SimpleQueryParser).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(SimpleQueryParser::initializeClass);
            PyDict_SetItemString(PY_TYPE(SimpleQueryParser).tp_dict, "AND_OPERATOR", make_descriptor(SimpleQueryParser::AND_OPERATOR));
            PyDict_SetItemString(PY_TYPE(SimpleQueryParser).tp_dict, "ESCAPE_OPERATOR", make_descriptor(SimpleQueryParser::ESCAPE_OPERATOR));
            PyDict_SetItemString(PY_TYPE(SimpleQueryParser).tp_dict, "FUZZY_OPERATOR", make_descriptor(SimpleQueryParser::FUZZY_OPERATOR));
            PyDict_SetItemString(PY_TYPE(SimpleQueryParser).tp_dict, "NEAR_OPERATOR", make_descriptor(SimpleQueryParser::NEAR_OPERATOR));
            PyDict_SetItemString(PY_TYPE(SimpleQueryParser).tp_dict, "NOT_OPERATOR", make_descriptor(SimpleQueryParser::NOT_OPERATOR));
            PyDict_SetItemString(PY_TYPE(SimpleQueryParser).tp_dict, "OR_OPERATOR", make_descriptor(SimpleQueryParser::OR_OPERATOR));
            PyDict_SetItemString(PY_TYPE(SimpleQueryParser).tp_dict, "PHRASE_OPERATOR", make_descriptor(SimpleQueryParser::PHRASE_OPERATOR));
            PyDict_SetItemString(PY_TYPE(SimpleQueryParser).tp_dict, "PRECEDENCE_OPERATORS", make_descriptor(SimpleQueryParser::PRECEDENCE_OPERATORS));
            PyDict_SetItemString(PY_TYPE(SimpleQueryParser).tp_dict, "PREFIX_OPERATOR", make_descriptor(SimpleQueryParser::PREFIX_OPERATOR));
            PyDict_SetItemString(PY_TYPE(SimpleQueryParser).tp_dict, "WHITESPACE_OPERATOR", make_descriptor(SimpleQueryParser::WHITESPACE_OPERATOR));
          }

          static PyObject *t_SimpleQueryParser_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SimpleQueryParser::initializeClass, 1)))
              return NULL;
            return t_SimpleQueryParser::wrap_Object(SimpleQueryParser(((t_SimpleQueryParser *) arg)->object.this$));
          }
          static PyObject *t_SimpleQueryParser_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SimpleQueryParser::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SimpleQueryParser_init_(t_SimpleQueryParser *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
                ::java::util::Map a1((jobject) NULL);
                PyTypeObject **p1;
                SimpleQueryParser object((jobject) NULL);

                if (!parseArgs(args, "kK", ::org::apache::lucene::analysis::Analyzer::initializeClass, ::java::util::Map::initializeClass, &a0, &a1, &p1, ::java::util::t_Map::parameters_))
                {
                  INT_CALL(object = SimpleQueryParser(a0, a1));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                SimpleQueryParser object((jobject) NULL);

                if (!parseArgs(args, "ks", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = SimpleQueryParser(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
                ::java::util::Map a1((jobject) NULL);
                PyTypeObject **p1;
                jint a2;
                SimpleQueryParser object((jobject) NULL);

                if (!parseArgs(args, "kKI", ::org::apache::lucene::analysis::Analyzer::initializeClass, ::java::util::Map::initializeClass, &a0, &a1, &p1, ::java::util::t_Map::parameters_, &a2))
                {
                  INT_CALL(object = SimpleQueryParser(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SimpleQueryParser_getDefaultOperator(t_SimpleQueryParser *self)
          {
            ::org::apache::lucene::search::BooleanClause$Occur result((jobject) NULL);
            OBJ_CALL(result = self->object.getDefaultOperator());
            return ::org::apache::lucene::search::t_BooleanClause$Occur::wrap_Object(result);
          }

          static PyObject *t_SimpleQueryParser_parse(t_SimpleQueryParser *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.parse(a0));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "parse", arg);
            return NULL;
          }

          static PyObject *t_SimpleQueryParser_setDefaultOperator(t_SimpleQueryParser *self, PyObject *arg)
          {
            ::org::apache::lucene::search::BooleanClause$Occur a0((jobject) NULL);
            PyTypeObject **p0;

            if (!parseArg(arg, "K", ::org::apache::lucene::search::BooleanClause$Occur::initializeClass, &a0, &p0, ::org::apache::lucene::search::t_BooleanClause$Occur::parameters_))
            {
              OBJ_CALL(self->object.setDefaultOperator(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setDefaultOperator", arg);
            return NULL;
          }

          static PyObject *t_SimpleQueryParser_get__defaultOperator(t_SimpleQueryParser *self, void *data)
          {
            ::org::apache::lucene::search::BooleanClause$Occur value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultOperator());
            return ::org::apache::lucene::search::t_BooleanClause$Occur::wrap_Object(value);
          }
          static int t_SimpleQueryParser_set__defaultOperator(t_SimpleQueryParser *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::search::BooleanClause$Occur value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::search::BooleanClause$Occur::initializeClass, &value))
              {
                INT_CALL(self->object.setDefaultOperator(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "defaultOperator", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/StoredField.h"
#include "org/apache/lucene/document/FieldType.h"
#include "java/lang/String.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *StoredField::class$ = NULL;
        jmethodID *StoredField::mids$ = NULL;
        bool StoredField::live$ = false;
        ::org::apache::lucene::document::FieldType *StoredField::TYPE = NULL;

        jclass StoredField::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/StoredField");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_6e53ccc6] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;I)V");
            mids$[mid_init$_f0649ce1] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;F)V");
            mids$[mid_init$_4372eed5] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;J)V");
            mids$[mid_init$_493fce5f] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;D)V");
            mids$[mid_init$_97e62b21] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;[B)V");
            mids$[mid_init$_43cce44e] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/util/BytesRef;)V");
            mids$[mid_init$_4a264742] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/String;)V");
            mids$[mid_init$_eab5cd19] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;[BII)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            TYPE = new ::org::apache::lucene::document::FieldType(env->getStaticObjectField(cls, "TYPE", "Lorg/apache/lucene/document/FieldType;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        StoredField::StoredField(const ::java::lang::String & a0, jint a1) : ::org::apache::lucene::document::Field(env->newObject(initializeClass, &mids$, mid_init$_6e53ccc6, a0.this$, a1)) {}

        StoredField::StoredField(const ::java::lang::String & a0, jfloat a1) : ::org::apache::lucene::document::Field(env->newObject(initializeClass, &mids$, mid_init$_f0649ce1, a0.this$, a1)) {}

        StoredField::StoredField(const ::java::lang::String & a0, jlong a1) : ::org::apache::lucene::document::Field(env->newObject(initializeClass, &mids$, mid_init$_4372eed5, a0.this$, a1)) {}

        StoredField::StoredField(const ::java::lang::String & a0, jdouble a1) : ::org::apache::lucene::document::Field(env->newObject(initializeClass, &mids$, mid_init$_493fce5f, a0.this$, a1)) {}

        StoredField::StoredField(const ::java::lang::String & a0, const JArray< jbyte > & a1) : ::org::apache::lucene::document::Field(env->newObject(initializeClass, &mids$, mid_init$_97e62b21, a0.this$, a1.this$)) {}

        StoredField::StoredField(const ::java::lang::String & a0, const ::org::apache::lucene::util::BytesRef & a1) : ::org::apache::lucene::document::Field(env->newObject(initializeClass, &mids$, mid_init$_43cce44e, a0.this$, a1.this$)) {}

        StoredField::StoredField(const ::java::lang::String & a0, const ::java::lang::String & a1) : ::org::apache::lucene::document::Field(env->newObject(initializeClass, &mids$, mid_init$_4a264742, a0.this$, a1.this$)) {}

        StoredField::StoredField(const ::java::lang::String & a0, const JArray< jbyte > & a1, jint a2, jint a3) : ::org::apache::lucene::document::Field(env->newObject(initializeClass, &mids$, mid_init$_eab5cd19, a0.this$, a1.this$, a2, a3)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_StoredField_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_StoredField_instance_(PyTypeObject *type, PyObject *arg);
        static int t_StoredField_init_(t_StoredField *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_StoredField__methods_[] = {
          DECLARE_METHOD(t_StoredField, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_StoredField, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(StoredField, t_StoredField, ::org::apache::lucene::document::Field, StoredField, t_StoredField_init_, 0, 0, 0, 0, 0);

        void t_StoredField::install(PyObject *module)
        {
          installType(&PY_TYPE(StoredField), module, "StoredField", 0);
        }

        void t_StoredField::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(StoredField).tp_dict, "class_", make_descriptor(StoredField::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(StoredField).tp_dict, "wrapfn_", make_descriptor(t_StoredField::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(StoredField).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(StoredField::initializeClass);
          PyDict_SetItemString(PY_TYPE(StoredField).tp_dict, "TYPE", make_descriptor(::org::apache::lucene::document::t_FieldType::wrap_Object(*StoredField::TYPE)));
        }

        static PyObject *t_StoredField_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, StoredField::initializeClass, 1)))
            return NULL;
          return t_StoredField::wrap_Object(StoredField(((t_StoredField *) arg)->object.this$));
        }
        static PyObject *t_StoredField_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, StoredField::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_StoredField_init_(t_StoredField *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::java::lang::String a0((jobject) NULL);
              jint a1;
              StoredField object((jobject) NULL);

              if (!parseArgs(args, "sI", &a0, &a1))
              {
                INT_CALL(object = StoredField(a0, a1));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              jfloat a1;
              StoredField object((jobject) NULL);

              if (!parseArgs(args, "sF", &a0, &a1))
              {
                INT_CALL(object = StoredField(a0, a1));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              jlong a1;
              StoredField object((jobject) NULL);

              if (!parseArgs(args, "sJ", &a0, &a1))
              {
                INT_CALL(object = StoredField(a0, a1));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              jdouble a1;
              StoredField object((jobject) NULL);

              if (!parseArgs(args, "sD", &a0, &a1))
              {
                INT_CALL(object = StoredField(a0, a1));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              JArray< jbyte > a1((jobject) NULL);
              StoredField object((jobject) NULL);

              if (!parseArgs(args, "s[B", &a0, &a1))
              {
                INT_CALL(object = StoredField(a0, a1));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
              StoredField object((jobject) NULL);

              if (!parseArgs(args, "sk", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
              {
                INT_CALL(object = StoredField(a0, a1));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              StoredField object((jobject) NULL);

              if (!parseArgs(args, "ss", &a0, &a1))
              {
                INT_CALL(object = StoredField(a0, a1));
                self->object = object;
                break;
              }
            }
            goto err;
           case 4:
            {
              ::java::lang::String a0((jobject) NULL);
              JArray< jbyte > a1((jobject) NULL);
              jint a2;
              jint a3;
              StoredField object((jobject) NULL);

              if (!parseArgs(args, "s[BII", &a0, &a1, &a2, &a3))
              {
                INT_CALL(object = StoredField(a0, a1, a2, a3));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/Lock$With.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/store/Lock.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *Lock$With::class$ = NULL;
        jmethodID *Lock$With::mids$ = NULL;
        bool Lock$With::live$ = false;

        jclass Lock$With::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/Lock$With");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_6e48139c] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Lock;J)V");
            mids$[mid_run_846352c3] = env->getMethodID(cls, "run", "()Ljava/lang/Object;");
            mids$[mid_doBody_846352c3] = env->getMethodID(cls, "doBody", "()Ljava/lang/Object;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        Lock$With::Lock$With(const ::org::apache::lucene::store::Lock & a0, jlong a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_6e48139c, a0.this$, a1)) {}

        ::java::lang::Object Lock$With::run() const
        {
          return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_run_846352c3]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_Lock$With_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Lock$With_instance_(PyTypeObject *type, PyObject *arg);
        static int t_Lock$With_init_(t_Lock$With *self, PyObject *args, PyObject *kwds);
        static PyObject *t_Lock$With_run(t_Lock$With *self);

        static PyMethodDef t_Lock$With__methods_[] = {
          DECLARE_METHOD(t_Lock$With, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Lock$With, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Lock$With, run, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Lock$With, t_Lock$With, ::java::lang::Object, Lock$With, t_Lock$With_init_, 0, 0, 0, 0, 0);

        void t_Lock$With::install(PyObject *module)
        {
          installType(&PY_TYPE(Lock$With), module, "Lock$With", 0);
        }

        void t_Lock$With::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(Lock$With).tp_dict, "class_", make_descriptor(Lock$With::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(Lock$With).tp_dict, "wrapfn_", make_descriptor(t_Lock$With::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(Lock$With).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Lock$With_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Lock$With::initializeClass, 1)))
            return NULL;
          return t_Lock$With::wrap_Object(Lock$With(((t_Lock$With *) arg)->object.this$));
        }
        static PyObject *t_Lock$With_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Lock$With::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_Lock$With_init_(t_Lock$With *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::store::Lock a0((jobject) NULL);
          jlong a1;
          Lock$With object((jobject) NULL);

          if (!parseArgs(args, "kJ", ::org::apache::lucene::store::Lock::initializeClass, &a0, &a1))
          {
            INT_CALL(object = Lock$With(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_Lock$With_run(t_Lock$With *self)
        {
          ::java::lang::Object result((jobject) NULL);
          OBJ_CALL(result = self->object.run());
          return ::java::lang::t_Object::wrap_Object(result);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/wikipedia/WikipediaTokenizerFactory.h"
#include "org/apache/lucene/analysis/wikipedia/WikipediaTokenizer.h"
#include "java/lang/Class.h"
#include "java/io/Reader.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace wikipedia {

          ::java::lang::Class *WikipediaTokenizerFactory::class$ = NULL;
          jmethodID *WikipediaTokenizerFactory::mids$ = NULL;
          bool WikipediaTokenizerFactory::live$ = false;

          jclass WikipediaTokenizerFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/wikipedia/WikipediaTokenizerFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_8727c66d] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;)Lorg/apache/lucene/analysis/wikipedia/WikipediaTokenizer;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          WikipediaTokenizerFactory::WikipediaTokenizerFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenizerFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::wikipedia::WikipediaTokenizer WikipediaTokenizerFactory::create(const ::org::apache::lucene::util::AttributeFactory & a0, const ::java::io::Reader & a1) const
          {
            return ::org::apache::lucene::analysis::wikipedia::WikipediaTokenizer(env->callObjectMethod(this$, mids$[mid_create_8727c66d], a0.this$, a1.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace wikipedia {
          static PyObject *t_WikipediaTokenizerFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_WikipediaTokenizerFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_WikipediaTokenizerFactory_init_(t_WikipediaTokenizerFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_WikipediaTokenizerFactory_create(t_WikipediaTokenizerFactory *self, PyObject *args);

          static PyMethodDef t_WikipediaTokenizerFactory__methods_[] = {
            DECLARE_METHOD(t_WikipediaTokenizerFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_WikipediaTokenizerFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_WikipediaTokenizerFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(WikipediaTokenizerFactory, t_WikipediaTokenizerFactory, ::org::apache::lucene::analysis::util::TokenizerFactory, WikipediaTokenizerFactory, t_WikipediaTokenizerFactory_init_, 0, 0, 0, 0, 0);

          void t_WikipediaTokenizerFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(WikipediaTokenizerFactory), module, "WikipediaTokenizerFactory", 0);
          }

          void t_WikipediaTokenizerFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(WikipediaTokenizerFactory).tp_dict, "class_", make_descriptor(WikipediaTokenizerFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(WikipediaTokenizerFactory).tp_dict, "wrapfn_", make_descriptor(t_WikipediaTokenizerFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(WikipediaTokenizerFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_WikipediaTokenizerFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, WikipediaTokenizerFactory::initializeClass, 1)))
              return NULL;
            return t_WikipediaTokenizerFactory::wrap_Object(WikipediaTokenizerFactory(((t_WikipediaTokenizerFactory *) arg)->object.this$));
          }
          static PyObject *t_WikipediaTokenizerFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, WikipediaTokenizerFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_WikipediaTokenizerFactory_init_(t_WikipediaTokenizerFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            WikipediaTokenizerFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = WikipediaTokenizerFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_WikipediaTokenizerFactory_create(t_WikipediaTokenizerFactory *self, PyObject *args)
          {
            ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
            ::java::io::Reader a1((jobject) NULL);
            ::org::apache::lucene::analysis::wikipedia::WikipediaTokenizer result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.create(a0, a1));
              return ::org::apache::lucene::analysis::wikipedia::t_WikipediaTokenizer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(WikipediaTokenizerFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/surround/query/SpanNearClauseFactory.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/queryparser/surround/query/BasicQueryFactory.h"
#include "org/apache/lucene/search/spans/SpanQuery.h"
#include "org/apache/lucene/index/Term.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Query.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace query {

            ::java::lang::Class *SpanNearClauseFactory::class$ = NULL;
            jmethodID *SpanNearClauseFactory::mids$ = NULL;
            bool SpanNearClauseFactory::live$ = false;

            jclass SpanNearClauseFactory::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/surround/query/SpanNearClauseFactory");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_e15223d7] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/IndexReader;Ljava/lang/String;Lorg/apache/lucene/queryparser/surround/query/BasicQueryFactory;)V");
                mids$[mid_addSpanQuery_6e301113] = env->getMethodID(cls, "addSpanQuery", "(Lorg/apache/lucene/search/Query;)V");
                mids$[mid_addTermWeighted_286d05ee] = env->getMethodID(cls, "addTermWeighted", "(Lorg/apache/lucene/index/Term;F)V");
                mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
                mids$[mid_getBasicQueryFactory_d652c3af] = env->getMethodID(cls, "getBasicQueryFactory", "()Lorg/apache/lucene/queryparser/surround/query/BasicQueryFactory;");
                mids$[mid_getFieldName_14c7b5c5] = env->getMethodID(cls, "getFieldName", "()Ljava/lang/String;");
                mids$[mid_getIndexReader_94bbd010] = env->getMethodID(cls, "getIndexReader", "()Lorg/apache/lucene/index/IndexReader;");
                mids$[mid_makeSpanClause_d3aa0332] = env->getMethodID(cls, "makeSpanClause", "()Lorg/apache/lucene/search/spans/SpanQuery;");
                mids$[mid_size_54c6a179] = env->getMethodID(cls, "size", "()I");
                mids$[mid_addSpanQueryWeighted_3125e560] = env->getMethodID(cls, "addSpanQueryWeighted", "(Lorg/apache/lucene/search/spans/SpanQuery;F)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            SpanNearClauseFactory::SpanNearClauseFactory(const ::org::apache::lucene::index::IndexReader & a0, const ::java::lang::String & a1, const ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory & a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_e15223d7, a0.this$, a1.this$, a2.this$)) {}

            void SpanNearClauseFactory::addSpanQuery(const ::org::apache::lucene::search::Query & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_addSpanQuery_6e301113], a0.this$);
            }

            void SpanNearClauseFactory::addTermWeighted(const ::org::apache::lucene::index::Term & a0, jfloat a1) const
            {
              env->callVoidMethod(this$, mids$[mid_addTermWeighted_286d05ee], a0.this$, a1);
            }

            void SpanNearClauseFactory::clear() const
            {
              env->callVoidMethod(this$, mids$[mid_clear_54c6a166]);
            }

            ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory SpanNearClauseFactory::getBasicQueryFactory() const
            {
              return ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory(env->callObjectMethod(this$, mids$[mid_getBasicQueryFactory_d652c3af]));
            }

            ::java::lang::String SpanNearClauseFactory::getFieldName() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getFieldName_14c7b5c5]));
            }

            ::org::apache::lucene::index::IndexReader SpanNearClauseFactory::getIndexReader() const
            {
              return ::org::apache::lucene::index::IndexReader(env->callObjectMethod(this$, mids$[mid_getIndexReader_94bbd010]));
            }

            ::org::apache::lucene::search::spans::SpanQuery SpanNearClauseFactory::makeSpanClause() const
            {
              return ::org::apache::lucene::search::spans::SpanQuery(env->callObjectMethod(this$, mids$[mid_makeSpanClause_d3aa0332]));
            }

            jint SpanNearClauseFactory::size() const
            {
              return env->callIntMethod(this$, mids$[mid_size_54c6a179]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace query {
            static PyObject *t_SpanNearClauseFactory_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_SpanNearClauseFactory_instance_(PyTypeObject *type, PyObject *arg);
            static int t_SpanNearClauseFactory_init_(t_SpanNearClauseFactory *self, PyObject *args, PyObject *kwds);
            static PyObject *t_SpanNearClauseFactory_addSpanQuery(t_SpanNearClauseFactory *self, PyObject *arg);
            static PyObject *t_SpanNearClauseFactory_addTermWeighted(t_SpanNearClauseFactory *self, PyObject *args);
            static PyObject *t_SpanNearClauseFactory_clear(t_SpanNearClauseFactory *self);
            static PyObject *t_SpanNearClauseFactory_getBasicQueryFactory(t_SpanNearClauseFactory *self);
            static PyObject *t_SpanNearClauseFactory_getFieldName(t_SpanNearClauseFactory *self);
            static PyObject *t_SpanNearClauseFactory_getIndexReader(t_SpanNearClauseFactory *self);
            static PyObject *t_SpanNearClauseFactory_makeSpanClause(t_SpanNearClauseFactory *self);
            static PyObject *t_SpanNearClauseFactory_size(t_SpanNearClauseFactory *self);
            static PyObject *t_SpanNearClauseFactory_get__basicQueryFactory(t_SpanNearClauseFactory *self, void *data);
            static PyObject *t_SpanNearClauseFactory_get__fieldName(t_SpanNearClauseFactory *self, void *data);
            static PyObject *t_SpanNearClauseFactory_get__indexReader(t_SpanNearClauseFactory *self, void *data);
            static PyGetSetDef t_SpanNearClauseFactory__fields_[] = {
              DECLARE_GET_FIELD(t_SpanNearClauseFactory, basicQueryFactory),
              DECLARE_GET_FIELD(t_SpanNearClauseFactory, fieldName),
              DECLARE_GET_FIELD(t_SpanNearClauseFactory, indexReader),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_SpanNearClauseFactory__methods_[] = {
              DECLARE_METHOD(t_SpanNearClauseFactory, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SpanNearClauseFactory, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SpanNearClauseFactory, addSpanQuery, METH_O),
              DECLARE_METHOD(t_SpanNearClauseFactory, addTermWeighted, METH_VARARGS),
              DECLARE_METHOD(t_SpanNearClauseFactory, clear, METH_NOARGS),
              DECLARE_METHOD(t_SpanNearClauseFactory, getBasicQueryFactory, METH_NOARGS),
              DECLARE_METHOD(t_SpanNearClauseFactory, getFieldName, METH_NOARGS),
              DECLARE_METHOD(t_SpanNearClauseFactory, getIndexReader, METH_NOARGS),
              DECLARE_METHOD(t_SpanNearClauseFactory, makeSpanClause, METH_NOARGS),
              DECLARE_METHOD(t_SpanNearClauseFactory, size, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(SpanNearClauseFactory, t_SpanNearClauseFactory, ::java::lang::Object, SpanNearClauseFactory, t_SpanNearClauseFactory_init_, 0, 0, t_SpanNearClauseFactory__fields_, 0, 0);

            void t_SpanNearClauseFactory::install(PyObject *module)
            {
              installType(&PY_TYPE(SpanNearClauseFactory), module, "SpanNearClauseFactory", 0);
            }

            void t_SpanNearClauseFactory::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(SpanNearClauseFactory).tp_dict, "class_", make_descriptor(SpanNearClauseFactory::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(SpanNearClauseFactory).tp_dict, "wrapfn_", make_descriptor(t_SpanNearClauseFactory::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(SpanNearClauseFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_SpanNearClauseFactory_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, SpanNearClauseFactory::initializeClass, 1)))
                return NULL;
              return t_SpanNearClauseFactory::wrap_Object(SpanNearClauseFactory(((t_SpanNearClauseFactory *) arg)->object.this$));
            }
            static PyObject *t_SpanNearClauseFactory_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, SpanNearClauseFactory::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_SpanNearClauseFactory_init_(t_SpanNearClauseFactory *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory a2((jobject) NULL);
              SpanNearClauseFactory object((jobject) NULL);

              if (!parseArgs(args, "ksk", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = SpanNearClauseFactory(a0, a1, a2));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_SpanNearClauseFactory_addSpanQuery(t_SpanNearClauseFactory *self, PyObject *arg)
            {
              ::org::apache::lucene::search::Query a0((jobject) NULL);

              if (!parseArg(arg, "k", ::org::apache::lucene::search::Query::initializeClass, &a0))
              {
                OBJ_CALL(self->object.addSpanQuery(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "addSpanQuery", arg);
              return NULL;
            }

            static PyObject *t_SpanNearClauseFactory_addTermWeighted(t_SpanNearClauseFactory *self, PyObject *args)
            {
              ::org::apache::lucene::index::Term a0((jobject) NULL);
              jfloat a1;

              if (!parseArgs(args, "kF", ::org::apache::lucene::index::Term::initializeClass, &a0, &a1))
              {
                OBJ_CALL(self->object.addTermWeighted(a0, a1));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "addTermWeighted", args);
              return NULL;
            }

            static PyObject *t_SpanNearClauseFactory_clear(t_SpanNearClauseFactory *self)
            {
              OBJ_CALL(self->object.clear());
              Py_RETURN_NONE;
            }

            static PyObject *t_SpanNearClauseFactory_getBasicQueryFactory(t_SpanNearClauseFactory *self)
            {
              ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory result((jobject) NULL);
              OBJ_CALL(result = self->object.getBasicQueryFactory());
              return ::org::apache::lucene::queryparser::surround::query::t_BasicQueryFactory::wrap_Object(result);
            }

            static PyObject *t_SpanNearClauseFactory_getFieldName(t_SpanNearClauseFactory *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.getFieldName());
              return j2p(result);
            }

            static PyObject *t_SpanNearClauseFactory_getIndexReader(t_SpanNearClauseFactory *self)
            {
              ::org::apache::lucene::index::IndexReader result((jobject) NULL);
              OBJ_CALL(result = self->object.getIndexReader());
              return ::org::apache::lucene::index::t_IndexReader::wrap_Object(result);
            }

            static PyObject *t_SpanNearClauseFactory_makeSpanClause(t_SpanNearClauseFactory *self)
            {
              ::org::apache::lucene::search::spans::SpanQuery result((jobject) NULL);
              OBJ_CALL(result = self->object.makeSpanClause());
              return ::org::apache::lucene::search::spans::t_SpanQuery::wrap_Object(result);
            }

            static PyObject *t_SpanNearClauseFactory_size(t_SpanNearClauseFactory *self)
            {
              jint result;
              OBJ_CALL(result = self->object.size());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_SpanNearClauseFactory_get__basicQueryFactory(t_SpanNearClauseFactory *self, void *data)
            {
              ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory value((jobject) NULL);
              OBJ_CALL(value = self->object.getBasicQueryFactory());
              return ::org::apache::lucene::queryparser::surround::query::t_BasicQueryFactory::wrap_Object(value);
            }

            static PyObject *t_SpanNearClauseFactory_get__fieldName(t_SpanNearClauseFactory *self, void *data)
            {
              ::java::lang::String value((jobject) NULL);
              OBJ_CALL(value = self->object.getFieldName());
              return j2p(value);
            }

            static PyObject *t_SpanNearClauseFactory_get__indexReader(t_SpanNearClauseFactory *self, void *data)
            {
              ::org::apache::lucene::index::IndexReader value((jobject) NULL);
              OBJ_CALL(value = self->object.getIndexReader());
              return ::org::apache::lucene::index::t_IndexReader::wrap_Object(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/pylucene/queryparser/classic/PythonMultiFieldQueryParser.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/classic/ParseException.h"
#include "java/util/List.h"
#include "java/lang/Throwable.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Query.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace queryparser {
        namespace classic {

          ::java::lang::Class *PythonMultiFieldQueryParser::class$ = NULL;
          jmethodID *PythonMultiFieldQueryParser::mids$ = NULL;
          bool PythonMultiFieldQueryParser::live$ = false;

          jclass PythonMultiFieldQueryParser::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/pylucene/queryparser/classic/PythonMultiFieldQueryParser");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_822fc5c3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;[Ljava/lang/String;Lorg/apache/lucene/analysis/Analyzer;)V");
              mids$[mid_finalize_54c6a166] = env->getMethodID(cls, "finalize", "()V");
              mids$[mid_getBooleanQuery_3d190f1c] = env->getMethodID(cls, "getBooleanQuery", "(Ljava/util/List;Z)Lorg/apache/lucene/search/Query;");
              mids$[mid_getFieldQuery_bd696f55] = env->getMethodID(cls, "getFieldQuery", "(Ljava/lang/String;Ljava/lang/String;Z)Lorg/apache/lucene/search/Query;");
              mids$[mid_getFieldQuery_c7c8d9a8] = env->getMethodID(cls, "getFieldQuery", "(Ljava/lang/String;Ljava/lang/String;I)Lorg/apache/lucene/search/Query;");
              mids$[mid_getFieldQuery_quoted_bd696f55] = env->getMethodID(cls, "getFieldQuery_quoted", "(Ljava/lang/String;Ljava/lang/String;Z)Lorg/apache/lucene/search/Query;");
              mids$[mid_getFieldQuery_quoted_super_bd696f55] = env->getMethodID(cls, "getFieldQuery_quoted_super", "(Ljava/lang/String;Ljava/lang/String;Z)Lorg/apache/lucene/search/Query;");
              mids$[mid_getFieldQuery_slop_c7c8d9a8] = env->getMethodID(cls, "getFieldQuery_slop", "(Ljava/lang/String;Ljava/lang/String;I)Lorg/apache/lucene/search/Query;");
              mids$[mid_getFieldQuery_slop_super_c7c8d9a8] = env->getMethodID(cls, "getFieldQuery_slop_super", "(Ljava/lang/String;Ljava/lang/String;I)Lorg/apache/lucene/search/Query;");
              mids$[mid_getFuzzyQuery_45995161] = env->getMethodID(cls, "getFuzzyQuery", "(Ljava/lang/String;Ljava/lang/String;F)Lorg/apache/lucene/search/Query;");
              mids$[mid_getPrefixQuery_38d6e77e] = env->getMethodID(cls, "getPrefixQuery", "(Ljava/lang/String;Ljava/lang/String;)Lorg/apache/lucene/search/Query;");
              mids$[mid_getRangeQuery_75fd45b6] = env->getMethodID(cls, "getRangeQuery", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ZZ)Lorg/apache/lucene/search/Query;");
              mids$[mid_getWildcardQuery_38d6e77e] = env->getMethodID(cls, "getWildcardQuery", "(Ljava/lang/String;Ljava/lang/String;)Lorg/apache/lucene/search/Query;");
              mids$[mid_pythonDecRef_54c6a166] = env->getMethodID(cls, "pythonDecRef", "()V");
              mids$[mid_pythonExtension_54c6a17a] = env->getMethodID(cls, "pythonExtension", "()J");
              mids$[mid_pythonExtension_0ee6df2f] = env->getMethodID(cls, "pythonExtension", "(J)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PythonMultiFieldQueryParser::PythonMultiFieldQueryParser(const ::org::apache::lucene::util::Version & a0, const JArray< ::java::lang::String > & a1, const ::org::apache::lucene::analysis::Analyzer & a2) : ::org::apache::lucene::queryparser::classic::MultiFieldQueryParser(env->newObject(initializeClass, &mids$, mid_init$_822fc5c3, a0.this$, a1.this$, a2.this$)) {}

          void PythonMultiFieldQueryParser::finalize() const
          {
            env->callVoidMethod(this$, mids$[mid_finalize_54c6a166]);
          }

          ::org::apache::lucene::search::Query PythonMultiFieldQueryParser::getBooleanQuery(const ::java::util::List & a0, jboolean a1) const
          {
            return ::org::apache::lucene::search::Query(env->callNonvirtualObjectMethod(this$, (jclass) ::org::apache::lucene::queryparser::classic::MultiFieldQueryParser::class$->this$, ::org::apache::lucene::queryparser::classic::QueryParserBase::mids$[::org::apache::lucene::queryparser::classic::QueryParserBase::mid_getBooleanQuery_3d190f1c], a0.this$, a1));
          }

          ::org::apache::lucene::search::Query PythonMultiFieldQueryParser::getFieldQuery(const ::java::lang::String & a0, const ::java::lang::String & a1, jboolean a2) const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_getFieldQuery_bd696f55], a0.this$, a1.this$, a2));
          }

          ::org::apache::lucene::search::Query PythonMultiFieldQueryParser::getFieldQuery(const ::java::lang::String & a0, const ::java::lang::String & a1, jint a2) const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_getFieldQuery_c7c8d9a8], a0.this$, a1.this$, a2));
          }

          ::org::apache::lucene::search::Query PythonMultiFieldQueryParser::getFieldQuery_quoted_super(const ::java::lang::String & a0, const ::java::lang::String & a1, jboolean a2) const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_getFieldQuery_quoted_super_bd696f55], a0.this$, a1.this$, a2));
          }

          ::org::apache::lucene::search::Query PythonMultiFieldQueryParser::getFieldQuery_slop_super(const ::java::lang::String & a0, const ::java::lang::String & a1, jint a2) const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_getFieldQuery_slop_super_c7c8d9a8], a0.this$, a1.this$, a2));
          }

          ::org::apache::lucene::search::Query PythonMultiFieldQueryParser::getFuzzyQuery(const ::java::lang::String & a0, const ::java::lang::String & a1, jfloat a2) const
          {
            return ::org::apache::lucene::search::Query(env->callNonvirtualObjectMethod(this$, (jclass) ::org::apache::lucene::queryparser::classic::MultiFieldQueryParser::class$->this$, ::org::apache::lucene::queryparser::classic::MultiFieldQueryParser::mids$[::org::apache::lucene::queryparser::classic::MultiFieldQueryParser::mid_getFuzzyQuery_45995161], a0.this$, a1.this$, a2));
          }

          ::org::apache::lucene::search::Query PythonMultiFieldQueryParser::getPrefixQuery(const ::java::lang::String & a0, const ::java::lang::String & a1) const
          {
            return ::org::apache::lucene::search::Query(env->callNonvirtualObjectMethod(this$, (jclass) ::org::apache::lucene::queryparser::classic::MultiFieldQueryParser::class$->this$, ::org::apache::lucene::queryparser::classic::MultiFieldQueryParser::mids$[::org::apache::lucene::queryparser::classic::MultiFieldQueryParser::mid_getPrefixQuery_38d6e77e], a0.this$, a1.this$));
          }

          ::org::apache::lucene::search::Query PythonMultiFieldQueryParser::getRangeQuery(const ::java::lang::String & a0, const ::java::lang::String & a1, const ::java::lang::String & a2, jboolean a3, jboolean a4) const
          {
            return ::org::apache::lucene::search::Query(env->callNonvirtualObjectMethod(this$, (jclass) ::org::apache::lucene::queryparser::classic::MultiFieldQueryParser::class$->this$, ::org::apache::lucene::queryparser::classic::MultiFieldQueryParser::mids$[::org::apache::lucene::queryparser::classic::MultiFieldQueryParser::mid_getRangeQuery_75fd45b6], a0.this$, a1.this$, a2.this$, a3, a4));
          }

          ::org::apache::lucene::search::Query PythonMultiFieldQueryParser::getWildcardQuery(const ::java::lang::String & a0, const ::java::lang::String & a1) const
          {
            return ::org::apache::lucene::search::Query(env->callNonvirtualObjectMethod(this$, (jclass) ::org::apache::lucene::queryparser::classic::MultiFieldQueryParser::class$->this$, ::org::apache::lucene::queryparser::classic::MultiFieldQueryParser::mids$[::org::apache::lucene::queryparser::classic::MultiFieldQueryParser::mid_getWildcardQuery_38d6e77e], a0.this$, a1.this$));
          }

          jlong PythonMultiFieldQueryParser::pythonExtension() const
          {
            return env->callLongMethod(this$, mids$[mid_pythonExtension_54c6a17a]);
          }

          void PythonMultiFieldQueryParser::pythonExtension(jlong a0) const
          {
            env->callVoidMethod(this$, mids$[mid_pythonExtension_0ee6df2f], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace queryparser {
        namespace classic {
          static PyObject *t_PythonMultiFieldQueryParser_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PythonMultiFieldQueryParser_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PythonMultiFieldQueryParser_init_(t_PythonMultiFieldQueryParser *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PythonMultiFieldQueryParser_finalize(t_PythonMultiFieldQueryParser *self);
          static PyObject *t_PythonMultiFieldQueryParser_getBooleanQuery(t_PythonMultiFieldQueryParser *self, PyObject *args);
          static PyObject *t_PythonMultiFieldQueryParser_getFieldQuery(t_PythonMultiFieldQueryParser *self, PyObject *args);
          static PyObject *t_PythonMultiFieldQueryParser_getFieldQuery_quoted_super(t_PythonMultiFieldQueryParser *self, PyObject *args);
          static PyObject *t_PythonMultiFieldQueryParser_getFieldQuery_slop_super(t_PythonMultiFieldQueryParser *self, PyObject *args);
          static PyObject *t_PythonMultiFieldQueryParser_getFuzzyQuery(t_PythonMultiFieldQueryParser *self, PyObject *args);
          static PyObject *t_PythonMultiFieldQueryParser_getPrefixQuery(t_PythonMultiFieldQueryParser *self, PyObject *args);
          static PyObject *t_PythonMultiFieldQueryParser_getRangeQuery(t_PythonMultiFieldQueryParser *self, PyObject *args);
          static PyObject *t_PythonMultiFieldQueryParser_getWildcardQuery(t_PythonMultiFieldQueryParser *self, PyObject *args);
          static PyObject *t_PythonMultiFieldQueryParser_pythonExtension(t_PythonMultiFieldQueryParser *self, PyObject *args);
          static jobject JNICALL t_PythonMultiFieldQueryParser_getBooleanQuery0(JNIEnv *jenv, jobject jobj, jobject a0, jboolean a1);
          static jobject JNICALL t_PythonMultiFieldQueryParser_getFieldQuery_quoted1(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1, jboolean a2);
          static jobject JNICALL t_PythonMultiFieldQueryParser_getFieldQuery_slop2(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1, jint a2);
          static jobject JNICALL t_PythonMultiFieldQueryParser_getFuzzyQuery3(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1, jfloat a2);
          static jobject JNICALL t_PythonMultiFieldQueryParser_getPrefixQuery4(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1);
          static jobject JNICALL t_PythonMultiFieldQueryParser_getRangeQuery5(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1, jobject a2, jboolean a3, jboolean a4);
          static jobject JNICALL t_PythonMultiFieldQueryParser_getWildcardQuery6(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1);
          static void JNICALL t_PythonMultiFieldQueryParser_pythonDecRef7(JNIEnv *jenv, jobject jobj);
          static PyObject *t_PythonMultiFieldQueryParser_get__self(t_PythonMultiFieldQueryParser *self, void *data);
          static PyGetSetDef t_PythonMultiFieldQueryParser__fields_[] = {
            DECLARE_GET_FIELD(t_PythonMultiFieldQueryParser, self),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_PythonMultiFieldQueryParser__methods_[] = {
            DECLARE_METHOD(t_PythonMultiFieldQueryParser, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PythonMultiFieldQueryParser, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PythonMultiFieldQueryParser, finalize, METH_NOARGS),
            DECLARE_METHOD(t_PythonMultiFieldQueryParser, getBooleanQuery, METH_VARARGS),
            DECLARE_METHOD(t_PythonMultiFieldQueryParser, getFieldQuery, METH_VARARGS),
            DECLARE_METHOD(t_PythonMultiFieldQueryParser, getFieldQuery_quoted_super, METH_VARARGS),
            DECLARE_METHOD(t_PythonMultiFieldQueryParser, getFieldQuery_slop_super, METH_VARARGS),
            DECLARE_METHOD(t_PythonMultiFieldQueryParser, getFuzzyQuery, METH_VARARGS),
            DECLARE_METHOD(t_PythonMultiFieldQueryParser, getPrefixQuery, METH_VARARGS),
            DECLARE_METHOD(t_PythonMultiFieldQueryParser, getRangeQuery, METH_VARARGS),
            DECLARE_METHOD(t_PythonMultiFieldQueryParser, getWildcardQuery, METH_VARARGS),
            DECLARE_METHOD(t_PythonMultiFieldQueryParser, pythonExtension, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PythonMultiFieldQueryParser, t_PythonMultiFieldQueryParser, ::org::apache::lucene::queryparser::classic::MultiFieldQueryParser, PythonMultiFieldQueryParser, t_PythonMultiFieldQueryParser_init_, 0, 0, t_PythonMultiFieldQueryParser__fields_, 0, 0);

          void t_PythonMultiFieldQueryParser::install(PyObject *module)
          {
            installType(&PY_TYPE(PythonMultiFieldQueryParser), module, "PythonMultiFieldQueryParser", 1);
          }

          void t_PythonMultiFieldQueryParser::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PythonMultiFieldQueryParser).tp_dict, "class_", make_descriptor(PythonMultiFieldQueryParser::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PythonMultiFieldQueryParser).tp_dict, "wrapfn_", make_descriptor(t_PythonMultiFieldQueryParser::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PythonMultiFieldQueryParser).tp_dict, "boxfn_", make_descriptor(boxObject));
            jclass cls = env->getClass(PythonMultiFieldQueryParser::initializeClass);
            JNINativeMethod methods[] = {
              { "getBooleanQuery", "(Ljava/util/List;Z)Lorg/apache/lucene/search/Query;", (void *) t_PythonMultiFieldQueryParser_getBooleanQuery0 },
              { "getFieldQuery_quoted", "(Ljava/lang/String;Ljava/lang/String;Z)Lorg/apache/lucene/search/Query;", (void *) t_PythonMultiFieldQueryParser_getFieldQuery_quoted1 },
              { "getFieldQuery_slop", "(Ljava/lang/String;Ljava/lang/String;I)Lorg/apache/lucene/search/Query;", (void *) t_PythonMultiFieldQueryParser_getFieldQuery_slop2 },
              { "getFuzzyQuery", "(Ljava/lang/String;Ljava/lang/String;F)Lorg/apache/lucene/search/Query;", (void *) t_PythonMultiFieldQueryParser_getFuzzyQuery3 },
              { "getPrefixQuery", "(Ljava/lang/String;Ljava/lang/String;)Lorg/apache/lucene/search/Query;", (void *) t_PythonMultiFieldQueryParser_getPrefixQuery4 },
              { "getRangeQuery", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ZZ)Lorg/apache/lucene/search/Query;", (void *) t_PythonMultiFieldQueryParser_getRangeQuery5 },
              { "getWildcardQuery", "(Ljava/lang/String;Ljava/lang/String;)Lorg/apache/lucene/search/Query;", (void *) t_PythonMultiFieldQueryParser_getWildcardQuery6 },
              { "pythonDecRef", "()V", (void *) t_PythonMultiFieldQueryParser_pythonDecRef7 },
            };
            env->registerNatives(cls, methods, 8);
          }

          static PyObject *t_PythonMultiFieldQueryParser_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PythonMultiFieldQueryParser::initializeClass, 1)))
              return NULL;
            return t_PythonMultiFieldQueryParser::wrap_Object(PythonMultiFieldQueryParser(((t_PythonMultiFieldQueryParser *) arg)->object.this$));
          }
          static PyObject *t_PythonMultiFieldQueryParser_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PythonMultiFieldQueryParser::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PythonMultiFieldQueryParser_init_(t_PythonMultiFieldQueryParser *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::util::Version a0((jobject) NULL);
            JArray< ::java::lang::String > a1((jobject) NULL);
            ::org::apache::lucene::analysis::Analyzer a2((jobject) NULL);
            PythonMultiFieldQueryParser object((jobject) NULL);

            if (!parseArgs(args, "k[sk", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1, &a2))
            {
              INT_CALL(object = PythonMultiFieldQueryParser(a0, a1, a2));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            Py_INCREF((PyObject *) self);
            self->object.pythonExtension((jlong) (Py_intptr_t) (void *) self);

            return 0;
          }

          static PyObject *t_PythonMultiFieldQueryParser_finalize(t_PythonMultiFieldQueryParser *self)
          {
            OBJ_CALL(self->object.finalize());
            Py_RETURN_NONE;
          }

          static PyObject *t_PythonMultiFieldQueryParser_getBooleanQuery(t_PythonMultiFieldQueryParser *self, PyObject *args)
          {
            ::java::util::List a0((jobject) NULL);
            PyTypeObject **p0;
            jboolean a1;
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArgs(args, "KZ", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_, &a1))
            {
              OBJ_CALL(result = self->object.getBooleanQuery(a0, a1));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getBooleanQuery", args);
            return NULL;
          }

          static PyObject *t_PythonMultiFieldQueryParser_getFieldQuery(t_PythonMultiFieldQueryParser *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 3:
              {
                ::java::lang::String a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                jboolean a2;
                ::org::apache::lucene::search::Query result((jobject) NULL);

                if (!parseArgs(args, "ssZ", &a0, &a1, &a2))
                {
                  OBJ_CALL(result = self->object.getFieldQuery(a0, a1, a2));
                  return ::org::apache::lucene::search::t_Query::wrap_Object(result);
                }
              }
              {
                ::java::lang::String a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                jint a2;
                ::org::apache::lucene::search::Query result((jobject) NULL);

                if (!parseArgs(args, "ssI", &a0, &a1, &a2))
                {
                  OBJ_CALL(result = self->object.getFieldQuery(a0, a1, a2));
                  return ::org::apache::lucene::search::t_Query::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "getFieldQuery", args);
            return NULL;
          }

          static PyObject *t_PythonMultiFieldQueryParser_getFieldQuery_quoted_super(t_PythonMultiFieldQueryParser *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            jboolean a2;
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArgs(args, "ssZ", &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.getFieldQuery_quoted_super(a0, a1, a2));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getFieldQuery_quoted_super", args);
            return NULL;
          }

          static PyObject *t_PythonMultiFieldQueryParser_getFieldQuery_slop_super(t_PythonMultiFieldQueryParser *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            jint a2;
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArgs(args, "ssI", &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.getFieldQuery_slop_super(a0, a1, a2));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getFieldQuery_slop_super", args);
            return NULL;
          }

          static PyObject *t_PythonMultiFieldQueryParser_getFuzzyQuery(t_PythonMultiFieldQueryParser *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            jfloat a2;
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArgs(args, "ssF", &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.getFuzzyQuery(a0, a1, a2));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getFuzzyQuery", args);
            return NULL;
          }

          static PyObject *t_PythonMultiFieldQueryParser_getPrefixQuery(t_PythonMultiFieldQueryParser *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArgs(args, "ss", &a0, &a1))
            {
              OBJ_CALL(result = self->object.getPrefixQuery(a0, a1));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getPrefixQuery", args);
            return NULL;
          }

          static PyObject *t_PythonMultiFieldQueryParser_getRangeQuery(t_PythonMultiFieldQueryParser *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            ::java::lang::String a2((jobject) NULL);
            jboolean a3;
            jboolean a4;
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArgs(args, "sssZZ", &a0, &a1, &a2, &a3, &a4))
            {
              OBJ_CALL(result = self->object.getRangeQuery(a0, a1, a2, a3, a4));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getRangeQuery", args);
            return NULL;
          }

          static PyObject *t_PythonMultiFieldQueryParser_getWildcardQuery(t_PythonMultiFieldQueryParser *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArgs(args, "ss", &a0, &a1))
            {
              OBJ_CALL(result = self->object.getWildcardQuery(a0, a1));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getWildcardQuery", args);
            return NULL;
          }

          static PyObject *t_PythonMultiFieldQueryParser_pythonExtension(t_PythonMultiFieldQueryParser *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                jlong result;
                OBJ_CALL(result = self->object.pythonExtension());
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
              break;
             case 1:
              {
                jlong a0;

                if (!parseArgs(args, "J", &a0))
                {
                  OBJ_CALL(self->object.pythonExtension(a0));
                  Py_RETURN_NONE;
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "pythonExtension", args);
            return NULL;
          }

          static jobject JNICALL t_PythonMultiFieldQueryParser_getBooleanQuery0(JNIEnv *jenv, jobject jobj, jobject a0, jboolean a1)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonMultiFieldQueryParser::mids$[PythonMultiFieldQueryParser::mid_pythonExtension_54c6a17a]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
            PythonGIL gil(jenv);
            ::org::apache::lucene::search::Query value((jobject) NULL);
            PyObject *o0 = ::java::util::t_List::wrap_Object(::java::util::List(a0));
            PyObject *o1 = (a1 ? Py_True : Py_False);
            PyObject *result = PyObject_CallMethod(obj, "getBooleanQuery", "OO", o0, o1);
            Py_DECREF(o0);
            if (!result)
              throwPythonError();
            else if (parseArg(result, "k", ::org::apache::lucene::search::Query::initializeClass, &value))
            {
              throwTypeError("getBooleanQuery", result);
              Py_DECREF(result);
            }
            else
            {
              jobj = jenv->NewLocalRef(value.this$);
              Py_DECREF(result);
              return jobj;
            }

            return (jobject) NULL;
          }

          static jobject JNICALL t_PythonMultiFieldQueryParser_getFieldQuery_quoted1(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1, jboolean a2)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonMultiFieldQueryParser::mids$[PythonMultiFieldQueryParser::mid_pythonExtension_54c6a17a]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
            PythonGIL gil(jenv);
            ::org::apache::lucene::search::Query value((jobject) NULL);
            PyObject *o0 = env->fromJString((jstring) a0, 0);
            PyObject *o1 = env->fromJString((jstring) a1, 0);
            PyObject *o2 = (a2 ? Py_True : Py_False);
            PyObject *result = PyObject_CallMethod(obj, "getFieldQuery_quoted", "OOO", o0, o1, o2);
            Py_DECREF(o0);
            Py_DECREF(o1);
            if (!result)
              throwPythonError();
            else if (parseArg(result, "k", ::org::apache::lucene::search::Query::initializeClass, &value))
            {
              throwTypeError("getFieldQuery_quoted", result);
              Py_DECREF(result);
            }
            else
            {
              jobj = jenv->NewLocalRef(value.this$);
              Py_DECREF(result);
              return jobj;
            }

            return (jobject) NULL;
          }

          static jobject JNICALL t_PythonMultiFieldQueryParser_getFieldQuery_slop2(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1, jint a2)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonMultiFieldQueryParser::mids$[PythonMultiFieldQueryParser::mid_pythonExtension_54c6a17a]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
            PythonGIL gil(jenv);
            ::org::apache::lucene::search::Query value((jobject) NULL);
            PyObject *o0 = env->fromJString((jstring) a0, 0);
            PyObject *o1 = env->fromJString((jstring) a1, 0);
            PyObject *result = PyObject_CallMethod(obj, "getFieldQuery_slop", "OOi", o0, o1, (int) a2);
            Py_DECREF(o0);
            Py_DECREF(o1);
            if (!result)
              throwPythonError();
            else if (parseArg(result, "k", ::org::apache::lucene::search::Query::initializeClass, &value))
            {
              throwTypeError("getFieldQuery_slop", result);
              Py_DECREF(result);
            }
            else
            {
              jobj = jenv->NewLocalRef(value.this$);
              Py_DECREF(result);
              return jobj;
            }

            return (jobject) NULL;
          }

          static jobject JNICALL t_PythonMultiFieldQueryParser_getFuzzyQuery3(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1, jfloat a2)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonMultiFieldQueryParser::mids$[PythonMultiFieldQueryParser::mid_pythonExtension_54c6a17a]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
            PythonGIL gil(jenv);
            ::org::apache::lucene::search::Query value((jobject) NULL);
            PyObject *o0 = env->fromJString((jstring) a0, 0);
            PyObject *o1 = env->fromJString((jstring) a1, 0);
            PyObject *result = PyObject_CallMethod(obj, "getFuzzyQuery", "OOf", o0, o1, (float) a2);
            Py_DECREF(o0);
            Py_DECREF(o1);
            if (!result)
              throwPythonError();
            else if (parseArg(result, "k", ::org::apache::lucene::search::Query::initializeClass, &value))
            {
              throwTypeError("getFuzzyQuery", result);
              Py_DECREF(result);
            }
            else
            {
              jobj = jenv->NewLocalRef(value.this$);
              Py_DECREF(result);
              return jobj;
            }

            return (jobject) NULL;
          }

          static jobject JNICALL t_PythonMultiFieldQueryParser_getPrefixQuery4(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonMultiFieldQueryParser::mids$[PythonMultiFieldQueryParser::mid_pythonExtension_54c6a17a]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
            PythonGIL gil(jenv);
            ::org::apache::lucene::search::Query value((jobject) NULL);
            PyObject *o0 = env->fromJString((jstring) a0, 0);
            PyObject *o1 = env->fromJString((jstring) a1, 0);
            PyObject *result = PyObject_CallMethod(obj, "getPrefixQuery", "OO", o0, o1);
            Py_DECREF(o0);
            Py_DECREF(o1);
            if (!result)
              throwPythonError();
            else if (parseArg(result, "k", ::org::apache::lucene::search::Query::initializeClass, &value))
            {
              throwTypeError("getPrefixQuery", result);
              Py_DECREF(result);
            }
            else
            {
              jobj = jenv->NewLocalRef(value.this$);
              Py_DECREF(result);
              return jobj;
            }

            return (jobject) NULL;
          }

          static jobject JNICALL t_PythonMultiFieldQueryParser_getRangeQuery5(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1, jobject a2, jboolean a3, jboolean a4)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonMultiFieldQueryParser::mids$[PythonMultiFieldQueryParser::mid_pythonExtension_54c6a17a]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
            PythonGIL gil(jenv);
            ::org::apache::lucene::search::Query value((jobject) NULL);
            PyObject *o0 = env->fromJString((jstring) a0, 0);
            PyObject *o1 = env->fromJString((jstring) a1, 0);
            PyObject *o2 = env->fromJString((jstring) a2, 0);
            PyObject *o3 = (a3 ? Py_True : Py_False);
            PyObject *o4 = (a4 ? Py_True : Py_False);
            PyObject *result = PyObject_CallMethod(obj, "getRangeQuery", "OOOOO", o0, o1, o2, o3, o4);
            Py_DECREF(o0);
            Py_DECREF(o1);
            Py_DECREF(o2);
            if (!result)
              throwPythonError();
            else if (parseArg(result, "k", ::org::apache::lucene::search::Query::initializeClass, &value))
            {
              throwTypeError("getRangeQuery", result);
              Py_DECREF(result);
            }
            else
            {
              jobj = jenv->NewLocalRef(value.this$);
              Py_DECREF(result);
              return jobj;
            }

            return (jobject) NULL;
          }

          static jobject JNICALL t_PythonMultiFieldQueryParser_getWildcardQuery6(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonMultiFieldQueryParser::mids$[PythonMultiFieldQueryParser::mid_pythonExtension_54c6a17a]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
            PythonGIL gil(jenv);
            ::org::apache::lucene::search::Query value((jobject) NULL);
            PyObject *o0 = env->fromJString((jstring) a0, 0);
            PyObject *o1 = env->fromJString((jstring) a1, 0);
            PyObject *result = PyObject_CallMethod(obj, "getWildcardQuery", "OO", o0, o1);
            Py_DECREF(o0);
            Py_DECREF(o1);
            if (!result)
              throwPythonError();
            else if (parseArg(result, "k", ::org::apache::lucene::search::Query::initializeClass, &value))
            {
              throwTypeError("getWildcardQuery", result);
              Py_DECREF(result);
            }
            else
            {
              jobj = jenv->NewLocalRef(value.this$);
              Py_DECREF(result);
              return jobj;
            }

            return (jobject) NULL;
          }

          static void JNICALL t_PythonMultiFieldQueryParser_pythonDecRef7(JNIEnv *jenv, jobject jobj)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonMultiFieldQueryParser::mids$[PythonMultiFieldQueryParser::mid_pythonExtension_54c6a17a]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

            if (obj != NULL)
            {
              jenv->CallVoidMethod(jobj, PythonMultiFieldQueryParser::mids$[PythonMultiFieldQueryParser::mid_pythonExtension_0ee6df2f], (jlong) 0);
              env->finalizeObject(jenv, obj);
            }
          }

          static PyObject *t_PythonMultiFieldQueryParser_get__self(t_PythonMultiFieldQueryParser *self, void *data)
          {
            jlong ptr;
            OBJ_CALL(ptr = self->object.pythonExtension());
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

            if (obj != NULL)
            {
              Py_INCREF(obj);
              return obj;
            }
            else
              Py_RETURN_NONE;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/messages/Message.h"
#include "java/lang/String.h"
#include "java/util/Locale.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace messages {

            ::java::lang::Class *Message::class$ = NULL;
            jmethodID *Message::mids$ = NULL;
            bool Message::live$ = false;

            jclass Message::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/messages/Message");

                mids$ = new jmethodID[max_mid];
                mids$[mid_getArguments_94e49c77] = env->getMethodID(cls, "getArguments", "()[Ljava/lang/Object;");
                mids$[mid_getKey_14c7b5c5] = env->getMethodID(cls, "getKey", "()Ljava/lang/String;");
                mids$[mid_getLocalizedMessage_14c7b5c5] = env->getMethodID(cls, "getLocalizedMessage", "()Ljava/lang/String;");
                mids$[mid_getLocalizedMessage_c0fb304e] = env->getMethodID(cls, "getLocalizedMessage", "(Ljava/util/Locale;)Ljava/lang/String;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            JArray< ::java::lang::Object > Message::getArguments() const
            {
              return JArray< ::java::lang::Object >(env->callObjectMethod(this$, mids$[mid_getArguments_94e49c77]));
            }

            ::java::lang::String Message::getKey() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getKey_14c7b5c5]));
            }

            ::java::lang::String Message::getLocalizedMessage() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getLocalizedMessage_14c7b5c5]));
            }

            ::java::lang::String Message::getLocalizedMessage(const ::java::util::Locale & a0) const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getLocalizedMessage_c0fb304e], a0.this$));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace messages {
            static PyObject *t_Message_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_Message_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_Message_getArguments(t_Message *self);
            static PyObject *t_Message_getKey(t_Message *self);
            static PyObject *t_Message_getLocalizedMessage(t_Message *self, PyObject *args);
            static PyObject *t_Message_get__arguments(t_Message *self, void *data);
            static PyObject *t_Message_get__key(t_Message *self, void *data);
            static PyObject *t_Message_get__localizedMessage(t_Message *self, void *data);
            static PyGetSetDef t_Message__fields_[] = {
              DECLARE_GET_FIELD(t_Message, arguments),
              DECLARE_GET_FIELD(t_Message, key),
              DECLARE_GET_FIELD(t_Message, localizedMessage),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_Message__methods_[] = {
              DECLARE_METHOD(t_Message, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_Message, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_Message, getArguments, METH_NOARGS),
              DECLARE_METHOD(t_Message, getKey, METH_NOARGS),
              DECLARE_METHOD(t_Message, getLocalizedMessage, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(Message, t_Message, ::java::lang::Object, Message, abstract_init, 0, 0, t_Message__fields_, 0, 0);

            void t_Message::install(PyObject *module)
            {
              installType(&PY_TYPE(Message), module, "Message", 0);
            }

            void t_Message::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(Message).tp_dict, "class_", make_descriptor(Message::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(Message).tp_dict, "wrapfn_", make_descriptor(t_Message::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(Message).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_Message_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, Message::initializeClass, 1)))
                return NULL;
              return t_Message::wrap_Object(Message(((t_Message *) arg)->object.this$));
            }
            static PyObject *t_Message_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, Message::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_Message_getArguments(t_Message *self)
            {
              JArray< ::java::lang::Object > result((jobject) NULL);
              OBJ_CALL(result = self->object.getArguments());
              return JArray<jobject>(result.this$).wrap(::java::lang::t_Object::wrap_jobject);
            }

            static PyObject *t_Message_getKey(t_Message *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.getKey());
              return j2p(result);
            }

            static PyObject *t_Message_getLocalizedMessage(t_Message *self, PyObject *args)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 0:
                {
                  ::java::lang::String result((jobject) NULL);
                  OBJ_CALL(result = self->object.getLocalizedMessage());
                  return j2p(result);
                }
                break;
               case 1:
                {
                  ::java::util::Locale a0((jobject) NULL);
                  ::java::lang::String result((jobject) NULL);

                  if (!parseArgs(args, "k", ::java::util::Locale::initializeClass, &a0))
                  {
                    OBJ_CALL(result = self->object.getLocalizedMessage(a0));
                    return j2p(result);
                  }
                }
              }

              PyErr_SetArgsError((PyObject *) self, "getLocalizedMessage", args);
              return NULL;
            }

            static PyObject *t_Message_get__arguments(t_Message *self, void *data)
            {
              JArray< ::java::lang::Object > value((jobject) NULL);
              OBJ_CALL(value = self->object.getArguments());
              return JArray<jobject>(value.this$).wrap(::java::lang::t_Object::wrap_jobject);
            }

            static PyObject *t_Message_get__key(t_Message *self, void *data)
            {
              ::java::lang::String value((jobject) NULL);
              OBJ_CALL(value = self->object.getKey());
              return j2p(value);
            }

            static PyObject *t_Message_get__localizedMessage(t_Message *self, void *data)
            {
              ::java::lang::String value((jobject) NULL);
              OBJ_CALL(value = self->object.getLocalizedMessage());
              return j2p(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/fst/FST$BytesReader.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {

          ::java::lang::Class *FST$BytesReader::class$ = NULL;
          jmethodID *FST$BytesReader::mids$ = NULL;
          bool FST$BytesReader::live$ = false;

          jclass FST$BytesReader::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/fst/FST$BytesReader");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_getPosition_54c6a17a] = env->getMethodID(cls, "getPosition", "()J");
              mids$[mid_reversed_54c6a16a] = env->getMethodID(cls, "reversed", "()Z");
              mids$[mid_setPosition_0ee6df2f] = env->getMethodID(cls, "setPosition", "(J)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FST$BytesReader::FST$BytesReader() : ::org::apache::lucene::store::DataInput(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jlong FST$BytesReader::getPosition() const
          {
            return env->callLongMethod(this$, mids$[mid_getPosition_54c6a17a]);
          }

          jboolean FST$BytesReader::reversed() const
          {
            return env->callBooleanMethod(this$, mids$[mid_reversed_54c6a16a]);
          }

          void FST$BytesReader::setPosition(jlong a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setPosition_0ee6df2f], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {
          static PyObject *t_FST$BytesReader_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FST$BytesReader_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FST$BytesReader_of_(t_FST$BytesReader *self, PyObject *args);
          static int t_FST$BytesReader_init_(t_FST$BytesReader *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FST$BytesReader_getPosition(t_FST$BytesReader *self);
          static PyObject *t_FST$BytesReader_reversed(t_FST$BytesReader *self);
          static PyObject *t_FST$BytesReader_setPosition(t_FST$BytesReader *self, PyObject *arg);
          static PyObject *t_FST$BytesReader_get__position(t_FST$BytesReader *self, void *data);
          static int t_FST$BytesReader_set__position(t_FST$BytesReader *self, PyObject *arg, void *data);
          static PyObject *t_FST$BytesReader_get__parameters_(t_FST$BytesReader *self, void *data);
          static PyGetSetDef t_FST$BytesReader__fields_[] = {
            DECLARE_GETSET_FIELD(t_FST$BytesReader, position),
            DECLARE_GET_FIELD(t_FST$BytesReader, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_FST$BytesReader__methods_[] = {
            DECLARE_METHOD(t_FST$BytesReader, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FST$BytesReader, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FST$BytesReader, of_, METH_VARARGS),
            DECLARE_METHOD(t_FST$BytesReader, getPosition, METH_NOARGS),
            DECLARE_METHOD(t_FST$BytesReader, reversed, METH_NOARGS),
            DECLARE_METHOD(t_FST$BytesReader, setPosition, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FST$BytesReader, t_FST$BytesReader, ::org::apache::lucene::store::DataInput, FST$BytesReader, t_FST$BytesReader_init_, 0, 0, t_FST$BytesReader__fields_, 0, 0);
          PyObject *t_FST$BytesReader::wrap_Object(const FST$BytesReader& object, PyTypeObject *p0)
          {
            PyObject *obj = t_FST$BytesReader::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_FST$BytesReader *self = (t_FST$BytesReader *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_FST$BytesReader::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_FST$BytesReader::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_FST$BytesReader *self = (t_FST$BytesReader *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_FST$BytesReader::install(PyObject *module)
          {
            installType(&PY_TYPE(FST$BytesReader), module, "FST$BytesReader", 0);
          }

          void t_FST$BytesReader::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FST$BytesReader).tp_dict, "class_", make_descriptor(FST$BytesReader::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FST$BytesReader).tp_dict, "wrapfn_", make_descriptor(t_FST$BytesReader::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FST$BytesReader).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FST$BytesReader_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FST$BytesReader::initializeClass, 1)))
              return NULL;
            return t_FST$BytesReader::wrap_Object(FST$BytesReader(((t_FST$BytesReader *) arg)->object.this$));
          }
          static PyObject *t_FST$BytesReader_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FST$BytesReader::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_FST$BytesReader_of_(t_FST$BytesReader *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_FST$BytesReader_init_(t_FST$BytesReader *self, PyObject *args, PyObject *kwds)
          {
            FST$BytesReader object((jobject) NULL);

            INT_CALL(object = FST$BytesReader());
            self->object = object;

            return 0;
          }

          static PyObject *t_FST$BytesReader_getPosition(t_FST$BytesReader *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.getPosition());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_FST$BytesReader_reversed(t_FST$BytesReader *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.reversed());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_FST$BytesReader_setPosition(t_FST$BytesReader *self, PyObject *arg)
          {
            jlong a0;

            if (!parseArg(arg, "J", &a0))
            {
              OBJ_CALL(self->object.setPosition(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setPosition", arg);
            return NULL;
          }
          static PyObject *t_FST$BytesReader_get__parameters_(t_FST$BytesReader *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_FST$BytesReader_get__position(t_FST$BytesReader *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object.getPosition());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }
          static int t_FST$BytesReader_set__position(t_FST$BytesReader *self, PyObject *arg, void *data)
          {
            {
              jlong value;
              if (!parseArg(arg, "J", &value))
              {
                INT_CALL(self->object.setPosition(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "position", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/expressions/js/JavascriptParser$conditional_return.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {

          ::java::lang::Class *JavascriptParser$conditional_return::class$ = NULL;
          jmethodID *JavascriptParser$conditional_return::mids$ = NULL;
          bool JavascriptParser$conditional_return::live$ = false;

          jclass JavascriptParser$conditional_return::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/expressions/js/JavascriptParser$conditional_return");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          JavascriptParser$conditional_return::JavascriptParser$conditional_return() : ::org::antlr::runtime::ParserRuleReturnScope(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {
          static PyObject *t_JavascriptParser$conditional_return_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_JavascriptParser$conditional_return_instance_(PyTypeObject *type, PyObject *arg);
          static int t_JavascriptParser$conditional_return_init_(t_JavascriptParser$conditional_return *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_JavascriptParser$conditional_return__methods_[] = {
            DECLARE_METHOD(t_JavascriptParser$conditional_return, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_JavascriptParser$conditional_return, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(JavascriptParser$conditional_return, t_JavascriptParser$conditional_return, ::org::antlr::runtime::ParserRuleReturnScope, JavascriptParser$conditional_return, t_JavascriptParser$conditional_return_init_, 0, 0, 0, 0, 0);

          void t_JavascriptParser$conditional_return::install(PyObject *module)
          {
            installType(&PY_TYPE(JavascriptParser$conditional_return), module, "JavascriptParser$conditional_return", 0);
          }

          void t_JavascriptParser$conditional_return::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(JavascriptParser$conditional_return).tp_dict, "class_", make_descriptor(JavascriptParser$conditional_return::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(JavascriptParser$conditional_return).tp_dict, "wrapfn_", make_descriptor(t_JavascriptParser$conditional_return::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(JavascriptParser$conditional_return).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_JavascriptParser$conditional_return_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, JavascriptParser$conditional_return::initializeClass, 1)))
              return NULL;
            return t_JavascriptParser$conditional_return::wrap_Object(JavascriptParser$conditional_return(((t_JavascriptParser$conditional_return *) arg)->object.this$));
          }
          static PyObject *t_JavascriptParser$conditional_return_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, JavascriptParser$conditional_return::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_JavascriptParser$conditional_return_init_(t_JavascriptParser$conditional_return *self, PyObject *args, PyObject *kwds)
          {
            JavascriptParser$conditional_return object((jobject) NULL);

            INT_CALL(object = JavascriptParser$conditional_return());
            self->object = object;

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/MMapDirectory.h"
#include "org/apache/lucene/store/IndexInput.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/store/IOContext.h"
#include "java/io/File.h"
#include "org/apache/lucene/store/LockFactory.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *MMapDirectory::class$ = NULL;
        jmethodID *MMapDirectory::mids$ = NULL;
        bool MMapDirectory::live$ = false;
        jint MMapDirectory::DEFAULT_MAX_BUFF = (jint) 0;
        jboolean MMapDirectory::UNMAP_SUPPORTED = (jboolean) 0;

        jclass MMapDirectory::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/MMapDirectory");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_c3dacf57] = env->getMethodID(cls, "<init>", "(Ljava/io/File;)V");
            mids$[mid_init$_5f9cf6ef] = env->getMethodID(cls, "<init>", "(Ljava/io/File;Lorg/apache/lucene/store/LockFactory;)V");
            mids$[mid_init$_4d8117f3] = env->getMethodID(cls, "<init>", "(Ljava/io/File;Lorg/apache/lucene/store/LockFactory;I)V");
            mids$[mid_getMaxChunkSize_54c6a179] = env->getMethodID(cls, "getMaxChunkSize", "()I");
            mids$[mid_getUseUnmap_54c6a16a] = env->getMethodID(cls, "getUseUnmap", "()Z");
            mids$[mid_openInput_3e1b5375] = env->getMethodID(cls, "openInput", "(Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/store/IndexInput;");
            mids$[mid_setUseUnmap_bb0c767f] = env->getMethodID(cls, "setUseUnmap", "(Z)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            DEFAULT_MAX_BUFF = env->getStaticIntField(cls, "DEFAULT_MAX_BUFF");
            UNMAP_SUPPORTED = env->getStaticBooleanField(cls, "UNMAP_SUPPORTED");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        MMapDirectory::MMapDirectory(const ::java::io::File & a0) : ::org::apache::lucene::store::FSDirectory(env->newObject(initializeClass, &mids$, mid_init$_c3dacf57, a0.this$)) {}

        MMapDirectory::MMapDirectory(const ::java::io::File & a0, const ::org::apache::lucene::store::LockFactory & a1) : ::org::apache::lucene::store::FSDirectory(env->newObject(initializeClass, &mids$, mid_init$_5f9cf6ef, a0.this$, a1.this$)) {}

        MMapDirectory::MMapDirectory(const ::java::io::File & a0, const ::org::apache::lucene::store::LockFactory & a1, jint a2) : ::org::apache::lucene::store::FSDirectory(env->newObject(initializeClass, &mids$, mid_init$_4d8117f3, a0.this$, a1.this$, a2)) {}

        jint MMapDirectory::getMaxChunkSize() const
        {
          return env->callIntMethod(this$, mids$[mid_getMaxChunkSize_54c6a179]);
        }

        jboolean MMapDirectory::getUseUnmap() const
        {
          return env->callBooleanMethod(this$, mids$[mid_getUseUnmap_54c6a16a]);
        }

        ::org::apache::lucene::store::IndexInput MMapDirectory::openInput(const ::java::lang::String & a0, const ::org::apache::lucene::store::IOContext & a1) const
        {
          return ::org::apache::lucene::store::IndexInput(env->callObjectMethod(this$, mids$[mid_openInput_3e1b5375], a0.this$, a1.this$));
        }

        void MMapDirectory::setUseUnmap(jboolean a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setUseUnmap_bb0c767f], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_MMapDirectory_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MMapDirectory_instance_(PyTypeObject *type, PyObject *arg);
        static int t_MMapDirectory_init_(t_MMapDirectory *self, PyObject *args, PyObject *kwds);
        static PyObject *t_MMapDirectory_getMaxChunkSize(t_MMapDirectory *self);
        static PyObject *t_MMapDirectory_getUseUnmap(t_MMapDirectory *self);
        static PyObject *t_MMapDirectory_openInput(t_MMapDirectory *self, PyObject *args);
        static PyObject *t_MMapDirectory_setUseUnmap(t_MMapDirectory *self, PyObject *arg);
        static PyObject *t_MMapDirectory_get__maxChunkSize(t_MMapDirectory *self, void *data);
        static PyObject *t_MMapDirectory_get__useUnmap(t_MMapDirectory *self, void *data);
        static int t_MMapDirectory_set__useUnmap(t_MMapDirectory *self, PyObject *arg, void *data);
        static PyGetSetDef t_MMapDirectory__fields_[] = {
          DECLARE_GET_FIELD(t_MMapDirectory, maxChunkSize),
          DECLARE_GETSET_FIELD(t_MMapDirectory, useUnmap),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_MMapDirectory__methods_[] = {
          DECLARE_METHOD(t_MMapDirectory, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MMapDirectory, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MMapDirectory, getMaxChunkSize, METH_NOARGS),
          DECLARE_METHOD(t_MMapDirectory, getUseUnmap, METH_NOARGS),
          DECLARE_METHOD(t_MMapDirectory, openInput, METH_VARARGS),
          DECLARE_METHOD(t_MMapDirectory, setUseUnmap, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MMapDirectory, t_MMapDirectory, ::org::apache::lucene::store::FSDirectory, MMapDirectory, t_MMapDirectory_init_, 0, 0, t_MMapDirectory__fields_, 0, 0);

        void t_MMapDirectory::install(PyObject *module)
        {
          installType(&PY_TYPE(MMapDirectory), module, "MMapDirectory", 0);
        }

        void t_MMapDirectory::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MMapDirectory).tp_dict, "class_", make_descriptor(MMapDirectory::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MMapDirectory).tp_dict, "wrapfn_", make_descriptor(t_MMapDirectory::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MMapDirectory).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(MMapDirectory::initializeClass);
          PyDict_SetItemString(PY_TYPE(MMapDirectory).tp_dict, "DEFAULT_MAX_BUFF", make_descriptor(MMapDirectory::DEFAULT_MAX_BUFF));
          PyDict_SetItemString(PY_TYPE(MMapDirectory).tp_dict, "UNMAP_SUPPORTED", make_descriptor(MMapDirectory::UNMAP_SUPPORTED));
        }

        static PyObject *t_MMapDirectory_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MMapDirectory::initializeClass, 1)))
            return NULL;
          return t_MMapDirectory::wrap_Object(MMapDirectory(((t_MMapDirectory *) arg)->object.this$));
        }
        static PyObject *t_MMapDirectory_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MMapDirectory::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_MMapDirectory_init_(t_MMapDirectory *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::io::File a0((jobject) NULL);
              MMapDirectory object((jobject) NULL);

              if (!parseArgs(args, "k", ::java::io::File::initializeClass, &a0))
              {
                INT_CALL(object = MMapDirectory(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              ::java::io::File a0((jobject) NULL);
              ::org::apache::lucene::store::LockFactory a1((jobject) NULL);
              MMapDirectory object((jobject) NULL);

              if (!parseArgs(args, "kk", ::java::io::File::initializeClass, ::org::apache::lucene::store::LockFactory::initializeClass, &a0, &a1))
              {
                INT_CALL(object = MMapDirectory(a0, a1));
                self->object = object;
                break;
              }
            }
            goto err;
           case 3:
            {
              ::java::io::File a0((jobject) NULL);
              ::org::apache::lucene::store::LockFactory a1((jobject) NULL);
              jint a2;
              MMapDirectory object((jobject) NULL);

              if (!parseArgs(args, "kkI", ::java::io::File::initializeClass, ::org::apache::lucene::store::LockFactory::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = MMapDirectory(a0, a1, a2));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_MMapDirectory_getMaxChunkSize(t_MMapDirectory *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getMaxChunkSize());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_MMapDirectory_getUseUnmap(t_MMapDirectory *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.getUseUnmap());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_MMapDirectory_openInput(t_MMapDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::store::IOContext a1((jobject) NULL);
          ::org::apache::lucene::store::IndexInput result((jobject) NULL);

          if (!parseArgs(args, "sk", ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.openInput(a0, a1));
            return ::org::apache::lucene::store::t_IndexInput::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(MMapDirectory), (PyObject *) self, "openInput", args, 2);
        }

        static PyObject *t_MMapDirectory_setUseUnmap(t_MMapDirectory *self, PyObject *arg)
        {
          jboolean a0;

          if (!parseArg(arg, "Z", &a0))
          {
            OBJ_CALL(self->object.setUseUnmap(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setUseUnmap", arg);
          return NULL;
        }

        static PyObject *t_MMapDirectory_get__maxChunkSize(t_MMapDirectory *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getMaxChunkSize());
          return PyInt_FromLong((long) value);
        }

        static PyObject *t_MMapDirectory_get__useUnmap(t_MMapDirectory *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.getUseUnmap());
          Py_RETURN_BOOL(value);
        }
        static int t_MMapDirectory_set__useUnmap(t_MMapDirectory *self, PyObject *arg, void *data)
        {
          {
            jboolean value;
            if (!parseArg(arg, "Z", &value))
            {
              INT_CALL(self->object.setUseUnmap(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "useUnmap", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/RamUsageEstimator.h"
#include "java/lang/Class.h"
#include "java/lang/Long.h"
#include "org/apache/lucene/util/Accountable.h"
#include "org/apache/lucene/util/RamUsageEstimator$JvmFeature.h"
#include "java/lang/String.h"
#include "java/util/EnumSet.h"
#include "java/text/DecimalFormat.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *RamUsageEstimator::class$ = NULL;
        jmethodID *RamUsageEstimator::mids$ = NULL;
        bool RamUsageEstimator::live$ = false;
        ::java::lang::String *RamUsageEstimator::JVM_INFO_STRING = NULL;
        jint RamUsageEstimator::NUM_BYTES_ARRAY_HEADER = (jint) 0;
        jint RamUsageEstimator::NUM_BYTES_BOOLEAN = (jint) 0;
        jint RamUsageEstimator::NUM_BYTES_BYTE = (jint) 0;
        jint RamUsageEstimator::NUM_BYTES_CHAR = (jint) 0;
        jint RamUsageEstimator::NUM_BYTES_DOUBLE = (jint) 0;
        jint RamUsageEstimator::NUM_BYTES_FLOAT = (jint) 0;
        jint RamUsageEstimator::NUM_BYTES_INT = (jint) 0;
        jint RamUsageEstimator::NUM_BYTES_LONG = (jint) 0;
        jint RamUsageEstimator::NUM_BYTES_OBJECT_ALIGNMENT = (jint) 0;
        jint RamUsageEstimator::NUM_BYTES_OBJECT_HEADER = (jint) 0;
        jint RamUsageEstimator::NUM_BYTES_OBJECT_REF = (jint) 0;
        jint RamUsageEstimator::NUM_BYTES_SHORT = (jint) 0;
        jlong RamUsageEstimator::ONE_GB = (jlong) 0;
        jlong RamUsageEstimator::ONE_KB = (jlong) 0;
        jlong RamUsageEstimator::ONE_MB = (jlong) 0;

        jclass RamUsageEstimator::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/RamUsageEstimator");

            mids$ = new jmethodID[max_mid];
            mids$[mid_alignObjectSize_0ee6df33] = env->getStaticMethodID(cls, "alignObjectSize", "(J)J");
            mids$[mid_getSupportedFeatures_eebf2c68] = env->getStaticMethodID(cls, "getSupportedFeatures", "()Ljava/util/EnumSet;");
            mids$[mid_getUnsupportedFeatures_eebf2c68] = env->getStaticMethodID(cls, "getUnsupportedFeatures", "()Ljava/util/EnumSet;");
            mids$[mid_humanReadableUnits_3e02f30e] = env->getStaticMethodID(cls, "humanReadableUnits", "(J)Ljava/lang/String;");
            mids$[mid_humanReadableUnits_d1b61567] = env->getStaticMethodID(cls, "humanReadableUnits", "(JLjava/text/DecimalFormat;)Ljava/lang/String;");
            mids$[mid_isSupportedJVM_54c6a16a] = env->getStaticMethodID(cls, "isSupportedJVM", "()Z");
            mids$[mid_shallowSizeOf_c0f5dac6] = env->getStaticMethodID(cls, "shallowSizeOf", "([Ljava/lang/Object;)J");
            mids$[mid_shallowSizeOf_290588f2] = env->getStaticMethodID(cls, "shallowSizeOf", "(Ljava/lang/Object;)J");
            mids$[mid_shallowSizeOfInstance_a5deafe8] = env->getStaticMethodID(cls, "shallowSizeOfInstance", "(Ljava/lang/Class;)J");
            mids$[mid_sizeOf_f0c5b9df] = env->getStaticMethodID(cls, "sizeOf", "([Z)J");
            mids$[mid_sizeOf_ba8c7f2c] = env->getStaticMethodID(cls, "sizeOf", "([Lorg/apache/lucene/util/Accountable;)J");
            mids$[mid_sizeOf_da55802d] = env->getStaticMethodID(cls, "sizeOf", "(Ljava/lang/Long;)J");
            mids$[mid_sizeOf_c017fc5a] = env->getStaticMethodID(cls, "sizeOf", "([S)J");
            mids$[mid_sizeOf_9cc34323] = env->getStaticMethodID(cls, "sizeOf", "([F)J");
            mids$[mid_sizeOf_9ceb500f] = env->getStaticMethodID(cls, "sizeOf", "([J)J");
            mids$[mid_sizeOf_1efc2014] = env->getStaticMethodID(cls, "sizeOf", "([I)J");
            mids$[mid_sizeOf_f3b62cc5] = env->getStaticMethodID(cls, "sizeOf", "([D)J");
            mids$[mid_sizeOf_49b4f137] = env->getStaticMethodID(cls, "sizeOf", "([B)J");
            mids$[mid_sizeOf_700e23ca] = env->getStaticMethodID(cls, "sizeOf", "([C)J");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            JVM_INFO_STRING = new ::java::lang::String(env->getStaticObjectField(cls, "JVM_INFO_STRING", "Ljava/lang/String;"));
            NUM_BYTES_ARRAY_HEADER = env->getStaticIntField(cls, "NUM_BYTES_ARRAY_HEADER");
            NUM_BYTES_BOOLEAN = env->getStaticIntField(cls, "NUM_BYTES_BOOLEAN");
            NUM_BYTES_BYTE = env->getStaticIntField(cls, "NUM_BYTES_BYTE");
            NUM_BYTES_CHAR = env->getStaticIntField(cls, "NUM_BYTES_CHAR");
            NUM_BYTES_DOUBLE = env->getStaticIntField(cls, "NUM_BYTES_DOUBLE");
            NUM_BYTES_FLOAT = env->getStaticIntField(cls, "NUM_BYTES_FLOAT");
            NUM_BYTES_INT = env->getStaticIntField(cls, "NUM_BYTES_INT");
            NUM_BYTES_LONG = env->getStaticIntField(cls, "NUM_BYTES_LONG");
            NUM_BYTES_OBJECT_ALIGNMENT = env->getStaticIntField(cls, "NUM_BYTES_OBJECT_ALIGNMENT");
            NUM_BYTES_OBJECT_HEADER = env->getStaticIntField(cls, "NUM_BYTES_OBJECT_HEADER");
            NUM_BYTES_OBJECT_REF = env->getStaticIntField(cls, "NUM_BYTES_OBJECT_REF");
            NUM_BYTES_SHORT = env->getStaticIntField(cls, "NUM_BYTES_SHORT");
            ONE_GB = env->getStaticLongField(cls, "ONE_GB");
            ONE_KB = env->getStaticLongField(cls, "ONE_KB");
            ONE_MB = env->getStaticLongField(cls, "ONE_MB");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jlong RamUsageEstimator::alignObjectSize(jlong a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_alignObjectSize_0ee6df33], a0);
        }

        ::java::util::EnumSet RamUsageEstimator::getSupportedFeatures()
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::util::EnumSet(env->callStaticObjectMethod(cls, mids$[mid_getSupportedFeatures_eebf2c68]));
        }

        ::java::util::EnumSet RamUsageEstimator::getUnsupportedFeatures()
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::util::EnumSet(env->callStaticObjectMethod(cls, mids$[mid_getUnsupportedFeatures_eebf2c68]));
        }

        ::java::lang::String RamUsageEstimator::humanReadableUnits(jlong a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_humanReadableUnits_3e02f30e], a0));
        }

        ::java::lang::String RamUsageEstimator::humanReadableUnits(jlong a0, const ::java::text::DecimalFormat & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_humanReadableUnits_d1b61567], a0, a1.this$));
        }

        jboolean RamUsageEstimator::isSupportedJVM()
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticBooleanMethod(cls, mids$[mid_isSupportedJVM_54c6a16a]);
        }

        jlong RamUsageEstimator::shallowSizeOf(const JArray< ::java::lang::Object > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_shallowSizeOf_c0f5dac6], a0.this$);
        }

        jlong RamUsageEstimator::shallowSizeOf(const ::java::lang::Object & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_shallowSizeOf_290588f2], a0.this$);
        }

        jlong RamUsageEstimator::shallowSizeOfInstance(const ::java::lang::Class & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_shallowSizeOfInstance_a5deafe8], a0.this$);
        }

        jlong RamUsageEstimator::sizeOf(const JArray< jboolean > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_sizeOf_f0c5b9df], a0.this$);
        }

        jlong RamUsageEstimator::sizeOf(const JArray< ::org::apache::lucene::util::Accountable > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_sizeOf_ba8c7f2c], a0.this$);
        }

        jlong RamUsageEstimator::sizeOf(const ::java::lang::Long & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_sizeOf_da55802d], a0.this$);
        }

        jlong RamUsageEstimator::sizeOf(const JArray< jshort > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_sizeOf_c017fc5a], a0.this$);
        }

        jlong RamUsageEstimator::sizeOf(const JArray< jfloat > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_sizeOf_9cc34323], a0.this$);
        }

        jlong RamUsageEstimator::sizeOf(const JArray< jlong > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_sizeOf_9ceb500f], a0.this$);
        }

        jlong RamUsageEstimator::sizeOf(const JArray< jint > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_sizeOf_1efc2014], a0.this$);
        }

        jlong RamUsageEstimator::sizeOf(const JArray< jdouble > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_sizeOf_f3b62cc5], a0.this$);
        }

        jlong RamUsageEstimator::sizeOf(const JArray< jbyte > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_sizeOf_49b4f137], a0.this$);
        }

        jlong RamUsageEstimator::sizeOf(const JArray< jchar > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_sizeOf_700e23ca], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_RamUsageEstimator_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_RamUsageEstimator_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_RamUsageEstimator_alignObjectSize(PyTypeObject *type, PyObject *arg);
        static PyObject *t_RamUsageEstimator_getSupportedFeatures(PyTypeObject *type);
        static PyObject *t_RamUsageEstimator_getUnsupportedFeatures(PyTypeObject *type);
        static PyObject *t_RamUsageEstimator_humanReadableUnits(PyTypeObject *type, PyObject *args);
        static PyObject *t_RamUsageEstimator_isSupportedJVM(PyTypeObject *type);
        static PyObject *t_RamUsageEstimator_shallowSizeOf(PyTypeObject *type, PyObject *args);
        static PyObject *t_RamUsageEstimator_shallowSizeOfInstance(PyTypeObject *type, PyObject *arg);
        static PyObject *t_RamUsageEstimator_sizeOf(PyTypeObject *type, PyObject *args);
        static PyObject *t_RamUsageEstimator_get__supportedFeatures(t_RamUsageEstimator *self, void *data);
        static PyObject *t_RamUsageEstimator_get__supportedJVM(t_RamUsageEstimator *self, void *data);
        static PyObject *t_RamUsageEstimator_get__unsupportedFeatures(t_RamUsageEstimator *self, void *data);
        static PyGetSetDef t_RamUsageEstimator__fields_[] = {
          DECLARE_GET_FIELD(t_RamUsageEstimator, supportedFeatures),
          DECLARE_GET_FIELD(t_RamUsageEstimator, supportedJVM),
          DECLARE_GET_FIELD(t_RamUsageEstimator, unsupportedFeatures),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_RamUsageEstimator__methods_[] = {
          DECLARE_METHOD(t_RamUsageEstimator, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RamUsageEstimator, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RamUsageEstimator, alignObjectSize, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RamUsageEstimator, getSupportedFeatures, METH_NOARGS | METH_CLASS),
          DECLARE_METHOD(t_RamUsageEstimator, getUnsupportedFeatures, METH_NOARGS | METH_CLASS),
          DECLARE_METHOD(t_RamUsageEstimator, humanReadableUnits, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_RamUsageEstimator, isSupportedJVM, METH_NOARGS | METH_CLASS),
          DECLARE_METHOD(t_RamUsageEstimator, shallowSizeOf, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_RamUsageEstimator, shallowSizeOfInstance, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RamUsageEstimator, sizeOf, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(RamUsageEstimator, t_RamUsageEstimator, ::java::lang::Object, RamUsageEstimator, abstract_init, 0, 0, t_RamUsageEstimator__fields_, 0, 0);

        void t_RamUsageEstimator::install(PyObject *module)
        {
          installType(&PY_TYPE(RamUsageEstimator), module, "RamUsageEstimator", 0);
          PyDict_SetItemString(PY_TYPE(RamUsageEstimator).tp_dict, "JvmFeature", make_descriptor(&PY_TYPE(RamUsageEstimator$JvmFeature)));
        }

        void t_RamUsageEstimator::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(RamUsageEstimator).tp_dict, "class_", make_descriptor(RamUsageEstimator::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(RamUsageEstimator).tp_dict, "wrapfn_", make_descriptor(t_RamUsageEstimator::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(RamUsageEstimator).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(RamUsageEstimator::initializeClass);
          PyDict_SetItemString(PY_TYPE(RamUsageEstimator).tp_dict, "JVM_INFO_STRING", make_descriptor(j2p(*RamUsageEstimator::JVM_INFO_STRING)));
          PyDict_SetItemString(PY_TYPE(RamUsageEstimator).tp_dict, "NUM_BYTES_ARRAY_HEADER", make_descriptor(RamUsageEstimator::NUM_BYTES_ARRAY_HEADER));
          PyDict_SetItemString(PY_TYPE(RamUsageEstimator).tp_dict, "NUM_BYTES_BOOLEAN", make_descriptor(RamUsageEstimator::NUM_BYTES_BOOLEAN));
          PyDict_SetItemString(PY_TYPE(RamUsageEstimator).tp_dict, "NUM_BYTES_BYTE", make_descriptor(RamUsageEstimator::NUM_BYTES_BYTE));
          PyDict_SetItemString(PY_TYPE(RamUsageEstimator).tp_dict, "NUM_BYTES_CHAR", make_descriptor(RamUsageEstimator::NUM_BYTES_CHAR));
          PyDict_SetItemString(PY_TYPE(RamUsageEstimator).tp_dict, "NUM_BYTES_DOUBLE", make_descriptor(RamUsageEstimator::NUM_BYTES_DOUBLE));
          PyDict_SetItemString(PY_TYPE(RamUsageEstimator).tp_dict, "NUM_BYTES_FLOAT", make_descriptor(RamUsageEstimator::NUM_BYTES_FLOAT));
          PyDict_SetItemString(PY_TYPE(RamUsageEstimator).tp_dict, "NUM_BYTES_INT", make_descriptor(RamUsageEstimator::NUM_BYTES_INT));
          PyDict_SetItemString(PY_TYPE(RamUsageEstimator).tp_dict, "NUM_BYTES_LONG", make_descriptor(RamUsageEstimator::NUM_BYTES_LONG));
          PyDict_SetItemString(PY_TYPE(RamUsageEstimator).tp_dict, "NUM_BYTES_OBJECT_ALIGNMENT", make_descriptor(RamUsageEstimator::NUM_BYTES_OBJECT_ALIGNMENT));
          PyDict_SetItemString(PY_TYPE(RamUsageEstimator).tp_dict, "NUM_BYTES_OBJECT_HEADER", make_descriptor(RamUsageEstimator::NUM_BYTES_OBJECT_HEADER));
          PyDict_SetItemString(PY_TYPE(RamUsageEstimator).tp_dict, "NUM_BYTES_OBJECT_REF", make_descriptor(RamUsageEstimator::NUM_BYTES_OBJECT_REF));
          PyDict_SetItemString(PY_TYPE(RamUsageEstimator).tp_dict, "NUM_BYTES_SHORT", make_descriptor(RamUsageEstimator::NUM_BYTES_SHORT));
          PyDict_SetItemString(PY_TYPE(RamUsageEstimator).tp_dict, "ONE_GB", make_descriptor(RamUsageEstimator::ONE_GB));
          PyDict_SetItemString(PY_TYPE(RamUsageEstimator).tp_dict, "ONE_KB", make_descriptor(RamUsageEstimator::ONE_KB));
          PyDict_SetItemString(PY_TYPE(RamUsageEstimator).tp_dict, "ONE_MB", make_descriptor(RamUsageEstimator::ONE_MB));
        }

        static PyObject *t_RamUsageEstimator_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, RamUsageEstimator::initializeClass, 1)))
            return NULL;
          return t_RamUsageEstimator::wrap_Object(RamUsageEstimator(((t_RamUsageEstimator *) arg)->object.this$));
        }
        static PyObject *t_RamUsageEstimator_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, RamUsageEstimator::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_RamUsageEstimator_alignObjectSize(PyTypeObject *type, PyObject *arg)
        {
          jlong a0;
          jlong result;

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::RamUsageEstimator::alignObjectSize(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError(type, "alignObjectSize", arg);
          return NULL;
        }

        static PyObject *t_RamUsageEstimator_getSupportedFeatures(PyTypeObject *type)
        {
          ::java::util::EnumSet result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::util::RamUsageEstimator::getSupportedFeatures());
          return ::java::util::t_EnumSet::wrap_Object(result, &::org::apache::lucene::util::PY_TYPE(RamUsageEstimator$JvmFeature));
        }

        static PyObject *t_RamUsageEstimator_getUnsupportedFeatures(PyTypeObject *type)
        {
          ::java::util::EnumSet result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::util::RamUsageEstimator::getUnsupportedFeatures());
          return ::java::util::t_EnumSet::wrap_Object(result, &::org::apache::lucene::util::PY_TYPE(RamUsageEstimator$JvmFeature));
        }

        static PyObject *t_RamUsageEstimator_humanReadableUnits(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jlong a0;
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::RamUsageEstimator::humanReadableUnits(a0));
                return j2p(result);
              }
            }
            break;
           case 2:
            {
              jlong a0;
              ::java::text::DecimalFormat a1((jobject) NULL);
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "Jk", ::java::text::DecimalFormat::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::RamUsageEstimator::humanReadableUnits(a0, a1));
                return j2p(result);
              }
            }
          }

          PyErr_SetArgsError(type, "humanReadableUnits", args);
          return NULL;
        }

        static PyObject *t_RamUsageEstimator_isSupportedJVM(PyTypeObject *type)
        {
          jboolean result;
          OBJ_CALL(result = ::org::apache::lucene::util::RamUsageEstimator::isSupportedJVM());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_RamUsageEstimator_shallowSizeOf(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              JArray< ::java::lang::Object > a0((jobject) NULL);
              jlong result;

              if (!parseArgs(args, "[o", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::RamUsageEstimator::shallowSizeOf(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
            {
              ::java::lang::Object a0((jobject) NULL);
              jlong result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::RamUsageEstimator::shallowSizeOf(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
          }

          PyErr_SetArgsError(type, "shallowSizeOf", args);
          return NULL;
        }

        static PyObject *t_RamUsageEstimator_shallowSizeOfInstance(PyTypeObject *type, PyObject *arg)
        {
          ::java::lang::Class a0((jobject) NULL);
          PyTypeObject **p0;
          jlong result;

          if (!parseArg(arg, "K", ::java::lang::Class::initializeClass, &a0, &p0, ::java::lang::t_Class::parameters_))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::RamUsageEstimator::shallowSizeOfInstance(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError(type, "shallowSizeOfInstance", arg);
          return NULL;
        }

        static PyObject *t_RamUsageEstimator_sizeOf(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              JArray< jboolean > a0((jobject) NULL);
              jlong result;

              if (!parseArgs(args, "[Z", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::RamUsageEstimator::sizeOf(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
            {
              JArray< ::org::apache::lucene::util::Accountable > a0((jobject) NULL);
              jlong result;

              if (!parseArgs(args, "[k", ::org::apache::lucene::util::Accountable::initializeClass, &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::RamUsageEstimator::sizeOf(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
            {
              ::java::lang::Long a0((jobject) NULL);
              jlong result;

              if (!parseArgs(args, "O", &::java::lang::PY_TYPE(Long), &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::RamUsageEstimator::sizeOf(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
            {
              JArray< jshort > a0((jobject) NULL);
              jlong result;

              if (!parseArgs(args, "[S", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::RamUsageEstimator::sizeOf(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
            {
              JArray< jfloat > a0((jobject) NULL);
              jlong result;

              if (!parseArgs(args, "[F", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::RamUsageEstimator::sizeOf(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
            {
              JArray< jlong > a0((jobject) NULL);
              jlong result;

              if (!parseArgs(args, "[J", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::RamUsageEstimator::sizeOf(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
            {
              JArray< jint > a0((jobject) NULL);
              jlong result;

              if (!parseArgs(args, "[I", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::RamUsageEstimator::sizeOf(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
            {
              JArray< jdouble > a0((jobject) NULL);
              jlong result;

              if (!parseArgs(args, "[D", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::RamUsageEstimator::sizeOf(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
            {
              JArray< jbyte > a0((jobject) NULL);
              jlong result;

              if (!parseArgs(args, "[B", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::RamUsageEstimator::sizeOf(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
            {
              JArray< jchar > a0((jobject) NULL);
              jlong result;

              if (!parseArgs(args, "[C", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::RamUsageEstimator::sizeOf(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
          }

          PyErr_SetArgsError(type, "sizeOf", args);
          return NULL;
        }

        static PyObject *t_RamUsageEstimator_get__supportedFeatures(t_RamUsageEstimator *self, void *data)
        {
          ::java::util::EnumSet value((jobject) NULL);
          OBJ_CALL(value = self->object.getSupportedFeatures());
          return ::java::util::t_EnumSet::wrap_Object(value);
        }

        static PyObject *t_RamUsageEstimator_get__supportedJVM(t_RamUsageEstimator *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.isSupportedJVM());
          Py_RETURN_BOOL(value);
        }

        static PyObject *t_RamUsageEstimator_get__unsupportedFeatures(t_RamUsageEstimator *self, void *data)
        {
          ::java::util::EnumSet value((jobject) NULL);
          OBJ_CALL(value = self->object.getUnsupportedFeatures());
          return ::java::util::t_EnumSet::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/docvalues/LongDocValues.h"
#include "org/apache/lucene/queries/function/ValueSource.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queries/function/ValueSourceScorer.h"
#include "org/apache/lucene/queries/function/FunctionValues$ValueFiller.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace docvalues {

            ::java::lang::Class *LongDocValues::class$ = NULL;
            jmethodID *LongDocValues::mids$ = NULL;
            bool LongDocValues::live$ = false;

            jclass LongDocValues::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/docvalues/LongDocValues");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_ca78fe7a] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queries/function/ValueSource;)V");
                mids$[mid_boolVal_39c7bd30] = env->getMethodID(cls, "boolVal", "(I)Z");
                mids$[mid_byteVal_39c7bd28] = env->getMethodID(cls, "byteVal", "(I)B");
                mids$[mid_doubleVal_39c7bd2e] = env->getMethodID(cls, "doubleVal", "(I)D");
                mids$[mid_floatVal_39c7bd2c] = env->getMethodID(cls, "floatVal", "(I)F");
                mids$[mid_getRangeScorer_d201bc96] = env->getMethodID(cls, "getRangeScorer", "(Lorg/apache/lucene/index/IndexReader;Ljava/lang/String;Ljava/lang/String;ZZ)Lorg/apache/lucene/queries/function/ValueSourceScorer;");
                mids$[mid_getValueFiller_7731f0bd] = env->getMethodID(cls, "getValueFiller", "()Lorg/apache/lucene/queries/function/FunctionValues$ValueFiller;");
                mids$[mid_intVal_39c7bd23] = env->getMethodID(cls, "intVal", "(I)I");
                mids$[mid_longVal_39c7bd20] = env->getMethodID(cls, "longVal", "(I)J");
                mids$[mid_objectVal_29be6a55] = env->getMethodID(cls, "objectVal", "(I)Ljava/lang/Object;");
                mids$[mid_shortVal_39c7bd39] = env->getMethodID(cls, "shortVal", "(I)S");
                mids$[mid_strVal_141401b3] = env->getMethodID(cls, "strVal", "(I)Ljava/lang/String;");
                mids$[mid_toString_141401b3] = env->getMethodID(cls, "toString", "(I)Ljava/lang/String;");
                mids$[mid_externalToLong_5fdc3f54] = env->getMethodID(cls, "externalToLong", "(Ljava/lang/String;)J");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            LongDocValues::LongDocValues(const ::org::apache::lucene::queries::function::ValueSource & a0) : ::org::apache::lucene::queries::function::FunctionValues(env->newObject(initializeClass, &mids$, mid_init$_ca78fe7a, a0.this$)) {}

            jboolean LongDocValues::boolVal(jint a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_boolVal_39c7bd30], a0);
            }

            jbyte LongDocValues::byteVal(jint a0) const
            {
              return env->callByteMethod(this$, mids$[mid_byteVal_39c7bd28], a0);
            }

            jdouble LongDocValues::doubleVal(jint a0) const
            {
              return env->callDoubleMethod(this$, mids$[mid_doubleVal_39c7bd2e], a0);
            }

            jfloat LongDocValues::floatVal(jint a0) const
            {
              return env->callFloatMethod(this$, mids$[mid_floatVal_39c7bd2c], a0);
            }

            ::org::apache::lucene::queries::function::ValueSourceScorer LongDocValues::getRangeScorer(const ::org::apache::lucene::index::IndexReader & a0, const ::java::lang::String & a1, const ::java::lang::String & a2, jboolean a3, jboolean a4) const
            {
              return ::org::apache::lucene::queries::function::ValueSourceScorer(env->callObjectMethod(this$, mids$[mid_getRangeScorer_d201bc96], a0.this$, a1.this$, a2.this$, a3, a4));
            }

            ::org::apache::lucene::queries::function::FunctionValues$ValueFiller LongDocValues::getValueFiller() const
            {
              return ::org::apache::lucene::queries::function::FunctionValues$ValueFiller(env->callObjectMethod(this$, mids$[mid_getValueFiller_7731f0bd]));
            }

            jint LongDocValues::intVal(jint a0) const
            {
              return env->callIntMethod(this$, mids$[mid_intVal_39c7bd23], a0);
            }

            jlong LongDocValues::longVal(jint a0) const
            {
              return env->callLongMethod(this$, mids$[mid_longVal_39c7bd20], a0);
            }

            ::java::lang::Object LongDocValues::objectVal(jint a0) const
            {
              return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_objectVal_29be6a55], a0));
            }

            jshort LongDocValues::shortVal(jint a0) const
            {
              return env->callShortMethod(this$, mids$[mid_shortVal_39c7bd39], a0);
            }

            ::java::lang::String LongDocValues::strVal(jint a0) const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_strVal_141401b3], a0));
            }

            ::java::lang::String LongDocValues::toString(jint a0) const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_141401b3], a0));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace docvalues {
            static PyObject *t_LongDocValues_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_LongDocValues_instance_(PyTypeObject *type, PyObject *arg);
            static int t_LongDocValues_init_(t_LongDocValues *self, PyObject *args, PyObject *kwds);
            static PyObject *t_LongDocValues_boolVal(t_LongDocValues *self, PyObject *args);
            static PyObject *t_LongDocValues_byteVal(t_LongDocValues *self, PyObject *args);
            static PyObject *t_LongDocValues_doubleVal(t_LongDocValues *self, PyObject *args);
            static PyObject *t_LongDocValues_floatVal(t_LongDocValues *self, PyObject *args);
            static PyObject *t_LongDocValues_getRangeScorer(t_LongDocValues *self, PyObject *args);
            static PyObject *t_LongDocValues_getValueFiller(t_LongDocValues *self, PyObject *args);
            static PyObject *t_LongDocValues_intVal(t_LongDocValues *self, PyObject *args);
            static PyObject *t_LongDocValues_longVal(t_LongDocValues *self, PyObject *args);
            static PyObject *t_LongDocValues_objectVal(t_LongDocValues *self, PyObject *args);
            static PyObject *t_LongDocValues_shortVal(t_LongDocValues *self, PyObject *args);
            static PyObject *t_LongDocValues_strVal(t_LongDocValues *self, PyObject *args);
            static PyObject *t_LongDocValues_toString(t_LongDocValues *self, PyObject *args);
            static PyObject *t_LongDocValues_get__valueFiller(t_LongDocValues *self, void *data);
            static PyGetSetDef t_LongDocValues__fields_[] = {
              DECLARE_GET_FIELD(t_LongDocValues, valueFiller),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_LongDocValues__methods_[] = {
              DECLARE_METHOD(t_LongDocValues, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_LongDocValues, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_LongDocValues, boolVal, METH_VARARGS),
              DECLARE_METHOD(t_LongDocValues, byteVal, METH_VARARGS),
              DECLARE_METHOD(t_LongDocValues, doubleVal, METH_VARARGS),
              DECLARE_METHOD(t_LongDocValues, floatVal, METH_VARARGS),
              DECLARE_METHOD(t_LongDocValues, getRangeScorer, METH_VARARGS),
              DECLARE_METHOD(t_LongDocValues, getValueFiller, METH_VARARGS),
              DECLARE_METHOD(t_LongDocValues, intVal, METH_VARARGS),
              DECLARE_METHOD(t_LongDocValues, longVal, METH_VARARGS),
              DECLARE_METHOD(t_LongDocValues, objectVal, METH_VARARGS),
              DECLARE_METHOD(t_LongDocValues, shortVal, METH_VARARGS),
              DECLARE_METHOD(t_LongDocValues, strVal, METH_VARARGS),
              DECLARE_METHOD(t_LongDocValues, toString, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(LongDocValues, t_LongDocValues, ::org::apache::lucene::queries::function::FunctionValues, LongDocValues, t_LongDocValues_init_, 0, 0, t_LongDocValues__fields_, 0, 0);

            void t_LongDocValues::install(PyObject *module)
            {
              installType(&PY_TYPE(LongDocValues), module, "LongDocValues", 0);
            }

            void t_LongDocValues::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(LongDocValues).tp_dict, "class_", make_descriptor(LongDocValues::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(LongDocValues).tp_dict, "wrapfn_", make_descriptor(t_LongDocValues::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(LongDocValues).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_LongDocValues_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, LongDocValues::initializeClass, 1)))
                return NULL;
              return t_LongDocValues::wrap_Object(LongDocValues(((t_LongDocValues *) arg)->object.this$));
            }
            static PyObject *t_LongDocValues_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, LongDocValues::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_LongDocValues_init_(t_LongDocValues *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::queries::function::ValueSource a0((jobject) NULL);
              LongDocValues object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::queries::function::ValueSource::initializeClass, &a0))
              {
                INT_CALL(object = LongDocValues(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_LongDocValues_boolVal(t_LongDocValues *self, PyObject *args)
            {
              jint a0;
              jboolean result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.boolVal(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(LongDocValues), (PyObject *) self, "boolVal", args, 2);
            }

            static PyObject *t_LongDocValues_byteVal(t_LongDocValues *self, PyObject *args)
            {
              jint a0;
              jbyte result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.byteVal(a0));
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(LongDocValues), (PyObject *) self, "byteVal", args, 2);
            }

            static PyObject *t_LongDocValues_doubleVal(t_LongDocValues *self, PyObject *args)
            {
              jint a0;
              jdouble result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.doubleVal(a0));
                return PyFloat_FromDouble((double) result);
              }

              return callSuper(&PY_TYPE(LongDocValues), (PyObject *) self, "doubleVal", args, 2);
            }

            static PyObject *t_LongDocValues_floatVal(t_LongDocValues *self, PyObject *args)
            {
              jint a0;
              jfloat result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.floatVal(a0));
                return PyFloat_FromDouble((double) result);
              }

              return callSuper(&PY_TYPE(LongDocValues), (PyObject *) self, "floatVal", args, 2);
            }

            static PyObject *t_LongDocValues_getRangeScorer(t_LongDocValues *self, PyObject *args)
            {
              ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              ::java::lang::String a2((jobject) NULL);
              jboolean a3;
              jboolean a4;
              ::org::apache::lucene::queries::function::ValueSourceScorer result((jobject) NULL);

              if (!parseArgs(args, "kssZZ", ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &a1, &a2, &a3, &a4))
              {
                OBJ_CALL(result = self->object.getRangeScorer(a0, a1, a2, a3, a4));
                return ::org::apache::lucene::queries::function::t_ValueSourceScorer::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(LongDocValues), (PyObject *) self, "getRangeScorer", args, 2);
            }

            static PyObject *t_LongDocValues_getValueFiller(t_LongDocValues *self, PyObject *args)
            {
              ::org::apache::lucene::queries::function::FunctionValues$ValueFiller result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getValueFiller());
                return ::org::apache::lucene::queries::function::t_FunctionValues$ValueFiller::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(LongDocValues), (PyObject *) self, "getValueFiller", args, 2);
            }

            static PyObject *t_LongDocValues_intVal(t_LongDocValues *self, PyObject *args)
            {
              jint a0;
              jint result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.intVal(a0));
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(LongDocValues), (PyObject *) self, "intVal", args, 2);
            }

            static PyObject *t_LongDocValues_longVal(t_LongDocValues *self, PyObject *args)
            {
              jint a0;
              jlong result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.longVal(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }

              return callSuper(&PY_TYPE(LongDocValues), (PyObject *) self, "longVal", args, 2);
            }

            static PyObject *t_LongDocValues_objectVal(t_LongDocValues *self, PyObject *args)
            {
              jint a0;
              ::java::lang::Object result((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.objectVal(a0));
                return ::java::lang::t_Object::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(LongDocValues), (PyObject *) self, "objectVal", args, 2);
            }

            static PyObject *t_LongDocValues_shortVal(t_LongDocValues *self, PyObject *args)
            {
              jint a0;
              jshort result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.shortVal(a0));
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(LongDocValues), (PyObject *) self, "shortVal", args, 2);
            }

            static PyObject *t_LongDocValues_strVal(t_LongDocValues *self, PyObject *args)
            {
              jint a0;
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.strVal(a0));
                return j2p(result);
              }

              return callSuper(&PY_TYPE(LongDocValues), (PyObject *) self, "strVal", args, 2);
            }

            static PyObject *t_LongDocValues_toString(t_LongDocValues *self, PyObject *args)
            {
              jint a0;
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.toString(a0));
                return j2p(result);
              }

              return callSuper(&PY_TYPE(LongDocValues), (PyObject *) self, "toString", args, 2);
            }

            static PyObject *t_LongDocValues_get__valueFiller(t_LongDocValues *self, void *data)
            {
              ::org::apache::lucene::queries::function::FunctionValues$ValueFiller value((jobject) NULL);
              OBJ_CALL(value = self->object.getValueFiller());
              return ::org::apache::lucene::queries::function::t_FunctionValues$ValueFiller::wrap_Object(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/lv/LatvianStemFilterFactory.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace lv {

          ::java::lang::Class *LatvianStemFilterFactory::class$ = NULL;
          jmethodID *LatvianStemFilterFactory::mids$ = NULL;
          bool LatvianStemFilterFactory::live$ = false;

          jclass LatvianStemFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/lv/LatvianStemFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          LatvianStemFilterFactory::LatvianStemFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream LatvianStemFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace lv {
          static PyObject *t_LatvianStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LatvianStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_LatvianStemFilterFactory_init_(t_LatvianStemFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_LatvianStemFilterFactory_create(t_LatvianStemFilterFactory *self, PyObject *args);

          static PyMethodDef t_LatvianStemFilterFactory__methods_[] = {
            DECLARE_METHOD(t_LatvianStemFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LatvianStemFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LatvianStemFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(LatvianStemFilterFactory, t_LatvianStemFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, LatvianStemFilterFactory, t_LatvianStemFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_LatvianStemFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(LatvianStemFilterFactory), module, "LatvianStemFilterFactory", 0);
          }

          void t_LatvianStemFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(LatvianStemFilterFactory).tp_dict, "class_", make_descriptor(LatvianStemFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(LatvianStemFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_LatvianStemFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(LatvianStemFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_LatvianStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LatvianStemFilterFactory::initializeClass, 1)))
              return NULL;
            return t_LatvianStemFilterFactory::wrap_Object(LatvianStemFilterFactory(((t_LatvianStemFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_LatvianStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LatvianStemFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_LatvianStemFilterFactory_init_(t_LatvianStemFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            LatvianStemFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = LatvianStemFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_LatvianStemFilterFactory_create(t_LatvianStemFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(LatvianStemFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/standard/StandardTokenizer.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "java/io/Reader.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {

          ::java::lang::Class *StandardTokenizer::class$ = NULL;
          jmethodID *StandardTokenizer::mids$ = NULL;
          bool StandardTokenizer::live$ = false;
          jint StandardTokenizer::ACRONYM = (jint) 0;
          jint StandardTokenizer::ACRONYM_DEP = (jint) 0;
          jint StandardTokenizer::ALPHANUM = (jint) 0;
          jint StandardTokenizer::APOSTROPHE = (jint) 0;
          jint StandardTokenizer::CJ = (jint) 0;
          jint StandardTokenizer::COMPANY = (jint) 0;
          jint StandardTokenizer::EMAIL = (jint) 0;
          jint StandardTokenizer::HANGUL = (jint) 0;
          jint StandardTokenizer::HIRAGANA = (jint) 0;
          jint StandardTokenizer::HOST = (jint) 0;
          jint StandardTokenizer::IDEOGRAPHIC = (jint) 0;
          jint StandardTokenizer::KATAKANA = (jint) 0;
          jint StandardTokenizer::NUM = (jint) 0;
          jint StandardTokenizer::SOUTHEAST_ASIAN = (jint) 0;
          JArray< ::java::lang::String > *StandardTokenizer::TOKEN_TYPES = NULL;

          jclass StandardTokenizer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/standard/StandardTokenizer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_cf2e3c10] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;)V");
              mids$[mid_init$_5877b8f0] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;)V");
              mids$[mid_init$_7997a391] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Ljava/io/Reader;)V");
              mids$[mid_init$_be7a3ecf] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;)V");
              mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
              mids$[mid_end_54c6a166] = env->getMethodID(cls, "end", "()V");
              mids$[mid_getMaxTokenLength_54c6a179] = env->getMethodID(cls, "getMaxTokenLength", "()I");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");
              mids$[mid_setMaxTokenLength_39c7bd3c] = env->getMethodID(cls, "setMaxTokenLength", "(I)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              ACRONYM = env->getStaticIntField(cls, "ACRONYM");
              ACRONYM_DEP = env->getStaticIntField(cls, "ACRONYM_DEP");
              ALPHANUM = env->getStaticIntField(cls, "ALPHANUM");
              APOSTROPHE = env->getStaticIntField(cls, "APOSTROPHE");
              CJ = env->getStaticIntField(cls, "CJ");
              COMPANY = env->getStaticIntField(cls, "COMPANY");
              EMAIL = env->getStaticIntField(cls, "EMAIL");
              HANGUL = env->getStaticIntField(cls, "HANGUL");
              HIRAGANA = env->getStaticIntField(cls, "HIRAGANA");
              HOST = env->getStaticIntField(cls, "HOST");
              IDEOGRAPHIC = env->getStaticIntField(cls, "IDEOGRAPHIC");
              KATAKANA = env->getStaticIntField(cls, "KATAKANA");
              NUM = env->getStaticIntField(cls, "NUM");
              SOUTHEAST_ASIAN = env->getStaticIntField(cls, "SOUTHEAST_ASIAN");
              TOKEN_TYPES = new JArray< ::java::lang::String >(env->getStaticObjectField(cls, "TOKEN_TYPES", "[Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          StandardTokenizer::StandardTokenizer(const ::java::io::Reader & a0) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_cf2e3c10, a0.this$)) {}

          StandardTokenizer::StandardTokenizer(const ::org::apache::lucene::util::AttributeFactory & a0, const ::java::io::Reader & a1) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_5877b8f0, a0.this$, a1.this$)) {}

          StandardTokenizer::StandardTokenizer(const ::org::apache::lucene::util::Version & a0, const ::java::io::Reader & a1) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_7997a391, a0.this$, a1.this$)) {}

          StandardTokenizer::StandardTokenizer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::util::AttributeFactory & a1, const ::java::io::Reader & a2) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_be7a3ecf, a0.this$, a1.this$, a2.this$)) {}

          void StandardTokenizer::close() const
          {
            env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
          }

          void StandardTokenizer::end() const
          {
            env->callVoidMethod(this$, mids$[mid_end_54c6a166]);
          }

          jint StandardTokenizer::getMaxTokenLength() const
          {
            return env->callIntMethod(this$, mids$[mid_getMaxTokenLength_54c6a179]);
          }

          jboolean StandardTokenizer::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void StandardTokenizer::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }

          void StandardTokenizer::setMaxTokenLength(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMaxTokenLength_39c7bd3c], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {
          static PyObject *t_StandardTokenizer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_StandardTokenizer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_StandardTokenizer_init_(t_StandardTokenizer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_StandardTokenizer_close(t_StandardTokenizer *self, PyObject *args);
          static PyObject *t_StandardTokenizer_end(t_StandardTokenizer *self, PyObject *args);
          static PyObject *t_StandardTokenizer_getMaxTokenLength(t_StandardTokenizer *self);
          static PyObject *t_StandardTokenizer_incrementToken(t_StandardTokenizer *self, PyObject *args);
          static PyObject *t_StandardTokenizer_reset(t_StandardTokenizer *self, PyObject *args);
          static PyObject *t_StandardTokenizer_setMaxTokenLength(t_StandardTokenizer *self, PyObject *arg);
          static PyObject *t_StandardTokenizer_get__maxTokenLength(t_StandardTokenizer *self, void *data);
          static int t_StandardTokenizer_set__maxTokenLength(t_StandardTokenizer *self, PyObject *arg, void *data);
          static PyGetSetDef t_StandardTokenizer__fields_[] = {
            DECLARE_GETSET_FIELD(t_StandardTokenizer, maxTokenLength),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_StandardTokenizer__methods_[] = {
            DECLARE_METHOD(t_StandardTokenizer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StandardTokenizer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StandardTokenizer, close, METH_VARARGS),
            DECLARE_METHOD(t_StandardTokenizer, end, METH_VARARGS),
            DECLARE_METHOD(t_StandardTokenizer, getMaxTokenLength, METH_NOARGS),
            DECLARE_METHOD(t_StandardTokenizer, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_StandardTokenizer, reset, METH_VARARGS),
            DECLARE_METHOD(t_StandardTokenizer, setMaxTokenLength, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(StandardTokenizer, t_StandardTokenizer, ::org::apache::lucene::analysis::Tokenizer, StandardTokenizer, t_StandardTokenizer_init_, 0, 0, t_StandardTokenizer__fields_, 0, 0);

          void t_StandardTokenizer::install(PyObject *module)
          {
            installType(&PY_TYPE(StandardTokenizer), module, "StandardTokenizer", 0);
          }

          void t_StandardTokenizer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(StandardTokenizer).tp_dict, "class_", make_descriptor(StandardTokenizer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(StandardTokenizer).tp_dict, "wrapfn_", make_descriptor(t_StandardTokenizer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(StandardTokenizer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(StandardTokenizer::initializeClass);
            PyDict_SetItemString(PY_TYPE(StandardTokenizer).tp_dict, "ACRONYM", make_descriptor(StandardTokenizer::ACRONYM));
            PyDict_SetItemString(PY_TYPE(StandardTokenizer).tp_dict, "ACRONYM_DEP", make_descriptor(StandardTokenizer::ACRONYM_DEP));
            PyDict_SetItemString(PY_TYPE(StandardTokenizer).tp_dict, "ALPHANUM", make_descriptor(StandardTokenizer::ALPHANUM));
            PyDict_SetItemString(PY_TYPE(StandardTokenizer).tp_dict, "APOSTROPHE", make_descriptor(StandardTokenizer::APOSTROPHE));
            PyDict_SetItemString(PY_TYPE(StandardTokenizer).tp_dict, "CJ", make_descriptor(StandardTokenizer::CJ));
            PyDict_SetItemString(PY_TYPE(StandardTokenizer).tp_dict, "COMPANY", make_descriptor(StandardTokenizer::COMPANY));
            PyDict_SetItemString(PY_TYPE(StandardTokenizer).tp_dict, "EMAIL", make_descriptor(StandardTokenizer::EMAIL));
            PyDict_SetItemString(PY_TYPE(StandardTokenizer).tp_dict, "HANGUL", make_descriptor(StandardTokenizer::HANGUL));
            PyDict_SetItemString(PY_TYPE(StandardTokenizer).tp_dict, "HIRAGANA", make_descriptor(StandardTokenizer::HIRAGANA));
            PyDict_SetItemString(PY_TYPE(StandardTokenizer).tp_dict, "HOST", make_descriptor(StandardTokenizer::HOST));
            PyDict_SetItemString(PY_TYPE(StandardTokenizer).tp_dict, "IDEOGRAPHIC", make_descriptor(StandardTokenizer::IDEOGRAPHIC));
            PyDict_SetItemString(PY_TYPE(StandardTokenizer).tp_dict, "KATAKANA", make_descriptor(StandardTokenizer::KATAKANA));
            PyDict_SetItemString(PY_TYPE(StandardTokenizer).tp_dict, "NUM", make_descriptor(StandardTokenizer::NUM));
            PyDict_SetItemString(PY_TYPE(StandardTokenizer).tp_dict, "SOUTHEAST_ASIAN", make_descriptor(StandardTokenizer::SOUTHEAST_ASIAN));
            PyDict_SetItemString(PY_TYPE(StandardTokenizer).tp_dict, "TOKEN_TYPES", make_descriptor(JArray<jstring>(StandardTokenizer::TOKEN_TYPES->this$).wrap()));
          }

          static PyObject *t_StandardTokenizer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, StandardTokenizer::initializeClass, 1)))
              return NULL;
            return t_StandardTokenizer::wrap_Object(StandardTokenizer(((t_StandardTokenizer *) arg)->object.this$));
          }
          static PyObject *t_StandardTokenizer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, StandardTokenizer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_StandardTokenizer_init_(t_StandardTokenizer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::java::io::Reader a0((jobject) NULL);
                StandardTokenizer object((jobject) NULL);

                if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
                {
                  INT_CALL(object = StandardTokenizer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
                ::java::io::Reader a1((jobject) NULL);
                StandardTokenizer object((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = StandardTokenizer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                ::java::io::Reader a1((jobject) NULL);
                StandardTokenizer object((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::util::Version::initializeClass, ::java::io::Reader::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = StandardTokenizer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                ::org::apache::lucene::util::AttributeFactory a1((jobject) NULL);
                ::java::io::Reader a2((jobject) NULL);
                StandardTokenizer object((jobject) NULL);

                if (!parseArgs(args, "kkk", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = StandardTokenizer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_StandardTokenizer_close(t_StandardTokenizer *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.close());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(StandardTokenizer), (PyObject *) self, "close", args, 2);
          }

          static PyObject *t_StandardTokenizer_end(t_StandardTokenizer *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.end());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(StandardTokenizer), (PyObject *) self, "end", args, 2);
          }

          static PyObject *t_StandardTokenizer_getMaxTokenLength(t_StandardTokenizer *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getMaxTokenLength());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_StandardTokenizer_incrementToken(t_StandardTokenizer *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(StandardTokenizer), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_StandardTokenizer_reset(t_StandardTokenizer *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(StandardTokenizer), (PyObject *) self, "reset", args, 2);
          }

          static PyObject *t_StandardTokenizer_setMaxTokenLength(t_StandardTokenizer *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setMaxTokenLength(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMaxTokenLength", arg);
            return NULL;
          }

          static PyObject *t_StandardTokenizer_get__maxTokenLength(t_StandardTokenizer *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getMaxTokenLength());
            return PyInt_FromLong((long) value);
          }
          static int t_StandardTokenizer_set__maxTokenLength(t_StandardTokenizer *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setMaxTokenLength(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "maxTokenLength", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/FieldInfo.h"
#include "org/apache/lucene/index/FieldInfo$IndexOptions.h"
#include "org/apache/lucene/index/FieldInfo$DocValuesType.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *FieldInfo::class$ = NULL;
        jmethodID *FieldInfo::mids$ = NULL;
        jfieldID *FieldInfo::fids$ = NULL;
        bool FieldInfo::live$ = false;

        jclass FieldInfo::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/FieldInfo");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_09a7b3ac] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;ZIZZZLorg/apache/lucene/index/FieldInfo$IndexOptions;Lorg/apache/lucene/index/FieldInfo$DocValuesType;Lorg/apache/lucene/index/FieldInfo$DocValuesType;JLjava/util/Map;)V");
            mids$[mid_attributes_db60befd] = env->getMethodID(cls, "attributes", "()Ljava/util/Map;");
            mids$[mid_getAttribute_97a5258f] = env->getMethodID(cls, "getAttribute", "(Ljava/lang/String;)Ljava/lang/String;");
            mids$[mid_getDocValuesGen_54c6a17a] = env->getMethodID(cls, "getDocValuesGen", "()J");
            mids$[mid_getDocValuesType_db3dc573] = env->getMethodID(cls, "getDocValuesType", "()Lorg/apache/lucene/index/FieldInfo$DocValuesType;");
            mids$[mid_getIndexOptions_e1b704de] = env->getMethodID(cls, "getIndexOptions", "()Lorg/apache/lucene/index/FieldInfo$IndexOptions;");
            mids$[mid_getNormType_db3dc573] = env->getMethodID(cls, "getNormType", "()Lorg/apache/lucene/index/FieldInfo$DocValuesType;");
            mids$[mid_hasDocValues_54c6a16a] = env->getMethodID(cls, "hasDocValues", "()Z");
            mids$[mid_hasNorms_54c6a16a] = env->getMethodID(cls, "hasNorms", "()Z");
            mids$[mid_hasPayloads_54c6a16a] = env->getMethodID(cls, "hasPayloads", "()Z");
            mids$[mid_hasVectors_54c6a16a] = env->getMethodID(cls, "hasVectors", "()Z");
            mids$[mid_isIndexed_54c6a16a] = env->getMethodID(cls, "isIndexed", "()Z");
            mids$[mid_omitsNorms_54c6a16a] = env->getMethodID(cls, "omitsNorms", "()Z");
            mids$[mid_putAttribute_aacea7e9] = env->getMethodID(cls, "putAttribute", "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;");

            fids$ = new jfieldID[max_fid];
            fids$[fid_name] = env->getFieldID(cls, "name", "Ljava/lang/String;");
            fids$[fid_number] = env->getFieldID(cls, "number", "I");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FieldInfo::FieldInfo(const ::java::lang::String & a0, jboolean a1, jint a2, jboolean a3, jboolean a4, jboolean a5, const ::org::apache::lucene::index::FieldInfo$IndexOptions & a6, const ::org::apache::lucene::index::FieldInfo$DocValuesType & a7, const ::org::apache::lucene::index::FieldInfo$DocValuesType & a8, jlong a9, const ::java::util::Map & a10) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_09a7b3ac, a0.this$, a1, a2, a3, a4, a5, a6.this$, a7.this$, a8.this$, a9, a10.this$)) {}

        ::java::util::Map FieldInfo::attributes() const
        {
          return ::java::util::Map(env->callObjectMethod(this$, mids$[mid_attributes_db60befd]));
        }

        ::java::lang::String FieldInfo::getAttribute(const ::java::lang::String & a0) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getAttribute_97a5258f], a0.this$));
        }

        jlong FieldInfo::getDocValuesGen() const
        {
          return env->callLongMethod(this$, mids$[mid_getDocValuesGen_54c6a17a]);
        }

        ::org::apache::lucene::index::FieldInfo$DocValuesType FieldInfo::getDocValuesType() const
        {
          return ::org::apache::lucene::index::FieldInfo$DocValuesType(env->callObjectMethod(this$, mids$[mid_getDocValuesType_db3dc573]));
        }

        ::org::apache::lucene::index::FieldInfo$IndexOptions FieldInfo::getIndexOptions() const
        {
          return ::org::apache::lucene::index::FieldInfo$IndexOptions(env->callObjectMethod(this$, mids$[mid_getIndexOptions_e1b704de]));
        }

        ::org::apache::lucene::index::FieldInfo$DocValuesType FieldInfo::getNormType() const
        {
          return ::org::apache::lucene::index::FieldInfo$DocValuesType(env->callObjectMethod(this$, mids$[mid_getNormType_db3dc573]));
        }

        jboolean FieldInfo::hasDocValues() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasDocValues_54c6a16a]);
        }

        jboolean FieldInfo::hasNorms() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasNorms_54c6a16a]);
        }

        jboolean FieldInfo::hasPayloads() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasPayloads_54c6a16a]);
        }

        jboolean FieldInfo::hasVectors() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasVectors_54c6a16a]);
        }

        jboolean FieldInfo::isIndexed() const
        {
          return env->callBooleanMethod(this$, mids$[mid_isIndexed_54c6a16a]);
        }

        jboolean FieldInfo::omitsNorms() const
        {
          return env->callBooleanMethod(this$, mids$[mid_omitsNorms_54c6a16a]);
        }

        ::java::lang::String FieldInfo::putAttribute(const ::java::lang::String & a0, const ::java::lang::String & a1) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_putAttribute_aacea7e9], a0.this$, a1.this$));
        }

        ::java::lang::String FieldInfo::_get_name() const
        {
          return ::java::lang::String(env->getObjectField(this$, fids$[fid_name]));
        }

        jint FieldInfo::_get_number() const
        {
          return env->getIntField(this$, fids$[fid_number]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_FieldInfo_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldInfo_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FieldInfo_init_(t_FieldInfo *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FieldInfo_attributes(t_FieldInfo *self);
        static PyObject *t_FieldInfo_getAttribute(t_FieldInfo *self, PyObject *arg);
        static PyObject *t_FieldInfo_getDocValuesGen(t_FieldInfo *self);
        static PyObject *t_FieldInfo_getDocValuesType(t_FieldInfo *self);
        static PyObject *t_FieldInfo_getIndexOptions(t_FieldInfo *self);
        static PyObject *t_FieldInfo_getNormType(t_FieldInfo *self);
        static PyObject *t_FieldInfo_hasDocValues(t_FieldInfo *self);
        static PyObject *t_FieldInfo_hasNorms(t_FieldInfo *self);
        static PyObject *t_FieldInfo_hasPayloads(t_FieldInfo *self);
        static PyObject *t_FieldInfo_hasVectors(t_FieldInfo *self);
        static PyObject *t_FieldInfo_isIndexed(t_FieldInfo *self);
        static PyObject *t_FieldInfo_omitsNorms(t_FieldInfo *self);
        static PyObject *t_FieldInfo_putAttribute(t_FieldInfo *self, PyObject *args);
        static PyObject *t_FieldInfo_get__name(t_FieldInfo *self, void *data);
        static PyObject *t_FieldInfo_get__number(t_FieldInfo *self, void *data);

        static PyObject *t_FieldInfo_get__docValuesGen(t_FieldInfo *self, void *data);
        static PyObject *t_FieldInfo_get__docValuesType(t_FieldInfo *self, void *data);
        static PyObject *t_FieldInfo_get__indexOptions(t_FieldInfo *self, void *data);
        static PyObject *t_FieldInfo_get__indexed(t_FieldInfo *self, void *data);
        static PyObject *t_FieldInfo_get__normType(t_FieldInfo *self, void *data);
        static PyGetSetDef t_FieldInfo__fields_[] = {
          DECLARE_GET_FIELD(t_FieldInfo, name),
          DECLARE_GET_FIELD(t_FieldInfo, number),
          DECLARE_GET_FIELD(t_FieldInfo, docValuesGen),
          DECLARE_GET_FIELD(t_FieldInfo, docValuesType),
          DECLARE_GET_FIELD(t_FieldInfo, indexOptions),
          DECLARE_GET_FIELD(t_FieldInfo, indexed),
          DECLARE_GET_FIELD(t_FieldInfo, normType),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FieldInfo__methods_[] = {
          DECLARE_METHOD(t_FieldInfo, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldInfo, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldInfo, attributes, METH_NOARGS),
          DECLARE_METHOD(t_FieldInfo, getAttribute, METH_O),
          DECLARE_METHOD(t_FieldInfo, getDocValuesGen, METH_NOARGS),
          DECLARE_METHOD(t_FieldInfo, getDocValuesType, METH_NOARGS),
          DECLARE_METHOD(t_FieldInfo, getIndexOptions, METH_NOARGS),
          DECLARE_METHOD(t_FieldInfo, getNormType, METH_NOARGS),
          DECLARE_METHOD(t_FieldInfo, hasDocValues, METH_NOARGS),
          DECLARE_METHOD(t_FieldInfo, hasNorms, METH_NOARGS),
          DECLARE_METHOD(t_FieldInfo, hasPayloads, METH_NOARGS),
          DECLARE_METHOD(t_FieldInfo, hasVectors, METH_NOARGS),
          DECLARE_METHOD(t_FieldInfo, isIndexed, METH_NOARGS),
          DECLARE_METHOD(t_FieldInfo, omitsNorms, METH_NOARGS),
          DECLARE_METHOD(t_FieldInfo, putAttribute, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldInfo, t_FieldInfo, ::java::lang::Object, FieldInfo, t_FieldInfo_init_, 0, 0, t_FieldInfo__fields_, 0, 0);

        void t_FieldInfo::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldInfo), module, "FieldInfo", 0);
          PyDict_SetItemString(PY_TYPE(FieldInfo).tp_dict, "DocValuesType", make_descriptor(&PY_TYPE(FieldInfo$DocValuesType)));
          PyDict_SetItemString(PY_TYPE(FieldInfo).tp_dict, "IndexOptions", make_descriptor(&PY_TYPE(FieldInfo$IndexOptions)));
        }

        void t_FieldInfo::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldInfo).tp_dict, "class_", make_descriptor(FieldInfo::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldInfo).tp_dict, "wrapfn_", make_descriptor(t_FieldInfo::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldInfo).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldInfo_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldInfo::initializeClass, 1)))
            return NULL;
          return t_FieldInfo::wrap_Object(FieldInfo(((t_FieldInfo *) arg)->object.this$));
        }
        static PyObject *t_FieldInfo_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldInfo::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FieldInfo_init_(t_FieldInfo *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::String a0((jobject) NULL);
          jboolean a1;
          jint a2;
          jboolean a3;
          jboolean a4;
          jboolean a5;
          ::org::apache::lucene::index::FieldInfo$IndexOptions a6((jobject) NULL);
          PyTypeObject **p6;
          ::org::apache::lucene::index::FieldInfo$DocValuesType a7((jobject) NULL);
          PyTypeObject **p7;
          ::org::apache::lucene::index::FieldInfo$DocValuesType a8((jobject) NULL);
          PyTypeObject **p8;
          jlong a9;
          ::java::util::Map a10((jobject) NULL);
          PyTypeObject **p10;
          FieldInfo object((jobject) NULL);

          if (!parseArgs(args, "sZIZZZKKKJK", ::org::apache::lucene::index::FieldInfo$IndexOptions::initializeClass, ::org::apache::lucene::index::FieldInfo$DocValuesType::initializeClass, ::org::apache::lucene::index::FieldInfo$DocValuesType::initializeClass, ::java::util::Map::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5, &a6, &p6, ::org::apache::lucene::index::t_FieldInfo$IndexOptions::parameters_, &a7, &p7, ::org::apache::lucene::index::t_FieldInfo$DocValuesType::parameters_, &a8, &p8, ::org::apache::lucene::index::t_FieldInfo$DocValuesType::parameters_, &a9, &a10, &p10, ::java::util::t_Map::parameters_))
          {
            INT_CALL(object = FieldInfo(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FieldInfo_attributes(t_FieldInfo *self)
        {
          ::java::util::Map result((jobject) NULL);
          OBJ_CALL(result = self->object.attributes());
          return ::java::util::t_Map::wrap_Object(result, &::java::lang::PY_TYPE(String), &::java::lang::PY_TYPE(String));
        }

        static PyObject *t_FieldInfo_getAttribute(t_FieldInfo *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = self->object.getAttribute(a0));
            return j2p(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getAttribute", arg);
          return NULL;
        }

        static PyObject *t_FieldInfo_getDocValuesGen(t_FieldInfo *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getDocValuesGen());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_FieldInfo_getDocValuesType(t_FieldInfo *self)
        {
          ::org::apache::lucene::index::FieldInfo$DocValuesType result((jobject) NULL);
          OBJ_CALL(result = self->object.getDocValuesType());
          return ::org::apache::lucene::index::t_FieldInfo$DocValuesType::wrap_Object(result);
        }

        static PyObject *t_FieldInfo_getIndexOptions(t_FieldInfo *self)
        {
          ::org::apache::lucene::index::FieldInfo$IndexOptions result((jobject) NULL);
          OBJ_CALL(result = self->object.getIndexOptions());
          return ::org::apache::lucene::index::t_FieldInfo$IndexOptions::wrap_Object(result);
        }

        static PyObject *t_FieldInfo_getNormType(t_FieldInfo *self)
        {
          ::org::apache::lucene::index::FieldInfo$DocValuesType result((jobject) NULL);
          OBJ_CALL(result = self->object.getNormType());
          return ::org::apache::lucene::index::t_FieldInfo$DocValuesType::wrap_Object(result);
        }

        static PyObject *t_FieldInfo_hasDocValues(t_FieldInfo *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.hasDocValues());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_FieldInfo_hasNorms(t_FieldInfo *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.hasNorms());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_FieldInfo_hasPayloads(t_FieldInfo *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.hasPayloads());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_FieldInfo_hasVectors(t_FieldInfo *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.hasVectors());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_FieldInfo_isIndexed(t_FieldInfo *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.isIndexed());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_FieldInfo_omitsNorms(t_FieldInfo *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.omitsNorms());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_FieldInfo_putAttribute(t_FieldInfo *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "ss", &a0, &a1))
          {
            OBJ_CALL(result = self->object.putAttribute(a0, a1));
            return j2p(result);
          }

          PyErr_SetArgsError((PyObject *) self, "putAttribute", args);
          return NULL;
        }

        static PyObject *t_FieldInfo_get__name(t_FieldInfo *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object._get_name());
          return j2p(value);
        }

        static PyObject *t_FieldInfo_get__number(t_FieldInfo *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_number());
          return PyInt_FromLong((long) value);
        }

        static PyObject *t_FieldInfo_get__docValuesGen(t_FieldInfo *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getDocValuesGen());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }

        static PyObject *t_FieldInfo_get__docValuesType(t_FieldInfo *self, void *data)
        {
          ::org::apache::lucene::index::FieldInfo$DocValuesType value((jobject) NULL);
          OBJ_CALL(value = self->object.getDocValuesType());
          return ::org::apache::lucene::index::t_FieldInfo$DocValuesType::wrap_Object(value);
        }

        static PyObject *t_FieldInfo_get__indexOptions(t_FieldInfo *self, void *data)
        {
          ::org::apache::lucene::index::FieldInfo$IndexOptions value((jobject) NULL);
          OBJ_CALL(value = self->object.getIndexOptions());
          return ::org::apache::lucene::index::t_FieldInfo$IndexOptions::wrap_Object(value);
        }

        static PyObject *t_FieldInfo_get__indexed(t_FieldInfo *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.isIndexed());
          Py_RETURN_BOOL(value);
        }

        static PyObject *t_FieldInfo_get__normType(t_FieldInfo *self, void *data)
        {
          ::org::apache::lucene::index::FieldInfo$DocValuesType value((jobject) NULL);
          OBJ_CALL(value = self->object.getNormType());
          return ::org::apache::lucene::index::t_FieldInfo$DocValuesType::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FieldCache$IntParser.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FieldCache$IntParser::class$ = NULL;
        jmethodID *FieldCache$IntParser::mids$ = NULL;
        bool FieldCache$IntParser::live$ = false;

        jclass FieldCache$IntParser::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FieldCache$IntParser");

            mids$ = new jmethodID[max_mid];
            mids$[mid_parseInt_7bc03ddb] = env->getMethodID(cls, "parseInt", "(Lorg/apache/lucene/util/BytesRef;)I");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jint FieldCache$IntParser::parseInt(const ::org::apache::lucene::util::BytesRef & a0) const
        {
          return env->callIntMethod(this$, mids$[mid_parseInt_7bc03ddb], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FieldCache$IntParser_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldCache$IntParser_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldCache$IntParser_parseInt(t_FieldCache$IntParser *self, PyObject *arg);

        static PyMethodDef t_FieldCache$IntParser__methods_[] = {
          DECLARE_METHOD(t_FieldCache$IntParser, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCache$IntParser, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCache$IntParser, parseInt, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldCache$IntParser, t_FieldCache$IntParser, ::org::apache::lucene::search::FieldCache$Parser, FieldCache$IntParser, abstract_init, 0, 0, 0, 0, 0);

        void t_FieldCache$IntParser::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldCache$IntParser), module, "FieldCache$IntParser", 0);
        }

        void t_FieldCache$IntParser::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldCache$IntParser).tp_dict, "class_", make_descriptor(FieldCache$IntParser::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldCache$IntParser).tp_dict, "wrapfn_", make_descriptor(t_FieldCache$IntParser::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldCache$IntParser).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldCache$IntParser_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldCache$IntParser::initializeClass, 1)))
            return NULL;
          return t_FieldCache$IntParser::wrap_Object(FieldCache$IntParser(((t_FieldCache$IntParser *) arg)->object.this$));
        }
        static PyObject *t_FieldCache$IntParser_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldCache$IntParser::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FieldCache$IntParser_parseInt(t_FieldCache$IntParser *self, PyObject *arg)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          jint result;

          if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.parseInt(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "parseInt", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/vectorhighlight/FastVectorHighlighter.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/vectorhighlight/FragListBuilder.h"
#include "java/util/Set.h"
#include "org/apache/lucene/search/vectorhighlight/FragmentsBuilder.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/vectorhighlight/FieldQuery.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/search/highlight/Encoder.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Query.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {

          ::java::lang::Class *FastVectorHighlighter::class$ = NULL;
          jmethodID *FastVectorHighlighter::mids$ = NULL;
          bool FastVectorHighlighter::live$ = false;
          jboolean FastVectorHighlighter::DEFAULT_FIELD_MATCH = (jboolean) 0;
          jboolean FastVectorHighlighter::DEFAULT_PHRASE_HIGHLIGHT = (jboolean) 0;

          jclass FastVectorHighlighter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/vectorhighlight/FastVectorHighlighter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_46f2e2c4] = env->getMethodID(cls, "<init>", "(ZZ)V");
              mids$[mid_init$_35aba53c] = env->getMethodID(cls, "<init>", "(ZZLorg/apache/lucene/search/vectorhighlight/FragListBuilder;Lorg/apache/lucene/search/vectorhighlight/FragmentsBuilder;)V");
              mids$[mid_getBestFragment_dab3f1b2] = env->getMethodID(cls, "getBestFragment", "(Lorg/apache/lucene/search/vectorhighlight/FieldQuery;Lorg/apache/lucene/index/IndexReader;ILjava/lang/String;I)Ljava/lang/String;");
              mids$[mid_getBestFragment_71cd1532] = env->getMethodID(cls, "getBestFragment", "(Lorg/apache/lucene/search/vectorhighlight/FieldQuery;Lorg/apache/lucene/index/IndexReader;ILjava/lang/String;ILorg/apache/lucene/search/vectorhighlight/FragListBuilder;Lorg/apache/lucene/search/vectorhighlight/FragmentsBuilder;[Ljava/lang/String;[Ljava/lang/String;Lorg/apache/lucene/search/highlight/Encoder;)Ljava/lang/String;");
              mids$[mid_getBestFragments_f180a9d4] = env->getMethodID(cls, "getBestFragments", "(Lorg/apache/lucene/search/vectorhighlight/FieldQuery;Lorg/apache/lucene/index/IndexReader;ILjava/lang/String;II)[Ljava/lang/String;");
              mids$[mid_getBestFragments_d3e90fd8] = env->getMethodID(cls, "getBestFragments", "(Lorg/apache/lucene/search/vectorhighlight/FieldQuery;Lorg/apache/lucene/index/IndexReader;ILjava/lang/String;IILorg/apache/lucene/search/vectorhighlight/FragListBuilder;Lorg/apache/lucene/search/vectorhighlight/FragmentsBuilder;[Ljava/lang/String;[Ljava/lang/String;Lorg/apache/lucene/search/highlight/Encoder;)[Ljava/lang/String;");
              mids$[mid_getBestFragments_5366ca3a] = env->getMethodID(cls, "getBestFragments", "(Lorg/apache/lucene/search/vectorhighlight/FieldQuery;Lorg/apache/lucene/index/IndexReader;ILjava/lang/String;Ljava/util/Set;IILorg/apache/lucene/search/vectorhighlight/FragListBuilder;Lorg/apache/lucene/search/vectorhighlight/FragmentsBuilder;[Ljava/lang/String;[Ljava/lang/String;Lorg/apache/lucene/search/highlight/Encoder;)[Ljava/lang/String;");
              mids$[mid_getFieldQuery_b2d7cb3a] = env->getMethodID(cls, "getFieldQuery", "(Lorg/apache/lucene/search/Query;)Lorg/apache/lucene/search/vectorhighlight/FieldQuery;");
              mids$[mid_getFieldQuery_6934781b] = env->getMethodID(cls, "getFieldQuery", "(Lorg/apache/lucene/search/Query;Lorg/apache/lucene/index/IndexReader;)Lorg/apache/lucene/search/vectorhighlight/FieldQuery;");
              mids$[mid_getPhraseLimit_54c6a179] = env->getMethodID(cls, "getPhraseLimit", "()I");
              mids$[mid_isFieldMatch_54c6a16a] = env->getMethodID(cls, "isFieldMatch", "()Z");
              mids$[mid_isPhraseHighlight_54c6a16a] = env->getMethodID(cls, "isPhraseHighlight", "()Z");
              mids$[mid_setPhraseLimit_39c7bd3c] = env->getMethodID(cls, "setPhraseLimit", "(I)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_FIELD_MATCH = env->getStaticBooleanField(cls, "DEFAULT_FIELD_MATCH");
              DEFAULT_PHRASE_HIGHLIGHT = env->getStaticBooleanField(cls, "DEFAULT_PHRASE_HIGHLIGHT");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FastVectorHighlighter::FastVectorHighlighter() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          FastVectorHighlighter::FastVectorHighlighter(jboolean a0, jboolean a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_46f2e2c4, a0, a1)) {}

          FastVectorHighlighter::FastVectorHighlighter(jboolean a0, jboolean a1, const ::org::apache::lucene::search::vectorhighlight::FragListBuilder & a2, const ::org::apache::lucene::search::vectorhighlight::FragmentsBuilder & a3) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_35aba53c, a0, a1, a2.this$, a3.this$)) {}

          ::java::lang::String FastVectorHighlighter::getBestFragment(const ::org::apache::lucene::search::vectorhighlight::FieldQuery & a0, const ::org::apache::lucene::index::IndexReader & a1, jint a2, const ::java::lang::String & a3, jint a4) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getBestFragment_dab3f1b2], a0.this$, a1.this$, a2, a3.this$, a4));
          }

          ::java::lang::String FastVectorHighlighter::getBestFragment(const ::org::apache::lucene::search::vectorhighlight::FieldQuery & a0, const ::org::apache::lucene::index::IndexReader & a1, jint a2, const ::java::lang::String & a3, jint a4, const ::org::apache::lucene::search::vectorhighlight::FragListBuilder & a5, const ::org::apache::lucene::search::vectorhighlight::FragmentsBuilder & a6, const JArray< ::java::lang::String > & a7, const JArray< ::java::lang::String > & a8, const ::org::apache::lucene::search::highlight::Encoder & a9) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getBestFragment_71cd1532], a0.this$, a1.this$, a2, a3.this$, a4, a5.this$, a6.this$, a7.this$, a8.this$, a9.this$));
          }

          JArray< ::java::lang::String > FastVectorHighlighter::getBestFragments(const ::org::apache::lucene::search::vectorhighlight::FieldQuery & a0, const ::org::apache::lucene::index::IndexReader & a1, jint a2, const ::java::lang::String & a3, jint a4, jint a5) const
          {
            return JArray< ::java::lang::String >(env->callObjectMethod(this$, mids$[mid_getBestFragments_f180a9d4], a0.this$, a1.this$, a2, a3.this$, a4, a5));
          }

          JArray< ::java::lang::String > FastVectorHighlighter::getBestFragments(const ::org::apache::lucene::search::vectorhighlight::FieldQuery & a0, const ::org::apache::lucene::index::IndexReader & a1, jint a2, const ::java::lang::String & a3, jint a4, jint a5, const ::org::apache::lucene::search::vectorhighlight::FragListBuilder & a6, const ::org::apache::lucene::search::vectorhighlight::FragmentsBuilder & a7, const JArray< ::java::lang::String > & a8, const JArray< ::java::lang::String > & a9, const ::org::apache::lucene::search::highlight::Encoder & a10) const
          {
            return JArray< ::java::lang::String >(env->callObjectMethod(this$, mids$[mid_getBestFragments_d3e90fd8], a0.this$, a1.this$, a2, a3.this$, a4, a5, a6.this$, a7.this$, a8.this$, a9.this$, a10.this$));
          }

          JArray< ::java::lang::String > FastVectorHighlighter::getBestFragments(const ::org::apache::lucene::search::vectorhighlight::FieldQuery & a0, const ::org::apache::lucene::index::IndexReader & a1, jint a2, const ::java::lang::String & a3, const ::java::util::Set & a4, jint a5, jint a6, const ::org::apache::lucene::search::vectorhighlight::FragListBuilder & a7, const ::org::apache::lucene::search::vectorhighlight::FragmentsBuilder & a8, const JArray< ::java::lang::String > & a9, const JArray< ::java::lang::String > & a10, const ::org::apache::lucene::search::highlight::Encoder & a11) const
          {
            return JArray< ::java::lang::String >(env->callObjectMethod(this$, mids$[mid_getBestFragments_5366ca3a], a0.this$, a1.this$, a2, a3.this$, a4.this$, a5, a6, a7.this$, a8.this$, a9.this$, a10.this$, a11.this$));
          }

          ::org::apache::lucene::search::vectorhighlight::FieldQuery FastVectorHighlighter::getFieldQuery(const ::org::apache::lucene::search::Query & a0) const
          {
            return ::org::apache::lucene::search::vectorhighlight::FieldQuery(env->callObjectMethod(this$, mids$[mid_getFieldQuery_b2d7cb3a], a0.this$));
          }

          ::org::apache::lucene::search::vectorhighlight::FieldQuery FastVectorHighlighter::getFieldQuery(const ::org::apache::lucene::search::Query & a0, const ::org::apache::lucene::index::IndexReader & a1) const
          {
            return ::org::apache::lucene::search::vectorhighlight::FieldQuery(env->callObjectMethod(this$, mids$[mid_getFieldQuery_6934781b], a0.this$, a1.this$));
          }

          jint FastVectorHighlighter::getPhraseLimit() const
          {
            return env->callIntMethod(this$, mids$[mid_getPhraseLimit_54c6a179]);
          }

          jboolean FastVectorHighlighter::isFieldMatch() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isFieldMatch_54c6a16a]);
          }

          jboolean FastVectorHighlighter::isPhraseHighlight() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isPhraseHighlight_54c6a16a]);
          }

          void FastVectorHighlighter::setPhraseLimit(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setPhraseLimit_39c7bd3c], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {
          static PyObject *t_FastVectorHighlighter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FastVectorHighlighter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FastVectorHighlighter_init_(t_FastVectorHighlighter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FastVectorHighlighter_getBestFragment(t_FastVectorHighlighter *self, PyObject *args);
          static PyObject *t_FastVectorHighlighter_getBestFragments(t_FastVectorHighlighter *self, PyObject *args);
          static PyObject *t_FastVectorHighlighter_getFieldQuery(t_FastVectorHighlighter *self, PyObject *args);
          static PyObject *t_FastVectorHighlighter_getPhraseLimit(t_FastVectorHighlighter *self);
          static PyObject *t_FastVectorHighlighter_isFieldMatch(t_FastVectorHighlighter *self);
          static PyObject *t_FastVectorHighlighter_isPhraseHighlight(t_FastVectorHighlighter *self);
          static PyObject *t_FastVectorHighlighter_setPhraseLimit(t_FastVectorHighlighter *self, PyObject *arg);
          static PyObject *t_FastVectorHighlighter_get__fieldMatch(t_FastVectorHighlighter *self, void *data);
          static PyObject *t_FastVectorHighlighter_get__phraseHighlight(t_FastVectorHighlighter *self, void *data);
          static PyObject *t_FastVectorHighlighter_get__phraseLimit(t_FastVectorHighlighter *self, void *data);
          static int t_FastVectorHighlighter_set__phraseLimit(t_FastVectorHighlighter *self, PyObject *arg, void *data);
          static PyGetSetDef t_FastVectorHighlighter__fields_[] = {
            DECLARE_GET_FIELD(t_FastVectorHighlighter, fieldMatch),
            DECLARE_GET_FIELD(t_FastVectorHighlighter, phraseHighlight),
            DECLARE_GETSET_FIELD(t_FastVectorHighlighter, phraseLimit),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_FastVectorHighlighter__methods_[] = {
            DECLARE_METHOD(t_FastVectorHighlighter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FastVectorHighlighter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FastVectorHighlighter, getBestFragment, METH_VARARGS),
            DECLARE_METHOD(t_FastVectorHighlighter, getBestFragments, METH_VARARGS),
            DECLARE_METHOD(t_FastVectorHighlighter, getFieldQuery, METH_VARARGS),
            DECLARE_METHOD(t_FastVectorHighlighter, getPhraseLimit, METH_NOARGS),
            DECLARE_METHOD(t_FastVectorHighlighter, isFieldMatch, METH_NOARGS),
            DECLARE_METHOD(t_FastVectorHighlighter, isPhraseHighlight, METH_NOARGS),
            DECLARE_METHOD(t_FastVectorHighlighter, setPhraseLimit, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FastVectorHighlighter, t_FastVectorHighlighter, ::java::lang::Object, FastVectorHighlighter, t_FastVectorHighlighter_init_, 0, 0, t_FastVectorHighlighter__fields_, 0, 0);

          void t_FastVectorHighlighter::install(PyObject *module)
          {
            installType(&PY_TYPE(FastVectorHighlighter), module, "FastVectorHighlighter", 0);
          }

          void t_FastVectorHighlighter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FastVectorHighlighter).tp_dict, "class_", make_descriptor(FastVectorHighlighter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FastVectorHighlighter).tp_dict, "wrapfn_", make_descriptor(t_FastVectorHighlighter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FastVectorHighlighter).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(FastVectorHighlighter::initializeClass);
            PyDict_SetItemString(PY_TYPE(FastVectorHighlighter).tp_dict, "DEFAULT_FIELD_MATCH", make_descriptor(FastVectorHighlighter::DEFAULT_FIELD_MATCH));
            PyDict_SetItemString(PY_TYPE(FastVectorHighlighter).tp_dict, "DEFAULT_PHRASE_HIGHLIGHT", make_descriptor(FastVectorHighlighter::DEFAULT_PHRASE_HIGHLIGHT));
          }

          static PyObject *t_FastVectorHighlighter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FastVectorHighlighter::initializeClass, 1)))
              return NULL;
            return t_FastVectorHighlighter::wrap_Object(FastVectorHighlighter(((t_FastVectorHighlighter *) arg)->object.this$));
          }
          static PyObject *t_FastVectorHighlighter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FastVectorHighlighter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FastVectorHighlighter_init_(t_FastVectorHighlighter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                FastVectorHighlighter object((jobject) NULL);

                INT_CALL(object = FastVectorHighlighter());
                self->object = object;
                break;
              }
              goto err;
             case 2:
              {
                jboolean a0;
                jboolean a1;
                FastVectorHighlighter object((jobject) NULL);

                if (!parseArgs(args, "ZZ", &a0, &a1))
                {
                  INT_CALL(object = FastVectorHighlighter(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 4:
              {
                jboolean a0;
                jboolean a1;
                ::org::apache::lucene::search::vectorhighlight::FragListBuilder a2((jobject) NULL);
                ::org::apache::lucene::search::vectorhighlight::FragmentsBuilder a3((jobject) NULL);
                FastVectorHighlighter object((jobject) NULL);

                if (!parseArgs(args, "ZZkk", ::org::apache::lucene::search::vectorhighlight::FragListBuilder::initializeClass, ::org::apache::lucene::search::vectorhighlight::FragmentsBuilder::initializeClass, &a0, &a1, &a2, &a3))
                {
                  INT_CALL(object = FastVectorHighlighter(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_FastVectorHighlighter_getBestFragment(t_FastVectorHighlighter *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 5:
              {
                ::org::apache::lucene::search::vectorhighlight::FieldQuery a0((jobject) NULL);
                ::org::apache::lucene::index::IndexReader a1((jobject) NULL);
                jint a2;
                ::java::lang::String a3((jobject) NULL);
                jint a4;
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, "kkIsI", ::org::apache::lucene::search::vectorhighlight::FieldQuery::initializeClass, ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &a1, &a2, &a3, &a4))
                {
                  OBJ_CALL(result = self->object.getBestFragment(a0, a1, a2, a3, a4));
                  return j2p(result);
                }
              }
              break;
             case 10:
              {
                ::org::apache::lucene::search::vectorhighlight::FieldQuery a0((jobject) NULL);
                ::org::apache::lucene::index::IndexReader a1((jobject) NULL);
                jint a2;
                ::java::lang::String a3((jobject) NULL);
                jint a4;
                ::org::apache::lucene::search::vectorhighlight::FragListBuilder a5((jobject) NULL);
                ::org::apache::lucene::search::vectorhighlight::FragmentsBuilder a6((jobject) NULL);
                JArray< ::java::lang::String > a7((jobject) NULL);
                JArray< ::java::lang::String > a8((jobject) NULL);
                ::org::apache::lucene::search::highlight::Encoder a9((jobject) NULL);
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, "kkIsIkk[s[sk", ::org::apache::lucene::search::vectorhighlight::FieldQuery::initializeClass, ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::search::vectorhighlight::FragListBuilder::initializeClass, ::org::apache::lucene::search::vectorhighlight::FragmentsBuilder::initializeClass, ::org::apache::lucene::search::highlight::Encoder::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8, &a9))
                {
                  OBJ_CALL(result = self->object.getBestFragment(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9));
                  return j2p(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "getBestFragment", args);
            return NULL;
          }

          static PyObject *t_FastVectorHighlighter_getBestFragments(t_FastVectorHighlighter *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 6:
              {
                ::org::apache::lucene::search::vectorhighlight::FieldQuery a0((jobject) NULL);
                ::org::apache::lucene::index::IndexReader a1((jobject) NULL);
                jint a2;
                ::java::lang::String a3((jobject) NULL);
                jint a4;
                jint a5;
                JArray< ::java::lang::String > result((jobject) NULL);

                if (!parseArgs(args, "kkIsII", ::org::apache::lucene::search::vectorhighlight::FieldQuery::initializeClass, ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5))
                {
                  OBJ_CALL(result = self->object.getBestFragments(a0, a1, a2, a3, a4, a5));
                  return JArray<jstring>(result.this$).wrap();
                }
              }
              break;
             case 11:
              {
                ::org::apache::lucene::search::vectorhighlight::FieldQuery a0((jobject) NULL);
                ::org::apache::lucene::index::IndexReader a1((jobject) NULL);
                jint a2;
                ::java::lang::String a3((jobject) NULL);
                jint a4;
                jint a5;
                ::org::apache::lucene::search::vectorhighlight::FragListBuilder a6((jobject) NULL);
                ::org::apache::lucene::search::vectorhighlight::FragmentsBuilder a7((jobject) NULL);
                JArray< ::java::lang::String > a8((jobject) NULL);
                JArray< ::java::lang::String > a9((jobject) NULL);
                ::org::apache::lucene::search::highlight::Encoder a10((jobject) NULL);
                JArray< ::java::lang::String > result((jobject) NULL);

                if (!parseArgs(args, "kkIsIIkk[s[sk", ::org::apache::lucene::search::vectorhighlight::FieldQuery::initializeClass, ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::search::vectorhighlight::FragListBuilder::initializeClass, ::org::apache::lucene::search::vectorhighlight::FragmentsBuilder::initializeClass, ::org::apache::lucene::search::highlight::Encoder::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8, &a9, &a10))
                {
                  OBJ_CALL(result = self->object.getBestFragments(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10));
                  return JArray<jstring>(result.this$).wrap();
                }
              }
              break;
             case 12:
              {
                ::org::apache::lucene::search::vectorhighlight::FieldQuery a0((jobject) NULL);
                ::org::apache::lucene::index::IndexReader a1((jobject) NULL);
                jint a2;
                ::java::lang::String a3((jobject) NULL);
                ::java::util::Set a4((jobject) NULL);
                PyTypeObject **p4;
                jint a5;
                jint a6;
                ::org::apache::lucene::search::vectorhighlight::FragListBuilder a7((jobject) NULL);
                ::org::apache::lucene::search::vectorhighlight::FragmentsBuilder a8((jobject) NULL);
                JArray< ::java::lang::String > a9((jobject) NULL);
                JArray< ::java::lang::String > a10((jobject) NULL);
                ::org::apache::lucene::search::highlight::Encoder a11((jobject) NULL);
                JArray< ::java::lang::String > result((jobject) NULL);

                if (!parseArgs(args, "kkIsKIIkk[s[sk", ::org::apache::lucene::search::vectorhighlight::FieldQuery::initializeClass, ::org::apache::lucene::index::IndexReader::initializeClass, ::java::util::Set::initializeClass, ::org::apache::lucene::search::vectorhighlight::FragListBuilder::initializeClass, ::org::apache::lucene::search::vectorhighlight::FragmentsBuilder::initializeClass, ::org::apache::lucene::search::highlight::Encoder::initializeClass, &a0, &a1, &a2, &a3, &a4, &p4, ::java::util::t_Set::parameters_, &a5, &a6, &a7, &a8, &a9, &a10, &a11))
                {
                  OBJ_CALL(result = self->object.getBestFragments(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11));
                  return JArray<jstring>(result.this$).wrap();
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "getBestFragments", args);
            return NULL;
          }

          static PyObject *t_FastVectorHighlighter_getFieldQuery(t_FastVectorHighlighter *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::search::Query a0((jobject) NULL);
                ::org::apache::lucene::search::vectorhighlight::FieldQuery result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::search::Query::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.getFieldQuery(a0));
                  return ::org::apache::lucene::search::vectorhighlight::t_FieldQuery::wrap_Object(result);
                }
              }
              break;
             case 2:
              {
                ::org::apache::lucene::search::Query a0((jobject) NULL);
                ::org::apache::lucene::index::IndexReader a1((jobject) NULL);
                ::org::apache::lucene::search::vectorhighlight::FieldQuery result((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(result = self->object.getFieldQuery(a0, a1));
                  return ::org::apache::lucene::search::vectorhighlight::t_FieldQuery::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "getFieldQuery", args);
            return NULL;
          }

          static PyObject *t_FastVectorHighlighter_getPhraseLimit(t_FastVectorHighlighter *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getPhraseLimit());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_FastVectorHighlighter_isFieldMatch(t_FastVectorHighlighter *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isFieldMatch());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_FastVectorHighlighter_isPhraseHighlight(t_FastVectorHighlighter *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isPhraseHighlight());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_FastVectorHighlighter_setPhraseLimit(t_FastVectorHighlighter *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setPhraseLimit(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setPhraseLimit", arg);
            return NULL;
          }

          static PyObject *t_FastVectorHighlighter_get__fieldMatch(t_FastVectorHighlighter *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isFieldMatch());
            Py_RETURN_BOOL(value);
          }

          static PyObject *t_FastVectorHighlighter_get__phraseHighlight(t_FastVectorHighlighter *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isPhraseHighlight());
            Py_RETURN_BOOL(value);
          }

          static PyObject *t_FastVectorHighlighter_get__phraseLimit(t_FastVectorHighlighter *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getPhraseLimit());
            return PyInt_FromLong((long) value);
          }
          static int t_FastVectorHighlighter_set__phraseLimit(t_FastVectorHighlighter *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setPhraseLimit(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "phraseLimit", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/highlight/QueryScorer.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/search/highlight/TextFragment.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/highlight/Scorer.h"
#include "org/apache/lucene/search/highlight/WeightedSpanTerm.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Query.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {

          ::java::lang::Class *QueryScorer::class$ = NULL;
          jmethodID *QueryScorer::mids$ = NULL;
          bool QueryScorer::live$ = false;

          jclass QueryScorer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/highlight/QueryScorer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_848b72aa] = env->getMethodID(cls, "<init>", "([Lorg/apache/lucene/search/highlight/WeightedSpanTerm;)V");
              mids$[mid_init$_6e301113] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Query;)V");
              mids$[mid_init$_036dd355] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Query;Ljava/lang/String;)V");
              mids$[mid_init$_19eb1b37] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Query;Ljava/lang/String;Ljava/lang/String;)V");
              mids$[mid_init$_2e1f8bd4] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Query;Lorg/apache/lucene/index/IndexReader;Ljava/lang/String;)V");
              mids$[mid_init$_b85926ce] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Query;Lorg/apache/lucene/index/IndexReader;Ljava/lang/String;Ljava/lang/String;)V");
              mids$[mid_getFragmentScore_54c6a176] = env->getMethodID(cls, "getFragmentScore", "()F");
              mids$[mid_getMaxTermWeight_54c6a176] = env->getMethodID(cls, "getMaxTermWeight", "()F");
              mids$[mid_getTokenScore_54c6a176] = env->getMethodID(cls, "getTokenScore", "()F");
              mids$[mid_getWeightedSpanTerm_0ac17355] = env->getMethodID(cls, "getWeightedSpanTerm", "(Ljava/lang/String;)Lorg/apache/lucene/search/highlight/WeightedSpanTerm;");
              mids$[mid_init_a65cd6ab] = env->getMethodID(cls, "init", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");
              mids$[mid_isExpandMultiTermQuery_54c6a16a] = env->getMethodID(cls, "isExpandMultiTermQuery", "()Z");
              mids$[mid_setExpandMultiTermQuery_bb0c767f] = env->getMethodID(cls, "setExpandMultiTermQuery", "(Z)V");
              mids$[mid_setMaxDocCharsToAnalyze_39c7bd3c] = env->getMethodID(cls, "setMaxDocCharsToAnalyze", "(I)V");
              mids$[mid_setWrapIfNotCachingTokenFilter_bb0c767f] = env->getMethodID(cls, "setWrapIfNotCachingTokenFilter", "(Z)V");
              mids$[mid_startFragment_0335a78a] = env->getMethodID(cls, "startFragment", "(Lorg/apache/lucene/search/highlight/TextFragment;)V");
              mids$[mid_newTermExtractor_109a36a0] = env->getMethodID(cls, "newTermExtractor", "(Ljava/lang/String;)Lorg/apache/lucene/search/highlight/WeightedSpanTermExtractor;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          QueryScorer::QueryScorer(const JArray< ::org::apache::lucene::search::highlight::WeightedSpanTerm > & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_848b72aa, a0.this$)) {}

          QueryScorer::QueryScorer(const ::org::apache::lucene::search::Query & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_6e301113, a0.this$)) {}

          QueryScorer::QueryScorer(const ::org::apache::lucene::search::Query & a0, const ::java::lang::String & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_036dd355, a0.this$, a1.this$)) {}

          QueryScorer::QueryScorer(const ::org::apache::lucene::search::Query & a0, const ::java::lang::String & a1, const ::java::lang::String & a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_19eb1b37, a0.this$, a1.this$, a2.this$)) {}

          QueryScorer::QueryScorer(const ::org::apache::lucene::search::Query & a0, const ::org::apache::lucene::index::IndexReader & a1, const ::java::lang::String & a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_2e1f8bd4, a0.this$, a1.this$, a2.this$)) {}

          QueryScorer::QueryScorer(const ::org::apache::lucene::search::Query & a0, const ::org::apache::lucene::index::IndexReader & a1, const ::java::lang::String & a2, const ::java::lang::String & a3) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_b85926ce, a0.this$, a1.this$, a2.this$, a3.this$)) {}

          jfloat QueryScorer::getFragmentScore() const
          {
            return env->callFloatMethod(this$, mids$[mid_getFragmentScore_54c6a176]);
          }

          jfloat QueryScorer::getMaxTermWeight() const
          {
            return env->callFloatMethod(this$, mids$[mid_getMaxTermWeight_54c6a176]);
          }

          jfloat QueryScorer::getTokenScore() const
          {
            return env->callFloatMethod(this$, mids$[mid_getTokenScore_54c6a176]);
          }

          ::org::apache::lucene::search::highlight::WeightedSpanTerm QueryScorer::getWeightedSpanTerm(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::search::highlight::WeightedSpanTerm(env->callObjectMethod(this$, mids$[mid_getWeightedSpanTerm_0ac17355], a0.this$));
          }

          ::org::apache::lucene::analysis::TokenStream QueryScorer::init(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_init_a65cd6ab], a0.this$));
          }

          jboolean QueryScorer::isExpandMultiTermQuery() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isExpandMultiTermQuery_54c6a16a]);
          }

          void QueryScorer::setExpandMultiTermQuery(jboolean a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setExpandMultiTermQuery_bb0c767f], a0);
          }

          void QueryScorer::setMaxDocCharsToAnalyze(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMaxDocCharsToAnalyze_39c7bd3c], a0);
          }

          void QueryScorer::setWrapIfNotCachingTokenFilter(jboolean a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setWrapIfNotCachingTokenFilter_bb0c767f], a0);
          }

          void QueryScorer::startFragment(const ::org::apache::lucene::search::highlight::TextFragment & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_startFragment_0335a78a], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {
          static PyObject *t_QueryScorer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_QueryScorer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_QueryScorer_init_(t_QueryScorer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_QueryScorer_getFragmentScore(t_QueryScorer *self);
          static PyObject *t_QueryScorer_getMaxTermWeight(t_QueryScorer *self);
          static PyObject *t_QueryScorer_getTokenScore(t_QueryScorer *self);
          static PyObject *t_QueryScorer_getWeightedSpanTerm(t_QueryScorer *self, PyObject *arg);
          static PyObject *t_QueryScorer_init(t_QueryScorer *self, PyObject *arg);
          static PyObject *t_QueryScorer_isExpandMultiTermQuery(t_QueryScorer *self);
          static PyObject *t_QueryScorer_setExpandMultiTermQuery(t_QueryScorer *self, PyObject *arg);
          static PyObject *t_QueryScorer_setMaxDocCharsToAnalyze(t_QueryScorer *self, PyObject *arg);
          static PyObject *t_QueryScorer_setWrapIfNotCachingTokenFilter(t_QueryScorer *self, PyObject *arg);
          static PyObject *t_QueryScorer_startFragment(t_QueryScorer *self, PyObject *arg);
          static PyObject *t_QueryScorer_get__expandMultiTermQuery(t_QueryScorer *self, void *data);
          static int t_QueryScorer_set__expandMultiTermQuery(t_QueryScorer *self, PyObject *arg, void *data);
          static PyObject *t_QueryScorer_get__fragmentScore(t_QueryScorer *self, void *data);
          static int t_QueryScorer_set__maxDocCharsToAnalyze(t_QueryScorer *self, PyObject *arg, void *data);
          static PyObject *t_QueryScorer_get__maxTermWeight(t_QueryScorer *self, void *data);
          static PyObject *t_QueryScorer_get__tokenScore(t_QueryScorer *self, void *data);
          static int t_QueryScorer_set__wrapIfNotCachingTokenFilter(t_QueryScorer *self, PyObject *arg, void *data);
          static PyGetSetDef t_QueryScorer__fields_[] = {
            DECLARE_GETSET_FIELD(t_QueryScorer, expandMultiTermQuery),
            DECLARE_GET_FIELD(t_QueryScorer, fragmentScore),
            DECLARE_SET_FIELD(t_QueryScorer, maxDocCharsToAnalyze),
            DECLARE_GET_FIELD(t_QueryScorer, maxTermWeight),
            DECLARE_GET_FIELD(t_QueryScorer, tokenScore),
            DECLARE_SET_FIELD(t_QueryScorer, wrapIfNotCachingTokenFilter),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_QueryScorer__methods_[] = {
            DECLARE_METHOD(t_QueryScorer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_QueryScorer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_QueryScorer, getFragmentScore, METH_NOARGS),
            DECLARE_METHOD(t_QueryScorer, getMaxTermWeight, METH_NOARGS),
            DECLARE_METHOD(t_QueryScorer, getTokenScore, METH_NOARGS),
            DECLARE_METHOD(t_QueryScorer, getWeightedSpanTerm, METH_O),
            DECLARE_METHOD(t_QueryScorer, init, METH_O),
            DECLARE_METHOD(t_QueryScorer, isExpandMultiTermQuery, METH_NOARGS),
            DECLARE_METHOD(t_QueryScorer, setExpandMultiTermQuery, METH_O),
            DECLARE_METHOD(t_QueryScorer, setMaxDocCharsToAnalyze, METH_O),
            DECLARE_METHOD(t_QueryScorer, setWrapIfNotCachingTokenFilter, METH_O),
            DECLARE_METHOD(t_QueryScorer, startFragment, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(QueryScorer, t_QueryScorer, ::java::lang::Object, QueryScorer, t_QueryScorer_init_, 0, 0, t_QueryScorer__fields_, 0, 0);

          void t_QueryScorer::install(PyObject *module)
          {
            installType(&PY_TYPE(QueryScorer), module, "QueryScorer", 0);
          }

          void t_QueryScorer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(QueryScorer).tp_dict, "class_", make_descriptor(QueryScorer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(QueryScorer).tp_dict, "wrapfn_", make_descriptor(t_QueryScorer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(QueryScorer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_QueryScorer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, QueryScorer::initializeClass, 1)))
              return NULL;
            return t_QueryScorer::wrap_Object(QueryScorer(((t_QueryScorer *) arg)->object.this$));
          }
          static PyObject *t_QueryScorer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, QueryScorer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_QueryScorer_init_(t_QueryScorer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                JArray< ::org::apache::lucene::search::highlight::WeightedSpanTerm > a0((jobject) NULL);
                QueryScorer object((jobject) NULL);

                if (!parseArgs(args, "[k", ::org::apache::lucene::search::highlight::WeightedSpanTerm::initializeClass, &a0))
                {
                  INT_CALL(object = QueryScorer(a0));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::search::Query a0((jobject) NULL);
                QueryScorer object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::search::Query::initializeClass, &a0))
                {
                  INT_CALL(object = QueryScorer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::search::Query a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                QueryScorer object((jobject) NULL);

                if (!parseArgs(args, "ks", ::org::apache::lucene::search::Query::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = QueryScorer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::search::Query a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                ::java::lang::String a2((jobject) NULL);
                QueryScorer object((jobject) NULL);

                if (!parseArgs(args, "kss", ::org::apache::lucene::search::Query::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = QueryScorer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::search::Query a0((jobject) NULL);
                ::org::apache::lucene::index::IndexReader a1((jobject) NULL);
                ::java::lang::String a2((jobject) NULL);
                QueryScorer object((jobject) NULL);

                if (!parseArgs(args, "kks", ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = QueryScorer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 4:
              {
                ::org::apache::lucene::search::Query a0((jobject) NULL);
                ::org::apache::lucene::index::IndexReader a1((jobject) NULL);
                ::java::lang::String a2((jobject) NULL);
                ::java::lang::String a3((jobject) NULL);
                QueryScorer object((jobject) NULL);

                if (!parseArgs(args, "kkss", ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &a1, &a2, &a3))
                {
                  INT_CALL(object = QueryScorer(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_QueryScorer_getFragmentScore(t_QueryScorer *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getFragmentScore());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_QueryScorer_getMaxTermWeight(t_QueryScorer *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getMaxTermWeight());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_QueryScorer_getTokenScore(t_QueryScorer *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getTokenScore());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_QueryScorer_getWeightedSpanTerm(t_QueryScorer *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::search::highlight::WeightedSpanTerm result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.getWeightedSpanTerm(a0));
              return ::org::apache::lucene::search::highlight::t_WeightedSpanTerm::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getWeightedSpanTerm", arg);
            return NULL;
          }

          static PyObject *t_QueryScorer_init(t_QueryScorer *self, PyObject *arg)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.init(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "init", arg);
            return NULL;
          }

          static PyObject *t_QueryScorer_isExpandMultiTermQuery(t_QueryScorer *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isExpandMultiTermQuery());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_QueryScorer_setExpandMultiTermQuery(t_QueryScorer *self, PyObject *arg)
          {
            jboolean a0;

            if (!parseArg(arg, "Z", &a0))
            {
              OBJ_CALL(self->object.setExpandMultiTermQuery(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setExpandMultiTermQuery", arg);
            return NULL;
          }

          static PyObject *t_QueryScorer_setMaxDocCharsToAnalyze(t_QueryScorer *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setMaxDocCharsToAnalyze(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMaxDocCharsToAnalyze", arg);
            return NULL;
          }

          static PyObject *t_QueryScorer_setWrapIfNotCachingTokenFilter(t_QueryScorer *self, PyObject *arg)
          {
            jboolean a0;

            if (!parseArg(arg, "Z", &a0))
            {
              OBJ_CALL(self->object.setWrapIfNotCachingTokenFilter(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setWrapIfNotCachingTokenFilter", arg);
            return NULL;
          }

          static PyObject *t_QueryScorer_startFragment(t_QueryScorer *self, PyObject *arg)
          {
            ::org::apache::lucene::search::highlight::TextFragment a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::search::highlight::TextFragment::initializeClass, &a0))
            {
              OBJ_CALL(self->object.startFragment(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "startFragment", arg);
            return NULL;
          }

          static PyObject *t_QueryScorer_get__expandMultiTermQuery(t_QueryScorer *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isExpandMultiTermQuery());
            Py_RETURN_BOOL(value);
          }
          static int t_QueryScorer_set__expandMultiTermQuery(t_QueryScorer *self, PyObject *arg, void *data)
          {
            {
              jboolean value;
              if (!parseArg(arg, "Z", &value))
              {
                INT_CALL(self->object.setExpandMultiTermQuery(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "expandMultiTermQuery", arg);
            return -1;
          }

          static PyObject *t_QueryScorer_get__fragmentScore(t_QueryScorer *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getFragmentScore());
            return PyFloat_FromDouble((double) value);
          }

          static int t_QueryScorer_set__maxDocCharsToAnalyze(t_QueryScorer *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setMaxDocCharsToAnalyze(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "maxDocCharsToAnalyze", arg);
            return -1;
          }

          static PyObject *t_QueryScorer_get__maxTermWeight(t_QueryScorer *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getMaxTermWeight());
            return PyFloat_FromDouble((double) value);
          }

          static PyObject *t_QueryScorer_get__tokenScore(t_QueryScorer *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getTokenScore());
            return PyFloat_FromDouble((double) value);
          }

          static int t_QueryScorer_set__wrapIfNotCachingTokenFilter(t_QueryScorer *self, PyObject *arg, void *data)
          {
            {
              jboolean value;
              if (!parseArg(arg, "Z", &value))
              {
                INT_CALL(self->object.setWrapIfNotCachingTokenFilter(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "wrapIfNotCachingTokenFilter", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/highlight/InvalidTokenOffsetsException.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {

          ::java::lang::Class *InvalidTokenOffsetsException::class$ = NULL;
          jmethodID *InvalidTokenOffsetsException::mids$ = NULL;
          bool InvalidTokenOffsetsException::live$ = false;

          jclass InvalidTokenOffsetsException::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/highlight/InvalidTokenOffsetsException");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          InvalidTokenOffsetsException::InvalidTokenOffsetsException(const ::java::lang::String & a0) : ::java::lang::Exception(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {
          static PyObject *t_InvalidTokenOffsetsException_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_InvalidTokenOffsetsException_instance_(PyTypeObject *type, PyObject *arg);
          static int t_InvalidTokenOffsetsException_init_(t_InvalidTokenOffsetsException *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_InvalidTokenOffsetsException__methods_[] = {
            DECLARE_METHOD(t_InvalidTokenOffsetsException, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_InvalidTokenOffsetsException, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(InvalidTokenOffsetsException, t_InvalidTokenOffsetsException, ::java::lang::Exception, InvalidTokenOffsetsException, t_InvalidTokenOffsetsException_init_, 0, 0, 0, 0, 0);

          void t_InvalidTokenOffsetsException::install(PyObject *module)
          {
            installType(&PY_TYPE(InvalidTokenOffsetsException), module, "InvalidTokenOffsetsException", 0);
          }

          void t_InvalidTokenOffsetsException::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(InvalidTokenOffsetsException).tp_dict, "class_", make_descriptor(InvalidTokenOffsetsException::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(InvalidTokenOffsetsException).tp_dict, "wrapfn_", make_descriptor(t_InvalidTokenOffsetsException::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(InvalidTokenOffsetsException).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_InvalidTokenOffsetsException_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, InvalidTokenOffsetsException::initializeClass, 1)))
              return NULL;
            return t_InvalidTokenOffsetsException::wrap_Object(InvalidTokenOffsetsException(((t_InvalidTokenOffsetsException *) arg)->object.this$));
          }
          static PyObject *t_InvalidTokenOffsetsException_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, InvalidTokenOffsetsException::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_InvalidTokenOffsetsException_init_(t_InvalidTokenOffsetsException *self, PyObject *args, PyObject *kwds)
          {
            ::java::lang::String a0((jobject) NULL);
            InvalidTokenOffsetsException object((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              INT_CALL(object = InvalidTokenOffsetsException(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/compound/hyphenation/Hyphenation.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace compound {
          namespace hyphenation {

            ::java::lang::Class *Hyphenation::class$ = NULL;
            jmethodID *Hyphenation::mids$ = NULL;
            bool Hyphenation::live$ = false;

            jclass Hyphenation::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/compound/hyphenation/Hyphenation");

                mids$ = new jmethodID[max_mid];
                mids$[mid_getHyphenationPoints_dab10e75] = env->getMethodID(cls, "getHyphenationPoints", "()[I");
                mids$[mid_length_54c6a179] = env->getMethodID(cls, "length", "()I");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            JArray< jint > Hyphenation::getHyphenationPoints() const
            {
              return JArray< jint >(env->callObjectMethod(this$, mids$[mid_getHyphenationPoints_dab10e75]));
            }

            jint Hyphenation::length() const
            {
              return env->callIntMethod(this$, mids$[mid_length_54c6a179]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace compound {
          namespace hyphenation {
            static PyObject *t_Hyphenation_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_Hyphenation_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_Hyphenation_getHyphenationPoints(t_Hyphenation *self);
            static PyObject *t_Hyphenation_length(t_Hyphenation *self);
            static PyObject *t_Hyphenation_get__hyphenationPoints(t_Hyphenation *self, void *data);
            static PyGetSetDef t_Hyphenation__fields_[] = {
              DECLARE_GET_FIELD(t_Hyphenation, hyphenationPoints),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_Hyphenation__methods_[] = {
              DECLARE_METHOD(t_Hyphenation, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_Hyphenation, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_Hyphenation, getHyphenationPoints, METH_NOARGS),
              DECLARE_METHOD(t_Hyphenation, length, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(Hyphenation, t_Hyphenation, ::java::lang::Object, Hyphenation, abstract_init, 0, 0, t_Hyphenation__fields_, 0, 0);

            void t_Hyphenation::install(PyObject *module)
            {
              installType(&PY_TYPE(Hyphenation), module, "Hyphenation", 0);
            }

            void t_Hyphenation::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(Hyphenation).tp_dict, "class_", make_descriptor(Hyphenation::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(Hyphenation).tp_dict, "wrapfn_", make_descriptor(t_Hyphenation::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(Hyphenation).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_Hyphenation_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, Hyphenation::initializeClass, 1)))
                return NULL;
              return t_Hyphenation::wrap_Object(Hyphenation(((t_Hyphenation *) arg)->object.this$));
            }
            static PyObject *t_Hyphenation_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, Hyphenation::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_Hyphenation_getHyphenationPoints(t_Hyphenation *self)
            {
              JArray< jint > result((jobject) NULL);
              OBJ_CALL(result = self->object.getHyphenationPoints());
              return result.wrap();
            }

            static PyObject *t_Hyphenation_length(t_Hyphenation *self)
            {
              jint result;
              OBJ_CALL(result = self->object.length());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_Hyphenation_get__hyphenationPoints(t_Hyphenation *self, void *data)
            {
              JArray< jint > value((jobject) NULL);
              OBJ_CALL(value = self->object.getHyphenationPoints());
              return value.wrap();
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/position/PositionFilterFactory.h"
#include "org/apache/lucene/analysis/position/PositionFilter.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace position {

          ::java::lang::Class *PositionFilterFactory::class$ = NULL;
          jmethodID *PositionFilterFactory::mids$ = NULL;
          bool PositionFilterFactory::live$ = false;

          jclass PositionFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/position/PositionFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_17e0c763] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/position/PositionFilter;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PositionFilterFactory::PositionFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::position::PositionFilter PositionFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::position::PositionFilter(env->callObjectMethod(this$, mids$[mid_create_17e0c763], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace position {
          static PyObject *t_PositionFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PositionFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PositionFilterFactory_init_(t_PositionFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PositionFilterFactory_create(t_PositionFilterFactory *self, PyObject *args);

          static PyMethodDef t_PositionFilterFactory__methods_[] = {
            DECLARE_METHOD(t_PositionFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PositionFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PositionFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PositionFilterFactory, t_PositionFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, PositionFilterFactory, t_PositionFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_PositionFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(PositionFilterFactory), module, "PositionFilterFactory", 0);
          }

          void t_PositionFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PositionFilterFactory).tp_dict, "class_", make_descriptor(PositionFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PositionFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_PositionFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PositionFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PositionFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PositionFilterFactory::initializeClass, 1)))
              return NULL;
            return t_PositionFilterFactory::wrap_Object(PositionFilterFactory(((t_PositionFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_PositionFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PositionFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PositionFilterFactory_init_(t_PositionFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            PositionFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = PositionFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PositionFilterFactory_create(t_PositionFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::position::PositionFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::position::t_PositionFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(PositionFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/expressions/js/JavascriptParser$expression_return.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {

          ::java::lang::Class *JavascriptParser$expression_return::class$ = NULL;
          jmethodID *JavascriptParser$expression_return::mids$ = NULL;
          bool JavascriptParser$expression_return::live$ = false;

          jclass JavascriptParser$expression_return::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/expressions/js/JavascriptParser$expression_return");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          JavascriptParser$expression_return::JavascriptParser$expression_return() : ::org::antlr::runtime::ParserRuleReturnScope(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {
          static PyObject *t_JavascriptParser$expression_return_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_JavascriptParser$expression_return_instance_(PyTypeObject *type, PyObject *arg);
          static int t_JavascriptParser$expression_return_init_(t_JavascriptParser$expression_return *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_JavascriptParser$expression_return__methods_[] = {
            DECLARE_METHOD(t_JavascriptParser$expression_return, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_JavascriptParser$expression_return, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(JavascriptParser$expression_return, t_JavascriptParser$expression_return, ::org::antlr::runtime::ParserRuleReturnScope, JavascriptParser$expression_return, t_JavascriptParser$expression_return_init_, 0, 0, 0, 0, 0);

          void t_JavascriptParser$expression_return::install(PyObject *module)
          {
            installType(&PY_TYPE(JavascriptParser$expression_return), module, "JavascriptParser$expression_return", 0);
          }

          void t_JavascriptParser$expression_return::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(JavascriptParser$expression_return).tp_dict, "class_", make_descriptor(JavascriptParser$expression_return::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(JavascriptParser$expression_return).tp_dict, "wrapfn_", make_descriptor(t_JavascriptParser$expression_return::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(JavascriptParser$expression_return).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_JavascriptParser$expression_return_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, JavascriptParser$expression_return::initializeClass, 1)))
              return NULL;
            return t_JavascriptParser$expression_return::wrap_Object(JavascriptParser$expression_return(((t_JavascriptParser$expression_return *) arg)->object.this$));
          }
          static PyObject *t_JavascriptParser$expression_return_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, JavascriptParser$expression_return::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_JavascriptParser$expression_return_init_(t_JavascriptParser$expression_return *self, PyObject *args, PyObject *kwds)
          {
            JavascriptParser$expression_return object((jobject) NULL);

            INT_CALL(object = JavascriptParser$expression_return());
            self->object = object;

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/perfield/PerFieldPostingsFormat.h"
#include "org/apache/lucene/codecs/FieldsConsumer.h"
#include "org/apache/lucene/index/SegmentWriteState.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/codecs/FieldsProducer.h"
#include "org/apache/lucene/index/SegmentReadState.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace perfield {

          ::java::lang::Class *PerFieldPostingsFormat::class$ = NULL;
          jmethodID *PerFieldPostingsFormat::mids$ = NULL;
          bool PerFieldPostingsFormat::live$ = false;
          ::java::lang::String *PerFieldPostingsFormat::PER_FIELD_FORMAT_KEY = NULL;
          ::java::lang::String *PerFieldPostingsFormat::PER_FIELD_NAME = NULL;
          ::java::lang::String *PerFieldPostingsFormat::PER_FIELD_SUFFIX_KEY = NULL;

          jclass PerFieldPostingsFormat::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/perfield/PerFieldPostingsFormat");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_fieldsConsumer_a15793c6] = env->getMethodID(cls, "fieldsConsumer", "(Lorg/apache/lucene/index/SegmentWriteState;)Lorg/apache/lucene/codecs/FieldsConsumer;");
              mids$[mid_fieldsProducer_c86c62bc] = env->getMethodID(cls, "fieldsProducer", "(Lorg/apache/lucene/index/SegmentReadState;)Lorg/apache/lucene/codecs/FieldsProducer;");
              mids$[mid_getPostingsFormatForField_19d2f1c6] = env->getMethodID(cls, "getPostingsFormatForField", "(Ljava/lang/String;)Lorg/apache/lucene/codecs/PostingsFormat;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              PER_FIELD_FORMAT_KEY = new ::java::lang::String(env->getStaticObjectField(cls, "PER_FIELD_FORMAT_KEY", "Ljava/lang/String;"));
              PER_FIELD_NAME = new ::java::lang::String(env->getStaticObjectField(cls, "PER_FIELD_NAME", "Ljava/lang/String;"));
              PER_FIELD_SUFFIX_KEY = new ::java::lang::String(env->getStaticObjectField(cls, "PER_FIELD_SUFFIX_KEY", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PerFieldPostingsFormat::PerFieldPostingsFormat() : ::org::apache::lucene::codecs::PostingsFormat(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::codecs::FieldsConsumer PerFieldPostingsFormat::fieldsConsumer(const ::org::apache::lucene::index::SegmentWriteState & a0) const
          {
            return ::org::apache::lucene::codecs::FieldsConsumer(env->callObjectMethod(this$, mids$[mid_fieldsConsumer_a15793c6], a0.this$));
          }

          ::org::apache::lucene::codecs::FieldsProducer PerFieldPostingsFormat::fieldsProducer(const ::org::apache::lucene::index::SegmentReadState & a0) const
          {
            return ::org::apache::lucene::codecs::FieldsProducer(env->callObjectMethod(this$, mids$[mid_fieldsProducer_c86c62bc], a0.this$));
          }

          ::org::apache::lucene::codecs::PostingsFormat PerFieldPostingsFormat::getPostingsFormatForField(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::codecs::PostingsFormat(env->callObjectMethod(this$, mids$[mid_getPostingsFormatForField_19d2f1c6], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace perfield {
          static PyObject *t_PerFieldPostingsFormat_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PerFieldPostingsFormat_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PerFieldPostingsFormat_init_(t_PerFieldPostingsFormat *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PerFieldPostingsFormat_fieldsConsumer(t_PerFieldPostingsFormat *self, PyObject *args);
          static PyObject *t_PerFieldPostingsFormat_fieldsProducer(t_PerFieldPostingsFormat *self, PyObject *args);
          static PyObject *t_PerFieldPostingsFormat_getPostingsFormatForField(t_PerFieldPostingsFormat *self, PyObject *arg);

          static PyMethodDef t_PerFieldPostingsFormat__methods_[] = {
            DECLARE_METHOD(t_PerFieldPostingsFormat, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PerFieldPostingsFormat, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PerFieldPostingsFormat, fieldsConsumer, METH_VARARGS),
            DECLARE_METHOD(t_PerFieldPostingsFormat, fieldsProducer, METH_VARARGS),
            DECLARE_METHOD(t_PerFieldPostingsFormat, getPostingsFormatForField, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PerFieldPostingsFormat, t_PerFieldPostingsFormat, ::org::apache::lucene::codecs::PostingsFormat, PerFieldPostingsFormat, t_PerFieldPostingsFormat_init_, 0, 0, 0, 0, 0);

          void t_PerFieldPostingsFormat::install(PyObject *module)
          {
            installType(&PY_TYPE(PerFieldPostingsFormat), module, "PerFieldPostingsFormat", 0);
          }

          void t_PerFieldPostingsFormat::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PerFieldPostingsFormat).tp_dict, "class_", make_descriptor(PerFieldPostingsFormat::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PerFieldPostingsFormat).tp_dict, "wrapfn_", make_descriptor(t_PerFieldPostingsFormat::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PerFieldPostingsFormat).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(PerFieldPostingsFormat::initializeClass);
            PyDict_SetItemString(PY_TYPE(PerFieldPostingsFormat).tp_dict, "PER_FIELD_FORMAT_KEY", make_descriptor(j2p(*PerFieldPostingsFormat::PER_FIELD_FORMAT_KEY)));
            PyDict_SetItemString(PY_TYPE(PerFieldPostingsFormat).tp_dict, "PER_FIELD_NAME", make_descriptor(j2p(*PerFieldPostingsFormat::PER_FIELD_NAME)));
            PyDict_SetItemString(PY_TYPE(PerFieldPostingsFormat).tp_dict, "PER_FIELD_SUFFIX_KEY", make_descriptor(j2p(*PerFieldPostingsFormat::PER_FIELD_SUFFIX_KEY)));
          }

          static PyObject *t_PerFieldPostingsFormat_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PerFieldPostingsFormat::initializeClass, 1)))
              return NULL;
            return t_PerFieldPostingsFormat::wrap_Object(PerFieldPostingsFormat(((t_PerFieldPostingsFormat *) arg)->object.this$));
          }
          static PyObject *t_PerFieldPostingsFormat_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PerFieldPostingsFormat::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PerFieldPostingsFormat_init_(t_PerFieldPostingsFormat *self, PyObject *args, PyObject *kwds)
          {
            PerFieldPostingsFormat object((jobject) NULL);

            INT_CALL(object = PerFieldPostingsFormat());
            self->object = object;

            return 0;
          }

          static PyObject *t_PerFieldPostingsFormat_fieldsConsumer(t_PerFieldPostingsFormat *self, PyObject *args)
          {
            ::org::apache::lucene::index::SegmentWriteState a0((jobject) NULL);
            ::org::apache::lucene::codecs::FieldsConsumer result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::SegmentWriteState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.fieldsConsumer(a0));
              return ::org::apache::lucene::codecs::t_FieldsConsumer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(PerFieldPostingsFormat), (PyObject *) self, "fieldsConsumer", args, 2);
          }

          static PyObject *t_PerFieldPostingsFormat_fieldsProducer(t_PerFieldPostingsFormat *self, PyObject *args)
          {
            ::org::apache::lucene::index::SegmentReadState a0((jobject) NULL);
            ::org::apache::lucene::codecs::FieldsProducer result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::SegmentReadState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.fieldsProducer(a0));
              return ::org::apache::lucene::codecs::t_FieldsProducer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(PerFieldPostingsFormat), (PyObject *) self, "fieldsProducer", args, 2);
          }

          static PyObject *t_PerFieldPostingsFormat_getPostingsFormatForField(t_PerFieldPostingsFormat *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::codecs::PostingsFormat result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.getPostingsFormatForField(a0));
              return ::org::apache::lucene::codecs::t_PostingsFormat::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getPostingsFormatForField", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/compressing/Compressor.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace compressing {

          ::java::lang::Class *Compressor::class$ = NULL;
          jmethodID *Compressor::mids$ = NULL;
          bool Compressor::live$ = false;

          jclass Compressor::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/compressing/Compressor");

              mids$ = new jmethodID[max_mid];
              mids$[mid_compress_13c9f1ba] = env->getMethodID(cls, "compress", "([BIILorg/apache/lucene/store/DataOutput;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          void Compressor::compress(const JArray< jbyte > & a0, jint a1, jint a2, const ::org::apache::lucene::store::DataOutput & a3) const
          {
            env->callVoidMethod(this$, mids$[mid_compress_13c9f1ba], a0.this$, a1, a2, a3.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace compressing {
          static PyObject *t_Compressor_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Compressor_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Compressor_compress(t_Compressor *self, PyObject *args);

          static PyMethodDef t_Compressor__methods_[] = {
            DECLARE_METHOD(t_Compressor, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Compressor, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Compressor, compress, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Compressor, t_Compressor, ::java::lang::Object, Compressor, abstract_init, 0, 0, 0, 0, 0);

          void t_Compressor::install(PyObject *module)
          {
            installType(&PY_TYPE(Compressor), module, "Compressor", 0);
          }

          void t_Compressor::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Compressor).tp_dict, "class_", make_descriptor(Compressor::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Compressor).tp_dict, "wrapfn_", make_descriptor(t_Compressor::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Compressor).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Compressor_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Compressor::initializeClass, 1)))
              return NULL;
            return t_Compressor::wrap_Object(Compressor(((t_Compressor *) arg)->object.this$));
          }
          static PyObject *t_Compressor_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Compressor::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_Compressor_compress(t_Compressor *self, PyObject *args)
          {
            JArray< jbyte > a0((jobject) NULL);
            jint a1;
            jint a2;
            ::org::apache::lucene::store::DataOutput a3((jobject) NULL);

            if (!parseArgs(args, "[BIIk", ::org::apache::lucene::store::DataOutput::initializeClass, &a0, &a1, &a2, &a3))
            {
              OBJ_CALL(self->object.compress(a0, a1, a2, a3));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "compress", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/standard/StandardTokenizerInterface.h"
#include "java/io/IOException.h"
#include "java/io/Reader.h"
#include "org/apache/lucene/analysis/tokenattributes/CharTermAttribute.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {

          ::java::lang::Class *StandardTokenizerInterface::class$ = NULL;
          jmethodID *StandardTokenizerInterface::mids$ = NULL;
          bool StandardTokenizerInterface::live$ = false;
          jint StandardTokenizerInterface::YYEOF = (jint) 0;

          jclass StandardTokenizerInterface::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/standard/StandardTokenizerInterface");

              mids$ = new jmethodID[max_mid];
              mids$[mid_getNextToken_54c6a179] = env->getMethodID(cls, "getNextToken", "()I");
              mids$[mid_getText_64c709f2] = env->getMethodID(cls, "getText", "(Lorg/apache/lucene/analysis/tokenattributes/CharTermAttribute;)V");
              mids$[mid_setBufferSize_39c7bd3c] = env->getMethodID(cls, "setBufferSize", "(I)V");
              mids$[mid_yychar_54c6a179] = env->getMethodID(cls, "yychar", "()I");
              mids$[mid_yylength_54c6a179] = env->getMethodID(cls, "yylength", "()I");
              mids$[mid_yyreset_cf2e3c10] = env->getMethodID(cls, "yyreset", "(Ljava/io/Reader;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              YYEOF = env->getStaticIntField(cls, "YYEOF");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jint StandardTokenizerInterface::getNextToken() const
          {
            return env->callIntMethod(this$, mids$[mid_getNextToken_54c6a179]);
          }

          void StandardTokenizerInterface::getText(const ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_getText_64c709f2], a0.this$);
          }

          void StandardTokenizerInterface::setBufferSize(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setBufferSize_39c7bd3c], a0);
          }

          jint StandardTokenizerInterface::yychar() const
          {
            return env->callIntMethod(this$, mids$[mid_yychar_54c6a179]);
          }

          jint StandardTokenizerInterface::yylength() const
          {
            return env->callIntMethod(this$, mids$[mid_yylength_54c6a179]);
          }

          void StandardTokenizerInterface::yyreset(const ::java::io::Reader & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_yyreset_cf2e3c10], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {
          static PyObject *t_StandardTokenizerInterface_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_StandardTokenizerInterface_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_StandardTokenizerInterface_getNextToken(t_StandardTokenizerInterface *self);
          static PyObject *t_StandardTokenizerInterface_getText(t_StandardTokenizerInterface *self, PyObject *arg);
          static PyObject *t_StandardTokenizerInterface_setBufferSize(t_StandardTokenizerInterface *self, PyObject *arg);
          static PyObject *t_StandardTokenizerInterface_yychar(t_StandardTokenizerInterface *self);
          static PyObject *t_StandardTokenizerInterface_yylength(t_StandardTokenizerInterface *self);
          static PyObject *t_StandardTokenizerInterface_yyreset(t_StandardTokenizerInterface *self, PyObject *arg);
          static int t_StandardTokenizerInterface_set__bufferSize(t_StandardTokenizerInterface *self, PyObject *arg, void *data);
          static PyObject *t_StandardTokenizerInterface_get__nextToken(t_StandardTokenizerInterface *self, void *data);
          static PyGetSetDef t_StandardTokenizerInterface__fields_[] = {
            DECLARE_SET_FIELD(t_StandardTokenizerInterface, bufferSize),
            DECLARE_GET_FIELD(t_StandardTokenizerInterface, nextToken),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_StandardTokenizerInterface__methods_[] = {
            DECLARE_METHOD(t_StandardTokenizerInterface, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StandardTokenizerInterface, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StandardTokenizerInterface, getNextToken, METH_NOARGS),
            DECLARE_METHOD(t_StandardTokenizerInterface, getText, METH_O),
            DECLARE_METHOD(t_StandardTokenizerInterface, setBufferSize, METH_O),
            DECLARE_METHOD(t_StandardTokenizerInterface, yychar, METH_NOARGS),
            DECLARE_METHOD(t_StandardTokenizerInterface, yylength, METH_NOARGS),
            DECLARE_METHOD(t_StandardTokenizerInterface, yyreset, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(StandardTokenizerInterface, t_StandardTokenizerInterface, ::java::lang::Object, StandardTokenizerInterface, abstract_init, 0, 0, t_StandardTokenizerInterface__fields_, 0, 0);

          void t_StandardTokenizerInterface::install(PyObject *module)
          {
            installType(&PY_TYPE(StandardTokenizerInterface), module, "StandardTokenizerInterface", 0);
          }

          void t_StandardTokenizerInterface::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(StandardTokenizerInterface).tp_dict, "class_", make_descriptor(StandardTokenizerInterface::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(StandardTokenizerInterface).tp_dict, "wrapfn_", make_descriptor(t_StandardTokenizerInterface::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(StandardTokenizerInterface).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(StandardTokenizerInterface::initializeClass);
            PyDict_SetItemString(PY_TYPE(StandardTokenizerInterface).tp_dict, "YYEOF", make_descriptor(StandardTokenizerInterface::YYEOF));
          }

          static PyObject *t_StandardTokenizerInterface_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, StandardTokenizerInterface::initializeClass, 1)))
              return NULL;
            return t_StandardTokenizerInterface::wrap_Object(StandardTokenizerInterface(((t_StandardTokenizerInterface *) arg)->object.this$));
          }
          static PyObject *t_StandardTokenizerInterface_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, StandardTokenizerInterface::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_StandardTokenizerInterface_getNextToken(t_StandardTokenizerInterface *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getNextToken());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_StandardTokenizerInterface_getText(t_StandardTokenizerInterface *self, PyObject *arg)
          {
            ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute::initializeClass, &a0))
            {
              OBJ_CALL(self->object.getText(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "getText", arg);
            return NULL;
          }

          static PyObject *t_StandardTokenizerInterface_setBufferSize(t_StandardTokenizerInterface *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setBufferSize(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setBufferSize", arg);
            return NULL;
          }

          static PyObject *t_StandardTokenizerInterface_yychar(t_StandardTokenizerInterface *self)
          {
            jint result;
            OBJ_CALL(result = self->object.yychar());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_StandardTokenizerInterface_yylength(t_StandardTokenizerInterface *self)
          {
            jint result;
            OBJ_CALL(result = self->object.yylength());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_StandardTokenizerInterface_yyreset(t_StandardTokenizerInterface *self, PyObject *arg)
          {
            ::java::io::Reader a0((jobject) NULL);

            if (!parseArg(arg, "k", ::java::io::Reader::initializeClass, &a0))
            {
              OBJ_CALL(self->object.yyreset(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "yyreset", arg);
            return NULL;
          }

          static int t_StandardTokenizerInterface_set__bufferSize(t_StandardTokenizerInterface *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setBufferSize(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "bufferSize", arg);
            return -1;
          }

          static PyObject *t_StandardTokenizerInterface_get__nextToken(t_StandardTokenizerInterface *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getNextToken());
            return PyInt_FromLong((long) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/Similarity.h"
#include "org/apache/lucene/index/FieldInvertState.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/search/TermStatistics.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/CollectionStatistics.h"
#include "org/apache/lucene/search/similarities/Similarity$SimWeight.h"
#include "org/apache/lucene/search/similarities/Similarity$SimScorer.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *Similarity::class$ = NULL;
          jmethodID *Similarity::mids$ = NULL;
          bool Similarity::live$ = false;

          jclass Similarity::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/Similarity");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_computeNorm_6ff84e0e] = env->getMethodID(cls, "computeNorm", "(Lorg/apache/lucene/index/FieldInvertState;)J");
              mids$[mid_computeWeight_8bb6ee0b] = env->getMethodID(cls, "computeWeight", "(FLorg/apache/lucene/search/CollectionStatistics;[Lorg/apache/lucene/search/TermStatistics;)Lorg/apache/lucene/search/similarities/Similarity$SimWeight;");
              mids$[mid_coord_d8d154b6] = env->getMethodID(cls, "coord", "(II)F");
              mids$[mid_queryNorm_06298cbb] = env->getMethodID(cls, "queryNorm", "(F)F");
              mids$[mid_simScorer_9a2cfed8] = env->getMethodID(cls, "simScorer", "(Lorg/apache/lucene/search/similarities/Similarity$SimWeight;Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/search/similarities/Similarity$SimScorer;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Similarity::Similarity() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jlong Similarity::computeNorm(const ::org::apache::lucene::index::FieldInvertState & a0) const
          {
            return env->callLongMethod(this$, mids$[mid_computeNorm_6ff84e0e], a0.this$);
          }

          ::org::apache::lucene::search::similarities::Similarity$SimWeight Similarity::computeWeight(jfloat a0, const ::org::apache::lucene::search::CollectionStatistics & a1, const JArray< ::org::apache::lucene::search::TermStatistics > & a2) const
          {
            return ::org::apache::lucene::search::similarities::Similarity$SimWeight(env->callObjectMethod(this$, mids$[mid_computeWeight_8bb6ee0b], a0, a1.this$, a2.this$));
          }

          jfloat Similarity::coord(jint a0, jint a1) const
          {
            return env->callFloatMethod(this$, mids$[mid_coord_d8d154b6], a0, a1);
          }

          jfloat Similarity::queryNorm(jfloat a0) const
          {
            return env->callFloatMethod(this$, mids$[mid_queryNorm_06298cbb], a0);
          }

          ::org::apache::lucene::search::similarities::Similarity$SimScorer Similarity::simScorer(const ::org::apache::lucene::search::similarities::Similarity$SimWeight & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1) const
          {
            return ::org::apache::lucene::search::similarities::Similarity$SimScorer(env->callObjectMethod(this$, mids$[mid_simScorer_9a2cfed8], a0.this$, a1.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_Similarity_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Similarity_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Similarity_init_(t_Similarity *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Similarity_computeNorm(t_Similarity *self, PyObject *arg);
          static PyObject *t_Similarity_computeWeight(t_Similarity *self, PyObject *args);
          static PyObject *t_Similarity_coord(t_Similarity *self, PyObject *args);
          static PyObject *t_Similarity_queryNorm(t_Similarity *self, PyObject *arg);
          static PyObject *t_Similarity_simScorer(t_Similarity *self, PyObject *args);

          static PyMethodDef t_Similarity__methods_[] = {
            DECLARE_METHOD(t_Similarity, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Similarity, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Similarity, computeNorm, METH_O),
            DECLARE_METHOD(t_Similarity, computeWeight, METH_VARARGS),
            DECLARE_METHOD(t_Similarity, coord, METH_VARARGS),
            DECLARE_METHOD(t_Similarity, queryNorm, METH_O),
            DECLARE_METHOD(t_Similarity, simScorer, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Similarity, t_Similarity, ::java::lang::Object, Similarity, t_Similarity_init_, 0, 0, 0, 0, 0);

          void t_Similarity::install(PyObject *module)
          {
            installType(&PY_TYPE(Similarity), module, "Similarity", 0);
            PyDict_SetItemString(PY_TYPE(Similarity).tp_dict, "SimWeight", make_descriptor(&PY_TYPE(Similarity$SimWeight)));
            PyDict_SetItemString(PY_TYPE(Similarity).tp_dict, "SimScorer", make_descriptor(&PY_TYPE(Similarity$SimScorer)));
          }

          void t_Similarity::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Similarity).tp_dict, "class_", make_descriptor(Similarity::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Similarity).tp_dict, "wrapfn_", make_descriptor(t_Similarity::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Similarity).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Similarity_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Similarity::initializeClass, 1)))
              return NULL;
            return t_Similarity::wrap_Object(Similarity(((t_Similarity *) arg)->object.this$));
          }
          static PyObject *t_Similarity_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Similarity::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Similarity_init_(t_Similarity *self, PyObject *args, PyObject *kwds)
          {
            Similarity object((jobject) NULL);

            INT_CALL(object = Similarity());
            self->object = object;

            return 0;
          }

          static PyObject *t_Similarity_computeNorm(t_Similarity *self, PyObject *arg)
          {
            ::org::apache::lucene::index::FieldInvertState a0((jobject) NULL);
            jlong result;

            if (!parseArg(arg, "k", ::org::apache::lucene::index::FieldInvertState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.computeNorm(a0));
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            PyErr_SetArgsError((PyObject *) self, "computeNorm", arg);
            return NULL;
          }

          static PyObject *t_Similarity_computeWeight(t_Similarity *self, PyObject *args)
          {
            jfloat a0;
            ::org::apache::lucene::search::CollectionStatistics a1((jobject) NULL);
            JArray< ::org::apache::lucene::search::TermStatistics > a2((jobject) NULL);
            ::org::apache::lucene::search::similarities::Similarity$SimWeight result((jobject) NULL);

            if (!parseArgs(args, "Fk[k", ::org::apache::lucene::search::CollectionStatistics::initializeClass, ::org::apache::lucene::search::TermStatistics::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.computeWeight(a0, a1, a2));
              return ::org::apache::lucene::search::similarities::t_Similarity$SimWeight::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "computeWeight", args);
            return NULL;
          }

          static PyObject *t_Similarity_coord(t_Similarity *self, PyObject *args)
          {
            jint a0;
            jint a1;
            jfloat result;

            if (!parseArgs(args, "II", &a0, &a1))
            {
              OBJ_CALL(result = self->object.coord(a0, a1));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "coord", args);
            return NULL;
          }

          static PyObject *t_Similarity_queryNorm(t_Similarity *self, PyObject *arg)
          {
            jfloat a0;
            jfloat result;

            if (!parseArg(arg, "F", &a0))
            {
              OBJ_CALL(result = self->object.queryNorm(a0));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "queryNorm", arg);
            return NULL;
          }

          static PyObject *t_Similarity_simScorer(t_Similarity *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::Similarity$SimWeight a0((jobject) NULL);
            ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
            ::org::apache::lucene::search::similarities::Similarity$SimScorer result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::search::similarities::Similarity$SimWeight::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.simScorer(a0, a1));
              return ::org::apache::lucene::search::similarities::t_Similarity$SimScorer::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "simScorer", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/compound/Lucene43DictionaryCompoundWordTokenFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace compound {

          ::java::lang::Class *Lucene43DictionaryCompoundWordTokenFilter::class$ = NULL;
          jmethodID *Lucene43DictionaryCompoundWordTokenFilter::mids$ = NULL;
          bool Lucene43DictionaryCompoundWordTokenFilter::live$ = false;

          jclass Lucene43DictionaryCompoundWordTokenFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/compound/Lucene43DictionaryCompoundWordTokenFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_64fb9de3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_c165ef98] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;Lorg/apache/lucene/analysis/util/CharArraySet;IIIZ)V");
              mids$[mid_decompose_54c6a166] = env->getMethodID(cls, "decompose", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene43DictionaryCompoundWordTokenFilter::Lucene43DictionaryCompoundWordTokenFilter(const ::org::apache::lucene::analysis::TokenStream & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::compound::Lucene43CompoundWordTokenFilterBase(env->newObject(initializeClass, &mids$, mid_init$_64fb9de3, a0.this$, a1.this$)) {}

          Lucene43DictionaryCompoundWordTokenFilter::Lucene43DictionaryCompoundWordTokenFilter(const ::org::apache::lucene::analysis::TokenStream & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1, jint a2, jint a3, jint a4, jboolean a5) : ::org::apache::lucene::analysis::compound::Lucene43CompoundWordTokenFilterBase(env->newObject(initializeClass, &mids$, mid_init$_c165ef98, a0.this$, a1.this$, a2, a3, a4, a5)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace compound {
          static PyObject *t_Lucene43DictionaryCompoundWordTokenFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene43DictionaryCompoundWordTokenFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene43DictionaryCompoundWordTokenFilter_init_(t_Lucene43DictionaryCompoundWordTokenFilter *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_Lucene43DictionaryCompoundWordTokenFilter__methods_[] = {
            DECLARE_METHOD(t_Lucene43DictionaryCompoundWordTokenFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene43DictionaryCompoundWordTokenFilter, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene43DictionaryCompoundWordTokenFilter, t_Lucene43DictionaryCompoundWordTokenFilter, ::org::apache::lucene::analysis::compound::Lucene43CompoundWordTokenFilterBase, Lucene43DictionaryCompoundWordTokenFilter, t_Lucene43DictionaryCompoundWordTokenFilter_init_, 0, 0, 0, 0, 0);

          void t_Lucene43DictionaryCompoundWordTokenFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene43DictionaryCompoundWordTokenFilter), module, "Lucene43DictionaryCompoundWordTokenFilter", 0);
          }

          void t_Lucene43DictionaryCompoundWordTokenFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene43DictionaryCompoundWordTokenFilter).tp_dict, "class_", make_descriptor(Lucene43DictionaryCompoundWordTokenFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene43DictionaryCompoundWordTokenFilter).tp_dict, "wrapfn_", make_descriptor(t_Lucene43DictionaryCompoundWordTokenFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene43DictionaryCompoundWordTokenFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lucene43DictionaryCompoundWordTokenFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene43DictionaryCompoundWordTokenFilter::initializeClass, 1)))
              return NULL;
            return t_Lucene43DictionaryCompoundWordTokenFilter::wrap_Object(Lucene43DictionaryCompoundWordTokenFilter(((t_Lucene43DictionaryCompoundWordTokenFilter *) arg)->object.this$));
          }
          static PyObject *t_Lucene43DictionaryCompoundWordTokenFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene43DictionaryCompoundWordTokenFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene43DictionaryCompoundWordTokenFilter_init_(t_Lucene43DictionaryCompoundWordTokenFilter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                Lucene43DictionaryCompoundWordTokenFilter object((jobject) NULL);

                if (!parseArgs(args, "kK", ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = Lucene43DictionaryCompoundWordTokenFilter(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 6:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                jint a2;
                jint a3;
                jint a4;
                jboolean a5;
                Lucene43DictionaryCompoundWordTokenFilter object((jobject) NULL);

                if (!parseArgs(args, "kKIIIZ", ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_, &a2, &a3, &a4, &a5))
                {
                  INT_CALL(object = Lucene43DictionaryCompoundWordTokenFilter(a0, a1, a2, a3, a4, a5));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
