#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/nodes/WildcardQueryNode.h"
#include "java/lang/Class.h"
#include "java/lang/CharSequence.h"
#include "org/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax.h"
#include "java/lang/CloneNotSupportedException.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace nodes {

              ::java::lang::Class *WildcardQueryNode::class$ = NULL;
              jmethodID *WildcardQueryNode::mids$ = NULL;
              bool WildcardQueryNode::live$ = false;

              jclass WildcardQueryNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/nodes/WildcardQueryNode");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_ddeda85c] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/FieldQueryNode;)V");
                  mids$[mid_init$_ddd81d4e] = env->getMethodID(cls, "<init>", "(Ljava/lang/CharSequence;Ljava/lang/CharSequence;II)V");
                  mids$[mid_cloneTree_3797a232] = env->getMethodID(cls, "cloneTree", "()Lorg/apache/lucene/queryparser/flexible/standard/nodes/WildcardQueryNode;");
                  mids$[mid_toQueryString_99b8dfe1] = env->getMethodID(cls, "toQueryString", "(Lorg/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax;)Ljava/lang/CharSequence;");
                  mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              WildcardQueryNode::WildcardQueryNode(const ::org::apache::lucene::queryparser::flexible::core::nodes::FieldQueryNode & a0) : ::org::apache::lucene::queryparser::flexible::core::nodes::FieldQueryNode(env->newObject(initializeClass, &mids$, mid_init$_ddeda85c, a0.this$)) {}

              WildcardQueryNode::WildcardQueryNode(const ::java::lang::CharSequence & a0, const ::java::lang::CharSequence & a1, jint a2, jint a3) : ::org::apache::lucene::queryparser::flexible::core::nodes::FieldQueryNode(env->newObject(initializeClass, &mids$, mid_init$_ddd81d4e, a0.this$, a1.this$, a2, a3)) {}

              WildcardQueryNode WildcardQueryNode::cloneTree() const
              {
                return WildcardQueryNode(env->callObjectMethod(this$, mids$[mid_cloneTree_3797a232]));
              }

              ::java::lang::CharSequence WildcardQueryNode::toQueryString(const ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax & a0) const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_toQueryString_99b8dfe1], a0.this$));
              }

              ::java::lang::String WildcardQueryNode::toString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace nodes {
              static PyObject *t_WildcardQueryNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_WildcardQueryNode_instance_(PyTypeObject *type, PyObject *arg);
              static int t_WildcardQueryNode_init_(t_WildcardQueryNode *self, PyObject *args, PyObject *kwds);
              static PyObject *t_WildcardQueryNode_cloneTree(t_WildcardQueryNode *self, PyObject *args);
              static PyObject *t_WildcardQueryNode_toQueryString(t_WildcardQueryNode *self, PyObject *args);
              static PyObject *t_WildcardQueryNode_toString(t_WildcardQueryNode *self, PyObject *args);

              static PyMethodDef t_WildcardQueryNode__methods_[] = {
                DECLARE_METHOD(t_WildcardQueryNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_WildcardQueryNode, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_WildcardQueryNode, cloneTree, METH_VARARGS),
                DECLARE_METHOD(t_WildcardQueryNode, toQueryString, METH_VARARGS),
                DECLARE_METHOD(t_WildcardQueryNode, toString, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(WildcardQueryNode, t_WildcardQueryNode, ::org::apache::lucene::queryparser::flexible::core::nodes::FieldQueryNode, WildcardQueryNode, t_WildcardQueryNode_init_, 0, 0, 0, 0, 0);

              void t_WildcardQueryNode::install(PyObject *module)
              {
                installType(&PY_TYPE(WildcardQueryNode), module, "WildcardQueryNode", 0);
              }

              void t_WildcardQueryNode::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(WildcardQueryNode).tp_dict, "class_", make_descriptor(WildcardQueryNode::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(WildcardQueryNode).tp_dict, "wrapfn_", make_descriptor(t_WildcardQueryNode::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(WildcardQueryNode).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_WildcardQueryNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, WildcardQueryNode::initializeClass, 1)))
                  return NULL;
                return t_WildcardQueryNode::wrap_Object(WildcardQueryNode(((t_WildcardQueryNode *) arg)->object.this$));
              }
              static PyObject *t_WildcardQueryNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, WildcardQueryNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_WildcardQueryNode_init_(t_WildcardQueryNode *self, PyObject *args, PyObject *kwds)
              {
                switch (PyTuple_GET_SIZE(args)) {
                 case 1:
                  {
                    ::org::apache::lucene::queryparser::flexible::core::nodes::FieldQueryNode a0((jobject) NULL);
                    WildcardQueryNode object((jobject) NULL);

                    if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::FieldQueryNode::initializeClass, &a0))
                    {
                      INT_CALL(object = WildcardQueryNode(a0));
                      self->object = object;
                      break;
                    }
                  }
                  goto err;
                 case 4:
                  {
                    ::java::lang::CharSequence a0((jobject) NULL);
                    ::java::lang::CharSequence a1((jobject) NULL);
                    jint a2;
                    jint a3;
                    WildcardQueryNode object((jobject) NULL);

                    if (!parseArgs(args, "OOII", &::java::lang::PY_TYPE(CharSequence), &::java::lang::PY_TYPE(CharSequence), &a0, &a1, &a2, &a3))
                    {
                      INT_CALL(object = WildcardQueryNode(a0, a1, a2, a3));
                      self->object = object;
                      break;
                    }
                  }
                 default:
                 err:
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_WildcardQueryNode_cloneTree(t_WildcardQueryNode *self, PyObject *args)
              {
                WildcardQueryNode result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.cloneTree());
                  return t_WildcardQueryNode::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(WildcardQueryNode), (PyObject *) self, "cloneTree", args, 2);
              }

              static PyObject *t_WildcardQueryNode_toQueryString(t_WildcardQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax a0((jobject) NULL);
                ::java::lang::CharSequence result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.toQueryString(a0));
                  return ::java::lang::t_CharSequence::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(WildcardQueryNode), (PyObject *) self, "toQueryString", args, 2);
              }

              static PyObject *t_WildcardQueryNode_toString(t_WildcardQueryNode *self, PyObject *args)
              {
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.toString());
                  return j2p(result);
                }

                return callSuper(&PY_TYPE(WildcardQueryNode), (PyObject *) self, "toString", args, 2);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/WildcardQuery.h"
#include "org/apache/lucene/util/automaton/Automaton.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/Term.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *WildcardQuery::class$ = NULL;
        jmethodID *WildcardQuery::mids$ = NULL;
        bool WildcardQuery::live$ = false;
        jchar WildcardQuery::WILDCARD_CHAR = (jchar) 0;
        jchar WildcardQuery::WILDCARD_ESCAPE = (jchar) 0;
        jchar WildcardQuery::WILDCARD_STRING = (jchar) 0;

        jclass WildcardQuery::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/WildcardQuery");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_7eca6a81] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/Term;)V");
            mids$[mid_getTerm_0f71f314] = env->getMethodID(cls, "getTerm", "()Lorg/apache/lucene/index/Term;");
            mids$[mid_toAutomaton_d07301d8] = env->getStaticMethodID(cls, "toAutomaton", "(Lorg/apache/lucene/index/Term;)Lorg/apache/lucene/util/automaton/Automaton;");
            mids$[mid_toString_97a5258f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            WILDCARD_CHAR = env->getStaticCharField(cls, "WILDCARD_CHAR");
            WILDCARD_ESCAPE = env->getStaticCharField(cls, "WILDCARD_ESCAPE");
            WILDCARD_STRING = env->getStaticCharField(cls, "WILDCARD_STRING");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        WildcardQuery::WildcardQuery(const ::org::apache::lucene::index::Term & a0) : ::org::apache::lucene::search::AutomatonQuery(env->newObject(initializeClass, &mids$, mid_init$_7eca6a81, a0.this$)) {}

        ::org::apache::lucene::index::Term WildcardQuery::getTerm() const
        {
          return ::org::apache::lucene::index::Term(env->callObjectMethod(this$, mids$[mid_getTerm_0f71f314]));
        }

        ::org::apache::lucene::util::automaton::Automaton WildcardQuery::toAutomaton(const ::org::apache::lucene::index::Term & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::util::automaton::Automaton(env->callStaticObjectMethod(cls, mids$[mid_toAutomaton_d07301d8], a0.this$));
        }

        ::java::lang::String WildcardQuery::toString(const ::java::lang::String & a0) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_97a5258f], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_WildcardQuery_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_WildcardQuery_instance_(PyTypeObject *type, PyObject *arg);
        static int t_WildcardQuery_init_(t_WildcardQuery *self, PyObject *args, PyObject *kwds);
        static PyObject *t_WildcardQuery_getTerm(t_WildcardQuery *self);
        static PyObject *t_WildcardQuery_toAutomaton(PyTypeObject *type, PyObject *arg);
        static PyObject *t_WildcardQuery_toString(t_WildcardQuery *self, PyObject *args);
        static PyObject *t_WildcardQuery_get__term(t_WildcardQuery *self, void *data);
        static PyGetSetDef t_WildcardQuery__fields_[] = {
          DECLARE_GET_FIELD(t_WildcardQuery, term),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_WildcardQuery__methods_[] = {
          DECLARE_METHOD(t_WildcardQuery, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_WildcardQuery, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_WildcardQuery, getTerm, METH_NOARGS),
          DECLARE_METHOD(t_WildcardQuery, toAutomaton, METH_O | METH_CLASS),
          DECLARE_METHOD(t_WildcardQuery, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(WildcardQuery, t_WildcardQuery, ::org::apache::lucene::search::AutomatonQuery, WildcardQuery, t_WildcardQuery_init_, 0, 0, t_WildcardQuery__fields_, 0, 0);

        void t_WildcardQuery::install(PyObject *module)
        {
          installType(&PY_TYPE(WildcardQuery), module, "WildcardQuery", 0);
        }

        void t_WildcardQuery::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(WildcardQuery).tp_dict, "class_", make_descriptor(WildcardQuery::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(WildcardQuery).tp_dict, "wrapfn_", make_descriptor(t_WildcardQuery::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(WildcardQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(WildcardQuery::initializeClass);
          PyDict_SetItemString(PY_TYPE(WildcardQuery).tp_dict, "WILDCARD_CHAR", make_descriptor(WildcardQuery::WILDCARD_CHAR));
          PyDict_SetItemString(PY_TYPE(WildcardQuery).tp_dict, "WILDCARD_ESCAPE", make_descriptor(WildcardQuery::WILDCARD_ESCAPE));
          PyDict_SetItemString(PY_TYPE(WildcardQuery).tp_dict, "WILDCARD_STRING", make_descriptor(WildcardQuery::WILDCARD_STRING));
        }

        static PyObject *t_WildcardQuery_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, WildcardQuery::initializeClass, 1)))
            return NULL;
          return t_WildcardQuery::wrap_Object(WildcardQuery(((t_WildcardQuery *) arg)->object.this$));
        }
        static PyObject *t_WildcardQuery_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, WildcardQuery::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_WildcardQuery_init_(t_WildcardQuery *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::index::Term a0((jobject) NULL);
          WildcardQuery object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::Term::initializeClass, &a0))
          {
            INT_CALL(object = WildcardQuery(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_WildcardQuery_getTerm(t_WildcardQuery *self)
        {
          ::org::apache::lucene::index::Term result((jobject) NULL);
          OBJ_CALL(result = self->object.getTerm());
          return ::org::apache::lucene::index::t_Term::wrap_Object(result);
        }

        static PyObject *t_WildcardQuery_toAutomaton(PyTypeObject *type, PyObject *arg)
        {
          ::org::apache::lucene::index::Term a0((jobject) NULL);
          ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::Term::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::search::WildcardQuery::toAutomaton(a0));
            return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "toAutomaton", arg);
          return NULL;
        }

        static PyObject *t_WildcardQuery_toString(t_WildcardQuery *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.toString(a0));
            return j2p(result);
          }

          return callSuper(&PY_TYPE(WildcardQuery), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_WildcardQuery_get__term(t_WildcardQuery *self, void *data)
        {
          ::org::apache::lucene::index::Term value((jobject) NULL);
          OBJ_CALL(value = self->object.getTerm());
          return ::org::apache::lucene::index::t_Term::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/SortedBytesDocValuesField.h"
#include "org/apache/lucene/document/FieldType.h"
#include "java/lang/String.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *SortedBytesDocValuesField::class$ = NULL;
        jmethodID *SortedBytesDocValuesField::mids$ = NULL;
        bool SortedBytesDocValuesField::live$ = false;
        ::org::apache::lucene::document::FieldType *SortedBytesDocValuesField::TYPE_FIXED_LEN = NULL;
        ::org::apache::lucene::document::FieldType *SortedBytesDocValuesField::TYPE_VAR_LEN = NULL;

        jclass SortedBytesDocValuesField::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/SortedBytesDocValuesField");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_43cce44e] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/util/BytesRef;)V");
            mids$[mid_init$_6c8dc377] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/util/BytesRef;Z)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            TYPE_FIXED_LEN = new ::org::apache::lucene::document::FieldType(env->getStaticObjectField(cls, "TYPE_FIXED_LEN", "Lorg/apache/lucene/document/FieldType;"));
            TYPE_VAR_LEN = new ::org::apache::lucene::document::FieldType(env->getStaticObjectField(cls, "TYPE_VAR_LEN", "Lorg/apache/lucene/document/FieldType;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SortedBytesDocValuesField::SortedBytesDocValuesField(const ::java::lang::String & a0, const ::org::apache::lucene::util::BytesRef & a1) : ::org::apache::lucene::document::SortedDocValuesField(env->newObject(initializeClass, &mids$, mid_init$_43cce44e, a0.this$, a1.this$)) {}

        SortedBytesDocValuesField::SortedBytesDocValuesField(const ::java::lang::String & a0, const ::org::apache::lucene::util::BytesRef & a1, jboolean a2) : ::org::apache::lucene::document::SortedDocValuesField(env->newObject(initializeClass, &mids$, mid_init$_6c8dc377, a0.this$, a1.this$, a2)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_SortedBytesDocValuesField_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SortedBytesDocValuesField_instance_(PyTypeObject *type, PyObject *arg);
        static int t_SortedBytesDocValuesField_init_(t_SortedBytesDocValuesField *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_SortedBytesDocValuesField__methods_[] = {
          DECLARE_METHOD(t_SortedBytesDocValuesField, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SortedBytesDocValuesField, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SortedBytesDocValuesField, t_SortedBytesDocValuesField, ::org::apache::lucene::document::SortedDocValuesField, SortedBytesDocValuesField, t_SortedBytesDocValuesField_init_, 0, 0, 0, 0, 0);

        void t_SortedBytesDocValuesField::install(PyObject *module)
        {
          installType(&PY_TYPE(SortedBytesDocValuesField), module, "SortedBytesDocValuesField", 0);
        }

        void t_SortedBytesDocValuesField::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SortedBytesDocValuesField).tp_dict, "class_", make_descriptor(SortedBytesDocValuesField::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SortedBytesDocValuesField).tp_dict, "wrapfn_", make_descriptor(t_SortedBytesDocValuesField::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SortedBytesDocValuesField).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(SortedBytesDocValuesField::initializeClass);
          PyDict_SetItemString(PY_TYPE(SortedBytesDocValuesField).tp_dict, "TYPE_FIXED_LEN", make_descriptor(::org::apache::lucene::document::t_FieldType::wrap_Object(*SortedBytesDocValuesField::TYPE_FIXED_LEN)));
          PyDict_SetItemString(PY_TYPE(SortedBytesDocValuesField).tp_dict, "TYPE_VAR_LEN", make_descriptor(::org::apache::lucene::document::t_FieldType::wrap_Object(*SortedBytesDocValuesField::TYPE_VAR_LEN)));
        }

        static PyObject *t_SortedBytesDocValuesField_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SortedBytesDocValuesField::initializeClass, 1)))
            return NULL;
          return t_SortedBytesDocValuesField::wrap_Object(SortedBytesDocValuesField(((t_SortedBytesDocValuesField *) arg)->object.this$));
        }
        static PyObject *t_SortedBytesDocValuesField_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SortedBytesDocValuesField::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_SortedBytesDocValuesField_init_(t_SortedBytesDocValuesField *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
              SortedBytesDocValuesField object((jobject) NULL);

              if (!parseArgs(args, "sk", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
              {
                INT_CALL(object = SortedBytesDocValuesField(a0, a1));
                self->object = object;
                break;
              }
            }
            goto err;
           case 3:
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
              jboolean a2;
              SortedBytesDocValuesField object((jobject) NULL);

              if (!parseArgs(args, "skZ", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = SortedBytesDocValuesField(a0, a1, a2));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/DefaultSimilarity.h"
#include "org/apache/lucene/index/FieldInvertState.h"
#include "java/lang/String.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *DefaultSimilarity::class$ = NULL;
          jmethodID *DefaultSimilarity::mids$ = NULL;
          bool DefaultSimilarity::live$ = false;

          jclass DefaultSimilarity::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/DefaultSimilarity");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_coord_d8d154b6] = env->getMethodID(cls, "coord", "(II)F");
              mids$[mid_decodeNormValue_0ee6df3f] = env->getMethodID(cls, "decodeNormValue", "(J)F");
              mids$[mid_encodeNormValue_06298cb7] = env->getMethodID(cls, "encodeNormValue", "(F)J");
              mids$[mid_getDiscountOverlaps_54c6a16a] = env->getMethodID(cls, "getDiscountOverlaps", "()Z");
              mids$[mid_idf_a7e12cb4] = env->getMethodID(cls, "idf", "(JJ)F");
              mids$[mid_lengthNorm_6ff84e02] = env->getMethodID(cls, "lengthNorm", "(Lorg/apache/lucene/index/FieldInvertState;)F");
              mids$[mid_queryNorm_06298cbb] = env->getMethodID(cls, "queryNorm", "(F)F");
              mids$[mid_scorePayload_ffd34a82] = env->getMethodID(cls, "scorePayload", "(IIILorg/apache/lucene/util/BytesRef;)F");
              mids$[mid_setDiscountOverlaps_bb0c767f] = env->getMethodID(cls, "setDiscountOverlaps", "(Z)V");
              mids$[mid_sloppyFreq_39c7bd2c] = env->getMethodID(cls, "sloppyFreq", "(I)F");
              mids$[mid_tf_06298cbb] = env->getMethodID(cls, "tf", "(F)F");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          DefaultSimilarity::DefaultSimilarity() : ::org::apache::lucene::search::similarities::TFIDFSimilarity(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jfloat DefaultSimilarity::coord(jint a0, jint a1) const
          {
            return env->callFloatMethod(this$, mids$[mid_coord_d8d154b6], a0, a1);
          }

          jfloat DefaultSimilarity::decodeNormValue(jlong a0) const
          {
            return env->callFloatMethod(this$, mids$[mid_decodeNormValue_0ee6df3f], a0);
          }

          jlong DefaultSimilarity::encodeNormValue(jfloat a0) const
          {
            return env->callLongMethod(this$, mids$[mid_encodeNormValue_06298cb7], a0);
          }

          jboolean DefaultSimilarity::getDiscountOverlaps() const
          {
            return env->callBooleanMethod(this$, mids$[mid_getDiscountOverlaps_54c6a16a]);
          }

          jfloat DefaultSimilarity::idf(jlong a0, jlong a1) const
          {
            return env->callFloatMethod(this$, mids$[mid_idf_a7e12cb4], a0, a1);
          }

          jfloat DefaultSimilarity::lengthNorm(const ::org::apache::lucene::index::FieldInvertState & a0) const
          {
            return env->callFloatMethod(this$, mids$[mid_lengthNorm_6ff84e02], a0.this$);
          }

          jfloat DefaultSimilarity::queryNorm(jfloat a0) const
          {
            return env->callFloatMethod(this$, mids$[mid_queryNorm_06298cbb], a0);
          }

          jfloat DefaultSimilarity::scorePayload(jint a0, jint a1, jint a2, const ::org::apache::lucene::util::BytesRef & a3) const
          {
            return env->callFloatMethod(this$, mids$[mid_scorePayload_ffd34a82], a0, a1, a2, a3.this$);
          }

          void DefaultSimilarity::setDiscountOverlaps(jboolean a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setDiscountOverlaps_bb0c767f], a0);
          }

          jfloat DefaultSimilarity::sloppyFreq(jint a0) const
          {
            return env->callFloatMethod(this$, mids$[mid_sloppyFreq_39c7bd2c], a0);
          }

          jfloat DefaultSimilarity::tf(jfloat a0) const
          {
            return env->callFloatMethod(this$, mids$[mid_tf_06298cbb], a0);
          }

          ::java::lang::String DefaultSimilarity::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_DefaultSimilarity_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DefaultSimilarity_instance_(PyTypeObject *type, PyObject *arg);
          static int t_DefaultSimilarity_init_(t_DefaultSimilarity *self, PyObject *args, PyObject *kwds);
          static PyObject *t_DefaultSimilarity_coord(t_DefaultSimilarity *self, PyObject *args);
          static PyObject *t_DefaultSimilarity_decodeNormValue(t_DefaultSimilarity *self, PyObject *args);
          static PyObject *t_DefaultSimilarity_encodeNormValue(t_DefaultSimilarity *self, PyObject *args);
          static PyObject *t_DefaultSimilarity_getDiscountOverlaps(t_DefaultSimilarity *self);
          static PyObject *t_DefaultSimilarity_idf(t_DefaultSimilarity *self, PyObject *args);
          static PyObject *t_DefaultSimilarity_lengthNorm(t_DefaultSimilarity *self, PyObject *args);
          static PyObject *t_DefaultSimilarity_queryNorm(t_DefaultSimilarity *self, PyObject *args);
          static PyObject *t_DefaultSimilarity_scorePayload(t_DefaultSimilarity *self, PyObject *args);
          static PyObject *t_DefaultSimilarity_setDiscountOverlaps(t_DefaultSimilarity *self, PyObject *arg);
          static PyObject *t_DefaultSimilarity_sloppyFreq(t_DefaultSimilarity *self, PyObject *args);
          static PyObject *t_DefaultSimilarity_tf(t_DefaultSimilarity *self, PyObject *args);
          static PyObject *t_DefaultSimilarity_toString(t_DefaultSimilarity *self, PyObject *args);
          static PyObject *t_DefaultSimilarity_get__discountOverlaps(t_DefaultSimilarity *self, void *data);
          static int t_DefaultSimilarity_set__discountOverlaps(t_DefaultSimilarity *self, PyObject *arg, void *data);
          static PyGetSetDef t_DefaultSimilarity__fields_[] = {
            DECLARE_GETSET_FIELD(t_DefaultSimilarity, discountOverlaps),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_DefaultSimilarity__methods_[] = {
            DECLARE_METHOD(t_DefaultSimilarity, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DefaultSimilarity, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DefaultSimilarity, coord, METH_VARARGS),
            DECLARE_METHOD(t_DefaultSimilarity, decodeNormValue, METH_VARARGS),
            DECLARE_METHOD(t_DefaultSimilarity, encodeNormValue, METH_VARARGS),
            DECLARE_METHOD(t_DefaultSimilarity, getDiscountOverlaps, METH_NOARGS),
            DECLARE_METHOD(t_DefaultSimilarity, idf, METH_VARARGS),
            DECLARE_METHOD(t_DefaultSimilarity, lengthNorm, METH_VARARGS),
            DECLARE_METHOD(t_DefaultSimilarity, queryNorm, METH_VARARGS),
            DECLARE_METHOD(t_DefaultSimilarity, scorePayload, METH_VARARGS),
            DECLARE_METHOD(t_DefaultSimilarity, setDiscountOverlaps, METH_O),
            DECLARE_METHOD(t_DefaultSimilarity, sloppyFreq, METH_VARARGS),
            DECLARE_METHOD(t_DefaultSimilarity, tf, METH_VARARGS),
            DECLARE_METHOD(t_DefaultSimilarity, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(DefaultSimilarity, t_DefaultSimilarity, ::org::apache::lucene::search::similarities::TFIDFSimilarity, DefaultSimilarity, t_DefaultSimilarity_init_, 0, 0, t_DefaultSimilarity__fields_, 0, 0);

          void t_DefaultSimilarity::install(PyObject *module)
          {
            installType(&PY_TYPE(DefaultSimilarity), module, "DefaultSimilarity", 0);
          }

          void t_DefaultSimilarity::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(DefaultSimilarity).tp_dict, "class_", make_descriptor(DefaultSimilarity::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(DefaultSimilarity).tp_dict, "wrapfn_", make_descriptor(t_DefaultSimilarity::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(DefaultSimilarity).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_DefaultSimilarity_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, DefaultSimilarity::initializeClass, 1)))
              return NULL;
            return t_DefaultSimilarity::wrap_Object(DefaultSimilarity(((t_DefaultSimilarity *) arg)->object.this$));
          }
          static PyObject *t_DefaultSimilarity_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, DefaultSimilarity::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_DefaultSimilarity_init_(t_DefaultSimilarity *self, PyObject *args, PyObject *kwds)
          {
            DefaultSimilarity object((jobject) NULL);

            INT_CALL(object = DefaultSimilarity());
            self->object = object;

            return 0;
          }

          static PyObject *t_DefaultSimilarity_coord(t_DefaultSimilarity *self, PyObject *args)
          {
            jint a0;
            jint a1;
            jfloat result;

            if (!parseArgs(args, "II", &a0, &a1))
            {
              OBJ_CALL(result = self->object.coord(a0, a1));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(DefaultSimilarity), (PyObject *) self, "coord", args, 2);
          }

          static PyObject *t_DefaultSimilarity_decodeNormValue(t_DefaultSimilarity *self, PyObject *args)
          {
            jlong a0;
            jfloat result;

            if (!parseArgs(args, "J", &a0))
            {
              OBJ_CALL(result = self->object.decodeNormValue(a0));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(DefaultSimilarity), (PyObject *) self, "decodeNormValue", args, 2);
          }

          static PyObject *t_DefaultSimilarity_encodeNormValue(t_DefaultSimilarity *self, PyObject *args)
          {
            jfloat a0;
            jlong result;

            if (!parseArgs(args, "F", &a0))
            {
              OBJ_CALL(result = self->object.encodeNormValue(a0));
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(&PY_TYPE(DefaultSimilarity), (PyObject *) self, "encodeNormValue", args, 2);
          }

          static PyObject *t_DefaultSimilarity_getDiscountOverlaps(t_DefaultSimilarity *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.getDiscountOverlaps());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_DefaultSimilarity_idf(t_DefaultSimilarity *self, PyObject *args)
          {
            jlong a0;
            jlong a1;
            jfloat result;

            if (!parseArgs(args, "JJ", &a0, &a1))
            {
              OBJ_CALL(result = self->object.idf(a0, a1));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(DefaultSimilarity), (PyObject *) self, "idf", args, 2);
          }

          static PyObject *t_DefaultSimilarity_lengthNorm(t_DefaultSimilarity *self, PyObject *args)
          {
            ::org::apache::lucene::index::FieldInvertState a0((jobject) NULL);
            jfloat result;

            if (!parseArgs(args, "k", ::org::apache::lucene::index::FieldInvertState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.lengthNorm(a0));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(DefaultSimilarity), (PyObject *) self, "lengthNorm", args, 2);
          }

          static PyObject *t_DefaultSimilarity_queryNorm(t_DefaultSimilarity *self, PyObject *args)
          {
            jfloat a0;
            jfloat result;

            if (!parseArgs(args, "F", &a0))
            {
              OBJ_CALL(result = self->object.queryNorm(a0));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(DefaultSimilarity), (PyObject *) self, "queryNorm", args, 2);
          }

          static PyObject *t_DefaultSimilarity_scorePayload(t_DefaultSimilarity *self, PyObject *args)
          {
            jint a0;
            jint a1;
            jint a2;
            ::org::apache::lucene::util::BytesRef a3((jobject) NULL);
            jfloat result;

            if (!parseArgs(args, "IIIk", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2, &a3))
            {
              OBJ_CALL(result = self->object.scorePayload(a0, a1, a2, a3));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(DefaultSimilarity), (PyObject *) self, "scorePayload", args, 2);
          }

          static PyObject *t_DefaultSimilarity_setDiscountOverlaps(t_DefaultSimilarity *self, PyObject *arg)
          {
            jboolean a0;

            if (!parseArg(arg, "Z", &a0))
            {
              OBJ_CALL(self->object.setDiscountOverlaps(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setDiscountOverlaps", arg);
            return NULL;
          }

          static PyObject *t_DefaultSimilarity_sloppyFreq(t_DefaultSimilarity *self, PyObject *args)
          {
            jint a0;
            jfloat result;

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(result = self->object.sloppyFreq(a0));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(DefaultSimilarity), (PyObject *) self, "sloppyFreq", args, 2);
          }

          static PyObject *t_DefaultSimilarity_tf(t_DefaultSimilarity *self, PyObject *args)
          {
            jfloat a0;
            jfloat result;

            if (!parseArgs(args, "F", &a0))
            {
              OBJ_CALL(result = self->object.tf(a0));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(DefaultSimilarity), (PyObject *) self, "tf", args, 2);
          }

          static PyObject *t_DefaultSimilarity_toString(t_DefaultSimilarity *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(DefaultSimilarity), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_DefaultSimilarity_get__discountOverlaps(t_DefaultSimilarity *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.getDiscountOverlaps());
            Py_RETURN_BOOL(value);
          }
          static int t_DefaultSimilarity_set__discountOverlaps(t_DefaultSimilarity *self, PyObject *arg, void *data)
          {
            {
              jboolean value;
              if (!parseArg(arg, "Z", &value))
              {
                INT_CALL(self->object.setDiscountOverlaps(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "discountOverlaps", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/fr/FrenchLightStemmer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fr {

          ::java::lang::Class *FrenchLightStemmer::class$ = NULL;
          jmethodID *FrenchLightStemmer::mids$ = NULL;
          bool FrenchLightStemmer::live$ = false;

          jclass FrenchLightStemmer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/fr/FrenchLightStemmer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_stem_ec6430eb] = env->getMethodID(cls, "stem", "([CI)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FrenchLightStemmer::FrenchLightStemmer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint FrenchLightStemmer::stem(const JArray< jchar > & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_stem_ec6430eb], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fr {
          static PyObject *t_FrenchLightStemmer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FrenchLightStemmer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FrenchLightStemmer_init_(t_FrenchLightStemmer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FrenchLightStemmer_stem(t_FrenchLightStemmer *self, PyObject *args);

          static PyMethodDef t_FrenchLightStemmer__methods_[] = {
            DECLARE_METHOD(t_FrenchLightStemmer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FrenchLightStemmer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FrenchLightStemmer, stem, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FrenchLightStemmer, t_FrenchLightStemmer, ::java::lang::Object, FrenchLightStemmer, t_FrenchLightStemmer_init_, 0, 0, 0, 0, 0);

          void t_FrenchLightStemmer::install(PyObject *module)
          {
            installType(&PY_TYPE(FrenchLightStemmer), module, "FrenchLightStemmer", 0);
          }

          void t_FrenchLightStemmer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FrenchLightStemmer).tp_dict, "class_", make_descriptor(FrenchLightStemmer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FrenchLightStemmer).tp_dict, "wrapfn_", make_descriptor(t_FrenchLightStemmer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FrenchLightStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FrenchLightStemmer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FrenchLightStemmer::initializeClass, 1)))
              return NULL;
            return t_FrenchLightStemmer::wrap_Object(FrenchLightStemmer(((t_FrenchLightStemmer *) arg)->object.this$));
          }
          static PyObject *t_FrenchLightStemmer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FrenchLightStemmer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FrenchLightStemmer_init_(t_FrenchLightStemmer *self, PyObject *args, PyObject *kwds)
          {
            FrenchLightStemmer object((jobject) NULL);

            INT_CALL(object = FrenchLightStemmer());
            self->object = object;

            return 0;
          }

          static PyObject *t_FrenchLightStemmer_stem(t_FrenchLightStemmer *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(result = self->object.stem(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "stem", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/CachingCollector.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *CachingCollector::class$ = NULL;
        jmethodID *CachingCollector::mids$ = NULL;
        bool CachingCollector::live$ = false;

        jclass CachingCollector::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/CachingCollector");

            mids$ = new jmethodID[max_mid];
            mids$[mid_acceptsDocsOutOfOrder_54c6a16a] = env->getMethodID(cls, "acceptsDocsOutOfOrder", "()Z");
            mids$[mid_create_e449836e] = env->getStaticMethodID(cls, "create", "(ZZD)Lorg/apache/lucene/search/CachingCollector;");
            mids$[mid_create_69c8fe09] = env->getStaticMethodID(cls, "create", "(Lorg/apache/lucene/search/Collector;ZD)Lorg/apache/lucene/search/CachingCollector;");
            mids$[mid_create_e9d072d8] = env->getStaticMethodID(cls, "create", "(Lorg/apache/lucene/search/Collector;ZI)Lorg/apache/lucene/search/CachingCollector;");
            mids$[mid_isCached_54c6a16a] = env->getMethodID(cls, "isCached", "()Z");
            mids$[mid_replay_77379ce0] = env->getMethodID(cls, "replay", "(Lorg/apache/lucene/search/Collector;)V");
            mids$[mid_setNextReader_a6f59947] = env->getMethodID(cls, "setNextReader", "(Lorg/apache/lucene/index/AtomicReaderContext;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jboolean CachingCollector::acceptsDocsOutOfOrder() const
        {
          return env->callBooleanMethod(this$, mids$[mid_acceptsDocsOutOfOrder_54c6a16a]);
        }

        CachingCollector CachingCollector::create(jboolean a0, jboolean a1, jdouble a2)
        {
          jclass cls = env->getClass(initializeClass);
          return CachingCollector(env->callStaticObjectMethod(cls, mids$[mid_create_e449836e], a0, a1, a2));
        }

        CachingCollector CachingCollector::create(const ::org::apache::lucene::search::Collector & a0, jboolean a1, jdouble a2)
        {
          jclass cls = env->getClass(initializeClass);
          return CachingCollector(env->callStaticObjectMethod(cls, mids$[mid_create_69c8fe09], a0.this$, a1, a2));
        }

        CachingCollector CachingCollector::create(const ::org::apache::lucene::search::Collector & a0, jboolean a1, jint a2)
        {
          jclass cls = env->getClass(initializeClass);
          return CachingCollector(env->callStaticObjectMethod(cls, mids$[mid_create_e9d072d8], a0.this$, a1, a2));
        }

        jboolean CachingCollector::isCached() const
        {
          return env->callBooleanMethod(this$, mids$[mid_isCached_54c6a16a]);
        }

        void CachingCollector::replay(const ::org::apache::lucene::search::Collector & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_replay_77379ce0], a0.this$);
        }

        void CachingCollector::setNextReader(const ::org::apache::lucene::index::AtomicReaderContext & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setNextReader_a6f59947], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_CachingCollector_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CachingCollector_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CachingCollector_acceptsDocsOutOfOrder(t_CachingCollector *self, PyObject *args);
        static PyObject *t_CachingCollector_create(PyTypeObject *type, PyObject *args);
        static PyObject *t_CachingCollector_isCached(t_CachingCollector *self);
        static PyObject *t_CachingCollector_replay(t_CachingCollector *self, PyObject *arg);
        static PyObject *t_CachingCollector_setNextReader(t_CachingCollector *self, PyObject *args);
        static PyObject *t_CachingCollector_get__cached(t_CachingCollector *self, void *data);
        static int t_CachingCollector_set__nextReader(t_CachingCollector *self, PyObject *arg, void *data);
        static PyGetSetDef t_CachingCollector__fields_[] = {
          DECLARE_GET_FIELD(t_CachingCollector, cached),
          DECLARE_SET_FIELD(t_CachingCollector, nextReader),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_CachingCollector__methods_[] = {
          DECLARE_METHOD(t_CachingCollector, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CachingCollector, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CachingCollector, acceptsDocsOutOfOrder, METH_VARARGS),
          DECLARE_METHOD(t_CachingCollector, create, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_CachingCollector, isCached, METH_NOARGS),
          DECLARE_METHOD(t_CachingCollector, replay, METH_O),
          DECLARE_METHOD(t_CachingCollector, setNextReader, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(CachingCollector, t_CachingCollector, ::org::apache::lucene::search::Collector, CachingCollector, abstract_init, 0, 0, t_CachingCollector__fields_, 0, 0);

        void t_CachingCollector::install(PyObject *module)
        {
          installType(&PY_TYPE(CachingCollector), module, "CachingCollector", 0);
        }

        void t_CachingCollector::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(CachingCollector).tp_dict, "class_", make_descriptor(CachingCollector::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(CachingCollector).tp_dict, "wrapfn_", make_descriptor(t_CachingCollector::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(CachingCollector).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_CachingCollector_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CachingCollector::initializeClass, 1)))
            return NULL;
          return t_CachingCollector::wrap_Object(CachingCollector(((t_CachingCollector *) arg)->object.this$));
        }
        static PyObject *t_CachingCollector_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CachingCollector::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_CachingCollector_acceptsDocsOutOfOrder(t_CachingCollector *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.acceptsDocsOutOfOrder());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(CachingCollector), (PyObject *) self, "acceptsDocsOutOfOrder", args, 2);
        }

        static PyObject *t_CachingCollector_create(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 3:
            {
              jboolean a0;
              jboolean a1;
              jdouble a2;
              CachingCollector result((jobject) NULL);

              if (!parseArgs(args, "ZZD", &a0, &a1, &a2))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::CachingCollector::create(a0, a1, a2));
                return t_CachingCollector::wrap_Object(result);
              }
            }
            {
              ::org::apache::lucene::search::Collector a0((jobject) NULL);
              jboolean a1;
              jdouble a2;
              CachingCollector result((jobject) NULL);

              if (!parseArgs(args, "kZD", ::org::apache::lucene::search::Collector::initializeClass, &a0, &a1, &a2))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::CachingCollector::create(a0, a1, a2));
                return t_CachingCollector::wrap_Object(result);
              }
            }
            {
              ::org::apache::lucene::search::Collector a0((jobject) NULL);
              jboolean a1;
              jint a2;
              CachingCollector result((jobject) NULL);

              if (!parseArgs(args, "kZI", ::org::apache::lucene::search::Collector::initializeClass, &a0, &a1, &a2))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::CachingCollector::create(a0, a1, a2));
                return t_CachingCollector::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError(type, "create", args);
          return NULL;
        }

        static PyObject *t_CachingCollector_isCached(t_CachingCollector *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.isCached());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_CachingCollector_replay(t_CachingCollector *self, PyObject *arg)
        {
          ::org::apache::lucene::search::Collector a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::search::Collector::initializeClass, &a0))
          {
            OBJ_CALL(self->object.replay(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "replay", arg);
          return NULL;
        }

        static PyObject *t_CachingCollector_setNextReader(t_CachingCollector *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setNextReader(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(CachingCollector), (PyObject *) self, "setNextReader", args, 2);
        }

        static PyObject *t_CachingCollector_get__cached(t_CachingCollector *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.isCached());
          Py_RETURN_BOOL(value);
        }

        static int t_CachingCollector_set__nextReader(t_CachingCollector *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::index::AtomicReaderContext value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &value))
            {
              INT_CALL(self->object.setNextReader(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "nextReader", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/PagedBytes$PagedBytesDataOutput.h"
#include "org/apache/lucene/util/PagedBytes.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *PagedBytes$PagedBytesDataOutput::class$ = NULL;
        jmethodID *PagedBytes$PagedBytesDataOutput::mids$ = NULL;
        bool PagedBytes$PagedBytesDataOutput::live$ = false;

        jclass PagedBytes$PagedBytesDataOutput::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/PagedBytes$PagedBytesDataOutput");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_2279e4ea] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/PagedBytes;)V");
            mids$[mid_getPosition_54c6a17a] = env->getMethodID(cls, "getPosition", "()J");
            mids$[mid_writeByte_b2271687] = env->getMethodID(cls, "writeByte", "(B)V");
            mids$[mid_writeBytes_86f4435f] = env->getMethodID(cls, "writeBytes", "([BII)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PagedBytes$PagedBytesDataOutput::PagedBytes$PagedBytesDataOutput(const ::org::apache::lucene::util::PagedBytes & a0) : ::org::apache::lucene::store::DataOutput(env->newObject(initializeClass, &mids$, mid_init$_2279e4ea, a0.this$)) {}

        jlong PagedBytes$PagedBytesDataOutput::getPosition() const
        {
          return env->callLongMethod(this$, mids$[mid_getPosition_54c6a17a]);
        }

        void PagedBytes$PagedBytesDataOutput::writeByte(jbyte a0) const
        {
          env->callVoidMethod(this$, mids$[mid_writeByte_b2271687], a0);
        }

        void PagedBytes$PagedBytesDataOutput::writeBytes(const JArray< jbyte > & a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_writeBytes_86f4435f], a0.this$, a1, a2);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_PagedBytes$PagedBytesDataOutput_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PagedBytes$PagedBytesDataOutput_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PagedBytes$PagedBytesDataOutput_init_(t_PagedBytes$PagedBytesDataOutput *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PagedBytes$PagedBytesDataOutput_getPosition(t_PagedBytes$PagedBytesDataOutput *self);
        static PyObject *t_PagedBytes$PagedBytesDataOutput_writeByte(t_PagedBytes$PagedBytesDataOutput *self, PyObject *args);
        static PyObject *t_PagedBytes$PagedBytesDataOutput_writeBytes(t_PagedBytes$PagedBytesDataOutput *self, PyObject *args);
        static PyObject *t_PagedBytes$PagedBytesDataOutput_get__position(t_PagedBytes$PagedBytesDataOutput *self, void *data);
        static PyGetSetDef t_PagedBytes$PagedBytesDataOutput__fields_[] = {
          DECLARE_GET_FIELD(t_PagedBytes$PagedBytesDataOutput, position),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PagedBytes$PagedBytesDataOutput__methods_[] = {
          DECLARE_METHOD(t_PagedBytes$PagedBytesDataOutput, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PagedBytes$PagedBytesDataOutput, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PagedBytes$PagedBytesDataOutput, getPosition, METH_NOARGS),
          DECLARE_METHOD(t_PagedBytes$PagedBytesDataOutput, writeByte, METH_VARARGS),
          DECLARE_METHOD(t_PagedBytes$PagedBytesDataOutput, writeBytes, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PagedBytes$PagedBytesDataOutput, t_PagedBytes$PagedBytesDataOutput, ::org::apache::lucene::store::DataOutput, PagedBytes$PagedBytesDataOutput, t_PagedBytes$PagedBytesDataOutput_init_, 0, 0, t_PagedBytes$PagedBytesDataOutput__fields_, 0, 0);

        void t_PagedBytes$PagedBytesDataOutput::install(PyObject *module)
        {
          installType(&PY_TYPE(PagedBytes$PagedBytesDataOutput), module, "PagedBytes$PagedBytesDataOutput", 0);
        }

        void t_PagedBytes$PagedBytesDataOutput::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PagedBytes$PagedBytesDataOutput).tp_dict, "class_", make_descriptor(PagedBytes$PagedBytesDataOutput::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PagedBytes$PagedBytesDataOutput).tp_dict, "wrapfn_", make_descriptor(t_PagedBytes$PagedBytesDataOutput::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PagedBytes$PagedBytesDataOutput).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_PagedBytes$PagedBytesDataOutput_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PagedBytes$PagedBytesDataOutput::initializeClass, 1)))
            return NULL;
          return t_PagedBytes$PagedBytesDataOutput::wrap_Object(PagedBytes$PagedBytesDataOutput(((t_PagedBytes$PagedBytesDataOutput *) arg)->object.this$));
        }
        static PyObject *t_PagedBytes$PagedBytesDataOutput_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PagedBytes$PagedBytesDataOutput::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PagedBytes$PagedBytesDataOutput_init_(t_PagedBytes$PagedBytesDataOutput *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::util::PagedBytes a0((jobject) NULL);
          PagedBytes$PagedBytesDataOutput object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::util::PagedBytes::initializeClass, &a0))
          {
            INT_CALL(object = PagedBytes$PagedBytesDataOutput(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_PagedBytes$PagedBytesDataOutput_getPosition(t_PagedBytes$PagedBytesDataOutput *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getPosition());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_PagedBytes$PagedBytesDataOutput_writeByte(t_PagedBytes$PagedBytesDataOutput *self, PyObject *args)
        {
          jbyte a0;

          if (!parseArgs(args, "B", &a0))
          {
            OBJ_CALL(self->object.writeByte(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(PagedBytes$PagedBytesDataOutput), (PyObject *) self, "writeByte", args, 2);
        }

        static PyObject *t_PagedBytes$PagedBytesDataOutput_writeBytes(t_PagedBytes$PagedBytesDataOutput *self, PyObject *args)
        {
          JArray< jbyte > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[BII", &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.writeBytes(a0, a1, a2));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(PagedBytes$PagedBytesDataOutput), (PyObject *) self, "writeBytes", args, 2);
        }

        static PyObject *t_PagedBytes$PagedBytesDataOutput_get__position(t_PagedBytes$PagedBytesDataOutput *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getPosition());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/grouping/TopGroups.h"
#include "java/lang/Integer.h"
#include "org/apache/lucene/search/Sort.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/grouping/TopGroups$ScoreMergeMode.h"
#include "org/apache/lucene/search/SortField.h"
#include "org/apache/lucene/search/grouping/GroupDocs.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {

          ::java::lang::Class *TopGroups::class$ = NULL;
          jmethodID *TopGroups::mids$ = NULL;
          jfieldID *TopGroups::fids$ = NULL;
          bool TopGroups::live$ = false;

          jclass TopGroups::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/grouping/TopGroups");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_056bd231] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/grouping/TopGroups;Ljava/lang/Integer;)V");
              mids$[mid_init$_5e81883d] = env->getMethodID(cls, "<init>", "([Lorg/apache/lucene/search/SortField;[Lorg/apache/lucene/search/SortField;II[Lorg/apache/lucene/search/grouping/GroupDocs;F)V");
              mids$[mid_merge_abb30a8c] = env->getStaticMethodID(cls, "merge", "([Lorg/apache/lucene/search/grouping/TopGroups;Lorg/apache/lucene/search/Sort;Lorg/apache/lucene/search/Sort;IILorg/apache/lucene/search/grouping/TopGroups$ScoreMergeMode;)Lorg/apache/lucene/search/grouping/TopGroups;");

              fids$ = new jfieldID[max_fid];
              fids$[fid_groupSort] = env->getFieldID(cls, "groupSort", "[Lorg/apache/lucene/search/SortField;");
              fids$[fid_groups] = env->getFieldID(cls, "groups", "[Lorg/apache/lucene/search/grouping/GroupDocs;");
              fids$[fid_maxScore] = env->getFieldID(cls, "maxScore", "F");
              fids$[fid_totalGroupCount] = env->getFieldID(cls, "totalGroupCount", "Ljava/lang/Integer;");
              fids$[fid_totalGroupedHitCount] = env->getFieldID(cls, "totalGroupedHitCount", "I");
              fids$[fid_totalHitCount] = env->getFieldID(cls, "totalHitCount", "I");
              fids$[fid_withinGroupSort] = env->getFieldID(cls, "withinGroupSort", "[Lorg/apache/lucene/search/SortField;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TopGroups::TopGroups(const TopGroups & a0, const ::java::lang::Integer & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_056bd231, a0.this$, a1.this$)) {}

          TopGroups::TopGroups(const JArray< ::org::apache::lucene::search::SortField > & a0, const JArray< ::org::apache::lucene::search::SortField > & a1, jint a2, jint a3, const JArray< ::org::apache::lucene::search::grouping::GroupDocs > & a4, jfloat a5) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_5e81883d, a0.this$, a1.this$, a2, a3, a4.this$, a5)) {}

          TopGroups TopGroups::merge(const JArray< TopGroups > & a0, const ::org::apache::lucene::search::Sort & a1, const ::org::apache::lucene::search::Sort & a2, jint a3, jint a4, const ::org::apache::lucene::search::grouping::TopGroups$ScoreMergeMode & a5)
          {
            jclass cls = env->getClass(initializeClass);
            return TopGroups(env->callStaticObjectMethod(cls, mids$[mid_merge_abb30a8c], a0.this$, a1.this$, a2.this$, a3, a4, a5.this$));
          }

          JArray< ::org::apache::lucene::search::SortField > TopGroups::_get_groupSort() const
          {
            return JArray< ::org::apache::lucene::search::SortField >(env->getObjectField(this$, fids$[fid_groupSort]));
          }

          JArray< ::org::apache::lucene::search::grouping::GroupDocs > TopGroups::_get_groups() const
          {
            return JArray< ::org::apache::lucene::search::grouping::GroupDocs >(env->getObjectField(this$, fids$[fid_groups]));
          }

          jfloat TopGroups::_get_maxScore() const
          {
            return env->getFloatField(this$, fids$[fid_maxScore]);
          }

          ::java::lang::Integer TopGroups::_get_totalGroupCount() const
          {
            return ::java::lang::Integer(env->getObjectField(this$, fids$[fid_totalGroupCount]));
          }

          jint TopGroups::_get_totalGroupedHitCount() const
          {
            return env->getIntField(this$, fids$[fid_totalGroupedHitCount]);
          }

          jint TopGroups::_get_totalHitCount() const
          {
            return env->getIntField(this$, fids$[fid_totalHitCount]);
          }

          JArray< ::org::apache::lucene::search::SortField > TopGroups::_get_withinGroupSort() const
          {
            return JArray< ::org::apache::lucene::search::SortField >(env->getObjectField(this$, fids$[fid_withinGroupSort]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          static PyObject *t_TopGroups_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TopGroups_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TopGroups_of_(t_TopGroups *self, PyObject *args);
          static int t_TopGroups_init_(t_TopGroups *self, PyObject *args, PyObject *kwds);
          static PyObject *t_TopGroups_merge(PyTypeObject *type, PyObject *args);
          static PyObject *t_TopGroups_get__groupSort(t_TopGroups *self, void *data);
          static PyObject *t_TopGroups_get__groups(t_TopGroups *self, void *data);
          static PyObject *t_TopGroups_get__maxScore(t_TopGroups *self, void *data);
          static PyObject *t_TopGroups_get__totalGroupCount(t_TopGroups *self, void *data);
          static PyObject *t_TopGroups_get__totalGroupedHitCount(t_TopGroups *self, void *data);
          static PyObject *t_TopGroups_get__totalHitCount(t_TopGroups *self, void *data);
          static PyObject *t_TopGroups_get__withinGroupSort(t_TopGroups *self, void *data);

          static PyObject *t_TopGroups_get__parameters_(t_TopGroups *self, void *data);
          static PyGetSetDef t_TopGroups__fields_[] = {
            DECLARE_GET_FIELD(t_TopGroups, groupSort),
            DECLARE_GET_FIELD(t_TopGroups, groups),
            DECLARE_GET_FIELD(t_TopGroups, maxScore),
            DECLARE_GET_FIELD(t_TopGroups, totalGroupCount),
            DECLARE_GET_FIELD(t_TopGroups, totalGroupedHitCount),
            DECLARE_GET_FIELD(t_TopGroups, totalHitCount),
            DECLARE_GET_FIELD(t_TopGroups, withinGroupSort),
            DECLARE_GET_FIELD(t_TopGroups, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_TopGroups__methods_[] = {
            DECLARE_METHOD(t_TopGroups, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TopGroups, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TopGroups, of_, METH_VARARGS),
            DECLARE_METHOD(t_TopGroups, merge, METH_VARARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(TopGroups, t_TopGroups, ::java::lang::Object, TopGroups, t_TopGroups_init_, 0, 0, t_TopGroups__fields_, 0, 0);
          PyObject *t_TopGroups::wrap_Object(const TopGroups& object, PyTypeObject *p0)
          {
            PyObject *obj = t_TopGroups::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_TopGroups *self = (t_TopGroups *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_TopGroups::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_TopGroups::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_TopGroups *self = (t_TopGroups *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_TopGroups::install(PyObject *module)
          {
            installType(&PY_TYPE(TopGroups), module, "TopGroups", 0);
            PyDict_SetItemString(PY_TYPE(TopGroups).tp_dict, "ScoreMergeMode", make_descriptor(&PY_TYPE(TopGroups$ScoreMergeMode)));
          }

          void t_TopGroups::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(TopGroups).tp_dict, "class_", make_descriptor(TopGroups::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(TopGroups).tp_dict, "wrapfn_", make_descriptor(t_TopGroups::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(TopGroups).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TopGroups_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TopGroups::initializeClass, 1)))
              return NULL;
            return t_TopGroups::wrap_Object(TopGroups(((t_TopGroups *) arg)->object.this$));
          }
          static PyObject *t_TopGroups_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TopGroups::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_TopGroups_of_(t_TopGroups *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_TopGroups_init_(t_TopGroups *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                TopGroups a0((jobject) NULL);
                PyTypeObject **p0;
                ::java::lang::Integer a1((jobject) NULL);
                TopGroups object((jobject) NULL);

                if (!parseArgs(args, "KO", TopGroups::initializeClass, &::java::lang::PY_TYPE(Integer), &a0, &p0, t_TopGroups::parameters_, &a1))
                {
                  INT_CALL(object = TopGroups(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 6:
              {
                JArray< ::org::apache::lucene::search::SortField > a0((jobject) NULL);
                JArray< ::org::apache::lucene::search::SortField > a1((jobject) NULL);
                jint a2;
                jint a3;
                JArray< ::org::apache::lucene::search::grouping::GroupDocs > a4((jobject) NULL);
                PyTypeObject **p4;
                jfloat a5;
                TopGroups object((jobject) NULL);

                if (!parseArgs(args, "[k[kII[KF", ::org::apache::lucene::search::SortField::initializeClass, ::org::apache::lucene::search::SortField::initializeClass, ::org::apache::lucene::search::grouping::GroupDocs::initializeClass, &a0, &a1, &a2, &a3, &a4, &p4, ::org::apache::lucene::search::grouping::t_GroupDocs::parameters_, &a5))
                {
                  INT_CALL(object = TopGroups(a0, a1, a2, a3, a4, a5));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_TopGroups_merge(PyTypeObject *type, PyObject *args)
          {
            JArray< TopGroups > a0((jobject) NULL);
            PyTypeObject **p0;
            ::org::apache::lucene::search::Sort a1((jobject) NULL);
            ::org::apache::lucene::search::Sort a2((jobject) NULL);
            jint a3;
            jint a4;
            ::org::apache::lucene::search::grouping::TopGroups$ScoreMergeMode a5((jobject) NULL);
            PyTypeObject **p5;
            TopGroups result((jobject) NULL);

            if (!parseArgs(args, "[KkkIIK", TopGroups::initializeClass, ::org::apache::lucene::search::Sort::initializeClass, ::org::apache::lucene::search::Sort::initializeClass, ::org::apache::lucene::search::grouping::TopGroups$ScoreMergeMode::initializeClass, &a0, &p0, t_TopGroups::parameters_, &a1, &a2, &a3, &a4, &a5, &p5, ::org::apache::lucene::search::grouping::t_TopGroups$ScoreMergeMode::parameters_))
            {
              OBJ_CALL(result = ::org::apache::lucene::search::grouping::TopGroups::merge(a0, a1, a2, a3, a4, a5));
              return t_TopGroups::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "merge", args);
            return NULL;
          }
          static PyObject *t_TopGroups_get__parameters_(t_TopGroups *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_TopGroups_get__groupSort(t_TopGroups *self, void *data)
          {
            JArray< ::org::apache::lucene::search::SortField > value((jobject) NULL);
            OBJ_CALL(value = self->object._get_groupSort());
            return JArray<jobject>(value.this$).wrap(::org::apache::lucene::search::t_SortField::wrap_jobject);
          }

          static PyObject *t_TopGroups_get__groups(t_TopGroups *self, void *data)
          {
            JArray< ::org::apache::lucene::search::grouping::GroupDocs > value((jobject) NULL);
            OBJ_CALL(value = self->object._get_groups());
            return JArray<jobject>(value.this$).wrap(::org::apache::lucene::search::grouping::t_GroupDocs::wrap_jobject);
          }

          static PyObject *t_TopGroups_get__maxScore(t_TopGroups *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object._get_maxScore());
            return PyFloat_FromDouble((double) value);
          }

          static PyObject *t_TopGroups_get__totalGroupCount(t_TopGroups *self, void *data)
          {
            ::java::lang::Integer value((jobject) NULL);
            OBJ_CALL(value = self->object._get_totalGroupCount());
            return ::java::lang::t_Integer::wrap_Object(value);
          }

          static PyObject *t_TopGroups_get__totalGroupedHitCount(t_TopGroups *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object._get_totalGroupedHitCount());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_TopGroups_get__totalHitCount(t_TopGroups *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object._get_totalHitCount());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_TopGroups_get__withinGroupSort(t_TopGroups *self, void *data)
          {
            JArray< ::org::apache::lucene::search::SortField > value((jobject) NULL);
            OBJ_CALL(value = self->object._get_withinGroupSort());
            return JArray<jobject>(value.this$).wrap(::org::apache::lucene::search::t_SortField::wrap_jobject);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/MapOfSets.h"
#include "java/util/Collection.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *MapOfSets::class$ = NULL;
        jmethodID *MapOfSets::mids$ = NULL;
        bool MapOfSets::live$ = false;

        jclass MapOfSets::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/MapOfSets");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
            mids$[mid_getMap_db60befd] = env->getMethodID(cls, "getMap", "()Ljava/util/Map;");
            mids$[mid_put_466982ed] = env->getMethodID(cls, "put", "(Ljava/lang/Object;Ljava/lang/Object;)I");
            mids$[mid_putAll_bdc4f4b6] = env->getMethodID(cls, "putAll", "(Ljava/lang/Object;Ljava/util/Collection;)I");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        MapOfSets::MapOfSets(const ::java::util::Map & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

        ::java::util::Map MapOfSets::getMap() const
        {
          return ::java::util::Map(env->callObjectMethod(this$, mids$[mid_getMap_db60befd]));
        }

        jint MapOfSets::put(const ::java::lang::Object & a0, const ::java::lang::Object & a1) const
        {
          return env->callIntMethod(this$, mids$[mid_put_466982ed], a0.this$, a1.this$);
        }

        jint MapOfSets::putAll(const ::java::lang::Object & a0, const ::java::util::Collection & a1) const
        {
          return env->callIntMethod(this$, mids$[mid_putAll_bdc4f4b6], a0.this$, a1.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_MapOfSets_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MapOfSets_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MapOfSets_of_(t_MapOfSets *self, PyObject *args);
        static int t_MapOfSets_init_(t_MapOfSets *self, PyObject *args, PyObject *kwds);
        static PyObject *t_MapOfSets_getMap(t_MapOfSets *self);
        static PyObject *t_MapOfSets_put(t_MapOfSets *self, PyObject *args);
        static PyObject *t_MapOfSets_putAll(t_MapOfSets *self, PyObject *args);
        static PyObject *t_MapOfSets_get__map(t_MapOfSets *self, void *data);
        static PyObject *t_MapOfSets_get__parameters_(t_MapOfSets *self, void *data);
        static PyGetSetDef t_MapOfSets__fields_[] = {
          DECLARE_GET_FIELD(t_MapOfSets, map),
          DECLARE_GET_FIELD(t_MapOfSets, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_MapOfSets__methods_[] = {
          DECLARE_METHOD(t_MapOfSets, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MapOfSets, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MapOfSets, of_, METH_VARARGS),
          DECLARE_METHOD(t_MapOfSets, getMap, METH_NOARGS),
          DECLARE_METHOD(t_MapOfSets, put, METH_VARARGS),
          DECLARE_METHOD(t_MapOfSets, putAll, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MapOfSets, t_MapOfSets, ::java::lang::Object, MapOfSets, t_MapOfSets_init_, 0, 0, t_MapOfSets__fields_, 0, 0);
        PyObject *t_MapOfSets::wrap_Object(const MapOfSets& object, PyTypeObject *p0, PyTypeObject *p1)
        {
          PyObject *obj = t_MapOfSets::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_MapOfSets *self = (t_MapOfSets *) obj;
            self->parameters[0] = p0;
            self->parameters[1] = p1;
          }
          return obj;
        }

        PyObject *t_MapOfSets::wrap_jobject(const jobject& object, PyTypeObject *p0, PyTypeObject *p1)
        {
          PyObject *obj = t_MapOfSets::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_MapOfSets *self = (t_MapOfSets *) obj;
            self->parameters[0] = p0;
            self->parameters[1] = p1;
          }
          return obj;
        }

        void t_MapOfSets::install(PyObject *module)
        {
          installType(&PY_TYPE(MapOfSets), module, "MapOfSets", 0);
        }

        void t_MapOfSets::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MapOfSets).tp_dict, "class_", make_descriptor(MapOfSets::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MapOfSets).tp_dict, "wrapfn_", make_descriptor(t_MapOfSets::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MapOfSets).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MapOfSets_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MapOfSets::initializeClass, 1)))
            return NULL;
          return t_MapOfSets::wrap_Object(MapOfSets(((t_MapOfSets *) arg)->object.this$));
        }
        static PyObject *t_MapOfSets_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MapOfSets::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_MapOfSets_of_(t_MapOfSets *self, PyObject *args)
        {
          if (!parseArg(args, "T", 2, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_MapOfSets_init_(t_MapOfSets *self, PyObject *args, PyObject *kwds)
        {
          ::java::util::Map a0((jobject) NULL);
          PyTypeObject **p0;
          MapOfSets object((jobject) NULL);

          if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
          {
            INT_CALL(object = MapOfSets(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_MapOfSets_getMap(t_MapOfSets *self)
        {
          ::java::util::Map result((jobject) NULL);
          OBJ_CALL(result = self->object.getMap());
          return ::java::util::t_Map::wrap_Object(result);
        }

        static PyObject *t_MapOfSets_put(t_MapOfSets *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          ::java::lang::Object a1((jobject) NULL);
          jint result;

          if (!parseArgs(args, "OO", self->parameters[0], self->parameters[1], &a0, &a1))
          {
            OBJ_CALL(result = self->object.put(a0, a1));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "put", args);
          return NULL;
        }

        static PyObject *t_MapOfSets_putAll(t_MapOfSets *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          ::java::util::Collection a1((jobject) NULL);
          PyTypeObject **p1;
          jint result;

          if (!parseArgs(args, "OK", self->parameters[0], ::java::util::Collection::initializeClass, &a0, &a1, &p1, ::java::util::t_Collection::parameters_))
          {
            OBJ_CALL(result = self->object.putAll(a0, a1));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "putAll", args);
          return NULL;
        }
        static PyObject *t_MapOfSets_get__parameters_(t_MapOfSets *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static PyObject *t_MapOfSets_get__map(t_MapOfSets *self, void *data)
        {
          ::java::util::Map value((jobject) NULL);
          OBJ_CALL(value = self->object.getMap());
          return ::java::util::t_Map::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/TruncateTokenFilterFactory.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *TruncateTokenFilterFactory::class$ = NULL;
          jmethodID *TruncateTokenFilterFactory::mids$ = NULL;
          bool TruncateTokenFilterFactory::live$ = false;
          ::java::lang::String *TruncateTokenFilterFactory::PREFIX_LENGTH_KEY = NULL;

          jclass TruncateTokenFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/TruncateTokenFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              PREFIX_LENGTH_KEY = new ::java::lang::String(env->getStaticObjectField(cls, "PREFIX_LENGTH_KEY", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TruncateTokenFilterFactory::TruncateTokenFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream TruncateTokenFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_TruncateTokenFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TruncateTokenFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_TruncateTokenFilterFactory_init_(t_TruncateTokenFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_TruncateTokenFilterFactory_create(t_TruncateTokenFilterFactory *self, PyObject *args);

          static PyMethodDef t_TruncateTokenFilterFactory__methods_[] = {
            DECLARE_METHOD(t_TruncateTokenFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TruncateTokenFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TruncateTokenFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(TruncateTokenFilterFactory, t_TruncateTokenFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, TruncateTokenFilterFactory, t_TruncateTokenFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_TruncateTokenFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(TruncateTokenFilterFactory), module, "TruncateTokenFilterFactory", 0);
          }

          void t_TruncateTokenFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(TruncateTokenFilterFactory).tp_dict, "class_", make_descriptor(TruncateTokenFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(TruncateTokenFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_TruncateTokenFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(TruncateTokenFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(TruncateTokenFilterFactory::initializeClass);
            PyDict_SetItemString(PY_TYPE(TruncateTokenFilterFactory).tp_dict, "PREFIX_LENGTH_KEY", make_descriptor(j2p(*TruncateTokenFilterFactory::PREFIX_LENGTH_KEY)));
          }

          static PyObject *t_TruncateTokenFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TruncateTokenFilterFactory::initializeClass, 1)))
              return NULL;
            return t_TruncateTokenFilterFactory::wrap_Object(TruncateTokenFilterFactory(((t_TruncateTokenFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_TruncateTokenFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TruncateTokenFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_TruncateTokenFilterFactory_init_(t_TruncateTokenFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            TruncateTokenFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = TruncateTokenFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_TruncateTokenFilterFactory_create(t_TruncateTokenFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(TruncateTokenFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/CheckIndex$Status$StoredFieldStatus.h"
#include "java/lang/Throwable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *CheckIndex$Status$StoredFieldStatus::class$ = NULL;
        jmethodID *CheckIndex$Status$StoredFieldStatus::mids$ = NULL;
        jfieldID *CheckIndex$Status$StoredFieldStatus::fids$ = NULL;
        bool CheckIndex$Status$StoredFieldStatus::live$ = false;

        jclass CheckIndex$Status$StoredFieldStatus::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/CheckIndex$Status$StoredFieldStatus");

            fids$ = new jfieldID[max_fid];
            fids$[fid_docCount] = env->getFieldID(cls, "docCount", "I");
            fids$[fid_error] = env->getFieldID(cls, "error", "Ljava/lang/Throwable;");
            fids$[fid_totFields] = env->getFieldID(cls, "totFields", "J");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jint CheckIndex$Status$StoredFieldStatus::_get_docCount() const
        {
          return env->getIntField(this$, fids$[fid_docCount]);
        }

        void CheckIndex$Status$StoredFieldStatus::_set_docCount(jint a0) const
        {
          env->setIntField(this$, fids$[fid_docCount], a0);
        }

        ::java::lang::Throwable CheckIndex$Status$StoredFieldStatus::_get_error() const
        {
          return ::java::lang::Throwable(env->getObjectField(this$, fids$[fid_error]));
        }

        void CheckIndex$Status$StoredFieldStatus::_set_error(const ::java::lang::Throwable & a0) const
        {
          env->setObjectField(this$, fids$[fid_error], a0.this$);
        }

        jlong CheckIndex$Status$StoredFieldStatus::_get_totFields() const
        {
          return env->getLongField(this$, fids$[fid_totFields]);
        }

        void CheckIndex$Status$StoredFieldStatus::_set_totFields(jlong a0) const
        {
          env->setLongField(this$, fids$[fid_totFields], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_CheckIndex$Status$StoredFieldStatus_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CheckIndex$Status$StoredFieldStatus_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CheckIndex$Status$StoredFieldStatus_get__docCount(t_CheckIndex$Status$StoredFieldStatus *self, void *data);
        static int t_CheckIndex$Status$StoredFieldStatus_set__docCount(t_CheckIndex$Status$StoredFieldStatus *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status$StoredFieldStatus_get__error(t_CheckIndex$Status$StoredFieldStatus *self, void *data);
        static int t_CheckIndex$Status$StoredFieldStatus_set__error(t_CheckIndex$Status$StoredFieldStatus *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status$StoredFieldStatus_get__totFields(t_CheckIndex$Status$StoredFieldStatus *self, void *data);
        static int t_CheckIndex$Status$StoredFieldStatus_set__totFields(t_CheckIndex$Status$StoredFieldStatus *self, PyObject *arg, void *data);

        static PyGetSetDef t_CheckIndex$Status$StoredFieldStatus__fields_[] = {
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$StoredFieldStatus, docCount),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$StoredFieldStatus, error),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$StoredFieldStatus, totFields),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_CheckIndex$Status$StoredFieldStatus__methods_[] = {
          DECLARE_METHOD(t_CheckIndex$Status$StoredFieldStatus, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CheckIndex$Status$StoredFieldStatus, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(CheckIndex$Status$StoredFieldStatus, t_CheckIndex$Status$StoredFieldStatus, ::java::lang::Object, CheckIndex$Status$StoredFieldStatus, abstract_init, 0, 0, t_CheckIndex$Status$StoredFieldStatus__fields_, 0, 0);

        void t_CheckIndex$Status$StoredFieldStatus::install(PyObject *module)
        {
          installType(&PY_TYPE(CheckIndex$Status$StoredFieldStatus), module, "CheckIndex$Status$StoredFieldStatus", 0);
        }

        void t_CheckIndex$Status$StoredFieldStatus::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(CheckIndex$Status$StoredFieldStatus).tp_dict, "class_", make_descriptor(CheckIndex$Status$StoredFieldStatus::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(CheckIndex$Status$StoredFieldStatus).tp_dict, "wrapfn_", make_descriptor(t_CheckIndex$Status$StoredFieldStatus::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(CheckIndex$Status$StoredFieldStatus).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_CheckIndex$Status$StoredFieldStatus_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CheckIndex$Status$StoredFieldStatus::initializeClass, 1)))
            return NULL;
          return t_CheckIndex$Status$StoredFieldStatus::wrap_Object(CheckIndex$Status$StoredFieldStatus(((t_CheckIndex$Status$StoredFieldStatus *) arg)->object.this$));
        }
        static PyObject *t_CheckIndex$Status$StoredFieldStatus_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CheckIndex$Status$StoredFieldStatus::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_CheckIndex$Status$StoredFieldStatus_get__docCount(t_CheckIndex$Status$StoredFieldStatus *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_docCount());
          return PyInt_FromLong((long) value);
        }
        static int t_CheckIndex$Status$StoredFieldStatus_set__docCount(t_CheckIndex$Status$StoredFieldStatus *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_docCount(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "docCount", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status$StoredFieldStatus_get__error(t_CheckIndex$Status$StoredFieldStatus *self, void *data)
        {
          ::java::lang::Throwable value((jobject) NULL);
          OBJ_CALL(value = self->object._get_error());
          return ::java::lang::t_Throwable::wrap_Object(value);
        }
        static int t_CheckIndex$Status$StoredFieldStatus_set__error(t_CheckIndex$Status$StoredFieldStatus *self, PyObject *arg, void *data)
        {
          ::java::lang::Throwable value((jobject) NULL);
          if (!parseArg(arg, "k", ::java::lang::Throwable::initializeClass, &value))
          {
            INT_CALL(self->object._set_error(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "error", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status$StoredFieldStatus_get__totFields(t_CheckIndex$Status$StoredFieldStatus *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object._get_totFields());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
        static int t_CheckIndex$Status$StoredFieldStatus_set__totFields(t_CheckIndex$Status$StoredFieldStatus *self, PyObject *arg, void *data)
        {
          jlong value;
          if (!parseArg(arg, "J", &value))
          {
            INT_CALL(self->object._set_totFields(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "totFields", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/AnyQueryNodeBuilder.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/StandardQueryBuilder.h"
#include "org/apache/lucene/search/BooleanQuery.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {

              ::java::lang::Class *AnyQueryNodeBuilder::class$ = NULL;
              jmethodID *AnyQueryNodeBuilder::mids$ = NULL;
              bool AnyQueryNodeBuilder::live$ = false;

              jclass AnyQueryNodeBuilder::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/builders/AnyQueryNodeBuilder");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_build_e1a6cc4e] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/search/BooleanQuery;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              AnyQueryNodeBuilder::AnyQueryNodeBuilder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              ::org::apache::lucene::search::BooleanQuery AnyQueryNodeBuilder::build(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                return ::org::apache::lucene::search::BooleanQuery(env->callObjectMethod(this$, mids$[mid_build_e1a6cc4e], a0.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {
              static PyObject *t_AnyQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_AnyQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg);
              static int t_AnyQueryNodeBuilder_init_(t_AnyQueryNodeBuilder *self, PyObject *args, PyObject *kwds);
              static PyObject *t_AnyQueryNodeBuilder_build(t_AnyQueryNodeBuilder *self, PyObject *arg);

              static PyMethodDef t_AnyQueryNodeBuilder__methods_[] = {
                DECLARE_METHOD(t_AnyQueryNodeBuilder, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_AnyQueryNodeBuilder, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_AnyQueryNodeBuilder, build, METH_O),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(AnyQueryNodeBuilder, t_AnyQueryNodeBuilder, ::java::lang::Object, AnyQueryNodeBuilder, t_AnyQueryNodeBuilder_init_, 0, 0, 0, 0, 0);

              void t_AnyQueryNodeBuilder::install(PyObject *module)
              {
                installType(&PY_TYPE(AnyQueryNodeBuilder), module, "AnyQueryNodeBuilder", 0);
              }

              void t_AnyQueryNodeBuilder::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(AnyQueryNodeBuilder).tp_dict, "class_", make_descriptor(AnyQueryNodeBuilder::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(AnyQueryNodeBuilder).tp_dict, "wrapfn_", make_descriptor(t_AnyQueryNodeBuilder::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(AnyQueryNodeBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_AnyQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, AnyQueryNodeBuilder::initializeClass, 1)))
                  return NULL;
                return t_AnyQueryNodeBuilder::wrap_Object(AnyQueryNodeBuilder(((t_AnyQueryNodeBuilder *) arg)->object.this$));
              }
              static PyObject *t_AnyQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, AnyQueryNodeBuilder::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_AnyQueryNodeBuilder_init_(t_AnyQueryNodeBuilder *self, PyObject *args, PyObject *kwds)
              {
                AnyQueryNodeBuilder object((jobject) NULL);

                INT_CALL(object = AnyQueryNodeBuilder());
                self->object = object;

                return 0;
              }

              static PyObject *t_AnyQueryNodeBuilder_build(t_AnyQueryNodeBuilder *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::search::BooleanQuery result((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.build(a0));
                  return ::org::apache::lucene::search::t_BooleanQuery::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "build", arg);
                return NULL;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/lang/System.h"
#include "java/io/Console.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/lang/SecurityManager.h"
#include "java/io/PrintStream.h"
#include "java/util/Properties.h"
#include "java/io/InputStream.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace java {
  namespace lang {

    ::java::lang::Class *System::class$ = NULL;
    jmethodID *System::mids$ = NULL;
    bool System::live$ = false;
    ::java::io::PrintStream *System::err = NULL;
    ::java::io::InputStream *System::in = NULL;
    ::java::io::PrintStream *System::out = NULL;

    jclass System::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/lang/System");

        mids$ = new jmethodID[max_mid];
        mids$[mid_arraycopy_8bcf5170] = env->getStaticMethodID(cls, "arraycopy", "(Ljava/lang/Object;ILjava/lang/Object;II)V");
        mids$[mid_clearProperty_97a5258f] = env->getStaticMethodID(cls, "clearProperty", "(Ljava/lang/String;)Ljava/lang/String;");
        mids$[mid_console_d6171648] = env->getStaticMethodID(cls, "console", "()Ljava/io/Console;");
        mids$[mid_currentTimeMillis_54c6a17a] = env->getStaticMethodID(cls, "currentTimeMillis", "()J");
        mids$[mid_exit_39c7bd3c] = env->getStaticMethodID(cls, "exit", "(I)V");
        mids$[mid_gc_54c6a166] = env->getStaticMethodID(cls, "gc", "()V");
        mids$[mid_getProperties_7e96414d] = env->getStaticMethodID(cls, "getProperties", "()Ljava/util/Properties;");
        mids$[mid_getProperty_97a5258f] = env->getStaticMethodID(cls, "getProperty", "(Ljava/lang/String;)Ljava/lang/String;");
        mids$[mid_getProperty_aacea7e9] = env->getStaticMethodID(cls, "getProperty", "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;");
        mids$[mid_getSecurityManager_0361f9be] = env->getStaticMethodID(cls, "getSecurityManager", "()Ljava/lang/SecurityManager;");
        mids$[mid_getenv_db60befd] = env->getStaticMethodID(cls, "getenv", "()Ljava/util/Map;");
        mids$[mid_getenv_97a5258f] = env->getStaticMethodID(cls, "getenv", "(Ljava/lang/String;)Ljava/lang/String;");
        mids$[mid_identityHashCode_290588f1] = env->getStaticMethodID(cls, "identityHashCode", "(Ljava/lang/Object;)I");
        mids$[mid_lineSeparator_14c7b5c5] = env->getStaticMethodID(cls, "lineSeparator", "()Ljava/lang/String;");
        mids$[mid_load_5fdc3f48] = env->getStaticMethodID(cls, "load", "(Ljava/lang/String;)V");
        mids$[mid_loadLibrary_5fdc3f48] = env->getStaticMethodID(cls, "loadLibrary", "(Ljava/lang/String;)V");
        mids$[mid_mapLibraryName_97a5258f] = env->getStaticMethodID(cls, "mapLibraryName", "(Ljava/lang/String;)Ljava/lang/String;");
        mids$[mid_nanoTime_54c6a17a] = env->getStaticMethodID(cls, "nanoTime", "()J");
        mids$[mid_runFinalization_54c6a166] = env->getStaticMethodID(cls, "runFinalization", "()V");
        mids$[mid_runFinalizersOnExit_bb0c767f] = env->getStaticMethodID(cls, "runFinalizersOnExit", "(Z)V");
        mids$[mid_setErr_1b7c898b] = env->getStaticMethodID(cls, "setErr", "(Ljava/io/PrintStream;)V");
        mids$[mid_setIn_be2e4f90] = env->getStaticMethodID(cls, "setIn", "(Ljava/io/InputStream;)V");
        mids$[mid_setOut_1b7c898b] = env->getStaticMethodID(cls, "setOut", "(Ljava/io/PrintStream;)V");
        mids$[mid_setProperties_c4afb15c] = env->getStaticMethodID(cls, "setProperties", "(Ljava/util/Properties;)V");
        mids$[mid_setProperty_aacea7e9] = env->getStaticMethodID(cls, "setProperty", "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;");
        mids$[mid_setSecurityManager_c35b0b0b] = env->getStaticMethodID(cls, "setSecurityManager", "(Ljava/lang/SecurityManager;)V");

        class$ = (::java::lang::Class *) new JObject(cls);
        cls = (jclass) class$->this$;

        err = new ::java::io::PrintStream(env->getStaticObjectField(cls, "err", "Ljava/io/PrintStream;"));
        in = new ::java::io::InputStream(env->getStaticObjectField(cls, "in", "Ljava/io/InputStream;"));
        out = new ::java::io::PrintStream(env->getStaticObjectField(cls, "out", "Ljava/io/PrintStream;"));
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    void System::arraycopy(const ::java::lang::Object & a0, jint a1, const ::java::lang::Object & a2, jint a3, jint a4)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_arraycopy_8bcf5170], a0.this$, a1, a2.this$, a3, a4);
    }

    ::java::lang::String System::clearProperty(const ::java::lang::String & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_clearProperty_97a5258f], a0.this$));
    }

    ::java::io::Console System::console()
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::io::Console(env->callStaticObjectMethod(cls, mids$[mid_console_d6171648]));
    }

    jlong System::currentTimeMillis()
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticLongMethod(cls, mids$[mid_currentTimeMillis_54c6a17a]);
    }

    void System::exit(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_exit_39c7bd3c], a0);
    }

    void System::gc()
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_gc_54c6a166]);
    }

    ::java::util::Properties System::getProperties()
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::Properties(env->callStaticObjectMethod(cls, mids$[mid_getProperties_7e96414d]));
    }

    ::java::lang::String System::getProperty(const ::java::lang::String & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_getProperty_97a5258f], a0.this$));
    }

    ::java::lang::String System::getProperty(const ::java::lang::String & a0, const ::java::lang::String & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_getProperty_aacea7e9], a0.this$, a1.this$));
    }

    ::java::lang::SecurityManager System::getSecurityManager()
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::SecurityManager(env->callStaticObjectMethod(cls, mids$[mid_getSecurityManager_0361f9be]));
    }

    ::java::util::Map System::getenv()
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::Map(env->callStaticObjectMethod(cls, mids$[mid_getenv_db60befd]));
    }

    ::java::lang::String System::getenv(const ::java::lang::String & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_getenv_97a5258f], a0.this$));
    }

    jint System::identityHashCode(const ::java::lang::Object & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_identityHashCode_290588f1], a0.this$);
    }

    ::java::lang::String System::lineSeparator()
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_lineSeparator_14c7b5c5]));
    }

    void System::load(const ::java::lang::String & a0)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_load_5fdc3f48], a0.this$);
    }

    void System::loadLibrary(const ::java::lang::String & a0)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_loadLibrary_5fdc3f48], a0.this$);
    }

    ::java::lang::String System::mapLibraryName(const ::java::lang::String & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_mapLibraryName_97a5258f], a0.this$));
    }

    jlong System::nanoTime()
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticLongMethod(cls, mids$[mid_nanoTime_54c6a17a]);
    }

    void System::runFinalization()
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_runFinalization_54c6a166]);
    }

    void System::runFinalizersOnExit(jboolean a0)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_runFinalizersOnExit_bb0c767f], a0);
    }

    void System::setErr(const ::java::io::PrintStream & a0)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_setErr_1b7c898b], a0.this$);
    }

    void System::setIn(const ::java::io::InputStream & a0)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_setIn_be2e4f90], a0.this$);
    }

    void System::setOut(const ::java::io::PrintStream & a0)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_setOut_1b7c898b], a0.this$);
    }

    void System::setProperties(const ::java::util::Properties & a0)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_setProperties_c4afb15c], a0.this$);
    }

    ::java::lang::String System::setProperty(const ::java::lang::String & a0, const ::java::lang::String & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_setProperty_aacea7e9], a0.this$, a1.this$));
    }

    void System::setSecurityManager(const ::java::lang::SecurityManager & a0)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_setSecurityManager_c35b0b0b], a0.this$);
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace lang {
    static PyObject *t_System_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_System_instance_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_System_arraycopy(PyTypeObject *type, PyObject *args);
    static PyObject *t_System_clearProperty(PyTypeObject *type, PyObject *arg);
    static PyObject *t_System_console(PyTypeObject *type);
    static PyObject *t_System_currentTimeMillis(PyTypeObject *type);
    static PyObject *t_System_exit(PyTypeObject *type, PyObject *arg);
    static PyObject *t_System_gc(PyTypeObject *type);
    static PyObject *t_System_getProperties(PyTypeObject *type);
    static PyObject *t_System_getProperty(PyTypeObject *type, PyObject *args);
    static PyObject *t_System_getSecurityManager(PyTypeObject *type);
    static PyObject *t_System_getenv(PyTypeObject *type, PyObject *args);
    static PyObject *t_System_identityHashCode(PyTypeObject *type, PyObject *arg);
    static PyObject *t_System_lineSeparator(PyTypeObject *type);
    static PyObject *t_System_load(PyTypeObject *type, PyObject *arg);
    static PyObject *t_System_loadLibrary(PyTypeObject *type, PyObject *arg);
    static PyObject *t_System_mapLibraryName(PyTypeObject *type, PyObject *arg);
    static PyObject *t_System_nanoTime(PyTypeObject *type);
    static PyObject *t_System_runFinalization(PyTypeObject *type);
    static PyObject *t_System_runFinalizersOnExit(PyTypeObject *type, PyObject *arg);
    static PyObject *t_System_setErr(PyTypeObject *type, PyObject *arg);
    static PyObject *t_System_setIn(PyTypeObject *type, PyObject *arg);
    static PyObject *t_System_setOut(PyTypeObject *type, PyObject *arg);
    static PyObject *t_System_setProperties(PyTypeObject *type, PyObject *arg);
    static PyObject *t_System_setProperty(PyTypeObject *type, PyObject *args);
    static PyObject *t_System_setSecurityManager(PyTypeObject *type, PyObject *arg);
    static PyObject *t_System_get__env(t_System *self, void *data);
    static int t_System_set__err(t_System *self, PyObject *arg, void *data);
    static int t_System_set__in(t_System *self, PyObject *arg, void *data);
    static int t_System_set__out(t_System *self, PyObject *arg, void *data);
    static PyObject *t_System_get__properties(t_System *self, void *data);
    static int t_System_set__properties(t_System *self, PyObject *arg, void *data);
    static PyObject *t_System_get__securityManager(t_System *self, void *data);
    static int t_System_set__securityManager(t_System *self, PyObject *arg, void *data);
    static PyGetSetDef t_System__fields_[] = {
      DECLARE_GET_FIELD(t_System, env),
      DECLARE_SET_FIELD(t_System, err),
      DECLARE_SET_FIELD(t_System, in),
      DECLARE_SET_FIELD(t_System, out),
      DECLARE_GETSET_FIELD(t_System, properties),
      DECLARE_GETSET_FIELD(t_System, securityManager),
      { NULL, NULL, NULL, NULL, NULL }
    };

    static PyMethodDef t_System__methods_[] = {
      DECLARE_METHOD(t_System, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_System, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_System, arraycopy, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_System, clearProperty, METH_O | METH_CLASS),
      DECLARE_METHOD(t_System, console, METH_NOARGS | METH_CLASS),
      DECLARE_METHOD(t_System, currentTimeMillis, METH_NOARGS | METH_CLASS),
      DECLARE_METHOD(t_System, exit, METH_O | METH_CLASS),
      DECLARE_METHOD(t_System, gc, METH_NOARGS | METH_CLASS),
      DECLARE_METHOD(t_System, getProperties, METH_NOARGS | METH_CLASS),
      DECLARE_METHOD(t_System, getProperty, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_System, getSecurityManager, METH_NOARGS | METH_CLASS),
      DECLARE_METHOD(t_System, getenv, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_System, identityHashCode, METH_O | METH_CLASS),
      DECLARE_METHOD(t_System, lineSeparator, METH_NOARGS | METH_CLASS),
      DECLARE_METHOD(t_System, load, METH_O | METH_CLASS),
      DECLARE_METHOD(t_System, loadLibrary, METH_O | METH_CLASS),
      DECLARE_METHOD(t_System, mapLibraryName, METH_O | METH_CLASS),
      DECLARE_METHOD(t_System, nanoTime, METH_NOARGS | METH_CLASS),
      DECLARE_METHOD(t_System, runFinalization, METH_NOARGS | METH_CLASS),
      DECLARE_METHOD(t_System, runFinalizersOnExit, METH_O | METH_CLASS),
      DECLARE_METHOD(t_System, setErr, METH_O | METH_CLASS),
      DECLARE_METHOD(t_System, setIn, METH_O | METH_CLASS),
      DECLARE_METHOD(t_System, setOut, METH_O | METH_CLASS),
      DECLARE_METHOD(t_System, setProperties, METH_O | METH_CLASS),
      DECLARE_METHOD(t_System, setProperty, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_System, setSecurityManager, METH_O | METH_CLASS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(System, t_System, ::java::lang::Object, System, abstract_init, 0, 0, t_System__fields_, 0, 0);

    void t_System::install(PyObject *module)
    {
      installType(&PY_TYPE(System), module, "System", 0);
    }

    void t_System::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(System).tp_dict, "class_", make_descriptor(System::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(System).tp_dict, "wrapfn_", make_descriptor(t_System::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(System).tp_dict, "boxfn_", make_descriptor(boxObject));
      env->getClass(System::initializeClass);
      PyDict_SetItemString(PY_TYPE(System).tp_dict, "err", make_descriptor(::java::io::t_PrintStream::wrap_Object(*System::err)));
      PyDict_SetItemString(PY_TYPE(System).tp_dict, "in", make_descriptor(::java::io::t_InputStream::wrap_Object(*System::in)));
      PyDict_SetItemString(PY_TYPE(System).tp_dict, "out", make_descriptor(::java::io::t_PrintStream::wrap_Object(*System::out)));
    }

    static PyObject *t_System_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, System::initializeClass, 1)))
        return NULL;
      return t_System::wrap_Object(System(((t_System *) arg)->object.this$));
    }
    static PyObject *t_System_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, System::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static PyObject *t_System_arraycopy(PyTypeObject *type, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      jint a1;
      ::java::lang::Object a2((jobject) NULL);
      jint a3;
      jint a4;

      if (!parseArgs(args, "oIoII", &a0, &a1, &a2, &a3, &a4))
      {
        OBJ_CALL(::java::lang::System::arraycopy(a0, a1, a2, a3, a4));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError(type, "arraycopy", args);
      return NULL;
    }

    static PyObject *t_System_clearProperty(PyTypeObject *type, PyObject *arg)
    {
      ::java::lang::String a0((jobject) NULL);
      ::java::lang::String result((jobject) NULL);

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(result = ::java::lang::System::clearProperty(a0));
        return j2p(result);
      }

      PyErr_SetArgsError(type, "clearProperty", arg);
      return NULL;
    }

    static PyObject *t_System_console(PyTypeObject *type)
    {
      ::java::io::Console result((jobject) NULL);
      OBJ_CALL(result = ::java::lang::System::console());
      return ::java::io::t_Console::wrap_Object(result);
    }

    static PyObject *t_System_currentTimeMillis(PyTypeObject *type)
    {
      jlong result;
      OBJ_CALL(result = ::java::lang::System::currentTimeMillis());
      return PyLong_FromLongLong((PY_LONG_LONG) result);
    }

    static PyObject *t_System_exit(PyTypeObject *type, PyObject *arg)
    {
      jint a0;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(::java::lang::System::exit(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError(type, "exit", arg);
      return NULL;
    }

    static PyObject *t_System_gc(PyTypeObject *type)
    {
      OBJ_CALL(::java::lang::System::gc());
      Py_RETURN_NONE;
    }

    static PyObject *t_System_getProperties(PyTypeObject *type)
    {
      ::java::util::Properties result((jobject) NULL);
      OBJ_CALL(result = ::java::lang::System::getProperties());
      return ::java::util::t_Properties::wrap_Object(result);
    }

    static PyObject *t_System_getProperty(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::java::lang::System::getProperty(a0));
            return j2p(result);
          }
        }
        break;
       case 2:
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "ss", &a0, &a1))
          {
            OBJ_CALL(result = ::java::lang::System::getProperty(a0, a1));
            return j2p(result);
          }
        }
      }

      PyErr_SetArgsError(type, "getProperty", args);
      return NULL;
    }

    static PyObject *t_System_getSecurityManager(PyTypeObject *type)
    {
      ::java::lang::SecurityManager result((jobject) NULL);
      OBJ_CALL(result = ::java::lang::System::getSecurityManager());
      return ::java::lang::t_SecurityManager::wrap_Object(result);
    }

    static PyObject *t_System_getenv(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          ::java::util::Map result((jobject) NULL);
          OBJ_CALL(result = ::java::lang::System::getenv());
          return ::java::util::t_Map::wrap_Object(result, &::java::lang::PY_TYPE(String), &::java::lang::PY_TYPE(String));
        }
        break;
       case 1:
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::java::lang::System::getenv(a0));
            return j2p(result);
          }
        }
      }

      PyErr_SetArgsError(type, "getenv", args);
      return NULL;
    }

    static PyObject *t_System_identityHashCode(PyTypeObject *type, PyObject *arg)
    {
      ::java::lang::Object a0((jobject) NULL);
      jint result;

      if (!parseArg(arg, "o", &a0))
      {
        OBJ_CALL(result = ::java::lang::System::identityHashCode(a0));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "identityHashCode", arg);
      return NULL;
    }

    static PyObject *t_System_lineSeparator(PyTypeObject *type)
    {
      ::java::lang::String result((jobject) NULL);
      OBJ_CALL(result = ::java::lang::System::lineSeparator());
      return j2p(result);
    }

    static PyObject *t_System_load(PyTypeObject *type, PyObject *arg)
    {
      ::java::lang::String a0((jobject) NULL);

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(::java::lang::System::load(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError(type, "load", arg);
      return NULL;
    }

    static PyObject *t_System_loadLibrary(PyTypeObject *type, PyObject *arg)
    {
      ::java::lang::String a0((jobject) NULL);

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(::java::lang::System::loadLibrary(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError(type, "loadLibrary", arg);
      return NULL;
    }

    static PyObject *t_System_mapLibraryName(PyTypeObject *type, PyObject *arg)
    {
      ::java::lang::String a0((jobject) NULL);
      ::java::lang::String result((jobject) NULL);

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(result = ::java::lang::System::mapLibraryName(a0));
        return j2p(result);
      }

      PyErr_SetArgsError(type, "mapLibraryName", arg);
      return NULL;
    }

    static PyObject *t_System_nanoTime(PyTypeObject *type)
    {
      jlong result;
      OBJ_CALL(result = ::java::lang::System::nanoTime());
      return PyLong_FromLongLong((PY_LONG_LONG) result);
    }

    static PyObject *t_System_runFinalization(PyTypeObject *type)
    {
      OBJ_CALL(::java::lang::System::runFinalization());
      Py_RETURN_NONE;
    }

    static PyObject *t_System_runFinalizersOnExit(PyTypeObject *type, PyObject *arg)
    {
      jboolean a0;

      if (!parseArg(arg, "Z", &a0))
      {
        OBJ_CALL(::java::lang::System::runFinalizersOnExit(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError(type, "runFinalizersOnExit", arg);
      return NULL;
    }

    static PyObject *t_System_setErr(PyTypeObject *type, PyObject *arg)
    {
      ::java::io::PrintStream a0((jobject) NULL);

      if (!parseArg(arg, "k", ::java::io::PrintStream::initializeClass, &a0))
      {
        OBJ_CALL(::java::lang::System::setErr(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError(type, "setErr", arg);
      return NULL;
    }

    static PyObject *t_System_setIn(PyTypeObject *type, PyObject *arg)
    {
      ::java::io::InputStream a0((jobject) NULL);

      if (!parseArg(arg, "k", ::java::io::InputStream::initializeClass, &a0))
      {
        OBJ_CALL(::java::lang::System::setIn(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError(type, "setIn", arg);
      return NULL;
    }

    static PyObject *t_System_setOut(PyTypeObject *type, PyObject *arg)
    {
      ::java::io::PrintStream a0((jobject) NULL);

      if (!parseArg(arg, "k", ::java::io::PrintStream::initializeClass, &a0))
      {
        OBJ_CALL(::java::lang::System::setOut(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError(type, "setOut", arg);
      return NULL;
    }

    static PyObject *t_System_setProperties(PyTypeObject *type, PyObject *arg)
    {
      ::java::util::Properties a0((jobject) NULL);
      PyTypeObject **p0;

      if (!parseArg(arg, "K", ::java::util::Properties::initializeClass, &a0, &p0, ::java::util::t_Properties::parameters_))
      {
        OBJ_CALL(::java::lang::System::setProperties(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError(type, "setProperties", arg);
      return NULL;
    }

    static PyObject *t_System_setProperty(PyTypeObject *type, PyObject *args)
    {
      ::java::lang::String a0((jobject) NULL);
      ::java::lang::String a1((jobject) NULL);
      ::java::lang::String result((jobject) NULL);

      if (!parseArgs(args, "ss", &a0, &a1))
      {
        OBJ_CALL(result = ::java::lang::System::setProperty(a0, a1));
        return j2p(result);
      }

      PyErr_SetArgsError(type, "setProperty", args);
      return NULL;
    }

    static PyObject *t_System_setSecurityManager(PyTypeObject *type, PyObject *arg)
    {
      ::java::lang::SecurityManager a0((jobject) NULL);

      if (!parseArg(arg, "k", ::java::lang::SecurityManager::initializeClass, &a0))
      {
        OBJ_CALL(::java::lang::System::setSecurityManager(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError(type, "setSecurityManager", arg);
      return NULL;
    }

    static PyObject *t_System_get__env(t_System *self, void *data)
    {
      ::java::util::Map value((jobject) NULL);
      OBJ_CALL(value = self->object.getenv());
      return ::java::util::t_Map::wrap_Object(value);
    }

    static int t_System_set__err(t_System *self, PyObject *arg, void *data)
    {
      {
        ::java::io::PrintStream value((jobject) NULL);
        if (!parseArg(arg, "k", ::java::io::PrintStream::initializeClass, &value))
        {
          INT_CALL(self->object.setErr(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "err", arg);
      return -1;
    }

    static int t_System_set__in(t_System *self, PyObject *arg, void *data)
    {
      {
        ::java::io::InputStream value((jobject) NULL);
        if (!parseArg(arg, "k", ::java::io::InputStream::initializeClass, &value))
        {
          INT_CALL(self->object.setIn(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "in", arg);
      return -1;
    }

    static int t_System_set__out(t_System *self, PyObject *arg, void *data)
    {
      {
        ::java::io::PrintStream value((jobject) NULL);
        if (!parseArg(arg, "k", ::java::io::PrintStream::initializeClass, &value))
        {
          INT_CALL(self->object.setOut(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "out", arg);
      return -1;
    }

    static PyObject *t_System_get__properties(t_System *self, void *data)
    {
      ::java::util::Properties value((jobject) NULL);
      OBJ_CALL(value = self->object.getProperties());
      return ::java::util::t_Properties::wrap_Object(value);
    }
    static int t_System_set__properties(t_System *self, PyObject *arg, void *data)
    {
      {
        ::java::util::Properties value((jobject) NULL);
        if (!parseArg(arg, "k", ::java::util::Properties::initializeClass, &value))
        {
          INT_CALL(self->object.setProperties(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "properties", arg);
      return -1;
    }

    static PyObject *t_System_get__securityManager(t_System *self, void *data)
    {
      ::java::lang::SecurityManager value((jobject) NULL);
      OBJ_CALL(value = self->object.getSecurityManager());
      return ::java::lang::t_SecurityManager::wrap_Object(value);
    }
    static int t_System_set__securityManager(t_System *self, PyObject *arg, void *data)
    {
      {
        ::java::lang::SecurityManager value((jobject) NULL);
        if (!parseArg(arg, "k", ::java::lang::SecurityManager::initializeClass, &value))
        {
          INT_CALL(self->object.setSecurityManager(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "securityManager", arg);
      return -1;
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/ext/Extensions$Pair.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace ext {

          ::java::lang::Class *Extensions$Pair::class$ = NULL;
          jmethodID *Extensions$Pair::mids$ = NULL;
          jfieldID *Extensions$Pair::fids$ = NULL;
          bool Extensions$Pair::live$ = false;

          jclass Extensions$Pair::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/ext/Extensions$Pair");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_466982f2] = env->getMethodID(cls, "<init>", "(Ljava/lang/Object;Ljava/lang/Object;)V");

              fids$ = new jfieldID[max_fid];
              fids$[fid_cud] = env->getFieldID(cls, "cud", "Ljava/lang/Object;");
              fids$[fid_cur] = env->getFieldID(cls, "cur", "Ljava/lang/Object;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Extensions$Pair::Extensions$Pair(const ::java::lang::Object & a0, const ::java::lang::Object & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_466982f2, a0.this$, a1.this$)) {}

          ::java::lang::Object Extensions$Pair::_get_cud() const
          {
            return ::java::lang::Object(env->getObjectField(this$, fids$[fid_cud]));
          }

          ::java::lang::Object Extensions$Pair::_get_cur() const
          {
            return ::java::lang::Object(env->getObjectField(this$, fids$[fid_cur]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace ext {
          static PyObject *t_Extensions$Pair_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Extensions$Pair_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Extensions$Pair_of_(t_Extensions$Pair *self, PyObject *args);
          static int t_Extensions$Pair_init_(t_Extensions$Pair *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Extensions$Pair_get__cud(t_Extensions$Pair *self, void *data);
          static PyObject *t_Extensions$Pair_get__cur(t_Extensions$Pair *self, void *data);

          static PyObject *t_Extensions$Pair_get__parameters_(t_Extensions$Pair *self, void *data);
          static PyGetSetDef t_Extensions$Pair__fields_[] = {
            DECLARE_GET_FIELD(t_Extensions$Pair, cud),
            DECLARE_GET_FIELD(t_Extensions$Pair, cur),
            DECLARE_GET_FIELD(t_Extensions$Pair, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Extensions$Pair__methods_[] = {
            DECLARE_METHOD(t_Extensions$Pair, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Extensions$Pair, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Extensions$Pair, of_, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Extensions$Pair, t_Extensions$Pair, ::java::lang::Object, Extensions$Pair, t_Extensions$Pair_init_, 0, 0, t_Extensions$Pair__fields_, 0, 0);
          PyObject *t_Extensions$Pair::wrap_Object(const Extensions$Pair& object, PyTypeObject *p0, PyTypeObject *p1)
          {
            PyObject *obj = t_Extensions$Pair::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_Extensions$Pair *self = (t_Extensions$Pair *) obj;
              self->parameters[0] = p0;
              self->parameters[1] = p1;
            }
            return obj;
          }

          PyObject *t_Extensions$Pair::wrap_jobject(const jobject& object, PyTypeObject *p0, PyTypeObject *p1)
          {
            PyObject *obj = t_Extensions$Pair::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_Extensions$Pair *self = (t_Extensions$Pair *) obj;
              self->parameters[0] = p0;
              self->parameters[1] = p1;
            }
            return obj;
          }

          void t_Extensions$Pair::install(PyObject *module)
          {
            installType(&PY_TYPE(Extensions$Pair), module, "Extensions$Pair", 0);
          }

          void t_Extensions$Pair::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Extensions$Pair).tp_dict, "class_", make_descriptor(Extensions$Pair::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Extensions$Pair).tp_dict, "wrapfn_", make_descriptor(t_Extensions$Pair::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Extensions$Pair).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Extensions$Pair_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Extensions$Pair::initializeClass, 1)))
              return NULL;
            return t_Extensions$Pair::wrap_Object(Extensions$Pair(((t_Extensions$Pair *) arg)->object.this$));
          }
          static PyObject *t_Extensions$Pair_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Extensions$Pair::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_Extensions$Pair_of_(t_Extensions$Pair *self, PyObject *args)
          {
            if (!parseArg(args, "T", 2, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_Extensions$Pair_init_(t_Extensions$Pair *self, PyObject *args, PyObject *kwds)
          {
            ::java::lang::Object a0((jobject) NULL);
            ::java::lang::Object a1((jobject) NULL);
            Extensions$Pair object((jobject) NULL);

            if (!parseArgs(args, "oo", &a0, &a1))
            {
              INT_CALL(object = Extensions$Pair(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
          static PyObject *t_Extensions$Pair_get__parameters_(t_Extensions$Pair *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_Extensions$Pair_get__cud(t_Extensions$Pair *self, void *data)
          {
            ::java::lang::Object value((jobject) NULL);
            OBJ_CALL(value = self->object._get_cud());
            return ::java::lang::t_Object::wrap_Object(value);
          }

          static PyObject *t_Extensions$Pair_get__cur(t_Extensions$Pair *self, void *data)
          {
            ::java::lang::Object value((jobject) NULL);
            OBJ_CALL(value = self->object._get_cur());
            return ::java::lang::t_Object::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/CheckIndex$Status.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/index/CheckIndex$Status$SegmentInfoStatus.h"
#include "java/util/List.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *CheckIndex$Status::class$ = NULL;
        jmethodID *CheckIndex$Status::mids$ = NULL;
        jfieldID *CheckIndex$Status::fids$ = NULL;
        bool CheckIndex$Status::live$ = false;

        jclass CheckIndex$Status::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/CheckIndex$Status");

            fids$ = new jfieldID[max_fid];
            fids$[fid_cantOpenSegments] = env->getFieldID(cls, "cantOpenSegments", "Z");
            fids$[fid_clean] = env->getFieldID(cls, "clean", "Z");
            fids$[fid_dir] = env->getFieldID(cls, "dir", "Lorg/apache/lucene/store/Directory;");
            fids$[fid_maxSegmentName] = env->getFieldID(cls, "maxSegmentName", "I");
            fids$[fid_missingSegmentVersion] = env->getFieldID(cls, "missingSegmentVersion", "Z");
            fids$[fid_missingSegments] = env->getFieldID(cls, "missingSegments", "Z");
            fids$[fid_numBadSegments] = env->getFieldID(cls, "numBadSegments", "I");
            fids$[fid_numSegments] = env->getFieldID(cls, "numSegments", "I");
            fids$[fid_partial] = env->getFieldID(cls, "partial", "Z");
            fids$[fid_segmentInfos] = env->getFieldID(cls, "segmentInfos", "Ljava/util/List;");
            fids$[fid_segmentsChecked] = env->getFieldID(cls, "segmentsChecked", "Ljava/util/List;");
            fids$[fid_segmentsFileName] = env->getFieldID(cls, "segmentsFileName", "Ljava/lang/String;");
            fids$[fid_toolOutOfDate] = env->getFieldID(cls, "toolOutOfDate", "Z");
            fids$[fid_totLoseDocCount] = env->getFieldID(cls, "totLoseDocCount", "I");
            fids$[fid_userData] = env->getFieldID(cls, "userData", "Ljava/util/Map;");
            fids$[fid_validCounter] = env->getFieldID(cls, "validCounter", "Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jboolean CheckIndex$Status::_get_cantOpenSegments() const
        {
          return env->getBooleanField(this$, fids$[fid_cantOpenSegments]);
        }

        void CheckIndex$Status::_set_cantOpenSegments(jboolean a0) const
        {
          env->setBooleanField(this$, fids$[fid_cantOpenSegments], a0);
        }

        jboolean CheckIndex$Status::_get_clean() const
        {
          return env->getBooleanField(this$, fids$[fid_clean]);
        }

        void CheckIndex$Status::_set_clean(jboolean a0) const
        {
          env->setBooleanField(this$, fids$[fid_clean], a0);
        }

        ::org::apache::lucene::store::Directory CheckIndex$Status::_get_dir() const
        {
          return ::org::apache::lucene::store::Directory(env->getObjectField(this$, fids$[fid_dir]));
        }

        void CheckIndex$Status::_set_dir(const ::org::apache::lucene::store::Directory & a0) const
        {
          env->setObjectField(this$, fids$[fid_dir], a0.this$);
        }

        jint CheckIndex$Status::_get_maxSegmentName() const
        {
          return env->getIntField(this$, fids$[fid_maxSegmentName]);
        }

        void CheckIndex$Status::_set_maxSegmentName(jint a0) const
        {
          env->setIntField(this$, fids$[fid_maxSegmentName], a0);
        }

        jboolean CheckIndex$Status::_get_missingSegmentVersion() const
        {
          return env->getBooleanField(this$, fids$[fid_missingSegmentVersion]);
        }

        void CheckIndex$Status::_set_missingSegmentVersion(jboolean a0) const
        {
          env->setBooleanField(this$, fids$[fid_missingSegmentVersion], a0);
        }

        jboolean CheckIndex$Status::_get_missingSegments() const
        {
          return env->getBooleanField(this$, fids$[fid_missingSegments]);
        }

        void CheckIndex$Status::_set_missingSegments(jboolean a0) const
        {
          env->setBooleanField(this$, fids$[fid_missingSegments], a0);
        }

        jint CheckIndex$Status::_get_numBadSegments() const
        {
          return env->getIntField(this$, fids$[fid_numBadSegments]);
        }

        void CheckIndex$Status::_set_numBadSegments(jint a0) const
        {
          env->setIntField(this$, fids$[fid_numBadSegments], a0);
        }

        jint CheckIndex$Status::_get_numSegments() const
        {
          return env->getIntField(this$, fids$[fid_numSegments]);
        }

        void CheckIndex$Status::_set_numSegments(jint a0) const
        {
          env->setIntField(this$, fids$[fid_numSegments], a0);
        }

        jboolean CheckIndex$Status::_get_partial() const
        {
          return env->getBooleanField(this$, fids$[fid_partial]);
        }

        void CheckIndex$Status::_set_partial(jboolean a0) const
        {
          env->setBooleanField(this$, fids$[fid_partial], a0);
        }

        ::java::util::List CheckIndex$Status::_get_segmentInfos() const
        {
          return ::java::util::List(env->getObjectField(this$, fids$[fid_segmentInfos]));
        }

        void CheckIndex$Status::_set_segmentInfos(const ::java::util::List & a0) const
        {
          env->setObjectField(this$, fids$[fid_segmentInfos], a0.this$);
        }

        ::java::util::List CheckIndex$Status::_get_segmentsChecked() const
        {
          return ::java::util::List(env->getObjectField(this$, fids$[fid_segmentsChecked]));
        }

        void CheckIndex$Status::_set_segmentsChecked(const ::java::util::List & a0) const
        {
          env->setObjectField(this$, fids$[fid_segmentsChecked], a0.this$);
        }

        ::java::lang::String CheckIndex$Status::_get_segmentsFileName() const
        {
          return ::java::lang::String(env->getObjectField(this$, fids$[fid_segmentsFileName]));
        }

        void CheckIndex$Status::_set_segmentsFileName(const ::java::lang::String & a0) const
        {
          env->setObjectField(this$, fids$[fid_segmentsFileName], a0.this$);
        }

        jboolean CheckIndex$Status::_get_toolOutOfDate() const
        {
          return env->getBooleanField(this$, fids$[fid_toolOutOfDate]);
        }

        void CheckIndex$Status::_set_toolOutOfDate(jboolean a0) const
        {
          env->setBooleanField(this$, fids$[fid_toolOutOfDate], a0);
        }

        jint CheckIndex$Status::_get_totLoseDocCount() const
        {
          return env->getIntField(this$, fids$[fid_totLoseDocCount]);
        }

        void CheckIndex$Status::_set_totLoseDocCount(jint a0) const
        {
          env->setIntField(this$, fids$[fid_totLoseDocCount], a0);
        }

        ::java::util::Map CheckIndex$Status::_get_userData() const
        {
          return ::java::util::Map(env->getObjectField(this$, fids$[fid_userData]));
        }

        void CheckIndex$Status::_set_userData(const ::java::util::Map & a0) const
        {
          env->setObjectField(this$, fids$[fid_userData], a0.this$);
        }

        jboolean CheckIndex$Status::_get_validCounter() const
        {
          return env->getBooleanField(this$, fids$[fid_validCounter]);
        }

        void CheckIndex$Status::_set_validCounter(jboolean a0) const
        {
          env->setBooleanField(this$, fids$[fid_validCounter], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/index/CheckIndex$Status$DocValuesStatus.h"
#include "org/apache/lucene/index/CheckIndex$Status$TermVectorStatus.h"
#include "org/apache/lucene/index/CheckIndex$Status$StoredFieldStatus.h"
#include "org/apache/lucene/index/CheckIndex$Status$TermIndexStatus.h"
#include "org/apache/lucene/index/CheckIndex$Status$FieldNormStatus.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_CheckIndex$Status_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CheckIndex$Status_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CheckIndex$Status_get__cantOpenSegments(t_CheckIndex$Status *self, void *data);
        static int t_CheckIndex$Status_set__cantOpenSegments(t_CheckIndex$Status *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status_get__clean(t_CheckIndex$Status *self, void *data);
        static int t_CheckIndex$Status_set__clean(t_CheckIndex$Status *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status_get__dir(t_CheckIndex$Status *self, void *data);
        static int t_CheckIndex$Status_set__dir(t_CheckIndex$Status *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status_get__maxSegmentName(t_CheckIndex$Status *self, void *data);
        static int t_CheckIndex$Status_set__maxSegmentName(t_CheckIndex$Status *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status_get__missingSegmentVersion(t_CheckIndex$Status *self, void *data);
        static int t_CheckIndex$Status_set__missingSegmentVersion(t_CheckIndex$Status *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status_get__missingSegments(t_CheckIndex$Status *self, void *data);
        static int t_CheckIndex$Status_set__missingSegments(t_CheckIndex$Status *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status_get__numBadSegments(t_CheckIndex$Status *self, void *data);
        static int t_CheckIndex$Status_set__numBadSegments(t_CheckIndex$Status *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status_get__numSegments(t_CheckIndex$Status *self, void *data);
        static int t_CheckIndex$Status_set__numSegments(t_CheckIndex$Status *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status_get__partial(t_CheckIndex$Status *self, void *data);
        static int t_CheckIndex$Status_set__partial(t_CheckIndex$Status *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status_get__segmentInfos(t_CheckIndex$Status *self, void *data);
        static int t_CheckIndex$Status_set__segmentInfos(t_CheckIndex$Status *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status_get__segmentsChecked(t_CheckIndex$Status *self, void *data);
        static int t_CheckIndex$Status_set__segmentsChecked(t_CheckIndex$Status *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status_get__segmentsFileName(t_CheckIndex$Status *self, void *data);
        static int t_CheckIndex$Status_set__segmentsFileName(t_CheckIndex$Status *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status_get__toolOutOfDate(t_CheckIndex$Status *self, void *data);
        static int t_CheckIndex$Status_set__toolOutOfDate(t_CheckIndex$Status *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status_get__totLoseDocCount(t_CheckIndex$Status *self, void *data);
        static int t_CheckIndex$Status_set__totLoseDocCount(t_CheckIndex$Status *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status_get__userData(t_CheckIndex$Status *self, void *data);
        static int t_CheckIndex$Status_set__userData(t_CheckIndex$Status *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status_get__validCounter(t_CheckIndex$Status *self, void *data);
        static int t_CheckIndex$Status_set__validCounter(t_CheckIndex$Status *self, PyObject *arg, void *data);

        static PyGetSetDef t_CheckIndex$Status__fields_[] = {
          DECLARE_GETSET_FIELD(t_CheckIndex$Status, cantOpenSegments),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status, clean),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status, dir),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status, maxSegmentName),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status, missingSegmentVersion),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status, missingSegments),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status, numBadSegments),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status, numSegments),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status, partial),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status, segmentInfos),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status, segmentsChecked),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status, segmentsFileName),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status, toolOutOfDate),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status, totLoseDocCount),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status, userData),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status, validCounter),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_CheckIndex$Status__methods_[] = {
          DECLARE_METHOD(t_CheckIndex$Status, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CheckIndex$Status, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(CheckIndex$Status, t_CheckIndex$Status, ::java::lang::Object, CheckIndex$Status, abstract_init, 0, 0, t_CheckIndex$Status__fields_, 0, 0);

        void t_CheckIndex$Status::install(PyObject *module)
        {
          installType(&PY_TYPE(CheckIndex$Status), module, "CheckIndex$Status", 0);
          PyDict_SetItemString(PY_TYPE(CheckIndex$Status).tp_dict, "DocValuesStatus", make_descriptor(&PY_TYPE(CheckIndex$Status$DocValuesStatus)));
          PyDict_SetItemString(PY_TYPE(CheckIndex$Status).tp_dict, "TermVectorStatus", make_descriptor(&PY_TYPE(CheckIndex$Status$TermVectorStatus)));
          PyDict_SetItemString(PY_TYPE(CheckIndex$Status).tp_dict, "StoredFieldStatus", make_descriptor(&PY_TYPE(CheckIndex$Status$StoredFieldStatus)));
          PyDict_SetItemString(PY_TYPE(CheckIndex$Status).tp_dict, "TermIndexStatus", make_descriptor(&PY_TYPE(CheckIndex$Status$TermIndexStatus)));
          PyDict_SetItemString(PY_TYPE(CheckIndex$Status).tp_dict, "FieldNormStatus", make_descriptor(&PY_TYPE(CheckIndex$Status$FieldNormStatus)));
          PyDict_SetItemString(PY_TYPE(CheckIndex$Status).tp_dict, "SegmentInfoStatus", make_descriptor(&PY_TYPE(CheckIndex$Status$SegmentInfoStatus)));
        }

        void t_CheckIndex$Status::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(CheckIndex$Status).tp_dict, "class_", make_descriptor(CheckIndex$Status::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(CheckIndex$Status).tp_dict, "wrapfn_", make_descriptor(t_CheckIndex$Status::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(CheckIndex$Status).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_CheckIndex$Status_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CheckIndex$Status::initializeClass, 1)))
            return NULL;
          return t_CheckIndex$Status::wrap_Object(CheckIndex$Status(((t_CheckIndex$Status *) arg)->object.this$));
        }
        static PyObject *t_CheckIndex$Status_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CheckIndex$Status::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_CheckIndex$Status_get__cantOpenSegments(t_CheckIndex$Status *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object._get_cantOpenSegments());
          Py_RETURN_BOOL(value);
        }
        static int t_CheckIndex$Status_set__cantOpenSegments(t_CheckIndex$Status *self, PyObject *arg, void *data)
        {
          jboolean value;
          if (!parseArg(arg, "Z", &value))
          {
            INT_CALL(self->object._set_cantOpenSegments(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "cantOpenSegments", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status_get__clean(t_CheckIndex$Status *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object._get_clean());
          Py_RETURN_BOOL(value);
        }
        static int t_CheckIndex$Status_set__clean(t_CheckIndex$Status *self, PyObject *arg, void *data)
        {
          jboolean value;
          if (!parseArg(arg, "Z", &value))
          {
            INT_CALL(self->object._set_clean(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "clean", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status_get__dir(t_CheckIndex$Status *self, void *data)
        {
          ::org::apache::lucene::store::Directory value((jobject) NULL);
          OBJ_CALL(value = self->object._get_dir());
          return ::org::apache::lucene::store::t_Directory::wrap_Object(value);
        }
        static int t_CheckIndex$Status_set__dir(t_CheckIndex$Status *self, PyObject *arg, void *data)
        {
          ::org::apache::lucene::store::Directory value((jobject) NULL);
          if (!parseArg(arg, "k", ::org::apache::lucene::store::Directory::initializeClass, &value))
          {
            INT_CALL(self->object._set_dir(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "dir", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status_get__maxSegmentName(t_CheckIndex$Status *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_maxSegmentName());
          return PyInt_FromLong((long) value);
        }
        static int t_CheckIndex$Status_set__maxSegmentName(t_CheckIndex$Status *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_maxSegmentName(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "maxSegmentName", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status_get__missingSegmentVersion(t_CheckIndex$Status *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object._get_missingSegmentVersion());
          Py_RETURN_BOOL(value);
        }
        static int t_CheckIndex$Status_set__missingSegmentVersion(t_CheckIndex$Status *self, PyObject *arg, void *data)
        {
          jboolean value;
          if (!parseArg(arg, "Z", &value))
          {
            INT_CALL(self->object._set_missingSegmentVersion(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "missingSegmentVersion", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status_get__missingSegments(t_CheckIndex$Status *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object._get_missingSegments());
          Py_RETURN_BOOL(value);
        }
        static int t_CheckIndex$Status_set__missingSegments(t_CheckIndex$Status *self, PyObject *arg, void *data)
        {
          jboolean value;
          if (!parseArg(arg, "Z", &value))
          {
            INT_CALL(self->object._set_missingSegments(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "missingSegments", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status_get__numBadSegments(t_CheckIndex$Status *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_numBadSegments());
          return PyInt_FromLong((long) value);
        }
        static int t_CheckIndex$Status_set__numBadSegments(t_CheckIndex$Status *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_numBadSegments(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "numBadSegments", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status_get__numSegments(t_CheckIndex$Status *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_numSegments());
          return PyInt_FromLong((long) value);
        }
        static int t_CheckIndex$Status_set__numSegments(t_CheckIndex$Status *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_numSegments(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "numSegments", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status_get__partial(t_CheckIndex$Status *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object._get_partial());
          Py_RETURN_BOOL(value);
        }
        static int t_CheckIndex$Status_set__partial(t_CheckIndex$Status *self, PyObject *arg, void *data)
        {
          jboolean value;
          if (!parseArg(arg, "Z", &value))
          {
            INT_CALL(self->object._set_partial(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "partial", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status_get__segmentInfos(t_CheckIndex$Status *self, void *data)
        {
          ::java::util::List value((jobject) NULL);
          OBJ_CALL(value = self->object._get_segmentInfos());
          return ::java::util::t_List::wrap_Object(value);
        }
        static int t_CheckIndex$Status_set__segmentInfos(t_CheckIndex$Status *self, PyObject *arg, void *data)
        {
          ::java::util::List value((jobject) NULL);
          if (!parseArg(arg, "k", ::java::util::List::initializeClass, &value))
          {
            INT_CALL(self->object._set_segmentInfos(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "segmentInfos", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status_get__segmentsChecked(t_CheckIndex$Status *self, void *data)
        {
          ::java::util::List value((jobject) NULL);
          OBJ_CALL(value = self->object._get_segmentsChecked());
          return ::java::util::t_List::wrap_Object(value);
        }
        static int t_CheckIndex$Status_set__segmentsChecked(t_CheckIndex$Status *self, PyObject *arg, void *data)
        {
          ::java::util::List value((jobject) NULL);
          if (!parseArg(arg, "k", ::java::util::List::initializeClass, &value))
          {
            INT_CALL(self->object._set_segmentsChecked(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "segmentsChecked", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status_get__segmentsFileName(t_CheckIndex$Status *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object._get_segmentsFileName());
          return j2p(value);
        }
        static int t_CheckIndex$Status_set__segmentsFileName(t_CheckIndex$Status *self, PyObject *arg, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          if (!parseArg(arg, "s", &value))
          {
            INT_CALL(self->object._set_segmentsFileName(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "segmentsFileName", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status_get__toolOutOfDate(t_CheckIndex$Status *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object._get_toolOutOfDate());
          Py_RETURN_BOOL(value);
        }
        static int t_CheckIndex$Status_set__toolOutOfDate(t_CheckIndex$Status *self, PyObject *arg, void *data)
        {
          jboolean value;
          if (!parseArg(arg, "Z", &value))
          {
            INT_CALL(self->object._set_toolOutOfDate(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "toolOutOfDate", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status_get__totLoseDocCount(t_CheckIndex$Status *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_totLoseDocCount());
          return PyInt_FromLong((long) value);
        }
        static int t_CheckIndex$Status_set__totLoseDocCount(t_CheckIndex$Status *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_totLoseDocCount(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "totLoseDocCount", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status_get__userData(t_CheckIndex$Status *self, void *data)
        {
          ::java::util::Map value((jobject) NULL);
          OBJ_CALL(value = self->object._get_userData());
          return ::java::util::t_Map::wrap_Object(value);
        }
        static int t_CheckIndex$Status_set__userData(t_CheckIndex$Status *self, PyObject *arg, void *data)
        {
          ::java::util::Map value((jobject) NULL);
          if (!parseArg(arg, "k", ::java::util::Map::initializeClass, &value))
          {
            INT_CALL(self->object._set_userData(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "userData", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status_get__validCounter(t_CheckIndex$Status *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object._get_validCounter());
          Py_RETURN_BOOL(value);
        }
        static int t_CheckIndex$Status_set__validCounter(t_CheckIndex$Status *self, PyObject *arg, void *data)
        {
          jboolean value;
          if (!parseArg(arg, "Z", &value))
          {
            INT_CALL(self->object._set_validCounter(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "validCounter", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/compound/hyphenation/TernaryTree.h"
#include "java/lang/Class.h"
#include "java/lang/Cloneable.h"
#include "java/util/Enumeration.h"
#include "java/lang/String.h"
#include "java/io/PrintStream.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace compound {
          namespace hyphenation {

            ::java::lang::Class *TernaryTree::class$ = NULL;
            jmethodID *TernaryTree::mids$ = NULL;
            bool TernaryTree::live$ = false;

            jclass TernaryTree::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/compound/hyphenation/TernaryTree");

                mids$ = new jmethodID[max_mid];
                mids$[mid_balance_54c6a166] = env->getMethodID(cls, "balance", "()V");
                mids$[mid_clone_30bcff98] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/analysis/compound/hyphenation/TernaryTree;");
                mids$[mid_find_5fdc3f57] = env->getMethodID(cls, "find", "(Ljava/lang/String;)I");
                mids$[mid_find_ec6430eb] = env->getMethodID(cls, "find", "([CI)I");
                mids$[mid_insert_7420ac50] = env->getMethodID(cls, "insert", "(Ljava/lang/String;C)V");
                mids$[mid_insert_6d377140] = env->getMethodID(cls, "insert", "([CIC)V");
                mids$[mid_keys_39f88070] = env->getMethodID(cls, "keys", "()Ljava/util/Enumeration;");
                mids$[mid_knows_5fdc3f44] = env->getMethodID(cls, "knows", "(Ljava/lang/String;)Z");
                mids$[mid_printStats_1b7c898b] = env->getMethodID(cls, "printStats", "(Ljava/io/PrintStream;)V");
                mids$[mid_size_54c6a179] = env->getMethodID(cls, "size", "()I");
                mids$[mid_strcmp_979cf09d] = env->getStaticMethodID(cls, "strcmp", "(Ljava/lang/String;[CI)I");
                mids$[mid_strcmp_aa5dc2ed] = env->getStaticMethodID(cls, "strcmp", "([CI[CI)I");
                mids$[mid_strcpy_aa5dc2f2] = env->getStaticMethodID(cls, "strcpy", "([CI[CI)V");
                mids$[mid_strlen_700e23c9] = env->getStaticMethodID(cls, "strlen", "([C)I");
                mids$[mid_strlen_ec6430eb] = env->getStaticMethodID(cls, "strlen", "([CI)I");
                mids$[mid_trimToSize_54c6a166] = env->getMethodID(cls, "trimToSize", "()V");
                mids$[mid_init_54c6a166] = env->getMethodID(cls, "init", "()V");
                mids$[mid_insertBalanced_7e9fa7a8] = env->getMethodID(cls, "insertBalanced", "([Ljava/lang/String;[CII)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            void TernaryTree::balance() const
            {
              env->callVoidMethod(this$, mids$[mid_balance_54c6a166]);
            }

            TernaryTree TernaryTree::clone() const
            {
              return TernaryTree(env->callObjectMethod(this$, mids$[mid_clone_30bcff98]));
            }

            jint TernaryTree::find(const ::java::lang::String & a0) const
            {
              return env->callIntMethod(this$, mids$[mid_find_5fdc3f57], a0.this$);
            }

            jint TernaryTree::find(const JArray< jchar > & a0, jint a1) const
            {
              return env->callIntMethod(this$, mids$[mid_find_ec6430eb], a0.this$, a1);
            }

            void TernaryTree::insert(const ::java::lang::String & a0, jchar a1) const
            {
              env->callVoidMethod(this$, mids$[mid_insert_7420ac50], a0.this$, a1);
            }

            void TernaryTree::insert(const JArray< jchar > & a0, jint a1, jchar a2) const
            {
              env->callVoidMethod(this$, mids$[mid_insert_6d377140], a0.this$, a1, a2);
            }

            ::java::util::Enumeration TernaryTree::keys() const
            {
              return ::java::util::Enumeration(env->callObjectMethod(this$, mids$[mid_keys_39f88070]));
            }

            jboolean TernaryTree::knows(const ::java::lang::String & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_knows_5fdc3f44], a0.this$);
            }

            void TernaryTree::printStats(const ::java::io::PrintStream & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_printStats_1b7c898b], a0.this$);
            }

            jint TernaryTree::size() const
            {
              return env->callIntMethod(this$, mids$[mid_size_54c6a179]);
            }

            jint TernaryTree::strcmp(const ::java::lang::String & a0, const JArray< jchar > & a1, jint a2)
            {
              jclass cls = env->getClass(initializeClass);
              return env->callStaticIntMethod(cls, mids$[mid_strcmp_979cf09d], a0.this$, a1.this$, a2);
            }

            jint TernaryTree::strcmp(const JArray< jchar > & a0, jint a1, const JArray< jchar > & a2, jint a3)
            {
              jclass cls = env->getClass(initializeClass);
              return env->callStaticIntMethod(cls, mids$[mid_strcmp_aa5dc2ed], a0.this$, a1, a2.this$, a3);
            }

            void TernaryTree::strcpy(const JArray< jchar > & a0, jint a1, const JArray< jchar > & a2, jint a3)
            {
              jclass cls = env->getClass(initializeClass);
              env->callStaticVoidMethod(cls, mids$[mid_strcpy_aa5dc2f2], a0.this$, a1, a2.this$, a3);
            }

            jint TernaryTree::strlen(const JArray< jchar > & a0)
            {
              jclass cls = env->getClass(initializeClass);
              return env->callStaticIntMethod(cls, mids$[mid_strlen_700e23c9], a0.this$);
            }

            jint TernaryTree::strlen(const JArray< jchar > & a0, jint a1)
            {
              jclass cls = env->getClass(initializeClass);
              return env->callStaticIntMethod(cls, mids$[mid_strlen_ec6430eb], a0.this$, a1);
            }

            void TernaryTree::trimToSize() const
            {
              env->callVoidMethod(this$, mids$[mid_trimToSize_54c6a166]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace compound {
          namespace hyphenation {
            static PyObject *t_TernaryTree_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_TernaryTree_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_TernaryTree_balance(t_TernaryTree *self);
            static PyObject *t_TernaryTree_clone(t_TernaryTree *self);
            static PyObject *t_TernaryTree_find(t_TernaryTree *self, PyObject *args);
            static PyObject *t_TernaryTree_insert(t_TernaryTree *self, PyObject *args);
            static PyObject *t_TernaryTree_keys(t_TernaryTree *self);
            static PyObject *t_TernaryTree_knows(t_TernaryTree *self, PyObject *arg);
            static PyObject *t_TernaryTree_printStats(t_TernaryTree *self, PyObject *arg);
            static PyObject *t_TernaryTree_size(t_TernaryTree *self);
            static PyObject *t_TernaryTree_strcmp(PyTypeObject *type, PyObject *args);
            static PyObject *t_TernaryTree_strcpy(PyTypeObject *type, PyObject *args);
            static PyObject *t_TernaryTree_strlen(PyTypeObject *type, PyObject *args);
            static PyObject *t_TernaryTree_trimToSize(t_TernaryTree *self);

            static PyMethodDef t_TernaryTree__methods_[] = {
              DECLARE_METHOD(t_TernaryTree, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TernaryTree, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TernaryTree, balance, METH_NOARGS),
              DECLARE_METHOD(t_TernaryTree, clone, METH_NOARGS),
              DECLARE_METHOD(t_TernaryTree, find, METH_VARARGS),
              DECLARE_METHOD(t_TernaryTree, insert, METH_VARARGS),
              DECLARE_METHOD(t_TernaryTree, keys, METH_NOARGS),
              DECLARE_METHOD(t_TernaryTree, knows, METH_O),
              DECLARE_METHOD(t_TernaryTree, printStats, METH_O),
              DECLARE_METHOD(t_TernaryTree, size, METH_NOARGS),
              DECLARE_METHOD(t_TernaryTree, strcmp, METH_VARARGS | METH_CLASS),
              DECLARE_METHOD(t_TernaryTree, strcpy, METH_VARARGS | METH_CLASS),
              DECLARE_METHOD(t_TernaryTree, strlen, METH_VARARGS | METH_CLASS),
              DECLARE_METHOD(t_TernaryTree, trimToSize, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(TernaryTree, t_TernaryTree, ::java::lang::Object, TernaryTree, abstract_init, 0, 0, 0, 0, 0);

            void t_TernaryTree::install(PyObject *module)
            {
              installType(&PY_TYPE(TernaryTree), module, "TernaryTree", 0);
            }

            void t_TernaryTree::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(TernaryTree).tp_dict, "class_", make_descriptor(TernaryTree::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(TernaryTree).tp_dict, "wrapfn_", make_descriptor(t_TernaryTree::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(TernaryTree).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_TernaryTree_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, TernaryTree::initializeClass, 1)))
                return NULL;
              return t_TernaryTree::wrap_Object(TernaryTree(((t_TernaryTree *) arg)->object.this$));
            }
            static PyObject *t_TernaryTree_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, TernaryTree::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_TernaryTree_balance(t_TernaryTree *self)
            {
              OBJ_CALL(self->object.balance());
              Py_RETURN_NONE;
            }

            static PyObject *t_TernaryTree_clone(t_TernaryTree *self)
            {
              TernaryTree result((jobject) NULL);
              OBJ_CALL(result = self->object.clone());
              return t_TernaryTree::wrap_Object(result);
            }

            static PyObject *t_TernaryTree_find(t_TernaryTree *self, PyObject *args)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 1:
                {
                  ::java::lang::String a0((jobject) NULL);
                  jint result;

                  if (!parseArgs(args, "s", &a0))
                  {
                    OBJ_CALL(result = self->object.find(a0));
                    return PyInt_FromLong((long) result);
                  }
                }
                break;
               case 2:
                {
                  JArray< jchar > a0((jobject) NULL);
                  jint a1;
                  jint result;

                  if (!parseArgs(args, "[CI", &a0, &a1))
                  {
                    OBJ_CALL(result = self->object.find(a0, a1));
                    return PyInt_FromLong((long) result);
                  }
                }
              }

              PyErr_SetArgsError((PyObject *) self, "find", args);
              return NULL;
            }

            static PyObject *t_TernaryTree_insert(t_TernaryTree *self, PyObject *args)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 2:
                {
                  ::java::lang::String a0((jobject) NULL);
                  jchar a1;

                  if (!parseArgs(args, "sC", &a0, &a1))
                  {
                    OBJ_CALL(self->object.insert(a0, a1));
                    Py_RETURN_NONE;
                  }
                }
                break;
               case 3:
                {
                  JArray< jchar > a0((jobject) NULL);
                  jint a1;
                  jchar a2;

                  if (!parseArgs(args, "[CIC", &a0, &a1, &a2))
                  {
                    OBJ_CALL(self->object.insert(a0, a1, a2));
                    Py_RETURN_NONE;
                  }
                }
              }

              PyErr_SetArgsError((PyObject *) self, "insert", args);
              return NULL;
            }

            static PyObject *t_TernaryTree_keys(t_TernaryTree *self)
            {
              ::java::util::Enumeration result((jobject) NULL);
              OBJ_CALL(result = self->object.keys());
              return ::java::util::t_Enumeration::wrap_Object(result, &::java::lang::PY_TYPE(String));
            }

            static PyObject *t_TernaryTree_knows(t_TernaryTree *self, PyObject *arg)
            {
              ::java::lang::String a0((jobject) NULL);
              jboolean result;

              if (!parseArg(arg, "s", &a0))
              {
                OBJ_CALL(result = self->object.knows(a0));
                Py_RETURN_BOOL(result);
              }

              PyErr_SetArgsError((PyObject *) self, "knows", arg);
              return NULL;
            }

            static PyObject *t_TernaryTree_printStats(t_TernaryTree *self, PyObject *arg)
            {
              ::java::io::PrintStream a0((jobject) NULL);

              if (!parseArg(arg, "k", ::java::io::PrintStream::initializeClass, &a0))
              {
                OBJ_CALL(self->object.printStats(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "printStats", arg);
              return NULL;
            }

            static PyObject *t_TernaryTree_size(t_TernaryTree *self)
            {
              jint result;
              OBJ_CALL(result = self->object.size());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_TernaryTree_strcmp(PyTypeObject *type, PyObject *args)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 3:
                {
                  ::java::lang::String a0((jobject) NULL);
                  JArray< jchar > a1((jobject) NULL);
                  jint a2;
                  jint result;

                  if (!parseArgs(args, "s[CI", &a0, &a1, &a2))
                  {
                    OBJ_CALL(result = ::org::apache::lucene::analysis::compound::hyphenation::TernaryTree::strcmp(a0, a1, a2));
                    return PyInt_FromLong((long) result);
                  }
                }
                break;
               case 4:
                {
                  JArray< jchar > a0((jobject) NULL);
                  jint a1;
                  JArray< jchar > a2((jobject) NULL);
                  jint a3;
                  jint result;

                  if (!parseArgs(args, "[CI[CI", &a0, &a1, &a2, &a3))
                  {
                    OBJ_CALL(result = ::org::apache::lucene::analysis::compound::hyphenation::TernaryTree::strcmp(a0, a1, a2, a3));
                    return PyInt_FromLong((long) result);
                  }
                }
              }

              PyErr_SetArgsError(type, "strcmp", args);
              return NULL;
            }

            static PyObject *t_TernaryTree_strcpy(PyTypeObject *type, PyObject *args)
            {
              JArray< jchar > a0((jobject) NULL);
              jint a1;
              JArray< jchar > a2((jobject) NULL);
              jint a3;

              if (!parseArgs(args, "[CI[CI", &a0, &a1, &a2, &a3))
              {
                OBJ_CALL(::org::apache::lucene::analysis::compound::hyphenation::TernaryTree::strcpy(a0, a1, a2, a3));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError(type, "strcpy", args);
              return NULL;
            }

            static PyObject *t_TernaryTree_strlen(PyTypeObject *type, PyObject *args)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 1:
                {
                  JArray< jchar > a0((jobject) NULL);
                  jint result;

                  if (!parseArgs(args, "[C", &a0))
                  {
                    OBJ_CALL(result = ::org::apache::lucene::analysis::compound::hyphenation::TernaryTree::strlen(a0));
                    return PyInt_FromLong((long) result);
                  }
                }
                break;
               case 2:
                {
                  JArray< jchar > a0((jobject) NULL);
                  jint a1;
                  jint result;

                  if (!parseArgs(args, "[CI", &a0, &a1))
                  {
                    OBJ_CALL(result = ::org::apache::lucene::analysis::compound::hyphenation::TernaryTree::strlen(a0, a1));
                    return PyInt_FromLong((long) result);
                  }
                }
              }

              PyErr_SetArgsError(type, "strlen", args);
              return NULL;
            }

            static PyObject *t_TernaryTree_trimToSize(t_TernaryTree *self)
            {
              OBJ_CALL(self->object.trimToSize());
              Py_RETURN_NONE;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/DocValuesOrdinalsReader.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/facet/taxonomy/OrdinalsReader$OrdinalsSegmentReader.h"
#include "java/io/IOException.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {

          ::java::lang::Class *DocValuesOrdinalsReader::class$ = NULL;
          jmethodID *DocValuesOrdinalsReader::mids$ = NULL;
          bool DocValuesOrdinalsReader::live$ = false;

          jclass DocValuesOrdinalsReader::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/DocValuesOrdinalsReader");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
              mids$[mid_getIndexFieldName_14c7b5c5] = env->getMethodID(cls, "getIndexFieldName", "()Ljava/lang/String;");
              mids$[mid_getReader_7c7f912a] = env->getMethodID(cls, "getReader", "(Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/facet/taxonomy/OrdinalsReader$OrdinalsSegmentReader;");
              mids$[mid_decode_079b7c7a] = env->getMethodID(cls, "decode", "(Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/util/IntsRef;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          DocValuesOrdinalsReader::DocValuesOrdinalsReader() : ::org::apache::lucene::facet::taxonomy::OrdinalsReader(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          DocValuesOrdinalsReader::DocValuesOrdinalsReader(const ::java::lang::String & a0) : ::org::apache::lucene::facet::taxonomy::OrdinalsReader(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

          ::java::lang::String DocValuesOrdinalsReader::getIndexFieldName() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getIndexFieldName_14c7b5c5]));
          }

          ::org::apache::lucene::facet::taxonomy::OrdinalsReader$OrdinalsSegmentReader DocValuesOrdinalsReader::getReader(const ::org::apache::lucene::index::AtomicReaderContext & a0) const
          {
            return ::org::apache::lucene::facet::taxonomy::OrdinalsReader$OrdinalsSegmentReader(env->callObjectMethod(this$, mids$[mid_getReader_7c7f912a], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          static PyObject *t_DocValuesOrdinalsReader_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DocValuesOrdinalsReader_instance_(PyTypeObject *type, PyObject *arg);
          static int t_DocValuesOrdinalsReader_init_(t_DocValuesOrdinalsReader *self, PyObject *args, PyObject *kwds);
          static PyObject *t_DocValuesOrdinalsReader_getIndexFieldName(t_DocValuesOrdinalsReader *self, PyObject *args);
          static PyObject *t_DocValuesOrdinalsReader_getReader(t_DocValuesOrdinalsReader *self, PyObject *args);
          static PyObject *t_DocValuesOrdinalsReader_get__indexFieldName(t_DocValuesOrdinalsReader *self, void *data);
          static PyGetSetDef t_DocValuesOrdinalsReader__fields_[] = {
            DECLARE_GET_FIELD(t_DocValuesOrdinalsReader, indexFieldName),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_DocValuesOrdinalsReader__methods_[] = {
            DECLARE_METHOD(t_DocValuesOrdinalsReader, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DocValuesOrdinalsReader, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DocValuesOrdinalsReader, getIndexFieldName, METH_VARARGS),
            DECLARE_METHOD(t_DocValuesOrdinalsReader, getReader, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(DocValuesOrdinalsReader, t_DocValuesOrdinalsReader, ::org::apache::lucene::facet::taxonomy::OrdinalsReader, DocValuesOrdinalsReader, t_DocValuesOrdinalsReader_init_, 0, 0, t_DocValuesOrdinalsReader__fields_, 0, 0);

          void t_DocValuesOrdinalsReader::install(PyObject *module)
          {
            installType(&PY_TYPE(DocValuesOrdinalsReader), module, "DocValuesOrdinalsReader", 0);
          }

          void t_DocValuesOrdinalsReader::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(DocValuesOrdinalsReader).tp_dict, "class_", make_descriptor(DocValuesOrdinalsReader::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(DocValuesOrdinalsReader).tp_dict, "wrapfn_", make_descriptor(t_DocValuesOrdinalsReader::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(DocValuesOrdinalsReader).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_DocValuesOrdinalsReader_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, DocValuesOrdinalsReader::initializeClass, 1)))
              return NULL;
            return t_DocValuesOrdinalsReader::wrap_Object(DocValuesOrdinalsReader(((t_DocValuesOrdinalsReader *) arg)->object.this$));
          }
          static PyObject *t_DocValuesOrdinalsReader_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, DocValuesOrdinalsReader::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_DocValuesOrdinalsReader_init_(t_DocValuesOrdinalsReader *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                DocValuesOrdinalsReader object((jobject) NULL);

                INT_CALL(object = DocValuesOrdinalsReader());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                ::java::lang::String a0((jobject) NULL);
                DocValuesOrdinalsReader object((jobject) NULL);

                if (!parseArgs(args, "s", &a0))
                {
                  INT_CALL(object = DocValuesOrdinalsReader(a0));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_DocValuesOrdinalsReader_getIndexFieldName(t_DocValuesOrdinalsReader *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getIndexFieldName());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(DocValuesOrdinalsReader), (PyObject *) self, "getIndexFieldName", args, 2);
          }

          static PyObject *t_DocValuesOrdinalsReader_getReader(t_DocValuesOrdinalsReader *self, PyObject *args)
          {
            ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
            ::org::apache::lucene::facet::taxonomy::OrdinalsReader$OrdinalsSegmentReader result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.getReader(a0));
              return ::org::apache::lucene::facet::taxonomy::t_OrdinalsReader$OrdinalsSegmentReader::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(DocValuesOrdinalsReader), (PyObject *) self, "getReader", args, 2);
          }

          static PyObject *t_DocValuesOrdinalsReader_get__indexFieldName(t_DocValuesOrdinalsReader *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getIndexFieldName());
            return j2p(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/expressions/js/JavascriptParser$equality_return.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {

          ::java::lang::Class *JavascriptParser$equality_return::class$ = NULL;
          jmethodID *JavascriptParser$equality_return::mids$ = NULL;
          bool JavascriptParser$equality_return::live$ = false;

          jclass JavascriptParser$equality_return::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/expressions/js/JavascriptParser$equality_return");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          JavascriptParser$equality_return::JavascriptParser$equality_return() : ::org::antlr::runtime::ParserRuleReturnScope(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {
          static PyObject *t_JavascriptParser$equality_return_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_JavascriptParser$equality_return_instance_(PyTypeObject *type, PyObject *arg);
          static int t_JavascriptParser$equality_return_init_(t_JavascriptParser$equality_return *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_JavascriptParser$equality_return__methods_[] = {
            DECLARE_METHOD(t_JavascriptParser$equality_return, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_JavascriptParser$equality_return, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(JavascriptParser$equality_return, t_JavascriptParser$equality_return, ::org::antlr::runtime::ParserRuleReturnScope, JavascriptParser$equality_return, t_JavascriptParser$equality_return_init_, 0, 0, 0, 0, 0);

          void t_JavascriptParser$equality_return::install(PyObject *module)
          {
            installType(&PY_TYPE(JavascriptParser$equality_return), module, "JavascriptParser$equality_return", 0);
          }

          void t_JavascriptParser$equality_return::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(JavascriptParser$equality_return).tp_dict, "class_", make_descriptor(JavascriptParser$equality_return::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(JavascriptParser$equality_return).tp_dict, "wrapfn_", make_descriptor(t_JavascriptParser$equality_return::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(JavascriptParser$equality_return).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_JavascriptParser$equality_return_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, JavascriptParser$equality_return::initializeClass, 1)))
              return NULL;
            return t_JavascriptParser$equality_return::wrap_Object(JavascriptParser$equality_return(((t_JavascriptParser$equality_return *) arg)->object.this$));
          }
          static PyObject *t_JavascriptParser$equality_return_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, JavascriptParser$equality_return::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_JavascriptParser$equality_return_init_(t_JavascriptParser$equality_return *self, PyObject *args, PyObject *kwds)
          {
            JavascriptParser$equality_return object((jobject) NULL);

            INT_CALL(object = JavascriptParser$equality_return());
            self->object = object;

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/Analyzer$ReuseStrategy.h"
#include "org/apache/lucene/analysis/Analyzer$TokenStreamComponents.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {

        ::java::lang::Class *Analyzer$ReuseStrategy::class$ = NULL;
        jmethodID *Analyzer$ReuseStrategy::mids$ = NULL;
        bool Analyzer$ReuseStrategy::live$ = false;

        jclass Analyzer$ReuseStrategy::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/Analyzer$ReuseStrategy");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_getReusableComponents_19769f4a] = env->getMethodID(cls, "getReusableComponents", "(Lorg/apache/lucene/analysis/Analyzer;Ljava/lang/String;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");
            mids$[mid_setReusableComponents_66577a3f] = env->getMethodID(cls, "setReusableComponents", "(Lorg/apache/lucene/analysis/Analyzer;Ljava/lang/String;Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;)V");
            mids$[mid_setStoredValue_798d4388] = env->getMethodID(cls, "setStoredValue", "(Lorg/apache/lucene/analysis/Analyzer;Ljava/lang/Object;)V");
            mids$[mid_getStoredValue_166fef79] = env->getMethodID(cls, "getStoredValue", "(Lorg/apache/lucene/analysis/Analyzer;)Ljava/lang/Object;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        Analyzer$ReuseStrategy::Analyzer$ReuseStrategy() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        ::org::apache::lucene::analysis::Analyzer$TokenStreamComponents Analyzer$ReuseStrategy::getReusableComponents(const ::org::apache::lucene::analysis::Analyzer & a0, const ::java::lang::String & a1) const
        {
          return ::org::apache::lucene::analysis::Analyzer$TokenStreamComponents(env->callObjectMethod(this$, mids$[mid_getReusableComponents_19769f4a], a0.this$, a1.this$));
        }

        void Analyzer$ReuseStrategy::setReusableComponents(const ::org::apache::lucene::analysis::Analyzer & a0, const ::java::lang::String & a1, const ::org::apache::lucene::analysis::Analyzer$TokenStreamComponents & a2) const
        {
          env->callVoidMethod(this$, mids$[mid_setReusableComponents_66577a3f], a0.this$, a1.this$, a2.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        static PyObject *t_Analyzer$ReuseStrategy_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Analyzer$ReuseStrategy_instance_(PyTypeObject *type, PyObject *arg);
        static int t_Analyzer$ReuseStrategy_init_(t_Analyzer$ReuseStrategy *self, PyObject *args, PyObject *kwds);
        static PyObject *t_Analyzer$ReuseStrategy_getReusableComponents(t_Analyzer$ReuseStrategy *self, PyObject *args);
        static PyObject *t_Analyzer$ReuseStrategy_setReusableComponents(t_Analyzer$ReuseStrategy *self, PyObject *args);

        static PyMethodDef t_Analyzer$ReuseStrategy__methods_[] = {
          DECLARE_METHOD(t_Analyzer$ReuseStrategy, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Analyzer$ReuseStrategy, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Analyzer$ReuseStrategy, getReusableComponents, METH_VARARGS),
          DECLARE_METHOD(t_Analyzer$ReuseStrategy, setReusableComponents, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Analyzer$ReuseStrategy, t_Analyzer$ReuseStrategy, ::java::lang::Object, Analyzer$ReuseStrategy, t_Analyzer$ReuseStrategy_init_, 0, 0, 0, 0, 0);

        void t_Analyzer$ReuseStrategy::install(PyObject *module)
        {
          installType(&PY_TYPE(Analyzer$ReuseStrategy), module, "Analyzer$ReuseStrategy", 0);
        }

        void t_Analyzer$ReuseStrategy::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(Analyzer$ReuseStrategy).tp_dict, "class_", make_descriptor(Analyzer$ReuseStrategy::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(Analyzer$ReuseStrategy).tp_dict, "wrapfn_", make_descriptor(t_Analyzer$ReuseStrategy::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(Analyzer$ReuseStrategy).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Analyzer$ReuseStrategy_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Analyzer$ReuseStrategy::initializeClass, 1)))
            return NULL;
          return t_Analyzer$ReuseStrategy::wrap_Object(Analyzer$ReuseStrategy(((t_Analyzer$ReuseStrategy *) arg)->object.this$));
        }
        static PyObject *t_Analyzer$ReuseStrategy_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Analyzer$ReuseStrategy::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_Analyzer$ReuseStrategy_init_(t_Analyzer$ReuseStrategy *self, PyObject *args, PyObject *kwds)
        {
          Analyzer$ReuseStrategy object((jobject) NULL);

          INT_CALL(object = Analyzer$ReuseStrategy());
          self->object = object;

          return 0;
        }

        static PyObject *t_Analyzer$ReuseStrategy_getReusableComponents(t_Analyzer$ReuseStrategy *self, PyObject *args)
        {
          ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::org::apache::lucene::analysis::Analyzer$TokenStreamComponents result((jobject) NULL);

          if (!parseArgs(args, "ks", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.getReusableComponents(a0, a1));
            return ::org::apache::lucene::analysis::t_Analyzer$TokenStreamComponents::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getReusableComponents", args);
          return NULL;
        }

        static PyObject *t_Analyzer$ReuseStrategy_setReusableComponents(t_Analyzer$ReuseStrategy *self, PyObject *args)
        {
          ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::org::apache::lucene::analysis::Analyzer$TokenStreamComponents a2((jobject) NULL);

          if (!parseArgs(args, "ksk", ::org::apache::lucene::analysis::Analyzer::initializeClass, ::org::apache::lucene::analysis::Analyzer$TokenStreamComponents::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.setReusableComponents(a0, a1, a2));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setReusableComponents", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/pylucene/search/PythonFieldComparator.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "java/lang/Object.h"
#include "java/lang/Throwable.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace search {

        ::java::lang::Class *PythonFieldComparator::class$ = NULL;
        jmethodID *PythonFieldComparator::mids$ = NULL;
        bool PythonFieldComparator::live$ = false;

        jclass PythonFieldComparator::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/pylucene/search/PythonFieldComparator");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_compare_d8d154b9] = env->getMethodID(cls, "compare", "(II)I");
            mids$[mid_compareBottom_39c7bd23] = env->getMethodID(cls, "compareBottom", "(I)I");
            mids$[mid_compareDocToValue_f7cd74bb] = env->getMethodID(cls, "compareDocToValue", "(ILjava/lang/Object;)I");
            mids$[mid_compareTop_39c7bd23] = env->getMethodID(cls, "compareTop", "(I)I");
            mids$[mid_copy_d8d154a6] = env->getMethodID(cls, "copy", "(II)V");
            mids$[mid_finalize_54c6a166] = env->getMethodID(cls, "finalize", "()V");
            mids$[mid_pythonDecRef_54c6a166] = env->getMethodID(cls, "pythonDecRef", "()V");
            mids$[mid_pythonExtension_54c6a17a] = env->getMethodID(cls, "pythonExtension", "()J");
            mids$[mid_pythonExtension_0ee6df2f] = env->getMethodID(cls, "pythonExtension", "(J)V");
            mids$[mid_setBottom_39c7bd3c] = env->getMethodID(cls, "setBottom", "(I)V");
            mids$[mid_setNextReader_6329aed7] = env->getMethodID(cls, "setNextReader", "(Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/search/FieldComparator;");
            mids$[mid_setTopValue_290588ee] = env->getMethodID(cls, "setTopValue", "(Ljava/lang/Object;)V");
            mids$[mid_value_29be6a55] = env->getMethodID(cls, "value", "(I)Ljava/lang/Object;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PythonFieldComparator::PythonFieldComparator() : ::org::apache::lucene::search::FieldComparator(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void PythonFieldComparator::finalize() const
        {
          env->callVoidMethod(this$, mids$[mid_finalize_54c6a166]);
        }

        jlong PythonFieldComparator::pythonExtension() const
        {
          return env->callLongMethod(this$, mids$[mid_pythonExtension_54c6a17a]);
        }

        void PythonFieldComparator::pythonExtension(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_pythonExtension_0ee6df2f], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace search {
        static PyObject *t_PythonFieldComparator_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PythonFieldComparator_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PythonFieldComparator_of_(t_PythonFieldComparator *self, PyObject *args);
        static int t_PythonFieldComparator_init_(t_PythonFieldComparator *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PythonFieldComparator_finalize(t_PythonFieldComparator *self);
        static PyObject *t_PythonFieldComparator_pythonExtension(t_PythonFieldComparator *self, PyObject *args);
        static jint JNICALL t_PythonFieldComparator_compare0(JNIEnv *jenv, jobject jobj, jint a0, jint a1);
        static jint JNICALL t_PythonFieldComparator_compareBottom1(JNIEnv *jenv, jobject jobj, jint a0);
        static jint JNICALL t_PythonFieldComparator_compareDocToValue2(JNIEnv *jenv, jobject jobj, jint a0, jobject a1);
        static jint JNICALL t_PythonFieldComparator_compareTop3(JNIEnv *jenv, jobject jobj, jint a0);
        static void JNICALL t_PythonFieldComparator_copy4(JNIEnv *jenv, jobject jobj, jint a0, jint a1);
        static void JNICALL t_PythonFieldComparator_pythonDecRef5(JNIEnv *jenv, jobject jobj);
        static void JNICALL t_PythonFieldComparator_setBottom6(JNIEnv *jenv, jobject jobj, jint a0);
        static jobject JNICALL t_PythonFieldComparator_setNextReader7(JNIEnv *jenv, jobject jobj, jobject a0);
        static void JNICALL t_PythonFieldComparator_setTopValue8(JNIEnv *jenv, jobject jobj, jobject a0);
        static jobject JNICALL t_PythonFieldComparator_value9(JNIEnv *jenv, jobject jobj, jint a0);
        static PyObject *t_PythonFieldComparator_get__self(t_PythonFieldComparator *self, void *data);
        static PyObject *t_PythonFieldComparator_get__parameters_(t_PythonFieldComparator *self, void *data);
        static PyGetSetDef t_PythonFieldComparator__fields_[] = {
          DECLARE_GET_FIELD(t_PythonFieldComparator, self),
          DECLARE_GET_FIELD(t_PythonFieldComparator, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PythonFieldComparator__methods_[] = {
          DECLARE_METHOD(t_PythonFieldComparator, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonFieldComparator, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonFieldComparator, of_, METH_VARARGS),
          DECLARE_METHOD(t_PythonFieldComparator, finalize, METH_NOARGS),
          DECLARE_METHOD(t_PythonFieldComparator, pythonExtension, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PythonFieldComparator, t_PythonFieldComparator, ::org::apache::lucene::search::FieldComparator, PythonFieldComparator, t_PythonFieldComparator_init_, 0, 0, t_PythonFieldComparator__fields_, 0, 0);
        PyObject *t_PythonFieldComparator::wrap_Object(const PythonFieldComparator& object, PyTypeObject *p0)
        {
          PyObject *obj = t_PythonFieldComparator::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_PythonFieldComparator *self = (t_PythonFieldComparator *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_PythonFieldComparator::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_PythonFieldComparator::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_PythonFieldComparator *self = (t_PythonFieldComparator *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_PythonFieldComparator::install(PyObject *module)
        {
          installType(&PY_TYPE(PythonFieldComparator), module, "PythonFieldComparator", 1);
        }

        void t_PythonFieldComparator::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PythonFieldComparator).tp_dict, "class_", make_descriptor(PythonFieldComparator::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PythonFieldComparator).tp_dict, "wrapfn_", make_descriptor(t_PythonFieldComparator::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PythonFieldComparator).tp_dict, "boxfn_", make_descriptor(boxObject));
          jclass cls = env->getClass(PythonFieldComparator::initializeClass);
          JNINativeMethod methods[] = {
            { "compare", "(II)I", (void *) t_PythonFieldComparator_compare0 },
            { "compareBottom", "(I)I", (void *) t_PythonFieldComparator_compareBottom1 },
            { "compareDocToValue", "(ILjava/lang/Object;)I", (void *) t_PythonFieldComparator_compareDocToValue2 },
            { "compareTop", "(I)I", (void *) t_PythonFieldComparator_compareTop3 },
            { "copy", "(II)V", (void *) t_PythonFieldComparator_copy4 },
            { "pythonDecRef", "()V", (void *) t_PythonFieldComparator_pythonDecRef5 },
            { "setBottom", "(I)V", (void *) t_PythonFieldComparator_setBottom6 },
            { "setNextReader", "(Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/search/FieldComparator;", (void *) t_PythonFieldComparator_setNextReader7 },
            { "setTopValue", "(Ljava/lang/Object;)V", (void *) t_PythonFieldComparator_setTopValue8 },
            { "value", "(I)Ljava/lang/Object;", (void *) t_PythonFieldComparator_value9 },
          };
          env->registerNatives(cls, methods, 10);
        }

        static PyObject *t_PythonFieldComparator_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PythonFieldComparator::initializeClass, 1)))
            return NULL;
          return t_PythonFieldComparator::wrap_Object(PythonFieldComparator(((t_PythonFieldComparator *) arg)->object.this$));
        }
        static PyObject *t_PythonFieldComparator_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PythonFieldComparator::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_PythonFieldComparator_of_(t_PythonFieldComparator *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_PythonFieldComparator_init_(t_PythonFieldComparator *self, PyObject *args, PyObject *kwds)
        {
          PythonFieldComparator object((jobject) NULL);

          INT_CALL(object = PythonFieldComparator());
          self->object = object;

          Py_INCREF((PyObject *) self);
          self->object.pythonExtension((jlong) (Py_intptr_t) (void *) self);

          return 0;
        }

        static PyObject *t_PythonFieldComparator_finalize(t_PythonFieldComparator *self)
        {
          OBJ_CALL(self->object.finalize());
          Py_RETURN_NONE;
        }

        static PyObject *t_PythonFieldComparator_pythonExtension(t_PythonFieldComparator *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              jlong result;
              OBJ_CALL(result = self->object.pythonExtension());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }
            break;
           case 1:
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.pythonExtension(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "pythonExtension", args);
          return NULL;
        }

        static jint JNICALL t_PythonFieldComparator_compare0(JNIEnv *jenv, jobject jobj, jint a0, jint a1)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonFieldComparator::mids$[PythonFieldComparator::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jint value;
          PyObject *result = PyObject_CallMethod(obj, "compare", "ii", (int) a0, (int) a1);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "I", &value))
          {
            throwTypeError("compare", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jint) 0;
        }

        static jint JNICALL t_PythonFieldComparator_compareBottom1(JNIEnv *jenv, jobject jobj, jint a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonFieldComparator::mids$[PythonFieldComparator::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jint value;
          PyObject *result = PyObject_CallMethod(obj, "compareBottom", "i", (int) a0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "I", &value))
          {
            throwTypeError("compareBottom", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jint) 0;
        }

        static jint JNICALL t_PythonFieldComparator_compareDocToValue2(JNIEnv *jenv, jobject jobj, jint a0, jobject a1)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonFieldComparator::mids$[PythonFieldComparator::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jint value;
          PyObject *o1 = ::java::lang::t_Object::wrap_Object(::java::lang::Object(a1));
          PyObject *result = PyObject_CallMethod(obj, "compareDocToValue", "iO", (int) a0, o1);
          Py_DECREF(o1);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "I", &value))
          {
            throwTypeError("compareDocToValue", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jint) 0;
        }

        static jint JNICALL t_PythonFieldComparator_compareTop3(JNIEnv *jenv, jobject jobj, jint a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonFieldComparator::mids$[PythonFieldComparator::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jint value;
          PyObject *result = PyObject_CallMethod(obj, "compareTop", "i", (int) a0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "I", &value))
          {
            throwTypeError("compareTop", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jint) 0;
        }

        static void JNICALL t_PythonFieldComparator_copy4(JNIEnv *jenv, jobject jobj, jint a0, jint a1)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonFieldComparator::mids$[PythonFieldComparator::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          PyObject *result = PyObject_CallMethod(obj, "copy", "ii", (int) a0, (int) a1);
          if (!result)
            throwPythonError();
          else
            Py_DECREF(result);
        }

        static void JNICALL t_PythonFieldComparator_pythonDecRef5(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonFieldComparator::mids$[PythonFieldComparator::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            jenv->CallVoidMethod(jobj, PythonFieldComparator::mids$[PythonFieldComparator::mid_pythonExtension_0ee6df2f], (jlong) 0);
            env->finalizeObject(jenv, obj);
          }
        }

        static void JNICALL t_PythonFieldComparator_setBottom6(JNIEnv *jenv, jobject jobj, jint a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonFieldComparator::mids$[PythonFieldComparator::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          PyObject *result = PyObject_CallMethod(obj, "setBottom", "i", (int) a0);
          if (!result)
            throwPythonError();
          else
            Py_DECREF(result);
        }

        static jobject JNICALL t_PythonFieldComparator_setNextReader7(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonFieldComparator::mids$[PythonFieldComparator::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          ::org::apache::lucene::search::FieldComparator value((jobject) NULL);
          PyObject *o0 = ::org::apache::lucene::index::t_AtomicReaderContext::wrap_Object(::org::apache::lucene::index::AtomicReaderContext(a0));
          PyObject *result = PyObject_CallMethod(obj, "setNextReader", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "k", ::org::apache::lucene::search::FieldComparator::initializeClass, &value))
          {
            throwTypeError("setNextReader", result);
            Py_DECREF(result);
          }
          else
          {
            jobj = jenv->NewLocalRef(value.this$);
            Py_DECREF(result);
            return jobj;
          }

          return (jobject) NULL;
        }

        static void JNICALL t_PythonFieldComparator_setTopValue8(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonFieldComparator::mids$[PythonFieldComparator::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          PyObject *o0 = ::java::lang::t_Object::wrap_Object(::java::lang::Object(a0));
          PyObject *result = PyObject_CallMethod(obj, "setTopValue", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else
            Py_DECREF(result);
        }

        static jobject JNICALL t_PythonFieldComparator_value9(JNIEnv *jenv, jobject jobj, jint a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonFieldComparator::mids$[PythonFieldComparator::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          ::java::lang::Object value((jobject) NULL);
          PyObject *result = PyObject_CallMethod(obj, "value", "i", (int) a0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "o", &value))
          {
            throwTypeError("value", result);
            Py_DECREF(result);
          }
          else
          {
            jobj = jenv->NewLocalRef(value.this$);
            Py_DECREF(result);
            return jobj;
          }

          return (jobject) NULL;
        }

        static PyObject *t_PythonFieldComparator_get__self(t_PythonFieldComparator *self, void *data)
        {
          jlong ptr;
          OBJ_CALL(ptr = self->object.pythonExtension());
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            Py_INCREF(obj);
            return obj;
          }
          else
            Py_RETURN_NONE;
        }
        static PyObject *t_PythonFieldComparator_get__parameters_(t_PythonFieldComparator *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/SearcherLifetimeManager.h"
#include "org/apache/lucene/search/SearcherLifetimeManager$Pruner.h"
#include "java/io/IOException.h"
#include "java/io/Closeable.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *SearcherLifetimeManager::class$ = NULL;
        jmethodID *SearcherLifetimeManager::mids$ = NULL;
        bool SearcherLifetimeManager::live$ = false;

        jclass SearcherLifetimeManager::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/SearcherLifetimeManager");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_acquire_fc8f2eae] = env->getMethodID(cls, "acquire", "(J)Lorg/apache/lucene/search/IndexSearcher;");
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_prune_da315acb] = env->getMethodID(cls, "prune", "(Lorg/apache/lucene/search/SearcherLifetimeManager$Pruner;)V");
            mids$[mid_record_474fe500] = env->getMethodID(cls, "record", "(Lorg/apache/lucene/search/IndexSearcher;)J");
            mids$[mid_release_474fe51c] = env->getMethodID(cls, "release", "(Lorg/apache/lucene/search/IndexSearcher;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SearcherLifetimeManager::SearcherLifetimeManager() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        ::org::apache::lucene::search::IndexSearcher SearcherLifetimeManager::acquire(jlong a0) const
        {
          return ::org::apache::lucene::search::IndexSearcher(env->callObjectMethod(this$, mids$[mid_acquire_fc8f2eae], a0));
        }

        void SearcherLifetimeManager::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        void SearcherLifetimeManager::prune(const ::org::apache::lucene::search::SearcherLifetimeManager$Pruner & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_prune_da315acb], a0.this$);
        }

        jlong SearcherLifetimeManager::record(const ::org::apache::lucene::search::IndexSearcher & a0) const
        {
          return env->callLongMethod(this$, mids$[mid_record_474fe500], a0.this$);
        }

        void SearcherLifetimeManager::release(const ::org::apache::lucene::search::IndexSearcher & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_release_474fe51c], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/search/SearcherLifetimeManager$PruneByAge.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_SearcherLifetimeManager_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SearcherLifetimeManager_instance_(PyTypeObject *type, PyObject *arg);
        static int t_SearcherLifetimeManager_init_(t_SearcherLifetimeManager *self, PyObject *args, PyObject *kwds);
        static PyObject *t_SearcherLifetimeManager_acquire(t_SearcherLifetimeManager *self, PyObject *arg);
        static PyObject *t_SearcherLifetimeManager_close(t_SearcherLifetimeManager *self);
        static PyObject *t_SearcherLifetimeManager_prune(t_SearcherLifetimeManager *self, PyObject *arg);
        static PyObject *t_SearcherLifetimeManager_record(t_SearcherLifetimeManager *self, PyObject *arg);
        static PyObject *t_SearcherLifetimeManager_release(t_SearcherLifetimeManager *self, PyObject *arg);

        static PyMethodDef t_SearcherLifetimeManager__methods_[] = {
          DECLARE_METHOD(t_SearcherLifetimeManager, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SearcherLifetimeManager, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SearcherLifetimeManager, acquire, METH_O),
          DECLARE_METHOD(t_SearcherLifetimeManager, close, METH_NOARGS),
          DECLARE_METHOD(t_SearcherLifetimeManager, prune, METH_O),
          DECLARE_METHOD(t_SearcherLifetimeManager, record, METH_O),
          DECLARE_METHOD(t_SearcherLifetimeManager, release, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SearcherLifetimeManager, t_SearcherLifetimeManager, ::java::lang::Object, SearcherLifetimeManager, t_SearcherLifetimeManager_init_, 0, 0, 0, 0, 0);

        void t_SearcherLifetimeManager::install(PyObject *module)
        {
          installType(&PY_TYPE(SearcherLifetimeManager), module, "SearcherLifetimeManager", 0);
          PyDict_SetItemString(PY_TYPE(SearcherLifetimeManager).tp_dict, "PruneByAge", make_descriptor(&PY_TYPE(SearcherLifetimeManager$PruneByAge)));
          PyDict_SetItemString(PY_TYPE(SearcherLifetimeManager).tp_dict, "Pruner", make_descriptor(&PY_TYPE(SearcherLifetimeManager$Pruner)));
        }

        void t_SearcherLifetimeManager::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SearcherLifetimeManager).tp_dict, "class_", make_descriptor(SearcherLifetimeManager::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SearcherLifetimeManager).tp_dict, "wrapfn_", make_descriptor(t_SearcherLifetimeManager::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SearcherLifetimeManager).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SearcherLifetimeManager_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SearcherLifetimeManager::initializeClass, 1)))
            return NULL;
          return t_SearcherLifetimeManager::wrap_Object(SearcherLifetimeManager(((t_SearcherLifetimeManager *) arg)->object.this$));
        }
        static PyObject *t_SearcherLifetimeManager_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SearcherLifetimeManager::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_SearcherLifetimeManager_init_(t_SearcherLifetimeManager *self, PyObject *args, PyObject *kwds)
        {
          SearcherLifetimeManager object((jobject) NULL);

          INT_CALL(object = SearcherLifetimeManager());
          self->object = object;

          return 0;
        }

        static PyObject *t_SearcherLifetimeManager_acquire(t_SearcherLifetimeManager *self, PyObject *arg)
        {
          jlong a0;
          ::org::apache::lucene::search::IndexSearcher result((jobject) NULL);

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(result = self->object.acquire(a0));
            return ::org::apache::lucene::search::t_IndexSearcher::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "acquire", arg);
          return NULL;
        }

        static PyObject *t_SearcherLifetimeManager_close(t_SearcherLifetimeManager *self)
        {
          OBJ_CALL(self->object.close());
          Py_RETURN_NONE;
        }

        static PyObject *t_SearcherLifetimeManager_prune(t_SearcherLifetimeManager *self, PyObject *arg)
        {
          ::org::apache::lucene::search::SearcherLifetimeManager$Pruner a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::search::SearcherLifetimeManager$Pruner::initializeClass, &a0))
          {
            OBJ_CALL(self->object.prune(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "prune", arg);
          return NULL;
        }

        static PyObject *t_SearcherLifetimeManager_record(t_SearcherLifetimeManager *self, PyObject *arg)
        {
          ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
          jlong result;

          if (!parseArg(arg, "k", ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.record(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError((PyObject *) self, "record", arg);
          return NULL;
        }

        static PyObject *t_SearcherLifetimeManager_release(t_SearcherLifetimeManager *self, PyObject *arg)
        {
          ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0))
          {
            OBJ_CALL(self->object.release(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "release", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/CollectionUtil.h"
#include "java/util/Comparator.h"
#include "java/util/List.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *CollectionUtil::class$ = NULL;
        jmethodID *CollectionUtil::mids$ = NULL;
        bool CollectionUtil::live$ = false;

        jclass CollectionUtil::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/CollectionUtil");

            mids$ = new jmethodID[max_mid];
            mids$[mid_introSort_1fde8fc3] = env->getStaticMethodID(cls, "introSort", "(Ljava/util/List;)V");
            mids$[mid_introSort_b59215b8] = env->getStaticMethodID(cls, "introSort", "(Ljava/util/List;Ljava/util/Comparator;)V");
            mids$[mid_timSort_1fde8fc3] = env->getStaticMethodID(cls, "timSort", "(Ljava/util/List;)V");
            mids$[mid_timSort_b59215b8] = env->getStaticMethodID(cls, "timSort", "(Ljava/util/List;Ljava/util/Comparator;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void CollectionUtil::introSort(const ::java::util::List & a0)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_introSort_1fde8fc3], a0.this$);
        }

        void CollectionUtil::introSort(const ::java::util::List & a0, const ::java::util::Comparator & a1)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_introSort_b59215b8], a0.this$, a1.this$);
        }

        void CollectionUtil::timSort(const ::java::util::List & a0)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_timSort_1fde8fc3], a0.this$);
        }

        void CollectionUtil::timSort(const ::java::util::List & a0, const ::java::util::Comparator & a1)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_timSort_b59215b8], a0.this$, a1.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_CollectionUtil_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CollectionUtil_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CollectionUtil_introSort(PyTypeObject *type, PyObject *args);
        static PyObject *t_CollectionUtil_timSort(PyTypeObject *type, PyObject *args);

        static PyMethodDef t_CollectionUtil__methods_[] = {
          DECLARE_METHOD(t_CollectionUtil, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CollectionUtil, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CollectionUtil, introSort, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_CollectionUtil, timSort, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(CollectionUtil, t_CollectionUtil, ::java::lang::Object, CollectionUtil, abstract_init, 0, 0, 0, 0, 0);

        void t_CollectionUtil::install(PyObject *module)
        {
          installType(&PY_TYPE(CollectionUtil), module, "CollectionUtil", 0);
        }

        void t_CollectionUtil::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(CollectionUtil).tp_dict, "class_", make_descriptor(CollectionUtil::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(CollectionUtil).tp_dict, "wrapfn_", make_descriptor(t_CollectionUtil::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(CollectionUtil).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_CollectionUtil_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CollectionUtil::initializeClass, 1)))
            return NULL;
          return t_CollectionUtil::wrap_Object(CollectionUtil(((t_CollectionUtil *) arg)->object.this$));
        }
        static PyObject *t_CollectionUtil_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CollectionUtil::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_CollectionUtil_introSort(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::util::List a0((jobject) NULL);
              PyTypeObject **p0;

              if (!parseArgs(args, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
              {
                OBJ_CALL(::org::apache::lucene::util::CollectionUtil::introSort(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 2:
            {
              ::java::util::List a0((jobject) NULL);
              PyTypeObject **p0;
              ::java::util::Comparator a1((jobject) NULL);
              PyTypeObject **p1;

              if (!parseArgs(args, "KK", ::java::util::List::initializeClass, ::java::util::Comparator::initializeClass, &a0, &p0, ::java::util::t_List::parameters_, &a1, &p1, ::java::util::t_Comparator::parameters_))
              {
                OBJ_CALL(::org::apache::lucene::util::CollectionUtil::introSort(a0, a1));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError(type, "introSort", args);
          return NULL;
        }

        static PyObject *t_CollectionUtil_timSort(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::util::List a0((jobject) NULL);
              PyTypeObject **p0;

              if (!parseArgs(args, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
              {
                OBJ_CALL(::org::apache::lucene::util::CollectionUtil::timSort(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 2:
            {
              ::java::util::List a0((jobject) NULL);
              PyTypeObject **p0;
              ::java::util::Comparator a1((jobject) NULL);
              PyTypeObject **p1;

              if (!parseArgs(args, "KK", ::java::util::List::initializeClass, ::java::util::Comparator::initializeClass, &a0, &p0, ::java::util::t_List::parameters_, &a1, &p1, ::java::util::t_Comparator::parameters_))
              {
                OBJ_CALL(::org::apache::lucene::util::CollectionUtil::timSort(a0, a1));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError(type, "timSort", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/String.h"
#include "java/lang/Throwable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace java {
  namespace lang {

    ::java::lang::Class *IllegalStateException::class$ = NULL;
    jmethodID *IllegalStateException::mids$ = NULL;
    bool IllegalStateException::live$ = false;

    jclass IllegalStateException::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/lang/IllegalStateException");

        mids$ = new jmethodID[max_mid];
        mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
        mids$[mid_init$_c5ec8ca4] = env->getMethodID(cls, "<init>", "(Ljava/lang/Throwable;)V");
        mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
        mids$[mid_init$_01646a2e] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/Throwable;)V");

        class$ = (::java::lang::Class *) new JObject(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    IllegalStateException::IllegalStateException() : ::java::lang::RuntimeException(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

    IllegalStateException::IllegalStateException(const ::java::lang::Throwable & a0) : ::java::lang::RuntimeException(env->newObject(initializeClass, &mids$, mid_init$_c5ec8ca4, a0.this$)) {}

    IllegalStateException::IllegalStateException(const ::java::lang::String & a0) : ::java::lang::RuntimeException(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

    IllegalStateException::IllegalStateException(const ::java::lang::String & a0, const ::java::lang::Throwable & a1) : ::java::lang::RuntimeException(env->newObject(initializeClass, &mids$, mid_init$_01646a2e, a0.this$, a1.this$)) {}
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace lang {
    static PyObject *t_IllegalStateException_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_IllegalStateException_instance_(PyTypeObject *type, PyObject *arg);
    static int t_IllegalStateException_init_(t_IllegalStateException *self, PyObject *args, PyObject *kwds);

    static PyMethodDef t_IllegalStateException__methods_[] = {
      DECLARE_METHOD(t_IllegalStateException, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_IllegalStateException, instance_, METH_O | METH_CLASS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(IllegalStateException, t_IllegalStateException, ::java::lang::RuntimeException, IllegalStateException, t_IllegalStateException_init_, 0, 0, 0, 0, 0);

    void t_IllegalStateException::install(PyObject *module)
    {
      installType(&PY_TYPE(IllegalStateException), module, "IllegalStateException", 0);
    }

    void t_IllegalStateException::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(IllegalStateException).tp_dict, "class_", make_descriptor(IllegalStateException::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(IllegalStateException).tp_dict, "wrapfn_", make_descriptor(t_IllegalStateException::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(IllegalStateException).tp_dict, "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_IllegalStateException_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, IllegalStateException::initializeClass, 1)))
        return NULL;
      return t_IllegalStateException::wrap_Object(IllegalStateException(((t_IllegalStateException *) arg)->object.this$));
    }
    static PyObject *t_IllegalStateException_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, IllegalStateException::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static int t_IllegalStateException_init_(t_IllegalStateException *self, PyObject *args, PyObject *kwds)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          IllegalStateException object((jobject) NULL);

          INT_CALL(object = IllegalStateException());
          self->object = object;
          break;
        }
        goto err;
       case 1:
        {
          ::java::lang::Throwable a0((jobject) NULL);
          IllegalStateException object((jobject) NULL);

          if (!parseArgs(args, "k", ::java::lang::Throwable::initializeClass, &a0))
          {
            INT_CALL(object = IllegalStateException(a0));
            self->object = object;
            break;
          }
        }
        {
          ::java::lang::String a0((jobject) NULL);
          IllegalStateException object((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            INT_CALL(object = IllegalStateException(a0));
            self->object = object;
            break;
          }
        }
        goto err;
       case 2:
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::Throwable a1((jobject) NULL);
          IllegalStateException object((jobject) NULL);

          if (!parseArgs(args, "sk", ::java::lang::Throwable::initializeClass, &a0, &a1))
          {
            INT_CALL(object = IllegalStateException(a0, a1));
            self->object = object;
            break;
          }
        }
       default:
       err:
        PyErr_SetArgsError((PyObject *) self, "__init__", args);
        return -1;
      }

      return 0;
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/util/StopwordAnalyzerBase.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {

          ::java::lang::Class *StopwordAnalyzerBase::class$ = NULL;
          jmethodID *StopwordAnalyzerBase::mids$ = NULL;
          bool StopwordAnalyzerBase::live$ = false;

          jclass StopwordAnalyzerBase::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/util/StopwordAnalyzerBase");

              mids$ = new jmethodID[max_mid];
              mids$[mid_getStopwordSet_d2d3505c] = env->getMethodID(cls, "getStopwordSet", "()Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_loadStopwordSet_b1bbe8e8] = env->getStaticMethodID(cls, "loadStopwordSet", "(Ljava/io/File;Lorg/apache/lucene/util/Version;)Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_loadStopwordSet_d402156f] = env->getStaticMethodID(cls, "loadStopwordSet", "(Ljava/io/File;)Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_loadStopwordSet_aa7d87ca] = env->getStaticMethodID(cls, "loadStopwordSet", "(Ljava/io/Reader;)Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_loadStopwordSet_b3c09259] = env->getStaticMethodID(cls, "loadStopwordSet", "(Ljava/io/Reader;Lorg/apache/lucene/util/Version;)Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_loadStopwordSet_3cef351b] = env->getStaticMethodID(cls, "loadStopwordSet", "(ZLjava/lang/Class;Ljava/lang/String;Ljava/lang/String;)Lorg/apache/lucene/analysis/util/CharArraySet;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::org::apache::lucene::analysis::util::CharArraySet StopwordAnalyzerBase::getStopwordSet() const
          {
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callObjectMethod(this$, mids$[mid_getStopwordSet_d2d3505c]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {
          static PyObject *t_StopwordAnalyzerBase_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_StopwordAnalyzerBase_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_StopwordAnalyzerBase_getStopwordSet(t_StopwordAnalyzerBase *self);
          static PyObject *t_StopwordAnalyzerBase_get__stopwordSet(t_StopwordAnalyzerBase *self, void *data);
          static PyGetSetDef t_StopwordAnalyzerBase__fields_[] = {
            DECLARE_GET_FIELD(t_StopwordAnalyzerBase, stopwordSet),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_StopwordAnalyzerBase__methods_[] = {
            DECLARE_METHOD(t_StopwordAnalyzerBase, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StopwordAnalyzerBase, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StopwordAnalyzerBase, getStopwordSet, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(StopwordAnalyzerBase, t_StopwordAnalyzerBase, ::org::apache::lucene::analysis::Analyzer, StopwordAnalyzerBase, abstract_init, 0, 0, t_StopwordAnalyzerBase__fields_, 0, 0);

          void t_StopwordAnalyzerBase::install(PyObject *module)
          {
            installType(&PY_TYPE(StopwordAnalyzerBase), module, "StopwordAnalyzerBase", 0);
          }

          void t_StopwordAnalyzerBase::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(StopwordAnalyzerBase).tp_dict, "class_", make_descriptor(StopwordAnalyzerBase::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(StopwordAnalyzerBase).tp_dict, "wrapfn_", make_descriptor(t_StopwordAnalyzerBase::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(StopwordAnalyzerBase).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_StopwordAnalyzerBase_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, StopwordAnalyzerBase::initializeClass, 1)))
              return NULL;
            return t_StopwordAnalyzerBase::wrap_Object(StopwordAnalyzerBase(((t_StopwordAnalyzerBase *) arg)->object.this$));
          }
          static PyObject *t_StopwordAnalyzerBase_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, StopwordAnalyzerBase::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_StopwordAnalyzerBase_getStopwordSet(t_StopwordAnalyzerBase *self)
          {
            ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = self->object.getStopwordSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_StopwordAnalyzerBase_get__stopwordSet(t_StopwordAnalyzerBase *self, void *data)
          {
            ::org::apache::lucene::analysis::util::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getStopwordSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/highlight/Scorer.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/search/highlight/TextFragment.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {

          ::java::lang::Class *Scorer::class$ = NULL;
          jmethodID *Scorer::mids$ = NULL;
          bool Scorer::live$ = false;

          jclass Scorer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/highlight/Scorer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_getFragmentScore_54c6a176] = env->getMethodID(cls, "getFragmentScore", "()F");
              mids$[mid_getTokenScore_54c6a176] = env->getMethodID(cls, "getTokenScore", "()F");
              mids$[mid_init_a65cd6ab] = env->getMethodID(cls, "init", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");
              mids$[mid_startFragment_0335a78a] = env->getMethodID(cls, "startFragment", "(Lorg/apache/lucene/search/highlight/TextFragment;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jfloat Scorer::getFragmentScore() const
          {
            return env->callFloatMethod(this$, mids$[mid_getFragmentScore_54c6a176]);
          }

          jfloat Scorer::getTokenScore() const
          {
            return env->callFloatMethod(this$, mids$[mid_getTokenScore_54c6a176]);
          }

          ::org::apache::lucene::analysis::TokenStream Scorer::init(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_init_a65cd6ab], a0.this$));
          }

          void Scorer::startFragment(const ::org::apache::lucene::search::highlight::TextFragment & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_startFragment_0335a78a], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {
          static PyObject *t_Scorer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Scorer_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Scorer_getFragmentScore(t_Scorer *self);
          static PyObject *t_Scorer_getTokenScore(t_Scorer *self);
          static PyObject *t_Scorer_init(t_Scorer *self, PyObject *arg);
          static PyObject *t_Scorer_startFragment(t_Scorer *self, PyObject *arg);
          static PyObject *t_Scorer_get__fragmentScore(t_Scorer *self, void *data);
          static PyObject *t_Scorer_get__tokenScore(t_Scorer *self, void *data);
          static PyGetSetDef t_Scorer__fields_[] = {
            DECLARE_GET_FIELD(t_Scorer, fragmentScore),
            DECLARE_GET_FIELD(t_Scorer, tokenScore),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Scorer__methods_[] = {
            DECLARE_METHOD(t_Scorer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Scorer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Scorer, getFragmentScore, METH_NOARGS),
            DECLARE_METHOD(t_Scorer, getTokenScore, METH_NOARGS),
            DECLARE_METHOD(t_Scorer, init, METH_O),
            DECLARE_METHOD(t_Scorer, startFragment, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Scorer, t_Scorer, ::java::lang::Object, Scorer, abstract_init, 0, 0, t_Scorer__fields_, 0, 0);

          void t_Scorer::install(PyObject *module)
          {
            installType(&PY_TYPE(Scorer), module, "Scorer", 0);
          }

          void t_Scorer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Scorer).tp_dict, "class_", make_descriptor(Scorer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Scorer).tp_dict, "wrapfn_", make_descriptor(t_Scorer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Scorer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Scorer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Scorer::initializeClass, 1)))
              return NULL;
            return t_Scorer::wrap_Object(Scorer(((t_Scorer *) arg)->object.this$));
          }
          static PyObject *t_Scorer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Scorer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_Scorer_getFragmentScore(t_Scorer *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getFragmentScore());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_Scorer_getTokenScore(t_Scorer *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getTokenScore());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_Scorer_init(t_Scorer *self, PyObject *arg)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.init(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "init", arg);
            return NULL;
          }

          static PyObject *t_Scorer_startFragment(t_Scorer *self, PyObject *arg)
          {
            ::org::apache::lucene::search::highlight::TextFragment a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::search::highlight::TextFragment::initializeClass, &a0))
            {
              OBJ_CALL(self->object.startFragment(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "startFragment", arg);
            return NULL;
          }

          static PyObject *t_Scorer_get__fragmentScore(t_Scorer *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getFragmentScore());
            return PyFloat_FromDouble((double) value);
          }

          static PyObject *t_Scorer_get__tokenScore(t_Scorer *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getTokenScore());
            return PyFloat_FromDouble((double) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/processors/StandardQueryNodeProcessorPipeline.h"
#include "org/apache/lucene/queryparser/flexible/core/config/QueryConfigHandler.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {

              ::java::lang::Class *StandardQueryNodeProcessorPipeline::class$ = NULL;
              jmethodID *StandardQueryNodeProcessorPipeline::mids$ = NULL;
              bool StandardQueryNodeProcessorPipeline::live$ = false;

              jclass StandardQueryNodeProcessorPipeline::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/processors/StandardQueryNodeProcessorPipeline");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_0b1f7132] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/flexible/core/config/QueryConfigHandler;)V");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              StandardQueryNodeProcessorPipeline::StandardQueryNodeProcessorPipeline(const ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler & a0) : ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorPipeline(env->newObject(initializeClass, &mids$, mid_init$_0b1f7132, a0.this$)) {}
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {
              static PyObject *t_StandardQueryNodeProcessorPipeline_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_StandardQueryNodeProcessorPipeline_instance_(PyTypeObject *type, PyObject *arg);
              static int t_StandardQueryNodeProcessorPipeline_init_(t_StandardQueryNodeProcessorPipeline *self, PyObject *args, PyObject *kwds);

              static PyMethodDef t_StandardQueryNodeProcessorPipeline__methods_[] = {
                DECLARE_METHOD(t_StandardQueryNodeProcessorPipeline, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_StandardQueryNodeProcessorPipeline, instance_, METH_O | METH_CLASS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(StandardQueryNodeProcessorPipeline, t_StandardQueryNodeProcessorPipeline, ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorPipeline, StandardQueryNodeProcessorPipeline, t_StandardQueryNodeProcessorPipeline_init_, 0, 0, 0, 0, 0);

              void t_StandardQueryNodeProcessorPipeline::install(PyObject *module)
              {
                installType(&PY_TYPE(StandardQueryNodeProcessorPipeline), module, "StandardQueryNodeProcessorPipeline", 0);
              }

              void t_StandardQueryNodeProcessorPipeline::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(StandardQueryNodeProcessorPipeline).tp_dict, "class_", make_descriptor(StandardQueryNodeProcessorPipeline::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(StandardQueryNodeProcessorPipeline).tp_dict, "wrapfn_", make_descriptor(t_StandardQueryNodeProcessorPipeline::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(StandardQueryNodeProcessorPipeline).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_StandardQueryNodeProcessorPipeline_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, StandardQueryNodeProcessorPipeline::initializeClass, 1)))
                  return NULL;
                return t_StandardQueryNodeProcessorPipeline::wrap_Object(StandardQueryNodeProcessorPipeline(((t_StandardQueryNodeProcessorPipeline *) arg)->object.this$));
              }
              static PyObject *t_StandardQueryNodeProcessorPipeline_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, StandardQueryNodeProcessorPipeline::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_StandardQueryNodeProcessorPipeline_init_(t_StandardQueryNodeProcessorPipeline *self, PyObject *args, PyObject *kwds)
              {
                ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler a0((jobject) NULL);
                StandardQueryNodeProcessorPipeline object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler::initializeClass, &a0))
                {
                  INT_CALL(object = StandardQueryNodeProcessorPipeline(a0));
                  self->object = object;
                }
                else
                {
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/StemmerOverrideFilter.h"
#include "org/apache/lucene/analysis/miscellaneous/StemmerOverrideFilter$StemmerOverrideMap.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *StemmerOverrideFilter::class$ = NULL;
          jmethodID *StemmerOverrideFilter::mids$ = NULL;
          bool StemmerOverrideFilter::live$ = false;

          jclass StemmerOverrideFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/StemmerOverrideFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_d4e7ec87] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;Lorg/apache/lucene/analysis/miscellaneous/StemmerOverrideFilter$StemmerOverrideMap;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          StemmerOverrideFilter::StemmerOverrideFilter(const ::org::apache::lucene::analysis::TokenStream & a0, const ::org::apache::lucene::analysis::miscellaneous::StemmerOverrideFilter$StemmerOverrideMap & a1) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_d4e7ec87, a0.this$, a1.this$)) {}

          jboolean StemmerOverrideFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/analysis/miscellaneous/StemmerOverrideFilter$Builder.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_StemmerOverrideFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_StemmerOverrideFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_StemmerOverrideFilter_init_(t_StemmerOverrideFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_StemmerOverrideFilter_incrementToken(t_StemmerOverrideFilter *self, PyObject *args);

          static PyMethodDef t_StemmerOverrideFilter__methods_[] = {
            DECLARE_METHOD(t_StemmerOverrideFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StemmerOverrideFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StemmerOverrideFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(StemmerOverrideFilter, t_StemmerOverrideFilter, ::org::apache::lucene::analysis::TokenFilter, StemmerOverrideFilter, t_StemmerOverrideFilter_init_, 0, 0, 0, 0, 0);

          void t_StemmerOverrideFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(StemmerOverrideFilter), module, "StemmerOverrideFilter", 0);
            PyDict_SetItemString(PY_TYPE(StemmerOverrideFilter).tp_dict, "Builder", make_descriptor(&PY_TYPE(StemmerOverrideFilter$Builder)));
            PyDict_SetItemString(PY_TYPE(StemmerOverrideFilter).tp_dict, "StemmerOverrideMap", make_descriptor(&PY_TYPE(StemmerOverrideFilter$StemmerOverrideMap)));
          }

          void t_StemmerOverrideFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(StemmerOverrideFilter).tp_dict, "class_", make_descriptor(StemmerOverrideFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(StemmerOverrideFilter).tp_dict, "wrapfn_", make_descriptor(t_StemmerOverrideFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(StemmerOverrideFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_StemmerOverrideFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, StemmerOverrideFilter::initializeClass, 1)))
              return NULL;
            return t_StemmerOverrideFilter::wrap_Object(StemmerOverrideFilter(((t_StemmerOverrideFilter *) arg)->object.this$));
          }
          static PyObject *t_StemmerOverrideFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, StemmerOverrideFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_StemmerOverrideFilter_init_(t_StemmerOverrideFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::miscellaneous::StemmerOverrideFilter$StemmerOverrideMap a1((jobject) NULL);
            StemmerOverrideFilter object((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::analysis::miscellaneous::StemmerOverrideFilter$StemmerOverrideMap::initializeClass, &a0, &a1))
            {
              INT_CALL(object = StemmerOverrideFilter(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_StemmerOverrideFilter_incrementToken(t_StemmerOverrideFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(StemmerOverrideFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/FieldableNode.h"
#include "java/lang/CharSequence.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {

              ::java::lang::Class *FieldableNode::class$ = NULL;
              jmethodID *FieldableNode::mids$ = NULL;
              bool FieldableNode::live$ = false;

              jclass FieldableNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/nodes/FieldableNode");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_getField_e0adba2f] = env->getMethodID(cls, "getField", "()Ljava/lang/CharSequence;");
                  mids$[mid_setField_a8afc64a] = env->getMethodID(cls, "setField", "(Ljava/lang/CharSequence;)V");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              ::java::lang::CharSequence FieldableNode::getField() const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_getField_e0adba2f]));
              }

              void FieldableNode::setField(const ::java::lang::CharSequence & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setField_a8afc64a], a0.this$);
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {
              static PyObject *t_FieldableNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_FieldableNode_instance_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_FieldableNode_getField(t_FieldableNode *self);
              static PyObject *t_FieldableNode_setField(t_FieldableNode *self, PyObject *arg);
              static PyObject *t_FieldableNode_get__field(t_FieldableNode *self, void *data);
              static int t_FieldableNode_set__field(t_FieldableNode *self, PyObject *arg, void *data);
              static PyGetSetDef t_FieldableNode__fields_[] = {
                DECLARE_GETSET_FIELD(t_FieldableNode, field),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_FieldableNode__methods_[] = {
                DECLARE_METHOD(t_FieldableNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_FieldableNode, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_FieldableNode, getField, METH_NOARGS),
                DECLARE_METHOD(t_FieldableNode, setField, METH_O),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(FieldableNode, t_FieldableNode, ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode, FieldableNode, abstract_init, 0, 0, t_FieldableNode__fields_, 0, 0);

              void t_FieldableNode::install(PyObject *module)
              {
                installType(&PY_TYPE(FieldableNode), module, "FieldableNode", 0);
              }

              void t_FieldableNode::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(FieldableNode).tp_dict, "class_", make_descriptor(FieldableNode::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(FieldableNode).tp_dict, "wrapfn_", make_descriptor(t_FieldableNode::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(FieldableNode).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_FieldableNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, FieldableNode::initializeClass, 1)))
                  return NULL;
                return t_FieldableNode::wrap_Object(FieldableNode(((t_FieldableNode *) arg)->object.this$));
              }
              static PyObject *t_FieldableNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, FieldableNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static PyObject *t_FieldableNode_getField(t_FieldableNode *self)
              {
                ::java::lang::CharSequence result((jobject) NULL);
                OBJ_CALL(result = self->object.getField());
                return ::java::lang::t_CharSequence::wrap_Object(result);
              }

              static PyObject *t_FieldableNode_setField(t_FieldableNode *self, PyObject *arg)
              {
                ::java::lang::CharSequence a0((jobject) NULL);

                if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
                {
                  OBJ_CALL(self->object.setField(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setField", arg);
                return NULL;
              }

              static PyObject *t_FieldableNode_get__field(t_FieldableNode *self, void *data)
              {
                ::java::lang::CharSequence value((jobject) NULL);
                OBJ_CALL(value = self->object.getField());
                return ::java::lang::t_CharSequence::wrap_Object(value);
              }
              static int t_FieldableNode_set__field(t_FieldableNode *self, PyObject *arg, void *data)
              {
                {
                  ::java::lang::CharSequence value((jobject) NULL);
                  if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &value))
                  {
                    INT_CALL(self->object.setField(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "field", arg);
                return -1;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/PatternAnalyzer.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "java/lang/Class.h"
#include "java/io/Reader.h"
#include "java/util/regex/Pattern.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/analysis/Analyzer$TokenStreamComponents.h"
#include "java/lang/String.h"
#include "org/apache/lucene/util/Version.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *PatternAnalyzer::class$ = NULL;
          jmethodID *PatternAnalyzer::mids$ = NULL;
          bool PatternAnalyzer::live$ = false;
          PatternAnalyzer *PatternAnalyzer::DEFAULT_ANALYZER = NULL;
          PatternAnalyzer *PatternAnalyzer::EXTENDED_ANALYZER = NULL;
          ::java::util::regex::Pattern *PatternAnalyzer::NON_WORD_PATTERN = NULL;
          ::java::util::regex::Pattern *PatternAnalyzer::WHITESPACE_PATTERN = NULL;

          jclass PatternAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/PatternAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_ed1ef6b5] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Ljava/util/regex/Pattern;ZLorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");
              mids$[mid_createComponents_317b7f84] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;Ljava/lang/String;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_ANALYZER = new PatternAnalyzer(env->getStaticObjectField(cls, "DEFAULT_ANALYZER", "Lorg/apache/lucene/analysis/miscellaneous/PatternAnalyzer;"));
              EXTENDED_ANALYZER = new PatternAnalyzer(env->getStaticObjectField(cls, "EXTENDED_ANALYZER", "Lorg/apache/lucene/analysis/miscellaneous/PatternAnalyzer;"));
              NON_WORD_PATTERN = new ::java::util::regex::Pattern(env->getStaticObjectField(cls, "NON_WORD_PATTERN", "Ljava/util/regex/Pattern;"));
              WHITESPACE_PATTERN = new ::java::util::regex::Pattern(env->getStaticObjectField(cls, "WHITESPACE_PATTERN", "Ljava/util/regex/Pattern;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PatternAnalyzer::PatternAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::java::util::regex::Pattern & a1, jboolean a2, const ::org::apache::lucene::analysis::util::CharArraySet & a3) : ::org::apache::lucene::analysis::Analyzer(env->newObject(initializeClass, &mids$, mid_init$_ed1ef6b5, a0.this$, a1.this$, a2, a3.this$)) {}

          ::org::apache::lucene::analysis::Analyzer$TokenStreamComponents PatternAnalyzer::createComponents(const ::java::lang::String & a0, const ::java::io::Reader & a1) const
          {
            return ::org::apache::lucene::analysis::Analyzer$TokenStreamComponents(env->callObjectMethod(this$, mids$[mid_createComponents_1be39cae], a0.this$, a1.this$));
          }

          ::org::apache::lucene::analysis::Analyzer$TokenStreamComponents PatternAnalyzer::createComponents(const ::java::lang::String & a0, const ::java::io::Reader & a1, const ::java::lang::String & a2) const
          {
            return ::org::apache::lucene::analysis::Analyzer$TokenStreamComponents(env->callObjectMethod(this$, mids$[mid_createComponents_317b7f84], a0.this$, a1.this$, a2.this$));
          }

          jboolean PatternAnalyzer::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          jint PatternAnalyzer::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_PatternAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PatternAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PatternAnalyzer_init_(t_PatternAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PatternAnalyzer_createComponents(t_PatternAnalyzer *self, PyObject *args);
          static PyObject *t_PatternAnalyzer_equals(t_PatternAnalyzer *self, PyObject *args);
          static PyObject *t_PatternAnalyzer_hashCode(t_PatternAnalyzer *self, PyObject *args);

          static PyMethodDef t_PatternAnalyzer__methods_[] = {
            DECLARE_METHOD(t_PatternAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PatternAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PatternAnalyzer, createComponents, METH_VARARGS),
            DECLARE_METHOD(t_PatternAnalyzer, equals, METH_VARARGS),
            DECLARE_METHOD(t_PatternAnalyzer, hashCode, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PatternAnalyzer, t_PatternAnalyzer, ::org::apache::lucene::analysis::Analyzer, PatternAnalyzer, t_PatternAnalyzer_init_, 0, 0, 0, 0, 0);

          void t_PatternAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(PatternAnalyzer), module, "PatternAnalyzer", 0);
          }

          void t_PatternAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PatternAnalyzer).tp_dict, "class_", make_descriptor(PatternAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PatternAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_PatternAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PatternAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(PatternAnalyzer::initializeClass);
            PyDict_SetItemString(PY_TYPE(PatternAnalyzer).tp_dict, "DEFAULT_ANALYZER", make_descriptor(t_PatternAnalyzer::wrap_Object(*PatternAnalyzer::DEFAULT_ANALYZER)));
            PyDict_SetItemString(PY_TYPE(PatternAnalyzer).tp_dict, "EXTENDED_ANALYZER", make_descriptor(t_PatternAnalyzer::wrap_Object(*PatternAnalyzer::EXTENDED_ANALYZER)));
            PyDict_SetItemString(PY_TYPE(PatternAnalyzer).tp_dict, "NON_WORD_PATTERN", make_descriptor(::java::util::regex::t_Pattern::wrap_Object(*PatternAnalyzer::NON_WORD_PATTERN)));
            PyDict_SetItemString(PY_TYPE(PatternAnalyzer).tp_dict, "WHITESPACE_PATTERN", make_descriptor(::java::util::regex::t_Pattern::wrap_Object(*PatternAnalyzer::WHITESPACE_PATTERN)));
          }

          static PyObject *t_PatternAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PatternAnalyzer::initializeClass, 1)))
              return NULL;
            return t_PatternAnalyzer::wrap_Object(PatternAnalyzer(((t_PatternAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_PatternAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PatternAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PatternAnalyzer_init_(t_PatternAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::util::Version a0((jobject) NULL);
            ::java::util::regex::Pattern a1((jobject) NULL);
            jboolean a2;
            ::org::apache::lucene::analysis::util::CharArraySet a3((jobject) NULL);
            PyTypeObject **p3;
            PatternAnalyzer object((jobject) NULL);

            if (!parseArgs(args, "kkZK", ::org::apache::lucene::util::Version::initializeClass, ::java::util::regex::Pattern::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &a1, &a2, &a3, &p3, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
            {
              INT_CALL(object = PatternAnalyzer(a0, a1, a2, a3));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PatternAnalyzer_createComponents(t_PatternAnalyzer *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::java::lang::String a0((jobject) NULL);
                ::java::io::Reader a1((jobject) NULL);
                ::org::apache::lucene::analysis::Analyzer$TokenStreamComponents result((jobject) NULL);

                if (!parseArgs(args, "sk", ::java::io::Reader::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(result = self->object.createComponents(a0, a1));
                  return ::org::apache::lucene::analysis::t_Analyzer$TokenStreamComponents::wrap_Object(result);
                }
              }
              break;
             case 3:
              {
                ::java::lang::String a0((jobject) NULL);
                ::java::io::Reader a1((jobject) NULL);
                ::java::lang::String a2((jobject) NULL);
                ::org::apache::lucene::analysis::Analyzer$TokenStreamComponents result((jobject) NULL);

                if (!parseArgs(args, "sks", ::java::io::Reader::initializeClass, &a0, &a1, &a2))
                {
                  OBJ_CALL(result = self->object.createComponents(a0, a1, a2));
                  return ::org::apache::lucene::analysis::t_Analyzer$TokenStreamComponents::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "createComponents", args);
            return NULL;
          }

          static PyObject *t_PatternAnalyzer_equals(t_PatternAnalyzer *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(PatternAnalyzer), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_PatternAnalyzer_hashCode(t_PatternAnalyzer *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(PatternAnalyzer), (PyObject *) self, "hashCode", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/tokenattributes/CharTermAttributeImpl.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "java/lang/CharSequence.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/analysis/tokenattributes/CharTermAttribute.h"
#include "org/apache/lucene/analysis/tokenattributes/TermToBytesRefAttribute.h"
#include "org/apache/lucene/util/AttributeReflector.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {

          ::java::lang::Class *CharTermAttributeImpl::class$ = NULL;
          jmethodID *CharTermAttributeImpl::mids$ = NULL;
          bool CharTermAttributeImpl::live$ = false;

          jclass CharTermAttributeImpl::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/tokenattributes/CharTermAttributeImpl");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_append_2b3c6943] = env->getMethodID(cls, "append", "(Lorg/apache/lucene/analysis/tokenattributes/CharTermAttribute;)Lorg/apache/lucene/analysis/tokenattributes/CharTermAttribute;");
              mids$[mid_append_8fff6b0d] = env->getMethodID(cls, "append", "(Ljava/lang/StringBuilder;)Lorg/apache/lucene/analysis/tokenattributes/CharTermAttribute;");
              mids$[mid_append_ec8fc27b] = env->getMethodID(cls, "append", "(C)Lorg/apache/lucene/analysis/tokenattributes/CharTermAttribute;");
              mids$[mid_append_950755e3] = env->getMethodID(cls, "append", "(Ljava/lang/CharSequence;)Lorg/apache/lucene/analysis/tokenattributes/CharTermAttribute;");
              mids$[mid_append_727d3f8d] = env->getMethodID(cls, "append", "(Ljava/lang/String;)Lorg/apache/lucene/analysis/tokenattributes/CharTermAttribute;");
              mids$[mid_append_6505d5ab] = env->getMethodID(cls, "append", "(Ljava/lang/CharSequence;II)Lorg/apache/lucene/analysis/tokenattributes/CharTermAttribute;");
              mids$[mid_buffer_dab10e7f] = env->getMethodID(cls, "buffer", "()[C");
              mids$[mid_charAt_39c7bd29] = env->getMethodID(cls, "charAt", "(I)C");
              mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
              mids$[mid_clone_c3b245d5] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/analysis/tokenattributes/CharTermAttributeImpl;");
              mids$[mid_copyBuffer_6f0bb356] = env->getMethodID(cls, "copyBuffer", "([CII)V");
              mids$[mid_copyTo_d86caa9f] = env->getMethodID(cls, "copyTo", "(Lorg/apache/lucene/util/AttributeImpl;)V");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_fillBytesRef_54c6a166] = env->getMethodID(cls, "fillBytesRef", "()V");
              mids$[mid_getBytesRef_4ae19461] = env->getMethodID(cls, "getBytesRef", "()Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_length_54c6a179] = env->getMethodID(cls, "length", "()I");
              mids$[mid_reflectWith_5f3f5102] = env->getMethodID(cls, "reflectWith", "(Lorg/apache/lucene/util/AttributeReflector;)V");
              mids$[mid_resizeBuffer_b4292e99] = env->getMethodID(cls, "resizeBuffer", "(I)[C");
              mids$[mid_setEmpty_211a9257] = env->getMethodID(cls, "setEmpty", "()Lorg/apache/lucene/analysis/tokenattributes/CharTermAttribute;");
              mids$[mid_setLength_da4913e5] = env->getMethodID(cls, "setLength", "(I)Lorg/apache/lucene/analysis/tokenattributes/CharTermAttribute;");
              mids$[mid_subSequence_f88dfd57] = env->getMethodID(cls, "subSequence", "(II)Ljava/lang/CharSequence;");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CharTermAttributeImpl::CharTermAttributeImpl() : ::org::apache::lucene::util::AttributeImpl(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute CharTermAttributeImpl::append(const ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute & a0) const
          {
            return ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute(env->callObjectMethod(this$, mids$[mid_append_2b3c6943], a0.this$));
          }

          ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute CharTermAttributeImpl::append(const ::java::lang::StringBuilder & a0) const
          {
            return ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute(env->callObjectMethod(this$, mids$[mid_append_8fff6b0d], a0.this$));
          }

          ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute CharTermAttributeImpl::append(jchar a0) const
          {
            return ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute(env->callObjectMethod(this$, mids$[mid_append_ec8fc27b], a0));
          }

          ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute CharTermAttributeImpl::append(const ::java::lang::CharSequence & a0) const
          {
            return ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute(env->callObjectMethod(this$, mids$[mid_append_950755e3], a0.this$));
          }

          ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute CharTermAttributeImpl::append(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute(env->callObjectMethod(this$, mids$[mid_append_727d3f8d], a0.this$));
          }

          ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute CharTermAttributeImpl::append(const ::java::lang::CharSequence & a0, jint a1, jint a2) const
          {
            return ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute(env->callObjectMethod(this$, mids$[mid_append_6505d5ab], a0.this$, a1, a2));
          }

          JArray< jchar > CharTermAttributeImpl::buffer() const
          {
            return JArray< jchar >(env->callObjectMethod(this$, mids$[mid_buffer_dab10e7f]));
          }

          jchar CharTermAttributeImpl::charAt(jint a0) const
          {
            return env->callCharMethod(this$, mids$[mid_charAt_39c7bd29], a0);
          }

          void CharTermAttributeImpl::clear() const
          {
            env->callVoidMethod(this$, mids$[mid_clear_54c6a166]);
          }

          CharTermAttributeImpl CharTermAttributeImpl::clone() const
          {
            return CharTermAttributeImpl(env->callObjectMethod(this$, mids$[mid_clone_c3b245d5]));
          }

          void CharTermAttributeImpl::copyBuffer(const JArray< jchar > & a0, jint a1, jint a2) const
          {
            env->callVoidMethod(this$, mids$[mid_copyBuffer_6f0bb356], a0.this$, a1, a2);
          }

          void CharTermAttributeImpl::copyTo(const ::org::apache::lucene::util::AttributeImpl & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_copyTo_d86caa9f], a0.this$);
          }

          jboolean CharTermAttributeImpl::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          void CharTermAttributeImpl::fillBytesRef() const
          {
            env->callVoidMethod(this$, mids$[mid_fillBytesRef_54c6a166]);
          }

          ::org::apache::lucene::util::BytesRef CharTermAttributeImpl::getBytesRef() const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_getBytesRef_4ae19461]));
          }

          jint CharTermAttributeImpl::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          jint CharTermAttributeImpl::length() const
          {
            return env->callIntMethod(this$, mids$[mid_length_54c6a179]);
          }

          void CharTermAttributeImpl::reflectWith(const ::org::apache::lucene::util::AttributeReflector & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_reflectWith_5f3f5102], a0.this$);
          }

          JArray< jchar > CharTermAttributeImpl::resizeBuffer(jint a0) const
          {
            return JArray< jchar >(env->callObjectMethod(this$, mids$[mid_resizeBuffer_b4292e99], a0));
          }

          ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute CharTermAttributeImpl::setEmpty() const
          {
            return ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute(env->callObjectMethod(this$, mids$[mid_setEmpty_211a9257]));
          }

          ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute CharTermAttributeImpl::setLength(jint a0) const
          {
            return ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute(env->callObjectMethod(this$, mids$[mid_setLength_da4913e5], a0));
          }

          ::java::lang::CharSequence CharTermAttributeImpl::subSequence(jint a0, jint a1) const
          {
            return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_subSequence_f88dfd57], a0, a1));
          }

          ::java::lang::String CharTermAttributeImpl::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {
          static PyObject *t_CharTermAttributeImpl_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CharTermAttributeImpl_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CharTermAttributeImpl_init_(t_CharTermAttributeImpl *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CharTermAttributeImpl_append(t_CharTermAttributeImpl *self, PyObject *args);
          static PyObject *t_CharTermAttributeImpl_buffer(t_CharTermAttributeImpl *self);
          static PyObject *t_CharTermAttributeImpl_charAt(t_CharTermAttributeImpl *self, PyObject *arg);
          static PyObject *t_CharTermAttributeImpl_clear(t_CharTermAttributeImpl *self, PyObject *args);
          static PyObject *t_CharTermAttributeImpl_clone(t_CharTermAttributeImpl *self, PyObject *args);
          static PyObject *t_CharTermAttributeImpl_copyBuffer(t_CharTermAttributeImpl *self, PyObject *args);
          static PyObject *t_CharTermAttributeImpl_copyTo(t_CharTermAttributeImpl *self, PyObject *args);
          static PyObject *t_CharTermAttributeImpl_equals(t_CharTermAttributeImpl *self, PyObject *args);
          static PyObject *t_CharTermAttributeImpl_fillBytesRef(t_CharTermAttributeImpl *self);
          static PyObject *t_CharTermAttributeImpl_getBytesRef(t_CharTermAttributeImpl *self);
          static PyObject *t_CharTermAttributeImpl_hashCode(t_CharTermAttributeImpl *self, PyObject *args);
          static PyObject *t_CharTermAttributeImpl_length(t_CharTermAttributeImpl *self);
          static PyObject *t_CharTermAttributeImpl_reflectWith(t_CharTermAttributeImpl *self, PyObject *args);
          static PyObject *t_CharTermAttributeImpl_resizeBuffer(t_CharTermAttributeImpl *self, PyObject *arg);
          static PyObject *t_CharTermAttributeImpl_setEmpty(t_CharTermAttributeImpl *self);
          static PyObject *t_CharTermAttributeImpl_setLength(t_CharTermAttributeImpl *self, PyObject *arg);
          static PyObject *t_CharTermAttributeImpl_subSequence(t_CharTermAttributeImpl *self, PyObject *args);
          static PyObject *t_CharTermAttributeImpl_toString(t_CharTermAttributeImpl *self, PyObject *args);
          static PyObject *t_CharTermAttributeImpl_get__bytesRef(t_CharTermAttributeImpl *self, void *data);
          static PyGetSetDef t_CharTermAttributeImpl__fields_[] = {
            DECLARE_GET_FIELD(t_CharTermAttributeImpl, bytesRef),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_CharTermAttributeImpl__methods_[] = {
            DECLARE_METHOD(t_CharTermAttributeImpl, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CharTermAttributeImpl, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CharTermAttributeImpl, append, METH_VARARGS),
            DECLARE_METHOD(t_CharTermAttributeImpl, buffer, METH_NOARGS),
            DECLARE_METHOD(t_CharTermAttributeImpl, charAt, METH_O),
            DECLARE_METHOD(t_CharTermAttributeImpl, clear, METH_VARARGS),
            DECLARE_METHOD(t_CharTermAttributeImpl, clone, METH_VARARGS),
            DECLARE_METHOD(t_CharTermAttributeImpl, copyBuffer, METH_VARARGS),
            DECLARE_METHOD(t_CharTermAttributeImpl, copyTo, METH_VARARGS),
            DECLARE_METHOD(t_CharTermAttributeImpl, equals, METH_VARARGS),
            DECLARE_METHOD(t_CharTermAttributeImpl, fillBytesRef, METH_NOARGS),
            DECLARE_METHOD(t_CharTermAttributeImpl, getBytesRef, METH_NOARGS),
            DECLARE_METHOD(t_CharTermAttributeImpl, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_CharTermAttributeImpl, length, METH_NOARGS),
            DECLARE_METHOD(t_CharTermAttributeImpl, reflectWith, METH_VARARGS),
            DECLARE_METHOD(t_CharTermAttributeImpl, resizeBuffer, METH_O),
            DECLARE_METHOD(t_CharTermAttributeImpl, setEmpty, METH_NOARGS),
            DECLARE_METHOD(t_CharTermAttributeImpl, setLength, METH_O),
            DECLARE_METHOD(t_CharTermAttributeImpl, subSequence, METH_VARARGS),
            DECLARE_METHOD(t_CharTermAttributeImpl, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CharTermAttributeImpl, t_CharTermAttributeImpl, ::org::apache::lucene::util::AttributeImpl, CharTermAttributeImpl, t_CharTermAttributeImpl_init_, 0, 0, t_CharTermAttributeImpl__fields_, 0, 0);

          void t_CharTermAttributeImpl::install(PyObject *module)
          {
            installType(&PY_TYPE(CharTermAttributeImpl), module, "CharTermAttributeImpl", 0);
          }

          void t_CharTermAttributeImpl::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CharTermAttributeImpl).tp_dict, "class_", make_descriptor(CharTermAttributeImpl::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CharTermAttributeImpl).tp_dict, "wrapfn_", make_descriptor(t_CharTermAttributeImpl::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CharTermAttributeImpl).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CharTermAttributeImpl_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CharTermAttributeImpl::initializeClass, 1)))
              return NULL;
            return t_CharTermAttributeImpl::wrap_Object(CharTermAttributeImpl(((t_CharTermAttributeImpl *) arg)->object.this$));
          }
          static PyObject *t_CharTermAttributeImpl_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CharTermAttributeImpl::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CharTermAttributeImpl_init_(t_CharTermAttributeImpl *self, PyObject *args, PyObject *kwds)
          {
            CharTermAttributeImpl object((jobject) NULL);

            INT_CALL(object = CharTermAttributeImpl());
            self->object = object;

            return 0;
          }

          static PyObject *t_CharTermAttributeImpl_append(t_CharTermAttributeImpl *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute a0((jobject) NULL);
                ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.append(a0));
                  return ::org::apache::lucene::analysis::tokenattributes::t_CharTermAttribute::wrap_Object(result);
                }
              }
              {
                ::java::lang::StringBuilder a0((jobject) NULL);
                ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute result((jobject) NULL);

                if (!parseArgs(args, "k", ::java::lang::StringBuilder::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.append(a0));
                  return ::org::apache::lucene::analysis::tokenattributes::t_CharTermAttribute::wrap_Object(result);
                }
              }
              {
                jchar a0;
                ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute result((jobject) NULL);

                if (!parseArgs(args, "C", &a0))
                {
                  OBJ_CALL(result = self->object.append(a0));
                  return ::org::apache::lucene::analysis::tokenattributes::t_CharTermAttribute::wrap_Object(result);
                }
              }
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute result((jobject) NULL);

                if (!parseArgs(args, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
                {
                  OBJ_CALL(result = self->object.append(a0));
                  return ::org::apache::lucene::analysis::tokenattributes::t_CharTermAttribute::wrap_Object(result);
                }
              }
              {
                ::java::lang::String a0((jobject) NULL);
                ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute result((jobject) NULL);

                if (!parseArgs(args, "s", &a0))
                {
                  OBJ_CALL(result = self->object.append(a0));
                  return ::org::apache::lucene::analysis::tokenattributes::t_CharTermAttribute::wrap_Object(result);
                }
              }
              break;
             case 3:
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                jint a1;
                jint a2;
                ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute result((jobject) NULL);

                if (!parseArgs(args, "OII", &::java::lang::PY_TYPE(CharSequence), &a0, &a1, &a2))
                {
                  OBJ_CALL(result = self->object.append(a0, a1, a2));
                  return ::org::apache::lucene::analysis::tokenattributes::t_CharTermAttribute::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "append", args);
            return NULL;
          }

          static PyObject *t_CharTermAttributeImpl_buffer(t_CharTermAttributeImpl *self)
          {
            JArray< jchar > result((jobject) NULL);
            OBJ_CALL(result = self->object.buffer());
            return result.wrap();
          }

          static PyObject *t_CharTermAttributeImpl_charAt(t_CharTermAttributeImpl *self, PyObject *arg)
          {
            jint a0;
            jchar result;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.charAt(a0));
              return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
            }

            PyErr_SetArgsError((PyObject *) self, "charAt", arg);
            return NULL;
          }

          static PyObject *t_CharTermAttributeImpl_clear(t_CharTermAttributeImpl *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.clear());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(CharTermAttributeImpl), (PyObject *) self, "clear", args, 2);
          }

          static PyObject *t_CharTermAttributeImpl_clone(t_CharTermAttributeImpl *self, PyObject *args)
          {
            CharTermAttributeImpl result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.clone());
              return t_CharTermAttributeImpl::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(CharTermAttributeImpl), (PyObject *) self, "clone", args, 2);
          }

          static PyObject *t_CharTermAttributeImpl_copyBuffer(t_CharTermAttributeImpl *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint a2;

            if (!parseArgs(args, "[CII", &a0, &a1, &a2))
            {
              OBJ_CALL(self->object.copyBuffer(a0, a1, a2));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "copyBuffer", args);
            return NULL;
          }

          static PyObject *t_CharTermAttributeImpl_copyTo(t_CharTermAttributeImpl *self, PyObject *args)
          {
            ::org::apache::lucene::util::AttributeImpl a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::util::AttributeImpl::initializeClass, &a0))
            {
              OBJ_CALL(self->object.copyTo(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(CharTermAttributeImpl), (PyObject *) self, "copyTo", args, 2);
          }

          static PyObject *t_CharTermAttributeImpl_equals(t_CharTermAttributeImpl *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(CharTermAttributeImpl), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_CharTermAttributeImpl_fillBytesRef(t_CharTermAttributeImpl *self)
          {
            OBJ_CALL(self->object.fillBytesRef());
            Py_RETURN_NONE;
          }

          static PyObject *t_CharTermAttributeImpl_getBytesRef(t_CharTermAttributeImpl *self)
          {
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);
            OBJ_CALL(result = self->object.getBytesRef());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          static PyObject *t_CharTermAttributeImpl_hashCode(t_CharTermAttributeImpl *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(CharTermAttributeImpl), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_CharTermAttributeImpl_length(t_CharTermAttributeImpl *self)
          {
            jint result;
            OBJ_CALL(result = self->object.length());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_CharTermAttributeImpl_reflectWith(t_CharTermAttributeImpl *self, PyObject *args)
          {
            ::org::apache::lucene::util::AttributeReflector a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::util::AttributeReflector::initializeClass, &a0))
            {
              OBJ_CALL(self->object.reflectWith(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(CharTermAttributeImpl), (PyObject *) self, "reflectWith", args, 2);
          }

          static PyObject *t_CharTermAttributeImpl_resizeBuffer(t_CharTermAttributeImpl *self, PyObject *arg)
          {
            jint a0;
            JArray< jchar > result((jobject) NULL);

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.resizeBuffer(a0));
              return result.wrap();
            }

            PyErr_SetArgsError((PyObject *) self, "resizeBuffer", arg);
            return NULL;
          }

          static PyObject *t_CharTermAttributeImpl_setEmpty(t_CharTermAttributeImpl *self)
          {
            ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute result((jobject) NULL);
            OBJ_CALL(result = self->object.setEmpty());
            return ::org::apache::lucene::analysis::tokenattributes::t_CharTermAttribute::wrap_Object(result);
          }

          static PyObject *t_CharTermAttributeImpl_setLength(t_CharTermAttributeImpl *self, PyObject *arg)
          {
            jint a0;
            ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute result((jobject) NULL);

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.setLength(a0));
              return ::org::apache::lucene::analysis::tokenattributes::t_CharTermAttribute::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "setLength", arg);
            return NULL;
          }

          static PyObject *t_CharTermAttributeImpl_subSequence(t_CharTermAttributeImpl *self, PyObject *args)
          {
            jint a0;
            jint a1;
            ::java::lang::CharSequence result((jobject) NULL);

            if (!parseArgs(args, "II", &a0, &a1))
            {
              OBJ_CALL(result = self->object.subSequence(a0, a1));
              return ::java::lang::t_CharSequence::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "subSequence", args);
            return NULL;
          }

          static PyObject *t_CharTermAttributeImpl_toString(t_CharTermAttributeImpl *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(CharTermAttributeImpl), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_CharTermAttributeImpl_get__bytesRef(t_CharTermAttributeImpl *self, void *data)
          {
            ::org::apache::lucene::util::BytesRef value((jobject) NULL);
            OBJ_CALL(value = self->object.getBytesRef());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/sandbox/queries/DuplicateFilter$ProcessingMode.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace sandbox {
        namespace queries {

          ::java::lang::Class *DuplicateFilter$ProcessingMode::class$ = NULL;
          jmethodID *DuplicateFilter$ProcessingMode::mids$ = NULL;
          bool DuplicateFilter$ProcessingMode::live$ = false;
          DuplicateFilter$ProcessingMode *DuplicateFilter$ProcessingMode::PM_FAST_INVALIDATION = NULL;
          DuplicateFilter$ProcessingMode *DuplicateFilter$ProcessingMode::PM_FULL_VALIDATION = NULL;

          jclass DuplicateFilter$ProcessingMode::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/sandbox/queries/DuplicateFilter$ProcessingMode");

              mids$ = new jmethodID[max_mid];
              mids$[mid_valueOf_5b1a28e1] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/sandbox/queries/DuplicateFilter$ProcessingMode;");
              mids$[mid_values_e8e814df] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/sandbox/queries/DuplicateFilter$ProcessingMode;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              PM_FAST_INVALIDATION = new DuplicateFilter$ProcessingMode(env->getStaticObjectField(cls, "PM_FAST_INVALIDATION", "Lorg/apache/lucene/sandbox/queries/DuplicateFilter$ProcessingMode;"));
              PM_FULL_VALIDATION = new DuplicateFilter$ProcessingMode(env->getStaticObjectField(cls, "PM_FULL_VALIDATION", "Lorg/apache/lucene/sandbox/queries/DuplicateFilter$ProcessingMode;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          DuplicateFilter$ProcessingMode DuplicateFilter$ProcessingMode::valueOf(const ::java::lang::String & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return DuplicateFilter$ProcessingMode(env->callStaticObjectMethod(cls, mids$[mid_valueOf_5b1a28e1], a0.this$));
          }

          JArray< DuplicateFilter$ProcessingMode > DuplicateFilter$ProcessingMode::values()
          {
            jclass cls = env->getClass(initializeClass);
            return JArray< DuplicateFilter$ProcessingMode >(env->callStaticObjectMethod(cls, mids$[mid_values_e8e814df]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace sandbox {
        namespace queries {
          static PyObject *t_DuplicateFilter$ProcessingMode_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DuplicateFilter$ProcessingMode_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DuplicateFilter$ProcessingMode_of_(t_DuplicateFilter$ProcessingMode *self, PyObject *args);
          static PyObject *t_DuplicateFilter$ProcessingMode_valueOf(PyTypeObject *type, PyObject *args);
          static PyObject *t_DuplicateFilter$ProcessingMode_values(PyTypeObject *type);
          static PyObject *t_DuplicateFilter$ProcessingMode_get__parameters_(t_DuplicateFilter$ProcessingMode *self, void *data);
          static PyGetSetDef t_DuplicateFilter$ProcessingMode__fields_[] = {
            DECLARE_GET_FIELD(t_DuplicateFilter$ProcessingMode, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_DuplicateFilter$ProcessingMode__methods_[] = {
            DECLARE_METHOD(t_DuplicateFilter$ProcessingMode, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DuplicateFilter$ProcessingMode, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DuplicateFilter$ProcessingMode, of_, METH_VARARGS),
            DECLARE_METHOD(t_DuplicateFilter$ProcessingMode, valueOf, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_DuplicateFilter$ProcessingMode, values, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(DuplicateFilter$ProcessingMode, t_DuplicateFilter$ProcessingMode, ::java::lang::Enum, DuplicateFilter$ProcessingMode, abstract_init, 0, 0, t_DuplicateFilter$ProcessingMode__fields_, 0, 0);
          PyObject *t_DuplicateFilter$ProcessingMode::wrap_Object(const DuplicateFilter$ProcessingMode& object, PyTypeObject *p0)
          {
            PyObject *obj = t_DuplicateFilter$ProcessingMode::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_DuplicateFilter$ProcessingMode *self = (t_DuplicateFilter$ProcessingMode *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_DuplicateFilter$ProcessingMode::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_DuplicateFilter$ProcessingMode::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_DuplicateFilter$ProcessingMode *self = (t_DuplicateFilter$ProcessingMode *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_DuplicateFilter$ProcessingMode::install(PyObject *module)
          {
            installType(&PY_TYPE(DuplicateFilter$ProcessingMode), module, "DuplicateFilter$ProcessingMode", 0);
          }

          void t_DuplicateFilter$ProcessingMode::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(DuplicateFilter$ProcessingMode).tp_dict, "class_", make_descriptor(DuplicateFilter$ProcessingMode::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(DuplicateFilter$ProcessingMode).tp_dict, "wrapfn_", make_descriptor(t_DuplicateFilter$ProcessingMode::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(DuplicateFilter$ProcessingMode).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(DuplicateFilter$ProcessingMode::initializeClass);
            PyDict_SetItemString(PY_TYPE(DuplicateFilter$ProcessingMode).tp_dict, "PM_FAST_INVALIDATION", make_descriptor(t_DuplicateFilter$ProcessingMode::wrap_Object(*DuplicateFilter$ProcessingMode::PM_FAST_INVALIDATION)));
            PyDict_SetItemString(PY_TYPE(DuplicateFilter$ProcessingMode).tp_dict, "PM_FULL_VALIDATION", make_descriptor(t_DuplicateFilter$ProcessingMode::wrap_Object(*DuplicateFilter$ProcessingMode::PM_FULL_VALIDATION)));
          }

          static PyObject *t_DuplicateFilter$ProcessingMode_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, DuplicateFilter$ProcessingMode::initializeClass, 1)))
              return NULL;
            return t_DuplicateFilter$ProcessingMode::wrap_Object(DuplicateFilter$ProcessingMode(((t_DuplicateFilter$ProcessingMode *) arg)->object.this$));
          }
          static PyObject *t_DuplicateFilter$ProcessingMode_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, DuplicateFilter$ProcessingMode::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_DuplicateFilter$ProcessingMode_of_(t_DuplicateFilter$ProcessingMode *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static PyObject *t_DuplicateFilter$ProcessingMode_valueOf(PyTypeObject *type, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            DuplicateFilter$ProcessingMode result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::sandbox::queries::DuplicateFilter$ProcessingMode::valueOf(a0));
              return t_DuplicateFilter$ProcessingMode::wrap_Object(result);
            }

            return callSuper(type, "valueOf", args, 2);
          }

          static PyObject *t_DuplicateFilter$ProcessingMode_values(PyTypeObject *type)
          {
            JArray< DuplicateFilter$ProcessingMode > result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::sandbox::queries::DuplicateFilter$ProcessingMode::values());
            return JArray<jobject>(result.this$).wrap(t_DuplicateFilter$ProcessingMode::wrap_jobject);
          }
          static PyObject *t_DuplicateFilter$ProcessingMode_get__parameters_(t_DuplicateFilter$ProcessingMode *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/fr/FrenchAnalyzer.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "java/lang/String.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fr {

          ::java::lang::Class *FrenchAnalyzer::class$ = NULL;
          jmethodID *FrenchAnalyzer::mids$ = NULL;
          bool FrenchAnalyzer::live$ = false;
          ::org::apache::lucene::analysis::util::CharArraySet *FrenchAnalyzer::DEFAULT_ARTICLES = NULL;
          ::java::lang::String *FrenchAnalyzer::DEFAULT_STOPWORD_FILE = NULL;

          jclass FrenchAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/fr/FrenchAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_6d1f9881] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_0d96cf33] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;)V");
              mids$[mid_init$_83eafe28] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_3ea629c6] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/util/CharArraySet;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_c9d7e4a3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_getDefaultStopSet_d2d3505c] = env->getStaticMethodID(cls, "getDefaultStopSet", "()Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_ARTICLES = new ::org::apache::lucene::analysis::util::CharArraySet(env->getStaticObjectField(cls, "DEFAULT_ARTICLES", "Lorg/apache/lucene/analysis/util/CharArraySet;"));
              DEFAULT_STOPWORD_FILE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_STOPWORD_FILE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FrenchAnalyzer::FrenchAnalyzer() : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          FrenchAnalyzer::FrenchAnalyzer(const ::org::apache::lucene::analysis::util::CharArraySet & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_6d1f9881, a0.this$)) {}

          FrenchAnalyzer::FrenchAnalyzer(const ::org::apache::lucene::util::Version & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_0d96cf33, a0.this$)) {}

          FrenchAnalyzer::FrenchAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_83eafe28, a0.this$, a1.this$)) {}

          FrenchAnalyzer::FrenchAnalyzer(const ::org::apache::lucene::analysis::util::CharArraySet & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_3ea629c6, a0.this$, a1.this$)) {}

          FrenchAnalyzer::FrenchAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1, const ::org::apache::lucene::analysis::util::CharArraySet & a2) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_c9d7e4a3, a0.this$, a1.this$, a2.this$)) {}

          ::org::apache::lucene::analysis::util::CharArraySet FrenchAnalyzer::getDefaultStopSet()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getDefaultStopSet_d2d3505c]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fr {
          static PyObject *t_FrenchAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FrenchAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FrenchAnalyzer_init_(t_FrenchAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FrenchAnalyzer_getDefaultStopSet(PyTypeObject *type);
          static PyObject *t_FrenchAnalyzer_get__defaultStopSet(t_FrenchAnalyzer *self, void *data);
          static PyGetSetDef t_FrenchAnalyzer__fields_[] = {
            DECLARE_GET_FIELD(t_FrenchAnalyzer, defaultStopSet),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_FrenchAnalyzer__methods_[] = {
            DECLARE_METHOD(t_FrenchAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FrenchAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FrenchAnalyzer, getDefaultStopSet, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FrenchAnalyzer, t_FrenchAnalyzer, ::org::apache::lucene::analysis::util::StopwordAnalyzerBase, FrenchAnalyzer, t_FrenchAnalyzer_init_, 0, 0, t_FrenchAnalyzer__fields_, 0, 0);

          void t_FrenchAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(FrenchAnalyzer), module, "FrenchAnalyzer", 0);
          }

          void t_FrenchAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FrenchAnalyzer).tp_dict, "class_", make_descriptor(FrenchAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FrenchAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_FrenchAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FrenchAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(FrenchAnalyzer::initializeClass);
            PyDict_SetItemString(PY_TYPE(FrenchAnalyzer).tp_dict, "DEFAULT_ARTICLES", make_descriptor(::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(*FrenchAnalyzer::DEFAULT_ARTICLES)));
            PyDict_SetItemString(PY_TYPE(FrenchAnalyzer).tp_dict, "DEFAULT_STOPWORD_FILE", make_descriptor(j2p(*FrenchAnalyzer::DEFAULT_STOPWORD_FILE)));
          }

          static PyObject *t_FrenchAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FrenchAnalyzer::initializeClass, 1)))
              return NULL;
            return t_FrenchAnalyzer::wrap_Object(FrenchAnalyzer(((t_FrenchAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_FrenchAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FrenchAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FrenchAnalyzer_init_(t_FrenchAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                FrenchAnalyzer object((jobject) NULL);

                INT_CALL(object = FrenchAnalyzer());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                ::org::apache::lucene::analysis::util::CharArraySet a0((jobject) NULL);
                PyTypeObject **p0;
                FrenchAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = FrenchAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                FrenchAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::util::Version::initializeClass, &a0))
                {
                  INT_CALL(object = FrenchAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                FrenchAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "kK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = FrenchAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::analysis::util::CharArraySet a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                FrenchAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = FrenchAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                ::org::apache::lucene::analysis::util::CharArraySet a2((jobject) NULL);
                PyTypeObject **p2;
                FrenchAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "kKK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_, &a2, &p2, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = FrenchAnalyzer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_FrenchAnalyzer_getDefaultStopSet(PyTypeObject *type)
          {
            ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::fr::FrenchAnalyzer::getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_FrenchAnalyzer_get__defaultStopSet(t_FrenchAnalyzer *self, void *data)
          {
            ::org::apache::lucene::analysis::util::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/packed/PagedGrowableWriter.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {

          ::java::lang::Class *PagedGrowableWriter::class$ = NULL;
          jmethodID *PagedGrowableWriter::mids$ = NULL;
          bool PagedGrowableWriter::live$ = false;

          jclass PagedGrowableWriter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/packed/PagedGrowableWriter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_9832dac4] = env->getMethodID(cls, "<init>", "(JIIF)V");
              mids$[mid_baseRamBytesUsed_54c6a17a] = env->getMethodID(cls, "baseRamBytesUsed", "()J");
              mids$[mid_newMutable_48ebd249] = env->getMethodID(cls, "newMutable", "(II)Lorg/apache/lucene/util/packed/PackedInts$Mutable;");
              mids$[mid_newUnfilledCopy_b730b410] = env->getMethodID(cls, "newUnfilledCopy", "(J)Lorg/apache/lucene/util/packed/PagedGrowableWriter;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PagedGrowableWriter::PagedGrowableWriter(jlong a0, jint a1, jint a2, jfloat a3) : ::org::apache::lucene::util::packed::AbstractPagedMutable(env->newObject(initializeClass, &mids$, mid_init$_9832dac4, a0, a1, a2, a3)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {
          static PyObject *t_PagedGrowableWriter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PagedGrowableWriter_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PagedGrowableWriter_of_(t_PagedGrowableWriter *self, PyObject *args);
          static int t_PagedGrowableWriter_init_(t_PagedGrowableWriter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PagedGrowableWriter_get__parameters_(t_PagedGrowableWriter *self, void *data);
          static PyGetSetDef t_PagedGrowableWriter__fields_[] = {
            DECLARE_GET_FIELD(t_PagedGrowableWriter, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_PagedGrowableWriter__methods_[] = {
            DECLARE_METHOD(t_PagedGrowableWriter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PagedGrowableWriter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PagedGrowableWriter, of_, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PagedGrowableWriter, t_PagedGrowableWriter, ::org::apache::lucene::util::packed::AbstractPagedMutable, PagedGrowableWriter, t_PagedGrowableWriter_init_, 0, 0, t_PagedGrowableWriter__fields_, 0, 0);
          PyObject *t_PagedGrowableWriter::wrap_Object(const PagedGrowableWriter& object, PyTypeObject *p0)
          {
            PyObject *obj = t_PagedGrowableWriter::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_PagedGrowableWriter *self = (t_PagedGrowableWriter *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_PagedGrowableWriter::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_PagedGrowableWriter::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_PagedGrowableWriter *self = (t_PagedGrowableWriter *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_PagedGrowableWriter::install(PyObject *module)
          {
            installType(&PY_TYPE(PagedGrowableWriter), module, "PagedGrowableWriter", 0);
          }

          void t_PagedGrowableWriter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PagedGrowableWriter).tp_dict, "class_", make_descriptor(PagedGrowableWriter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PagedGrowableWriter).tp_dict, "wrapfn_", make_descriptor(t_PagedGrowableWriter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PagedGrowableWriter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PagedGrowableWriter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PagedGrowableWriter::initializeClass, 1)))
              return NULL;
            return t_PagedGrowableWriter::wrap_Object(PagedGrowableWriter(((t_PagedGrowableWriter *) arg)->object.this$));
          }
          static PyObject *t_PagedGrowableWriter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PagedGrowableWriter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_PagedGrowableWriter_of_(t_PagedGrowableWriter *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_PagedGrowableWriter_init_(t_PagedGrowableWriter *self, PyObject *args, PyObject *kwds)
          {
            jlong a0;
            jint a1;
            jint a2;
            jfloat a3;
            PagedGrowableWriter object((jobject) NULL);

            if (!parseArgs(args, "JIIF", &a0, &a1, &a2, &a3))
            {
              INT_CALL(object = PagedGrowableWriter(a0, a1, a2, a3));
              self->object = object;
              self->parameters[0] = &::org::apache::lucene::util::packed::PY_TYPE(PagedGrowableWriter);
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
          static PyObject *t_PagedGrowableWriter_get__parameters_(t_PagedGrowableWriter *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/MergeScheduler.h"
#include "org/apache/lucene/index/IndexWriter.h"
#include "java/io/IOException.h"
#include "java/io/Closeable.h"
#include "org/apache/lucene/index/MergeTrigger.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *MergeScheduler::class$ = NULL;
        jmethodID *MergeScheduler::mids$ = NULL;
        bool MergeScheduler::live$ = false;

        jclass MergeScheduler::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/MergeScheduler");

            mids$ = new jmethodID[max_mid];
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_merge_5fd7a9f9] = env->getMethodID(cls, "merge", "(Lorg/apache/lucene/index/IndexWriter;Lorg/apache/lucene/index/MergeTrigger;Z)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void MergeScheduler::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        void MergeScheduler::merge(const ::org::apache::lucene::index::IndexWriter & a0, const ::org::apache::lucene::index::MergeTrigger & a1, jboolean a2) const
        {
          env->callVoidMethod(this$, mids$[mid_merge_5fd7a9f9], a0.this$, a1.this$, a2);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_MergeScheduler_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MergeScheduler_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MergeScheduler_close(t_MergeScheduler *self);
        static PyObject *t_MergeScheduler_merge(t_MergeScheduler *self, PyObject *args);

        static PyMethodDef t_MergeScheduler__methods_[] = {
          DECLARE_METHOD(t_MergeScheduler, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MergeScheduler, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MergeScheduler, close, METH_NOARGS),
          DECLARE_METHOD(t_MergeScheduler, merge, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MergeScheduler, t_MergeScheduler, ::java::lang::Object, MergeScheduler, abstract_init, 0, 0, 0, 0, 0);

        void t_MergeScheduler::install(PyObject *module)
        {
          installType(&PY_TYPE(MergeScheduler), module, "MergeScheduler", 0);
        }

        void t_MergeScheduler::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MergeScheduler).tp_dict, "class_", make_descriptor(MergeScheduler::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MergeScheduler).tp_dict, "wrapfn_", make_descriptor(t_MergeScheduler::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MergeScheduler).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MergeScheduler_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MergeScheduler::initializeClass, 1)))
            return NULL;
          return t_MergeScheduler::wrap_Object(MergeScheduler(((t_MergeScheduler *) arg)->object.this$));
        }
        static PyObject *t_MergeScheduler_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MergeScheduler::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_MergeScheduler_close(t_MergeScheduler *self)
        {
          OBJ_CALL(self->object.close());
          Py_RETURN_NONE;
        }

        static PyObject *t_MergeScheduler_merge(t_MergeScheduler *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexWriter a0((jobject) NULL);
          ::org::apache::lucene::index::MergeTrigger a1((jobject) NULL);
          PyTypeObject **p1;
          jboolean a2;

          if (!parseArgs(args, "kKZ", ::org::apache::lucene::index::IndexWriter::initializeClass, ::org::apache::lucene::index::MergeTrigger::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::index::t_MergeTrigger::parameters_, &a2))
          {
            OBJ_CALL(self->object.merge(a0, a1, a2));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "merge", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/tokenattributes/PositionIncrementAttributeImpl.h"
#include "org/apache/lucene/analysis/tokenattributes/PositionIncrementAttribute.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {

          ::java::lang::Class *PositionIncrementAttributeImpl::class$ = NULL;
          jmethodID *PositionIncrementAttributeImpl::mids$ = NULL;
          bool PositionIncrementAttributeImpl::live$ = false;

          jclass PositionIncrementAttributeImpl::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/tokenattributes/PositionIncrementAttributeImpl");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
              mids$[mid_copyTo_d86caa9f] = env->getMethodID(cls, "copyTo", "(Lorg/apache/lucene/util/AttributeImpl;)V");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_getPositionIncrement_54c6a179] = env->getMethodID(cls, "getPositionIncrement", "()I");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_setPositionIncrement_39c7bd3c] = env->getMethodID(cls, "setPositionIncrement", "(I)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PositionIncrementAttributeImpl::PositionIncrementAttributeImpl() : ::org::apache::lucene::util::AttributeImpl(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          void PositionIncrementAttributeImpl::clear() const
          {
            env->callVoidMethod(this$, mids$[mid_clear_54c6a166]);
          }

          void PositionIncrementAttributeImpl::copyTo(const ::org::apache::lucene::util::AttributeImpl & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_copyTo_d86caa9f], a0.this$);
          }

          jboolean PositionIncrementAttributeImpl::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          jint PositionIncrementAttributeImpl::getPositionIncrement() const
          {
            return env->callIntMethod(this$, mids$[mid_getPositionIncrement_54c6a179]);
          }

          jint PositionIncrementAttributeImpl::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          void PositionIncrementAttributeImpl::setPositionIncrement(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setPositionIncrement_39c7bd3c], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {
          static PyObject *t_PositionIncrementAttributeImpl_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PositionIncrementAttributeImpl_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PositionIncrementAttributeImpl_init_(t_PositionIncrementAttributeImpl *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PositionIncrementAttributeImpl_clear(t_PositionIncrementAttributeImpl *self, PyObject *args);
          static PyObject *t_PositionIncrementAttributeImpl_copyTo(t_PositionIncrementAttributeImpl *self, PyObject *args);
          static PyObject *t_PositionIncrementAttributeImpl_equals(t_PositionIncrementAttributeImpl *self, PyObject *args);
          static PyObject *t_PositionIncrementAttributeImpl_getPositionIncrement(t_PositionIncrementAttributeImpl *self);
          static PyObject *t_PositionIncrementAttributeImpl_hashCode(t_PositionIncrementAttributeImpl *self, PyObject *args);
          static PyObject *t_PositionIncrementAttributeImpl_setPositionIncrement(t_PositionIncrementAttributeImpl *self, PyObject *arg);
          static PyObject *t_PositionIncrementAttributeImpl_get__positionIncrement(t_PositionIncrementAttributeImpl *self, void *data);
          static int t_PositionIncrementAttributeImpl_set__positionIncrement(t_PositionIncrementAttributeImpl *self, PyObject *arg, void *data);
          static PyGetSetDef t_PositionIncrementAttributeImpl__fields_[] = {
            DECLARE_GETSET_FIELD(t_PositionIncrementAttributeImpl, positionIncrement),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_PositionIncrementAttributeImpl__methods_[] = {
            DECLARE_METHOD(t_PositionIncrementAttributeImpl, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PositionIncrementAttributeImpl, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PositionIncrementAttributeImpl, clear, METH_VARARGS),
            DECLARE_METHOD(t_PositionIncrementAttributeImpl, copyTo, METH_VARARGS),
            DECLARE_METHOD(t_PositionIncrementAttributeImpl, equals, METH_VARARGS),
            DECLARE_METHOD(t_PositionIncrementAttributeImpl, getPositionIncrement, METH_NOARGS),
            DECLARE_METHOD(t_PositionIncrementAttributeImpl, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_PositionIncrementAttributeImpl, setPositionIncrement, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PositionIncrementAttributeImpl, t_PositionIncrementAttributeImpl, ::org::apache::lucene::util::AttributeImpl, PositionIncrementAttributeImpl, t_PositionIncrementAttributeImpl_init_, 0, 0, t_PositionIncrementAttributeImpl__fields_, 0, 0);

          void t_PositionIncrementAttributeImpl::install(PyObject *module)
          {
            installType(&PY_TYPE(PositionIncrementAttributeImpl), module, "PositionIncrementAttributeImpl", 0);
          }

          void t_PositionIncrementAttributeImpl::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PositionIncrementAttributeImpl).tp_dict, "class_", make_descriptor(PositionIncrementAttributeImpl::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PositionIncrementAttributeImpl).tp_dict, "wrapfn_", make_descriptor(t_PositionIncrementAttributeImpl::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PositionIncrementAttributeImpl).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PositionIncrementAttributeImpl_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PositionIncrementAttributeImpl::initializeClass, 1)))
              return NULL;
            return t_PositionIncrementAttributeImpl::wrap_Object(PositionIncrementAttributeImpl(((t_PositionIncrementAttributeImpl *) arg)->object.this$));
          }
          static PyObject *t_PositionIncrementAttributeImpl_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PositionIncrementAttributeImpl::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PositionIncrementAttributeImpl_init_(t_PositionIncrementAttributeImpl *self, PyObject *args, PyObject *kwds)
          {
            PositionIncrementAttributeImpl object((jobject) NULL);

            INT_CALL(object = PositionIncrementAttributeImpl());
            self->object = object;

            return 0;
          }

          static PyObject *t_PositionIncrementAttributeImpl_clear(t_PositionIncrementAttributeImpl *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.clear());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(PositionIncrementAttributeImpl), (PyObject *) self, "clear", args, 2);
          }

          static PyObject *t_PositionIncrementAttributeImpl_copyTo(t_PositionIncrementAttributeImpl *self, PyObject *args)
          {
            ::org::apache::lucene::util::AttributeImpl a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::util::AttributeImpl::initializeClass, &a0))
            {
              OBJ_CALL(self->object.copyTo(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(PositionIncrementAttributeImpl), (PyObject *) self, "copyTo", args, 2);
          }

          static PyObject *t_PositionIncrementAttributeImpl_equals(t_PositionIncrementAttributeImpl *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(PositionIncrementAttributeImpl), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_PositionIncrementAttributeImpl_getPositionIncrement(t_PositionIncrementAttributeImpl *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getPositionIncrement());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_PositionIncrementAttributeImpl_hashCode(t_PositionIncrementAttributeImpl *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(PositionIncrementAttributeImpl), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_PositionIncrementAttributeImpl_setPositionIncrement(t_PositionIncrementAttributeImpl *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setPositionIncrement(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setPositionIncrement", arg);
            return NULL;
          }

          static PyObject *t_PositionIncrementAttributeImpl_get__positionIncrement(t_PositionIncrementAttributeImpl *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getPositionIncrement());
            return PyInt_FromLong((long) value);
          }
          static int t_PositionIncrementAttributeImpl_set__positionIncrement(t_PositionIncrementAttributeImpl *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setPositionIncrement(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "positionIncrement", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "java/lang/Iterable.h"
#include "java/util/Iterator.h"
#include "org/apache/lucene/index/FieldInfo.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *FieldInfos::class$ = NULL;
        jmethodID *FieldInfos::mids$ = NULL;
        bool FieldInfos::live$ = false;

        jclass FieldInfos::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/FieldInfos");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_32778cd0] = env->getMethodID(cls, "<init>", "([Lorg/apache/lucene/index/FieldInfo;)V");
            mids$[mid_fieldInfo_d44c031f] = env->getMethodID(cls, "fieldInfo", "(I)Lorg/apache/lucene/index/FieldInfo;");
            mids$[mid_fieldInfo_582c55ef] = env->getMethodID(cls, "fieldInfo", "(Ljava/lang/String;)Lorg/apache/lucene/index/FieldInfo;");
            mids$[mid_hasDocValues_54c6a16a] = env->getMethodID(cls, "hasDocValues", "()Z");
            mids$[mid_hasFreq_54c6a16a] = env->getMethodID(cls, "hasFreq", "()Z");
            mids$[mid_hasNorms_54c6a16a] = env->getMethodID(cls, "hasNorms", "()Z");
            mids$[mid_hasOffsets_54c6a16a] = env->getMethodID(cls, "hasOffsets", "()Z");
            mids$[mid_hasPayloads_54c6a16a] = env->getMethodID(cls, "hasPayloads", "()Z");
            mids$[mid_hasProx_54c6a16a] = env->getMethodID(cls, "hasProx", "()Z");
            mids$[mid_hasVectors_54c6a16a] = env->getMethodID(cls, "hasVectors", "()Z");
            mids$[mid_iterator_40858c90] = env->getMethodID(cls, "iterator", "()Ljava/util/Iterator;");
            mids$[mid_size_54c6a179] = env->getMethodID(cls, "size", "()I");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FieldInfos::FieldInfos(const JArray< ::org::apache::lucene::index::FieldInfo > & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_32778cd0, a0.this$)) {}

        ::org::apache::lucene::index::FieldInfo FieldInfos::fieldInfo(jint a0) const
        {
          return ::org::apache::lucene::index::FieldInfo(env->callObjectMethod(this$, mids$[mid_fieldInfo_d44c031f], a0));
        }

        ::org::apache::lucene::index::FieldInfo FieldInfos::fieldInfo(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::FieldInfo(env->callObjectMethod(this$, mids$[mid_fieldInfo_582c55ef], a0.this$));
        }

        jboolean FieldInfos::hasDocValues() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasDocValues_54c6a16a]);
        }

        jboolean FieldInfos::hasFreq() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasFreq_54c6a16a]);
        }

        jboolean FieldInfos::hasNorms() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasNorms_54c6a16a]);
        }

        jboolean FieldInfos::hasOffsets() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasOffsets_54c6a16a]);
        }

        jboolean FieldInfos::hasPayloads() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasPayloads_54c6a16a]);
        }

        jboolean FieldInfos::hasProx() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasProx_54c6a16a]);
        }

        jboolean FieldInfos::hasVectors() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasVectors_54c6a16a]);
        }

        ::java::util::Iterator FieldInfos::iterator() const
        {
          return ::java::util::Iterator(env->callObjectMethod(this$, mids$[mid_iterator_40858c90]));
        }

        jint FieldInfos::size() const
        {
          return env->callIntMethod(this$, mids$[mid_size_54c6a179]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_FieldInfos_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldInfos_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FieldInfos_init_(t_FieldInfos *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FieldInfos_fieldInfo(t_FieldInfos *self, PyObject *args);
        static PyObject *t_FieldInfos_hasDocValues(t_FieldInfos *self);
        static PyObject *t_FieldInfos_hasFreq(t_FieldInfos *self);
        static PyObject *t_FieldInfos_hasNorms(t_FieldInfos *self);
        static PyObject *t_FieldInfos_hasOffsets(t_FieldInfos *self);
        static PyObject *t_FieldInfos_hasPayloads(t_FieldInfos *self);
        static PyObject *t_FieldInfos_hasProx(t_FieldInfos *self);
        static PyObject *t_FieldInfos_hasVectors(t_FieldInfos *self);
        static PyObject *t_FieldInfos_iterator(t_FieldInfos *self);
        static PyObject *t_FieldInfos_size(t_FieldInfos *self);

        static PyMethodDef t_FieldInfos__methods_[] = {
          DECLARE_METHOD(t_FieldInfos, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldInfos, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldInfos, fieldInfo, METH_VARARGS),
          DECLARE_METHOD(t_FieldInfos, hasDocValues, METH_NOARGS),
          DECLARE_METHOD(t_FieldInfos, hasFreq, METH_NOARGS),
          DECLARE_METHOD(t_FieldInfos, hasNorms, METH_NOARGS),
          DECLARE_METHOD(t_FieldInfos, hasOffsets, METH_NOARGS),
          DECLARE_METHOD(t_FieldInfos, hasPayloads, METH_NOARGS),
          DECLARE_METHOD(t_FieldInfos, hasProx, METH_NOARGS),
          DECLARE_METHOD(t_FieldInfos, hasVectors, METH_NOARGS),
          DECLARE_METHOD(t_FieldInfos, iterator, METH_NOARGS),
          DECLARE_METHOD(t_FieldInfos, size, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldInfos, t_FieldInfos, ::java::lang::Object, FieldInfos, t_FieldInfos_init_, ((PyObject *(*)(t_FieldInfos *)) get_iterator< t_FieldInfos >), 0, 0, 0, 0);

        void t_FieldInfos::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldInfos), module, "FieldInfos", 0);
        }

        void t_FieldInfos::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldInfos).tp_dict, "class_", make_descriptor(FieldInfos::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldInfos).tp_dict, "wrapfn_", make_descriptor(t_FieldInfos::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldInfos).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldInfos_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldInfos::initializeClass, 1)))
            return NULL;
          return t_FieldInfos::wrap_Object(FieldInfos(((t_FieldInfos *) arg)->object.this$));
        }
        static PyObject *t_FieldInfos_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldInfos::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FieldInfos_init_(t_FieldInfos *self, PyObject *args, PyObject *kwds)
        {
          JArray< ::org::apache::lucene::index::FieldInfo > a0((jobject) NULL);
          FieldInfos object((jobject) NULL);

          if (!parseArgs(args, "[k", ::org::apache::lucene::index::FieldInfo::initializeClass, &a0))
          {
            INT_CALL(object = FieldInfos(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FieldInfos_fieldInfo(t_FieldInfos *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jint a0;
              ::org::apache::lucene::index::FieldInfo result((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.fieldInfo(a0));
                return ::org::apache::lucene::index::t_FieldInfo::wrap_Object(result);
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::index::FieldInfo result((jobject) NULL);

              if (!parseArgs(args, "s", &a0))
              {
                OBJ_CALL(result = self->object.fieldInfo(a0));
                return ::org::apache::lucene::index::t_FieldInfo::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "fieldInfo", args);
          return NULL;
        }

        static PyObject *t_FieldInfos_hasDocValues(t_FieldInfos *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.hasDocValues());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_FieldInfos_hasFreq(t_FieldInfos *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.hasFreq());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_FieldInfos_hasNorms(t_FieldInfos *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.hasNorms());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_FieldInfos_hasOffsets(t_FieldInfos *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.hasOffsets());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_FieldInfos_hasPayloads(t_FieldInfos *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.hasPayloads());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_FieldInfos_hasProx(t_FieldInfos *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.hasProx());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_FieldInfos_hasVectors(t_FieldInfos *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.hasVectors());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_FieldInfos_iterator(t_FieldInfos *self)
        {
          ::java::util::Iterator result((jobject) NULL);
          OBJ_CALL(result = self->object.iterator());
          return ::java::util::t_Iterator::wrap_Object(result, &::org::apache::lucene::index::PY_TYPE(FieldInfo));
        }

        static PyObject *t_FieldInfos_size(t_FieldInfos *self)
        {
          jint result;
          OBJ_CALL(result = self->object.size());
          return PyInt_FromLong((long) result);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/PrefixAndSuffixAwareTokenFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/Token.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *PrefixAndSuffixAwareTokenFilter::class$ = NULL;
          jmethodID *PrefixAndSuffixAwareTokenFilter::mids$ = NULL;
          bool PrefixAndSuffixAwareTokenFilter::live$ = false;

          jclass PrefixAndSuffixAwareTokenFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/PrefixAndSuffixAwareTokenFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_63d58924] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;Lorg/apache/lucene/analysis/TokenStream;Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
              mids$[mid_end_54c6a166] = env->getMethodID(cls, "end", "()V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");
              mids$[mid_updateInputToken_a810a20b] = env->getMethodID(cls, "updateInputToken", "(Lorg/apache/lucene/analysis/Token;Lorg/apache/lucene/analysis/Token;)Lorg/apache/lucene/analysis/Token;");
              mids$[mid_updateSuffixToken_a810a20b] = env->getMethodID(cls, "updateSuffixToken", "(Lorg/apache/lucene/analysis/Token;Lorg/apache/lucene/analysis/Token;)Lorg/apache/lucene/analysis/Token;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PrefixAndSuffixAwareTokenFilter::PrefixAndSuffixAwareTokenFilter(const ::org::apache::lucene::analysis::TokenStream & a0, const ::org::apache::lucene::analysis::TokenStream & a1, const ::org::apache::lucene::analysis::TokenStream & a2) : ::org::apache::lucene::analysis::TokenStream(env->newObject(initializeClass, &mids$, mid_init$_63d58924, a0.this$, a1.this$, a2.this$)) {}

          void PrefixAndSuffixAwareTokenFilter::close() const
          {
            env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
          }

          void PrefixAndSuffixAwareTokenFilter::end() const
          {
            env->callVoidMethod(this$, mids$[mid_end_54c6a166]);
          }

          jboolean PrefixAndSuffixAwareTokenFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void PrefixAndSuffixAwareTokenFilter::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }

          ::org::apache::lucene::analysis::Token PrefixAndSuffixAwareTokenFilter::updateInputToken(const ::org::apache::lucene::analysis::Token & a0, const ::org::apache::lucene::analysis::Token & a1) const
          {
            return ::org::apache::lucene::analysis::Token(env->callObjectMethod(this$, mids$[mid_updateInputToken_a810a20b], a0.this$, a1.this$));
          }

          ::org::apache::lucene::analysis::Token PrefixAndSuffixAwareTokenFilter::updateSuffixToken(const ::org::apache::lucene::analysis::Token & a0, const ::org::apache::lucene::analysis::Token & a1) const
          {
            return ::org::apache::lucene::analysis::Token(env->callObjectMethod(this$, mids$[mid_updateSuffixToken_a810a20b], a0.this$, a1.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_PrefixAndSuffixAwareTokenFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PrefixAndSuffixAwareTokenFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PrefixAndSuffixAwareTokenFilter_init_(t_PrefixAndSuffixAwareTokenFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PrefixAndSuffixAwareTokenFilter_close(t_PrefixAndSuffixAwareTokenFilter *self, PyObject *args);
          static PyObject *t_PrefixAndSuffixAwareTokenFilter_end(t_PrefixAndSuffixAwareTokenFilter *self, PyObject *args);
          static PyObject *t_PrefixAndSuffixAwareTokenFilter_incrementToken(t_PrefixAndSuffixAwareTokenFilter *self, PyObject *args);
          static PyObject *t_PrefixAndSuffixAwareTokenFilter_reset(t_PrefixAndSuffixAwareTokenFilter *self, PyObject *args);
          static PyObject *t_PrefixAndSuffixAwareTokenFilter_updateInputToken(t_PrefixAndSuffixAwareTokenFilter *self, PyObject *args);
          static PyObject *t_PrefixAndSuffixAwareTokenFilter_updateSuffixToken(t_PrefixAndSuffixAwareTokenFilter *self, PyObject *args);

          static PyMethodDef t_PrefixAndSuffixAwareTokenFilter__methods_[] = {
            DECLARE_METHOD(t_PrefixAndSuffixAwareTokenFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PrefixAndSuffixAwareTokenFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PrefixAndSuffixAwareTokenFilter, close, METH_VARARGS),
            DECLARE_METHOD(t_PrefixAndSuffixAwareTokenFilter, end, METH_VARARGS),
            DECLARE_METHOD(t_PrefixAndSuffixAwareTokenFilter, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_PrefixAndSuffixAwareTokenFilter, reset, METH_VARARGS),
            DECLARE_METHOD(t_PrefixAndSuffixAwareTokenFilter, updateInputToken, METH_VARARGS),
            DECLARE_METHOD(t_PrefixAndSuffixAwareTokenFilter, updateSuffixToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PrefixAndSuffixAwareTokenFilter, t_PrefixAndSuffixAwareTokenFilter, ::org::apache::lucene::analysis::TokenStream, PrefixAndSuffixAwareTokenFilter, t_PrefixAndSuffixAwareTokenFilter_init_, 0, 0, 0, 0, 0);

          void t_PrefixAndSuffixAwareTokenFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(PrefixAndSuffixAwareTokenFilter), module, "PrefixAndSuffixAwareTokenFilter", 0);
          }

          void t_PrefixAndSuffixAwareTokenFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PrefixAndSuffixAwareTokenFilter).tp_dict, "class_", make_descriptor(PrefixAndSuffixAwareTokenFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PrefixAndSuffixAwareTokenFilter).tp_dict, "wrapfn_", make_descriptor(t_PrefixAndSuffixAwareTokenFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PrefixAndSuffixAwareTokenFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PrefixAndSuffixAwareTokenFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PrefixAndSuffixAwareTokenFilter::initializeClass, 1)))
              return NULL;
            return t_PrefixAndSuffixAwareTokenFilter::wrap_Object(PrefixAndSuffixAwareTokenFilter(((t_PrefixAndSuffixAwareTokenFilter *) arg)->object.this$));
          }
          static PyObject *t_PrefixAndSuffixAwareTokenFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PrefixAndSuffixAwareTokenFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PrefixAndSuffixAwareTokenFilter_init_(t_PrefixAndSuffixAwareTokenFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream a2((jobject) NULL);
            PrefixAndSuffixAwareTokenFilter object((jobject) NULL);

            if (!parseArgs(args, "kkk", ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1, &a2))
            {
              INT_CALL(object = PrefixAndSuffixAwareTokenFilter(a0, a1, a2));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PrefixAndSuffixAwareTokenFilter_close(t_PrefixAndSuffixAwareTokenFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.close());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(PrefixAndSuffixAwareTokenFilter), (PyObject *) self, "close", args, 2);
          }

          static PyObject *t_PrefixAndSuffixAwareTokenFilter_end(t_PrefixAndSuffixAwareTokenFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.end());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(PrefixAndSuffixAwareTokenFilter), (PyObject *) self, "end", args, 2);
          }

          static PyObject *t_PrefixAndSuffixAwareTokenFilter_incrementToken(t_PrefixAndSuffixAwareTokenFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(PrefixAndSuffixAwareTokenFilter), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_PrefixAndSuffixAwareTokenFilter_reset(t_PrefixAndSuffixAwareTokenFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(PrefixAndSuffixAwareTokenFilter), (PyObject *) self, "reset", args, 2);
          }

          static PyObject *t_PrefixAndSuffixAwareTokenFilter_updateInputToken(t_PrefixAndSuffixAwareTokenFilter *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::Token a0((jobject) NULL);
            ::org::apache::lucene::analysis::Token a1((jobject) NULL);
            ::org::apache::lucene::analysis::Token result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::analysis::Token::initializeClass, ::org::apache::lucene::analysis::Token::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.updateInputToken(a0, a1));
              return ::org::apache::lucene::analysis::t_Token::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "updateInputToken", args);
            return NULL;
          }

          static PyObject *t_PrefixAndSuffixAwareTokenFilter_updateSuffixToken(t_PrefixAndSuffixAwareTokenFilter *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::Token a0((jobject) NULL);
            ::org::apache::lucene::analysis::Token a1((jobject) NULL);
            ::org::apache::lucene::analysis::Token result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::analysis::Token::initializeClass, ::org::apache::lucene::analysis::Token::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.updateSuffixToken(a0, a1));
              return ::org::apache::lucene::analysis::t_Token::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "updateSuffixToken", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/MultiReader.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *MultiReader::class$ = NULL;
        jmethodID *MultiReader::mids$ = NULL;
        bool MultiReader::live$ = false;

        jclass MultiReader::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/MultiReader");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_a20f8ee9] = env->getMethodID(cls, "<init>", "([Lorg/apache/lucene/index/IndexReader;)V");
            mids$[mid_init$_44fb5002] = env->getMethodID(cls, "<init>", "([Lorg/apache/lucene/index/IndexReader;Z)V");
            mids$[mid_doClose_54c6a166] = env->getMethodID(cls, "doClose", "()V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        MultiReader::MultiReader(const JArray< ::org::apache::lucene::index::IndexReader > & a0) : ::org::apache::lucene::index::BaseCompositeReader(env->newObject(initializeClass, &mids$, mid_init$_a20f8ee9, a0.this$)) {}

        MultiReader::MultiReader(const JArray< ::org::apache::lucene::index::IndexReader > & a0, jboolean a1) : ::org::apache::lucene::index::BaseCompositeReader(env->newObject(initializeClass, &mids$, mid_init$_44fb5002, a0.this$, a1)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_MultiReader_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiReader_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiReader_of_(t_MultiReader *self, PyObject *args);
        static int t_MultiReader_init_(t_MultiReader *self, PyObject *args, PyObject *kwds);
        static PyObject *t_MultiReader_get__parameters_(t_MultiReader *self, void *data);
        static PyGetSetDef t_MultiReader__fields_[] = {
          DECLARE_GET_FIELD(t_MultiReader, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_MultiReader__methods_[] = {
          DECLARE_METHOD(t_MultiReader, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiReader, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiReader, of_, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MultiReader, t_MultiReader, ::org::apache::lucene::index::BaseCompositeReader, MultiReader, t_MultiReader_init_, 0, 0, t_MultiReader__fields_, 0, 0);
        PyObject *t_MultiReader::wrap_Object(const MultiReader& object, PyTypeObject *p0)
        {
          PyObject *obj = t_MultiReader::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_MultiReader *self = (t_MultiReader *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_MultiReader::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_MultiReader::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_MultiReader *self = (t_MultiReader *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_MultiReader::install(PyObject *module)
        {
          installType(&PY_TYPE(MultiReader), module, "MultiReader", 0);
        }

        void t_MultiReader::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MultiReader).tp_dict, "class_", make_descriptor(MultiReader::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MultiReader).tp_dict, "wrapfn_", make_descriptor(t_MultiReader::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MultiReader).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MultiReader_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MultiReader::initializeClass, 1)))
            return NULL;
          return t_MultiReader::wrap_Object(MultiReader(((t_MultiReader *) arg)->object.this$));
        }
        static PyObject *t_MultiReader_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MultiReader::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_MultiReader_of_(t_MultiReader *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_MultiReader_init_(t_MultiReader *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              JArray< ::org::apache::lucene::index::IndexReader > a0((jobject) NULL);
              MultiReader object((jobject) NULL);

              if (!parseArgs(args, "[k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
              {
                INT_CALL(object = MultiReader(a0));
                self->object = object;
                self->parameters[0] = &::org::apache::lucene::index::PY_TYPE(IndexReader);
                break;
              }
            }
            goto err;
           case 2:
            {
              JArray< ::org::apache::lucene::index::IndexReader > a0((jobject) NULL);
              jboolean a1;
              MultiReader object((jobject) NULL);

              if (!parseArgs(args, "[kZ", ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &a1))
              {
                INT_CALL(object = MultiReader(a0, a1));
                self->object = object;
                self->parameters[0] = &::org::apache::lucene::index::PY_TYPE(IndexReader);
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
        static PyObject *t_MultiReader_get__parameters_(t_MultiReader *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/util/SegmentingTokenizerBase.h"
#include "java/io/IOException.h"
#include "java/io/Reader.h"
#include "java/text/BreakIterator.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {

          ::java::lang::Class *SegmentingTokenizerBase::class$ = NULL;
          jmethodID *SegmentingTokenizerBase::mids$ = NULL;
          bool SegmentingTokenizerBase::live$ = false;

          jclass SegmentingTokenizerBase::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/util/SegmentingTokenizerBase");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_42e90ef8] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;Ljava/text/BreakIterator;)V");
              mids$[mid_init$_441b2340] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;Ljava/text/BreakIterator;)V");
              mids$[mid_end_54c6a166] = env->getMethodID(cls, "end", "()V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");
              mids$[mid_setNextSentence_d8d154a6] = env->getMethodID(cls, "setNextSentence", "(II)V");
              mids$[mid_incrementWord_54c6a16a] = env->getMethodID(cls, "incrementWord", "()Z");
              mids$[mid_isSafeEnd_87fd5456] = env->getMethodID(cls, "isSafeEnd", "(C)Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SegmentingTokenizerBase::SegmentingTokenizerBase(const ::java::io::Reader & a0, const ::java::text::BreakIterator & a1) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_42e90ef8, a0.this$, a1.this$)) {}

          SegmentingTokenizerBase::SegmentingTokenizerBase(const ::org::apache::lucene::util::AttributeFactory & a0, const ::java::io::Reader & a1, const ::java::text::BreakIterator & a2) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_441b2340, a0.this$, a1.this$, a2.this$)) {}

          void SegmentingTokenizerBase::end() const
          {
            env->callVoidMethod(this$, mids$[mid_end_54c6a166]);
          }

          jboolean SegmentingTokenizerBase::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void SegmentingTokenizerBase::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {
          static PyObject *t_SegmentingTokenizerBase_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SegmentingTokenizerBase_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SegmentingTokenizerBase_init_(t_SegmentingTokenizerBase *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SegmentingTokenizerBase_end(t_SegmentingTokenizerBase *self, PyObject *args);
          static PyObject *t_SegmentingTokenizerBase_incrementToken(t_SegmentingTokenizerBase *self, PyObject *args);
          static PyObject *t_SegmentingTokenizerBase_reset(t_SegmentingTokenizerBase *self, PyObject *args);

          static PyMethodDef t_SegmentingTokenizerBase__methods_[] = {
            DECLARE_METHOD(t_SegmentingTokenizerBase, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SegmentingTokenizerBase, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SegmentingTokenizerBase, end, METH_VARARGS),
            DECLARE_METHOD(t_SegmentingTokenizerBase, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_SegmentingTokenizerBase, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SegmentingTokenizerBase, t_SegmentingTokenizerBase, ::org::apache::lucene::analysis::Tokenizer, SegmentingTokenizerBase, t_SegmentingTokenizerBase_init_, 0, 0, 0, 0, 0);

          void t_SegmentingTokenizerBase::install(PyObject *module)
          {
            installType(&PY_TYPE(SegmentingTokenizerBase), module, "SegmentingTokenizerBase", 0);
          }

          void t_SegmentingTokenizerBase::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SegmentingTokenizerBase).tp_dict, "class_", make_descriptor(SegmentingTokenizerBase::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SegmentingTokenizerBase).tp_dict, "wrapfn_", make_descriptor(t_SegmentingTokenizerBase::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SegmentingTokenizerBase).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SegmentingTokenizerBase_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SegmentingTokenizerBase::initializeClass, 1)))
              return NULL;
            return t_SegmentingTokenizerBase::wrap_Object(SegmentingTokenizerBase(((t_SegmentingTokenizerBase *) arg)->object.this$));
          }
          static PyObject *t_SegmentingTokenizerBase_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SegmentingTokenizerBase::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SegmentingTokenizerBase_init_(t_SegmentingTokenizerBase *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::java::io::Reader a0((jobject) NULL);
                ::java::text::BreakIterator a1((jobject) NULL);
                SegmentingTokenizerBase object((jobject) NULL);

                if (!parseArgs(args, "kk", ::java::io::Reader::initializeClass, ::java::text::BreakIterator::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = SegmentingTokenizerBase(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
                ::java::io::Reader a1((jobject) NULL);
                ::java::text::BreakIterator a2((jobject) NULL);
                SegmentingTokenizerBase object((jobject) NULL);

                if (!parseArgs(args, "kkk", ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, ::java::text::BreakIterator::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = SegmentingTokenizerBase(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SegmentingTokenizerBase_end(t_SegmentingTokenizerBase *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.end());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(SegmentingTokenizerBase), (PyObject *) self, "end", args, 2);
          }

          static PyObject *t_SegmentingTokenizerBase_incrementToken(t_SegmentingTokenizerBase *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(SegmentingTokenizerBase), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_SegmentingTokenizerBase_reset(t_SegmentingTokenizerBase *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(SegmentingTokenizerBase), (PyObject *) self, "reset", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene42/Lucene42Codec.h"
#include "org/apache/lucene/codecs/FieldInfosFormat.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/codecs/LiveDocsFormat.h"
#include "org/apache/lucene/codecs/SegmentInfoFormat.h"
#include "org/apache/lucene/codecs/TermVectorsFormat.h"
#include "org/apache/lucene/codecs/DocValuesFormat.h"
#include "org/apache/lucene/codecs/NormsFormat.h"
#include "org/apache/lucene/codecs/StoredFieldsFormat.h"
#include "org/apache/lucene/codecs/PostingsFormat.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene42 {

          ::java::lang::Class *Lucene42Codec::class$ = NULL;
          jmethodID *Lucene42Codec::mids$ = NULL;
          bool Lucene42Codec::live$ = false;

          jclass Lucene42Codec::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene42/Lucene42Codec");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_docValuesFormat_9a259760] = env->getMethodID(cls, "docValuesFormat", "()Lorg/apache/lucene/codecs/DocValuesFormat;");
              mids$[mid_fieldInfosFormat_82160220] = env->getMethodID(cls, "fieldInfosFormat", "()Lorg/apache/lucene/codecs/FieldInfosFormat;");
              mids$[mid_getDocValuesFormatForField_36ef78ba] = env->getMethodID(cls, "getDocValuesFormatForField", "(Ljava/lang/String;)Lorg/apache/lucene/codecs/DocValuesFormat;");
              mids$[mid_getPostingsFormatForField_19d2f1c6] = env->getMethodID(cls, "getPostingsFormatForField", "(Ljava/lang/String;)Lorg/apache/lucene/codecs/PostingsFormat;");
              mids$[mid_liveDocsFormat_fcc69d9a] = env->getMethodID(cls, "liveDocsFormat", "()Lorg/apache/lucene/codecs/LiveDocsFormat;");
              mids$[mid_normsFormat_03b89e43] = env->getMethodID(cls, "normsFormat", "()Lorg/apache/lucene/codecs/NormsFormat;");
              mids$[mid_postingsFormat_d12d16c8] = env->getMethodID(cls, "postingsFormat", "()Lorg/apache/lucene/codecs/PostingsFormat;");
              mids$[mid_segmentInfoFormat_c24d8633] = env->getMethodID(cls, "segmentInfoFormat", "()Lorg/apache/lucene/codecs/SegmentInfoFormat;");
              mids$[mid_storedFieldsFormat_2b977101] = env->getMethodID(cls, "storedFieldsFormat", "()Lorg/apache/lucene/codecs/StoredFieldsFormat;");
              mids$[mid_termVectorsFormat_bcd1d8b8] = env->getMethodID(cls, "termVectorsFormat", "()Lorg/apache/lucene/codecs/TermVectorsFormat;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene42Codec::Lucene42Codec() : ::org::apache::lucene::codecs::Codec(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::codecs::DocValuesFormat Lucene42Codec::docValuesFormat() const
          {
            return ::org::apache::lucene::codecs::DocValuesFormat(env->callObjectMethod(this$, mids$[mid_docValuesFormat_9a259760]));
          }

          ::org::apache::lucene::codecs::FieldInfosFormat Lucene42Codec::fieldInfosFormat() const
          {
            return ::org::apache::lucene::codecs::FieldInfosFormat(env->callObjectMethod(this$, mids$[mid_fieldInfosFormat_82160220]));
          }

          ::org::apache::lucene::codecs::DocValuesFormat Lucene42Codec::getDocValuesFormatForField(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::codecs::DocValuesFormat(env->callObjectMethod(this$, mids$[mid_getDocValuesFormatForField_36ef78ba], a0.this$));
          }

          ::org::apache::lucene::codecs::PostingsFormat Lucene42Codec::getPostingsFormatForField(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::codecs::PostingsFormat(env->callObjectMethod(this$, mids$[mid_getPostingsFormatForField_19d2f1c6], a0.this$));
          }

          ::org::apache::lucene::codecs::LiveDocsFormat Lucene42Codec::liveDocsFormat() const
          {
            return ::org::apache::lucene::codecs::LiveDocsFormat(env->callObjectMethod(this$, mids$[mid_liveDocsFormat_fcc69d9a]));
          }

          ::org::apache::lucene::codecs::NormsFormat Lucene42Codec::normsFormat() const
          {
            return ::org::apache::lucene::codecs::NormsFormat(env->callObjectMethod(this$, mids$[mid_normsFormat_03b89e43]));
          }

          ::org::apache::lucene::codecs::PostingsFormat Lucene42Codec::postingsFormat() const
          {
            return ::org::apache::lucene::codecs::PostingsFormat(env->callObjectMethod(this$, mids$[mid_postingsFormat_d12d16c8]));
          }

          ::org::apache::lucene::codecs::SegmentInfoFormat Lucene42Codec::segmentInfoFormat() const
          {
            return ::org::apache::lucene::codecs::SegmentInfoFormat(env->callObjectMethod(this$, mids$[mid_segmentInfoFormat_c24d8633]));
          }

          ::org::apache::lucene::codecs::StoredFieldsFormat Lucene42Codec::storedFieldsFormat() const
          {
            return ::org::apache::lucene::codecs::StoredFieldsFormat(env->callObjectMethod(this$, mids$[mid_storedFieldsFormat_2b977101]));
          }

          ::org::apache::lucene::codecs::TermVectorsFormat Lucene42Codec::termVectorsFormat() const
          {
            return ::org::apache::lucene::codecs::TermVectorsFormat(env->callObjectMethod(this$, mids$[mid_termVectorsFormat_bcd1d8b8]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene42 {
          static PyObject *t_Lucene42Codec_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene42Codec_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene42Codec_init_(t_Lucene42Codec *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene42Codec_docValuesFormat(t_Lucene42Codec *self, PyObject *args);
          static PyObject *t_Lucene42Codec_fieldInfosFormat(t_Lucene42Codec *self, PyObject *args);
          static PyObject *t_Lucene42Codec_getDocValuesFormatForField(t_Lucene42Codec *self, PyObject *arg);
          static PyObject *t_Lucene42Codec_getPostingsFormatForField(t_Lucene42Codec *self, PyObject *arg);
          static PyObject *t_Lucene42Codec_liveDocsFormat(t_Lucene42Codec *self, PyObject *args);
          static PyObject *t_Lucene42Codec_normsFormat(t_Lucene42Codec *self, PyObject *args);
          static PyObject *t_Lucene42Codec_postingsFormat(t_Lucene42Codec *self, PyObject *args);
          static PyObject *t_Lucene42Codec_segmentInfoFormat(t_Lucene42Codec *self, PyObject *args);
          static PyObject *t_Lucene42Codec_storedFieldsFormat(t_Lucene42Codec *self, PyObject *args);
          static PyObject *t_Lucene42Codec_termVectorsFormat(t_Lucene42Codec *self, PyObject *args);

          static PyMethodDef t_Lucene42Codec__methods_[] = {
            DECLARE_METHOD(t_Lucene42Codec, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene42Codec, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene42Codec, docValuesFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene42Codec, fieldInfosFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene42Codec, getDocValuesFormatForField, METH_O),
            DECLARE_METHOD(t_Lucene42Codec, getPostingsFormatForField, METH_O),
            DECLARE_METHOD(t_Lucene42Codec, liveDocsFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene42Codec, normsFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene42Codec, postingsFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene42Codec, segmentInfoFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene42Codec, storedFieldsFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene42Codec, termVectorsFormat, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene42Codec, t_Lucene42Codec, ::org::apache::lucene::codecs::Codec, Lucene42Codec, t_Lucene42Codec_init_, 0, 0, 0, 0, 0);

          void t_Lucene42Codec::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene42Codec), module, "Lucene42Codec", 0);
          }

          void t_Lucene42Codec::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene42Codec).tp_dict, "class_", make_descriptor(Lucene42Codec::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene42Codec).tp_dict, "wrapfn_", make_descriptor(t_Lucene42Codec::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene42Codec).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lucene42Codec_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene42Codec::initializeClass, 1)))
              return NULL;
            return t_Lucene42Codec::wrap_Object(Lucene42Codec(((t_Lucene42Codec *) arg)->object.this$));
          }
          static PyObject *t_Lucene42Codec_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene42Codec::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene42Codec_init_(t_Lucene42Codec *self, PyObject *args, PyObject *kwds)
          {
            Lucene42Codec object((jobject) NULL);

            INT_CALL(object = Lucene42Codec());
            self->object = object;

            return 0;
          }

          static PyObject *t_Lucene42Codec_docValuesFormat(t_Lucene42Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::DocValuesFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.docValuesFormat());
              return ::org::apache::lucene::codecs::t_DocValuesFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene42Codec), (PyObject *) self, "docValuesFormat", args, 2);
          }

          static PyObject *t_Lucene42Codec_fieldInfosFormat(t_Lucene42Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::FieldInfosFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.fieldInfosFormat());
              return ::org::apache::lucene::codecs::t_FieldInfosFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene42Codec), (PyObject *) self, "fieldInfosFormat", args, 2);
          }

          static PyObject *t_Lucene42Codec_getDocValuesFormatForField(t_Lucene42Codec *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::codecs::DocValuesFormat result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.getDocValuesFormatForField(a0));
              return ::org::apache::lucene::codecs::t_DocValuesFormat::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getDocValuesFormatForField", arg);
            return NULL;
          }

          static PyObject *t_Lucene42Codec_getPostingsFormatForField(t_Lucene42Codec *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::codecs::PostingsFormat result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.getPostingsFormatForField(a0));
              return ::org::apache::lucene::codecs::t_PostingsFormat::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getPostingsFormatForField", arg);
            return NULL;
          }

          static PyObject *t_Lucene42Codec_liveDocsFormat(t_Lucene42Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::LiveDocsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.liveDocsFormat());
              return ::org::apache::lucene::codecs::t_LiveDocsFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene42Codec), (PyObject *) self, "liveDocsFormat", args, 2);
          }

          static PyObject *t_Lucene42Codec_normsFormat(t_Lucene42Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::NormsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.normsFormat());
              return ::org::apache::lucene::codecs::t_NormsFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene42Codec), (PyObject *) self, "normsFormat", args, 2);
          }

          static PyObject *t_Lucene42Codec_postingsFormat(t_Lucene42Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::PostingsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.postingsFormat());
              return ::org::apache::lucene::codecs::t_PostingsFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene42Codec), (PyObject *) self, "postingsFormat", args, 2);
          }

          static PyObject *t_Lucene42Codec_segmentInfoFormat(t_Lucene42Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::SegmentInfoFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.segmentInfoFormat());
              return ::org::apache::lucene::codecs::t_SegmentInfoFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene42Codec), (PyObject *) self, "segmentInfoFormat", args, 2);
          }

          static PyObject *t_Lucene42Codec_storedFieldsFormat(t_Lucene42Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::StoredFieldsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.storedFieldsFormat());
              return ::org::apache::lucene::codecs::t_StoredFieldsFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene42Codec), (PyObject *) self, "storedFieldsFormat", args, 2);
          }

          static PyObject *t_Lucene42Codec_termVectorsFormat(t_Lucene42Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::TermVectorsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.termVectorsFormat());
              return ::org::apache::lucene::codecs::t_TermVectorsFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene42Codec), (PyObject *) self, "termVectorsFormat", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/grouping/AbstractDistinctValuesCollector.h"
#include "java/util/List.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/Scorer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {

          ::java::lang::Class *AbstractDistinctValuesCollector::class$ = NULL;
          jmethodID *AbstractDistinctValuesCollector::mids$ = NULL;
          bool AbstractDistinctValuesCollector::live$ = false;

          jclass AbstractDistinctValuesCollector::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/grouping/AbstractDistinctValuesCollector");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_acceptsDocsOutOfOrder_54c6a16a] = env->getMethodID(cls, "acceptsDocsOutOfOrder", "()Z");
              mids$[mid_getGroups_87851566] = env->getMethodID(cls, "getGroups", "()Ljava/util/List;");
              mids$[mid_setScorer_8be0880c] = env->getMethodID(cls, "setScorer", "(Lorg/apache/lucene/search/Scorer;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          AbstractDistinctValuesCollector::AbstractDistinctValuesCollector() : ::org::apache::lucene::search::Collector(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jboolean AbstractDistinctValuesCollector::acceptsDocsOutOfOrder() const
          {
            return env->callBooleanMethod(this$, mids$[mid_acceptsDocsOutOfOrder_54c6a16a]);
          }

          ::java::util::List AbstractDistinctValuesCollector::getGroups() const
          {
            return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getGroups_87851566]));
          }

          void AbstractDistinctValuesCollector::setScorer(const ::org::apache::lucene::search::Scorer & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setScorer_8be0880c], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/search/grouping/AbstractDistinctValuesCollector$GroupCount.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          static PyObject *t_AbstractDistinctValuesCollector_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AbstractDistinctValuesCollector_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AbstractDistinctValuesCollector_of_(t_AbstractDistinctValuesCollector *self, PyObject *args);
          static int t_AbstractDistinctValuesCollector_init_(t_AbstractDistinctValuesCollector *self, PyObject *args, PyObject *kwds);
          static PyObject *t_AbstractDistinctValuesCollector_acceptsDocsOutOfOrder(t_AbstractDistinctValuesCollector *self, PyObject *args);
          static PyObject *t_AbstractDistinctValuesCollector_getGroups(t_AbstractDistinctValuesCollector *self);
          static PyObject *t_AbstractDistinctValuesCollector_setScorer(t_AbstractDistinctValuesCollector *self, PyObject *args);
          static PyObject *t_AbstractDistinctValuesCollector_get__groups(t_AbstractDistinctValuesCollector *self, void *data);
          static int t_AbstractDistinctValuesCollector_set__scorer(t_AbstractDistinctValuesCollector *self, PyObject *arg, void *data);
          static PyObject *t_AbstractDistinctValuesCollector_get__parameters_(t_AbstractDistinctValuesCollector *self, void *data);
          static PyGetSetDef t_AbstractDistinctValuesCollector__fields_[] = {
            DECLARE_GET_FIELD(t_AbstractDistinctValuesCollector, groups),
            DECLARE_SET_FIELD(t_AbstractDistinctValuesCollector, scorer),
            DECLARE_GET_FIELD(t_AbstractDistinctValuesCollector, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_AbstractDistinctValuesCollector__methods_[] = {
            DECLARE_METHOD(t_AbstractDistinctValuesCollector, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AbstractDistinctValuesCollector, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AbstractDistinctValuesCollector, of_, METH_VARARGS),
            DECLARE_METHOD(t_AbstractDistinctValuesCollector, acceptsDocsOutOfOrder, METH_VARARGS),
            DECLARE_METHOD(t_AbstractDistinctValuesCollector, getGroups, METH_NOARGS),
            DECLARE_METHOD(t_AbstractDistinctValuesCollector, setScorer, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(AbstractDistinctValuesCollector, t_AbstractDistinctValuesCollector, ::org::apache::lucene::search::Collector, AbstractDistinctValuesCollector, t_AbstractDistinctValuesCollector_init_, 0, 0, t_AbstractDistinctValuesCollector__fields_, 0, 0);
          PyObject *t_AbstractDistinctValuesCollector::wrap_Object(const AbstractDistinctValuesCollector& object, PyTypeObject *p0)
          {
            PyObject *obj = t_AbstractDistinctValuesCollector::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_AbstractDistinctValuesCollector *self = (t_AbstractDistinctValuesCollector *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_AbstractDistinctValuesCollector::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_AbstractDistinctValuesCollector::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_AbstractDistinctValuesCollector *self = (t_AbstractDistinctValuesCollector *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_AbstractDistinctValuesCollector::install(PyObject *module)
          {
            installType(&PY_TYPE(AbstractDistinctValuesCollector), module, "AbstractDistinctValuesCollector", 0);
            PyDict_SetItemString(PY_TYPE(AbstractDistinctValuesCollector).tp_dict, "GroupCount", make_descriptor(&PY_TYPE(AbstractDistinctValuesCollector$GroupCount)));
          }

          void t_AbstractDistinctValuesCollector::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(AbstractDistinctValuesCollector).tp_dict, "class_", make_descriptor(AbstractDistinctValuesCollector::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(AbstractDistinctValuesCollector).tp_dict, "wrapfn_", make_descriptor(t_AbstractDistinctValuesCollector::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(AbstractDistinctValuesCollector).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_AbstractDistinctValuesCollector_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, AbstractDistinctValuesCollector::initializeClass, 1)))
              return NULL;
            return t_AbstractDistinctValuesCollector::wrap_Object(AbstractDistinctValuesCollector(((t_AbstractDistinctValuesCollector *) arg)->object.this$));
          }
          static PyObject *t_AbstractDistinctValuesCollector_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, AbstractDistinctValuesCollector::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_AbstractDistinctValuesCollector_of_(t_AbstractDistinctValuesCollector *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_AbstractDistinctValuesCollector_init_(t_AbstractDistinctValuesCollector *self, PyObject *args, PyObject *kwds)
          {
            AbstractDistinctValuesCollector object((jobject) NULL);

            INT_CALL(object = AbstractDistinctValuesCollector());
            self->object = object;

            return 0;
          }

          static PyObject *t_AbstractDistinctValuesCollector_acceptsDocsOutOfOrder(t_AbstractDistinctValuesCollector *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.acceptsDocsOutOfOrder());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(AbstractDistinctValuesCollector), (PyObject *) self, "acceptsDocsOutOfOrder", args, 2);
          }

          static PyObject *t_AbstractDistinctValuesCollector_getGroups(t_AbstractDistinctValuesCollector *self)
          {
            ::java::util::List result((jobject) NULL);
            OBJ_CALL(result = self->object.getGroups());
            return ::java::util::t_List::wrap_Object(result, self->parameters[0]);
          }

          static PyObject *t_AbstractDistinctValuesCollector_setScorer(t_AbstractDistinctValuesCollector *self, PyObject *args)
          {
            ::org::apache::lucene::search::Scorer a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::search::Scorer::initializeClass, &a0))
            {
              OBJ_CALL(self->object.setScorer(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(AbstractDistinctValuesCollector), (PyObject *) self, "setScorer", args, 2);
          }
          static PyObject *t_AbstractDistinctValuesCollector_get__parameters_(t_AbstractDistinctValuesCollector *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_AbstractDistinctValuesCollector_get__groups(t_AbstractDistinctValuesCollector *self, void *data)
          {
            ::java::util::List value((jobject) NULL);
            OBJ_CALL(value = self->object.getGroups());
            return ::java::util::t_List::wrap_Object(value);
          }

          static int t_AbstractDistinctValuesCollector_set__scorer(t_AbstractDistinctValuesCollector *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::search::Scorer value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::search::Scorer::initializeClass, &value))
              {
                INT_CALL(self->object.setScorer(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "scorer", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/pylucene/search/PythonFieldComparatorSource.h"
#include "org/apache/lucene/search/FieldComparator.h"
#include "java/io/IOException.h"
#include "java/lang/String.h"
#include "java/lang/Throwable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace search {

        ::java::lang::Class *PythonFieldComparatorSource::class$ = NULL;
        jmethodID *PythonFieldComparatorSource::mids$ = NULL;
        bool PythonFieldComparatorSource::live$ = false;

        jclass PythonFieldComparatorSource::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/pylucene/search/PythonFieldComparatorSource");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_finalize_54c6a166] = env->getMethodID(cls, "finalize", "()V");
            mids$[mid_newComparator_0c7e6c91] = env->getMethodID(cls, "newComparator", "(Ljava/lang/String;IIZ)Lorg/apache/lucene/search/FieldComparator;");
            mids$[mid_pythonDecRef_54c6a166] = env->getMethodID(cls, "pythonDecRef", "()V");
            mids$[mid_pythonExtension_54c6a17a] = env->getMethodID(cls, "pythonExtension", "()J");
            mids$[mid_pythonExtension_0ee6df2f] = env->getMethodID(cls, "pythonExtension", "(J)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PythonFieldComparatorSource::PythonFieldComparatorSource() : ::org::apache::lucene::search::FieldComparatorSource(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void PythonFieldComparatorSource::finalize() const
        {
          env->callVoidMethod(this$, mids$[mid_finalize_54c6a166]);
        }

        jlong PythonFieldComparatorSource::pythonExtension() const
        {
          return env->callLongMethod(this$, mids$[mid_pythonExtension_54c6a17a]);
        }

        void PythonFieldComparatorSource::pythonExtension(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_pythonExtension_0ee6df2f], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace search {
        static PyObject *t_PythonFieldComparatorSource_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PythonFieldComparatorSource_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PythonFieldComparatorSource_init_(t_PythonFieldComparatorSource *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PythonFieldComparatorSource_finalize(t_PythonFieldComparatorSource *self);
        static PyObject *t_PythonFieldComparatorSource_pythonExtension(t_PythonFieldComparatorSource *self, PyObject *args);
        static jobject JNICALL t_PythonFieldComparatorSource_newComparator0(JNIEnv *jenv, jobject jobj, jobject a0, jint a1, jint a2, jboolean a3);
        static void JNICALL t_PythonFieldComparatorSource_pythonDecRef1(JNIEnv *jenv, jobject jobj);
        static PyObject *t_PythonFieldComparatorSource_get__self(t_PythonFieldComparatorSource *self, void *data);
        static PyGetSetDef t_PythonFieldComparatorSource__fields_[] = {
          DECLARE_GET_FIELD(t_PythonFieldComparatorSource, self),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PythonFieldComparatorSource__methods_[] = {
          DECLARE_METHOD(t_PythonFieldComparatorSource, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonFieldComparatorSource, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonFieldComparatorSource, finalize, METH_NOARGS),
          DECLARE_METHOD(t_PythonFieldComparatorSource, pythonExtension, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PythonFieldComparatorSource, t_PythonFieldComparatorSource, ::org::apache::lucene::search::FieldComparatorSource, PythonFieldComparatorSource, t_PythonFieldComparatorSource_init_, 0, 0, t_PythonFieldComparatorSource__fields_, 0, 0);

        void t_PythonFieldComparatorSource::install(PyObject *module)
        {
          installType(&PY_TYPE(PythonFieldComparatorSource), module, "PythonFieldComparatorSource", 1);
        }

        void t_PythonFieldComparatorSource::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PythonFieldComparatorSource).tp_dict, "class_", make_descriptor(PythonFieldComparatorSource::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PythonFieldComparatorSource).tp_dict, "wrapfn_", make_descriptor(t_PythonFieldComparatorSource::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PythonFieldComparatorSource).tp_dict, "boxfn_", make_descriptor(boxObject));
          jclass cls = env->getClass(PythonFieldComparatorSource::initializeClass);
          JNINativeMethod methods[] = {
            { "newComparator", "(Ljava/lang/String;IIZ)Lorg/apache/lucene/search/FieldComparator;", (void *) t_PythonFieldComparatorSource_newComparator0 },
            { "pythonDecRef", "()V", (void *) t_PythonFieldComparatorSource_pythonDecRef1 },
          };
          env->registerNatives(cls, methods, 2);
        }

        static PyObject *t_PythonFieldComparatorSource_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PythonFieldComparatorSource::initializeClass, 1)))
            return NULL;
          return t_PythonFieldComparatorSource::wrap_Object(PythonFieldComparatorSource(((t_PythonFieldComparatorSource *) arg)->object.this$));
        }
        static PyObject *t_PythonFieldComparatorSource_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PythonFieldComparatorSource::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PythonFieldComparatorSource_init_(t_PythonFieldComparatorSource *self, PyObject *args, PyObject *kwds)
        {
          PythonFieldComparatorSource object((jobject) NULL);

          INT_CALL(object = PythonFieldComparatorSource());
          self->object = object;

          Py_INCREF((PyObject *) self);
          self->object.pythonExtension((jlong) (Py_intptr_t) (void *) self);

          return 0;
        }

        static PyObject *t_PythonFieldComparatorSource_finalize(t_PythonFieldComparatorSource *self)
        {
          OBJ_CALL(self->object.finalize());
          Py_RETURN_NONE;
        }

        static PyObject *t_PythonFieldComparatorSource_pythonExtension(t_PythonFieldComparatorSource *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              jlong result;
              OBJ_CALL(result = self->object.pythonExtension());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }
            break;
           case 1:
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.pythonExtension(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "pythonExtension", args);
          return NULL;
        }

        static jobject JNICALL t_PythonFieldComparatorSource_newComparator0(JNIEnv *jenv, jobject jobj, jobject a0, jint a1, jint a2, jboolean a3)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonFieldComparatorSource::mids$[PythonFieldComparatorSource::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          ::org::apache::lucene::search::FieldComparator value((jobject) NULL);
          PyObject *o0 = env->fromJString((jstring) a0, 0);
          PyObject *o3 = (a3 ? Py_True : Py_False);
          PyObject *result = PyObject_CallMethod(obj, "newComparator", "OiiO", o0, (int) a1, (int) a2, o3);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "k", ::org::apache::lucene::search::FieldComparator::initializeClass, &value))
          {
            throwTypeError("newComparator", result);
            Py_DECREF(result);
          }
          else
          {
            jobj = jenv->NewLocalRef(value.this$);
            Py_DECREF(result);
            return jobj;
          }

          return (jobject) NULL;
        }

        static void JNICALL t_PythonFieldComparatorSource_pythonDecRef1(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonFieldComparatorSource::mids$[PythonFieldComparatorSource::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            jenv->CallVoidMethod(jobj, PythonFieldComparatorSource::mids$[PythonFieldComparatorSource::mid_pythonExtension_0ee6df2f], (jlong) 0);
            env->finalizeObject(jenv, obj);
          }
        }

        static PyObject *t_PythonFieldComparatorSource_get__self(t_PythonFieldComparatorSource *self, void *data)
        {
          jlong ptr;
          OBJ_CALL(ptr = self->object.pythonExtension());
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            Py_INCREF(obj);
            return obj;
          }
          else
            Py_RETURN_NONE;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/range/RangeFacetCounts.h"
#include "org/apache/lucene/facet/FacetResult.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "java/util/List.h"
#include "java/lang/Number.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace range {

          ::java::lang::Class *RangeFacetCounts::class$ = NULL;
          jmethodID *RangeFacetCounts::mids$ = NULL;
          bool RangeFacetCounts::live$ = false;

          jclass RangeFacetCounts::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/range/RangeFacetCounts");

              mids$ = new jmethodID[max_mid];
              mids$[mid_getAllDims_cdc2a528] = env->getMethodID(cls, "getAllDims", "(I)Ljava/util/List;");
              mids$[mid_getSpecificValue_8ecbcac9] = env->getMethodID(cls, "getSpecificValue", "(Ljava/lang/String;[Ljava/lang/String;)Ljava/lang/Number;");
              mids$[mid_getTopChildren_37e8c044] = env->getMethodID(cls, "getTopChildren", "(ILjava/lang/String;[Ljava/lang/String;)Lorg/apache/lucene/facet/FacetResult;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::java::util::List RangeFacetCounts::getAllDims(jint a0) const
          {
            return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getAllDims_cdc2a528], a0));
          }

          ::java::lang::Number RangeFacetCounts::getSpecificValue(const ::java::lang::String & a0, const JArray< ::java::lang::String > & a1) const
          {
            return ::java::lang::Number(env->callObjectMethod(this$, mids$[mid_getSpecificValue_8ecbcac9], a0.this$, a1.this$));
          }

          ::org::apache::lucene::facet::FacetResult RangeFacetCounts::getTopChildren(jint a0, const ::java::lang::String & a1, const JArray< ::java::lang::String > & a2) const
          {
            return ::org::apache::lucene::facet::FacetResult(env->callObjectMethod(this$, mids$[mid_getTopChildren_37e8c044], a0, a1.this$, a2.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace range {
          static PyObject *t_RangeFacetCounts_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_RangeFacetCounts_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_RangeFacetCounts_getAllDims(t_RangeFacetCounts *self, PyObject *args);
          static PyObject *t_RangeFacetCounts_getSpecificValue(t_RangeFacetCounts *self, PyObject *args);
          static PyObject *t_RangeFacetCounts_getTopChildren(t_RangeFacetCounts *self, PyObject *args);

          static PyMethodDef t_RangeFacetCounts__methods_[] = {
            DECLARE_METHOD(t_RangeFacetCounts, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_RangeFacetCounts, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_RangeFacetCounts, getAllDims, METH_VARARGS),
            DECLARE_METHOD(t_RangeFacetCounts, getSpecificValue, METH_VARARGS),
            DECLARE_METHOD(t_RangeFacetCounts, getTopChildren, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(RangeFacetCounts, t_RangeFacetCounts, ::org::apache::lucene::facet::Facets, RangeFacetCounts, abstract_init, 0, 0, 0, 0, 0);

          void t_RangeFacetCounts::install(PyObject *module)
          {
            installType(&PY_TYPE(RangeFacetCounts), module, "RangeFacetCounts", 0);
          }

          void t_RangeFacetCounts::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(RangeFacetCounts).tp_dict, "class_", make_descriptor(RangeFacetCounts::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(RangeFacetCounts).tp_dict, "wrapfn_", make_descriptor(t_RangeFacetCounts::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(RangeFacetCounts).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_RangeFacetCounts_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, RangeFacetCounts::initializeClass, 1)))
              return NULL;
            return t_RangeFacetCounts::wrap_Object(RangeFacetCounts(((t_RangeFacetCounts *) arg)->object.this$));
          }
          static PyObject *t_RangeFacetCounts_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, RangeFacetCounts::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_RangeFacetCounts_getAllDims(t_RangeFacetCounts *self, PyObject *args)
          {
            jint a0;
            ::java::util::List result((jobject) NULL);

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(result = self->object.getAllDims(a0));
              return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::facet::PY_TYPE(FacetResult));
            }

            return callSuper(&PY_TYPE(RangeFacetCounts), (PyObject *) self, "getAllDims", args, 2);
          }

          static PyObject *t_RangeFacetCounts_getSpecificValue(t_RangeFacetCounts *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            JArray< ::java::lang::String > a1((jobject) NULL);
            ::java::lang::Number result((jobject) NULL);

            if (!parseArgs(args, "s[s", &a0, &a1))
            {
              OBJ_CALL(result = self->object.getSpecificValue(a0, a1));
              return ::java::lang::t_Number::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(RangeFacetCounts), (PyObject *) self, "getSpecificValue", args, 2);
          }

          static PyObject *t_RangeFacetCounts_getTopChildren(t_RangeFacetCounts *self, PyObject *args)
          {
            jint a0;
            ::java::lang::String a1((jobject) NULL);
            JArray< ::java::lang::String > a2((jobject) NULL);
            ::org::apache::lucene::facet::FacetResult result((jobject) NULL);

            if (!parseArgs(args, "Is[s", &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.getTopChildren(a0, a1, a2));
              return ::org::apache::lucene::facet::t_FacetResult::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(RangeFacetCounts), (PyObject *) self, "getTopChildren", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/PrefixAwareTokenFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/Token.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *PrefixAwareTokenFilter::class$ = NULL;
          jmethodID *PrefixAwareTokenFilter::mids$ = NULL;
          bool PrefixAwareTokenFilter::live$ = false;

          jclass PrefixAwareTokenFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/PrefixAwareTokenFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_74ceae3e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
              mids$[mid_end_54c6a166] = env->getMethodID(cls, "end", "()V");
              mids$[mid_getPrefix_71f550c9] = env->getMethodID(cls, "getPrefix", "()Lorg/apache/lucene/analysis/TokenStream;");
              mids$[mid_getSuffix_71f550c9] = env->getMethodID(cls, "getSuffix", "()Lorg/apache/lucene/analysis/TokenStream;");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");
              mids$[mid_setPrefix_c7c794dc] = env->getMethodID(cls, "setPrefix", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_setSuffix_c7c794dc] = env->getMethodID(cls, "setSuffix", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_updateSuffixToken_a810a20b] = env->getMethodID(cls, "updateSuffixToken", "(Lorg/apache/lucene/analysis/Token;Lorg/apache/lucene/analysis/Token;)Lorg/apache/lucene/analysis/Token;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PrefixAwareTokenFilter::PrefixAwareTokenFilter(const ::org::apache::lucene::analysis::TokenStream & a0, const ::org::apache::lucene::analysis::TokenStream & a1) : ::org::apache::lucene::analysis::TokenStream(env->newObject(initializeClass, &mids$, mid_init$_74ceae3e, a0.this$, a1.this$)) {}

          void PrefixAwareTokenFilter::close() const
          {
            env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
          }

          void PrefixAwareTokenFilter::end() const
          {
            env->callVoidMethod(this$, mids$[mid_end_54c6a166]);
          }

          ::org::apache::lucene::analysis::TokenStream PrefixAwareTokenFilter::getPrefix() const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_getPrefix_71f550c9]));
          }

          ::org::apache::lucene::analysis::TokenStream PrefixAwareTokenFilter::getSuffix() const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_getSuffix_71f550c9]));
          }

          jboolean PrefixAwareTokenFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void PrefixAwareTokenFilter::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }

          void PrefixAwareTokenFilter::setPrefix(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setPrefix_c7c794dc], a0.this$);
          }

          void PrefixAwareTokenFilter::setSuffix(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setSuffix_c7c794dc], a0.this$);
          }

          ::org::apache::lucene::analysis::Token PrefixAwareTokenFilter::updateSuffixToken(const ::org::apache::lucene::analysis::Token & a0, const ::org::apache::lucene::analysis::Token & a1) const
          {
            return ::org::apache::lucene::analysis::Token(env->callObjectMethod(this$, mids$[mid_updateSuffixToken_a810a20b], a0.this$, a1.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_PrefixAwareTokenFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PrefixAwareTokenFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PrefixAwareTokenFilter_init_(t_PrefixAwareTokenFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PrefixAwareTokenFilter_close(t_PrefixAwareTokenFilter *self, PyObject *args);
          static PyObject *t_PrefixAwareTokenFilter_end(t_PrefixAwareTokenFilter *self, PyObject *args);
          static PyObject *t_PrefixAwareTokenFilter_getPrefix(t_PrefixAwareTokenFilter *self);
          static PyObject *t_PrefixAwareTokenFilter_getSuffix(t_PrefixAwareTokenFilter *self);
          static PyObject *t_PrefixAwareTokenFilter_incrementToken(t_PrefixAwareTokenFilter *self, PyObject *args);
          static PyObject *t_PrefixAwareTokenFilter_reset(t_PrefixAwareTokenFilter *self, PyObject *args);
          static PyObject *t_PrefixAwareTokenFilter_setPrefix(t_PrefixAwareTokenFilter *self, PyObject *arg);
          static PyObject *t_PrefixAwareTokenFilter_setSuffix(t_PrefixAwareTokenFilter *self, PyObject *arg);
          static PyObject *t_PrefixAwareTokenFilter_updateSuffixToken(t_PrefixAwareTokenFilter *self, PyObject *args);
          static PyObject *t_PrefixAwareTokenFilter_get__prefix(t_PrefixAwareTokenFilter *self, void *data);
          static int t_PrefixAwareTokenFilter_set__prefix(t_PrefixAwareTokenFilter *self, PyObject *arg, void *data);
          static PyObject *t_PrefixAwareTokenFilter_get__suffix(t_PrefixAwareTokenFilter *self, void *data);
          static int t_PrefixAwareTokenFilter_set__suffix(t_PrefixAwareTokenFilter *self, PyObject *arg, void *data);
          static PyGetSetDef t_PrefixAwareTokenFilter__fields_[] = {
            DECLARE_GETSET_FIELD(t_PrefixAwareTokenFilter, prefix),
            DECLARE_GETSET_FIELD(t_PrefixAwareTokenFilter, suffix),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_PrefixAwareTokenFilter__methods_[] = {
            DECLARE_METHOD(t_PrefixAwareTokenFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PrefixAwareTokenFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PrefixAwareTokenFilter, close, METH_VARARGS),
            DECLARE_METHOD(t_PrefixAwareTokenFilter, end, METH_VARARGS),
            DECLARE_METHOD(t_PrefixAwareTokenFilter, getPrefix, METH_NOARGS),
            DECLARE_METHOD(t_PrefixAwareTokenFilter, getSuffix, METH_NOARGS),
            DECLARE_METHOD(t_PrefixAwareTokenFilter, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_PrefixAwareTokenFilter, reset, METH_VARARGS),
            DECLARE_METHOD(t_PrefixAwareTokenFilter, setPrefix, METH_O),
            DECLARE_METHOD(t_PrefixAwareTokenFilter, setSuffix, METH_O),
            DECLARE_METHOD(t_PrefixAwareTokenFilter, updateSuffixToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PrefixAwareTokenFilter, t_PrefixAwareTokenFilter, ::org::apache::lucene::analysis::TokenStream, PrefixAwareTokenFilter, t_PrefixAwareTokenFilter_init_, 0, 0, t_PrefixAwareTokenFilter__fields_, 0, 0);

          void t_PrefixAwareTokenFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(PrefixAwareTokenFilter), module, "PrefixAwareTokenFilter", 0);
          }

          void t_PrefixAwareTokenFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PrefixAwareTokenFilter).tp_dict, "class_", make_descriptor(PrefixAwareTokenFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PrefixAwareTokenFilter).tp_dict, "wrapfn_", make_descriptor(t_PrefixAwareTokenFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PrefixAwareTokenFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PrefixAwareTokenFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PrefixAwareTokenFilter::initializeClass, 1)))
              return NULL;
            return t_PrefixAwareTokenFilter::wrap_Object(PrefixAwareTokenFilter(((t_PrefixAwareTokenFilter *) arg)->object.this$));
          }
          static PyObject *t_PrefixAwareTokenFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PrefixAwareTokenFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PrefixAwareTokenFilter_init_(t_PrefixAwareTokenFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
            PrefixAwareTokenFilter object((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1))
            {
              INT_CALL(object = PrefixAwareTokenFilter(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PrefixAwareTokenFilter_close(t_PrefixAwareTokenFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.close());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(PrefixAwareTokenFilter), (PyObject *) self, "close", args, 2);
          }

          static PyObject *t_PrefixAwareTokenFilter_end(t_PrefixAwareTokenFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.end());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(PrefixAwareTokenFilter), (PyObject *) self, "end", args, 2);
          }

          static PyObject *t_PrefixAwareTokenFilter_getPrefix(t_PrefixAwareTokenFilter *self)
          {
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);
            OBJ_CALL(result = self->object.getPrefix());
            return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
          }

          static PyObject *t_PrefixAwareTokenFilter_getSuffix(t_PrefixAwareTokenFilter *self)
          {
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);
            OBJ_CALL(result = self->object.getSuffix());
            return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
          }

          static PyObject *t_PrefixAwareTokenFilter_incrementToken(t_PrefixAwareTokenFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(PrefixAwareTokenFilter), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_PrefixAwareTokenFilter_reset(t_PrefixAwareTokenFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(PrefixAwareTokenFilter), (PyObject *) self, "reset", args, 2);
          }

          static PyObject *t_PrefixAwareTokenFilter_setPrefix(t_PrefixAwareTokenFilter *self, PyObject *arg)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(self->object.setPrefix(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setPrefix", arg);
            return NULL;
          }

          static PyObject *t_PrefixAwareTokenFilter_setSuffix(t_PrefixAwareTokenFilter *self, PyObject *arg)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(self->object.setSuffix(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setSuffix", arg);
            return NULL;
          }

          static PyObject *t_PrefixAwareTokenFilter_updateSuffixToken(t_PrefixAwareTokenFilter *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::Token a0((jobject) NULL);
            ::org::apache::lucene::analysis::Token a1((jobject) NULL);
            ::org::apache::lucene::analysis::Token result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::analysis::Token::initializeClass, ::org::apache::lucene::analysis::Token::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.updateSuffixToken(a0, a1));
              return ::org::apache::lucene::analysis::t_Token::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "updateSuffixToken", args);
            return NULL;
          }

          static PyObject *t_PrefixAwareTokenFilter_get__prefix(t_PrefixAwareTokenFilter *self, void *data)
          {
            ::org::apache::lucene::analysis::TokenStream value((jobject) NULL);
            OBJ_CALL(value = self->object.getPrefix());
            return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(value);
          }
          static int t_PrefixAwareTokenFilter_set__prefix(t_PrefixAwareTokenFilter *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::analysis::TokenStream value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &value))
              {
                INT_CALL(self->object.setPrefix(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "prefix", arg);
            return -1;
          }

          static PyObject *t_PrefixAwareTokenFilter_get__suffix(t_PrefixAwareTokenFilter *self, void *data)
          {
            ::org::apache::lucene::analysis::TokenStream value((jobject) NULL);
            OBJ_CALL(value = self->object.getSuffix());
            return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(value);
          }
          static int t_PrefixAwareTokenFilter_set__suffix(t_PrefixAwareTokenFilter *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::analysis::TokenStream value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &value))
              {
                INT_CALL(self->object.setSuffix(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "suffix", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/SortedSetDocValues.h"
#include "org/apache/lucene/index/TermsEnum.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *SortedSetDocValues::class$ = NULL;
        jmethodID *SortedSetDocValues::mids$ = NULL;
        bool SortedSetDocValues::live$ = false;
        jlong SortedSetDocValues::NO_MORE_ORDS = (jlong) 0;

        jclass SortedSetDocValues::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/SortedSetDocValues");

            mids$ = new jmethodID[max_mid];
            mids$[mid_getValueCount_54c6a17a] = env->getMethodID(cls, "getValueCount", "()J");
            mids$[mid_lookupOrd_9c59b7f4] = env->getMethodID(cls, "lookupOrd", "(J)Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_lookupTerm_7bc03dd8] = env->getMethodID(cls, "lookupTerm", "(Lorg/apache/lucene/util/BytesRef;)J");
            mids$[mid_nextOrd_54c6a17a] = env->getMethodID(cls, "nextOrd", "()J");
            mids$[mid_setDocument_39c7bd3c] = env->getMethodID(cls, "setDocument", "(I)V");
            mids$[mid_termsEnum_ea7afd9f] = env->getMethodID(cls, "termsEnum", "()Lorg/apache/lucene/index/TermsEnum;");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            NO_MORE_ORDS = env->getStaticLongField(cls, "NO_MORE_ORDS");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jlong SortedSetDocValues::getValueCount() const
        {
          return env->callLongMethod(this$, mids$[mid_getValueCount_54c6a17a]);
        }

        ::org::apache::lucene::util::BytesRef SortedSetDocValues::lookupOrd(jlong a0) const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_lookupOrd_9c59b7f4], a0));
        }

        jlong SortedSetDocValues::lookupTerm(const ::org::apache::lucene::util::BytesRef & a0) const
        {
          return env->callLongMethod(this$, mids$[mid_lookupTerm_7bc03dd8], a0.this$);
        }

        jlong SortedSetDocValues::nextOrd() const
        {
          return env->callLongMethod(this$, mids$[mid_nextOrd_54c6a17a]);
        }

        void SortedSetDocValues::setDocument(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setDocument_39c7bd3c], a0);
        }

        ::org::apache::lucene::index::TermsEnum SortedSetDocValues::termsEnum() const
        {
          return ::org::apache::lucene::index::TermsEnum(env->callObjectMethod(this$, mids$[mid_termsEnum_ea7afd9f]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_SortedSetDocValues_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SortedSetDocValues_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SortedSetDocValues_getValueCount(t_SortedSetDocValues *self);
        static PyObject *t_SortedSetDocValues_lookupOrd(t_SortedSetDocValues *self, PyObject *arg);
        static PyObject *t_SortedSetDocValues_lookupTerm(t_SortedSetDocValues *self, PyObject *arg);
        static PyObject *t_SortedSetDocValues_nextOrd(t_SortedSetDocValues *self);
        static PyObject *t_SortedSetDocValues_setDocument(t_SortedSetDocValues *self, PyObject *arg);
        static PyObject *t_SortedSetDocValues_termsEnum(t_SortedSetDocValues *self);
        static int t_SortedSetDocValues_set__document(t_SortedSetDocValues *self, PyObject *arg, void *data);
        static PyObject *t_SortedSetDocValues_get__valueCount(t_SortedSetDocValues *self, void *data);
        static PyGetSetDef t_SortedSetDocValues__fields_[] = {
          DECLARE_SET_FIELD(t_SortedSetDocValues, document),
          DECLARE_GET_FIELD(t_SortedSetDocValues, valueCount),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_SortedSetDocValues__methods_[] = {
          DECLARE_METHOD(t_SortedSetDocValues, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SortedSetDocValues, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SortedSetDocValues, getValueCount, METH_NOARGS),
          DECLARE_METHOD(t_SortedSetDocValues, lookupOrd, METH_O),
          DECLARE_METHOD(t_SortedSetDocValues, lookupTerm, METH_O),
          DECLARE_METHOD(t_SortedSetDocValues, nextOrd, METH_NOARGS),
          DECLARE_METHOD(t_SortedSetDocValues, setDocument, METH_O),
          DECLARE_METHOD(t_SortedSetDocValues, termsEnum, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SortedSetDocValues, t_SortedSetDocValues, ::java::lang::Object, SortedSetDocValues, abstract_init, 0, 0, t_SortedSetDocValues__fields_, 0, 0);

        void t_SortedSetDocValues::install(PyObject *module)
        {
          installType(&PY_TYPE(SortedSetDocValues), module, "SortedSetDocValues", 0);
        }

        void t_SortedSetDocValues::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SortedSetDocValues).tp_dict, "class_", make_descriptor(SortedSetDocValues::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SortedSetDocValues).tp_dict, "wrapfn_", make_descriptor(t_SortedSetDocValues::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SortedSetDocValues).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(SortedSetDocValues::initializeClass);
          PyDict_SetItemString(PY_TYPE(SortedSetDocValues).tp_dict, "NO_MORE_ORDS", make_descriptor(SortedSetDocValues::NO_MORE_ORDS));
        }

        static PyObject *t_SortedSetDocValues_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SortedSetDocValues::initializeClass, 1)))
            return NULL;
          return t_SortedSetDocValues::wrap_Object(SortedSetDocValues(((t_SortedSetDocValues *) arg)->object.this$));
        }
        static PyObject *t_SortedSetDocValues_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SortedSetDocValues::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_SortedSetDocValues_getValueCount(t_SortedSetDocValues *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getValueCount());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_SortedSetDocValues_lookupOrd(t_SortedSetDocValues *self, PyObject *arg)
        {
          jlong a0;
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(result = self->object.lookupOrd(a0));
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "lookupOrd", arg);
          return NULL;
        }

        static PyObject *t_SortedSetDocValues_lookupTerm(t_SortedSetDocValues *self, PyObject *arg)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          jlong result;

          if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.lookupTerm(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError((PyObject *) self, "lookupTerm", arg);
          return NULL;
        }

        static PyObject *t_SortedSetDocValues_nextOrd(t_SortedSetDocValues *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.nextOrd());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_SortedSetDocValues_setDocument(t_SortedSetDocValues *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.setDocument(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setDocument", arg);
          return NULL;
        }

        static PyObject *t_SortedSetDocValues_termsEnum(t_SortedSetDocValues *self)
        {
          ::org::apache::lucene::index::TermsEnum result((jobject) NULL);
          OBJ_CALL(result = self->object.termsEnum());
          return ::org::apache::lucene::index::t_TermsEnum::wrap_Object(result);
        }

        static int t_SortedSetDocValues_set__document(t_SortedSetDocValues *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setDocument(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "document", arg);
          return -1;
        }

        static PyObject *t_SortedSetDocValues_get__valueCount(t_SortedSetDocValues *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getValueCount());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/util/CharArrayMap.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/util/CharArrayMap$EntrySet.h"
#include "java/lang/CharSequence.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {

          ::java::lang::Class *CharArrayMap::class$ = NULL;
          jmethodID *CharArrayMap::mids$ = NULL;
          bool CharArrayMap::live$ = false;

          jclass CharArrayMap::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/util/CharArrayMap");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_b3a85a05] = env->getMethodID(cls, "<init>", "(IZ)V");
              mids$[mid_init$_8c348fcd] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;Z)V");
              mids$[mid_init$_741c8a04] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Ljava/util/Map;Z)V");
              mids$[mid_init$_b3a872e4] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;IZ)V");
              mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
              mids$[mid_containsKey_a8afc646] = env->getMethodID(cls, "containsKey", "(Ljava/lang/CharSequence;)Z");
              mids$[mid_containsKey_290588e2] = env->getMethodID(cls, "containsKey", "(Ljava/lang/Object;)Z");
              mids$[mid_containsKey_6f0bb35a] = env->getMethodID(cls, "containsKey", "([CII)Z");
              mids$[mid_copy_72a3d358] = env->getStaticMethodID(cls, "copy", "(Ljava/util/Map;)Lorg/apache/lucene/analysis/util/CharArrayMap;");
              mids$[mid_copy_67ffa425] = env->getStaticMethodID(cls, "copy", "(Lorg/apache/lucene/util/Version;Ljava/util/Map;)Lorg/apache/lucene/analysis/util/CharArrayMap;");
              mids$[mid_emptyMap_31b01886] = env->getStaticMethodID(cls, "emptyMap", "()Lorg/apache/lucene/analysis/util/CharArrayMap;");
              mids$[mid_entrySet_9ca3e4b1] = env->getMethodID(cls, "entrySet", "()Lorg/apache/lucene/analysis/util/CharArrayMap$EntrySet;");
              mids$[mid_get_a932a95f] = env->getMethodID(cls, "get", "(Ljava/lang/Object;)Ljava/lang/Object;");
              mids$[mid_get_a739ccff] = env->getMethodID(cls, "get", "(Ljava/lang/CharSequence;)Ljava/lang/Object;");
              mids$[mid_get_c05993cb] = env->getMethodID(cls, "get", "([CII)Ljava/lang/Object;");
              mids$[mid_keySet_d2d3505c] = env->getMethodID(cls, "keySet", "()Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_put_b85c5dc7] = env->getMethodID(cls, "put", "([CLjava/lang/Object;)Ljava/lang/Object;");
              mids$[mid_put_84c802ab] = env->getMethodID(cls, "put", "(Ljava/lang/CharSequence;Ljava/lang/Object;)Ljava/lang/Object;");
              mids$[mid_put_80209419] = env->getMethodID(cls, "put", "(Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/Object;");
              mids$[mid_put_537d5bdf] = env->getMethodID(cls, "put", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;");
              mids$[mid_remove_a932a95f] = env->getMethodID(cls, "remove", "(Ljava/lang/Object;)Ljava/lang/Object;");
              mids$[mid_size_54c6a179] = env->getMethodID(cls, "size", "()I");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
              mids$[mid_unmodifiableMap_716215f5] = env->getStaticMethodID(cls, "unmodifiableMap", "(Lorg/apache/lucene/analysis/util/CharArrayMap;)Lorg/apache/lucene/analysis/util/CharArrayMap;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CharArrayMap::CharArrayMap(jint a0, jboolean a1) : ::java::util::AbstractMap(env->newObject(initializeClass, &mids$, mid_init$_b3a85a05, a0, a1)) {}

          CharArrayMap::CharArrayMap(const ::java::util::Map & a0, jboolean a1) : ::java::util::AbstractMap(env->newObject(initializeClass, &mids$, mid_init$_8c348fcd, a0.this$, a1)) {}

          CharArrayMap::CharArrayMap(const ::org::apache::lucene::util::Version & a0, const ::java::util::Map & a1, jboolean a2) : ::java::util::AbstractMap(env->newObject(initializeClass, &mids$, mid_init$_741c8a04, a0.this$, a1.this$, a2)) {}

          CharArrayMap::CharArrayMap(const ::org::apache::lucene::util::Version & a0, jint a1, jboolean a2) : ::java::util::AbstractMap(env->newObject(initializeClass, &mids$, mid_init$_b3a872e4, a0.this$, a1, a2)) {}

          void CharArrayMap::clear() const
          {
            env->callVoidMethod(this$, mids$[mid_clear_54c6a166]);
          }

          jboolean CharArrayMap::containsKey(const ::java::lang::CharSequence & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_containsKey_a8afc646], a0.this$);
          }

          jboolean CharArrayMap::containsKey(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_containsKey_290588e2], a0.this$);
          }

          jboolean CharArrayMap::containsKey(const JArray< jchar > & a0, jint a1, jint a2) const
          {
            return env->callBooleanMethod(this$, mids$[mid_containsKey_6f0bb35a], a0.this$, a1, a2);
          }

          CharArrayMap CharArrayMap::copy(const ::java::util::Map & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return CharArrayMap(env->callStaticObjectMethod(cls, mids$[mid_copy_72a3d358], a0.this$));
          }

          CharArrayMap CharArrayMap::copy(const ::org::apache::lucene::util::Version & a0, const ::java::util::Map & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return CharArrayMap(env->callStaticObjectMethod(cls, mids$[mid_copy_67ffa425], a0.this$, a1.this$));
          }

          CharArrayMap CharArrayMap::emptyMap()
          {
            jclass cls = env->getClass(initializeClass);
            return CharArrayMap(env->callStaticObjectMethod(cls, mids$[mid_emptyMap_31b01886]));
          }

          ::org::apache::lucene::analysis::util::CharArrayMap$EntrySet CharArrayMap::entrySet() const
          {
            return ::org::apache::lucene::analysis::util::CharArrayMap$EntrySet(env->callObjectMethod(this$, mids$[mid_entrySet_9ca3e4b1]));
          }

          ::java::lang::Object CharArrayMap::get(const ::java::lang::Object & a0) const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_get_a932a95f], a0.this$));
          }

          ::java::lang::Object CharArrayMap::get(const ::java::lang::CharSequence & a0) const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_get_a739ccff], a0.this$));
          }

          ::java::lang::Object CharArrayMap::get(const JArray< jchar > & a0, jint a1, jint a2) const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_get_c05993cb], a0.this$, a1, a2));
          }

          ::org::apache::lucene::analysis::util::CharArraySet CharArrayMap::keySet() const
          {
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callObjectMethod(this$, mids$[mid_keySet_d2d3505c]));
          }

          ::java::lang::Object CharArrayMap::put(const JArray< jchar > & a0, const ::java::lang::Object & a1) const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_put_b85c5dc7], a0.this$, a1.this$));
          }

          ::java::lang::Object CharArrayMap::put(const ::java::lang::CharSequence & a0, const ::java::lang::Object & a1) const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_put_84c802ab], a0.this$, a1.this$));
          }

          ::java::lang::Object CharArrayMap::put(const ::java::lang::String & a0, const ::java::lang::Object & a1) const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_put_80209419], a0.this$, a1.this$));
          }

          ::java::lang::Object CharArrayMap::put(const ::java::lang::Object & a0, const ::java::lang::Object & a1) const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_put_537d5bdf], a0.this$, a1.this$));
          }

          ::java::lang::Object CharArrayMap::remove(const ::java::lang::Object & a0) const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_remove_a932a95f], a0.this$));
          }

          jint CharArrayMap::size() const
          {
            return env->callIntMethod(this$, mids$[mid_size_54c6a179]);
          }

          ::java::lang::String CharArrayMap::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }

          CharArrayMap CharArrayMap::unmodifiableMap(const CharArrayMap & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return CharArrayMap(env->callStaticObjectMethod(cls, mids$[mid_unmodifiableMap_716215f5], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {
          static PyObject *t_CharArrayMap_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CharArrayMap_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CharArrayMap_of_(t_CharArrayMap *self, PyObject *args);
          static int t_CharArrayMap_init_(t_CharArrayMap *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CharArrayMap_clear(t_CharArrayMap *self, PyObject *args);
          static PyObject *t_CharArrayMap_containsKey(t_CharArrayMap *self, PyObject *args);
          static PyObject *t_CharArrayMap_copy(PyTypeObject *type, PyObject *args);
          static PyObject *t_CharArrayMap_emptyMap(PyTypeObject *type);
          static PyObject *t_CharArrayMap_entrySet(t_CharArrayMap *self, PyObject *args);
          static PyObject *t_CharArrayMap_get(t_CharArrayMap *self, PyObject *args);
          static PyObject *t_CharArrayMap_keySet(t_CharArrayMap *self, PyObject *args);
          static PyObject *t_CharArrayMap_put(t_CharArrayMap *self, PyObject *args);
          static PyObject *t_CharArrayMap_remove(t_CharArrayMap *self, PyObject *args);
          static PyObject *t_CharArrayMap_size(t_CharArrayMap *self, PyObject *args);
          static PyObject *t_CharArrayMap_toString(t_CharArrayMap *self, PyObject *args);
          static PyObject *t_CharArrayMap_unmodifiableMap(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CharArrayMap_get__parameters_(t_CharArrayMap *self, void *data);
          static PyGetSetDef t_CharArrayMap__fields_[] = {
            DECLARE_GET_FIELD(t_CharArrayMap, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_CharArrayMap__methods_[] = {
            DECLARE_METHOD(t_CharArrayMap, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CharArrayMap, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CharArrayMap, of_, METH_VARARGS),
            DECLARE_METHOD(t_CharArrayMap, clear, METH_VARARGS),
            DECLARE_METHOD(t_CharArrayMap, containsKey, METH_VARARGS),
            DECLARE_METHOD(t_CharArrayMap, copy, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_CharArrayMap, emptyMap, METH_NOARGS | METH_CLASS),
            DECLARE_METHOD(t_CharArrayMap, entrySet, METH_VARARGS),
            DECLARE_METHOD(t_CharArrayMap, get, METH_VARARGS),
            DECLARE_METHOD(t_CharArrayMap, keySet, METH_VARARGS),
            DECLARE_METHOD(t_CharArrayMap, put, METH_VARARGS),
            DECLARE_METHOD(t_CharArrayMap, remove, METH_VARARGS),
            DECLARE_METHOD(t_CharArrayMap, size, METH_VARARGS),
            DECLARE_METHOD(t_CharArrayMap, toString, METH_VARARGS),
            DECLARE_METHOD(t_CharArrayMap, unmodifiableMap, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CharArrayMap, t_CharArrayMap, ::java::util::AbstractMap, CharArrayMap, t_CharArrayMap_init_, 0, 0, t_CharArrayMap__fields_, 0, 0);
          PyObject *t_CharArrayMap::wrap_Object(const CharArrayMap& object, PyTypeObject *p0)
          {
            PyObject *obj = t_CharArrayMap::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_CharArrayMap *self = (t_CharArrayMap *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_CharArrayMap::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_CharArrayMap::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_CharArrayMap *self = (t_CharArrayMap *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_CharArrayMap::install(PyObject *module)
          {
            installType(&PY_TYPE(CharArrayMap), module, "CharArrayMap", 0);
          }

          void t_CharArrayMap::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CharArrayMap).tp_dict, "class_", make_descriptor(CharArrayMap::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CharArrayMap).tp_dict, "wrapfn_", make_descriptor(t_CharArrayMap::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CharArrayMap).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CharArrayMap_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CharArrayMap::initializeClass, 1)))
              return NULL;
            return t_CharArrayMap::wrap_Object(CharArrayMap(((t_CharArrayMap *) arg)->object.this$));
          }
          static PyObject *t_CharArrayMap_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CharArrayMap::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_CharArrayMap_of_(t_CharArrayMap *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_CharArrayMap_init_(t_CharArrayMap *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                jint a0;
                jboolean a1;
                CharArrayMap object((jobject) NULL);

                if (!parseArgs(args, "IZ", &a0, &a1))
                {
                  INT_CALL(object = CharArrayMap(a0, a1));
                  self->object = object;
                  break;
                }
              }
              {
                ::java::util::Map a0((jobject) NULL);
                PyTypeObject **p0;
                jboolean a1;
                CharArrayMap object((jobject) NULL);

                if (!parseArgs(args, "KZ", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
                {
                  INT_CALL(object = CharArrayMap(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                ::java::util::Map a1((jobject) NULL);
                PyTypeObject **p1;
                jboolean a2;
                CharArrayMap object((jobject) NULL);

                if (!parseArgs(args, "kKZ", ::org::apache::lucene::util::Version::initializeClass, ::java::util::Map::initializeClass, &a0, &a1, &p1, ::java::util::t_Map::parameters_, &a2))
                {
                  INT_CALL(object = CharArrayMap(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                jint a1;
                jboolean a2;
                CharArrayMap object((jobject) NULL);

                if (!parseArgs(args, "kIZ", ::org::apache::lucene::util::Version::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = CharArrayMap(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_CharArrayMap_clear(t_CharArrayMap *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.clear());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(CharArrayMap), (PyObject *) self, "clear", args, 2);
          }

          static PyObject *t_CharArrayMap_containsKey(t_CharArrayMap *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                jboolean result;

                if (!parseArgs(args, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
                {
                  OBJ_CALL(result = self->object.containsKey(a0));
                  Py_RETURN_BOOL(result);
                }
              }
              {
                ::java::lang::Object a0((jobject) NULL);
                jboolean result;

                if (!parseArgs(args, "o", &a0))
                {
                  OBJ_CALL(result = self->object.containsKey(a0));
                  Py_RETURN_BOOL(result);
                }
              }
              break;
             case 3:
              {
                JArray< jchar > a0((jobject) NULL);
                jint a1;
                jint a2;
                jboolean result;

                if (!parseArgs(args, "[CII", &a0, &a1, &a2))
                {
                  OBJ_CALL(result = self->object.containsKey(a0, a1, a2));
                  Py_RETURN_BOOL(result);
                }
              }
            }

            return callSuper(&PY_TYPE(CharArrayMap), (PyObject *) self, "containsKey", args, 2);
          }

          static PyObject *t_CharArrayMap_copy(PyTypeObject *type, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::java::util::Map a0((jobject) NULL);
                PyTypeObject **p0;
                CharArrayMap result((jobject) NULL);

                if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
                {
                  OBJ_CALL(result = ::org::apache::lucene::analysis::util::CharArrayMap::copy(a0));
                  return t_CharArrayMap::wrap_Object(result);
                }
              }
              break;
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                ::java::util::Map a1((jobject) NULL);
                PyTypeObject **p1;
                CharArrayMap result((jobject) NULL);

                if (!parseArgs(args, "kK", ::org::apache::lucene::util::Version::initializeClass, ::java::util::Map::initializeClass, &a0, &a1, &p1, ::java::util::t_Map::parameters_))
                {
                  OBJ_CALL(result = ::org::apache::lucene::analysis::util::CharArrayMap::copy(a0, a1));
                  return t_CharArrayMap::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError(type, "copy", args);
            return NULL;
          }

          static PyObject *t_CharArrayMap_emptyMap(PyTypeObject *type)
          {
            CharArrayMap result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::util::CharArrayMap::emptyMap());
            return t_CharArrayMap::wrap_Object(result);
          }

          static PyObject *t_CharArrayMap_entrySet(t_CharArrayMap *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::util::CharArrayMap$EntrySet result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.entrySet());
              return ::org::apache::lucene::analysis::util::t_CharArrayMap$EntrySet::wrap_Object(result, self->parameters[0]);
            }

            return callSuper(&PY_TYPE(CharArrayMap), (PyObject *) self, "entrySet", args, 2);
          }

          static PyObject *t_CharArrayMap_get(t_CharArrayMap *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::java::lang::Object a0((jobject) NULL);
                ::java::lang::Object result((jobject) NULL);

                if (!parseArgs(args, "o", &a0))
                {
                  OBJ_CALL(result = self->object.get(a0));
                  return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
                }
              }
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                ::java::lang::Object result((jobject) NULL);

                if (!parseArgs(args, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
                {
                  OBJ_CALL(result = self->object.get(a0));
                  return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
                }
              }
              break;
             case 3:
              {
                JArray< jchar > a0((jobject) NULL);
                jint a1;
                jint a2;
                ::java::lang::Object result((jobject) NULL);

                if (!parseArgs(args, "[CII", &a0, &a1, &a2))
                {
                  OBJ_CALL(result = self->object.get(a0, a1, a2));
                  return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
                }
              }
            }

            return callSuper(&PY_TYPE(CharArrayMap), (PyObject *) self, "get", args, 2);
          }

          static PyObject *t_CharArrayMap_keySet(t_CharArrayMap *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.keySet());
              return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(CharArrayMap), (PyObject *) self, "keySet", args, 2);
          }

          static PyObject *t_CharArrayMap_put(t_CharArrayMap *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                JArray< jchar > a0((jobject) NULL);
                ::java::lang::Object a1((jobject) NULL);
                ::java::lang::Object result((jobject) NULL);

                if (!parseArgs(args, "[CO", self->parameters[0], &a0, &a1))
                {
                  OBJ_CALL(result = self->object.put(a0, a1));
                  return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
                }
              }
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                ::java::lang::Object a1((jobject) NULL);
                ::java::lang::Object result((jobject) NULL);

                if (!parseArgs(args, "OO", &::java::lang::PY_TYPE(CharSequence), self->parameters[0], &a0, &a1))
                {
                  OBJ_CALL(result = self->object.put(a0, a1));
                  return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
                }
              }
              {
                ::java::lang::String a0((jobject) NULL);
                ::java::lang::Object a1((jobject) NULL);
                ::java::lang::Object result((jobject) NULL);

                if (!parseArgs(args, "sO", self->parameters[0], &a0, &a1))
                {
                  OBJ_CALL(result = self->object.put(a0, a1));
                  return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
                }
              }
              {
                ::java::lang::Object a0((jobject) NULL);
                ::java::lang::Object a1((jobject) NULL);
                ::java::lang::Object result((jobject) NULL);

                if (!parseArgs(args, "oO", self->parameters[0], &a0, &a1))
                {
                  OBJ_CALL(result = self->object.put(a0, a1));
                  return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
                }
              }
            }

            return callSuper(&PY_TYPE(CharArrayMap), (PyObject *) self, "put", args, 2);
          }

          static PyObject *t_CharArrayMap_remove(t_CharArrayMap *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            ::java::lang::Object result((jobject) NULL);

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.remove(a0));
              return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(CharArrayMap), (PyObject *) self, "remove", args, 2);
          }

          static PyObject *t_CharArrayMap_size(t_CharArrayMap *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.size());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(CharArrayMap), (PyObject *) self, "size", args, 2);
          }

          static PyObject *t_CharArrayMap_toString(t_CharArrayMap *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(CharArrayMap), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_CharArrayMap_unmodifiableMap(PyTypeObject *type, PyObject *arg)
          {
            CharArrayMap a0((jobject) NULL);
            PyTypeObject **p0;
            CharArrayMap result((jobject) NULL);

            if (!parseArg(arg, "K", CharArrayMap::initializeClass, &a0, &p0, t_CharArrayMap::parameters_))
            {
              OBJ_CALL(result = ::org::apache::lucene::analysis::util::CharArrayMap::unmodifiableMap(a0));
              return t_CharArrayMap::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "unmodifiableMap", arg);
            return NULL;
          }
          static PyObject *t_CharArrayMap_get__parameters_(t_CharArrayMap *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/ProximityQueryNode.h"
#include "java/lang/Class.h"
#include "java/lang/CharSequence.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/ProximityQueryNode$Type.h"
#include "java/util/List.h"
#include "org/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax.h"
#include "java/lang/CloneNotSupportedException.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {

              ::java::lang::Class *ProximityQueryNode::class$ = NULL;
              jmethodID *ProximityQueryNode::mids$ = NULL;
              bool ProximityQueryNode::live$ = false;

              jclass ProximityQueryNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/nodes/ProximityQueryNode");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_8db4cd70] = env->getMethodID(cls, "<init>", "(Ljava/util/List;Ljava/lang/CharSequence;Lorg/apache/lucene/queryparser/flexible/core/nodes/ProximityQueryNode$Type;Z)V");
                  mids$[mid_init$_0740981c] = env->getMethodID(cls, "<init>", "(Ljava/util/List;Ljava/lang/CharSequence;Lorg/apache/lucene/queryparser/flexible/core/nodes/ProximityQueryNode$Type;IZ)V");
                  mids$[mid_cloneTree_b387c5e6] = env->getMethodID(cls, "cloneTree", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_getDistance_54c6a179] = env->getMethodID(cls, "getDistance", "()I");
                  mids$[mid_getField_e0adba2f] = env->getMethodID(cls, "getField", "()Ljava/lang/CharSequence;");
                  mids$[mid_getFieldAsString_14c7b5c5] = env->getMethodID(cls, "getFieldAsString", "()Ljava/lang/String;");
                  mids$[mid_getProximityType_9b7235cd] = env->getMethodID(cls, "getProximityType", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/ProximityQueryNode$Type;");
                  mids$[mid_isInOrder_54c6a16a] = env->getMethodID(cls, "isInOrder", "()Z");
                  mids$[mid_setField_a8afc64a] = env->getMethodID(cls, "setField", "(Ljava/lang/CharSequence;)V");
                  mids$[mid_toQueryString_99b8dfe1] = env->getMethodID(cls, "toQueryString", "(Lorg/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax;)Ljava/lang/CharSequence;");
                  mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              ProximityQueryNode::ProximityQueryNode(const ::java::util::List & a0, const ::java::lang::CharSequence & a1, const ::org::apache::lucene::queryparser::flexible::core::nodes::ProximityQueryNode$Type & a2, jboolean a3) : ::org::apache::lucene::queryparser::flexible::core::nodes::BooleanQueryNode(env->newObject(initializeClass, &mids$, mid_init$_8db4cd70, a0.this$, a1.this$, a2.this$, a3)) {}

              ProximityQueryNode::ProximityQueryNode(const ::java::util::List & a0, const ::java::lang::CharSequence & a1, const ::org::apache::lucene::queryparser::flexible::core::nodes::ProximityQueryNode$Type & a2, jint a3, jboolean a4) : ::org::apache::lucene::queryparser::flexible::core::nodes::BooleanQueryNode(env->newObject(initializeClass, &mids$, mid_init$_0740981c, a0.this$, a1.this$, a2.this$, a3, a4)) {}

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode ProximityQueryNode::cloneTree() const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_cloneTree_b387c5e6]));
              }

              jint ProximityQueryNode::getDistance() const
              {
                return env->callIntMethod(this$, mids$[mid_getDistance_54c6a179]);
              }

              ::java::lang::CharSequence ProximityQueryNode::getField() const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_getField_e0adba2f]));
              }

              ::java::lang::String ProximityQueryNode::getFieldAsString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getFieldAsString_14c7b5c5]));
              }

              ::org::apache::lucene::queryparser::flexible::core::nodes::ProximityQueryNode$Type ProximityQueryNode::getProximityType() const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::ProximityQueryNode$Type(env->callObjectMethod(this$, mids$[mid_getProximityType_9b7235cd]));
              }

              jboolean ProximityQueryNode::isInOrder() const
              {
                return env->callBooleanMethod(this$, mids$[mid_isInOrder_54c6a16a]);
              }

              void ProximityQueryNode::setField(const ::java::lang::CharSequence & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setField_a8afc64a], a0.this$);
              }

              ::java::lang::CharSequence ProximityQueryNode::toQueryString(const ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax & a0) const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_toQueryString_99b8dfe1], a0.this$));
              }

              ::java::lang::String ProximityQueryNode::toString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/ProximityQueryNode$ProximityType.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {
              static PyObject *t_ProximityQueryNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_ProximityQueryNode_instance_(PyTypeObject *type, PyObject *arg);
              static int t_ProximityQueryNode_init_(t_ProximityQueryNode *self, PyObject *args, PyObject *kwds);
              static PyObject *t_ProximityQueryNode_cloneTree(t_ProximityQueryNode *self, PyObject *args);
              static PyObject *t_ProximityQueryNode_getDistance(t_ProximityQueryNode *self);
              static PyObject *t_ProximityQueryNode_getField(t_ProximityQueryNode *self);
              static PyObject *t_ProximityQueryNode_getFieldAsString(t_ProximityQueryNode *self);
              static PyObject *t_ProximityQueryNode_getProximityType(t_ProximityQueryNode *self);
              static PyObject *t_ProximityQueryNode_isInOrder(t_ProximityQueryNode *self);
              static PyObject *t_ProximityQueryNode_setField(t_ProximityQueryNode *self, PyObject *arg);
              static PyObject *t_ProximityQueryNode_toQueryString(t_ProximityQueryNode *self, PyObject *args);
              static PyObject *t_ProximityQueryNode_toString(t_ProximityQueryNode *self, PyObject *args);
              static PyObject *t_ProximityQueryNode_get__distance(t_ProximityQueryNode *self, void *data);
              static PyObject *t_ProximityQueryNode_get__field(t_ProximityQueryNode *self, void *data);
              static int t_ProximityQueryNode_set__field(t_ProximityQueryNode *self, PyObject *arg, void *data);
              static PyObject *t_ProximityQueryNode_get__fieldAsString(t_ProximityQueryNode *self, void *data);
              static PyObject *t_ProximityQueryNode_get__inOrder(t_ProximityQueryNode *self, void *data);
              static PyObject *t_ProximityQueryNode_get__proximityType(t_ProximityQueryNode *self, void *data);
              static PyGetSetDef t_ProximityQueryNode__fields_[] = {
                DECLARE_GET_FIELD(t_ProximityQueryNode, distance),
                DECLARE_GETSET_FIELD(t_ProximityQueryNode, field),
                DECLARE_GET_FIELD(t_ProximityQueryNode, fieldAsString),
                DECLARE_GET_FIELD(t_ProximityQueryNode, inOrder),
                DECLARE_GET_FIELD(t_ProximityQueryNode, proximityType),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_ProximityQueryNode__methods_[] = {
                DECLARE_METHOD(t_ProximityQueryNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_ProximityQueryNode, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_ProximityQueryNode, cloneTree, METH_VARARGS),
                DECLARE_METHOD(t_ProximityQueryNode, getDistance, METH_NOARGS),
                DECLARE_METHOD(t_ProximityQueryNode, getField, METH_NOARGS),
                DECLARE_METHOD(t_ProximityQueryNode, getFieldAsString, METH_NOARGS),
                DECLARE_METHOD(t_ProximityQueryNode, getProximityType, METH_NOARGS),
                DECLARE_METHOD(t_ProximityQueryNode, isInOrder, METH_NOARGS),
                DECLARE_METHOD(t_ProximityQueryNode, setField, METH_O),
                DECLARE_METHOD(t_ProximityQueryNode, toQueryString, METH_VARARGS),
                DECLARE_METHOD(t_ProximityQueryNode, toString, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(ProximityQueryNode, t_ProximityQueryNode, ::org::apache::lucene::queryparser::flexible::core::nodes::BooleanQueryNode, ProximityQueryNode, t_ProximityQueryNode_init_, 0, 0, t_ProximityQueryNode__fields_, 0, 0);

              void t_ProximityQueryNode::install(PyObject *module)
              {
                installType(&PY_TYPE(ProximityQueryNode), module, "ProximityQueryNode", 0);
                PyDict_SetItemString(PY_TYPE(ProximityQueryNode).tp_dict, "ProximityType", make_descriptor(&PY_TYPE(ProximityQueryNode$ProximityType)));
                PyDict_SetItemString(PY_TYPE(ProximityQueryNode).tp_dict, "Type", make_descriptor(&PY_TYPE(ProximityQueryNode$Type)));
              }

              void t_ProximityQueryNode::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(ProximityQueryNode).tp_dict, "class_", make_descriptor(ProximityQueryNode::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(ProximityQueryNode).tp_dict, "wrapfn_", make_descriptor(t_ProximityQueryNode::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(ProximityQueryNode).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_ProximityQueryNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, ProximityQueryNode::initializeClass, 1)))
                  return NULL;
                return t_ProximityQueryNode::wrap_Object(ProximityQueryNode(((t_ProximityQueryNode *) arg)->object.this$));
              }
              static PyObject *t_ProximityQueryNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, ProximityQueryNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_ProximityQueryNode_init_(t_ProximityQueryNode *self, PyObject *args, PyObject *kwds)
              {
                switch (PyTuple_GET_SIZE(args)) {
                 case 4:
                  {
                    ::java::util::List a0((jobject) NULL);
                    PyTypeObject **p0;
                    ::java::lang::CharSequence a1((jobject) NULL);
                    ::org::apache::lucene::queryparser::flexible::core::nodes::ProximityQueryNode$Type a2((jobject) NULL);
                    PyTypeObject **p2;
                    jboolean a3;
                    ProximityQueryNode object((jobject) NULL);

                    if (!parseArgs(args, "KOKZ", ::java::util::List::initializeClass, &::java::lang::PY_TYPE(CharSequence), ::org::apache::lucene::queryparser::flexible::core::nodes::ProximityQueryNode$Type::initializeClass, &a0, &p0, ::java::util::t_List::parameters_, &a1, &a2, &p2, ::org::apache::lucene::queryparser::flexible::core::nodes::t_ProximityQueryNode$Type::parameters_, &a3))
                    {
                      INT_CALL(object = ProximityQueryNode(a0, a1, a2, a3));
                      self->object = object;
                      break;
                    }
                  }
                  goto err;
                 case 5:
                  {
                    ::java::util::List a0((jobject) NULL);
                    PyTypeObject **p0;
                    ::java::lang::CharSequence a1((jobject) NULL);
                    ::org::apache::lucene::queryparser::flexible::core::nodes::ProximityQueryNode$Type a2((jobject) NULL);
                    PyTypeObject **p2;
                    jint a3;
                    jboolean a4;
                    ProximityQueryNode object((jobject) NULL);

                    if (!parseArgs(args, "KOKIZ", ::java::util::List::initializeClass, &::java::lang::PY_TYPE(CharSequence), ::org::apache::lucene::queryparser::flexible::core::nodes::ProximityQueryNode$Type::initializeClass, &a0, &p0, ::java::util::t_List::parameters_, &a1, &a2, &p2, ::org::apache::lucene::queryparser::flexible::core::nodes::t_ProximityQueryNode$Type::parameters_, &a3, &a4))
                    {
                      INT_CALL(object = ProximityQueryNode(a0, a1, a2, a3, a4));
                      self->object = object;
                      break;
                    }
                  }
                 default:
                 err:
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_ProximityQueryNode_cloneTree(t_ProximityQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.cloneTree());
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(ProximityQueryNode), (PyObject *) self, "cloneTree", args, 2);
              }

              static PyObject *t_ProximityQueryNode_getDistance(t_ProximityQueryNode *self)
              {
                jint result;
                OBJ_CALL(result = self->object.getDistance());
                return PyInt_FromLong((long) result);
              }

              static PyObject *t_ProximityQueryNode_getField(t_ProximityQueryNode *self)
              {
                ::java::lang::CharSequence result((jobject) NULL);
                OBJ_CALL(result = self->object.getField());
                return ::java::lang::t_CharSequence::wrap_Object(result);
              }

              static PyObject *t_ProximityQueryNode_getFieldAsString(t_ProximityQueryNode *self)
              {
                ::java::lang::String result((jobject) NULL);
                OBJ_CALL(result = self->object.getFieldAsString());
                return j2p(result);
              }

              static PyObject *t_ProximityQueryNode_getProximityType(t_ProximityQueryNode *self)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::ProximityQueryNode$Type result((jobject) NULL);
                OBJ_CALL(result = self->object.getProximityType());
                return ::org::apache::lucene::queryparser::flexible::core::nodes::t_ProximityQueryNode$Type::wrap_Object(result);
              }

              static PyObject *t_ProximityQueryNode_isInOrder(t_ProximityQueryNode *self)
              {
                jboolean result;
                OBJ_CALL(result = self->object.isInOrder());
                Py_RETURN_BOOL(result);
              }

              static PyObject *t_ProximityQueryNode_setField(t_ProximityQueryNode *self, PyObject *arg)
              {
                ::java::lang::CharSequence a0((jobject) NULL);

                if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
                {
                  OBJ_CALL(self->object.setField(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setField", arg);
                return NULL;
              }

              static PyObject *t_ProximityQueryNode_toQueryString(t_ProximityQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax a0((jobject) NULL);
                ::java::lang::CharSequence result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.toQueryString(a0));
                  return ::java::lang::t_CharSequence::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(ProximityQueryNode), (PyObject *) self, "toQueryString", args, 2);
              }

              static PyObject *t_ProximityQueryNode_toString(t_ProximityQueryNode *self, PyObject *args)
              {
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.toString());
                  return j2p(result);
                }

                return callSuper(&PY_TYPE(ProximityQueryNode), (PyObject *) self, "toString", args, 2);
              }

              static PyObject *t_ProximityQueryNode_get__distance(t_ProximityQueryNode *self, void *data)
              {
                jint value;
                OBJ_CALL(value = self->object.getDistance());
                return PyInt_FromLong((long) value);
              }

              static PyObject *t_ProximityQueryNode_get__field(t_ProximityQueryNode *self, void *data)
              {
                ::java::lang::CharSequence value((jobject) NULL);
                OBJ_CALL(value = self->object.getField());
                return ::java::lang::t_CharSequence::wrap_Object(value);
              }
              static int t_ProximityQueryNode_set__field(t_ProximityQueryNode *self, PyObject *arg, void *data)
              {
                {
                  ::java::lang::CharSequence value((jobject) NULL);
                  if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &value))
                  {
                    INT_CALL(self->object.setField(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "field", arg);
                return -1;
              }

              static PyObject *t_ProximityQueryNode_get__fieldAsString(t_ProximityQueryNode *self, void *data)
              {
                ::java::lang::String value((jobject) NULL);
                OBJ_CALL(value = self->object.getFieldAsString());
                return j2p(value);
              }

              static PyObject *t_ProximityQueryNode_get__inOrder(t_ProximityQueryNode *self, void *data)
              {
                jboolean value;
                OBJ_CALL(value = self->object.isInOrder());
                Py_RETURN_BOOL(value);
              }

              static PyObject *t_ProximityQueryNode_get__proximityType(t_ProximityQueryNode *self, void *data)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::ProximityQueryNode$Type value((jobject) NULL);
                OBJ_CALL(value = self->object.getProximityType());
                return ::org::apache::lucene::queryparser::flexible::core::nodes::t_ProximityQueryNode$Type::wrap_Object(value);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/grouping/term/TermGroupFacetCollector.h"
#include "java/lang/String.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          namespace term {

            ::java::lang::Class *TermGroupFacetCollector::class$ = NULL;
            jmethodID *TermGroupFacetCollector::mids$ = NULL;
            bool TermGroupFacetCollector::live$ = false;

            jclass TermGroupFacetCollector::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/grouping/term/TermGroupFacetCollector");

                mids$ = new jmethodID[max_mid];
                mids$[mid_createTermGroupFacetCollector_36bd7ed1] = env->getStaticMethodID(cls, "createTermGroupFacetCollector", "(Ljava/lang/String;Ljava/lang/String;ZLorg/apache/lucene/util/BytesRef;I)Lorg/apache/lucene/search/grouping/term/TermGroupFacetCollector;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            TermGroupFacetCollector TermGroupFacetCollector::createTermGroupFacetCollector(const ::java::lang::String & a0, const ::java::lang::String & a1, jboolean a2, const ::org::apache::lucene::util::BytesRef & a3, jint a4)
            {
              jclass cls = env->getClass(initializeClass);
              return TermGroupFacetCollector(env->callStaticObjectMethod(cls, mids$[mid_createTermGroupFacetCollector_36bd7ed1], a0.this$, a1.this$, a2, a3.this$, a4));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          namespace term {
            static PyObject *t_TermGroupFacetCollector_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_TermGroupFacetCollector_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_TermGroupFacetCollector_createTermGroupFacetCollector(PyTypeObject *type, PyObject *args);

            static PyMethodDef t_TermGroupFacetCollector__methods_[] = {
              DECLARE_METHOD(t_TermGroupFacetCollector, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TermGroupFacetCollector, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TermGroupFacetCollector, createTermGroupFacetCollector, METH_VARARGS | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(TermGroupFacetCollector, t_TermGroupFacetCollector, ::org::apache::lucene::search::grouping::AbstractGroupFacetCollector, TermGroupFacetCollector, abstract_init, 0, 0, 0, 0, 0);

            void t_TermGroupFacetCollector::install(PyObject *module)
            {
              installType(&PY_TYPE(TermGroupFacetCollector), module, "TermGroupFacetCollector", 0);
            }

            void t_TermGroupFacetCollector::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(TermGroupFacetCollector).tp_dict, "class_", make_descriptor(TermGroupFacetCollector::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(TermGroupFacetCollector).tp_dict, "wrapfn_", make_descriptor(t_TermGroupFacetCollector::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(TermGroupFacetCollector).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_TermGroupFacetCollector_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, TermGroupFacetCollector::initializeClass, 1)))
                return NULL;
              return t_TermGroupFacetCollector::wrap_Object(TermGroupFacetCollector(((t_TermGroupFacetCollector *) arg)->object.this$));
            }
            static PyObject *t_TermGroupFacetCollector_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, TermGroupFacetCollector::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_TermGroupFacetCollector_createTermGroupFacetCollector(PyTypeObject *type, PyObject *args)
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              jboolean a2;
              ::org::apache::lucene::util::BytesRef a3((jobject) NULL);
              jint a4;
              TermGroupFacetCollector result((jobject) NULL);

              if (!parseArgs(args, "ssZkI", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2, &a3, &a4))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::grouping::term::TermGroupFacetCollector::createTermGroupFacetCollector(a0, a1, a2, a3, a4));
                return t_TermGroupFacetCollector::wrap_Object(result);
              }

              PyErr_SetArgsError(type, "createTermGroupFacetCollector", args);
              return NULL;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spans/SpanMultiTermQueryWrapper.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/index/TermContext.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/spans/SpanMultiTermQueryWrapper$SpanRewriteMethod.h"
#include "org/apache/lucene/util/Bits.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/index/Term.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/search/MultiTermQuery.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/spans/Spans.h"
#include "org/apache/lucene/search/Query.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {

          ::java::lang::Class *SpanMultiTermQueryWrapper::class$ = NULL;
          jmethodID *SpanMultiTermQueryWrapper::mids$ = NULL;
          bool SpanMultiTermQueryWrapper::live$ = false;
          ::org::apache::lucene::search::spans::SpanMultiTermQueryWrapper$SpanRewriteMethod *SpanMultiTermQueryWrapper::SCORING_SPAN_QUERY_REWRITE = NULL;

          jclass SpanMultiTermQueryWrapper::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spans/SpanMultiTermQueryWrapper");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_3bf60bd1] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/MultiTermQuery;)V");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_getField_14c7b5c5] = env->getMethodID(cls, "getField", "()Ljava/lang/String;");
              mids$[mid_getRewriteMethod_5bc9fda5] = env->getMethodID(cls, "getRewriteMethod", "()Lorg/apache/lucene/search/spans/SpanMultiTermQueryWrapper$SpanRewriteMethod;");
              mids$[mid_getSpans_f003cb44] = env->getMethodID(cls, "getSpans", "(Lorg/apache/lucene/index/AtomicReaderContext;Lorg/apache/lucene/util/Bits;Ljava/util/Map;)Lorg/apache/lucene/search/spans/Spans;");
              mids$[mid_getWrappedQuery_97e3851a] = env->getMethodID(cls, "getWrappedQuery", "()Lorg/apache/lucene/search/Query;");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_rewrite_7edcaa43] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/index/IndexReader;)Lorg/apache/lucene/search/Query;");
              mids$[mid_setRewriteMethod_89abf2c4] = env->getMethodID(cls, "setRewriteMethod", "(Lorg/apache/lucene/search/spans/SpanMultiTermQueryWrapper$SpanRewriteMethod;)V");
              mids$[mid_toString_97a5258f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              SCORING_SPAN_QUERY_REWRITE = new ::org::apache::lucene::search::spans::SpanMultiTermQueryWrapper$SpanRewriteMethod(env->getStaticObjectField(cls, "SCORING_SPAN_QUERY_REWRITE", "Lorg/apache/lucene/search/spans/SpanMultiTermQueryWrapper$SpanRewriteMethod;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SpanMultiTermQueryWrapper::SpanMultiTermQueryWrapper(const ::org::apache::lucene::search::MultiTermQuery & a0) : ::org::apache::lucene::search::spans::SpanQuery(env->newObject(initializeClass, &mids$, mid_init$_3bf60bd1, a0.this$)) {}

          jboolean SpanMultiTermQueryWrapper::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          ::java::lang::String SpanMultiTermQueryWrapper::getField() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getField_14c7b5c5]));
          }

          ::org::apache::lucene::search::spans::SpanMultiTermQueryWrapper$SpanRewriteMethod SpanMultiTermQueryWrapper::getRewriteMethod() const
          {
            return ::org::apache::lucene::search::spans::SpanMultiTermQueryWrapper$SpanRewriteMethod(env->callObjectMethod(this$, mids$[mid_getRewriteMethod_5bc9fda5]));
          }

          ::org::apache::lucene::search::spans::Spans SpanMultiTermQueryWrapper::getSpans(const ::org::apache::lucene::index::AtomicReaderContext & a0, const ::org::apache::lucene::util::Bits & a1, const ::java::util::Map & a2) const
          {
            return ::org::apache::lucene::search::spans::Spans(env->callObjectMethod(this$, mids$[mid_getSpans_f003cb44], a0.this$, a1.this$, a2.this$));
          }

          ::org::apache::lucene::search::Query SpanMultiTermQueryWrapper::getWrappedQuery() const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_getWrappedQuery_97e3851a]));
          }

          jint SpanMultiTermQueryWrapper::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          ::org::apache::lucene::search::Query SpanMultiTermQueryWrapper::rewrite(const ::org::apache::lucene::index::IndexReader & a0) const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_rewrite_7edcaa43], a0.this$));
          }

          void SpanMultiTermQueryWrapper::setRewriteMethod(const ::org::apache::lucene::search::spans::SpanMultiTermQueryWrapper$SpanRewriteMethod & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setRewriteMethod_89abf2c4], a0.this$);
          }

          ::java::lang::String SpanMultiTermQueryWrapper::toString(const ::java::lang::String & a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_97a5258f], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/search/spans/SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {
          static PyObject *t_SpanMultiTermQueryWrapper_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SpanMultiTermQueryWrapper_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SpanMultiTermQueryWrapper_of_(t_SpanMultiTermQueryWrapper *self, PyObject *args);
          static int t_SpanMultiTermQueryWrapper_init_(t_SpanMultiTermQueryWrapper *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SpanMultiTermQueryWrapper_equals(t_SpanMultiTermQueryWrapper *self, PyObject *args);
          static PyObject *t_SpanMultiTermQueryWrapper_getField(t_SpanMultiTermQueryWrapper *self, PyObject *args);
          static PyObject *t_SpanMultiTermQueryWrapper_getRewriteMethod(t_SpanMultiTermQueryWrapper *self);
          static PyObject *t_SpanMultiTermQueryWrapper_getSpans(t_SpanMultiTermQueryWrapper *self, PyObject *args);
          static PyObject *t_SpanMultiTermQueryWrapper_getWrappedQuery(t_SpanMultiTermQueryWrapper *self);
          static PyObject *t_SpanMultiTermQueryWrapper_hashCode(t_SpanMultiTermQueryWrapper *self, PyObject *args);
          static PyObject *t_SpanMultiTermQueryWrapper_rewrite(t_SpanMultiTermQueryWrapper *self, PyObject *args);
          static PyObject *t_SpanMultiTermQueryWrapper_setRewriteMethod(t_SpanMultiTermQueryWrapper *self, PyObject *arg);
          static PyObject *t_SpanMultiTermQueryWrapper_toString(t_SpanMultiTermQueryWrapper *self, PyObject *args);
          static PyObject *t_SpanMultiTermQueryWrapper_get__field(t_SpanMultiTermQueryWrapper *self, void *data);
          static PyObject *t_SpanMultiTermQueryWrapper_get__rewriteMethod(t_SpanMultiTermQueryWrapper *self, void *data);
          static int t_SpanMultiTermQueryWrapper_set__rewriteMethod(t_SpanMultiTermQueryWrapper *self, PyObject *arg, void *data);
          static PyObject *t_SpanMultiTermQueryWrapper_get__wrappedQuery(t_SpanMultiTermQueryWrapper *self, void *data);
          static PyObject *t_SpanMultiTermQueryWrapper_get__parameters_(t_SpanMultiTermQueryWrapper *self, void *data);
          static PyGetSetDef t_SpanMultiTermQueryWrapper__fields_[] = {
            DECLARE_GET_FIELD(t_SpanMultiTermQueryWrapper, field),
            DECLARE_GETSET_FIELD(t_SpanMultiTermQueryWrapper, rewriteMethod),
            DECLARE_GET_FIELD(t_SpanMultiTermQueryWrapper, wrappedQuery),
            DECLARE_GET_FIELD(t_SpanMultiTermQueryWrapper, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SpanMultiTermQueryWrapper__methods_[] = {
            DECLARE_METHOD(t_SpanMultiTermQueryWrapper, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanMultiTermQueryWrapper, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanMultiTermQueryWrapper, of_, METH_VARARGS),
            DECLARE_METHOD(t_SpanMultiTermQueryWrapper, equals, METH_VARARGS),
            DECLARE_METHOD(t_SpanMultiTermQueryWrapper, getField, METH_VARARGS),
            DECLARE_METHOD(t_SpanMultiTermQueryWrapper, getRewriteMethod, METH_NOARGS),
            DECLARE_METHOD(t_SpanMultiTermQueryWrapper, getSpans, METH_VARARGS),
            DECLARE_METHOD(t_SpanMultiTermQueryWrapper, getWrappedQuery, METH_NOARGS),
            DECLARE_METHOD(t_SpanMultiTermQueryWrapper, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_SpanMultiTermQueryWrapper, rewrite, METH_VARARGS),
            DECLARE_METHOD(t_SpanMultiTermQueryWrapper, setRewriteMethod, METH_O),
            DECLARE_METHOD(t_SpanMultiTermQueryWrapper, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SpanMultiTermQueryWrapper, t_SpanMultiTermQueryWrapper, ::org::apache::lucene::search::spans::SpanQuery, SpanMultiTermQueryWrapper, t_SpanMultiTermQueryWrapper_init_, 0, 0, t_SpanMultiTermQueryWrapper__fields_, 0, 0);
          PyObject *t_SpanMultiTermQueryWrapper::wrap_Object(const SpanMultiTermQueryWrapper& object, PyTypeObject *p0)
          {
            PyObject *obj = t_SpanMultiTermQueryWrapper::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_SpanMultiTermQueryWrapper *self = (t_SpanMultiTermQueryWrapper *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_SpanMultiTermQueryWrapper::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_SpanMultiTermQueryWrapper::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_SpanMultiTermQueryWrapper *self = (t_SpanMultiTermQueryWrapper *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_SpanMultiTermQueryWrapper::install(PyObject *module)
          {
            installType(&PY_TYPE(SpanMultiTermQueryWrapper), module, "SpanMultiTermQueryWrapper", 0);
            PyDict_SetItemString(PY_TYPE(SpanMultiTermQueryWrapper).tp_dict, "TopTermsSpanBooleanQueryRewrite", make_descriptor(&PY_TYPE(SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite)));
            PyDict_SetItemString(PY_TYPE(SpanMultiTermQueryWrapper).tp_dict, "SpanRewriteMethod", make_descriptor(&PY_TYPE(SpanMultiTermQueryWrapper$SpanRewriteMethod)));
          }

          void t_SpanMultiTermQueryWrapper::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SpanMultiTermQueryWrapper).tp_dict, "class_", make_descriptor(SpanMultiTermQueryWrapper::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SpanMultiTermQueryWrapper).tp_dict, "wrapfn_", make_descriptor(t_SpanMultiTermQueryWrapper::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SpanMultiTermQueryWrapper).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(SpanMultiTermQueryWrapper::initializeClass);
            PyDict_SetItemString(PY_TYPE(SpanMultiTermQueryWrapper).tp_dict, "SCORING_SPAN_QUERY_REWRITE", make_descriptor(::org::apache::lucene::search::spans::t_SpanMultiTermQueryWrapper$SpanRewriteMethod::wrap_Object(*SpanMultiTermQueryWrapper::SCORING_SPAN_QUERY_REWRITE)));
          }

          static PyObject *t_SpanMultiTermQueryWrapper_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SpanMultiTermQueryWrapper::initializeClass, 1)))
              return NULL;
            return t_SpanMultiTermQueryWrapper::wrap_Object(SpanMultiTermQueryWrapper(((t_SpanMultiTermQueryWrapper *) arg)->object.this$));
          }
          static PyObject *t_SpanMultiTermQueryWrapper_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SpanMultiTermQueryWrapper::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_SpanMultiTermQueryWrapper_of_(t_SpanMultiTermQueryWrapper *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_SpanMultiTermQueryWrapper_init_(t_SpanMultiTermQueryWrapper *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::search::MultiTermQuery a0((jobject) NULL);
            SpanMultiTermQueryWrapper object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::search::MultiTermQuery::initializeClass, &a0))
            {
              INT_CALL(object = SpanMultiTermQueryWrapper(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SpanMultiTermQueryWrapper_equals(t_SpanMultiTermQueryWrapper *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(SpanMultiTermQueryWrapper), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_SpanMultiTermQueryWrapper_getField(t_SpanMultiTermQueryWrapper *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getField());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(SpanMultiTermQueryWrapper), (PyObject *) self, "getField", args, 2);
          }

          static PyObject *t_SpanMultiTermQueryWrapper_getRewriteMethod(t_SpanMultiTermQueryWrapper *self)
          {
            ::org::apache::lucene::search::spans::SpanMultiTermQueryWrapper$SpanRewriteMethod result((jobject) NULL);
            OBJ_CALL(result = self->object.getRewriteMethod());
            return ::org::apache::lucene::search::spans::t_SpanMultiTermQueryWrapper$SpanRewriteMethod::wrap_Object(result);
          }

          static PyObject *t_SpanMultiTermQueryWrapper_getSpans(t_SpanMultiTermQueryWrapper *self, PyObject *args)
          {
            ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
            ::org::apache::lucene::util::Bits a1((jobject) NULL);
            ::java::util::Map a2((jobject) NULL);
            PyTypeObject **p2;
            ::org::apache::lucene::search::spans::Spans result((jobject) NULL);

            if (!parseArgs(args, "kkK", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, ::java::util::Map::initializeClass, &a0, &a1, &a2, &p2, ::java::util::t_Map::parameters_))
            {
              OBJ_CALL(result = self->object.getSpans(a0, a1, a2));
              return ::org::apache::lucene::search::spans::t_Spans::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(SpanMultiTermQueryWrapper), (PyObject *) self, "getSpans", args, 2);
          }

          static PyObject *t_SpanMultiTermQueryWrapper_getWrappedQuery(t_SpanMultiTermQueryWrapper *self)
          {
            ::org::apache::lucene::search::Query result((jobject) NULL);
            OBJ_CALL(result = self->object.getWrappedQuery());
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          static PyObject *t_SpanMultiTermQueryWrapper_hashCode(t_SpanMultiTermQueryWrapper *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(SpanMultiTermQueryWrapper), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_SpanMultiTermQueryWrapper_rewrite(t_SpanMultiTermQueryWrapper *self, PyObject *args)
          {
            ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.rewrite(a0));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(SpanMultiTermQueryWrapper), (PyObject *) self, "rewrite", args, 2);
          }

          static PyObject *t_SpanMultiTermQueryWrapper_setRewriteMethod(t_SpanMultiTermQueryWrapper *self, PyObject *arg)
          {
            ::org::apache::lucene::search::spans::SpanMultiTermQueryWrapper$SpanRewriteMethod a0((jobject) NULL);
            PyTypeObject **p0;

            if (!parseArg(arg, "K", ::org::apache::lucene::search::spans::SpanMultiTermQueryWrapper$SpanRewriteMethod::initializeClass, &a0, &p0, ::org::apache::lucene::search::spans::t_SpanMultiTermQueryWrapper$SpanRewriteMethod::parameters_))
            {
              OBJ_CALL(self->object.setRewriteMethod(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setRewriteMethod", arg);
            return NULL;
          }

          static PyObject *t_SpanMultiTermQueryWrapper_toString(t_SpanMultiTermQueryWrapper *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = self->object.toString(a0));
              return j2p(result);
            }

            return callSuper(&PY_TYPE(SpanMultiTermQueryWrapper), (PyObject *) self, "toString", args, 2);
          }
          static PyObject *t_SpanMultiTermQueryWrapper_get__parameters_(t_SpanMultiTermQueryWrapper *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_SpanMultiTermQueryWrapper_get__field(t_SpanMultiTermQueryWrapper *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getField());
            return j2p(value);
          }

          static PyObject *t_SpanMultiTermQueryWrapper_get__rewriteMethod(t_SpanMultiTermQueryWrapper *self, void *data)
          {
            ::org::apache::lucene::search::spans::SpanMultiTermQueryWrapper$SpanRewriteMethod value((jobject) NULL);
            OBJ_CALL(value = self->object.getRewriteMethod());
            return ::org::apache::lucene::search::spans::t_SpanMultiTermQueryWrapper$SpanRewriteMethod::wrap_Object(value);
          }
          static int t_SpanMultiTermQueryWrapper_set__rewriteMethod(t_SpanMultiTermQueryWrapper *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::search::spans::SpanMultiTermQueryWrapper$SpanRewriteMethod value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::search::spans::SpanMultiTermQueryWrapper$SpanRewriteMethod::initializeClass, &value))
              {
                INT_CALL(self->object.setRewriteMethod(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "rewriteMethod", arg);
            return -1;
          }

          static PyObject *t_SpanMultiTermQueryWrapper_get__wrappedQuery(t_SpanMultiTermQueryWrapper *self, void *data)
          {
            ::org::apache::lucene::search::Query value((jobject) NULL);
            OBJ_CALL(value = self->object.getWrappedQuery());
            return ::org::apache::lucene::search::t_Query::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/DocTermOrdsRewriteMethod.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/search/MultiTermQuery.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *DocTermOrdsRewriteMethod::class$ = NULL;
        jmethodID *DocTermOrdsRewriteMethod::mids$ = NULL;
        bool DocTermOrdsRewriteMethod::live$ = false;

        jclass DocTermOrdsRewriteMethod::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/DocTermOrdsRewriteMethod");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_rewrite_925c5bbc] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/index/IndexReader;Lorg/apache/lucene/search/MultiTermQuery;)Lorg/apache/lucene/search/Query;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        DocTermOrdsRewriteMethod::DocTermOrdsRewriteMethod() : ::org::apache::lucene::search::MultiTermQuery$RewriteMethod(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jboolean DocTermOrdsRewriteMethod::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        jint DocTermOrdsRewriteMethod::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        ::org::apache::lucene::search::Query DocTermOrdsRewriteMethod::rewrite(const ::org::apache::lucene::index::IndexReader & a0, const ::org::apache::lucene::search::MultiTermQuery & a1) const
        {
          return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_rewrite_925c5bbc], a0.this$, a1.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_DocTermOrdsRewriteMethod_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DocTermOrdsRewriteMethod_instance_(PyTypeObject *type, PyObject *arg);
        static int t_DocTermOrdsRewriteMethod_init_(t_DocTermOrdsRewriteMethod *self, PyObject *args, PyObject *kwds);
        static PyObject *t_DocTermOrdsRewriteMethod_equals(t_DocTermOrdsRewriteMethod *self, PyObject *args);
        static PyObject *t_DocTermOrdsRewriteMethod_hashCode(t_DocTermOrdsRewriteMethod *self, PyObject *args);
        static PyObject *t_DocTermOrdsRewriteMethod_rewrite(t_DocTermOrdsRewriteMethod *self, PyObject *args);

        static PyMethodDef t_DocTermOrdsRewriteMethod__methods_[] = {
          DECLARE_METHOD(t_DocTermOrdsRewriteMethod, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DocTermOrdsRewriteMethod, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DocTermOrdsRewriteMethod, equals, METH_VARARGS),
          DECLARE_METHOD(t_DocTermOrdsRewriteMethod, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_DocTermOrdsRewriteMethod, rewrite, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(DocTermOrdsRewriteMethod, t_DocTermOrdsRewriteMethod, ::org::apache::lucene::search::MultiTermQuery$RewriteMethod, DocTermOrdsRewriteMethod, t_DocTermOrdsRewriteMethod_init_, 0, 0, 0, 0, 0);

        void t_DocTermOrdsRewriteMethod::install(PyObject *module)
        {
          installType(&PY_TYPE(DocTermOrdsRewriteMethod), module, "DocTermOrdsRewriteMethod", 0);
        }

        void t_DocTermOrdsRewriteMethod::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(DocTermOrdsRewriteMethod).tp_dict, "class_", make_descriptor(DocTermOrdsRewriteMethod::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(DocTermOrdsRewriteMethod).tp_dict, "wrapfn_", make_descriptor(t_DocTermOrdsRewriteMethod::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(DocTermOrdsRewriteMethod).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_DocTermOrdsRewriteMethod_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, DocTermOrdsRewriteMethod::initializeClass, 1)))
            return NULL;
          return t_DocTermOrdsRewriteMethod::wrap_Object(DocTermOrdsRewriteMethod(((t_DocTermOrdsRewriteMethod *) arg)->object.this$));
        }
        static PyObject *t_DocTermOrdsRewriteMethod_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, DocTermOrdsRewriteMethod::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_DocTermOrdsRewriteMethod_init_(t_DocTermOrdsRewriteMethod *self, PyObject *args, PyObject *kwds)
        {
          DocTermOrdsRewriteMethod object((jobject) NULL);

          INT_CALL(object = DocTermOrdsRewriteMethod());
          self->object = object;

          return 0;
        }

        static PyObject *t_DocTermOrdsRewriteMethod_equals(t_DocTermOrdsRewriteMethod *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(DocTermOrdsRewriteMethod), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_DocTermOrdsRewriteMethod_hashCode(t_DocTermOrdsRewriteMethod *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(DocTermOrdsRewriteMethod), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_DocTermOrdsRewriteMethod_rewrite(t_DocTermOrdsRewriteMethod *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::org::apache::lucene::search::MultiTermQuery a1((jobject) NULL);
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::search::MultiTermQuery::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.rewrite(a0, a1));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(DocTermOrdsRewriteMethod), (PyObject *) self, "rewrite", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ru/RussianLetterTokenizer.h"
#include "java/io/Reader.h"
#include "org/apache/lucene/util/Version.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ru {

          ::java::lang::Class *RussianLetterTokenizer::class$ = NULL;
          jmethodID *RussianLetterTokenizer::mids$ = NULL;
          bool RussianLetterTokenizer::live$ = false;

          jclass RussianLetterTokenizer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ru/RussianLetterTokenizer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_7997a391] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Ljava/io/Reader;)V");
              mids$[mid_init$_be7a3ecf] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;)V");
              mids$[mid_isTokenChar_39c7bd30] = env->getMethodID(cls, "isTokenChar", "(I)Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          RussianLetterTokenizer::RussianLetterTokenizer(const ::org::apache::lucene::util::Version & a0, const ::java::io::Reader & a1) : ::org::apache::lucene::analysis::util::CharTokenizer(env->newObject(initializeClass, &mids$, mid_init$_7997a391, a0.this$, a1.this$)) {}

          RussianLetterTokenizer::RussianLetterTokenizer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::util::AttributeFactory & a1, const ::java::io::Reader & a2) : ::org::apache::lucene::analysis::util::CharTokenizer(env->newObject(initializeClass, &mids$, mid_init$_be7a3ecf, a0.this$, a1.this$, a2.this$)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ru {
          static PyObject *t_RussianLetterTokenizer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_RussianLetterTokenizer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_RussianLetterTokenizer_init_(t_RussianLetterTokenizer *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_RussianLetterTokenizer__methods_[] = {
            DECLARE_METHOD(t_RussianLetterTokenizer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_RussianLetterTokenizer, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(RussianLetterTokenizer, t_RussianLetterTokenizer, ::org::apache::lucene::analysis::util::CharTokenizer, RussianLetterTokenizer, t_RussianLetterTokenizer_init_, 0, 0, 0, 0, 0);

          void t_RussianLetterTokenizer::install(PyObject *module)
          {
            installType(&PY_TYPE(RussianLetterTokenizer), module, "RussianLetterTokenizer", 0);
          }

          void t_RussianLetterTokenizer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(RussianLetterTokenizer).tp_dict, "class_", make_descriptor(RussianLetterTokenizer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(RussianLetterTokenizer).tp_dict, "wrapfn_", make_descriptor(t_RussianLetterTokenizer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(RussianLetterTokenizer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_RussianLetterTokenizer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, RussianLetterTokenizer::initializeClass, 1)))
              return NULL;
            return t_RussianLetterTokenizer::wrap_Object(RussianLetterTokenizer(((t_RussianLetterTokenizer *) arg)->object.this$));
          }
          static PyObject *t_RussianLetterTokenizer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, RussianLetterTokenizer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_RussianLetterTokenizer_init_(t_RussianLetterTokenizer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                ::java::io::Reader a1((jobject) NULL);
                RussianLetterTokenizer object((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::util::Version::initializeClass, ::java::io::Reader::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = RussianLetterTokenizer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                ::org::apache::lucene::util::AttributeFactory a1((jobject) NULL);
                ::java::io::Reader a2((jobject) NULL);
                RussianLetterTokenizer object((jobject) NULL);

                if (!parseArgs(args, "kkk", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = RussianLetterTokenizer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/join/ToParentBlockJoinFieldComparator.h"
#include "java/io/IOException.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace join {

          ::java::lang::Class *ToParentBlockJoinFieldComparator::class$ = NULL;
          jmethodID *ToParentBlockJoinFieldComparator::mids$ = NULL;
          bool ToParentBlockJoinFieldComparator::live$ = false;

          jclass ToParentBlockJoinFieldComparator::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/join/ToParentBlockJoinFieldComparator");

              mids$ = new jmethodID[max_mid];
              mids$[mid_compare_d8d154b9] = env->getMethodID(cls, "compare", "(II)I");
              mids$[mid_setBottom_39c7bd3c] = env->getMethodID(cls, "setBottom", "(I)V");
              mids$[mid_setNextReader_6329aed7] = env->getMethodID(cls, "setNextReader", "(Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/search/FieldComparator;");
              mids$[mid_setTopValue_290588ee] = env->getMethodID(cls, "setTopValue", "(Ljava/lang/Object;)V");
              mids$[mid_value_29be6a55] = env->getMethodID(cls, "value", "(I)Ljava/lang/Object;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jint ToParentBlockJoinFieldComparator::compare(jint a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_compare_d8d154b9], a0, a1);
          }

          void ToParentBlockJoinFieldComparator::setBottom(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setBottom_39c7bd3c], a0);
          }

          ::org::apache::lucene::search::FieldComparator ToParentBlockJoinFieldComparator::setNextReader(const ::org::apache::lucene::index::AtomicReaderContext & a0) const
          {
            return ::org::apache::lucene::search::FieldComparator(env->callObjectMethod(this$, mids$[mid_setNextReader_6329aed7], a0.this$));
          }

          void ToParentBlockJoinFieldComparator::setTopValue(const ::java::lang::Object & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setTopValue_290588ee], a0.this$);
          }

          ::java::lang::Object ToParentBlockJoinFieldComparator::value(jint a0) const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_value_29be6a55], a0));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/search/join/ToParentBlockJoinFieldComparator$Highest.h"
#include "org/apache/lucene/search/join/ToParentBlockJoinFieldComparator$Lowest.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace join {
          static PyObject *t_ToParentBlockJoinFieldComparator_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ToParentBlockJoinFieldComparator_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ToParentBlockJoinFieldComparator_of_(t_ToParentBlockJoinFieldComparator *self, PyObject *args);
          static PyObject *t_ToParentBlockJoinFieldComparator_compare(t_ToParentBlockJoinFieldComparator *self, PyObject *args);
          static PyObject *t_ToParentBlockJoinFieldComparator_setBottom(t_ToParentBlockJoinFieldComparator *self, PyObject *args);
          static PyObject *t_ToParentBlockJoinFieldComparator_setNextReader(t_ToParentBlockJoinFieldComparator *self, PyObject *args);
          static PyObject *t_ToParentBlockJoinFieldComparator_setTopValue(t_ToParentBlockJoinFieldComparator *self, PyObject *args);
          static PyObject *t_ToParentBlockJoinFieldComparator_value(t_ToParentBlockJoinFieldComparator *self, PyObject *args);
          static int t_ToParentBlockJoinFieldComparator_set__bottom(t_ToParentBlockJoinFieldComparator *self, PyObject *arg, void *data);
          static int t_ToParentBlockJoinFieldComparator_set__nextReader(t_ToParentBlockJoinFieldComparator *self, PyObject *arg, void *data);
          static int t_ToParentBlockJoinFieldComparator_set__topValue(t_ToParentBlockJoinFieldComparator *self, PyObject *arg, void *data);
          static PyObject *t_ToParentBlockJoinFieldComparator_get__parameters_(t_ToParentBlockJoinFieldComparator *self, void *data);
          static PyGetSetDef t_ToParentBlockJoinFieldComparator__fields_[] = {
            DECLARE_SET_FIELD(t_ToParentBlockJoinFieldComparator, bottom),
            DECLARE_SET_FIELD(t_ToParentBlockJoinFieldComparator, nextReader),
            DECLARE_SET_FIELD(t_ToParentBlockJoinFieldComparator, topValue),
            DECLARE_GET_FIELD(t_ToParentBlockJoinFieldComparator, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_ToParentBlockJoinFieldComparator__methods_[] = {
            DECLARE_METHOD(t_ToParentBlockJoinFieldComparator, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ToParentBlockJoinFieldComparator, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ToParentBlockJoinFieldComparator, of_, METH_VARARGS),
            DECLARE_METHOD(t_ToParentBlockJoinFieldComparator, compare, METH_VARARGS),
            DECLARE_METHOD(t_ToParentBlockJoinFieldComparator, setBottom, METH_VARARGS),
            DECLARE_METHOD(t_ToParentBlockJoinFieldComparator, setNextReader, METH_VARARGS),
            DECLARE_METHOD(t_ToParentBlockJoinFieldComparator, setTopValue, METH_VARARGS),
            DECLARE_METHOD(t_ToParentBlockJoinFieldComparator, value, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ToParentBlockJoinFieldComparator, t_ToParentBlockJoinFieldComparator, ::org::apache::lucene::search::FieldComparator, ToParentBlockJoinFieldComparator, abstract_init, 0, 0, t_ToParentBlockJoinFieldComparator__fields_, 0, 0);
          PyObject *t_ToParentBlockJoinFieldComparator::wrap_Object(const ToParentBlockJoinFieldComparator& object, PyTypeObject *p0)
          {
            PyObject *obj = t_ToParentBlockJoinFieldComparator::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_ToParentBlockJoinFieldComparator *self = (t_ToParentBlockJoinFieldComparator *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_ToParentBlockJoinFieldComparator::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_ToParentBlockJoinFieldComparator::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_ToParentBlockJoinFieldComparator *self = (t_ToParentBlockJoinFieldComparator *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_ToParentBlockJoinFieldComparator::install(PyObject *module)
          {
            installType(&PY_TYPE(ToParentBlockJoinFieldComparator), module, "ToParentBlockJoinFieldComparator", 0);
            PyDict_SetItemString(PY_TYPE(ToParentBlockJoinFieldComparator).tp_dict, "Highest", make_descriptor(&PY_TYPE(ToParentBlockJoinFieldComparator$Highest)));
            PyDict_SetItemString(PY_TYPE(ToParentBlockJoinFieldComparator).tp_dict, "Lowest", make_descriptor(&PY_TYPE(ToParentBlockJoinFieldComparator$Lowest)));
          }

          void t_ToParentBlockJoinFieldComparator::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ToParentBlockJoinFieldComparator).tp_dict, "class_", make_descriptor(ToParentBlockJoinFieldComparator::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ToParentBlockJoinFieldComparator).tp_dict, "wrapfn_", make_descriptor(t_ToParentBlockJoinFieldComparator::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ToParentBlockJoinFieldComparator).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ToParentBlockJoinFieldComparator_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ToParentBlockJoinFieldComparator::initializeClass, 1)))
              return NULL;
            return t_ToParentBlockJoinFieldComparator::wrap_Object(ToParentBlockJoinFieldComparator(((t_ToParentBlockJoinFieldComparator *) arg)->object.this$));
          }
          static PyObject *t_ToParentBlockJoinFieldComparator_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ToParentBlockJoinFieldComparator::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_ToParentBlockJoinFieldComparator_of_(t_ToParentBlockJoinFieldComparator *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static PyObject *t_ToParentBlockJoinFieldComparator_compare(t_ToParentBlockJoinFieldComparator *self, PyObject *args)
          {
            jint a0;
            jint a1;
            jint result;

            if (!parseArgs(args, "II", &a0, &a1))
            {
              OBJ_CALL(result = self->object.compare(a0, a1));
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(ToParentBlockJoinFieldComparator), (PyObject *) self, "compare", args, 2);
          }

          static PyObject *t_ToParentBlockJoinFieldComparator_setBottom(t_ToParentBlockJoinFieldComparator *self, PyObject *args)
          {
            jint a0;

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(self->object.setBottom(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(ToParentBlockJoinFieldComparator), (PyObject *) self, "setBottom", args, 2);
          }

          static PyObject *t_ToParentBlockJoinFieldComparator_setNextReader(t_ToParentBlockJoinFieldComparator *self, PyObject *args)
          {
            ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
            ::org::apache::lucene::search::FieldComparator result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.setNextReader(a0));
              return ::org::apache::lucene::search::t_FieldComparator::wrap_Object(result, &::java::lang::PY_TYPE(Object));
            }

            return callSuper(&PY_TYPE(ToParentBlockJoinFieldComparator), (PyObject *) self, "setNextReader", args, 2);
          }

          static PyObject *t_ToParentBlockJoinFieldComparator_setTopValue(t_ToParentBlockJoinFieldComparator *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(self->object.setTopValue(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(ToParentBlockJoinFieldComparator), (PyObject *) self, "setTopValue", args, 2);
          }

          static PyObject *t_ToParentBlockJoinFieldComparator_value(t_ToParentBlockJoinFieldComparator *self, PyObject *args)
          {
            jint a0;
            ::java::lang::Object result((jobject) NULL);

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(result = self->object.value(a0));
              return ::java::lang::t_Object::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(ToParentBlockJoinFieldComparator), (PyObject *) self, "value", args, 2);
          }
          static PyObject *t_ToParentBlockJoinFieldComparator_get__parameters_(t_ToParentBlockJoinFieldComparator *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static int t_ToParentBlockJoinFieldComparator_set__bottom(t_ToParentBlockJoinFieldComparator *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setBottom(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "bottom", arg);
            return -1;
          }

          static int t_ToParentBlockJoinFieldComparator_set__nextReader(t_ToParentBlockJoinFieldComparator *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::index::AtomicReaderContext value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &value))
              {
                INT_CALL(self->object.setNextReader(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "nextReader", arg);
            return -1;
          }

          static int t_ToParentBlockJoinFieldComparator_set__topValue(t_ToParentBlockJoinFieldComparator *self, PyObject *arg, void *data)
          {
            {
              ::java::lang::Object value((jobject) NULL);
              if (!parseArg(arg, "o", &value))
              {
                INT_CALL(self->object.setTopValue(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "topValue", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/perfield/PerFieldDocValuesFormat.h"
#include "org/apache/lucene/codecs/DocValuesProducer.h"
#include "org/apache/lucene/index/SegmentWriteState.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/codecs/DocValuesConsumer.h"
#include "org/apache/lucene/index/SegmentReadState.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace perfield {

          ::java::lang::Class *PerFieldDocValuesFormat::class$ = NULL;
          jmethodID *PerFieldDocValuesFormat::mids$ = NULL;
          bool PerFieldDocValuesFormat::live$ = false;
          ::java::lang::String *PerFieldDocValuesFormat::PER_FIELD_FORMAT_KEY = NULL;
          ::java::lang::String *PerFieldDocValuesFormat::PER_FIELD_NAME = NULL;
          ::java::lang::String *PerFieldDocValuesFormat::PER_FIELD_SUFFIX_KEY = NULL;

          jclass PerFieldDocValuesFormat::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/perfield/PerFieldDocValuesFormat");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_fieldsConsumer_025deb44] = env->getMethodID(cls, "fieldsConsumer", "(Lorg/apache/lucene/index/SegmentWriteState;)Lorg/apache/lucene/codecs/DocValuesConsumer;");
              mids$[mid_fieldsProducer_9b0d4e4a] = env->getMethodID(cls, "fieldsProducer", "(Lorg/apache/lucene/index/SegmentReadState;)Lorg/apache/lucene/codecs/DocValuesProducer;");
              mids$[mid_getDocValuesFormatForField_36ef78ba] = env->getMethodID(cls, "getDocValuesFormatForField", "(Ljava/lang/String;)Lorg/apache/lucene/codecs/DocValuesFormat;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              PER_FIELD_FORMAT_KEY = new ::java::lang::String(env->getStaticObjectField(cls, "PER_FIELD_FORMAT_KEY", "Ljava/lang/String;"));
              PER_FIELD_NAME = new ::java::lang::String(env->getStaticObjectField(cls, "PER_FIELD_NAME", "Ljava/lang/String;"));
              PER_FIELD_SUFFIX_KEY = new ::java::lang::String(env->getStaticObjectField(cls, "PER_FIELD_SUFFIX_KEY", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PerFieldDocValuesFormat::PerFieldDocValuesFormat() : ::org::apache::lucene::codecs::DocValuesFormat(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::codecs::DocValuesConsumer PerFieldDocValuesFormat::fieldsConsumer(const ::org::apache::lucene::index::SegmentWriteState & a0) const
          {
            return ::org::apache::lucene::codecs::DocValuesConsumer(env->callObjectMethod(this$, mids$[mid_fieldsConsumer_025deb44], a0.this$));
          }

          ::org::apache::lucene::codecs::DocValuesProducer PerFieldDocValuesFormat::fieldsProducer(const ::org::apache::lucene::index::SegmentReadState & a0) const
          {
            return ::org::apache::lucene::codecs::DocValuesProducer(env->callObjectMethod(this$, mids$[mid_fieldsProducer_9b0d4e4a], a0.this$));
          }

          ::org::apache::lucene::codecs::DocValuesFormat PerFieldDocValuesFormat::getDocValuesFormatForField(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::codecs::DocValuesFormat(env->callObjectMethod(this$, mids$[mid_getDocValuesFormatForField_36ef78ba], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace perfield {
          static PyObject *t_PerFieldDocValuesFormat_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PerFieldDocValuesFormat_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PerFieldDocValuesFormat_init_(t_PerFieldDocValuesFormat *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PerFieldDocValuesFormat_fieldsConsumer(t_PerFieldDocValuesFormat *self, PyObject *args);
          static PyObject *t_PerFieldDocValuesFormat_fieldsProducer(t_PerFieldDocValuesFormat *self, PyObject *args);
          static PyObject *t_PerFieldDocValuesFormat_getDocValuesFormatForField(t_PerFieldDocValuesFormat *self, PyObject *arg);

          static PyMethodDef t_PerFieldDocValuesFormat__methods_[] = {
            DECLARE_METHOD(t_PerFieldDocValuesFormat, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PerFieldDocValuesFormat, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PerFieldDocValuesFormat, fieldsConsumer, METH_VARARGS),
            DECLARE_METHOD(t_PerFieldDocValuesFormat, fieldsProducer, METH_VARARGS),
            DECLARE_METHOD(t_PerFieldDocValuesFormat, getDocValuesFormatForField, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PerFieldDocValuesFormat, t_PerFieldDocValuesFormat, ::org::apache::lucene::codecs::DocValuesFormat, PerFieldDocValuesFormat, t_PerFieldDocValuesFormat_init_, 0, 0, 0, 0, 0);

          void t_PerFieldDocValuesFormat::install(PyObject *module)
          {
            installType(&PY_TYPE(PerFieldDocValuesFormat), module, "PerFieldDocValuesFormat", 0);
          }

          void t_PerFieldDocValuesFormat::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PerFieldDocValuesFormat).tp_dict, "class_", make_descriptor(PerFieldDocValuesFormat::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PerFieldDocValuesFormat).tp_dict, "wrapfn_", make_descriptor(t_PerFieldDocValuesFormat::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PerFieldDocValuesFormat).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(PerFieldDocValuesFormat::initializeClass);
            PyDict_SetItemString(PY_TYPE(PerFieldDocValuesFormat).tp_dict, "PER_FIELD_FORMAT_KEY", make_descriptor(j2p(*PerFieldDocValuesFormat::PER_FIELD_FORMAT_KEY)));
            PyDict_SetItemString(PY_TYPE(PerFieldDocValuesFormat).tp_dict, "PER_FIELD_NAME", make_descriptor(j2p(*PerFieldDocValuesFormat::PER_FIELD_NAME)));
            PyDict_SetItemString(PY_TYPE(PerFieldDocValuesFormat).tp_dict, "PER_FIELD_SUFFIX_KEY", make_descriptor(j2p(*PerFieldDocValuesFormat::PER_FIELD_SUFFIX_KEY)));
          }

          static PyObject *t_PerFieldDocValuesFormat_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PerFieldDocValuesFormat::initializeClass, 1)))
              return NULL;
            return t_PerFieldDocValuesFormat::wrap_Object(PerFieldDocValuesFormat(((t_PerFieldDocValuesFormat *) arg)->object.this$));
          }
          static PyObject *t_PerFieldDocValuesFormat_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PerFieldDocValuesFormat::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PerFieldDocValuesFormat_init_(t_PerFieldDocValuesFormat *self, PyObject *args, PyObject *kwds)
          {
            PerFieldDocValuesFormat object((jobject) NULL);

            INT_CALL(object = PerFieldDocValuesFormat());
            self->object = object;

            return 0;
          }

          static PyObject *t_PerFieldDocValuesFormat_fieldsConsumer(t_PerFieldDocValuesFormat *self, PyObject *args)
          {
            ::org::apache::lucene::index::SegmentWriteState a0((jobject) NULL);
            ::org::apache::lucene::codecs::DocValuesConsumer result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::SegmentWriteState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.fieldsConsumer(a0));
              return ::org::apache::lucene::codecs::t_DocValuesConsumer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(PerFieldDocValuesFormat), (PyObject *) self, "fieldsConsumer", args, 2);
          }

          static PyObject *t_PerFieldDocValuesFormat_fieldsProducer(t_PerFieldDocValuesFormat *self, PyObject *args)
          {
            ::org::apache::lucene::index::SegmentReadState a0((jobject) NULL);
            ::org::apache::lucene::codecs::DocValuesProducer result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::SegmentReadState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.fieldsProducer(a0));
              return ::org::apache::lucene::codecs::t_DocValuesProducer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(PerFieldDocValuesFormat), (PyObject *) self, "fieldsProducer", args, 2);
          }

          static PyObject *t_PerFieldDocValuesFormat_getDocValuesFormatForField(t_PerFieldDocValuesFormat *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::codecs::DocValuesFormat result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.getDocValuesFormatForField(a0));
              return ::org::apache::lucene::codecs::t_DocValuesFormat::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getDocValuesFormatForField", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/RecyclingByteBlockAllocator.h"
#include "org/apache/lucene/util/Counter.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *RecyclingByteBlockAllocator::class$ = NULL;
        jmethodID *RecyclingByteBlockAllocator::mids$ = NULL;
        bool RecyclingByteBlockAllocator::live$ = false;
        jint RecyclingByteBlockAllocator::DEFAULT_BUFFERED_BLOCKS = (jint) 0;

        jclass RecyclingByteBlockAllocator::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/RecyclingByteBlockAllocator");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_init$_d8d154a6] = env->getMethodID(cls, "<init>", "(II)V");
            mids$[mid_init$_bdd89aab] = env->getMethodID(cls, "<init>", "(IILorg/apache/lucene/util/Counter;)V");
            mids$[mid_bytesUsed_54c6a17a] = env->getMethodID(cls, "bytesUsed", "()J");
            mids$[mid_freeBlocks_39c7bd23] = env->getMethodID(cls, "freeBlocks", "(I)I");
            mids$[mid_getByteBlock_dab10e7e] = env->getMethodID(cls, "getByteBlock", "()[B");
            mids$[mid_maxBufferedBlocks_54c6a179] = env->getMethodID(cls, "maxBufferedBlocks", "()I");
            mids$[mid_numBufferedBlocks_54c6a179] = env->getMethodID(cls, "numBufferedBlocks", "()I");
            mids$[mid_recycleByteBlocks_d3ffa89f] = env->getMethodID(cls, "recycleByteBlocks", "([[BII)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            DEFAULT_BUFFERED_BLOCKS = env->getStaticIntField(cls, "DEFAULT_BUFFERED_BLOCKS");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        RecyclingByteBlockAllocator::RecyclingByteBlockAllocator() : ::org::apache::lucene::util::ByteBlockPool$Allocator(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        RecyclingByteBlockAllocator::RecyclingByteBlockAllocator(jint a0, jint a1) : ::org::apache::lucene::util::ByteBlockPool$Allocator(env->newObject(initializeClass, &mids$, mid_init$_d8d154a6, a0, a1)) {}

        RecyclingByteBlockAllocator::RecyclingByteBlockAllocator(jint a0, jint a1, const ::org::apache::lucene::util::Counter & a2) : ::org::apache::lucene::util::ByteBlockPool$Allocator(env->newObject(initializeClass, &mids$, mid_init$_bdd89aab, a0, a1, a2.this$)) {}

        jlong RecyclingByteBlockAllocator::bytesUsed() const
        {
          return env->callLongMethod(this$, mids$[mid_bytesUsed_54c6a17a]);
        }

        jint RecyclingByteBlockAllocator::freeBlocks(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_freeBlocks_39c7bd23], a0);
        }

        JArray< jbyte > RecyclingByteBlockAllocator::getByteBlock() const
        {
          return JArray< jbyte >(env->callObjectMethod(this$, mids$[mid_getByteBlock_dab10e7e]));
        }

        jint RecyclingByteBlockAllocator::maxBufferedBlocks() const
        {
          return env->callIntMethod(this$, mids$[mid_maxBufferedBlocks_54c6a179]);
        }

        jint RecyclingByteBlockAllocator::numBufferedBlocks() const
        {
          return env->callIntMethod(this$, mids$[mid_numBufferedBlocks_54c6a179]);
        }

        void RecyclingByteBlockAllocator::recycleByteBlocks(const JArray< JArray< jbyte > > & a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_recycleByteBlocks_d3ffa89f], a0.this$, a1, a2);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_RecyclingByteBlockAllocator_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_RecyclingByteBlockAllocator_instance_(PyTypeObject *type, PyObject *arg);
        static int t_RecyclingByteBlockAllocator_init_(t_RecyclingByteBlockAllocator *self, PyObject *args, PyObject *kwds);
        static PyObject *t_RecyclingByteBlockAllocator_bytesUsed(t_RecyclingByteBlockAllocator *self);
        static PyObject *t_RecyclingByteBlockAllocator_freeBlocks(t_RecyclingByteBlockAllocator *self, PyObject *arg);
        static PyObject *t_RecyclingByteBlockAllocator_getByteBlock(t_RecyclingByteBlockAllocator *self, PyObject *args);
        static PyObject *t_RecyclingByteBlockAllocator_maxBufferedBlocks(t_RecyclingByteBlockAllocator *self);
        static PyObject *t_RecyclingByteBlockAllocator_numBufferedBlocks(t_RecyclingByteBlockAllocator *self);
        static PyObject *t_RecyclingByteBlockAllocator_recycleByteBlocks(t_RecyclingByteBlockAllocator *self, PyObject *args);
        static PyObject *t_RecyclingByteBlockAllocator_get__byteBlock(t_RecyclingByteBlockAllocator *self, void *data);
        static PyGetSetDef t_RecyclingByteBlockAllocator__fields_[] = {
          DECLARE_GET_FIELD(t_RecyclingByteBlockAllocator, byteBlock),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_RecyclingByteBlockAllocator__methods_[] = {
          DECLARE_METHOD(t_RecyclingByteBlockAllocator, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RecyclingByteBlockAllocator, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RecyclingByteBlockAllocator, bytesUsed, METH_NOARGS),
          DECLARE_METHOD(t_RecyclingByteBlockAllocator, freeBlocks, METH_O),
          DECLARE_METHOD(t_RecyclingByteBlockAllocator, getByteBlock, METH_VARARGS),
          DECLARE_METHOD(t_RecyclingByteBlockAllocator, maxBufferedBlocks, METH_NOARGS),
          DECLARE_METHOD(t_RecyclingByteBlockAllocator, numBufferedBlocks, METH_NOARGS),
          DECLARE_METHOD(t_RecyclingByteBlockAllocator, recycleByteBlocks, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(RecyclingByteBlockAllocator, t_RecyclingByteBlockAllocator, ::org::apache::lucene::util::ByteBlockPool$Allocator, RecyclingByteBlockAllocator, t_RecyclingByteBlockAllocator_init_, 0, 0, t_RecyclingByteBlockAllocator__fields_, 0, 0);

        void t_RecyclingByteBlockAllocator::install(PyObject *module)
        {
          installType(&PY_TYPE(RecyclingByteBlockAllocator), module, "RecyclingByteBlockAllocator", 0);
        }

        void t_RecyclingByteBlockAllocator::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(RecyclingByteBlockAllocator).tp_dict, "class_", make_descriptor(RecyclingByteBlockAllocator::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(RecyclingByteBlockAllocator).tp_dict, "wrapfn_", make_descriptor(t_RecyclingByteBlockAllocator::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(RecyclingByteBlockAllocator).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(RecyclingByteBlockAllocator::initializeClass);
          PyDict_SetItemString(PY_TYPE(RecyclingByteBlockAllocator).tp_dict, "DEFAULT_BUFFERED_BLOCKS", make_descriptor(RecyclingByteBlockAllocator::DEFAULT_BUFFERED_BLOCKS));
        }

        static PyObject *t_RecyclingByteBlockAllocator_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, RecyclingByteBlockAllocator::initializeClass, 1)))
            return NULL;
          return t_RecyclingByteBlockAllocator::wrap_Object(RecyclingByteBlockAllocator(((t_RecyclingByteBlockAllocator *) arg)->object.this$));
        }
        static PyObject *t_RecyclingByteBlockAllocator_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, RecyclingByteBlockAllocator::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_RecyclingByteBlockAllocator_init_(t_RecyclingByteBlockAllocator *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              RecyclingByteBlockAllocator object((jobject) NULL);

              INT_CALL(object = RecyclingByteBlockAllocator());
              self->object = object;
              break;
            }
            goto err;
           case 2:
            {
              jint a0;
              jint a1;
              RecyclingByteBlockAllocator object((jobject) NULL);

              if (!parseArgs(args, "II", &a0, &a1))
              {
                INT_CALL(object = RecyclingByteBlockAllocator(a0, a1));
                self->object = object;
                break;
              }
            }
            goto err;
           case 3:
            {
              jint a0;
              jint a1;
              ::org::apache::lucene::util::Counter a2((jobject) NULL);
              RecyclingByteBlockAllocator object((jobject) NULL);

              if (!parseArgs(args, "IIk", ::org::apache::lucene::util::Counter::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = RecyclingByteBlockAllocator(a0, a1, a2));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_RecyclingByteBlockAllocator_bytesUsed(t_RecyclingByteBlockAllocator *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.bytesUsed());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_RecyclingByteBlockAllocator_freeBlocks(t_RecyclingByteBlockAllocator *self, PyObject *arg)
        {
          jint a0;
          jint result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.freeBlocks(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "freeBlocks", arg);
          return NULL;
        }

        static PyObject *t_RecyclingByteBlockAllocator_getByteBlock(t_RecyclingByteBlockAllocator *self, PyObject *args)
        {
          JArray< jbyte > result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getByteBlock());
            return result.wrap();
          }

          return callSuper(&PY_TYPE(RecyclingByteBlockAllocator), (PyObject *) self, "getByteBlock", args, 2);
        }

        static PyObject *t_RecyclingByteBlockAllocator_maxBufferedBlocks(t_RecyclingByteBlockAllocator *self)
        {
          jint result;
          OBJ_CALL(result = self->object.maxBufferedBlocks());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_RecyclingByteBlockAllocator_numBufferedBlocks(t_RecyclingByteBlockAllocator *self)
        {
          jint result;
          OBJ_CALL(result = self->object.numBufferedBlocks());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_RecyclingByteBlockAllocator_recycleByteBlocks(t_RecyclingByteBlockAllocator *self, PyObject *args)
        {
          JArray< JArray< jbyte > > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[[BII", &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.recycleByteBlocks(a0, a1, a2));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(RecyclingByteBlockAllocator), (PyObject *) self, "recycleByteBlocks", args, 2);
        }

        static PyObject *t_RecyclingByteBlockAllocator_get__byteBlock(t_RecyclingByteBlockAllocator *self, void *data)
        {
          JArray< jbyte > value((jobject) NULL);
          OBJ_CALL(value = self->object.getByteBlock());
          return value.wrap();
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/fst/IntsRefFSTEnum$InputOutput.h"
#include "org/apache/lucene/util/IntsRef.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {

          ::java::lang::Class *IntsRefFSTEnum$InputOutput::class$ = NULL;
          jmethodID *IntsRefFSTEnum$InputOutput::mids$ = NULL;
          jfieldID *IntsRefFSTEnum$InputOutput::fids$ = NULL;
          bool IntsRefFSTEnum$InputOutput::live$ = false;

          jclass IntsRefFSTEnum$InputOutput::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/fst/IntsRefFSTEnum$InputOutput");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

              fids$ = new jfieldID[max_fid];
              fids$[fid_input] = env->getFieldID(cls, "input", "Lorg/apache/lucene/util/IntsRef;");
              fids$[fid_output] = env->getFieldID(cls, "output", "Ljava/lang/Object;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          IntsRefFSTEnum$InputOutput::IntsRefFSTEnum$InputOutput() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::util::IntsRef IntsRefFSTEnum$InputOutput::_get_input() const
          {
            return ::org::apache::lucene::util::IntsRef(env->getObjectField(this$, fids$[fid_input]));
          }

          void IntsRefFSTEnum$InputOutput::_set_input(const ::org::apache::lucene::util::IntsRef & a0) const
          {
            env->setObjectField(this$, fids$[fid_input], a0.this$);
          }

          ::java::lang::Object IntsRefFSTEnum$InputOutput::_get_output() const
          {
            return ::java::lang::Object(env->getObjectField(this$, fids$[fid_output]));
          }

          void IntsRefFSTEnum$InputOutput::_set_output(const ::java::lang::Object & a0) const
          {
            env->setObjectField(this$, fids$[fid_output], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {
          static PyObject *t_IntsRefFSTEnum$InputOutput_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IntsRefFSTEnum$InputOutput_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IntsRefFSTEnum$InputOutput_of_(t_IntsRefFSTEnum$InputOutput *self, PyObject *args);
          static int t_IntsRefFSTEnum$InputOutput_init_(t_IntsRefFSTEnum$InputOutput *self, PyObject *args, PyObject *kwds);
          static PyObject *t_IntsRefFSTEnum$InputOutput_get__input(t_IntsRefFSTEnum$InputOutput *self, void *data);
          static int t_IntsRefFSTEnum$InputOutput_set__input(t_IntsRefFSTEnum$InputOutput *self, PyObject *arg, void *data);
          static PyObject *t_IntsRefFSTEnum$InputOutput_get__output(t_IntsRefFSTEnum$InputOutput *self, void *data);
          static int t_IntsRefFSTEnum$InputOutput_set__output(t_IntsRefFSTEnum$InputOutput *self, PyObject *arg, void *data);

          static PyObject *t_IntsRefFSTEnum$InputOutput_get__parameters_(t_IntsRefFSTEnum$InputOutput *self, void *data);
          static PyGetSetDef t_IntsRefFSTEnum$InputOutput__fields_[] = {
            DECLARE_GETSET_FIELD(t_IntsRefFSTEnum$InputOutput, input),
            DECLARE_GETSET_FIELD(t_IntsRefFSTEnum$InputOutput, output),
            DECLARE_GET_FIELD(t_IntsRefFSTEnum$InputOutput, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_IntsRefFSTEnum$InputOutput__methods_[] = {
            DECLARE_METHOD(t_IntsRefFSTEnum$InputOutput, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IntsRefFSTEnum$InputOutput, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IntsRefFSTEnum$InputOutput, of_, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(IntsRefFSTEnum$InputOutput, t_IntsRefFSTEnum$InputOutput, ::java::lang::Object, IntsRefFSTEnum$InputOutput, t_IntsRefFSTEnum$InputOutput_init_, 0, 0, t_IntsRefFSTEnum$InputOutput__fields_, 0, 0);
          PyObject *t_IntsRefFSTEnum$InputOutput::wrap_Object(const IntsRefFSTEnum$InputOutput& object, PyTypeObject *p0)
          {
            PyObject *obj = t_IntsRefFSTEnum$InputOutput::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_IntsRefFSTEnum$InputOutput *self = (t_IntsRefFSTEnum$InputOutput *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_IntsRefFSTEnum$InputOutput::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_IntsRefFSTEnum$InputOutput::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_IntsRefFSTEnum$InputOutput *self = (t_IntsRefFSTEnum$InputOutput *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_IntsRefFSTEnum$InputOutput::install(PyObject *module)
          {
            installType(&PY_TYPE(IntsRefFSTEnum$InputOutput), module, "IntsRefFSTEnum$InputOutput", 0);
          }

          void t_IntsRefFSTEnum$InputOutput::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(IntsRefFSTEnum$InputOutput).tp_dict, "class_", make_descriptor(IntsRefFSTEnum$InputOutput::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(IntsRefFSTEnum$InputOutput).tp_dict, "wrapfn_", make_descriptor(t_IntsRefFSTEnum$InputOutput::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(IntsRefFSTEnum$InputOutput).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_IntsRefFSTEnum$InputOutput_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, IntsRefFSTEnum$InputOutput::initializeClass, 1)))
              return NULL;
            return t_IntsRefFSTEnum$InputOutput::wrap_Object(IntsRefFSTEnum$InputOutput(((t_IntsRefFSTEnum$InputOutput *) arg)->object.this$));
          }
          static PyObject *t_IntsRefFSTEnum$InputOutput_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, IntsRefFSTEnum$InputOutput::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_IntsRefFSTEnum$InputOutput_of_(t_IntsRefFSTEnum$InputOutput *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_IntsRefFSTEnum$InputOutput_init_(t_IntsRefFSTEnum$InputOutput *self, PyObject *args, PyObject *kwds)
          {
            IntsRefFSTEnum$InputOutput object((jobject) NULL);

            INT_CALL(object = IntsRefFSTEnum$InputOutput());
            self->object = object;

            return 0;
          }
          static PyObject *t_IntsRefFSTEnum$InputOutput_get__parameters_(t_IntsRefFSTEnum$InputOutput *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_IntsRefFSTEnum$InputOutput_get__input(t_IntsRefFSTEnum$InputOutput *self, void *data)
          {
            ::org::apache::lucene::util::IntsRef value((jobject) NULL);
            OBJ_CALL(value = self->object._get_input());
            return ::org::apache::lucene::util::t_IntsRef::wrap_Object(value);
          }
          static int t_IntsRefFSTEnum$InputOutput_set__input(t_IntsRefFSTEnum$InputOutput *self, PyObject *arg, void *data)
          {
            ::org::apache::lucene::util::IntsRef value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::util::IntsRef::initializeClass, &value))
            {
              INT_CALL(self->object._set_input(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "input", arg);
            return -1;
          }

          static PyObject *t_IntsRefFSTEnum$InputOutput_get__output(t_IntsRefFSTEnum$InputOutput *self, void *data)
          {
            ::java::lang::Object value((jobject) NULL);
            OBJ_CALL(value = self->object._get_output());
            return ::java::lang::t_Object::wrap_Object(value);
          }
          static int t_IntsRefFSTEnum$InputOutput_set__output(t_IntsRefFSTEnum$InputOutput *self, PyObject *arg, void *data)
          {
            ::java::lang::Object value((jobject) NULL);
            if (!parseArg(arg, "o", &value))
            {
              INT_CALL(self->object._set_output(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "output", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FieldCache$Parser.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/Terms.h"
#include "org/apache/lucene/index/TermsEnum.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FieldCache$Parser::class$ = NULL;
        jmethodID *FieldCache$Parser::mids$ = NULL;
        bool FieldCache$Parser::live$ = false;

        jclass FieldCache$Parser::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FieldCache$Parser");

            mids$ = new jmethodID[max_mid];
            mids$[mid_termsEnum_fb3ac14e] = env->getMethodID(cls, "termsEnum", "(Lorg/apache/lucene/index/Terms;)Lorg/apache/lucene/index/TermsEnum;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::index::TermsEnum FieldCache$Parser::termsEnum(const ::org::apache::lucene::index::Terms & a0) const
        {
          return ::org::apache::lucene::index::TermsEnum(env->callObjectMethod(this$, mids$[mid_termsEnum_fb3ac14e], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FieldCache$Parser_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldCache$Parser_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldCache$Parser_termsEnum(t_FieldCache$Parser *self, PyObject *arg);

        static PyMethodDef t_FieldCache$Parser__methods_[] = {
          DECLARE_METHOD(t_FieldCache$Parser, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCache$Parser, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCache$Parser, termsEnum, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldCache$Parser, t_FieldCache$Parser, ::java::lang::Object, FieldCache$Parser, abstract_init, 0, 0, 0, 0, 0);

        void t_FieldCache$Parser::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldCache$Parser), module, "FieldCache$Parser", 0);
        }

        void t_FieldCache$Parser::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldCache$Parser).tp_dict, "class_", make_descriptor(FieldCache$Parser::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldCache$Parser).tp_dict, "wrapfn_", make_descriptor(t_FieldCache$Parser::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldCache$Parser).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldCache$Parser_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldCache$Parser::initializeClass, 1)))
            return NULL;
          return t_FieldCache$Parser::wrap_Object(FieldCache$Parser(((t_FieldCache$Parser *) arg)->object.this$));
        }
        static PyObject *t_FieldCache$Parser_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldCache$Parser::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FieldCache$Parser_termsEnum(t_FieldCache$Parser *self, PyObject *arg)
        {
          ::org::apache::lucene::index::Terms a0((jobject) NULL);
          ::org::apache::lucene::index::TermsEnum result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::Terms::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.termsEnum(a0));
            return ::org::apache::lucene::index::t_TermsEnum::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "termsEnum", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/surround/query/TooManyBasicQueries.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace query {

            ::java::lang::Class *TooManyBasicQueries::class$ = NULL;
            jmethodID *TooManyBasicQueries::mids$ = NULL;
            bool TooManyBasicQueries::live$ = false;

            jclass TooManyBasicQueries::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/surround/query/TooManyBasicQueries");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            TooManyBasicQueries::TooManyBasicQueries(jint a0) : ::java::io::IOException(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace query {
            static PyObject *t_TooManyBasicQueries_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_TooManyBasicQueries_instance_(PyTypeObject *type, PyObject *arg);
            static int t_TooManyBasicQueries_init_(t_TooManyBasicQueries *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_TooManyBasicQueries__methods_[] = {
              DECLARE_METHOD(t_TooManyBasicQueries, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TooManyBasicQueries, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(TooManyBasicQueries, t_TooManyBasicQueries, ::java::io::IOException, TooManyBasicQueries, t_TooManyBasicQueries_init_, 0, 0, 0, 0, 0);

            void t_TooManyBasicQueries::install(PyObject *module)
            {
              installType(&PY_TYPE(TooManyBasicQueries), module, "TooManyBasicQueries", 0);
            }

            void t_TooManyBasicQueries::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(TooManyBasicQueries).tp_dict, "class_", make_descriptor(TooManyBasicQueries::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(TooManyBasicQueries).tp_dict, "wrapfn_", make_descriptor(t_TooManyBasicQueries::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(TooManyBasicQueries).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_TooManyBasicQueries_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, TooManyBasicQueries::initializeClass, 1)))
                return NULL;
              return t_TooManyBasicQueries::wrap_Object(TooManyBasicQueries(((t_TooManyBasicQueries *) arg)->object.this$));
            }
            static PyObject *t_TooManyBasicQueries_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, TooManyBasicQueries::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_TooManyBasicQueries_init_(t_TooManyBasicQueries *self, PyObject *args, PyObject *kwds)
            {
              jint a0;
              TooManyBasicQueries object((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                INT_CALL(object = TooManyBasicQueries(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/messages/NLS.h"
#include "java/lang/String.h"
#include "java/util/Locale.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace messages {

            ::java::lang::Class *NLS::class$ = NULL;
            jmethodID *NLS::mids$ = NULL;
            bool NLS::live$ = false;

            jclass NLS::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/messages/NLS");

                mids$ = new jmethodID[max_mid];
                mids$[mid_getLocalizedMessage_97a5258f] = env->getStaticMethodID(cls, "getLocalizedMessage", "(Ljava/lang/String;)Ljava/lang/String;");
                mids$[mid_getLocalizedMessage_6ffeebd8] = env->getStaticMethodID(cls, "getLocalizedMessage", "(Ljava/lang/String;Ljava/util/Locale;)Ljava/lang/String;");
                mids$[mid_getLocalizedMessage_0fb26e3b] = env->getStaticMethodID(cls, "getLocalizedMessage", "(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;");
                mids$[mid_getLocalizedMessage_c901cda2] = env->getStaticMethodID(cls, "getLocalizedMessage", "(Ljava/lang/String;Ljava/util/Locale;[Ljava/lang/Object;)Ljava/lang/String;");
                mids$[mid_initializeMessages_c13be9ce] = env->getStaticMethodID(cls, "initializeMessages", "(Ljava/lang/String;Ljava/lang/Class;)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            ::java::lang::String NLS::getLocalizedMessage(const ::java::lang::String & a0)
            {
              jclass cls = env->getClass(initializeClass);
              return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_getLocalizedMessage_97a5258f], a0.this$));
            }

            ::java::lang::String NLS::getLocalizedMessage(const ::java::lang::String & a0, const ::java::util::Locale & a1)
            {
              jclass cls = env->getClass(initializeClass);
              return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_getLocalizedMessage_6ffeebd8], a0.this$, a1.this$));
            }

            ::java::lang::String NLS::getLocalizedMessage(const ::java::lang::String & a0, const JArray< ::java::lang::Object > & a1)
            {
              jclass cls = env->getClass(initializeClass);
              return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_getLocalizedMessage_0fb26e3b], a0.this$, a1.this$));
            }

            ::java::lang::String NLS::getLocalizedMessage(const ::java::lang::String & a0, const ::java::util::Locale & a1, const JArray< ::java::lang::Object > & a2)
            {
              jclass cls = env->getClass(initializeClass);
              return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_getLocalizedMessage_c901cda2], a0.this$, a1.this$, a2.this$));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace messages {
            static PyObject *t_NLS_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_NLS_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_NLS_getLocalizedMessage(PyTypeObject *type, PyObject *args);

            static PyMethodDef t_NLS__methods_[] = {
              DECLARE_METHOD(t_NLS, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_NLS, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_NLS, getLocalizedMessage, METH_VARARGS | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(NLS, t_NLS, ::java::lang::Object, NLS, abstract_init, 0, 0, 0, 0, 0);

            void t_NLS::install(PyObject *module)
            {
              installType(&PY_TYPE(NLS), module, "NLS", 0);
            }

            void t_NLS::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(NLS).tp_dict, "class_", make_descriptor(NLS::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(NLS).tp_dict, "wrapfn_", make_descriptor(t_NLS::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(NLS).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_NLS_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, NLS::initializeClass, 1)))
                return NULL;
              return t_NLS::wrap_Object(NLS(((t_NLS *) arg)->object.this$));
            }
            static PyObject *t_NLS_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, NLS::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_NLS_getLocalizedMessage(PyTypeObject *type, PyObject *args)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 1:
                {
                  ::java::lang::String a0((jobject) NULL);
                  ::java::lang::String result((jobject) NULL);

                  if (!parseArgs(args, "s", &a0))
                  {
                    OBJ_CALL(result = ::org::apache::lucene::queryparser::flexible::messages::NLS::getLocalizedMessage(a0));
                    return j2p(result);
                  }
                }
                break;
               case 2:
                {
                  ::java::lang::String a0((jobject) NULL);
                  ::java::util::Locale a1((jobject) NULL);
                  ::java::lang::String result((jobject) NULL);

                  if (!parseArgs(args, "sk", ::java::util::Locale::initializeClass, &a0, &a1))
                  {
                    OBJ_CALL(result = ::org::apache::lucene::queryparser::flexible::messages::NLS::getLocalizedMessage(a0, a1));
                    return j2p(result);
                  }
                }
                {
                  ::java::lang::String a0((jobject) NULL);
                  JArray< ::java::lang::Object > a1((jobject) NULL);
                  ::java::lang::String result((jobject) NULL);

                  if (!parseArgs(args, "s[o", &a0, &a1))
                  {
                    OBJ_CALL(result = ::org::apache::lucene::queryparser::flexible::messages::NLS::getLocalizedMessage(a0, a1));
                    return j2p(result);
                  }
                }
                break;
               case 3:
                {
                  ::java::lang::String a0((jobject) NULL);
                  ::java::util::Locale a1((jobject) NULL);
                  JArray< ::java::lang::Object > a2((jobject) NULL);
                  ::java::lang::String result((jobject) NULL);

                  if (!parseArgs(args, "sk[o", ::java::util::Locale::initializeClass, &a0, &a1, &a2))
                  {
                    OBJ_CALL(result = ::org::apache::lucene::queryparser::flexible::messages::NLS::getLocalizedMessage(a0, a1, a2));
                    return j2p(result);
                  }
                }
              }

              PyErr_SetArgsError(type, "getLocalizedMessage", args);
              return NULL;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/surround/query/SrndPrefixQuery.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/Term.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "java/lang/String.h"
#include "org/apache/lucene/queryparser/surround/query/SimpleTerm$MatchingTermVisitor.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace query {

            ::java::lang::Class *SrndPrefixQuery::class$ = NULL;
            jmethodID *SrndPrefixQuery::mids$ = NULL;
            bool SrndPrefixQuery::live$ = false;

            jclass SrndPrefixQuery::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/surround/query/SrndPrefixQuery");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_f33a591b] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;ZC)V");
                mids$[mid_getLucenePrefixTerm_2864f4ee] = env->getMethodID(cls, "getLucenePrefixTerm", "(Ljava/lang/String;)Lorg/apache/lucene/index/Term;");
                mids$[mid_getPrefix_14c7b5c5] = env->getMethodID(cls, "getPrefix", "()Ljava/lang/String;");
                mids$[mid_getSuffixOperator_54c6a173] = env->getMethodID(cls, "getSuffixOperator", "()C");
                mids$[mid_toStringUnquoted_14c7b5c5] = env->getMethodID(cls, "toStringUnquoted", "()Ljava/lang/String;");
                mids$[mid_visitMatchingTerms_330199a1] = env->getMethodID(cls, "visitMatchingTerms", "(Lorg/apache/lucene/index/IndexReader;Ljava/lang/String;Lorg/apache/lucene/queryparser/surround/query/SimpleTerm$MatchingTermVisitor;)V");
                mids$[mid_suffixToString_9f94ae34] = env->getMethodID(cls, "suffixToString", "(Ljava/lang/StringBuilder;)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            SrndPrefixQuery::SrndPrefixQuery(const ::java::lang::String & a0, jboolean a1, jchar a2) : ::org::apache::lucene::queryparser::surround::query::SimpleTerm(env->newObject(initializeClass, &mids$, mid_init$_f33a591b, a0.this$, a1, a2)) {}

            ::org::apache::lucene::index::Term SrndPrefixQuery::getLucenePrefixTerm(const ::java::lang::String & a0) const
            {
              return ::org::apache::lucene::index::Term(env->callObjectMethod(this$, mids$[mid_getLucenePrefixTerm_2864f4ee], a0.this$));
            }

            ::java::lang::String SrndPrefixQuery::getPrefix() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getPrefix_14c7b5c5]));
            }

            jchar SrndPrefixQuery::getSuffixOperator() const
            {
              return env->callCharMethod(this$, mids$[mid_getSuffixOperator_54c6a173]);
            }

            ::java::lang::String SrndPrefixQuery::toStringUnquoted() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toStringUnquoted_14c7b5c5]));
            }

            void SrndPrefixQuery::visitMatchingTerms(const ::org::apache::lucene::index::IndexReader & a0, const ::java::lang::String & a1, const ::org::apache::lucene::queryparser::surround::query::SimpleTerm$MatchingTermVisitor & a2) const
            {
              env->callVoidMethod(this$, mids$[mid_visitMatchingTerms_330199a1], a0.this$, a1.this$, a2.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace query {
            static PyObject *t_SrndPrefixQuery_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_SrndPrefixQuery_instance_(PyTypeObject *type, PyObject *arg);
            static int t_SrndPrefixQuery_init_(t_SrndPrefixQuery *self, PyObject *args, PyObject *kwds);
            static PyObject *t_SrndPrefixQuery_getLucenePrefixTerm(t_SrndPrefixQuery *self, PyObject *arg);
            static PyObject *t_SrndPrefixQuery_getPrefix(t_SrndPrefixQuery *self);
            static PyObject *t_SrndPrefixQuery_getSuffixOperator(t_SrndPrefixQuery *self);
            static PyObject *t_SrndPrefixQuery_toStringUnquoted(t_SrndPrefixQuery *self, PyObject *args);
            static PyObject *t_SrndPrefixQuery_visitMatchingTerms(t_SrndPrefixQuery *self, PyObject *args);
            static PyObject *t_SrndPrefixQuery_get__prefix(t_SrndPrefixQuery *self, void *data);
            static PyObject *t_SrndPrefixQuery_get__suffixOperator(t_SrndPrefixQuery *self, void *data);
            static PyGetSetDef t_SrndPrefixQuery__fields_[] = {
              DECLARE_GET_FIELD(t_SrndPrefixQuery, prefix),
              DECLARE_GET_FIELD(t_SrndPrefixQuery, suffixOperator),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_SrndPrefixQuery__methods_[] = {
              DECLARE_METHOD(t_SrndPrefixQuery, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SrndPrefixQuery, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SrndPrefixQuery, getLucenePrefixTerm, METH_O),
              DECLARE_METHOD(t_SrndPrefixQuery, getPrefix, METH_NOARGS),
              DECLARE_METHOD(t_SrndPrefixQuery, getSuffixOperator, METH_NOARGS),
              DECLARE_METHOD(t_SrndPrefixQuery, toStringUnquoted, METH_VARARGS),
              DECLARE_METHOD(t_SrndPrefixQuery, visitMatchingTerms, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(SrndPrefixQuery, t_SrndPrefixQuery, ::org::apache::lucene::queryparser::surround::query::SimpleTerm, SrndPrefixQuery, t_SrndPrefixQuery_init_, 0, 0, t_SrndPrefixQuery__fields_, 0, 0);

            void t_SrndPrefixQuery::install(PyObject *module)
            {
              installType(&PY_TYPE(SrndPrefixQuery), module, "SrndPrefixQuery", 0);
            }

            void t_SrndPrefixQuery::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(SrndPrefixQuery).tp_dict, "class_", make_descriptor(SrndPrefixQuery::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(SrndPrefixQuery).tp_dict, "wrapfn_", make_descriptor(t_SrndPrefixQuery::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(SrndPrefixQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_SrndPrefixQuery_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, SrndPrefixQuery::initializeClass, 1)))
                return NULL;
              return t_SrndPrefixQuery::wrap_Object(SrndPrefixQuery(((t_SrndPrefixQuery *) arg)->object.this$));
            }
            static PyObject *t_SrndPrefixQuery_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, SrndPrefixQuery::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_SrndPrefixQuery_init_(t_SrndPrefixQuery *self, PyObject *args, PyObject *kwds)
            {
              ::java::lang::String a0((jobject) NULL);
              jboolean a1;
              jchar a2;
              SrndPrefixQuery object((jobject) NULL);

              if (!parseArgs(args, "sZC", &a0, &a1, &a2))
              {
                INT_CALL(object = SrndPrefixQuery(a0, a1, a2));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_SrndPrefixQuery_getLucenePrefixTerm(t_SrndPrefixQuery *self, PyObject *arg)
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::index::Term result((jobject) NULL);

              if (!parseArg(arg, "s", &a0))
              {
                OBJ_CALL(result = self->object.getLucenePrefixTerm(a0));
                return ::org::apache::lucene::index::t_Term::wrap_Object(result);
              }

              PyErr_SetArgsError((PyObject *) self, "getLucenePrefixTerm", arg);
              return NULL;
            }

            static PyObject *t_SrndPrefixQuery_getPrefix(t_SrndPrefixQuery *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.getPrefix());
              return j2p(result);
            }

            static PyObject *t_SrndPrefixQuery_getSuffixOperator(t_SrndPrefixQuery *self)
            {
              jchar result;
              OBJ_CALL(result = self->object.getSuffixOperator());
              return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
            }

            static PyObject *t_SrndPrefixQuery_toStringUnquoted(t_SrndPrefixQuery *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.toStringUnquoted());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(SrndPrefixQuery), (PyObject *) self, "toStringUnquoted", args, 2);
            }

            static PyObject *t_SrndPrefixQuery_visitMatchingTerms(t_SrndPrefixQuery *self, PyObject *args)
            {
              ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              ::org::apache::lucene::queryparser::surround::query::SimpleTerm$MatchingTermVisitor a2((jobject) NULL);

              if (!parseArgs(args, "ksk", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::queryparser::surround::query::SimpleTerm$MatchingTermVisitor::initializeClass, &a0, &a1, &a2))
              {
                OBJ_CALL(self->object.visitMatchingTerms(a0, a1, a2));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(SrndPrefixQuery), (PyObject *) self, "visitMatchingTerms", args, 2);
            }

            static PyObject *t_SrndPrefixQuery_get__prefix(t_SrndPrefixQuery *self, void *data)
            {
              ::java::lang::String value((jobject) NULL);
              OBJ_CALL(value = self->object.getPrefix());
              return j2p(value);
            }

            static PyObject *t_SrndPrefixQuery_get__suffixOperator(t_SrndPrefixQuery *self, void *data)
            {
              jchar value;
              OBJ_CALL(value = self->object.getSuffixOperator());
              return PyUnicode_FromUnicode((Py_UNICODE *) &value, 1);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/NumericRangeFilter.h"
#include "java/lang/Integer.h"
#include "java/lang/Double.h"
#include "java/lang/Class.h"
#include "java/lang/Long.h"
#include "java/lang/Float.h"
#include "java/lang/Number.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *NumericRangeFilter::class$ = NULL;
        jmethodID *NumericRangeFilter::mids$ = NULL;
        bool NumericRangeFilter::live$ = false;

        jclass NumericRangeFilter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/NumericRangeFilter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_getMax_ee47e3e1] = env->getMethodID(cls, "getMax", "()Ljava/lang/Number;");
            mids$[mid_getMin_ee47e3e1] = env->getMethodID(cls, "getMin", "()Ljava/lang/Number;");
            mids$[mid_getPrecisionStep_54c6a179] = env->getMethodID(cls, "getPrecisionStep", "()I");
            mids$[mid_includesMax_54c6a16a] = env->getMethodID(cls, "includesMax", "()Z");
            mids$[mid_includesMin_54c6a16a] = env->getMethodID(cls, "includesMin", "()Z");
            mids$[mid_newDoubleRange_dba8ce37] = env->getStaticMethodID(cls, "newDoubleRange", "(Ljava/lang/String;Ljava/lang/Double;Ljava/lang/Double;ZZ)Lorg/apache/lucene/search/NumericRangeFilter;");
            mids$[mid_newDoubleRange_086f57c9] = env->getStaticMethodID(cls, "newDoubleRange", "(Ljava/lang/String;ILjava/lang/Double;Ljava/lang/Double;ZZ)Lorg/apache/lucene/search/NumericRangeFilter;");
            mids$[mid_newFloatRange_a2bb5c27] = env->getStaticMethodID(cls, "newFloatRange", "(Ljava/lang/String;Ljava/lang/Float;Ljava/lang/Float;ZZ)Lorg/apache/lucene/search/NumericRangeFilter;");
            mids$[mid_newFloatRange_ba518bd5] = env->getStaticMethodID(cls, "newFloatRange", "(Ljava/lang/String;ILjava/lang/Float;Ljava/lang/Float;ZZ)Lorg/apache/lucene/search/NumericRangeFilter;");
            mids$[mid_newIntRange_0551a8cf] = env->getStaticMethodID(cls, "newIntRange", "(Ljava/lang/String;Ljava/lang/Integer;Ljava/lang/Integer;ZZ)Lorg/apache/lucene/search/NumericRangeFilter;");
            mids$[mid_newIntRange_eeb70fc1] = env->getStaticMethodID(cls, "newIntRange", "(Ljava/lang/String;ILjava/lang/Integer;Ljava/lang/Integer;ZZ)Lorg/apache/lucene/search/NumericRangeFilter;");
            mids$[mid_newLongRange_557bc96b] = env->getStaticMethodID(cls, "newLongRange", "(Ljava/lang/String;Ljava/lang/Long;Ljava/lang/Long;ZZ)Lorg/apache/lucene/search/NumericRangeFilter;");
            mids$[mid_newLongRange_b95b6e4d] = env->getStaticMethodID(cls, "newLongRange", "(Ljava/lang/String;ILjava/lang/Long;Ljava/lang/Long;ZZ)Lorg/apache/lucene/search/NumericRangeFilter;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::java::lang::Number NumericRangeFilter::getMax() const
        {
          return ::java::lang::Number(env->callObjectMethod(this$, mids$[mid_getMax_ee47e3e1]));
        }

        ::java::lang::Number NumericRangeFilter::getMin() const
        {
          return ::java::lang::Number(env->callObjectMethod(this$, mids$[mid_getMin_ee47e3e1]));
        }

        jint NumericRangeFilter::getPrecisionStep() const
        {
          return env->callIntMethod(this$, mids$[mid_getPrecisionStep_54c6a179]);
        }

        jboolean NumericRangeFilter::includesMax() const
        {
          return env->callBooleanMethod(this$, mids$[mid_includesMax_54c6a16a]);
        }

        jboolean NumericRangeFilter::includesMin() const
        {
          return env->callBooleanMethod(this$, mids$[mid_includesMin_54c6a16a]);
        }

        NumericRangeFilter NumericRangeFilter::newDoubleRange(const ::java::lang::String & a0, const ::java::lang::Double & a1, const ::java::lang::Double & a2, jboolean a3, jboolean a4)
        {
          jclass cls = env->getClass(initializeClass);
          return NumericRangeFilter(env->callStaticObjectMethod(cls, mids$[mid_newDoubleRange_dba8ce37], a0.this$, a1.this$, a2.this$, a3, a4));
        }

        NumericRangeFilter NumericRangeFilter::newDoubleRange(const ::java::lang::String & a0, jint a1, const ::java::lang::Double & a2, const ::java::lang::Double & a3, jboolean a4, jboolean a5)
        {
          jclass cls = env->getClass(initializeClass);
          return NumericRangeFilter(env->callStaticObjectMethod(cls, mids$[mid_newDoubleRange_086f57c9], a0.this$, a1, a2.this$, a3.this$, a4, a5));
        }

        NumericRangeFilter NumericRangeFilter::newFloatRange(const ::java::lang::String & a0, const ::java::lang::Float & a1, const ::java::lang::Float & a2, jboolean a3, jboolean a4)
        {
          jclass cls = env->getClass(initializeClass);
          return NumericRangeFilter(env->callStaticObjectMethod(cls, mids$[mid_newFloatRange_a2bb5c27], a0.this$, a1.this$, a2.this$, a3, a4));
        }

        NumericRangeFilter NumericRangeFilter::newFloatRange(const ::java::lang::String & a0, jint a1, const ::java::lang::Float & a2, const ::java::lang::Float & a3, jboolean a4, jboolean a5)
        {
          jclass cls = env->getClass(initializeClass);
          return NumericRangeFilter(env->callStaticObjectMethod(cls, mids$[mid_newFloatRange_ba518bd5], a0.this$, a1, a2.this$, a3.this$, a4, a5));
        }

        NumericRangeFilter NumericRangeFilter::newIntRange(const ::java::lang::String & a0, const ::java::lang::Integer & a1, const ::java::lang::Integer & a2, jboolean a3, jboolean a4)
        {
          jclass cls = env->getClass(initializeClass);
          return NumericRangeFilter(env->callStaticObjectMethod(cls, mids$[mid_newIntRange_0551a8cf], a0.this$, a1.this$, a2.this$, a3, a4));
        }

        NumericRangeFilter NumericRangeFilter::newIntRange(const ::java::lang::String & a0, jint a1, const ::java::lang::Integer & a2, const ::java::lang::Integer & a3, jboolean a4, jboolean a5)
        {
          jclass cls = env->getClass(initializeClass);
          return NumericRangeFilter(env->callStaticObjectMethod(cls, mids$[mid_newIntRange_eeb70fc1], a0.this$, a1, a2.this$, a3.this$, a4, a5));
        }

        NumericRangeFilter NumericRangeFilter::newLongRange(const ::java::lang::String & a0, const ::java::lang::Long & a1, const ::java::lang::Long & a2, jboolean a3, jboolean a4)
        {
          jclass cls = env->getClass(initializeClass);
          return NumericRangeFilter(env->callStaticObjectMethod(cls, mids$[mid_newLongRange_557bc96b], a0.this$, a1.this$, a2.this$, a3, a4));
        }

        NumericRangeFilter NumericRangeFilter::newLongRange(const ::java::lang::String & a0, jint a1, const ::java::lang::Long & a2, const ::java::lang::Long & a3, jboolean a4, jboolean a5)
        {
          jclass cls = env->getClass(initializeClass);
          return NumericRangeFilter(env->callStaticObjectMethod(cls, mids$[mid_newLongRange_b95b6e4d], a0.this$, a1, a2.this$, a3.this$, a4, a5));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_NumericRangeFilter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NumericRangeFilter_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NumericRangeFilter_of_(t_NumericRangeFilter *self, PyObject *args);
        static PyObject *t_NumericRangeFilter_getMax(t_NumericRangeFilter *self);
        static PyObject *t_NumericRangeFilter_getMin(t_NumericRangeFilter *self);
        static PyObject *t_NumericRangeFilter_getPrecisionStep(t_NumericRangeFilter *self);
        static PyObject *t_NumericRangeFilter_includesMax(t_NumericRangeFilter *self);
        static PyObject *t_NumericRangeFilter_includesMin(t_NumericRangeFilter *self);
        static PyObject *t_NumericRangeFilter_newDoubleRange(PyTypeObject *type, PyObject *args);
        static PyObject *t_NumericRangeFilter_newFloatRange(PyTypeObject *type, PyObject *args);
        static PyObject *t_NumericRangeFilter_newIntRange(PyTypeObject *type, PyObject *args);
        static PyObject *t_NumericRangeFilter_newLongRange(PyTypeObject *type, PyObject *args);
        static PyObject *t_NumericRangeFilter_get__max(t_NumericRangeFilter *self, void *data);
        static PyObject *t_NumericRangeFilter_get__min(t_NumericRangeFilter *self, void *data);
        static PyObject *t_NumericRangeFilter_get__precisionStep(t_NumericRangeFilter *self, void *data);
        static PyObject *t_NumericRangeFilter_get__parameters_(t_NumericRangeFilter *self, void *data);
        static PyGetSetDef t_NumericRangeFilter__fields_[] = {
          DECLARE_GET_FIELD(t_NumericRangeFilter, max),
          DECLARE_GET_FIELD(t_NumericRangeFilter, min),
          DECLARE_GET_FIELD(t_NumericRangeFilter, precisionStep),
          DECLARE_GET_FIELD(t_NumericRangeFilter, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_NumericRangeFilter__methods_[] = {
          DECLARE_METHOD(t_NumericRangeFilter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NumericRangeFilter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NumericRangeFilter, of_, METH_VARARGS),
          DECLARE_METHOD(t_NumericRangeFilter, getMax, METH_NOARGS),
          DECLARE_METHOD(t_NumericRangeFilter, getMin, METH_NOARGS),
          DECLARE_METHOD(t_NumericRangeFilter, getPrecisionStep, METH_NOARGS),
          DECLARE_METHOD(t_NumericRangeFilter, includesMax, METH_NOARGS),
          DECLARE_METHOD(t_NumericRangeFilter, includesMin, METH_NOARGS),
          DECLARE_METHOD(t_NumericRangeFilter, newDoubleRange, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_NumericRangeFilter, newFloatRange, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_NumericRangeFilter, newIntRange, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_NumericRangeFilter, newLongRange, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(NumericRangeFilter, t_NumericRangeFilter, ::org::apache::lucene::search::MultiTermQueryWrapperFilter, NumericRangeFilter, abstract_init, 0, 0, t_NumericRangeFilter__fields_, 0, 0);
        PyObject *t_NumericRangeFilter::wrap_Object(const NumericRangeFilter& object, PyTypeObject *p0)
        {
          PyObject *obj = t_NumericRangeFilter::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_NumericRangeFilter *self = (t_NumericRangeFilter *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_NumericRangeFilter::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_NumericRangeFilter::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_NumericRangeFilter *self = (t_NumericRangeFilter *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_NumericRangeFilter::install(PyObject *module)
        {
          installType(&PY_TYPE(NumericRangeFilter), module, "NumericRangeFilter", 0);
        }

        void t_NumericRangeFilter::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(NumericRangeFilter).tp_dict, "class_", make_descriptor(NumericRangeFilter::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(NumericRangeFilter).tp_dict, "wrapfn_", make_descriptor(t_NumericRangeFilter::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(NumericRangeFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_NumericRangeFilter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, NumericRangeFilter::initializeClass, 1)))
            return NULL;
          return t_NumericRangeFilter::wrap_Object(NumericRangeFilter(((t_NumericRangeFilter *) arg)->object.this$));
        }
        static PyObject *t_NumericRangeFilter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, NumericRangeFilter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_NumericRangeFilter_of_(t_NumericRangeFilter *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_NumericRangeFilter_getMax(t_NumericRangeFilter *self)
        {
          ::java::lang::Number result((jobject) NULL);
          OBJ_CALL(result = self->object.getMax());
          return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Number::wrap_Object(result);
        }

        static PyObject *t_NumericRangeFilter_getMin(t_NumericRangeFilter *self)
        {
          ::java::lang::Number result((jobject) NULL);
          OBJ_CALL(result = self->object.getMin());
          return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Number::wrap_Object(result);
        }

        static PyObject *t_NumericRangeFilter_getPrecisionStep(t_NumericRangeFilter *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getPrecisionStep());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_NumericRangeFilter_includesMax(t_NumericRangeFilter *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.includesMax());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_NumericRangeFilter_includesMin(t_NumericRangeFilter *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.includesMin());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_NumericRangeFilter_newDoubleRange(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 5:
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::Double a1((jobject) NULL);
              ::java::lang::Double a2((jobject) NULL);
              jboolean a3;
              jboolean a4;
              NumericRangeFilter result((jobject) NULL);

              if (!parseArgs(args, "sOOZZ", &::java::lang::PY_TYPE(Double), &::java::lang::PY_TYPE(Double), &a0, &a1, &a2, &a3, &a4))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::NumericRangeFilter::newDoubleRange(a0, a1, a2, a3, a4));
                return t_NumericRangeFilter::wrap_Object(result, &::java::lang::PY_TYPE(Double));
              }
            }
            break;
           case 6:
            {
              ::java::lang::String a0((jobject) NULL);
              jint a1;
              ::java::lang::Double a2((jobject) NULL);
              ::java::lang::Double a3((jobject) NULL);
              jboolean a4;
              jboolean a5;
              NumericRangeFilter result((jobject) NULL);

              if (!parseArgs(args, "sIOOZZ", &::java::lang::PY_TYPE(Double), &::java::lang::PY_TYPE(Double), &a0, &a1, &a2, &a3, &a4, &a5))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::NumericRangeFilter::newDoubleRange(a0, a1, a2, a3, a4, a5));
                return t_NumericRangeFilter::wrap_Object(result, &::java::lang::PY_TYPE(Double));
              }
            }
          }

          PyErr_SetArgsError(type, "newDoubleRange", args);
          return NULL;
        }

        static PyObject *t_NumericRangeFilter_newFloatRange(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 5:
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::Float a1((jobject) NULL);
              ::java::lang::Float a2((jobject) NULL);
              jboolean a3;
              jboolean a4;
              NumericRangeFilter result((jobject) NULL);

              if (!parseArgs(args, "sOOZZ", &::java::lang::PY_TYPE(Float), &::java::lang::PY_TYPE(Float), &a0, &a1, &a2, &a3, &a4))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::NumericRangeFilter::newFloatRange(a0, a1, a2, a3, a4));
                return t_NumericRangeFilter::wrap_Object(result, &::java::lang::PY_TYPE(Float));
              }
            }
            break;
           case 6:
            {
              ::java::lang::String a0((jobject) NULL);
              jint a1;
              ::java::lang::Float a2((jobject) NULL);
              ::java::lang::Float a3((jobject) NULL);
              jboolean a4;
              jboolean a5;
              NumericRangeFilter result((jobject) NULL);

              if (!parseArgs(args, "sIOOZZ", &::java::lang::PY_TYPE(Float), &::java::lang::PY_TYPE(Float), &a0, &a1, &a2, &a3, &a4, &a5))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::NumericRangeFilter::newFloatRange(a0, a1, a2, a3, a4, a5));
                return t_NumericRangeFilter::wrap_Object(result, &::java::lang::PY_TYPE(Float));
              }
            }
          }

          PyErr_SetArgsError(type, "newFloatRange", args);
          return NULL;
        }

        static PyObject *t_NumericRangeFilter_newIntRange(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 5:
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::Integer a1((jobject) NULL);
              ::java::lang::Integer a2((jobject) NULL);
              jboolean a3;
              jboolean a4;
              NumericRangeFilter result((jobject) NULL);

              if (!parseArgs(args, "sOOZZ", &::java::lang::PY_TYPE(Integer), &::java::lang::PY_TYPE(Integer), &a0, &a1, &a2, &a3, &a4))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::NumericRangeFilter::newIntRange(a0, a1, a2, a3, a4));
                return t_NumericRangeFilter::wrap_Object(result, &::java::lang::PY_TYPE(Integer));
              }
            }
            break;
           case 6:
            {
              ::java::lang::String a0((jobject) NULL);
              jint a1;
              ::java::lang::Integer a2((jobject) NULL);
              ::java::lang::Integer a3((jobject) NULL);
              jboolean a4;
              jboolean a5;
              NumericRangeFilter result((jobject) NULL);

              if (!parseArgs(args, "sIOOZZ", &::java::lang::PY_TYPE(Integer), &::java::lang::PY_TYPE(Integer), &a0, &a1, &a2, &a3, &a4, &a5))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::NumericRangeFilter::newIntRange(a0, a1, a2, a3, a4, a5));
                return t_NumericRangeFilter::wrap_Object(result, &::java::lang::PY_TYPE(Integer));
              }
            }
          }

          PyErr_SetArgsError(type, "newIntRange", args);
          return NULL;
        }

        static PyObject *t_NumericRangeFilter_newLongRange(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 5:
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::Long a1((jobject) NULL);
              ::java::lang::Long a2((jobject) NULL);
              jboolean a3;
              jboolean a4;
              NumericRangeFilter result((jobject) NULL);

              if (!parseArgs(args, "sOOZZ", &::java::lang::PY_TYPE(Long), &::java::lang::PY_TYPE(Long), &a0, &a1, &a2, &a3, &a4))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::NumericRangeFilter::newLongRange(a0, a1, a2, a3, a4));
                return t_NumericRangeFilter::wrap_Object(result, &::java::lang::PY_TYPE(Long));
              }
            }
            break;
           case 6:
            {
              ::java::lang::String a0((jobject) NULL);
              jint a1;
              ::java::lang::Long a2((jobject) NULL);
              ::java::lang::Long a3((jobject) NULL);
              jboolean a4;
              jboolean a5;
              NumericRangeFilter result((jobject) NULL);

              if (!parseArgs(args, "sIOOZZ", &::java::lang::PY_TYPE(Long), &::java::lang::PY_TYPE(Long), &a0, &a1, &a2, &a3, &a4, &a5))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::NumericRangeFilter::newLongRange(a0, a1, a2, a3, a4, a5));
                return t_NumericRangeFilter::wrap_Object(result, &::java::lang::PY_TYPE(Long));
              }
            }
          }

          PyErr_SetArgsError(type, "newLongRange", args);
          return NULL;
        }
        static PyObject *t_NumericRangeFilter_get__parameters_(t_NumericRangeFilter *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static PyObject *t_NumericRangeFilter_get__max(t_NumericRangeFilter *self, void *data)
        {
          ::java::lang::Number value((jobject) NULL);
          OBJ_CALL(value = self->object.getMax());
          return ::java::lang::t_Number::wrap_Object(value);
        }

        static PyObject *t_NumericRangeFilter_get__min(t_NumericRangeFilter *self, void *data)
        {
          ::java::lang::Number value((jobject) NULL);
          OBJ_CALL(value = self->object.getMin());
          return ::java::lang::t_Number::wrap_Object(value);
        }

        static PyObject *t_NumericRangeFilter_get__precisionStep(t_NumericRangeFilter *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getPrecisionStep());
          return PyInt_FromLong((long) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/hi/HindiStemmer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace hi {

          ::java::lang::Class *HindiStemmer::class$ = NULL;
          jmethodID *HindiStemmer::mids$ = NULL;
          bool HindiStemmer::live$ = false;

          jclass HindiStemmer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/hi/HindiStemmer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_stem_ec6430eb] = env->getMethodID(cls, "stem", "([CI)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          HindiStemmer::HindiStemmer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint HindiStemmer::stem(const JArray< jchar > & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_stem_ec6430eb], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace hi {
          static PyObject *t_HindiStemmer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_HindiStemmer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_HindiStemmer_init_(t_HindiStemmer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_HindiStemmer_stem(t_HindiStemmer *self, PyObject *args);

          static PyMethodDef t_HindiStemmer__methods_[] = {
            DECLARE_METHOD(t_HindiStemmer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HindiStemmer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HindiStemmer, stem, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(HindiStemmer, t_HindiStemmer, ::java::lang::Object, HindiStemmer, t_HindiStemmer_init_, 0, 0, 0, 0, 0);

          void t_HindiStemmer::install(PyObject *module)
          {
            installType(&PY_TYPE(HindiStemmer), module, "HindiStemmer", 0);
          }

          void t_HindiStemmer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(HindiStemmer).tp_dict, "class_", make_descriptor(HindiStemmer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(HindiStemmer).tp_dict, "wrapfn_", make_descriptor(t_HindiStemmer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(HindiStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_HindiStemmer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, HindiStemmer::initializeClass, 1)))
              return NULL;
            return t_HindiStemmer::wrap_Object(HindiStemmer(((t_HindiStemmer *) arg)->object.this$));
          }
          static PyObject *t_HindiStemmer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, HindiStemmer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_HindiStemmer_init_(t_HindiStemmer *self, PyObject *args, PyObject *kwds)
          {
            HindiStemmer object((jobject) NULL);

            INT_CALL(object = HindiStemmer());
            self->object = object;

            return 0;
          }

          static PyObject *t_HindiStemmer_stem(t_HindiStemmer *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(result = self->object.stem(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "stem", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "java/util/Set.h"
#include "org/apache/lucene/store/DataInput.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *DataOutput::class$ = NULL;
        jmethodID *DataOutput::mids$ = NULL;
        bool DataOutput::live$ = false;

        jclass DataOutput::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/DataOutput");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_copyBytes_394617c2] = env->getMethodID(cls, "copyBytes", "(Lorg/apache/lucene/store/DataInput;J)V");
            mids$[mid_writeByte_b2271687] = env->getMethodID(cls, "writeByte", "(B)V");
            mids$[mid_writeBytes_b8354c43] = env->getMethodID(cls, "writeBytes", "([BI)V");
            mids$[mid_writeBytes_86f4435f] = env->getMethodID(cls, "writeBytes", "([BII)V");
            mids$[mid_writeInt_39c7bd3c] = env->getMethodID(cls, "writeInt", "(I)V");
            mids$[mid_writeLong_0ee6df2f] = env->getMethodID(cls, "writeLong", "(J)V");
            mids$[mid_writeShort_3bc40c6a] = env->getMethodID(cls, "writeShort", "(S)V");
            mids$[mid_writeString_5fdc3f48] = env->getMethodID(cls, "writeString", "(Ljava/lang/String;)V");
            mids$[mid_writeStringSet_fb4f2b26] = env->getMethodID(cls, "writeStringSet", "(Ljava/util/Set;)V");
            mids$[mid_writeStringStringMap_4c9e2b1c] = env->getMethodID(cls, "writeStringStringMap", "(Ljava/util/Map;)V");
            mids$[mid_writeVInt_39c7bd3c] = env->getMethodID(cls, "writeVInt", "(I)V");
            mids$[mid_writeVLong_0ee6df2f] = env->getMethodID(cls, "writeVLong", "(J)V");
            mids$[mid_writeZInt_39c7bd3c] = env->getMethodID(cls, "writeZInt", "(I)V");
            mids$[mid_writeZLong_0ee6df2f] = env->getMethodID(cls, "writeZLong", "(J)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        DataOutput::DataOutput() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void DataOutput::copyBytes(const ::org::apache::lucene::store::DataInput & a0, jlong a1) const
        {
          env->callVoidMethod(this$, mids$[mid_copyBytes_394617c2], a0.this$, a1);
        }

        void DataOutput::writeByte(jbyte a0) const
        {
          env->callVoidMethod(this$, mids$[mid_writeByte_b2271687], a0);
        }

        void DataOutput::writeBytes(const JArray< jbyte > & a0, jint a1) const
        {
          env->callVoidMethod(this$, mids$[mid_writeBytes_b8354c43], a0.this$, a1);
        }

        void DataOutput::writeBytes(const JArray< jbyte > & a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_writeBytes_86f4435f], a0.this$, a1, a2);
        }

        void DataOutput::writeInt(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_writeInt_39c7bd3c], a0);
        }

        void DataOutput::writeLong(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_writeLong_0ee6df2f], a0);
        }

        void DataOutput::writeShort(jshort a0) const
        {
          env->callVoidMethod(this$, mids$[mid_writeShort_3bc40c6a], a0);
        }

        void DataOutput::writeString(const ::java::lang::String & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_writeString_5fdc3f48], a0.this$);
        }

        void DataOutput::writeStringSet(const ::java::util::Set & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_writeStringSet_fb4f2b26], a0.this$);
        }

        void DataOutput::writeStringStringMap(const ::java::util::Map & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_writeStringStringMap_4c9e2b1c], a0.this$);
        }

        void DataOutput::writeVInt(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_writeVInt_39c7bd3c], a0);
        }

        void DataOutput::writeVLong(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_writeVLong_0ee6df2f], a0);
        }

        void DataOutput::writeZInt(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_writeZInt_39c7bd3c], a0);
        }

        void DataOutput::writeZLong(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_writeZLong_0ee6df2f], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_DataOutput_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DataOutput_instance_(PyTypeObject *type, PyObject *arg);
        static int t_DataOutput_init_(t_DataOutput *self, PyObject *args, PyObject *kwds);
        static PyObject *t_DataOutput_copyBytes(t_DataOutput *self, PyObject *args);
        static PyObject *t_DataOutput_writeByte(t_DataOutput *self, PyObject *arg);
        static PyObject *t_DataOutput_writeBytes(t_DataOutput *self, PyObject *args);
        static PyObject *t_DataOutput_writeInt(t_DataOutput *self, PyObject *arg);
        static PyObject *t_DataOutput_writeLong(t_DataOutput *self, PyObject *arg);
        static PyObject *t_DataOutput_writeShort(t_DataOutput *self, PyObject *arg);
        static PyObject *t_DataOutput_writeString(t_DataOutput *self, PyObject *arg);
        static PyObject *t_DataOutput_writeStringSet(t_DataOutput *self, PyObject *arg);
        static PyObject *t_DataOutput_writeStringStringMap(t_DataOutput *self, PyObject *arg);
        static PyObject *t_DataOutput_writeVInt(t_DataOutput *self, PyObject *arg);
        static PyObject *t_DataOutput_writeVLong(t_DataOutput *self, PyObject *arg);
        static PyObject *t_DataOutput_writeZInt(t_DataOutput *self, PyObject *arg);
        static PyObject *t_DataOutput_writeZLong(t_DataOutput *self, PyObject *arg);

        static PyMethodDef t_DataOutput__methods_[] = {
          DECLARE_METHOD(t_DataOutput, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DataOutput, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DataOutput, copyBytes, METH_VARARGS),
          DECLARE_METHOD(t_DataOutput, writeByte, METH_O),
          DECLARE_METHOD(t_DataOutput, writeBytes, METH_VARARGS),
          DECLARE_METHOD(t_DataOutput, writeInt, METH_O),
          DECLARE_METHOD(t_DataOutput, writeLong, METH_O),
          DECLARE_METHOD(t_DataOutput, writeShort, METH_O),
          DECLARE_METHOD(t_DataOutput, writeString, METH_O),
          DECLARE_METHOD(t_DataOutput, writeStringSet, METH_O),
          DECLARE_METHOD(t_DataOutput, writeStringStringMap, METH_O),
          DECLARE_METHOD(t_DataOutput, writeVInt, METH_O),
          DECLARE_METHOD(t_DataOutput, writeVLong, METH_O),
          DECLARE_METHOD(t_DataOutput, writeZInt, METH_O),
          DECLARE_METHOD(t_DataOutput, writeZLong, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(DataOutput, t_DataOutput, ::java::lang::Object, DataOutput, t_DataOutput_init_, 0, 0, 0, 0, 0);

        void t_DataOutput::install(PyObject *module)
        {
          installType(&PY_TYPE(DataOutput), module, "DataOutput", 0);
        }

        void t_DataOutput::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(DataOutput).tp_dict, "class_", make_descriptor(DataOutput::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(DataOutput).tp_dict, "wrapfn_", make_descriptor(t_DataOutput::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(DataOutput).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_DataOutput_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, DataOutput::initializeClass, 1)))
            return NULL;
          return t_DataOutput::wrap_Object(DataOutput(((t_DataOutput *) arg)->object.this$));
        }
        static PyObject *t_DataOutput_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, DataOutput::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_DataOutput_init_(t_DataOutput *self, PyObject *args, PyObject *kwds)
        {
          DataOutput object((jobject) NULL);

          INT_CALL(object = DataOutput());
          self->object = object;

          return 0;
        }

        static PyObject *t_DataOutput_copyBytes(t_DataOutput *self, PyObject *args)
        {
          ::org::apache::lucene::store::DataInput a0((jobject) NULL);
          jlong a1;

          if (!parseArgs(args, "kJ", ::org::apache::lucene::store::DataInput::initializeClass, &a0, &a1))
          {
            OBJ_CALL(self->object.copyBytes(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "copyBytes", args);
          return NULL;
        }

        static PyObject *t_DataOutput_writeByte(t_DataOutput *self, PyObject *arg)
        {
          jbyte a0;

          if (!parseArg(arg, "B", &a0))
          {
            OBJ_CALL(self->object.writeByte(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "writeByte", arg);
          return NULL;
        }

        static PyObject *t_DataOutput_writeBytes(t_DataOutput *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              JArray< jbyte > a0((jobject) NULL);
              jint a1;

              if (!parseArgs(args, "[BI", &a0, &a1))
              {
                OBJ_CALL(self->object.writeBytes(a0, a1));
                Py_RETURN_NONE;
              }
            }
            break;
           case 3:
            {
              JArray< jbyte > a0((jobject) NULL);
              jint a1;
              jint a2;

              if (!parseArgs(args, "[BII", &a0, &a1, &a2))
              {
                OBJ_CALL(self->object.writeBytes(a0, a1, a2));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "writeBytes", args);
          return NULL;
        }

        static PyObject *t_DataOutput_writeInt(t_DataOutput *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.writeInt(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "writeInt", arg);
          return NULL;
        }

        static PyObject *t_DataOutput_writeLong(t_DataOutput *self, PyObject *arg)
        {
          jlong a0;

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(self->object.writeLong(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "writeLong", arg);
          return NULL;
        }

        static PyObject *t_DataOutput_writeShort(t_DataOutput *self, PyObject *arg)
        {
          jshort a0;

          if (!parseArg(arg, "S", &a0))
          {
            OBJ_CALL(self->object.writeShort(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "writeShort", arg);
          return NULL;
        }

        static PyObject *t_DataOutput_writeString(t_DataOutput *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(self->object.writeString(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "writeString", arg);
          return NULL;
        }

        static PyObject *t_DataOutput_writeStringSet(t_DataOutput *self, PyObject *arg)
        {
          ::java::util::Set a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArg(arg, "K", ::java::util::Set::initializeClass, &a0, &p0, ::java::util::t_Set::parameters_))
          {
            OBJ_CALL(self->object.writeStringSet(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "writeStringSet", arg);
          return NULL;
        }

        static PyObject *t_DataOutput_writeStringStringMap(t_DataOutput *self, PyObject *arg)
        {
          ::java::util::Map a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArg(arg, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
          {
            OBJ_CALL(self->object.writeStringStringMap(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "writeStringStringMap", arg);
          return NULL;
        }

        static PyObject *t_DataOutput_writeVInt(t_DataOutput *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.writeVInt(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "writeVInt", arg);
          return NULL;
        }

        static PyObject *t_DataOutput_writeVLong(t_DataOutput *self, PyObject *arg)
        {
          jlong a0;

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(self->object.writeVLong(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "writeVLong", arg);
          return NULL;
        }

        static PyObject *t_DataOutput_writeZInt(t_DataOutput *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.writeZInt(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "writeZInt", arg);
          return NULL;
        }

        static PyObject *t_DataOutput_writeZLong(t_DataOutput *self, PyObject *arg)
        {
          jlong a0;

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(self->object.writeZLong(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "writeZLong", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/SegmentInfos$FindSegmentsFile.h"
#include "org/apache/lucene/store/Directory.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/IndexCommit.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *SegmentInfos$FindSegmentsFile::class$ = NULL;
        jmethodID *SegmentInfos$FindSegmentsFile::mids$ = NULL;
        bool SegmentInfos$FindSegmentsFile::live$ = false;

        jclass SegmentInfos$FindSegmentsFile::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/SegmentInfos$FindSegmentsFile");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_2e261ef2] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;)V");
            mids$[mid_run_846352c3] = env->getMethodID(cls, "run", "()Ljava/lang/Object;");
            mids$[mid_run_38d34040] = env->getMethodID(cls, "run", "(Lorg/apache/lucene/index/IndexCommit;)Ljava/lang/Object;");
            mids$[mid_doBody_2a1c4d09] = env->getMethodID(cls, "doBody", "(Ljava/lang/String;)Ljava/lang/Object;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SegmentInfos$FindSegmentsFile::SegmentInfos$FindSegmentsFile(const ::org::apache::lucene::store::Directory & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_2e261ef2, a0.this$)) {}

        ::java::lang::Object SegmentInfos$FindSegmentsFile::run() const
        {
          return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_run_846352c3]));
        }

        ::java::lang::Object SegmentInfos$FindSegmentsFile::run(const ::org::apache::lucene::index::IndexCommit & a0) const
        {
          return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_run_38d34040], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_SegmentInfos$FindSegmentsFile_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SegmentInfos$FindSegmentsFile_instance_(PyTypeObject *type, PyObject *arg);
        static int t_SegmentInfos$FindSegmentsFile_init_(t_SegmentInfos$FindSegmentsFile *self, PyObject *args, PyObject *kwds);
        static PyObject *t_SegmentInfos$FindSegmentsFile_run(t_SegmentInfos$FindSegmentsFile *self, PyObject *args);

        static PyMethodDef t_SegmentInfos$FindSegmentsFile__methods_[] = {
          DECLARE_METHOD(t_SegmentInfos$FindSegmentsFile, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SegmentInfos$FindSegmentsFile, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SegmentInfos$FindSegmentsFile, run, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SegmentInfos$FindSegmentsFile, t_SegmentInfos$FindSegmentsFile, ::java::lang::Object, SegmentInfos$FindSegmentsFile, t_SegmentInfos$FindSegmentsFile_init_, 0, 0, 0, 0, 0);

        void t_SegmentInfos$FindSegmentsFile::install(PyObject *module)
        {
          installType(&PY_TYPE(SegmentInfos$FindSegmentsFile), module, "SegmentInfos$FindSegmentsFile", 0);
        }

        void t_SegmentInfos$FindSegmentsFile::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SegmentInfos$FindSegmentsFile).tp_dict, "class_", make_descriptor(SegmentInfos$FindSegmentsFile::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SegmentInfos$FindSegmentsFile).tp_dict, "wrapfn_", make_descriptor(t_SegmentInfos$FindSegmentsFile::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SegmentInfos$FindSegmentsFile).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SegmentInfos$FindSegmentsFile_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SegmentInfos$FindSegmentsFile::initializeClass, 1)))
            return NULL;
          return t_SegmentInfos$FindSegmentsFile::wrap_Object(SegmentInfos$FindSegmentsFile(((t_SegmentInfos$FindSegmentsFile *) arg)->object.this$));
        }
        static PyObject *t_SegmentInfos$FindSegmentsFile_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SegmentInfos$FindSegmentsFile::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_SegmentInfos$FindSegmentsFile_init_(t_SegmentInfos$FindSegmentsFile *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::store::Directory a0((jobject) NULL);
          SegmentInfos$FindSegmentsFile object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::store::Directory::initializeClass, &a0))
          {
            INT_CALL(object = SegmentInfos$FindSegmentsFile(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_SegmentInfos$FindSegmentsFile_run(t_SegmentInfos$FindSegmentsFile *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              ::java::lang::Object result((jobject) NULL);
              OBJ_CALL(result = self->object.run());
              return ::java::lang::t_Object::wrap_Object(result);
            }
            break;
           case 1:
            {
              ::org::apache::lucene::index::IndexCommit a0((jobject) NULL);
              ::java::lang::Object result((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexCommit::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.run(a0));
                return ::java::lang::t_Object::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "run", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/docvalues/IntDocValues.h"
#include "org/apache/lucene/queries/function/ValueSource.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queries/function/ValueSourceScorer.h"
#include "org/apache/lucene/queries/function/FunctionValues$ValueFiller.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace docvalues {

            ::java::lang::Class *IntDocValues::class$ = NULL;
            jmethodID *IntDocValues::mids$ = NULL;
            bool IntDocValues::live$ = false;

            jclass IntDocValues::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/docvalues/IntDocValues");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_ca78fe7a] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queries/function/ValueSource;)V");
                mids$[mid_byteVal_39c7bd28] = env->getMethodID(cls, "byteVal", "(I)B");
                mids$[mid_doubleVal_39c7bd2e] = env->getMethodID(cls, "doubleVal", "(I)D");
                mids$[mid_floatVal_39c7bd2c] = env->getMethodID(cls, "floatVal", "(I)F");
                mids$[mid_getRangeScorer_d201bc96] = env->getMethodID(cls, "getRangeScorer", "(Lorg/apache/lucene/index/IndexReader;Ljava/lang/String;Ljava/lang/String;ZZ)Lorg/apache/lucene/queries/function/ValueSourceScorer;");
                mids$[mid_getValueFiller_7731f0bd] = env->getMethodID(cls, "getValueFiller", "()Lorg/apache/lucene/queries/function/FunctionValues$ValueFiller;");
                mids$[mid_intVal_39c7bd23] = env->getMethodID(cls, "intVal", "(I)I");
                mids$[mid_longVal_39c7bd20] = env->getMethodID(cls, "longVal", "(I)J");
                mids$[mid_objectVal_29be6a55] = env->getMethodID(cls, "objectVal", "(I)Ljava/lang/Object;");
                mids$[mid_shortVal_39c7bd39] = env->getMethodID(cls, "shortVal", "(I)S");
                mids$[mid_strVal_141401b3] = env->getMethodID(cls, "strVal", "(I)Ljava/lang/String;");
                mids$[mid_toString_141401b3] = env->getMethodID(cls, "toString", "(I)Ljava/lang/String;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            IntDocValues::IntDocValues(const ::org::apache::lucene::queries::function::ValueSource & a0) : ::org::apache::lucene::queries::function::FunctionValues(env->newObject(initializeClass, &mids$, mid_init$_ca78fe7a, a0.this$)) {}

            jbyte IntDocValues::byteVal(jint a0) const
            {
              return env->callByteMethod(this$, mids$[mid_byteVal_39c7bd28], a0);
            }

            jdouble IntDocValues::doubleVal(jint a0) const
            {
              return env->callDoubleMethod(this$, mids$[mid_doubleVal_39c7bd2e], a0);
            }

            jfloat IntDocValues::floatVal(jint a0) const
            {
              return env->callFloatMethod(this$, mids$[mid_floatVal_39c7bd2c], a0);
            }

            ::org::apache::lucene::queries::function::ValueSourceScorer IntDocValues::getRangeScorer(const ::org::apache::lucene::index::IndexReader & a0, const ::java::lang::String & a1, const ::java::lang::String & a2, jboolean a3, jboolean a4) const
            {
              return ::org::apache::lucene::queries::function::ValueSourceScorer(env->callObjectMethod(this$, mids$[mid_getRangeScorer_d201bc96], a0.this$, a1.this$, a2.this$, a3, a4));
            }

            ::org::apache::lucene::queries::function::FunctionValues$ValueFiller IntDocValues::getValueFiller() const
            {
              return ::org::apache::lucene::queries::function::FunctionValues$ValueFiller(env->callObjectMethod(this$, mids$[mid_getValueFiller_7731f0bd]));
            }

            jint IntDocValues::intVal(jint a0) const
            {
              return env->callIntMethod(this$, mids$[mid_intVal_39c7bd23], a0);
            }

            jlong IntDocValues::longVal(jint a0) const
            {
              return env->callLongMethod(this$, mids$[mid_longVal_39c7bd20], a0);
            }

            ::java::lang::Object IntDocValues::objectVal(jint a0) const
            {
              return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_objectVal_29be6a55], a0));
            }

            jshort IntDocValues::shortVal(jint a0) const
            {
              return env->callShortMethod(this$, mids$[mid_shortVal_39c7bd39], a0);
            }

            ::java::lang::String IntDocValues::strVal(jint a0) const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_strVal_141401b3], a0));
            }

            ::java::lang::String IntDocValues::toString(jint a0) const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_141401b3], a0));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace docvalues {
            static PyObject *t_IntDocValues_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_IntDocValues_instance_(PyTypeObject *type, PyObject *arg);
            static int t_IntDocValues_init_(t_IntDocValues *self, PyObject *args, PyObject *kwds);
            static PyObject *t_IntDocValues_byteVal(t_IntDocValues *self, PyObject *args);
            static PyObject *t_IntDocValues_doubleVal(t_IntDocValues *self, PyObject *args);
            static PyObject *t_IntDocValues_floatVal(t_IntDocValues *self, PyObject *args);
            static PyObject *t_IntDocValues_getRangeScorer(t_IntDocValues *self, PyObject *args);
            static PyObject *t_IntDocValues_getValueFiller(t_IntDocValues *self, PyObject *args);
            static PyObject *t_IntDocValues_intVal(t_IntDocValues *self, PyObject *args);
            static PyObject *t_IntDocValues_longVal(t_IntDocValues *self, PyObject *args);
            static PyObject *t_IntDocValues_objectVal(t_IntDocValues *self, PyObject *args);
            static PyObject *t_IntDocValues_shortVal(t_IntDocValues *self, PyObject *args);
            static PyObject *t_IntDocValues_strVal(t_IntDocValues *self, PyObject *args);
            static PyObject *t_IntDocValues_toString(t_IntDocValues *self, PyObject *args);
            static PyObject *t_IntDocValues_get__valueFiller(t_IntDocValues *self, void *data);
            static PyGetSetDef t_IntDocValues__fields_[] = {
              DECLARE_GET_FIELD(t_IntDocValues, valueFiller),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_IntDocValues__methods_[] = {
              DECLARE_METHOD(t_IntDocValues, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_IntDocValues, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_IntDocValues, byteVal, METH_VARARGS),
              DECLARE_METHOD(t_IntDocValues, doubleVal, METH_VARARGS),
              DECLARE_METHOD(t_IntDocValues, floatVal, METH_VARARGS),
              DECLARE_METHOD(t_IntDocValues, getRangeScorer, METH_VARARGS),
              DECLARE_METHOD(t_IntDocValues, getValueFiller, METH_VARARGS),
              DECLARE_METHOD(t_IntDocValues, intVal, METH_VARARGS),
              DECLARE_METHOD(t_IntDocValues, longVal, METH_VARARGS),
              DECLARE_METHOD(t_IntDocValues, objectVal, METH_VARARGS),
              DECLARE_METHOD(t_IntDocValues, shortVal, METH_VARARGS),
              DECLARE_METHOD(t_IntDocValues, strVal, METH_VARARGS),
              DECLARE_METHOD(t_IntDocValues, toString, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(IntDocValues, t_IntDocValues, ::org::apache::lucene::queries::function::FunctionValues, IntDocValues, t_IntDocValues_init_, 0, 0, t_IntDocValues__fields_, 0, 0);

            void t_IntDocValues::install(PyObject *module)
            {
              installType(&PY_TYPE(IntDocValues), module, "IntDocValues", 0);
            }

            void t_IntDocValues::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(IntDocValues).tp_dict, "class_", make_descriptor(IntDocValues::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(IntDocValues).tp_dict, "wrapfn_", make_descriptor(t_IntDocValues::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(IntDocValues).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_IntDocValues_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, IntDocValues::initializeClass, 1)))
                return NULL;
              return t_IntDocValues::wrap_Object(IntDocValues(((t_IntDocValues *) arg)->object.this$));
            }
            static PyObject *t_IntDocValues_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, IntDocValues::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_IntDocValues_init_(t_IntDocValues *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::queries::function::ValueSource a0((jobject) NULL);
              IntDocValues object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::queries::function::ValueSource::initializeClass, &a0))
              {
                INT_CALL(object = IntDocValues(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_IntDocValues_byteVal(t_IntDocValues *self, PyObject *args)
            {
              jint a0;
              jbyte result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.byteVal(a0));
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(IntDocValues), (PyObject *) self, "byteVal", args, 2);
            }

            static PyObject *t_IntDocValues_doubleVal(t_IntDocValues *self, PyObject *args)
            {
              jint a0;
              jdouble result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.doubleVal(a0));
                return PyFloat_FromDouble((double) result);
              }

              return callSuper(&PY_TYPE(IntDocValues), (PyObject *) self, "doubleVal", args, 2);
            }

            static PyObject *t_IntDocValues_floatVal(t_IntDocValues *self, PyObject *args)
            {
              jint a0;
              jfloat result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.floatVal(a0));
                return PyFloat_FromDouble((double) result);
              }

              return callSuper(&PY_TYPE(IntDocValues), (PyObject *) self, "floatVal", args, 2);
            }

            static PyObject *t_IntDocValues_getRangeScorer(t_IntDocValues *self, PyObject *args)
            {
              ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              ::java::lang::String a2((jobject) NULL);
              jboolean a3;
              jboolean a4;
              ::org::apache::lucene::queries::function::ValueSourceScorer result((jobject) NULL);

              if (!parseArgs(args, "kssZZ", ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &a1, &a2, &a3, &a4))
              {
                OBJ_CALL(result = self->object.getRangeScorer(a0, a1, a2, a3, a4));
                return ::org::apache::lucene::queries::function::t_ValueSourceScorer::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(IntDocValues), (PyObject *) self, "getRangeScorer", args, 2);
            }

            static PyObject *t_IntDocValues_getValueFiller(t_IntDocValues *self, PyObject *args)
            {
              ::org::apache::lucene::queries::function::FunctionValues$ValueFiller result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getValueFiller());
                return ::org::apache::lucene::queries::function::t_FunctionValues$ValueFiller::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(IntDocValues), (PyObject *) self, "getValueFiller", args, 2);
            }

            static PyObject *t_IntDocValues_intVal(t_IntDocValues *self, PyObject *args)
            {
              jint a0;
              jint result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.intVal(a0));
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(IntDocValues), (PyObject *) self, "intVal", args, 2);
            }

            static PyObject *t_IntDocValues_longVal(t_IntDocValues *self, PyObject *args)
            {
              jint a0;
              jlong result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.longVal(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }

              return callSuper(&PY_TYPE(IntDocValues), (PyObject *) self, "longVal", args, 2);
            }

            static PyObject *t_IntDocValues_objectVal(t_IntDocValues *self, PyObject *args)
            {
              jint a0;
              ::java::lang::Object result((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.objectVal(a0));
                return ::java::lang::t_Object::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(IntDocValues), (PyObject *) self, "objectVal", args, 2);
            }

            static PyObject *t_IntDocValues_shortVal(t_IntDocValues *self, PyObject *args)
            {
              jint a0;
              jshort result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.shortVal(a0));
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(IntDocValues), (PyObject *) self, "shortVal", args, 2);
            }

            static PyObject *t_IntDocValues_strVal(t_IntDocValues *self, PyObject *args)
            {
              jint a0;
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.strVal(a0));
                return j2p(result);
              }

              return callSuper(&PY_TYPE(IntDocValues), (PyObject *) self, "strVal", args, 2);
            }

            static PyObject *t_IntDocValues_toString(t_IntDocValues *self, PyObject *args)
            {
              jint a0;
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.toString(a0));
                return j2p(result);
              }

              return callSuper(&PY_TYPE(IntDocValues), (PyObject *) self, "toString", args, 2);
            }

            static PyObject *t_IntDocValues_get__valueFiller(t_IntDocValues *self, void *data)
            {
              ::org::apache::lucene::queries::function::FunctionValues$ValueFiller value((jobject) NULL);
              OBJ_CALL(value = self->object.getValueFiller());
              return ::org::apache::lucene::queries::function::t_FunctionValues$ValueFiller::wrap_Object(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/LMSimilarity$LMStats.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *LMSimilarity$LMStats::class$ = NULL;
          jmethodID *LMSimilarity$LMStats::mids$ = NULL;
          bool LMSimilarity$LMStats::live$ = false;

          jclass LMSimilarity$LMStats::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/LMSimilarity$LMStats");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f0649ce1] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;F)V");
              mids$[mid_getCollectionProbability_54c6a176] = env->getMethodID(cls, "getCollectionProbability", "()F");
              mids$[mid_setCollectionProbability_06298cab] = env->getMethodID(cls, "setCollectionProbability", "(F)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          LMSimilarity$LMStats::LMSimilarity$LMStats(const ::java::lang::String & a0, jfloat a1) : ::org::apache::lucene::search::similarities::BasicStats(env->newObject(initializeClass, &mids$, mid_init$_f0649ce1, a0.this$, a1)) {}

          jfloat LMSimilarity$LMStats::getCollectionProbability() const
          {
            return env->callFloatMethod(this$, mids$[mid_getCollectionProbability_54c6a176]);
          }

          void LMSimilarity$LMStats::setCollectionProbability(jfloat a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setCollectionProbability_06298cab], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_LMSimilarity$LMStats_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LMSimilarity$LMStats_instance_(PyTypeObject *type, PyObject *arg);
          static int t_LMSimilarity$LMStats_init_(t_LMSimilarity$LMStats *self, PyObject *args, PyObject *kwds);
          static PyObject *t_LMSimilarity$LMStats_getCollectionProbability(t_LMSimilarity$LMStats *self);
          static PyObject *t_LMSimilarity$LMStats_setCollectionProbability(t_LMSimilarity$LMStats *self, PyObject *arg);
          static PyObject *t_LMSimilarity$LMStats_get__collectionProbability(t_LMSimilarity$LMStats *self, void *data);
          static int t_LMSimilarity$LMStats_set__collectionProbability(t_LMSimilarity$LMStats *self, PyObject *arg, void *data);
          static PyGetSetDef t_LMSimilarity$LMStats__fields_[] = {
            DECLARE_GETSET_FIELD(t_LMSimilarity$LMStats, collectionProbability),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_LMSimilarity$LMStats__methods_[] = {
            DECLARE_METHOD(t_LMSimilarity$LMStats, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LMSimilarity$LMStats, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LMSimilarity$LMStats, getCollectionProbability, METH_NOARGS),
            DECLARE_METHOD(t_LMSimilarity$LMStats, setCollectionProbability, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(LMSimilarity$LMStats, t_LMSimilarity$LMStats, ::org::apache::lucene::search::similarities::BasicStats, LMSimilarity$LMStats, t_LMSimilarity$LMStats_init_, 0, 0, t_LMSimilarity$LMStats__fields_, 0, 0);

          void t_LMSimilarity$LMStats::install(PyObject *module)
          {
            installType(&PY_TYPE(LMSimilarity$LMStats), module, "LMSimilarity$LMStats", 0);
          }

          void t_LMSimilarity$LMStats::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(LMSimilarity$LMStats).tp_dict, "class_", make_descriptor(LMSimilarity$LMStats::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(LMSimilarity$LMStats).tp_dict, "wrapfn_", make_descriptor(t_LMSimilarity$LMStats::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(LMSimilarity$LMStats).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_LMSimilarity$LMStats_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LMSimilarity$LMStats::initializeClass, 1)))
              return NULL;
            return t_LMSimilarity$LMStats::wrap_Object(LMSimilarity$LMStats(((t_LMSimilarity$LMStats *) arg)->object.this$));
          }
          static PyObject *t_LMSimilarity$LMStats_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LMSimilarity$LMStats::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_LMSimilarity$LMStats_init_(t_LMSimilarity$LMStats *self, PyObject *args, PyObject *kwds)
          {
            ::java::lang::String a0((jobject) NULL);
            jfloat a1;
            LMSimilarity$LMStats object((jobject) NULL);

            if (!parseArgs(args, "sF", &a0, &a1))
            {
              INT_CALL(object = LMSimilarity$LMStats(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_LMSimilarity$LMStats_getCollectionProbability(t_LMSimilarity$LMStats *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getCollectionProbability());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_LMSimilarity$LMStats_setCollectionProbability(t_LMSimilarity$LMStats *self, PyObject *arg)
          {
            jfloat a0;

            if (!parseArg(arg, "F", &a0))
            {
              OBJ_CALL(self->object.setCollectionProbability(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setCollectionProbability", arg);
            return NULL;
          }

          static PyObject *t_LMSimilarity$LMStats_get__collectionProbability(t_LMSimilarity$LMStats *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getCollectionProbability());
            return PyFloat_FromDouble((double) value);
          }
          static int t_LMSimilarity$LMStats_set__collectionProbability(t_LMSimilarity$LMStats *self, PyObject *arg, void *data)
          {
            {
              jfloat value;
              if (!parseArg(arg, "F", &value))
              {
                INT_CALL(self->object.setCollectionProbability(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "collectionProbability", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/expressions/js/JavascriptCompiler.h"
#include "java/lang/String.h"
#include "org/apache/lucene/expressions/Expression.h"
#include "java/util/Map.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {

          ::java::lang::Class *JavascriptCompiler::class$ = NULL;
          jmethodID *JavascriptCompiler::mids$ = NULL;
          bool JavascriptCompiler::live$ = false;

          jclass JavascriptCompiler::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/expressions/js/JavascriptCompiler");

              mids$ = new jmethodID[max_mid];
              mids$[mid_compile_3f39a74f] = env->getStaticMethodID(cls, "compile", "(Ljava/lang/String;)Lorg/apache/lucene/expressions/Expression;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::org::apache::lucene::expressions::Expression JavascriptCompiler::compile(const ::java::lang::String & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::expressions::Expression(env->callStaticObjectMethod(cls, mids$[mid_compile_3f39a74f], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {
          static PyObject *t_JavascriptCompiler_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_JavascriptCompiler_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_JavascriptCompiler_compile(PyTypeObject *type, PyObject *arg);

          static PyMethodDef t_JavascriptCompiler__methods_[] = {
            DECLARE_METHOD(t_JavascriptCompiler, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_JavascriptCompiler, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_JavascriptCompiler, compile, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(JavascriptCompiler, t_JavascriptCompiler, ::java::lang::Object, JavascriptCompiler, abstract_init, 0, 0, 0, 0, 0);

          void t_JavascriptCompiler::install(PyObject *module)
          {
            installType(&PY_TYPE(JavascriptCompiler), module, "JavascriptCompiler", 0);
          }

          void t_JavascriptCompiler::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(JavascriptCompiler).tp_dict, "class_", make_descriptor(JavascriptCompiler::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(JavascriptCompiler).tp_dict, "wrapfn_", make_descriptor(t_JavascriptCompiler::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(JavascriptCompiler).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_JavascriptCompiler_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, JavascriptCompiler::initializeClass, 1)))
              return NULL;
            return t_JavascriptCompiler::wrap_Object(JavascriptCompiler(((t_JavascriptCompiler *) arg)->object.this$));
          }
          static PyObject *t_JavascriptCompiler_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, JavascriptCompiler::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_JavascriptCompiler_compile(PyTypeObject *type, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::expressions::Expression result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::expressions::js::JavascriptCompiler::compile(a0));
              return ::org::apache::lucene::expressions::t_Expression::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "compile", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/lang/Byte.h"
#include "java/lang/Comparable.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/lang/NumberFormatException.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace java {
  namespace lang {

    ::java::lang::Class *Byte::class$ = NULL;
    jmethodID *Byte::mids$ = NULL;
    bool Byte::live$ = false;
    jint Byte::BYTES = (jint) 0;
    jbyte Byte::MAX_VALUE = (jbyte) 0;
    jbyte Byte::MIN_VALUE = (jbyte) 0;
    jint Byte::SIZE = (jint) 0;
    ::java::lang::Class *Byte::TYPE = NULL;

    jclass Byte::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/lang/Byte");

        mids$ = new jmethodID[max_mid];
        mids$[mid_init$_b2271687] = env->getMethodID(cls, "<init>", "(B)V");
        mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
        mids$[mid_byteValue_54c6a172] = env->getMethodID(cls, "byteValue", "()B");
        mids$[mid_compare_1648a7cb] = env->getStaticMethodID(cls, "compare", "(BB)I");
        mids$[mid_compareTo_c2b89a9a] = env->getMethodID(cls, "compareTo", "(Ljava/lang/Byte;)I");
        mids$[mid_decode_4a53f64a] = env->getStaticMethodID(cls, "decode", "(Ljava/lang/String;)Ljava/lang/Byte;");
        mids$[mid_doubleValue_54c6a174] = env->getMethodID(cls, "doubleValue", "()D");
        mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
        mids$[mid_floatValue_54c6a176] = env->getMethodID(cls, "floatValue", "()F");
        mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
        mids$[mid_hashCode_b2271698] = env->getStaticMethodID(cls, "hashCode", "(B)I");
        mids$[mid_intValue_54c6a179] = env->getMethodID(cls, "intValue", "()I");
        mids$[mid_longValue_54c6a17a] = env->getMethodID(cls, "longValue", "()J");
        mids$[mid_parseByte_5fdc3f5c] = env->getStaticMethodID(cls, "parseByte", "(Ljava/lang/String;)B");
        mids$[mid_parseByte_6e53ccd2] = env->getStaticMethodID(cls, "parseByte", "(Ljava/lang/String;I)B");
        mids$[mid_shortValue_54c6a163] = env->getMethodID(cls, "shortValue", "()S");
        mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
        mids$[mid_toString_fce80606] = env->getStaticMethodID(cls, "toString", "(B)Ljava/lang/String;");
        mids$[mid_toUnsignedInt_b2271698] = env->getStaticMethodID(cls, "toUnsignedInt", "(B)I");
        mids$[mid_toUnsignedLong_b227169b] = env->getStaticMethodID(cls, "toUnsignedLong", "(B)J");
        mids$[mid_valueOf_f1e1a5a7] = env->getStaticMethodID(cls, "valueOf", "(B)Ljava/lang/Byte;");
        mids$[mid_valueOf_4a53f64a] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Ljava/lang/Byte;");
        mids$[mid_valueOf_83e30bb0] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;I)Ljava/lang/Byte;");

        class$ = (::java::lang::Class *) new JObject(cls);
        cls = (jclass) class$->this$;

        BYTES = env->getStaticIntField(cls, "BYTES");
        MAX_VALUE = env->getStaticByteField(cls, "MAX_VALUE");
        MIN_VALUE = env->getStaticByteField(cls, "MIN_VALUE");
        SIZE = env->getStaticIntField(cls, "SIZE");
        TYPE = new ::java::lang::Class(env->getStaticObjectField(cls, "TYPE", "Ljava/lang/Class;"));
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    Byte::Byte(jbyte a0) : ::java::lang::Number(env->newObject(initializeClass, &mids$, mid_init$_b2271687, a0)) {}

    Byte::Byte(const ::java::lang::String & a0) : ::java::lang::Number(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

    jbyte Byte::byteValue() const
    {
      return env->callByteMethod(this$, mids$[mid_byteValue_54c6a172]);
    }

    jint Byte::compare(jbyte a0, jbyte a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_compare_1648a7cb], a0, a1);
    }

    jint Byte::compareTo(const Byte & a0) const
    {
      return env->callIntMethod(this$, mids$[mid_compareTo_c2b89a9a], a0.this$);
    }

    Byte Byte::decode(const ::java::lang::String & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return Byte(env->callStaticObjectMethod(cls, mids$[mid_decode_4a53f64a], a0.this$));
    }

    jdouble Byte::doubleValue() const
    {
      return env->callDoubleMethod(this$, mids$[mid_doubleValue_54c6a174]);
    }

    jboolean Byte::equals(const ::java::lang::Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
    }

    jfloat Byte::floatValue() const
    {
      return env->callFloatMethod(this$, mids$[mid_floatValue_54c6a176]);
    }

    jint Byte::hashCode() const
    {
      return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
    }

    jint Byte::hashCode(jbyte a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_hashCode_b2271698], a0);
    }

    jint Byte::intValue() const
    {
      return env->callIntMethod(this$, mids$[mid_intValue_54c6a179]);
    }

    jlong Byte::longValue() const
    {
      return env->callLongMethod(this$, mids$[mid_longValue_54c6a17a]);
    }

    jbyte Byte::parseByte(const ::java::lang::String & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticByteMethod(cls, mids$[mid_parseByte_5fdc3f5c], a0.this$);
    }

    jbyte Byte::parseByte(const ::java::lang::String & a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticByteMethod(cls, mids$[mid_parseByte_6e53ccd2], a0.this$, a1);
    }

    jshort Byte::shortValue() const
    {
      return env->callShortMethod(this$, mids$[mid_shortValue_54c6a163]);
    }

    ::java::lang::String Byte::toString() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
    }

    ::java::lang::String Byte::toString(jbyte a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toString_fce80606], a0));
    }

    jint Byte::toUnsignedInt(jbyte a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_toUnsignedInt_b2271698], a0);
    }

    jlong Byte::toUnsignedLong(jbyte a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticLongMethod(cls, mids$[mid_toUnsignedLong_b227169b], a0);
    }

    Byte Byte::valueOf(jbyte a0)
    {
      jclass cls = env->getClass(initializeClass);
      return Byte(env->callStaticObjectMethod(cls, mids$[mid_valueOf_f1e1a5a7], a0));
    }

    Byte Byte::valueOf(const ::java::lang::String & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return Byte(env->callStaticObjectMethod(cls, mids$[mid_valueOf_4a53f64a], a0.this$));
    }

    Byte Byte::valueOf(const ::java::lang::String & a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return Byte(env->callStaticObjectMethod(cls, mids$[mid_valueOf_83e30bb0], a0.this$, a1));
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace lang {
    static PyObject *t_Byte_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Byte_instance_(PyTypeObject *type, PyObject *arg);
    static int t_Byte_init_(t_Byte *self, PyObject *args, PyObject *kwds);
    static PyObject *t_Byte_byteValue(t_Byte *self, PyObject *args);
    static PyObject *t_Byte_compare(PyTypeObject *type, PyObject *args);
    static PyObject *t_Byte_compareTo(t_Byte *self, PyObject *arg);
    static PyObject *t_Byte_decode(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Byte_doubleValue(t_Byte *self, PyObject *args);
    static PyObject *t_Byte_equals(t_Byte *self, PyObject *args);
    static PyObject *t_Byte_floatValue(t_Byte *self, PyObject *args);
    static PyObject *t_Byte_hashCode(t_Byte *self, PyObject *args);
    static PyObject *t_Byte_hashCode_(PyTypeObject *type, PyObject *args);
    static PyObject *t_Byte_intValue(t_Byte *self, PyObject *args);
    static PyObject *t_Byte_longValue(t_Byte *self, PyObject *args);
    static PyObject *t_Byte_parseByte(PyTypeObject *type, PyObject *args);
    static PyObject *t_Byte_shortValue(t_Byte *self, PyObject *args);
    static PyObject *t_Byte_toString(t_Byte *self, PyObject *args);
    static PyObject *t_Byte_toString_(PyTypeObject *type, PyObject *args);
    static PyObject *t_Byte_toUnsignedInt(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Byte_toUnsignedLong(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Byte_valueOf(PyTypeObject *type, PyObject *args);

    static PyMethodDef t_Byte__methods_[] = {
      DECLARE_METHOD(t_Byte, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Byte, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Byte, byteValue, METH_VARARGS),
      DECLARE_METHOD(t_Byte, compare, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Byte, compareTo, METH_O),
      DECLARE_METHOD(t_Byte, decode, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Byte, doubleValue, METH_VARARGS),
      DECLARE_METHOD(t_Byte, equals, METH_VARARGS),
      DECLARE_METHOD(t_Byte, floatValue, METH_VARARGS),
      DECLARE_METHOD(t_Byte, hashCode, METH_VARARGS),
      DECLARE_METHOD(t_Byte, hashCode_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Byte, intValue, METH_VARARGS),
      DECLARE_METHOD(t_Byte, longValue, METH_VARARGS),
      DECLARE_METHOD(t_Byte, parseByte, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Byte, shortValue, METH_VARARGS),
      DECLARE_METHOD(t_Byte, toString, METH_VARARGS),
      DECLARE_METHOD(t_Byte, toString_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Byte, toUnsignedInt, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Byte, toUnsignedLong, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Byte, valueOf, METH_VARARGS | METH_CLASS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(Byte, t_Byte, ::java::lang::Number, Byte, t_Byte_init_, 0, 0, 0, 0, 0);

    void t_Byte::install(PyObject *module)
    {
      installType(&PY_TYPE(Byte), module, "Byte", 0);
    }

    void t_Byte::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(Byte).tp_dict, "class_", make_descriptor(Byte::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(Byte).tp_dict, "wrapfn_", make_descriptor(unboxByte));
      PyDict_SetItemString(PY_TYPE(Byte).tp_dict, "boxfn_", make_descriptor(boxByte));
      env->getClass(Byte::initializeClass);
      PyDict_SetItemString(PY_TYPE(Byte).tp_dict, "BYTES", make_descriptor(Byte::BYTES));
      PyDict_SetItemString(PY_TYPE(Byte).tp_dict, "MAX_VALUE", make_descriptor(Byte::MAX_VALUE));
      PyDict_SetItemString(PY_TYPE(Byte).tp_dict, "MIN_VALUE", make_descriptor(Byte::MIN_VALUE));
      PyDict_SetItemString(PY_TYPE(Byte).tp_dict, "SIZE", make_descriptor(Byte::SIZE));
      PyDict_SetItemString(PY_TYPE(Byte).tp_dict, "TYPE", make_descriptor(::java::lang::t_Class::wrap_Object(*Byte::TYPE)));
    }

    static PyObject *t_Byte_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, Byte::initializeClass, 1)))
        return NULL;
      return t_Byte::wrap_Object(Byte(((t_Byte *) arg)->object.this$));
    }
    static PyObject *t_Byte_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, Byte::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static int t_Byte_init_(t_Byte *self, PyObject *args, PyObject *kwds)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jbyte a0;
          Byte object((jobject) NULL);

          if (!parseArgs(args, "B", &a0))
          {
            INT_CALL(object = Byte(a0));
            self->object = object;
            break;
          }
        }
        {
          ::java::lang::String a0((jobject) NULL);
          Byte object((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            INT_CALL(object = Byte(a0));
            self->object = object;
            break;
          }
        }
       default:
        PyErr_SetArgsError((PyObject *) self, "__init__", args);
        return -1;
      }

      return 0;
    }

    static PyObject *t_Byte_byteValue(t_Byte *self, PyObject *args)
    {
      jbyte result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.byteValue());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(Byte), (PyObject *) self, "byteValue", args, 2);
    }

    static PyObject *t_Byte_compare(PyTypeObject *type, PyObject *args)
    {
      jbyte a0;
      jbyte a1;
      jint result;

      if (!parseArgs(args, "BB", &a0, &a1))
      {
        OBJ_CALL(result = ::java::lang::Byte::compare(a0, a1));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "compare", args);
      return NULL;
    }

    static PyObject *t_Byte_compareTo(t_Byte *self, PyObject *arg)
    {
      Byte a0((jobject) NULL);
      jint result;

      if (!parseArg(arg, "O", &::java::lang::PY_TYPE(Byte), &a0))
      {
        OBJ_CALL(result = self->object.compareTo(a0));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError((PyObject *) self, "compareTo", arg);
      return NULL;
    }

    static PyObject *t_Byte_decode(PyTypeObject *type, PyObject *arg)
    {
      ::java::lang::String a0((jobject) NULL);
      Byte result((jobject) NULL);

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(result = ::java::lang::Byte::decode(a0));
        return t_Byte::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "decode", arg);
      return NULL;
    }

    static PyObject *t_Byte_doubleValue(t_Byte *self, PyObject *args)
    {
      jdouble result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.doubleValue());
        return PyFloat_FromDouble((double) result);
      }

      return callSuper(&PY_TYPE(Byte), (PyObject *) self, "doubleValue", args, 2);
    }

    static PyObject *t_Byte_equals(t_Byte *self, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      jboolean result;

      if (!parseArgs(args, "o", &a0))
      {
        OBJ_CALL(result = self->object.equals(a0));
        Py_RETURN_BOOL(result);
      }

      return callSuper(&PY_TYPE(Byte), (PyObject *) self, "equals", args, 2);
    }

    static PyObject *t_Byte_floatValue(t_Byte *self, PyObject *args)
    {
      jfloat result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.floatValue());
        return PyFloat_FromDouble((double) result);
      }

      return callSuper(&PY_TYPE(Byte), (PyObject *) self, "floatValue", args, 2);
    }

    static PyObject *t_Byte_hashCode(t_Byte *self, PyObject *args)
    {
      jint result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.hashCode());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(Byte), (PyObject *) self, "hashCode", args, 2);
    }

    static PyObject *t_Byte_hashCode_(PyTypeObject *type, PyObject *args)
    {
      jbyte a0;
      jint result;

      if (!parseArgs(args, "B", &a0))
      {
        OBJ_CALL(result = ::java::lang::Byte::hashCode(a0));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "hashCode_", args);
      return NULL;
    }

    static PyObject *t_Byte_intValue(t_Byte *self, PyObject *args)
    {
      jint result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.intValue());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(Byte), (PyObject *) self, "intValue", args, 2);
    }

    static PyObject *t_Byte_longValue(t_Byte *self, PyObject *args)
    {
      jlong result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.longValue());
        return PyLong_FromLongLong((PY_LONG_LONG) result);
      }

      return callSuper(&PY_TYPE(Byte), (PyObject *) self, "longValue", args, 2);
    }

    static PyObject *t_Byte_parseByte(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          ::java::lang::String a0((jobject) NULL);
          jbyte result;

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::java::lang::Byte::parseByte(a0));
            return PyInt_FromLong((long) result);
          }
        }
        break;
       case 2:
        {
          ::java::lang::String a0((jobject) NULL);
          jint a1;
          jbyte result;

          if (!parseArgs(args, "sI", &a0, &a1))
          {
            OBJ_CALL(result = ::java::lang::Byte::parseByte(a0, a1));
            return PyInt_FromLong((long) result);
          }
        }
      }

      PyErr_SetArgsError(type, "parseByte", args);
      return NULL;
    }

    static PyObject *t_Byte_shortValue(t_Byte *self, PyObject *args)
    {
      jshort result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.shortValue());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(Byte), (PyObject *) self, "shortValue", args, 2);
    }

    static PyObject *t_Byte_toString(t_Byte *self, PyObject *args)
    {
      ::java::lang::String result((jobject) NULL);

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.toString());
        return j2p(result);
      }

      return callSuper(&PY_TYPE(Byte), (PyObject *) self, "toString", args, 2);
    }

    static PyObject *t_Byte_toString_(PyTypeObject *type, PyObject *args)
    {
      jbyte a0;
      ::java::lang::String result((jobject) NULL);

      if (!parseArgs(args, "B", &a0))
      {
        OBJ_CALL(result = ::java::lang::Byte::toString(a0));
        return j2p(result);
      }

      PyErr_SetArgsError(type, "toString_", args);
      return NULL;
    }

    static PyObject *t_Byte_toUnsignedInt(PyTypeObject *type, PyObject *arg)
    {
      jbyte a0;
      jint result;

      if (!parseArg(arg, "B", &a0))
      {
        OBJ_CALL(result = ::java::lang::Byte::toUnsignedInt(a0));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "toUnsignedInt", arg);
      return NULL;
    }

    static PyObject *t_Byte_toUnsignedLong(PyTypeObject *type, PyObject *arg)
    {
      jbyte a0;
      jlong result;

      if (!parseArg(arg, "B", &a0))
      {
        OBJ_CALL(result = ::java::lang::Byte::toUnsignedLong(a0));
        return PyLong_FromLongLong((PY_LONG_LONG) result);
      }

      PyErr_SetArgsError(type, "toUnsignedLong", arg);
      return NULL;
    }

    static PyObject *t_Byte_valueOf(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jbyte a0;
          Byte result((jobject) NULL);

          if (!parseArgs(args, "B", &a0))
          {
            OBJ_CALL(result = ::java::lang::Byte::valueOf(a0));
            return t_Byte::wrap_Object(result);
          }
        }
        {
          ::java::lang::String a0((jobject) NULL);
          Byte result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::java::lang::Byte::valueOf(a0));
            return t_Byte::wrap_Object(result);
          }
        }
        break;
       case 2:
        {
          ::java::lang::String a0((jobject) NULL);
          jint a1;
          Byte result((jobject) NULL);

          if (!parseArgs(args, "sI", &a0, &a1))
          {
            OBJ_CALL(result = ::java::lang::Byte::valueOf(a0, a1));
            return t_Byte::wrap_Object(result);
          }
        }
      }

      PyErr_SetArgsError(type, "valueOf", args);
      return NULL;
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/NormsFormat.h"
#include "org/apache/lucene/codecs/DocValuesProducer.h"
#include "org/apache/lucene/index/SegmentWriteState.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/codecs/DocValuesConsumer.h"
#include "org/apache/lucene/index/SegmentReadState.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {

        ::java::lang::Class *NormsFormat::class$ = NULL;
        jmethodID *NormsFormat::mids$ = NULL;
        bool NormsFormat::live$ = false;

        jclass NormsFormat::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/NormsFormat");

            mids$ = new jmethodID[max_mid];
            mids$[mid_normsConsumer_025deb44] = env->getMethodID(cls, "normsConsumer", "(Lorg/apache/lucene/index/SegmentWriteState;)Lorg/apache/lucene/codecs/DocValuesConsumer;");
            mids$[mid_normsProducer_9b0d4e4a] = env->getMethodID(cls, "normsProducer", "(Lorg/apache/lucene/index/SegmentReadState;)Lorg/apache/lucene/codecs/DocValuesProducer;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::codecs::DocValuesConsumer NormsFormat::normsConsumer(const ::org::apache::lucene::index::SegmentWriteState & a0) const
        {
          return ::org::apache::lucene::codecs::DocValuesConsumer(env->callObjectMethod(this$, mids$[mid_normsConsumer_025deb44], a0.this$));
        }

        ::org::apache::lucene::codecs::DocValuesProducer NormsFormat::normsProducer(const ::org::apache::lucene::index::SegmentReadState & a0) const
        {
          return ::org::apache::lucene::codecs::DocValuesProducer(env->callObjectMethod(this$, mids$[mid_normsProducer_9b0d4e4a], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        static PyObject *t_NormsFormat_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NormsFormat_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NormsFormat_normsConsumer(t_NormsFormat *self, PyObject *arg);
        static PyObject *t_NormsFormat_normsProducer(t_NormsFormat *self, PyObject *arg);

        static PyMethodDef t_NormsFormat__methods_[] = {
          DECLARE_METHOD(t_NormsFormat, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NormsFormat, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NormsFormat, normsConsumer, METH_O),
          DECLARE_METHOD(t_NormsFormat, normsProducer, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(NormsFormat, t_NormsFormat, ::java::lang::Object, NormsFormat, abstract_init, 0, 0, 0, 0, 0);

        void t_NormsFormat::install(PyObject *module)
        {
          installType(&PY_TYPE(NormsFormat), module, "NormsFormat", 0);
        }

        void t_NormsFormat::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(NormsFormat).tp_dict, "class_", make_descriptor(NormsFormat::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(NormsFormat).tp_dict, "wrapfn_", make_descriptor(t_NormsFormat::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(NormsFormat).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_NormsFormat_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, NormsFormat::initializeClass, 1)))
            return NULL;
          return t_NormsFormat::wrap_Object(NormsFormat(((t_NormsFormat *) arg)->object.this$));
        }
        static PyObject *t_NormsFormat_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, NormsFormat::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_NormsFormat_normsConsumer(t_NormsFormat *self, PyObject *arg)
        {
          ::org::apache::lucene::index::SegmentWriteState a0((jobject) NULL);
          ::org::apache::lucene::codecs::DocValuesConsumer result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::SegmentWriteState::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.normsConsumer(a0));
            return ::org::apache::lucene::codecs::t_DocValuesConsumer::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "normsConsumer", arg);
          return NULL;
        }

        static PyObject *t_NormsFormat_normsProducer(t_NormsFormat *self, PyObject *arg)
        {
          ::org::apache::lucene::index::SegmentReadState a0((jobject) NULL);
          ::org::apache::lucene::codecs::DocValuesProducer result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::SegmentReadState::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.normsProducer(a0));
            return ::org::apache::lucene::codecs::t_DocValuesProducer::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "normsProducer", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/bg/BulgarianStemFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace bg {

          ::java::lang::Class *BulgarianStemFilter::class$ = NULL;
          jmethodID *BulgarianStemFilter::mids$ = NULL;
          bool BulgarianStemFilter::live$ = false;

          jclass BulgarianStemFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/bg/BulgarianStemFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BulgarianStemFilter::BulgarianStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean BulgarianStemFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace bg {
          static PyObject *t_BulgarianStemFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BulgarianStemFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_BulgarianStemFilter_init_(t_BulgarianStemFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_BulgarianStemFilter_incrementToken(t_BulgarianStemFilter *self, PyObject *args);

          static PyMethodDef t_BulgarianStemFilter__methods_[] = {
            DECLARE_METHOD(t_BulgarianStemFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BulgarianStemFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BulgarianStemFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(BulgarianStemFilter, t_BulgarianStemFilter, ::org::apache::lucene::analysis::TokenFilter, BulgarianStemFilter, t_BulgarianStemFilter_init_, 0, 0, 0, 0, 0);

          void t_BulgarianStemFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(BulgarianStemFilter), module, "BulgarianStemFilter", 0);
          }

          void t_BulgarianStemFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(BulgarianStemFilter).tp_dict, "class_", make_descriptor(BulgarianStemFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(BulgarianStemFilter).tp_dict, "wrapfn_", make_descriptor(t_BulgarianStemFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(BulgarianStemFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_BulgarianStemFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BulgarianStemFilter::initializeClass, 1)))
              return NULL;
            return t_BulgarianStemFilter::wrap_Object(BulgarianStemFilter(((t_BulgarianStemFilter *) arg)->object.this$));
          }
          static PyObject *t_BulgarianStemFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BulgarianStemFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_BulgarianStemFilter_init_(t_BulgarianStemFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            BulgarianStemFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = BulgarianStemFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_BulgarianStemFilter_incrementToken(t_BulgarianStemFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(BulgarianStemFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/payloads/PayloadEncoder.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace payloads {

          ::java::lang::Class *PayloadEncoder::class$ = NULL;
          jmethodID *PayloadEncoder::mids$ = NULL;
          bool PayloadEncoder::live$ = false;

          jclass PayloadEncoder::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/payloads/PayloadEncoder");

              mids$ = new jmethodID[max_mid];
              mids$[mid_encode_09e96eed] = env->getMethodID(cls, "encode", "([C)Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_encode_871544e1] = env->getMethodID(cls, "encode", "([CII)Lorg/apache/lucene/util/BytesRef;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::org::apache::lucene::util::BytesRef PayloadEncoder::encode(const JArray< jchar > & a0) const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_encode_09e96eed], a0.this$));
          }

          ::org::apache::lucene::util::BytesRef PayloadEncoder::encode(const JArray< jchar > & a0, jint a1, jint a2) const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_encode_871544e1], a0.this$, a1, a2));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace payloads {
          static PyObject *t_PayloadEncoder_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PayloadEncoder_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PayloadEncoder_encode(t_PayloadEncoder *self, PyObject *args);

          static PyMethodDef t_PayloadEncoder__methods_[] = {
            DECLARE_METHOD(t_PayloadEncoder, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PayloadEncoder, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PayloadEncoder, encode, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PayloadEncoder, t_PayloadEncoder, ::java::lang::Object, PayloadEncoder, abstract_init, 0, 0, 0, 0, 0);

          void t_PayloadEncoder::install(PyObject *module)
          {
            installType(&PY_TYPE(PayloadEncoder), module, "PayloadEncoder", 0);
          }

          void t_PayloadEncoder::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PayloadEncoder).tp_dict, "class_", make_descriptor(PayloadEncoder::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PayloadEncoder).tp_dict, "wrapfn_", make_descriptor(t_PayloadEncoder::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PayloadEncoder).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PayloadEncoder_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PayloadEncoder::initializeClass, 1)))
              return NULL;
            return t_PayloadEncoder::wrap_Object(PayloadEncoder(((t_PayloadEncoder *) arg)->object.this$));
          }
          static PyObject *t_PayloadEncoder_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PayloadEncoder::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_PayloadEncoder_encode(t_PayloadEncoder *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                JArray< jchar > a0((jobject) NULL);
                ::org::apache::lucene::util::BytesRef result((jobject) NULL);

                if (!parseArgs(args, "[C", &a0))
                {
                  OBJ_CALL(result = self->object.encode(a0));
                  return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
                }
              }
              break;
             case 3:
              {
                JArray< jchar > a0((jobject) NULL);
                jint a1;
                jint a2;
                ::org::apache::lucene::util::BytesRef result((jobject) NULL);

                if (!parseArgs(args, "[CII", &a0, &a1, &a2))
                {
                  OBJ_CALL(result = self->object.encode(a0, a1, a2));
                  return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "encode", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/join/ToParentBlockJoinCollector.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/search/Sort.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "java/lang/Integer.h"
#include "org/apache/lucene/search/Scorer.h"
#include "org/apache/lucene/search/join/ToParentBlockJoinQuery.h"
#include "org/apache/lucene/search/grouping/TopGroups.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace join {

          ::java::lang::Class *ToParentBlockJoinCollector::class$ = NULL;
          jmethodID *ToParentBlockJoinCollector::mids$ = NULL;
          bool ToParentBlockJoinCollector::live$ = false;

          jclass ToParentBlockJoinCollector::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/join/ToParentBlockJoinCollector");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_e3369b2e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Sort;IZZ)V");
              mids$[mid_acceptsDocsOutOfOrder_54c6a16a] = env->getMethodID(cls, "acceptsDocsOutOfOrder", "()Z");
              mids$[mid_collect_39c7bd3c] = env->getMethodID(cls, "collect", "(I)V");
              mids$[mid_getMaxScore_54c6a176] = env->getMethodID(cls, "getMaxScore", "()F");
              mids$[mid_getTopGroups_aade7c1f] = env->getMethodID(cls, "getTopGroups", "(Lorg/apache/lucene/search/join/ToParentBlockJoinQuery;Lorg/apache/lucene/search/Sort;IIIZ)Lorg/apache/lucene/search/grouping/TopGroups;");
              mids$[mid_getTopGroupsWithAllChildDocs_2bbd93ad] = env->getMethodID(cls, "getTopGroupsWithAllChildDocs", "(Lorg/apache/lucene/search/join/ToParentBlockJoinQuery;Lorg/apache/lucene/search/Sort;IIZ)Lorg/apache/lucene/search/grouping/TopGroups;");
              mids$[mid_setNextReader_a6f59947] = env->getMethodID(cls, "setNextReader", "(Lorg/apache/lucene/index/AtomicReaderContext;)V");
              mids$[mid_setScorer_8be0880c] = env->getMethodID(cls, "setScorer", "(Lorg/apache/lucene/search/Scorer;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ToParentBlockJoinCollector::ToParentBlockJoinCollector(const ::org::apache::lucene::search::Sort & a0, jint a1, jboolean a2, jboolean a3) : ::org::apache::lucene::search::Collector(env->newObject(initializeClass, &mids$, mid_init$_e3369b2e, a0.this$, a1, a2, a3)) {}

          jboolean ToParentBlockJoinCollector::acceptsDocsOutOfOrder() const
          {
            return env->callBooleanMethod(this$, mids$[mid_acceptsDocsOutOfOrder_54c6a16a]);
          }

          void ToParentBlockJoinCollector::collect(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_collect_39c7bd3c], a0);
          }

          jfloat ToParentBlockJoinCollector::getMaxScore() const
          {
            return env->callFloatMethod(this$, mids$[mid_getMaxScore_54c6a176]);
          }

          ::org::apache::lucene::search::grouping::TopGroups ToParentBlockJoinCollector::getTopGroups(const ::org::apache::lucene::search::join::ToParentBlockJoinQuery & a0, const ::org::apache::lucene::search::Sort & a1, jint a2, jint a3, jint a4, jboolean a5) const
          {
            return ::org::apache::lucene::search::grouping::TopGroups(env->callObjectMethod(this$, mids$[mid_getTopGroups_aade7c1f], a0.this$, a1.this$, a2, a3, a4, a5));
          }

          ::org::apache::lucene::search::grouping::TopGroups ToParentBlockJoinCollector::getTopGroupsWithAllChildDocs(const ::org::apache::lucene::search::join::ToParentBlockJoinQuery & a0, const ::org::apache::lucene::search::Sort & a1, jint a2, jint a3, jboolean a4) const
          {
            return ::org::apache::lucene::search::grouping::TopGroups(env->callObjectMethod(this$, mids$[mid_getTopGroupsWithAllChildDocs_2bbd93ad], a0.this$, a1.this$, a2, a3, a4));
          }

          void ToParentBlockJoinCollector::setNextReader(const ::org::apache::lucene::index::AtomicReaderContext & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setNextReader_a6f59947], a0.this$);
          }

          void ToParentBlockJoinCollector::setScorer(const ::org::apache::lucene::search::Scorer & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setScorer_8be0880c], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace join {
          static PyObject *t_ToParentBlockJoinCollector_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ToParentBlockJoinCollector_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ToParentBlockJoinCollector_init_(t_ToParentBlockJoinCollector *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ToParentBlockJoinCollector_acceptsDocsOutOfOrder(t_ToParentBlockJoinCollector *self, PyObject *args);
          static PyObject *t_ToParentBlockJoinCollector_collect(t_ToParentBlockJoinCollector *self, PyObject *args);
          static PyObject *t_ToParentBlockJoinCollector_getMaxScore(t_ToParentBlockJoinCollector *self);
          static PyObject *t_ToParentBlockJoinCollector_getTopGroups(t_ToParentBlockJoinCollector *self, PyObject *args);
          static PyObject *t_ToParentBlockJoinCollector_getTopGroupsWithAllChildDocs(t_ToParentBlockJoinCollector *self, PyObject *args);
          static PyObject *t_ToParentBlockJoinCollector_setNextReader(t_ToParentBlockJoinCollector *self, PyObject *args);
          static PyObject *t_ToParentBlockJoinCollector_setScorer(t_ToParentBlockJoinCollector *self, PyObject *args);
          static PyObject *t_ToParentBlockJoinCollector_get__maxScore(t_ToParentBlockJoinCollector *self, void *data);
          static int t_ToParentBlockJoinCollector_set__nextReader(t_ToParentBlockJoinCollector *self, PyObject *arg, void *data);
          static int t_ToParentBlockJoinCollector_set__scorer(t_ToParentBlockJoinCollector *self, PyObject *arg, void *data);
          static PyGetSetDef t_ToParentBlockJoinCollector__fields_[] = {
            DECLARE_GET_FIELD(t_ToParentBlockJoinCollector, maxScore),
            DECLARE_SET_FIELD(t_ToParentBlockJoinCollector, nextReader),
            DECLARE_SET_FIELD(t_ToParentBlockJoinCollector, scorer),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_ToParentBlockJoinCollector__methods_[] = {
            DECLARE_METHOD(t_ToParentBlockJoinCollector, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ToParentBlockJoinCollector, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ToParentBlockJoinCollector, acceptsDocsOutOfOrder, METH_VARARGS),
            DECLARE_METHOD(t_ToParentBlockJoinCollector, collect, METH_VARARGS),
            DECLARE_METHOD(t_ToParentBlockJoinCollector, getMaxScore, METH_NOARGS),
            DECLARE_METHOD(t_ToParentBlockJoinCollector, getTopGroups, METH_VARARGS),
            DECLARE_METHOD(t_ToParentBlockJoinCollector, getTopGroupsWithAllChildDocs, METH_VARARGS),
            DECLARE_METHOD(t_ToParentBlockJoinCollector, setNextReader, METH_VARARGS),
            DECLARE_METHOD(t_ToParentBlockJoinCollector, setScorer, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ToParentBlockJoinCollector, t_ToParentBlockJoinCollector, ::org::apache::lucene::search::Collector, ToParentBlockJoinCollector, t_ToParentBlockJoinCollector_init_, 0, 0, t_ToParentBlockJoinCollector__fields_, 0, 0);

          void t_ToParentBlockJoinCollector::install(PyObject *module)
          {
            installType(&PY_TYPE(ToParentBlockJoinCollector), module, "ToParentBlockJoinCollector", 0);
          }

          void t_ToParentBlockJoinCollector::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ToParentBlockJoinCollector).tp_dict, "class_", make_descriptor(ToParentBlockJoinCollector::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ToParentBlockJoinCollector).tp_dict, "wrapfn_", make_descriptor(t_ToParentBlockJoinCollector::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ToParentBlockJoinCollector).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ToParentBlockJoinCollector_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ToParentBlockJoinCollector::initializeClass, 1)))
              return NULL;
            return t_ToParentBlockJoinCollector::wrap_Object(ToParentBlockJoinCollector(((t_ToParentBlockJoinCollector *) arg)->object.this$));
          }
          static PyObject *t_ToParentBlockJoinCollector_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ToParentBlockJoinCollector::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ToParentBlockJoinCollector_init_(t_ToParentBlockJoinCollector *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::search::Sort a0((jobject) NULL);
            jint a1;
            jboolean a2;
            jboolean a3;
            ToParentBlockJoinCollector object((jobject) NULL);

            if (!parseArgs(args, "kIZZ", ::org::apache::lucene::search::Sort::initializeClass, &a0, &a1, &a2, &a3))
            {
              INT_CALL(object = ToParentBlockJoinCollector(a0, a1, a2, a3));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ToParentBlockJoinCollector_acceptsDocsOutOfOrder(t_ToParentBlockJoinCollector *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.acceptsDocsOutOfOrder());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(ToParentBlockJoinCollector), (PyObject *) self, "acceptsDocsOutOfOrder", args, 2);
          }

          static PyObject *t_ToParentBlockJoinCollector_collect(t_ToParentBlockJoinCollector *self, PyObject *args)
          {
            jint a0;

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(self->object.collect(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(ToParentBlockJoinCollector), (PyObject *) self, "collect", args, 2);
          }

          static PyObject *t_ToParentBlockJoinCollector_getMaxScore(t_ToParentBlockJoinCollector *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getMaxScore());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_ToParentBlockJoinCollector_getTopGroups(t_ToParentBlockJoinCollector *self, PyObject *args)
          {
            ::org::apache::lucene::search::join::ToParentBlockJoinQuery a0((jobject) NULL);
            ::org::apache::lucene::search::Sort a1((jobject) NULL);
            jint a2;
            jint a3;
            jint a4;
            jboolean a5;
            ::org::apache::lucene::search::grouping::TopGroups result((jobject) NULL);

            if (!parseArgs(args, "kkIIIZ", ::org::apache::lucene::search::join::ToParentBlockJoinQuery::initializeClass, ::org::apache::lucene::search::Sort::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5))
            {
              OBJ_CALL(result = self->object.getTopGroups(a0, a1, a2, a3, a4, a5));
              return ::org::apache::lucene::search::grouping::t_TopGroups::wrap_Object(result, &::java::lang::PY_TYPE(Integer));
            }

            PyErr_SetArgsError((PyObject *) self, "getTopGroups", args);
            return NULL;
          }

          static PyObject *t_ToParentBlockJoinCollector_getTopGroupsWithAllChildDocs(t_ToParentBlockJoinCollector *self, PyObject *args)
          {
            ::org::apache::lucene::search::join::ToParentBlockJoinQuery a0((jobject) NULL);
            ::org::apache::lucene::search::Sort a1((jobject) NULL);
            jint a2;
            jint a3;
            jboolean a4;
            ::org::apache::lucene::search::grouping::TopGroups result((jobject) NULL);

            if (!parseArgs(args, "kkIIZ", ::org::apache::lucene::search::join::ToParentBlockJoinQuery::initializeClass, ::org::apache::lucene::search::Sort::initializeClass, &a0, &a1, &a2, &a3, &a4))
            {
              OBJ_CALL(result = self->object.getTopGroupsWithAllChildDocs(a0, a1, a2, a3, a4));
              return ::org::apache::lucene::search::grouping::t_TopGroups::wrap_Object(result, &::java::lang::PY_TYPE(Integer));
            }

            PyErr_SetArgsError((PyObject *) self, "getTopGroupsWithAllChildDocs", args);
            return NULL;
          }

          static PyObject *t_ToParentBlockJoinCollector_setNextReader(t_ToParentBlockJoinCollector *self, PyObject *args)
          {
            ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0))
            {
              OBJ_CALL(self->object.setNextReader(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(ToParentBlockJoinCollector), (PyObject *) self, "setNextReader", args, 2);
          }

          static PyObject *t_ToParentBlockJoinCollector_setScorer(t_ToParentBlockJoinCollector *self, PyObject *args)
          {
            ::org::apache::lucene::search::Scorer a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::search::Scorer::initializeClass, &a0))
            {
              OBJ_CALL(self->object.setScorer(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(ToParentBlockJoinCollector), (PyObject *) self, "setScorer", args, 2);
          }

          static PyObject *t_ToParentBlockJoinCollector_get__maxScore(t_ToParentBlockJoinCollector *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getMaxScore());
            return PyFloat_FromDouble((double) value);
          }

          static int t_ToParentBlockJoinCollector_set__nextReader(t_ToParentBlockJoinCollector *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::index::AtomicReaderContext value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &value))
              {
                INT_CALL(self->object.setNextReader(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "nextReader", arg);
            return -1;
          }

          static int t_ToParentBlockJoinCollector_set__scorer(t_ToParentBlockJoinCollector *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::search::Scorer value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::search::Scorer::initializeClass, &value))
              {
                INT_CALL(self->object.setScorer(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "scorer", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/MergeState.h"
#include "org/apache/lucene/index/SegmentReader.h"
#include "org/apache/lucene/index/AtomicReader.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "java/util/List.h"
#include "org/apache/lucene/index/MergeState$DocMap.h"
#include "org/apache/lucene/index/MergeState$CheckAbort.h"
#include "org/apache/lucene/util/InfoStream.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *MergeState::class$ = NULL;
        jmethodID *MergeState::mids$ = NULL;
        jfieldID *MergeState::fids$ = NULL;
        bool MergeState::live$ = false;

        jclass MergeState::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/MergeState");

            fids$ = new jfieldID[max_fid];
            fids$[fid_checkAbort] = env->getFieldID(cls, "checkAbort", "Lorg/apache/lucene/index/MergeState$CheckAbort;");
            fids$[fid_docBase] = env->getFieldID(cls, "docBase", "[I");
            fids$[fid_docMaps] = env->getFieldID(cls, "docMaps", "[Lorg/apache/lucene/index/MergeState$DocMap;");
            fids$[fid_fieldInfos] = env->getFieldID(cls, "fieldInfos", "Lorg/apache/lucene/index/FieldInfos;");
            fids$[fid_infoStream] = env->getFieldID(cls, "infoStream", "Lorg/apache/lucene/util/InfoStream;");
            fids$[fid_matchedCount] = env->getFieldID(cls, "matchedCount", "I");
            fids$[fid_matchingSegmentReaders] = env->getFieldID(cls, "matchingSegmentReaders", "[Lorg/apache/lucene/index/SegmentReader;");
            fids$[fid_readers] = env->getFieldID(cls, "readers", "Ljava/util/List;");
            fids$[fid_segmentInfo] = env->getFieldID(cls, "segmentInfo", "Lorg/apache/lucene/index/SegmentInfo;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::index::MergeState$CheckAbort MergeState::_get_checkAbort() const
        {
          return ::org::apache::lucene::index::MergeState$CheckAbort(env->getObjectField(this$, fids$[fid_checkAbort]));
        }

        JArray< jint > MergeState::_get_docBase() const
        {
          return JArray< jint >(env->getObjectField(this$, fids$[fid_docBase]));
        }

        void MergeState::_set_docBase(const JArray< jint > & a0) const
        {
          env->setObjectField(this$, fids$[fid_docBase], a0.this$);
        }

        JArray< ::org::apache::lucene::index::MergeState$DocMap > MergeState::_get_docMaps() const
        {
          return JArray< ::org::apache::lucene::index::MergeState$DocMap >(env->getObjectField(this$, fids$[fid_docMaps]));
        }

        void MergeState::_set_docMaps(const JArray< ::org::apache::lucene::index::MergeState$DocMap > & a0) const
        {
          env->setObjectField(this$, fids$[fid_docMaps], a0.this$);
        }

        ::org::apache::lucene::index::FieldInfos MergeState::_get_fieldInfos() const
        {
          return ::org::apache::lucene::index::FieldInfos(env->getObjectField(this$, fids$[fid_fieldInfos]));
        }

        void MergeState::_set_fieldInfos(const ::org::apache::lucene::index::FieldInfos & a0) const
        {
          env->setObjectField(this$, fids$[fid_fieldInfos], a0.this$);
        }

        ::org::apache::lucene::util::InfoStream MergeState::_get_infoStream() const
        {
          return ::org::apache::lucene::util::InfoStream(env->getObjectField(this$, fids$[fid_infoStream]));
        }

        jint MergeState::_get_matchedCount() const
        {
          return env->getIntField(this$, fids$[fid_matchedCount]);
        }

        void MergeState::_set_matchedCount(jint a0) const
        {
          env->setIntField(this$, fids$[fid_matchedCount], a0);
        }

        JArray< ::org::apache::lucene::index::SegmentReader > MergeState::_get_matchingSegmentReaders() const
        {
          return JArray< ::org::apache::lucene::index::SegmentReader >(env->getObjectField(this$, fids$[fid_matchingSegmentReaders]));
        }

        void MergeState::_set_matchingSegmentReaders(const JArray< ::org::apache::lucene::index::SegmentReader > & a0) const
        {
          env->setObjectField(this$, fids$[fid_matchingSegmentReaders], a0.this$);
        }

        ::java::util::List MergeState::_get_readers() const
        {
          return ::java::util::List(env->getObjectField(this$, fids$[fid_readers]));
        }

        ::org::apache::lucene::index::SegmentInfo MergeState::_get_segmentInfo() const
        {
          return ::org::apache::lucene::index::SegmentInfo(env->getObjectField(this$, fids$[fid_segmentInfo]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_MergeState_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MergeState_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MergeState_get__checkAbort(t_MergeState *self, void *data);
        static PyObject *t_MergeState_get__docBase(t_MergeState *self, void *data);
        static int t_MergeState_set__docBase(t_MergeState *self, PyObject *arg, void *data);
        static PyObject *t_MergeState_get__docMaps(t_MergeState *self, void *data);
        static int t_MergeState_set__docMaps(t_MergeState *self, PyObject *arg, void *data);
        static PyObject *t_MergeState_get__fieldInfos(t_MergeState *self, void *data);
        static int t_MergeState_set__fieldInfos(t_MergeState *self, PyObject *arg, void *data);
        static PyObject *t_MergeState_get__infoStream(t_MergeState *self, void *data);
        static PyObject *t_MergeState_get__matchedCount(t_MergeState *self, void *data);
        static int t_MergeState_set__matchedCount(t_MergeState *self, PyObject *arg, void *data);
        static PyObject *t_MergeState_get__matchingSegmentReaders(t_MergeState *self, void *data);
        static int t_MergeState_set__matchingSegmentReaders(t_MergeState *self, PyObject *arg, void *data);
        static PyObject *t_MergeState_get__readers(t_MergeState *self, void *data);
        static PyObject *t_MergeState_get__segmentInfo(t_MergeState *self, void *data);

        static PyGetSetDef t_MergeState__fields_[] = {
          DECLARE_GET_FIELD(t_MergeState, checkAbort),
          DECLARE_GETSET_FIELD(t_MergeState, docBase),
          DECLARE_GETSET_FIELD(t_MergeState, docMaps),
          DECLARE_GETSET_FIELD(t_MergeState, fieldInfos),
          DECLARE_GET_FIELD(t_MergeState, infoStream),
          DECLARE_GETSET_FIELD(t_MergeState, matchedCount),
          DECLARE_GETSET_FIELD(t_MergeState, matchingSegmentReaders),
          DECLARE_GET_FIELD(t_MergeState, readers),
          DECLARE_GET_FIELD(t_MergeState, segmentInfo),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_MergeState__methods_[] = {
          DECLARE_METHOD(t_MergeState, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MergeState, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MergeState, t_MergeState, ::java::lang::Object, MergeState, abstract_init, 0, 0, t_MergeState__fields_, 0, 0);

        void t_MergeState::install(PyObject *module)
        {
          installType(&PY_TYPE(MergeState), module, "MergeState", 0);
          PyDict_SetItemString(PY_TYPE(MergeState).tp_dict, "CheckAbort", make_descriptor(&PY_TYPE(MergeState$CheckAbort)));
          PyDict_SetItemString(PY_TYPE(MergeState).tp_dict, "DocMap", make_descriptor(&PY_TYPE(MergeState$DocMap)));
        }

        void t_MergeState::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MergeState).tp_dict, "class_", make_descriptor(MergeState::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MergeState).tp_dict, "wrapfn_", make_descriptor(t_MergeState::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MergeState).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MergeState_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MergeState::initializeClass, 1)))
            return NULL;
          return t_MergeState::wrap_Object(MergeState(((t_MergeState *) arg)->object.this$));
        }
        static PyObject *t_MergeState_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MergeState::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_MergeState_get__checkAbort(t_MergeState *self, void *data)
        {
          ::org::apache::lucene::index::MergeState$CheckAbort value((jobject) NULL);
          OBJ_CALL(value = self->object._get_checkAbort());
          return ::org::apache::lucene::index::t_MergeState$CheckAbort::wrap_Object(value);
        }

        static PyObject *t_MergeState_get__docBase(t_MergeState *self, void *data)
        {
          JArray< jint > value((jobject) NULL);
          OBJ_CALL(value = self->object._get_docBase());
          return value.wrap();
        }
        static int t_MergeState_set__docBase(t_MergeState *self, PyObject *arg, void *data)
        {
          JArray< jint > value((jobject) NULL);
          if (!parseArg(arg, "[I", &value))
          {
            INT_CALL(self->object._set_docBase(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "docBase", arg);
          return -1;
        }

        static PyObject *t_MergeState_get__docMaps(t_MergeState *self, void *data)
        {
          JArray< ::org::apache::lucene::index::MergeState$DocMap > value((jobject) NULL);
          OBJ_CALL(value = self->object._get_docMaps());
          return JArray<jobject>(value.this$).wrap(::org::apache::lucene::index::t_MergeState$DocMap::wrap_jobject);
        }
        static int t_MergeState_set__docMaps(t_MergeState *self, PyObject *arg, void *data)
        {
          JArray< ::org::apache::lucene::index::MergeState$DocMap > value((jobject) NULL);
          if (!parseArg(arg, "[k", ::org::apache::lucene::index::MergeState$DocMap::initializeClass, &value))
          {
            INT_CALL(self->object._set_docMaps(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "docMaps", arg);
          return -1;
        }

        static PyObject *t_MergeState_get__fieldInfos(t_MergeState *self, void *data)
        {
          ::org::apache::lucene::index::FieldInfos value((jobject) NULL);
          OBJ_CALL(value = self->object._get_fieldInfos());
          return ::org::apache::lucene::index::t_FieldInfos::wrap_Object(value);
        }
        static int t_MergeState_set__fieldInfos(t_MergeState *self, PyObject *arg, void *data)
        {
          ::org::apache::lucene::index::FieldInfos value((jobject) NULL);
          if (!parseArg(arg, "k", ::org::apache::lucene::index::FieldInfos::initializeClass, &value))
          {
            INT_CALL(self->object._set_fieldInfos(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "fieldInfos", arg);
          return -1;
        }

        static PyObject *t_MergeState_get__infoStream(t_MergeState *self, void *data)
        {
          ::org::apache::lucene::util::InfoStream value((jobject) NULL);
          OBJ_CALL(value = self->object._get_infoStream());
          return ::org::apache::lucene::util::t_InfoStream::wrap_Object(value);
        }

        static PyObject *t_MergeState_get__matchedCount(t_MergeState *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_matchedCount());
          return PyInt_FromLong((long) value);
        }
        static int t_MergeState_set__matchedCount(t_MergeState *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_matchedCount(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "matchedCount", arg);
          return -1;
        }

        static PyObject *t_MergeState_get__matchingSegmentReaders(t_MergeState *self, void *data)
        {
          JArray< ::org::apache::lucene::index::SegmentReader > value((jobject) NULL);
          OBJ_CALL(value = self->object._get_matchingSegmentReaders());
          return JArray<jobject>(value.this$).wrap(::org::apache::lucene::index::t_SegmentReader::wrap_jobject);
        }
        static int t_MergeState_set__matchingSegmentReaders(t_MergeState *self, PyObject *arg, void *data)
        {
          JArray< ::org::apache::lucene::index::SegmentReader > value((jobject) NULL);
          if (!parseArg(arg, "[k", ::org::apache::lucene::index::SegmentReader::initializeClass, &value))
          {
            INT_CALL(self->object._set_matchingSegmentReaders(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "matchingSegmentReaders", arg);
          return -1;
        }

        static PyObject *t_MergeState_get__readers(t_MergeState *self, void *data)
        {
          ::java::util::List value((jobject) NULL);
          OBJ_CALL(value = self->object._get_readers());
          return ::java::util::t_List::wrap_Object(value);
        }

        static PyObject *t_MergeState_get__segmentInfo(t_MergeState *self, void *data)
        {
          ::org::apache::lucene::index::SegmentInfo value((jobject) NULL);
          OBJ_CALL(value = self->object._get_segmentInfo());
          return ::org::apache::lucene::index::t_SegmentInfo::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/SortedNumericSelector.h"
#include "org/apache/lucene/search/SortedNumericSelector$Type.h"
#include "org/apache/lucene/search/SortField$Type.h"
#include "org/apache/lucene/index/NumericDocValues.h"
#include "org/apache/lucene/index/SortedNumericDocValues.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *SortedNumericSelector::class$ = NULL;
        jmethodID *SortedNumericSelector::mids$ = NULL;
        bool SortedNumericSelector::live$ = false;

        jclass SortedNumericSelector::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/SortedNumericSelector");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_wrap_d573c861] = env->getStaticMethodID(cls, "wrap", "(Lorg/apache/lucene/index/SortedNumericDocValues;Lorg/apache/lucene/search/SortedNumericSelector$Type;Lorg/apache/lucene/search/SortField$Type;)Lorg/apache/lucene/index/NumericDocValues;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SortedNumericSelector::SortedNumericSelector() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        ::org::apache::lucene::index::NumericDocValues SortedNumericSelector::wrap(const ::org::apache::lucene::index::SortedNumericDocValues & a0, const ::org::apache::lucene::search::SortedNumericSelector$Type & a1, const ::org::apache::lucene::search::SortField$Type & a2)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::NumericDocValues(env->callStaticObjectMethod(cls, mids$[mid_wrap_d573c861], a0.this$, a1.this$, a2.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_SortedNumericSelector_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SortedNumericSelector_instance_(PyTypeObject *type, PyObject *arg);
        static int t_SortedNumericSelector_init_(t_SortedNumericSelector *self, PyObject *args, PyObject *kwds);
        static PyObject *t_SortedNumericSelector_wrap(PyTypeObject *type, PyObject *args);

        static PyMethodDef t_SortedNumericSelector__methods_[] = {
          DECLARE_METHOD(t_SortedNumericSelector, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SortedNumericSelector, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SortedNumericSelector, wrap, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SortedNumericSelector, t_SortedNumericSelector, ::java::lang::Object, SortedNumericSelector, t_SortedNumericSelector_init_, 0, 0, 0, 0, 0);

        void t_SortedNumericSelector::install(PyObject *module)
        {
          installType(&PY_TYPE(SortedNumericSelector), module, "SortedNumericSelector", 0);
          PyDict_SetItemString(PY_TYPE(SortedNumericSelector).tp_dict, "Type", make_descriptor(&PY_TYPE(SortedNumericSelector$Type)));
        }

        void t_SortedNumericSelector::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SortedNumericSelector).tp_dict, "class_", make_descriptor(SortedNumericSelector::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SortedNumericSelector).tp_dict, "wrapfn_", make_descriptor(t_SortedNumericSelector::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SortedNumericSelector).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SortedNumericSelector_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SortedNumericSelector::initializeClass, 1)))
            return NULL;
          return t_SortedNumericSelector::wrap_Object(SortedNumericSelector(((t_SortedNumericSelector *) arg)->object.this$));
        }
        static PyObject *t_SortedNumericSelector_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SortedNumericSelector::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_SortedNumericSelector_init_(t_SortedNumericSelector *self, PyObject *args, PyObject *kwds)
        {
          SortedNumericSelector object((jobject) NULL);

          INT_CALL(object = SortedNumericSelector());
          self->object = object;

          return 0;
        }

        static PyObject *t_SortedNumericSelector_wrap(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::index::SortedNumericDocValues a0((jobject) NULL);
          ::org::apache::lucene::search::SortedNumericSelector$Type a1((jobject) NULL);
          PyTypeObject **p1;
          ::org::apache::lucene::search::SortField$Type a2((jobject) NULL);
          PyTypeObject **p2;
          ::org::apache::lucene::index::NumericDocValues result((jobject) NULL);

          if (!parseArgs(args, "kKK", ::org::apache::lucene::index::SortedNumericDocValues::initializeClass, ::org::apache::lucene::search::SortedNumericSelector$Type::initializeClass, ::org::apache::lucene::search::SortField$Type::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::search::t_SortedNumericSelector$Type::parameters_, &a2, &p2, ::org::apache::lucene::search::t_SortField$Type::parameters_))
          {
            OBJ_CALL(result = ::org::apache::lucene::search::SortedNumericSelector::wrap(a0, a1, a2));
            return ::org::apache::lucene::index::t_NumericDocValues::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "wrap", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/TwoPhaseCommitTool$PrepareCommitFailException.h"
#include "org/apache/lucene/index/TwoPhaseCommit.h"
#include "java/lang/Throwable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *TwoPhaseCommitTool$PrepareCommitFailException::class$ = NULL;
        jmethodID *TwoPhaseCommitTool$PrepareCommitFailException::mids$ = NULL;
        bool TwoPhaseCommitTool$PrepareCommitFailException::live$ = false;

        jclass TwoPhaseCommitTool$PrepareCommitFailException::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/TwoPhaseCommitTool$PrepareCommitFailException");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_52a0ac67] = env->getMethodID(cls, "<init>", "(Ljava/lang/Throwable;Lorg/apache/lucene/index/TwoPhaseCommit;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        TwoPhaseCommitTool$PrepareCommitFailException::TwoPhaseCommitTool$PrepareCommitFailException(const ::java::lang::Throwable & a0, const ::org::apache::lucene::index::TwoPhaseCommit & a1) : ::java::io::IOException(env->newObject(initializeClass, &mids$, mid_init$_52a0ac67, a0.this$, a1.this$)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_TwoPhaseCommitTool$PrepareCommitFailException_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TwoPhaseCommitTool$PrepareCommitFailException_instance_(PyTypeObject *type, PyObject *arg);
        static int t_TwoPhaseCommitTool$PrepareCommitFailException_init_(t_TwoPhaseCommitTool$PrepareCommitFailException *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_TwoPhaseCommitTool$PrepareCommitFailException__methods_[] = {
          DECLARE_METHOD(t_TwoPhaseCommitTool$PrepareCommitFailException, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TwoPhaseCommitTool$PrepareCommitFailException, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TwoPhaseCommitTool$PrepareCommitFailException, t_TwoPhaseCommitTool$PrepareCommitFailException, ::java::io::IOException, TwoPhaseCommitTool$PrepareCommitFailException, t_TwoPhaseCommitTool$PrepareCommitFailException_init_, 0, 0, 0, 0, 0);

        void t_TwoPhaseCommitTool$PrepareCommitFailException::install(PyObject *module)
        {
          installType(&PY_TYPE(TwoPhaseCommitTool$PrepareCommitFailException), module, "TwoPhaseCommitTool$PrepareCommitFailException", 0);
        }

        void t_TwoPhaseCommitTool$PrepareCommitFailException::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TwoPhaseCommitTool$PrepareCommitFailException).tp_dict, "class_", make_descriptor(TwoPhaseCommitTool$PrepareCommitFailException::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TwoPhaseCommitTool$PrepareCommitFailException).tp_dict, "wrapfn_", make_descriptor(t_TwoPhaseCommitTool$PrepareCommitFailException::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TwoPhaseCommitTool$PrepareCommitFailException).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TwoPhaseCommitTool$PrepareCommitFailException_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TwoPhaseCommitTool$PrepareCommitFailException::initializeClass, 1)))
            return NULL;
          return t_TwoPhaseCommitTool$PrepareCommitFailException::wrap_Object(TwoPhaseCommitTool$PrepareCommitFailException(((t_TwoPhaseCommitTool$PrepareCommitFailException *) arg)->object.this$));
        }
        static PyObject *t_TwoPhaseCommitTool$PrepareCommitFailException_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TwoPhaseCommitTool$PrepareCommitFailException::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_TwoPhaseCommitTool$PrepareCommitFailException_init_(t_TwoPhaseCommitTool$PrepareCommitFailException *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::Throwable a0((jobject) NULL);
          ::org::apache::lucene::index::TwoPhaseCommit a1((jobject) NULL);
          TwoPhaseCommitTool$PrepareCommitFailException object((jobject) NULL);

          if (!parseArgs(args, "kk", ::java::lang::Throwable::initializeClass, ::org::apache::lucene::index::TwoPhaseCommit::initializeClass, &a0, &a1))
          {
            INT_CALL(object = TwoPhaseCommitTool$PrepareCommitFailException(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/pylucene/store/PythonLockFactory.h"
#include "java/io/IOException.h"
#include "java/lang/String.h"
#include "org/apache/lucene/store/Lock.h"
#include "java/lang/Throwable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace store {

        ::java::lang::Class *PythonLockFactory::class$ = NULL;
        jmethodID *PythonLockFactory::mids$ = NULL;
        bool PythonLockFactory::live$ = false;

        jclass PythonLockFactory::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/pylucene/store/PythonLockFactory");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_clearLock_5fdc3f48] = env->getMethodID(cls, "clearLock", "(Ljava/lang/String;)V");
            mids$[mid_finalize_54c6a166] = env->getMethodID(cls, "finalize", "()V");
            mids$[mid_makeLock_f26bb9a8] = env->getMethodID(cls, "makeLock", "(Ljava/lang/String;)Lorg/apache/lucene/store/Lock;");
            mids$[mid_pythonDecRef_54c6a166] = env->getMethodID(cls, "pythonDecRef", "()V");
            mids$[mid_pythonExtension_54c6a17a] = env->getMethodID(cls, "pythonExtension", "()J");
            mids$[mid_pythonExtension_0ee6df2f] = env->getMethodID(cls, "pythonExtension", "(J)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PythonLockFactory::PythonLockFactory() : ::org::apache::lucene::store::LockFactory(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void PythonLockFactory::finalize() const
        {
          env->callVoidMethod(this$, mids$[mid_finalize_54c6a166]);
        }

        jlong PythonLockFactory::pythonExtension() const
        {
          return env->callLongMethod(this$, mids$[mid_pythonExtension_54c6a17a]);
        }

        void PythonLockFactory::pythonExtension(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_pythonExtension_0ee6df2f], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace store {
        static PyObject *t_PythonLockFactory_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PythonLockFactory_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PythonLockFactory_init_(t_PythonLockFactory *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PythonLockFactory_finalize(t_PythonLockFactory *self);
        static PyObject *t_PythonLockFactory_pythonExtension(t_PythonLockFactory *self, PyObject *args);
        static void JNICALL t_PythonLockFactory_clearLock0(JNIEnv *jenv, jobject jobj, jobject a0);
        static jobject JNICALL t_PythonLockFactory_makeLock1(JNIEnv *jenv, jobject jobj, jobject a0);
        static void JNICALL t_PythonLockFactory_pythonDecRef2(JNIEnv *jenv, jobject jobj);
        static PyObject *t_PythonLockFactory_get__self(t_PythonLockFactory *self, void *data);
        static PyGetSetDef t_PythonLockFactory__fields_[] = {
          DECLARE_GET_FIELD(t_PythonLockFactory, self),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PythonLockFactory__methods_[] = {
          DECLARE_METHOD(t_PythonLockFactory, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonLockFactory, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonLockFactory, finalize, METH_NOARGS),
          DECLARE_METHOD(t_PythonLockFactory, pythonExtension, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PythonLockFactory, t_PythonLockFactory, ::org::apache::lucene::store::LockFactory, PythonLockFactory, t_PythonLockFactory_init_, 0, 0, t_PythonLockFactory__fields_, 0, 0);

        void t_PythonLockFactory::install(PyObject *module)
        {
          installType(&PY_TYPE(PythonLockFactory), module, "PythonLockFactory", 1);
        }

        void t_PythonLockFactory::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PythonLockFactory).tp_dict, "class_", make_descriptor(PythonLockFactory::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PythonLockFactory).tp_dict, "wrapfn_", make_descriptor(t_PythonLockFactory::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PythonLockFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          jclass cls = env->getClass(PythonLockFactory::initializeClass);
          JNINativeMethod methods[] = {
            { "clearLock", "(Ljava/lang/String;)V", (void *) t_PythonLockFactory_clearLock0 },
            { "makeLock", "(Ljava/lang/String;)Lorg/apache/lucene/store/Lock;", (void *) t_PythonLockFactory_makeLock1 },
            { "pythonDecRef", "()V", (void *) t_PythonLockFactory_pythonDecRef2 },
          };
          env->registerNatives(cls, methods, 3);
        }

        static PyObject *t_PythonLockFactory_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PythonLockFactory::initializeClass, 1)))
            return NULL;
          return t_PythonLockFactory::wrap_Object(PythonLockFactory(((t_PythonLockFactory *) arg)->object.this$));
        }
        static PyObject *t_PythonLockFactory_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PythonLockFactory::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PythonLockFactory_init_(t_PythonLockFactory *self, PyObject *args, PyObject *kwds)
        {
          PythonLockFactory object((jobject) NULL);

          INT_CALL(object = PythonLockFactory());
          self->object = object;

          Py_INCREF((PyObject *) self);
          self->object.pythonExtension((jlong) (Py_intptr_t) (void *) self);

          return 0;
        }

        static PyObject *t_PythonLockFactory_finalize(t_PythonLockFactory *self)
        {
          OBJ_CALL(self->object.finalize());
          Py_RETURN_NONE;
        }

        static PyObject *t_PythonLockFactory_pythonExtension(t_PythonLockFactory *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              jlong result;
              OBJ_CALL(result = self->object.pythonExtension());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }
            break;
           case 1:
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.pythonExtension(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "pythonExtension", args);
          return NULL;
        }

        static void JNICALL t_PythonLockFactory_clearLock0(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonLockFactory::mids$[PythonLockFactory::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          PyObject *o0 = env->fromJString((jstring) a0, 0);
          PyObject *result = PyObject_CallMethod(obj, "clearLock", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else
            Py_DECREF(result);
        }

        static jobject JNICALL t_PythonLockFactory_makeLock1(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonLockFactory::mids$[PythonLockFactory::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          ::org::apache::lucene::store::Lock value((jobject) NULL);
          PyObject *o0 = env->fromJString((jstring) a0, 0);
          PyObject *result = PyObject_CallMethod(obj, "makeLock", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "k", ::org::apache::lucene::store::Lock::initializeClass, &value))
          {
            throwTypeError("makeLock", result);
            Py_DECREF(result);
          }
          else
          {
            jobj = jenv->NewLocalRef(value.this$);
            Py_DECREF(result);
            return jobj;
          }

          return (jobject) NULL;
        }

        static void JNICALL t_PythonLockFactory_pythonDecRef2(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonLockFactory::mids$[PythonLockFactory::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            jenv->CallVoidMethod(jobj, PythonLockFactory::mids$[PythonLockFactory::mid_pythonExtension_0ee6df2f], (jlong) 0);
            env->finalizeObject(jenv, obj);
          }
        }

        static PyObject *t_PythonLockFactory_get__self(t_PythonLockFactory *self, void *data)
        {
          jlong ptr;
          OBJ_CALL(ptr = self->object.pythonExtension());
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            Py_INCREF(obj);
            return obj;
          }
          else
            Py_RETURN_NONE;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/fr/FrenchStemmer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fr {

          ::java::lang::Class *FrenchStemmer::class$ = NULL;
          jmethodID *FrenchStemmer::mids$ = NULL;
          bool FrenchStemmer::live$ = false;

          jclass FrenchStemmer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/fr/FrenchStemmer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_stem_97a5258f] = env->getMethodID(cls, "stem", "(Ljava/lang/String;)Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FrenchStemmer::FrenchStemmer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fr {
          static PyObject *t_FrenchStemmer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FrenchStemmer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FrenchStemmer_init_(t_FrenchStemmer *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_FrenchStemmer__methods_[] = {
            DECLARE_METHOD(t_FrenchStemmer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FrenchStemmer, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FrenchStemmer, t_FrenchStemmer, ::java::lang::Object, FrenchStemmer, t_FrenchStemmer_init_, 0, 0, 0, 0, 0);

          void t_FrenchStemmer::install(PyObject *module)
          {
            installType(&PY_TYPE(FrenchStemmer), module, "FrenchStemmer", 0);
          }

          void t_FrenchStemmer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FrenchStemmer).tp_dict, "class_", make_descriptor(FrenchStemmer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FrenchStemmer).tp_dict, "wrapfn_", make_descriptor(t_FrenchStemmer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FrenchStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FrenchStemmer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FrenchStemmer::initializeClass, 1)))
              return NULL;
            return t_FrenchStemmer::wrap_Object(FrenchStemmer(((t_FrenchStemmer *) arg)->object.this$));
          }
          static PyObject *t_FrenchStemmer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FrenchStemmer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FrenchStemmer_init_(t_FrenchStemmer *self, PyObject *args, PyObject *kwds)
          {
            FrenchStemmer object((jobject) NULL);

            INT_CALL(object = FrenchStemmer());
            self->object = object;

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/vectorhighlight/FieldPhraseList$WeightedPhraseInfo.h"
#include "java/lang/Class.h"
#include "java/util/LinkedList.h"
#include "java/util/Collection.h"
#include "org/apache/lucene/search/vectorhighlight/FieldTermStack$TermInfo.h"
#include "org/apache/lucene/search/vectorhighlight/FieldPhraseList$WeightedPhraseInfo$Toffs.h"
#include "java/lang/String.h"
#include "java/util/List.h"
#include "java/lang/Comparable.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {

          ::java::lang::Class *FieldPhraseList$WeightedPhraseInfo::class$ = NULL;
          jmethodID *FieldPhraseList$WeightedPhraseInfo::mids$ = NULL;
          bool FieldPhraseList$WeightedPhraseInfo::live$ = false;

          jclass FieldPhraseList$WeightedPhraseInfo::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/vectorhighlight/FieldPhraseList$WeightedPhraseInfo");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_9bfb370d] = env->getMethodID(cls, "<init>", "(Ljava/util/Collection;)V");
              mids$[mid_init$_0ffd9fa1] = env->getMethodID(cls, "<init>", "(Ljava/util/LinkedList;F)V");
              mids$[mid_init$_d318fc21] = env->getMethodID(cls, "<init>", "(Ljava/util/LinkedList;FI)V");
              mids$[mid_compareTo_3f58e096] = env->getMethodID(cls, "compareTo", "(Lorg/apache/lucene/search/vectorhighlight/FieldPhraseList$WeightedPhraseInfo;)I");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_getBoost_54c6a176] = env->getMethodID(cls, "getBoost", "()F");
              mids$[mid_getEndOffset_54c6a179] = env->getMethodID(cls, "getEndOffset", "()I");
              mids$[mid_getSeqnum_54c6a179] = env->getMethodID(cls, "getSeqnum", "()I");
              mids$[mid_getStartOffset_54c6a179] = env->getMethodID(cls, "getStartOffset", "()I");
              mids$[mid_getTermsInfos_87851566] = env->getMethodID(cls, "getTermsInfos", "()Ljava/util/List;");
              mids$[mid_getTermsOffsets_87851566] = env->getMethodID(cls, "getTermsOffsets", "()Ljava/util/List;");
              mids$[mid_getText_14c7b5c5] = env->getMethodID(cls, "getText", "()Ljava/lang/String;");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_isOffsetOverlap_3f58e085] = env->getMethodID(cls, "isOffsetOverlap", "(Lorg/apache/lucene/search/vectorhighlight/FieldPhraseList$WeightedPhraseInfo;)Z");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FieldPhraseList$WeightedPhraseInfo::FieldPhraseList$WeightedPhraseInfo(const ::java::util::Collection & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_9bfb370d, a0.this$)) {}

          FieldPhraseList$WeightedPhraseInfo::FieldPhraseList$WeightedPhraseInfo(const ::java::util::LinkedList & a0, jfloat a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_0ffd9fa1, a0.this$, a1)) {}

          FieldPhraseList$WeightedPhraseInfo::FieldPhraseList$WeightedPhraseInfo(const ::java::util::LinkedList & a0, jfloat a1, jint a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_d318fc21, a0.this$, a1, a2)) {}

          jint FieldPhraseList$WeightedPhraseInfo::compareTo(const FieldPhraseList$WeightedPhraseInfo & a0) const
          {
            return env->callIntMethod(this$, mids$[mid_compareTo_3f58e096], a0.this$);
          }

          jboolean FieldPhraseList$WeightedPhraseInfo::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          jfloat FieldPhraseList$WeightedPhraseInfo::getBoost() const
          {
            return env->callFloatMethod(this$, mids$[mid_getBoost_54c6a176]);
          }

          jint FieldPhraseList$WeightedPhraseInfo::getEndOffset() const
          {
            return env->callIntMethod(this$, mids$[mid_getEndOffset_54c6a179]);
          }

          jint FieldPhraseList$WeightedPhraseInfo::getSeqnum() const
          {
            return env->callIntMethod(this$, mids$[mid_getSeqnum_54c6a179]);
          }

          jint FieldPhraseList$WeightedPhraseInfo::getStartOffset() const
          {
            return env->callIntMethod(this$, mids$[mid_getStartOffset_54c6a179]);
          }

          ::java::util::List FieldPhraseList$WeightedPhraseInfo::getTermsInfos() const
          {
            return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getTermsInfos_87851566]));
          }

          ::java::util::List FieldPhraseList$WeightedPhraseInfo::getTermsOffsets() const
          {
            return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getTermsOffsets_87851566]));
          }

          ::java::lang::String FieldPhraseList$WeightedPhraseInfo::getText() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getText_14c7b5c5]));
          }

          jint FieldPhraseList$WeightedPhraseInfo::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          jboolean FieldPhraseList$WeightedPhraseInfo::isOffsetOverlap(const FieldPhraseList$WeightedPhraseInfo & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_isOffsetOverlap_3f58e085], a0.this$);
          }

          ::java::lang::String FieldPhraseList$WeightedPhraseInfo::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {
          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FieldPhraseList$WeightedPhraseInfo_init_(t_FieldPhraseList$WeightedPhraseInfo *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_compareTo(t_FieldPhraseList$WeightedPhraseInfo *self, PyObject *arg);
          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_equals(t_FieldPhraseList$WeightedPhraseInfo *self, PyObject *args);
          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_getBoost(t_FieldPhraseList$WeightedPhraseInfo *self);
          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_getEndOffset(t_FieldPhraseList$WeightedPhraseInfo *self);
          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_getSeqnum(t_FieldPhraseList$WeightedPhraseInfo *self);
          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_getStartOffset(t_FieldPhraseList$WeightedPhraseInfo *self);
          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_getTermsInfos(t_FieldPhraseList$WeightedPhraseInfo *self);
          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_getTermsOffsets(t_FieldPhraseList$WeightedPhraseInfo *self);
          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_getText(t_FieldPhraseList$WeightedPhraseInfo *self);
          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_hashCode(t_FieldPhraseList$WeightedPhraseInfo *self, PyObject *args);
          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_isOffsetOverlap(t_FieldPhraseList$WeightedPhraseInfo *self, PyObject *arg);
          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_toString(t_FieldPhraseList$WeightedPhraseInfo *self, PyObject *args);
          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_get__boost(t_FieldPhraseList$WeightedPhraseInfo *self, void *data);
          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_get__endOffset(t_FieldPhraseList$WeightedPhraseInfo *self, void *data);
          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_get__seqnum(t_FieldPhraseList$WeightedPhraseInfo *self, void *data);
          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_get__startOffset(t_FieldPhraseList$WeightedPhraseInfo *self, void *data);
          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_get__termsInfos(t_FieldPhraseList$WeightedPhraseInfo *self, void *data);
          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_get__termsOffsets(t_FieldPhraseList$WeightedPhraseInfo *self, void *data);
          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_get__text(t_FieldPhraseList$WeightedPhraseInfo *self, void *data);
          static PyGetSetDef t_FieldPhraseList$WeightedPhraseInfo__fields_[] = {
            DECLARE_GET_FIELD(t_FieldPhraseList$WeightedPhraseInfo, boost),
            DECLARE_GET_FIELD(t_FieldPhraseList$WeightedPhraseInfo, endOffset),
            DECLARE_GET_FIELD(t_FieldPhraseList$WeightedPhraseInfo, seqnum),
            DECLARE_GET_FIELD(t_FieldPhraseList$WeightedPhraseInfo, startOffset),
            DECLARE_GET_FIELD(t_FieldPhraseList$WeightedPhraseInfo, termsInfos),
            DECLARE_GET_FIELD(t_FieldPhraseList$WeightedPhraseInfo, termsOffsets),
            DECLARE_GET_FIELD(t_FieldPhraseList$WeightedPhraseInfo, text),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_FieldPhraseList$WeightedPhraseInfo__methods_[] = {
            DECLARE_METHOD(t_FieldPhraseList$WeightedPhraseInfo, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FieldPhraseList$WeightedPhraseInfo, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FieldPhraseList$WeightedPhraseInfo, compareTo, METH_O),
            DECLARE_METHOD(t_FieldPhraseList$WeightedPhraseInfo, equals, METH_VARARGS),
            DECLARE_METHOD(t_FieldPhraseList$WeightedPhraseInfo, getBoost, METH_NOARGS),
            DECLARE_METHOD(t_FieldPhraseList$WeightedPhraseInfo, getEndOffset, METH_NOARGS),
            DECLARE_METHOD(t_FieldPhraseList$WeightedPhraseInfo, getSeqnum, METH_NOARGS),
            DECLARE_METHOD(t_FieldPhraseList$WeightedPhraseInfo, getStartOffset, METH_NOARGS),
            DECLARE_METHOD(t_FieldPhraseList$WeightedPhraseInfo, getTermsInfos, METH_NOARGS),
            DECLARE_METHOD(t_FieldPhraseList$WeightedPhraseInfo, getTermsOffsets, METH_NOARGS),
            DECLARE_METHOD(t_FieldPhraseList$WeightedPhraseInfo, getText, METH_NOARGS),
            DECLARE_METHOD(t_FieldPhraseList$WeightedPhraseInfo, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_FieldPhraseList$WeightedPhraseInfo, isOffsetOverlap, METH_O),
            DECLARE_METHOD(t_FieldPhraseList$WeightedPhraseInfo, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FieldPhraseList$WeightedPhraseInfo, t_FieldPhraseList$WeightedPhraseInfo, ::java::lang::Object, FieldPhraseList$WeightedPhraseInfo, t_FieldPhraseList$WeightedPhraseInfo_init_, 0, 0, t_FieldPhraseList$WeightedPhraseInfo__fields_, 0, 0);

          void t_FieldPhraseList$WeightedPhraseInfo::install(PyObject *module)
          {
            installType(&PY_TYPE(FieldPhraseList$WeightedPhraseInfo), module, "FieldPhraseList$WeightedPhraseInfo", 0);
            PyDict_SetItemString(PY_TYPE(FieldPhraseList$WeightedPhraseInfo).tp_dict, "Toffs", make_descriptor(&PY_TYPE(FieldPhraseList$WeightedPhraseInfo$Toffs)));
          }

          void t_FieldPhraseList$WeightedPhraseInfo::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FieldPhraseList$WeightedPhraseInfo).tp_dict, "class_", make_descriptor(FieldPhraseList$WeightedPhraseInfo::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FieldPhraseList$WeightedPhraseInfo).tp_dict, "wrapfn_", make_descriptor(t_FieldPhraseList$WeightedPhraseInfo::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FieldPhraseList$WeightedPhraseInfo).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FieldPhraseList$WeightedPhraseInfo::initializeClass, 1)))
              return NULL;
            return t_FieldPhraseList$WeightedPhraseInfo::wrap_Object(FieldPhraseList$WeightedPhraseInfo(((t_FieldPhraseList$WeightedPhraseInfo *) arg)->object.this$));
          }
          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FieldPhraseList$WeightedPhraseInfo::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FieldPhraseList$WeightedPhraseInfo_init_(t_FieldPhraseList$WeightedPhraseInfo *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::java::util::Collection a0((jobject) NULL);
                PyTypeObject **p0;
                FieldPhraseList$WeightedPhraseInfo object((jobject) NULL);

                if (!parseArgs(args, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
                {
                  INT_CALL(object = FieldPhraseList$WeightedPhraseInfo(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::java::util::LinkedList a0((jobject) NULL);
                PyTypeObject **p0;
                jfloat a1;
                FieldPhraseList$WeightedPhraseInfo object((jobject) NULL);

                if (!parseArgs(args, "KF", ::java::util::LinkedList::initializeClass, &a0, &p0, ::java::util::t_LinkedList::parameters_, &a1))
                {
                  INT_CALL(object = FieldPhraseList$WeightedPhraseInfo(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::java::util::LinkedList a0((jobject) NULL);
                PyTypeObject **p0;
                jfloat a1;
                jint a2;
                FieldPhraseList$WeightedPhraseInfo object((jobject) NULL);

                if (!parseArgs(args, "KFI", ::java::util::LinkedList::initializeClass, &a0, &p0, ::java::util::t_LinkedList::parameters_, &a1, &a2))
                {
                  INT_CALL(object = FieldPhraseList$WeightedPhraseInfo(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_compareTo(t_FieldPhraseList$WeightedPhraseInfo *self, PyObject *arg)
          {
            FieldPhraseList$WeightedPhraseInfo a0((jobject) NULL);
            jint result;

            if (!parseArg(arg, "k", FieldPhraseList$WeightedPhraseInfo::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.compareTo(a0));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "compareTo", arg);
            return NULL;
          }

          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_equals(t_FieldPhraseList$WeightedPhraseInfo *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(FieldPhraseList$WeightedPhraseInfo), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_getBoost(t_FieldPhraseList$WeightedPhraseInfo *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getBoost());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_getEndOffset(t_FieldPhraseList$WeightedPhraseInfo *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getEndOffset());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_getSeqnum(t_FieldPhraseList$WeightedPhraseInfo *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getSeqnum());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_getStartOffset(t_FieldPhraseList$WeightedPhraseInfo *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getStartOffset());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_getTermsInfos(t_FieldPhraseList$WeightedPhraseInfo *self)
          {
            ::java::util::List result((jobject) NULL);
            OBJ_CALL(result = self->object.getTermsInfos());
            return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::search::vectorhighlight::PY_TYPE(FieldTermStack$TermInfo));
          }

          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_getTermsOffsets(t_FieldPhraseList$WeightedPhraseInfo *self)
          {
            ::java::util::List result((jobject) NULL);
            OBJ_CALL(result = self->object.getTermsOffsets());
            return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::search::vectorhighlight::PY_TYPE(FieldPhraseList$WeightedPhraseInfo$Toffs));
          }

          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_getText(t_FieldPhraseList$WeightedPhraseInfo *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.getText());
            return j2p(result);
          }

          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_hashCode(t_FieldPhraseList$WeightedPhraseInfo *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(FieldPhraseList$WeightedPhraseInfo), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_isOffsetOverlap(t_FieldPhraseList$WeightedPhraseInfo *self, PyObject *arg)
          {
            FieldPhraseList$WeightedPhraseInfo a0((jobject) NULL);
            jboolean result;

            if (!parseArg(arg, "k", FieldPhraseList$WeightedPhraseInfo::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.isOffsetOverlap(a0));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError((PyObject *) self, "isOffsetOverlap", arg);
            return NULL;
          }

          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_toString(t_FieldPhraseList$WeightedPhraseInfo *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(FieldPhraseList$WeightedPhraseInfo), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_get__boost(t_FieldPhraseList$WeightedPhraseInfo *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getBoost());
            return PyFloat_FromDouble((double) value);
          }

          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_get__endOffset(t_FieldPhraseList$WeightedPhraseInfo *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getEndOffset());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_get__seqnum(t_FieldPhraseList$WeightedPhraseInfo *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getSeqnum());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_get__startOffset(t_FieldPhraseList$WeightedPhraseInfo *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getStartOffset());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_get__termsInfos(t_FieldPhraseList$WeightedPhraseInfo *self, void *data)
          {
            ::java::util::List value((jobject) NULL);
            OBJ_CALL(value = self->object.getTermsInfos());
            return ::java::util::t_List::wrap_Object(value);
          }

          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_get__termsOffsets(t_FieldPhraseList$WeightedPhraseInfo *self, void *data)
          {
            ::java::util::List value((jobject) NULL);
            OBJ_CALL(value = self->object.getTermsOffsets());
            return ::java::util::t_List::wrap_Object(value);
          }

          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_get__text(t_FieldPhraseList$WeightedPhraseInfo *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getText());
            return j2p(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spell/LevensteinDistance.h"
#include "org/apache/lucene/search/spell/StringDistance.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {

          ::java::lang::Class *LevensteinDistance::class$ = NULL;
          jmethodID *LevensteinDistance::mids$ = NULL;
          bool LevensteinDistance::live$ = false;

          jclass LevensteinDistance::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spell/LevensteinDistance");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_getDistance_4a264752] = env->getMethodID(cls, "getDistance", "(Ljava/lang/String;Ljava/lang/String;)F");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          LevensteinDistance::LevensteinDistance() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jboolean LevensteinDistance::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          jfloat LevensteinDistance::getDistance(const ::java::lang::String & a0, const ::java::lang::String & a1) const
          {
            return env->callFloatMethod(this$, mids$[mid_getDistance_4a264752], a0.this$, a1.this$);
          }

          jint LevensteinDistance::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          ::java::lang::String LevensteinDistance::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {
          static PyObject *t_LevensteinDistance_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LevensteinDistance_instance_(PyTypeObject *type, PyObject *arg);
          static int t_LevensteinDistance_init_(t_LevensteinDistance *self, PyObject *args, PyObject *kwds);
          static PyObject *t_LevensteinDistance_equals(t_LevensteinDistance *self, PyObject *args);
          static PyObject *t_LevensteinDistance_getDistance(t_LevensteinDistance *self, PyObject *args);
          static PyObject *t_LevensteinDistance_hashCode(t_LevensteinDistance *self, PyObject *args);
          static PyObject *t_LevensteinDistance_toString(t_LevensteinDistance *self, PyObject *args);

          static PyMethodDef t_LevensteinDistance__methods_[] = {
            DECLARE_METHOD(t_LevensteinDistance, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LevensteinDistance, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LevensteinDistance, equals, METH_VARARGS),
            DECLARE_METHOD(t_LevensteinDistance, getDistance, METH_VARARGS),
            DECLARE_METHOD(t_LevensteinDistance, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_LevensteinDistance, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(LevensteinDistance, t_LevensteinDistance, ::java::lang::Object, LevensteinDistance, t_LevensteinDistance_init_, 0, 0, 0, 0, 0);

          void t_LevensteinDistance::install(PyObject *module)
          {
            installType(&PY_TYPE(LevensteinDistance), module, "LevensteinDistance", 0);
          }

          void t_LevensteinDistance::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(LevensteinDistance).tp_dict, "class_", make_descriptor(LevensteinDistance::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(LevensteinDistance).tp_dict, "wrapfn_", make_descriptor(t_LevensteinDistance::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(LevensteinDistance).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_LevensteinDistance_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LevensteinDistance::initializeClass, 1)))
              return NULL;
            return t_LevensteinDistance::wrap_Object(LevensteinDistance(((t_LevensteinDistance *) arg)->object.this$));
          }
          static PyObject *t_LevensteinDistance_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LevensteinDistance::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_LevensteinDistance_init_(t_LevensteinDistance *self, PyObject *args, PyObject *kwds)
          {
            LevensteinDistance object((jobject) NULL);

            INT_CALL(object = LevensteinDistance());
            self->object = object;

            return 0;
          }

          static PyObject *t_LevensteinDistance_equals(t_LevensteinDistance *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(LevensteinDistance), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_LevensteinDistance_getDistance(t_LevensteinDistance *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            jfloat result;

            if (!parseArgs(args, "ss", &a0, &a1))
            {
              OBJ_CALL(result = self->object.getDistance(a0, a1));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "getDistance", args);
            return NULL;
          }

          static PyObject *t_LevensteinDistance_hashCode(t_LevensteinDistance *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(LevensteinDistance), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_LevensteinDistance_toString(t_LevensteinDistance *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(LevensteinDistance), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/CommonTermsQuery.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/index/TermContext.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "java/util/Set.h"
#include "java/util/List.h"
#include "org/apache/lucene/search/BooleanClause$Occur.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/index/Term.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {

        ::java::lang::Class *CommonTermsQuery::class$ = NULL;
        jmethodID *CommonTermsQuery::mids$ = NULL;
        bool CommonTermsQuery::live$ = false;

        jclass CommonTermsQuery::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/queries/CommonTermsQuery");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_689325ef] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/BooleanClause$Occur;Lorg/apache/lucene/search/BooleanClause$Occur;F)V");
            mids$[mid_init$_5975764c] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/BooleanClause$Occur;Lorg/apache/lucene/search/BooleanClause$Occur;FZ)V");
            mids$[mid_add_7eca6a81] = env->getMethodID(cls, "add", "(Lorg/apache/lucene/index/Term;)V");
            mids$[mid_collectTermContext_ca4f0fd0] = env->getMethodID(cls, "collectTermContext", "(Lorg/apache/lucene/index/IndexReader;Ljava/util/List;[Lorg/apache/lucene/index/TermContext;[Lorg/apache/lucene/index/Term;)V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_extractTerms_fb4f2b26] = env->getMethodID(cls, "extractTerms", "(Ljava/util/Set;)V");
            mids$[mid_getHighFreqMinimumNumberShouldMatch_54c6a176] = env->getMethodID(cls, "getHighFreqMinimumNumberShouldMatch", "()F");
            mids$[mid_getLowFreqMinimumNumberShouldMatch_54c6a176] = env->getMethodID(cls, "getLowFreqMinimumNumberShouldMatch", "()F");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_isCoordDisabled_54c6a16a] = env->getMethodID(cls, "isCoordDisabled", "()Z");
            mids$[mid_rewrite_7edcaa43] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/index/IndexReader;)Lorg/apache/lucene/search/Query;");
            mids$[mid_setHighFreqMinimumNumberShouldMatch_06298cab] = env->getMethodID(cls, "setHighFreqMinimumNumberShouldMatch", "(F)V");
            mids$[mid_setLowFreqMinimumNumberShouldMatch_06298cab] = env->getMethodID(cls, "setLowFreqMinimumNumberShouldMatch", "(F)V");
            mids$[mid_toString_97a5258f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");
            mids$[mid_newTermQuery_516e731e] = env->getMethodID(cls, "newTermQuery", "(Lorg/apache/lucene/index/Term;Lorg/apache/lucene/index/TermContext;)Lorg/apache/lucene/search/Query;");
            mids$[mid_calcLowFreqMinimumNumberShouldMatch_39c7bd23] = env->getMethodID(cls, "calcLowFreqMinimumNumberShouldMatch", "(I)I");
            mids$[mid_calcHighFreqMinimumNumberShouldMatch_39c7bd23] = env->getMethodID(cls, "calcHighFreqMinimumNumberShouldMatch", "(I)I");
            mids$[mid_buildQuery_4123263c] = env->getMethodID(cls, "buildQuery", "(I[Lorg/apache/lucene/index/TermContext;[Lorg/apache/lucene/index/Term;)Lorg/apache/lucene/search/Query;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        CommonTermsQuery::CommonTermsQuery(const ::org::apache::lucene::search::BooleanClause$Occur & a0, const ::org::apache::lucene::search::BooleanClause$Occur & a1, jfloat a2) : ::org::apache::lucene::search::Query(env->newObject(initializeClass, &mids$, mid_init$_689325ef, a0.this$, a1.this$, a2)) {}

        CommonTermsQuery::CommonTermsQuery(const ::org::apache::lucene::search::BooleanClause$Occur & a0, const ::org::apache::lucene::search::BooleanClause$Occur & a1, jfloat a2, jboolean a3) : ::org::apache::lucene::search::Query(env->newObject(initializeClass, &mids$, mid_init$_5975764c, a0.this$, a1.this$, a2, a3)) {}

        void CommonTermsQuery::add(const ::org::apache::lucene::index::Term & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_add_7eca6a81], a0.this$);
        }

        void CommonTermsQuery::collectTermContext(const ::org::apache::lucene::index::IndexReader & a0, const ::java::util::List & a1, const JArray< ::org::apache::lucene::index::TermContext > & a2, const JArray< ::org::apache::lucene::index::Term > & a3) const
        {
          env->callVoidMethod(this$, mids$[mid_collectTermContext_ca4f0fd0], a0.this$, a1.this$, a2.this$, a3.this$);
        }

        jboolean CommonTermsQuery::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        void CommonTermsQuery::extractTerms(const ::java::util::Set & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_extractTerms_fb4f2b26], a0.this$);
        }

        jfloat CommonTermsQuery::getHighFreqMinimumNumberShouldMatch() const
        {
          return env->callFloatMethod(this$, mids$[mid_getHighFreqMinimumNumberShouldMatch_54c6a176]);
        }

        jfloat CommonTermsQuery::getLowFreqMinimumNumberShouldMatch() const
        {
          return env->callFloatMethod(this$, mids$[mid_getLowFreqMinimumNumberShouldMatch_54c6a176]);
        }

        jint CommonTermsQuery::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jboolean CommonTermsQuery::isCoordDisabled() const
        {
          return env->callBooleanMethod(this$, mids$[mid_isCoordDisabled_54c6a16a]);
        }

        ::org::apache::lucene::search::Query CommonTermsQuery::rewrite(const ::org::apache::lucene::index::IndexReader & a0) const
        {
          return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_rewrite_7edcaa43], a0.this$));
        }

        void CommonTermsQuery::setHighFreqMinimumNumberShouldMatch(jfloat a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setHighFreqMinimumNumberShouldMatch_06298cab], a0);
        }

        void CommonTermsQuery::setLowFreqMinimumNumberShouldMatch(jfloat a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setLowFreqMinimumNumberShouldMatch_06298cab], a0);
        }

        ::java::lang::String CommonTermsQuery::toString(const ::java::lang::String & a0) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_97a5258f], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        static PyObject *t_CommonTermsQuery_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CommonTermsQuery_instance_(PyTypeObject *type, PyObject *arg);
        static int t_CommonTermsQuery_init_(t_CommonTermsQuery *self, PyObject *args, PyObject *kwds);
        static PyObject *t_CommonTermsQuery_add(t_CommonTermsQuery *self, PyObject *arg);
        static PyObject *t_CommonTermsQuery_collectTermContext(t_CommonTermsQuery *self, PyObject *args);
        static PyObject *t_CommonTermsQuery_equals(t_CommonTermsQuery *self, PyObject *args);
        static PyObject *t_CommonTermsQuery_extractTerms(t_CommonTermsQuery *self, PyObject *args);
        static PyObject *t_CommonTermsQuery_getHighFreqMinimumNumberShouldMatch(t_CommonTermsQuery *self);
        static PyObject *t_CommonTermsQuery_getLowFreqMinimumNumberShouldMatch(t_CommonTermsQuery *self);
        static PyObject *t_CommonTermsQuery_hashCode(t_CommonTermsQuery *self, PyObject *args);
        static PyObject *t_CommonTermsQuery_isCoordDisabled(t_CommonTermsQuery *self);
        static PyObject *t_CommonTermsQuery_rewrite(t_CommonTermsQuery *self, PyObject *args);
        static PyObject *t_CommonTermsQuery_setHighFreqMinimumNumberShouldMatch(t_CommonTermsQuery *self, PyObject *arg);
        static PyObject *t_CommonTermsQuery_setLowFreqMinimumNumberShouldMatch(t_CommonTermsQuery *self, PyObject *arg);
        static PyObject *t_CommonTermsQuery_toString(t_CommonTermsQuery *self, PyObject *args);
        static PyObject *t_CommonTermsQuery_get__coordDisabled(t_CommonTermsQuery *self, void *data);
        static PyObject *t_CommonTermsQuery_get__highFreqMinimumNumberShouldMatch(t_CommonTermsQuery *self, void *data);
        static int t_CommonTermsQuery_set__highFreqMinimumNumberShouldMatch(t_CommonTermsQuery *self, PyObject *arg, void *data);
        static PyObject *t_CommonTermsQuery_get__lowFreqMinimumNumberShouldMatch(t_CommonTermsQuery *self, void *data);
        static int t_CommonTermsQuery_set__lowFreqMinimumNumberShouldMatch(t_CommonTermsQuery *self, PyObject *arg, void *data);
        static PyGetSetDef t_CommonTermsQuery__fields_[] = {
          DECLARE_GET_FIELD(t_CommonTermsQuery, coordDisabled),
          DECLARE_GETSET_FIELD(t_CommonTermsQuery, highFreqMinimumNumberShouldMatch),
          DECLARE_GETSET_FIELD(t_CommonTermsQuery, lowFreqMinimumNumberShouldMatch),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_CommonTermsQuery__methods_[] = {
          DECLARE_METHOD(t_CommonTermsQuery, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CommonTermsQuery, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CommonTermsQuery, add, METH_O),
          DECLARE_METHOD(t_CommonTermsQuery, collectTermContext, METH_VARARGS),
          DECLARE_METHOD(t_CommonTermsQuery, equals, METH_VARARGS),
          DECLARE_METHOD(t_CommonTermsQuery, extractTerms, METH_VARARGS),
          DECLARE_METHOD(t_CommonTermsQuery, getHighFreqMinimumNumberShouldMatch, METH_NOARGS),
          DECLARE_METHOD(t_CommonTermsQuery, getLowFreqMinimumNumberShouldMatch, METH_NOARGS),
          DECLARE_METHOD(t_CommonTermsQuery, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_CommonTermsQuery, isCoordDisabled, METH_NOARGS),
          DECLARE_METHOD(t_CommonTermsQuery, rewrite, METH_VARARGS),
          DECLARE_METHOD(t_CommonTermsQuery, setHighFreqMinimumNumberShouldMatch, METH_O),
          DECLARE_METHOD(t_CommonTermsQuery, setLowFreqMinimumNumberShouldMatch, METH_O),
          DECLARE_METHOD(t_CommonTermsQuery, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(CommonTermsQuery, t_CommonTermsQuery, ::org::apache::lucene::search::Query, CommonTermsQuery, t_CommonTermsQuery_init_, 0, 0, t_CommonTermsQuery__fields_, 0, 0);

        void t_CommonTermsQuery::install(PyObject *module)
        {
          installType(&PY_TYPE(CommonTermsQuery), module, "CommonTermsQuery", 0);
        }

        void t_CommonTermsQuery::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(CommonTermsQuery).tp_dict, "class_", make_descriptor(CommonTermsQuery::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(CommonTermsQuery).tp_dict, "wrapfn_", make_descriptor(t_CommonTermsQuery::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(CommonTermsQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_CommonTermsQuery_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CommonTermsQuery::initializeClass, 1)))
            return NULL;
          return t_CommonTermsQuery::wrap_Object(CommonTermsQuery(((t_CommonTermsQuery *) arg)->object.this$));
        }
        static PyObject *t_CommonTermsQuery_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CommonTermsQuery::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_CommonTermsQuery_init_(t_CommonTermsQuery *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 3:
            {
              ::org::apache::lucene::search::BooleanClause$Occur a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::search::BooleanClause$Occur a1((jobject) NULL);
              PyTypeObject **p1;
              jfloat a2;
              CommonTermsQuery object((jobject) NULL);

              if (!parseArgs(args, "KKF", ::org::apache::lucene::search::BooleanClause$Occur::initializeClass, ::org::apache::lucene::search::BooleanClause$Occur::initializeClass, &a0, &p0, ::org::apache::lucene::search::t_BooleanClause$Occur::parameters_, &a1, &p1, ::org::apache::lucene::search::t_BooleanClause$Occur::parameters_, &a2))
              {
                INT_CALL(object = CommonTermsQuery(a0, a1, a2));
                self->object = object;
                break;
              }
            }
            goto err;
           case 4:
            {
              ::org::apache::lucene::search::BooleanClause$Occur a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::search::BooleanClause$Occur a1((jobject) NULL);
              PyTypeObject **p1;
              jfloat a2;
              jboolean a3;
              CommonTermsQuery object((jobject) NULL);

              if (!parseArgs(args, "KKFZ", ::org::apache::lucene::search::BooleanClause$Occur::initializeClass, ::org::apache::lucene::search::BooleanClause$Occur::initializeClass, &a0, &p0, ::org::apache::lucene::search::t_BooleanClause$Occur::parameters_, &a1, &p1, ::org::apache::lucene::search::t_BooleanClause$Occur::parameters_, &a2, &a3))
              {
                INT_CALL(object = CommonTermsQuery(a0, a1, a2, a3));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_CommonTermsQuery_add(t_CommonTermsQuery *self, PyObject *arg)
        {
          ::org::apache::lucene::index::Term a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::Term::initializeClass, &a0))
          {
            OBJ_CALL(self->object.add(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "add", arg);
          return NULL;
        }

        static PyObject *t_CommonTermsQuery_collectTermContext(t_CommonTermsQuery *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::java::util::List a1((jobject) NULL);
          PyTypeObject **p1;
          JArray< ::org::apache::lucene::index::TermContext > a2((jobject) NULL);
          JArray< ::org::apache::lucene::index::Term > a3((jobject) NULL);

          if (!parseArgs(args, "kK[k[k", ::org::apache::lucene::index::IndexReader::initializeClass, ::java::util::List::initializeClass, ::org::apache::lucene::index::TermContext::initializeClass, ::org::apache::lucene::index::Term::initializeClass, &a0, &a1, &p1, ::java::util::t_List::parameters_, &a2, &a3))
          {
            OBJ_CALL(self->object.collectTermContext(a0, a1, a2, a3));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "collectTermContext", args);
          return NULL;
        }

        static PyObject *t_CommonTermsQuery_equals(t_CommonTermsQuery *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(CommonTermsQuery), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_CommonTermsQuery_extractTerms(t_CommonTermsQuery *self, PyObject *args)
        {
          ::java::util::Set a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArgs(args, "K", ::java::util::Set::initializeClass, &a0, &p0, ::java::util::t_Set::parameters_))
          {
            OBJ_CALL(self->object.extractTerms(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(CommonTermsQuery), (PyObject *) self, "extractTerms", args, 2);
        }

        static PyObject *t_CommonTermsQuery_getHighFreqMinimumNumberShouldMatch(t_CommonTermsQuery *self)
        {
          jfloat result;
          OBJ_CALL(result = self->object.getHighFreqMinimumNumberShouldMatch());
          return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_CommonTermsQuery_getLowFreqMinimumNumberShouldMatch(t_CommonTermsQuery *self)
        {
          jfloat result;
          OBJ_CALL(result = self->object.getLowFreqMinimumNumberShouldMatch());
          return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_CommonTermsQuery_hashCode(t_CommonTermsQuery *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(CommonTermsQuery), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_CommonTermsQuery_isCoordDisabled(t_CommonTermsQuery *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.isCoordDisabled());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_CommonTermsQuery_rewrite(t_CommonTermsQuery *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.rewrite(a0));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(CommonTermsQuery), (PyObject *) self, "rewrite", args, 2);
        }

        static PyObject *t_CommonTermsQuery_setHighFreqMinimumNumberShouldMatch(t_CommonTermsQuery *self, PyObject *arg)
        {
          jfloat a0;

          if (!parseArg(arg, "F", &a0))
          {
            OBJ_CALL(self->object.setHighFreqMinimumNumberShouldMatch(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setHighFreqMinimumNumberShouldMatch", arg);
          return NULL;
        }

        static PyObject *t_CommonTermsQuery_setLowFreqMinimumNumberShouldMatch(t_CommonTermsQuery *self, PyObject *arg)
        {
          jfloat a0;

          if (!parseArg(arg, "F", &a0))
          {
            OBJ_CALL(self->object.setLowFreqMinimumNumberShouldMatch(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setLowFreqMinimumNumberShouldMatch", arg);
          return NULL;
        }

        static PyObject *t_CommonTermsQuery_toString(t_CommonTermsQuery *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.toString(a0));
            return j2p(result);
          }

          return callSuper(&PY_TYPE(CommonTermsQuery), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_CommonTermsQuery_get__coordDisabled(t_CommonTermsQuery *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.isCoordDisabled());
          Py_RETURN_BOOL(value);
        }

        static PyObject *t_CommonTermsQuery_get__highFreqMinimumNumberShouldMatch(t_CommonTermsQuery *self, void *data)
        {
          jfloat value;
          OBJ_CALL(value = self->object.getHighFreqMinimumNumberShouldMatch());
          return PyFloat_FromDouble((double) value);
        }
        static int t_CommonTermsQuery_set__highFreqMinimumNumberShouldMatch(t_CommonTermsQuery *self, PyObject *arg, void *data)
        {
          {
            jfloat value;
            if (!parseArg(arg, "F", &value))
            {
              INT_CALL(self->object.setHighFreqMinimumNumberShouldMatch(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "highFreqMinimumNumberShouldMatch", arg);
          return -1;
        }

        static PyObject *t_CommonTermsQuery_get__lowFreqMinimumNumberShouldMatch(t_CommonTermsQuery *self, void *data)
        {
          jfloat value;
          OBJ_CALL(value = self->object.getLowFreqMinimumNumberShouldMatch());
          return PyFloat_FromDouble((double) value);
        }
        static int t_CommonTermsQuery_set__lowFreqMinimumNumberShouldMatch(t_CommonTermsQuery *self, PyObject *arg, void *data)
        {
          {
            jfloat value;
            if (!parseArg(arg, "F", &value))
            {
              INT_CALL(self->object.setLowFreqMinimumNumberShouldMatch(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "lowFreqMinimumNumberShouldMatch", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/MaxNonCompetitiveBoostAttribute.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *MaxNonCompetitiveBoostAttribute::class$ = NULL;
        jmethodID *MaxNonCompetitiveBoostAttribute::mids$ = NULL;
        bool MaxNonCompetitiveBoostAttribute::live$ = false;

        jclass MaxNonCompetitiveBoostAttribute::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/MaxNonCompetitiveBoostAttribute");

            mids$ = new jmethodID[max_mid];
            mids$[mid_getCompetitiveTerm_4ae19461] = env->getMethodID(cls, "getCompetitiveTerm", "()Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_getMaxNonCompetitiveBoost_54c6a176] = env->getMethodID(cls, "getMaxNonCompetitiveBoost", "()F");
            mids$[mid_setCompetitiveTerm_7bc03dc4] = env->getMethodID(cls, "setCompetitiveTerm", "(Lorg/apache/lucene/util/BytesRef;)V");
            mids$[mid_setMaxNonCompetitiveBoost_06298cab] = env->getMethodID(cls, "setMaxNonCompetitiveBoost", "(F)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::util::BytesRef MaxNonCompetitiveBoostAttribute::getCompetitiveTerm() const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_getCompetitiveTerm_4ae19461]));
        }

        jfloat MaxNonCompetitiveBoostAttribute::getMaxNonCompetitiveBoost() const
        {
          return env->callFloatMethod(this$, mids$[mid_getMaxNonCompetitiveBoost_54c6a176]);
        }

        void MaxNonCompetitiveBoostAttribute::setCompetitiveTerm(const ::org::apache::lucene::util::BytesRef & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setCompetitiveTerm_7bc03dc4], a0.this$);
        }

        void MaxNonCompetitiveBoostAttribute::setMaxNonCompetitiveBoost(jfloat a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setMaxNonCompetitiveBoost_06298cab], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_MaxNonCompetitiveBoostAttribute_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MaxNonCompetitiveBoostAttribute_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MaxNonCompetitiveBoostAttribute_getCompetitiveTerm(t_MaxNonCompetitiveBoostAttribute *self);
        static PyObject *t_MaxNonCompetitiveBoostAttribute_getMaxNonCompetitiveBoost(t_MaxNonCompetitiveBoostAttribute *self);
        static PyObject *t_MaxNonCompetitiveBoostAttribute_setCompetitiveTerm(t_MaxNonCompetitiveBoostAttribute *self, PyObject *arg);
        static PyObject *t_MaxNonCompetitiveBoostAttribute_setMaxNonCompetitiveBoost(t_MaxNonCompetitiveBoostAttribute *self, PyObject *arg);
        static PyObject *t_MaxNonCompetitiveBoostAttribute_get__competitiveTerm(t_MaxNonCompetitiveBoostAttribute *self, void *data);
        static int t_MaxNonCompetitiveBoostAttribute_set__competitiveTerm(t_MaxNonCompetitiveBoostAttribute *self, PyObject *arg, void *data);
        static PyObject *t_MaxNonCompetitiveBoostAttribute_get__maxNonCompetitiveBoost(t_MaxNonCompetitiveBoostAttribute *self, void *data);
        static int t_MaxNonCompetitiveBoostAttribute_set__maxNonCompetitiveBoost(t_MaxNonCompetitiveBoostAttribute *self, PyObject *arg, void *data);
        static PyGetSetDef t_MaxNonCompetitiveBoostAttribute__fields_[] = {
          DECLARE_GETSET_FIELD(t_MaxNonCompetitiveBoostAttribute, competitiveTerm),
          DECLARE_GETSET_FIELD(t_MaxNonCompetitiveBoostAttribute, maxNonCompetitiveBoost),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_MaxNonCompetitiveBoostAttribute__methods_[] = {
          DECLARE_METHOD(t_MaxNonCompetitiveBoostAttribute, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MaxNonCompetitiveBoostAttribute, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MaxNonCompetitiveBoostAttribute, getCompetitiveTerm, METH_NOARGS),
          DECLARE_METHOD(t_MaxNonCompetitiveBoostAttribute, getMaxNonCompetitiveBoost, METH_NOARGS),
          DECLARE_METHOD(t_MaxNonCompetitiveBoostAttribute, setCompetitiveTerm, METH_O),
          DECLARE_METHOD(t_MaxNonCompetitiveBoostAttribute, setMaxNonCompetitiveBoost, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MaxNonCompetitiveBoostAttribute, t_MaxNonCompetitiveBoostAttribute, ::org::apache::lucene::util::Attribute, MaxNonCompetitiveBoostAttribute, abstract_init, 0, 0, t_MaxNonCompetitiveBoostAttribute__fields_, 0, 0);

        void t_MaxNonCompetitiveBoostAttribute::install(PyObject *module)
        {
          installType(&PY_TYPE(MaxNonCompetitiveBoostAttribute), module, "MaxNonCompetitiveBoostAttribute", 0);
        }

        void t_MaxNonCompetitiveBoostAttribute::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MaxNonCompetitiveBoostAttribute).tp_dict, "class_", make_descriptor(MaxNonCompetitiveBoostAttribute::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MaxNonCompetitiveBoostAttribute).tp_dict, "wrapfn_", make_descriptor(t_MaxNonCompetitiveBoostAttribute::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MaxNonCompetitiveBoostAttribute).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MaxNonCompetitiveBoostAttribute_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MaxNonCompetitiveBoostAttribute::initializeClass, 1)))
            return NULL;
          return t_MaxNonCompetitiveBoostAttribute::wrap_Object(MaxNonCompetitiveBoostAttribute(((t_MaxNonCompetitiveBoostAttribute *) arg)->object.this$));
        }
        static PyObject *t_MaxNonCompetitiveBoostAttribute_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MaxNonCompetitiveBoostAttribute::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_MaxNonCompetitiveBoostAttribute_getCompetitiveTerm(t_MaxNonCompetitiveBoostAttribute *self)
        {
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);
          OBJ_CALL(result = self->object.getCompetitiveTerm());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
        }

        static PyObject *t_MaxNonCompetitiveBoostAttribute_getMaxNonCompetitiveBoost(t_MaxNonCompetitiveBoostAttribute *self)
        {
          jfloat result;
          OBJ_CALL(result = self->object.getMaxNonCompetitiveBoost());
          return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_MaxNonCompetitiveBoostAttribute_setCompetitiveTerm(t_MaxNonCompetitiveBoostAttribute *self, PyObject *arg)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setCompetitiveTerm(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setCompetitiveTerm", arg);
          return NULL;
        }

        static PyObject *t_MaxNonCompetitiveBoostAttribute_setMaxNonCompetitiveBoost(t_MaxNonCompetitiveBoostAttribute *self, PyObject *arg)
        {
          jfloat a0;

          if (!parseArg(arg, "F", &a0))
          {
            OBJ_CALL(self->object.setMaxNonCompetitiveBoost(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setMaxNonCompetitiveBoost", arg);
          return NULL;
        }

        static PyObject *t_MaxNonCompetitiveBoostAttribute_get__competitiveTerm(t_MaxNonCompetitiveBoostAttribute *self, void *data)
        {
          ::org::apache::lucene::util::BytesRef value((jobject) NULL);
          OBJ_CALL(value = self->object.getCompetitiveTerm());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(value);
        }
        static int t_MaxNonCompetitiveBoostAttribute_set__competitiveTerm(t_MaxNonCompetitiveBoostAttribute *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::util::BytesRef value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &value))
            {
              INT_CALL(self->object.setCompetitiveTerm(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "competitiveTerm", arg);
          return -1;
        }

        static PyObject *t_MaxNonCompetitiveBoostAttribute_get__maxNonCompetitiveBoost(t_MaxNonCompetitiveBoostAttribute *self, void *data)
        {
          jfloat value;
          OBJ_CALL(value = self->object.getMaxNonCompetitiveBoost());
          return PyFloat_FromDouble((double) value);
        }
        static int t_MaxNonCompetitiveBoostAttribute_set__maxNonCompetitiveBoost(t_MaxNonCompetitiveBoostAttribute *self, PyObject *arg, void *data)
        {
          {
            jfloat value;
            if (!parseArg(arg, "F", &value))
            {
              INT_CALL(self->object.setMaxNonCompetitiveBoost(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "maxNonCompetitiveBoost", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/WordDelimiterFilter.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *WordDelimiterFilter::class$ = NULL;
          jmethodID *WordDelimiterFilter::mids$ = NULL;
          bool WordDelimiterFilter::live$ = false;
          jint WordDelimiterFilter::ALPHA = (jint) 0;
          jint WordDelimiterFilter::ALPHANUM = (jint) 0;
          jint WordDelimiterFilter::CATENATE_ALL = (jint) 0;
          jint WordDelimiterFilter::CATENATE_NUMBERS = (jint) 0;
          jint WordDelimiterFilter::CATENATE_WORDS = (jint) 0;
          jint WordDelimiterFilter::DIGIT = (jint) 0;
          jint WordDelimiterFilter::GENERATE_NUMBER_PARTS = (jint) 0;
          jint WordDelimiterFilter::GENERATE_WORD_PARTS = (jint) 0;
          jint WordDelimiterFilter::LOWER = (jint) 0;
          jint WordDelimiterFilter::PRESERVE_ORIGINAL = (jint) 0;
          jint WordDelimiterFilter::SPLIT_ON_CASE_CHANGE = (jint) 0;
          jint WordDelimiterFilter::SPLIT_ON_NUMERICS = (jint) 0;
          jint WordDelimiterFilter::STEM_ENGLISH_POSSESSIVE = (jint) 0;
          jint WordDelimiterFilter::SUBWORD_DELIM = (jint) 0;
          jint WordDelimiterFilter::UPPER = (jint) 0;

          jclass WordDelimiterFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/WordDelimiterFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_70257dbd] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;ILorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_635fa7aa] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/TokenStream;ILorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_06e41d2a] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;[BILorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_9bd98551] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/TokenStream;[BILorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              ALPHA = env->getStaticIntField(cls, "ALPHA");
              ALPHANUM = env->getStaticIntField(cls, "ALPHANUM");
              CATENATE_ALL = env->getStaticIntField(cls, "CATENATE_ALL");
              CATENATE_NUMBERS = env->getStaticIntField(cls, "CATENATE_NUMBERS");
              CATENATE_WORDS = env->getStaticIntField(cls, "CATENATE_WORDS");
              DIGIT = env->getStaticIntField(cls, "DIGIT");
              GENERATE_NUMBER_PARTS = env->getStaticIntField(cls, "GENERATE_NUMBER_PARTS");
              GENERATE_WORD_PARTS = env->getStaticIntField(cls, "GENERATE_WORD_PARTS");
              LOWER = env->getStaticIntField(cls, "LOWER");
              PRESERVE_ORIGINAL = env->getStaticIntField(cls, "PRESERVE_ORIGINAL");
              SPLIT_ON_CASE_CHANGE = env->getStaticIntField(cls, "SPLIT_ON_CASE_CHANGE");
              SPLIT_ON_NUMERICS = env->getStaticIntField(cls, "SPLIT_ON_NUMERICS");
              STEM_ENGLISH_POSSESSIVE = env->getStaticIntField(cls, "STEM_ENGLISH_POSSESSIVE");
              SUBWORD_DELIM = env->getStaticIntField(cls, "SUBWORD_DELIM");
              UPPER = env->getStaticIntField(cls, "UPPER");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          WordDelimiterFilter::WordDelimiterFilter(const ::org::apache::lucene::analysis::TokenStream & a0, jint a1, const ::org::apache::lucene::analysis::util::CharArraySet & a2) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_70257dbd, a0.this$, a1, a2.this$)) {}

          WordDelimiterFilter::WordDelimiterFilter(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::TokenStream & a1, jint a2, const ::org::apache::lucene::analysis::util::CharArraySet & a3) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_635fa7aa, a0.this$, a1.this$, a2, a3.this$)) {}

          WordDelimiterFilter::WordDelimiterFilter(const ::org::apache::lucene::analysis::TokenStream & a0, const JArray< jbyte > & a1, jint a2, const ::org::apache::lucene::analysis::util::CharArraySet & a3) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_06e41d2a, a0.this$, a1.this$, a2, a3.this$)) {}

          WordDelimiterFilter::WordDelimiterFilter(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::TokenStream & a1, const JArray< jbyte > & a2, jint a3, const ::org::apache::lucene::analysis::util::CharArraySet & a4) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_9bd98551, a0.this$, a1.this$, a2.this$, a3, a4.this$)) {}

          jboolean WordDelimiterFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void WordDelimiterFilter::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_WordDelimiterFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_WordDelimiterFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_WordDelimiterFilter_init_(t_WordDelimiterFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_WordDelimiterFilter_incrementToken(t_WordDelimiterFilter *self, PyObject *args);
          static PyObject *t_WordDelimiterFilter_reset(t_WordDelimiterFilter *self, PyObject *args);

          static PyMethodDef t_WordDelimiterFilter__methods_[] = {
            DECLARE_METHOD(t_WordDelimiterFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_WordDelimiterFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_WordDelimiterFilter, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_WordDelimiterFilter, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(WordDelimiterFilter, t_WordDelimiterFilter, ::org::apache::lucene::analysis::TokenFilter, WordDelimiterFilter, t_WordDelimiterFilter_init_, 0, 0, 0, 0, 0);

          void t_WordDelimiterFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(WordDelimiterFilter), module, "WordDelimiterFilter", 0);
          }

          void t_WordDelimiterFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(WordDelimiterFilter).tp_dict, "class_", make_descriptor(WordDelimiterFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(WordDelimiterFilter).tp_dict, "wrapfn_", make_descriptor(t_WordDelimiterFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(WordDelimiterFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(WordDelimiterFilter::initializeClass);
            PyDict_SetItemString(PY_TYPE(WordDelimiterFilter).tp_dict, "ALPHA", make_descriptor(WordDelimiterFilter::ALPHA));
            PyDict_SetItemString(PY_TYPE(WordDelimiterFilter).tp_dict, "ALPHANUM", make_descriptor(WordDelimiterFilter::ALPHANUM));
            PyDict_SetItemString(PY_TYPE(WordDelimiterFilter).tp_dict, "CATENATE_ALL", make_descriptor(WordDelimiterFilter::CATENATE_ALL));
            PyDict_SetItemString(PY_TYPE(WordDelimiterFilter).tp_dict, "CATENATE_NUMBERS", make_descriptor(WordDelimiterFilter::CATENATE_NUMBERS));
            PyDict_SetItemString(PY_TYPE(WordDelimiterFilter).tp_dict, "CATENATE_WORDS", make_descriptor(WordDelimiterFilter::CATENATE_WORDS));
            PyDict_SetItemString(PY_TYPE(WordDelimiterFilter).tp_dict, "DIGIT", make_descriptor(WordDelimiterFilter::DIGIT));
            PyDict_SetItemString(PY_TYPE(WordDelimiterFilter).tp_dict, "GENERATE_NUMBER_PARTS", make_descriptor(WordDelimiterFilter::GENERATE_NUMBER_PARTS));
            PyDict_SetItemString(PY_TYPE(WordDelimiterFilter).tp_dict, "GENERATE_WORD_PARTS", make_descriptor(WordDelimiterFilter::GENERATE_WORD_PARTS));
            PyDict_SetItemString(PY_TYPE(WordDelimiterFilter).tp_dict, "LOWER", make_descriptor(WordDelimiterFilter::LOWER));
            PyDict_SetItemString(PY_TYPE(WordDelimiterFilter).tp_dict, "PRESERVE_ORIGINAL", make_descriptor(WordDelimiterFilter::PRESERVE_ORIGINAL));
            PyDict_SetItemString(PY_TYPE(WordDelimiterFilter).tp_dict, "SPLIT_ON_CASE_CHANGE", make_descriptor(WordDelimiterFilter::SPLIT_ON_CASE_CHANGE));
            PyDict_SetItemString(PY_TYPE(WordDelimiterFilter).tp_dict, "SPLIT_ON_NUMERICS", make_descriptor(WordDelimiterFilter::SPLIT_ON_NUMERICS));
            PyDict_SetItemString(PY_TYPE(WordDelimiterFilter).tp_dict, "STEM_ENGLISH_POSSESSIVE", make_descriptor(WordDelimiterFilter::STEM_ENGLISH_POSSESSIVE));
            PyDict_SetItemString(PY_TYPE(WordDelimiterFilter).tp_dict, "SUBWORD_DELIM", make_descriptor(WordDelimiterFilter::SUBWORD_DELIM));
            PyDict_SetItemString(PY_TYPE(WordDelimiterFilter).tp_dict, "UPPER", make_descriptor(WordDelimiterFilter::UPPER));
          }

          static PyObject *t_WordDelimiterFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, WordDelimiterFilter::initializeClass, 1)))
              return NULL;
            return t_WordDelimiterFilter::wrap_Object(WordDelimiterFilter(((t_WordDelimiterFilter *) arg)->object.this$));
          }
          static PyObject *t_WordDelimiterFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, WordDelimiterFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_WordDelimiterFilter_init_(t_WordDelimiterFilter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 3:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                jint a1;
                ::org::apache::lucene::analysis::util::CharArraySet a2((jobject) NULL);
                PyTypeObject **p2;
                WordDelimiterFilter object((jobject) NULL);

                if (!parseArgs(args, "kIK", ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &a1, &a2, &p2, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = WordDelimiterFilter(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 4:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
                jint a2;
                ::org::apache::lucene::analysis::util::CharArraySet a3((jobject) NULL);
                PyTypeObject **p3;
                WordDelimiterFilter object((jobject) NULL);

                if (!parseArgs(args, "kkIK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &a1, &a2, &a3, &p3, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = WordDelimiterFilter(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                JArray< jbyte > a1((jobject) NULL);
                jint a2;
                ::org::apache::lucene::analysis::util::CharArraySet a3((jobject) NULL);
                PyTypeObject **p3;
                WordDelimiterFilter object((jobject) NULL);

                if (!parseArgs(args, "k[BIK", ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &a1, &a2, &a3, &p3, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = WordDelimiterFilter(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 5:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
                JArray< jbyte > a2((jobject) NULL);
                jint a3;
                ::org::apache::lucene::analysis::util::CharArraySet a4((jobject) NULL);
                PyTypeObject **p4;
                WordDelimiterFilter object((jobject) NULL);

                if (!parseArgs(args, "kk[BIK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &a1, &a2, &a3, &a4, &p4, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = WordDelimiterFilter(a0, a1, a2, a3, a4));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_WordDelimiterFilter_incrementToken(t_WordDelimiterFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(WordDelimiterFilter), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_WordDelimiterFilter_reset(t_WordDelimiterFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(WordDelimiterFilter), (PyObject *) self, "reset", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/shingle/ShingleFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace shingle {

          ::java::lang::Class *ShingleFilter::class$ = NULL;
          jmethodID *ShingleFilter::mids$ = NULL;
          bool ShingleFilter::live$ = false;
          ::java::lang::String *ShingleFilter::DEFAULT_FILLER_TOKEN = NULL;
          jint ShingleFilter::DEFAULT_MAX_SHINGLE_SIZE = (jint) 0;
          jint ShingleFilter::DEFAULT_MIN_SHINGLE_SIZE = (jint) 0;
          ::java::lang::String *ShingleFilter::DEFAULT_TOKEN_SEPARATOR = NULL;
          ::java::lang::String *ShingleFilter::DEFAULT_TOKEN_TYPE = NULL;

          jclass ShingleFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/shingle/ShingleFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_init$_be0a1066] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;Ljava/lang/String;)V");
              mids$[mid_init$_d53bcf42] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;I)V");
              mids$[mid_init$_7f9e10a8] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;II)V");
              mids$[mid_end_54c6a166] = env->getMethodID(cls, "end", "()V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");
              mids$[mid_setFillerToken_5fdc3f48] = env->getMethodID(cls, "setFillerToken", "(Ljava/lang/String;)V");
              mids$[mid_setMaxShingleSize_39c7bd3c] = env->getMethodID(cls, "setMaxShingleSize", "(I)V");
              mids$[mid_setMinShingleSize_39c7bd3c] = env->getMethodID(cls, "setMinShingleSize", "(I)V");
              mids$[mid_setOutputUnigrams_bb0c767f] = env->getMethodID(cls, "setOutputUnigrams", "(Z)V");
              mids$[mid_setOutputUnigramsIfNoShingles_bb0c767f] = env->getMethodID(cls, "setOutputUnigramsIfNoShingles", "(Z)V");
              mids$[mid_setTokenSeparator_5fdc3f48] = env->getMethodID(cls, "setTokenSeparator", "(Ljava/lang/String;)V");
              mids$[mid_setTokenType_5fdc3f48] = env->getMethodID(cls, "setTokenType", "(Ljava/lang/String;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_FILLER_TOKEN = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_FILLER_TOKEN", "Ljava/lang/String;"));
              DEFAULT_MAX_SHINGLE_SIZE = env->getStaticIntField(cls, "DEFAULT_MAX_SHINGLE_SIZE");
              DEFAULT_MIN_SHINGLE_SIZE = env->getStaticIntField(cls, "DEFAULT_MIN_SHINGLE_SIZE");
              DEFAULT_TOKEN_SEPARATOR = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_TOKEN_SEPARATOR", "Ljava/lang/String;"));
              DEFAULT_TOKEN_TYPE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_TOKEN_TYPE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ShingleFilter::ShingleFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          ShingleFilter::ShingleFilter(const ::org::apache::lucene::analysis::TokenStream & a0, const ::java::lang::String & a1) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_be0a1066, a0.this$, a1.this$)) {}

          ShingleFilter::ShingleFilter(const ::org::apache::lucene::analysis::TokenStream & a0, jint a1) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_d53bcf42, a0.this$, a1)) {}

          ShingleFilter::ShingleFilter(const ::org::apache::lucene::analysis::TokenStream & a0, jint a1, jint a2) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_7f9e10a8, a0.this$, a1, a2)) {}

          void ShingleFilter::end() const
          {
            env->callVoidMethod(this$, mids$[mid_end_54c6a166]);
          }

          jboolean ShingleFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void ShingleFilter::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }

          void ShingleFilter::setFillerToken(const ::java::lang::String & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setFillerToken_5fdc3f48], a0.this$);
          }

          void ShingleFilter::setMaxShingleSize(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMaxShingleSize_39c7bd3c], a0);
          }

          void ShingleFilter::setMinShingleSize(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMinShingleSize_39c7bd3c], a0);
          }

          void ShingleFilter::setOutputUnigrams(jboolean a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setOutputUnigrams_bb0c767f], a0);
          }

          void ShingleFilter::setOutputUnigramsIfNoShingles(jboolean a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setOutputUnigramsIfNoShingles_bb0c767f], a0);
          }

          void ShingleFilter::setTokenSeparator(const ::java::lang::String & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setTokenSeparator_5fdc3f48], a0.this$);
          }

          void ShingleFilter::setTokenType(const ::java::lang::String & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setTokenType_5fdc3f48], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace shingle {
          static PyObject *t_ShingleFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ShingleFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ShingleFilter_init_(t_ShingleFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ShingleFilter_end(t_ShingleFilter *self, PyObject *args);
          static PyObject *t_ShingleFilter_incrementToken(t_ShingleFilter *self, PyObject *args);
          static PyObject *t_ShingleFilter_reset(t_ShingleFilter *self, PyObject *args);
          static PyObject *t_ShingleFilter_setFillerToken(t_ShingleFilter *self, PyObject *arg);
          static PyObject *t_ShingleFilter_setMaxShingleSize(t_ShingleFilter *self, PyObject *arg);
          static PyObject *t_ShingleFilter_setMinShingleSize(t_ShingleFilter *self, PyObject *arg);
          static PyObject *t_ShingleFilter_setOutputUnigrams(t_ShingleFilter *self, PyObject *arg);
          static PyObject *t_ShingleFilter_setOutputUnigramsIfNoShingles(t_ShingleFilter *self, PyObject *arg);
          static PyObject *t_ShingleFilter_setTokenSeparator(t_ShingleFilter *self, PyObject *arg);
          static PyObject *t_ShingleFilter_setTokenType(t_ShingleFilter *self, PyObject *arg);
          static int t_ShingleFilter_set__fillerToken(t_ShingleFilter *self, PyObject *arg, void *data);
          static int t_ShingleFilter_set__maxShingleSize(t_ShingleFilter *self, PyObject *arg, void *data);
          static int t_ShingleFilter_set__minShingleSize(t_ShingleFilter *self, PyObject *arg, void *data);
          static int t_ShingleFilter_set__outputUnigrams(t_ShingleFilter *self, PyObject *arg, void *data);
          static int t_ShingleFilter_set__outputUnigramsIfNoShingles(t_ShingleFilter *self, PyObject *arg, void *data);
          static int t_ShingleFilter_set__tokenSeparator(t_ShingleFilter *self, PyObject *arg, void *data);
          static int t_ShingleFilter_set__tokenType(t_ShingleFilter *self, PyObject *arg, void *data);
          static PyGetSetDef t_ShingleFilter__fields_[] = {
            DECLARE_SET_FIELD(t_ShingleFilter, fillerToken),
            DECLARE_SET_FIELD(t_ShingleFilter, maxShingleSize),
            DECLARE_SET_FIELD(t_ShingleFilter, minShingleSize),
            DECLARE_SET_FIELD(t_ShingleFilter, outputUnigrams),
            DECLARE_SET_FIELD(t_ShingleFilter, outputUnigramsIfNoShingles),
            DECLARE_SET_FIELD(t_ShingleFilter, tokenSeparator),
            DECLARE_SET_FIELD(t_ShingleFilter, tokenType),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_ShingleFilter__methods_[] = {
            DECLARE_METHOD(t_ShingleFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ShingleFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ShingleFilter, end, METH_VARARGS),
            DECLARE_METHOD(t_ShingleFilter, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_ShingleFilter, reset, METH_VARARGS),
            DECLARE_METHOD(t_ShingleFilter, setFillerToken, METH_O),
            DECLARE_METHOD(t_ShingleFilter, setMaxShingleSize, METH_O),
            DECLARE_METHOD(t_ShingleFilter, setMinShingleSize, METH_O),
            DECLARE_METHOD(t_ShingleFilter, setOutputUnigrams, METH_O),
            DECLARE_METHOD(t_ShingleFilter, setOutputUnigramsIfNoShingles, METH_O),
            DECLARE_METHOD(t_ShingleFilter, setTokenSeparator, METH_O),
            DECLARE_METHOD(t_ShingleFilter, setTokenType, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ShingleFilter, t_ShingleFilter, ::org::apache::lucene::analysis::TokenFilter, ShingleFilter, t_ShingleFilter_init_, 0, 0, t_ShingleFilter__fields_, 0, 0);

          void t_ShingleFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(ShingleFilter), module, "ShingleFilter", 0);
          }

          void t_ShingleFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ShingleFilter).tp_dict, "class_", make_descriptor(ShingleFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ShingleFilter).tp_dict, "wrapfn_", make_descriptor(t_ShingleFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ShingleFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(ShingleFilter::initializeClass);
            PyDict_SetItemString(PY_TYPE(ShingleFilter).tp_dict, "DEFAULT_FILLER_TOKEN", make_descriptor(j2p(*ShingleFilter::DEFAULT_FILLER_TOKEN)));
            PyDict_SetItemString(PY_TYPE(ShingleFilter).tp_dict, "DEFAULT_MAX_SHINGLE_SIZE", make_descriptor(ShingleFilter::DEFAULT_MAX_SHINGLE_SIZE));
            PyDict_SetItemString(PY_TYPE(ShingleFilter).tp_dict, "DEFAULT_MIN_SHINGLE_SIZE", make_descriptor(ShingleFilter::DEFAULT_MIN_SHINGLE_SIZE));
            PyDict_SetItemString(PY_TYPE(ShingleFilter).tp_dict, "DEFAULT_TOKEN_SEPARATOR", make_descriptor(j2p(*ShingleFilter::DEFAULT_TOKEN_SEPARATOR)));
            PyDict_SetItemString(PY_TYPE(ShingleFilter).tp_dict, "DEFAULT_TOKEN_TYPE", make_descriptor(j2p(*ShingleFilter::DEFAULT_TOKEN_TYPE)));
          }

          static PyObject *t_ShingleFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ShingleFilter::initializeClass, 1)))
              return NULL;
            return t_ShingleFilter::wrap_Object(ShingleFilter(((t_ShingleFilter *) arg)->object.this$));
          }
          static PyObject *t_ShingleFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ShingleFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ShingleFilter_init_(t_ShingleFilter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                ShingleFilter object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
                {
                  INT_CALL(object = ShingleFilter(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                ShingleFilter object((jobject) NULL);

                if (!parseArgs(args, "ks", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = ShingleFilter(a0, a1));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                jint a1;
                ShingleFilter object((jobject) NULL);

                if (!parseArgs(args, "kI", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = ShingleFilter(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                jint a1;
                jint a2;
                ShingleFilter object((jobject) NULL);

                if (!parseArgs(args, "kII", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = ShingleFilter(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ShingleFilter_end(t_ShingleFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.end());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(ShingleFilter), (PyObject *) self, "end", args, 2);
          }

          static PyObject *t_ShingleFilter_incrementToken(t_ShingleFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(ShingleFilter), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_ShingleFilter_reset(t_ShingleFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(ShingleFilter), (PyObject *) self, "reset", args, 2);
          }

          static PyObject *t_ShingleFilter_setFillerToken(t_ShingleFilter *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(self->object.setFillerToken(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setFillerToken", arg);
            return NULL;
          }

          static PyObject *t_ShingleFilter_setMaxShingleSize(t_ShingleFilter *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setMaxShingleSize(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMaxShingleSize", arg);
            return NULL;
          }

          static PyObject *t_ShingleFilter_setMinShingleSize(t_ShingleFilter *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setMinShingleSize(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMinShingleSize", arg);
            return NULL;
          }

          static PyObject *t_ShingleFilter_setOutputUnigrams(t_ShingleFilter *self, PyObject *arg)
          {
            jboolean a0;

            if (!parseArg(arg, "Z", &a0))
            {
              OBJ_CALL(self->object.setOutputUnigrams(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setOutputUnigrams", arg);
            return NULL;
          }

          static PyObject *t_ShingleFilter_setOutputUnigramsIfNoShingles(t_ShingleFilter *self, PyObject *arg)
          {
            jboolean a0;

            if (!parseArg(arg, "Z", &a0))
            {
              OBJ_CALL(self->object.setOutputUnigramsIfNoShingles(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setOutputUnigramsIfNoShingles", arg);
            return NULL;
          }

          static PyObject *t_ShingleFilter_setTokenSeparator(t_ShingleFilter *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(self->object.setTokenSeparator(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setTokenSeparator", arg);
            return NULL;
          }

          static PyObject *t_ShingleFilter_setTokenType(t_ShingleFilter *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(self->object.setTokenType(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setTokenType", arg);
            return NULL;
          }

          static int t_ShingleFilter_set__fillerToken(t_ShingleFilter *self, PyObject *arg, void *data)
          {
            {
              ::java::lang::String value((jobject) NULL);
              if (!parseArg(arg, "s", &value))
              {
                INT_CALL(self->object.setFillerToken(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "fillerToken", arg);
            return -1;
          }

          static int t_ShingleFilter_set__maxShingleSize(t_ShingleFilter *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setMaxShingleSize(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "maxShingleSize", arg);
            return -1;
          }

          static int t_ShingleFilter_set__minShingleSize(t_ShingleFilter *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setMinShingleSize(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "minShingleSize", arg);
            return -1;
          }

          static int t_ShingleFilter_set__outputUnigrams(t_ShingleFilter *self, PyObject *arg, void *data)
          {
            {
              jboolean value;
              if (!parseArg(arg, "Z", &value))
              {
                INT_CALL(self->object.setOutputUnigrams(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "outputUnigrams", arg);
            return -1;
          }

          static int t_ShingleFilter_set__outputUnigramsIfNoShingles(t_ShingleFilter *self, PyObject *arg, void *data)
          {
            {
              jboolean value;
              if (!parseArg(arg, "Z", &value))
              {
                INT_CALL(self->object.setOutputUnigramsIfNoShingles(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "outputUnigramsIfNoShingles", arg);
            return -1;
          }

          static int t_ShingleFilter_set__tokenSeparator(t_ShingleFilter *self, PyObject *arg, void *data)
          {
            {
              ::java::lang::String value((jobject) NULL);
              if (!parseArg(arg, "s", &value))
              {
                INT_CALL(self->object.setTokenSeparator(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "tokenSeparator", arg);
            return -1;
          }

          static int t_ShingleFilter_set__tokenType(t_ShingleFilter *self, PyObject *arg, void *data)
          {
            {
              ::java::lang::String value((jobject) NULL);
              if (!parseArg(arg, "s", &value))
              {
                INT_CALL(self->object.setTokenType(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "tokenType", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/grouping/AbstractGroupFacetCollector.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/grouping/AbstractGroupFacetCollector$GroupedFacetResult.h"
#include "org/apache/lucene/search/Scorer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {

          ::java::lang::Class *AbstractGroupFacetCollector::class$ = NULL;
          jmethodID *AbstractGroupFacetCollector::mids$ = NULL;
          bool AbstractGroupFacetCollector::live$ = false;

          jclass AbstractGroupFacetCollector::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/grouping/AbstractGroupFacetCollector");

              mids$ = new jmethodID[max_mid];
              mids$[mid_acceptsDocsOutOfOrder_54c6a16a] = env->getMethodID(cls, "acceptsDocsOutOfOrder", "()Z");
              mids$[mid_mergeSegmentResults_e901ef94] = env->getMethodID(cls, "mergeSegmentResults", "(IIZ)Lorg/apache/lucene/search/grouping/AbstractGroupFacetCollector$GroupedFacetResult;");
              mids$[mid_setScorer_8be0880c] = env->getMethodID(cls, "setScorer", "(Lorg/apache/lucene/search/Scorer;)V");
              mids$[mid_createSegmentResult_d8ccc374] = env->getMethodID(cls, "createSegmentResult", "()Lorg/apache/lucene/search/grouping/AbstractGroupFacetCollector$SegmentResult;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jboolean AbstractGroupFacetCollector::acceptsDocsOutOfOrder() const
          {
            return env->callBooleanMethod(this$, mids$[mid_acceptsDocsOutOfOrder_54c6a16a]);
          }

          ::org::apache::lucene::search::grouping::AbstractGroupFacetCollector$GroupedFacetResult AbstractGroupFacetCollector::mergeSegmentResults(jint a0, jint a1, jboolean a2) const
          {
            return ::org::apache::lucene::search::grouping::AbstractGroupFacetCollector$GroupedFacetResult(env->callObjectMethod(this$, mids$[mid_mergeSegmentResults_e901ef94], a0, a1, a2));
          }

          void AbstractGroupFacetCollector::setScorer(const ::org::apache::lucene::search::Scorer & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setScorer_8be0880c], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/search/grouping/AbstractGroupFacetCollector$FacetEntry.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          static PyObject *t_AbstractGroupFacetCollector_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AbstractGroupFacetCollector_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AbstractGroupFacetCollector_acceptsDocsOutOfOrder(t_AbstractGroupFacetCollector *self, PyObject *args);
          static PyObject *t_AbstractGroupFacetCollector_mergeSegmentResults(t_AbstractGroupFacetCollector *self, PyObject *args);
          static PyObject *t_AbstractGroupFacetCollector_setScorer(t_AbstractGroupFacetCollector *self, PyObject *args);
          static int t_AbstractGroupFacetCollector_set__scorer(t_AbstractGroupFacetCollector *self, PyObject *arg, void *data);
          static PyGetSetDef t_AbstractGroupFacetCollector__fields_[] = {
            DECLARE_SET_FIELD(t_AbstractGroupFacetCollector, scorer),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_AbstractGroupFacetCollector__methods_[] = {
            DECLARE_METHOD(t_AbstractGroupFacetCollector, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AbstractGroupFacetCollector, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AbstractGroupFacetCollector, acceptsDocsOutOfOrder, METH_VARARGS),
            DECLARE_METHOD(t_AbstractGroupFacetCollector, mergeSegmentResults, METH_VARARGS),
            DECLARE_METHOD(t_AbstractGroupFacetCollector, setScorer, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(AbstractGroupFacetCollector, t_AbstractGroupFacetCollector, ::org::apache::lucene::search::Collector, AbstractGroupFacetCollector, abstract_init, 0, 0, t_AbstractGroupFacetCollector__fields_, 0, 0);

          void t_AbstractGroupFacetCollector::install(PyObject *module)
          {
            installType(&PY_TYPE(AbstractGroupFacetCollector), module, "AbstractGroupFacetCollector", 0);
            PyDict_SetItemString(PY_TYPE(AbstractGroupFacetCollector).tp_dict, "FacetEntry", make_descriptor(&PY_TYPE(AbstractGroupFacetCollector$FacetEntry)));
            PyDict_SetItemString(PY_TYPE(AbstractGroupFacetCollector).tp_dict, "GroupedFacetResult", make_descriptor(&PY_TYPE(AbstractGroupFacetCollector$GroupedFacetResult)));
          }

          void t_AbstractGroupFacetCollector::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(AbstractGroupFacetCollector).tp_dict, "class_", make_descriptor(AbstractGroupFacetCollector::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(AbstractGroupFacetCollector).tp_dict, "wrapfn_", make_descriptor(t_AbstractGroupFacetCollector::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(AbstractGroupFacetCollector).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_AbstractGroupFacetCollector_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, AbstractGroupFacetCollector::initializeClass, 1)))
              return NULL;
            return t_AbstractGroupFacetCollector::wrap_Object(AbstractGroupFacetCollector(((t_AbstractGroupFacetCollector *) arg)->object.this$));
          }
          static PyObject *t_AbstractGroupFacetCollector_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, AbstractGroupFacetCollector::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_AbstractGroupFacetCollector_acceptsDocsOutOfOrder(t_AbstractGroupFacetCollector *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.acceptsDocsOutOfOrder());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(AbstractGroupFacetCollector), (PyObject *) self, "acceptsDocsOutOfOrder", args, 2);
          }

          static PyObject *t_AbstractGroupFacetCollector_mergeSegmentResults(t_AbstractGroupFacetCollector *self, PyObject *args)
          {
            jint a0;
            jint a1;
            jboolean a2;
            ::org::apache::lucene::search::grouping::AbstractGroupFacetCollector$GroupedFacetResult result((jobject) NULL);

            if (!parseArgs(args, "IIZ", &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.mergeSegmentResults(a0, a1, a2));
              return ::org::apache::lucene::search::grouping::t_AbstractGroupFacetCollector$GroupedFacetResult::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "mergeSegmentResults", args);
            return NULL;
          }

          static PyObject *t_AbstractGroupFacetCollector_setScorer(t_AbstractGroupFacetCollector *self, PyObject *args)
          {
            ::org::apache::lucene::search::Scorer a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::search::Scorer::initializeClass, &a0))
            {
              OBJ_CALL(self->object.setScorer(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(AbstractGroupFacetCollector), (PyObject *) self, "setScorer", args, 2);
          }

          static int t_AbstractGroupFacetCollector_set__scorer(t_AbstractGroupFacetCollector *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::search::Scorer value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::search::Scorer::initializeClass, &value))
              {
                INT_CALL(self->object.setScorer(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "scorer", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/tst/TSTAutocomplete.h"
#include "java/lang/CharSequence.h"
#include "java/util/ArrayList.h"
#include "org/apache/lucene/search/suggest/tst/TernaryTreeNode.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace tst {

            ::java::lang::Class *TSTAutocomplete::class$ = NULL;
            jmethodID *TSTAutocomplete::mids$ = NULL;
            bool TSTAutocomplete::live$ = false;

            jclass TSTAutocomplete::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/tst/TSTAutocomplete");

                mids$ = new jmethodID[max_mid];
                mids$[mid_balancedTree_d0572c03] = env->getMethodID(cls, "balancedTree", "([Ljava/lang/Object;[Ljava/lang/Object;IILorg/apache/lucene/search/suggest/tst/TernaryTreeNode;)V");
                mids$[mid_insert_05696b9d] = env->getMethodID(cls, "insert", "(Lorg/apache/lucene/search/suggest/tst/TernaryTreeNode;Ljava/lang/CharSequence;Ljava/lang/Object;I)Lorg/apache/lucene/search/suggest/tst/TernaryTreeNode;");
                mids$[mid_prefixCompletion_d5365801] = env->getMethodID(cls, "prefixCompletion", "(Lorg/apache/lucene/search/suggest/tst/TernaryTreeNode;Ljava/lang/CharSequence;I)Ljava/util/ArrayList;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            void TSTAutocomplete::balancedTree(const JArray< ::java::lang::Object > & a0, const JArray< ::java::lang::Object > & a1, jint a2, jint a3, const ::org::apache::lucene::search::suggest::tst::TernaryTreeNode & a4) const
            {
              env->callVoidMethod(this$, mids$[mid_balancedTree_d0572c03], a0.this$, a1.this$, a2, a3, a4.this$);
            }

            ::org::apache::lucene::search::suggest::tst::TernaryTreeNode TSTAutocomplete::insert(const ::org::apache::lucene::search::suggest::tst::TernaryTreeNode & a0, const ::java::lang::CharSequence & a1, const ::java::lang::Object & a2, jint a3) const
            {
              return ::org::apache::lucene::search::suggest::tst::TernaryTreeNode(env->callObjectMethod(this$, mids$[mid_insert_05696b9d], a0.this$, a1.this$, a2.this$, a3));
            }

            ::java::util::ArrayList TSTAutocomplete::prefixCompletion(const ::org::apache::lucene::search::suggest::tst::TernaryTreeNode & a0, const ::java::lang::CharSequence & a1, jint a2) const
            {
              return ::java::util::ArrayList(env->callObjectMethod(this$, mids$[mid_prefixCompletion_d5365801], a0.this$, a1.this$, a2));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace tst {
            static PyObject *t_TSTAutocomplete_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_TSTAutocomplete_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_TSTAutocomplete_balancedTree(t_TSTAutocomplete *self, PyObject *args);
            static PyObject *t_TSTAutocomplete_insert(t_TSTAutocomplete *self, PyObject *args);
            static PyObject *t_TSTAutocomplete_prefixCompletion(t_TSTAutocomplete *self, PyObject *args);

            static PyMethodDef t_TSTAutocomplete__methods_[] = {
              DECLARE_METHOD(t_TSTAutocomplete, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TSTAutocomplete, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TSTAutocomplete, balancedTree, METH_VARARGS),
              DECLARE_METHOD(t_TSTAutocomplete, insert, METH_VARARGS),
              DECLARE_METHOD(t_TSTAutocomplete, prefixCompletion, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(TSTAutocomplete, t_TSTAutocomplete, ::java::lang::Object, TSTAutocomplete, abstract_init, 0, 0, 0, 0, 0);

            void t_TSTAutocomplete::install(PyObject *module)
            {
              installType(&PY_TYPE(TSTAutocomplete), module, "TSTAutocomplete", 0);
            }

            void t_TSTAutocomplete::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(TSTAutocomplete).tp_dict, "class_", make_descriptor(TSTAutocomplete::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(TSTAutocomplete).tp_dict, "wrapfn_", make_descriptor(t_TSTAutocomplete::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(TSTAutocomplete).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_TSTAutocomplete_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, TSTAutocomplete::initializeClass, 1)))
                return NULL;
              return t_TSTAutocomplete::wrap_Object(TSTAutocomplete(((t_TSTAutocomplete *) arg)->object.this$));
            }
            static PyObject *t_TSTAutocomplete_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, TSTAutocomplete::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_TSTAutocomplete_balancedTree(t_TSTAutocomplete *self, PyObject *args)
            {
              JArray< ::java::lang::Object > a0((jobject) NULL);
              JArray< ::java::lang::Object > a1((jobject) NULL);
              jint a2;
              jint a3;
              ::org::apache::lucene::search::suggest::tst::TernaryTreeNode a4((jobject) NULL);

              if (!parseArgs(args, "[o[oIIk", ::org::apache::lucene::search::suggest::tst::TernaryTreeNode::initializeClass, &a0, &a1, &a2, &a3, &a4))
              {
                OBJ_CALL(self->object.balancedTree(a0, a1, a2, a3, a4));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "balancedTree", args);
              return NULL;
            }

            static PyObject *t_TSTAutocomplete_insert(t_TSTAutocomplete *self, PyObject *args)
            {
              ::org::apache::lucene::search::suggest::tst::TernaryTreeNode a0((jobject) NULL);
              ::java::lang::CharSequence a1((jobject) NULL);
              ::java::lang::Object a2((jobject) NULL);
              jint a3;
              ::org::apache::lucene::search::suggest::tst::TernaryTreeNode result((jobject) NULL);

              if (!parseArgs(args, "kOoI", ::org::apache::lucene::search::suggest::tst::TernaryTreeNode::initializeClass, &::java::lang::PY_TYPE(CharSequence), &a0, &a1, &a2, &a3))
              {
                OBJ_CALL(result = self->object.insert(a0, a1, a2, a3));
                return ::org::apache::lucene::search::suggest::tst::t_TernaryTreeNode::wrap_Object(result);
              }

              PyErr_SetArgsError((PyObject *) self, "insert", args);
              return NULL;
            }

            static PyObject *t_TSTAutocomplete_prefixCompletion(t_TSTAutocomplete *self, PyObject *args)
            {
              ::org::apache::lucene::search::suggest::tst::TernaryTreeNode a0((jobject) NULL);
              ::java::lang::CharSequence a1((jobject) NULL);
              jint a2;
              ::java::util::ArrayList result((jobject) NULL);

              if (!parseArgs(args, "kOI", ::org::apache::lucene::search::suggest::tst::TernaryTreeNode::initializeClass, &::java::lang::PY_TYPE(CharSequence), &a0, &a1, &a2))
              {
                OBJ_CALL(result = self->object.prefixCompletion(a0, a1, a2));
                return ::java::util::t_ArrayList::wrap_Object(result, &::org::apache::lucene::search::suggest::tst::PY_TYPE(TernaryTreeNode));
              }

              PyErr_SetArgsError((PyObject *) self, "prefixCompletion", args);
              return NULL;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/util/Map$Entry.h"
#include "java/util/Comparator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace java {
  namespace util {

    ::java::lang::Class *Map$Entry::class$ = NULL;
    jmethodID *Map$Entry::mids$ = NULL;
    bool Map$Entry::live$ = false;

    jclass Map$Entry::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/util/Map$Entry");

        mids$ = new jmethodID[max_mid];
        mids$[mid_comparingByKey_5a7ff2fc] = env->getStaticMethodID(cls, "comparingByKey", "()Ljava/util/Comparator;");
        mids$[mid_comparingByKey_4ed2c59d] = env->getStaticMethodID(cls, "comparingByKey", "(Ljava/util/Comparator;)Ljava/util/Comparator;");
        mids$[mid_comparingByValue_5a7ff2fc] = env->getStaticMethodID(cls, "comparingByValue", "()Ljava/util/Comparator;");
        mids$[mid_comparingByValue_4ed2c59d] = env->getStaticMethodID(cls, "comparingByValue", "(Ljava/util/Comparator;)Ljava/util/Comparator;");
        mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
        mids$[mid_getKey_846352c3] = env->getMethodID(cls, "getKey", "()Ljava/lang/Object;");
        mids$[mid_getValue_846352c3] = env->getMethodID(cls, "getValue", "()Ljava/lang/Object;");
        mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
        mids$[mid_setValue_a932a95f] = env->getMethodID(cls, "setValue", "(Ljava/lang/Object;)Ljava/lang/Object;");

        class$ = (::java::lang::Class *) new JObject(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    ::java::util::Comparator Map$Entry::comparingByKey()
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::Comparator(env->callStaticObjectMethod(cls, mids$[mid_comparingByKey_5a7ff2fc]));
    }

    ::java::util::Comparator Map$Entry::comparingByKey(const ::java::util::Comparator & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::Comparator(env->callStaticObjectMethod(cls, mids$[mid_comparingByKey_4ed2c59d], a0.this$));
    }

    ::java::util::Comparator Map$Entry::comparingByValue()
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::Comparator(env->callStaticObjectMethod(cls, mids$[mid_comparingByValue_5a7ff2fc]));
    }

    ::java::util::Comparator Map$Entry::comparingByValue(const ::java::util::Comparator & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::Comparator(env->callStaticObjectMethod(cls, mids$[mid_comparingByValue_4ed2c59d], a0.this$));
    }

    jboolean Map$Entry::equals(const ::java::lang::Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
    }

    ::java::lang::Object Map$Entry::getKey() const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_getKey_846352c3]));
    }

    ::java::lang::Object Map$Entry::getValue() const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_getValue_846352c3]));
    }

    jint Map$Entry::hashCode() const
    {
      return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
    }

    ::java::lang::Object Map$Entry::setValue(const ::java::lang::Object & a0) const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_setValue_a932a95f], a0.this$));
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace util {
    static PyObject *t_Map$Entry_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Map$Entry_instance_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Map$Entry_of_(t_Map$Entry *self, PyObject *args);
    static PyObject *t_Map$Entry_comparingByKey(PyTypeObject *type, PyObject *args);
    static PyObject *t_Map$Entry_comparingByValue(PyTypeObject *type, PyObject *args);
    static PyObject *t_Map$Entry_equals(t_Map$Entry *self, PyObject *args);
    static PyObject *t_Map$Entry_getKey(t_Map$Entry *self);
    static PyObject *t_Map$Entry_getValue(t_Map$Entry *self);
    static PyObject *t_Map$Entry_hashCode(t_Map$Entry *self, PyObject *args);
    static PyObject *t_Map$Entry_setValue(t_Map$Entry *self, PyObject *arg);
    static PyObject *t_Map$Entry_get__key(t_Map$Entry *self, void *data);
    static PyObject *t_Map$Entry_get__value(t_Map$Entry *self, void *data);
    static int t_Map$Entry_set__value(t_Map$Entry *self, PyObject *arg, void *data);
    static PyObject *t_Map$Entry_get__parameters_(t_Map$Entry *self, void *data);
    static PyGetSetDef t_Map$Entry__fields_[] = {
      DECLARE_GET_FIELD(t_Map$Entry, key),
      DECLARE_GETSET_FIELD(t_Map$Entry, value),
      DECLARE_GET_FIELD(t_Map$Entry, parameters_),
      { NULL, NULL, NULL, NULL, NULL }
    };

    static PyMethodDef t_Map$Entry__methods_[] = {
      DECLARE_METHOD(t_Map$Entry, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Map$Entry, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Map$Entry, of_, METH_VARARGS),
      DECLARE_METHOD(t_Map$Entry, comparingByKey, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Map$Entry, comparingByValue, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Map$Entry, equals, METH_VARARGS),
      DECLARE_METHOD(t_Map$Entry, getKey, METH_NOARGS),
      DECLARE_METHOD(t_Map$Entry, getValue, METH_NOARGS),
      DECLARE_METHOD(t_Map$Entry, hashCode, METH_VARARGS),
      DECLARE_METHOD(t_Map$Entry, setValue, METH_O),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(Map$Entry, t_Map$Entry, ::java::lang::Object, Map$Entry, abstract_init, 0, 0, t_Map$Entry__fields_, 0, 0);
    PyObject *t_Map$Entry::wrap_Object(const Map$Entry& object, PyTypeObject *p0, PyTypeObject *p1)
    {
      PyObject *obj = t_Map$Entry::wrap_Object(object);
      if (obj != NULL && obj != Py_None)
      {
        t_Map$Entry *self = (t_Map$Entry *) obj;
        self->parameters[0] = p0;
        self->parameters[1] = p1;
      }
      return obj;
    }

    PyObject *t_Map$Entry::wrap_jobject(const jobject& object, PyTypeObject *p0, PyTypeObject *p1)
    {
      PyObject *obj = t_Map$Entry::wrap_jobject(object);
      if (obj != NULL && obj != Py_None)
      {
        t_Map$Entry *self = (t_Map$Entry *) obj;
        self->parameters[0] = p0;
        self->parameters[1] = p1;
      }
      return obj;
    }

    void t_Map$Entry::install(PyObject *module)
    {
      installType(&PY_TYPE(Map$Entry), module, "Map$Entry", 0);
    }

    void t_Map$Entry::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(Map$Entry).tp_dict, "class_", make_descriptor(Map$Entry::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(Map$Entry).tp_dict, "wrapfn_", make_descriptor(t_Map$Entry::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(Map$Entry).tp_dict, "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_Map$Entry_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, Map$Entry::initializeClass, 1)))
        return NULL;
      return t_Map$Entry::wrap_Object(Map$Entry(((t_Map$Entry *) arg)->object.this$));
    }
    static PyObject *t_Map$Entry_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, Map$Entry::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static PyObject *t_Map$Entry_of_(t_Map$Entry *self, PyObject *args)
    {
      if (!parseArg(args, "T", 2, &(self->parameters)))
        Py_RETURN_SELF;
      return PyErr_SetArgsError((PyObject *) self, "of_", args);
    }

    static PyObject *t_Map$Entry_comparingByKey(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          ::java::util::Comparator result((jobject) NULL);
          OBJ_CALL(result = ::java::util::Map$Entry::comparingByKey());
          return ::java::util::t_Comparator::wrap_Object(result);
        }
        break;
       case 1:
        {
          ::java::util::Comparator a0((jobject) NULL);
          PyTypeObject **p0;
          ::java::util::Comparator result((jobject) NULL);

          if (!parseArgs(args, "K", ::java::util::Comparator::initializeClass, &a0, &p0, ::java::util::t_Comparator::parameters_))
          {
            OBJ_CALL(result = ::java::util::Map$Entry::comparingByKey(a0));
            return ::java::util::t_Comparator::wrap_Object(result);
          }
        }
      }

      PyErr_SetArgsError(type, "comparingByKey", args);
      return NULL;
    }

    static PyObject *t_Map$Entry_comparingByValue(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          ::java::util::Comparator result((jobject) NULL);
          OBJ_CALL(result = ::java::util::Map$Entry::comparingByValue());
          return ::java::util::t_Comparator::wrap_Object(result);
        }
        break;
       case 1:
        {
          ::java::util::Comparator a0((jobject) NULL);
          PyTypeObject **p0;
          ::java::util::Comparator result((jobject) NULL);

          if (!parseArgs(args, "K", ::java::util::Comparator::initializeClass, &a0, &p0, ::java::util::t_Comparator::parameters_))
          {
            OBJ_CALL(result = ::java::util::Map$Entry::comparingByValue(a0));
            return ::java::util::t_Comparator::wrap_Object(result);
          }
        }
      }

      PyErr_SetArgsError(type, "comparingByValue", args);
      return NULL;
    }

    static PyObject *t_Map$Entry_equals(t_Map$Entry *self, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      jboolean result;

      if (!parseArgs(args, "o", &a0))
      {
        OBJ_CALL(result = self->object.equals(a0));
        Py_RETURN_BOOL(result);
      }

      return callSuper(&PY_TYPE(Map$Entry), (PyObject *) self, "equals", args, 2);
    }

    static PyObject *t_Map$Entry_getKey(t_Map$Entry *self)
    {
      ::java::lang::Object result((jobject) NULL);
      OBJ_CALL(result = self->object.getKey());
      return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
    }

    static PyObject *t_Map$Entry_getValue(t_Map$Entry *self)
    {
      ::java::lang::Object result((jobject) NULL);
      OBJ_CALL(result = self->object.getValue());
      return self->parameters[1] != NULL ? wrapType(self->parameters[1], result.this$) : ::java::lang::t_Object::wrap_Object(result);
    }

    static PyObject *t_Map$Entry_hashCode(t_Map$Entry *self, PyObject *args)
    {
      jint result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.hashCode());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(Map$Entry), (PyObject *) self, "hashCode", args, 2);
    }

    static PyObject *t_Map$Entry_setValue(t_Map$Entry *self, PyObject *arg)
    {
      ::java::lang::Object a0((jobject) NULL);
      ::java::lang::Object result((jobject) NULL);

      if (!parseArg(arg, "O", self->parameters[1], &a0))
      {
        OBJ_CALL(result = self->object.setValue(a0));
        return self->parameters[1] != NULL ? wrapType(self->parameters[1], result.this$) : ::java::lang::t_Object::wrap_Object(result);
      }

      PyErr_SetArgsError((PyObject *) self, "setValue", arg);
      return NULL;
    }
    static PyObject *t_Map$Entry_get__parameters_(t_Map$Entry *self, void *data)
    {
      return typeParameters(self->parameters, sizeof(self->parameters));
    }

    static PyObject *t_Map$Entry_get__key(t_Map$Entry *self, void *data)
    {
      ::java::lang::Object value((jobject) NULL);
      OBJ_CALL(value = self->object.getKey());
      return ::java::lang::t_Object::wrap_Object(value);
    }

    static PyObject *t_Map$Entry_get__value(t_Map$Entry *self, void *data)
    {
      ::java::lang::Object value((jobject) NULL);
      OBJ_CALL(value = self->object.getValue());
      return ::java::lang::t_Object::wrap_Object(value);
    }
    static int t_Map$Entry_set__value(t_Map$Entry *self, PyObject *arg, void *data)
    {
      {
        ::java::lang::Object value((jobject) NULL);
        if (!parseArg(arg, "o", &value))
        {
          INT_CALL(self->object.setValue(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "value", arg);
      return -1;
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/NumericRangeQueryNodeBuilder.h"
#include "java/lang/Class.h"
#include "java/lang/Number.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/search/NumericRangeQuery.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/StandardQueryBuilder.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {

              ::java::lang::Class *NumericRangeQueryNodeBuilder::class$ = NULL;
              jmethodID *NumericRangeQueryNodeBuilder::mids$ = NULL;
              bool NumericRangeQueryNodeBuilder::live$ = false;

              jclass NumericRangeQueryNodeBuilder::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/builders/NumericRangeQueryNodeBuilder");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_build_ff2bff6d] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/search/NumericRangeQuery;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              NumericRangeQueryNodeBuilder::NumericRangeQueryNodeBuilder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              ::org::apache::lucene::search::NumericRangeQuery NumericRangeQueryNodeBuilder::build(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                return ::org::apache::lucene::search::NumericRangeQuery(env->callObjectMethod(this$, mids$[mid_build_ff2bff6d], a0.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {
              static PyObject *t_NumericRangeQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_NumericRangeQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg);
              static int t_NumericRangeQueryNodeBuilder_init_(t_NumericRangeQueryNodeBuilder *self, PyObject *args, PyObject *kwds);
              static PyObject *t_NumericRangeQueryNodeBuilder_build(t_NumericRangeQueryNodeBuilder *self, PyObject *arg);

              static PyMethodDef t_NumericRangeQueryNodeBuilder__methods_[] = {
                DECLARE_METHOD(t_NumericRangeQueryNodeBuilder, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_NumericRangeQueryNodeBuilder, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_NumericRangeQueryNodeBuilder, build, METH_O),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(NumericRangeQueryNodeBuilder, t_NumericRangeQueryNodeBuilder, ::java::lang::Object, NumericRangeQueryNodeBuilder, t_NumericRangeQueryNodeBuilder_init_, 0, 0, 0, 0, 0);

              void t_NumericRangeQueryNodeBuilder::install(PyObject *module)
              {
                installType(&PY_TYPE(NumericRangeQueryNodeBuilder), module, "NumericRangeQueryNodeBuilder", 0);
              }

              void t_NumericRangeQueryNodeBuilder::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(NumericRangeQueryNodeBuilder).tp_dict, "class_", make_descriptor(NumericRangeQueryNodeBuilder::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(NumericRangeQueryNodeBuilder).tp_dict, "wrapfn_", make_descriptor(t_NumericRangeQueryNodeBuilder::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(NumericRangeQueryNodeBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_NumericRangeQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, NumericRangeQueryNodeBuilder::initializeClass, 1)))
                  return NULL;
                return t_NumericRangeQueryNodeBuilder::wrap_Object(NumericRangeQueryNodeBuilder(((t_NumericRangeQueryNodeBuilder *) arg)->object.this$));
              }
              static PyObject *t_NumericRangeQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, NumericRangeQueryNodeBuilder::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_NumericRangeQueryNodeBuilder_init_(t_NumericRangeQueryNodeBuilder *self, PyObject *args, PyObject *kwds)
              {
                NumericRangeQueryNodeBuilder object((jobject) NULL);

                INT_CALL(object = NumericRangeQueryNodeBuilder());
                self->object = object;

                return 0;
              }

              static PyObject *t_NumericRangeQueryNodeBuilder_build(t_NumericRangeQueryNodeBuilder *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::search::NumericRangeQuery result((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.build(a0));
                  return ::org::apache::lucene::search::t_NumericRangeQuery::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "build", arg);
                return NULL;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/collation/tokenattributes/CollatedTermAttributeImpl.h"
#include "java/text/Collator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace collation {
        namespace tokenattributes {

          ::java::lang::Class *CollatedTermAttributeImpl::class$ = NULL;
          jmethodID *CollatedTermAttributeImpl::mids$ = NULL;
          bool CollatedTermAttributeImpl::live$ = false;

          jclass CollatedTermAttributeImpl::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/collation/tokenattributes/CollatedTermAttributeImpl");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c5e10a9c] = env->getMethodID(cls, "<init>", "(Ljava/text/Collator;)V");
              mids$[mid_fillBytesRef_54c6a166] = env->getMethodID(cls, "fillBytesRef", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CollatedTermAttributeImpl::CollatedTermAttributeImpl(const ::java::text::Collator & a0) : ::org::apache::lucene::analysis::tokenattributes::CharTermAttributeImpl(env->newObject(initializeClass, &mids$, mid_init$_c5e10a9c, a0.this$)) {}

          void CollatedTermAttributeImpl::fillBytesRef() const
          {
            env->callVoidMethod(this$, mids$[mid_fillBytesRef_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace collation {
        namespace tokenattributes {
          static PyObject *t_CollatedTermAttributeImpl_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CollatedTermAttributeImpl_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CollatedTermAttributeImpl_init_(t_CollatedTermAttributeImpl *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CollatedTermAttributeImpl_fillBytesRef(t_CollatedTermAttributeImpl *self, PyObject *args);

          static PyMethodDef t_CollatedTermAttributeImpl__methods_[] = {
            DECLARE_METHOD(t_CollatedTermAttributeImpl, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CollatedTermAttributeImpl, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CollatedTermAttributeImpl, fillBytesRef, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CollatedTermAttributeImpl, t_CollatedTermAttributeImpl, ::org::apache::lucene::analysis::tokenattributes::CharTermAttributeImpl, CollatedTermAttributeImpl, t_CollatedTermAttributeImpl_init_, 0, 0, 0, 0, 0);

          void t_CollatedTermAttributeImpl::install(PyObject *module)
          {
            installType(&PY_TYPE(CollatedTermAttributeImpl), module, "CollatedTermAttributeImpl", 0);
          }

          void t_CollatedTermAttributeImpl::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CollatedTermAttributeImpl).tp_dict, "class_", make_descriptor(CollatedTermAttributeImpl::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CollatedTermAttributeImpl).tp_dict, "wrapfn_", make_descriptor(t_CollatedTermAttributeImpl::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CollatedTermAttributeImpl).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CollatedTermAttributeImpl_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CollatedTermAttributeImpl::initializeClass, 1)))
              return NULL;
            return t_CollatedTermAttributeImpl::wrap_Object(CollatedTermAttributeImpl(((t_CollatedTermAttributeImpl *) arg)->object.this$));
          }
          static PyObject *t_CollatedTermAttributeImpl_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CollatedTermAttributeImpl::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CollatedTermAttributeImpl_init_(t_CollatedTermAttributeImpl *self, PyObject *args, PyObject *kwds)
          {
            ::java::text::Collator a0((jobject) NULL);
            CollatedTermAttributeImpl object((jobject) NULL);

            if (!parseArgs(args, "k", ::java::text::Collator::initializeClass, &a0))
            {
              INT_CALL(object = CollatedTermAttributeImpl(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_CollatedTermAttributeImpl_fillBytesRef(t_CollatedTermAttributeImpl *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.fillBytesRef());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(CollatedTermAttributeImpl), (PyObject *) self, "fillBytesRef", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/hi/HindiNormalizationFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace hi {

          ::java::lang::Class *HindiNormalizationFilter::class$ = NULL;
          jmethodID *HindiNormalizationFilter::mids$ = NULL;
          bool HindiNormalizationFilter::live$ = false;

          jclass HindiNormalizationFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/hi/HindiNormalizationFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          HindiNormalizationFilter::HindiNormalizationFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean HindiNormalizationFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace hi {
          static PyObject *t_HindiNormalizationFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_HindiNormalizationFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_HindiNormalizationFilter_init_(t_HindiNormalizationFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_HindiNormalizationFilter_incrementToken(t_HindiNormalizationFilter *self, PyObject *args);

          static PyMethodDef t_HindiNormalizationFilter__methods_[] = {
            DECLARE_METHOD(t_HindiNormalizationFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HindiNormalizationFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HindiNormalizationFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(HindiNormalizationFilter, t_HindiNormalizationFilter, ::org::apache::lucene::analysis::TokenFilter, HindiNormalizationFilter, t_HindiNormalizationFilter_init_, 0, 0, 0, 0, 0);

          void t_HindiNormalizationFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(HindiNormalizationFilter), module, "HindiNormalizationFilter", 0);
          }

          void t_HindiNormalizationFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(HindiNormalizationFilter).tp_dict, "class_", make_descriptor(HindiNormalizationFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(HindiNormalizationFilter).tp_dict, "wrapfn_", make_descriptor(t_HindiNormalizationFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(HindiNormalizationFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_HindiNormalizationFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, HindiNormalizationFilter::initializeClass, 1)))
              return NULL;
            return t_HindiNormalizationFilter::wrap_Object(HindiNormalizationFilter(((t_HindiNormalizationFilter *) arg)->object.this$));
          }
          static PyObject *t_HindiNormalizationFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, HindiNormalizationFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_HindiNormalizationFilter_init_(t_HindiNormalizationFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            HindiNormalizationFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = HindiNormalizationFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_HindiNormalizationFilter_incrementToken(t_HindiNormalizationFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(HindiNormalizationFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/it/ItalianAnalyzer.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace it {

          ::java::lang::Class *ItalianAnalyzer::class$ = NULL;
          jmethodID *ItalianAnalyzer::mids$ = NULL;
          bool ItalianAnalyzer::live$ = false;
          ::java::lang::String *ItalianAnalyzer::DEFAULT_STOPWORD_FILE = NULL;

          jclass ItalianAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/it/ItalianAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_6d1f9881] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_0d96cf33] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;)V");
              mids$[mid_init$_3ea629c6] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/util/CharArraySet;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_83eafe28] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_c9d7e4a3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_getDefaultStopSet_d2d3505c] = env->getStaticMethodID(cls, "getDefaultStopSet", "()Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_STOPWORD_FILE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_STOPWORD_FILE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ItalianAnalyzer::ItalianAnalyzer() : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ItalianAnalyzer::ItalianAnalyzer(const ::org::apache::lucene::analysis::util::CharArraySet & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_6d1f9881, a0.this$)) {}

          ItalianAnalyzer::ItalianAnalyzer(const ::org::apache::lucene::util::Version & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_0d96cf33, a0.this$)) {}

          ItalianAnalyzer::ItalianAnalyzer(const ::org::apache::lucene::analysis::util::CharArraySet & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_3ea629c6, a0.this$, a1.this$)) {}

          ItalianAnalyzer::ItalianAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_83eafe28, a0.this$, a1.this$)) {}

          ItalianAnalyzer::ItalianAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1, const ::org::apache::lucene::analysis::util::CharArraySet & a2) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_c9d7e4a3, a0.this$, a1.this$, a2.this$)) {}

          ::org::apache::lucene::analysis::util::CharArraySet ItalianAnalyzer::getDefaultStopSet()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getDefaultStopSet_d2d3505c]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace it {
          static PyObject *t_ItalianAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ItalianAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ItalianAnalyzer_init_(t_ItalianAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ItalianAnalyzer_getDefaultStopSet(PyTypeObject *type);
          static PyObject *t_ItalianAnalyzer_get__defaultStopSet(t_ItalianAnalyzer *self, void *data);
          static PyGetSetDef t_ItalianAnalyzer__fields_[] = {
            DECLARE_GET_FIELD(t_ItalianAnalyzer, defaultStopSet),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_ItalianAnalyzer__methods_[] = {
            DECLARE_METHOD(t_ItalianAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ItalianAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ItalianAnalyzer, getDefaultStopSet, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ItalianAnalyzer, t_ItalianAnalyzer, ::org::apache::lucene::analysis::util::StopwordAnalyzerBase, ItalianAnalyzer, t_ItalianAnalyzer_init_, 0, 0, t_ItalianAnalyzer__fields_, 0, 0);

          void t_ItalianAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(ItalianAnalyzer), module, "ItalianAnalyzer", 0);
          }

          void t_ItalianAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ItalianAnalyzer).tp_dict, "class_", make_descriptor(ItalianAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ItalianAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_ItalianAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ItalianAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(ItalianAnalyzer::initializeClass);
            PyDict_SetItemString(PY_TYPE(ItalianAnalyzer).tp_dict, "DEFAULT_STOPWORD_FILE", make_descriptor(j2p(*ItalianAnalyzer::DEFAULT_STOPWORD_FILE)));
          }

          static PyObject *t_ItalianAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ItalianAnalyzer::initializeClass, 1)))
              return NULL;
            return t_ItalianAnalyzer::wrap_Object(ItalianAnalyzer(((t_ItalianAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_ItalianAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ItalianAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ItalianAnalyzer_init_(t_ItalianAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                ItalianAnalyzer object((jobject) NULL);

                INT_CALL(object = ItalianAnalyzer());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                ::org::apache::lucene::analysis::util::CharArraySet a0((jobject) NULL);
                PyTypeObject **p0;
                ItalianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = ItalianAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                ItalianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::util::Version::initializeClass, &a0))
                {
                  INT_CALL(object = ItalianAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::analysis::util::CharArraySet a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                ItalianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = ItalianAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                ItalianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "kK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = ItalianAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                ::org::apache::lucene::analysis::util::CharArraySet a2((jobject) NULL);
                PyTypeObject **p2;
                ItalianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "kKK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_, &a2, &p2, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = ItalianAnalyzer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ItalianAnalyzer_getDefaultStopSet(PyTypeObject *type)
          {
            ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::it::ItalianAnalyzer::getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_ItalianAnalyzer_get__defaultStopSet(t_ItalianAnalyzer *self, void *data)
          {
            ::org::apache::lucene::analysis::util::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/TimeLimitingCollector$TimeExceededException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *TimeLimitingCollector$TimeExceededException::class$ = NULL;
        jmethodID *TimeLimitingCollector$TimeExceededException::mids$ = NULL;
        bool TimeLimitingCollector$TimeExceededException::live$ = false;

        jclass TimeLimitingCollector$TimeExceededException::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/TimeLimitingCollector$TimeExceededException");

            mids$ = new jmethodID[max_mid];
            mids$[mid_getLastDocCollected_54c6a179] = env->getMethodID(cls, "getLastDocCollected", "()I");
            mids$[mid_getTimeAllowed_54c6a17a] = env->getMethodID(cls, "getTimeAllowed", "()J");
            mids$[mid_getTimeElapsed_54c6a17a] = env->getMethodID(cls, "getTimeElapsed", "()J");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jint TimeLimitingCollector$TimeExceededException::getLastDocCollected() const
        {
          return env->callIntMethod(this$, mids$[mid_getLastDocCollected_54c6a179]);
        }

        jlong TimeLimitingCollector$TimeExceededException::getTimeAllowed() const
        {
          return env->callLongMethod(this$, mids$[mid_getTimeAllowed_54c6a17a]);
        }

        jlong TimeLimitingCollector$TimeExceededException::getTimeElapsed() const
        {
          return env->callLongMethod(this$, mids$[mid_getTimeElapsed_54c6a17a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_TimeLimitingCollector$TimeExceededException_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TimeLimitingCollector$TimeExceededException_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TimeLimitingCollector$TimeExceededException_getLastDocCollected(t_TimeLimitingCollector$TimeExceededException *self);
        static PyObject *t_TimeLimitingCollector$TimeExceededException_getTimeAllowed(t_TimeLimitingCollector$TimeExceededException *self);
        static PyObject *t_TimeLimitingCollector$TimeExceededException_getTimeElapsed(t_TimeLimitingCollector$TimeExceededException *self);
        static PyObject *t_TimeLimitingCollector$TimeExceededException_get__lastDocCollected(t_TimeLimitingCollector$TimeExceededException *self, void *data);
        static PyObject *t_TimeLimitingCollector$TimeExceededException_get__timeAllowed(t_TimeLimitingCollector$TimeExceededException *self, void *data);
        static PyObject *t_TimeLimitingCollector$TimeExceededException_get__timeElapsed(t_TimeLimitingCollector$TimeExceededException *self, void *data);
        static PyGetSetDef t_TimeLimitingCollector$TimeExceededException__fields_[] = {
          DECLARE_GET_FIELD(t_TimeLimitingCollector$TimeExceededException, lastDocCollected),
          DECLARE_GET_FIELD(t_TimeLimitingCollector$TimeExceededException, timeAllowed),
          DECLARE_GET_FIELD(t_TimeLimitingCollector$TimeExceededException, timeElapsed),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_TimeLimitingCollector$TimeExceededException__methods_[] = {
          DECLARE_METHOD(t_TimeLimitingCollector$TimeExceededException, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TimeLimitingCollector$TimeExceededException, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TimeLimitingCollector$TimeExceededException, getLastDocCollected, METH_NOARGS),
          DECLARE_METHOD(t_TimeLimitingCollector$TimeExceededException, getTimeAllowed, METH_NOARGS),
          DECLARE_METHOD(t_TimeLimitingCollector$TimeExceededException, getTimeElapsed, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TimeLimitingCollector$TimeExceededException, t_TimeLimitingCollector$TimeExceededException, ::java::lang::RuntimeException, TimeLimitingCollector$TimeExceededException, abstract_init, 0, 0, t_TimeLimitingCollector$TimeExceededException__fields_, 0, 0);

        void t_TimeLimitingCollector$TimeExceededException::install(PyObject *module)
        {
          installType(&PY_TYPE(TimeLimitingCollector$TimeExceededException), module, "TimeLimitingCollector$TimeExceededException", 0);
        }

        void t_TimeLimitingCollector$TimeExceededException::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TimeLimitingCollector$TimeExceededException).tp_dict, "class_", make_descriptor(TimeLimitingCollector$TimeExceededException::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TimeLimitingCollector$TimeExceededException).tp_dict, "wrapfn_", make_descriptor(t_TimeLimitingCollector$TimeExceededException::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TimeLimitingCollector$TimeExceededException).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TimeLimitingCollector$TimeExceededException_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TimeLimitingCollector$TimeExceededException::initializeClass, 1)))
            return NULL;
          return t_TimeLimitingCollector$TimeExceededException::wrap_Object(TimeLimitingCollector$TimeExceededException(((t_TimeLimitingCollector$TimeExceededException *) arg)->object.this$));
        }
        static PyObject *t_TimeLimitingCollector$TimeExceededException_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TimeLimitingCollector$TimeExceededException::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_TimeLimitingCollector$TimeExceededException_getLastDocCollected(t_TimeLimitingCollector$TimeExceededException *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getLastDocCollected());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_TimeLimitingCollector$TimeExceededException_getTimeAllowed(t_TimeLimitingCollector$TimeExceededException *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getTimeAllowed());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_TimeLimitingCollector$TimeExceededException_getTimeElapsed(t_TimeLimitingCollector$TimeExceededException *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getTimeElapsed());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_TimeLimitingCollector$TimeExceededException_get__lastDocCollected(t_TimeLimitingCollector$TimeExceededException *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getLastDocCollected());
          return PyInt_FromLong((long) value);
        }

        static PyObject *t_TimeLimitingCollector$TimeExceededException_get__timeAllowed(t_TimeLimitingCollector$TimeExceededException *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getTimeAllowed());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }

        static PyObject *t_TimeLimitingCollector$TimeExceededException_get__timeElapsed(t_TimeLimitingCollector$TimeExceededException *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getTimeElapsed());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spans/Spans.h"
#include "java/util/Collection.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {

          ::java::lang::Class *Spans::class$ = NULL;
          jmethodID *Spans::mids$ = NULL;
          bool Spans::live$ = false;

          jclass Spans::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spans/Spans");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_cost_54c6a17a] = env->getMethodID(cls, "cost", "()J");
              mids$[mid_doc_54c6a179] = env->getMethodID(cls, "doc", "()I");
              mids$[mid_end_54c6a179] = env->getMethodID(cls, "end", "()I");
              mids$[mid_getPayload_2d2d7de4] = env->getMethodID(cls, "getPayload", "()Ljava/util/Collection;");
              mids$[mid_isPayloadAvailable_54c6a16a] = env->getMethodID(cls, "isPayloadAvailable", "()Z");
              mids$[mid_next_54c6a16a] = env->getMethodID(cls, "next", "()Z");
              mids$[mid_skipTo_39c7bd30] = env->getMethodID(cls, "skipTo", "(I)Z");
              mids$[mid_start_54c6a179] = env->getMethodID(cls, "start", "()I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Spans::Spans() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jlong Spans::cost() const
          {
            return env->callLongMethod(this$, mids$[mid_cost_54c6a17a]);
          }

          jint Spans::doc() const
          {
            return env->callIntMethod(this$, mids$[mid_doc_54c6a179]);
          }

          jint Spans::end() const
          {
            return env->callIntMethod(this$, mids$[mid_end_54c6a179]);
          }

          ::java::util::Collection Spans::getPayload() const
          {
            return ::java::util::Collection(env->callObjectMethod(this$, mids$[mid_getPayload_2d2d7de4]));
          }

          jboolean Spans::isPayloadAvailable() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isPayloadAvailable_54c6a16a]);
          }

          jboolean Spans::next() const
          {
            return env->callBooleanMethod(this$, mids$[mid_next_54c6a16a]);
          }

          jboolean Spans::skipTo(jint a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_skipTo_39c7bd30], a0);
          }

          jint Spans::start() const
          {
            return env->callIntMethod(this$, mids$[mid_start_54c6a179]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {
          static PyObject *t_Spans_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Spans_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Spans_init_(t_Spans *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Spans_cost(t_Spans *self);
          static PyObject *t_Spans_doc(t_Spans *self);
          static PyObject *t_Spans_end(t_Spans *self);
          static PyObject *t_Spans_getPayload(t_Spans *self);
          static PyObject *t_Spans_isPayloadAvailable(t_Spans *self);
          static PyObject *t_Spans_next(t_Spans *self);
          static PyObject *t_Spans_skipTo(t_Spans *self, PyObject *arg);
          static PyObject *t_Spans_start(t_Spans *self);
          static PyObject *t_Spans_get__payload(t_Spans *self, void *data);
          static PyObject *t_Spans_get__payloadAvailable(t_Spans *self, void *data);
          static PyGetSetDef t_Spans__fields_[] = {
            DECLARE_GET_FIELD(t_Spans, payload),
            DECLARE_GET_FIELD(t_Spans, payloadAvailable),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Spans__methods_[] = {
            DECLARE_METHOD(t_Spans, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Spans, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Spans, cost, METH_NOARGS),
            DECLARE_METHOD(t_Spans, doc, METH_NOARGS),
            DECLARE_METHOD(t_Spans, end, METH_NOARGS),
            DECLARE_METHOD(t_Spans, getPayload, METH_NOARGS),
            DECLARE_METHOD(t_Spans, isPayloadAvailable, METH_NOARGS),
            DECLARE_METHOD(t_Spans, next, METH_NOARGS),
            DECLARE_METHOD(t_Spans, skipTo, METH_O),
            DECLARE_METHOD(t_Spans, start, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Spans, t_Spans, ::java::lang::Object, Spans, t_Spans_init_, 0, 0, t_Spans__fields_, 0, 0);

          void t_Spans::install(PyObject *module)
          {
            installType(&PY_TYPE(Spans), module, "Spans", 0);
          }

          void t_Spans::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Spans).tp_dict, "class_", make_descriptor(Spans::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Spans).tp_dict, "wrapfn_", make_descriptor(t_Spans::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Spans).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Spans_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Spans::initializeClass, 1)))
              return NULL;
            return t_Spans::wrap_Object(Spans(((t_Spans *) arg)->object.this$));
          }
          static PyObject *t_Spans_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Spans::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Spans_init_(t_Spans *self, PyObject *args, PyObject *kwds)
          {
            Spans object((jobject) NULL);

            INT_CALL(object = Spans());
            self->object = object;

            return 0;
          }

          static PyObject *t_Spans_cost(t_Spans *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.cost());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_Spans_doc(t_Spans *self)
          {
            jint result;
            OBJ_CALL(result = self->object.doc());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_Spans_end(t_Spans *self)
          {
            jint result;
            OBJ_CALL(result = self->object.end());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_Spans_getPayload(t_Spans *self)
          {
            ::java::util::Collection result((jobject) NULL);
            OBJ_CALL(result = self->object.getPayload());
            return ::java::util::t_Collection::wrap_Object(result, &::java::lang::PY_TYPE(Object));
          }

          static PyObject *t_Spans_isPayloadAvailable(t_Spans *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isPayloadAvailable());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_Spans_next(t_Spans *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.next());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_Spans_skipTo(t_Spans *self, PyObject *arg)
          {
            jint a0;
            jboolean result;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.skipTo(a0));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError((PyObject *) self, "skipTo", arg);
            return NULL;
          }

          static PyObject *t_Spans_start(t_Spans *self)
          {
            jint result;
            OBJ_CALL(result = self->object.start());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_Spans_get__payload(t_Spans *self, void *data)
          {
            ::java::util::Collection value((jobject) NULL);
            OBJ_CALL(value = self->object.getPayload());
            return ::java::util::t_Collection::wrap_Object(value);
          }

          static PyObject *t_Spans_get__payloadAvailable(t_Spans *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isPayloadAvailable());
            Py_RETURN_BOOL(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/TopOrdAndIntQueue$OrdAndValue.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {

        ::java::lang::Class *TopOrdAndIntQueue$OrdAndValue::class$ = NULL;
        jmethodID *TopOrdAndIntQueue$OrdAndValue::mids$ = NULL;
        jfieldID *TopOrdAndIntQueue$OrdAndValue::fids$ = NULL;
        bool TopOrdAndIntQueue$OrdAndValue::live$ = false;

        jclass TopOrdAndIntQueue$OrdAndValue::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/facet/TopOrdAndIntQueue$OrdAndValue");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

            fids$ = new jfieldID[max_fid];
            fids$[fid_ord] = env->getFieldID(cls, "ord", "I");
            fids$[fid_value] = env->getFieldID(cls, "value", "I");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        TopOrdAndIntQueue$OrdAndValue::TopOrdAndIntQueue$OrdAndValue() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jint TopOrdAndIntQueue$OrdAndValue::_get_ord() const
        {
          return env->getIntField(this$, fids$[fid_ord]);
        }

        void TopOrdAndIntQueue$OrdAndValue::_set_ord(jint a0) const
        {
          env->setIntField(this$, fids$[fid_ord], a0);
        }

        jint TopOrdAndIntQueue$OrdAndValue::_get_value() const
        {
          return env->getIntField(this$, fids$[fid_value]);
        }

        void TopOrdAndIntQueue$OrdAndValue::_set_value(jint a0) const
        {
          env->setIntField(this$, fids$[fid_value], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        static PyObject *t_TopOrdAndIntQueue$OrdAndValue_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TopOrdAndIntQueue$OrdAndValue_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TopOrdAndIntQueue$OrdAndValue_of_(t_TopOrdAndIntQueue$OrdAndValue *self, PyObject *args);
        static int t_TopOrdAndIntQueue$OrdAndValue_init_(t_TopOrdAndIntQueue$OrdAndValue *self, PyObject *args, PyObject *kwds);
        static PyObject *t_TopOrdAndIntQueue$OrdAndValue_get__ord(t_TopOrdAndIntQueue$OrdAndValue *self, void *data);
        static int t_TopOrdAndIntQueue$OrdAndValue_set__ord(t_TopOrdAndIntQueue$OrdAndValue *self, PyObject *arg, void *data);
        static PyObject *t_TopOrdAndIntQueue$OrdAndValue_get__value(t_TopOrdAndIntQueue$OrdAndValue *self, void *data);
        static int t_TopOrdAndIntQueue$OrdAndValue_set__value(t_TopOrdAndIntQueue$OrdAndValue *self, PyObject *arg, void *data);

        static PyObject *t_TopOrdAndIntQueue$OrdAndValue_get__parameters_(t_TopOrdAndIntQueue$OrdAndValue *self, void *data);
        static PyGetSetDef t_TopOrdAndIntQueue$OrdAndValue__fields_[] = {
          DECLARE_GETSET_FIELD(t_TopOrdAndIntQueue$OrdAndValue, ord),
          DECLARE_GETSET_FIELD(t_TopOrdAndIntQueue$OrdAndValue, value),
          DECLARE_GET_FIELD(t_TopOrdAndIntQueue$OrdAndValue, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_TopOrdAndIntQueue$OrdAndValue__methods_[] = {
          DECLARE_METHOD(t_TopOrdAndIntQueue$OrdAndValue, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TopOrdAndIntQueue$OrdAndValue, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TopOrdAndIntQueue$OrdAndValue, of_, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TopOrdAndIntQueue$OrdAndValue, t_TopOrdAndIntQueue$OrdAndValue, ::java::lang::Object, TopOrdAndIntQueue$OrdAndValue, t_TopOrdAndIntQueue$OrdAndValue_init_, 0, 0, t_TopOrdAndIntQueue$OrdAndValue__fields_, 0, 0);
        PyObject *t_TopOrdAndIntQueue$OrdAndValue::wrap_Object(const TopOrdAndIntQueue$OrdAndValue& object, PyTypeObject *p0)
        {
          PyObject *obj = t_TopOrdAndIntQueue$OrdAndValue::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_TopOrdAndIntQueue$OrdAndValue *self = (t_TopOrdAndIntQueue$OrdAndValue *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_TopOrdAndIntQueue$OrdAndValue::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_TopOrdAndIntQueue$OrdAndValue::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_TopOrdAndIntQueue$OrdAndValue *self = (t_TopOrdAndIntQueue$OrdAndValue *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_TopOrdAndIntQueue$OrdAndValue::install(PyObject *module)
        {
          installType(&PY_TYPE(TopOrdAndIntQueue$OrdAndValue), module, "TopOrdAndIntQueue$OrdAndValue", 0);
        }

        void t_TopOrdAndIntQueue$OrdAndValue::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TopOrdAndIntQueue$OrdAndValue).tp_dict, "class_", make_descriptor(TopOrdAndIntQueue$OrdAndValue::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TopOrdAndIntQueue$OrdAndValue).tp_dict, "wrapfn_", make_descriptor(t_TopOrdAndIntQueue$OrdAndValue::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TopOrdAndIntQueue$OrdAndValue).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TopOrdAndIntQueue$OrdAndValue_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TopOrdAndIntQueue$OrdAndValue::initializeClass, 1)))
            return NULL;
          return t_TopOrdAndIntQueue$OrdAndValue::wrap_Object(TopOrdAndIntQueue$OrdAndValue(((t_TopOrdAndIntQueue$OrdAndValue *) arg)->object.this$));
        }
        static PyObject *t_TopOrdAndIntQueue$OrdAndValue_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TopOrdAndIntQueue$OrdAndValue::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_TopOrdAndIntQueue$OrdAndValue_of_(t_TopOrdAndIntQueue$OrdAndValue *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_TopOrdAndIntQueue$OrdAndValue_init_(t_TopOrdAndIntQueue$OrdAndValue *self, PyObject *args, PyObject *kwds)
        {
          TopOrdAndIntQueue$OrdAndValue object((jobject) NULL);

          INT_CALL(object = TopOrdAndIntQueue$OrdAndValue());
          self->object = object;
          self->parameters[0] = &::org::apache::lucene::facet::PY_TYPE(TopOrdAndIntQueue$OrdAndValue);

          return 0;
        }
        static PyObject *t_TopOrdAndIntQueue$OrdAndValue_get__parameters_(t_TopOrdAndIntQueue$OrdAndValue *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static PyObject *t_TopOrdAndIntQueue$OrdAndValue_get__ord(t_TopOrdAndIntQueue$OrdAndValue *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_ord());
          return PyInt_FromLong((long) value);
        }
        static int t_TopOrdAndIntQueue$OrdAndValue_set__ord(t_TopOrdAndIntQueue$OrdAndValue *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_ord(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "ord", arg);
          return -1;
        }

        static PyObject *t_TopOrdAndIntQueue$OrdAndValue_get__value(t_TopOrdAndIntQueue$OrdAndValue *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_value());
          return PyInt_FromLong((long) value);
        }
        static int t_TopOrdAndIntQueue$OrdAndValue_set__value(t_TopOrdAndIntQueue$OrdAndValue *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_value(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "value", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/vectorhighlight/BreakIteratorBoundaryScanner.h"
#include "java/lang/StringBuilder.h"
#include "java/text/BreakIterator.h"
#include "org/apache/lucene/search/vectorhighlight/BoundaryScanner.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {

          ::java::lang::Class *BreakIteratorBoundaryScanner::class$ = NULL;
          jmethodID *BreakIteratorBoundaryScanner::mids$ = NULL;
          bool BreakIteratorBoundaryScanner::live$ = false;

          jclass BreakIteratorBoundaryScanner::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/vectorhighlight/BreakIteratorBoundaryScanner");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_918887c2] = env->getMethodID(cls, "<init>", "(Ljava/text/BreakIterator;)V");
              mids$[mid_findEndOffset_f3d950f1] = env->getMethodID(cls, "findEndOffset", "(Ljava/lang/StringBuilder;I)I");
              mids$[mid_findStartOffset_f3d950f1] = env->getMethodID(cls, "findStartOffset", "(Ljava/lang/StringBuilder;I)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BreakIteratorBoundaryScanner::BreakIteratorBoundaryScanner(const ::java::text::BreakIterator & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_918887c2, a0.this$)) {}

          jint BreakIteratorBoundaryScanner::findEndOffset(const ::java::lang::StringBuilder & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_findEndOffset_f3d950f1], a0.this$, a1);
          }

          jint BreakIteratorBoundaryScanner::findStartOffset(const ::java::lang::StringBuilder & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_findStartOffset_f3d950f1], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {
          static PyObject *t_BreakIteratorBoundaryScanner_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BreakIteratorBoundaryScanner_instance_(PyTypeObject *type, PyObject *arg);
          static int t_BreakIteratorBoundaryScanner_init_(t_BreakIteratorBoundaryScanner *self, PyObject *args, PyObject *kwds);
          static PyObject *t_BreakIteratorBoundaryScanner_findEndOffset(t_BreakIteratorBoundaryScanner *self, PyObject *args);
          static PyObject *t_BreakIteratorBoundaryScanner_findStartOffset(t_BreakIteratorBoundaryScanner *self, PyObject *args);

          static PyMethodDef t_BreakIteratorBoundaryScanner__methods_[] = {
            DECLARE_METHOD(t_BreakIteratorBoundaryScanner, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BreakIteratorBoundaryScanner, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BreakIteratorBoundaryScanner, findEndOffset, METH_VARARGS),
            DECLARE_METHOD(t_BreakIteratorBoundaryScanner, findStartOffset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(BreakIteratorBoundaryScanner, t_BreakIteratorBoundaryScanner, ::java::lang::Object, BreakIteratorBoundaryScanner, t_BreakIteratorBoundaryScanner_init_, 0, 0, 0, 0, 0);

          void t_BreakIteratorBoundaryScanner::install(PyObject *module)
          {
            installType(&PY_TYPE(BreakIteratorBoundaryScanner), module, "BreakIteratorBoundaryScanner", 0);
          }

          void t_BreakIteratorBoundaryScanner::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(BreakIteratorBoundaryScanner).tp_dict, "class_", make_descriptor(BreakIteratorBoundaryScanner::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(BreakIteratorBoundaryScanner).tp_dict, "wrapfn_", make_descriptor(t_BreakIteratorBoundaryScanner::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(BreakIteratorBoundaryScanner).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_BreakIteratorBoundaryScanner_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BreakIteratorBoundaryScanner::initializeClass, 1)))
              return NULL;
            return t_BreakIteratorBoundaryScanner::wrap_Object(BreakIteratorBoundaryScanner(((t_BreakIteratorBoundaryScanner *) arg)->object.this$));
          }
          static PyObject *t_BreakIteratorBoundaryScanner_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BreakIteratorBoundaryScanner::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_BreakIteratorBoundaryScanner_init_(t_BreakIteratorBoundaryScanner *self, PyObject *args, PyObject *kwds)
          {
            ::java::text::BreakIterator a0((jobject) NULL);
            BreakIteratorBoundaryScanner object((jobject) NULL);

            if (!parseArgs(args, "k", ::java::text::BreakIterator::initializeClass, &a0))
            {
              INT_CALL(object = BreakIteratorBoundaryScanner(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_BreakIteratorBoundaryScanner_findEndOffset(t_BreakIteratorBoundaryScanner *self, PyObject *args)
          {
            ::java::lang::StringBuilder a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "kI", ::java::lang::StringBuilder::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.findEndOffset(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "findEndOffset", args);
            return NULL;
          }

          static PyObject *t_BreakIteratorBoundaryScanner_findStartOffset(t_BreakIteratorBoundaryScanner *self, PyObject *args)
          {
            ::java::lang::StringBuilder a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "kI", ::java::lang::StringBuilder::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.findStartOffset(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "findStartOffset", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FieldValueFilter.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/Bits.h"
#include "org/apache/lucene/search/DocIdSet.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FieldValueFilter::class$ = NULL;
        jmethodID *FieldValueFilter::mids$ = NULL;
        bool FieldValueFilter::live$ = false;

        jclass FieldValueFilter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FieldValueFilter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
            mids$[mid_init$_f3691645] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Z)V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_field_14c7b5c5] = env->getMethodID(cls, "field", "()Ljava/lang/String;");
            mids$[mid_getDocIdSet_ccce0897] = env->getMethodID(cls, "getDocIdSet", "(Lorg/apache/lucene/index/AtomicReaderContext;Lorg/apache/lucene/util/Bits;)Lorg/apache/lucene/search/DocIdSet;");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_negate_54c6a16a] = env->getMethodID(cls, "negate", "()Z");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FieldValueFilter::FieldValueFilter(const ::java::lang::String & a0) : ::org::apache::lucene::search::Filter(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

        FieldValueFilter::FieldValueFilter(const ::java::lang::String & a0, jboolean a1) : ::org::apache::lucene::search::Filter(env->newObject(initializeClass, &mids$, mid_init$_f3691645, a0.this$, a1)) {}

        jboolean FieldValueFilter::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        ::java::lang::String FieldValueFilter::field() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_field_14c7b5c5]));
        }

        ::org::apache::lucene::search::DocIdSet FieldValueFilter::getDocIdSet(const ::org::apache::lucene::index::AtomicReaderContext & a0, const ::org::apache::lucene::util::Bits & a1) const
        {
          return ::org::apache::lucene::search::DocIdSet(env->callObjectMethod(this$, mids$[mid_getDocIdSet_ccce0897], a0.this$, a1.this$));
        }

        jint FieldValueFilter::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jboolean FieldValueFilter::negate() const
        {
          return env->callBooleanMethod(this$, mids$[mid_negate_54c6a16a]);
        }

        ::java::lang::String FieldValueFilter::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FieldValueFilter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldValueFilter_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FieldValueFilter_init_(t_FieldValueFilter *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FieldValueFilter_equals(t_FieldValueFilter *self, PyObject *args);
        static PyObject *t_FieldValueFilter_field(t_FieldValueFilter *self);
        static PyObject *t_FieldValueFilter_getDocIdSet(t_FieldValueFilter *self, PyObject *args);
        static PyObject *t_FieldValueFilter_hashCode(t_FieldValueFilter *self, PyObject *args);
        static PyObject *t_FieldValueFilter_negate(t_FieldValueFilter *self);
        static PyObject *t_FieldValueFilter_toString(t_FieldValueFilter *self, PyObject *args);

        static PyMethodDef t_FieldValueFilter__methods_[] = {
          DECLARE_METHOD(t_FieldValueFilter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldValueFilter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldValueFilter, equals, METH_VARARGS),
          DECLARE_METHOD(t_FieldValueFilter, field, METH_NOARGS),
          DECLARE_METHOD(t_FieldValueFilter, getDocIdSet, METH_VARARGS),
          DECLARE_METHOD(t_FieldValueFilter, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_FieldValueFilter, negate, METH_NOARGS),
          DECLARE_METHOD(t_FieldValueFilter, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldValueFilter, t_FieldValueFilter, ::org::apache::lucene::search::Filter, FieldValueFilter, t_FieldValueFilter_init_, 0, 0, 0, 0, 0);

        void t_FieldValueFilter::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldValueFilter), module, "FieldValueFilter", 0);
        }

        void t_FieldValueFilter::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldValueFilter).tp_dict, "class_", make_descriptor(FieldValueFilter::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldValueFilter).tp_dict, "wrapfn_", make_descriptor(t_FieldValueFilter::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldValueFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldValueFilter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldValueFilter::initializeClass, 1)))
            return NULL;
          return t_FieldValueFilter::wrap_Object(FieldValueFilter(((t_FieldValueFilter *) arg)->object.this$));
        }
        static PyObject *t_FieldValueFilter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldValueFilter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FieldValueFilter_init_(t_FieldValueFilter *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::lang::String a0((jobject) NULL);
              FieldValueFilter object((jobject) NULL);

              if (!parseArgs(args, "s", &a0))
              {
                INT_CALL(object = FieldValueFilter(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              ::java::lang::String a0((jobject) NULL);
              jboolean a1;
              FieldValueFilter object((jobject) NULL);

              if (!parseArgs(args, "sZ", &a0, &a1))
              {
                INT_CALL(object = FieldValueFilter(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FieldValueFilter_equals(t_FieldValueFilter *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(FieldValueFilter), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_FieldValueFilter_field(t_FieldValueFilter *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.field());
          return j2p(result);
        }

        static PyObject *t_FieldValueFilter_getDocIdSet(t_FieldValueFilter *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
          ::org::apache::lucene::util::Bits a1((jobject) NULL);
          ::org::apache::lucene::search::DocIdSet result((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.getDocIdSet(a0, a1));
            return ::org::apache::lucene::search::t_DocIdSet::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FieldValueFilter), (PyObject *) self, "getDocIdSet", args, 2);
        }

        static PyObject *t_FieldValueFilter_hashCode(t_FieldValueFilter *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FieldValueFilter), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_FieldValueFilter_negate(t_FieldValueFilter *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.negate());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_FieldValueFilter_toString(t_FieldValueFilter *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(FieldValueFilter), (PyObject *) self, "toString", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spell/Dictionary.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/suggest/InputIterator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {

          ::java::lang::Class *Dictionary::class$ = NULL;
          jmethodID *Dictionary::mids$ = NULL;
          bool Dictionary::live$ = false;

          jclass Dictionary::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spell/Dictionary");

              mids$ = new jmethodID[max_mid];
              mids$[mid_getEntryIterator_23dc46b1] = env->getMethodID(cls, "getEntryIterator", "()Lorg/apache/lucene/search/suggest/InputIterator;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::org::apache::lucene::search::suggest::InputIterator Dictionary::getEntryIterator() const
          {
            return ::org::apache::lucene::search::suggest::InputIterator(env->callObjectMethod(this$, mids$[mid_getEntryIterator_23dc46b1]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {
          static PyObject *t_Dictionary_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Dictionary_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Dictionary_getEntryIterator(t_Dictionary *self);
          static PyObject *t_Dictionary_get__entryIterator(t_Dictionary *self, void *data);
          static PyGetSetDef t_Dictionary__fields_[] = {
            DECLARE_GET_FIELD(t_Dictionary, entryIterator),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Dictionary__methods_[] = {
            DECLARE_METHOD(t_Dictionary, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Dictionary, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Dictionary, getEntryIterator, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Dictionary, t_Dictionary, ::java::lang::Object, Dictionary, abstract_init, 0, 0, t_Dictionary__fields_, 0, 0);

          void t_Dictionary::install(PyObject *module)
          {
            installType(&PY_TYPE(Dictionary), module, "Dictionary", 0);
          }

          void t_Dictionary::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Dictionary).tp_dict, "class_", make_descriptor(Dictionary::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Dictionary).tp_dict, "wrapfn_", make_descriptor(t_Dictionary::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Dictionary).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Dictionary_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Dictionary::initializeClass, 1)))
              return NULL;
            return t_Dictionary::wrap_Object(Dictionary(((t_Dictionary *) arg)->object.this$));
          }
          static PyObject *t_Dictionary_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Dictionary::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_Dictionary_getEntryIterator(t_Dictionary *self)
          {
            ::org::apache::lucene::search::suggest::InputIterator result((jobject) NULL);
            OBJ_CALL(result = self->object.getEntryIterator());
            return ::org::apache::lucene::search::suggest::t_InputIterator::wrap_Object(result);
          }

          static PyObject *t_Dictionary_get__entryIterator(t_Dictionary *self, void *data)
          {
            ::org::apache::lucene::search::suggest::InputIterator value((jobject) NULL);
            OBJ_CALL(value = self->object.getEntryIterator());
            return ::org::apache::lucene::search::suggest::t_InputIterator::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/TFIDFSimilarity.h"
#include "org/apache/lucene/index/FieldInvertState.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/search/TermStatistics.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/CollectionStatistics.h"
#include "org/apache/lucene/search/similarities/Similarity$SimWeight.h"
#include "org/apache/lucene/search/Explanation.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/search/similarities/Similarity$SimScorer.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *TFIDFSimilarity::class$ = NULL;
          jmethodID *TFIDFSimilarity::mids$ = NULL;
          bool TFIDFSimilarity::live$ = false;

          jclass TFIDFSimilarity::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/TFIDFSimilarity");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_computeNorm_6ff84e0e] = env->getMethodID(cls, "computeNorm", "(Lorg/apache/lucene/index/FieldInvertState;)J");
              mids$[mid_computeWeight_8bb6ee0b] = env->getMethodID(cls, "computeWeight", "(FLorg/apache/lucene/search/CollectionStatistics;[Lorg/apache/lucene/search/TermStatistics;)Lorg/apache/lucene/search/similarities/Similarity$SimWeight;");
              mids$[mid_coord_d8d154b6] = env->getMethodID(cls, "coord", "(II)F");
              mids$[mid_decodeNormValue_0ee6df3f] = env->getMethodID(cls, "decodeNormValue", "(J)F");
              mids$[mid_encodeNormValue_06298cb7] = env->getMethodID(cls, "encodeNormValue", "(F)J");
              mids$[mid_idf_a7e12cb4] = env->getMethodID(cls, "idf", "(JJ)F");
              mids$[mid_idfExplain_9dde2121] = env->getMethodID(cls, "idfExplain", "(Lorg/apache/lucene/search/CollectionStatistics;Lorg/apache/lucene/search/TermStatistics;)Lorg/apache/lucene/search/Explanation;");
              mids$[mid_idfExplain_be4c9f2b] = env->getMethodID(cls, "idfExplain", "(Lorg/apache/lucene/search/CollectionStatistics;[Lorg/apache/lucene/search/TermStatistics;)Lorg/apache/lucene/search/Explanation;");
              mids$[mid_lengthNorm_6ff84e02] = env->getMethodID(cls, "lengthNorm", "(Lorg/apache/lucene/index/FieldInvertState;)F");
              mids$[mid_queryNorm_06298cbb] = env->getMethodID(cls, "queryNorm", "(F)F");
              mids$[mid_scorePayload_ffd34a82] = env->getMethodID(cls, "scorePayload", "(IIILorg/apache/lucene/util/BytesRef;)F");
              mids$[mid_simScorer_9a2cfed8] = env->getMethodID(cls, "simScorer", "(Lorg/apache/lucene/search/similarities/Similarity$SimWeight;Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/search/similarities/Similarity$SimScorer;");
              mids$[mid_sloppyFreq_39c7bd2c] = env->getMethodID(cls, "sloppyFreq", "(I)F");
              mids$[mid_tf_06298cbb] = env->getMethodID(cls, "tf", "(F)F");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TFIDFSimilarity::TFIDFSimilarity() : ::org::apache::lucene::search::similarities::Similarity(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jlong TFIDFSimilarity::computeNorm(const ::org::apache::lucene::index::FieldInvertState & a0) const
          {
            return env->callLongMethod(this$, mids$[mid_computeNorm_6ff84e0e], a0.this$);
          }

          ::org::apache::lucene::search::similarities::Similarity$SimWeight TFIDFSimilarity::computeWeight(jfloat a0, const ::org::apache::lucene::search::CollectionStatistics & a1, const JArray< ::org::apache::lucene::search::TermStatistics > & a2) const
          {
            return ::org::apache::lucene::search::similarities::Similarity$SimWeight(env->callObjectMethod(this$, mids$[mid_computeWeight_8bb6ee0b], a0, a1.this$, a2.this$));
          }

          jfloat TFIDFSimilarity::coord(jint a0, jint a1) const
          {
            return env->callFloatMethod(this$, mids$[mid_coord_d8d154b6], a0, a1);
          }

          jfloat TFIDFSimilarity::decodeNormValue(jlong a0) const
          {
            return env->callFloatMethod(this$, mids$[mid_decodeNormValue_0ee6df3f], a0);
          }

          jlong TFIDFSimilarity::encodeNormValue(jfloat a0) const
          {
            return env->callLongMethod(this$, mids$[mid_encodeNormValue_06298cb7], a0);
          }

          jfloat TFIDFSimilarity::idf(jlong a0, jlong a1) const
          {
            return env->callFloatMethod(this$, mids$[mid_idf_a7e12cb4], a0, a1);
          }

          ::org::apache::lucene::search::Explanation TFIDFSimilarity::idfExplain(const ::org::apache::lucene::search::CollectionStatistics & a0, const ::org::apache::lucene::search::TermStatistics & a1) const
          {
            return ::org::apache::lucene::search::Explanation(env->callObjectMethod(this$, mids$[mid_idfExplain_9dde2121], a0.this$, a1.this$));
          }

          ::org::apache::lucene::search::Explanation TFIDFSimilarity::idfExplain(const ::org::apache::lucene::search::CollectionStatistics & a0, const JArray< ::org::apache::lucene::search::TermStatistics > & a1) const
          {
            return ::org::apache::lucene::search::Explanation(env->callObjectMethod(this$, mids$[mid_idfExplain_be4c9f2b], a0.this$, a1.this$));
          }

          jfloat TFIDFSimilarity::lengthNorm(const ::org::apache::lucene::index::FieldInvertState & a0) const
          {
            return env->callFloatMethod(this$, mids$[mid_lengthNorm_6ff84e02], a0.this$);
          }

          jfloat TFIDFSimilarity::queryNorm(jfloat a0) const
          {
            return env->callFloatMethod(this$, mids$[mid_queryNorm_06298cbb], a0);
          }

          jfloat TFIDFSimilarity::scorePayload(jint a0, jint a1, jint a2, const ::org::apache::lucene::util::BytesRef & a3) const
          {
            return env->callFloatMethod(this$, mids$[mid_scorePayload_ffd34a82], a0, a1, a2, a3.this$);
          }

          ::org::apache::lucene::search::similarities::Similarity$SimScorer TFIDFSimilarity::simScorer(const ::org::apache::lucene::search::similarities::Similarity$SimWeight & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1) const
          {
            return ::org::apache::lucene::search::similarities::Similarity$SimScorer(env->callObjectMethod(this$, mids$[mid_simScorer_9a2cfed8], a0.this$, a1.this$));
          }

          jfloat TFIDFSimilarity::sloppyFreq(jint a0) const
          {
            return env->callFloatMethod(this$, mids$[mid_sloppyFreq_39c7bd2c], a0);
          }

          jfloat TFIDFSimilarity::tf(jfloat a0) const
          {
            return env->callFloatMethod(this$, mids$[mid_tf_06298cbb], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_TFIDFSimilarity_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TFIDFSimilarity_instance_(PyTypeObject *type, PyObject *arg);
          static int t_TFIDFSimilarity_init_(t_TFIDFSimilarity *self, PyObject *args, PyObject *kwds);
          static PyObject *t_TFIDFSimilarity_computeNorm(t_TFIDFSimilarity *self, PyObject *args);
          static PyObject *t_TFIDFSimilarity_computeWeight(t_TFIDFSimilarity *self, PyObject *args);
          static PyObject *t_TFIDFSimilarity_coord(t_TFIDFSimilarity *self, PyObject *args);
          static PyObject *t_TFIDFSimilarity_decodeNormValue(t_TFIDFSimilarity *self, PyObject *arg);
          static PyObject *t_TFIDFSimilarity_encodeNormValue(t_TFIDFSimilarity *self, PyObject *arg);
          static PyObject *t_TFIDFSimilarity_idf(t_TFIDFSimilarity *self, PyObject *args);
          static PyObject *t_TFIDFSimilarity_idfExplain(t_TFIDFSimilarity *self, PyObject *args);
          static PyObject *t_TFIDFSimilarity_lengthNorm(t_TFIDFSimilarity *self, PyObject *arg);
          static PyObject *t_TFIDFSimilarity_queryNorm(t_TFIDFSimilarity *self, PyObject *args);
          static PyObject *t_TFIDFSimilarity_scorePayload(t_TFIDFSimilarity *self, PyObject *args);
          static PyObject *t_TFIDFSimilarity_simScorer(t_TFIDFSimilarity *self, PyObject *args);
          static PyObject *t_TFIDFSimilarity_sloppyFreq(t_TFIDFSimilarity *self, PyObject *arg);
          static PyObject *t_TFIDFSimilarity_tf(t_TFIDFSimilarity *self, PyObject *arg);

          static PyMethodDef t_TFIDFSimilarity__methods_[] = {
            DECLARE_METHOD(t_TFIDFSimilarity, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TFIDFSimilarity, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TFIDFSimilarity, computeNorm, METH_VARARGS),
            DECLARE_METHOD(t_TFIDFSimilarity, computeWeight, METH_VARARGS),
            DECLARE_METHOD(t_TFIDFSimilarity, coord, METH_VARARGS),
            DECLARE_METHOD(t_TFIDFSimilarity, decodeNormValue, METH_O),
            DECLARE_METHOD(t_TFIDFSimilarity, encodeNormValue, METH_O),
            DECLARE_METHOD(t_TFIDFSimilarity, idf, METH_VARARGS),
            DECLARE_METHOD(t_TFIDFSimilarity, idfExplain, METH_VARARGS),
            DECLARE_METHOD(t_TFIDFSimilarity, lengthNorm, METH_O),
            DECLARE_METHOD(t_TFIDFSimilarity, queryNorm, METH_VARARGS),
            DECLARE_METHOD(t_TFIDFSimilarity, scorePayload, METH_VARARGS),
            DECLARE_METHOD(t_TFIDFSimilarity, simScorer, METH_VARARGS),
            DECLARE_METHOD(t_TFIDFSimilarity, sloppyFreq, METH_O),
            DECLARE_METHOD(t_TFIDFSimilarity, tf, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(TFIDFSimilarity, t_TFIDFSimilarity, ::org::apache::lucene::search::similarities::Similarity, TFIDFSimilarity, t_TFIDFSimilarity_init_, 0, 0, 0, 0, 0);

          void t_TFIDFSimilarity::install(PyObject *module)
          {
            installType(&PY_TYPE(TFIDFSimilarity), module, "TFIDFSimilarity", 0);
          }

          void t_TFIDFSimilarity::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(TFIDFSimilarity).tp_dict, "class_", make_descriptor(TFIDFSimilarity::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(TFIDFSimilarity).tp_dict, "wrapfn_", make_descriptor(t_TFIDFSimilarity::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(TFIDFSimilarity).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TFIDFSimilarity_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TFIDFSimilarity::initializeClass, 1)))
              return NULL;
            return t_TFIDFSimilarity::wrap_Object(TFIDFSimilarity(((t_TFIDFSimilarity *) arg)->object.this$));
          }
          static PyObject *t_TFIDFSimilarity_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TFIDFSimilarity::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_TFIDFSimilarity_init_(t_TFIDFSimilarity *self, PyObject *args, PyObject *kwds)
          {
            TFIDFSimilarity object((jobject) NULL);

            INT_CALL(object = TFIDFSimilarity());
            self->object = object;

            return 0;
          }

          static PyObject *t_TFIDFSimilarity_computeNorm(t_TFIDFSimilarity *self, PyObject *args)
          {
            ::org::apache::lucene::index::FieldInvertState a0((jobject) NULL);
            jlong result;

            if (!parseArgs(args, "k", ::org::apache::lucene::index::FieldInvertState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.computeNorm(a0));
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(&PY_TYPE(TFIDFSimilarity), (PyObject *) self, "computeNorm", args, 2);
          }

          static PyObject *t_TFIDFSimilarity_computeWeight(t_TFIDFSimilarity *self, PyObject *args)
          {
            jfloat a0;
            ::org::apache::lucene::search::CollectionStatistics a1((jobject) NULL);
            JArray< ::org::apache::lucene::search::TermStatistics > a2((jobject) NULL);
            ::org::apache::lucene::search::similarities::Similarity$SimWeight result((jobject) NULL);

            if (!parseArgs(args, "Fk[k", ::org::apache::lucene::search::CollectionStatistics::initializeClass, ::org::apache::lucene::search::TermStatistics::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.computeWeight(a0, a1, a2));
              return ::org::apache::lucene::search::similarities::t_Similarity$SimWeight::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(TFIDFSimilarity), (PyObject *) self, "computeWeight", args, 2);
          }

          static PyObject *t_TFIDFSimilarity_coord(t_TFIDFSimilarity *self, PyObject *args)
          {
            jint a0;
            jint a1;
            jfloat result;

            if (!parseArgs(args, "II", &a0, &a1))
            {
              OBJ_CALL(result = self->object.coord(a0, a1));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(TFIDFSimilarity), (PyObject *) self, "coord", args, 2);
          }

          static PyObject *t_TFIDFSimilarity_decodeNormValue(t_TFIDFSimilarity *self, PyObject *arg)
          {
            jlong a0;
            jfloat result;

            if (!parseArg(arg, "J", &a0))
            {
              OBJ_CALL(result = self->object.decodeNormValue(a0));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "decodeNormValue", arg);
            return NULL;
          }

          static PyObject *t_TFIDFSimilarity_encodeNormValue(t_TFIDFSimilarity *self, PyObject *arg)
          {
            jfloat a0;
            jlong result;

            if (!parseArg(arg, "F", &a0))
            {
              OBJ_CALL(result = self->object.encodeNormValue(a0));
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            PyErr_SetArgsError((PyObject *) self, "encodeNormValue", arg);
            return NULL;
          }

          static PyObject *t_TFIDFSimilarity_idf(t_TFIDFSimilarity *self, PyObject *args)
          {
            jlong a0;
            jlong a1;
            jfloat result;

            if (!parseArgs(args, "JJ", &a0, &a1))
            {
              OBJ_CALL(result = self->object.idf(a0, a1));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "idf", args);
            return NULL;
          }

          static PyObject *t_TFIDFSimilarity_idfExplain(t_TFIDFSimilarity *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::search::CollectionStatistics a0((jobject) NULL);
                ::org::apache::lucene::search::TermStatistics a1((jobject) NULL);
                ::org::apache::lucene::search::Explanation result((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::search::CollectionStatistics::initializeClass, ::org::apache::lucene::search::TermStatistics::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(result = self->object.idfExplain(a0, a1));
                  return ::org::apache::lucene::search::t_Explanation::wrap_Object(result);
                }
              }
              {
                ::org::apache::lucene::search::CollectionStatistics a0((jobject) NULL);
                JArray< ::org::apache::lucene::search::TermStatistics > a1((jobject) NULL);
                ::org::apache::lucene::search::Explanation result((jobject) NULL);

                if (!parseArgs(args, "k[k", ::org::apache::lucene::search::CollectionStatistics::initializeClass, ::org::apache::lucene::search::TermStatistics::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(result = self->object.idfExplain(a0, a1));
                  return ::org::apache::lucene::search::t_Explanation::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "idfExplain", args);
            return NULL;
          }

          static PyObject *t_TFIDFSimilarity_lengthNorm(t_TFIDFSimilarity *self, PyObject *arg)
          {
            ::org::apache::lucene::index::FieldInvertState a0((jobject) NULL);
            jfloat result;

            if (!parseArg(arg, "k", ::org::apache::lucene::index::FieldInvertState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.lengthNorm(a0));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "lengthNorm", arg);
            return NULL;
          }

          static PyObject *t_TFIDFSimilarity_queryNorm(t_TFIDFSimilarity *self, PyObject *args)
          {
            jfloat a0;
            jfloat result;

            if (!parseArgs(args, "F", &a0))
            {
              OBJ_CALL(result = self->object.queryNorm(a0));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(TFIDFSimilarity), (PyObject *) self, "queryNorm", args, 2);
          }

          static PyObject *t_TFIDFSimilarity_scorePayload(t_TFIDFSimilarity *self, PyObject *args)
          {
            jint a0;
            jint a1;
            jint a2;
            ::org::apache::lucene::util::BytesRef a3((jobject) NULL);
            jfloat result;

            if (!parseArgs(args, "IIIk", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2, &a3))
            {
              OBJ_CALL(result = self->object.scorePayload(a0, a1, a2, a3));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "scorePayload", args);
            return NULL;
          }

          static PyObject *t_TFIDFSimilarity_simScorer(t_TFIDFSimilarity *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::Similarity$SimWeight a0((jobject) NULL);
            ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
            ::org::apache::lucene::search::similarities::Similarity$SimScorer result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::search::similarities::Similarity$SimWeight::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.simScorer(a0, a1));
              return ::org::apache::lucene::search::similarities::t_Similarity$SimScorer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(TFIDFSimilarity), (PyObject *) self, "simScorer", args, 2);
          }

          static PyObject *t_TFIDFSimilarity_sloppyFreq(t_TFIDFSimilarity *self, PyObject *arg)
          {
            jint a0;
            jfloat result;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.sloppyFreq(a0));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "sloppyFreq", arg);
            return NULL;
          }

          static PyObject *t_TFIDFSimilarity_tf(t_TFIDFSimilarity *self, PyObject *arg)
          {
            jfloat a0;
            jfloat result;

            if (!parseArg(arg, "F", &a0))
            {
              OBJ_CALL(result = self->object.tf(a0));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "tf", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/fr/FrenchMinimalStemFilterFactory.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fr {

          ::java::lang::Class *FrenchMinimalStemFilterFactory::class$ = NULL;
          jmethodID *FrenchMinimalStemFilterFactory::mids$ = NULL;
          bool FrenchMinimalStemFilterFactory::live$ = false;

          jclass FrenchMinimalStemFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/fr/FrenchMinimalStemFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FrenchMinimalStemFilterFactory::FrenchMinimalStemFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream FrenchMinimalStemFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fr {
          static PyObject *t_FrenchMinimalStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FrenchMinimalStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FrenchMinimalStemFilterFactory_init_(t_FrenchMinimalStemFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FrenchMinimalStemFilterFactory_create(t_FrenchMinimalStemFilterFactory *self, PyObject *args);

          static PyMethodDef t_FrenchMinimalStemFilterFactory__methods_[] = {
            DECLARE_METHOD(t_FrenchMinimalStemFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FrenchMinimalStemFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FrenchMinimalStemFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FrenchMinimalStemFilterFactory, t_FrenchMinimalStemFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, FrenchMinimalStemFilterFactory, t_FrenchMinimalStemFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_FrenchMinimalStemFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(FrenchMinimalStemFilterFactory), module, "FrenchMinimalStemFilterFactory", 0);
          }

          void t_FrenchMinimalStemFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FrenchMinimalStemFilterFactory).tp_dict, "class_", make_descriptor(FrenchMinimalStemFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FrenchMinimalStemFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_FrenchMinimalStemFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FrenchMinimalStemFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FrenchMinimalStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FrenchMinimalStemFilterFactory::initializeClass, 1)))
              return NULL;
            return t_FrenchMinimalStemFilterFactory::wrap_Object(FrenchMinimalStemFilterFactory(((t_FrenchMinimalStemFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_FrenchMinimalStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FrenchMinimalStemFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FrenchMinimalStemFilterFactory_init_(t_FrenchMinimalStemFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            FrenchMinimalStemFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = FrenchMinimalStemFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_FrenchMinimalStemFilterFactory_create(t_FrenchMinimalStemFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(FrenchMinimalStemFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/BoostQueryNodeBuilder.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/StandardQueryBuilder.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {

              ::java::lang::Class *BoostQueryNodeBuilder::class$ = NULL;
              jmethodID *BoostQueryNodeBuilder::mids$ = NULL;
              bool BoostQueryNodeBuilder::live$ = false;

              jclass BoostQueryNodeBuilder::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/builders/BoostQueryNodeBuilder");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_build_7f6ce179] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/search/Query;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              BoostQueryNodeBuilder::BoostQueryNodeBuilder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              ::org::apache::lucene::search::Query BoostQueryNodeBuilder::build(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_build_7f6ce179], a0.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {
              static PyObject *t_BoostQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_BoostQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg);
              static int t_BoostQueryNodeBuilder_init_(t_BoostQueryNodeBuilder *self, PyObject *args, PyObject *kwds);
              static PyObject *t_BoostQueryNodeBuilder_build(t_BoostQueryNodeBuilder *self, PyObject *arg);

              static PyMethodDef t_BoostQueryNodeBuilder__methods_[] = {
                DECLARE_METHOD(t_BoostQueryNodeBuilder, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_BoostQueryNodeBuilder, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_BoostQueryNodeBuilder, build, METH_O),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(BoostQueryNodeBuilder, t_BoostQueryNodeBuilder, ::java::lang::Object, BoostQueryNodeBuilder, t_BoostQueryNodeBuilder_init_, 0, 0, 0, 0, 0);

              void t_BoostQueryNodeBuilder::install(PyObject *module)
              {
                installType(&PY_TYPE(BoostQueryNodeBuilder), module, "BoostQueryNodeBuilder", 0);
              }

              void t_BoostQueryNodeBuilder::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(BoostQueryNodeBuilder).tp_dict, "class_", make_descriptor(BoostQueryNodeBuilder::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(BoostQueryNodeBuilder).tp_dict, "wrapfn_", make_descriptor(t_BoostQueryNodeBuilder::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(BoostQueryNodeBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_BoostQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, BoostQueryNodeBuilder::initializeClass, 1)))
                  return NULL;
                return t_BoostQueryNodeBuilder::wrap_Object(BoostQueryNodeBuilder(((t_BoostQueryNodeBuilder *) arg)->object.this$));
              }
              static PyObject *t_BoostQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, BoostQueryNodeBuilder::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_BoostQueryNodeBuilder_init_(t_BoostQueryNodeBuilder *self, PyObject *args, PyObject *kwds)
              {
                BoostQueryNodeBuilder object((jobject) NULL);

                INT_CALL(object = BoostQueryNodeBuilder());
                self->object = object;

                return 0;
              }

              static PyObject *t_BoostQueryNodeBuilder_build(t_BoostQueryNodeBuilder *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::search::Query result((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.build(a0));
                  return ::org::apache::lucene::search::t_Query::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "build", arg);
                return NULL;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/charfilter/BaseCharFilter.h"
#include "java/io/Reader.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace charfilter {

          ::java::lang::Class *BaseCharFilter::class$ = NULL;
          jmethodID *BaseCharFilter::mids$ = NULL;
          bool BaseCharFilter::live$ = false;

          jclass BaseCharFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/charfilter/BaseCharFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_cf2e3c10] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;)V");
              mids$[mid_correct_39c7bd23] = env->getMethodID(cls, "correct", "(I)I");
              mids$[mid_addOffCorrectMap_d8d154a6] = env->getMethodID(cls, "addOffCorrectMap", "(II)V");
              mids$[mid_getLastCumulativeDiff_54c6a179] = env->getMethodID(cls, "getLastCumulativeDiff", "()I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BaseCharFilter::BaseCharFilter(const ::java::io::Reader & a0) : ::org::apache::lucene::analysis::CharFilter(env->newObject(initializeClass, &mids$, mid_init$_cf2e3c10, a0.this$)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace charfilter {
          static PyObject *t_BaseCharFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BaseCharFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_BaseCharFilter_init_(t_BaseCharFilter *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_BaseCharFilter__methods_[] = {
            DECLARE_METHOD(t_BaseCharFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BaseCharFilter, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(BaseCharFilter, t_BaseCharFilter, ::org::apache::lucene::analysis::CharFilter, BaseCharFilter, t_BaseCharFilter_init_, 0, 0, 0, 0, 0);

          void t_BaseCharFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(BaseCharFilter), module, "BaseCharFilter", 0);
          }

          void t_BaseCharFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(BaseCharFilter).tp_dict, "class_", make_descriptor(BaseCharFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(BaseCharFilter).tp_dict, "wrapfn_", make_descriptor(t_BaseCharFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(BaseCharFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_BaseCharFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BaseCharFilter::initializeClass, 1)))
              return NULL;
            return t_BaseCharFilter::wrap_Object(BaseCharFilter(((t_BaseCharFilter *) arg)->object.this$));
          }
          static PyObject *t_BaseCharFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BaseCharFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_BaseCharFilter_init_(t_BaseCharFilter *self, PyObject *args, PyObject *kwds)
          {
            ::java::io::Reader a0((jobject) NULL);
            BaseCharFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
            {
              INT_CALL(object = BaseCharFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/standard/StandardTokenizerFactory.h"
#include "java/lang/Class.h"
#include "java/io/Reader.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/standard/StandardTokenizer.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {

          ::java::lang::Class *StandardTokenizerFactory::class$ = NULL;
          jmethodID *StandardTokenizerFactory::mids$ = NULL;
          bool StandardTokenizerFactory::live$ = false;

          jclass StandardTokenizerFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/standard/StandardTokenizerFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_9cba40d3] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;)Lorg/apache/lucene/analysis/standard/StandardTokenizer;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          StandardTokenizerFactory::StandardTokenizerFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenizerFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::standard::StandardTokenizer StandardTokenizerFactory::create(const ::org::apache::lucene::util::AttributeFactory & a0, const ::java::io::Reader & a1) const
          {
            return ::org::apache::lucene::analysis::standard::StandardTokenizer(env->callObjectMethod(this$, mids$[mid_create_9cba40d3], a0.this$, a1.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {
          static PyObject *t_StandardTokenizerFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_StandardTokenizerFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_StandardTokenizerFactory_init_(t_StandardTokenizerFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_StandardTokenizerFactory_create(t_StandardTokenizerFactory *self, PyObject *args);

          static PyMethodDef t_StandardTokenizerFactory__methods_[] = {
            DECLARE_METHOD(t_StandardTokenizerFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StandardTokenizerFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StandardTokenizerFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(StandardTokenizerFactory, t_StandardTokenizerFactory, ::org::apache::lucene::analysis::util::TokenizerFactory, StandardTokenizerFactory, t_StandardTokenizerFactory_init_, 0, 0, 0, 0, 0);

          void t_StandardTokenizerFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(StandardTokenizerFactory), module, "StandardTokenizerFactory", 0);
          }

          void t_StandardTokenizerFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(StandardTokenizerFactory).tp_dict, "class_", make_descriptor(StandardTokenizerFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(StandardTokenizerFactory).tp_dict, "wrapfn_", make_descriptor(t_StandardTokenizerFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(StandardTokenizerFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_StandardTokenizerFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, StandardTokenizerFactory::initializeClass, 1)))
              return NULL;
            return t_StandardTokenizerFactory::wrap_Object(StandardTokenizerFactory(((t_StandardTokenizerFactory *) arg)->object.this$));
          }
          static PyObject *t_StandardTokenizerFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, StandardTokenizerFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_StandardTokenizerFactory_init_(t_StandardTokenizerFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            StandardTokenizerFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = StandardTokenizerFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_StandardTokenizerFactory_create(t_StandardTokenizerFactory *self, PyObject *args)
          {
            ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
            ::java::io::Reader a1((jobject) NULL);
            ::org::apache::lucene::analysis::standard::StandardTokenizer result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.create(a0, a1));
              return ::org::apache::lucene::analysis::standard::t_StandardTokenizer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(StandardTokenizerFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/BroadWord.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *BroadWord::class$ = NULL;
        jmethodID *BroadWord::mids$ = NULL;
        bool BroadWord::live$ = false;
        jlong BroadWord::H16_L = (jlong) 0;
        jlong BroadWord::H8_L = (jlong) 0;
        jlong BroadWord::L16_L = (jlong) 0;
        jlong BroadWord::L8_L = (jlong) 0;
        jlong BroadWord::L9_L = (jlong) 0;

        jclass BroadWord::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/BroadWord");

            mids$ = new jmethodID[max_mid];
            mids$[mid_notEquals0_8_0ee6df33] = env->getStaticMethodID(cls, "notEquals0_8", "(J)J");
            mids$[mid_select_25d05c90] = env->getStaticMethodID(cls, "select", "(JI)I");
            mids$[mid_selectNaive_25d05c90] = env->getStaticMethodID(cls, "selectNaive", "(JI)I");
            mids$[mid_smallerUpTo7_8_a7e12cb8] = env->getStaticMethodID(cls, "smallerUpTo7_8", "(JJ)J");
            mids$[mid_smallerUpto15_16_a7e12cb8] = env->getStaticMethodID(cls, "smallerUpto15_16", "(JJ)J");
            mids$[mid_smalleru_8_a7e12cb8] = env->getStaticMethodID(cls, "smalleru_8", "(JJ)J");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            H16_L = env->getStaticLongField(cls, "H16_L");
            H8_L = env->getStaticLongField(cls, "H8_L");
            L16_L = env->getStaticLongField(cls, "L16_L");
            L8_L = env->getStaticLongField(cls, "L8_L");
            L9_L = env->getStaticLongField(cls, "L9_L");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jlong BroadWord::notEquals0_8(jlong a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_notEquals0_8_0ee6df33], a0);
        }

        jint BroadWord::select(jlong a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_select_25d05c90], a0, a1);
        }

        jint BroadWord::selectNaive(jlong a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_selectNaive_25d05c90], a0, a1);
        }

        jlong BroadWord::smallerUpTo7_8(jlong a0, jlong a1)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_smallerUpTo7_8_a7e12cb8], a0, a1);
        }

        jlong BroadWord::smallerUpto15_16(jlong a0, jlong a1)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_smallerUpto15_16_a7e12cb8], a0, a1);
        }

        jlong BroadWord::smalleru_8(jlong a0, jlong a1)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_smalleru_8_a7e12cb8], a0, a1);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_BroadWord_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BroadWord_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BroadWord_notEquals0_8(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BroadWord_select(PyTypeObject *type, PyObject *args);
        static PyObject *t_BroadWord_selectNaive(PyTypeObject *type, PyObject *args);
        static PyObject *t_BroadWord_smallerUpTo7_8(PyTypeObject *type, PyObject *args);
        static PyObject *t_BroadWord_smallerUpto15_16(PyTypeObject *type, PyObject *args);
        static PyObject *t_BroadWord_smalleru_8(PyTypeObject *type, PyObject *args);

        static PyMethodDef t_BroadWord__methods_[] = {
          DECLARE_METHOD(t_BroadWord, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BroadWord, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BroadWord, notEquals0_8, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BroadWord, select, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_BroadWord, selectNaive, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_BroadWord, smallerUpTo7_8, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_BroadWord, smallerUpto15_16, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_BroadWord, smalleru_8, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(BroadWord, t_BroadWord, ::java::lang::Object, BroadWord, abstract_init, 0, 0, 0, 0, 0);

        void t_BroadWord::install(PyObject *module)
        {
          installType(&PY_TYPE(BroadWord), module, "BroadWord", 0);
        }

        void t_BroadWord::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(BroadWord).tp_dict, "class_", make_descriptor(BroadWord::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(BroadWord).tp_dict, "wrapfn_", make_descriptor(t_BroadWord::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(BroadWord).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(BroadWord::initializeClass);
          PyDict_SetItemString(PY_TYPE(BroadWord).tp_dict, "H16_L", make_descriptor(BroadWord::H16_L));
          PyDict_SetItemString(PY_TYPE(BroadWord).tp_dict, "H8_L", make_descriptor(BroadWord::H8_L));
          PyDict_SetItemString(PY_TYPE(BroadWord).tp_dict, "L16_L", make_descriptor(BroadWord::L16_L));
          PyDict_SetItemString(PY_TYPE(BroadWord).tp_dict, "L8_L", make_descriptor(BroadWord::L8_L));
          PyDict_SetItemString(PY_TYPE(BroadWord).tp_dict, "L9_L", make_descriptor(BroadWord::L9_L));
        }

        static PyObject *t_BroadWord_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, BroadWord::initializeClass, 1)))
            return NULL;
          return t_BroadWord::wrap_Object(BroadWord(((t_BroadWord *) arg)->object.this$));
        }
        static PyObject *t_BroadWord_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, BroadWord::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_BroadWord_notEquals0_8(PyTypeObject *type, PyObject *arg)
        {
          jlong a0;
          jlong result;

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::BroadWord::notEquals0_8(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError(type, "notEquals0_8", arg);
          return NULL;
        }

        static PyObject *t_BroadWord_select(PyTypeObject *type, PyObject *args)
        {
          jlong a0;
          jint a1;
          jint result;

          if (!parseArgs(args, "JI", &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::BroadWord::select(a0, a1));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError(type, "select", args);
          return NULL;
        }

        static PyObject *t_BroadWord_selectNaive(PyTypeObject *type, PyObject *args)
        {
          jlong a0;
          jint a1;
          jint result;

          if (!parseArgs(args, "JI", &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::BroadWord::selectNaive(a0, a1));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError(type, "selectNaive", args);
          return NULL;
        }

        static PyObject *t_BroadWord_smallerUpTo7_8(PyTypeObject *type, PyObject *args)
        {
          jlong a0;
          jlong a1;
          jlong result;

          if (!parseArgs(args, "JJ", &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::BroadWord::smallerUpTo7_8(a0, a1));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError(type, "smallerUpTo7_8", args);
          return NULL;
        }

        static PyObject *t_BroadWord_smallerUpto15_16(PyTypeObject *type, PyObject *args)
        {
          jlong a0;
          jlong a1;
          jlong result;

          if (!parseArgs(args, "JJ", &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::BroadWord::smallerUpto15_16(a0, a1));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError(type, "smallerUpto15_16", args);
          return NULL;
        }

        static PyObject *t_BroadWord_smalleru_8(PyTypeObject *type, PyObject *args)
        {
          jlong a0;
          jlong a1;
          jlong result;

          if (!parseArgs(args, "JJ", &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::BroadWord::smalleru_8(a0, a1));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError(type, "smalleru_8", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/FilterDirectoryReader$SubReaderWrapper.h"
#include "org/apache/lucene/index/AtomicReader.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *FilterDirectoryReader$SubReaderWrapper::class$ = NULL;
        jmethodID *FilterDirectoryReader$SubReaderWrapper::mids$ = NULL;
        bool FilterDirectoryReader$SubReaderWrapper::live$ = false;

        jclass FilterDirectoryReader$SubReaderWrapper::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/FilterDirectoryReader$SubReaderWrapper");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_wrap_3b1ad795] = env->getMethodID(cls, "wrap", "(Lorg/apache/lucene/index/AtomicReader;)Lorg/apache/lucene/index/AtomicReader;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FilterDirectoryReader$SubReaderWrapper::FilterDirectoryReader$SubReaderWrapper() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        ::org::apache::lucene::index::AtomicReader FilterDirectoryReader$SubReaderWrapper::wrap(const ::org::apache::lucene::index::AtomicReader & a0) const
        {
          return ::org::apache::lucene::index::AtomicReader(env->callObjectMethod(this$, mids$[mid_wrap_3b1ad795], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_FilterDirectoryReader$SubReaderWrapper_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FilterDirectoryReader$SubReaderWrapper_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FilterDirectoryReader$SubReaderWrapper_of_(t_FilterDirectoryReader$SubReaderWrapper *self, PyObject *args);
        static int t_FilterDirectoryReader$SubReaderWrapper_init_(t_FilterDirectoryReader$SubReaderWrapper *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FilterDirectoryReader$SubReaderWrapper_wrap(t_FilterDirectoryReader$SubReaderWrapper *self, PyObject *arg);
        static PyObject *t_FilterDirectoryReader$SubReaderWrapper_get__parameters_(t_FilterDirectoryReader$SubReaderWrapper *self, void *data);
        static PyGetSetDef t_FilterDirectoryReader$SubReaderWrapper__fields_[] = {
          DECLARE_GET_FIELD(t_FilterDirectoryReader$SubReaderWrapper, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FilterDirectoryReader$SubReaderWrapper__methods_[] = {
          DECLARE_METHOD(t_FilterDirectoryReader$SubReaderWrapper, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilterDirectoryReader$SubReaderWrapper, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilterDirectoryReader$SubReaderWrapper, of_, METH_VARARGS),
          DECLARE_METHOD(t_FilterDirectoryReader$SubReaderWrapper, wrap, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FilterDirectoryReader$SubReaderWrapper, t_FilterDirectoryReader$SubReaderWrapper, ::java::lang::Object, FilterDirectoryReader$SubReaderWrapper, t_FilterDirectoryReader$SubReaderWrapper_init_, 0, 0, t_FilterDirectoryReader$SubReaderWrapper__fields_, 0, 0);
        PyObject *t_FilterDirectoryReader$SubReaderWrapper::wrap_Object(const FilterDirectoryReader$SubReaderWrapper& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FilterDirectoryReader$SubReaderWrapper::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FilterDirectoryReader$SubReaderWrapper *self = (t_FilterDirectoryReader$SubReaderWrapper *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_FilterDirectoryReader$SubReaderWrapper::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FilterDirectoryReader$SubReaderWrapper::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FilterDirectoryReader$SubReaderWrapper *self = (t_FilterDirectoryReader$SubReaderWrapper *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_FilterDirectoryReader$SubReaderWrapper::install(PyObject *module)
        {
          installType(&PY_TYPE(FilterDirectoryReader$SubReaderWrapper), module, "FilterDirectoryReader$SubReaderWrapper", 0);
        }

        void t_FilterDirectoryReader$SubReaderWrapper::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FilterDirectoryReader$SubReaderWrapper).tp_dict, "class_", make_descriptor(FilterDirectoryReader$SubReaderWrapper::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FilterDirectoryReader$SubReaderWrapper).tp_dict, "wrapfn_", make_descriptor(t_FilterDirectoryReader$SubReaderWrapper::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FilterDirectoryReader$SubReaderWrapper).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FilterDirectoryReader$SubReaderWrapper_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FilterDirectoryReader$SubReaderWrapper::initializeClass, 1)))
            return NULL;
          return t_FilterDirectoryReader$SubReaderWrapper::wrap_Object(FilterDirectoryReader$SubReaderWrapper(((t_FilterDirectoryReader$SubReaderWrapper *) arg)->object.this$));
        }
        static PyObject *t_FilterDirectoryReader$SubReaderWrapper_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FilterDirectoryReader$SubReaderWrapper::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FilterDirectoryReader$SubReaderWrapper_of_(t_FilterDirectoryReader$SubReaderWrapper *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_FilterDirectoryReader$SubReaderWrapper_init_(t_FilterDirectoryReader$SubReaderWrapper *self, PyObject *args, PyObject *kwds)
        {
          FilterDirectoryReader$SubReaderWrapper object((jobject) NULL);

          INT_CALL(object = FilterDirectoryReader$SubReaderWrapper());
          self->object = object;
          self->parameters[0] = &::org::apache::lucene::index::PY_TYPE(AtomicReader);

          return 0;
        }

        static PyObject *t_FilterDirectoryReader$SubReaderWrapper_wrap(t_FilterDirectoryReader$SubReaderWrapper *self, PyObject *arg)
        {
          ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);
          ::org::apache::lucene::index::AtomicReader result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReader::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.wrap(a0));
            return ::org::apache::lucene::index::t_AtomicReader::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "wrap", arg);
          return NULL;
        }
        static PyObject *t_FilterDirectoryReader$SubReaderWrapper_get__parameters_(t_FilterDirectoryReader$SubReaderWrapper *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/da/DanishAnalyzer.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace da {

          ::java::lang::Class *DanishAnalyzer::class$ = NULL;
          jmethodID *DanishAnalyzer::mids$ = NULL;
          bool DanishAnalyzer::live$ = false;
          ::java::lang::String *DanishAnalyzer::DEFAULT_STOPWORD_FILE = NULL;

          jclass DanishAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/da/DanishAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_6d1f9881] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_0d96cf33] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;)V");
              mids$[mid_init$_3ea629c6] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/util/CharArraySet;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_83eafe28] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_c9d7e4a3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_getDefaultStopSet_d2d3505c] = env->getStaticMethodID(cls, "getDefaultStopSet", "()Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_STOPWORD_FILE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_STOPWORD_FILE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          DanishAnalyzer::DanishAnalyzer() : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          DanishAnalyzer::DanishAnalyzer(const ::org::apache::lucene::analysis::util::CharArraySet & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_6d1f9881, a0.this$)) {}

          DanishAnalyzer::DanishAnalyzer(const ::org::apache::lucene::util::Version & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_0d96cf33, a0.this$)) {}

          DanishAnalyzer::DanishAnalyzer(const ::org::apache::lucene::analysis::util::CharArraySet & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_3ea629c6, a0.this$, a1.this$)) {}

          DanishAnalyzer::DanishAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_83eafe28, a0.this$, a1.this$)) {}

          DanishAnalyzer::DanishAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1, const ::org::apache::lucene::analysis::util::CharArraySet & a2) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_c9d7e4a3, a0.this$, a1.this$, a2.this$)) {}

          ::org::apache::lucene::analysis::util::CharArraySet DanishAnalyzer::getDefaultStopSet()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getDefaultStopSet_d2d3505c]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace da {
          static PyObject *t_DanishAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DanishAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_DanishAnalyzer_init_(t_DanishAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_DanishAnalyzer_getDefaultStopSet(PyTypeObject *type);
          static PyObject *t_DanishAnalyzer_get__defaultStopSet(t_DanishAnalyzer *self, void *data);
          static PyGetSetDef t_DanishAnalyzer__fields_[] = {
            DECLARE_GET_FIELD(t_DanishAnalyzer, defaultStopSet),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_DanishAnalyzer__methods_[] = {
            DECLARE_METHOD(t_DanishAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DanishAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DanishAnalyzer, getDefaultStopSet, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(DanishAnalyzer, t_DanishAnalyzer, ::org::apache::lucene::analysis::util::StopwordAnalyzerBase, DanishAnalyzer, t_DanishAnalyzer_init_, 0, 0, t_DanishAnalyzer__fields_, 0, 0);

          void t_DanishAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(DanishAnalyzer), module, "DanishAnalyzer", 0);
          }

          void t_DanishAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(DanishAnalyzer).tp_dict, "class_", make_descriptor(DanishAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(DanishAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_DanishAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(DanishAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(DanishAnalyzer::initializeClass);
            PyDict_SetItemString(PY_TYPE(DanishAnalyzer).tp_dict, "DEFAULT_STOPWORD_FILE", make_descriptor(j2p(*DanishAnalyzer::DEFAULT_STOPWORD_FILE)));
          }

          static PyObject *t_DanishAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, DanishAnalyzer::initializeClass, 1)))
              return NULL;
            return t_DanishAnalyzer::wrap_Object(DanishAnalyzer(((t_DanishAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_DanishAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, DanishAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_DanishAnalyzer_init_(t_DanishAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                DanishAnalyzer object((jobject) NULL);

                INT_CALL(object = DanishAnalyzer());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                ::org::apache::lucene::analysis::util::CharArraySet a0((jobject) NULL);
                PyTypeObject **p0;
                DanishAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = DanishAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                DanishAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::util::Version::initializeClass, &a0))
                {
                  INT_CALL(object = DanishAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::analysis::util::CharArraySet a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                DanishAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = DanishAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                DanishAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "kK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = DanishAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                ::org::apache::lucene::analysis::util::CharArraySet a2((jobject) NULL);
                PyTypeObject **p2;
                DanishAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "kKK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_, &a2, &p2, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = DanishAnalyzer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_DanishAnalyzer_getDefaultStopSet(PyTypeObject *type)
          {
            ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::da::DanishAnalyzer::getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_DanishAnalyzer_get__defaultStopSet(t_DanishAnalyzer *self, void *data)
          {
            ::org::apache::lucene::analysis::util::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/tst/TernaryTreeNode.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace tst {

            ::java::lang::Class *TernaryTreeNode::class$ = NULL;
            jmethodID *TernaryTreeNode::mids$ = NULL;
            bool TernaryTreeNode::live$ = false;

            jclass TernaryTreeNode::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/tst/TernaryTreeNode");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            TernaryTreeNode::TernaryTreeNode() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace tst {
            static PyObject *t_TernaryTreeNode_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_TernaryTreeNode_instance_(PyTypeObject *type, PyObject *arg);
            static int t_TernaryTreeNode_init_(t_TernaryTreeNode *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_TernaryTreeNode__methods_[] = {
              DECLARE_METHOD(t_TernaryTreeNode, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TernaryTreeNode, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(TernaryTreeNode, t_TernaryTreeNode, ::java::lang::Object, TernaryTreeNode, t_TernaryTreeNode_init_, 0, 0, 0, 0, 0);

            void t_TernaryTreeNode::install(PyObject *module)
            {
              installType(&PY_TYPE(TernaryTreeNode), module, "TernaryTreeNode", 0);
            }

            void t_TernaryTreeNode::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(TernaryTreeNode).tp_dict, "class_", make_descriptor(TernaryTreeNode::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(TernaryTreeNode).tp_dict, "wrapfn_", make_descriptor(t_TernaryTreeNode::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(TernaryTreeNode).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_TernaryTreeNode_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, TernaryTreeNode::initializeClass, 1)))
                return NULL;
              return t_TernaryTreeNode::wrap_Object(TernaryTreeNode(((t_TernaryTreeNode *) arg)->object.this$));
            }
            static PyObject *t_TernaryTreeNode_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, TernaryTreeNode::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_TernaryTreeNode_init_(t_TernaryTreeNode *self, PyObject *args, PyObject *kwds)
            {
              TernaryTreeNode object((jobject) NULL);

              INT_CALL(object = TernaryTreeNode());
              self->object = object;

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/DocsAndPositionsEnum.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *DocsAndPositionsEnum::class$ = NULL;
        jmethodID *DocsAndPositionsEnum::mids$ = NULL;
        bool DocsAndPositionsEnum::live$ = false;
        jint DocsAndPositionsEnum::FLAG_OFFSETS = (jint) 0;
        jint DocsAndPositionsEnum::FLAG_PAYLOADS = (jint) 0;

        jclass DocsAndPositionsEnum::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/DocsAndPositionsEnum");

            mids$ = new jmethodID[max_mid];
            mids$[mid_endOffset_54c6a179] = env->getMethodID(cls, "endOffset", "()I");
            mids$[mid_getPayload_4ae19461] = env->getMethodID(cls, "getPayload", "()Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_nextPosition_54c6a179] = env->getMethodID(cls, "nextPosition", "()I");
            mids$[mid_startOffset_54c6a179] = env->getMethodID(cls, "startOffset", "()I");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            FLAG_OFFSETS = env->getStaticIntField(cls, "FLAG_OFFSETS");
            FLAG_PAYLOADS = env->getStaticIntField(cls, "FLAG_PAYLOADS");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jint DocsAndPositionsEnum::endOffset() const
        {
          return env->callIntMethod(this$, mids$[mid_endOffset_54c6a179]);
        }

        ::org::apache::lucene::util::BytesRef DocsAndPositionsEnum::getPayload() const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_getPayload_4ae19461]));
        }

        jint DocsAndPositionsEnum::nextPosition() const
        {
          return env->callIntMethod(this$, mids$[mid_nextPosition_54c6a179]);
        }

        jint DocsAndPositionsEnum::startOffset() const
        {
          return env->callIntMethod(this$, mids$[mid_startOffset_54c6a179]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_DocsAndPositionsEnum_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DocsAndPositionsEnum_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DocsAndPositionsEnum_endOffset(t_DocsAndPositionsEnum *self);
        static PyObject *t_DocsAndPositionsEnum_getPayload(t_DocsAndPositionsEnum *self);
        static PyObject *t_DocsAndPositionsEnum_nextPosition(t_DocsAndPositionsEnum *self);
        static PyObject *t_DocsAndPositionsEnum_startOffset(t_DocsAndPositionsEnum *self);
        static PyObject *t_DocsAndPositionsEnum_get__payload(t_DocsAndPositionsEnum *self, void *data);
        static PyGetSetDef t_DocsAndPositionsEnum__fields_[] = {
          DECLARE_GET_FIELD(t_DocsAndPositionsEnum, payload),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_DocsAndPositionsEnum__methods_[] = {
          DECLARE_METHOD(t_DocsAndPositionsEnum, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DocsAndPositionsEnum, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DocsAndPositionsEnum, endOffset, METH_NOARGS),
          DECLARE_METHOD(t_DocsAndPositionsEnum, getPayload, METH_NOARGS),
          DECLARE_METHOD(t_DocsAndPositionsEnum, nextPosition, METH_NOARGS),
          DECLARE_METHOD(t_DocsAndPositionsEnum, startOffset, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(DocsAndPositionsEnum, t_DocsAndPositionsEnum, ::org::apache::lucene::index::DocsEnum, DocsAndPositionsEnum, abstract_init, 0, 0, t_DocsAndPositionsEnum__fields_, 0, 0);

        void t_DocsAndPositionsEnum::install(PyObject *module)
        {
          installType(&PY_TYPE(DocsAndPositionsEnum), module, "DocsAndPositionsEnum", 0);
        }

        void t_DocsAndPositionsEnum::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(DocsAndPositionsEnum).tp_dict, "class_", make_descriptor(DocsAndPositionsEnum::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(DocsAndPositionsEnum).tp_dict, "wrapfn_", make_descriptor(t_DocsAndPositionsEnum::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(DocsAndPositionsEnum).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(DocsAndPositionsEnum::initializeClass);
          PyDict_SetItemString(PY_TYPE(DocsAndPositionsEnum).tp_dict, "FLAG_OFFSETS", make_descriptor(DocsAndPositionsEnum::FLAG_OFFSETS));
          PyDict_SetItemString(PY_TYPE(DocsAndPositionsEnum).tp_dict, "FLAG_PAYLOADS", make_descriptor(DocsAndPositionsEnum::FLAG_PAYLOADS));
        }

        static PyObject *t_DocsAndPositionsEnum_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, DocsAndPositionsEnum::initializeClass, 1)))
            return NULL;
          return t_DocsAndPositionsEnum::wrap_Object(DocsAndPositionsEnum(((t_DocsAndPositionsEnum *) arg)->object.this$));
        }
        static PyObject *t_DocsAndPositionsEnum_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, DocsAndPositionsEnum::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_DocsAndPositionsEnum_endOffset(t_DocsAndPositionsEnum *self)
        {
          jint result;
          OBJ_CALL(result = self->object.endOffset());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_DocsAndPositionsEnum_getPayload(t_DocsAndPositionsEnum *self)
        {
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);
          OBJ_CALL(result = self->object.getPayload());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
        }

        static PyObject *t_DocsAndPositionsEnum_nextPosition(t_DocsAndPositionsEnum *self)
        {
          jint result;
          OBJ_CALL(result = self->object.nextPosition());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_DocsAndPositionsEnum_startOffset(t_DocsAndPositionsEnum *self)
        {
          jint result;
          OBJ_CALL(result = self->object.startOffset());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_DocsAndPositionsEnum_get__payload(t_DocsAndPositionsEnum *self, void *data)
        {
          ::org::apache::lucene::util::BytesRef value((jobject) NULL);
          OBJ_CALL(value = self->object.getPayload());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/vectorhighlight/FieldTermStack.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/vectorhighlight/FieldTermStack$TermInfo.h"
#include "org/apache/lucene/search/vectorhighlight/FieldQuery.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {

          ::java::lang::Class *FieldTermStack::class$ = NULL;
          jmethodID *FieldTermStack::mids$ = NULL;
          bool FieldTermStack::live$ = false;

          jclass FieldTermStack::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/vectorhighlight/FieldTermStack");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_e3cbed11] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/IndexReader;ILjava/lang/String;Lorg/apache/lucene/search/vectorhighlight/FieldQuery;)V");
              mids$[mid_getFieldName_14c7b5c5] = env->getMethodID(cls, "getFieldName", "()Ljava/lang/String;");
              mids$[mid_isEmpty_54c6a16a] = env->getMethodID(cls, "isEmpty", "()Z");
              mids$[mid_pop_9d9e3d4a] = env->getMethodID(cls, "pop", "()Lorg/apache/lucene/search/vectorhighlight/FieldTermStack$TermInfo;");
              mids$[mid_push_a7ece36b] = env->getMethodID(cls, "push", "(Lorg/apache/lucene/search/vectorhighlight/FieldTermStack$TermInfo;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FieldTermStack::FieldTermStack(const ::org::apache::lucene::index::IndexReader & a0, jint a1, const ::java::lang::String & a2, const ::org::apache::lucene::search::vectorhighlight::FieldQuery & a3) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_e3cbed11, a0.this$, a1, a2.this$, a3.this$)) {}

          ::java::lang::String FieldTermStack::getFieldName() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getFieldName_14c7b5c5]));
          }

          jboolean FieldTermStack::isEmpty() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isEmpty_54c6a16a]);
          }

          ::org::apache::lucene::search::vectorhighlight::FieldTermStack$TermInfo FieldTermStack::pop() const
          {
            return ::org::apache::lucene::search::vectorhighlight::FieldTermStack$TermInfo(env->callObjectMethod(this$, mids$[mid_pop_9d9e3d4a]));
          }

          void FieldTermStack::push(const ::org::apache::lucene::search::vectorhighlight::FieldTermStack$TermInfo & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_push_a7ece36b], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {
          static PyObject *t_FieldTermStack_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FieldTermStack_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FieldTermStack_init_(t_FieldTermStack *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FieldTermStack_getFieldName(t_FieldTermStack *self);
          static PyObject *t_FieldTermStack_isEmpty(t_FieldTermStack *self);
          static PyObject *t_FieldTermStack_pop(t_FieldTermStack *self);
          static PyObject *t_FieldTermStack_push(t_FieldTermStack *self, PyObject *arg);
          static PyObject *t_FieldTermStack_get__empty(t_FieldTermStack *self, void *data);
          static PyObject *t_FieldTermStack_get__fieldName(t_FieldTermStack *self, void *data);
          static PyGetSetDef t_FieldTermStack__fields_[] = {
            DECLARE_GET_FIELD(t_FieldTermStack, empty),
            DECLARE_GET_FIELD(t_FieldTermStack, fieldName),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_FieldTermStack__methods_[] = {
            DECLARE_METHOD(t_FieldTermStack, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FieldTermStack, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FieldTermStack, getFieldName, METH_NOARGS),
            DECLARE_METHOD(t_FieldTermStack, isEmpty, METH_NOARGS),
            DECLARE_METHOD(t_FieldTermStack, pop, METH_NOARGS),
            DECLARE_METHOD(t_FieldTermStack, push, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FieldTermStack, t_FieldTermStack, ::java::lang::Object, FieldTermStack, t_FieldTermStack_init_, 0, 0, t_FieldTermStack__fields_, 0, 0);

          void t_FieldTermStack::install(PyObject *module)
          {
            installType(&PY_TYPE(FieldTermStack), module, "FieldTermStack", 0);
            PyDict_SetItemString(PY_TYPE(FieldTermStack).tp_dict, "TermInfo", make_descriptor(&PY_TYPE(FieldTermStack$TermInfo)));
          }

          void t_FieldTermStack::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FieldTermStack).tp_dict, "class_", make_descriptor(FieldTermStack::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FieldTermStack).tp_dict, "wrapfn_", make_descriptor(t_FieldTermStack::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FieldTermStack).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FieldTermStack_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FieldTermStack::initializeClass, 1)))
              return NULL;
            return t_FieldTermStack::wrap_Object(FieldTermStack(((t_FieldTermStack *) arg)->object.this$));
          }
          static PyObject *t_FieldTermStack_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FieldTermStack::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FieldTermStack_init_(t_FieldTermStack *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
            jint a1;
            ::java::lang::String a2((jobject) NULL);
            ::org::apache::lucene::search::vectorhighlight::FieldQuery a3((jobject) NULL);
            FieldTermStack object((jobject) NULL);

            if (!parseArgs(args, "kIsk", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::search::vectorhighlight::FieldQuery::initializeClass, &a0, &a1, &a2, &a3))
            {
              INT_CALL(object = FieldTermStack(a0, a1, a2, a3));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_FieldTermStack_getFieldName(t_FieldTermStack *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.getFieldName());
            return j2p(result);
          }

          static PyObject *t_FieldTermStack_isEmpty(t_FieldTermStack *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isEmpty());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_FieldTermStack_pop(t_FieldTermStack *self)
          {
            ::org::apache::lucene::search::vectorhighlight::FieldTermStack$TermInfo result((jobject) NULL);
            OBJ_CALL(result = self->object.pop());
            return ::org::apache::lucene::search::vectorhighlight::t_FieldTermStack$TermInfo::wrap_Object(result);
          }

          static PyObject *t_FieldTermStack_push(t_FieldTermStack *self, PyObject *arg)
          {
            ::org::apache::lucene::search::vectorhighlight::FieldTermStack$TermInfo a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::search::vectorhighlight::FieldTermStack$TermInfo::initializeClass, &a0))
            {
              OBJ_CALL(self->object.push(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "push", arg);
            return NULL;
          }

          static PyObject *t_FieldTermStack_get__empty(t_FieldTermStack *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isEmpty());
            Py_RETURN_BOOL(value);
          }

          static PyObject *t_FieldTermStack_get__fieldName(t_FieldTermStack *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getFieldName());
            return j2p(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/NamedSPILoader$NamedSPI.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *NamedSPILoader$NamedSPI::class$ = NULL;
        jmethodID *NamedSPILoader$NamedSPI::mids$ = NULL;
        bool NamedSPILoader$NamedSPI::live$ = false;

        jclass NamedSPILoader$NamedSPI::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/NamedSPILoader$NamedSPI");

            mids$ = new jmethodID[max_mid];
            mids$[mid_getName_14c7b5c5] = env->getMethodID(cls, "getName", "()Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::java::lang::String NamedSPILoader$NamedSPI::getName() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getName_14c7b5c5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_NamedSPILoader$NamedSPI_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NamedSPILoader$NamedSPI_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NamedSPILoader$NamedSPI_of_(t_NamedSPILoader$NamedSPI *self, PyObject *args);
        static PyObject *t_NamedSPILoader$NamedSPI_getName(t_NamedSPILoader$NamedSPI *self);
        static PyObject *t_NamedSPILoader$NamedSPI_get__name(t_NamedSPILoader$NamedSPI *self, void *data);
        static PyObject *t_NamedSPILoader$NamedSPI_get__parameters_(t_NamedSPILoader$NamedSPI *self, void *data);
        static PyGetSetDef t_NamedSPILoader$NamedSPI__fields_[] = {
          DECLARE_GET_FIELD(t_NamedSPILoader$NamedSPI, name),
          DECLARE_GET_FIELD(t_NamedSPILoader$NamedSPI, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_NamedSPILoader$NamedSPI__methods_[] = {
          DECLARE_METHOD(t_NamedSPILoader$NamedSPI, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NamedSPILoader$NamedSPI, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NamedSPILoader$NamedSPI, of_, METH_VARARGS),
          DECLARE_METHOD(t_NamedSPILoader$NamedSPI, getName, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(NamedSPILoader$NamedSPI, t_NamedSPILoader$NamedSPI, ::java::lang::Object, NamedSPILoader$NamedSPI, abstract_init, 0, 0, t_NamedSPILoader$NamedSPI__fields_, 0, 0);
        PyObject *t_NamedSPILoader$NamedSPI::wrap_Object(const NamedSPILoader$NamedSPI& object, PyTypeObject *p0)
        {
          PyObject *obj = t_NamedSPILoader$NamedSPI::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_NamedSPILoader$NamedSPI *self = (t_NamedSPILoader$NamedSPI *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_NamedSPILoader$NamedSPI::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_NamedSPILoader$NamedSPI::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_NamedSPILoader$NamedSPI *self = (t_NamedSPILoader$NamedSPI *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_NamedSPILoader$NamedSPI::install(PyObject *module)
        {
          installType(&PY_TYPE(NamedSPILoader$NamedSPI), module, "NamedSPILoader$NamedSPI", 0);
        }

        void t_NamedSPILoader$NamedSPI::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(NamedSPILoader$NamedSPI).tp_dict, "class_", make_descriptor(NamedSPILoader$NamedSPI::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(NamedSPILoader$NamedSPI).tp_dict, "wrapfn_", make_descriptor(t_NamedSPILoader$NamedSPI::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(NamedSPILoader$NamedSPI).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_NamedSPILoader$NamedSPI_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, NamedSPILoader$NamedSPI::initializeClass, 1)))
            return NULL;
          return t_NamedSPILoader$NamedSPI::wrap_Object(NamedSPILoader$NamedSPI(((t_NamedSPILoader$NamedSPI *) arg)->object.this$));
        }
        static PyObject *t_NamedSPILoader$NamedSPI_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, NamedSPILoader$NamedSPI::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_NamedSPILoader$NamedSPI_of_(t_NamedSPILoader$NamedSPI *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_NamedSPILoader$NamedSPI_getName(t_NamedSPILoader$NamedSPI *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.getName());
          return j2p(result);
        }
        static PyObject *t_NamedSPILoader$NamedSPI_get__parameters_(t_NamedSPILoader$NamedSPI *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static PyObject *t_NamedSPILoader$NamedSPI_get__name(t_NamedSPILoader$NamedSPI *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object.getName());
          return j2p(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/FieldInfo$IndexOptions.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *FieldInfo$IndexOptions::class$ = NULL;
        jmethodID *FieldInfo$IndexOptions::mids$ = NULL;
        bool FieldInfo$IndexOptions::live$ = false;
        FieldInfo$IndexOptions *FieldInfo$IndexOptions::DOCS_AND_FREQS = NULL;
        FieldInfo$IndexOptions *FieldInfo$IndexOptions::DOCS_AND_FREQS_AND_POSITIONS = NULL;
        FieldInfo$IndexOptions *FieldInfo$IndexOptions::DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS = NULL;
        FieldInfo$IndexOptions *FieldInfo$IndexOptions::DOCS_ONLY = NULL;

        jclass FieldInfo$IndexOptions::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/FieldInfo$IndexOptions");

            mids$ = new jmethodID[max_mid];
            mids$[mid_valueOf_20bf9e20] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/index/FieldInfo$IndexOptions;");
            mids$[mid_values_84108cce] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/index/FieldInfo$IndexOptions;");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            DOCS_AND_FREQS = new FieldInfo$IndexOptions(env->getStaticObjectField(cls, "DOCS_AND_FREQS", "Lorg/apache/lucene/index/FieldInfo$IndexOptions;"));
            DOCS_AND_FREQS_AND_POSITIONS = new FieldInfo$IndexOptions(env->getStaticObjectField(cls, "DOCS_AND_FREQS_AND_POSITIONS", "Lorg/apache/lucene/index/FieldInfo$IndexOptions;"));
            DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS = new FieldInfo$IndexOptions(env->getStaticObjectField(cls, "DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS", "Lorg/apache/lucene/index/FieldInfo$IndexOptions;"));
            DOCS_ONLY = new FieldInfo$IndexOptions(env->getStaticObjectField(cls, "DOCS_ONLY", "Lorg/apache/lucene/index/FieldInfo$IndexOptions;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FieldInfo$IndexOptions FieldInfo$IndexOptions::valueOf(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return FieldInfo$IndexOptions(env->callStaticObjectMethod(cls, mids$[mid_valueOf_20bf9e20], a0.this$));
        }

        JArray< FieldInfo$IndexOptions > FieldInfo$IndexOptions::values()
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< FieldInfo$IndexOptions >(env->callStaticObjectMethod(cls, mids$[mid_values_84108cce]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_FieldInfo$IndexOptions_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldInfo$IndexOptions_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldInfo$IndexOptions_of_(t_FieldInfo$IndexOptions *self, PyObject *args);
        static PyObject *t_FieldInfo$IndexOptions_valueOf(PyTypeObject *type, PyObject *args);
        static PyObject *t_FieldInfo$IndexOptions_values(PyTypeObject *type);
        static PyObject *t_FieldInfo$IndexOptions_get__parameters_(t_FieldInfo$IndexOptions *self, void *data);
        static PyGetSetDef t_FieldInfo$IndexOptions__fields_[] = {
          DECLARE_GET_FIELD(t_FieldInfo$IndexOptions, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FieldInfo$IndexOptions__methods_[] = {
          DECLARE_METHOD(t_FieldInfo$IndexOptions, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldInfo$IndexOptions, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldInfo$IndexOptions, of_, METH_VARARGS),
          DECLARE_METHOD(t_FieldInfo$IndexOptions, valueOf, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_FieldInfo$IndexOptions, values, METH_NOARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldInfo$IndexOptions, t_FieldInfo$IndexOptions, ::java::lang::Enum, FieldInfo$IndexOptions, abstract_init, 0, 0, t_FieldInfo$IndexOptions__fields_, 0, 0);
        PyObject *t_FieldInfo$IndexOptions::wrap_Object(const FieldInfo$IndexOptions& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FieldInfo$IndexOptions::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FieldInfo$IndexOptions *self = (t_FieldInfo$IndexOptions *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_FieldInfo$IndexOptions::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FieldInfo$IndexOptions::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FieldInfo$IndexOptions *self = (t_FieldInfo$IndexOptions *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_FieldInfo$IndexOptions::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldInfo$IndexOptions), module, "FieldInfo$IndexOptions", 0);
        }

        void t_FieldInfo$IndexOptions::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldInfo$IndexOptions).tp_dict, "class_", make_descriptor(FieldInfo$IndexOptions::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldInfo$IndexOptions).tp_dict, "wrapfn_", make_descriptor(t_FieldInfo$IndexOptions::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldInfo$IndexOptions).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(FieldInfo$IndexOptions::initializeClass);
          PyDict_SetItemString(PY_TYPE(FieldInfo$IndexOptions).tp_dict, "DOCS_AND_FREQS", make_descriptor(t_FieldInfo$IndexOptions::wrap_Object(*FieldInfo$IndexOptions::DOCS_AND_FREQS)));
          PyDict_SetItemString(PY_TYPE(FieldInfo$IndexOptions).tp_dict, "DOCS_AND_FREQS_AND_POSITIONS", make_descriptor(t_FieldInfo$IndexOptions::wrap_Object(*FieldInfo$IndexOptions::DOCS_AND_FREQS_AND_POSITIONS)));
          PyDict_SetItemString(PY_TYPE(FieldInfo$IndexOptions).tp_dict, "DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS", make_descriptor(t_FieldInfo$IndexOptions::wrap_Object(*FieldInfo$IndexOptions::DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS)));
          PyDict_SetItemString(PY_TYPE(FieldInfo$IndexOptions).tp_dict, "DOCS_ONLY", make_descriptor(t_FieldInfo$IndexOptions::wrap_Object(*FieldInfo$IndexOptions::DOCS_ONLY)));
        }

        static PyObject *t_FieldInfo$IndexOptions_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldInfo$IndexOptions::initializeClass, 1)))
            return NULL;
          return t_FieldInfo$IndexOptions::wrap_Object(FieldInfo$IndexOptions(((t_FieldInfo$IndexOptions *) arg)->object.this$));
        }
        static PyObject *t_FieldInfo$IndexOptions_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldInfo$IndexOptions::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FieldInfo$IndexOptions_of_(t_FieldInfo$IndexOptions *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_FieldInfo$IndexOptions_valueOf(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          FieldInfo$IndexOptions result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::FieldInfo$IndexOptions::valueOf(a0));
            return t_FieldInfo$IndexOptions::wrap_Object(result);
          }

          return callSuper(type, "valueOf", args, 2);
        }

        static PyObject *t_FieldInfo$IndexOptions_values(PyTypeObject *type)
        {
          JArray< FieldInfo$IndexOptions > result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::index::FieldInfo$IndexOptions::values());
          return JArray<jobject>(result.this$).wrap(t_FieldInfo$IndexOptions::wrap_jobject);
        }
        static PyObject *t_FieldInfo$IndexOptions_get__parameters_(t_FieldInfo$IndexOptions *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/IntroSorter.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *IntroSorter::class$ = NULL;
        jmethodID *IntroSorter::mids$ = NULL;
        bool IntroSorter::live$ = false;

        jclass IntroSorter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/IntroSorter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_sort_d8d154a6] = env->getMethodID(cls, "sort", "(II)V");
            mids$[mid_setPivot_39c7bd3c] = env->getMethodID(cls, "setPivot", "(I)V");
            mids$[mid_comparePivot_39c7bd23] = env->getMethodID(cls, "comparePivot", "(I)I");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        IntroSorter::IntroSorter() : ::org::apache::lucene::util::Sorter(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void IntroSorter::sort(jint a0, jint a1) const
        {
          env->callVoidMethod(this$, mids$[mid_sort_d8d154a6], a0, a1);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_IntroSorter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IntroSorter_instance_(PyTypeObject *type, PyObject *arg);
        static int t_IntroSorter_init_(t_IntroSorter *self, PyObject *args, PyObject *kwds);
        static PyObject *t_IntroSorter_sort(t_IntroSorter *self, PyObject *args);

        static PyMethodDef t_IntroSorter__methods_[] = {
          DECLARE_METHOD(t_IntroSorter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IntroSorter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IntroSorter, sort, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(IntroSorter, t_IntroSorter, ::org::apache::lucene::util::Sorter, IntroSorter, t_IntroSorter_init_, 0, 0, 0, 0, 0);

        void t_IntroSorter::install(PyObject *module)
        {
          installType(&PY_TYPE(IntroSorter), module, "IntroSorter", 0);
        }

        void t_IntroSorter::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(IntroSorter).tp_dict, "class_", make_descriptor(IntroSorter::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(IntroSorter).tp_dict, "wrapfn_", make_descriptor(t_IntroSorter::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(IntroSorter).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_IntroSorter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IntroSorter::initializeClass, 1)))
            return NULL;
          return t_IntroSorter::wrap_Object(IntroSorter(((t_IntroSorter *) arg)->object.this$));
        }
        static PyObject *t_IntroSorter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IntroSorter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_IntroSorter_init_(t_IntroSorter *self, PyObject *args, PyObject *kwds)
        {
          IntroSorter object((jobject) NULL);

          INT_CALL(object = IntroSorter());
          self->object = object;

          return 0;
        }

        static PyObject *t_IntroSorter_sort(t_IntroSorter *self, PyObject *args)
        {
          jint a0;
          jint a1;

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(self->object.sort(a0, a1));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(IntroSorter), (PyObject *) self, "sort", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/egothor/stemmer/DiffIt.h"
#include "java/lang/Exception.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace egothor {
    namespace stemmer {

      ::java::lang::Class *DiffIt::class$ = NULL;
      jmethodID *DiffIt::mids$ = NULL;
      bool DiffIt::live$ = false;

      jclass DiffIt::initializeClass(bool getOnly)
      {
        if (getOnly)
          return (jclass) (live$ ? class$->this$ : NULL);
        if (class$ == NULL)
        {
          jclass cls = (jclass) env->findClass("org/egothor/stemmer/DiffIt");

          mids$ = new jmethodID[max_mid];
          mids$[mid_main_4dd4540c] = env->getStaticMethodID(cls, "main", "([Ljava/lang/String;)V");

          class$ = (::java::lang::Class *) new JObject(cls);
          live$ = true;
        }
        return (jclass) class$->this$;
      }

      void DiffIt::main(const JArray< ::java::lang::String > & a0)
      {
        jclass cls = env->getClass(initializeClass);
        env->callStaticVoidMethod(cls, mids$[mid_main_4dd4540c], a0.this$);
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace egothor {
    namespace stemmer {
      static PyObject *t_DiffIt_cast_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_DiffIt_instance_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_DiffIt_main(PyTypeObject *type, PyObject *arg);

      static PyMethodDef t_DiffIt__methods_[] = {
        DECLARE_METHOD(t_DiffIt, cast_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_DiffIt, instance_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_DiffIt, main, METH_O | METH_CLASS),
        { NULL, NULL, 0, NULL }
      };

      DECLARE_TYPE(DiffIt, t_DiffIt, ::java::lang::Object, DiffIt, abstract_init, 0, 0, 0, 0, 0);

      void t_DiffIt::install(PyObject *module)
      {
        installType(&PY_TYPE(DiffIt), module, "DiffIt", 0);
      }

      void t_DiffIt::initialize(PyObject *module)
      {
        PyDict_SetItemString(PY_TYPE(DiffIt).tp_dict, "class_", make_descriptor(DiffIt::initializeClass, 1));
        PyDict_SetItemString(PY_TYPE(DiffIt).tp_dict, "wrapfn_", make_descriptor(t_DiffIt::wrap_jobject));
        PyDict_SetItemString(PY_TYPE(DiffIt).tp_dict, "boxfn_", make_descriptor(boxObject));
      }

      static PyObject *t_DiffIt_cast_(PyTypeObject *type, PyObject *arg)
      {
        if (!(arg = castCheck(arg, DiffIt::initializeClass, 1)))
          return NULL;
        return t_DiffIt::wrap_Object(DiffIt(((t_DiffIt *) arg)->object.this$));
      }
      static PyObject *t_DiffIt_instance_(PyTypeObject *type, PyObject *arg)
      {
        if (!castCheck(arg, DiffIt::initializeClass, 0))
          Py_RETURN_FALSE;
        Py_RETURN_TRUE;
      }

      static PyObject *t_DiffIt_main(PyTypeObject *type, PyObject *arg)
      {
        JArray< ::java::lang::String > a0((jobject) NULL);

        if (!parseArg(arg, "[s", &a0))
        {
          OBJ_CALL(::org::egothor::stemmer::DiffIt::main(a0));
          Py_RETURN_NONE;
        }

        PyErr_SetArgsError(type, "main", arg);
        return NULL;
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggester.h"
#include "java/util/Set.h"
#include "org/apache/lucene/util/Version.h"
#include "java/io/Closeable.h"
#include "org/apache/lucene/store/Directory.h"
#include "java/lang/CharSequence.h"
#include "org/apache/lucene/search/suggest/Lookup$LookupResult.h"
#include "java/lang/Class.h"
#include "java/util/List.h"
#include "org/apache/lucene/search/suggest/InputIterator.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "org/apache/lucene/store/DataInput.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace analyzing {

            ::java::lang::Class *AnalyzingInfixSuggester::class$ = NULL;
            jmethodID *AnalyzingInfixSuggester::mids$ = NULL;
            bool AnalyzingInfixSuggester::live$ = false;
            jint AnalyzingInfixSuggester::DEFAULT_MIN_PREFIX_CHARS = (jint) 0;

            jclass AnalyzingInfixSuggester::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggester");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_b2fef229] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/analysis/Analyzer;)V");
                mids$[mid_init$_3b9404b5] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/analysis/Analyzer;Lorg/apache/lucene/analysis/Analyzer;I)V");
                mids$[mid_add_2d27343d] = env->getMethodID(cls, "add", "(Lorg/apache/lucene/util/BytesRef;Ljava/util/Set;JLorg/apache/lucene/util/BytesRef;)V");
                mids$[mid_build_1754a234] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/search/suggest/InputIterator;)V");
                mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
                mids$[mid_getCount_54c6a17a] = env->getMethodID(cls, "getCount", "()J");
                mids$[mid_load_f5d6a55d] = env->getMethodID(cls, "load", "(Lorg/apache/lucene/store/DataInput;)Z");
                mids$[mid_lookup_3273017a] = env->getMethodID(cls, "lookup", "(Ljava/lang/CharSequence;IZZ)Ljava/util/List;");
                mids$[mid_lookup_dd3e9f51] = env->getMethodID(cls, "lookup", "(Ljava/lang/CharSequence;Ljava/util/Set;ZI)Ljava/util/List;");
                mids$[mid_lookup_bb92c162] = env->getMethodID(cls, "lookup", "(Ljava/lang/CharSequence;Ljava/util/Set;IZZ)Ljava/util/List;");
                mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");
                mids$[mid_refresh_54c6a166] = env->getMethodID(cls, "refresh", "()V");
                mids$[mid_store_27875f5b] = env->getMethodID(cls, "store", "(Lorg/apache/lucene/store/DataOutput;)Z");
                mids$[mid_update_2d27343d] = env->getMethodID(cls, "update", "(Lorg/apache/lucene/util/BytesRef;Ljava/util/Set;JLorg/apache/lucene/util/BytesRef;)V");
                mids$[mid_getTextFieldType_a2615189] = env->getMethodID(cls, "getTextFieldType", "()Lorg/apache/lucene/document/FieldType;");
                mids$[mid_createResults_dfa2a05f] = env->getMethodID(cls, "createResults", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/TopFieldDocs;ILjava/lang/CharSequence;ZLjava/util/Set;Ljava/lang/String;)Ljava/util/List;");
                mids$[mid_highlight_6b3f1693] = env->getMethodID(cls, "highlight", "(Ljava/lang/String;Ljava/util/Set;Ljava/lang/String;)Ljava/lang/Object;");
                mids$[mid_getIndexWriterConfig_04dea876] = env->getMethodID(cls, "getIndexWriterConfig", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/Analyzer;Lorg/apache/lucene/index/IndexWriterConfig$OpenMode;)Lorg/apache/lucene/index/IndexWriterConfig;");
                mids$[mid_getLastTokenQuery_fbed2634] = env->getMethodID(cls, "getLastTokenQuery", "(Ljava/lang/String;)Lorg/apache/lucene/search/Query;");
                mids$[mid_finishQuery_4a287f5d] = env->getMethodID(cls, "finishQuery", "(Lorg/apache/lucene/search/BooleanQuery;Z)Lorg/apache/lucene/search/Query;");
                mids$[mid_addNonMatch_2e1c61a6] = env->getMethodID(cls, "addNonMatch", "(Ljava/lang/StringBuilder;Ljava/lang/String;)V");
                mids$[mid_addWholeMatch_55a79f28] = env->getMethodID(cls, "addWholeMatch", "(Ljava/lang/StringBuilder;Ljava/lang/String;Ljava/lang/String;)V");
                mids$[mid_addPrefixMatch_539c241a] = env->getMethodID(cls, "addPrefixMatch", "(Ljava/lang/StringBuilder;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V");
                mids$[mid_getDirectory_c34cda9e] = env->getMethodID(cls, "getDirectory", "(Ljava/io/File;)Lorg/apache/lucene/store/Directory;");

                class$ = (::java::lang::Class *) new JObject(cls);
                cls = (jclass) class$->this$;

                DEFAULT_MIN_PREFIX_CHARS = env->getStaticIntField(cls, "DEFAULT_MIN_PREFIX_CHARS");
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            AnalyzingInfixSuggester::AnalyzingInfixSuggester(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::store::Directory & a1, const ::org::apache::lucene::analysis::Analyzer & a2) : ::org::apache::lucene::search::suggest::Lookup(env->newObject(initializeClass, &mids$, mid_init$_b2fef229, a0.this$, a1.this$, a2.this$)) {}

            AnalyzingInfixSuggester::AnalyzingInfixSuggester(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::store::Directory & a1, const ::org::apache::lucene::analysis::Analyzer & a2, const ::org::apache::lucene::analysis::Analyzer & a3, jint a4) : ::org::apache::lucene::search::suggest::Lookup(env->newObject(initializeClass, &mids$, mid_init$_3b9404b5, a0.this$, a1.this$, a2.this$, a3.this$, a4)) {}

            void AnalyzingInfixSuggester::add(const ::org::apache::lucene::util::BytesRef & a0, const ::java::util::Set & a1, jlong a2, const ::org::apache::lucene::util::BytesRef & a3) const
            {
              env->callVoidMethod(this$, mids$[mid_add_2d27343d], a0.this$, a1.this$, a2, a3.this$);
            }

            void AnalyzingInfixSuggester::build(const ::org::apache::lucene::search::suggest::InputIterator & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_build_1754a234], a0.this$);
            }

            void AnalyzingInfixSuggester::close() const
            {
              env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
            }

            jlong AnalyzingInfixSuggester::getCount() const
            {
              return env->callLongMethod(this$, mids$[mid_getCount_54c6a17a]);
            }

            jboolean AnalyzingInfixSuggester::load(const ::org::apache::lucene::store::DataInput & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_load_f5d6a55d], a0.this$);
            }

            ::java::util::List AnalyzingInfixSuggester::lookup(const ::java::lang::CharSequence & a0, jint a1, jboolean a2, jboolean a3) const
            {
              return ::java::util::List(env->callObjectMethod(this$, mids$[mid_lookup_3273017a], a0.this$, a1, a2, a3));
            }

            ::java::util::List AnalyzingInfixSuggester::lookup(const ::java::lang::CharSequence & a0, const ::java::util::Set & a1, jboolean a2, jint a3) const
            {
              return ::java::util::List(env->callObjectMethod(this$, mids$[mid_lookup_dd3e9f51], a0.this$, a1.this$, a2, a3));
            }

            ::java::util::List AnalyzingInfixSuggester::lookup(const ::java::lang::CharSequence & a0, const ::java::util::Set & a1, jint a2, jboolean a3, jboolean a4) const
            {
              return ::java::util::List(env->callObjectMethod(this$, mids$[mid_lookup_bb92c162], a0.this$, a1.this$, a2, a3, a4));
            }

            jlong AnalyzingInfixSuggester::ramBytesUsed() const
            {
              return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
            }

            void AnalyzingInfixSuggester::refresh() const
            {
              env->callVoidMethod(this$, mids$[mid_refresh_54c6a166]);
            }

            jboolean AnalyzingInfixSuggester::store(const ::org::apache::lucene::store::DataOutput & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_store_27875f5b], a0.this$);
            }

            void AnalyzingInfixSuggester::update(const ::org::apache::lucene::util::BytesRef & a0, const ::java::util::Set & a1, jlong a2, const ::org::apache::lucene::util::BytesRef & a3) const
            {
              env->callVoidMethod(this$, mids$[mid_update_2d27343d], a0.this$, a1.this$, a2, a3.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace analyzing {
            static PyObject *t_AnalyzingInfixSuggester_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_AnalyzingInfixSuggester_instance_(PyTypeObject *type, PyObject *arg);
            static int t_AnalyzingInfixSuggester_init_(t_AnalyzingInfixSuggester *self, PyObject *args, PyObject *kwds);
            static PyObject *t_AnalyzingInfixSuggester_add(t_AnalyzingInfixSuggester *self, PyObject *args);
            static PyObject *t_AnalyzingInfixSuggester_build(t_AnalyzingInfixSuggester *self, PyObject *args);
            static PyObject *t_AnalyzingInfixSuggester_close(t_AnalyzingInfixSuggester *self);
            static PyObject *t_AnalyzingInfixSuggester_getCount(t_AnalyzingInfixSuggester *self, PyObject *args);
            static PyObject *t_AnalyzingInfixSuggester_load(t_AnalyzingInfixSuggester *self, PyObject *args);
            static PyObject *t_AnalyzingInfixSuggester_lookup(t_AnalyzingInfixSuggester *self, PyObject *args);
            static PyObject *t_AnalyzingInfixSuggester_ramBytesUsed(t_AnalyzingInfixSuggester *self, PyObject *args);
            static PyObject *t_AnalyzingInfixSuggester_refresh(t_AnalyzingInfixSuggester *self);
            static PyObject *t_AnalyzingInfixSuggester_store(t_AnalyzingInfixSuggester *self, PyObject *args);
            static PyObject *t_AnalyzingInfixSuggester_update(t_AnalyzingInfixSuggester *self, PyObject *args);
            static PyObject *t_AnalyzingInfixSuggester_get__count(t_AnalyzingInfixSuggester *self, void *data);
            static PyGetSetDef t_AnalyzingInfixSuggester__fields_[] = {
              DECLARE_GET_FIELD(t_AnalyzingInfixSuggester, count),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_AnalyzingInfixSuggester__methods_[] = {
              DECLARE_METHOD(t_AnalyzingInfixSuggester, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_AnalyzingInfixSuggester, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_AnalyzingInfixSuggester, add, METH_VARARGS),
              DECLARE_METHOD(t_AnalyzingInfixSuggester, build, METH_VARARGS),
              DECLARE_METHOD(t_AnalyzingInfixSuggester, close, METH_NOARGS),
              DECLARE_METHOD(t_AnalyzingInfixSuggester, getCount, METH_VARARGS),
              DECLARE_METHOD(t_AnalyzingInfixSuggester, load, METH_VARARGS),
              DECLARE_METHOD(t_AnalyzingInfixSuggester, lookup, METH_VARARGS),
              DECLARE_METHOD(t_AnalyzingInfixSuggester, ramBytesUsed, METH_VARARGS),
              DECLARE_METHOD(t_AnalyzingInfixSuggester, refresh, METH_NOARGS),
              DECLARE_METHOD(t_AnalyzingInfixSuggester, store, METH_VARARGS),
              DECLARE_METHOD(t_AnalyzingInfixSuggester, update, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(AnalyzingInfixSuggester, t_AnalyzingInfixSuggester, ::org::apache::lucene::search::suggest::Lookup, AnalyzingInfixSuggester, t_AnalyzingInfixSuggester_init_, 0, 0, t_AnalyzingInfixSuggester__fields_, 0, 0);

            void t_AnalyzingInfixSuggester::install(PyObject *module)
            {
              installType(&PY_TYPE(AnalyzingInfixSuggester), module, "AnalyzingInfixSuggester", 0);
            }

            void t_AnalyzingInfixSuggester::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(AnalyzingInfixSuggester).tp_dict, "class_", make_descriptor(AnalyzingInfixSuggester::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(AnalyzingInfixSuggester).tp_dict, "wrapfn_", make_descriptor(t_AnalyzingInfixSuggester::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(AnalyzingInfixSuggester).tp_dict, "boxfn_", make_descriptor(boxObject));
              env->getClass(AnalyzingInfixSuggester::initializeClass);
              PyDict_SetItemString(PY_TYPE(AnalyzingInfixSuggester).tp_dict, "DEFAULT_MIN_PREFIX_CHARS", make_descriptor(AnalyzingInfixSuggester::DEFAULT_MIN_PREFIX_CHARS));
            }

            static PyObject *t_AnalyzingInfixSuggester_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, AnalyzingInfixSuggester::initializeClass, 1)))
                return NULL;
              return t_AnalyzingInfixSuggester::wrap_Object(AnalyzingInfixSuggester(((t_AnalyzingInfixSuggester *) arg)->object.this$));
            }
            static PyObject *t_AnalyzingInfixSuggester_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, AnalyzingInfixSuggester::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_AnalyzingInfixSuggester_init_(t_AnalyzingInfixSuggester *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 3:
                {
                  ::org::apache::lucene::util::Version a0((jobject) NULL);
                  ::org::apache::lucene::store::Directory a1((jobject) NULL);
                  ::org::apache::lucene::analysis::Analyzer a2((jobject) NULL);
                  AnalyzingInfixSuggester object((jobject) NULL);

                  if (!parseArgs(args, "kkk", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1, &a2))
                  {
                    INT_CALL(object = AnalyzingInfixSuggester(a0, a1, a2));
                    self->object = object;
                    break;
                  }
                }
                goto err;
               case 5:
                {
                  ::org::apache::lucene::util::Version a0((jobject) NULL);
                  ::org::apache::lucene::store::Directory a1((jobject) NULL);
                  ::org::apache::lucene::analysis::Analyzer a2((jobject) NULL);
                  ::org::apache::lucene::analysis::Analyzer a3((jobject) NULL);
                  jint a4;
                  AnalyzingInfixSuggester object((jobject) NULL);

                  if (!parseArgs(args, "kkkkI", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1, &a2, &a3, &a4))
                  {
                    INT_CALL(object = AnalyzingInfixSuggester(a0, a1, a2, a3, a4));
                    self->object = object;
                    break;
                  }
                }
               default:
               err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_AnalyzingInfixSuggester_add(t_AnalyzingInfixSuggester *self, PyObject *args)
            {
              ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
              ::java::util::Set a1((jobject) NULL);
              PyTypeObject **p1;
              jlong a2;
              ::org::apache::lucene::util::BytesRef a3((jobject) NULL);

              if (!parseArgs(args, "kKJk", ::org::apache::lucene::util::BytesRef::initializeClass, ::java::util::Set::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &p1, ::java::util::t_Set::parameters_, &a2, &a3))
              {
                OBJ_CALL(self->object.add(a0, a1, a2, a3));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "add", args);
              return NULL;
            }

            static PyObject *t_AnalyzingInfixSuggester_build(t_AnalyzingInfixSuggester *self, PyObject *args)
            {
              ::org::apache::lucene::search::suggest::InputIterator a0((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::search::suggest::InputIterator::initializeClass, &a0))
              {
                OBJ_CALL(self->object.build(a0));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(AnalyzingInfixSuggester), (PyObject *) self, "build", args, 2);
            }

            static PyObject *t_AnalyzingInfixSuggester_close(t_AnalyzingInfixSuggester *self)
            {
              OBJ_CALL(self->object.close());
              Py_RETURN_NONE;
            }

            static PyObject *t_AnalyzingInfixSuggester_getCount(t_AnalyzingInfixSuggester *self, PyObject *args)
            {
              jlong result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getCount());
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }

              return callSuper(&PY_TYPE(AnalyzingInfixSuggester), (PyObject *) self, "getCount", args, 2);
            }

            static PyObject *t_AnalyzingInfixSuggester_load(t_AnalyzingInfixSuggester *self, PyObject *args)
            {
              ::org::apache::lucene::store::DataInput a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "k", ::org::apache::lucene::store::DataInput::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.load(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(AnalyzingInfixSuggester), (PyObject *) self, "load", args, 2);
            }

            static PyObject *t_AnalyzingInfixSuggester_lookup(t_AnalyzingInfixSuggester *self, PyObject *args)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 4:
                {
                  ::java::lang::CharSequence a0((jobject) NULL);
                  jint a1;
                  jboolean a2;
                  jboolean a3;
                  ::java::util::List result((jobject) NULL);

                  if (!parseArgs(args, "OIZZ", &::java::lang::PY_TYPE(CharSequence), &a0, &a1, &a2, &a3))
                  {
                    OBJ_CALL(result = self->object.lookup(a0, a1, a2, a3));
                    return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::search::suggest::PY_TYPE(Lookup$LookupResult));
                  }
                }
                {
                  ::java::lang::CharSequence a0((jobject) NULL);
                  ::java::util::Set a1((jobject) NULL);
                  PyTypeObject **p1;
                  jboolean a2;
                  jint a3;
                  ::java::util::List result((jobject) NULL);

                  if (!parseArgs(args, "OKZI", &::java::lang::PY_TYPE(CharSequence), ::java::util::Set::initializeClass, &a0, &a1, &p1, ::java::util::t_Set::parameters_, &a2, &a3))
                  {
                    OBJ_CALL(result = self->object.lookup(a0, a1, a2, a3));
                    return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::search::suggest::PY_TYPE(Lookup$LookupResult));
                  }
                }
                break;
               case 5:
                {
                  ::java::lang::CharSequence a0((jobject) NULL);
                  ::java::util::Set a1((jobject) NULL);
                  PyTypeObject **p1;
                  jint a2;
                  jboolean a3;
                  jboolean a4;
                  ::java::util::List result((jobject) NULL);

                  if (!parseArgs(args, "OKIZZ", &::java::lang::PY_TYPE(CharSequence), ::java::util::Set::initializeClass, &a0, &a1, &p1, ::java::util::t_Set::parameters_, &a2, &a3, &a4))
                  {
                    OBJ_CALL(result = self->object.lookup(a0, a1, a2, a3, a4));
                    return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::search::suggest::PY_TYPE(Lookup$LookupResult));
                  }
                }
              }

              return callSuper(&PY_TYPE(AnalyzingInfixSuggester), (PyObject *) self, "lookup", args, 2);
            }

            static PyObject *t_AnalyzingInfixSuggester_ramBytesUsed(t_AnalyzingInfixSuggester *self, PyObject *args)
            {
              jlong result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.ramBytesUsed());
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }

              return callSuper(&PY_TYPE(AnalyzingInfixSuggester), (PyObject *) self, "ramBytesUsed", args, 2);
            }

            static PyObject *t_AnalyzingInfixSuggester_refresh(t_AnalyzingInfixSuggester *self)
            {
              OBJ_CALL(self->object.refresh());
              Py_RETURN_NONE;
            }

            static PyObject *t_AnalyzingInfixSuggester_store(t_AnalyzingInfixSuggester *self, PyObject *args)
            {
              ::org::apache::lucene::store::DataOutput a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "k", ::org::apache::lucene::store::DataOutput::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.store(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(AnalyzingInfixSuggester), (PyObject *) self, "store", args, 2);
            }

            static PyObject *t_AnalyzingInfixSuggester_update(t_AnalyzingInfixSuggester *self, PyObject *args)
            {
              ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
              ::java::util::Set a1((jobject) NULL);
              PyTypeObject **p1;
              jlong a2;
              ::org::apache::lucene::util::BytesRef a3((jobject) NULL);

              if (!parseArgs(args, "kKJk", ::org::apache::lucene::util::BytesRef::initializeClass, ::java::util::Set::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &p1, ::java::util::t_Set::parameters_, &a2, &a3))
              {
                OBJ_CALL(self->object.update(a0, a1, a2, a3));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "update", args);
              return NULL;
            }

            static PyObject *t_AnalyzingInfixSuggester_get__count(t_AnalyzingInfixSuggester *self, void *data)
            {
              jlong value;
              OBJ_CALL(value = self->object.getCount());
              return PyLong_FromLongLong((PY_LONG_LONG) value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/xml/QueryTemplateManager.h"
#include "java/io/IOException.h"
#include "java/util/Properties.h"
#include "java/lang/String.h"
#include "java/io/InputStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {

          ::java::lang::Class *QueryTemplateManager::class$ = NULL;
          jmethodID *QueryTemplateManager::mids$ = NULL;
          bool QueryTemplateManager::live$ = false;

          jclass QueryTemplateManager::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/xml/QueryTemplateManager");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_be2e4f90] = env->getMethodID(cls, "<init>", "(Ljava/io/InputStream;)V");
              mids$[mid_addDefaultQueryTemplate_be2e4f90] = env->getMethodID(cls, "addDefaultQueryTemplate", "(Ljava/io/InputStream;)V");
              mids$[mid_addQueryTemplate_fc5ef09a] = env->getMethodID(cls, "addQueryTemplate", "(Ljava/lang/String;Ljava/io/InputStream;)V");
              mids$[mid_getQueryAsXmlString_8b0ed65b] = env->getMethodID(cls, "getQueryAsXmlString", "(Ljava/util/Properties;)Ljava/lang/String;");
              mids$[mid_getQueryAsXmlString_cf43ccf5] = env->getMethodID(cls, "getQueryAsXmlString", "(Ljava/util/Properties;Ljava/lang/String;)Ljava/lang/String;");
              mids$[mid_getQueryAsXmlString_02821f09] = env->getStaticMethodID(cls, "getQueryAsXmlString", "(Ljava/util/Properties;Ljava/io/InputStream;)Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          QueryTemplateManager::QueryTemplateManager() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          QueryTemplateManager::QueryTemplateManager(const ::java::io::InputStream & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_be2e4f90, a0.this$)) {}

          void QueryTemplateManager::addDefaultQueryTemplate(const ::java::io::InputStream & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_addDefaultQueryTemplate_be2e4f90], a0.this$);
          }

          void QueryTemplateManager::addQueryTemplate(const ::java::lang::String & a0, const ::java::io::InputStream & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_addQueryTemplate_fc5ef09a], a0.this$, a1.this$);
          }

          ::java::lang::String QueryTemplateManager::getQueryAsXmlString(const ::java::util::Properties & a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getQueryAsXmlString_8b0ed65b], a0.this$));
          }

          ::java::lang::String QueryTemplateManager::getQueryAsXmlString(const ::java::util::Properties & a0, const ::java::lang::String & a1) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getQueryAsXmlString_cf43ccf5], a0.this$, a1.this$));
          }

          ::java::lang::String QueryTemplateManager::getQueryAsXmlString(const ::java::util::Properties & a0, const ::java::io::InputStream & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_getQueryAsXmlString_02821f09], a0.this$, a1.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          static PyObject *t_QueryTemplateManager_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_QueryTemplateManager_instance_(PyTypeObject *type, PyObject *arg);
          static int t_QueryTemplateManager_init_(t_QueryTemplateManager *self, PyObject *args, PyObject *kwds);
          static PyObject *t_QueryTemplateManager_addDefaultQueryTemplate(t_QueryTemplateManager *self, PyObject *arg);
          static PyObject *t_QueryTemplateManager_addQueryTemplate(t_QueryTemplateManager *self, PyObject *args);
          static PyObject *t_QueryTemplateManager_getQueryAsXmlString(t_QueryTemplateManager *self, PyObject *args);
          static PyObject *t_QueryTemplateManager_getQueryAsXmlString_(PyTypeObject *type, PyObject *args);

          static PyMethodDef t_QueryTemplateManager__methods_[] = {
            DECLARE_METHOD(t_QueryTemplateManager, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_QueryTemplateManager, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_QueryTemplateManager, addDefaultQueryTemplate, METH_O),
            DECLARE_METHOD(t_QueryTemplateManager, addQueryTemplate, METH_VARARGS),
            DECLARE_METHOD(t_QueryTemplateManager, getQueryAsXmlString, METH_VARARGS),
            DECLARE_METHOD(t_QueryTemplateManager, getQueryAsXmlString_, METH_VARARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(QueryTemplateManager, t_QueryTemplateManager, ::java::lang::Object, QueryTemplateManager, t_QueryTemplateManager_init_, 0, 0, 0, 0, 0);

          void t_QueryTemplateManager::install(PyObject *module)
          {
            installType(&PY_TYPE(QueryTemplateManager), module, "QueryTemplateManager", 0);
          }

          void t_QueryTemplateManager::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(QueryTemplateManager).tp_dict, "class_", make_descriptor(QueryTemplateManager::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(QueryTemplateManager).tp_dict, "wrapfn_", make_descriptor(t_QueryTemplateManager::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(QueryTemplateManager).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_QueryTemplateManager_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, QueryTemplateManager::initializeClass, 1)))
              return NULL;
            return t_QueryTemplateManager::wrap_Object(QueryTemplateManager(((t_QueryTemplateManager *) arg)->object.this$));
          }
          static PyObject *t_QueryTemplateManager_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, QueryTemplateManager::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_QueryTemplateManager_init_(t_QueryTemplateManager *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                QueryTemplateManager object((jobject) NULL);

                INT_CALL(object = QueryTemplateManager());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                ::java::io::InputStream a0((jobject) NULL);
                QueryTemplateManager object((jobject) NULL);

                if (!parseArgs(args, "k", ::java::io::InputStream::initializeClass, &a0))
                {
                  INT_CALL(object = QueryTemplateManager(a0));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_QueryTemplateManager_addDefaultQueryTemplate(t_QueryTemplateManager *self, PyObject *arg)
          {
            ::java::io::InputStream a0((jobject) NULL);

            if (!parseArg(arg, "k", ::java::io::InputStream::initializeClass, &a0))
            {
              OBJ_CALL(self->object.addDefaultQueryTemplate(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "addDefaultQueryTemplate", arg);
            return NULL;
          }

          static PyObject *t_QueryTemplateManager_addQueryTemplate(t_QueryTemplateManager *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::io::InputStream a1((jobject) NULL);

            if (!parseArgs(args, "sk", ::java::io::InputStream::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.addQueryTemplate(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "addQueryTemplate", args);
            return NULL;
          }

          static PyObject *t_QueryTemplateManager_getQueryAsXmlString(t_QueryTemplateManager *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::java::util::Properties a0((jobject) NULL);
                PyTypeObject **p0;
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, "K", ::java::util::Properties::initializeClass, &a0, &p0, ::java::util::t_Properties::parameters_))
                {
                  OBJ_CALL(result = self->object.getQueryAsXmlString(a0));
                  return j2p(result);
                }
              }
              break;
             case 2:
              {
                ::java::util::Properties a0((jobject) NULL);
                PyTypeObject **p0;
                ::java::lang::String a1((jobject) NULL);
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, "Ks", ::java::util::Properties::initializeClass, &a0, &p0, ::java::util::t_Properties::parameters_, &a1))
                {
                  OBJ_CALL(result = self->object.getQueryAsXmlString(a0, a1));
                  return j2p(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "getQueryAsXmlString", args);
            return NULL;
          }

          static PyObject *t_QueryTemplateManager_getQueryAsXmlString_(PyTypeObject *type, PyObject *args)
          {
            ::java::util::Properties a0((jobject) NULL);
            PyTypeObject **p0;
            ::java::io::InputStream a1((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "Kk", ::java::util::Properties::initializeClass, ::java::io::InputStream::initializeClass, &a0, &p0, ::java::util::t_Properties::parameters_, &a1))
            {
              OBJ_CALL(result = ::org::apache::lucene::queryparser::xml::QueryTemplateManager::getQueryAsXmlString(a0, a1));
              return j2p(result);
            }

            PyErr_SetArgsError(type, "getQueryAsXmlString_", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/tokenattributes/PackedTokenAttributeImpl.h"
#include "org/apache/lucene/util/AttributeImpl.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/tokenattributes/PositionIncrementAttribute.h"
#include "org/apache/lucene/analysis/tokenattributes/TypeAttribute.h"
#include "org/apache/lucene/analysis/tokenattributes/PositionLengthAttribute.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/util/AttributeReflector.h"
#include "org/apache/lucene/analysis/tokenattributes/OffsetAttribute.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {

          ::java::lang::Class *PackedTokenAttributeImpl::class$ = NULL;
          jmethodID *PackedTokenAttributeImpl::mids$ = NULL;
          bool PackedTokenAttributeImpl::live$ = false;

          jclass PackedTokenAttributeImpl::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/tokenattributes/PackedTokenAttributeImpl");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
              mids$[mid_clone_2353e953] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/analysis/tokenattributes/PackedTokenAttributeImpl;");
              mids$[mid_copyTo_d86caa9f] = env->getMethodID(cls, "copyTo", "(Lorg/apache/lucene/util/AttributeImpl;)V");
              mids$[mid_endOffset_54c6a179] = env->getMethodID(cls, "endOffset", "()I");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_getPositionIncrement_54c6a179] = env->getMethodID(cls, "getPositionIncrement", "()I");
              mids$[mid_getPositionLength_54c6a179] = env->getMethodID(cls, "getPositionLength", "()I");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_reflectWith_5f3f5102] = env->getMethodID(cls, "reflectWith", "(Lorg/apache/lucene/util/AttributeReflector;)V");
              mids$[mid_setOffset_d8d154a6] = env->getMethodID(cls, "setOffset", "(II)V");
              mids$[mid_setPositionIncrement_39c7bd3c] = env->getMethodID(cls, "setPositionIncrement", "(I)V");
              mids$[mid_setPositionLength_39c7bd3c] = env->getMethodID(cls, "setPositionLength", "(I)V");
              mids$[mid_setType_5fdc3f48] = env->getMethodID(cls, "setType", "(Ljava/lang/String;)V");
              mids$[mid_startOffset_54c6a179] = env->getMethodID(cls, "startOffset", "()I");
              mids$[mid_type_14c7b5c5] = env->getMethodID(cls, "type", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PackedTokenAttributeImpl::PackedTokenAttributeImpl() : ::org::apache::lucene::analysis::tokenattributes::CharTermAttributeImpl(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          void PackedTokenAttributeImpl::clear() const
          {
            env->callVoidMethod(this$, mids$[mid_clear_54c6a166]);
          }

          PackedTokenAttributeImpl PackedTokenAttributeImpl::clone() const
          {
            return PackedTokenAttributeImpl(env->callObjectMethod(this$, mids$[mid_clone_2353e953]));
          }

          void PackedTokenAttributeImpl::copyTo(const ::org::apache::lucene::util::AttributeImpl & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_copyTo_d86caa9f], a0.this$);
          }

          jint PackedTokenAttributeImpl::endOffset() const
          {
            return env->callIntMethod(this$, mids$[mid_endOffset_54c6a179]);
          }

          jboolean PackedTokenAttributeImpl::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          jint PackedTokenAttributeImpl::getPositionIncrement() const
          {
            return env->callIntMethod(this$, mids$[mid_getPositionIncrement_54c6a179]);
          }

          jint PackedTokenAttributeImpl::getPositionLength() const
          {
            return env->callIntMethod(this$, mids$[mid_getPositionLength_54c6a179]);
          }

          jint PackedTokenAttributeImpl::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          void PackedTokenAttributeImpl::reflectWith(const ::org::apache::lucene::util::AttributeReflector & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_reflectWith_5f3f5102], a0.this$);
          }

          void PackedTokenAttributeImpl::setOffset(jint a0, jint a1) const
          {
            env->callVoidMethod(this$, mids$[mid_setOffset_d8d154a6], a0, a1);
          }

          void PackedTokenAttributeImpl::setPositionIncrement(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setPositionIncrement_39c7bd3c], a0);
          }

          void PackedTokenAttributeImpl::setPositionLength(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setPositionLength_39c7bd3c], a0);
          }

          void PackedTokenAttributeImpl::setType(const ::java::lang::String & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setType_5fdc3f48], a0.this$);
          }

          jint PackedTokenAttributeImpl::startOffset() const
          {
            return env->callIntMethod(this$, mids$[mid_startOffset_54c6a179]);
          }

          ::java::lang::String PackedTokenAttributeImpl::type() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_type_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {
          static PyObject *t_PackedTokenAttributeImpl_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PackedTokenAttributeImpl_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PackedTokenAttributeImpl_init_(t_PackedTokenAttributeImpl *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PackedTokenAttributeImpl_clear(t_PackedTokenAttributeImpl *self, PyObject *args);
          static PyObject *t_PackedTokenAttributeImpl_clone(t_PackedTokenAttributeImpl *self, PyObject *args);
          static PyObject *t_PackedTokenAttributeImpl_copyTo(t_PackedTokenAttributeImpl *self, PyObject *args);
          static PyObject *t_PackedTokenAttributeImpl_endOffset(t_PackedTokenAttributeImpl *self);
          static PyObject *t_PackedTokenAttributeImpl_equals(t_PackedTokenAttributeImpl *self, PyObject *args);
          static PyObject *t_PackedTokenAttributeImpl_getPositionIncrement(t_PackedTokenAttributeImpl *self);
          static PyObject *t_PackedTokenAttributeImpl_getPositionLength(t_PackedTokenAttributeImpl *self);
          static PyObject *t_PackedTokenAttributeImpl_hashCode(t_PackedTokenAttributeImpl *self, PyObject *args);
          static PyObject *t_PackedTokenAttributeImpl_reflectWith(t_PackedTokenAttributeImpl *self, PyObject *args);
          static PyObject *t_PackedTokenAttributeImpl_setOffset(t_PackedTokenAttributeImpl *self, PyObject *args);
          static PyObject *t_PackedTokenAttributeImpl_setPositionIncrement(t_PackedTokenAttributeImpl *self, PyObject *arg);
          static PyObject *t_PackedTokenAttributeImpl_setPositionLength(t_PackedTokenAttributeImpl *self, PyObject *arg);
          static PyObject *t_PackedTokenAttributeImpl_setType(t_PackedTokenAttributeImpl *self, PyObject *arg);
          static PyObject *t_PackedTokenAttributeImpl_startOffset(t_PackedTokenAttributeImpl *self);
          static PyObject *t_PackedTokenAttributeImpl_type(t_PackedTokenAttributeImpl *self);
          static PyObject *t_PackedTokenAttributeImpl_get__positionIncrement(t_PackedTokenAttributeImpl *self, void *data);
          static int t_PackedTokenAttributeImpl_set__positionIncrement(t_PackedTokenAttributeImpl *self, PyObject *arg, void *data);
          static PyObject *t_PackedTokenAttributeImpl_get__positionLength(t_PackedTokenAttributeImpl *self, void *data);
          static int t_PackedTokenAttributeImpl_set__positionLength(t_PackedTokenAttributeImpl *self, PyObject *arg, void *data);
          static PyGetSetDef t_PackedTokenAttributeImpl__fields_[] = {
            DECLARE_GETSET_FIELD(t_PackedTokenAttributeImpl, positionIncrement),
            DECLARE_GETSET_FIELD(t_PackedTokenAttributeImpl, positionLength),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_PackedTokenAttributeImpl__methods_[] = {
            DECLARE_METHOD(t_PackedTokenAttributeImpl, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedTokenAttributeImpl, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedTokenAttributeImpl, clear, METH_VARARGS),
            DECLARE_METHOD(t_PackedTokenAttributeImpl, clone, METH_VARARGS),
            DECLARE_METHOD(t_PackedTokenAttributeImpl, copyTo, METH_VARARGS),
            DECLARE_METHOD(t_PackedTokenAttributeImpl, endOffset, METH_NOARGS),
            DECLARE_METHOD(t_PackedTokenAttributeImpl, equals, METH_VARARGS),
            DECLARE_METHOD(t_PackedTokenAttributeImpl, getPositionIncrement, METH_NOARGS),
            DECLARE_METHOD(t_PackedTokenAttributeImpl, getPositionLength, METH_NOARGS),
            DECLARE_METHOD(t_PackedTokenAttributeImpl, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_PackedTokenAttributeImpl, reflectWith, METH_VARARGS),
            DECLARE_METHOD(t_PackedTokenAttributeImpl, setOffset, METH_VARARGS),
            DECLARE_METHOD(t_PackedTokenAttributeImpl, setPositionIncrement, METH_O),
            DECLARE_METHOD(t_PackedTokenAttributeImpl, setPositionLength, METH_O),
            DECLARE_METHOD(t_PackedTokenAttributeImpl, setType, METH_O),
            DECLARE_METHOD(t_PackedTokenAttributeImpl, startOffset, METH_NOARGS),
            DECLARE_METHOD(t_PackedTokenAttributeImpl, type, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PackedTokenAttributeImpl, t_PackedTokenAttributeImpl, ::org::apache::lucene::analysis::tokenattributes::CharTermAttributeImpl, PackedTokenAttributeImpl, t_PackedTokenAttributeImpl_init_, 0, 0, t_PackedTokenAttributeImpl__fields_, 0, 0);

          void t_PackedTokenAttributeImpl::install(PyObject *module)
          {
            installType(&PY_TYPE(PackedTokenAttributeImpl), module, "PackedTokenAttributeImpl", 0);
          }

          void t_PackedTokenAttributeImpl::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PackedTokenAttributeImpl).tp_dict, "class_", make_descriptor(PackedTokenAttributeImpl::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PackedTokenAttributeImpl).tp_dict, "wrapfn_", make_descriptor(t_PackedTokenAttributeImpl::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PackedTokenAttributeImpl).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PackedTokenAttributeImpl_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PackedTokenAttributeImpl::initializeClass, 1)))
              return NULL;
            return t_PackedTokenAttributeImpl::wrap_Object(PackedTokenAttributeImpl(((t_PackedTokenAttributeImpl *) arg)->object.this$));
          }
          static PyObject *t_PackedTokenAttributeImpl_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PackedTokenAttributeImpl::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PackedTokenAttributeImpl_init_(t_PackedTokenAttributeImpl *self, PyObject *args, PyObject *kwds)
          {
            PackedTokenAttributeImpl object((jobject) NULL);

            INT_CALL(object = PackedTokenAttributeImpl());
            self->object = object;

            return 0;
          }

          static PyObject *t_PackedTokenAttributeImpl_clear(t_PackedTokenAttributeImpl *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.clear());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(PackedTokenAttributeImpl), (PyObject *) self, "clear", args, 2);
          }

          static PyObject *t_PackedTokenAttributeImpl_clone(t_PackedTokenAttributeImpl *self, PyObject *args)
          {
            PackedTokenAttributeImpl result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.clone());
              return t_PackedTokenAttributeImpl::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(PackedTokenAttributeImpl), (PyObject *) self, "clone", args, 2);
          }

          static PyObject *t_PackedTokenAttributeImpl_copyTo(t_PackedTokenAttributeImpl *self, PyObject *args)
          {
            ::org::apache::lucene::util::AttributeImpl a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::util::AttributeImpl::initializeClass, &a0))
            {
              OBJ_CALL(self->object.copyTo(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(PackedTokenAttributeImpl), (PyObject *) self, "copyTo", args, 2);
          }

          static PyObject *t_PackedTokenAttributeImpl_endOffset(t_PackedTokenAttributeImpl *self)
          {
            jint result;
            OBJ_CALL(result = self->object.endOffset());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_PackedTokenAttributeImpl_equals(t_PackedTokenAttributeImpl *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(PackedTokenAttributeImpl), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_PackedTokenAttributeImpl_getPositionIncrement(t_PackedTokenAttributeImpl *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getPositionIncrement());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_PackedTokenAttributeImpl_getPositionLength(t_PackedTokenAttributeImpl *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getPositionLength());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_PackedTokenAttributeImpl_hashCode(t_PackedTokenAttributeImpl *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(PackedTokenAttributeImpl), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_PackedTokenAttributeImpl_reflectWith(t_PackedTokenAttributeImpl *self, PyObject *args)
          {
            ::org::apache::lucene::util::AttributeReflector a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::util::AttributeReflector::initializeClass, &a0))
            {
              OBJ_CALL(self->object.reflectWith(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(PackedTokenAttributeImpl), (PyObject *) self, "reflectWith", args, 2);
          }

          static PyObject *t_PackedTokenAttributeImpl_setOffset(t_PackedTokenAttributeImpl *self, PyObject *args)
          {
            jint a0;
            jint a1;

            if (!parseArgs(args, "II", &a0, &a1))
            {
              OBJ_CALL(self->object.setOffset(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setOffset", args);
            return NULL;
          }

          static PyObject *t_PackedTokenAttributeImpl_setPositionIncrement(t_PackedTokenAttributeImpl *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setPositionIncrement(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setPositionIncrement", arg);
            return NULL;
          }

          static PyObject *t_PackedTokenAttributeImpl_setPositionLength(t_PackedTokenAttributeImpl *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setPositionLength(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setPositionLength", arg);
            return NULL;
          }

          static PyObject *t_PackedTokenAttributeImpl_setType(t_PackedTokenAttributeImpl *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(self->object.setType(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setType", arg);
            return NULL;
          }

          static PyObject *t_PackedTokenAttributeImpl_startOffset(t_PackedTokenAttributeImpl *self)
          {
            jint result;
            OBJ_CALL(result = self->object.startOffset());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_PackedTokenAttributeImpl_type(t_PackedTokenAttributeImpl *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.type());
            return j2p(result);
          }

          static PyObject *t_PackedTokenAttributeImpl_get__positionIncrement(t_PackedTokenAttributeImpl *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getPositionIncrement());
            return PyInt_FromLong((long) value);
          }
          static int t_PackedTokenAttributeImpl_set__positionIncrement(t_PackedTokenAttributeImpl *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setPositionIncrement(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "positionIncrement", arg);
            return -1;
          }

          static PyObject *t_PackedTokenAttributeImpl_get__positionLength(t_PackedTokenAttributeImpl *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getPositionLength());
            return PyInt_FromLong((long) value);
          }
          static int t_PackedTokenAttributeImpl_set__positionLength(t_PackedTokenAttributeImpl *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setPositionLength(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "positionLength", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/MultiFunction$Values.h"
#include "org/apache/lucene/queries/function/valuesource/MultiFunction.h"
#include "org/apache/lucene/queries/function/FunctionValues$ValueFiller.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *MultiFunction$Values::class$ = NULL;
            jmethodID *MultiFunction$Values::mids$ = NULL;
            bool MultiFunction$Values::live$ = false;

            jclass MultiFunction$Values::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/MultiFunction$Values");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_b691fe3f] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queries/function/valuesource/MultiFunction;[Lorg/apache/lucene/queries/function/FunctionValues;)V");
                mids$[mid_getValueFiller_7731f0bd] = env->getMethodID(cls, "getValueFiller", "()Lorg/apache/lucene/queries/function/FunctionValues$ValueFiller;");
                mids$[mid_toString_141401b3] = env->getMethodID(cls, "toString", "(I)Ljava/lang/String;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            MultiFunction$Values::MultiFunction$Values(const ::org::apache::lucene::queries::function::valuesource::MultiFunction & a0, const JArray< ::org::apache::lucene::queries::function::FunctionValues > & a1) : ::org::apache::lucene::queries::function::FunctionValues(env->newObject(initializeClass, &mids$, mid_init$_b691fe3f, a0.this$, a1.this$)) {}

            ::org::apache::lucene::queries::function::FunctionValues$ValueFiller MultiFunction$Values::getValueFiller() const
            {
              return ::org::apache::lucene::queries::function::FunctionValues$ValueFiller(env->callObjectMethod(this$, mids$[mid_getValueFiller_7731f0bd]));
            }

            ::java::lang::String MultiFunction$Values::toString(jint a0) const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_141401b3], a0));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_MultiFunction$Values_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_MultiFunction$Values_instance_(PyTypeObject *type, PyObject *arg);
            static int t_MultiFunction$Values_init_(t_MultiFunction$Values *self, PyObject *args, PyObject *kwds);
            static PyObject *t_MultiFunction$Values_getValueFiller(t_MultiFunction$Values *self, PyObject *args);
            static PyObject *t_MultiFunction$Values_toString(t_MultiFunction$Values *self, PyObject *args);
            static PyObject *t_MultiFunction$Values_get__valueFiller(t_MultiFunction$Values *self, void *data);
            static PyGetSetDef t_MultiFunction$Values__fields_[] = {
              DECLARE_GET_FIELD(t_MultiFunction$Values, valueFiller),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_MultiFunction$Values__methods_[] = {
              DECLARE_METHOD(t_MultiFunction$Values, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_MultiFunction$Values, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_MultiFunction$Values, getValueFiller, METH_VARARGS),
              DECLARE_METHOD(t_MultiFunction$Values, toString, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(MultiFunction$Values, t_MultiFunction$Values, ::org::apache::lucene::queries::function::FunctionValues, MultiFunction$Values, t_MultiFunction$Values_init_, 0, 0, t_MultiFunction$Values__fields_, 0, 0);

            void t_MultiFunction$Values::install(PyObject *module)
            {
              installType(&PY_TYPE(MultiFunction$Values), module, "MultiFunction$Values", 0);
            }

            void t_MultiFunction$Values::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(MultiFunction$Values).tp_dict, "class_", make_descriptor(MultiFunction$Values::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(MultiFunction$Values).tp_dict, "wrapfn_", make_descriptor(t_MultiFunction$Values::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(MultiFunction$Values).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_MultiFunction$Values_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, MultiFunction$Values::initializeClass, 1)))
                return NULL;
              return t_MultiFunction$Values::wrap_Object(MultiFunction$Values(((t_MultiFunction$Values *) arg)->object.this$));
            }
            static PyObject *t_MultiFunction$Values_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, MultiFunction$Values::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_MultiFunction$Values_init_(t_MultiFunction$Values *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::queries::function::valuesource::MultiFunction a0((jobject) NULL);
              JArray< ::org::apache::lucene::queries::function::FunctionValues > a1((jobject) NULL);
              MultiFunction$Values object((jobject) NULL);

              if (!parseArgs(args, "k[k", ::org::apache::lucene::queries::function::valuesource::MultiFunction::initializeClass, ::org::apache::lucene::queries::function::FunctionValues::initializeClass, &a0, &a1))
              {
                INT_CALL(object = MultiFunction$Values(a0, a1));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_MultiFunction$Values_getValueFiller(t_MultiFunction$Values *self, PyObject *args)
            {
              ::org::apache::lucene::queries::function::FunctionValues$ValueFiller result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getValueFiller());
                return ::org::apache::lucene::queries::function::t_FunctionValues$ValueFiller::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(MultiFunction$Values), (PyObject *) self, "getValueFiller", args, 2);
            }

            static PyObject *t_MultiFunction$Values_toString(t_MultiFunction$Values *self, PyObject *args)
            {
              jint a0;
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.toString(a0));
                return j2p(result);
              }

              return callSuper(&PY_TYPE(MultiFunction$Values), (PyObject *) self, "toString", args, 2);
            }

            static PyObject *t_MultiFunction$Values_get__valueFiller(t_MultiFunction$Values *self, void *data)
            {
              ::org::apache::lucene::queries::function::FunctionValues$ValueFiller value((jobject) NULL);
              OBJ_CALL(value = self->object.getValueFiller());
              return ::org::apache::lucene::queries::function::t_FunctionValues$ValueFiller::wrap_Object(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/RangeQueryNode.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/FieldValuePairQueryNode.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {

              ::java::lang::Class *RangeQueryNode::class$ = NULL;
              jmethodID *RangeQueryNode::mids$ = NULL;
              bool RangeQueryNode::live$ = false;

              jclass RangeQueryNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/nodes/RangeQueryNode");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_getLowerBound_2906e52b] = env->getMethodID(cls, "getLowerBound", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/FieldValuePairQueryNode;");
                  mids$[mid_getUpperBound_2906e52b] = env->getMethodID(cls, "getUpperBound", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/FieldValuePairQueryNode;");
                  mids$[mid_isLowerInclusive_54c6a16a] = env->getMethodID(cls, "isLowerInclusive", "()Z");
                  mids$[mid_isUpperInclusive_54c6a16a] = env->getMethodID(cls, "isUpperInclusive", "()Z");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              ::org::apache::lucene::queryparser::flexible::core::nodes::FieldValuePairQueryNode RangeQueryNode::getLowerBound() const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::FieldValuePairQueryNode(env->callObjectMethod(this$, mids$[mid_getLowerBound_2906e52b]));
              }

              ::org::apache::lucene::queryparser::flexible::core::nodes::FieldValuePairQueryNode RangeQueryNode::getUpperBound() const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::FieldValuePairQueryNode(env->callObjectMethod(this$, mids$[mid_getUpperBound_2906e52b]));
              }

              jboolean RangeQueryNode::isLowerInclusive() const
              {
                return env->callBooleanMethod(this$, mids$[mid_isLowerInclusive_54c6a16a]);
              }

              jboolean RangeQueryNode::isUpperInclusive() const
              {
                return env->callBooleanMethod(this$, mids$[mid_isUpperInclusive_54c6a16a]);
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {
              static PyObject *t_RangeQueryNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_RangeQueryNode_instance_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_RangeQueryNode_of_(t_RangeQueryNode *self, PyObject *args);
              static PyObject *t_RangeQueryNode_getLowerBound(t_RangeQueryNode *self);
              static PyObject *t_RangeQueryNode_getUpperBound(t_RangeQueryNode *self);
              static PyObject *t_RangeQueryNode_isLowerInclusive(t_RangeQueryNode *self);
              static PyObject *t_RangeQueryNode_isUpperInclusive(t_RangeQueryNode *self);
              static PyObject *t_RangeQueryNode_get__lowerBound(t_RangeQueryNode *self, void *data);
              static PyObject *t_RangeQueryNode_get__lowerInclusive(t_RangeQueryNode *self, void *data);
              static PyObject *t_RangeQueryNode_get__upperBound(t_RangeQueryNode *self, void *data);
              static PyObject *t_RangeQueryNode_get__upperInclusive(t_RangeQueryNode *self, void *data);
              static PyObject *t_RangeQueryNode_get__parameters_(t_RangeQueryNode *self, void *data);
              static PyGetSetDef t_RangeQueryNode__fields_[] = {
                DECLARE_GET_FIELD(t_RangeQueryNode, lowerBound),
                DECLARE_GET_FIELD(t_RangeQueryNode, lowerInclusive),
                DECLARE_GET_FIELD(t_RangeQueryNode, upperBound),
                DECLARE_GET_FIELD(t_RangeQueryNode, upperInclusive),
                DECLARE_GET_FIELD(t_RangeQueryNode, parameters_),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_RangeQueryNode__methods_[] = {
                DECLARE_METHOD(t_RangeQueryNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_RangeQueryNode, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_RangeQueryNode, of_, METH_VARARGS),
                DECLARE_METHOD(t_RangeQueryNode, getLowerBound, METH_NOARGS),
                DECLARE_METHOD(t_RangeQueryNode, getUpperBound, METH_NOARGS),
                DECLARE_METHOD(t_RangeQueryNode, isLowerInclusive, METH_NOARGS),
                DECLARE_METHOD(t_RangeQueryNode, isUpperInclusive, METH_NOARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(RangeQueryNode, t_RangeQueryNode, ::org::apache::lucene::queryparser::flexible::core::nodes::FieldableNode, RangeQueryNode, abstract_init, 0, 0, t_RangeQueryNode__fields_, 0, 0);
              PyObject *t_RangeQueryNode::wrap_Object(const RangeQueryNode& object, PyTypeObject *p0)
              {
                PyObject *obj = t_RangeQueryNode::wrap_Object(object);
                if (obj != NULL && obj != Py_None)
                {
                  t_RangeQueryNode *self = (t_RangeQueryNode *) obj;
                  self->parameters[0] = p0;
                }
                return obj;
              }

              PyObject *t_RangeQueryNode::wrap_jobject(const jobject& object, PyTypeObject *p0)
              {
                PyObject *obj = t_RangeQueryNode::wrap_jobject(object);
                if (obj != NULL && obj != Py_None)
                {
                  t_RangeQueryNode *self = (t_RangeQueryNode *) obj;
                  self->parameters[0] = p0;
                }
                return obj;
              }

              void t_RangeQueryNode::install(PyObject *module)
              {
                installType(&PY_TYPE(RangeQueryNode), module, "RangeQueryNode", 0);
              }

              void t_RangeQueryNode::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(RangeQueryNode).tp_dict, "class_", make_descriptor(RangeQueryNode::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(RangeQueryNode).tp_dict, "wrapfn_", make_descriptor(t_RangeQueryNode::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(RangeQueryNode).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_RangeQueryNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, RangeQueryNode::initializeClass, 1)))
                  return NULL;
                return t_RangeQueryNode::wrap_Object(RangeQueryNode(((t_RangeQueryNode *) arg)->object.this$));
              }
              static PyObject *t_RangeQueryNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, RangeQueryNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static PyObject *t_RangeQueryNode_of_(t_RangeQueryNode *self, PyObject *args)
              {
                if (!parseArg(args, "T", 1, &(self->parameters)))
                  Py_RETURN_SELF;
                return PyErr_SetArgsError((PyObject *) self, "of_", args);
              }

              static PyObject *t_RangeQueryNode_getLowerBound(t_RangeQueryNode *self)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::FieldValuePairQueryNode result((jobject) NULL);
                OBJ_CALL(result = self->object.getLowerBound());
                return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::org::apache::lucene::queryparser::flexible::core::nodes::t_FieldValuePairQueryNode::wrap_Object(result);
              }

              static PyObject *t_RangeQueryNode_getUpperBound(t_RangeQueryNode *self)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::FieldValuePairQueryNode result((jobject) NULL);
                OBJ_CALL(result = self->object.getUpperBound());
                return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::org::apache::lucene::queryparser::flexible::core::nodes::t_FieldValuePairQueryNode::wrap_Object(result);
              }

              static PyObject *t_RangeQueryNode_isLowerInclusive(t_RangeQueryNode *self)
              {
                jboolean result;
                OBJ_CALL(result = self->object.isLowerInclusive());
                Py_RETURN_BOOL(result);
              }

              static PyObject *t_RangeQueryNode_isUpperInclusive(t_RangeQueryNode *self)
              {
                jboolean result;
                OBJ_CALL(result = self->object.isUpperInclusive());
                Py_RETURN_BOOL(result);
              }
              static PyObject *t_RangeQueryNode_get__parameters_(t_RangeQueryNode *self, void *data)
              {
                return typeParameters(self->parameters, sizeof(self->parameters));
              }

              static PyObject *t_RangeQueryNode_get__lowerBound(t_RangeQueryNode *self, void *data)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::FieldValuePairQueryNode value((jobject) NULL);
                OBJ_CALL(value = self->object.getLowerBound());
                return ::org::apache::lucene::queryparser::flexible::core::nodes::t_FieldValuePairQueryNode::wrap_Object(value);
              }

              static PyObject *t_RangeQueryNode_get__lowerInclusive(t_RangeQueryNode *self, void *data)
              {
                jboolean value;
                OBJ_CALL(value = self->object.isLowerInclusive());
                Py_RETURN_BOOL(value);
              }

              static PyObject *t_RangeQueryNode_get__upperBound(t_RangeQueryNode *self, void *data)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::FieldValuePairQueryNode value((jobject) NULL);
                OBJ_CALL(value = self->object.getUpperBound());
                return ::org::apache::lucene::queryparser::flexible::core::nodes::t_FieldValuePairQueryNode::wrap_Object(value);
              }

              static PyObject *t_RangeQueryNode_get__upperInclusive(t_RangeQueryNode *self, void *data)
              {
                jboolean value;
                OBJ_CALL(value = self->object.isUpperInclusive());
                Py_RETURN_BOOL(value);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/automaton/Transition.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {

          ::java::lang::Class *Transition::class$ = NULL;
          jmethodID *Transition::mids$ = NULL;
          jfieldID *Transition::fids$ = NULL;
          bool Transition::live$ = false;

          jclass Transition::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/automaton/Transition");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              fids$ = new jfieldID[max_fid];
              fids$[fid_dest] = env->getFieldID(cls, "dest", "I");
              fids$[fid_max] = env->getFieldID(cls, "max", "I");
              fids$[fid_min] = env->getFieldID(cls, "min", "I");
              fids$[fid_source] = env->getFieldID(cls, "source", "I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Transition::Transition() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::java::lang::String Transition::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }

          jint Transition::_get_dest() const
          {
            return env->getIntField(this$, fids$[fid_dest]);
          }

          void Transition::_set_dest(jint a0) const
          {
            env->setIntField(this$, fids$[fid_dest], a0);
          }

          jint Transition::_get_max() const
          {
            return env->getIntField(this$, fids$[fid_max]);
          }

          void Transition::_set_max(jint a0) const
          {
            env->setIntField(this$, fids$[fid_max], a0);
          }

          jint Transition::_get_min() const
          {
            return env->getIntField(this$, fids$[fid_min]);
          }

          void Transition::_set_min(jint a0) const
          {
            env->setIntField(this$, fids$[fid_min], a0);
          }

          jint Transition::_get_source() const
          {
            return env->getIntField(this$, fids$[fid_source]);
          }

          void Transition::_set_source(jint a0) const
          {
            env->setIntField(this$, fids$[fid_source], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {
          static PyObject *t_Transition_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Transition_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Transition_init_(t_Transition *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Transition_toString(t_Transition *self, PyObject *args);
          static PyObject *t_Transition_get__dest(t_Transition *self, void *data);
          static int t_Transition_set__dest(t_Transition *self, PyObject *arg, void *data);
          static PyObject *t_Transition_get__max(t_Transition *self, void *data);
          static int t_Transition_set__max(t_Transition *self, PyObject *arg, void *data);
          static PyObject *t_Transition_get__min(t_Transition *self, void *data);
          static int t_Transition_set__min(t_Transition *self, PyObject *arg, void *data);
          static PyObject *t_Transition_get__source(t_Transition *self, void *data);
          static int t_Transition_set__source(t_Transition *self, PyObject *arg, void *data);

          static PyGetSetDef t_Transition__fields_[] = {
            DECLARE_GETSET_FIELD(t_Transition, dest),
            DECLARE_GETSET_FIELD(t_Transition, max),
            DECLARE_GETSET_FIELD(t_Transition, min),
            DECLARE_GETSET_FIELD(t_Transition, source),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Transition__methods_[] = {
            DECLARE_METHOD(t_Transition, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Transition, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Transition, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Transition, t_Transition, ::java::lang::Object, Transition, t_Transition_init_, 0, 0, t_Transition__fields_, 0, 0);

          void t_Transition::install(PyObject *module)
          {
            installType(&PY_TYPE(Transition), module, "Transition", 0);
          }

          void t_Transition::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Transition).tp_dict, "class_", make_descriptor(Transition::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Transition).tp_dict, "wrapfn_", make_descriptor(t_Transition::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Transition).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Transition_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Transition::initializeClass, 1)))
              return NULL;
            return t_Transition::wrap_Object(Transition(((t_Transition *) arg)->object.this$));
          }
          static PyObject *t_Transition_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Transition::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Transition_init_(t_Transition *self, PyObject *args, PyObject *kwds)
          {
            Transition object((jobject) NULL);

            INT_CALL(object = Transition());
            self->object = object;

            return 0;
          }

          static PyObject *t_Transition_toString(t_Transition *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(Transition), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_Transition_get__dest(t_Transition *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object._get_dest());
            return PyInt_FromLong((long) value);
          }
          static int t_Transition_set__dest(t_Transition *self, PyObject *arg, void *data)
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object._set_dest(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "dest", arg);
            return -1;
          }

          static PyObject *t_Transition_get__max(t_Transition *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object._get_max());
            return PyInt_FromLong((long) value);
          }
          static int t_Transition_set__max(t_Transition *self, PyObject *arg, void *data)
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object._set_max(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "max", arg);
            return -1;
          }

          static PyObject *t_Transition_get__min(t_Transition *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object._get_min());
            return PyInt_FromLong((long) value);
          }
          static int t_Transition_set__min(t_Transition *self, PyObject *arg, void *data)
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object._set_min(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "min", arg);
            return -1;
          }

          static PyObject *t_Transition_get__source(t_Transition *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object._get_source());
            return PyInt_FromLong((long) value);
          }
          static int t_Transition_set__source(t_Transition *self, PyObject *arg, void *data)
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object._set_source(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "source", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/processors/MultiTermRewriteMethodProcessor.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {

              ::java::lang::Class *MultiTermRewriteMethodProcessor::class$ = NULL;
              jmethodID *MultiTermRewriteMethodProcessor::mids$ = NULL;
              bool MultiTermRewriteMethodProcessor::live$ = false;
              ::java::lang::String *MultiTermRewriteMethodProcessor::TAG_ID = NULL;

              jclass MultiTermRewriteMethodProcessor::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/processors/MultiTermRewriteMethodProcessor");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_postProcessNode_6705aed7] = env->getMethodID(cls, "postProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_preProcessNode_6705aed7] = env->getMethodID(cls, "preProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_setChildrenOrder_4f378251] = env->getMethodID(cls, "setChildrenOrder", "(Ljava/util/List;)Ljava/util/List;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  cls = (jclass) class$->this$;

                  TAG_ID = new ::java::lang::String(env->getStaticObjectField(cls, "TAG_ID", "Ljava/lang/String;"));
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              MultiTermRewriteMethodProcessor::MultiTermRewriteMethodProcessor() : ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {
              static PyObject *t_MultiTermRewriteMethodProcessor_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_MultiTermRewriteMethodProcessor_instance_(PyTypeObject *type, PyObject *arg);
              static int t_MultiTermRewriteMethodProcessor_init_(t_MultiTermRewriteMethodProcessor *self, PyObject *args, PyObject *kwds);

              static PyMethodDef t_MultiTermRewriteMethodProcessor__methods_[] = {
                DECLARE_METHOD(t_MultiTermRewriteMethodProcessor, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_MultiTermRewriteMethodProcessor, instance_, METH_O | METH_CLASS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(MultiTermRewriteMethodProcessor, t_MultiTermRewriteMethodProcessor, ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl, MultiTermRewriteMethodProcessor, t_MultiTermRewriteMethodProcessor_init_, 0, 0, 0, 0, 0);

              void t_MultiTermRewriteMethodProcessor::install(PyObject *module)
              {
                installType(&PY_TYPE(MultiTermRewriteMethodProcessor), module, "MultiTermRewriteMethodProcessor", 0);
              }

              void t_MultiTermRewriteMethodProcessor::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(MultiTermRewriteMethodProcessor).tp_dict, "class_", make_descriptor(MultiTermRewriteMethodProcessor::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(MultiTermRewriteMethodProcessor).tp_dict, "wrapfn_", make_descriptor(t_MultiTermRewriteMethodProcessor::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(MultiTermRewriteMethodProcessor).tp_dict, "boxfn_", make_descriptor(boxObject));
                env->getClass(MultiTermRewriteMethodProcessor::initializeClass);
                PyDict_SetItemString(PY_TYPE(MultiTermRewriteMethodProcessor).tp_dict, "TAG_ID", make_descriptor(j2p(*MultiTermRewriteMethodProcessor::TAG_ID)));
              }

              static PyObject *t_MultiTermRewriteMethodProcessor_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, MultiTermRewriteMethodProcessor::initializeClass, 1)))
                  return NULL;
                return t_MultiTermRewriteMethodProcessor::wrap_Object(MultiTermRewriteMethodProcessor(((t_MultiTermRewriteMethodProcessor *) arg)->object.this$));
              }
              static PyObject *t_MultiTermRewriteMethodProcessor_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, MultiTermRewriteMethodProcessor::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_MultiTermRewriteMethodProcessor_init_(t_MultiTermRewriteMethodProcessor *self, PyObject *args, PyObject *kwds)
              {
                MultiTermRewriteMethodProcessor object((jobject) NULL);

                INT_CALL(object = MultiTermRewriteMethodProcessor());
                self->object = object;

                return 0;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter.h"
#include "org/apache/lucene/facet/taxonomy/writercache/TaxonomyWriterCache.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/facet/taxonomy/FacetLabel.h"
#include "org/apache/lucene/index/IndexWriterConfig$OpenMode.h"
#include "org/apache/lucene/facet/taxonomy/TaxonomyWriter.h"
#include "java/lang/String.h"
#include "org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter$OrdinalMap.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          namespace directory {

            ::java::lang::Class *DirectoryTaxonomyWriter::class$ = NULL;
            jmethodID *DirectoryTaxonomyWriter::mids$ = NULL;
            bool DirectoryTaxonomyWriter::live$ = false;
            ::java::lang::String *DirectoryTaxonomyWriter::INDEX_EPOCH = NULL;

            jclass DirectoryTaxonomyWriter::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_2e261ef2] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;)V");
                mids$[mid_init$_288989fd] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/IndexWriterConfig$OpenMode;)V");
                mids$[mid_init$_c98cdfb3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/IndexWriterConfig$OpenMode;Lorg/apache/lucene/facet/taxonomy/writercache/TaxonomyWriterCache;)V");
                mids$[mid_addCategory_283f83f5] = env->getMethodID(cls, "addCategory", "(Lorg/apache/lucene/facet/taxonomy/FacetLabel;)I");
                mids$[mid_addTaxonomy_0e53fb1b] = env->getMethodID(cls, "addTaxonomy", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter$OrdinalMap;)V");
                mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
                mids$[mid_commit_54c6a166] = env->getMethodID(cls, "commit", "()V");
                mids$[mid_defaultTaxonomyWriterCache_3cef12bd] = env->getStaticMethodID(cls, "defaultTaxonomyWriterCache", "()Lorg/apache/lucene/facet/taxonomy/writercache/TaxonomyWriterCache;");
                mids$[mid_getCommitData_db60befd] = env->getMethodID(cls, "getCommitData", "()Ljava/util/Map;");
                mids$[mid_getDirectory_1f3934bb] = env->getMethodID(cls, "getDirectory", "()Lorg/apache/lucene/store/Directory;");
                mids$[mid_getParent_39c7bd23] = env->getMethodID(cls, "getParent", "(I)I");
                mids$[mid_getSize_54c6a179] = env->getMethodID(cls, "getSize", "()I");
                mids$[mid_getTaxonomyEpoch_54c6a17a] = env->getMethodID(cls, "getTaxonomyEpoch", "()J");
                mids$[mid_prepareCommit_54c6a166] = env->getMethodID(cls, "prepareCommit", "()V");
                mids$[mid_replaceTaxonomy_2e261ef2] = env->getMethodID(cls, "replaceTaxonomy", "(Lorg/apache/lucene/store/Directory;)V");
                mids$[mid_rollback_54c6a166] = env->getMethodID(cls, "rollback", "()V");
                mids$[mid_setCacheMissesUntilFill_39c7bd3c] = env->getMethodID(cls, "setCacheMissesUntilFill", "(I)V");
                mids$[mid_setCommitData_4c9e2b1c] = env->getMethodID(cls, "setCommitData", "(Ljava/util/Map;)V");
                mids$[mid_unlock_2e261ef2] = env->getStaticMethodID(cls, "unlock", "(Lorg/apache/lucene/store/Directory;)V");
                mids$[mid_ensureOpen_54c6a166] = env->getMethodID(cls, "ensureOpen", "()V");
                mids$[mid_openIndexWriter_cd637c77] = env->getMethodID(cls, "openIndexWriter", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/IndexWriterConfig;)Lorg/apache/lucene/index/IndexWriter;");
                mids$[mid_createIndexWriterConfig_ecf4c6f7] = env->getMethodID(cls, "createIndexWriterConfig", "(Lorg/apache/lucene/index/IndexWriterConfig$OpenMode;)Lorg/apache/lucene/index/IndexWriterConfig;");
                mids$[mid_closeResources_54c6a166] = env->getMethodID(cls, "closeResources", "()V");
                mids$[mid_findCategory_283f83f5] = env->getMethodID(cls, "findCategory", "(Lorg/apache/lucene/facet/taxonomy/FacetLabel;)I");

                class$ = (::java::lang::Class *) new JObject(cls);
                cls = (jclass) class$->this$;

                INDEX_EPOCH = new ::java::lang::String(env->getStaticObjectField(cls, "INDEX_EPOCH", "Ljava/lang/String;"));
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            DirectoryTaxonomyWriter::DirectoryTaxonomyWriter(const ::org::apache::lucene::store::Directory & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_2e261ef2, a0.this$)) {}

            DirectoryTaxonomyWriter::DirectoryTaxonomyWriter(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::IndexWriterConfig$OpenMode & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_288989fd, a0.this$, a1.this$)) {}

            DirectoryTaxonomyWriter::DirectoryTaxonomyWriter(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::IndexWriterConfig$OpenMode & a1, const ::org::apache::lucene::facet::taxonomy::writercache::TaxonomyWriterCache & a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_c98cdfb3, a0.this$, a1.this$, a2.this$)) {}

            jint DirectoryTaxonomyWriter::addCategory(const ::org::apache::lucene::facet::taxonomy::FacetLabel & a0) const
            {
              return env->callIntMethod(this$, mids$[mid_addCategory_283f83f5], a0.this$);
            }

            void DirectoryTaxonomyWriter::addTaxonomy(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::facet::taxonomy::directory::DirectoryTaxonomyWriter$OrdinalMap & a1) const
            {
              env->callVoidMethod(this$, mids$[mid_addTaxonomy_0e53fb1b], a0.this$, a1.this$);
            }

            void DirectoryTaxonomyWriter::close() const
            {
              env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
            }

            void DirectoryTaxonomyWriter::commit() const
            {
              env->callVoidMethod(this$, mids$[mid_commit_54c6a166]);
            }

            ::org::apache::lucene::facet::taxonomy::writercache::TaxonomyWriterCache DirectoryTaxonomyWriter::defaultTaxonomyWriterCache()
            {
              jclass cls = env->getClass(initializeClass);
              return ::org::apache::lucene::facet::taxonomy::writercache::TaxonomyWriterCache(env->callStaticObjectMethod(cls, mids$[mid_defaultTaxonomyWriterCache_3cef12bd]));
            }

            ::java::util::Map DirectoryTaxonomyWriter::getCommitData() const
            {
              return ::java::util::Map(env->callObjectMethod(this$, mids$[mid_getCommitData_db60befd]));
            }

            ::org::apache::lucene::store::Directory DirectoryTaxonomyWriter::getDirectory() const
            {
              return ::org::apache::lucene::store::Directory(env->callObjectMethod(this$, mids$[mid_getDirectory_1f3934bb]));
            }

            jint DirectoryTaxonomyWriter::getParent(jint a0) const
            {
              return env->callIntMethod(this$, mids$[mid_getParent_39c7bd23], a0);
            }

            jint DirectoryTaxonomyWriter::getSize() const
            {
              return env->callIntMethod(this$, mids$[mid_getSize_54c6a179]);
            }

            jlong DirectoryTaxonomyWriter::getTaxonomyEpoch() const
            {
              return env->callLongMethod(this$, mids$[mid_getTaxonomyEpoch_54c6a17a]);
            }

            void DirectoryTaxonomyWriter::prepareCommit() const
            {
              env->callVoidMethod(this$, mids$[mid_prepareCommit_54c6a166]);
            }

            void DirectoryTaxonomyWriter::replaceTaxonomy(const ::org::apache::lucene::store::Directory & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_replaceTaxonomy_2e261ef2], a0.this$);
            }

            void DirectoryTaxonomyWriter::rollback() const
            {
              env->callVoidMethod(this$, mids$[mid_rollback_54c6a166]);
            }

            void DirectoryTaxonomyWriter::setCacheMissesUntilFill(jint a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setCacheMissesUntilFill_39c7bd3c], a0);
            }

            void DirectoryTaxonomyWriter::setCommitData(const ::java::util::Map & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setCommitData_4c9e2b1c], a0.this$);
            }

            void DirectoryTaxonomyWriter::unlock(const ::org::apache::lucene::store::Directory & a0)
            {
              jclass cls = env->getClass(initializeClass);
              env->callStaticVoidMethod(cls, mids$[mid_unlock_2e261ef2], a0.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter$DiskOrdinalMap.h"
#include "org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter$MemoryOrdinalMap.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          namespace directory {
            static PyObject *t_DirectoryTaxonomyWriter_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_DirectoryTaxonomyWriter_instance_(PyTypeObject *type, PyObject *arg);
            static int t_DirectoryTaxonomyWriter_init_(t_DirectoryTaxonomyWriter *self, PyObject *args, PyObject *kwds);
            static PyObject *t_DirectoryTaxonomyWriter_addCategory(t_DirectoryTaxonomyWriter *self, PyObject *arg);
            static PyObject *t_DirectoryTaxonomyWriter_addTaxonomy(t_DirectoryTaxonomyWriter *self, PyObject *args);
            static PyObject *t_DirectoryTaxonomyWriter_close(t_DirectoryTaxonomyWriter *self);
            static PyObject *t_DirectoryTaxonomyWriter_commit(t_DirectoryTaxonomyWriter *self);
            static PyObject *t_DirectoryTaxonomyWriter_defaultTaxonomyWriterCache(PyTypeObject *type);
            static PyObject *t_DirectoryTaxonomyWriter_getCommitData(t_DirectoryTaxonomyWriter *self);
            static PyObject *t_DirectoryTaxonomyWriter_getDirectory(t_DirectoryTaxonomyWriter *self);
            static PyObject *t_DirectoryTaxonomyWriter_getParent(t_DirectoryTaxonomyWriter *self, PyObject *arg);
            static PyObject *t_DirectoryTaxonomyWriter_getSize(t_DirectoryTaxonomyWriter *self);
            static PyObject *t_DirectoryTaxonomyWriter_getTaxonomyEpoch(t_DirectoryTaxonomyWriter *self);
            static PyObject *t_DirectoryTaxonomyWriter_prepareCommit(t_DirectoryTaxonomyWriter *self);
            static PyObject *t_DirectoryTaxonomyWriter_replaceTaxonomy(t_DirectoryTaxonomyWriter *self, PyObject *arg);
            static PyObject *t_DirectoryTaxonomyWriter_rollback(t_DirectoryTaxonomyWriter *self);
            static PyObject *t_DirectoryTaxonomyWriter_setCacheMissesUntilFill(t_DirectoryTaxonomyWriter *self, PyObject *arg);
            static PyObject *t_DirectoryTaxonomyWriter_setCommitData(t_DirectoryTaxonomyWriter *self, PyObject *arg);
            static PyObject *t_DirectoryTaxonomyWriter_unlock(PyTypeObject *type, PyObject *arg);
            static int t_DirectoryTaxonomyWriter_set__cacheMissesUntilFill(t_DirectoryTaxonomyWriter *self, PyObject *arg, void *data);
            static PyObject *t_DirectoryTaxonomyWriter_get__commitData(t_DirectoryTaxonomyWriter *self, void *data);
            static int t_DirectoryTaxonomyWriter_set__commitData(t_DirectoryTaxonomyWriter *self, PyObject *arg, void *data);
            static PyObject *t_DirectoryTaxonomyWriter_get__directory(t_DirectoryTaxonomyWriter *self, void *data);
            static PyObject *t_DirectoryTaxonomyWriter_get__size(t_DirectoryTaxonomyWriter *self, void *data);
            static PyObject *t_DirectoryTaxonomyWriter_get__taxonomyEpoch(t_DirectoryTaxonomyWriter *self, void *data);
            static PyGetSetDef t_DirectoryTaxonomyWriter__fields_[] = {
              DECLARE_SET_FIELD(t_DirectoryTaxonomyWriter, cacheMissesUntilFill),
              DECLARE_GETSET_FIELD(t_DirectoryTaxonomyWriter, commitData),
              DECLARE_GET_FIELD(t_DirectoryTaxonomyWriter, directory),
              DECLARE_GET_FIELD(t_DirectoryTaxonomyWriter, size),
              DECLARE_GET_FIELD(t_DirectoryTaxonomyWriter, taxonomyEpoch),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_DirectoryTaxonomyWriter__methods_[] = {
              DECLARE_METHOD(t_DirectoryTaxonomyWriter, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_DirectoryTaxonomyWriter, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_DirectoryTaxonomyWriter, addCategory, METH_O),
              DECLARE_METHOD(t_DirectoryTaxonomyWriter, addTaxonomy, METH_VARARGS),
              DECLARE_METHOD(t_DirectoryTaxonomyWriter, close, METH_NOARGS),
              DECLARE_METHOD(t_DirectoryTaxonomyWriter, commit, METH_NOARGS),
              DECLARE_METHOD(t_DirectoryTaxonomyWriter, defaultTaxonomyWriterCache, METH_NOARGS | METH_CLASS),
              DECLARE_METHOD(t_DirectoryTaxonomyWriter, getCommitData, METH_NOARGS),
              DECLARE_METHOD(t_DirectoryTaxonomyWriter, getDirectory, METH_NOARGS),
              DECLARE_METHOD(t_DirectoryTaxonomyWriter, getParent, METH_O),
              DECLARE_METHOD(t_DirectoryTaxonomyWriter, getSize, METH_NOARGS),
              DECLARE_METHOD(t_DirectoryTaxonomyWriter, getTaxonomyEpoch, METH_NOARGS),
              DECLARE_METHOD(t_DirectoryTaxonomyWriter, prepareCommit, METH_NOARGS),
              DECLARE_METHOD(t_DirectoryTaxonomyWriter, replaceTaxonomy, METH_O),
              DECLARE_METHOD(t_DirectoryTaxonomyWriter, rollback, METH_NOARGS),
              DECLARE_METHOD(t_DirectoryTaxonomyWriter, setCacheMissesUntilFill, METH_O),
              DECLARE_METHOD(t_DirectoryTaxonomyWriter, setCommitData, METH_O),
              DECLARE_METHOD(t_DirectoryTaxonomyWriter, unlock, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(DirectoryTaxonomyWriter, t_DirectoryTaxonomyWriter, ::java::lang::Object, DirectoryTaxonomyWriter, t_DirectoryTaxonomyWriter_init_, 0, 0, t_DirectoryTaxonomyWriter__fields_, 0, 0);

            void t_DirectoryTaxonomyWriter::install(PyObject *module)
            {
              installType(&PY_TYPE(DirectoryTaxonomyWriter), module, "DirectoryTaxonomyWriter", 0);
              PyDict_SetItemString(PY_TYPE(DirectoryTaxonomyWriter).tp_dict, "DiskOrdinalMap", make_descriptor(&PY_TYPE(DirectoryTaxonomyWriter$DiskOrdinalMap)));
              PyDict_SetItemString(PY_TYPE(DirectoryTaxonomyWriter).tp_dict, "MemoryOrdinalMap", make_descriptor(&PY_TYPE(DirectoryTaxonomyWriter$MemoryOrdinalMap)));
              PyDict_SetItemString(PY_TYPE(DirectoryTaxonomyWriter).tp_dict, "OrdinalMap", make_descriptor(&PY_TYPE(DirectoryTaxonomyWriter$OrdinalMap)));
            }

            void t_DirectoryTaxonomyWriter::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(DirectoryTaxonomyWriter).tp_dict, "class_", make_descriptor(DirectoryTaxonomyWriter::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(DirectoryTaxonomyWriter).tp_dict, "wrapfn_", make_descriptor(t_DirectoryTaxonomyWriter::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(DirectoryTaxonomyWriter).tp_dict, "boxfn_", make_descriptor(boxObject));
              env->getClass(DirectoryTaxonomyWriter::initializeClass);
              PyDict_SetItemString(PY_TYPE(DirectoryTaxonomyWriter).tp_dict, "INDEX_EPOCH", make_descriptor(j2p(*DirectoryTaxonomyWriter::INDEX_EPOCH)));
            }

            static PyObject *t_DirectoryTaxonomyWriter_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, DirectoryTaxonomyWriter::initializeClass, 1)))
                return NULL;
              return t_DirectoryTaxonomyWriter::wrap_Object(DirectoryTaxonomyWriter(((t_DirectoryTaxonomyWriter *) arg)->object.this$));
            }
            static PyObject *t_DirectoryTaxonomyWriter_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, DirectoryTaxonomyWriter::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_DirectoryTaxonomyWriter_init_(t_DirectoryTaxonomyWriter *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 1:
                {
                  ::org::apache::lucene::store::Directory a0((jobject) NULL);
                  DirectoryTaxonomyWriter object((jobject) NULL);

                  if (!parseArgs(args, "k", ::org::apache::lucene::store::Directory::initializeClass, &a0))
                  {
                    INT_CALL(object = DirectoryTaxonomyWriter(a0));
                    self->object = object;
                    break;
                  }
                }
                goto err;
               case 2:
                {
                  ::org::apache::lucene::store::Directory a0((jobject) NULL);
                  ::org::apache::lucene::index::IndexWriterConfig$OpenMode a1((jobject) NULL);
                  PyTypeObject **p1;
                  DirectoryTaxonomyWriter object((jobject) NULL);

                  if (!parseArgs(args, "kK", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::IndexWriterConfig$OpenMode::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::index::t_IndexWriterConfig$OpenMode::parameters_))
                  {
                    INT_CALL(object = DirectoryTaxonomyWriter(a0, a1));
                    self->object = object;
                    break;
                  }
                }
                goto err;
               case 3:
                {
                  ::org::apache::lucene::store::Directory a0((jobject) NULL);
                  ::org::apache::lucene::index::IndexWriterConfig$OpenMode a1((jobject) NULL);
                  PyTypeObject **p1;
                  ::org::apache::lucene::facet::taxonomy::writercache::TaxonomyWriterCache a2((jobject) NULL);
                  DirectoryTaxonomyWriter object((jobject) NULL);

                  if (!parseArgs(args, "kKk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::IndexWriterConfig$OpenMode::initializeClass, ::org::apache::lucene::facet::taxonomy::writercache::TaxonomyWriterCache::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::index::t_IndexWriterConfig$OpenMode::parameters_, &a2))
                  {
                    INT_CALL(object = DirectoryTaxonomyWriter(a0, a1, a2));
                    self->object = object;
                    break;
                  }
                }
               default:
               err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_DirectoryTaxonomyWriter_addCategory(t_DirectoryTaxonomyWriter *self, PyObject *arg)
            {
              ::org::apache::lucene::facet::taxonomy::FacetLabel a0((jobject) NULL);
              jint result;

              if (!parseArg(arg, "k", ::org::apache::lucene::facet::taxonomy::FacetLabel::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.addCategory(a0));
                return PyInt_FromLong((long) result);
              }

              PyErr_SetArgsError((PyObject *) self, "addCategory", arg);
              return NULL;
            }

            static PyObject *t_DirectoryTaxonomyWriter_addTaxonomy(t_DirectoryTaxonomyWriter *self, PyObject *args)
            {
              ::org::apache::lucene::store::Directory a0((jobject) NULL);
              ::org::apache::lucene::facet::taxonomy::directory::DirectoryTaxonomyWriter$OrdinalMap a1((jobject) NULL);

              if (!parseArgs(args, "kk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::facet::taxonomy::directory::DirectoryTaxonomyWriter$OrdinalMap::initializeClass, &a0, &a1))
              {
                OBJ_CALL(self->object.addTaxonomy(a0, a1));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "addTaxonomy", args);
              return NULL;
            }

            static PyObject *t_DirectoryTaxonomyWriter_close(t_DirectoryTaxonomyWriter *self)
            {
              OBJ_CALL(self->object.close());
              Py_RETURN_NONE;
            }

            static PyObject *t_DirectoryTaxonomyWriter_commit(t_DirectoryTaxonomyWriter *self)
            {
              OBJ_CALL(self->object.commit());
              Py_RETURN_NONE;
            }

            static PyObject *t_DirectoryTaxonomyWriter_defaultTaxonomyWriterCache(PyTypeObject *type)
            {
              ::org::apache::lucene::facet::taxonomy::writercache::TaxonomyWriterCache result((jobject) NULL);
              OBJ_CALL(result = ::org::apache::lucene::facet::taxonomy::directory::DirectoryTaxonomyWriter::defaultTaxonomyWriterCache());
              return ::org::apache::lucene::facet::taxonomy::writercache::t_TaxonomyWriterCache::wrap_Object(result);
            }

            static PyObject *t_DirectoryTaxonomyWriter_getCommitData(t_DirectoryTaxonomyWriter *self)
            {
              ::java::util::Map result((jobject) NULL);
              OBJ_CALL(result = self->object.getCommitData());
              return ::java::util::t_Map::wrap_Object(result, &::java::lang::PY_TYPE(String), &::java::lang::PY_TYPE(String));
            }

            static PyObject *t_DirectoryTaxonomyWriter_getDirectory(t_DirectoryTaxonomyWriter *self)
            {
              ::org::apache::lucene::store::Directory result((jobject) NULL);
              OBJ_CALL(result = self->object.getDirectory());
              return ::org::apache::lucene::store::t_Directory::wrap_Object(result);
            }

            static PyObject *t_DirectoryTaxonomyWriter_getParent(t_DirectoryTaxonomyWriter *self, PyObject *arg)
            {
              jint a0;
              jint result;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(result = self->object.getParent(a0));
                return PyInt_FromLong((long) result);
              }

              PyErr_SetArgsError((PyObject *) self, "getParent", arg);
              return NULL;
            }

            static PyObject *t_DirectoryTaxonomyWriter_getSize(t_DirectoryTaxonomyWriter *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getSize());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_DirectoryTaxonomyWriter_getTaxonomyEpoch(t_DirectoryTaxonomyWriter *self)
            {
              jlong result;
              OBJ_CALL(result = self->object.getTaxonomyEpoch());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            static PyObject *t_DirectoryTaxonomyWriter_prepareCommit(t_DirectoryTaxonomyWriter *self)
            {
              OBJ_CALL(self->object.prepareCommit());
              Py_RETURN_NONE;
            }

            static PyObject *t_DirectoryTaxonomyWriter_replaceTaxonomy(t_DirectoryTaxonomyWriter *self, PyObject *arg)
            {
              ::org::apache::lucene::store::Directory a0((jobject) NULL);

              if (!parseArg(arg, "k", ::org::apache::lucene::store::Directory::initializeClass, &a0))
              {
                OBJ_CALL(self->object.replaceTaxonomy(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "replaceTaxonomy", arg);
              return NULL;
            }

            static PyObject *t_DirectoryTaxonomyWriter_rollback(t_DirectoryTaxonomyWriter *self)
            {
              OBJ_CALL(self->object.rollback());
              Py_RETURN_NONE;
            }

            static PyObject *t_DirectoryTaxonomyWriter_setCacheMissesUntilFill(t_DirectoryTaxonomyWriter *self, PyObject *arg)
            {
              jint a0;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(self->object.setCacheMissesUntilFill(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setCacheMissesUntilFill", arg);
              return NULL;
            }

            static PyObject *t_DirectoryTaxonomyWriter_setCommitData(t_DirectoryTaxonomyWriter *self, PyObject *arg)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;

              if (!parseArg(arg, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
              {
                OBJ_CALL(self->object.setCommitData(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setCommitData", arg);
              return NULL;
            }

            static PyObject *t_DirectoryTaxonomyWriter_unlock(PyTypeObject *type, PyObject *arg)
            {
              ::org::apache::lucene::store::Directory a0((jobject) NULL);

              if (!parseArg(arg, "k", ::org::apache::lucene::store::Directory::initializeClass, &a0))
              {
                OBJ_CALL(::org::apache::lucene::facet::taxonomy::directory::DirectoryTaxonomyWriter::unlock(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError(type, "unlock", arg);
              return NULL;
            }

            static int t_DirectoryTaxonomyWriter_set__cacheMissesUntilFill(t_DirectoryTaxonomyWriter *self, PyObject *arg, void *data)
            {
              {
                jint value;
                if (!parseArg(arg, "I", &value))
                {
                  INT_CALL(self->object.setCacheMissesUntilFill(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "cacheMissesUntilFill", arg);
              return -1;
            }

            static PyObject *t_DirectoryTaxonomyWriter_get__commitData(t_DirectoryTaxonomyWriter *self, void *data)
            {
              ::java::util::Map value((jobject) NULL);
              OBJ_CALL(value = self->object.getCommitData());
              return ::java::util::t_Map::wrap_Object(value);
            }
            static int t_DirectoryTaxonomyWriter_set__commitData(t_DirectoryTaxonomyWriter *self, PyObject *arg, void *data)
            {
              {
                ::java::util::Map value((jobject) NULL);
                if (!parseArg(arg, "k", ::java::util::Map::initializeClass, &value))
                {
                  INT_CALL(self->object.setCommitData(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "commitData", arg);
              return -1;
            }

            static PyObject *t_DirectoryTaxonomyWriter_get__directory(t_DirectoryTaxonomyWriter *self, void *data)
            {
              ::org::apache::lucene::store::Directory value((jobject) NULL);
              OBJ_CALL(value = self->object.getDirectory());
              return ::org::apache::lucene::store::t_Directory::wrap_Object(value);
            }

            static PyObject *t_DirectoryTaxonomyWriter_get__size(t_DirectoryTaxonomyWriter *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getSize());
              return PyInt_FromLong((long) value);
            }

            static PyObject *t_DirectoryTaxonomyWriter_get__taxonomyEpoch(t_DirectoryTaxonomyWriter *self, void *data)
            {
              jlong value;
              OBJ_CALL(value = self->object.getTaxonomyEpoch());
              return PyLong_FromLongLong((PY_LONG_LONG) value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/payloads/PayloadNearQuery.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/spans/SpanQuery.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/search/payloads/PayloadFunction.h"
#include "org/apache/lucene/search/Weight.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace payloads {

          ::java::lang::Class *PayloadNearQuery::class$ = NULL;
          jmethodID *PayloadNearQuery::mids$ = NULL;
          bool PayloadNearQuery::live$ = false;

          jclass PayloadNearQuery::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/payloads/PayloadNearQuery");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4e7e9f44] = env->getMethodID(cls, "<init>", "([Lorg/apache/lucene/search/spans/SpanQuery;IZ)V");
              mids$[mid_init$_ba8911fe] = env->getMethodID(cls, "<init>", "([Lorg/apache/lucene/search/spans/SpanQuery;IZLorg/apache/lucene/search/payloads/PayloadFunction;)V");
              mids$[mid_clone_95fde422] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/search/payloads/PayloadNearQuery;");
              mids$[mid_createWeight_367763cb] = env->getMethodID(cls, "createWeight", "(Lorg/apache/lucene/search/IndexSearcher;)Lorg/apache/lucene/search/Weight;");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_toString_97a5258f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PayloadNearQuery::PayloadNearQuery(const JArray< ::org::apache::lucene::search::spans::SpanQuery > & a0, jint a1, jboolean a2) : ::org::apache::lucene::search::spans::SpanNearQuery(env->newObject(initializeClass, &mids$, mid_init$_4e7e9f44, a0.this$, a1, a2)) {}

          PayloadNearQuery::PayloadNearQuery(const JArray< ::org::apache::lucene::search::spans::SpanQuery > & a0, jint a1, jboolean a2, const ::org::apache::lucene::search::payloads::PayloadFunction & a3) : ::org::apache::lucene::search::spans::SpanNearQuery(env->newObject(initializeClass, &mids$, mid_init$_ba8911fe, a0.this$, a1, a2, a3.this$)) {}

          PayloadNearQuery PayloadNearQuery::clone() const
          {
            return PayloadNearQuery(env->callObjectMethod(this$, mids$[mid_clone_95fde422]));
          }

          ::org::apache::lucene::search::Weight PayloadNearQuery::createWeight(const ::org::apache::lucene::search::IndexSearcher & a0) const
          {
            return ::org::apache::lucene::search::Weight(env->callObjectMethod(this$, mids$[mid_createWeight_367763cb], a0.this$));
          }

          jboolean PayloadNearQuery::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          jint PayloadNearQuery::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          ::java::lang::String PayloadNearQuery::toString(const ::java::lang::String & a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_97a5258f], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace payloads {
          static PyObject *t_PayloadNearQuery_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PayloadNearQuery_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PayloadNearQuery_init_(t_PayloadNearQuery *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PayloadNearQuery_clone(t_PayloadNearQuery *self, PyObject *args);
          static PyObject *t_PayloadNearQuery_createWeight(t_PayloadNearQuery *self, PyObject *args);
          static PyObject *t_PayloadNearQuery_equals(t_PayloadNearQuery *self, PyObject *args);
          static PyObject *t_PayloadNearQuery_hashCode(t_PayloadNearQuery *self, PyObject *args);
          static PyObject *t_PayloadNearQuery_toString(t_PayloadNearQuery *self, PyObject *args);

          static PyMethodDef t_PayloadNearQuery__methods_[] = {
            DECLARE_METHOD(t_PayloadNearQuery, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PayloadNearQuery, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PayloadNearQuery, clone, METH_VARARGS),
            DECLARE_METHOD(t_PayloadNearQuery, createWeight, METH_VARARGS),
            DECLARE_METHOD(t_PayloadNearQuery, equals, METH_VARARGS),
            DECLARE_METHOD(t_PayloadNearQuery, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_PayloadNearQuery, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PayloadNearQuery, t_PayloadNearQuery, ::org::apache::lucene::search::spans::SpanNearQuery, PayloadNearQuery, t_PayloadNearQuery_init_, 0, 0, 0, 0, 0);

          void t_PayloadNearQuery::install(PyObject *module)
          {
            installType(&PY_TYPE(PayloadNearQuery), module, "PayloadNearQuery", 0);
          }

          void t_PayloadNearQuery::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PayloadNearQuery).tp_dict, "class_", make_descriptor(PayloadNearQuery::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PayloadNearQuery).tp_dict, "wrapfn_", make_descriptor(t_PayloadNearQuery::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PayloadNearQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PayloadNearQuery_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PayloadNearQuery::initializeClass, 1)))
              return NULL;
            return t_PayloadNearQuery::wrap_Object(PayloadNearQuery(((t_PayloadNearQuery *) arg)->object.this$));
          }
          static PyObject *t_PayloadNearQuery_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PayloadNearQuery::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PayloadNearQuery_init_(t_PayloadNearQuery *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 3:
              {
                JArray< ::org::apache::lucene::search::spans::SpanQuery > a0((jobject) NULL);
                jint a1;
                jboolean a2;
                PayloadNearQuery object((jobject) NULL);

                if (!parseArgs(args, "[kIZ", ::org::apache::lucene::search::spans::SpanQuery::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = PayloadNearQuery(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 4:
              {
                JArray< ::org::apache::lucene::search::spans::SpanQuery > a0((jobject) NULL);
                jint a1;
                jboolean a2;
                ::org::apache::lucene::search::payloads::PayloadFunction a3((jobject) NULL);
                PayloadNearQuery object((jobject) NULL);

                if (!parseArgs(args, "[kIZk", ::org::apache::lucene::search::spans::SpanQuery::initializeClass, ::org::apache::lucene::search::payloads::PayloadFunction::initializeClass, &a0, &a1, &a2, &a3))
                {
                  INT_CALL(object = PayloadNearQuery(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PayloadNearQuery_clone(t_PayloadNearQuery *self, PyObject *args)
          {
            PayloadNearQuery result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.clone());
              return t_PayloadNearQuery::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(PayloadNearQuery), (PyObject *) self, "clone", args, 2);
          }

          static PyObject *t_PayloadNearQuery_createWeight(t_PayloadNearQuery *self, PyObject *args)
          {
            ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
            ::org::apache::lucene::search::Weight result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.createWeight(a0));
              return ::org::apache::lucene::search::t_Weight::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(PayloadNearQuery), (PyObject *) self, "createWeight", args, 2);
          }

          static PyObject *t_PayloadNearQuery_equals(t_PayloadNearQuery *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(PayloadNearQuery), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_PayloadNearQuery_hashCode(t_PayloadNearQuery *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(PayloadNearQuery), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_PayloadNearQuery_toString(t_PayloadNearQuery *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = self->object.toString(a0));
              return j2p(result);
            }

            return callSuper(&PY_TYPE(PayloadNearQuery), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/FieldQueryNode.h"
#include "java/lang/Class.h"
#include "java/lang/CharSequence.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/TextableQueryNode.h"
#include "org/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax.h"
#include "java/lang/CloneNotSupportedException.h"
#include "java/lang/String.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/FieldValuePairQueryNode.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {

              ::java::lang::Class *FieldQueryNode::class$ = NULL;
              jmethodID *FieldQueryNode::mids$ = NULL;
              bool FieldQueryNode::live$ = false;

              jclass FieldQueryNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/nodes/FieldQueryNode");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_ddd81d4e] = env->getMethodID(cls, "<init>", "(Ljava/lang/CharSequence;Ljava/lang/CharSequence;II)V");
                  mids$[mid_cloneTree_010ca031] = env->getMethodID(cls, "cloneTree", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/FieldQueryNode;");
                  mids$[mid_getBegin_54c6a179] = env->getMethodID(cls, "getBegin", "()I");
                  mids$[mid_getEnd_54c6a179] = env->getMethodID(cls, "getEnd", "()I");
                  mids$[mid_getField_e0adba2f] = env->getMethodID(cls, "getField", "()Ljava/lang/CharSequence;");
                  mids$[mid_getFieldAsString_14c7b5c5] = env->getMethodID(cls, "getFieldAsString", "()Ljava/lang/String;");
                  mids$[mid_getPositionIncrement_54c6a179] = env->getMethodID(cls, "getPositionIncrement", "()I");
                  mids$[mid_getText_e0adba2f] = env->getMethodID(cls, "getText", "()Ljava/lang/CharSequence;");
                  mids$[mid_getTextAsString_14c7b5c5] = env->getMethodID(cls, "getTextAsString", "()Ljava/lang/String;");
                  mids$[mid_getValue_e0adba2f] = env->getMethodID(cls, "getValue", "()Ljava/lang/CharSequence;");
                  mids$[mid_setBegin_39c7bd3c] = env->getMethodID(cls, "setBegin", "(I)V");
                  mids$[mid_setEnd_39c7bd3c] = env->getMethodID(cls, "setEnd", "(I)V");
                  mids$[mid_setField_a8afc64a] = env->getMethodID(cls, "setField", "(Ljava/lang/CharSequence;)V");
                  mids$[mid_setPositionIncrement_39c7bd3c] = env->getMethodID(cls, "setPositionIncrement", "(I)V");
                  mids$[mid_setText_a8afc64a] = env->getMethodID(cls, "setText", "(Ljava/lang/CharSequence;)V");
                  mids$[mid_setValue_a8afc64a] = env->getMethodID(cls, "setValue", "(Ljava/lang/CharSequence;)V");
                  mids$[mid_toQueryString_99b8dfe1] = env->getMethodID(cls, "toQueryString", "(Lorg/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax;)Ljava/lang/CharSequence;");
                  mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
                  mids$[mid_getTermEscaped_99b8dfe1] = env->getMethodID(cls, "getTermEscaped", "(Lorg/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax;)Ljava/lang/CharSequence;");
                  mids$[mid_getTermEscapeQuoted_99b8dfe1] = env->getMethodID(cls, "getTermEscapeQuoted", "(Lorg/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax;)Ljava/lang/CharSequence;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              FieldQueryNode::FieldQueryNode(const ::java::lang::CharSequence & a0, const ::java::lang::CharSequence & a1, jint a2, jint a3) : ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNodeImpl(env->newObject(initializeClass, &mids$, mid_init$_ddd81d4e, a0.this$, a1.this$, a2, a3)) {}

              FieldQueryNode FieldQueryNode::cloneTree() const
              {
                return FieldQueryNode(env->callObjectMethod(this$, mids$[mid_cloneTree_010ca031]));
              }

              jint FieldQueryNode::getBegin() const
              {
                return env->callIntMethod(this$, mids$[mid_getBegin_54c6a179]);
              }

              jint FieldQueryNode::getEnd() const
              {
                return env->callIntMethod(this$, mids$[mid_getEnd_54c6a179]);
              }

              ::java::lang::CharSequence FieldQueryNode::getField() const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_getField_e0adba2f]));
              }

              ::java::lang::String FieldQueryNode::getFieldAsString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getFieldAsString_14c7b5c5]));
              }

              jint FieldQueryNode::getPositionIncrement() const
              {
                return env->callIntMethod(this$, mids$[mid_getPositionIncrement_54c6a179]);
              }

              ::java::lang::CharSequence FieldQueryNode::getText() const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_getText_e0adba2f]));
              }

              ::java::lang::String FieldQueryNode::getTextAsString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getTextAsString_14c7b5c5]));
              }

              ::java::lang::CharSequence FieldQueryNode::getValue() const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_getValue_e0adba2f]));
              }

              void FieldQueryNode::setBegin(jint a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setBegin_39c7bd3c], a0);
              }

              void FieldQueryNode::setEnd(jint a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setEnd_39c7bd3c], a0);
              }

              void FieldQueryNode::setField(const ::java::lang::CharSequence & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setField_a8afc64a], a0.this$);
              }

              void FieldQueryNode::setPositionIncrement(jint a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setPositionIncrement_39c7bd3c], a0);
              }

              void FieldQueryNode::setText(const ::java::lang::CharSequence & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setText_a8afc64a], a0.this$);
              }

              void FieldQueryNode::setValue(const ::java::lang::CharSequence & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setValue_a8afc64a], a0.this$);
              }

              ::java::lang::CharSequence FieldQueryNode::toQueryString(const ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax & a0) const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_toQueryString_99b8dfe1], a0.this$));
              }

              ::java::lang::String FieldQueryNode::toString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {
              static PyObject *t_FieldQueryNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_FieldQueryNode_instance_(PyTypeObject *type, PyObject *arg);
              static int t_FieldQueryNode_init_(t_FieldQueryNode *self, PyObject *args, PyObject *kwds);
              static PyObject *t_FieldQueryNode_cloneTree(t_FieldQueryNode *self, PyObject *args);
              static PyObject *t_FieldQueryNode_getBegin(t_FieldQueryNode *self);
              static PyObject *t_FieldQueryNode_getEnd(t_FieldQueryNode *self);
              static PyObject *t_FieldQueryNode_getField(t_FieldQueryNode *self);
              static PyObject *t_FieldQueryNode_getFieldAsString(t_FieldQueryNode *self);
              static PyObject *t_FieldQueryNode_getPositionIncrement(t_FieldQueryNode *self);
              static PyObject *t_FieldQueryNode_getText(t_FieldQueryNode *self);
              static PyObject *t_FieldQueryNode_getTextAsString(t_FieldQueryNode *self);
              static PyObject *t_FieldQueryNode_getValue(t_FieldQueryNode *self);
              static PyObject *t_FieldQueryNode_setBegin(t_FieldQueryNode *self, PyObject *arg);
              static PyObject *t_FieldQueryNode_setEnd(t_FieldQueryNode *self, PyObject *arg);
              static PyObject *t_FieldQueryNode_setField(t_FieldQueryNode *self, PyObject *arg);
              static PyObject *t_FieldQueryNode_setPositionIncrement(t_FieldQueryNode *self, PyObject *arg);
              static PyObject *t_FieldQueryNode_setText(t_FieldQueryNode *self, PyObject *arg);
              static PyObject *t_FieldQueryNode_setValue(t_FieldQueryNode *self, PyObject *arg);
              static PyObject *t_FieldQueryNode_toQueryString(t_FieldQueryNode *self, PyObject *args);
              static PyObject *t_FieldQueryNode_toString(t_FieldQueryNode *self, PyObject *args);
              static PyObject *t_FieldQueryNode_get__begin(t_FieldQueryNode *self, void *data);
              static int t_FieldQueryNode_set__begin(t_FieldQueryNode *self, PyObject *arg, void *data);
              static PyObject *t_FieldQueryNode_get__end(t_FieldQueryNode *self, void *data);
              static int t_FieldQueryNode_set__end(t_FieldQueryNode *self, PyObject *arg, void *data);
              static PyObject *t_FieldQueryNode_get__field(t_FieldQueryNode *self, void *data);
              static int t_FieldQueryNode_set__field(t_FieldQueryNode *self, PyObject *arg, void *data);
              static PyObject *t_FieldQueryNode_get__fieldAsString(t_FieldQueryNode *self, void *data);
              static PyObject *t_FieldQueryNode_get__positionIncrement(t_FieldQueryNode *self, void *data);
              static int t_FieldQueryNode_set__positionIncrement(t_FieldQueryNode *self, PyObject *arg, void *data);
              static PyObject *t_FieldQueryNode_get__text(t_FieldQueryNode *self, void *data);
              static int t_FieldQueryNode_set__text(t_FieldQueryNode *self, PyObject *arg, void *data);
              static PyObject *t_FieldQueryNode_get__textAsString(t_FieldQueryNode *self, void *data);
              static PyObject *t_FieldQueryNode_get__value(t_FieldQueryNode *self, void *data);
              static int t_FieldQueryNode_set__value(t_FieldQueryNode *self, PyObject *arg, void *data);
              static PyGetSetDef t_FieldQueryNode__fields_[] = {
                DECLARE_GETSET_FIELD(t_FieldQueryNode, begin),
                DECLARE_GETSET_FIELD(t_FieldQueryNode, end),
                DECLARE_GETSET_FIELD(t_FieldQueryNode, field),
                DECLARE_GET_FIELD(t_FieldQueryNode, fieldAsString),
                DECLARE_GETSET_FIELD(t_FieldQueryNode, positionIncrement),
                DECLARE_GETSET_FIELD(t_FieldQueryNode, text),
                DECLARE_GET_FIELD(t_FieldQueryNode, textAsString),
                DECLARE_GETSET_FIELD(t_FieldQueryNode, value),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_FieldQueryNode__methods_[] = {
                DECLARE_METHOD(t_FieldQueryNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_FieldQueryNode, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_FieldQueryNode, cloneTree, METH_VARARGS),
                DECLARE_METHOD(t_FieldQueryNode, getBegin, METH_NOARGS),
                DECLARE_METHOD(t_FieldQueryNode, getEnd, METH_NOARGS),
                DECLARE_METHOD(t_FieldQueryNode, getField, METH_NOARGS),
                DECLARE_METHOD(t_FieldQueryNode, getFieldAsString, METH_NOARGS),
                DECLARE_METHOD(t_FieldQueryNode, getPositionIncrement, METH_NOARGS),
                DECLARE_METHOD(t_FieldQueryNode, getText, METH_NOARGS),
                DECLARE_METHOD(t_FieldQueryNode, getTextAsString, METH_NOARGS),
                DECLARE_METHOD(t_FieldQueryNode, getValue, METH_NOARGS),
                DECLARE_METHOD(t_FieldQueryNode, setBegin, METH_O),
                DECLARE_METHOD(t_FieldQueryNode, setEnd, METH_O),
                DECLARE_METHOD(t_FieldQueryNode, setField, METH_O),
                DECLARE_METHOD(t_FieldQueryNode, setPositionIncrement, METH_O),
                DECLARE_METHOD(t_FieldQueryNode, setText, METH_O),
                DECLARE_METHOD(t_FieldQueryNode, setValue, METH_O),
                DECLARE_METHOD(t_FieldQueryNode, toQueryString, METH_VARARGS),
                DECLARE_METHOD(t_FieldQueryNode, toString, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(FieldQueryNode, t_FieldQueryNode, ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNodeImpl, FieldQueryNode, t_FieldQueryNode_init_, 0, 0, t_FieldQueryNode__fields_, 0, 0);

              void t_FieldQueryNode::install(PyObject *module)
              {
                installType(&PY_TYPE(FieldQueryNode), module, "FieldQueryNode", 0);
              }

              void t_FieldQueryNode::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(FieldQueryNode).tp_dict, "class_", make_descriptor(FieldQueryNode::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(FieldQueryNode).tp_dict, "wrapfn_", make_descriptor(t_FieldQueryNode::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(FieldQueryNode).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_FieldQueryNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, FieldQueryNode::initializeClass, 1)))
                  return NULL;
                return t_FieldQueryNode::wrap_Object(FieldQueryNode(((t_FieldQueryNode *) arg)->object.this$));
              }
              static PyObject *t_FieldQueryNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, FieldQueryNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_FieldQueryNode_init_(t_FieldQueryNode *self, PyObject *args, PyObject *kwds)
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                ::java::lang::CharSequence a1((jobject) NULL);
                jint a2;
                jint a3;
                FieldQueryNode object((jobject) NULL);

                if (!parseArgs(args, "OOII", &::java::lang::PY_TYPE(CharSequence), &::java::lang::PY_TYPE(CharSequence), &a0, &a1, &a2, &a3))
                {
                  INT_CALL(object = FieldQueryNode(a0, a1, a2, a3));
                  self->object = object;
                }
                else
                {
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_FieldQueryNode_cloneTree(t_FieldQueryNode *self, PyObject *args)
              {
                FieldQueryNode result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.cloneTree());
                  return t_FieldQueryNode::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(FieldQueryNode), (PyObject *) self, "cloneTree", args, 2);
              }

              static PyObject *t_FieldQueryNode_getBegin(t_FieldQueryNode *self)
              {
                jint result;
                OBJ_CALL(result = self->object.getBegin());
                return PyInt_FromLong((long) result);
              }

              static PyObject *t_FieldQueryNode_getEnd(t_FieldQueryNode *self)
              {
                jint result;
                OBJ_CALL(result = self->object.getEnd());
                return PyInt_FromLong((long) result);
              }

              static PyObject *t_FieldQueryNode_getField(t_FieldQueryNode *self)
              {
                ::java::lang::CharSequence result((jobject) NULL);
                OBJ_CALL(result = self->object.getField());
                return ::java::lang::t_CharSequence::wrap_Object(result);
              }

              static PyObject *t_FieldQueryNode_getFieldAsString(t_FieldQueryNode *self)
              {
                ::java::lang::String result((jobject) NULL);
                OBJ_CALL(result = self->object.getFieldAsString());
                return j2p(result);
              }

              static PyObject *t_FieldQueryNode_getPositionIncrement(t_FieldQueryNode *self)
              {
                jint result;
                OBJ_CALL(result = self->object.getPositionIncrement());
                return PyInt_FromLong((long) result);
              }

              static PyObject *t_FieldQueryNode_getText(t_FieldQueryNode *self)
              {
                ::java::lang::CharSequence result((jobject) NULL);
                OBJ_CALL(result = self->object.getText());
                return ::java::lang::t_CharSequence::wrap_Object(result);
              }

              static PyObject *t_FieldQueryNode_getTextAsString(t_FieldQueryNode *self)
              {
                ::java::lang::String result((jobject) NULL);
                OBJ_CALL(result = self->object.getTextAsString());
                return j2p(result);
              }

              static PyObject *t_FieldQueryNode_getValue(t_FieldQueryNode *self)
              {
                ::java::lang::CharSequence result((jobject) NULL);
                OBJ_CALL(result = self->object.getValue());
                return ::java::lang::t_CharSequence::wrap_Object(result);
              }

              static PyObject *t_FieldQueryNode_setBegin(t_FieldQueryNode *self, PyObject *arg)
              {
                jint a0;

                if (!parseArg(arg, "I", &a0))
                {
                  OBJ_CALL(self->object.setBegin(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setBegin", arg);
                return NULL;
              }

              static PyObject *t_FieldQueryNode_setEnd(t_FieldQueryNode *self, PyObject *arg)
              {
                jint a0;

                if (!parseArg(arg, "I", &a0))
                {
                  OBJ_CALL(self->object.setEnd(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setEnd", arg);
                return NULL;
              }

              static PyObject *t_FieldQueryNode_setField(t_FieldQueryNode *self, PyObject *arg)
              {
                ::java::lang::CharSequence a0((jobject) NULL);

                if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
                {
                  OBJ_CALL(self->object.setField(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setField", arg);
                return NULL;
              }

              static PyObject *t_FieldQueryNode_setPositionIncrement(t_FieldQueryNode *self, PyObject *arg)
              {
                jint a0;

                if (!parseArg(arg, "I", &a0))
                {
                  OBJ_CALL(self->object.setPositionIncrement(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setPositionIncrement", arg);
                return NULL;
              }

              static PyObject *t_FieldQueryNode_setText(t_FieldQueryNode *self, PyObject *arg)
              {
                ::java::lang::CharSequence a0((jobject) NULL);

                if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
                {
                  OBJ_CALL(self->object.setText(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setText", arg);
                return NULL;
              }

              static PyObject *t_FieldQueryNode_setValue(t_FieldQueryNode *self, PyObject *arg)
              {
                ::java::lang::CharSequence a0((jobject) NULL);

                if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
                {
                  OBJ_CALL(self->object.setValue(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setValue", arg);
                return NULL;
              }

              static PyObject *t_FieldQueryNode_toQueryString(t_FieldQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax a0((jobject) NULL);
                ::java::lang::CharSequence result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.toQueryString(a0));
                  return ::java::lang::t_CharSequence::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(FieldQueryNode), (PyObject *) self, "toQueryString", args, 2);
              }

              static PyObject *t_FieldQueryNode_toString(t_FieldQueryNode *self, PyObject *args)
              {
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.toString());
                  return j2p(result);
                }

                return callSuper(&PY_TYPE(FieldQueryNode), (PyObject *) self, "toString", args, 2);
              }

              static PyObject *t_FieldQueryNode_get__begin(t_FieldQueryNode *self, void *data)
              {
                jint value;
                OBJ_CALL(value = self->object.getBegin());
                return PyInt_FromLong((long) value);
              }
              static int t_FieldQueryNode_set__begin(t_FieldQueryNode *self, PyObject *arg, void *data)
              {
                {
                  jint value;
                  if (!parseArg(arg, "I", &value))
                  {
                    INT_CALL(self->object.setBegin(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "begin", arg);
                return -1;
              }

              static PyObject *t_FieldQueryNode_get__end(t_FieldQueryNode *self, void *data)
              {
                jint value;
                OBJ_CALL(value = self->object.getEnd());
                return PyInt_FromLong((long) value);
              }
              static int t_FieldQueryNode_set__end(t_FieldQueryNode *self, PyObject *arg, void *data)
              {
                {
                  jint value;
                  if (!parseArg(arg, "I", &value))
                  {
                    INT_CALL(self->object.setEnd(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "end", arg);
                return -1;
              }

              static PyObject *t_FieldQueryNode_get__field(t_FieldQueryNode *self, void *data)
              {
                ::java::lang::CharSequence value((jobject) NULL);
                OBJ_CALL(value = self->object.getField());
                return ::java::lang::t_CharSequence::wrap_Object(value);
              }
              static int t_FieldQueryNode_set__field(t_FieldQueryNode *self, PyObject *arg, void *data)
              {
                {
                  ::java::lang::CharSequence value((jobject) NULL);
                  if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &value))
                  {
                    INT_CALL(self->object.setField(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "field", arg);
                return -1;
              }

              static PyObject *t_FieldQueryNode_get__fieldAsString(t_FieldQueryNode *self, void *data)
              {
                ::java::lang::String value((jobject) NULL);
                OBJ_CALL(value = self->object.getFieldAsString());
                return j2p(value);
              }

              static PyObject *t_FieldQueryNode_get__positionIncrement(t_FieldQueryNode *self, void *data)
              {
                jint value;
                OBJ_CALL(value = self->object.getPositionIncrement());
                return PyInt_FromLong((long) value);
              }
              static int t_FieldQueryNode_set__positionIncrement(t_FieldQueryNode *self, PyObject *arg, void *data)
              {
                {
                  jint value;
                  if (!parseArg(arg, "I", &value))
                  {
                    INT_CALL(self->object.setPositionIncrement(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "positionIncrement", arg);
                return -1;
              }

              static PyObject *t_FieldQueryNode_get__text(t_FieldQueryNode *self, void *data)
              {
                ::java::lang::CharSequence value((jobject) NULL);
                OBJ_CALL(value = self->object.getText());
                return ::java::lang::t_CharSequence::wrap_Object(value);
              }
              static int t_FieldQueryNode_set__text(t_FieldQueryNode *self, PyObject *arg, void *data)
              {
                {
                  ::java::lang::CharSequence value((jobject) NULL);
                  if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &value))
                  {
                    INT_CALL(self->object.setText(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "text", arg);
                return -1;
              }

              static PyObject *t_FieldQueryNode_get__textAsString(t_FieldQueryNode *self, void *data)
              {
                ::java::lang::String value((jobject) NULL);
                OBJ_CALL(value = self->object.getTextAsString());
                return j2p(value);
              }

              static PyObject *t_FieldQueryNode_get__value(t_FieldQueryNode *self, void *data)
              {
                ::java::lang::CharSequence value((jobject) NULL);
                OBJ_CALL(value = self->object.getValue());
                return ::java::lang::t_CharSequence::wrap_Object(value);
              }
              static int t_FieldQueryNode_set__value(t_FieldQueryNode *self, PyObject *arg, void *data)
              {
                {
                  ::java::lang::CharSequence value((jobject) NULL);
                  if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &value))
                  {
                    INT_CALL(self->object.setValue(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "value", arg);
                return -1;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/MutableBits.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *MutableBits::class$ = NULL;
        jmethodID *MutableBits::mids$ = NULL;
        bool MutableBits::live$ = false;

        jclass MutableBits::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/MutableBits");

            mids$ = new jmethodID[max_mid];
            mids$[mid_clear_39c7bd3c] = env->getMethodID(cls, "clear", "(I)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void MutableBits::clear(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_clear_39c7bd3c], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_MutableBits_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MutableBits_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MutableBits_clear(t_MutableBits *self, PyObject *arg);

        static PyMethodDef t_MutableBits__methods_[] = {
          DECLARE_METHOD(t_MutableBits, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MutableBits, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MutableBits, clear, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MutableBits, t_MutableBits, ::org::apache::lucene::util::Bits, MutableBits, abstract_init, 0, 0, 0, 0, 0);

        void t_MutableBits::install(PyObject *module)
        {
          installType(&PY_TYPE(MutableBits), module, "MutableBits", 0);
        }

        void t_MutableBits::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MutableBits).tp_dict, "class_", make_descriptor(MutableBits::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MutableBits).tp_dict, "wrapfn_", make_descriptor(t_MutableBits::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MutableBits).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MutableBits_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MutableBits::initializeClass, 1)))
            return NULL;
          return t_MutableBits::wrap_Object(MutableBits(((t_MutableBits *) arg)->object.this$));
        }
        static PyObject *t_MutableBits_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MutableBits::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_MutableBits_clear(t_MutableBits *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.clear(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "clear", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/compound/hyphenation/CharVector.h"
#include "java/lang/Cloneable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace compound {
          namespace hyphenation {

            ::java::lang::Class *CharVector::class$ = NULL;
            jmethodID *CharVector::mids$ = NULL;
            bool CharVector::live$ = false;

            jclass CharVector::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/compound/hyphenation/CharVector");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_init$_700e23d6] = env->getMethodID(cls, "<init>", "([C)V");
                mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
                mids$[mid_init$_ec6430f4] = env->getMethodID(cls, "<init>", "([CI)V");
                mids$[mid_alloc_39c7bd23] = env->getMethodID(cls, "alloc", "(I)I");
                mids$[mid_capacity_54c6a179] = env->getMethodID(cls, "capacity", "()I");
                mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
                mids$[mid_clone_023cce63] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/analysis/compound/hyphenation/CharVector;");
                mids$[mid_get_39c7bd29] = env->getMethodID(cls, "get", "(I)C");
                mids$[mid_getArray_dab10e7f] = env->getMethodID(cls, "getArray", "()[C");
                mids$[mid_length_54c6a179] = env->getMethodID(cls, "length", "()I");
                mids$[mid_put_83eec158] = env->getMethodID(cls, "put", "(IC)V");
                mids$[mid_trimToSize_54c6a166] = env->getMethodID(cls, "trimToSize", "()V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            CharVector::CharVector() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

            CharVector::CharVector(const JArray< jchar > & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_700e23d6, a0.this$)) {}

            CharVector::CharVector(jint a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

            CharVector::CharVector(const JArray< jchar > & a0, jint a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_ec6430f4, a0.this$, a1)) {}

            jint CharVector::alloc(jint a0) const
            {
              return env->callIntMethod(this$, mids$[mid_alloc_39c7bd23], a0);
            }

            jint CharVector::capacity() const
            {
              return env->callIntMethod(this$, mids$[mid_capacity_54c6a179]);
            }

            void CharVector::clear() const
            {
              env->callVoidMethod(this$, mids$[mid_clear_54c6a166]);
            }

            CharVector CharVector::clone() const
            {
              return CharVector(env->callObjectMethod(this$, mids$[mid_clone_023cce63]));
            }

            jchar CharVector::get(jint a0) const
            {
              return env->callCharMethod(this$, mids$[mid_get_39c7bd29], a0);
            }

            JArray< jchar > CharVector::getArray() const
            {
              return JArray< jchar >(env->callObjectMethod(this$, mids$[mid_getArray_dab10e7f]));
            }

            jint CharVector::length() const
            {
              return env->callIntMethod(this$, mids$[mid_length_54c6a179]);
            }

            void CharVector::put(jint a0, jchar a1) const
            {
              env->callVoidMethod(this$, mids$[mid_put_83eec158], a0, a1);
            }

            void CharVector::trimToSize() const
            {
              env->callVoidMethod(this$, mids$[mid_trimToSize_54c6a166]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace compound {
          namespace hyphenation {
            static PyObject *t_CharVector_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_CharVector_instance_(PyTypeObject *type, PyObject *arg);
            static int t_CharVector_init_(t_CharVector *self, PyObject *args, PyObject *kwds);
            static PyObject *t_CharVector_alloc(t_CharVector *self, PyObject *arg);
            static PyObject *t_CharVector_capacity(t_CharVector *self);
            static PyObject *t_CharVector_clear(t_CharVector *self);
            static PyObject *t_CharVector_clone(t_CharVector *self);
            static PyObject *t_CharVector_get(t_CharVector *self, PyObject *arg);
            static PyObject *t_CharVector_getArray(t_CharVector *self);
            static PyObject *t_CharVector_length(t_CharVector *self);
            static PyObject *t_CharVector_put(t_CharVector *self, PyObject *args);
            static PyObject *t_CharVector_trimToSize(t_CharVector *self);
            static PyObject *t_CharVector_get__array(t_CharVector *self, void *data);
            static PyGetSetDef t_CharVector__fields_[] = {
              DECLARE_GET_FIELD(t_CharVector, array),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_CharVector__methods_[] = {
              DECLARE_METHOD(t_CharVector, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_CharVector, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_CharVector, alloc, METH_O),
              DECLARE_METHOD(t_CharVector, capacity, METH_NOARGS),
              DECLARE_METHOD(t_CharVector, clear, METH_NOARGS),
              DECLARE_METHOD(t_CharVector, clone, METH_NOARGS),
              DECLARE_METHOD(t_CharVector, get, METH_O),
              DECLARE_METHOD(t_CharVector, getArray, METH_NOARGS),
              DECLARE_METHOD(t_CharVector, length, METH_NOARGS),
              DECLARE_METHOD(t_CharVector, put, METH_VARARGS),
              DECLARE_METHOD(t_CharVector, trimToSize, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(CharVector, t_CharVector, ::java::lang::Object, CharVector, t_CharVector_init_, 0, 0, t_CharVector__fields_, 0, 0);

            void t_CharVector::install(PyObject *module)
            {
              installType(&PY_TYPE(CharVector), module, "CharVector", 0);
            }

            void t_CharVector::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(CharVector).tp_dict, "class_", make_descriptor(CharVector::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(CharVector).tp_dict, "wrapfn_", make_descriptor(t_CharVector::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(CharVector).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_CharVector_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, CharVector::initializeClass, 1)))
                return NULL;
              return t_CharVector::wrap_Object(CharVector(((t_CharVector *) arg)->object.this$));
            }
            static PyObject *t_CharVector_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, CharVector::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_CharVector_init_(t_CharVector *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 0:
                {
                  CharVector object((jobject) NULL);

                  INT_CALL(object = CharVector());
                  self->object = object;
                  break;
                }
                goto err;
               case 1:
                {
                  JArray< jchar > a0((jobject) NULL);
                  CharVector object((jobject) NULL);

                  if (!parseArgs(args, "[C", &a0))
                  {
                    INT_CALL(object = CharVector(a0));
                    self->object = object;
                    break;
                  }
                }
                {
                  jint a0;
                  CharVector object((jobject) NULL);

                  if (!parseArgs(args, "I", &a0))
                  {
                    INT_CALL(object = CharVector(a0));
                    self->object = object;
                    break;
                  }
                }
                goto err;
               case 2:
                {
                  JArray< jchar > a0((jobject) NULL);
                  jint a1;
                  CharVector object((jobject) NULL);

                  if (!parseArgs(args, "[CI", &a0, &a1))
                  {
                    INT_CALL(object = CharVector(a0, a1));
                    self->object = object;
                    break;
                  }
                }
               default:
               err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_CharVector_alloc(t_CharVector *self, PyObject *arg)
            {
              jint a0;
              jint result;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(result = self->object.alloc(a0));
                return PyInt_FromLong((long) result);
              }

              PyErr_SetArgsError((PyObject *) self, "alloc", arg);
              return NULL;
            }

            static PyObject *t_CharVector_capacity(t_CharVector *self)
            {
              jint result;
              OBJ_CALL(result = self->object.capacity());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_CharVector_clear(t_CharVector *self)
            {
              OBJ_CALL(self->object.clear());
              Py_RETURN_NONE;
            }

            static PyObject *t_CharVector_clone(t_CharVector *self)
            {
              CharVector result((jobject) NULL);
              OBJ_CALL(result = self->object.clone());
              return t_CharVector::wrap_Object(result);
            }

            static PyObject *t_CharVector_get(t_CharVector *self, PyObject *arg)
            {
              jint a0;
              jchar result;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(result = self->object.get(a0));
                return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
              }

              PyErr_SetArgsError((PyObject *) self, "get", arg);
              return NULL;
            }

            static PyObject *t_CharVector_getArray(t_CharVector *self)
            {
              JArray< jchar > result((jobject) NULL);
              OBJ_CALL(result = self->object.getArray());
              return result.wrap();
            }

            static PyObject *t_CharVector_length(t_CharVector *self)
            {
              jint result;
              OBJ_CALL(result = self->object.length());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_CharVector_put(t_CharVector *self, PyObject *args)
            {
              jint a0;
              jchar a1;

              if (!parseArgs(args, "IC", &a0, &a1))
              {
                OBJ_CALL(self->object.put(a0, a1));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "put", args);
              return NULL;
            }

            static PyObject *t_CharVector_trimToSize(t_CharVector *self)
            {
              OBJ_CALL(self->object.trimToSize());
              Py_RETURN_NONE;
            }

            static PyObject *t_CharVector_get__array(t_CharVector *self, void *data)
            {
              JArray< jchar > value((jobject) NULL);
              OBJ_CALL(value = self->object.getArray());
              return value.wrap();
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ngram/Lucene43NGramTokenFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ngram {

          ::java::lang::Class *Lucene43NGramTokenFilter::class$ = NULL;
          jmethodID *Lucene43NGramTokenFilter::mids$ = NULL;
          bool Lucene43NGramTokenFilter::live$ = false;
          jint Lucene43NGramTokenFilter::DEFAULT_MAX_NGRAM_SIZE = (jint) 0;
          jint Lucene43NGramTokenFilter::DEFAULT_MIN_NGRAM_SIZE = (jint) 0;

          jclass Lucene43NGramTokenFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ngram/Lucene43NGramTokenFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_init$_7f9e10a8] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;II)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_MAX_NGRAM_SIZE = env->getStaticIntField(cls, "DEFAULT_MAX_NGRAM_SIZE");
              DEFAULT_MIN_NGRAM_SIZE = env->getStaticIntField(cls, "DEFAULT_MIN_NGRAM_SIZE");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene43NGramTokenFilter::Lucene43NGramTokenFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          Lucene43NGramTokenFilter::Lucene43NGramTokenFilter(const ::org::apache::lucene::analysis::TokenStream & a0, jint a1, jint a2) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_7f9e10a8, a0.this$, a1, a2)) {}

          jboolean Lucene43NGramTokenFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void Lucene43NGramTokenFilter::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ngram {
          static PyObject *t_Lucene43NGramTokenFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene43NGramTokenFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene43NGramTokenFilter_init_(t_Lucene43NGramTokenFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene43NGramTokenFilter_incrementToken(t_Lucene43NGramTokenFilter *self, PyObject *args);
          static PyObject *t_Lucene43NGramTokenFilter_reset(t_Lucene43NGramTokenFilter *self, PyObject *args);

          static PyMethodDef t_Lucene43NGramTokenFilter__methods_[] = {
            DECLARE_METHOD(t_Lucene43NGramTokenFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene43NGramTokenFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene43NGramTokenFilter, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_Lucene43NGramTokenFilter, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene43NGramTokenFilter, t_Lucene43NGramTokenFilter, ::org::apache::lucene::analysis::TokenFilter, Lucene43NGramTokenFilter, t_Lucene43NGramTokenFilter_init_, 0, 0, 0, 0, 0);

          void t_Lucene43NGramTokenFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene43NGramTokenFilter), module, "Lucene43NGramTokenFilter", 0);
          }

          void t_Lucene43NGramTokenFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene43NGramTokenFilter).tp_dict, "class_", make_descriptor(Lucene43NGramTokenFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene43NGramTokenFilter).tp_dict, "wrapfn_", make_descriptor(t_Lucene43NGramTokenFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene43NGramTokenFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(Lucene43NGramTokenFilter::initializeClass);
            PyDict_SetItemString(PY_TYPE(Lucene43NGramTokenFilter).tp_dict, "DEFAULT_MAX_NGRAM_SIZE", make_descriptor(Lucene43NGramTokenFilter::DEFAULT_MAX_NGRAM_SIZE));
            PyDict_SetItemString(PY_TYPE(Lucene43NGramTokenFilter).tp_dict, "DEFAULT_MIN_NGRAM_SIZE", make_descriptor(Lucene43NGramTokenFilter::DEFAULT_MIN_NGRAM_SIZE));
          }

          static PyObject *t_Lucene43NGramTokenFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene43NGramTokenFilter::initializeClass, 1)))
              return NULL;
            return t_Lucene43NGramTokenFilter::wrap_Object(Lucene43NGramTokenFilter(((t_Lucene43NGramTokenFilter *) arg)->object.this$));
          }
          static PyObject *t_Lucene43NGramTokenFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene43NGramTokenFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene43NGramTokenFilter_init_(t_Lucene43NGramTokenFilter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                Lucene43NGramTokenFilter object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
                {
                  INT_CALL(object = Lucene43NGramTokenFilter(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                jint a1;
                jint a2;
                Lucene43NGramTokenFilter object((jobject) NULL);

                if (!parseArgs(args, "kII", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = Lucene43NGramTokenFilter(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_Lucene43NGramTokenFilter_incrementToken(t_Lucene43NGramTokenFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(Lucene43NGramTokenFilter), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_Lucene43NGramTokenFilter_reset(t_Lucene43NGramTokenFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene43NGramTokenFilter), (PyObject *) self, "reset", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/TrackingIndexWriter.h"
#include "java/lang/Class.h"
#include "java/lang/Iterable.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/IndexWriter.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/index/Term.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "org/apache/lucene/index/IndexableField.h"
#include "org/apache/lucene/search/Query.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *TrackingIndexWriter::class$ = NULL;
        jmethodID *TrackingIndexWriter::mids$ = NULL;
        bool TrackingIndexWriter::live$ = false;

        jclass TrackingIndexWriter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/TrackingIndexWriter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_4f2fb7d5] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/IndexWriter;)V");
            mids$[mid_addDocument_d1cac219] = env->getMethodID(cls, "addDocument", "(Ljava/lang/Iterable;)J");
            mids$[mid_addDocument_f74a1d49] = env->getMethodID(cls, "addDocument", "(Ljava/lang/Iterable;Lorg/apache/lucene/analysis/Analyzer;)J");
            mids$[mid_addDocuments_d1cac219] = env->getMethodID(cls, "addDocuments", "(Ljava/lang/Iterable;)J");
            mids$[mid_addDocuments_f74a1d49] = env->getMethodID(cls, "addDocuments", "(Ljava/lang/Iterable;Lorg/apache/lucene/analysis/Analyzer;)J");
            mids$[mid_addIndexes_a20f8ef5] = env->getMethodID(cls, "addIndexes", "([Lorg/apache/lucene/index/IndexReader;)J");
            mids$[mid_addIndexes_160e609a] = env->getMethodID(cls, "addIndexes", "([Lorg/apache/lucene/store/Directory;)J");
            mids$[mid_deleteAll_54c6a17a] = env->getMethodID(cls, "deleteAll", "()J");
            mids$[mid_deleteDocuments_7eca6a9d] = env->getMethodID(cls, "deleteDocuments", "(Lorg/apache/lucene/index/Term;)J");
            mids$[mid_deleteDocuments_c9f85e1d] = env->getMethodID(cls, "deleteDocuments", "([Lorg/apache/lucene/index/Term;)J");
            mids$[mid_deleteDocuments_937b34cf] = env->getMethodID(cls, "deleteDocuments", "([Lorg/apache/lucene/search/Query;)J");
            mids$[mid_deleteDocuments_6e30110f] = env->getMethodID(cls, "deleteDocuments", "(Lorg/apache/lucene/search/Query;)J");
            mids$[mid_getAndIncrementGeneration_54c6a17a] = env->getMethodID(cls, "getAndIncrementGeneration", "()J");
            mids$[mid_getGeneration_54c6a17a] = env->getMethodID(cls, "getGeneration", "()J");
            mids$[mid_getIndexWriter_bbe46a60] = env->getMethodID(cls, "getIndexWriter", "()Lorg/apache/lucene/index/IndexWriter;");
            mids$[mid_tryDeleteDocument_1e4306f9] = env->getMethodID(cls, "tryDeleteDocument", "(Lorg/apache/lucene/index/IndexReader;I)J");
            mids$[mid_updateDocument_b5aef5fe] = env->getMethodID(cls, "updateDocument", "(Lorg/apache/lucene/index/Term;Ljava/lang/Iterable;)J");
            mids$[mid_updateDocument_4d995da4] = env->getMethodID(cls, "updateDocument", "(Lorg/apache/lucene/index/Term;Ljava/lang/Iterable;Lorg/apache/lucene/analysis/Analyzer;)J");
            mids$[mid_updateDocuments_b5aef5fe] = env->getMethodID(cls, "updateDocuments", "(Lorg/apache/lucene/index/Term;Ljava/lang/Iterable;)J");
            mids$[mid_updateDocuments_4d995da4] = env->getMethodID(cls, "updateDocuments", "(Lorg/apache/lucene/index/Term;Ljava/lang/Iterable;Lorg/apache/lucene/analysis/Analyzer;)J");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        TrackingIndexWriter::TrackingIndexWriter(const ::org::apache::lucene::index::IndexWriter & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_4f2fb7d5, a0.this$)) {}

        jlong TrackingIndexWriter::addDocument(const ::java::lang::Iterable & a0) const
        {
          return env->callLongMethod(this$, mids$[mid_addDocument_d1cac219], a0.this$);
        }

        jlong TrackingIndexWriter::addDocument(const ::java::lang::Iterable & a0, const ::org::apache::lucene::analysis::Analyzer & a1) const
        {
          return env->callLongMethod(this$, mids$[mid_addDocument_f74a1d49], a0.this$, a1.this$);
        }

        jlong TrackingIndexWriter::addDocuments(const ::java::lang::Iterable & a0) const
        {
          return env->callLongMethod(this$, mids$[mid_addDocuments_d1cac219], a0.this$);
        }

        jlong TrackingIndexWriter::addDocuments(const ::java::lang::Iterable & a0, const ::org::apache::lucene::analysis::Analyzer & a1) const
        {
          return env->callLongMethod(this$, mids$[mid_addDocuments_f74a1d49], a0.this$, a1.this$);
        }

        jlong TrackingIndexWriter::addIndexes(const JArray< ::org::apache::lucene::index::IndexReader > & a0) const
        {
          return env->callLongMethod(this$, mids$[mid_addIndexes_a20f8ef5], a0.this$);
        }

        jlong TrackingIndexWriter::addIndexes(const JArray< ::org::apache::lucene::store::Directory > & a0) const
        {
          return env->callLongMethod(this$, mids$[mid_addIndexes_160e609a], a0.this$);
        }

        jlong TrackingIndexWriter::deleteAll() const
        {
          return env->callLongMethod(this$, mids$[mid_deleteAll_54c6a17a]);
        }

        jlong TrackingIndexWriter::deleteDocuments(const ::org::apache::lucene::index::Term & a0) const
        {
          return env->callLongMethod(this$, mids$[mid_deleteDocuments_7eca6a9d], a0.this$);
        }

        jlong TrackingIndexWriter::deleteDocuments(const JArray< ::org::apache::lucene::index::Term > & a0) const
        {
          return env->callLongMethod(this$, mids$[mid_deleteDocuments_c9f85e1d], a0.this$);
        }

        jlong TrackingIndexWriter::deleteDocuments(const JArray< ::org::apache::lucene::search::Query > & a0) const
        {
          return env->callLongMethod(this$, mids$[mid_deleteDocuments_937b34cf], a0.this$);
        }

        jlong TrackingIndexWriter::deleteDocuments(const ::org::apache::lucene::search::Query & a0) const
        {
          return env->callLongMethod(this$, mids$[mid_deleteDocuments_6e30110f], a0.this$);
        }

        jlong TrackingIndexWriter::getAndIncrementGeneration() const
        {
          return env->callLongMethod(this$, mids$[mid_getAndIncrementGeneration_54c6a17a]);
        }

        jlong TrackingIndexWriter::getGeneration() const
        {
          return env->callLongMethod(this$, mids$[mid_getGeneration_54c6a17a]);
        }

        ::org::apache::lucene::index::IndexWriter TrackingIndexWriter::getIndexWriter() const
        {
          return ::org::apache::lucene::index::IndexWriter(env->callObjectMethod(this$, mids$[mid_getIndexWriter_bbe46a60]));
        }

        jlong TrackingIndexWriter::tryDeleteDocument(const ::org::apache::lucene::index::IndexReader & a0, jint a1) const
        {
          return env->callLongMethod(this$, mids$[mid_tryDeleteDocument_1e4306f9], a0.this$, a1);
        }

        jlong TrackingIndexWriter::updateDocument(const ::org::apache::lucene::index::Term & a0, const ::java::lang::Iterable & a1) const
        {
          return env->callLongMethod(this$, mids$[mid_updateDocument_b5aef5fe], a0.this$, a1.this$);
        }

        jlong TrackingIndexWriter::updateDocument(const ::org::apache::lucene::index::Term & a0, const ::java::lang::Iterable & a1, const ::org::apache::lucene::analysis::Analyzer & a2) const
        {
          return env->callLongMethod(this$, mids$[mid_updateDocument_4d995da4], a0.this$, a1.this$, a2.this$);
        }

        jlong TrackingIndexWriter::updateDocuments(const ::org::apache::lucene::index::Term & a0, const ::java::lang::Iterable & a1) const
        {
          return env->callLongMethod(this$, mids$[mid_updateDocuments_b5aef5fe], a0.this$, a1.this$);
        }

        jlong TrackingIndexWriter::updateDocuments(const ::org::apache::lucene::index::Term & a0, const ::java::lang::Iterable & a1, const ::org::apache::lucene::analysis::Analyzer & a2) const
        {
          return env->callLongMethod(this$, mids$[mid_updateDocuments_4d995da4], a0.this$, a1.this$, a2.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_TrackingIndexWriter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TrackingIndexWriter_instance_(PyTypeObject *type, PyObject *arg);
        static int t_TrackingIndexWriter_init_(t_TrackingIndexWriter *self, PyObject *args, PyObject *kwds);
        static PyObject *t_TrackingIndexWriter_addDocument(t_TrackingIndexWriter *self, PyObject *args);
        static PyObject *t_TrackingIndexWriter_addDocuments(t_TrackingIndexWriter *self, PyObject *args);
        static PyObject *t_TrackingIndexWriter_addIndexes(t_TrackingIndexWriter *self, PyObject *args);
        static PyObject *t_TrackingIndexWriter_deleteAll(t_TrackingIndexWriter *self);
        static PyObject *t_TrackingIndexWriter_deleteDocuments(t_TrackingIndexWriter *self, PyObject *args);
        static PyObject *t_TrackingIndexWriter_getAndIncrementGeneration(t_TrackingIndexWriter *self);
        static PyObject *t_TrackingIndexWriter_getGeneration(t_TrackingIndexWriter *self);
        static PyObject *t_TrackingIndexWriter_getIndexWriter(t_TrackingIndexWriter *self);
        static PyObject *t_TrackingIndexWriter_tryDeleteDocument(t_TrackingIndexWriter *self, PyObject *args);
        static PyObject *t_TrackingIndexWriter_updateDocument(t_TrackingIndexWriter *self, PyObject *args);
        static PyObject *t_TrackingIndexWriter_updateDocuments(t_TrackingIndexWriter *self, PyObject *args);
        static PyObject *t_TrackingIndexWriter_get__andIncrementGeneration(t_TrackingIndexWriter *self, void *data);
        static PyObject *t_TrackingIndexWriter_get__generation(t_TrackingIndexWriter *self, void *data);
        static PyObject *t_TrackingIndexWriter_get__indexWriter(t_TrackingIndexWriter *self, void *data);
        static PyGetSetDef t_TrackingIndexWriter__fields_[] = {
          DECLARE_GET_FIELD(t_TrackingIndexWriter, andIncrementGeneration),
          DECLARE_GET_FIELD(t_TrackingIndexWriter, generation),
          DECLARE_GET_FIELD(t_TrackingIndexWriter, indexWriter),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_TrackingIndexWriter__methods_[] = {
          DECLARE_METHOD(t_TrackingIndexWriter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TrackingIndexWriter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TrackingIndexWriter, addDocument, METH_VARARGS),
          DECLARE_METHOD(t_TrackingIndexWriter, addDocuments, METH_VARARGS),
          DECLARE_METHOD(t_TrackingIndexWriter, addIndexes, METH_VARARGS),
          DECLARE_METHOD(t_TrackingIndexWriter, deleteAll, METH_NOARGS),
          DECLARE_METHOD(t_TrackingIndexWriter, deleteDocuments, METH_VARARGS),
          DECLARE_METHOD(t_TrackingIndexWriter, getAndIncrementGeneration, METH_NOARGS),
          DECLARE_METHOD(t_TrackingIndexWriter, getGeneration, METH_NOARGS),
          DECLARE_METHOD(t_TrackingIndexWriter, getIndexWriter, METH_NOARGS),
          DECLARE_METHOD(t_TrackingIndexWriter, tryDeleteDocument, METH_VARARGS),
          DECLARE_METHOD(t_TrackingIndexWriter, updateDocument, METH_VARARGS),
          DECLARE_METHOD(t_TrackingIndexWriter, updateDocuments, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TrackingIndexWriter, t_TrackingIndexWriter, ::java::lang::Object, TrackingIndexWriter, t_TrackingIndexWriter_init_, 0, 0, t_TrackingIndexWriter__fields_, 0, 0);

        void t_TrackingIndexWriter::install(PyObject *module)
        {
          installType(&PY_TYPE(TrackingIndexWriter), module, "TrackingIndexWriter", 0);
        }

        void t_TrackingIndexWriter::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TrackingIndexWriter).tp_dict, "class_", make_descriptor(TrackingIndexWriter::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TrackingIndexWriter).tp_dict, "wrapfn_", make_descriptor(t_TrackingIndexWriter::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TrackingIndexWriter).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TrackingIndexWriter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TrackingIndexWriter::initializeClass, 1)))
            return NULL;
          return t_TrackingIndexWriter::wrap_Object(TrackingIndexWriter(((t_TrackingIndexWriter *) arg)->object.this$));
        }
        static PyObject *t_TrackingIndexWriter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TrackingIndexWriter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_TrackingIndexWriter_init_(t_TrackingIndexWriter *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::index::IndexWriter a0((jobject) NULL);
          TrackingIndexWriter object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexWriter::initializeClass, &a0))
          {
            INT_CALL(object = TrackingIndexWriter(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_TrackingIndexWriter_addDocument(t_TrackingIndexWriter *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::lang::Iterable a0((jobject) NULL);
              PyTypeObject **p0;
              jlong result;

              if (!parseArgs(args, "K", ::java::lang::Iterable::initializeClass, &a0, &p0, ::java::lang::t_Iterable::parameters_))
              {
                OBJ_CALL(result = self->object.addDocument(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
            break;
           case 2:
            {
              ::java::lang::Iterable a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::analysis::Analyzer a1((jobject) NULL);
              jlong result;

              if (!parseArgs(args, "Kk", ::java::lang::Iterable::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &p0, ::java::lang::t_Iterable::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.addDocument(a0, a1));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "addDocument", args);
          return NULL;
        }

        static PyObject *t_TrackingIndexWriter_addDocuments(t_TrackingIndexWriter *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::lang::Iterable a0((jobject) NULL);
              PyTypeObject **p0;
              jlong result;

              if (!parseArgs(args, "K", ::java::lang::Iterable::initializeClass, &a0, &p0, ::java::lang::t_Iterable::parameters_))
              {
                OBJ_CALL(result = self->object.addDocuments(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
            break;
           case 2:
            {
              ::java::lang::Iterable a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::analysis::Analyzer a1((jobject) NULL);
              jlong result;

              if (!parseArgs(args, "Kk", ::java::lang::Iterable::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &p0, ::java::lang::t_Iterable::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.addDocuments(a0, a1));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "addDocuments", args);
          return NULL;
        }

        static PyObject *t_TrackingIndexWriter_addIndexes(t_TrackingIndexWriter *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              JArray< ::org::apache::lucene::index::IndexReader > a0((jobject) NULL);
              jlong result;

              if (!parseArgs(args, "[k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.addIndexes(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
            {
              JArray< ::org::apache::lucene::store::Directory > a0((jobject) NULL);
              jlong result;

              if (!parseArgs(args, "[k", ::org::apache::lucene::store::Directory::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.addIndexes(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "addIndexes", args);
          return NULL;
        }

        static PyObject *t_TrackingIndexWriter_deleteAll(t_TrackingIndexWriter *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.deleteAll());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_TrackingIndexWriter_deleteDocuments(t_TrackingIndexWriter *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::index::Term a0((jobject) NULL);
              jlong result;

              if (!parseArgs(args, "k", ::org::apache::lucene::index::Term::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.deleteDocuments(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
            {
              JArray< ::org::apache::lucene::index::Term > a0((jobject) NULL);
              jlong result;

              if (!parseArgs(args, "[k", ::org::apache::lucene::index::Term::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.deleteDocuments(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
            {
              JArray< ::org::apache::lucene::search::Query > a0((jobject) NULL);
              jlong result;

              if (!parseArgs(args, "[k", ::org::apache::lucene::search::Query::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.deleteDocuments(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
            {
              ::org::apache::lucene::search::Query a0((jobject) NULL);
              jlong result;

              if (!parseArgs(args, "k", ::org::apache::lucene::search::Query::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.deleteDocuments(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "deleteDocuments", args);
          return NULL;
        }

        static PyObject *t_TrackingIndexWriter_getAndIncrementGeneration(t_TrackingIndexWriter *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getAndIncrementGeneration());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_TrackingIndexWriter_getGeneration(t_TrackingIndexWriter *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getGeneration());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_TrackingIndexWriter_getIndexWriter(t_TrackingIndexWriter *self)
        {
          ::org::apache::lucene::index::IndexWriter result((jobject) NULL);
          OBJ_CALL(result = self->object.getIndexWriter());
          return ::org::apache::lucene::index::t_IndexWriter::wrap_Object(result);
        }

        static PyObject *t_TrackingIndexWriter_tryDeleteDocument(t_TrackingIndexWriter *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          jint a1;
          jlong result;

          if (!parseArgs(args, "kI", ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.tryDeleteDocument(a0, a1));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError((PyObject *) self, "tryDeleteDocument", args);
          return NULL;
        }

        static PyObject *t_TrackingIndexWriter_updateDocument(t_TrackingIndexWriter *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::org::apache::lucene::index::Term a0((jobject) NULL);
              ::java::lang::Iterable a1((jobject) NULL);
              PyTypeObject **p1;
              jlong result;

              if (!parseArgs(args, "kK", ::org::apache::lucene::index::Term::initializeClass, ::java::lang::Iterable::initializeClass, &a0, &a1, &p1, ::java::lang::t_Iterable::parameters_))
              {
                OBJ_CALL(result = self->object.updateDocument(a0, a1));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
            break;
           case 3:
            {
              ::org::apache::lucene::index::Term a0((jobject) NULL);
              ::java::lang::Iterable a1((jobject) NULL);
              PyTypeObject **p1;
              ::org::apache::lucene::analysis::Analyzer a2((jobject) NULL);
              jlong result;

              if (!parseArgs(args, "kKk", ::org::apache::lucene::index::Term::initializeClass, ::java::lang::Iterable::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1, &p1, ::java::lang::t_Iterable::parameters_, &a2))
              {
                OBJ_CALL(result = self->object.updateDocument(a0, a1, a2));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "updateDocument", args);
          return NULL;
        }

        static PyObject *t_TrackingIndexWriter_updateDocuments(t_TrackingIndexWriter *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::org::apache::lucene::index::Term a0((jobject) NULL);
              ::java::lang::Iterable a1((jobject) NULL);
              PyTypeObject **p1;
              jlong result;

              if (!parseArgs(args, "kK", ::org::apache::lucene::index::Term::initializeClass, ::java::lang::Iterable::initializeClass, &a0, &a1, &p1, ::java::lang::t_Iterable::parameters_))
              {
                OBJ_CALL(result = self->object.updateDocuments(a0, a1));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
            break;
           case 3:
            {
              ::org::apache::lucene::index::Term a0((jobject) NULL);
              ::java::lang::Iterable a1((jobject) NULL);
              PyTypeObject **p1;
              ::org::apache::lucene::analysis::Analyzer a2((jobject) NULL);
              jlong result;

              if (!parseArgs(args, "kKk", ::org::apache::lucene::index::Term::initializeClass, ::java::lang::Iterable::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1, &p1, ::java::lang::t_Iterable::parameters_, &a2))
              {
                OBJ_CALL(result = self->object.updateDocuments(a0, a1, a2));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "updateDocuments", args);
          return NULL;
        }

        static PyObject *t_TrackingIndexWriter_get__andIncrementGeneration(t_TrackingIndexWriter *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getAndIncrementGeneration());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }

        static PyObject *t_TrackingIndexWriter_get__generation(t_TrackingIndexWriter *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getGeneration());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }

        static PyObject *t_TrackingIndexWriter_get__indexWriter(t_TrackingIndexWriter *self, void *data)
        {
          ::org::apache::lucene::index::IndexWriter value((jobject) NULL);
          OBJ_CALL(value = self->object.getIndexWriter());
          return ::org::apache::lucene::index::t_IndexWriter::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/sv/SwedishLightStemFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace sv {

          ::java::lang::Class *SwedishLightStemFilter::class$ = NULL;
          jmethodID *SwedishLightStemFilter::mids$ = NULL;
          bool SwedishLightStemFilter::live$ = false;

          jclass SwedishLightStemFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/sv/SwedishLightStemFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SwedishLightStemFilter::SwedishLightStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean SwedishLightStemFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace sv {
          static PyObject *t_SwedishLightStemFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SwedishLightStemFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SwedishLightStemFilter_init_(t_SwedishLightStemFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SwedishLightStemFilter_incrementToken(t_SwedishLightStemFilter *self, PyObject *args);

          static PyMethodDef t_SwedishLightStemFilter__methods_[] = {
            DECLARE_METHOD(t_SwedishLightStemFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SwedishLightStemFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SwedishLightStemFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SwedishLightStemFilter, t_SwedishLightStemFilter, ::org::apache::lucene::analysis::TokenFilter, SwedishLightStemFilter, t_SwedishLightStemFilter_init_, 0, 0, 0, 0, 0);

          void t_SwedishLightStemFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(SwedishLightStemFilter), module, "SwedishLightStemFilter", 0);
          }

          void t_SwedishLightStemFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SwedishLightStemFilter).tp_dict, "class_", make_descriptor(SwedishLightStemFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SwedishLightStemFilter).tp_dict, "wrapfn_", make_descriptor(t_SwedishLightStemFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SwedishLightStemFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SwedishLightStemFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SwedishLightStemFilter::initializeClass, 1)))
              return NULL;
            return t_SwedishLightStemFilter::wrap_Object(SwedishLightStemFilter(((t_SwedishLightStemFilter *) arg)->object.this$));
          }
          static PyObject *t_SwedishLightStemFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SwedishLightStemFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SwedishLightStemFilter_init_(t_SwedishLightStemFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            SwedishLightStemFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = SwedishLightStemFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SwedishLightStemFilter_incrementToken(t_SwedishLightStemFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(SwedishLightStemFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/OpenBitSetIterator.h"
#include "org/apache/lucene/util/OpenBitSet.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *OpenBitSetIterator::class$ = NULL;
        jmethodID *OpenBitSetIterator::mids$ = NULL;
        bool OpenBitSetIterator::live$ = false;

        jclass OpenBitSetIterator::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/OpenBitSetIterator");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_c2540e4f] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/OpenBitSet;)V");
            mids$[mid_init$_ce93dbcb] = env->getMethodID(cls, "<init>", "([JI)V");
            mids$[mid_advance_39c7bd23] = env->getMethodID(cls, "advance", "(I)I");
            mids$[mid_cost_54c6a17a] = env->getMethodID(cls, "cost", "()J");
            mids$[mid_docID_54c6a179] = env->getMethodID(cls, "docID", "()I");
            mids$[mid_nextDoc_54c6a179] = env->getMethodID(cls, "nextDoc", "()I");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        OpenBitSetIterator::OpenBitSetIterator(const ::org::apache::lucene::util::OpenBitSet & a0) : ::org::apache::lucene::search::DocIdSetIterator(env->newObject(initializeClass, &mids$, mid_init$_c2540e4f, a0.this$)) {}

        OpenBitSetIterator::OpenBitSetIterator(const JArray< jlong > & a0, jint a1) : ::org::apache::lucene::search::DocIdSetIterator(env->newObject(initializeClass, &mids$, mid_init$_ce93dbcb, a0.this$, a1)) {}

        jint OpenBitSetIterator::advance(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_advance_39c7bd23], a0);
        }

        jlong OpenBitSetIterator::cost() const
        {
          return env->callLongMethod(this$, mids$[mid_cost_54c6a17a]);
        }

        jint OpenBitSetIterator::docID() const
        {
          return env->callIntMethod(this$, mids$[mid_docID_54c6a179]);
        }

        jint OpenBitSetIterator::nextDoc() const
        {
          return env->callIntMethod(this$, mids$[mid_nextDoc_54c6a179]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_OpenBitSetIterator_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_OpenBitSetIterator_instance_(PyTypeObject *type, PyObject *arg);
        static int t_OpenBitSetIterator_init_(t_OpenBitSetIterator *self, PyObject *args, PyObject *kwds);
        static PyObject *t_OpenBitSetIterator_advance(t_OpenBitSetIterator *self, PyObject *args);
        static PyObject *t_OpenBitSetIterator_cost(t_OpenBitSetIterator *self, PyObject *args);
        static PyObject *t_OpenBitSetIterator_docID(t_OpenBitSetIterator *self, PyObject *args);
        static PyObject *t_OpenBitSetIterator_nextDoc(t_OpenBitSetIterator *self, PyObject *args);

        static PyMethodDef t_OpenBitSetIterator__methods_[] = {
          DECLARE_METHOD(t_OpenBitSetIterator, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_OpenBitSetIterator, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_OpenBitSetIterator, advance, METH_VARARGS),
          DECLARE_METHOD(t_OpenBitSetIterator, cost, METH_VARARGS),
          DECLARE_METHOD(t_OpenBitSetIterator, docID, METH_VARARGS),
          DECLARE_METHOD(t_OpenBitSetIterator, nextDoc, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(OpenBitSetIterator, t_OpenBitSetIterator, ::org::apache::lucene::search::DocIdSetIterator, OpenBitSetIterator, t_OpenBitSetIterator_init_, 0, 0, 0, 0, 0);

        void t_OpenBitSetIterator::install(PyObject *module)
        {
          installType(&PY_TYPE(OpenBitSetIterator), module, "OpenBitSetIterator", 0);
        }

        void t_OpenBitSetIterator::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(OpenBitSetIterator).tp_dict, "class_", make_descriptor(OpenBitSetIterator::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(OpenBitSetIterator).tp_dict, "wrapfn_", make_descriptor(t_OpenBitSetIterator::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(OpenBitSetIterator).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_OpenBitSetIterator_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, OpenBitSetIterator::initializeClass, 1)))
            return NULL;
          return t_OpenBitSetIterator::wrap_Object(OpenBitSetIterator(((t_OpenBitSetIterator *) arg)->object.this$));
        }
        static PyObject *t_OpenBitSetIterator_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, OpenBitSetIterator::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_OpenBitSetIterator_init_(t_OpenBitSetIterator *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::util::OpenBitSet a0((jobject) NULL);
              OpenBitSetIterator object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::util::OpenBitSet::initializeClass, &a0))
              {
                INT_CALL(object = OpenBitSetIterator(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              JArray< jlong > a0((jobject) NULL);
              jint a1;
              OpenBitSetIterator object((jobject) NULL);

              if (!parseArgs(args, "[JI", &a0, &a1))
              {
                INT_CALL(object = OpenBitSetIterator(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_OpenBitSetIterator_advance(t_OpenBitSetIterator *self, PyObject *args)
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.advance(a0));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(OpenBitSetIterator), (PyObject *) self, "advance", args, 2);
        }

        static PyObject *t_OpenBitSetIterator_cost(t_OpenBitSetIterator *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.cost());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(OpenBitSetIterator), (PyObject *) self, "cost", args, 2);
        }

        static PyObject *t_OpenBitSetIterator_docID(t_OpenBitSetIterator *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.docID());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(OpenBitSetIterator), (PyObject *) self, "docID", args, 2);
        }

        static PyObject *t_OpenBitSetIterator_nextDoc(t_OpenBitSetIterator *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.nextDoc());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(OpenBitSetIterator), (PyObject *) self, "nextDoc", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/gl/GalicianStemFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace gl {

          ::java::lang::Class *GalicianStemFilter::class$ = NULL;
          jmethodID *GalicianStemFilter::mids$ = NULL;
          bool GalicianStemFilter::live$ = false;

          jclass GalicianStemFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/gl/GalicianStemFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          GalicianStemFilter::GalicianStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean GalicianStemFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace gl {
          static PyObject *t_GalicianStemFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GalicianStemFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_GalicianStemFilter_init_(t_GalicianStemFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_GalicianStemFilter_incrementToken(t_GalicianStemFilter *self, PyObject *args);

          static PyMethodDef t_GalicianStemFilter__methods_[] = {
            DECLARE_METHOD(t_GalicianStemFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GalicianStemFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GalicianStemFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(GalicianStemFilter, t_GalicianStemFilter, ::org::apache::lucene::analysis::TokenFilter, GalicianStemFilter, t_GalicianStemFilter_init_, 0, 0, 0, 0, 0);

          void t_GalicianStemFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(GalicianStemFilter), module, "GalicianStemFilter", 0);
          }

          void t_GalicianStemFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(GalicianStemFilter).tp_dict, "class_", make_descriptor(GalicianStemFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(GalicianStemFilter).tp_dict, "wrapfn_", make_descriptor(t_GalicianStemFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(GalicianStemFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_GalicianStemFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GalicianStemFilter::initializeClass, 1)))
              return NULL;
            return t_GalicianStemFilter::wrap_Object(GalicianStemFilter(((t_GalicianStemFilter *) arg)->object.this$));
          }
          static PyObject *t_GalicianStemFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GalicianStemFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_GalicianStemFilter_init_(t_GalicianStemFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            GalicianStemFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = GalicianStemFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_GalicianStemFilter_incrementToken(t_GalicianStemFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(GalicianStemFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/compound/HyphenationCompoundWordTokenFilterFactory.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/analysis/TokenFilter.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/util/ResourceLoader.h"
#include "org/apache/lucene/analysis/util/ResourceLoaderAware.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace compound {

          ::java::lang::Class *HyphenationCompoundWordTokenFilterFactory::class$ = NULL;
          jmethodID *HyphenationCompoundWordTokenFilterFactory::mids$ = NULL;
          bool HyphenationCompoundWordTokenFilterFactory::live$ = false;

          jclass HyphenationCompoundWordTokenFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/compound/HyphenationCompoundWordTokenFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_2969f76d] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenFilter;");
              mids$[mid_inform_d6a4bc97] = env->getMethodID(cls, "inform", "(Lorg/apache/lucene/analysis/util/ResourceLoader;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          HyphenationCompoundWordTokenFilterFactory::HyphenationCompoundWordTokenFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenFilter HyphenationCompoundWordTokenFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenFilter(env->callObjectMethod(this$, mids$[mid_create_2969f76d], a0.this$));
          }

          void HyphenationCompoundWordTokenFilterFactory::inform(const ::org::apache::lucene::analysis::util::ResourceLoader & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_inform_d6a4bc97], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace compound {
          static PyObject *t_HyphenationCompoundWordTokenFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_HyphenationCompoundWordTokenFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_HyphenationCompoundWordTokenFilterFactory_init_(t_HyphenationCompoundWordTokenFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_HyphenationCompoundWordTokenFilterFactory_create(t_HyphenationCompoundWordTokenFilterFactory *self, PyObject *args);
          static PyObject *t_HyphenationCompoundWordTokenFilterFactory_inform(t_HyphenationCompoundWordTokenFilterFactory *self, PyObject *arg);

          static PyMethodDef t_HyphenationCompoundWordTokenFilterFactory__methods_[] = {
            DECLARE_METHOD(t_HyphenationCompoundWordTokenFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HyphenationCompoundWordTokenFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HyphenationCompoundWordTokenFilterFactory, create, METH_VARARGS),
            DECLARE_METHOD(t_HyphenationCompoundWordTokenFilterFactory, inform, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(HyphenationCompoundWordTokenFilterFactory, t_HyphenationCompoundWordTokenFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, HyphenationCompoundWordTokenFilterFactory, t_HyphenationCompoundWordTokenFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_HyphenationCompoundWordTokenFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(HyphenationCompoundWordTokenFilterFactory), module, "HyphenationCompoundWordTokenFilterFactory", 0);
          }

          void t_HyphenationCompoundWordTokenFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(HyphenationCompoundWordTokenFilterFactory).tp_dict, "class_", make_descriptor(HyphenationCompoundWordTokenFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(HyphenationCompoundWordTokenFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_HyphenationCompoundWordTokenFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(HyphenationCompoundWordTokenFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_HyphenationCompoundWordTokenFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, HyphenationCompoundWordTokenFilterFactory::initializeClass, 1)))
              return NULL;
            return t_HyphenationCompoundWordTokenFilterFactory::wrap_Object(HyphenationCompoundWordTokenFilterFactory(((t_HyphenationCompoundWordTokenFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_HyphenationCompoundWordTokenFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, HyphenationCompoundWordTokenFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_HyphenationCompoundWordTokenFilterFactory_init_(t_HyphenationCompoundWordTokenFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            HyphenationCompoundWordTokenFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = HyphenationCompoundWordTokenFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_HyphenationCompoundWordTokenFilterFactory_create(t_HyphenationCompoundWordTokenFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(HyphenationCompoundWordTokenFilterFactory), (PyObject *) self, "create", args, 2);
          }

          static PyObject *t_HyphenationCompoundWordTokenFilterFactory_inform(t_HyphenationCompoundWordTokenFilterFactory *self, PyObject *arg)
          {
            ::org::apache::lucene::analysis::util::ResourceLoader a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::analysis::util::ResourceLoader::initializeClass, &a0))
            {
              OBJ_CALL(self->object.inform(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "inform", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/LimitTokenPositionFilterFactory.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *LimitTokenPositionFilterFactory::class$ = NULL;
          jmethodID *LimitTokenPositionFilterFactory::mids$ = NULL;
          bool LimitTokenPositionFilterFactory::live$ = false;
          ::java::lang::String *LimitTokenPositionFilterFactory::CONSUME_ALL_TOKENS_KEY = NULL;
          ::java::lang::String *LimitTokenPositionFilterFactory::MAX_TOKEN_POSITION_KEY = NULL;

          jclass LimitTokenPositionFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/LimitTokenPositionFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              CONSUME_ALL_TOKENS_KEY = new ::java::lang::String(env->getStaticObjectField(cls, "CONSUME_ALL_TOKENS_KEY", "Ljava/lang/String;"));
              MAX_TOKEN_POSITION_KEY = new ::java::lang::String(env->getStaticObjectField(cls, "MAX_TOKEN_POSITION_KEY", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          LimitTokenPositionFilterFactory::LimitTokenPositionFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream LimitTokenPositionFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_LimitTokenPositionFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LimitTokenPositionFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_LimitTokenPositionFilterFactory_init_(t_LimitTokenPositionFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_LimitTokenPositionFilterFactory_create(t_LimitTokenPositionFilterFactory *self, PyObject *args);

          static PyMethodDef t_LimitTokenPositionFilterFactory__methods_[] = {
            DECLARE_METHOD(t_LimitTokenPositionFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LimitTokenPositionFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LimitTokenPositionFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(LimitTokenPositionFilterFactory, t_LimitTokenPositionFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, LimitTokenPositionFilterFactory, t_LimitTokenPositionFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_LimitTokenPositionFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(LimitTokenPositionFilterFactory), module, "LimitTokenPositionFilterFactory", 0);
          }

          void t_LimitTokenPositionFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(LimitTokenPositionFilterFactory).tp_dict, "class_", make_descriptor(LimitTokenPositionFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(LimitTokenPositionFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_LimitTokenPositionFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(LimitTokenPositionFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(LimitTokenPositionFilterFactory::initializeClass);
            PyDict_SetItemString(PY_TYPE(LimitTokenPositionFilterFactory).tp_dict, "CONSUME_ALL_TOKENS_KEY", make_descriptor(j2p(*LimitTokenPositionFilterFactory::CONSUME_ALL_TOKENS_KEY)));
            PyDict_SetItemString(PY_TYPE(LimitTokenPositionFilterFactory).tp_dict, "MAX_TOKEN_POSITION_KEY", make_descriptor(j2p(*LimitTokenPositionFilterFactory::MAX_TOKEN_POSITION_KEY)));
          }

          static PyObject *t_LimitTokenPositionFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LimitTokenPositionFilterFactory::initializeClass, 1)))
              return NULL;
            return t_LimitTokenPositionFilterFactory::wrap_Object(LimitTokenPositionFilterFactory(((t_LimitTokenPositionFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_LimitTokenPositionFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LimitTokenPositionFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_LimitTokenPositionFilterFactory_init_(t_LimitTokenPositionFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            LimitTokenPositionFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = LimitTokenPositionFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_LimitTokenPositionFilterFactory_create(t_LimitTokenPositionFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(LimitTokenPositionFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/lang/Number.h"
#include "java/io/Serializable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace java {
  namespace lang {

    ::java::lang::Class *Number::class$ = NULL;
    jmethodID *Number::mids$ = NULL;
    bool Number::live$ = false;

    jclass Number::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/lang/Number");

        mids$ = new jmethodID[max_mid];
        mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
        mids$[mid_byteValue_54c6a172] = env->getMethodID(cls, "byteValue", "()B");
        mids$[mid_doubleValue_54c6a174] = env->getMethodID(cls, "doubleValue", "()D");
        mids$[mid_floatValue_54c6a176] = env->getMethodID(cls, "floatValue", "()F");
        mids$[mid_intValue_54c6a179] = env->getMethodID(cls, "intValue", "()I");
        mids$[mid_longValue_54c6a17a] = env->getMethodID(cls, "longValue", "()J");
        mids$[mid_shortValue_54c6a163] = env->getMethodID(cls, "shortValue", "()S");

        class$ = (::java::lang::Class *) new JObject(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    Number::Number() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

    jbyte Number::byteValue() const
    {
      return env->callByteMethod(this$, mids$[mid_byteValue_54c6a172]);
    }

    jdouble Number::doubleValue() const
    {
      return env->callDoubleMethod(this$, mids$[mid_doubleValue_54c6a174]);
    }

    jfloat Number::floatValue() const
    {
      return env->callFloatMethod(this$, mids$[mid_floatValue_54c6a176]);
    }

    jint Number::intValue() const
    {
      return env->callIntMethod(this$, mids$[mid_intValue_54c6a179]);
    }

    jlong Number::longValue() const
    {
      return env->callLongMethod(this$, mids$[mid_longValue_54c6a17a]);
    }

    jshort Number::shortValue() const
    {
      return env->callShortMethod(this$, mids$[mid_shortValue_54c6a163]);
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace lang {
    static PyObject *t_Number_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Number_instance_(PyTypeObject *type, PyObject *arg);
    static int t_Number_init_(t_Number *self, PyObject *args, PyObject *kwds);
    static PyObject *t_Number_byteValue(t_Number *self);
    static PyObject *t_Number_doubleValue(t_Number *self);
    static PyObject *t_Number_floatValue(t_Number *self);
    static PyObject *t_Number_intValue(t_Number *self);
    static PyObject *t_Number_longValue(t_Number *self);
    static PyObject *t_Number_shortValue(t_Number *self);

    static PyMethodDef t_Number__methods_[] = {
      DECLARE_METHOD(t_Number, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Number, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Number, byteValue, METH_NOARGS),
      DECLARE_METHOD(t_Number, doubleValue, METH_NOARGS),
      DECLARE_METHOD(t_Number, floatValue, METH_NOARGS),
      DECLARE_METHOD(t_Number, intValue, METH_NOARGS),
      DECLARE_METHOD(t_Number, longValue, METH_NOARGS),
      DECLARE_METHOD(t_Number, shortValue, METH_NOARGS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(Number, t_Number, ::java::lang::Object, Number, t_Number_init_, 0, 0, 0, 0, 0);

    void t_Number::install(PyObject *module)
    {
      installType(&PY_TYPE(Number), module, "Number", 0);
    }

    void t_Number::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(Number).tp_dict, "class_", make_descriptor(Number::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(Number).tp_dict, "wrapfn_", make_descriptor(t_Number::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(Number).tp_dict, "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_Number_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, Number::initializeClass, 1)))
        return NULL;
      return t_Number::wrap_Object(Number(((t_Number *) arg)->object.this$));
    }
    static PyObject *t_Number_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, Number::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static int t_Number_init_(t_Number *self, PyObject *args, PyObject *kwds)
    {
      Number object((jobject) NULL);

      INT_CALL(object = Number());
      self->object = object;

      return 0;
    }

    static PyObject *t_Number_byteValue(t_Number *self)
    {
      jbyte result;
      OBJ_CALL(result = self->object.byteValue());
      return PyInt_FromLong((long) result);
    }

    static PyObject *t_Number_doubleValue(t_Number *self)
    {
      jdouble result;
      OBJ_CALL(result = self->object.doubleValue());
      return PyFloat_FromDouble((double) result);
    }

    static PyObject *t_Number_floatValue(t_Number *self)
    {
      jfloat result;
      OBJ_CALL(result = self->object.floatValue());
      return PyFloat_FromDouble((double) result);
    }

    static PyObject *t_Number_intValue(t_Number *self)
    {
      jint result;
      OBJ_CALL(result = self->object.intValue());
      return PyInt_FromLong((long) result);
    }

    static PyObject *t_Number_longValue(t_Number *self)
    {
      jlong result;
      OBJ_CALL(result = self->object.longValue());
      return PyLong_FromLongLong((PY_LONG_LONG) result);
    }

    static PyObject *t_Number_shortValue(t_Number *self)
    {
      jshort result;
      OBJ_CALL(result = self->object.shortValue());
      return PyInt_FromLong((long) result);
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/TermRangeFilter.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/TermRangeQuery.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *TermRangeFilter::class$ = NULL;
        jmethodID *TermRangeFilter::mids$ = NULL;
        bool TermRangeFilter::live$ = false;

        jclass TermRangeFilter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/TermRangeFilter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_d3423b66] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/util/BytesRef;ZZ)V");
            mids$[mid_Less_b14e87bd] = env->getStaticMethodID(cls, "Less", "(Ljava/lang/String;Lorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/search/TermRangeFilter;");
            mids$[mid_More_b14e87bd] = env->getStaticMethodID(cls, "More", "(Ljava/lang/String;Lorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/search/TermRangeFilter;");
            mids$[mid_getLowerTerm_4ae19461] = env->getMethodID(cls, "getLowerTerm", "()Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_getUpperTerm_4ae19461] = env->getMethodID(cls, "getUpperTerm", "()Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_includesLower_54c6a16a] = env->getMethodID(cls, "includesLower", "()Z");
            mids$[mid_includesUpper_54c6a16a] = env->getMethodID(cls, "includesUpper", "()Z");
            mids$[mid_newStringRange_f9802b7d] = env->getStaticMethodID(cls, "newStringRange", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ZZ)Lorg/apache/lucene/search/TermRangeFilter;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        TermRangeFilter::TermRangeFilter(const ::java::lang::String & a0, const ::org::apache::lucene::util::BytesRef & a1, const ::org::apache::lucene::util::BytesRef & a2, jboolean a3, jboolean a4) : ::org::apache::lucene::search::MultiTermQueryWrapperFilter(env->newObject(initializeClass, &mids$, mid_init$_d3423b66, a0.this$, a1.this$, a2.this$, a3, a4)) {}

        TermRangeFilter TermRangeFilter::Less(const ::java::lang::String & a0, const ::org::apache::lucene::util::BytesRef & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return TermRangeFilter(env->callStaticObjectMethod(cls, mids$[mid_Less_b14e87bd], a0.this$, a1.this$));
        }

        TermRangeFilter TermRangeFilter::More(const ::java::lang::String & a0, const ::org::apache::lucene::util::BytesRef & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return TermRangeFilter(env->callStaticObjectMethod(cls, mids$[mid_More_b14e87bd], a0.this$, a1.this$));
        }

        ::org::apache::lucene::util::BytesRef TermRangeFilter::getLowerTerm() const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_getLowerTerm_4ae19461]));
        }

        ::org::apache::lucene::util::BytesRef TermRangeFilter::getUpperTerm() const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_getUpperTerm_4ae19461]));
        }

        jboolean TermRangeFilter::includesLower() const
        {
          return env->callBooleanMethod(this$, mids$[mid_includesLower_54c6a16a]);
        }

        jboolean TermRangeFilter::includesUpper() const
        {
          return env->callBooleanMethod(this$, mids$[mid_includesUpper_54c6a16a]);
        }

        TermRangeFilter TermRangeFilter::newStringRange(const ::java::lang::String & a0, const ::java::lang::String & a1, const ::java::lang::String & a2, jboolean a3, jboolean a4)
        {
          jclass cls = env->getClass(initializeClass);
          return TermRangeFilter(env->callStaticObjectMethod(cls, mids$[mid_newStringRange_f9802b7d], a0.this$, a1.this$, a2.this$, a3, a4));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_TermRangeFilter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TermRangeFilter_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TermRangeFilter_of_(t_TermRangeFilter *self, PyObject *args);
        static int t_TermRangeFilter_init_(t_TermRangeFilter *self, PyObject *args, PyObject *kwds);
        static PyObject *t_TermRangeFilter_Less(PyTypeObject *type, PyObject *args);
        static PyObject *t_TermRangeFilter_More(PyTypeObject *type, PyObject *args);
        static PyObject *t_TermRangeFilter_getLowerTerm(t_TermRangeFilter *self);
        static PyObject *t_TermRangeFilter_getUpperTerm(t_TermRangeFilter *self);
        static PyObject *t_TermRangeFilter_includesLower(t_TermRangeFilter *self);
        static PyObject *t_TermRangeFilter_includesUpper(t_TermRangeFilter *self);
        static PyObject *t_TermRangeFilter_newStringRange(PyTypeObject *type, PyObject *args);
        static PyObject *t_TermRangeFilter_get__lowerTerm(t_TermRangeFilter *self, void *data);
        static PyObject *t_TermRangeFilter_get__upperTerm(t_TermRangeFilter *self, void *data);
        static PyObject *t_TermRangeFilter_get__parameters_(t_TermRangeFilter *self, void *data);
        static PyGetSetDef t_TermRangeFilter__fields_[] = {
          DECLARE_GET_FIELD(t_TermRangeFilter, lowerTerm),
          DECLARE_GET_FIELD(t_TermRangeFilter, upperTerm),
          DECLARE_GET_FIELD(t_TermRangeFilter, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_TermRangeFilter__methods_[] = {
          DECLARE_METHOD(t_TermRangeFilter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TermRangeFilter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TermRangeFilter, of_, METH_VARARGS),
          DECLARE_METHOD(t_TermRangeFilter, Less, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_TermRangeFilter, More, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_TermRangeFilter, getLowerTerm, METH_NOARGS),
          DECLARE_METHOD(t_TermRangeFilter, getUpperTerm, METH_NOARGS),
          DECLARE_METHOD(t_TermRangeFilter, includesLower, METH_NOARGS),
          DECLARE_METHOD(t_TermRangeFilter, includesUpper, METH_NOARGS),
          DECLARE_METHOD(t_TermRangeFilter, newStringRange, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TermRangeFilter, t_TermRangeFilter, ::org::apache::lucene::search::MultiTermQueryWrapperFilter, TermRangeFilter, t_TermRangeFilter_init_, 0, 0, t_TermRangeFilter__fields_, 0, 0);
        PyObject *t_TermRangeFilter::wrap_Object(const TermRangeFilter& object, PyTypeObject *p0)
        {
          PyObject *obj = t_TermRangeFilter::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_TermRangeFilter *self = (t_TermRangeFilter *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_TermRangeFilter::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_TermRangeFilter::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_TermRangeFilter *self = (t_TermRangeFilter *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_TermRangeFilter::install(PyObject *module)
        {
          installType(&PY_TYPE(TermRangeFilter), module, "TermRangeFilter", 0);
        }

        void t_TermRangeFilter::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TermRangeFilter).tp_dict, "class_", make_descriptor(TermRangeFilter::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TermRangeFilter).tp_dict, "wrapfn_", make_descriptor(t_TermRangeFilter::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TermRangeFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TermRangeFilter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TermRangeFilter::initializeClass, 1)))
            return NULL;
          return t_TermRangeFilter::wrap_Object(TermRangeFilter(((t_TermRangeFilter *) arg)->object.this$));
        }
        static PyObject *t_TermRangeFilter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TermRangeFilter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_TermRangeFilter_of_(t_TermRangeFilter *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_TermRangeFilter_init_(t_TermRangeFilter *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
          ::org::apache::lucene::util::BytesRef a2((jobject) NULL);
          jboolean a3;
          jboolean a4;
          TermRangeFilter object((jobject) NULL);

          if (!parseArgs(args, "skkZZ", ::org::apache::lucene::util::BytesRef::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2, &a3, &a4))
          {
            INT_CALL(object = TermRangeFilter(a0, a1, a2, a3, a4));
            self->object = object;
            self->parameters[0] = &::org::apache::lucene::search::PY_TYPE(TermRangeQuery);
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_TermRangeFilter_Less(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
          TermRangeFilter result((jobject) NULL);

          if (!parseArgs(args, "sk", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::search::TermRangeFilter::Less(a0, a1));
            return t_TermRangeFilter::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "Less", args);
          return NULL;
        }

        static PyObject *t_TermRangeFilter_More(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
          TermRangeFilter result((jobject) NULL);

          if (!parseArgs(args, "sk", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::search::TermRangeFilter::More(a0, a1));
            return t_TermRangeFilter::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "More", args);
          return NULL;
        }

        static PyObject *t_TermRangeFilter_getLowerTerm(t_TermRangeFilter *self)
        {
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);
          OBJ_CALL(result = self->object.getLowerTerm());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
        }

        static PyObject *t_TermRangeFilter_getUpperTerm(t_TermRangeFilter *self)
        {
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);
          OBJ_CALL(result = self->object.getUpperTerm());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
        }

        static PyObject *t_TermRangeFilter_includesLower(t_TermRangeFilter *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.includesLower());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_TermRangeFilter_includesUpper(t_TermRangeFilter *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.includesUpper());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_TermRangeFilter_newStringRange(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::java::lang::String a2((jobject) NULL);
          jboolean a3;
          jboolean a4;
          TermRangeFilter result((jobject) NULL);

          if (!parseArgs(args, "sssZZ", &a0, &a1, &a2, &a3, &a4))
          {
            OBJ_CALL(result = ::org::apache::lucene::search::TermRangeFilter::newStringRange(a0, a1, a2, a3, a4));
            return t_TermRangeFilter::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "newStringRange", args);
          return NULL;
        }
        static PyObject *t_TermRangeFilter_get__parameters_(t_TermRangeFilter *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static PyObject *t_TermRangeFilter_get__lowerTerm(t_TermRangeFilter *self, void *data)
        {
          ::org::apache::lucene::util::BytesRef value((jobject) NULL);
          OBJ_CALL(value = self->object.getLowerTerm());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(value);
        }

        static PyObject *t_TermRangeFilter_get__upperTerm(t_TermRangeFilter *self, void *data)
        {
          ::org::apache::lucene::util::BytesRef value((jobject) NULL);
          OBJ_CALL(value = self->object.getUpperTerm());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/LimitTokenCountAnalyzer.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *LimitTokenCountAnalyzer::class$ = NULL;
          jmethodID *LimitTokenCountAnalyzer::mids$ = NULL;
          bool LimitTokenCountAnalyzer::live$ = false;

          jclass LimitTokenCountAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/LimitTokenCountAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_e882998a] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Analyzer;I)V");
              mids$[mid_init$_79b44903] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Analyzer;IZ)V");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
              mids$[mid_getWrappedAnalyzer_29a2299f] = env->getMethodID(cls, "getWrappedAnalyzer", "(Ljava/lang/String;)Lorg/apache/lucene/analysis/Analyzer;");
              mids$[mid_wrapComponents_46d74455] = env->getMethodID(cls, "wrapComponents", "(Ljava/lang/String;Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          LimitTokenCountAnalyzer::LimitTokenCountAnalyzer(const ::org::apache::lucene::analysis::Analyzer & a0, jint a1) : ::org::apache::lucene::analysis::AnalyzerWrapper(env->newObject(initializeClass, &mids$, mid_init$_e882998a, a0.this$, a1)) {}

          LimitTokenCountAnalyzer::LimitTokenCountAnalyzer(const ::org::apache::lucene::analysis::Analyzer & a0, jint a1, jboolean a2) : ::org::apache::lucene::analysis::AnalyzerWrapper(env->newObject(initializeClass, &mids$, mid_init$_79b44903, a0.this$, a1, a2)) {}

          ::java::lang::String LimitTokenCountAnalyzer::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_LimitTokenCountAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LimitTokenCountAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_LimitTokenCountAnalyzer_init_(t_LimitTokenCountAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_LimitTokenCountAnalyzer_toString(t_LimitTokenCountAnalyzer *self, PyObject *args);

          static PyMethodDef t_LimitTokenCountAnalyzer__methods_[] = {
            DECLARE_METHOD(t_LimitTokenCountAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LimitTokenCountAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LimitTokenCountAnalyzer, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(LimitTokenCountAnalyzer, t_LimitTokenCountAnalyzer, ::org::apache::lucene::analysis::AnalyzerWrapper, LimitTokenCountAnalyzer, t_LimitTokenCountAnalyzer_init_, 0, 0, 0, 0, 0);

          void t_LimitTokenCountAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(LimitTokenCountAnalyzer), module, "LimitTokenCountAnalyzer", 0);
          }

          void t_LimitTokenCountAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(LimitTokenCountAnalyzer).tp_dict, "class_", make_descriptor(LimitTokenCountAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(LimitTokenCountAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_LimitTokenCountAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(LimitTokenCountAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_LimitTokenCountAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LimitTokenCountAnalyzer::initializeClass, 1)))
              return NULL;
            return t_LimitTokenCountAnalyzer::wrap_Object(LimitTokenCountAnalyzer(((t_LimitTokenCountAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_LimitTokenCountAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LimitTokenCountAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_LimitTokenCountAnalyzer_init_(t_LimitTokenCountAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
                jint a1;
                LimitTokenCountAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "kI", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = LimitTokenCountAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
                jint a1;
                jboolean a2;
                LimitTokenCountAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "kIZ", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = LimitTokenCountAnalyzer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_LimitTokenCountAnalyzer_toString(t_LimitTokenCountAnalyzer *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(LimitTokenCountAnalyzer), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/LengthFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *LengthFilter::class$ = NULL;
          jmethodID *LengthFilter::mids$ = NULL;
          bool LengthFilter::live$ = false;

          jclass LengthFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/LengthFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_7f9e10a8] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;II)V");
              mids$[mid_init$_46a9ddd5] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/TokenStream;II)V");
              mids$[mid_init$_c7851d0e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;ZLorg/apache/lucene/analysis/TokenStream;II)V");
              mids$[mid_accept_54c6a16a] = env->getMethodID(cls, "accept", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          LengthFilter::LengthFilter(const ::org::apache::lucene::analysis::TokenStream & a0, jint a1, jint a2) : ::org::apache::lucene::analysis::util::FilteringTokenFilter(env->newObject(initializeClass, &mids$, mid_init$_7f9e10a8, a0.this$, a1, a2)) {}

          LengthFilter::LengthFilter(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::TokenStream & a1, jint a2, jint a3) : ::org::apache::lucene::analysis::util::FilteringTokenFilter(env->newObject(initializeClass, &mids$, mid_init$_46a9ddd5, a0.this$, a1.this$, a2, a3)) {}

          LengthFilter::LengthFilter(const ::org::apache::lucene::util::Version & a0, jboolean a1, const ::org::apache::lucene::analysis::TokenStream & a2, jint a3, jint a4) : ::org::apache::lucene::analysis::util::FilteringTokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7851d0e, a0.this$, a1, a2.this$, a3, a4)) {}

          jboolean LengthFilter::accept() const
          {
            return env->callBooleanMethod(this$, mids$[mid_accept_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_LengthFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LengthFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_LengthFilter_init_(t_LengthFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_LengthFilter_accept(t_LengthFilter *self);

          static PyMethodDef t_LengthFilter__methods_[] = {
            DECLARE_METHOD(t_LengthFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LengthFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LengthFilter, accept, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(LengthFilter, t_LengthFilter, ::org::apache::lucene::analysis::util::FilteringTokenFilter, LengthFilter, t_LengthFilter_init_, 0, 0, 0, 0, 0);

          void t_LengthFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(LengthFilter), module, "LengthFilter", 0);
          }

          void t_LengthFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(LengthFilter).tp_dict, "class_", make_descriptor(LengthFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(LengthFilter).tp_dict, "wrapfn_", make_descriptor(t_LengthFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(LengthFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_LengthFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LengthFilter::initializeClass, 1)))
              return NULL;
            return t_LengthFilter::wrap_Object(LengthFilter(((t_LengthFilter *) arg)->object.this$));
          }
          static PyObject *t_LengthFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LengthFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_LengthFilter_init_(t_LengthFilter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 3:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                jint a1;
                jint a2;
                LengthFilter object((jobject) NULL);

                if (!parseArgs(args, "kII", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = LengthFilter(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 4:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
                jint a2;
                jint a3;
                LengthFilter object((jobject) NULL);

                if (!parseArgs(args, "kkII", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1, &a2, &a3))
                {
                  INT_CALL(object = LengthFilter(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 5:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                jboolean a1;
                ::org::apache::lucene::analysis::TokenStream a2((jobject) NULL);
                jint a3;
                jint a4;
                LengthFilter object((jobject) NULL);

                if (!parseArgs(args, "kZkII", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1, &a2, &a3, &a4))
                {
                  INT_CALL(object = LengthFilter(a0, a1, a2, a3, a4));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_LengthFilter_accept(t_LengthFilter *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.accept());
            Py_RETURN_BOOL(result);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/TextableQueryNode.h"
#include "java/lang/CharSequence.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {

              ::java::lang::Class *TextableQueryNode::class$ = NULL;
              jmethodID *TextableQueryNode::mids$ = NULL;
              bool TextableQueryNode::live$ = false;

              jclass TextableQueryNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/nodes/TextableQueryNode");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_getText_e0adba2f] = env->getMethodID(cls, "getText", "()Ljava/lang/CharSequence;");
                  mids$[mid_setText_a8afc64a] = env->getMethodID(cls, "setText", "(Ljava/lang/CharSequence;)V");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              ::java::lang::CharSequence TextableQueryNode::getText() const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_getText_e0adba2f]));
              }

              void TextableQueryNode::setText(const ::java::lang::CharSequence & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setText_a8afc64a], a0.this$);
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {
              static PyObject *t_TextableQueryNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_TextableQueryNode_instance_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_TextableQueryNode_getText(t_TextableQueryNode *self);
              static PyObject *t_TextableQueryNode_setText(t_TextableQueryNode *self, PyObject *arg);
              static PyObject *t_TextableQueryNode_get__text(t_TextableQueryNode *self, void *data);
              static int t_TextableQueryNode_set__text(t_TextableQueryNode *self, PyObject *arg, void *data);
              static PyGetSetDef t_TextableQueryNode__fields_[] = {
                DECLARE_GETSET_FIELD(t_TextableQueryNode, text),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_TextableQueryNode__methods_[] = {
                DECLARE_METHOD(t_TextableQueryNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_TextableQueryNode, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_TextableQueryNode, getText, METH_NOARGS),
                DECLARE_METHOD(t_TextableQueryNode, setText, METH_O),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(TextableQueryNode, t_TextableQueryNode, ::java::lang::Object, TextableQueryNode, abstract_init, 0, 0, t_TextableQueryNode__fields_, 0, 0);

              void t_TextableQueryNode::install(PyObject *module)
              {
                installType(&PY_TYPE(TextableQueryNode), module, "TextableQueryNode", 0);
              }

              void t_TextableQueryNode::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(TextableQueryNode).tp_dict, "class_", make_descriptor(TextableQueryNode::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(TextableQueryNode).tp_dict, "wrapfn_", make_descriptor(t_TextableQueryNode::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(TextableQueryNode).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_TextableQueryNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, TextableQueryNode::initializeClass, 1)))
                  return NULL;
                return t_TextableQueryNode::wrap_Object(TextableQueryNode(((t_TextableQueryNode *) arg)->object.this$));
              }
              static PyObject *t_TextableQueryNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, TextableQueryNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static PyObject *t_TextableQueryNode_getText(t_TextableQueryNode *self)
              {
                ::java::lang::CharSequence result((jobject) NULL);
                OBJ_CALL(result = self->object.getText());
                return ::java::lang::t_CharSequence::wrap_Object(result);
              }

              static PyObject *t_TextableQueryNode_setText(t_TextableQueryNode *self, PyObject *arg)
              {
                ::java::lang::CharSequence a0((jobject) NULL);

                if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
                {
                  OBJ_CALL(self->object.setText(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setText", arg);
                return NULL;
              }

              static PyObject *t_TextableQueryNode_get__text(t_TextableQueryNode *self, void *data)
              {
                ::java::lang::CharSequence value((jobject) NULL);
                OBJ_CALL(value = self->object.getText());
                return ::java::lang::t_CharSequence::wrap_Object(value);
              }
              static int t_TextableQueryNode_set__text(t_TextableQueryNode *self, PyObject *arg, void *data)
              {
                {
                  ::java::lang::CharSequence value((jobject) NULL);
                  if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &value))
                  {
                    INT_CALL(self->object.setText(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "text", arg);
                return -1;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/automaton/SortedIntSet$FrozenIntSet.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {

          ::java::lang::Class *SortedIntSet$FrozenIntSet::class$ = NULL;
          jmethodID *SortedIntSet$FrozenIntSet::mids$ = NULL;
          bool SortedIntSet$FrozenIntSet::live$ = false;

          jclass SortedIntSet$FrozenIntSet::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/automaton/SortedIntSet$FrozenIntSet");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_d8d154a6] = env->getMethodID(cls, "<init>", "(II)V");
              mids$[mid_init$_3e1ea22c] = env->getMethodID(cls, "<init>", "([III)V");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SortedIntSet$FrozenIntSet::SortedIntSet$FrozenIntSet(jint a0, jint a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_d8d154a6, a0, a1)) {}

          SortedIntSet$FrozenIntSet::SortedIntSet$FrozenIntSet(const JArray< jint > & a0, jint a1, jint a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_3e1ea22c, a0.this$, a1, a2)) {}

          jboolean SortedIntSet$FrozenIntSet::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          jint SortedIntSet$FrozenIntSet::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          ::java::lang::String SortedIntSet$FrozenIntSet::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {
          static PyObject *t_SortedIntSet$FrozenIntSet_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SortedIntSet$FrozenIntSet_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SortedIntSet$FrozenIntSet_init_(t_SortedIntSet$FrozenIntSet *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SortedIntSet$FrozenIntSet_equals(t_SortedIntSet$FrozenIntSet *self, PyObject *args);
          static PyObject *t_SortedIntSet$FrozenIntSet_hashCode(t_SortedIntSet$FrozenIntSet *self, PyObject *args);
          static PyObject *t_SortedIntSet$FrozenIntSet_toString(t_SortedIntSet$FrozenIntSet *self, PyObject *args);

          static PyMethodDef t_SortedIntSet$FrozenIntSet__methods_[] = {
            DECLARE_METHOD(t_SortedIntSet$FrozenIntSet, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SortedIntSet$FrozenIntSet, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SortedIntSet$FrozenIntSet, equals, METH_VARARGS),
            DECLARE_METHOD(t_SortedIntSet$FrozenIntSet, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_SortedIntSet$FrozenIntSet, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SortedIntSet$FrozenIntSet, t_SortedIntSet$FrozenIntSet, ::java::lang::Object, SortedIntSet$FrozenIntSet, t_SortedIntSet$FrozenIntSet_init_, 0, 0, 0, 0, 0);

          void t_SortedIntSet$FrozenIntSet::install(PyObject *module)
          {
            installType(&PY_TYPE(SortedIntSet$FrozenIntSet), module, "SortedIntSet$FrozenIntSet", 0);
          }

          void t_SortedIntSet$FrozenIntSet::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SortedIntSet$FrozenIntSet).tp_dict, "class_", make_descriptor(SortedIntSet$FrozenIntSet::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SortedIntSet$FrozenIntSet).tp_dict, "wrapfn_", make_descriptor(t_SortedIntSet$FrozenIntSet::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SortedIntSet$FrozenIntSet).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SortedIntSet$FrozenIntSet_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SortedIntSet$FrozenIntSet::initializeClass, 1)))
              return NULL;
            return t_SortedIntSet$FrozenIntSet::wrap_Object(SortedIntSet$FrozenIntSet(((t_SortedIntSet$FrozenIntSet *) arg)->object.this$));
          }
          static PyObject *t_SortedIntSet$FrozenIntSet_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SortedIntSet$FrozenIntSet::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SortedIntSet$FrozenIntSet_init_(t_SortedIntSet$FrozenIntSet *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                jint a0;
                jint a1;
                SortedIntSet$FrozenIntSet object((jobject) NULL);

                if (!parseArgs(args, "II", &a0, &a1))
                {
                  INT_CALL(object = SortedIntSet$FrozenIntSet(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                JArray< jint > a0((jobject) NULL);
                jint a1;
                jint a2;
                SortedIntSet$FrozenIntSet object((jobject) NULL);

                if (!parseArgs(args, "[III", &a0, &a1, &a2))
                {
                  INT_CALL(object = SortedIntSet$FrozenIntSet(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SortedIntSet$FrozenIntSet_equals(t_SortedIntSet$FrozenIntSet *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(SortedIntSet$FrozenIntSet), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_SortedIntSet$FrozenIntSet_hashCode(t_SortedIntSet$FrozenIntSet *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(SortedIntSet$FrozenIntSet), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_SortedIntSet$FrozenIntSet_toString(t_SortedIntSet$FrozenIntSet *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(SortedIntSet$FrozenIntSet), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/payloads/DelimitedPayloadTokenFilter.h"
#include "org/apache/lucene/analysis/payloads/PayloadEncoder.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace payloads {

          ::java::lang::Class *DelimitedPayloadTokenFilter::class$ = NULL;
          jmethodID *DelimitedPayloadTokenFilter::mids$ = NULL;
          bool DelimitedPayloadTokenFilter::live$ = false;
          jchar DelimitedPayloadTokenFilter::DEFAULT_DELIMITER = (jchar) 0;

          jclass DelimitedPayloadTokenFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/payloads/DelimitedPayloadTokenFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_037fe9e9] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;CLorg/apache/lucene/analysis/payloads/PayloadEncoder;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_DELIMITER = env->getStaticCharField(cls, "DEFAULT_DELIMITER");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          DelimitedPayloadTokenFilter::DelimitedPayloadTokenFilter(const ::org::apache::lucene::analysis::TokenStream & a0, jchar a1, const ::org::apache::lucene::analysis::payloads::PayloadEncoder & a2) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_037fe9e9, a0.this$, a1, a2.this$)) {}

          jboolean DelimitedPayloadTokenFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace payloads {
          static PyObject *t_DelimitedPayloadTokenFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DelimitedPayloadTokenFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_DelimitedPayloadTokenFilter_init_(t_DelimitedPayloadTokenFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_DelimitedPayloadTokenFilter_incrementToken(t_DelimitedPayloadTokenFilter *self, PyObject *args);

          static PyMethodDef t_DelimitedPayloadTokenFilter__methods_[] = {
            DECLARE_METHOD(t_DelimitedPayloadTokenFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DelimitedPayloadTokenFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DelimitedPayloadTokenFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(DelimitedPayloadTokenFilter, t_DelimitedPayloadTokenFilter, ::org::apache::lucene::analysis::TokenFilter, DelimitedPayloadTokenFilter, t_DelimitedPayloadTokenFilter_init_, 0, 0, 0, 0, 0);

          void t_DelimitedPayloadTokenFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(DelimitedPayloadTokenFilter), module, "DelimitedPayloadTokenFilter", 0);
          }

          void t_DelimitedPayloadTokenFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(DelimitedPayloadTokenFilter).tp_dict, "class_", make_descriptor(DelimitedPayloadTokenFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(DelimitedPayloadTokenFilter).tp_dict, "wrapfn_", make_descriptor(t_DelimitedPayloadTokenFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(DelimitedPayloadTokenFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(DelimitedPayloadTokenFilter::initializeClass);
            PyDict_SetItemString(PY_TYPE(DelimitedPayloadTokenFilter).tp_dict, "DEFAULT_DELIMITER", make_descriptor(DelimitedPayloadTokenFilter::DEFAULT_DELIMITER));
          }

          static PyObject *t_DelimitedPayloadTokenFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, DelimitedPayloadTokenFilter::initializeClass, 1)))
              return NULL;
            return t_DelimitedPayloadTokenFilter::wrap_Object(DelimitedPayloadTokenFilter(((t_DelimitedPayloadTokenFilter *) arg)->object.this$));
          }
          static PyObject *t_DelimitedPayloadTokenFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, DelimitedPayloadTokenFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_DelimitedPayloadTokenFilter_init_(t_DelimitedPayloadTokenFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            jchar a1;
            ::org::apache::lucene::analysis::payloads::PayloadEncoder a2((jobject) NULL);
            DelimitedPayloadTokenFilter object((jobject) NULL);

            if (!parseArgs(args, "kCk", ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::analysis::payloads::PayloadEncoder::initializeClass, &a0, &a1, &a2))
            {
              INT_CALL(object = DelimitedPayloadTokenFilter(a0, a1, a2));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_DelimitedPayloadTokenFilter_incrementToken(t_DelimitedPayloadTokenFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(DelimitedPayloadTokenFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/payloads/MaxPayloadFunction.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace payloads {

          ::java::lang::Class *MaxPayloadFunction::class$ = NULL;
          jmethodID *MaxPayloadFunction::mids$ = NULL;
          bool MaxPayloadFunction::live$ = false;

          jclass MaxPayloadFunction::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/payloads/MaxPayloadFunction");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_currentScore_9fe8c3f6] = env->getMethodID(cls, "currentScore", "(ILjava/lang/String;IIIFF)F");
              mids$[mid_docScore_08788a8d] = env->getMethodID(cls, "docScore", "(ILjava/lang/String;IF)F");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          MaxPayloadFunction::MaxPayloadFunction() : ::org::apache::lucene::search::payloads::PayloadFunction(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jfloat MaxPayloadFunction::currentScore(jint a0, const ::java::lang::String & a1, jint a2, jint a3, jint a4, jfloat a5, jfloat a6) const
          {
            return env->callFloatMethod(this$, mids$[mid_currentScore_9fe8c3f6], a0, a1.this$, a2, a3, a4, a5, a6);
          }

          jfloat MaxPayloadFunction::docScore(jint a0, const ::java::lang::String & a1, jint a2, jfloat a3) const
          {
            return env->callFloatMethod(this$, mids$[mid_docScore_08788a8d], a0, a1.this$, a2, a3);
          }

          jboolean MaxPayloadFunction::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          jint MaxPayloadFunction::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace payloads {
          static PyObject *t_MaxPayloadFunction_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_MaxPayloadFunction_instance_(PyTypeObject *type, PyObject *arg);
          static int t_MaxPayloadFunction_init_(t_MaxPayloadFunction *self, PyObject *args, PyObject *kwds);
          static PyObject *t_MaxPayloadFunction_currentScore(t_MaxPayloadFunction *self, PyObject *args);
          static PyObject *t_MaxPayloadFunction_docScore(t_MaxPayloadFunction *self, PyObject *args);
          static PyObject *t_MaxPayloadFunction_equals(t_MaxPayloadFunction *self, PyObject *args);
          static PyObject *t_MaxPayloadFunction_hashCode(t_MaxPayloadFunction *self, PyObject *args);

          static PyMethodDef t_MaxPayloadFunction__methods_[] = {
            DECLARE_METHOD(t_MaxPayloadFunction, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MaxPayloadFunction, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MaxPayloadFunction, currentScore, METH_VARARGS),
            DECLARE_METHOD(t_MaxPayloadFunction, docScore, METH_VARARGS),
            DECLARE_METHOD(t_MaxPayloadFunction, equals, METH_VARARGS),
            DECLARE_METHOD(t_MaxPayloadFunction, hashCode, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(MaxPayloadFunction, t_MaxPayloadFunction, ::org::apache::lucene::search::payloads::PayloadFunction, MaxPayloadFunction, t_MaxPayloadFunction_init_, 0, 0, 0, 0, 0);

          void t_MaxPayloadFunction::install(PyObject *module)
          {
            installType(&PY_TYPE(MaxPayloadFunction), module, "MaxPayloadFunction", 0);
          }

          void t_MaxPayloadFunction::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(MaxPayloadFunction).tp_dict, "class_", make_descriptor(MaxPayloadFunction::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(MaxPayloadFunction).tp_dict, "wrapfn_", make_descriptor(t_MaxPayloadFunction::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(MaxPayloadFunction).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_MaxPayloadFunction_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, MaxPayloadFunction::initializeClass, 1)))
              return NULL;
            return t_MaxPayloadFunction::wrap_Object(MaxPayloadFunction(((t_MaxPayloadFunction *) arg)->object.this$));
          }
          static PyObject *t_MaxPayloadFunction_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, MaxPayloadFunction::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_MaxPayloadFunction_init_(t_MaxPayloadFunction *self, PyObject *args, PyObject *kwds)
          {
            MaxPayloadFunction object((jobject) NULL);

            INT_CALL(object = MaxPayloadFunction());
            self->object = object;

            return 0;
          }

          static PyObject *t_MaxPayloadFunction_currentScore(t_MaxPayloadFunction *self, PyObject *args)
          {
            jint a0;
            ::java::lang::String a1((jobject) NULL);
            jint a2;
            jint a3;
            jint a4;
            jfloat a5;
            jfloat a6;
            jfloat result;

            if (!parseArgs(args, "IsIIIFF", &a0, &a1, &a2, &a3, &a4, &a5, &a6))
            {
              OBJ_CALL(result = self->object.currentScore(a0, a1, a2, a3, a4, a5, a6));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(MaxPayloadFunction), (PyObject *) self, "currentScore", args, 2);
          }

          static PyObject *t_MaxPayloadFunction_docScore(t_MaxPayloadFunction *self, PyObject *args)
          {
            jint a0;
            ::java::lang::String a1((jobject) NULL);
            jint a2;
            jfloat a3;
            jfloat result;

            if (!parseArgs(args, "IsIF", &a0, &a1, &a2, &a3))
            {
              OBJ_CALL(result = self->object.docScore(a0, a1, a2, a3));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(MaxPayloadFunction), (PyObject *) self, "docScore", args, 2);
          }

          static PyObject *t_MaxPayloadFunction_equals(t_MaxPayloadFunction *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(MaxPayloadFunction), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_MaxPayloadFunction_hashCode(t_MaxPayloadFunction *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(MaxPayloadFunction), (PyObject *) self, "hashCode", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ngram/EdgeNGramTokenizerFactory.h"
#include "java/lang/Class.h"
#include "java/io/Reader.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "org/apache/lucene/analysis/Tokenizer.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ngram {

          ::java::lang::Class *EdgeNGramTokenizerFactory::class$ = NULL;
          jmethodID *EdgeNGramTokenizerFactory::mids$ = NULL;
          bool EdgeNGramTokenizerFactory::live$ = false;

          jclass EdgeNGramTokenizerFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ngram/EdgeNGramTokenizerFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_e51780e9] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Tokenizer;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          EdgeNGramTokenizerFactory::EdgeNGramTokenizerFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenizerFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::Tokenizer EdgeNGramTokenizerFactory::create(const ::org::apache::lucene::util::AttributeFactory & a0, const ::java::io::Reader & a1) const
          {
            return ::org::apache::lucene::analysis::Tokenizer(env->callObjectMethod(this$, mids$[mid_create_e51780e9], a0.this$, a1.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ngram {
          static PyObject *t_EdgeNGramTokenizerFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_EdgeNGramTokenizerFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_EdgeNGramTokenizerFactory_init_(t_EdgeNGramTokenizerFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_EdgeNGramTokenizerFactory_create(t_EdgeNGramTokenizerFactory *self, PyObject *args);

          static PyMethodDef t_EdgeNGramTokenizerFactory__methods_[] = {
            DECLARE_METHOD(t_EdgeNGramTokenizerFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_EdgeNGramTokenizerFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_EdgeNGramTokenizerFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(EdgeNGramTokenizerFactory, t_EdgeNGramTokenizerFactory, ::org::apache::lucene::analysis::util::TokenizerFactory, EdgeNGramTokenizerFactory, t_EdgeNGramTokenizerFactory_init_, 0, 0, 0, 0, 0);

          void t_EdgeNGramTokenizerFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(EdgeNGramTokenizerFactory), module, "EdgeNGramTokenizerFactory", 0);
          }

          void t_EdgeNGramTokenizerFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(EdgeNGramTokenizerFactory).tp_dict, "class_", make_descriptor(EdgeNGramTokenizerFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(EdgeNGramTokenizerFactory).tp_dict, "wrapfn_", make_descriptor(t_EdgeNGramTokenizerFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(EdgeNGramTokenizerFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_EdgeNGramTokenizerFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, EdgeNGramTokenizerFactory::initializeClass, 1)))
              return NULL;
            return t_EdgeNGramTokenizerFactory::wrap_Object(EdgeNGramTokenizerFactory(((t_EdgeNGramTokenizerFactory *) arg)->object.this$));
          }
          static PyObject *t_EdgeNGramTokenizerFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, EdgeNGramTokenizerFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_EdgeNGramTokenizerFactory_init_(t_EdgeNGramTokenizerFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            EdgeNGramTokenizerFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = EdgeNGramTokenizerFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_EdgeNGramTokenizerFactory_create(t_EdgeNGramTokenizerFactory *self, PyObject *args)
          {
            ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
            ::java::io::Reader a1((jobject) NULL);
            ::org::apache::lucene::analysis::Tokenizer result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.create(a0, a1));
              return ::org::apache::lucene::analysis::t_Tokenizer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(EdgeNGramTokenizerFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/NumericUtils$LongRangeBuilder.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *NumericUtils$LongRangeBuilder::class$ = NULL;
        jmethodID *NumericUtils$LongRangeBuilder::mids$ = NULL;
        bool NumericUtils$LongRangeBuilder::live$ = false;

        jclass NumericUtils$LongRangeBuilder::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/NumericUtils$LongRangeBuilder");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_addRange_594e5ee6] = env->getMethodID(cls, "addRange", "(Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/util/BytesRef;)V");
            mids$[mid_addRange_42663baa] = env->getMethodID(cls, "addRange", "(JJI)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        NumericUtils$LongRangeBuilder::NumericUtils$LongRangeBuilder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void NumericUtils$LongRangeBuilder::addRange(const ::org::apache::lucene::util::BytesRef & a0, const ::org::apache::lucene::util::BytesRef & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_addRange_594e5ee6], a0.this$, a1.this$);
        }

        void NumericUtils$LongRangeBuilder::addRange(jlong a0, jlong a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_addRange_42663baa], a0, a1, a2);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_NumericUtils$LongRangeBuilder_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NumericUtils$LongRangeBuilder_instance_(PyTypeObject *type, PyObject *arg);
        static int t_NumericUtils$LongRangeBuilder_init_(t_NumericUtils$LongRangeBuilder *self, PyObject *args, PyObject *kwds);
        static PyObject *t_NumericUtils$LongRangeBuilder_addRange(t_NumericUtils$LongRangeBuilder *self, PyObject *args);

        static PyMethodDef t_NumericUtils$LongRangeBuilder__methods_[] = {
          DECLARE_METHOD(t_NumericUtils$LongRangeBuilder, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NumericUtils$LongRangeBuilder, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NumericUtils$LongRangeBuilder, addRange, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(NumericUtils$LongRangeBuilder, t_NumericUtils$LongRangeBuilder, ::java::lang::Object, NumericUtils$LongRangeBuilder, t_NumericUtils$LongRangeBuilder_init_, 0, 0, 0, 0, 0);

        void t_NumericUtils$LongRangeBuilder::install(PyObject *module)
        {
          installType(&PY_TYPE(NumericUtils$LongRangeBuilder), module, "NumericUtils$LongRangeBuilder", 0);
        }

        void t_NumericUtils$LongRangeBuilder::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(NumericUtils$LongRangeBuilder).tp_dict, "class_", make_descriptor(NumericUtils$LongRangeBuilder::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(NumericUtils$LongRangeBuilder).tp_dict, "wrapfn_", make_descriptor(t_NumericUtils$LongRangeBuilder::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(NumericUtils$LongRangeBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_NumericUtils$LongRangeBuilder_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, NumericUtils$LongRangeBuilder::initializeClass, 1)))
            return NULL;
          return t_NumericUtils$LongRangeBuilder::wrap_Object(NumericUtils$LongRangeBuilder(((t_NumericUtils$LongRangeBuilder *) arg)->object.this$));
        }
        static PyObject *t_NumericUtils$LongRangeBuilder_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, NumericUtils$LongRangeBuilder::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_NumericUtils$LongRangeBuilder_init_(t_NumericUtils$LongRangeBuilder *self, PyObject *args, PyObject *kwds)
        {
          NumericUtils$LongRangeBuilder object((jobject) NULL);

          INT_CALL(object = NumericUtils$LongRangeBuilder());
          self->object = object;

          return 0;
        }

        static PyObject *t_NumericUtils$LongRangeBuilder_addRange(t_NumericUtils$LongRangeBuilder *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
              ::org::apache::lucene::util::BytesRef a1((jobject) NULL);

              if (!parseArgs(args, "kk", ::org::apache::lucene::util::BytesRef::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
              {
                OBJ_CALL(self->object.addRange(a0, a1));
                Py_RETURN_NONE;
              }
            }
            break;
           case 3:
            {
              jlong a0;
              jlong a1;
              jint a2;

              if (!parseArgs(args, "JJI", &a0, &a1, &a2))
              {
                OBJ_CALL(self->object.addRange(a0, a1, a2));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "addRange", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spell/LuceneLevenshteinDistance.h"
#include "org/apache/lucene/search/spell/StringDistance.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {

          ::java::lang::Class *LuceneLevenshteinDistance::class$ = NULL;
          jmethodID *LuceneLevenshteinDistance::mids$ = NULL;
          bool LuceneLevenshteinDistance::live$ = false;

          jclass LuceneLevenshteinDistance::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spell/LuceneLevenshteinDistance");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_getDistance_4a264752] = env->getMethodID(cls, "getDistance", "(Ljava/lang/String;Ljava/lang/String;)F");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          LuceneLevenshteinDistance::LuceneLevenshteinDistance() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jfloat LuceneLevenshteinDistance::getDistance(const ::java::lang::String & a0, const ::java::lang::String & a1) const
          {
            return env->callFloatMethod(this$, mids$[mid_getDistance_4a264752], a0.this$, a1.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {
          static PyObject *t_LuceneLevenshteinDistance_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LuceneLevenshteinDistance_instance_(PyTypeObject *type, PyObject *arg);
          static int t_LuceneLevenshteinDistance_init_(t_LuceneLevenshteinDistance *self, PyObject *args, PyObject *kwds);
          static PyObject *t_LuceneLevenshteinDistance_getDistance(t_LuceneLevenshteinDistance *self, PyObject *args);

          static PyMethodDef t_LuceneLevenshteinDistance__methods_[] = {
            DECLARE_METHOD(t_LuceneLevenshteinDistance, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LuceneLevenshteinDistance, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LuceneLevenshteinDistance, getDistance, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(LuceneLevenshteinDistance, t_LuceneLevenshteinDistance, ::java::lang::Object, LuceneLevenshteinDistance, t_LuceneLevenshteinDistance_init_, 0, 0, 0, 0, 0);

          void t_LuceneLevenshteinDistance::install(PyObject *module)
          {
            installType(&PY_TYPE(LuceneLevenshteinDistance), module, "LuceneLevenshteinDistance", 0);
          }

          void t_LuceneLevenshteinDistance::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(LuceneLevenshteinDistance).tp_dict, "class_", make_descriptor(LuceneLevenshteinDistance::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(LuceneLevenshteinDistance).tp_dict, "wrapfn_", make_descriptor(t_LuceneLevenshteinDistance::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(LuceneLevenshteinDistance).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_LuceneLevenshteinDistance_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LuceneLevenshteinDistance::initializeClass, 1)))
              return NULL;
            return t_LuceneLevenshteinDistance::wrap_Object(LuceneLevenshteinDistance(((t_LuceneLevenshteinDistance *) arg)->object.this$));
          }
          static PyObject *t_LuceneLevenshteinDistance_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LuceneLevenshteinDistance::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_LuceneLevenshteinDistance_init_(t_LuceneLevenshteinDistance *self, PyObject *args, PyObject *kwds)
          {
            LuceneLevenshteinDistance object((jobject) NULL);

            INT_CALL(object = LuceneLevenshteinDistance());
            self->object = object;

            return 0;
          }

          static PyObject *t_LuceneLevenshteinDistance_getDistance(t_LuceneLevenshteinDistance *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            jfloat result;

            if (!parseArgs(args, "ss", &a0, &a1))
            {
              OBJ_CALL(result = self->object.getDistance(a0, a1));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "getDistance", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/tokenattributes/TermToBytesRefAttribute.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {

          ::java::lang::Class *TermToBytesRefAttribute::class$ = NULL;
          jmethodID *TermToBytesRefAttribute::mids$ = NULL;
          bool TermToBytesRefAttribute::live$ = false;

          jclass TermToBytesRefAttribute::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/tokenattributes/TermToBytesRefAttribute");

              mids$ = new jmethodID[max_mid];
              mids$[mid_fillBytesRef_54c6a166] = env->getMethodID(cls, "fillBytesRef", "()V");
              mids$[mid_getBytesRef_4ae19461] = env->getMethodID(cls, "getBytesRef", "()Lorg/apache/lucene/util/BytesRef;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          void TermToBytesRefAttribute::fillBytesRef() const
          {
            env->callVoidMethod(this$, mids$[mid_fillBytesRef_54c6a166]);
          }

          ::org::apache::lucene::util::BytesRef TermToBytesRefAttribute::getBytesRef() const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_getBytesRef_4ae19461]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {
          static PyObject *t_TermToBytesRefAttribute_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TermToBytesRefAttribute_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TermToBytesRefAttribute_fillBytesRef(t_TermToBytesRefAttribute *self);
          static PyObject *t_TermToBytesRefAttribute_getBytesRef(t_TermToBytesRefAttribute *self);
          static PyObject *t_TermToBytesRefAttribute_get__bytesRef(t_TermToBytesRefAttribute *self, void *data);
          static PyGetSetDef t_TermToBytesRefAttribute__fields_[] = {
            DECLARE_GET_FIELD(t_TermToBytesRefAttribute, bytesRef),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_TermToBytesRefAttribute__methods_[] = {
            DECLARE_METHOD(t_TermToBytesRefAttribute, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TermToBytesRefAttribute, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TermToBytesRefAttribute, fillBytesRef, METH_NOARGS),
            DECLARE_METHOD(t_TermToBytesRefAttribute, getBytesRef, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(TermToBytesRefAttribute, t_TermToBytesRefAttribute, ::org::apache::lucene::util::Attribute, TermToBytesRefAttribute, abstract_init, 0, 0, t_TermToBytesRefAttribute__fields_, 0, 0);

          void t_TermToBytesRefAttribute::install(PyObject *module)
          {
            installType(&PY_TYPE(TermToBytesRefAttribute), module, "TermToBytesRefAttribute", 0);
          }

          void t_TermToBytesRefAttribute::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(TermToBytesRefAttribute).tp_dict, "class_", make_descriptor(TermToBytesRefAttribute::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(TermToBytesRefAttribute).tp_dict, "wrapfn_", make_descriptor(t_TermToBytesRefAttribute::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(TermToBytesRefAttribute).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TermToBytesRefAttribute_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TermToBytesRefAttribute::initializeClass, 1)))
              return NULL;
            return t_TermToBytesRefAttribute::wrap_Object(TermToBytesRefAttribute(((t_TermToBytesRefAttribute *) arg)->object.this$));
          }
          static PyObject *t_TermToBytesRefAttribute_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TermToBytesRefAttribute::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_TermToBytesRefAttribute_fillBytesRef(t_TermToBytesRefAttribute *self)
          {
            OBJ_CALL(self->object.fillBytesRef());
            Py_RETURN_NONE;
          }

          static PyObject *t_TermToBytesRefAttribute_getBytesRef(t_TermToBytesRefAttribute *self)
          {
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);
            OBJ_CALL(result = self->object.getBytesRef());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          static PyObject *t_TermToBytesRefAttribute_get__bytesRef(t_TermToBytesRefAttribute *self, void *data)
          {
            ::org::apache::lucene::util::BytesRef value((jobject) NULL);
            OBJ_CALL(value = self->object.getBytesRef());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/ScaleFloatFunction.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *ScaleFloatFunction::class$ = NULL;
            jmethodID *ScaleFloatFunction::mids$ = NULL;
            bool ScaleFloatFunction::live$ = false;

            jclass ScaleFloatFunction::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/ScaleFloatFunction");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_bdda54b0] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queries/function/ValueSource;FF)V");
                mids$[mid_createWeight_1b6125ba] = env->getMethodID(cls, "createWeight", "(Ljava/util/Map;Lorg/apache/lucene/search/IndexSearcher;)V");
                mids$[mid_description_14c7b5c5] = env->getMethodID(cls, "description", "()Ljava/lang/String;");
                mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_getValues_4c566485] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/queries/function/FunctionValues;");
                mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            ScaleFloatFunction::ScaleFloatFunction(const ::org::apache::lucene::queries::function::ValueSource & a0, jfloat a1, jfloat a2) : ::org::apache::lucene::queries::function::ValueSource(env->newObject(initializeClass, &mids$, mid_init$_bdda54b0, a0.this$, a1, a2)) {}

            void ScaleFloatFunction::createWeight(const ::java::util::Map & a0, const ::org::apache::lucene::search::IndexSearcher & a1) const
            {
              env->callVoidMethod(this$, mids$[mid_createWeight_1b6125ba], a0.this$, a1.this$);
            }

            ::java::lang::String ScaleFloatFunction::description() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_description_14c7b5c5]));
            }

            jboolean ScaleFloatFunction::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
            }

            ::org::apache::lucene::queries::function::FunctionValues ScaleFloatFunction::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::FunctionValues(env->callObjectMethod(this$, mids$[mid_getValues_4c566485], a0.this$, a1.this$));
            }

            jint ScaleFloatFunction::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_ScaleFloatFunction_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_ScaleFloatFunction_instance_(PyTypeObject *type, PyObject *arg);
            static int t_ScaleFloatFunction_init_(t_ScaleFloatFunction *self, PyObject *args, PyObject *kwds);
            static PyObject *t_ScaleFloatFunction_createWeight(t_ScaleFloatFunction *self, PyObject *args);
            static PyObject *t_ScaleFloatFunction_description(t_ScaleFloatFunction *self, PyObject *args);
            static PyObject *t_ScaleFloatFunction_equals(t_ScaleFloatFunction *self, PyObject *args);
            static PyObject *t_ScaleFloatFunction_getValues(t_ScaleFloatFunction *self, PyObject *args);
            static PyObject *t_ScaleFloatFunction_hashCode(t_ScaleFloatFunction *self, PyObject *args);

            static PyMethodDef t_ScaleFloatFunction__methods_[] = {
              DECLARE_METHOD(t_ScaleFloatFunction, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_ScaleFloatFunction, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_ScaleFloatFunction, createWeight, METH_VARARGS),
              DECLARE_METHOD(t_ScaleFloatFunction, description, METH_VARARGS),
              DECLARE_METHOD(t_ScaleFloatFunction, equals, METH_VARARGS),
              DECLARE_METHOD(t_ScaleFloatFunction, getValues, METH_VARARGS),
              DECLARE_METHOD(t_ScaleFloatFunction, hashCode, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(ScaleFloatFunction, t_ScaleFloatFunction, ::org::apache::lucene::queries::function::ValueSource, ScaleFloatFunction, t_ScaleFloatFunction_init_, 0, 0, 0, 0, 0);

            void t_ScaleFloatFunction::install(PyObject *module)
            {
              installType(&PY_TYPE(ScaleFloatFunction), module, "ScaleFloatFunction", 0);
            }

            void t_ScaleFloatFunction::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(ScaleFloatFunction).tp_dict, "class_", make_descriptor(ScaleFloatFunction::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(ScaleFloatFunction).tp_dict, "wrapfn_", make_descriptor(t_ScaleFloatFunction::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(ScaleFloatFunction).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_ScaleFloatFunction_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, ScaleFloatFunction::initializeClass, 1)))
                return NULL;
              return t_ScaleFloatFunction::wrap_Object(ScaleFloatFunction(((t_ScaleFloatFunction *) arg)->object.this$));
            }
            static PyObject *t_ScaleFloatFunction_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, ScaleFloatFunction::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_ScaleFloatFunction_init_(t_ScaleFloatFunction *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::queries::function::ValueSource a0((jobject) NULL);
              jfloat a1;
              jfloat a2;
              ScaleFloatFunction object((jobject) NULL);

              if (!parseArgs(args, "kFF", ::org::apache::lucene::queries::function::ValueSource::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = ScaleFloatFunction(a0, a1, a2));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_ScaleFloatFunction_createWeight(t_ScaleFloatFunction *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::search::IndexSearcher a1((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(self->object.createWeight(a0, a1));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(ScaleFloatFunction), (PyObject *) self, "createWeight", args, 2);
            }

            static PyObject *t_ScaleFloatFunction_description(t_ScaleFloatFunction *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.description());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(ScaleFloatFunction), (PyObject *) self, "description", args, 2);
            }

            static PyObject *t_ScaleFloatFunction_equals(t_ScaleFloatFunction *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(ScaleFloatFunction), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_ScaleFloatFunction_getValues(t_ScaleFloatFunction *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::FunctionValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::t_FunctionValues::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(ScaleFloatFunction), (PyObject *) self, "getValues", args, 2);
            }

            static PyObject *t_ScaleFloatFunction_hashCode(t_ScaleFloatFunction *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(ScaleFloatFunction), (PyObject *) self, "hashCode", args, 2);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/compressing/CompressingStoredFieldsIndexReader.h"
#include "java/lang/Cloneable.h"
#include "org/apache/lucene/util/Accountable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace compressing {

          ::java::lang::Class *CompressingStoredFieldsIndexReader::class$ = NULL;
          jmethodID *CompressingStoredFieldsIndexReader::mids$ = NULL;
          bool CompressingStoredFieldsIndexReader::live$ = false;

          jclass CompressingStoredFieldsIndexReader::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/compressing/CompressingStoredFieldsIndexReader");

              mids$ = new jmethodID[max_mid];
              mids$[mid_clone_b704ed60] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/codecs/compressing/CompressingStoredFieldsIndexReader;");
              mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CompressingStoredFieldsIndexReader CompressingStoredFieldsIndexReader::clone() const
          {
            return CompressingStoredFieldsIndexReader(env->callObjectMethod(this$, mids$[mid_clone_b704ed60]));
          }

          jlong CompressingStoredFieldsIndexReader::ramBytesUsed() const
          {
            return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace compressing {
          static PyObject *t_CompressingStoredFieldsIndexReader_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CompressingStoredFieldsIndexReader_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CompressingStoredFieldsIndexReader_clone(t_CompressingStoredFieldsIndexReader *self);
          static PyObject *t_CompressingStoredFieldsIndexReader_ramBytesUsed(t_CompressingStoredFieldsIndexReader *self);

          static PyMethodDef t_CompressingStoredFieldsIndexReader__methods_[] = {
            DECLARE_METHOD(t_CompressingStoredFieldsIndexReader, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CompressingStoredFieldsIndexReader, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CompressingStoredFieldsIndexReader, clone, METH_NOARGS),
            DECLARE_METHOD(t_CompressingStoredFieldsIndexReader, ramBytesUsed, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CompressingStoredFieldsIndexReader, t_CompressingStoredFieldsIndexReader, ::java::lang::Object, CompressingStoredFieldsIndexReader, abstract_init, 0, 0, 0, 0, 0);

          void t_CompressingStoredFieldsIndexReader::install(PyObject *module)
          {
            installType(&PY_TYPE(CompressingStoredFieldsIndexReader), module, "CompressingStoredFieldsIndexReader", 0);
          }

          void t_CompressingStoredFieldsIndexReader::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CompressingStoredFieldsIndexReader).tp_dict, "class_", make_descriptor(CompressingStoredFieldsIndexReader::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CompressingStoredFieldsIndexReader).tp_dict, "wrapfn_", make_descriptor(t_CompressingStoredFieldsIndexReader::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CompressingStoredFieldsIndexReader).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CompressingStoredFieldsIndexReader_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CompressingStoredFieldsIndexReader::initializeClass, 1)))
              return NULL;
            return t_CompressingStoredFieldsIndexReader::wrap_Object(CompressingStoredFieldsIndexReader(((t_CompressingStoredFieldsIndexReader *) arg)->object.this$));
          }
          static PyObject *t_CompressingStoredFieldsIndexReader_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CompressingStoredFieldsIndexReader::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_CompressingStoredFieldsIndexReader_clone(t_CompressingStoredFieldsIndexReader *self)
          {
            CompressingStoredFieldsIndexReader result((jobject) NULL);
            OBJ_CALL(result = self->object.clone());
            return t_CompressingStoredFieldsIndexReader::wrap_Object(result);
          }

          static PyObject *t_CompressingStoredFieldsIndexReader_ramBytesUsed(t_CompressingStoredFieldsIndexReader *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.ramBytesUsed());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/BufferedInputIterator.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "java/util/Set.h"
#include "org/apache/lucene/search/suggest/InputIterator.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/util/Comparator.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {

          ::java::lang::Class *BufferedInputIterator::class$ = NULL;
          jmethodID *BufferedInputIterator::mids$ = NULL;
          bool BufferedInputIterator::live$ = false;

          jclass BufferedInputIterator::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/BufferedInputIterator");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_1754a234] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/suggest/InputIterator;)V");
              mids$[mid_contexts_03e99967] = env->getMethodID(cls, "contexts", "()Ljava/util/Set;");
              mids$[mid_getComparator_5a7ff2fc] = env->getMethodID(cls, "getComparator", "()Ljava/util/Comparator;");
              mids$[mid_hasContexts_54c6a16a] = env->getMethodID(cls, "hasContexts", "()Z");
              mids$[mid_hasPayloads_54c6a16a] = env->getMethodID(cls, "hasPayloads", "()Z");
              mids$[mid_next_4ae19461] = env->getMethodID(cls, "next", "()Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_payload_4ae19461] = env->getMethodID(cls, "payload", "()Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_weight_54c6a17a] = env->getMethodID(cls, "weight", "()J");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BufferedInputIterator::BufferedInputIterator(const ::org::apache::lucene::search::suggest::InputIterator & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_1754a234, a0.this$)) {}

          ::java::util::Set BufferedInputIterator::contexts() const
          {
            return ::java::util::Set(env->callObjectMethod(this$, mids$[mid_contexts_03e99967]));
          }

          ::java::util::Comparator BufferedInputIterator::getComparator() const
          {
            return ::java::util::Comparator(env->callObjectMethod(this$, mids$[mid_getComparator_5a7ff2fc]));
          }

          jboolean BufferedInputIterator::hasContexts() const
          {
            return env->callBooleanMethod(this$, mids$[mid_hasContexts_54c6a16a]);
          }

          jboolean BufferedInputIterator::hasPayloads() const
          {
            return env->callBooleanMethod(this$, mids$[mid_hasPayloads_54c6a16a]);
          }

          ::org::apache::lucene::util::BytesRef BufferedInputIterator::next() const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_next_4ae19461]));
          }

          ::org::apache::lucene::util::BytesRef BufferedInputIterator::payload() const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_payload_4ae19461]));
          }

          jlong BufferedInputIterator::weight() const
          {
            return env->callLongMethod(this$, mids$[mid_weight_54c6a17a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          static PyObject *t_BufferedInputIterator_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BufferedInputIterator_instance_(PyTypeObject *type, PyObject *arg);
          static int t_BufferedInputIterator_init_(t_BufferedInputIterator *self, PyObject *args, PyObject *kwds);
          static PyObject *t_BufferedInputIterator_contexts(t_BufferedInputIterator *self);
          static PyObject *t_BufferedInputIterator_getComparator(t_BufferedInputIterator *self);
          static PyObject *t_BufferedInputIterator_hasContexts(t_BufferedInputIterator *self);
          static PyObject *t_BufferedInputIterator_hasPayloads(t_BufferedInputIterator *self);
          static PyObject *t_BufferedInputIterator_next(t_BufferedInputIterator *self);
          static PyObject *t_BufferedInputIterator_payload(t_BufferedInputIterator *self);
          static PyObject *t_BufferedInputIterator_weight(t_BufferedInputIterator *self);
          static PyObject *t_BufferedInputIterator_get__comparator(t_BufferedInputIterator *self, void *data);
          static PyGetSetDef t_BufferedInputIterator__fields_[] = {
            DECLARE_GET_FIELD(t_BufferedInputIterator, comparator),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_BufferedInputIterator__methods_[] = {
            DECLARE_METHOD(t_BufferedInputIterator, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BufferedInputIterator, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BufferedInputIterator, contexts, METH_NOARGS),
            DECLARE_METHOD(t_BufferedInputIterator, getComparator, METH_NOARGS),
            DECLARE_METHOD(t_BufferedInputIterator, hasContexts, METH_NOARGS),
            DECLARE_METHOD(t_BufferedInputIterator, hasPayloads, METH_NOARGS),
            DECLARE_METHOD(t_BufferedInputIterator, next, METH_NOARGS),
            DECLARE_METHOD(t_BufferedInputIterator, payload, METH_NOARGS),
            DECLARE_METHOD(t_BufferedInputIterator, weight, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(BufferedInputIterator, t_BufferedInputIterator, ::java::lang::Object, BufferedInputIterator, t_BufferedInputIterator_init_, PyObject_SelfIter, ((PyObject *(*)(t_BufferedInputIterator *)) get_next< t_BufferedInputIterator,::org::apache::lucene::util::t_BytesRef,::org::apache::lucene::util::BytesRef >), t_BufferedInputIterator__fields_, 0, 0);

          void t_BufferedInputIterator::install(PyObject *module)
          {
            installType(&PY_TYPE(BufferedInputIterator), module, "BufferedInputIterator", 0);
          }

          void t_BufferedInputIterator::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(BufferedInputIterator).tp_dict, "class_", make_descriptor(BufferedInputIterator::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(BufferedInputIterator).tp_dict, "wrapfn_", make_descriptor(t_BufferedInputIterator::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(BufferedInputIterator).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_BufferedInputIterator_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BufferedInputIterator::initializeClass, 1)))
              return NULL;
            return t_BufferedInputIterator::wrap_Object(BufferedInputIterator(((t_BufferedInputIterator *) arg)->object.this$));
          }
          static PyObject *t_BufferedInputIterator_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BufferedInputIterator::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_BufferedInputIterator_init_(t_BufferedInputIterator *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::search::suggest::InputIterator a0((jobject) NULL);
            BufferedInputIterator object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::search::suggest::InputIterator::initializeClass, &a0))
            {
              INT_CALL(object = BufferedInputIterator(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_BufferedInputIterator_contexts(t_BufferedInputIterator *self)
          {
            ::java::util::Set result((jobject) NULL);
            OBJ_CALL(result = self->object.contexts());
            return ::java::util::t_Set::wrap_Object(result, &::org::apache::lucene::util::PY_TYPE(BytesRef));
          }

          static PyObject *t_BufferedInputIterator_getComparator(t_BufferedInputIterator *self)
          {
            ::java::util::Comparator result((jobject) NULL);
            OBJ_CALL(result = self->object.getComparator());
            return ::java::util::t_Comparator::wrap_Object(result, &::org::apache::lucene::util::PY_TYPE(BytesRef));
          }

          static PyObject *t_BufferedInputIterator_hasContexts(t_BufferedInputIterator *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.hasContexts());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_BufferedInputIterator_hasPayloads(t_BufferedInputIterator *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.hasPayloads());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_BufferedInputIterator_next(t_BufferedInputIterator *self)
          {
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);
            OBJ_CALL(result = self->object.next());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          static PyObject *t_BufferedInputIterator_payload(t_BufferedInputIterator *self)
          {
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);
            OBJ_CALL(result = self->object.payload());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          static PyObject *t_BufferedInputIterator_weight(t_BufferedInputIterator *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.weight());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_BufferedInputIterator_get__comparator(t_BufferedInputIterator *self, void *data)
          {
            ::java::util::Comparator value((jobject) NULL);
            OBJ_CALL(value = self->object.getComparator());
            return ::java::util::t_Comparator::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/util/TokenFilterFactory.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "java/util/Set.h"
#include "java/lang/ClassLoader.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {

          ::java::lang::Class *TokenFilterFactory::class$ = NULL;
          jmethodID *TokenFilterFactory::mids$ = NULL;
          bool TokenFilterFactory::live$ = false;

          jclass TokenFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/util/TokenFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_availableTokenFilters_03e99967] = env->getStaticMethodID(cls, "availableTokenFilters", "()Ljava/util/Set;");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");
              mids$[mid_forName_489c139a] = env->getStaticMethodID(cls, "forName", "(Ljava/lang/String;Ljava/util/Map;)Lorg/apache/lucene/analysis/util/TokenFilterFactory;");
              mids$[mid_lookupClass_7d663d97] = env->getStaticMethodID(cls, "lookupClass", "(Ljava/lang/String;)Ljava/lang/Class;");
              mids$[mid_reloadTokenFilters_9110048d] = env->getStaticMethodID(cls, "reloadTokenFilters", "(Ljava/lang/ClassLoader;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::java::util::Set TokenFilterFactory::availableTokenFilters()
          {
            jclass cls = env->getClass(initializeClass);
            return ::java::util::Set(env->callStaticObjectMethod(cls, mids$[mid_availableTokenFilters_03e99967]));
          }

          ::org::apache::lucene::analysis::TokenStream TokenFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }

          TokenFilterFactory TokenFilterFactory::forName(const ::java::lang::String & a0, const ::java::util::Map & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return TokenFilterFactory(env->callStaticObjectMethod(cls, mids$[mid_forName_489c139a], a0.this$, a1.this$));
          }

          ::java::lang::Class TokenFilterFactory::lookupClass(const ::java::lang::String & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::java::lang::Class(env->callStaticObjectMethod(cls, mids$[mid_lookupClass_7d663d97], a0.this$));
          }

          void TokenFilterFactory::reloadTokenFilters(const ::java::lang::ClassLoader & a0)
          {
            jclass cls = env->getClass(initializeClass);
            env->callStaticVoidMethod(cls, mids$[mid_reloadTokenFilters_9110048d], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {
          static PyObject *t_TokenFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TokenFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TokenFilterFactory_availableTokenFilters(PyTypeObject *type);
          static PyObject *t_TokenFilterFactory_create(t_TokenFilterFactory *self, PyObject *arg);
          static PyObject *t_TokenFilterFactory_forName(PyTypeObject *type, PyObject *args);
          static PyObject *t_TokenFilterFactory_lookupClass(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TokenFilterFactory_reloadTokenFilters(PyTypeObject *type, PyObject *arg);

          static PyMethodDef t_TokenFilterFactory__methods_[] = {
            DECLARE_METHOD(t_TokenFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TokenFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TokenFilterFactory, availableTokenFilters, METH_NOARGS | METH_CLASS),
            DECLARE_METHOD(t_TokenFilterFactory, create, METH_O),
            DECLARE_METHOD(t_TokenFilterFactory, forName, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_TokenFilterFactory, lookupClass, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TokenFilterFactory, reloadTokenFilters, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(TokenFilterFactory, t_TokenFilterFactory, ::org::apache::lucene::analysis::util::AbstractAnalysisFactory, TokenFilterFactory, abstract_init, 0, 0, 0, 0, 0);

          void t_TokenFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(TokenFilterFactory), module, "TokenFilterFactory", 0);
          }

          void t_TokenFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(TokenFilterFactory).tp_dict, "class_", make_descriptor(TokenFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(TokenFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_TokenFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(TokenFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TokenFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TokenFilterFactory::initializeClass, 1)))
              return NULL;
            return t_TokenFilterFactory::wrap_Object(TokenFilterFactory(((t_TokenFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_TokenFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TokenFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_TokenFilterFactory_availableTokenFilters(PyTypeObject *type)
          {
            ::java::util::Set result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::util::TokenFilterFactory::availableTokenFilters());
            return ::java::util::t_Set::wrap_Object(result, &::java::lang::PY_TYPE(String));
          }

          static PyObject *t_TokenFilterFactory_create(t_TokenFilterFactory *self, PyObject *arg)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "create", arg);
            return NULL;
          }

          static PyObject *t_TokenFilterFactory_forName(PyTypeObject *type, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::util::Map a1((jobject) NULL);
            PyTypeObject **p1;
            TokenFilterFactory result((jobject) NULL);

            if (!parseArgs(args, "sK", ::java::util::Map::initializeClass, &a0, &a1, &p1, ::java::util::t_Map::parameters_))
            {
              OBJ_CALL(result = ::org::apache::lucene::analysis::util::TokenFilterFactory::forName(a0, a1));
              return t_TokenFilterFactory::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "forName", args);
            return NULL;
          }

          static PyObject *t_TokenFilterFactory_lookupClass(PyTypeObject *type, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::Class result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::analysis::util::TokenFilterFactory::lookupClass(a0));
              return ::java::lang::t_Class::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "lookupClass", arg);
            return NULL;
          }

          static PyObject *t_TokenFilterFactory_reloadTokenFilters(PyTypeObject *type, PyObject *arg)
          {
            ::java::lang::ClassLoader a0((jobject) NULL);

            if (!parseArg(arg, "k", ::java::lang::ClassLoader::initializeClass, &a0))
            {
              OBJ_CALL(::org::apache::lucene::analysis::util::TokenFilterFactory::reloadTokenFilters(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError(type, "reloadTokenFilters", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FieldCache$Doubles.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FieldCache$Doubles::class$ = NULL;
        jmethodID *FieldCache$Doubles::mids$ = NULL;
        bool FieldCache$Doubles::live$ = false;
        FieldCache$Doubles *FieldCache$Doubles::EMPTY = NULL;

        jclass FieldCache$Doubles::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FieldCache$Doubles");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_get_39c7bd2e] = env->getMethodID(cls, "get", "(I)D");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            EMPTY = new FieldCache$Doubles(env->getStaticObjectField(cls, "EMPTY", "Lorg/apache/lucene/search/FieldCache$Doubles;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FieldCache$Doubles::FieldCache$Doubles() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jdouble FieldCache$Doubles::get(jint a0) const
        {
          return env->callDoubleMethod(this$, mids$[mid_get_39c7bd2e], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FieldCache$Doubles_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldCache$Doubles_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FieldCache$Doubles_init_(t_FieldCache$Doubles *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FieldCache$Doubles_get(t_FieldCache$Doubles *self, PyObject *arg);

        static PyMethodDef t_FieldCache$Doubles__methods_[] = {
          DECLARE_METHOD(t_FieldCache$Doubles, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCache$Doubles, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCache$Doubles, get, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldCache$Doubles, t_FieldCache$Doubles, ::java::lang::Object, FieldCache$Doubles, t_FieldCache$Doubles_init_, 0, 0, 0, 0, 0);

        void t_FieldCache$Doubles::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldCache$Doubles), module, "FieldCache$Doubles", 0);
        }

        void t_FieldCache$Doubles::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldCache$Doubles).tp_dict, "class_", make_descriptor(FieldCache$Doubles::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldCache$Doubles).tp_dict, "wrapfn_", make_descriptor(t_FieldCache$Doubles::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldCache$Doubles).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(FieldCache$Doubles::initializeClass);
          PyDict_SetItemString(PY_TYPE(FieldCache$Doubles).tp_dict, "EMPTY", make_descriptor(t_FieldCache$Doubles::wrap_Object(*FieldCache$Doubles::EMPTY)));
        }

        static PyObject *t_FieldCache$Doubles_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldCache$Doubles::initializeClass, 1)))
            return NULL;
          return t_FieldCache$Doubles::wrap_Object(FieldCache$Doubles(((t_FieldCache$Doubles *) arg)->object.this$));
        }
        static PyObject *t_FieldCache$Doubles_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldCache$Doubles::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FieldCache$Doubles_init_(t_FieldCache$Doubles *self, PyObject *args, PyObject *kwds)
        {
          FieldCache$Doubles object((jobject) NULL);

          INT_CALL(object = FieldCache$Doubles());
          self->object = object;

          return 0;
        }

        static PyObject *t_FieldCache$Doubles_get(t_FieldCache$Doubles *self, PyObject *arg)
        {
          jint a0;
          jdouble result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.get(a0));
            return PyFloat_FromDouble((double) result);
          }

          PyErr_SetArgsError((PyObject *) self, "get", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/LMJelinekMercerSimilarity.h"
#include "org/apache/lucene/search/similarities/LMSimilarity$CollectionModel.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *LMJelinekMercerSimilarity::class$ = NULL;
          jmethodID *LMJelinekMercerSimilarity::mids$ = NULL;
          bool LMJelinekMercerSimilarity::live$ = false;

          jclass LMJelinekMercerSimilarity::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/LMJelinekMercerSimilarity");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_06298cab] = env->getMethodID(cls, "<init>", "(F)V");
              mids$[mid_init$_75020b37] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/similarities/LMSimilarity$CollectionModel;F)V");
              mids$[mid_getLambda_54c6a176] = env->getMethodID(cls, "getLambda", "()F");
              mids$[mid_getName_14c7b5c5] = env->getMethodID(cls, "getName", "()Ljava/lang/String;");
              mids$[mid_score_63482206] = env->getMethodID(cls, "score", "(Lorg/apache/lucene/search/similarities/BasicStats;FF)F");
              mids$[mid_explain_347d95f8] = env->getMethodID(cls, "explain", "(Lorg/apache/lucene/search/Explanation;Lorg/apache/lucene/search/similarities/BasicStats;IFF)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          LMJelinekMercerSimilarity::LMJelinekMercerSimilarity(jfloat a0) : ::org::apache::lucene::search::similarities::LMSimilarity(env->newObject(initializeClass, &mids$, mid_init$_06298cab, a0)) {}

          LMJelinekMercerSimilarity::LMJelinekMercerSimilarity(const ::org::apache::lucene::search::similarities::LMSimilarity$CollectionModel & a0, jfloat a1) : ::org::apache::lucene::search::similarities::LMSimilarity(env->newObject(initializeClass, &mids$, mid_init$_75020b37, a0.this$, a1)) {}

          jfloat LMJelinekMercerSimilarity::getLambda() const
          {
            return env->callFloatMethod(this$, mids$[mid_getLambda_54c6a176]);
          }

          ::java::lang::String LMJelinekMercerSimilarity::getName() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getName_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_LMJelinekMercerSimilarity_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LMJelinekMercerSimilarity_instance_(PyTypeObject *type, PyObject *arg);
          static int t_LMJelinekMercerSimilarity_init_(t_LMJelinekMercerSimilarity *self, PyObject *args, PyObject *kwds);
          static PyObject *t_LMJelinekMercerSimilarity_getLambda(t_LMJelinekMercerSimilarity *self);
          static PyObject *t_LMJelinekMercerSimilarity_getName(t_LMJelinekMercerSimilarity *self, PyObject *args);
          static PyObject *t_LMJelinekMercerSimilarity_get__lambda(t_LMJelinekMercerSimilarity *self, void *data);
          static PyObject *t_LMJelinekMercerSimilarity_get__name(t_LMJelinekMercerSimilarity *self, void *data);
          static PyGetSetDef t_LMJelinekMercerSimilarity__fields_[] = {
            DECLARE_GET_FIELD(t_LMJelinekMercerSimilarity, lambda),
            DECLARE_GET_FIELD(t_LMJelinekMercerSimilarity, name),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_LMJelinekMercerSimilarity__methods_[] = {
            DECLARE_METHOD(t_LMJelinekMercerSimilarity, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LMJelinekMercerSimilarity, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LMJelinekMercerSimilarity, getLambda, METH_NOARGS),
            DECLARE_METHOD(t_LMJelinekMercerSimilarity, getName, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(LMJelinekMercerSimilarity, t_LMJelinekMercerSimilarity, ::org::apache::lucene::search::similarities::LMSimilarity, LMJelinekMercerSimilarity, t_LMJelinekMercerSimilarity_init_, 0, 0, t_LMJelinekMercerSimilarity__fields_, 0, 0);

          void t_LMJelinekMercerSimilarity::install(PyObject *module)
          {
            installType(&PY_TYPE(LMJelinekMercerSimilarity), module, "LMJelinekMercerSimilarity", 0);
          }

          void t_LMJelinekMercerSimilarity::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(LMJelinekMercerSimilarity).tp_dict, "class_", make_descriptor(LMJelinekMercerSimilarity::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(LMJelinekMercerSimilarity).tp_dict, "wrapfn_", make_descriptor(t_LMJelinekMercerSimilarity::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(LMJelinekMercerSimilarity).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_LMJelinekMercerSimilarity_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LMJelinekMercerSimilarity::initializeClass, 1)))
              return NULL;
            return t_LMJelinekMercerSimilarity::wrap_Object(LMJelinekMercerSimilarity(((t_LMJelinekMercerSimilarity *) arg)->object.this$));
          }
          static PyObject *t_LMJelinekMercerSimilarity_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LMJelinekMercerSimilarity::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_LMJelinekMercerSimilarity_init_(t_LMJelinekMercerSimilarity *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                jfloat a0;
                LMJelinekMercerSimilarity object((jobject) NULL);

                if (!parseArgs(args, "F", &a0))
                {
                  INT_CALL(object = LMJelinekMercerSimilarity(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::search::similarities::LMSimilarity$CollectionModel a0((jobject) NULL);
                jfloat a1;
                LMJelinekMercerSimilarity object((jobject) NULL);

                if (!parseArgs(args, "kF", ::org::apache::lucene::search::similarities::LMSimilarity$CollectionModel::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = LMJelinekMercerSimilarity(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_LMJelinekMercerSimilarity_getLambda(t_LMJelinekMercerSimilarity *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getLambda());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_LMJelinekMercerSimilarity_getName(t_LMJelinekMercerSimilarity *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getName());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(LMJelinekMercerSimilarity), (PyObject *) self, "getName", args, 2);
          }

          static PyObject *t_LMJelinekMercerSimilarity_get__lambda(t_LMJelinekMercerSimilarity *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getLambda());
            return PyFloat_FromDouble((double) value);
          }

          static PyObject *t_LMJelinekMercerSimilarity_get__name(t_LMJelinekMercerSimilarity *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getName());
            return j2p(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/FloatDocValuesField.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *FloatDocValuesField::class$ = NULL;
        jmethodID *FloatDocValuesField::mids$ = NULL;
        bool FloatDocValuesField::live$ = false;

        jclass FloatDocValuesField::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/FloatDocValuesField");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f0649ce1] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;F)V");
            mids$[mid_setFloatValue_06298cab] = env->getMethodID(cls, "setFloatValue", "(F)V");
            mids$[mid_setLongValue_0ee6df2f] = env->getMethodID(cls, "setLongValue", "(J)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FloatDocValuesField::FloatDocValuesField(const ::java::lang::String & a0, jfloat a1) : ::org::apache::lucene::document::NumericDocValuesField(env->newObject(initializeClass, &mids$, mid_init$_f0649ce1, a0.this$, a1)) {}

        void FloatDocValuesField::setFloatValue(jfloat a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setFloatValue_06298cab], a0);
        }

        void FloatDocValuesField::setLongValue(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setLongValue_0ee6df2f], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_FloatDocValuesField_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FloatDocValuesField_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FloatDocValuesField_init_(t_FloatDocValuesField *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FloatDocValuesField_setFloatValue(t_FloatDocValuesField *self, PyObject *args);
        static PyObject *t_FloatDocValuesField_setLongValue(t_FloatDocValuesField *self, PyObject *args);
        static int t_FloatDocValuesField_set__floatValue(t_FloatDocValuesField *self, PyObject *arg, void *data);
        static int t_FloatDocValuesField_set__longValue(t_FloatDocValuesField *self, PyObject *arg, void *data);
        static PyGetSetDef t_FloatDocValuesField__fields_[] = {
          DECLARE_SET_FIELD(t_FloatDocValuesField, floatValue),
          DECLARE_SET_FIELD(t_FloatDocValuesField, longValue),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FloatDocValuesField__methods_[] = {
          DECLARE_METHOD(t_FloatDocValuesField, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FloatDocValuesField, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FloatDocValuesField, setFloatValue, METH_VARARGS),
          DECLARE_METHOD(t_FloatDocValuesField, setLongValue, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FloatDocValuesField, t_FloatDocValuesField, ::org::apache::lucene::document::NumericDocValuesField, FloatDocValuesField, t_FloatDocValuesField_init_, 0, 0, t_FloatDocValuesField__fields_, 0, 0);

        void t_FloatDocValuesField::install(PyObject *module)
        {
          installType(&PY_TYPE(FloatDocValuesField), module, "FloatDocValuesField", 0);
        }

        void t_FloatDocValuesField::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FloatDocValuesField).tp_dict, "class_", make_descriptor(FloatDocValuesField::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FloatDocValuesField).tp_dict, "wrapfn_", make_descriptor(t_FloatDocValuesField::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FloatDocValuesField).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FloatDocValuesField_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FloatDocValuesField::initializeClass, 1)))
            return NULL;
          return t_FloatDocValuesField::wrap_Object(FloatDocValuesField(((t_FloatDocValuesField *) arg)->object.this$));
        }
        static PyObject *t_FloatDocValuesField_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FloatDocValuesField::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FloatDocValuesField_init_(t_FloatDocValuesField *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::String a0((jobject) NULL);
          jfloat a1;
          FloatDocValuesField object((jobject) NULL);

          if (!parseArgs(args, "sF", &a0, &a1))
          {
            INT_CALL(object = FloatDocValuesField(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FloatDocValuesField_setFloatValue(t_FloatDocValuesField *self, PyObject *args)
        {
          jfloat a0;

          if (!parseArgs(args, "F", &a0))
          {
            OBJ_CALL(self->object.setFloatValue(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FloatDocValuesField), (PyObject *) self, "setFloatValue", args, 2);
        }

        static PyObject *t_FloatDocValuesField_setLongValue(t_FloatDocValuesField *self, PyObject *args)
        {
          jlong a0;

          if (!parseArgs(args, "J", &a0))
          {
            OBJ_CALL(self->object.setLongValue(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FloatDocValuesField), (PyObject *) self, "setLongValue", args, 2);
        }

        static int t_FloatDocValuesField_set__floatValue(t_FloatDocValuesField *self, PyObject *arg, void *data)
        {
          {
            jfloat value;
            if (!parseArg(arg, "F", &value))
            {
              INT_CALL(self->object.setFloatValue(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "floatValue", arg);
          return -1;
        }

        static int t_FloatDocValuesField_set__longValue(t_FloatDocValuesField *self, PyObject *arg, void *data)
        {
          {
            jlong value;
            if (!parseArg(arg, "J", &value))
            {
              INT_CALL(self->object.setLongValue(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "longValue", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/core/WhitespaceTokenizerFactory.h"
#include "java/lang/Class.h"
#include "java/io/Reader.h"
#include "org/apache/lucene/analysis/core/WhitespaceTokenizer.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {

          ::java::lang::Class *WhitespaceTokenizerFactory::class$ = NULL;
          jmethodID *WhitespaceTokenizerFactory::mids$ = NULL;
          bool WhitespaceTokenizerFactory::live$ = false;

          jclass WhitespaceTokenizerFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/core/WhitespaceTokenizerFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_3e31041b] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;)Lorg/apache/lucene/analysis/core/WhitespaceTokenizer;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          WhitespaceTokenizerFactory::WhitespaceTokenizerFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenizerFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::core::WhitespaceTokenizer WhitespaceTokenizerFactory::create(const ::org::apache::lucene::util::AttributeFactory & a0, const ::java::io::Reader & a1) const
          {
            return ::org::apache::lucene::analysis::core::WhitespaceTokenizer(env->callObjectMethod(this$, mids$[mid_create_3e31041b], a0.this$, a1.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {
          static PyObject *t_WhitespaceTokenizerFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_WhitespaceTokenizerFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_WhitespaceTokenizerFactory_init_(t_WhitespaceTokenizerFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_WhitespaceTokenizerFactory_create(t_WhitespaceTokenizerFactory *self, PyObject *args);

          static PyMethodDef t_WhitespaceTokenizerFactory__methods_[] = {
            DECLARE_METHOD(t_WhitespaceTokenizerFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_WhitespaceTokenizerFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_WhitespaceTokenizerFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(WhitespaceTokenizerFactory, t_WhitespaceTokenizerFactory, ::org::apache::lucene::analysis::util::TokenizerFactory, WhitespaceTokenizerFactory, t_WhitespaceTokenizerFactory_init_, 0, 0, 0, 0, 0);

          void t_WhitespaceTokenizerFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(WhitespaceTokenizerFactory), module, "WhitespaceTokenizerFactory", 0);
          }

          void t_WhitespaceTokenizerFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(WhitespaceTokenizerFactory).tp_dict, "class_", make_descriptor(WhitespaceTokenizerFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(WhitespaceTokenizerFactory).tp_dict, "wrapfn_", make_descriptor(t_WhitespaceTokenizerFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(WhitespaceTokenizerFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_WhitespaceTokenizerFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, WhitespaceTokenizerFactory::initializeClass, 1)))
              return NULL;
            return t_WhitespaceTokenizerFactory::wrap_Object(WhitespaceTokenizerFactory(((t_WhitespaceTokenizerFactory *) arg)->object.this$));
          }
          static PyObject *t_WhitespaceTokenizerFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, WhitespaceTokenizerFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_WhitespaceTokenizerFactory_init_(t_WhitespaceTokenizerFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            WhitespaceTokenizerFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = WhitespaceTokenizerFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_WhitespaceTokenizerFactory_create(t_WhitespaceTokenizerFactory *self, PyObject *args)
          {
            ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
            ::java::io::Reader a1((jobject) NULL);
            ::org::apache::lucene::analysis::core::WhitespaceTokenizer result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.create(a0, a1));
              return ::org::apache::lucene::analysis::core::t_WhitespaceTokenizer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(WhitespaceTokenizerFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/FieldCacheSanityChecker.h"
#include "org/apache/lucene/util/FieldCacheSanityChecker$Insanity.h"
#include "org/apache/lucene/search/FieldCache$CacheEntry.h"
#include "org/apache/lucene/search/FieldCache.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *FieldCacheSanityChecker::class$ = NULL;
        jmethodID *FieldCacheSanityChecker::mids$ = NULL;
        bool FieldCacheSanityChecker::live$ = false;

        jclass FieldCacheSanityChecker::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/FieldCacheSanityChecker");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_check_d93a601e] = env->getMethodID(cls, "check", "([Lorg/apache/lucene/search/FieldCache$CacheEntry;)[Lorg/apache/lucene/util/FieldCacheSanityChecker$Insanity;");
            mids$[mid_checkSanity_ad442ffd] = env->getStaticMethodID(cls, "checkSanity", "(Lorg/apache/lucene/search/FieldCache;)[Lorg/apache/lucene/util/FieldCacheSanityChecker$Insanity;");
            mids$[mid_checkSanity_d93a601e] = env->getStaticMethodID(cls, "checkSanity", "([Lorg/apache/lucene/search/FieldCache$CacheEntry;)[Lorg/apache/lucene/util/FieldCacheSanityChecker$Insanity;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FieldCacheSanityChecker::FieldCacheSanityChecker() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        JArray< ::org::apache::lucene::util::FieldCacheSanityChecker$Insanity > FieldCacheSanityChecker::check(const JArray< ::org::apache::lucene::search::FieldCache$CacheEntry > & a0) const
        {
          return JArray< ::org::apache::lucene::util::FieldCacheSanityChecker$Insanity >(env->callObjectMethod(this$, mids$[mid_check_d93a601e], a0.this$));
        }

        JArray< ::org::apache::lucene::util::FieldCacheSanityChecker$Insanity > FieldCacheSanityChecker::checkSanity(const ::org::apache::lucene::search::FieldCache & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< ::org::apache::lucene::util::FieldCacheSanityChecker$Insanity >(env->callStaticObjectMethod(cls, mids$[mid_checkSanity_ad442ffd], a0.this$));
        }

        JArray< ::org::apache::lucene::util::FieldCacheSanityChecker$Insanity > FieldCacheSanityChecker::checkSanity(const JArray< ::org::apache::lucene::search::FieldCache$CacheEntry > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< ::org::apache::lucene::util::FieldCacheSanityChecker$Insanity >(env->callStaticObjectMethod(cls, mids$[mid_checkSanity_d93a601e], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/util/FieldCacheSanityChecker$InsanityType.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_FieldCacheSanityChecker_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldCacheSanityChecker_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FieldCacheSanityChecker_init_(t_FieldCacheSanityChecker *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FieldCacheSanityChecker_check(t_FieldCacheSanityChecker *self, PyObject *arg);
        static PyObject *t_FieldCacheSanityChecker_checkSanity(PyTypeObject *type, PyObject *args);

        static PyMethodDef t_FieldCacheSanityChecker__methods_[] = {
          DECLARE_METHOD(t_FieldCacheSanityChecker, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCacheSanityChecker, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCacheSanityChecker, check, METH_O),
          DECLARE_METHOD(t_FieldCacheSanityChecker, checkSanity, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldCacheSanityChecker, t_FieldCacheSanityChecker, ::java::lang::Object, FieldCacheSanityChecker, t_FieldCacheSanityChecker_init_, 0, 0, 0, 0, 0);

        void t_FieldCacheSanityChecker::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldCacheSanityChecker), module, "FieldCacheSanityChecker", 0);
          PyDict_SetItemString(PY_TYPE(FieldCacheSanityChecker).tp_dict, "InsanityType", make_descriptor(&PY_TYPE(FieldCacheSanityChecker$InsanityType)));
          PyDict_SetItemString(PY_TYPE(FieldCacheSanityChecker).tp_dict, "Insanity", make_descriptor(&PY_TYPE(FieldCacheSanityChecker$Insanity)));
        }

        void t_FieldCacheSanityChecker::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldCacheSanityChecker).tp_dict, "class_", make_descriptor(FieldCacheSanityChecker::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldCacheSanityChecker).tp_dict, "wrapfn_", make_descriptor(t_FieldCacheSanityChecker::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldCacheSanityChecker).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldCacheSanityChecker_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldCacheSanityChecker::initializeClass, 1)))
            return NULL;
          return t_FieldCacheSanityChecker::wrap_Object(FieldCacheSanityChecker(((t_FieldCacheSanityChecker *) arg)->object.this$));
        }
        static PyObject *t_FieldCacheSanityChecker_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldCacheSanityChecker::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FieldCacheSanityChecker_init_(t_FieldCacheSanityChecker *self, PyObject *args, PyObject *kwds)
        {
          FieldCacheSanityChecker object((jobject) NULL);

          INT_CALL(object = FieldCacheSanityChecker());
          self->object = object;

          return 0;
        }

        static PyObject *t_FieldCacheSanityChecker_check(t_FieldCacheSanityChecker *self, PyObject *arg)
        {
          JArray< ::org::apache::lucene::search::FieldCache$CacheEntry > a0((jobject) NULL);
          JArray< ::org::apache::lucene::util::FieldCacheSanityChecker$Insanity > result((jobject) NULL);

          if (!parseArg(arg, "[k", ::org::apache::lucene::search::FieldCache$CacheEntry::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.check(a0));
            return JArray<jobject>(result.this$).wrap(::org::apache::lucene::util::t_FieldCacheSanityChecker$Insanity::wrap_jobject);
          }

          PyErr_SetArgsError((PyObject *) self, "check", arg);
          return NULL;
        }

        static PyObject *t_FieldCacheSanityChecker_checkSanity(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::search::FieldCache a0((jobject) NULL);
              JArray< ::org::apache::lucene::util::FieldCacheSanityChecker$Insanity > result((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::search::FieldCache::initializeClass, &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::FieldCacheSanityChecker::checkSanity(a0));
                return JArray<jobject>(result.this$).wrap(::org::apache::lucene::util::t_FieldCacheSanityChecker$Insanity::wrap_jobject);
              }
            }
            {
              JArray< ::org::apache::lucene::search::FieldCache$CacheEntry > a0((jobject) NULL);
              JArray< ::org::apache::lucene::util::FieldCacheSanityChecker$Insanity > result((jobject) NULL);

              if (!parseArgs(args, "[k", ::org::apache::lucene::search::FieldCache$CacheEntry::initializeClass, &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::FieldCacheSanityChecker::checkSanity(a0));
                return JArray<jobject>(result.this$).wrap(::org::apache::lucene::util::t_FieldCacheSanityChecker$Insanity::wrap_jobject);
              }
            }
          }

          PyErr_SetArgsError(type, "checkSanity", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spell/LuceneDictionary.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/spell/Dictionary.h"
#include "org/apache/lucene/search/suggest/InputIterator.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {

          ::java::lang::Class *LuceneDictionary::class$ = NULL;
          jmethodID *LuceneDictionary::mids$ = NULL;
          bool LuceneDictionary::live$ = false;

          jclass LuceneDictionary::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spell/LuceneDictionary");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_215fea03] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/IndexReader;Ljava/lang/String;)V");
              mids$[mid_getEntryIterator_23dc46b1] = env->getMethodID(cls, "getEntryIterator", "()Lorg/apache/lucene/search/suggest/InputIterator;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          LuceneDictionary::LuceneDictionary(const ::org::apache::lucene::index::IndexReader & a0, const ::java::lang::String & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_215fea03, a0.this$, a1.this$)) {}

          ::org::apache::lucene::search::suggest::InputIterator LuceneDictionary::getEntryIterator() const
          {
            return ::org::apache::lucene::search::suggest::InputIterator(env->callObjectMethod(this$, mids$[mid_getEntryIterator_23dc46b1]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {
          static PyObject *t_LuceneDictionary_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LuceneDictionary_instance_(PyTypeObject *type, PyObject *arg);
          static int t_LuceneDictionary_init_(t_LuceneDictionary *self, PyObject *args, PyObject *kwds);
          static PyObject *t_LuceneDictionary_getEntryIterator(t_LuceneDictionary *self);
          static PyObject *t_LuceneDictionary_get__entryIterator(t_LuceneDictionary *self, void *data);
          static PyGetSetDef t_LuceneDictionary__fields_[] = {
            DECLARE_GET_FIELD(t_LuceneDictionary, entryIterator),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_LuceneDictionary__methods_[] = {
            DECLARE_METHOD(t_LuceneDictionary, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LuceneDictionary, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LuceneDictionary, getEntryIterator, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(LuceneDictionary, t_LuceneDictionary, ::java::lang::Object, LuceneDictionary, t_LuceneDictionary_init_, 0, 0, t_LuceneDictionary__fields_, 0, 0);

          void t_LuceneDictionary::install(PyObject *module)
          {
            installType(&PY_TYPE(LuceneDictionary), module, "LuceneDictionary", 0);
          }

          void t_LuceneDictionary::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(LuceneDictionary).tp_dict, "class_", make_descriptor(LuceneDictionary::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(LuceneDictionary).tp_dict, "wrapfn_", make_descriptor(t_LuceneDictionary::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(LuceneDictionary).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_LuceneDictionary_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LuceneDictionary::initializeClass, 1)))
              return NULL;
            return t_LuceneDictionary::wrap_Object(LuceneDictionary(((t_LuceneDictionary *) arg)->object.this$));
          }
          static PyObject *t_LuceneDictionary_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LuceneDictionary::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_LuceneDictionary_init_(t_LuceneDictionary *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            LuceneDictionary object((jobject) NULL);

            if (!parseArgs(args, "ks", ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &a1))
            {
              INT_CALL(object = LuceneDictionary(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_LuceneDictionary_getEntryIterator(t_LuceneDictionary *self)
          {
            ::org::apache::lucene::search::suggest::InputIterator result((jobject) NULL);
            OBJ_CALL(result = self->object.getEntryIterator());
            return ::org::apache::lucene::search::suggest::t_InputIterator::wrap_Object(result);
          }

          static PyObject *t_LuceneDictionary_get__entryIterator(t_LuceneDictionary *self, void *data)
          {
            ::org::apache::lucene::search::suggest::InputIterator value((jobject) NULL);
            OBJ_CALL(value = self->object.getEntryIterator());
            return ::org::apache::lucene::search::suggest::t_InputIterator::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/SimpleFloatFunction.h"
#include "org/apache/lucene/queries/function/ValueSource.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *SimpleFloatFunction::class$ = NULL;
            jmethodID *SimpleFloatFunction::mids$ = NULL;
            bool SimpleFloatFunction::live$ = false;

            jclass SimpleFloatFunction::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/SimpleFloatFunction");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_ca78fe7a] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queries/function/ValueSource;)V");
                mids$[mid_getValues_4c566485] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/queries/function/FunctionValues;");
                mids$[mid_func_2223df21] = env->getMethodID(cls, "func", "(ILorg/apache/lucene/queries/function/FunctionValues;)F");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            SimpleFloatFunction::SimpleFloatFunction(const ::org::apache::lucene::queries::function::ValueSource & a0) : ::org::apache::lucene::queries::function::valuesource::SingleFunction(env->newObject(initializeClass, &mids$, mid_init$_ca78fe7a, a0.this$)) {}

            ::org::apache::lucene::queries::function::FunctionValues SimpleFloatFunction::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::FunctionValues(env->callObjectMethod(this$, mids$[mid_getValues_4c566485], a0.this$, a1.this$));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_SimpleFloatFunction_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_SimpleFloatFunction_instance_(PyTypeObject *type, PyObject *arg);
            static int t_SimpleFloatFunction_init_(t_SimpleFloatFunction *self, PyObject *args, PyObject *kwds);
            static PyObject *t_SimpleFloatFunction_getValues(t_SimpleFloatFunction *self, PyObject *args);

            static PyMethodDef t_SimpleFloatFunction__methods_[] = {
              DECLARE_METHOD(t_SimpleFloatFunction, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SimpleFloatFunction, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SimpleFloatFunction, getValues, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(SimpleFloatFunction, t_SimpleFloatFunction, ::org::apache::lucene::queries::function::valuesource::SingleFunction, SimpleFloatFunction, t_SimpleFloatFunction_init_, 0, 0, 0, 0, 0);

            void t_SimpleFloatFunction::install(PyObject *module)
            {
              installType(&PY_TYPE(SimpleFloatFunction), module, "SimpleFloatFunction", 0);
            }

            void t_SimpleFloatFunction::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(SimpleFloatFunction).tp_dict, "class_", make_descriptor(SimpleFloatFunction::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(SimpleFloatFunction).tp_dict, "wrapfn_", make_descriptor(t_SimpleFloatFunction::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(SimpleFloatFunction).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_SimpleFloatFunction_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, SimpleFloatFunction::initializeClass, 1)))
                return NULL;
              return t_SimpleFloatFunction::wrap_Object(SimpleFloatFunction(((t_SimpleFloatFunction *) arg)->object.this$));
            }
            static PyObject *t_SimpleFloatFunction_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, SimpleFloatFunction::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_SimpleFloatFunction_init_(t_SimpleFloatFunction *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::queries::function::ValueSource a0((jobject) NULL);
              SimpleFloatFunction object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::queries::function::ValueSource::initializeClass, &a0))
              {
                INT_CALL(object = SimpleFloatFunction(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_SimpleFloatFunction_getValues(t_SimpleFloatFunction *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::FunctionValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::t_FunctionValues::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(SimpleFloatFunction), (PyObject *) self, "getValues", args, 2);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/config/NumericConfig.h"
#include "org/apache/lucene/document/FieldType$NumericType.h"
#include "java/text/NumberFormat.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace config {

              ::java::lang::Class *NumericConfig::class$ = NULL;
              jmethodID *NumericConfig::mids$ = NULL;
              bool NumericConfig::live$ = false;

              jclass NumericConfig::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/config/NumericConfig");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_09c28ef7] = env->getMethodID(cls, "<init>", "(ILjava/text/NumberFormat;Lorg/apache/lucene/document/FieldType$NumericType;)V");
                  mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                  mids$[mid_getNumberFormat_6b701965] = env->getMethodID(cls, "getNumberFormat", "()Ljava/text/NumberFormat;");
                  mids$[mid_getPrecisionStep_54c6a179] = env->getMethodID(cls, "getPrecisionStep", "()I");
                  mids$[mid_getType_81bd17c2] = env->getMethodID(cls, "getType", "()Lorg/apache/lucene/document/FieldType$NumericType;");
                  mids$[mid_setNumberFormat_d2d1ba24] = env->getMethodID(cls, "setNumberFormat", "(Ljava/text/NumberFormat;)V");
                  mids$[mid_setPrecisionStep_39c7bd3c] = env->getMethodID(cls, "setPrecisionStep", "(I)V");
                  mids$[mid_setType_d9029e47] = env->getMethodID(cls, "setType", "(Lorg/apache/lucene/document/FieldType$NumericType;)V");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              NumericConfig::NumericConfig(jint a0, const ::java::text::NumberFormat & a1, const ::org::apache::lucene::document::FieldType$NumericType & a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_09c28ef7, a0, a1.this$, a2.this$)) {}

              jboolean NumericConfig::equals(const ::java::lang::Object & a0) const
              {
                return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
              }

              ::java::text::NumberFormat NumericConfig::getNumberFormat() const
              {
                return ::java::text::NumberFormat(env->callObjectMethod(this$, mids$[mid_getNumberFormat_6b701965]));
              }

              jint NumericConfig::getPrecisionStep() const
              {
                return env->callIntMethod(this$, mids$[mid_getPrecisionStep_54c6a179]);
              }

              ::org::apache::lucene::document::FieldType$NumericType NumericConfig::getType() const
              {
                return ::org::apache::lucene::document::FieldType$NumericType(env->callObjectMethod(this$, mids$[mid_getType_81bd17c2]));
              }

              void NumericConfig::setNumberFormat(const ::java::text::NumberFormat & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setNumberFormat_d2d1ba24], a0.this$);
              }

              void NumericConfig::setPrecisionStep(jint a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setPrecisionStep_39c7bd3c], a0);
              }

              void NumericConfig::setType(const ::org::apache::lucene::document::FieldType$NumericType & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setType_d9029e47], a0.this$);
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace config {
              static PyObject *t_NumericConfig_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_NumericConfig_instance_(PyTypeObject *type, PyObject *arg);
              static int t_NumericConfig_init_(t_NumericConfig *self, PyObject *args, PyObject *kwds);
              static PyObject *t_NumericConfig_equals(t_NumericConfig *self, PyObject *args);
              static PyObject *t_NumericConfig_getNumberFormat(t_NumericConfig *self);
              static PyObject *t_NumericConfig_getPrecisionStep(t_NumericConfig *self);
              static PyObject *t_NumericConfig_getType(t_NumericConfig *self);
              static PyObject *t_NumericConfig_setNumberFormat(t_NumericConfig *self, PyObject *arg);
              static PyObject *t_NumericConfig_setPrecisionStep(t_NumericConfig *self, PyObject *arg);
              static PyObject *t_NumericConfig_setType(t_NumericConfig *self, PyObject *arg);
              static PyObject *t_NumericConfig_get__numberFormat(t_NumericConfig *self, void *data);
              static int t_NumericConfig_set__numberFormat(t_NumericConfig *self, PyObject *arg, void *data);
              static PyObject *t_NumericConfig_get__precisionStep(t_NumericConfig *self, void *data);
              static int t_NumericConfig_set__precisionStep(t_NumericConfig *self, PyObject *arg, void *data);
              static PyObject *t_NumericConfig_get__type(t_NumericConfig *self, void *data);
              static int t_NumericConfig_set__type(t_NumericConfig *self, PyObject *arg, void *data);
              static PyGetSetDef t_NumericConfig__fields_[] = {
                DECLARE_GETSET_FIELD(t_NumericConfig, numberFormat),
                DECLARE_GETSET_FIELD(t_NumericConfig, precisionStep),
                DECLARE_GETSET_FIELD(t_NumericConfig, type),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_NumericConfig__methods_[] = {
                DECLARE_METHOD(t_NumericConfig, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_NumericConfig, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_NumericConfig, equals, METH_VARARGS),
                DECLARE_METHOD(t_NumericConfig, getNumberFormat, METH_NOARGS),
                DECLARE_METHOD(t_NumericConfig, getPrecisionStep, METH_NOARGS),
                DECLARE_METHOD(t_NumericConfig, getType, METH_NOARGS),
                DECLARE_METHOD(t_NumericConfig, setNumberFormat, METH_O),
                DECLARE_METHOD(t_NumericConfig, setPrecisionStep, METH_O),
                DECLARE_METHOD(t_NumericConfig, setType, METH_O),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(NumericConfig, t_NumericConfig, ::java::lang::Object, NumericConfig, t_NumericConfig_init_, 0, 0, t_NumericConfig__fields_, 0, 0);

              void t_NumericConfig::install(PyObject *module)
              {
                installType(&PY_TYPE(NumericConfig), module, "NumericConfig", 0);
              }

              void t_NumericConfig::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(NumericConfig).tp_dict, "class_", make_descriptor(NumericConfig::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(NumericConfig).tp_dict, "wrapfn_", make_descriptor(t_NumericConfig::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(NumericConfig).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_NumericConfig_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, NumericConfig::initializeClass, 1)))
                  return NULL;
                return t_NumericConfig::wrap_Object(NumericConfig(((t_NumericConfig *) arg)->object.this$));
              }
              static PyObject *t_NumericConfig_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, NumericConfig::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_NumericConfig_init_(t_NumericConfig *self, PyObject *args, PyObject *kwds)
              {
                jint a0;
                ::java::text::NumberFormat a1((jobject) NULL);
                ::org::apache::lucene::document::FieldType$NumericType a2((jobject) NULL);
                PyTypeObject **p2;
                NumericConfig object((jobject) NULL);

                if (!parseArgs(args, "IkK", ::java::text::NumberFormat::initializeClass, ::org::apache::lucene::document::FieldType$NumericType::initializeClass, &a0, &a1, &a2, &p2, ::org::apache::lucene::document::t_FieldType$NumericType::parameters_))
                {
                  INT_CALL(object = NumericConfig(a0, a1, a2));
                  self->object = object;
                }
                else
                {
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_NumericConfig_equals(t_NumericConfig *self, PyObject *args)
              {
                ::java::lang::Object a0((jobject) NULL);
                jboolean result;

                if (!parseArgs(args, "o", &a0))
                {
                  OBJ_CALL(result = self->object.equals(a0));
                  Py_RETURN_BOOL(result);
                }

                return callSuper(&PY_TYPE(NumericConfig), (PyObject *) self, "equals", args, 2);
              }

              static PyObject *t_NumericConfig_getNumberFormat(t_NumericConfig *self)
              {
                ::java::text::NumberFormat result((jobject) NULL);
                OBJ_CALL(result = self->object.getNumberFormat());
                return ::java::text::t_NumberFormat::wrap_Object(result);
              }

              static PyObject *t_NumericConfig_getPrecisionStep(t_NumericConfig *self)
              {
                jint result;
                OBJ_CALL(result = self->object.getPrecisionStep());
                return PyInt_FromLong((long) result);
              }

              static PyObject *t_NumericConfig_getType(t_NumericConfig *self)
              {
                ::org::apache::lucene::document::FieldType$NumericType result((jobject) NULL);
                OBJ_CALL(result = self->object.getType());
                return ::org::apache::lucene::document::t_FieldType$NumericType::wrap_Object(result);
              }

              static PyObject *t_NumericConfig_setNumberFormat(t_NumericConfig *self, PyObject *arg)
              {
                ::java::text::NumberFormat a0((jobject) NULL);

                if (!parseArg(arg, "k", ::java::text::NumberFormat::initializeClass, &a0))
                {
                  OBJ_CALL(self->object.setNumberFormat(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setNumberFormat", arg);
                return NULL;
              }

              static PyObject *t_NumericConfig_setPrecisionStep(t_NumericConfig *self, PyObject *arg)
              {
                jint a0;

                if (!parseArg(arg, "I", &a0))
                {
                  OBJ_CALL(self->object.setPrecisionStep(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setPrecisionStep", arg);
                return NULL;
              }

              static PyObject *t_NumericConfig_setType(t_NumericConfig *self, PyObject *arg)
              {
                ::org::apache::lucene::document::FieldType$NumericType a0((jobject) NULL);
                PyTypeObject **p0;

                if (!parseArg(arg, "K", ::org::apache::lucene::document::FieldType$NumericType::initializeClass, &a0, &p0, ::org::apache::lucene::document::t_FieldType$NumericType::parameters_))
                {
                  OBJ_CALL(self->object.setType(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setType", arg);
                return NULL;
              }

              static PyObject *t_NumericConfig_get__numberFormat(t_NumericConfig *self, void *data)
              {
                ::java::text::NumberFormat value((jobject) NULL);
                OBJ_CALL(value = self->object.getNumberFormat());
                return ::java::text::t_NumberFormat::wrap_Object(value);
              }
              static int t_NumericConfig_set__numberFormat(t_NumericConfig *self, PyObject *arg, void *data)
              {
                {
                  ::java::text::NumberFormat value((jobject) NULL);
                  if (!parseArg(arg, "k", ::java::text::NumberFormat::initializeClass, &value))
                  {
                    INT_CALL(self->object.setNumberFormat(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "numberFormat", arg);
                return -1;
              }

              static PyObject *t_NumericConfig_get__precisionStep(t_NumericConfig *self, void *data)
              {
                jint value;
                OBJ_CALL(value = self->object.getPrecisionStep());
                return PyInt_FromLong((long) value);
              }
              static int t_NumericConfig_set__precisionStep(t_NumericConfig *self, PyObject *arg, void *data)
              {
                {
                  jint value;
                  if (!parseArg(arg, "I", &value))
                  {
                    INT_CALL(self->object.setPrecisionStep(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "precisionStep", arg);
                return -1;
              }

              static PyObject *t_NumericConfig_get__type(t_NumericConfig *self, void *data)
              {
                ::org::apache::lucene::document::FieldType$NumericType value((jobject) NULL);
                OBJ_CALL(value = self->object.getType());
                return ::org::apache::lucene::document::t_FieldType$NumericType::wrap_Object(value);
              }
              static int t_NumericConfig_set__type(t_NumericConfig *self, PyObject *arg, void *data)
              {
                {
                  ::org::apache::lucene::document::FieldType$NumericType value((jobject) NULL);
                  if (!parseArg(arg, "k", ::org::apache::lucene::document::FieldType$NumericType::initializeClass, &value))
                  {
                    INT_CALL(self->object.setType(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "type", arg);
                return -1;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ga/IrishLowerCaseFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ga {

          ::java::lang::Class *IrishLowerCaseFilter::class$ = NULL;
          jmethodID *IrishLowerCaseFilter::mids$ = NULL;
          bool IrishLowerCaseFilter::live$ = false;

          jclass IrishLowerCaseFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ga/IrishLowerCaseFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          IrishLowerCaseFilter::IrishLowerCaseFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean IrishLowerCaseFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ga {
          static PyObject *t_IrishLowerCaseFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IrishLowerCaseFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_IrishLowerCaseFilter_init_(t_IrishLowerCaseFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_IrishLowerCaseFilter_incrementToken(t_IrishLowerCaseFilter *self, PyObject *args);

          static PyMethodDef t_IrishLowerCaseFilter__methods_[] = {
            DECLARE_METHOD(t_IrishLowerCaseFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IrishLowerCaseFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IrishLowerCaseFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(IrishLowerCaseFilter, t_IrishLowerCaseFilter, ::org::apache::lucene::analysis::TokenFilter, IrishLowerCaseFilter, t_IrishLowerCaseFilter_init_, 0, 0, 0, 0, 0);

          void t_IrishLowerCaseFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(IrishLowerCaseFilter), module, "IrishLowerCaseFilter", 0);
          }

          void t_IrishLowerCaseFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(IrishLowerCaseFilter).tp_dict, "class_", make_descriptor(IrishLowerCaseFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(IrishLowerCaseFilter).tp_dict, "wrapfn_", make_descriptor(t_IrishLowerCaseFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(IrishLowerCaseFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_IrishLowerCaseFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, IrishLowerCaseFilter::initializeClass, 1)))
              return NULL;
            return t_IrishLowerCaseFilter::wrap_Object(IrishLowerCaseFilter(((t_IrishLowerCaseFilter *) arg)->object.this$));
          }
          static PyObject *t_IrishLowerCaseFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, IrishLowerCaseFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_IrishLowerCaseFilter_init_(t_IrishLowerCaseFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            IrishLowerCaseFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = IrishLowerCaseFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_IrishLowerCaseFilter_incrementToken(t_IrishLowerCaseFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(IrishLowerCaseFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/highlight/SimpleFragmenter.h"
#include "org/apache/lucene/search/highlight/Fragmenter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {

          ::java::lang::Class *SimpleFragmenter::class$ = NULL;
          jmethodID *SimpleFragmenter::mids$ = NULL;
          bool SimpleFragmenter::live$ = false;

          jclass SimpleFragmenter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/highlight/SimpleFragmenter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
              mids$[mid_getFragmentSize_54c6a179] = env->getMethodID(cls, "getFragmentSize", "()I");
              mids$[mid_isNewFragment_54c6a16a] = env->getMethodID(cls, "isNewFragment", "()Z");
              mids$[mid_setFragmentSize_39c7bd3c] = env->getMethodID(cls, "setFragmentSize", "(I)V");
              mids$[mid_start_7d0c5392] = env->getMethodID(cls, "start", "(Ljava/lang/String;Lorg/apache/lucene/analysis/TokenStream;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SimpleFragmenter::SimpleFragmenter() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          SimpleFragmenter::SimpleFragmenter(jint a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

          jint SimpleFragmenter::getFragmentSize() const
          {
            return env->callIntMethod(this$, mids$[mid_getFragmentSize_54c6a179]);
          }

          jboolean SimpleFragmenter::isNewFragment() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isNewFragment_54c6a16a]);
          }

          void SimpleFragmenter::setFragmentSize(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setFragmentSize_39c7bd3c], a0);
          }

          void SimpleFragmenter::start(const ::java::lang::String & a0, const ::org::apache::lucene::analysis::TokenStream & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_start_7d0c5392], a0.this$, a1.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {
          static PyObject *t_SimpleFragmenter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SimpleFragmenter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SimpleFragmenter_init_(t_SimpleFragmenter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SimpleFragmenter_getFragmentSize(t_SimpleFragmenter *self);
          static PyObject *t_SimpleFragmenter_isNewFragment(t_SimpleFragmenter *self);
          static PyObject *t_SimpleFragmenter_setFragmentSize(t_SimpleFragmenter *self, PyObject *arg);
          static PyObject *t_SimpleFragmenter_start(t_SimpleFragmenter *self, PyObject *args);
          static PyObject *t_SimpleFragmenter_get__fragmentSize(t_SimpleFragmenter *self, void *data);
          static int t_SimpleFragmenter_set__fragmentSize(t_SimpleFragmenter *self, PyObject *arg, void *data);
          static PyObject *t_SimpleFragmenter_get__newFragment(t_SimpleFragmenter *self, void *data);
          static PyGetSetDef t_SimpleFragmenter__fields_[] = {
            DECLARE_GETSET_FIELD(t_SimpleFragmenter, fragmentSize),
            DECLARE_GET_FIELD(t_SimpleFragmenter, newFragment),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SimpleFragmenter__methods_[] = {
            DECLARE_METHOD(t_SimpleFragmenter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SimpleFragmenter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SimpleFragmenter, getFragmentSize, METH_NOARGS),
            DECLARE_METHOD(t_SimpleFragmenter, isNewFragment, METH_NOARGS),
            DECLARE_METHOD(t_SimpleFragmenter, setFragmentSize, METH_O),
            DECLARE_METHOD(t_SimpleFragmenter, start, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SimpleFragmenter, t_SimpleFragmenter, ::java::lang::Object, SimpleFragmenter, t_SimpleFragmenter_init_, 0, 0, t_SimpleFragmenter__fields_, 0, 0);

          void t_SimpleFragmenter::install(PyObject *module)
          {
            installType(&PY_TYPE(SimpleFragmenter), module, "SimpleFragmenter", 0);
          }

          void t_SimpleFragmenter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SimpleFragmenter).tp_dict, "class_", make_descriptor(SimpleFragmenter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SimpleFragmenter).tp_dict, "wrapfn_", make_descriptor(t_SimpleFragmenter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SimpleFragmenter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SimpleFragmenter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SimpleFragmenter::initializeClass, 1)))
              return NULL;
            return t_SimpleFragmenter::wrap_Object(SimpleFragmenter(((t_SimpleFragmenter *) arg)->object.this$));
          }
          static PyObject *t_SimpleFragmenter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SimpleFragmenter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SimpleFragmenter_init_(t_SimpleFragmenter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                SimpleFragmenter object((jobject) NULL);

                INT_CALL(object = SimpleFragmenter());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                jint a0;
                SimpleFragmenter object((jobject) NULL);

                if (!parseArgs(args, "I", &a0))
                {
                  INT_CALL(object = SimpleFragmenter(a0));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SimpleFragmenter_getFragmentSize(t_SimpleFragmenter *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getFragmentSize());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_SimpleFragmenter_isNewFragment(t_SimpleFragmenter *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isNewFragment());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_SimpleFragmenter_setFragmentSize(t_SimpleFragmenter *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setFragmentSize(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setFragmentSize", arg);
            return NULL;
          }

          static PyObject *t_SimpleFragmenter_start(t_SimpleFragmenter *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);

            if (!parseArgs(args, "sk", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.start(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "start", args);
            return NULL;
          }

          static PyObject *t_SimpleFragmenter_get__fragmentSize(t_SimpleFragmenter *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getFragmentSize());
            return PyInt_FromLong((long) value);
          }
          static int t_SimpleFragmenter_set__fragmentSize(t_SimpleFragmenter *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setFragmentSize(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "fragmentSize", arg);
            return -1;
          }

          static PyObject *t_SimpleFragmenter_get__newFragment(t_SimpleFragmenter *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isNewFragment());
            Py_RETURN_BOOL(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/MergeState$CheckAbort.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/index/MergePolicy$OneMerge.h"
#include "org/apache/lucene/index/MergePolicy$MergeAbortedException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *MergeState$CheckAbort::class$ = NULL;
        jmethodID *MergeState$CheckAbort::mids$ = NULL;
        bool MergeState$CheckAbort::live$ = false;

        jclass MergeState$CheckAbort::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/MergeState$CheckAbort");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_47ab6527] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/MergePolicy$OneMerge;Lorg/apache/lucene/store/Directory;)V");
            mids$[mid_work_5d1c7645] = env->getMethodID(cls, "work", "(D)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        MergeState$CheckAbort::MergeState$CheckAbort(const ::org::apache::lucene::index::MergePolicy$OneMerge & a0, const ::org::apache::lucene::store::Directory & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_47ab6527, a0.this$, a1.this$)) {}

        void MergeState$CheckAbort::work(jdouble a0) const
        {
          env->callVoidMethod(this$, mids$[mid_work_5d1c7645], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_MergeState$CheckAbort_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MergeState$CheckAbort_instance_(PyTypeObject *type, PyObject *arg);
        static int t_MergeState$CheckAbort_init_(t_MergeState$CheckAbort *self, PyObject *args, PyObject *kwds);
        static PyObject *t_MergeState$CheckAbort_work(t_MergeState$CheckAbort *self, PyObject *arg);

        static PyMethodDef t_MergeState$CheckAbort__methods_[] = {
          DECLARE_METHOD(t_MergeState$CheckAbort, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MergeState$CheckAbort, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MergeState$CheckAbort, work, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MergeState$CheckAbort, t_MergeState$CheckAbort, ::java::lang::Object, MergeState$CheckAbort, t_MergeState$CheckAbort_init_, 0, 0, 0, 0, 0);

        void t_MergeState$CheckAbort::install(PyObject *module)
        {
          installType(&PY_TYPE(MergeState$CheckAbort), module, "MergeState$CheckAbort", 0);
        }

        void t_MergeState$CheckAbort::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MergeState$CheckAbort).tp_dict, "class_", make_descriptor(MergeState$CheckAbort::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MergeState$CheckAbort).tp_dict, "wrapfn_", make_descriptor(t_MergeState$CheckAbort::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MergeState$CheckAbort).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MergeState$CheckAbort_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MergeState$CheckAbort::initializeClass, 1)))
            return NULL;
          return t_MergeState$CheckAbort::wrap_Object(MergeState$CheckAbort(((t_MergeState$CheckAbort *) arg)->object.this$));
        }
        static PyObject *t_MergeState$CheckAbort_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MergeState$CheckAbort::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_MergeState$CheckAbort_init_(t_MergeState$CheckAbort *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::index::MergePolicy$OneMerge a0((jobject) NULL);
          ::org::apache::lucene::store::Directory a1((jobject) NULL);
          MergeState$CheckAbort object((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::index::MergePolicy$OneMerge::initializeClass, ::org::apache::lucene::store::Directory::initializeClass, &a0, &a1))
          {
            INT_CALL(object = MergeState$CheckAbort(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_MergeState$CheckAbort_work(t_MergeState$CheckAbort *self, PyObject *arg)
        {
          jdouble a0;

          if (!parseArg(arg, "D", &a0))
          {
            OBJ_CALL(self->object.work(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "work", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/ext/ExtensionQuery.h"
#include "java/lang/String.h"
#include "org/apache/lucene/queryparser/classic/QueryParser.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace ext {

          ::java::lang::Class *ExtensionQuery::class$ = NULL;
          jmethodID *ExtensionQuery::mids$ = NULL;
          bool ExtensionQuery::live$ = false;

          jclass ExtensionQuery::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/ext/ExtensionQuery");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_a24cebd3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/classic/QueryParser;Ljava/lang/String;Ljava/lang/String;)V");
              mids$[mid_getField_14c7b5c5] = env->getMethodID(cls, "getField", "()Ljava/lang/String;");
              mids$[mid_getRawQueryString_14c7b5c5] = env->getMethodID(cls, "getRawQueryString", "()Ljava/lang/String;");
              mids$[mid_getTopLevelParser_f96fcc72] = env->getMethodID(cls, "getTopLevelParser", "()Lorg/apache/lucene/queryparser/classic/QueryParser;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ExtensionQuery::ExtensionQuery(const ::org::apache::lucene::queryparser::classic::QueryParser & a0, const ::java::lang::String & a1, const ::java::lang::String & a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_a24cebd3, a0.this$, a1.this$, a2.this$)) {}

          ::java::lang::String ExtensionQuery::getField() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getField_14c7b5c5]));
          }

          ::java::lang::String ExtensionQuery::getRawQueryString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getRawQueryString_14c7b5c5]));
          }

          ::org::apache::lucene::queryparser::classic::QueryParser ExtensionQuery::getTopLevelParser() const
          {
            return ::org::apache::lucene::queryparser::classic::QueryParser(env->callObjectMethod(this$, mids$[mid_getTopLevelParser_f96fcc72]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace ext {
          static PyObject *t_ExtensionQuery_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ExtensionQuery_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ExtensionQuery_init_(t_ExtensionQuery *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ExtensionQuery_getField(t_ExtensionQuery *self);
          static PyObject *t_ExtensionQuery_getRawQueryString(t_ExtensionQuery *self);
          static PyObject *t_ExtensionQuery_getTopLevelParser(t_ExtensionQuery *self);
          static PyObject *t_ExtensionQuery_get__field(t_ExtensionQuery *self, void *data);
          static PyObject *t_ExtensionQuery_get__rawQueryString(t_ExtensionQuery *self, void *data);
          static PyObject *t_ExtensionQuery_get__topLevelParser(t_ExtensionQuery *self, void *data);
          static PyGetSetDef t_ExtensionQuery__fields_[] = {
            DECLARE_GET_FIELD(t_ExtensionQuery, field),
            DECLARE_GET_FIELD(t_ExtensionQuery, rawQueryString),
            DECLARE_GET_FIELD(t_ExtensionQuery, topLevelParser),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_ExtensionQuery__methods_[] = {
            DECLARE_METHOD(t_ExtensionQuery, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ExtensionQuery, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ExtensionQuery, getField, METH_NOARGS),
            DECLARE_METHOD(t_ExtensionQuery, getRawQueryString, METH_NOARGS),
            DECLARE_METHOD(t_ExtensionQuery, getTopLevelParser, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ExtensionQuery, t_ExtensionQuery, ::java::lang::Object, ExtensionQuery, t_ExtensionQuery_init_, 0, 0, t_ExtensionQuery__fields_, 0, 0);

          void t_ExtensionQuery::install(PyObject *module)
          {
            installType(&PY_TYPE(ExtensionQuery), module, "ExtensionQuery", 0);
          }

          void t_ExtensionQuery::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ExtensionQuery).tp_dict, "class_", make_descriptor(ExtensionQuery::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ExtensionQuery).tp_dict, "wrapfn_", make_descriptor(t_ExtensionQuery::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ExtensionQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ExtensionQuery_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ExtensionQuery::initializeClass, 1)))
              return NULL;
            return t_ExtensionQuery::wrap_Object(ExtensionQuery(((t_ExtensionQuery *) arg)->object.this$));
          }
          static PyObject *t_ExtensionQuery_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ExtensionQuery::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ExtensionQuery_init_(t_ExtensionQuery *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::queryparser::classic::QueryParser a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            ::java::lang::String a2((jobject) NULL);
            ExtensionQuery object((jobject) NULL);

            if (!parseArgs(args, "kss", ::org::apache::lucene::queryparser::classic::QueryParser::initializeClass, &a0, &a1, &a2))
            {
              INT_CALL(object = ExtensionQuery(a0, a1, a2));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ExtensionQuery_getField(t_ExtensionQuery *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.getField());
            return j2p(result);
          }

          static PyObject *t_ExtensionQuery_getRawQueryString(t_ExtensionQuery *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.getRawQueryString());
            return j2p(result);
          }

          static PyObject *t_ExtensionQuery_getTopLevelParser(t_ExtensionQuery *self)
          {
            ::org::apache::lucene::queryparser::classic::QueryParser result((jobject) NULL);
            OBJ_CALL(result = self->object.getTopLevelParser());
            return ::org::apache::lucene::queryparser::classic::t_QueryParser::wrap_Object(result);
          }

          static PyObject *t_ExtensionQuery_get__field(t_ExtensionQuery *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getField());
            return j2p(value);
          }

          static PyObject *t_ExtensionQuery_get__rawQueryString(t_ExtensionQuery *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getRawQueryString());
            return j2p(value);
          }

          static PyObject *t_ExtensionQuery_get__topLevelParser(t_ExtensionQuery *self, void *data)
          {
            ::org::apache::lucene::queryparser::classic::QueryParser value((jobject) NULL);
            OBJ_CALL(value = self->object.getTopLevelParser());
            return ::org::apache::lucene::queryparser::classic::t_QueryParser::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/grouping/function/FunctionSecondPassGroupingCollector.h"
#include "org/apache/lucene/queries/function/ValueSource.h"
#include "org/apache/lucene/search/grouping/SearchGroup.h"
#include "org/apache/lucene/search/Sort.h"
#include "java/lang/Class.h"
#include "java/util/Collection.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/util/mutable/MutableValue.h"
#include "java/lang/Object.h"
#include "java/io/IOException.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          namespace function {

            ::java::lang::Class *FunctionSecondPassGroupingCollector::class$ = NULL;
            jmethodID *FunctionSecondPassGroupingCollector::mids$ = NULL;
            bool FunctionSecondPassGroupingCollector::live$ = false;

            jclass FunctionSecondPassGroupingCollector::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/grouping/function/FunctionSecondPassGroupingCollector");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_3599aebe] = env->getMethodID(cls, "<init>", "(Ljava/util/Collection;Lorg/apache/lucene/search/Sort;Lorg/apache/lucene/search/Sort;IZZZLorg/apache/lucene/queries/function/ValueSource;Ljava/util/Map;)V");
                mids$[mid_setNextReader_a6f59947] = env->getMethodID(cls, "setNextReader", "(Lorg/apache/lucene/index/AtomicReaderContext;)V");
                mids$[mid_retrieveGroup_e4de8d52] = env->getMethodID(cls, "retrieveGroup", "(I)Lorg/apache/lucene/search/grouping/AbstractSecondPassGroupingCollector$SearchGroupDocs;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            FunctionSecondPassGroupingCollector::FunctionSecondPassGroupingCollector(const ::java::util::Collection & a0, const ::org::apache::lucene::search::Sort & a1, const ::org::apache::lucene::search::Sort & a2, jint a3, jboolean a4, jboolean a5, jboolean a6, const ::org::apache::lucene::queries::function::ValueSource & a7, const ::java::util::Map & a8) : ::org::apache::lucene::search::grouping::AbstractSecondPassGroupingCollector(env->newObject(initializeClass, &mids$, mid_init$_3599aebe, a0.this$, a1.this$, a2.this$, a3, a4, a5, a6, a7.this$, a8.this$)) {}

            void FunctionSecondPassGroupingCollector::setNextReader(const ::org::apache::lucene::index::AtomicReaderContext & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setNextReader_a6f59947], a0.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          namespace function {
            static PyObject *t_FunctionSecondPassGroupingCollector_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_FunctionSecondPassGroupingCollector_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_FunctionSecondPassGroupingCollector_of_(t_FunctionSecondPassGroupingCollector *self, PyObject *args);
            static int t_FunctionSecondPassGroupingCollector_init_(t_FunctionSecondPassGroupingCollector *self, PyObject *args, PyObject *kwds);
            static PyObject *t_FunctionSecondPassGroupingCollector_setNextReader(t_FunctionSecondPassGroupingCollector *self, PyObject *args);
            static int t_FunctionSecondPassGroupingCollector_set__nextReader(t_FunctionSecondPassGroupingCollector *self, PyObject *arg, void *data);
            static PyObject *t_FunctionSecondPassGroupingCollector_get__parameters_(t_FunctionSecondPassGroupingCollector *self, void *data);
            static PyGetSetDef t_FunctionSecondPassGroupingCollector__fields_[] = {
              DECLARE_SET_FIELD(t_FunctionSecondPassGroupingCollector, nextReader),
              DECLARE_GET_FIELD(t_FunctionSecondPassGroupingCollector, parameters_),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_FunctionSecondPassGroupingCollector__methods_[] = {
              DECLARE_METHOD(t_FunctionSecondPassGroupingCollector, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FunctionSecondPassGroupingCollector, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FunctionSecondPassGroupingCollector, of_, METH_VARARGS),
              DECLARE_METHOD(t_FunctionSecondPassGroupingCollector, setNextReader, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(FunctionSecondPassGroupingCollector, t_FunctionSecondPassGroupingCollector, ::org::apache::lucene::search::grouping::AbstractSecondPassGroupingCollector, FunctionSecondPassGroupingCollector, t_FunctionSecondPassGroupingCollector_init_, 0, 0, t_FunctionSecondPassGroupingCollector__fields_, 0, 0);
            PyObject *t_FunctionSecondPassGroupingCollector::wrap_Object(const FunctionSecondPassGroupingCollector& object, PyTypeObject *p0)
            {
              PyObject *obj = t_FunctionSecondPassGroupingCollector::wrap_Object(object);
              if (obj != NULL && obj != Py_None)
              {
                t_FunctionSecondPassGroupingCollector *self = (t_FunctionSecondPassGroupingCollector *) obj;
                self->parameters[0] = p0;
              }
              return obj;
            }

            PyObject *t_FunctionSecondPassGroupingCollector::wrap_jobject(const jobject& object, PyTypeObject *p0)
            {
              PyObject *obj = t_FunctionSecondPassGroupingCollector::wrap_jobject(object);
              if (obj != NULL && obj != Py_None)
              {
                t_FunctionSecondPassGroupingCollector *self = (t_FunctionSecondPassGroupingCollector *) obj;
                self->parameters[0] = p0;
              }
              return obj;
            }

            void t_FunctionSecondPassGroupingCollector::install(PyObject *module)
            {
              installType(&PY_TYPE(FunctionSecondPassGroupingCollector), module, "FunctionSecondPassGroupingCollector", 0);
            }

            void t_FunctionSecondPassGroupingCollector::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(FunctionSecondPassGroupingCollector).tp_dict, "class_", make_descriptor(FunctionSecondPassGroupingCollector::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(FunctionSecondPassGroupingCollector).tp_dict, "wrapfn_", make_descriptor(t_FunctionSecondPassGroupingCollector::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(FunctionSecondPassGroupingCollector).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_FunctionSecondPassGroupingCollector_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, FunctionSecondPassGroupingCollector::initializeClass, 1)))
                return NULL;
              return t_FunctionSecondPassGroupingCollector::wrap_Object(FunctionSecondPassGroupingCollector(((t_FunctionSecondPassGroupingCollector *) arg)->object.this$));
            }
            static PyObject *t_FunctionSecondPassGroupingCollector_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, FunctionSecondPassGroupingCollector::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_FunctionSecondPassGroupingCollector_of_(t_FunctionSecondPassGroupingCollector *self, PyObject *args)
            {
              if (!parseArg(args, "T", 1, &(self->parameters)))
                Py_RETURN_SELF;
              return PyErr_SetArgsError((PyObject *) self, "of_", args);
            }

            static int t_FunctionSecondPassGroupingCollector_init_(t_FunctionSecondPassGroupingCollector *self, PyObject *args, PyObject *kwds)
            {
              ::java::util::Collection a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::search::Sort a1((jobject) NULL);
              ::org::apache::lucene::search::Sort a2((jobject) NULL);
              jint a3;
              jboolean a4;
              jboolean a5;
              jboolean a6;
              ::org::apache::lucene::queries::function::ValueSource a7((jobject) NULL);
              ::java::util::Map a8((jobject) NULL);
              PyTypeObject **p8;
              FunctionSecondPassGroupingCollector object((jobject) NULL);

              if (!parseArgs(args, "KkkIZZZkK", ::java::util::Collection::initializeClass, ::org::apache::lucene::search::Sort::initializeClass, ::org::apache::lucene::search::Sort::initializeClass, ::org::apache::lucene::queries::function::ValueSource::initializeClass, ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8, &p8, ::java::util::t_Map::parameters_))
              {
                INT_CALL(object = FunctionSecondPassGroupingCollector(a0, a1, a2, a3, a4, a5, a6, a7, a8));
                self->object = object;
                self->parameters[0] = &::org::apache::lucene::util::mutable$::PY_TYPE(MutableValue);
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_FunctionSecondPassGroupingCollector_setNextReader(t_FunctionSecondPassGroupingCollector *self, PyObject *args)
            {
              ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0))
              {
                OBJ_CALL(self->object.setNextReader(a0));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(FunctionSecondPassGroupingCollector), (PyObject *) self, "setNextReader", args, 2);
            }
            static PyObject *t_FunctionSecondPassGroupingCollector_get__parameters_(t_FunctionSecondPassGroupingCollector *self, void *data)
            {
              return typeParameters(self->parameters, sizeof(self->parameters));
            }

            static int t_FunctionSecondPassGroupingCollector_set__nextReader(t_FunctionSecondPassGroupingCollector *self, PyObject *arg, void *data)
            {
              {
                ::org::apache::lucene::index::AtomicReaderContext value((jobject) NULL);
                if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &value))
                {
                  INT_CALL(self->object.setNextReader(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "nextReader", arg);
              return -1;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/tst/TSTLookup.h"
#include "org/apache/lucene/search/suggest/InputIterator.h"
#include "java/lang/Class.h"
#include "java/lang/CharSequence.h"
#include "org/apache/lucene/search/suggest/Lookup$LookupResult.h"
#include "java/util/Set.h"
#include "java/util/List.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "org/apache/lucene/store/DataInput.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace tst {

            ::java::lang::Class *TSTLookup::class$ = NULL;
            jmethodID *TSTLookup::mids$ = NULL;
            bool TSTLookup::live$ = false;

            jclass TSTLookup::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/tst/TSTLookup");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_add_cb8bea96] = env->getMethodID(cls, "add", "(Ljava/lang/CharSequence;Ljava/lang/Object;)Z");
                mids$[mid_build_1754a234] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/search/suggest/InputIterator;)V");
                mids$[mid_get_a739ccff] = env->getMethodID(cls, "get", "(Ljava/lang/CharSequence;)Ljava/lang/Object;");
                mids$[mid_getCount_54c6a17a] = env->getMethodID(cls, "getCount", "()J");
                mids$[mid_load_f5d6a55d] = env->getMethodID(cls, "load", "(Lorg/apache/lucene/store/DataInput;)Z");
                mids$[mid_lookup_dd3e9f51] = env->getMethodID(cls, "lookup", "(Ljava/lang/CharSequence;Ljava/util/Set;ZI)Ljava/util/List;");
                mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");
                mids$[mid_store_27875f5b] = env->getMethodID(cls, "store", "(Lorg/apache/lucene/store/DataOutput;)Z");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            TSTLookup::TSTLookup() : ::org::apache::lucene::search::suggest::Lookup(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

            jboolean TSTLookup::add(const ::java::lang::CharSequence & a0, const ::java::lang::Object & a1) const
            {
              return env->callBooleanMethod(this$, mids$[mid_add_cb8bea96], a0.this$, a1.this$);
            }

            void TSTLookup::build(const ::org::apache::lucene::search::suggest::InputIterator & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_build_1754a234], a0.this$);
            }

            ::java::lang::Object TSTLookup::get(const ::java::lang::CharSequence & a0) const
            {
              return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_get_a739ccff], a0.this$));
            }

            jlong TSTLookup::getCount() const
            {
              return env->callLongMethod(this$, mids$[mid_getCount_54c6a17a]);
            }

            jboolean TSTLookup::load(const ::org::apache::lucene::store::DataInput & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_load_f5d6a55d], a0.this$);
            }

            ::java::util::List TSTLookup::lookup(const ::java::lang::CharSequence & a0, const ::java::util::Set & a1, jboolean a2, jint a3) const
            {
              return ::java::util::List(env->callObjectMethod(this$, mids$[mid_lookup_dd3e9f51], a0.this$, a1.this$, a2, a3));
            }

            jlong TSTLookup::ramBytesUsed() const
            {
              return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
            }

            jboolean TSTLookup::store(const ::org::apache::lucene::store::DataOutput & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_store_27875f5b], a0.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace tst {
            static PyObject *t_TSTLookup_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_TSTLookup_instance_(PyTypeObject *type, PyObject *arg);
            static int t_TSTLookup_init_(t_TSTLookup *self, PyObject *args, PyObject *kwds);
            static PyObject *t_TSTLookup_add(t_TSTLookup *self, PyObject *args);
            static PyObject *t_TSTLookup_build(t_TSTLookup *self, PyObject *args);
            static PyObject *t_TSTLookup_get(t_TSTLookup *self, PyObject *arg);
            static PyObject *t_TSTLookup_getCount(t_TSTLookup *self, PyObject *args);
            static PyObject *t_TSTLookup_load(t_TSTLookup *self, PyObject *args);
            static PyObject *t_TSTLookup_lookup(t_TSTLookup *self, PyObject *args);
            static PyObject *t_TSTLookup_ramBytesUsed(t_TSTLookup *self, PyObject *args);
            static PyObject *t_TSTLookup_store(t_TSTLookup *self, PyObject *args);
            static PyObject *t_TSTLookup_get__count(t_TSTLookup *self, void *data);
            static PyGetSetDef t_TSTLookup__fields_[] = {
              DECLARE_GET_FIELD(t_TSTLookup, count),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_TSTLookup__methods_[] = {
              DECLARE_METHOD(t_TSTLookup, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TSTLookup, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TSTLookup, add, METH_VARARGS),
              DECLARE_METHOD(t_TSTLookup, build, METH_VARARGS),
              DECLARE_METHOD(t_TSTLookup, get, METH_O),
              DECLARE_METHOD(t_TSTLookup, getCount, METH_VARARGS),
              DECLARE_METHOD(t_TSTLookup, load, METH_VARARGS),
              DECLARE_METHOD(t_TSTLookup, lookup, METH_VARARGS),
              DECLARE_METHOD(t_TSTLookup, ramBytesUsed, METH_VARARGS),
              DECLARE_METHOD(t_TSTLookup, store, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(TSTLookup, t_TSTLookup, ::org::apache::lucene::search::suggest::Lookup, TSTLookup, t_TSTLookup_init_, 0, 0, t_TSTLookup__fields_, 0, 0);

            void t_TSTLookup::install(PyObject *module)
            {
              installType(&PY_TYPE(TSTLookup), module, "TSTLookup", 0);
            }

            void t_TSTLookup::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(TSTLookup).tp_dict, "class_", make_descriptor(TSTLookup::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(TSTLookup).tp_dict, "wrapfn_", make_descriptor(t_TSTLookup::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(TSTLookup).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_TSTLookup_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, TSTLookup::initializeClass, 1)))
                return NULL;
              return t_TSTLookup::wrap_Object(TSTLookup(((t_TSTLookup *) arg)->object.this$));
            }
            static PyObject *t_TSTLookup_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, TSTLookup::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_TSTLookup_init_(t_TSTLookup *self, PyObject *args, PyObject *kwds)
            {
              TSTLookup object((jobject) NULL);

              INT_CALL(object = TSTLookup());
              self->object = object;

              return 0;
            }

            static PyObject *t_TSTLookup_add(t_TSTLookup *self, PyObject *args)
            {
              ::java::lang::CharSequence a0((jobject) NULL);
              ::java::lang::Object a1((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "Oo", &::java::lang::PY_TYPE(CharSequence), &a0, &a1))
              {
                OBJ_CALL(result = self->object.add(a0, a1));
                Py_RETURN_BOOL(result);
              }

              PyErr_SetArgsError((PyObject *) self, "add", args);
              return NULL;
            }

            static PyObject *t_TSTLookup_build(t_TSTLookup *self, PyObject *args)
            {
              ::org::apache::lucene::search::suggest::InputIterator a0((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::search::suggest::InputIterator::initializeClass, &a0))
              {
                OBJ_CALL(self->object.build(a0));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(TSTLookup), (PyObject *) self, "build", args, 2);
            }

            static PyObject *t_TSTLookup_get(t_TSTLookup *self, PyObject *arg)
            {
              ::java::lang::CharSequence a0((jobject) NULL);
              ::java::lang::Object result((jobject) NULL);

              if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
              {
                OBJ_CALL(result = self->object.get(a0));
                return ::java::lang::t_Object::wrap_Object(result);
              }

              PyErr_SetArgsError((PyObject *) self, "get", arg);
              return NULL;
            }

            static PyObject *t_TSTLookup_getCount(t_TSTLookup *self, PyObject *args)
            {
              jlong result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getCount());
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }

              return callSuper(&PY_TYPE(TSTLookup), (PyObject *) self, "getCount", args, 2);
            }

            static PyObject *t_TSTLookup_load(t_TSTLookup *self, PyObject *args)
            {
              ::org::apache::lucene::store::DataInput a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "k", ::org::apache::lucene::store::DataInput::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.load(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(TSTLookup), (PyObject *) self, "load", args, 2);
            }

            static PyObject *t_TSTLookup_lookup(t_TSTLookup *self, PyObject *args)
            {
              ::java::lang::CharSequence a0((jobject) NULL);
              ::java::util::Set a1((jobject) NULL);
              PyTypeObject **p1;
              jboolean a2;
              jint a3;
              ::java::util::List result((jobject) NULL);

              if (!parseArgs(args, "OKZI", &::java::lang::PY_TYPE(CharSequence), ::java::util::Set::initializeClass, &a0, &a1, &p1, ::java::util::t_Set::parameters_, &a2, &a3))
              {
                OBJ_CALL(result = self->object.lookup(a0, a1, a2, a3));
                return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::search::suggest::PY_TYPE(Lookup$LookupResult));
              }

              return callSuper(&PY_TYPE(TSTLookup), (PyObject *) self, "lookup", args, 2);
            }

            static PyObject *t_TSTLookup_ramBytesUsed(t_TSTLookup *self, PyObject *args)
            {
              jlong result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.ramBytesUsed());
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }

              return callSuper(&PY_TYPE(TSTLookup), (PyObject *) self, "ramBytesUsed", args, 2);
            }

            static PyObject *t_TSTLookup_store(t_TSTLookup *self, PyObject *args)
            {
              ::org::apache::lucene::store::DataOutput a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "k", ::org::apache::lucene::store::DataOutput::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.store(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(TSTLookup), (PyObject *) self, "store", args, 2);
            }

            static PyObject *t_TSTLookup_get__count(t_TSTLookup *self, void *data)
            {
              jlong value;
              OBJ_CALL(value = self->object.getCount());
              return PyLong_FromLongLong((PY_LONG_LONG) value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/tokenattributes/TypeAttribute.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {

          ::java::lang::Class *TypeAttribute::class$ = NULL;
          jmethodID *TypeAttribute::mids$ = NULL;
          bool TypeAttribute::live$ = false;
          ::java::lang::String *TypeAttribute::DEFAULT_TYPE = NULL;

          jclass TypeAttribute::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/tokenattributes/TypeAttribute");

              mids$ = new jmethodID[max_mid];
              mids$[mid_setType_5fdc3f48] = env->getMethodID(cls, "setType", "(Ljava/lang/String;)V");
              mids$[mid_type_14c7b5c5] = env->getMethodID(cls, "type", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_TYPE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_TYPE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          void TypeAttribute::setType(const ::java::lang::String & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setType_5fdc3f48], a0.this$);
          }

          ::java::lang::String TypeAttribute::type() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_type_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {
          static PyObject *t_TypeAttribute_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TypeAttribute_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TypeAttribute_setType(t_TypeAttribute *self, PyObject *arg);
          static PyObject *t_TypeAttribute_type(t_TypeAttribute *self);

          static PyMethodDef t_TypeAttribute__methods_[] = {
            DECLARE_METHOD(t_TypeAttribute, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TypeAttribute, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TypeAttribute, setType, METH_O),
            DECLARE_METHOD(t_TypeAttribute, type, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(TypeAttribute, t_TypeAttribute, ::org::apache::lucene::util::Attribute, TypeAttribute, abstract_init, 0, 0, 0, 0, 0);

          void t_TypeAttribute::install(PyObject *module)
          {
            installType(&PY_TYPE(TypeAttribute), module, "TypeAttribute", 0);
          }

          void t_TypeAttribute::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(TypeAttribute).tp_dict, "class_", make_descriptor(TypeAttribute::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(TypeAttribute).tp_dict, "wrapfn_", make_descriptor(t_TypeAttribute::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(TypeAttribute).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(TypeAttribute::initializeClass);
            PyDict_SetItemString(PY_TYPE(TypeAttribute).tp_dict, "DEFAULT_TYPE", make_descriptor(j2p(*TypeAttribute::DEFAULT_TYPE)));
          }

          static PyObject *t_TypeAttribute_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TypeAttribute::initializeClass, 1)))
              return NULL;
            return t_TypeAttribute::wrap_Object(TypeAttribute(((t_TypeAttribute *) arg)->object.this$));
          }
          static PyObject *t_TypeAttribute_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TypeAttribute::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_TypeAttribute_setType(t_TypeAttribute *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(self->object.setType(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setType", arg);
            return NULL;
          }

          static PyObject *t_TypeAttribute_type(t_TypeAttribute *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.type());
            return j2p(result);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/MultiFloatFunction.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *MultiFloatFunction::class$ = NULL;
            jmethodID *MultiFloatFunction::mids$ = NULL;
            bool MultiFloatFunction::live$ = false;

            jclass MultiFloatFunction::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/MultiFloatFunction");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_ee9922ca] = env->getMethodID(cls, "<init>", "([Lorg/apache/lucene/queries/function/ValueSource;)V");
                mids$[mid_createWeight_1b6125ba] = env->getMethodID(cls, "createWeight", "(Ljava/util/Map;Lorg/apache/lucene/search/IndexSearcher;)V");
                mids$[mid_description_14c7b5c5] = env->getMethodID(cls, "description", "()Ljava/lang/String;");
                mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_getValues_4c566485] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/queries/function/FunctionValues;");
                mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
                mids$[mid_name_14c7b5c5] = env->getMethodID(cls, "name", "()Ljava/lang/String;");
                mids$[mid_func_d2e34bb9] = env->getMethodID(cls, "func", "(I[Lorg/apache/lucene/queries/function/FunctionValues;)F");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            MultiFloatFunction::MultiFloatFunction(const JArray< ::org::apache::lucene::queries::function::ValueSource > & a0) : ::org::apache::lucene::queries::function::ValueSource(env->newObject(initializeClass, &mids$, mid_init$_ee9922ca, a0.this$)) {}

            void MultiFloatFunction::createWeight(const ::java::util::Map & a0, const ::org::apache::lucene::search::IndexSearcher & a1) const
            {
              env->callVoidMethod(this$, mids$[mid_createWeight_1b6125ba], a0.this$, a1.this$);
            }

            ::java::lang::String MultiFloatFunction::description() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_description_14c7b5c5]));
            }

            jboolean MultiFloatFunction::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
            }

            ::org::apache::lucene::queries::function::FunctionValues MultiFloatFunction::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::FunctionValues(env->callObjectMethod(this$, mids$[mid_getValues_4c566485], a0.this$, a1.this$));
            }

            jint MultiFloatFunction::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_MultiFloatFunction_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_MultiFloatFunction_instance_(PyTypeObject *type, PyObject *arg);
            static int t_MultiFloatFunction_init_(t_MultiFloatFunction *self, PyObject *args, PyObject *kwds);
            static PyObject *t_MultiFloatFunction_createWeight(t_MultiFloatFunction *self, PyObject *args);
            static PyObject *t_MultiFloatFunction_description(t_MultiFloatFunction *self, PyObject *args);
            static PyObject *t_MultiFloatFunction_equals(t_MultiFloatFunction *self, PyObject *args);
            static PyObject *t_MultiFloatFunction_getValues(t_MultiFloatFunction *self, PyObject *args);
            static PyObject *t_MultiFloatFunction_hashCode(t_MultiFloatFunction *self, PyObject *args);

            static PyMethodDef t_MultiFloatFunction__methods_[] = {
              DECLARE_METHOD(t_MultiFloatFunction, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_MultiFloatFunction, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_MultiFloatFunction, createWeight, METH_VARARGS),
              DECLARE_METHOD(t_MultiFloatFunction, description, METH_VARARGS),
              DECLARE_METHOD(t_MultiFloatFunction, equals, METH_VARARGS),
              DECLARE_METHOD(t_MultiFloatFunction, getValues, METH_VARARGS),
              DECLARE_METHOD(t_MultiFloatFunction, hashCode, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(MultiFloatFunction, t_MultiFloatFunction, ::org::apache::lucene::queries::function::ValueSource, MultiFloatFunction, t_MultiFloatFunction_init_, 0, 0, 0, 0, 0);

            void t_MultiFloatFunction::install(PyObject *module)
            {
              installType(&PY_TYPE(MultiFloatFunction), module, "MultiFloatFunction", 0);
            }

            void t_MultiFloatFunction::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(MultiFloatFunction).tp_dict, "class_", make_descriptor(MultiFloatFunction::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(MultiFloatFunction).tp_dict, "wrapfn_", make_descriptor(t_MultiFloatFunction::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(MultiFloatFunction).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_MultiFloatFunction_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, MultiFloatFunction::initializeClass, 1)))
                return NULL;
              return t_MultiFloatFunction::wrap_Object(MultiFloatFunction(((t_MultiFloatFunction *) arg)->object.this$));
            }
            static PyObject *t_MultiFloatFunction_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, MultiFloatFunction::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_MultiFloatFunction_init_(t_MultiFloatFunction *self, PyObject *args, PyObject *kwds)
            {
              JArray< ::org::apache::lucene::queries::function::ValueSource > a0((jobject) NULL);
              MultiFloatFunction object((jobject) NULL);

              if (!parseArgs(args, "[k", ::org::apache::lucene::queries::function::ValueSource::initializeClass, &a0))
              {
                INT_CALL(object = MultiFloatFunction(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_MultiFloatFunction_createWeight(t_MultiFloatFunction *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::search::IndexSearcher a1((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(self->object.createWeight(a0, a1));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(MultiFloatFunction), (PyObject *) self, "createWeight", args, 2);
            }

            static PyObject *t_MultiFloatFunction_description(t_MultiFloatFunction *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.description());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(MultiFloatFunction), (PyObject *) self, "description", args, 2);
            }

            static PyObject *t_MultiFloatFunction_equals(t_MultiFloatFunction *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(MultiFloatFunction), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_MultiFloatFunction_getValues(t_MultiFloatFunction *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::FunctionValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::t_FunctionValues::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(MultiFloatFunction), (PyObject *) self, "getValues", args, 2);
            }

            static PyObject *t_MultiFloatFunction_hashCode(t_MultiFloatFunction *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(MultiFloatFunction), (PyObject *) self, "hashCode", args, 2);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FieldCache$ByteParser.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FieldCache$ByteParser::class$ = NULL;
        jmethodID *FieldCache$ByteParser::mids$ = NULL;
        bool FieldCache$ByteParser::live$ = false;

        jclass FieldCache$ByteParser::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FieldCache$ByteParser");

            mids$ = new jmethodID[max_mid];
            mids$[mid_parseByte_7bc03dd0] = env->getMethodID(cls, "parseByte", "(Lorg/apache/lucene/util/BytesRef;)B");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jbyte FieldCache$ByteParser::parseByte(const ::org::apache::lucene::util::BytesRef & a0) const
        {
          return env->callByteMethod(this$, mids$[mid_parseByte_7bc03dd0], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FieldCache$ByteParser_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldCache$ByteParser_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldCache$ByteParser_parseByte(t_FieldCache$ByteParser *self, PyObject *arg);

        static PyMethodDef t_FieldCache$ByteParser__methods_[] = {
          DECLARE_METHOD(t_FieldCache$ByteParser, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCache$ByteParser, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCache$ByteParser, parseByte, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldCache$ByteParser, t_FieldCache$ByteParser, ::org::apache::lucene::search::FieldCache$Parser, FieldCache$ByteParser, abstract_init, 0, 0, 0, 0, 0);

        void t_FieldCache$ByteParser::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldCache$ByteParser), module, "FieldCache$ByteParser", 0);
        }

        void t_FieldCache$ByteParser::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldCache$ByteParser).tp_dict, "class_", make_descriptor(FieldCache$ByteParser::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldCache$ByteParser).tp_dict, "wrapfn_", make_descriptor(t_FieldCache$ByteParser::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldCache$ByteParser).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldCache$ByteParser_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldCache$ByteParser::initializeClass, 1)))
            return NULL;
          return t_FieldCache$ByteParser::wrap_Object(FieldCache$ByteParser(((t_FieldCache$ByteParser *) arg)->object.this$));
        }
        static PyObject *t_FieldCache$ByteParser_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldCache$ByteParser::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FieldCache$ByteParser_parseByte(t_FieldCache$ByteParser *self, PyObject *arg)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          jbyte result;

          if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.parseByte(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "parseByte", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/no/NorwegianMinimalStemmer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace no {

          ::java::lang::Class *NorwegianMinimalStemmer::class$ = NULL;
          jmethodID *NorwegianMinimalStemmer::mids$ = NULL;
          bool NorwegianMinimalStemmer::live$ = false;

          jclass NorwegianMinimalStemmer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/no/NorwegianMinimalStemmer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
              mids$[mid_stem_ec6430eb] = env->getMethodID(cls, "stem", "([CI)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          NorwegianMinimalStemmer::NorwegianMinimalStemmer(jint a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

          jint NorwegianMinimalStemmer::stem(const JArray< jchar > & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_stem_ec6430eb], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace no {
          static PyObject *t_NorwegianMinimalStemmer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_NorwegianMinimalStemmer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_NorwegianMinimalStemmer_init_(t_NorwegianMinimalStemmer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_NorwegianMinimalStemmer_stem(t_NorwegianMinimalStemmer *self, PyObject *args);

          static PyMethodDef t_NorwegianMinimalStemmer__methods_[] = {
            DECLARE_METHOD(t_NorwegianMinimalStemmer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NorwegianMinimalStemmer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NorwegianMinimalStemmer, stem, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(NorwegianMinimalStemmer, t_NorwegianMinimalStemmer, ::java::lang::Object, NorwegianMinimalStemmer, t_NorwegianMinimalStemmer_init_, 0, 0, 0, 0, 0);

          void t_NorwegianMinimalStemmer::install(PyObject *module)
          {
            installType(&PY_TYPE(NorwegianMinimalStemmer), module, "NorwegianMinimalStemmer", 0);
          }

          void t_NorwegianMinimalStemmer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(NorwegianMinimalStemmer).tp_dict, "class_", make_descriptor(NorwegianMinimalStemmer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(NorwegianMinimalStemmer).tp_dict, "wrapfn_", make_descriptor(t_NorwegianMinimalStemmer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(NorwegianMinimalStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_NorwegianMinimalStemmer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, NorwegianMinimalStemmer::initializeClass, 1)))
              return NULL;
            return t_NorwegianMinimalStemmer::wrap_Object(NorwegianMinimalStemmer(((t_NorwegianMinimalStemmer *) arg)->object.this$));
          }
          static PyObject *t_NorwegianMinimalStemmer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, NorwegianMinimalStemmer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_NorwegianMinimalStemmer_init_(t_NorwegianMinimalStemmer *self, PyObject *args, PyObject *kwds)
          {
            jint a0;
            NorwegianMinimalStemmer object((jobject) NULL);

            if (!parseArgs(args, "I", &a0))
            {
              INT_CALL(object = NorwegianMinimalStemmer(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_NorwegianMinimalStemmer_stem(t_NorwegianMinimalStemmer *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(result = self->object.stem(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "stem", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/config/ConfigurationKey.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace config {

              ::java::lang::Class *ConfigurationKey::class$ = NULL;
              jmethodID *ConfigurationKey::mids$ = NULL;
              bool ConfigurationKey::live$ = false;

              jclass ConfigurationKey::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/config/ConfigurationKey");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_newInstance_ac28c1ca] = env->getStaticMethodID(cls, "newInstance", "()Lorg/apache/lucene/queryparser/flexible/core/config/ConfigurationKey;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              ConfigurationKey ConfigurationKey::newInstance()
              {
                jclass cls = env->getClass(initializeClass);
                return ConfigurationKey(env->callStaticObjectMethod(cls, mids$[mid_newInstance_ac28c1ca]));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace config {
              static PyObject *t_ConfigurationKey_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_ConfigurationKey_instance_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_ConfigurationKey_of_(t_ConfigurationKey *self, PyObject *args);
              static PyObject *t_ConfigurationKey_newInstance(PyTypeObject *type);
              static PyObject *t_ConfigurationKey_get__parameters_(t_ConfigurationKey *self, void *data);
              static PyGetSetDef t_ConfigurationKey__fields_[] = {
                DECLARE_GET_FIELD(t_ConfigurationKey, parameters_),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_ConfigurationKey__methods_[] = {
                DECLARE_METHOD(t_ConfigurationKey, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_ConfigurationKey, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_ConfigurationKey, of_, METH_VARARGS),
                DECLARE_METHOD(t_ConfigurationKey, newInstance, METH_NOARGS | METH_CLASS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(ConfigurationKey, t_ConfigurationKey, ::java::lang::Object, ConfigurationKey, abstract_init, 0, 0, t_ConfigurationKey__fields_, 0, 0);
              PyObject *t_ConfigurationKey::wrap_Object(const ConfigurationKey& object, PyTypeObject *p0)
              {
                PyObject *obj = t_ConfigurationKey::wrap_Object(object);
                if (obj != NULL && obj != Py_None)
                {
                  t_ConfigurationKey *self = (t_ConfigurationKey *) obj;
                  self->parameters[0] = p0;
                }
                return obj;
              }

              PyObject *t_ConfigurationKey::wrap_jobject(const jobject& object, PyTypeObject *p0)
              {
                PyObject *obj = t_ConfigurationKey::wrap_jobject(object);
                if (obj != NULL && obj != Py_None)
                {
                  t_ConfigurationKey *self = (t_ConfigurationKey *) obj;
                  self->parameters[0] = p0;
                }
                return obj;
              }

              void t_ConfigurationKey::install(PyObject *module)
              {
                installType(&PY_TYPE(ConfigurationKey), module, "ConfigurationKey", 0);
              }

              void t_ConfigurationKey::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(ConfigurationKey).tp_dict, "class_", make_descriptor(ConfigurationKey::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(ConfigurationKey).tp_dict, "wrapfn_", make_descriptor(t_ConfigurationKey::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(ConfigurationKey).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_ConfigurationKey_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, ConfigurationKey::initializeClass, 1)))
                  return NULL;
                return t_ConfigurationKey::wrap_Object(ConfigurationKey(((t_ConfigurationKey *) arg)->object.this$));
              }
              static PyObject *t_ConfigurationKey_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, ConfigurationKey::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static PyObject *t_ConfigurationKey_of_(t_ConfigurationKey *self, PyObject *args)
              {
                if (!parseArg(args, "T", 1, &(self->parameters)))
                  Py_RETURN_SELF;
                return PyErr_SetArgsError((PyObject *) self, "of_", args);
              }

              static PyObject *t_ConfigurationKey_newInstance(PyTypeObject *type)
              {
                ConfigurationKey result((jobject) NULL);
                OBJ_CALL(result = ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey::newInstance());
                return t_ConfigurationKey::wrap_Object(result);
              }
              static PyObject *t_ConfigurationKey_get__parameters_(t_ConfigurationKey *self, void *data)
              {
                return typeParameters(self->parameters, sizeof(self->parameters));
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/SingleTermsEnum.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/index/TermsEnum.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *SingleTermsEnum::class$ = NULL;
        jmethodID *SingleTermsEnum::mids$ = NULL;
        bool SingleTermsEnum::live$ = false;

        jclass SingleTermsEnum::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/SingleTermsEnum");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_acc8615c] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/TermsEnum;Lorg/apache/lucene/util/BytesRef;)V");
            mids$[mid_accept_30bc08e1] = env->getMethodID(cls, "accept", "(Lorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/index/FilteredTermsEnum$AcceptStatus;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SingleTermsEnum::SingleTermsEnum(const ::org::apache::lucene::index::TermsEnum & a0, const ::org::apache::lucene::util::BytesRef & a1) : ::org::apache::lucene::index::FilteredTermsEnum(env->newObject(initializeClass, &mids$, mid_init$_acc8615c, a0.this$, a1.this$)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_SingleTermsEnum_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SingleTermsEnum_instance_(PyTypeObject *type, PyObject *arg);
        static int t_SingleTermsEnum_init_(t_SingleTermsEnum *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_SingleTermsEnum__methods_[] = {
          DECLARE_METHOD(t_SingleTermsEnum, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SingleTermsEnum, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SingleTermsEnum, t_SingleTermsEnum, ::org::apache::lucene::index::FilteredTermsEnum, SingleTermsEnum, t_SingleTermsEnum_init_, 0, 0, 0, 0, 0);

        void t_SingleTermsEnum::install(PyObject *module)
        {
          installType(&PY_TYPE(SingleTermsEnum), module, "SingleTermsEnum", 0);
        }

        void t_SingleTermsEnum::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SingleTermsEnum).tp_dict, "class_", make_descriptor(SingleTermsEnum::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SingleTermsEnum).tp_dict, "wrapfn_", make_descriptor(t_SingleTermsEnum::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SingleTermsEnum).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SingleTermsEnum_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SingleTermsEnum::initializeClass, 1)))
            return NULL;
          return t_SingleTermsEnum::wrap_Object(SingleTermsEnum(((t_SingleTermsEnum *) arg)->object.this$));
        }
        static PyObject *t_SingleTermsEnum_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SingleTermsEnum::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_SingleTermsEnum_init_(t_SingleTermsEnum *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::index::TermsEnum a0((jobject) NULL);
          ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
          SingleTermsEnum object((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::index::TermsEnum::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
          {
            INT_CALL(object = SingleTermsEnum(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/grouping/GroupingSearch.h"
#include "org/apache/lucene/queries/function/ValueSource.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "org/apache/lucene/search/Sort.h"
#include "java/lang/Class.h"
#include "java/util/Collection.h"
#include "org/apache/lucene/util/Bits.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/Filter.h"
#include "org/apache/lucene/search/grouping/TopGroups.h"
#include "org/apache/lucene/search/Query.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {

          ::java::lang::Class *GroupingSearch::class$ = NULL;
          jmethodID *GroupingSearch::mids$ = NULL;
          bool GroupingSearch::live$ = false;

          jclass GroupingSearch::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/grouping/GroupingSearch");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_9bb37152] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Filter;)V");
              mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
              mids$[mid_init$_9d3ebac8] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queries/function/ValueSource;Ljava/util/Map;)V");
              mids$[mid_disableCaching_bd44cd2b] = env->getMethodID(cls, "disableCaching", "()Lorg/apache/lucene/search/grouping/GroupingSearch;");
              mids$[mid_getAllGroupHeads_03c2457d] = env->getMethodID(cls, "getAllGroupHeads", "()Lorg/apache/lucene/util/Bits;");
              mids$[mid_getAllMatchingGroups_2d2d7de4] = env->getMethodID(cls, "getAllMatchingGroups", "()Ljava/util/Collection;");
              mids$[mid_search_cc5c11db] = env->getMethodID(cls, "search", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/Query;II)Lorg/apache/lucene/search/grouping/TopGroups;");
              mids$[mid_search_2bb63d27] = env->getMethodID(cls, "search", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/Filter;Lorg/apache/lucene/search/Query;II)Lorg/apache/lucene/search/grouping/TopGroups;");
              mids$[mid_setAllGroupHeads_b6dc0458] = env->getMethodID(cls, "setAllGroupHeads", "(Z)Lorg/apache/lucene/search/grouping/GroupingSearch;");
              mids$[mid_setAllGroups_b6dc0458] = env->getMethodID(cls, "setAllGroups", "(Z)Lorg/apache/lucene/search/grouping/GroupingSearch;");
              mids$[mid_setCaching_8d110dba] = env->getMethodID(cls, "setCaching", "(IZ)Lorg/apache/lucene/search/grouping/GroupingSearch;");
              mids$[mid_setCachingInMB_c48a1ff7] = env->getMethodID(cls, "setCachingInMB", "(DZ)Lorg/apache/lucene/search/grouping/GroupingSearch;");
              mids$[mid_setFillSortFields_b6dc0458] = env->getMethodID(cls, "setFillSortFields", "(Z)Lorg/apache/lucene/search/grouping/GroupingSearch;");
              mids$[mid_setGroupDocsLimit_2cfcb8b1] = env->getMethodID(cls, "setGroupDocsLimit", "(I)Lorg/apache/lucene/search/grouping/GroupingSearch;");
              mids$[mid_setGroupDocsOffset_2cfcb8b1] = env->getMethodID(cls, "setGroupDocsOffset", "(I)Lorg/apache/lucene/search/grouping/GroupingSearch;");
              mids$[mid_setGroupSort_a0e5bdf3] = env->getMethodID(cls, "setGroupSort", "(Lorg/apache/lucene/search/Sort;)Lorg/apache/lucene/search/grouping/GroupingSearch;");
              mids$[mid_setIncludeMaxScore_b6dc0458] = env->getMethodID(cls, "setIncludeMaxScore", "(Z)Lorg/apache/lucene/search/grouping/GroupingSearch;");
              mids$[mid_setIncludeScores_b6dc0458] = env->getMethodID(cls, "setIncludeScores", "(Z)Lorg/apache/lucene/search/grouping/GroupingSearch;");
              mids$[mid_setInitialSize_2cfcb8b1] = env->getMethodID(cls, "setInitialSize", "(I)Lorg/apache/lucene/search/grouping/GroupingSearch;");
              mids$[mid_setSortWithinGroup_a0e5bdf3] = env->getMethodID(cls, "setSortWithinGroup", "(Lorg/apache/lucene/search/Sort;)Lorg/apache/lucene/search/grouping/GroupingSearch;");
              mids$[mid_groupByFieldOrFunction_2bb63d27] = env->getMethodID(cls, "groupByFieldOrFunction", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/Filter;Lorg/apache/lucene/search/Query;II)Lorg/apache/lucene/search/grouping/TopGroups;");
              mids$[mid_groupByDocBlock_2bb63d27] = env->getMethodID(cls, "groupByDocBlock", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/Filter;Lorg/apache/lucene/search/Query;II)Lorg/apache/lucene/search/grouping/TopGroups;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          GroupingSearch::GroupingSearch(const ::org::apache::lucene::search::Filter & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_9bb37152, a0.this$)) {}

          GroupingSearch::GroupingSearch(const ::java::lang::String & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

          GroupingSearch::GroupingSearch(const ::org::apache::lucene::queries::function::ValueSource & a0, const ::java::util::Map & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_9d3ebac8, a0.this$, a1.this$)) {}

          GroupingSearch GroupingSearch::disableCaching() const
          {
            return GroupingSearch(env->callObjectMethod(this$, mids$[mid_disableCaching_bd44cd2b]));
          }

          ::org::apache::lucene::util::Bits GroupingSearch::getAllGroupHeads() const
          {
            return ::org::apache::lucene::util::Bits(env->callObjectMethod(this$, mids$[mid_getAllGroupHeads_03c2457d]));
          }

          ::java::util::Collection GroupingSearch::getAllMatchingGroups() const
          {
            return ::java::util::Collection(env->callObjectMethod(this$, mids$[mid_getAllMatchingGroups_2d2d7de4]));
          }

          ::org::apache::lucene::search::grouping::TopGroups GroupingSearch::search(const ::org::apache::lucene::search::IndexSearcher & a0, const ::org::apache::lucene::search::Query & a1, jint a2, jint a3) const
          {
            return ::org::apache::lucene::search::grouping::TopGroups(env->callObjectMethod(this$, mids$[mid_search_cc5c11db], a0.this$, a1.this$, a2, a3));
          }

          ::org::apache::lucene::search::grouping::TopGroups GroupingSearch::search(const ::org::apache::lucene::search::IndexSearcher & a0, const ::org::apache::lucene::search::Filter & a1, const ::org::apache::lucene::search::Query & a2, jint a3, jint a4) const
          {
            return ::org::apache::lucene::search::grouping::TopGroups(env->callObjectMethod(this$, mids$[mid_search_2bb63d27], a0.this$, a1.this$, a2.this$, a3, a4));
          }

          GroupingSearch GroupingSearch::setAllGroupHeads(jboolean a0) const
          {
            return GroupingSearch(env->callObjectMethod(this$, mids$[mid_setAllGroupHeads_b6dc0458], a0));
          }

          GroupingSearch GroupingSearch::setAllGroups(jboolean a0) const
          {
            return GroupingSearch(env->callObjectMethod(this$, mids$[mid_setAllGroups_b6dc0458], a0));
          }

          GroupingSearch GroupingSearch::setCaching(jint a0, jboolean a1) const
          {
            return GroupingSearch(env->callObjectMethod(this$, mids$[mid_setCaching_8d110dba], a0, a1));
          }

          GroupingSearch GroupingSearch::setCachingInMB(jdouble a0, jboolean a1) const
          {
            return GroupingSearch(env->callObjectMethod(this$, mids$[mid_setCachingInMB_c48a1ff7], a0, a1));
          }

          GroupingSearch GroupingSearch::setFillSortFields(jboolean a0) const
          {
            return GroupingSearch(env->callObjectMethod(this$, mids$[mid_setFillSortFields_b6dc0458], a0));
          }

          GroupingSearch GroupingSearch::setGroupDocsLimit(jint a0) const
          {
            return GroupingSearch(env->callObjectMethod(this$, mids$[mid_setGroupDocsLimit_2cfcb8b1], a0));
          }

          GroupingSearch GroupingSearch::setGroupDocsOffset(jint a0) const
          {
            return GroupingSearch(env->callObjectMethod(this$, mids$[mid_setGroupDocsOffset_2cfcb8b1], a0));
          }

          GroupingSearch GroupingSearch::setGroupSort(const ::org::apache::lucene::search::Sort & a0) const
          {
            return GroupingSearch(env->callObjectMethod(this$, mids$[mid_setGroupSort_a0e5bdf3], a0.this$));
          }

          GroupingSearch GroupingSearch::setIncludeMaxScore(jboolean a0) const
          {
            return GroupingSearch(env->callObjectMethod(this$, mids$[mid_setIncludeMaxScore_b6dc0458], a0));
          }

          GroupingSearch GroupingSearch::setIncludeScores(jboolean a0) const
          {
            return GroupingSearch(env->callObjectMethod(this$, mids$[mid_setIncludeScores_b6dc0458], a0));
          }

          GroupingSearch GroupingSearch::setInitialSize(jint a0) const
          {
            return GroupingSearch(env->callObjectMethod(this$, mids$[mid_setInitialSize_2cfcb8b1], a0));
          }

          GroupingSearch GroupingSearch::setSortWithinGroup(const ::org::apache::lucene::search::Sort & a0) const
          {
            return GroupingSearch(env->callObjectMethod(this$, mids$[mid_setSortWithinGroup_a0e5bdf3], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          static PyObject *t_GroupingSearch_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GroupingSearch_instance_(PyTypeObject *type, PyObject *arg);
          static int t_GroupingSearch_init_(t_GroupingSearch *self, PyObject *args, PyObject *kwds);
          static PyObject *t_GroupingSearch_disableCaching(t_GroupingSearch *self);
          static PyObject *t_GroupingSearch_getAllGroupHeads(t_GroupingSearch *self);
          static PyObject *t_GroupingSearch_getAllMatchingGroups(t_GroupingSearch *self);
          static PyObject *t_GroupingSearch_search(t_GroupingSearch *self, PyObject *args);
          static PyObject *t_GroupingSearch_setAllGroupHeads(t_GroupingSearch *self, PyObject *arg);
          static PyObject *t_GroupingSearch_setAllGroups(t_GroupingSearch *self, PyObject *arg);
          static PyObject *t_GroupingSearch_setCaching(t_GroupingSearch *self, PyObject *args);
          static PyObject *t_GroupingSearch_setCachingInMB(t_GroupingSearch *self, PyObject *args);
          static PyObject *t_GroupingSearch_setFillSortFields(t_GroupingSearch *self, PyObject *arg);
          static PyObject *t_GroupingSearch_setGroupDocsLimit(t_GroupingSearch *self, PyObject *arg);
          static PyObject *t_GroupingSearch_setGroupDocsOffset(t_GroupingSearch *self, PyObject *arg);
          static PyObject *t_GroupingSearch_setGroupSort(t_GroupingSearch *self, PyObject *arg);
          static PyObject *t_GroupingSearch_setIncludeMaxScore(t_GroupingSearch *self, PyObject *arg);
          static PyObject *t_GroupingSearch_setIncludeScores(t_GroupingSearch *self, PyObject *arg);
          static PyObject *t_GroupingSearch_setInitialSize(t_GroupingSearch *self, PyObject *arg);
          static PyObject *t_GroupingSearch_setSortWithinGroup(t_GroupingSearch *self, PyObject *arg);
          static PyObject *t_GroupingSearch_get__allGroupHeads(t_GroupingSearch *self, void *data);
          static int t_GroupingSearch_set__allGroupHeads(t_GroupingSearch *self, PyObject *arg, void *data);
          static int t_GroupingSearch_set__allGroups(t_GroupingSearch *self, PyObject *arg, void *data);
          static PyObject *t_GroupingSearch_get__allMatchingGroups(t_GroupingSearch *self, void *data);
          static int t_GroupingSearch_set__fillSortFields(t_GroupingSearch *self, PyObject *arg, void *data);
          static int t_GroupingSearch_set__groupDocsLimit(t_GroupingSearch *self, PyObject *arg, void *data);
          static int t_GroupingSearch_set__groupDocsOffset(t_GroupingSearch *self, PyObject *arg, void *data);
          static int t_GroupingSearch_set__groupSort(t_GroupingSearch *self, PyObject *arg, void *data);
          static int t_GroupingSearch_set__includeMaxScore(t_GroupingSearch *self, PyObject *arg, void *data);
          static int t_GroupingSearch_set__includeScores(t_GroupingSearch *self, PyObject *arg, void *data);
          static int t_GroupingSearch_set__initialSize(t_GroupingSearch *self, PyObject *arg, void *data);
          static int t_GroupingSearch_set__sortWithinGroup(t_GroupingSearch *self, PyObject *arg, void *data);
          static PyGetSetDef t_GroupingSearch__fields_[] = {
            DECLARE_GETSET_FIELD(t_GroupingSearch, allGroupHeads),
            DECLARE_SET_FIELD(t_GroupingSearch, allGroups),
            DECLARE_GET_FIELD(t_GroupingSearch, allMatchingGroups),
            DECLARE_SET_FIELD(t_GroupingSearch, fillSortFields),
            DECLARE_SET_FIELD(t_GroupingSearch, groupDocsLimit),
            DECLARE_SET_FIELD(t_GroupingSearch, groupDocsOffset),
            DECLARE_SET_FIELD(t_GroupingSearch, groupSort),
            DECLARE_SET_FIELD(t_GroupingSearch, includeMaxScore),
            DECLARE_SET_FIELD(t_GroupingSearch, includeScores),
            DECLARE_SET_FIELD(t_GroupingSearch, initialSize),
            DECLARE_SET_FIELD(t_GroupingSearch, sortWithinGroup),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_GroupingSearch__methods_[] = {
            DECLARE_METHOD(t_GroupingSearch, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GroupingSearch, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GroupingSearch, disableCaching, METH_NOARGS),
            DECLARE_METHOD(t_GroupingSearch, getAllGroupHeads, METH_NOARGS),
            DECLARE_METHOD(t_GroupingSearch, getAllMatchingGroups, METH_NOARGS),
            DECLARE_METHOD(t_GroupingSearch, search, METH_VARARGS),
            DECLARE_METHOD(t_GroupingSearch, setAllGroupHeads, METH_O),
            DECLARE_METHOD(t_GroupingSearch, setAllGroups, METH_O),
            DECLARE_METHOD(t_GroupingSearch, setCaching, METH_VARARGS),
            DECLARE_METHOD(t_GroupingSearch, setCachingInMB, METH_VARARGS),
            DECLARE_METHOD(t_GroupingSearch, setFillSortFields, METH_O),
            DECLARE_METHOD(t_GroupingSearch, setGroupDocsLimit, METH_O),
            DECLARE_METHOD(t_GroupingSearch, setGroupDocsOffset, METH_O),
            DECLARE_METHOD(t_GroupingSearch, setGroupSort, METH_O),
            DECLARE_METHOD(t_GroupingSearch, setIncludeMaxScore, METH_O),
            DECLARE_METHOD(t_GroupingSearch, setIncludeScores, METH_O),
            DECLARE_METHOD(t_GroupingSearch, setInitialSize, METH_O),
            DECLARE_METHOD(t_GroupingSearch, setSortWithinGroup, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(GroupingSearch, t_GroupingSearch, ::java::lang::Object, GroupingSearch, t_GroupingSearch_init_, 0, 0, t_GroupingSearch__fields_, 0, 0);

          void t_GroupingSearch::install(PyObject *module)
          {
            installType(&PY_TYPE(GroupingSearch), module, "GroupingSearch", 0);
          }

          void t_GroupingSearch::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(GroupingSearch).tp_dict, "class_", make_descriptor(GroupingSearch::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(GroupingSearch).tp_dict, "wrapfn_", make_descriptor(t_GroupingSearch::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(GroupingSearch).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_GroupingSearch_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GroupingSearch::initializeClass, 1)))
              return NULL;
            return t_GroupingSearch::wrap_Object(GroupingSearch(((t_GroupingSearch *) arg)->object.this$));
          }
          static PyObject *t_GroupingSearch_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GroupingSearch::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_GroupingSearch_init_(t_GroupingSearch *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::search::Filter a0((jobject) NULL);
                GroupingSearch object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::search::Filter::initializeClass, &a0))
                {
                  INT_CALL(object = GroupingSearch(a0));
                  self->object = object;
                  break;
                }
              }
              {
                ::java::lang::String a0((jobject) NULL);
                GroupingSearch object((jobject) NULL);

                if (!parseArgs(args, "s", &a0))
                {
                  INT_CALL(object = GroupingSearch(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::queries::function::ValueSource a0((jobject) NULL);
                ::java::util::Map a1((jobject) NULL);
                PyTypeObject **p1;
                GroupingSearch object((jobject) NULL);

                if (!parseArgs(args, "kK", ::org::apache::lucene::queries::function::ValueSource::initializeClass, ::java::util::Map::initializeClass, &a0, &a1, &p1, ::java::util::t_Map::parameters_))
                {
                  INT_CALL(object = GroupingSearch(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_GroupingSearch_disableCaching(t_GroupingSearch *self)
          {
            GroupingSearch result((jobject) NULL);
            OBJ_CALL(result = self->object.disableCaching());
            return t_GroupingSearch::wrap_Object(result);
          }

          static PyObject *t_GroupingSearch_getAllGroupHeads(t_GroupingSearch *self)
          {
            ::org::apache::lucene::util::Bits result((jobject) NULL);
            OBJ_CALL(result = self->object.getAllGroupHeads());
            return ::org::apache::lucene::util::t_Bits::wrap_Object(result);
          }

          static PyObject *t_GroupingSearch_getAllMatchingGroups(t_GroupingSearch *self)
          {
            ::java::util::Collection result((jobject) NULL);
            OBJ_CALL(result = self->object.getAllMatchingGroups());
            return ::java::util::t_Collection::wrap_Object(result);
          }

          static PyObject *t_GroupingSearch_search(t_GroupingSearch *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 4:
              {
                ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
                ::org::apache::lucene::search::Query a1((jobject) NULL);
                jint a2;
                jint a3;
                ::org::apache::lucene::search::grouping::TopGroups result((jobject) NULL);

                if (!parseArgs(args, "kkII", ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::search::Query::initializeClass, &a0, &a1, &a2, &a3))
                {
                  OBJ_CALL(result = self->object.search(a0, a1, a2, a3));
                  return ::org::apache::lucene::search::grouping::t_TopGroups::wrap_Object(result);
                }
              }
              break;
             case 5:
              {
                ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
                ::org::apache::lucene::search::Filter a1((jobject) NULL);
                ::org::apache::lucene::search::Query a2((jobject) NULL);
                jint a3;
                jint a4;
                ::org::apache::lucene::search::grouping::TopGroups result((jobject) NULL);

                if (!parseArgs(args, "kkkII", ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::search::Filter::initializeClass, ::org::apache::lucene::search::Query::initializeClass, &a0, &a1, &a2, &a3, &a4))
                {
                  OBJ_CALL(result = self->object.search(a0, a1, a2, a3, a4));
                  return ::org::apache::lucene::search::grouping::t_TopGroups::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "search", args);
            return NULL;
          }

          static PyObject *t_GroupingSearch_setAllGroupHeads(t_GroupingSearch *self, PyObject *arg)
          {
            jboolean a0;
            GroupingSearch result((jobject) NULL);

            if (!parseArg(arg, "Z", &a0))
            {
              OBJ_CALL(result = self->object.setAllGroupHeads(a0));
              return t_GroupingSearch::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "setAllGroupHeads", arg);
            return NULL;
          }

          static PyObject *t_GroupingSearch_setAllGroups(t_GroupingSearch *self, PyObject *arg)
          {
            jboolean a0;
            GroupingSearch result((jobject) NULL);

            if (!parseArg(arg, "Z", &a0))
            {
              OBJ_CALL(result = self->object.setAllGroups(a0));
              return t_GroupingSearch::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "setAllGroups", arg);
            return NULL;
          }

          static PyObject *t_GroupingSearch_setCaching(t_GroupingSearch *self, PyObject *args)
          {
            jint a0;
            jboolean a1;
            GroupingSearch result((jobject) NULL);

            if (!parseArgs(args, "IZ", &a0, &a1))
            {
              OBJ_CALL(result = self->object.setCaching(a0, a1));
              return t_GroupingSearch::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "setCaching", args);
            return NULL;
          }

          static PyObject *t_GroupingSearch_setCachingInMB(t_GroupingSearch *self, PyObject *args)
          {
            jdouble a0;
            jboolean a1;
            GroupingSearch result((jobject) NULL);

            if (!parseArgs(args, "DZ", &a0, &a1))
            {
              OBJ_CALL(result = self->object.setCachingInMB(a0, a1));
              return t_GroupingSearch::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "setCachingInMB", args);
            return NULL;
          }

          static PyObject *t_GroupingSearch_setFillSortFields(t_GroupingSearch *self, PyObject *arg)
          {
            jboolean a0;
            GroupingSearch result((jobject) NULL);

            if (!parseArg(arg, "Z", &a0))
            {
              OBJ_CALL(result = self->object.setFillSortFields(a0));
              return t_GroupingSearch::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "setFillSortFields", arg);
            return NULL;
          }

          static PyObject *t_GroupingSearch_setGroupDocsLimit(t_GroupingSearch *self, PyObject *arg)
          {
            jint a0;
            GroupingSearch result((jobject) NULL);

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.setGroupDocsLimit(a0));
              return t_GroupingSearch::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "setGroupDocsLimit", arg);
            return NULL;
          }

          static PyObject *t_GroupingSearch_setGroupDocsOffset(t_GroupingSearch *self, PyObject *arg)
          {
            jint a0;
            GroupingSearch result((jobject) NULL);

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.setGroupDocsOffset(a0));
              return t_GroupingSearch::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "setGroupDocsOffset", arg);
            return NULL;
          }

          static PyObject *t_GroupingSearch_setGroupSort(t_GroupingSearch *self, PyObject *arg)
          {
            ::org::apache::lucene::search::Sort a0((jobject) NULL);
            GroupingSearch result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::search::Sort::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.setGroupSort(a0));
              return t_GroupingSearch::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "setGroupSort", arg);
            return NULL;
          }

          static PyObject *t_GroupingSearch_setIncludeMaxScore(t_GroupingSearch *self, PyObject *arg)
          {
            jboolean a0;
            GroupingSearch result((jobject) NULL);

            if (!parseArg(arg, "Z", &a0))
            {
              OBJ_CALL(result = self->object.setIncludeMaxScore(a0));
              return t_GroupingSearch::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "setIncludeMaxScore", arg);
            return NULL;
          }

          static PyObject *t_GroupingSearch_setIncludeScores(t_GroupingSearch *self, PyObject *arg)
          {
            jboolean a0;
            GroupingSearch result((jobject) NULL);

            if (!parseArg(arg, "Z", &a0))
            {
              OBJ_CALL(result = self->object.setIncludeScores(a0));
              return t_GroupingSearch::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "setIncludeScores", arg);
            return NULL;
          }

          static PyObject *t_GroupingSearch_setInitialSize(t_GroupingSearch *self, PyObject *arg)
          {
            jint a0;
            GroupingSearch result((jobject) NULL);

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.setInitialSize(a0));
              return t_GroupingSearch::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "setInitialSize", arg);
            return NULL;
          }

          static PyObject *t_GroupingSearch_setSortWithinGroup(t_GroupingSearch *self, PyObject *arg)
          {
            ::org::apache::lucene::search::Sort a0((jobject) NULL);
            GroupingSearch result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::search::Sort::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.setSortWithinGroup(a0));
              return t_GroupingSearch::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "setSortWithinGroup", arg);
            return NULL;
          }

          static PyObject *t_GroupingSearch_get__allGroupHeads(t_GroupingSearch *self, void *data)
          {
            ::org::apache::lucene::util::Bits value((jobject) NULL);
            OBJ_CALL(value = self->object.getAllGroupHeads());
            return ::org::apache::lucene::util::t_Bits::wrap_Object(value);
          }
          static int t_GroupingSearch_set__allGroupHeads(t_GroupingSearch *self, PyObject *arg, void *data)
          {
            {
              jboolean value;
              if (!parseArg(arg, "Z", &value))
              {
                INT_CALL(self->object.setAllGroupHeads(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "allGroupHeads", arg);
            return -1;
          }

          static int t_GroupingSearch_set__allGroups(t_GroupingSearch *self, PyObject *arg, void *data)
          {
            {
              jboolean value;
              if (!parseArg(arg, "Z", &value))
              {
                INT_CALL(self->object.setAllGroups(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "allGroups", arg);
            return -1;
          }

          static PyObject *t_GroupingSearch_get__allMatchingGroups(t_GroupingSearch *self, void *data)
          {
            ::java::util::Collection value((jobject) NULL);
            OBJ_CALL(value = self->object.getAllMatchingGroups());
            return ::java::util::t_Collection::wrap_Object(value);
          }

          static int t_GroupingSearch_set__fillSortFields(t_GroupingSearch *self, PyObject *arg, void *data)
          {
            {
              jboolean value;
              if (!parseArg(arg, "Z", &value))
              {
                INT_CALL(self->object.setFillSortFields(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "fillSortFields", arg);
            return -1;
          }

          static int t_GroupingSearch_set__groupDocsLimit(t_GroupingSearch *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setGroupDocsLimit(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "groupDocsLimit", arg);
            return -1;
          }

          static int t_GroupingSearch_set__groupDocsOffset(t_GroupingSearch *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setGroupDocsOffset(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "groupDocsOffset", arg);
            return -1;
          }

          static int t_GroupingSearch_set__groupSort(t_GroupingSearch *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::search::Sort value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::search::Sort::initializeClass, &value))
              {
                INT_CALL(self->object.setGroupSort(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "groupSort", arg);
            return -1;
          }

          static int t_GroupingSearch_set__includeMaxScore(t_GroupingSearch *self, PyObject *arg, void *data)
          {
            {
              jboolean value;
              if (!parseArg(arg, "Z", &value))
              {
                INT_CALL(self->object.setIncludeMaxScore(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "includeMaxScore", arg);
            return -1;
          }

          static int t_GroupingSearch_set__includeScores(t_GroupingSearch *self, PyObject *arg, void *data)
          {
            {
              jboolean value;
              if (!parseArg(arg, "Z", &value))
              {
                INT_CALL(self->object.setIncludeScores(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "includeScores", arg);
            return -1;
          }

          static int t_GroupingSearch_set__initialSize(t_GroupingSearch *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setInitialSize(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "initialSize", arg);
            return -1;
          }

          static int t_GroupingSearch_set__sortWithinGroup(t_GroupingSearch *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::search::Sort value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::search::Sort::initializeClass, &value))
              {
                INT_CALL(self->object.setSortWithinGroup(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "sortWithinGroup", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/synonym/SolrSynonymParser.h"
#include "java/io/Reader.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace synonym {

          ::java::lang::Class *SolrSynonymParser::class$ = NULL;
          jmethodID *SolrSynonymParser::mids$ = NULL;
          bool SolrSynonymParser::live$ = false;

          jclass SolrSynonymParser::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/synonym/SolrSynonymParser");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_702f1f56] = env->getMethodID(cls, "<init>", "(ZZLorg/apache/lucene/analysis/Analyzer;)V");
              mids$[mid_parse_cf2e3c10] = env->getMethodID(cls, "parse", "(Ljava/io/Reader;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SolrSynonymParser::SolrSynonymParser(jboolean a0, jboolean a1, const ::org::apache::lucene::analysis::Analyzer & a2) : ::org::apache::lucene::analysis::synonym::SynonymMap$Parser(env->newObject(initializeClass, &mids$, mid_init$_702f1f56, a0, a1, a2.this$)) {}

          void SolrSynonymParser::parse(const ::java::io::Reader & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_parse_cf2e3c10], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace synonym {
          static PyObject *t_SolrSynonymParser_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SolrSynonymParser_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SolrSynonymParser_init_(t_SolrSynonymParser *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SolrSynonymParser_parse(t_SolrSynonymParser *self, PyObject *args);

          static PyMethodDef t_SolrSynonymParser__methods_[] = {
            DECLARE_METHOD(t_SolrSynonymParser, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SolrSynonymParser, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SolrSynonymParser, parse, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SolrSynonymParser, t_SolrSynonymParser, ::org::apache::lucene::analysis::synonym::SynonymMap$Parser, SolrSynonymParser, t_SolrSynonymParser_init_, 0, 0, 0, 0, 0);

          void t_SolrSynonymParser::install(PyObject *module)
          {
            installType(&PY_TYPE(SolrSynonymParser), module, "SolrSynonymParser", 0);
          }

          void t_SolrSynonymParser::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SolrSynonymParser).tp_dict, "class_", make_descriptor(SolrSynonymParser::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SolrSynonymParser).tp_dict, "wrapfn_", make_descriptor(t_SolrSynonymParser::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SolrSynonymParser).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SolrSynonymParser_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SolrSynonymParser::initializeClass, 1)))
              return NULL;
            return t_SolrSynonymParser::wrap_Object(SolrSynonymParser(((t_SolrSynonymParser *) arg)->object.this$));
          }
          static PyObject *t_SolrSynonymParser_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SolrSynonymParser::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SolrSynonymParser_init_(t_SolrSynonymParser *self, PyObject *args, PyObject *kwds)
          {
            jboolean a0;
            jboolean a1;
            ::org::apache::lucene::analysis::Analyzer a2((jobject) NULL);
            SolrSynonymParser object((jobject) NULL);

            if (!parseArgs(args, "ZZk", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1, &a2))
            {
              INT_CALL(object = SolrSynonymParser(a0, a1, a2));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SolrSynonymParser_parse(t_SolrSynonymParser *self, PyObject *args)
          {
            ::java::io::Reader a0((jobject) NULL);

            if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
            {
              OBJ_CALL(self->object.parse(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(SolrSynonymParser), (PyObject *) self, "parse", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/fi/FinnishLightStemFilterFactory.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fi {

          ::java::lang::Class *FinnishLightStemFilterFactory::class$ = NULL;
          jmethodID *FinnishLightStemFilterFactory::mids$ = NULL;
          bool FinnishLightStemFilterFactory::live$ = false;

          jclass FinnishLightStemFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/fi/FinnishLightStemFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FinnishLightStemFilterFactory::FinnishLightStemFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream FinnishLightStemFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fi {
          static PyObject *t_FinnishLightStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FinnishLightStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FinnishLightStemFilterFactory_init_(t_FinnishLightStemFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FinnishLightStemFilterFactory_create(t_FinnishLightStemFilterFactory *self, PyObject *args);

          static PyMethodDef t_FinnishLightStemFilterFactory__methods_[] = {
            DECLARE_METHOD(t_FinnishLightStemFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FinnishLightStemFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FinnishLightStemFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FinnishLightStemFilterFactory, t_FinnishLightStemFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, FinnishLightStemFilterFactory, t_FinnishLightStemFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_FinnishLightStemFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(FinnishLightStemFilterFactory), module, "FinnishLightStemFilterFactory", 0);
          }

          void t_FinnishLightStemFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FinnishLightStemFilterFactory).tp_dict, "class_", make_descriptor(FinnishLightStemFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FinnishLightStemFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_FinnishLightStemFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FinnishLightStemFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FinnishLightStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FinnishLightStemFilterFactory::initializeClass, 1)))
              return NULL;
            return t_FinnishLightStemFilterFactory::wrap_Object(FinnishLightStemFilterFactory(((t_FinnishLightStemFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_FinnishLightStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FinnishLightStemFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FinnishLightStemFilterFactory_init_(t_FinnishLightStemFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            FinnishLightStemFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = FinnishLightStemFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_FinnishLightStemFilterFactory_create(t_FinnishLightStemFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(FinnishLightStemFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/lang/Exception.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace java {
  namespace lang {

    ::java::lang::Class *Exception::class$ = NULL;
    jmethodID *Exception::mids$ = NULL;
    bool Exception::live$ = false;

    jclass Exception::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/lang/Exception");

        mids$ = new jmethodID[max_mid];
        mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
        mids$[mid_init$_c5ec8ca4] = env->getMethodID(cls, "<init>", "(Ljava/lang/Throwable;)V");
        mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
        mids$[mid_init$_01646a2e] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/Throwable;)V");

        class$ = (::java::lang::Class *) new JObject(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    Exception::Exception() : ::java::lang::Throwable(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

    Exception::Exception(const ::java::lang::Throwable & a0) : ::java::lang::Throwable(env->newObject(initializeClass, &mids$, mid_init$_c5ec8ca4, a0.this$)) {}

    Exception::Exception(const ::java::lang::String & a0) : ::java::lang::Throwable(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

    Exception::Exception(const ::java::lang::String & a0, const ::java::lang::Throwable & a1) : ::java::lang::Throwable(env->newObject(initializeClass, &mids$, mid_init$_01646a2e, a0.this$, a1.this$)) {}
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace lang {
    static PyObject *t_Exception_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Exception_instance_(PyTypeObject *type, PyObject *arg);
    static int t_Exception_init_(t_Exception *self, PyObject *args, PyObject *kwds);

    static PyMethodDef t_Exception__methods_[] = {
      DECLARE_METHOD(t_Exception, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Exception, instance_, METH_O | METH_CLASS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(Exception, t_Exception, ::java::lang::Throwable, Exception, t_Exception_init_, 0, 0, 0, 0, 0);

    void t_Exception::install(PyObject *module)
    {
      installType(&PY_TYPE(Exception), module, "Exception", 0);
    }

    void t_Exception::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(Exception).tp_dict, "class_", make_descriptor(Exception::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(Exception).tp_dict, "wrapfn_", make_descriptor(t_Exception::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(Exception).tp_dict, "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_Exception_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, Exception::initializeClass, 1)))
        return NULL;
      return t_Exception::wrap_Object(Exception(((t_Exception *) arg)->object.this$));
    }
    static PyObject *t_Exception_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, Exception::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static int t_Exception_init_(t_Exception *self, PyObject *args, PyObject *kwds)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          Exception object((jobject) NULL);

          INT_CALL(object = Exception());
          self->object = object;
          break;
        }
        goto err;
       case 1:
        {
          ::java::lang::Throwable a0((jobject) NULL);
          Exception object((jobject) NULL);

          if (!parseArgs(args, "k", ::java::lang::Throwable::initializeClass, &a0))
          {
            INT_CALL(object = Exception(a0));
            self->object = object;
            break;
          }
        }
        {
          ::java::lang::String a0((jobject) NULL);
          Exception object((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            INT_CALL(object = Exception(a0));
            self->object = object;
            break;
          }
        }
        goto err;
       case 2:
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::Throwable a1((jobject) NULL);
          Exception object((jobject) NULL);

          if (!parseArgs(args, "sk", ::java::lang::Throwable::initializeClass, &a0, &a1))
          {
            INT_CALL(object = Exception(a0, a1));
            self->object = object;
            break;
          }
        }
       default:
       err:
        PyErr_SetArgsError((PyObject *) self, "__init__", args);
        return -1;
      }

      return 0;
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/text/DateFormat.h"
#include "java/util/TimeZone.h"
#include "java/lang/Class.h"
#include "java/lang/StringBuffer.h"
#include "java/lang/Object.h"
#include "java/util/Calendar.h"
#include "java/text/NumberFormat.h"
#include "java/util/Locale.h"
#include "java/util/Date.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace java {
  namespace text {

    ::java::lang::Class *DateFormat::class$ = NULL;
    jmethodID *DateFormat::mids$ = NULL;
    bool DateFormat::live$ = false;
    jint DateFormat::AM_PM_FIELD = (jint) 0;
    jint DateFormat::DATE_FIELD = (jint) 0;
    jint DateFormat::DAY_OF_WEEK_FIELD = (jint) 0;
    jint DateFormat::DAY_OF_WEEK_IN_MONTH_FIELD = (jint) 0;
    jint DateFormat::DAY_OF_YEAR_FIELD = (jint) 0;
    jint DateFormat::DEFAULT = (jint) 0;
    jint DateFormat::ERA_FIELD = (jint) 0;
    jint DateFormat::FULL = (jint) 0;
    jint DateFormat::HOUR0_FIELD = (jint) 0;
    jint DateFormat::HOUR1_FIELD = (jint) 0;
    jint DateFormat::HOUR_OF_DAY0_FIELD = (jint) 0;
    jint DateFormat::HOUR_OF_DAY1_FIELD = (jint) 0;
    jint DateFormat::LONG = (jint) 0;
    jint DateFormat::MEDIUM = (jint) 0;
    jint DateFormat::MILLISECOND_FIELD = (jint) 0;
    jint DateFormat::MINUTE_FIELD = (jint) 0;
    jint DateFormat::MONTH_FIELD = (jint) 0;
    jint DateFormat::SECOND_FIELD = (jint) 0;
    jint DateFormat::SHORT = (jint) 0;
    jint DateFormat::TIMEZONE_FIELD = (jint) 0;
    jint DateFormat::WEEK_OF_MONTH_FIELD = (jint) 0;
    jint DateFormat::WEEK_OF_YEAR_FIELD = (jint) 0;
    jint DateFormat::YEAR_FIELD = (jint) 0;

    jclass DateFormat::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/text/DateFormat");

        mids$ = new jmethodID[max_mid];
        mids$[mid_clone_846352c3] = env->getMethodID(cls, "clone", "()Ljava/lang/Object;");
        mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
        mids$[mid_format_60ff0f6a] = env->getMethodID(cls, "format", "(Ljava/util/Date;)Ljava/lang/String;");
        mids$[mid_getAvailableLocales_59cb5b46] = env->getStaticMethodID(cls, "getAvailableLocales", "()[Ljava/util/Locale;");
        mids$[mid_getCalendar_5a365c68] = env->getMethodID(cls, "getCalendar", "()Ljava/util/Calendar;");
        mids$[mid_getDateInstance_5b76e92a] = env->getStaticMethodID(cls, "getDateInstance", "()Ljava/text/DateFormat;");
        mids$[mid_getDateInstance_f487f948] = env->getStaticMethodID(cls, "getDateInstance", "(I)Ljava/text/DateFormat;");
        mids$[mid_getDateInstance_0c1a225b] = env->getStaticMethodID(cls, "getDateInstance", "(ILjava/util/Locale;)Ljava/text/DateFormat;");
        mids$[mid_getDateTimeInstance_5b76e92a] = env->getStaticMethodID(cls, "getDateTimeInstance", "()Ljava/text/DateFormat;");
        mids$[mid_getDateTimeInstance_47ab2552] = env->getStaticMethodID(cls, "getDateTimeInstance", "(II)Ljava/text/DateFormat;");
        mids$[mid_getDateTimeInstance_32c76395] = env->getStaticMethodID(cls, "getDateTimeInstance", "(IILjava/util/Locale;)Ljava/text/DateFormat;");
        mids$[mid_getInstance_5b76e92a] = env->getStaticMethodID(cls, "getInstance", "()Ljava/text/DateFormat;");
        mids$[mid_getNumberFormat_6b701965] = env->getMethodID(cls, "getNumberFormat", "()Ljava/text/NumberFormat;");
        mids$[mid_getTimeInstance_5b76e92a] = env->getStaticMethodID(cls, "getTimeInstance", "()Ljava/text/DateFormat;");
        mids$[mid_getTimeInstance_f487f948] = env->getStaticMethodID(cls, "getTimeInstance", "(I)Ljava/text/DateFormat;");
        mids$[mid_getTimeInstance_0c1a225b] = env->getStaticMethodID(cls, "getTimeInstance", "(ILjava/util/Locale;)Ljava/text/DateFormat;");
        mids$[mid_getTimeZone_6cce40e5] = env->getMethodID(cls, "getTimeZone", "()Ljava/util/TimeZone;");
        mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
        mids$[mid_isLenient_54c6a16a] = env->getMethodID(cls, "isLenient", "()Z");
        mids$[mid_parse_e1ca31a4] = env->getMethodID(cls, "parse", "(Ljava/lang/String;)Ljava/util/Date;");
        mids$[mid_setCalendar_3b3fa6b1] = env->getMethodID(cls, "setCalendar", "(Ljava/util/Calendar;)V");
        mids$[mid_setLenient_bb0c767f] = env->getMethodID(cls, "setLenient", "(Z)V");
        mids$[mid_setNumberFormat_d2d1ba24] = env->getMethodID(cls, "setNumberFormat", "(Ljava/text/NumberFormat;)V");
        mids$[mid_setTimeZone_f7b32d20] = env->getMethodID(cls, "setTimeZone", "(Ljava/util/TimeZone;)V");

        class$ = (::java::lang::Class *) new JObject(cls);
        cls = (jclass) class$->this$;

        AM_PM_FIELD = env->getStaticIntField(cls, "AM_PM_FIELD");
        DATE_FIELD = env->getStaticIntField(cls, "DATE_FIELD");
        DAY_OF_WEEK_FIELD = env->getStaticIntField(cls, "DAY_OF_WEEK_FIELD");
        DAY_OF_WEEK_IN_MONTH_FIELD = env->getStaticIntField(cls, "DAY_OF_WEEK_IN_MONTH_FIELD");
        DAY_OF_YEAR_FIELD = env->getStaticIntField(cls, "DAY_OF_YEAR_FIELD");
        DEFAULT = env->getStaticIntField(cls, "DEFAULT");
        ERA_FIELD = env->getStaticIntField(cls, "ERA_FIELD");
        FULL = env->getStaticIntField(cls, "FULL");
        HOUR0_FIELD = env->getStaticIntField(cls, "HOUR0_FIELD");
        HOUR1_FIELD = env->getStaticIntField(cls, "HOUR1_FIELD");
        HOUR_OF_DAY0_FIELD = env->getStaticIntField(cls, "HOUR_OF_DAY0_FIELD");
        HOUR_OF_DAY1_FIELD = env->getStaticIntField(cls, "HOUR_OF_DAY1_FIELD");
        LONG = env->getStaticIntField(cls, "LONG");
        MEDIUM = env->getStaticIntField(cls, "MEDIUM");
        MILLISECOND_FIELD = env->getStaticIntField(cls, "MILLISECOND_FIELD");
        MINUTE_FIELD = env->getStaticIntField(cls, "MINUTE_FIELD");
        MONTH_FIELD = env->getStaticIntField(cls, "MONTH_FIELD");
        SECOND_FIELD = env->getStaticIntField(cls, "SECOND_FIELD");
        SHORT = env->getStaticIntField(cls, "SHORT");
        TIMEZONE_FIELD = env->getStaticIntField(cls, "TIMEZONE_FIELD");
        WEEK_OF_MONTH_FIELD = env->getStaticIntField(cls, "WEEK_OF_MONTH_FIELD");
        WEEK_OF_YEAR_FIELD = env->getStaticIntField(cls, "WEEK_OF_YEAR_FIELD");
        YEAR_FIELD = env->getStaticIntField(cls, "YEAR_FIELD");
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    ::java::lang::Object DateFormat::clone() const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_clone_846352c3]));
    }

    jboolean DateFormat::equals(const ::java::lang::Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
    }

    ::java::lang::String DateFormat::format(const ::java::util::Date & a0) const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_format_60ff0f6a], a0.this$));
    }

    JArray< ::java::util::Locale > DateFormat::getAvailableLocales()
    {
      jclass cls = env->getClass(initializeClass);
      return JArray< ::java::util::Locale >(env->callStaticObjectMethod(cls, mids$[mid_getAvailableLocales_59cb5b46]));
    }

    ::java::util::Calendar DateFormat::getCalendar() const
    {
      return ::java::util::Calendar(env->callObjectMethod(this$, mids$[mid_getCalendar_5a365c68]));
    }

    DateFormat DateFormat::getDateInstance()
    {
      jclass cls = env->getClass(initializeClass);
      return DateFormat(env->callStaticObjectMethod(cls, mids$[mid_getDateInstance_5b76e92a]));
    }

    DateFormat DateFormat::getDateInstance(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return DateFormat(env->callStaticObjectMethod(cls, mids$[mid_getDateInstance_f487f948], a0));
    }

    DateFormat DateFormat::getDateInstance(jint a0, const ::java::util::Locale & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return DateFormat(env->callStaticObjectMethod(cls, mids$[mid_getDateInstance_0c1a225b], a0, a1.this$));
    }

    DateFormat DateFormat::getDateTimeInstance()
    {
      jclass cls = env->getClass(initializeClass);
      return DateFormat(env->callStaticObjectMethod(cls, mids$[mid_getDateTimeInstance_5b76e92a]));
    }

    DateFormat DateFormat::getDateTimeInstance(jint a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return DateFormat(env->callStaticObjectMethod(cls, mids$[mid_getDateTimeInstance_47ab2552], a0, a1));
    }

    DateFormat DateFormat::getDateTimeInstance(jint a0, jint a1, const ::java::util::Locale & a2)
    {
      jclass cls = env->getClass(initializeClass);
      return DateFormat(env->callStaticObjectMethod(cls, mids$[mid_getDateTimeInstance_32c76395], a0, a1, a2.this$));
    }

    DateFormat DateFormat::getInstance()
    {
      jclass cls = env->getClass(initializeClass);
      return DateFormat(env->callStaticObjectMethod(cls, mids$[mid_getInstance_5b76e92a]));
    }

    ::java::text::NumberFormat DateFormat::getNumberFormat() const
    {
      return ::java::text::NumberFormat(env->callObjectMethod(this$, mids$[mid_getNumberFormat_6b701965]));
    }

    DateFormat DateFormat::getTimeInstance()
    {
      jclass cls = env->getClass(initializeClass);
      return DateFormat(env->callStaticObjectMethod(cls, mids$[mid_getTimeInstance_5b76e92a]));
    }

    DateFormat DateFormat::getTimeInstance(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return DateFormat(env->callStaticObjectMethod(cls, mids$[mid_getTimeInstance_f487f948], a0));
    }

    DateFormat DateFormat::getTimeInstance(jint a0, const ::java::util::Locale & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return DateFormat(env->callStaticObjectMethod(cls, mids$[mid_getTimeInstance_0c1a225b], a0, a1.this$));
    }

    ::java::util::TimeZone DateFormat::getTimeZone() const
    {
      return ::java::util::TimeZone(env->callObjectMethod(this$, mids$[mid_getTimeZone_6cce40e5]));
    }

    jint DateFormat::hashCode() const
    {
      return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
    }

    jboolean DateFormat::isLenient() const
    {
      return env->callBooleanMethod(this$, mids$[mid_isLenient_54c6a16a]);
    }

    ::java::util::Date DateFormat::parse(const ::java::lang::String & a0) const
    {
      return ::java::util::Date(env->callObjectMethod(this$, mids$[mid_parse_e1ca31a4], a0.this$));
    }

    void DateFormat::setCalendar(const ::java::util::Calendar & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_setCalendar_3b3fa6b1], a0.this$);
    }

    void DateFormat::setLenient(jboolean a0) const
    {
      env->callVoidMethod(this$, mids$[mid_setLenient_bb0c767f], a0);
    }

    void DateFormat::setNumberFormat(const ::java::text::NumberFormat & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_setNumberFormat_d2d1ba24], a0.this$);
    }

    void DateFormat::setTimeZone(const ::java::util::TimeZone & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_setTimeZone_f7b32d20], a0.this$);
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace text {
    static PyObject *t_DateFormat_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_DateFormat_instance_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_DateFormat_clone(t_DateFormat *self, PyObject *args);
    static PyObject *t_DateFormat_equals(t_DateFormat *self, PyObject *args);
    static PyObject *t_DateFormat_format(t_DateFormat *self, PyObject *args);
    static PyObject *t_DateFormat_getAvailableLocales(PyTypeObject *type);
    static PyObject *t_DateFormat_getCalendar(t_DateFormat *self);
    static PyObject *t_DateFormat_getDateInstance(PyTypeObject *type, PyObject *args);
    static PyObject *t_DateFormat_getDateTimeInstance(PyTypeObject *type, PyObject *args);
    static PyObject *t_DateFormat_getInstance(PyTypeObject *type);
    static PyObject *t_DateFormat_getNumberFormat(t_DateFormat *self);
    static PyObject *t_DateFormat_getTimeInstance(PyTypeObject *type, PyObject *args);
    static PyObject *t_DateFormat_getTimeZone(t_DateFormat *self);
    static PyObject *t_DateFormat_hashCode(t_DateFormat *self, PyObject *args);
    static PyObject *t_DateFormat_isLenient(t_DateFormat *self);
    static PyObject *t_DateFormat_parse(t_DateFormat *self, PyObject *arg);
    static PyObject *t_DateFormat_setCalendar(t_DateFormat *self, PyObject *arg);
    static PyObject *t_DateFormat_setLenient(t_DateFormat *self, PyObject *arg);
    static PyObject *t_DateFormat_setNumberFormat(t_DateFormat *self, PyObject *arg);
    static PyObject *t_DateFormat_setTimeZone(t_DateFormat *self, PyObject *arg);
    static PyObject *t_DateFormat_get__availableLocales(t_DateFormat *self, void *data);
    static PyObject *t_DateFormat_get__calendar(t_DateFormat *self, void *data);
    static int t_DateFormat_set__calendar(t_DateFormat *self, PyObject *arg, void *data);
    static PyObject *t_DateFormat_get__dateInstance(t_DateFormat *self, void *data);
    static PyObject *t_DateFormat_get__dateTimeInstance(t_DateFormat *self, void *data);
    static PyObject *t_DateFormat_get__instance(t_DateFormat *self, void *data);
    static PyObject *t_DateFormat_get__lenient(t_DateFormat *self, void *data);
    static int t_DateFormat_set__lenient(t_DateFormat *self, PyObject *arg, void *data);
    static PyObject *t_DateFormat_get__numberFormat(t_DateFormat *self, void *data);
    static int t_DateFormat_set__numberFormat(t_DateFormat *self, PyObject *arg, void *data);
    static PyObject *t_DateFormat_get__timeInstance(t_DateFormat *self, void *data);
    static PyObject *t_DateFormat_get__timeZone(t_DateFormat *self, void *data);
    static int t_DateFormat_set__timeZone(t_DateFormat *self, PyObject *arg, void *data);
    static PyGetSetDef t_DateFormat__fields_[] = {
      DECLARE_GET_FIELD(t_DateFormat, availableLocales),
      DECLARE_GETSET_FIELD(t_DateFormat, calendar),
      DECLARE_GET_FIELD(t_DateFormat, dateInstance),
      DECLARE_GET_FIELD(t_DateFormat, dateTimeInstance),
      DECLARE_GET_FIELD(t_DateFormat, instance),
      DECLARE_GETSET_FIELD(t_DateFormat, lenient),
      DECLARE_GETSET_FIELD(t_DateFormat, numberFormat),
      DECLARE_GET_FIELD(t_DateFormat, timeInstance),
      DECLARE_GETSET_FIELD(t_DateFormat, timeZone),
      { NULL, NULL, NULL, NULL, NULL }
    };

    static PyMethodDef t_DateFormat__methods_[] = {
      DECLARE_METHOD(t_DateFormat, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_DateFormat, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_DateFormat, clone, METH_VARARGS),
      DECLARE_METHOD(t_DateFormat, equals, METH_VARARGS),
      DECLARE_METHOD(t_DateFormat, format, METH_VARARGS),
      DECLARE_METHOD(t_DateFormat, getAvailableLocales, METH_NOARGS | METH_CLASS),
      DECLARE_METHOD(t_DateFormat, getCalendar, METH_NOARGS),
      DECLARE_METHOD(t_DateFormat, getDateInstance, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_DateFormat, getDateTimeInstance, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_DateFormat, getInstance, METH_NOARGS | METH_CLASS),
      DECLARE_METHOD(t_DateFormat, getNumberFormat, METH_NOARGS),
      DECLARE_METHOD(t_DateFormat, getTimeInstance, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_DateFormat, getTimeZone, METH_NOARGS),
      DECLARE_METHOD(t_DateFormat, hashCode, METH_VARARGS),
      DECLARE_METHOD(t_DateFormat, isLenient, METH_NOARGS),
      DECLARE_METHOD(t_DateFormat, parse, METH_O),
      DECLARE_METHOD(t_DateFormat, setCalendar, METH_O),
      DECLARE_METHOD(t_DateFormat, setLenient, METH_O),
      DECLARE_METHOD(t_DateFormat, setNumberFormat, METH_O),
      DECLARE_METHOD(t_DateFormat, setTimeZone, METH_O),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(DateFormat, t_DateFormat, ::java::text::Format, DateFormat, abstract_init, 0, 0, t_DateFormat__fields_, 0, 0);

    void t_DateFormat::install(PyObject *module)
    {
      installType(&PY_TYPE(DateFormat), module, "DateFormat", 0);
    }

    void t_DateFormat::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(DateFormat).tp_dict, "class_", make_descriptor(DateFormat::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(DateFormat).tp_dict, "wrapfn_", make_descriptor(t_DateFormat::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(DateFormat).tp_dict, "boxfn_", make_descriptor(boxObject));
      env->getClass(DateFormat::initializeClass);
      PyDict_SetItemString(PY_TYPE(DateFormat).tp_dict, "AM_PM_FIELD", make_descriptor(DateFormat::AM_PM_FIELD));
      PyDict_SetItemString(PY_TYPE(DateFormat).tp_dict, "DATE_FIELD", make_descriptor(DateFormat::DATE_FIELD));
      PyDict_SetItemString(PY_TYPE(DateFormat).tp_dict, "DAY_OF_WEEK_FIELD", make_descriptor(DateFormat::DAY_OF_WEEK_FIELD));
      PyDict_SetItemString(PY_TYPE(DateFormat).tp_dict, "DAY_OF_WEEK_IN_MONTH_FIELD", make_descriptor(DateFormat::DAY_OF_WEEK_IN_MONTH_FIELD));
      PyDict_SetItemString(PY_TYPE(DateFormat).tp_dict, "DAY_OF_YEAR_FIELD", make_descriptor(DateFormat::DAY_OF_YEAR_FIELD));
      PyDict_SetItemString(PY_TYPE(DateFormat).tp_dict, "DEFAULT", make_descriptor(DateFormat::DEFAULT));
      PyDict_SetItemString(PY_TYPE(DateFormat).tp_dict, "ERA_FIELD", make_descriptor(DateFormat::ERA_FIELD));
      PyDict_SetItemString(PY_TYPE(DateFormat).tp_dict, "FULL", make_descriptor(DateFormat::FULL));
      PyDict_SetItemString(PY_TYPE(DateFormat).tp_dict, "HOUR0_FIELD", make_descriptor(DateFormat::HOUR0_FIELD));
      PyDict_SetItemString(PY_TYPE(DateFormat).tp_dict, "HOUR1_FIELD", make_descriptor(DateFormat::HOUR1_FIELD));
      PyDict_SetItemString(PY_TYPE(DateFormat).tp_dict, "HOUR_OF_DAY0_FIELD", make_descriptor(DateFormat::HOUR_OF_DAY0_FIELD));
      PyDict_SetItemString(PY_TYPE(DateFormat).tp_dict, "HOUR_OF_DAY1_FIELD", make_descriptor(DateFormat::HOUR_OF_DAY1_FIELD));
      PyDict_SetItemString(PY_TYPE(DateFormat).tp_dict, "LONG", make_descriptor(DateFormat::LONG));
      PyDict_SetItemString(PY_TYPE(DateFormat).tp_dict, "MEDIUM", make_descriptor(DateFormat::MEDIUM));
      PyDict_SetItemString(PY_TYPE(DateFormat).tp_dict, "MILLISECOND_FIELD", make_descriptor(DateFormat::MILLISECOND_FIELD));
      PyDict_SetItemString(PY_TYPE(DateFormat).tp_dict, "MINUTE_FIELD", make_descriptor(DateFormat::MINUTE_FIELD));
      PyDict_SetItemString(PY_TYPE(DateFormat).tp_dict, "MONTH_FIELD", make_descriptor(DateFormat::MONTH_FIELD));
      PyDict_SetItemString(PY_TYPE(DateFormat).tp_dict, "SECOND_FIELD", make_descriptor(DateFormat::SECOND_FIELD));
      PyDict_SetItemString(PY_TYPE(DateFormat).tp_dict, "SHORT", make_descriptor(DateFormat::SHORT));
      PyDict_SetItemString(PY_TYPE(DateFormat).tp_dict, "TIMEZONE_FIELD", make_descriptor(DateFormat::TIMEZONE_FIELD));
      PyDict_SetItemString(PY_TYPE(DateFormat).tp_dict, "WEEK_OF_MONTH_FIELD", make_descriptor(DateFormat::WEEK_OF_MONTH_FIELD));
      PyDict_SetItemString(PY_TYPE(DateFormat).tp_dict, "WEEK_OF_YEAR_FIELD", make_descriptor(DateFormat::WEEK_OF_YEAR_FIELD));
      PyDict_SetItemString(PY_TYPE(DateFormat).tp_dict, "YEAR_FIELD", make_descriptor(DateFormat::YEAR_FIELD));
    }

    static PyObject *t_DateFormat_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, DateFormat::initializeClass, 1)))
        return NULL;
      return t_DateFormat::wrap_Object(DateFormat(((t_DateFormat *) arg)->object.this$));
    }
    static PyObject *t_DateFormat_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, DateFormat::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static PyObject *t_DateFormat_clone(t_DateFormat *self, PyObject *args)
    {
      ::java::lang::Object result((jobject) NULL);

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.clone());
        return ::java::lang::t_Object::wrap_Object(result);
      }

      return callSuper(&PY_TYPE(DateFormat), (PyObject *) self, "clone", args, 2);
    }

    static PyObject *t_DateFormat_equals(t_DateFormat *self, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      jboolean result;

      if (!parseArgs(args, "o", &a0))
      {
        OBJ_CALL(result = self->object.equals(a0));
        Py_RETURN_BOOL(result);
      }

      return callSuper(&PY_TYPE(DateFormat), (PyObject *) self, "equals", args, 2);
    }

    static PyObject *t_DateFormat_format(t_DateFormat *self, PyObject *args)
    {
      ::java::util::Date a0((jobject) NULL);
      ::java::lang::String result((jobject) NULL);

      if (!parseArgs(args, "k", ::java::util::Date::initializeClass, &a0))
      {
        OBJ_CALL(result = self->object.format(a0));
        return j2p(result);
      }

      return callSuper(&PY_TYPE(DateFormat), (PyObject *) self, "format", args, 2);
    }

    static PyObject *t_DateFormat_getAvailableLocales(PyTypeObject *type)
    {
      JArray< ::java::util::Locale > result((jobject) NULL);
      OBJ_CALL(result = ::java::text::DateFormat::getAvailableLocales());
      return JArray<jobject>(result.this$).wrap(::java::util::t_Locale::wrap_jobject);
    }

    static PyObject *t_DateFormat_getCalendar(t_DateFormat *self)
    {
      ::java::util::Calendar result((jobject) NULL);
      OBJ_CALL(result = self->object.getCalendar());
      return ::java::util::t_Calendar::wrap_Object(result);
    }

    static PyObject *t_DateFormat_getDateInstance(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          DateFormat result((jobject) NULL);
          OBJ_CALL(result = ::java::text::DateFormat::getDateInstance());
          return t_DateFormat::wrap_Object(result);
        }
        break;
       case 1:
        {
          jint a0;
          DateFormat result((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = ::java::text::DateFormat::getDateInstance(a0));
            return t_DateFormat::wrap_Object(result);
          }
        }
        break;
       case 2:
        {
          jint a0;
          ::java::util::Locale a1((jobject) NULL);
          DateFormat result((jobject) NULL);

          if (!parseArgs(args, "Ik", ::java::util::Locale::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::java::text::DateFormat::getDateInstance(a0, a1));
            return t_DateFormat::wrap_Object(result);
          }
        }
      }

      PyErr_SetArgsError(type, "getDateInstance", args);
      return NULL;
    }

    static PyObject *t_DateFormat_getDateTimeInstance(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          DateFormat result((jobject) NULL);
          OBJ_CALL(result = ::java::text::DateFormat::getDateTimeInstance());
          return t_DateFormat::wrap_Object(result);
        }
        break;
       case 2:
        {
          jint a0;
          jint a1;
          DateFormat result((jobject) NULL);

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(result = ::java::text::DateFormat::getDateTimeInstance(a0, a1));
            return t_DateFormat::wrap_Object(result);
          }
        }
        break;
       case 3:
        {
          jint a0;
          jint a1;
          ::java::util::Locale a2((jobject) NULL);
          DateFormat result((jobject) NULL);

          if (!parseArgs(args, "IIk", ::java::util::Locale::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::java::text::DateFormat::getDateTimeInstance(a0, a1, a2));
            return t_DateFormat::wrap_Object(result);
          }
        }
      }

      PyErr_SetArgsError(type, "getDateTimeInstance", args);
      return NULL;
    }

    static PyObject *t_DateFormat_getInstance(PyTypeObject *type)
    {
      DateFormat result((jobject) NULL);
      OBJ_CALL(result = ::java::text::DateFormat::getInstance());
      return t_DateFormat::wrap_Object(result);
    }

    static PyObject *t_DateFormat_getNumberFormat(t_DateFormat *self)
    {
      ::java::text::NumberFormat result((jobject) NULL);
      OBJ_CALL(result = self->object.getNumberFormat());
      return ::java::text::t_NumberFormat::wrap_Object(result);
    }

    static PyObject *t_DateFormat_getTimeInstance(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          DateFormat result((jobject) NULL);
          OBJ_CALL(result = ::java::text::DateFormat::getTimeInstance());
          return t_DateFormat::wrap_Object(result);
        }
        break;
       case 1:
        {
          jint a0;
          DateFormat result((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = ::java::text::DateFormat::getTimeInstance(a0));
            return t_DateFormat::wrap_Object(result);
          }
        }
        break;
       case 2:
        {
          jint a0;
          ::java::util::Locale a1((jobject) NULL);
          DateFormat result((jobject) NULL);

          if (!parseArgs(args, "Ik", ::java::util::Locale::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::java::text::DateFormat::getTimeInstance(a0, a1));
            return t_DateFormat::wrap_Object(result);
          }
        }
      }

      PyErr_SetArgsError(type, "getTimeInstance", args);
      return NULL;
    }

    static PyObject *t_DateFormat_getTimeZone(t_DateFormat *self)
    {
      ::java::util::TimeZone result((jobject) NULL);
      OBJ_CALL(result = self->object.getTimeZone());
      return ::java::util::t_TimeZone::wrap_Object(result);
    }

    static PyObject *t_DateFormat_hashCode(t_DateFormat *self, PyObject *args)
    {
      jint result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.hashCode());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(DateFormat), (PyObject *) self, "hashCode", args, 2);
    }

    static PyObject *t_DateFormat_isLenient(t_DateFormat *self)
    {
      jboolean result;
      OBJ_CALL(result = self->object.isLenient());
      Py_RETURN_BOOL(result);
    }

    static PyObject *t_DateFormat_parse(t_DateFormat *self, PyObject *arg)
    {
      ::java::lang::String a0((jobject) NULL);
      ::java::util::Date result((jobject) NULL);

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(result = self->object.parse(a0));
        return ::java::util::t_Date::wrap_Object(result);
      }

      PyErr_SetArgsError((PyObject *) self, "parse", arg);
      return NULL;
    }

    static PyObject *t_DateFormat_setCalendar(t_DateFormat *self, PyObject *arg)
    {
      ::java::util::Calendar a0((jobject) NULL);

      if (!parseArg(arg, "k", ::java::util::Calendar::initializeClass, &a0))
      {
        OBJ_CALL(self->object.setCalendar(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "setCalendar", arg);
      return NULL;
    }

    static PyObject *t_DateFormat_setLenient(t_DateFormat *self, PyObject *arg)
    {
      jboolean a0;

      if (!parseArg(arg, "Z", &a0))
      {
        OBJ_CALL(self->object.setLenient(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "setLenient", arg);
      return NULL;
    }

    static PyObject *t_DateFormat_setNumberFormat(t_DateFormat *self, PyObject *arg)
    {
      ::java::text::NumberFormat a0((jobject) NULL);

      if (!parseArg(arg, "k", ::java::text::NumberFormat::initializeClass, &a0))
      {
        OBJ_CALL(self->object.setNumberFormat(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "setNumberFormat", arg);
      return NULL;
    }

    static PyObject *t_DateFormat_setTimeZone(t_DateFormat *self, PyObject *arg)
    {
      ::java::util::TimeZone a0((jobject) NULL);

      if (!parseArg(arg, "k", ::java::util::TimeZone::initializeClass, &a0))
      {
        OBJ_CALL(self->object.setTimeZone(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "setTimeZone", arg);
      return NULL;
    }

    static PyObject *t_DateFormat_get__availableLocales(t_DateFormat *self, void *data)
    {
      JArray< ::java::util::Locale > value((jobject) NULL);
      OBJ_CALL(value = self->object.getAvailableLocales());
      return JArray<jobject>(value.this$).wrap(::java::util::t_Locale::wrap_jobject);
    }

    static PyObject *t_DateFormat_get__calendar(t_DateFormat *self, void *data)
    {
      ::java::util::Calendar value((jobject) NULL);
      OBJ_CALL(value = self->object.getCalendar());
      return ::java::util::t_Calendar::wrap_Object(value);
    }
    static int t_DateFormat_set__calendar(t_DateFormat *self, PyObject *arg, void *data)
    {
      {
        ::java::util::Calendar value((jobject) NULL);
        if (!parseArg(arg, "k", ::java::util::Calendar::initializeClass, &value))
        {
          INT_CALL(self->object.setCalendar(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "calendar", arg);
      return -1;
    }

    static PyObject *t_DateFormat_get__dateInstance(t_DateFormat *self, void *data)
    {
      DateFormat value((jobject) NULL);
      OBJ_CALL(value = self->object.getDateInstance());
      return t_DateFormat::wrap_Object(value);
    }

    static PyObject *t_DateFormat_get__dateTimeInstance(t_DateFormat *self, void *data)
    {
      DateFormat value((jobject) NULL);
      OBJ_CALL(value = self->object.getDateTimeInstance());
      return t_DateFormat::wrap_Object(value);
    }

    static PyObject *t_DateFormat_get__instance(t_DateFormat *self, void *data)
    {
      DateFormat value((jobject) NULL);
      OBJ_CALL(value = self->object.getInstance());
      return t_DateFormat::wrap_Object(value);
    }

    static PyObject *t_DateFormat_get__lenient(t_DateFormat *self, void *data)
    {
      jboolean value;
      OBJ_CALL(value = self->object.isLenient());
      Py_RETURN_BOOL(value);
    }
    static int t_DateFormat_set__lenient(t_DateFormat *self, PyObject *arg, void *data)
    {
      {
        jboolean value;
        if (!parseArg(arg, "Z", &value))
        {
          INT_CALL(self->object.setLenient(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "lenient", arg);
      return -1;
    }

    static PyObject *t_DateFormat_get__numberFormat(t_DateFormat *self, void *data)
    {
      ::java::text::NumberFormat value((jobject) NULL);
      OBJ_CALL(value = self->object.getNumberFormat());
      return ::java::text::t_NumberFormat::wrap_Object(value);
    }
    static int t_DateFormat_set__numberFormat(t_DateFormat *self, PyObject *arg, void *data)
    {
      {
        ::java::text::NumberFormat value((jobject) NULL);
        if (!parseArg(arg, "k", ::java::text::NumberFormat::initializeClass, &value))
        {
          INT_CALL(self->object.setNumberFormat(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "numberFormat", arg);
      return -1;
    }

    static PyObject *t_DateFormat_get__timeInstance(t_DateFormat *self, void *data)
    {
      DateFormat value((jobject) NULL);
      OBJ_CALL(value = self->object.getTimeInstance());
      return t_DateFormat::wrap_Object(value);
    }

    static PyObject *t_DateFormat_get__timeZone(t_DateFormat *self, void *data)
    {
      ::java::util::TimeZone value((jobject) NULL);
      OBJ_CALL(value = self->object.getTimeZone());
      return ::java::util::t_TimeZone::wrap_Object(value);
    }
    static int t_DateFormat_set__timeZone(t_DateFormat *self, PyObject *arg, void *data)
    {
      {
        ::java::util::TimeZone value((jobject) NULL);
        if (!parseArg(arg, "k", ::java::util::TimeZone::initializeClass, &value))
        {
          INT_CALL(self->object.setTimeZone(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "timeZone", arg);
      return -1;
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/BitsFilteredDocIdSet.h"
#include "org/apache/lucene/search/DocIdSet.h"
#include "org/apache/lucene/util/Bits.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *BitsFilteredDocIdSet::class$ = NULL;
        jmethodID *BitsFilteredDocIdSet::mids$ = NULL;
        bool BitsFilteredDocIdSet::live$ = false;

        jclass BitsFilteredDocIdSet::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/BitsFilteredDocIdSet");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_042197af] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/DocIdSet;Lorg/apache/lucene/util/Bits;)V");
            mids$[mid_wrap_e3d48bdb] = env->getStaticMethodID(cls, "wrap", "(Lorg/apache/lucene/search/DocIdSet;Lorg/apache/lucene/util/Bits;)Lorg/apache/lucene/search/DocIdSet;");
            mids$[mid_match_39c7bd30] = env->getMethodID(cls, "match", "(I)Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        BitsFilteredDocIdSet::BitsFilteredDocIdSet(const ::org::apache::lucene::search::DocIdSet & a0, const ::org::apache::lucene::util::Bits & a1) : ::org::apache::lucene::search::FilteredDocIdSet(env->newObject(initializeClass, &mids$, mid_init$_042197af, a0.this$, a1.this$)) {}

        ::org::apache::lucene::search::DocIdSet BitsFilteredDocIdSet::wrap(const ::org::apache::lucene::search::DocIdSet & a0, const ::org::apache::lucene::util::Bits & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::DocIdSet(env->callStaticObjectMethod(cls, mids$[mid_wrap_e3d48bdb], a0.this$, a1.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_BitsFilteredDocIdSet_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BitsFilteredDocIdSet_instance_(PyTypeObject *type, PyObject *arg);
        static int t_BitsFilteredDocIdSet_init_(t_BitsFilteredDocIdSet *self, PyObject *args, PyObject *kwds);
        static PyObject *t_BitsFilteredDocIdSet_wrap(PyTypeObject *type, PyObject *args);

        static PyMethodDef t_BitsFilteredDocIdSet__methods_[] = {
          DECLARE_METHOD(t_BitsFilteredDocIdSet, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BitsFilteredDocIdSet, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BitsFilteredDocIdSet, wrap, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(BitsFilteredDocIdSet, t_BitsFilteredDocIdSet, ::org::apache::lucene::search::FilteredDocIdSet, BitsFilteredDocIdSet, t_BitsFilteredDocIdSet_init_, 0, 0, 0, 0, 0);

        void t_BitsFilteredDocIdSet::install(PyObject *module)
        {
          installType(&PY_TYPE(BitsFilteredDocIdSet), module, "BitsFilteredDocIdSet", 0);
        }

        void t_BitsFilteredDocIdSet::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(BitsFilteredDocIdSet).tp_dict, "class_", make_descriptor(BitsFilteredDocIdSet::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(BitsFilteredDocIdSet).tp_dict, "wrapfn_", make_descriptor(t_BitsFilteredDocIdSet::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(BitsFilteredDocIdSet).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_BitsFilteredDocIdSet_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, BitsFilteredDocIdSet::initializeClass, 1)))
            return NULL;
          return t_BitsFilteredDocIdSet::wrap_Object(BitsFilteredDocIdSet(((t_BitsFilteredDocIdSet *) arg)->object.this$));
        }
        static PyObject *t_BitsFilteredDocIdSet_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, BitsFilteredDocIdSet::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_BitsFilteredDocIdSet_init_(t_BitsFilteredDocIdSet *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::search::DocIdSet a0((jobject) NULL);
          ::org::apache::lucene::util::Bits a1((jobject) NULL);
          BitsFilteredDocIdSet object((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::search::DocIdSet::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, &a0, &a1))
          {
            INT_CALL(object = BitsFilteredDocIdSet(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_BitsFilteredDocIdSet_wrap(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::search::DocIdSet a0((jobject) NULL);
          ::org::apache::lucene::util::Bits a1((jobject) NULL);
          ::org::apache::lucene::search::DocIdSet result((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::search::DocIdSet::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::search::BitsFilteredDocIdSet::wrap(a0, a1));
            return ::org::apache::lucene::search::t_DocIdSet::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "wrap", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/lang/Float.h"
#include "java/lang/Class.h"
#include "java/lang/Comparable.h"
#include "java/lang/Object.h"
#include "java/lang/NumberFormatException.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace java {
  namespace lang {

    ::java::lang::Class *Float::class$ = NULL;
    jmethodID *Float::mids$ = NULL;
    bool Float::live$ = false;
    jint Float::BYTES = (jint) 0;
    jint Float::MAX_EXPONENT = (jint) 0;
    jfloat Float::MAX_VALUE = (jfloat) 0;
    jint Float::MIN_EXPONENT = (jint) 0;
    jfloat Float::MIN_NORMAL = (jfloat) 0;
    jfloat Float::MIN_VALUE = (jfloat) 0;
    jfloat Float::NEGATIVE_INFINITY = (jfloat) 0;
    jfloat Float::NaN = (jfloat) 0;
    jfloat Float::POSITIVE_INFINITY = (jfloat) 0;
    jint Float::SIZE = (jint) 0;
    ::java::lang::Class *Float::TYPE = NULL;

    jclass Float::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/lang/Float");

        mids$ = new jmethodID[max_mid];
        mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
        mids$[mid_init$_5d1c7645] = env->getMethodID(cls, "<init>", "(D)V");
        mids$[mid_init$_06298cab] = env->getMethodID(cls, "<init>", "(F)V");
        mids$[mid_byteValue_54c6a172] = env->getMethodID(cls, "byteValue", "()B");
        mids$[mid_compare_f1b0c01b] = env->getStaticMethodID(cls, "compare", "(FF)I");
        mids$[mid_compareTo_6b30eb75] = env->getMethodID(cls, "compareTo", "(Ljava/lang/Float;)I");
        mids$[mid_doubleValue_54c6a174] = env->getMethodID(cls, "doubleValue", "()D");
        mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
        mids$[mid_floatToIntBits_06298cb4] = env->getStaticMethodID(cls, "floatToIntBits", "(F)I");
        mids$[mid_floatToRawIntBits_06298cb4] = env->getStaticMethodID(cls, "floatToRawIntBits", "(F)I");
        mids$[mid_floatValue_54c6a176] = env->getMethodID(cls, "floatValue", "()F");
        mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
        mids$[mid_hashCode_06298cb4] = env->getStaticMethodID(cls, "hashCode", "(F)I");
        mids$[mid_intBitsToFloat_39c7bd2c] = env->getStaticMethodID(cls, "intBitsToFloat", "(I)F");
        mids$[mid_intValue_54c6a179] = env->getMethodID(cls, "intValue", "()I");
        mids$[mid_isFinite_06298ca7] = env->getStaticMethodID(cls, "isFinite", "(F)Z");
        mids$[mid_isInfinite_54c6a16a] = env->getMethodID(cls, "isInfinite", "()Z");
        mids$[mid_isInfinite_06298ca7] = env->getStaticMethodID(cls, "isInfinite", "(F)Z");
        mids$[mid_isNaN_54c6a16a] = env->getMethodID(cls, "isNaN", "()Z");
        mids$[mid_isNaN_06298ca7] = env->getStaticMethodID(cls, "isNaN", "(F)Z");
        mids$[mid_longValue_54c6a17a] = env->getMethodID(cls, "longValue", "()J");
        mids$[mid_max_f1b0c014] = env->getStaticMethodID(cls, "max", "(FF)F");
        mids$[mid_min_f1b0c014] = env->getStaticMethodID(cls, "min", "(FF)F");
        mids$[mid_parseFloat_5fdc3f58] = env->getStaticMethodID(cls, "parseFloat", "(Ljava/lang/String;)F");
        mids$[mid_shortValue_54c6a163] = env->getMethodID(cls, "shortValue", "()S");
        mids$[mid_sum_f1b0c014] = env->getStaticMethodID(cls, "sum", "(FF)F");
        mids$[mid_toHexString_5ded254a] = env->getStaticMethodID(cls, "toHexString", "(F)Ljava/lang/String;");
        mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
        mids$[mid_toString_5ded254a] = env->getStaticMethodID(cls, "toString", "(F)Ljava/lang/String;");
        mids$[mid_valueOf_685a245e] = env->getStaticMethodID(cls, "valueOf", "(F)Ljava/lang/Float;");
        mids$[mid_valueOf_b837041d] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Ljava/lang/Float;");

        class$ = (::java::lang::Class *) new JObject(cls);
        cls = (jclass) class$->this$;

        BYTES = env->getStaticIntField(cls, "BYTES");
        MAX_EXPONENT = env->getStaticIntField(cls, "MAX_EXPONENT");
        MAX_VALUE = env->getStaticFloatField(cls, "MAX_VALUE");
        MIN_EXPONENT = env->getStaticIntField(cls, "MIN_EXPONENT");
        MIN_NORMAL = env->getStaticFloatField(cls, "MIN_NORMAL");
        MIN_VALUE = env->getStaticFloatField(cls, "MIN_VALUE");
        NEGATIVE_INFINITY = env->getStaticFloatField(cls, "NEGATIVE_INFINITY");
        NaN = env->getStaticFloatField(cls, "NaN");
        POSITIVE_INFINITY = env->getStaticFloatField(cls, "POSITIVE_INFINITY");
        SIZE = env->getStaticIntField(cls, "SIZE");
        TYPE = new ::java::lang::Class(env->getStaticObjectField(cls, "TYPE", "Ljava/lang/Class;"));
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    Float::Float(const ::java::lang::String & a0) : ::java::lang::Number(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

    Float::Float(jdouble a0) : ::java::lang::Number(env->newObject(initializeClass, &mids$, mid_init$_5d1c7645, a0)) {}

    Float::Float(jfloat a0) : ::java::lang::Number(env->newObject(initializeClass, &mids$, mid_init$_06298cab, a0)) {}

    jbyte Float::byteValue() const
    {
      return env->callByteMethod(this$, mids$[mid_byteValue_54c6a172]);
    }

    jint Float::compare(jfloat a0, jfloat a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_compare_f1b0c01b], a0, a1);
    }

    jint Float::compareTo(const Float & a0) const
    {
      return env->callIntMethod(this$, mids$[mid_compareTo_6b30eb75], a0.this$);
    }

    jdouble Float::doubleValue() const
    {
      return env->callDoubleMethod(this$, mids$[mid_doubleValue_54c6a174]);
    }

    jboolean Float::equals(const ::java::lang::Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
    }

    jint Float::floatToIntBits(jfloat a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_floatToIntBits_06298cb4], a0);
    }

    jint Float::floatToRawIntBits(jfloat a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_floatToRawIntBits_06298cb4], a0);
    }

    jfloat Float::floatValue() const
    {
      return env->callFloatMethod(this$, mids$[mid_floatValue_54c6a176]);
    }

    jint Float::hashCode() const
    {
      return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
    }

    jint Float::hashCode(jfloat a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_hashCode_06298cb4], a0);
    }

    jfloat Float::intBitsToFloat(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticFloatMethod(cls, mids$[mid_intBitsToFloat_39c7bd2c], a0);
    }

    jint Float::intValue() const
    {
      return env->callIntMethod(this$, mids$[mid_intValue_54c6a179]);
    }

    jboolean Float::isFinite(jfloat a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isFinite_06298ca7], a0);
    }

    jboolean Float::isInfinite() const
    {
      return env->callBooleanMethod(this$, mids$[mid_isInfinite_54c6a16a]);
    }

    jboolean Float::isInfinite(jfloat a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isInfinite_06298ca7], a0);
    }

    jboolean Float::isNaN() const
    {
      return env->callBooleanMethod(this$, mids$[mid_isNaN_54c6a16a]);
    }

    jboolean Float::isNaN(jfloat a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isNaN_06298ca7], a0);
    }

    jlong Float::longValue() const
    {
      return env->callLongMethod(this$, mids$[mid_longValue_54c6a17a]);
    }

    jfloat Float::max$(jfloat a0, jfloat a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticFloatMethod(cls, mids$[mid_max_f1b0c014], a0, a1);
    }

    jfloat Float::min$(jfloat a0, jfloat a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticFloatMethod(cls, mids$[mid_min_f1b0c014], a0, a1);
    }

    jfloat Float::parseFloat(const ::java::lang::String & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticFloatMethod(cls, mids$[mid_parseFloat_5fdc3f58], a0.this$);
    }

    jshort Float::shortValue() const
    {
      return env->callShortMethod(this$, mids$[mid_shortValue_54c6a163]);
    }

    jfloat Float::sum(jfloat a0, jfloat a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticFloatMethod(cls, mids$[mid_sum_f1b0c014], a0, a1);
    }

    ::java::lang::String Float::toHexString(jfloat a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toHexString_5ded254a], a0));
    }

    ::java::lang::String Float::toString() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
    }

    ::java::lang::String Float::toString(jfloat a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toString_5ded254a], a0));
    }

    Float Float::valueOf(jfloat a0)
    {
      jclass cls = env->getClass(initializeClass);
      return Float(env->callStaticObjectMethod(cls, mids$[mid_valueOf_685a245e], a0));
    }

    Float Float::valueOf(const ::java::lang::String & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return Float(env->callStaticObjectMethod(cls, mids$[mid_valueOf_b837041d], a0.this$));
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace lang {
    static PyObject *t_Float_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Float_instance_(PyTypeObject *type, PyObject *arg);
    static int t_Float_init_(t_Float *self, PyObject *args, PyObject *kwds);
    static PyObject *t_Float_byteValue(t_Float *self, PyObject *args);
    static PyObject *t_Float_compare(PyTypeObject *type, PyObject *args);
    static PyObject *t_Float_compareTo(t_Float *self, PyObject *arg);
    static PyObject *t_Float_doubleValue(t_Float *self, PyObject *args);
    static PyObject *t_Float_equals(t_Float *self, PyObject *args);
    static PyObject *t_Float_floatToIntBits(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Float_floatToRawIntBits(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Float_floatValue(t_Float *self, PyObject *args);
    static PyObject *t_Float_hashCode(t_Float *self, PyObject *args);
    static PyObject *t_Float_hashCode_(PyTypeObject *type, PyObject *args);
    static PyObject *t_Float_intBitsToFloat(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Float_intValue(t_Float *self, PyObject *args);
    static PyObject *t_Float_isFinite(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Float_isInfinite(t_Float *self);
    static PyObject *t_Float_isInfinite_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Float_isNaN(t_Float *self);
    static PyObject *t_Float_isNaN_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Float_longValue(t_Float *self, PyObject *args);
    static PyObject *t_Float_max(PyTypeObject *type, PyObject *args);
    static PyObject *t_Float_min(PyTypeObject *type, PyObject *args);
    static PyObject *t_Float_parseFloat(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Float_shortValue(t_Float *self, PyObject *args);
    static PyObject *t_Float_sum(PyTypeObject *type, PyObject *args);
    static PyObject *t_Float_toHexString(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Float_toString(t_Float *self, PyObject *args);
    static PyObject *t_Float_toString_(PyTypeObject *type, PyObject *args);
    static PyObject *t_Float_valueOf(PyTypeObject *type, PyObject *args);
    static PyObject *t_Float_get__infinite(t_Float *self, void *data);
    static PyObject *t_Float_get__naN(t_Float *self, void *data);
    static PyGetSetDef t_Float__fields_[] = {
      DECLARE_GET_FIELD(t_Float, infinite),
      DECLARE_GET_FIELD(t_Float, naN),
      { NULL, NULL, NULL, NULL, NULL }
    };

    static PyMethodDef t_Float__methods_[] = {
      DECLARE_METHOD(t_Float, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Float, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Float, byteValue, METH_VARARGS),
      DECLARE_METHOD(t_Float, compare, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Float, compareTo, METH_O),
      DECLARE_METHOD(t_Float, doubleValue, METH_VARARGS),
      DECLARE_METHOD(t_Float, equals, METH_VARARGS),
      DECLARE_METHOD(t_Float, floatToIntBits, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Float, floatToRawIntBits, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Float, floatValue, METH_VARARGS),
      DECLARE_METHOD(t_Float, hashCode, METH_VARARGS),
      DECLARE_METHOD(t_Float, hashCode_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Float, intBitsToFloat, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Float, intValue, METH_VARARGS),
      DECLARE_METHOD(t_Float, isFinite, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Float, isInfinite, METH_NOARGS),
      DECLARE_METHOD(t_Float, isInfinite_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Float, isNaN, METH_NOARGS),
      DECLARE_METHOD(t_Float, isNaN_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Float, longValue, METH_VARARGS),
      DECLARE_METHOD(t_Float, max, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Float, min, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Float, parseFloat, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Float, shortValue, METH_VARARGS),
      DECLARE_METHOD(t_Float, sum, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Float, toHexString, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Float, toString, METH_VARARGS),
      DECLARE_METHOD(t_Float, toString_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Float, valueOf, METH_VARARGS | METH_CLASS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(Float, t_Float, ::java::lang::Number, Float, t_Float_init_, 0, 0, t_Float__fields_, 0, 0);

    void t_Float::install(PyObject *module)
    {
      installType(&PY_TYPE(Float), module, "Float", 0);
    }

    void t_Float::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(Float).tp_dict, "class_", make_descriptor(Float::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(Float).tp_dict, "wrapfn_", make_descriptor(unboxFloat));
      PyDict_SetItemString(PY_TYPE(Float).tp_dict, "boxfn_", make_descriptor(boxFloat));
      env->getClass(Float::initializeClass);
      PyDict_SetItemString(PY_TYPE(Float).tp_dict, "BYTES", make_descriptor(Float::BYTES));
      PyDict_SetItemString(PY_TYPE(Float).tp_dict, "MAX_EXPONENT", make_descriptor(Float::MAX_EXPONENT));
      PyDict_SetItemString(PY_TYPE(Float).tp_dict, "MAX_VALUE", make_descriptor(Float::MAX_VALUE));
      PyDict_SetItemString(PY_TYPE(Float).tp_dict, "MIN_EXPONENT", make_descriptor(Float::MIN_EXPONENT));
      PyDict_SetItemString(PY_TYPE(Float).tp_dict, "MIN_NORMAL", make_descriptor(Float::MIN_NORMAL));
      PyDict_SetItemString(PY_TYPE(Float).tp_dict, "MIN_VALUE", make_descriptor(Float::MIN_VALUE));
      PyDict_SetItemString(PY_TYPE(Float).tp_dict, "NEGATIVE_INFINITY", make_descriptor(Float::NEGATIVE_INFINITY));
      PyDict_SetItemString(PY_TYPE(Float).tp_dict, "NaN", make_descriptor(Float::NaN));
      PyDict_SetItemString(PY_TYPE(Float).tp_dict, "POSITIVE_INFINITY", make_descriptor(Float::POSITIVE_INFINITY));
      PyDict_SetItemString(PY_TYPE(Float).tp_dict, "SIZE", make_descriptor(Float::SIZE));
      PyDict_SetItemString(PY_TYPE(Float).tp_dict, "TYPE", make_descriptor(::java::lang::t_Class::wrap_Object(*Float::TYPE)));
    }

    static PyObject *t_Float_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, Float::initializeClass, 1)))
        return NULL;
      return t_Float::wrap_Object(Float(((t_Float *) arg)->object.this$));
    }
    static PyObject *t_Float_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, Float::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static int t_Float_init_(t_Float *self, PyObject *args, PyObject *kwds)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          ::java::lang::String a0((jobject) NULL);
          Float object((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            INT_CALL(object = Float(a0));
            self->object = object;
            break;
          }
        }
        {
          jdouble a0;
          Float object((jobject) NULL);

          if (!parseArgs(args, "D", &a0))
          {
            INT_CALL(object = Float(a0));
            self->object = object;
            break;
          }
        }
        {
          jfloat a0;
          Float object((jobject) NULL);

          if (!parseArgs(args, "F", &a0))
          {
            INT_CALL(object = Float(a0));
            self->object = object;
            break;
          }
        }
       default:
        PyErr_SetArgsError((PyObject *) self, "__init__", args);
        return -1;
      }

      return 0;
    }

    static PyObject *t_Float_byteValue(t_Float *self, PyObject *args)
    {
      jbyte result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.byteValue());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(Float), (PyObject *) self, "byteValue", args, 2);
    }

    static PyObject *t_Float_compare(PyTypeObject *type, PyObject *args)
    {
      jfloat a0;
      jfloat a1;
      jint result;

      if (!parseArgs(args, "FF", &a0, &a1))
      {
        OBJ_CALL(result = ::java::lang::Float::compare(a0, a1));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "compare", args);
      return NULL;
    }

    static PyObject *t_Float_compareTo(t_Float *self, PyObject *arg)
    {
      Float a0((jobject) NULL);
      jint result;

      if (!parseArg(arg, "O", &::java::lang::PY_TYPE(Float), &a0))
      {
        OBJ_CALL(result = self->object.compareTo(a0));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError((PyObject *) self, "compareTo", arg);
      return NULL;
    }

    static PyObject *t_Float_doubleValue(t_Float *self, PyObject *args)
    {
      jdouble result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.doubleValue());
        return PyFloat_FromDouble((double) result);
      }

      return callSuper(&PY_TYPE(Float), (PyObject *) self, "doubleValue", args, 2);
    }

    static PyObject *t_Float_equals(t_Float *self, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      jboolean result;

      if (!parseArgs(args, "o", &a0))
      {
        OBJ_CALL(result = self->object.equals(a0));
        Py_RETURN_BOOL(result);
      }

      return callSuper(&PY_TYPE(Float), (PyObject *) self, "equals", args, 2);
    }

    static PyObject *t_Float_floatToIntBits(PyTypeObject *type, PyObject *arg)
    {
      jfloat a0;
      jint result;

      if (!parseArg(arg, "F", &a0))
      {
        OBJ_CALL(result = ::java::lang::Float::floatToIntBits(a0));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "floatToIntBits", arg);
      return NULL;
    }

    static PyObject *t_Float_floatToRawIntBits(PyTypeObject *type, PyObject *arg)
    {
      jfloat a0;
      jint result;

      if (!parseArg(arg, "F", &a0))
      {
        OBJ_CALL(result = ::java::lang::Float::floatToRawIntBits(a0));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "floatToRawIntBits", arg);
      return NULL;
    }

    static PyObject *t_Float_floatValue(t_Float *self, PyObject *args)
    {
      jfloat result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.floatValue());
        return PyFloat_FromDouble((double) result);
      }

      return callSuper(&PY_TYPE(Float), (PyObject *) self, "floatValue", args, 2);
    }

    static PyObject *t_Float_hashCode(t_Float *self, PyObject *args)
    {
      jint result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.hashCode());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(Float), (PyObject *) self, "hashCode", args, 2);
    }

    static PyObject *t_Float_hashCode_(PyTypeObject *type, PyObject *args)
    {
      jfloat a0;
      jint result;

      if (!parseArgs(args, "F", &a0))
      {
        OBJ_CALL(result = ::java::lang::Float::hashCode(a0));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "hashCode_", args);
      return NULL;
    }

    static PyObject *t_Float_intBitsToFloat(PyTypeObject *type, PyObject *arg)
    {
      jint a0;
      jfloat result;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(result = ::java::lang::Float::intBitsToFloat(a0));
        return PyFloat_FromDouble((double) result);
      }

      PyErr_SetArgsError(type, "intBitsToFloat", arg);
      return NULL;
    }

    static PyObject *t_Float_intValue(t_Float *self, PyObject *args)
    {
      jint result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.intValue());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(Float), (PyObject *) self, "intValue", args, 2);
    }

    static PyObject *t_Float_isFinite(PyTypeObject *type, PyObject *arg)
    {
      jfloat a0;
      jboolean result;

      if (!parseArg(arg, "F", &a0))
      {
        OBJ_CALL(result = ::java::lang::Float::isFinite(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError(type, "isFinite", arg);
      return NULL;
    }

    static PyObject *t_Float_isInfinite(t_Float *self)
    {
      jboolean result;
      OBJ_CALL(result = self->object.isInfinite());
      Py_RETURN_BOOL(result);
    }

    static PyObject *t_Float_isInfinite_(PyTypeObject *type, PyObject *arg)
    {
      jfloat a0;
      jboolean result;

      if (!parseArg(arg, "F", &a0))
      {
        OBJ_CALL(result = ::java::lang::Float::isInfinite(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError(type, "isInfinite_", arg);
      return NULL;
    }

    static PyObject *t_Float_isNaN(t_Float *self)
    {
      jboolean result;
      OBJ_CALL(result = self->object.isNaN());
      Py_RETURN_BOOL(result);
    }

    static PyObject *t_Float_isNaN_(PyTypeObject *type, PyObject *arg)
    {
      jfloat a0;
      jboolean result;

      if (!parseArg(arg, "F", &a0))
      {
        OBJ_CALL(result = ::java::lang::Float::isNaN(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError(type, "isNaN_", arg);
      return NULL;
    }

    static PyObject *t_Float_longValue(t_Float *self, PyObject *args)
    {
      jlong result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.longValue());
        return PyLong_FromLongLong((PY_LONG_LONG) result);
      }

      return callSuper(&PY_TYPE(Float), (PyObject *) self, "longValue", args, 2);
    }

    static PyObject *t_Float_max(PyTypeObject *type, PyObject *args)
    {
      jfloat a0;
      jfloat a1;
      jfloat result;

      if (!parseArgs(args, "FF", &a0, &a1))
      {
        OBJ_CALL(result = ::java::lang::Float::max$(a0, a1));
        return PyFloat_FromDouble((double) result);
      }

      PyErr_SetArgsError(type, "max", args);
      return NULL;
    }

    static PyObject *t_Float_min(PyTypeObject *type, PyObject *args)
    {
      jfloat a0;
      jfloat a1;
      jfloat result;

      if (!parseArgs(args, "FF", &a0, &a1))
      {
        OBJ_CALL(result = ::java::lang::Float::min$(a0, a1));
        return PyFloat_FromDouble((double) result);
      }

      PyErr_SetArgsError(type, "min", args);
      return NULL;
    }

    static PyObject *t_Float_parseFloat(PyTypeObject *type, PyObject *arg)
    {
      ::java::lang::String a0((jobject) NULL);
      jfloat result;

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(result = ::java::lang::Float::parseFloat(a0));
        return PyFloat_FromDouble((double) result);
      }

      PyErr_SetArgsError(type, "parseFloat", arg);
      return NULL;
    }

    static PyObject *t_Float_shortValue(t_Float *self, PyObject *args)
    {
      jshort result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.shortValue());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(Float), (PyObject *) self, "shortValue", args, 2);
    }

    static PyObject *t_Float_sum(PyTypeObject *type, PyObject *args)
    {
      jfloat a0;
      jfloat a1;
      jfloat result;

      if (!parseArgs(args, "FF", &a0, &a1))
      {
        OBJ_CALL(result = ::java::lang::Float::sum(a0, a1));
        return PyFloat_FromDouble((double) result);
      }

      PyErr_SetArgsError(type, "sum", args);
      return NULL;
    }

    static PyObject *t_Float_toHexString(PyTypeObject *type, PyObject *arg)
    {
      jfloat a0;
      ::java::lang::String result((jobject) NULL);

      if (!parseArg(arg, "F", &a0))
      {
        OBJ_CALL(result = ::java::lang::Float::toHexString(a0));
        return j2p(result);
      }

      PyErr_SetArgsError(type, "toHexString", arg);
      return NULL;
    }

    static PyObject *t_Float_toString(t_Float *self, PyObject *args)
    {
      ::java::lang::String result((jobject) NULL);

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.toString());
        return j2p(result);
      }

      return callSuper(&PY_TYPE(Float), (PyObject *) self, "toString", args, 2);
    }

    static PyObject *t_Float_toString_(PyTypeObject *type, PyObject *args)
    {
      jfloat a0;
      ::java::lang::String result((jobject) NULL);

      if (!parseArgs(args, "F", &a0))
      {
        OBJ_CALL(result = ::java::lang::Float::toString(a0));
        return j2p(result);
      }

      PyErr_SetArgsError(type, "toString_", args);
      return NULL;
    }

    static PyObject *t_Float_valueOf(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jfloat a0;
          Float result((jobject) NULL);

          if (!parseArgs(args, "F", &a0))
          {
            OBJ_CALL(result = ::java::lang::Float::valueOf(a0));
            return t_Float::wrap_Object(result);
          }
        }
        {
          ::java::lang::String a0((jobject) NULL);
          Float result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::java::lang::Float::valueOf(a0));
            return t_Float::wrap_Object(result);
          }
        }
      }

      PyErr_SetArgsError(type, "valueOf", args);
      return NULL;
    }

    static PyObject *t_Float_get__infinite(t_Float *self, void *data)
    {
      jboolean value;
      OBJ_CALL(value = self->object.isInfinite());
      Py_RETURN_BOOL(value);
    }

    static PyObject *t_Float_get__naN(t_Float *self, void *data)
    {
      jboolean value;
      OBJ_CALL(value = self->object.isNaN());
      Py_RETURN_BOOL(value);
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/highlight/Highlighter.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/search/highlight/TextFragment.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/highlight/Scorer.h"
#include "org/apache/lucene/search/highlight/Fragmenter.h"
#include "org/apache/lucene/search/highlight/Formatter.h"
#include "org/apache/lucene/search/highlight/InvalidTokenOffsetsException.h"
#include "org/apache/lucene/search/highlight/Encoder.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {

          ::java::lang::Class *Highlighter::class$ = NULL;
          jmethodID *Highlighter::mids$ = NULL;
          bool Highlighter::live$ = false;
          jint Highlighter::DEFAULT_MAX_CHARS_TO_ANALYZE = (jint) 0;

          jclass Highlighter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/highlight/Highlighter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_9bd3ff73] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/highlight/Scorer;)V");
              mids$[mid_init$_f1844869] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/highlight/Formatter;Lorg/apache/lucene/search/highlight/Scorer;)V");
              mids$[mid_init$_154db1db] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/highlight/Formatter;Lorg/apache/lucene/search/highlight/Encoder;Lorg/apache/lucene/search/highlight/Scorer;)V");
              mids$[mid_getBestFragment_36cba2a5] = env->getMethodID(cls, "getBestFragment", "(Lorg/apache/lucene/analysis/TokenStream;Ljava/lang/String;)Ljava/lang/String;");
              mids$[mid_getBestFragment_87f832fb] = env->getMethodID(cls, "getBestFragment", "(Lorg/apache/lucene/analysis/Analyzer;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;");
              mids$[mid_getBestFragments_9d06cc93] = env->getMethodID(cls, "getBestFragments", "(Lorg/apache/lucene/analysis/TokenStream;Ljava/lang/String;I)[Ljava/lang/String;");
              mids$[mid_getBestFragments_eafe1ad1] = env->getMethodID(cls, "getBestFragments", "(Lorg/apache/lucene/analysis/TokenStream;Ljava/lang/String;ILjava/lang/String;)Ljava/lang/String;");
              mids$[mid_getBestFragments_652768f5] = env->getMethodID(cls, "getBestFragments", "(Lorg/apache/lucene/analysis/Analyzer;Ljava/lang/String;Ljava/lang/String;I)[Ljava/lang/String;");
              mids$[mid_getBestTextFragments_d795d3a4] = env->getMethodID(cls, "getBestTextFragments", "(Lorg/apache/lucene/analysis/TokenStream;Ljava/lang/String;ZI)[Lorg/apache/lucene/search/highlight/TextFragment;");
              mids$[mid_getEncoder_e179b145] = env->getMethodID(cls, "getEncoder", "()Lorg/apache/lucene/search/highlight/Encoder;");
              mids$[mid_getFragmentScorer_0eb4d65e] = env->getMethodID(cls, "getFragmentScorer", "()Lorg/apache/lucene/search/highlight/Scorer;");
              mids$[mid_getMaxDocCharsToAnalyze_54c6a179] = env->getMethodID(cls, "getMaxDocCharsToAnalyze", "()I");
              mids$[mid_getTextFragmenter_c9a72455] = env->getMethodID(cls, "getTextFragmenter", "()Lorg/apache/lucene/search/highlight/Fragmenter;");
              mids$[mid_setEncoder_8b781108] = env->getMethodID(cls, "setEncoder", "(Lorg/apache/lucene/search/highlight/Encoder;)V");
              mids$[mid_setFragmentScorer_9bd3ff73] = env->getMethodID(cls, "setFragmentScorer", "(Lorg/apache/lucene/search/highlight/Scorer;)V");
              mids$[mid_setMaxDocCharsToAnalyze_39c7bd3c] = env->getMethodID(cls, "setMaxDocCharsToAnalyze", "(I)V");
              mids$[mid_setTextFragmenter_d6ed4d20] = env->getMethodID(cls, "setTextFragmenter", "(Lorg/apache/lucene/search/highlight/Fragmenter;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_MAX_CHARS_TO_ANALYZE = env->getStaticIntField(cls, "DEFAULT_MAX_CHARS_TO_ANALYZE");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Highlighter::Highlighter(const ::org::apache::lucene::search::highlight::Scorer & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_9bd3ff73, a0.this$)) {}

          Highlighter::Highlighter(const ::org::apache::lucene::search::highlight::Formatter & a0, const ::org::apache::lucene::search::highlight::Scorer & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f1844869, a0.this$, a1.this$)) {}

          Highlighter::Highlighter(const ::org::apache::lucene::search::highlight::Formatter & a0, const ::org::apache::lucene::search::highlight::Encoder & a1, const ::org::apache::lucene::search::highlight::Scorer & a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_154db1db, a0.this$, a1.this$, a2.this$)) {}

          ::java::lang::String Highlighter::getBestFragment(const ::org::apache::lucene::analysis::TokenStream & a0, const ::java::lang::String & a1) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getBestFragment_36cba2a5], a0.this$, a1.this$));
          }

          ::java::lang::String Highlighter::getBestFragment(const ::org::apache::lucene::analysis::Analyzer & a0, const ::java::lang::String & a1, const ::java::lang::String & a2) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getBestFragment_87f832fb], a0.this$, a1.this$, a2.this$));
          }

          JArray< ::java::lang::String > Highlighter::getBestFragments(const ::org::apache::lucene::analysis::TokenStream & a0, const ::java::lang::String & a1, jint a2) const
          {
            return JArray< ::java::lang::String >(env->callObjectMethod(this$, mids$[mid_getBestFragments_9d06cc93], a0.this$, a1.this$, a2));
          }

          ::java::lang::String Highlighter::getBestFragments(const ::org::apache::lucene::analysis::TokenStream & a0, const ::java::lang::String & a1, jint a2, const ::java::lang::String & a3) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getBestFragments_eafe1ad1], a0.this$, a1.this$, a2, a3.this$));
          }

          JArray< ::java::lang::String > Highlighter::getBestFragments(const ::org::apache::lucene::analysis::Analyzer & a0, const ::java::lang::String & a1, const ::java::lang::String & a2, jint a3) const
          {
            return JArray< ::java::lang::String >(env->callObjectMethod(this$, mids$[mid_getBestFragments_652768f5], a0.this$, a1.this$, a2.this$, a3));
          }

          JArray< ::org::apache::lucene::search::highlight::TextFragment > Highlighter::getBestTextFragments(const ::org::apache::lucene::analysis::TokenStream & a0, const ::java::lang::String & a1, jboolean a2, jint a3) const
          {
            return JArray< ::org::apache::lucene::search::highlight::TextFragment >(env->callObjectMethod(this$, mids$[mid_getBestTextFragments_d795d3a4], a0.this$, a1.this$, a2, a3));
          }

          ::org::apache::lucene::search::highlight::Encoder Highlighter::getEncoder() const
          {
            return ::org::apache::lucene::search::highlight::Encoder(env->callObjectMethod(this$, mids$[mid_getEncoder_e179b145]));
          }

          ::org::apache::lucene::search::highlight::Scorer Highlighter::getFragmentScorer() const
          {
            return ::org::apache::lucene::search::highlight::Scorer(env->callObjectMethod(this$, mids$[mid_getFragmentScorer_0eb4d65e]));
          }

          jint Highlighter::getMaxDocCharsToAnalyze() const
          {
            return env->callIntMethod(this$, mids$[mid_getMaxDocCharsToAnalyze_54c6a179]);
          }

          ::org::apache::lucene::search::highlight::Fragmenter Highlighter::getTextFragmenter() const
          {
            return ::org::apache::lucene::search::highlight::Fragmenter(env->callObjectMethod(this$, mids$[mid_getTextFragmenter_c9a72455]));
          }

          void Highlighter::setEncoder(const ::org::apache::lucene::search::highlight::Encoder & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setEncoder_8b781108], a0.this$);
          }

          void Highlighter::setFragmentScorer(const ::org::apache::lucene::search::highlight::Scorer & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setFragmentScorer_9bd3ff73], a0.this$);
          }

          void Highlighter::setMaxDocCharsToAnalyze(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMaxDocCharsToAnalyze_39c7bd3c], a0);
          }

          void Highlighter::setTextFragmenter(const ::org::apache::lucene::search::highlight::Fragmenter & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setTextFragmenter_d6ed4d20], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {
          static PyObject *t_Highlighter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Highlighter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Highlighter_init_(t_Highlighter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Highlighter_getBestFragment(t_Highlighter *self, PyObject *args);
          static PyObject *t_Highlighter_getBestFragments(t_Highlighter *self, PyObject *args);
          static PyObject *t_Highlighter_getBestTextFragments(t_Highlighter *self, PyObject *args);
          static PyObject *t_Highlighter_getEncoder(t_Highlighter *self);
          static PyObject *t_Highlighter_getFragmentScorer(t_Highlighter *self);
          static PyObject *t_Highlighter_getMaxDocCharsToAnalyze(t_Highlighter *self);
          static PyObject *t_Highlighter_getTextFragmenter(t_Highlighter *self);
          static PyObject *t_Highlighter_setEncoder(t_Highlighter *self, PyObject *arg);
          static PyObject *t_Highlighter_setFragmentScorer(t_Highlighter *self, PyObject *arg);
          static PyObject *t_Highlighter_setMaxDocCharsToAnalyze(t_Highlighter *self, PyObject *arg);
          static PyObject *t_Highlighter_setTextFragmenter(t_Highlighter *self, PyObject *arg);
          static PyObject *t_Highlighter_get__encoder(t_Highlighter *self, void *data);
          static int t_Highlighter_set__encoder(t_Highlighter *self, PyObject *arg, void *data);
          static PyObject *t_Highlighter_get__fragmentScorer(t_Highlighter *self, void *data);
          static int t_Highlighter_set__fragmentScorer(t_Highlighter *self, PyObject *arg, void *data);
          static PyObject *t_Highlighter_get__maxDocCharsToAnalyze(t_Highlighter *self, void *data);
          static int t_Highlighter_set__maxDocCharsToAnalyze(t_Highlighter *self, PyObject *arg, void *data);
          static PyObject *t_Highlighter_get__textFragmenter(t_Highlighter *self, void *data);
          static int t_Highlighter_set__textFragmenter(t_Highlighter *self, PyObject *arg, void *data);
          static PyGetSetDef t_Highlighter__fields_[] = {
            DECLARE_GETSET_FIELD(t_Highlighter, encoder),
            DECLARE_GETSET_FIELD(t_Highlighter, fragmentScorer),
            DECLARE_GETSET_FIELD(t_Highlighter, maxDocCharsToAnalyze),
            DECLARE_GETSET_FIELD(t_Highlighter, textFragmenter),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Highlighter__methods_[] = {
            DECLARE_METHOD(t_Highlighter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Highlighter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Highlighter, getBestFragment, METH_VARARGS),
            DECLARE_METHOD(t_Highlighter, getBestFragments, METH_VARARGS),
            DECLARE_METHOD(t_Highlighter, getBestTextFragments, METH_VARARGS),
            DECLARE_METHOD(t_Highlighter, getEncoder, METH_NOARGS),
            DECLARE_METHOD(t_Highlighter, getFragmentScorer, METH_NOARGS),
            DECLARE_METHOD(t_Highlighter, getMaxDocCharsToAnalyze, METH_NOARGS),
            DECLARE_METHOD(t_Highlighter, getTextFragmenter, METH_NOARGS),
            DECLARE_METHOD(t_Highlighter, setEncoder, METH_O),
            DECLARE_METHOD(t_Highlighter, setFragmentScorer, METH_O),
            DECLARE_METHOD(t_Highlighter, setMaxDocCharsToAnalyze, METH_O),
            DECLARE_METHOD(t_Highlighter, setTextFragmenter, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Highlighter, t_Highlighter, ::java::lang::Object, Highlighter, t_Highlighter_init_, 0, 0, t_Highlighter__fields_, 0, 0);

          void t_Highlighter::install(PyObject *module)
          {
            installType(&PY_TYPE(Highlighter), module, "Highlighter", 0);
          }

          void t_Highlighter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Highlighter).tp_dict, "class_", make_descriptor(Highlighter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Highlighter).tp_dict, "wrapfn_", make_descriptor(t_Highlighter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Highlighter).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(Highlighter::initializeClass);
            PyDict_SetItemString(PY_TYPE(Highlighter).tp_dict, "DEFAULT_MAX_CHARS_TO_ANALYZE", make_descriptor(Highlighter::DEFAULT_MAX_CHARS_TO_ANALYZE));
          }

          static PyObject *t_Highlighter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Highlighter::initializeClass, 1)))
              return NULL;
            return t_Highlighter::wrap_Object(Highlighter(((t_Highlighter *) arg)->object.this$));
          }
          static PyObject *t_Highlighter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Highlighter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Highlighter_init_(t_Highlighter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::search::highlight::Scorer a0((jobject) NULL);
                Highlighter object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::search::highlight::Scorer::initializeClass, &a0))
                {
                  INT_CALL(object = Highlighter(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::search::highlight::Formatter a0((jobject) NULL);
                ::org::apache::lucene::search::highlight::Scorer a1((jobject) NULL);
                Highlighter object((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::search::highlight::Formatter::initializeClass, ::org::apache::lucene::search::highlight::Scorer::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = Highlighter(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::search::highlight::Formatter a0((jobject) NULL);
                ::org::apache::lucene::search::highlight::Encoder a1((jobject) NULL);
                ::org::apache::lucene::search::highlight::Scorer a2((jobject) NULL);
                Highlighter object((jobject) NULL);

                if (!parseArgs(args, "kkk", ::org::apache::lucene::search::highlight::Formatter::initializeClass, ::org::apache::lucene::search::highlight::Encoder::initializeClass, ::org::apache::lucene::search::highlight::Scorer::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = Highlighter(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_Highlighter_getBestFragment(t_Highlighter *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, "ks", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(result = self->object.getBestFragment(a0, a1));
                  return j2p(result);
                }
              }
              break;
             case 3:
              {
                ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                ::java::lang::String a2((jobject) NULL);
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, "kss", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1, &a2))
                {
                  OBJ_CALL(result = self->object.getBestFragment(a0, a1, a2));
                  return j2p(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "getBestFragment", args);
            return NULL;
          }

          static PyObject *t_Highlighter_getBestFragments(t_Highlighter *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 3:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                jint a2;
                JArray< ::java::lang::String > result((jobject) NULL);

                if (!parseArgs(args, "ksI", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1, &a2))
                {
                  OBJ_CALL(result = self->object.getBestFragments(a0, a1, a2));
                  return JArray<jstring>(result.this$).wrap();
                }
              }
              break;
             case 4:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                jint a2;
                ::java::lang::String a3((jobject) NULL);
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, "ksIs", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1, &a2, &a3))
                {
                  OBJ_CALL(result = self->object.getBestFragments(a0, a1, a2, a3));
                  return j2p(result);
                }
              }
              {
                ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                ::java::lang::String a2((jobject) NULL);
                jint a3;
                JArray< ::java::lang::String > result((jobject) NULL);

                if (!parseArgs(args, "kssI", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1, &a2, &a3))
                {
                  OBJ_CALL(result = self->object.getBestFragments(a0, a1, a2, a3));
                  return JArray<jstring>(result.this$).wrap();
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "getBestFragments", args);
            return NULL;
          }

          static PyObject *t_Highlighter_getBestTextFragments(t_Highlighter *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            jboolean a2;
            jint a3;
            JArray< ::org::apache::lucene::search::highlight::TextFragment > result((jobject) NULL);

            if (!parseArgs(args, "ksZI", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1, &a2, &a3))
            {
              OBJ_CALL(result = self->object.getBestTextFragments(a0, a1, a2, a3));
              return JArray<jobject>(result.this$).wrap(::org::apache::lucene::search::highlight::t_TextFragment::wrap_jobject);
            }

            PyErr_SetArgsError((PyObject *) self, "getBestTextFragments", args);
            return NULL;
          }

          static PyObject *t_Highlighter_getEncoder(t_Highlighter *self)
          {
            ::org::apache::lucene::search::highlight::Encoder result((jobject) NULL);
            OBJ_CALL(result = self->object.getEncoder());
            return ::org::apache::lucene::search::highlight::t_Encoder::wrap_Object(result);
          }

          static PyObject *t_Highlighter_getFragmentScorer(t_Highlighter *self)
          {
            ::org::apache::lucene::search::highlight::Scorer result((jobject) NULL);
            OBJ_CALL(result = self->object.getFragmentScorer());
            return ::org::apache::lucene::search::highlight::t_Scorer::wrap_Object(result);
          }

          static PyObject *t_Highlighter_getMaxDocCharsToAnalyze(t_Highlighter *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getMaxDocCharsToAnalyze());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_Highlighter_getTextFragmenter(t_Highlighter *self)
          {
            ::org::apache::lucene::search::highlight::Fragmenter result((jobject) NULL);
            OBJ_CALL(result = self->object.getTextFragmenter());
            return ::org::apache::lucene::search::highlight::t_Fragmenter::wrap_Object(result);
          }

          static PyObject *t_Highlighter_setEncoder(t_Highlighter *self, PyObject *arg)
          {
            ::org::apache::lucene::search::highlight::Encoder a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::search::highlight::Encoder::initializeClass, &a0))
            {
              OBJ_CALL(self->object.setEncoder(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setEncoder", arg);
            return NULL;
          }

          static PyObject *t_Highlighter_setFragmentScorer(t_Highlighter *self, PyObject *arg)
          {
            ::org::apache::lucene::search::highlight::Scorer a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::search::highlight::Scorer::initializeClass, &a0))
            {
              OBJ_CALL(self->object.setFragmentScorer(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setFragmentScorer", arg);
            return NULL;
          }

          static PyObject *t_Highlighter_setMaxDocCharsToAnalyze(t_Highlighter *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setMaxDocCharsToAnalyze(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMaxDocCharsToAnalyze", arg);
            return NULL;
          }

          static PyObject *t_Highlighter_setTextFragmenter(t_Highlighter *self, PyObject *arg)
          {
            ::org::apache::lucene::search::highlight::Fragmenter a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::search::highlight::Fragmenter::initializeClass, &a0))
            {
              OBJ_CALL(self->object.setTextFragmenter(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setTextFragmenter", arg);
            return NULL;
          }

          static PyObject *t_Highlighter_get__encoder(t_Highlighter *self, void *data)
          {
            ::org::apache::lucene::search::highlight::Encoder value((jobject) NULL);
            OBJ_CALL(value = self->object.getEncoder());
            return ::org::apache::lucene::search::highlight::t_Encoder::wrap_Object(value);
          }
          static int t_Highlighter_set__encoder(t_Highlighter *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::search::highlight::Encoder value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::search::highlight::Encoder::initializeClass, &value))
              {
                INT_CALL(self->object.setEncoder(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "encoder", arg);
            return -1;
          }

          static PyObject *t_Highlighter_get__fragmentScorer(t_Highlighter *self, void *data)
          {
            ::org::apache::lucene::search::highlight::Scorer value((jobject) NULL);
            OBJ_CALL(value = self->object.getFragmentScorer());
            return ::org::apache::lucene::search::highlight::t_Scorer::wrap_Object(value);
          }
          static int t_Highlighter_set__fragmentScorer(t_Highlighter *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::search::highlight::Scorer value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::search::highlight::Scorer::initializeClass, &value))
              {
                INT_CALL(self->object.setFragmentScorer(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "fragmentScorer", arg);
            return -1;
          }

          static PyObject *t_Highlighter_get__maxDocCharsToAnalyze(t_Highlighter *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getMaxDocCharsToAnalyze());
            return PyInt_FromLong((long) value);
          }
          static int t_Highlighter_set__maxDocCharsToAnalyze(t_Highlighter *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setMaxDocCharsToAnalyze(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "maxDocCharsToAnalyze", arg);
            return -1;
          }

          static PyObject *t_Highlighter_get__textFragmenter(t_Highlighter *self, void *data)
          {
            ::org::apache::lucene::search::highlight::Fragmenter value((jobject) NULL);
            OBJ_CALL(value = self->object.getTextFragmenter());
            return ::org::apache::lucene::search::highlight::t_Fragmenter::wrap_Object(value);
          }
          static int t_Highlighter_set__textFragmenter(t_Highlighter *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::search::highlight::Fragmenter value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::search::highlight::Fragmenter::initializeClass, &value))
              {
                INT_CALL(self->object.setTextFragmenter(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "textFragmenter", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/SlopQueryNodeBuilder.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/StandardQueryBuilder.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {

              ::java::lang::Class *SlopQueryNodeBuilder::class$ = NULL;
              jmethodID *SlopQueryNodeBuilder::mids$ = NULL;
              bool SlopQueryNodeBuilder::live$ = false;

              jclass SlopQueryNodeBuilder::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/builders/SlopQueryNodeBuilder");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_build_7f6ce179] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/search/Query;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              SlopQueryNodeBuilder::SlopQueryNodeBuilder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              ::org::apache::lucene::search::Query SlopQueryNodeBuilder::build(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_build_7f6ce179], a0.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {
              static PyObject *t_SlopQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_SlopQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg);
              static int t_SlopQueryNodeBuilder_init_(t_SlopQueryNodeBuilder *self, PyObject *args, PyObject *kwds);
              static PyObject *t_SlopQueryNodeBuilder_build(t_SlopQueryNodeBuilder *self, PyObject *arg);

              static PyMethodDef t_SlopQueryNodeBuilder__methods_[] = {
                DECLARE_METHOD(t_SlopQueryNodeBuilder, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_SlopQueryNodeBuilder, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_SlopQueryNodeBuilder, build, METH_O),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(SlopQueryNodeBuilder, t_SlopQueryNodeBuilder, ::java::lang::Object, SlopQueryNodeBuilder, t_SlopQueryNodeBuilder_init_, 0, 0, 0, 0, 0);

              void t_SlopQueryNodeBuilder::install(PyObject *module)
              {
                installType(&PY_TYPE(SlopQueryNodeBuilder), module, "SlopQueryNodeBuilder", 0);
              }

              void t_SlopQueryNodeBuilder::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(SlopQueryNodeBuilder).tp_dict, "class_", make_descriptor(SlopQueryNodeBuilder::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(SlopQueryNodeBuilder).tp_dict, "wrapfn_", make_descriptor(t_SlopQueryNodeBuilder::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(SlopQueryNodeBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_SlopQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, SlopQueryNodeBuilder::initializeClass, 1)))
                  return NULL;
                return t_SlopQueryNodeBuilder::wrap_Object(SlopQueryNodeBuilder(((t_SlopQueryNodeBuilder *) arg)->object.this$));
              }
              static PyObject *t_SlopQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, SlopQueryNodeBuilder::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_SlopQueryNodeBuilder_init_(t_SlopQueryNodeBuilder *self, PyObject *args, PyObject *kwds)
              {
                SlopQueryNodeBuilder object((jobject) NULL);

                INT_CALL(object = SlopQueryNodeBuilder());
                self->object = object;

                return 0;
              }

              static PyObject *t_SlopQueryNodeBuilder_build(t_SlopQueryNodeBuilder *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::search::Query result((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.build(a0));
                  return ::org::apache::lucene::search::t_Query::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "build", arg);
                return NULL;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/path/PathHierarchyTokenizerFactory.h"
#include "java/lang/Class.h"
#include "java/io/Reader.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "org/apache/lucene/analysis/Tokenizer.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace path {

          ::java::lang::Class *PathHierarchyTokenizerFactory::class$ = NULL;
          jmethodID *PathHierarchyTokenizerFactory::mids$ = NULL;
          bool PathHierarchyTokenizerFactory::live$ = false;

          jclass PathHierarchyTokenizerFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/path/PathHierarchyTokenizerFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_e51780e9] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Tokenizer;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PathHierarchyTokenizerFactory::PathHierarchyTokenizerFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenizerFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::Tokenizer PathHierarchyTokenizerFactory::create(const ::org::apache::lucene::util::AttributeFactory & a0, const ::java::io::Reader & a1) const
          {
            return ::org::apache::lucene::analysis::Tokenizer(env->callObjectMethod(this$, mids$[mid_create_e51780e9], a0.this$, a1.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace path {
          static PyObject *t_PathHierarchyTokenizerFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PathHierarchyTokenizerFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PathHierarchyTokenizerFactory_init_(t_PathHierarchyTokenizerFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PathHierarchyTokenizerFactory_create(t_PathHierarchyTokenizerFactory *self, PyObject *args);

          static PyMethodDef t_PathHierarchyTokenizerFactory__methods_[] = {
            DECLARE_METHOD(t_PathHierarchyTokenizerFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PathHierarchyTokenizerFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PathHierarchyTokenizerFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PathHierarchyTokenizerFactory, t_PathHierarchyTokenizerFactory, ::org::apache::lucene::analysis::util::TokenizerFactory, PathHierarchyTokenizerFactory, t_PathHierarchyTokenizerFactory_init_, 0, 0, 0, 0, 0);

          void t_PathHierarchyTokenizerFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(PathHierarchyTokenizerFactory), module, "PathHierarchyTokenizerFactory", 0);
          }

          void t_PathHierarchyTokenizerFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PathHierarchyTokenizerFactory).tp_dict, "class_", make_descriptor(PathHierarchyTokenizerFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PathHierarchyTokenizerFactory).tp_dict, "wrapfn_", make_descriptor(t_PathHierarchyTokenizerFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PathHierarchyTokenizerFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PathHierarchyTokenizerFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PathHierarchyTokenizerFactory::initializeClass, 1)))
              return NULL;
            return t_PathHierarchyTokenizerFactory::wrap_Object(PathHierarchyTokenizerFactory(((t_PathHierarchyTokenizerFactory *) arg)->object.this$));
          }
          static PyObject *t_PathHierarchyTokenizerFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PathHierarchyTokenizerFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PathHierarchyTokenizerFactory_init_(t_PathHierarchyTokenizerFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            PathHierarchyTokenizerFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = PathHierarchyTokenizerFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PathHierarchyTokenizerFactory_create(t_PathHierarchyTokenizerFactory *self, PyObject *args)
          {
            ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
            ::java::io::Reader a1((jobject) NULL);
            ::org::apache::lucene::analysis::Tokenizer result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.create(a0, a1));
              return ::org::apache::lucene::analysis::t_Tokenizer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(PathHierarchyTokenizerFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/InMemorySorter.h"
#include "org/apache/lucene/search/suggest/fst/BytesRefSorter.h"
#include "java/util/Comparator.h"
#include "org/apache/lucene/util/BytesRefIterator.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {

          ::java::lang::Class *InMemorySorter::class$ = NULL;
          jmethodID *InMemorySorter::mids$ = NULL;
          bool InMemorySorter::live$ = false;

          jclass InMemorySorter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/InMemorySorter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_6ffdd545] = env->getMethodID(cls, "<init>", "(Ljava/util/Comparator;)V");
              mids$[mid_add_7bc03dc4] = env->getMethodID(cls, "add", "(Lorg/apache/lucene/util/BytesRef;)V");
              mids$[mid_getComparator_5a7ff2fc] = env->getMethodID(cls, "getComparator", "()Ljava/util/Comparator;");
              mids$[mid_iterator_534dea83] = env->getMethodID(cls, "iterator", "()Lorg/apache/lucene/util/BytesRefIterator;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          InMemorySorter::InMemorySorter(const ::java::util::Comparator & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_6ffdd545, a0.this$)) {}

          void InMemorySorter::add(const ::org::apache::lucene::util::BytesRef & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_add_7bc03dc4], a0.this$);
          }

          ::java::util::Comparator InMemorySorter::getComparator() const
          {
            return ::java::util::Comparator(env->callObjectMethod(this$, mids$[mid_getComparator_5a7ff2fc]));
          }

          ::org::apache::lucene::util::BytesRefIterator InMemorySorter::iterator() const
          {
            return ::org::apache::lucene::util::BytesRefIterator(env->callObjectMethod(this$, mids$[mid_iterator_534dea83]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          static PyObject *t_InMemorySorter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_InMemorySorter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_InMemorySorter_init_(t_InMemorySorter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_InMemorySorter_add(t_InMemorySorter *self, PyObject *arg);
          static PyObject *t_InMemorySorter_getComparator(t_InMemorySorter *self);
          static PyObject *t_InMemorySorter_iterator(t_InMemorySorter *self);
          static PyObject *t_InMemorySorter_get__comparator(t_InMemorySorter *self, void *data);
          static PyGetSetDef t_InMemorySorter__fields_[] = {
            DECLARE_GET_FIELD(t_InMemorySorter, comparator),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_InMemorySorter__methods_[] = {
            DECLARE_METHOD(t_InMemorySorter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_InMemorySorter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_InMemorySorter, add, METH_O),
            DECLARE_METHOD(t_InMemorySorter, getComparator, METH_NOARGS),
            DECLARE_METHOD(t_InMemorySorter, iterator, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(InMemorySorter, t_InMemorySorter, ::java::lang::Object, InMemorySorter, t_InMemorySorter_init_, 0, 0, t_InMemorySorter__fields_, 0, 0);

          void t_InMemorySorter::install(PyObject *module)
          {
            installType(&PY_TYPE(InMemorySorter), module, "InMemorySorter", 0);
          }

          void t_InMemorySorter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(InMemorySorter).tp_dict, "class_", make_descriptor(InMemorySorter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(InMemorySorter).tp_dict, "wrapfn_", make_descriptor(t_InMemorySorter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(InMemorySorter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_InMemorySorter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, InMemorySorter::initializeClass, 1)))
              return NULL;
            return t_InMemorySorter::wrap_Object(InMemorySorter(((t_InMemorySorter *) arg)->object.this$));
          }
          static PyObject *t_InMemorySorter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, InMemorySorter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_InMemorySorter_init_(t_InMemorySorter *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Comparator a0((jobject) NULL);
            PyTypeObject **p0;
            InMemorySorter object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Comparator::initializeClass, &a0, &p0, ::java::util::t_Comparator::parameters_))
            {
              INT_CALL(object = InMemorySorter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_InMemorySorter_add(t_InMemorySorter *self, PyObject *arg)
          {
            ::org::apache::lucene::util::BytesRef a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
            {
              OBJ_CALL(self->object.add(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "add", arg);
            return NULL;
          }

          static PyObject *t_InMemorySorter_getComparator(t_InMemorySorter *self)
          {
            ::java::util::Comparator result((jobject) NULL);
            OBJ_CALL(result = self->object.getComparator());
            return ::java::util::t_Comparator::wrap_Object(result, &::org::apache::lucene::util::PY_TYPE(BytesRef));
          }

          static PyObject *t_InMemorySorter_iterator(t_InMemorySorter *self)
          {
            ::org::apache::lucene::util::BytesRefIterator result((jobject) NULL);
            OBJ_CALL(result = self->object.iterator());
            return ::org::apache::lucene::util::t_BytesRefIterator::wrap_Object(result);
          }

          static PyObject *t_InMemorySorter_get__comparator(t_InMemorySorter *self, void *data)
          {
            ::java::util::Comparator value((jobject) NULL);
            OBJ_CALL(value = self->object.getComparator());
            return ::java::util::t_Comparator::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/BufferingTermFreqIteratorWrapper.h"
#include "org/apache/lucene/search/spell/TermFreqIterator.h"
#include "java/util/Comparator.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {

          ::java::lang::Class *BufferingTermFreqIteratorWrapper::class$ = NULL;
          jmethodID *BufferingTermFreqIteratorWrapper::mids$ = NULL;
          bool BufferingTermFreqIteratorWrapper::live$ = false;

          jclass BufferingTermFreqIteratorWrapper::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/BufferingTermFreqIteratorWrapper");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_b57afdd1] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/spell/TermFreqIterator;)V");
              mids$[mid_getComparator_5a7ff2fc] = env->getMethodID(cls, "getComparator", "()Ljava/util/Comparator;");
              mids$[mid_next_4ae19461] = env->getMethodID(cls, "next", "()Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_weight_54c6a17a] = env->getMethodID(cls, "weight", "()J");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BufferingTermFreqIteratorWrapper::BufferingTermFreqIteratorWrapper(const ::org::apache::lucene::search::spell::TermFreqIterator & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_b57afdd1, a0.this$)) {}

          ::java::util::Comparator BufferingTermFreqIteratorWrapper::getComparator() const
          {
            return ::java::util::Comparator(env->callObjectMethod(this$, mids$[mid_getComparator_5a7ff2fc]));
          }

          ::org::apache::lucene::util::BytesRef BufferingTermFreqIteratorWrapper::next() const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_next_4ae19461]));
          }

          jlong BufferingTermFreqIteratorWrapper::weight() const
          {
            return env->callLongMethod(this$, mids$[mid_weight_54c6a17a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          static PyObject *t_BufferingTermFreqIteratorWrapper_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BufferingTermFreqIteratorWrapper_instance_(PyTypeObject *type, PyObject *arg);
          static int t_BufferingTermFreqIteratorWrapper_init_(t_BufferingTermFreqIteratorWrapper *self, PyObject *args, PyObject *kwds);
          static PyObject *t_BufferingTermFreqIteratorWrapper_getComparator(t_BufferingTermFreqIteratorWrapper *self);
          static PyObject *t_BufferingTermFreqIteratorWrapper_next(t_BufferingTermFreqIteratorWrapper *self);
          static PyObject *t_BufferingTermFreqIteratorWrapper_weight(t_BufferingTermFreqIteratorWrapper *self);
          static PyObject *t_BufferingTermFreqIteratorWrapper_get__comparator(t_BufferingTermFreqIteratorWrapper *self, void *data);
          static PyGetSetDef t_BufferingTermFreqIteratorWrapper__fields_[] = {
            DECLARE_GET_FIELD(t_BufferingTermFreqIteratorWrapper, comparator),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_BufferingTermFreqIteratorWrapper__methods_[] = {
            DECLARE_METHOD(t_BufferingTermFreqIteratorWrapper, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BufferingTermFreqIteratorWrapper, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BufferingTermFreqIteratorWrapper, getComparator, METH_NOARGS),
            DECLARE_METHOD(t_BufferingTermFreqIteratorWrapper, next, METH_NOARGS),
            DECLARE_METHOD(t_BufferingTermFreqIteratorWrapper, weight, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(BufferingTermFreqIteratorWrapper, t_BufferingTermFreqIteratorWrapper, ::java::lang::Object, BufferingTermFreqIteratorWrapper, t_BufferingTermFreqIteratorWrapper_init_, PyObject_SelfIter, ((PyObject *(*)(t_BufferingTermFreqIteratorWrapper *)) get_next< t_BufferingTermFreqIteratorWrapper,::org::apache::lucene::util::t_BytesRef,::org::apache::lucene::util::BytesRef >), t_BufferingTermFreqIteratorWrapper__fields_, 0, 0);

          void t_BufferingTermFreqIteratorWrapper::install(PyObject *module)
          {
            installType(&PY_TYPE(BufferingTermFreqIteratorWrapper), module, "BufferingTermFreqIteratorWrapper", 0);
          }

          void t_BufferingTermFreqIteratorWrapper::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(BufferingTermFreqIteratorWrapper).tp_dict, "class_", make_descriptor(BufferingTermFreqIteratorWrapper::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(BufferingTermFreqIteratorWrapper).tp_dict, "wrapfn_", make_descriptor(t_BufferingTermFreqIteratorWrapper::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(BufferingTermFreqIteratorWrapper).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_BufferingTermFreqIteratorWrapper_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BufferingTermFreqIteratorWrapper::initializeClass, 1)))
              return NULL;
            return t_BufferingTermFreqIteratorWrapper::wrap_Object(BufferingTermFreqIteratorWrapper(((t_BufferingTermFreqIteratorWrapper *) arg)->object.this$));
          }
          static PyObject *t_BufferingTermFreqIteratorWrapper_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BufferingTermFreqIteratorWrapper::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_BufferingTermFreqIteratorWrapper_init_(t_BufferingTermFreqIteratorWrapper *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::search::spell::TermFreqIterator a0((jobject) NULL);
            BufferingTermFreqIteratorWrapper object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::search::spell::TermFreqIterator::initializeClass, &a0))
            {
              INT_CALL(object = BufferingTermFreqIteratorWrapper(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_BufferingTermFreqIteratorWrapper_getComparator(t_BufferingTermFreqIteratorWrapper *self)
          {
            ::java::util::Comparator result((jobject) NULL);
            OBJ_CALL(result = self->object.getComparator());
            return ::java::util::t_Comparator::wrap_Object(result, &::org::apache::lucene::util::PY_TYPE(BytesRef));
          }

          static PyObject *t_BufferingTermFreqIteratorWrapper_next(t_BufferingTermFreqIteratorWrapper *self)
          {
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);
            OBJ_CALL(result = self->object.next());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          static PyObject *t_BufferingTermFreqIteratorWrapper_weight(t_BufferingTermFreqIteratorWrapper *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.weight());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_BufferingTermFreqIteratorWrapper_get__comparator(t_BufferingTermFreqIteratorWrapper *self, void *data)
          {
            ::java::util::Comparator value((jobject) NULL);
            OBJ_CALL(value = self->object.getComparator());
            return ::java::util::t_Comparator::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/CommonQueryParserConfiguration.h"
#include "java/util/TimeZone.h"
#include "org/apache/lucene/search/MultiTermQuery$RewriteMethod.h"
#include "org/apache/lucene/document/DateTools$Resolution.h"
#include "java/lang/Class.h"
#include "java/util/Locale.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {

            ::java::lang::Class *CommonQueryParserConfiguration::class$ = NULL;
            jmethodID *CommonQueryParserConfiguration::mids$ = NULL;
            bool CommonQueryParserConfiguration::live$ = false;

            jclass CommonQueryParserConfiguration::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/CommonQueryParserConfiguration");

                mids$ = new jmethodID[max_mid];
                mids$[mid_getAllowLeadingWildcard_54c6a16a] = env->getMethodID(cls, "getAllowLeadingWildcard", "()Z");
                mids$[mid_getAnalyzer_347f60a9] = env->getMethodID(cls, "getAnalyzer", "()Lorg/apache/lucene/analysis/Analyzer;");
                mids$[mid_getEnablePositionIncrements_54c6a16a] = env->getMethodID(cls, "getEnablePositionIncrements", "()Z");
                mids$[mid_getFuzzyMinSim_54c6a176] = env->getMethodID(cls, "getFuzzyMinSim", "()F");
                mids$[mid_getFuzzyPrefixLength_54c6a179] = env->getMethodID(cls, "getFuzzyPrefixLength", "()I");
                mids$[mid_getLocale_8bb22876] = env->getMethodID(cls, "getLocale", "()Ljava/util/Locale;");
                mids$[mid_getLowercaseExpandedTerms_54c6a16a] = env->getMethodID(cls, "getLowercaseExpandedTerms", "()Z");
                mids$[mid_getMultiTermRewriteMethod_8919154b] = env->getMethodID(cls, "getMultiTermRewriteMethod", "()Lorg/apache/lucene/search/MultiTermQuery$RewriteMethod;");
                mids$[mid_getPhraseSlop_54c6a179] = env->getMethodID(cls, "getPhraseSlop", "()I");
                mids$[mid_getTimeZone_6cce40e5] = env->getMethodID(cls, "getTimeZone", "()Ljava/util/TimeZone;");
                mids$[mid_setAllowLeadingWildcard_bb0c767f] = env->getMethodID(cls, "setAllowLeadingWildcard", "(Z)V");
                mids$[mid_setDateResolution_285c1498] = env->getMethodID(cls, "setDateResolution", "(Lorg/apache/lucene/document/DateTools$Resolution;)V");
                mids$[mid_setEnablePositionIncrements_bb0c767f] = env->getMethodID(cls, "setEnablePositionIncrements", "(Z)V");
                mids$[mid_setFuzzyMinSim_06298cab] = env->getMethodID(cls, "setFuzzyMinSim", "(F)V");
                mids$[mid_setFuzzyPrefixLength_39c7bd3c] = env->getMethodID(cls, "setFuzzyPrefixLength", "(I)V");
                mids$[mid_setLocale_56b0e4b3] = env->getMethodID(cls, "setLocale", "(Ljava/util/Locale;)V");
                mids$[mid_setLowercaseExpandedTerms_bb0c767f] = env->getMethodID(cls, "setLowercaseExpandedTerms", "(Z)V");
                mids$[mid_setMultiTermRewriteMethod_c3c3909e] = env->getMethodID(cls, "setMultiTermRewriteMethod", "(Lorg/apache/lucene/search/MultiTermQuery$RewriteMethod;)V");
                mids$[mid_setPhraseSlop_39c7bd3c] = env->getMethodID(cls, "setPhraseSlop", "(I)V");
                mids$[mid_setTimeZone_f7b32d20] = env->getMethodID(cls, "setTimeZone", "(Ljava/util/TimeZone;)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            jboolean CommonQueryParserConfiguration::getAllowLeadingWildcard() const
            {
              return env->callBooleanMethod(this$, mids$[mid_getAllowLeadingWildcard_54c6a16a]);
            }

            ::org::apache::lucene::analysis::Analyzer CommonQueryParserConfiguration::getAnalyzer() const
            {
              return ::org::apache::lucene::analysis::Analyzer(env->callObjectMethod(this$, mids$[mid_getAnalyzer_347f60a9]));
            }

            jboolean CommonQueryParserConfiguration::getEnablePositionIncrements() const
            {
              return env->callBooleanMethod(this$, mids$[mid_getEnablePositionIncrements_54c6a16a]);
            }

            jfloat CommonQueryParserConfiguration::getFuzzyMinSim() const
            {
              return env->callFloatMethod(this$, mids$[mid_getFuzzyMinSim_54c6a176]);
            }

            jint CommonQueryParserConfiguration::getFuzzyPrefixLength() const
            {
              return env->callIntMethod(this$, mids$[mid_getFuzzyPrefixLength_54c6a179]);
            }

            ::java::util::Locale CommonQueryParserConfiguration::getLocale() const
            {
              return ::java::util::Locale(env->callObjectMethod(this$, mids$[mid_getLocale_8bb22876]));
            }

            jboolean CommonQueryParserConfiguration::getLowercaseExpandedTerms() const
            {
              return env->callBooleanMethod(this$, mids$[mid_getLowercaseExpandedTerms_54c6a16a]);
            }

            ::org::apache::lucene::search::MultiTermQuery$RewriteMethod CommonQueryParserConfiguration::getMultiTermRewriteMethod() const
            {
              return ::org::apache::lucene::search::MultiTermQuery$RewriteMethod(env->callObjectMethod(this$, mids$[mid_getMultiTermRewriteMethod_8919154b]));
            }

            jint CommonQueryParserConfiguration::getPhraseSlop() const
            {
              return env->callIntMethod(this$, mids$[mid_getPhraseSlop_54c6a179]);
            }

            ::java::util::TimeZone CommonQueryParserConfiguration::getTimeZone() const
            {
              return ::java::util::TimeZone(env->callObjectMethod(this$, mids$[mid_getTimeZone_6cce40e5]));
            }

            void CommonQueryParserConfiguration::setAllowLeadingWildcard(jboolean a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setAllowLeadingWildcard_bb0c767f], a0);
            }

            void CommonQueryParserConfiguration::setDateResolution(const ::org::apache::lucene::document::DateTools$Resolution & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setDateResolution_285c1498], a0.this$);
            }

            void CommonQueryParserConfiguration::setEnablePositionIncrements(jboolean a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setEnablePositionIncrements_bb0c767f], a0);
            }

            void CommonQueryParserConfiguration::setFuzzyMinSim(jfloat a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setFuzzyMinSim_06298cab], a0);
            }

            void CommonQueryParserConfiguration::setFuzzyPrefixLength(jint a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setFuzzyPrefixLength_39c7bd3c], a0);
            }

            void CommonQueryParserConfiguration::setLocale(const ::java::util::Locale & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setLocale_56b0e4b3], a0.this$);
            }

            void CommonQueryParserConfiguration::setLowercaseExpandedTerms(jboolean a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setLowercaseExpandedTerms_bb0c767f], a0);
            }

            void CommonQueryParserConfiguration::setMultiTermRewriteMethod(const ::org::apache::lucene::search::MultiTermQuery$RewriteMethod & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setMultiTermRewriteMethod_c3c3909e], a0.this$);
            }

            void CommonQueryParserConfiguration::setPhraseSlop(jint a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setPhraseSlop_39c7bd3c], a0);
            }

            void CommonQueryParserConfiguration::setTimeZone(const ::java::util::TimeZone & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setTimeZone_f7b32d20], a0.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            static PyObject *t_CommonQueryParserConfiguration_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_CommonQueryParserConfiguration_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_CommonQueryParserConfiguration_getAllowLeadingWildcard(t_CommonQueryParserConfiguration *self);
            static PyObject *t_CommonQueryParserConfiguration_getAnalyzer(t_CommonQueryParserConfiguration *self);
            static PyObject *t_CommonQueryParserConfiguration_getEnablePositionIncrements(t_CommonQueryParserConfiguration *self);
            static PyObject *t_CommonQueryParserConfiguration_getFuzzyMinSim(t_CommonQueryParserConfiguration *self);
            static PyObject *t_CommonQueryParserConfiguration_getFuzzyPrefixLength(t_CommonQueryParserConfiguration *self);
            static PyObject *t_CommonQueryParserConfiguration_getLocale(t_CommonQueryParserConfiguration *self);
            static PyObject *t_CommonQueryParserConfiguration_getLowercaseExpandedTerms(t_CommonQueryParserConfiguration *self);
            static PyObject *t_CommonQueryParserConfiguration_getMultiTermRewriteMethod(t_CommonQueryParserConfiguration *self);
            static PyObject *t_CommonQueryParserConfiguration_getPhraseSlop(t_CommonQueryParserConfiguration *self);
            static PyObject *t_CommonQueryParserConfiguration_getTimeZone(t_CommonQueryParserConfiguration *self);
            static PyObject *t_CommonQueryParserConfiguration_setAllowLeadingWildcard(t_CommonQueryParserConfiguration *self, PyObject *arg);
            static PyObject *t_CommonQueryParserConfiguration_setDateResolution(t_CommonQueryParserConfiguration *self, PyObject *arg);
            static PyObject *t_CommonQueryParserConfiguration_setEnablePositionIncrements(t_CommonQueryParserConfiguration *self, PyObject *arg);
            static PyObject *t_CommonQueryParserConfiguration_setFuzzyMinSim(t_CommonQueryParserConfiguration *self, PyObject *arg);
            static PyObject *t_CommonQueryParserConfiguration_setFuzzyPrefixLength(t_CommonQueryParserConfiguration *self, PyObject *arg);
            static PyObject *t_CommonQueryParserConfiguration_setLocale(t_CommonQueryParserConfiguration *self, PyObject *arg);
            static PyObject *t_CommonQueryParserConfiguration_setLowercaseExpandedTerms(t_CommonQueryParserConfiguration *self, PyObject *arg);
            static PyObject *t_CommonQueryParserConfiguration_setMultiTermRewriteMethod(t_CommonQueryParserConfiguration *self, PyObject *arg);
            static PyObject *t_CommonQueryParserConfiguration_setPhraseSlop(t_CommonQueryParserConfiguration *self, PyObject *arg);
            static PyObject *t_CommonQueryParserConfiguration_setTimeZone(t_CommonQueryParserConfiguration *self, PyObject *arg);
            static PyObject *t_CommonQueryParserConfiguration_get__allowLeadingWildcard(t_CommonQueryParserConfiguration *self, void *data);
            static int t_CommonQueryParserConfiguration_set__allowLeadingWildcard(t_CommonQueryParserConfiguration *self, PyObject *arg, void *data);
            static PyObject *t_CommonQueryParserConfiguration_get__analyzer(t_CommonQueryParserConfiguration *self, void *data);
            static int t_CommonQueryParserConfiguration_set__dateResolution(t_CommonQueryParserConfiguration *self, PyObject *arg, void *data);
            static PyObject *t_CommonQueryParserConfiguration_get__enablePositionIncrements(t_CommonQueryParserConfiguration *self, void *data);
            static int t_CommonQueryParserConfiguration_set__enablePositionIncrements(t_CommonQueryParserConfiguration *self, PyObject *arg, void *data);
            static PyObject *t_CommonQueryParserConfiguration_get__fuzzyMinSim(t_CommonQueryParserConfiguration *self, void *data);
            static int t_CommonQueryParserConfiguration_set__fuzzyMinSim(t_CommonQueryParserConfiguration *self, PyObject *arg, void *data);
            static PyObject *t_CommonQueryParserConfiguration_get__fuzzyPrefixLength(t_CommonQueryParserConfiguration *self, void *data);
            static int t_CommonQueryParserConfiguration_set__fuzzyPrefixLength(t_CommonQueryParserConfiguration *self, PyObject *arg, void *data);
            static PyObject *t_CommonQueryParserConfiguration_get__locale(t_CommonQueryParserConfiguration *self, void *data);
            static int t_CommonQueryParserConfiguration_set__locale(t_CommonQueryParserConfiguration *self, PyObject *arg, void *data);
            static PyObject *t_CommonQueryParserConfiguration_get__lowercaseExpandedTerms(t_CommonQueryParserConfiguration *self, void *data);
            static int t_CommonQueryParserConfiguration_set__lowercaseExpandedTerms(t_CommonQueryParserConfiguration *self, PyObject *arg, void *data);
            static PyObject *t_CommonQueryParserConfiguration_get__multiTermRewriteMethod(t_CommonQueryParserConfiguration *self, void *data);
            static int t_CommonQueryParserConfiguration_set__multiTermRewriteMethod(t_CommonQueryParserConfiguration *self, PyObject *arg, void *data);
            static PyObject *t_CommonQueryParserConfiguration_get__phraseSlop(t_CommonQueryParserConfiguration *self, void *data);
            static int t_CommonQueryParserConfiguration_set__phraseSlop(t_CommonQueryParserConfiguration *self, PyObject *arg, void *data);
            static PyObject *t_CommonQueryParserConfiguration_get__timeZone(t_CommonQueryParserConfiguration *self, void *data);
            static int t_CommonQueryParserConfiguration_set__timeZone(t_CommonQueryParserConfiguration *self, PyObject *arg, void *data);
            static PyGetSetDef t_CommonQueryParserConfiguration__fields_[] = {
              DECLARE_GETSET_FIELD(t_CommonQueryParserConfiguration, allowLeadingWildcard),
              DECLARE_GET_FIELD(t_CommonQueryParserConfiguration, analyzer),
              DECLARE_SET_FIELD(t_CommonQueryParserConfiguration, dateResolution),
              DECLARE_GETSET_FIELD(t_CommonQueryParserConfiguration, enablePositionIncrements),
              DECLARE_GETSET_FIELD(t_CommonQueryParserConfiguration, fuzzyMinSim),
              DECLARE_GETSET_FIELD(t_CommonQueryParserConfiguration, fuzzyPrefixLength),
              DECLARE_GETSET_FIELD(t_CommonQueryParserConfiguration, locale),
              DECLARE_GETSET_FIELD(t_CommonQueryParserConfiguration, lowercaseExpandedTerms),
              DECLARE_GETSET_FIELD(t_CommonQueryParserConfiguration, multiTermRewriteMethod),
              DECLARE_GETSET_FIELD(t_CommonQueryParserConfiguration, phraseSlop),
              DECLARE_GETSET_FIELD(t_CommonQueryParserConfiguration, timeZone),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_CommonQueryParserConfiguration__methods_[] = {
              DECLARE_METHOD(t_CommonQueryParserConfiguration, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_CommonQueryParserConfiguration, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_CommonQueryParserConfiguration, getAllowLeadingWildcard, METH_NOARGS),
              DECLARE_METHOD(t_CommonQueryParserConfiguration, getAnalyzer, METH_NOARGS),
              DECLARE_METHOD(t_CommonQueryParserConfiguration, getEnablePositionIncrements, METH_NOARGS),
              DECLARE_METHOD(t_CommonQueryParserConfiguration, getFuzzyMinSim, METH_NOARGS),
              DECLARE_METHOD(t_CommonQueryParserConfiguration, getFuzzyPrefixLength, METH_NOARGS),
              DECLARE_METHOD(t_CommonQueryParserConfiguration, getLocale, METH_NOARGS),
              DECLARE_METHOD(t_CommonQueryParserConfiguration, getLowercaseExpandedTerms, METH_NOARGS),
              DECLARE_METHOD(t_CommonQueryParserConfiguration, getMultiTermRewriteMethod, METH_NOARGS),
              DECLARE_METHOD(t_CommonQueryParserConfiguration, getPhraseSlop, METH_NOARGS),
              DECLARE_METHOD(t_CommonQueryParserConfiguration, getTimeZone, METH_NOARGS),
              DECLARE_METHOD(t_CommonQueryParserConfiguration, setAllowLeadingWildcard, METH_O),
              DECLARE_METHOD(t_CommonQueryParserConfiguration, setDateResolution, METH_O),
              DECLARE_METHOD(t_CommonQueryParserConfiguration, setEnablePositionIncrements, METH_O),
              DECLARE_METHOD(t_CommonQueryParserConfiguration, setFuzzyMinSim, METH_O),
              DECLARE_METHOD(t_CommonQueryParserConfiguration, setFuzzyPrefixLength, METH_O),
              DECLARE_METHOD(t_CommonQueryParserConfiguration, setLocale, METH_O),
              DECLARE_METHOD(t_CommonQueryParserConfiguration, setLowercaseExpandedTerms, METH_O),
              DECLARE_METHOD(t_CommonQueryParserConfiguration, setMultiTermRewriteMethod, METH_O),
              DECLARE_METHOD(t_CommonQueryParserConfiguration, setPhraseSlop, METH_O),
              DECLARE_METHOD(t_CommonQueryParserConfiguration, setTimeZone, METH_O),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(CommonQueryParserConfiguration, t_CommonQueryParserConfiguration, ::java::lang::Object, CommonQueryParserConfiguration, abstract_init, 0, 0, t_CommonQueryParserConfiguration__fields_, 0, 0);

            void t_CommonQueryParserConfiguration::install(PyObject *module)
            {
              installType(&PY_TYPE(CommonQueryParserConfiguration), module, "CommonQueryParserConfiguration", 0);
            }

            void t_CommonQueryParserConfiguration::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(CommonQueryParserConfiguration).tp_dict, "class_", make_descriptor(CommonQueryParserConfiguration::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(CommonQueryParserConfiguration).tp_dict, "wrapfn_", make_descriptor(t_CommonQueryParserConfiguration::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(CommonQueryParserConfiguration).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_CommonQueryParserConfiguration_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, CommonQueryParserConfiguration::initializeClass, 1)))
                return NULL;
              return t_CommonQueryParserConfiguration::wrap_Object(CommonQueryParserConfiguration(((t_CommonQueryParserConfiguration *) arg)->object.this$));
            }
            static PyObject *t_CommonQueryParserConfiguration_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, CommonQueryParserConfiguration::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_CommonQueryParserConfiguration_getAllowLeadingWildcard(t_CommonQueryParserConfiguration *self)
            {
              jboolean result;
              OBJ_CALL(result = self->object.getAllowLeadingWildcard());
              Py_RETURN_BOOL(result);
            }

            static PyObject *t_CommonQueryParserConfiguration_getAnalyzer(t_CommonQueryParserConfiguration *self)
            {
              ::org::apache::lucene::analysis::Analyzer result((jobject) NULL);
              OBJ_CALL(result = self->object.getAnalyzer());
              return ::org::apache::lucene::analysis::t_Analyzer::wrap_Object(result);
            }

            static PyObject *t_CommonQueryParserConfiguration_getEnablePositionIncrements(t_CommonQueryParserConfiguration *self)
            {
              jboolean result;
              OBJ_CALL(result = self->object.getEnablePositionIncrements());
              Py_RETURN_BOOL(result);
            }

            static PyObject *t_CommonQueryParserConfiguration_getFuzzyMinSim(t_CommonQueryParserConfiguration *self)
            {
              jfloat result;
              OBJ_CALL(result = self->object.getFuzzyMinSim());
              return PyFloat_FromDouble((double) result);
            }

            static PyObject *t_CommonQueryParserConfiguration_getFuzzyPrefixLength(t_CommonQueryParserConfiguration *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getFuzzyPrefixLength());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_CommonQueryParserConfiguration_getLocale(t_CommonQueryParserConfiguration *self)
            {
              ::java::util::Locale result((jobject) NULL);
              OBJ_CALL(result = self->object.getLocale());
              return ::java::util::t_Locale::wrap_Object(result);
            }

            static PyObject *t_CommonQueryParserConfiguration_getLowercaseExpandedTerms(t_CommonQueryParserConfiguration *self)
            {
              jboolean result;
              OBJ_CALL(result = self->object.getLowercaseExpandedTerms());
              Py_RETURN_BOOL(result);
            }

            static PyObject *t_CommonQueryParserConfiguration_getMultiTermRewriteMethod(t_CommonQueryParserConfiguration *self)
            {
              ::org::apache::lucene::search::MultiTermQuery$RewriteMethod result((jobject) NULL);
              OBJ_CALL(result = self->object.getMultiTermRewriteMethod());
              return ::org::apache::lucene::search::t_MultiTermQuery$RewriteMethod::wrap_Object(result);
            }

            static PyObject *t_CommonQueryParserConfiguration_getPhraseSlop(t_CommonQueryParserConfiguration *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getPhraseSlop());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_CommonQueryParserConfiguration_getTimeZone(t_CommonQueryParserConfiguration *self)
            {
              ::java::util::TimeZone result((jobject) NULL);
              OBJ_CALL(result = self->object.getTimeZone());
              return ::java::util::t_TimeZone::wrap_Object(result);
            }

            static PyObject *t_CommonQueryParserConfiguration_setAllowLeadingWildcard(t_CommonQueryParserConfiguration *self, PyObject *arg)
            {
              jboolean a0;

              if (!parseArg(arg, "Z", &a0))
              {
                OBJ_CALL(self->object.setAllowLeadingWildcard(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setAllowLeadingWildcard", arg);
              return NULL;
            }

            static PyObject *t_CommonQueryParserConfiguration_setDateResolution(t_CommonQueryParserConfiguration *self, PyObject *arg)
            {
              ::org::apache::lucene::document::DateTools$Resolution a0((jobject) NULL);
              PyTypeObject **p0;

              if (!parseArg(arg, "K", ::org::apache::lucene::document::DateTools$Resolution::initializeClass, &a0, &p0, ::org::apache::lucene::document::t_DateTools$Resolution::parameters_))
              {
                OBJ_CALL(self->object.setDateResolution(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setDateResolution", arg);
              return NULL;
            }

            static PyObject *t_CommonQueryParserConfiguration_setEnablePositionIncrements(t_CommonQueryParserConfiguration *self, PyObject *arg)
            {
              jboolean a0;

              if (!parseArg(arg, "Z", &a0))
              {
                OBJ_CALL(self->object.setEnablePositionIncrements(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setEnablePositionIncrements", arg);
              return NULL;
            }

            static PyObject *t_CommonQueryParserConfiguration_setFuzzyMinSim(t_CommonQueryParserConfiguration *self, PyObject *arg)
            {
              jfloat a0;

              if (!parseArg(arg, "F", &a0))
              {
                OBJ_CALL(self->object.setFuzzyMinSim(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setFuzzyMinSim", arg);
              return NULL;
            }

            static PyObject *t_CommonQueryParserConfiguration_setFuzzyPrefixLength(t_CommonQueryParserConfiguration *self, PyObject *arg)
            {
              jint a0;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(self->object.setFuzzyPrefixLength(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setFuzzyPrefixLength", arg);
              return NULL;
            }

            static PyObject *t_CommonQueryParserConfiguration_setLocale(t_CommonQueryParserConfiguration *self, PyObject *arg)
            {
              ::java::util::Locale a0((jobject) NULL);

              if (!parseArg(arg, "k", ::java::util::Locale::initializeClass, &a0))
              {
                OBJ_CALL(self->object.setLocale(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setLocale", arg);
              return NULL;
            }

            static PyObject *t_CommonQueryParserConfiguration_setLowercaseExpandedTerms(t_CommonQueryParserConfiguration *self, PyObject *arg)
            {
              jboolean a0;

              if (!parseArg(arg, "Z", &a0))
              {
                OBJ_CALL(self->object.setLowercaseExpandedTerms(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setLowercaseExpandedTerms", arg);
              return NULL;
            }

            static PyObject *t_CommonQueryParserConfiguration_setMultiTermRewriteMethod(t_CommonQueryParserConfiguration *self, PyObject *arg)
            {
              ::org::apache::lucene::search::MultiTermQuery$RewriteMethod a0((jobject) NULL);

              if (!parseArg(arg, "k", ::org::apache::lucene::search::MultiTermQuery$RewriteMethod::initializeClass, &a0))
              {
                OBJ_CALL(self->object.setMultiTermRewriteMethod(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setMultiTermRewriteMethod", arg);
              return NULL;
            }

            static PyObject *t_CommonQueryParserConfiguration_setPhraseSlop(t_CommonQueryParserConfiguration *self, PyObject *arg)
            {
              jint a0;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(self->object.setPhraseSlop(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setPhraseSlop", arg);
              return NULL;
            }

            static PyObject *t_CommonQueryParserConfiguration_setTimeZone(t_CommonQueryParserConfiguration *self, PyObject *arg)
            {
              ::java::util::TimeZone a0((jobject) NULL);

              if (!parseArg(arg, "k", ::java::util::TimeZone::initializeClass, &a0))
              {
                OBJ_CALL(self->object.setTimeZone(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setTimeZone", arg);
              return NULL;
            }

            static PyObject *t_CommonQueryParserConfiguration_get__allowLeadingWildcard(t_CommonQueryParserConfiguration *self, void *data)
            {
              jboolean value;
              OBJ_CALL(value = self->object.getAllowLeadingWildcard());
              Py_RETURN_BOOL(value);
            }
            static int t_CommonQueryParserConfiguration_set__allowLeadingWildcard(t_CommonQueryParserConfiguration *self, PyObject *arg, void *data)
            {
              {
                jboolean value;
                if (!parseArg(arg, "Z", &value))
                {
                  INT_CALL(self->object.setAllowLeadingWildcard(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "allowLeadingWildcard", arg);
              return -1;
            }

            static PyObject *t_CommonQueryParserConfiguration_get__analyzer(t_CommonQueryParserConfiguration *self, void *data)
            {
              ::org::apache::lucene::analysis::Analyzer value((jobject) NULL);
              OBJ_CALL(value = self->object.getAnalyzer());
              return ::org::apache::lucene::analysis::t_Analyzer::wrap_Object(value);
            }

            static int t_CommonQueryParserConfiguration_set__dateResolution(t_CommonQueryParserConfiguration *self, PyObject *arg, void *data)
            {
              {
                ::org::apache::lucene::document::DateTools$Resolution value((jobject) NULL);
                if (!parseArg(arg, "k", ::org::apache::lucene::document::DateTools$Resolution::initializeClass, &value))
                {
                  INT_CALL(self->object.setDateResolution(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "dateResolution", arg);
              return -1;
            }

            static PyObject *t_CommonQueryParserConfiguration_get__enablePositionIncrements(t_CommonQueryParserConfiguration *self, void *data)
            {
              jboolean value;
              OBJ_CALL(value = self->object.getEnablePositionIncrements());
              Py_RETURN_BOOL(value);
            }
            static int t_CommonQueryParserConfiguration_set__enablePositionIncrements(t_CommonQueryParserConfiguration *self, PyObject *arg, void *data)
            {
              {
                jboolean value;
                if (!parseArg(arg, "Z", &value))
                {
                  INT_CALL(self->object.setEnablePositionIncrements(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "enablePositionIncrements", arg);
              return -1;
            }

            static PyObject *t_CommonQueryParserConfiguration_get__fuzzyMinSim(t_CommonQueryParserConfiguration *self, void *data)
            {
              jfloat value;
              OBJ_CALL(value = self->object.getFuzzyMinSim());
              return PyFloat_FromDouble((double) value);
            }
            static int t_CommonQueryParserConfiguration_set__fuzzyMinSim(t_CommonQueryParserConfiguration *self, PyObject *arg, void *data)
            {
              {
                jfloat value;
                if (!parseArg(arg, "F", &value))
                {
                  INT_CALL(self->object.setFuzzyMinSim(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "fuzzyMinSim", arg);
              return -1;
            }

            static PyObject *t_CommonQueryParserConfiguration_get__fuzzyPrefixLength(t_CommonQueryParserConfiguration *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getFuzzyPrefixLength());
              return PyInt_FromLong((long) value);
            }
            static int t_CommonQueryParserConfiguration_set__fuzzyPrefixLength(t_CommonQueryParserConfiguration *self, PyObject *arg, void *data)
            {
              {
                jint value;
                if (!parseArg(arg, "I", &value))
                {
                  INT_CALL(self->object.setFuzzyPrefixLength(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "fuzzyPrefixLength", arg);
              return -1;
            }

            static PyObject *t_CommonQueryParserConfiguration_get__locale(t_CommonQueryParserConfiguration *self, void *data)
            {
              ::java::util::Locale value((jobject) NULL);
              OBJ_CALL(value = self->object.getLocale());
              return ::java::util::t_Locale::wrap_Object(value);
            }
            static int t_CommonQueryParserConfiguration_set__locale(t_CommonQueryParserConfiguration *self, PyObject *arg, void *data)
            {
              {
                ::java::util::Locale value((jobject) NULL);
                if (!parseArg(arg, "k", ::java::util::Locale::initializeClass, &value))
                {
                  INT_CALL(self->object.setLocale(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "locale", arg);
              return -1;
            }

            static PyObject *t_CommonQueryParserConfiguration_get__lowercaseExpandedTerms(t_CommonQueryParserConfiguration *self, void *data)
            {
              jboolean value;
              OBJ_CALL(value = self->object.getLowercaseExpandedTerms());
              Py_RETURN_BOOL(value);
            }
            static int t_CommonQueryParserConfiguration_set__lowercaseExpandedTerms(t_CommonQueryParserConfiguration *self, PyObject *arg, void *data)
            {
              {
                jboolean value;
                if (!parseArg(arg, "Z", &value))
                {
                  INT_CALL(self->object.setLowercaseExpandedTerms(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "lowercaseExpandedTerms", arg);
              return -1;
            }

            static PyObject *t_CommonQueryParserConfiguration_get__multiTermRewriteMethod(t_CommonQueryParserConfiguration *self, void *data)
            {
              ::org::apache::lucene::search::MultiTermQuery$RewriteMethod value((jobject) NULL);
              OBJ_CALL(value = self->object.getMultiTermRewriteMethod());
              return ::org::apache::lucene::search::t_MultiTermQuery$RewriteMethod::wrap_Object(value);
            }
            static int t_CommonQueryParserConfiguration_set__multiTermRewriteMethod(t_CommonQueryParserConfiguration *self, PyObject *arg, void *data)
            {
              {
                ::org::apache::lucene::search::MultiTermQuery$RewriteMethod value((jobject) NULL);
                if (!parseArg(arg, "k", ::org::apache::lucene::search::MultiTermQuery$RewriteMethod::initializeClass, &value))
                {
                  INT_CALL(self->object.setMultiTermRewriteMethod(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "multiTermRewriteMethod", arg);
              return -1;
            }

            static PyObject *t_CommonQueryParserConfiguration_get__phraseSlop(t_CommonQueryParserConfiguration *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getPhraseSlop());
              return PyInt_FromLong((long) value);
            }
            static int t_CommonQueryParserConfiguration_set__phraseSlop(t_CommonQueryParserConfiguration *self, PyObject *arg, void *data)
            {
              {
                jint value;
                if (!parseArg(arg, "I", &value))
                {
                  INT_CALL(self->object.setPhraseSlop(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "phraseSlop", arg);
              return -1;
            }

            static PyObject *t_CommonQueryParserConfiguration_get__timeZone(t_CommonQueryParserConfiguration *self, void *data)
            {
              ::java::util::TimeZone value((jobject) NULL);
              OBJ_CALL(value = self->object.getTimeZone());
              return ::java::util::t_TimeZone::wrap_Object(value);
            }
            static int t_CommonQueryParserConfiguration_set__timeZone(t_CommonQueryParserConfiguration *self, PyObject *arg, void *data)
            {
              {
                ::java::util::TimeZone value((jobject) NULL);
                if (!parseArg(arg, "k", ::java::util::TimeZone::initializeClass, &value))
                {
                  INT_CALL(self->object.setTimeZone(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "timeZone", arg);
              return -1;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsFormat.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/codecs/StoredFieldsWriter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "org/apache/lucene/store/IOContext.h"
#include "org/apache/lucene/codecs/StoredFieldsReader.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene40 {

          ::java::lang::Class *Lucene40StoredFieldsFormat::class$ = NULL;
          jmethodID *Lucene40StoredFieldsFormat::mids$ = NULL;
          bool Lucene40StoredFieldsFormat::live$ = false;

          jclass Lucene40StoredFieldsFormat::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsFormat");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_fieldsReader_bbe26ec4] = env->getMethodID(cls, "fieldsReader", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/SegmentInfo;Lorg/apache/lucene/index/FieldInfos;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/codecs/StoredFieldsReader;");
              mids$[mid_fieldsWriter_c73cceda] = env->getMethodID(cls, "fieldsWriter", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/SegmentInfo;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/codecs/StoredFieldsWriter;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene40StoredFieldsFormat::Lucene40StoredFieldsFormat() : ::org::apache::lucene::codecs::StoredFieldsFormat(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::codecs::StoredFieldsReader Lucene40StoredFieldsFormat::fieldsReader(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::SegmentInfo & a1, const ::org::apache::lucene::index::FieldInfos & a2, const ::org::apache::lucene::store::IOContext & a3) const
          {
            return ::org::apache::lucene::codecs::StoredFieldsReader(env->callObjectMethod(this$, mids$[mid_fieldsReader_bbe26ec4], a0.this$, a1.this$, a2.this$, a3.this$));
          }

          ::org::apache::lucene::codecs::StoredFieldsWriter Lucene40StoredFieldsFormat::fieldsWriter(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::SegmentInfo & a1, const ::org::apache::lucene::store::IOContext & a2) const
          {
            return ::org::apache::lucene::codecs::StoredFieldsWriter(env->callObjectMethod(this$, mids$[mid_fieldsWriter_c73cceda], a0.this$, a1.this$, a2.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene40 {
          static PyObject *t_Lucene40StoredFieldsFormat_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene40StoredFieldsFormat_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene40StoredFieldsFormat_init_(t_Lucene40StoredFieldsFormat *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene40StoredFieldsFormat_fieldsReader(t_Lucene40StoredFieldsFormat *self, PyObject *args);
          static PyObject *t_Lucene40StoredFieldsFormat_fieldsWriter(t_Lucene40StoredFieldsFormat *self, PyObject *args);

          static PyMethodDef t_Lucene40StoredFieldsFormat__methods_[] = {
            DECLARE_METHOD(t_Lucene40StoredFieldsFormat, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene40StoredFieldsFormat, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene40StoredFieldsFormat, fieldsReader, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40StoredFieldsFormat, fieldsWriter, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene40StoredFieldsFormat, t_Lucene40StoredFieldsFormat, ::org::apache::lucene::codecs::StoredFieldsFormat, Lucene40StoredFieldsFormat, t_Lucene40StoredFieldsFormat_init_, 0, 0, 0, 0, 0);

          void t_Lucene40StoredFieldsFormat::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene40StoredFieldsFormat), module, "Lucene40StoredFieldsFormat", 0);
          }

          void t_Lucene40StoredFieldsFormat::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene40StoredFieldsFormat).tp_dict, "class_", make_descriptor(Lucene40StoredFieldsFormat::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene40StoredFieldsFormat).tp_dict, "wrapfn_", make_descriptor(t_Lucene40StoredFieldsFormat::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene40StoredFieldsFormat).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lucene40StoredFieldsFormat_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene40StoredFieldsFormat::initializeClass, 1)))
              return NULL;
            return t_Lucene40StoredFieldsFormat::wrap_Object(Lucene40StoredFieldsFormat(((t_Lucene40StoredFieldsFormat *) arg)->object.this$));
          }
          static PyObject *t_Lucene40StoredFieldsFormat_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene40StoredFieldsFormat::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene40StoredFieldsFormat_init_(t_Lucene40StoredFieldsFormat *self, PyObject *args, PyObject *kwds)
          {
            Lucene40StoredFieldsFormat object((jobject) NULL);

            INT_CALL(object = Lucene40StoredFieldsFormat());
            self->object = object;

            return 0;
          }

          static PyObject *t_Lucene40StoredFieldsFormat_fieldsReader(t_Lucene40StoredFieldsFormat *self, PyObject *args)
          {
            ::org::apache::lucene::store::Directory a0((jobject) NULL);
            ::org::apache::lucene::index::SegmentInfo a1((jobject) NULL);
            ::org::apache::lucene::index::FieldInfos a2((jobject) NULL);
            ::org::apache::lucene::store::IOContext a3((jobject) NULL);
            ::org::apache::lucene::codecs::StoredFieldsReader result((jobject) NULL);

            if (!parseArgs(args, "kkkk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::SegmentInfo::initializeClass, ::org::apache::lucene::index::FieldInfos::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2, &a3))
            {
              OBJ_CALL(result = self->object.fieldsReader(a0, a1, a2, a3));
              return ::org::apache::lucene::codecs::t_StoredFieldsReader::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene40StoredFieldsFormat), (PyObject *) self, "fieldsReader", args, 2);
          }

          static PyObject *t_Lucene40StoredFieldsFormat_fieldsWriter(t_Lucene40StoredFieldsFormat *self, PyObject *args)
          {
            ::org::apache::lucene::store::Directory a0((jobject) NULL);
            ::org::apache::lucene::index::SegmentInfo a1((jobject) NULL);
            ::org::apache::lucene::store::IOContext a2((jobject) NULL);
            ::org::apache::lucene::codecs::StoredFieldsWriter result((jobject) NULL);

            if (!parseArgs(args, "kkk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::SegmentInfo::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.fieldsWriter(a0, a1, a2));
              return ::org::apache::lucene::codecs::t_StoredFieldsWriter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene40StoredFieldsFormat), (PyObject *) self, "fieldsWriter", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/LambdaTTF.h"
#include "org/apache/lucene/search/Explanation.h"
#include "org/apache/lucene/search/similarities/BasicStats.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *LambdaTTF::class$ = NULL;
          jmethodID *LambdaTTF::mids$ = NULL;
          bool LambdaTTF::live$ = false;

          jclass LambdaTTF::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/LambdaTTF");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_explain_eddc6641] = env->getMethodID(cls, "explain", "(Lorg/apache/lucene/search/similarities/BasicStats;)Lorg/apache/lucene/search/Explanation;");
              mids$[mid_lambda_cb225ea0] = env->getMethodID(cls, "lambda", "(Lorg/apache/lucene/search/similarities/BasicStats;)F");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          LambdaTTF::LambdaTTF() : ::org::apache::lucene::search::similarities::Lambda(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::search::Explanation LambdaTTF::explain(const ::org::apache::lucene::search::similarities::BasicStats & a0) const
          {
            return ::org::apache::lucene::search::Explanation(env->callObjectMethod(this$, mids$[mid_explain_eddc6641], a0.this$));
          }

          jfloat LambdaTTF::lambda(const ::org::apache::lucene::search::similarities::BasicStats & a0) const
          {
            return env->callFloatMethod(this$, mids$[mid_lambda_cb225ea0], a0.this$);
          }

          ::java::lang::String LambdaTTF::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_LambdaTTF_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LambdaTTF_instance_(PyTypeObject *type, PyObject *arg);
          static int t_LambdaTTF_init_(t_LambdaTTF *self, PyObject *args, PyObject *kwds);
          static PyObject *t_LambdaTTF_explain(t_LambdaTTF *self, PyObject *args);
          static PyObject *t_LambdaTTF_lambda(t_LambdaTTF *self, PyObject *args);
          static PyObject *t_LambdaTTF_toString(t_LambdaTTF *self, PyObject *args);

          static PyMethodDef t_LambdaTTF__methods_[] = {
            DECLARE_METHOD(t_LambdaTTF, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LambdaTTF, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LambdaTTF, explain, METH_VARARGS),
            DECLARE_METHOD(t_LambdaTTF, lambda, METH_VARARGS),
            DECLARE_METHOD(t_LambdaTTF, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(LambdaTTF, t_LambdaTTF, ::org::apache::lucene::search::similarities::Lambda, LambdaTTF, t_LambdaTTF_init_, 0, 0, 0, 0, 0);

          void t_LambdaTTF::install(PyObject *module)
          {
            installType(&PY_TYPE(LambdaTTF), module, "LambdaTTF", 0);
          }

          void t_LambdaTTF::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(LambdaTTF).tp_dict, "class_", make_descriptor(LambdaTTF::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(LambdaTTF).tp_dict, "wrapfn_", make_descriptor(t_LambdaTTF::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(LambdaTTF).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_LambdaTTF_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LambdaTTF::initializeClass, 1)))
              return NULL;
            return t_LambdaTTF::wrap_Object(LambdaTTF(((t_LambdaTTF *) arg)->object.this$));
          }
          static PyObject *t_LambdaTTF_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LambdaTTF::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_LambdaTTF_init_(t_LambdaTTF *self, PyObject *args, PyObject *kwds)
          {
            LambdaTTF object((jobject) NULL);

            INT_CALL(object = LambdaTTF());
            self->object = object;

            return 0;
          }

          static PyObject *t_LambdaTTF_explain(t_LambdaTTF *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            ::org::apache::lucene::search::Explanation result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.explain(a0));
              return ::org::apache::lucene::search::t_Explanation::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(LambdaTTF), (PyObject *) self, "explain", args, 2);
          }

          static PyObject *t_LambdaTTF_lambda(t_LambdaTTF *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jfloat result;

            if (!parseArgs(args, "k", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.lambda(a0));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(LambdaTTF), (PyObject *) self, "lambda", args, 2);
          }

          static PyObject *t_LambdaTTF_toString(t_LambdaTTF *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(LambdaTTF), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene40/Lucene40NormsFormat.h"
#include "org/apache/lucene/codecs/DocValuesProducer.h"
#include "org/apache/lucene/index/SegmentWriteState.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/codecs/DocValuesConsumer.h"
#include "org/apache/lucene/index/SegmentReadState.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene40 {

          ::java::lang::Class *Lucene40NormsFormat::class$ = NULL;
          jmethodID *Lucene40NormsFormat::mids$ = NULL;
          bool Lucene40NormsFormat::live$ = false;

          jclass Lucene40NormsFormat::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene40/Lucene40NormsFormat");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_normsConsumer_025deb44] = env->getMethodID(cls, "normsConsumer", "(Lorg/apache/lucene/index/SegmentWriteState;)Lorg/apache/lucene/codecs/DocValuesConsumer;");
              mids$[mid_normsProducer_9b0d4e4a] = env->getMethodID(cls, "normsProducer", "(Lorg/apache/lucene/index/SegmentReadState;)Lorg/apache/lucene/codecs/DocValuesProducer;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene40NormsFormat::Lucene40NormsFormat() : ::org::apache::lucene::codecs::NormsFormat(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::codecs::DocValuesConsumer Lucene40NormsFormat::normsConsumer(const ::org::apache::lucene::index::SegmentWriteState & a0) const
          {
            return ::org::apache::lucene::codecs::DocValuesConsumer(env->callObjectMethod(this$, mids$[mid_normsConsumer_025deb44], a0.this$));
          }

          ::org::apache::lucene::codecs::DocValuesProducer Lucene40NormsFormat::normsProducer(const ::org::apache::lucene::index::SegmentReadState & a0) const
          {
            return ::org::apache::lucene::codecs::DocValuesProducer(env->callObjectMethod(this$, mids$[mid_normsProducer_9b0d4e4a], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene40 {
          static PyObject *t_Lucene40NormsFormat_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene40NormsFormat_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene40NormsFormat_init_(t_Lucene40NormsFormat *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene40NormsFormat_normsConsumer(t_Lucene40NormsFormat *self, PyObject *args);
          static PyObject *t_Lucene40NormsFormat_normsProducer(t_Lucene40NormsFormat *self, PyObject *args);

          static PyMethodDef t_Lucene40NormsFormat__methods_[] = {
            DECLARE_METHOD(t_Lucene40NormsFormat, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene40NormsFormat, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene40NormsFormat, normsConsumer, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40NormsFormat, normsProducer, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene40NormsFormat, t_Lucene40NormsFormat, ::org::apache::lucene::codecs::NormsFormat, Lucene40NormsFormat, t_Lucene40NormsFormat_init_, 0, 0, 0, 0, 0);

          void t_Lucene40NormsFormat::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene40NormsFormat), module, "Lucene40NormsFormat", 0);
          }

          void t_Lucene40NormsFormat::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene40NormsFormat).tp_dict, "class_", make_descriptor(Lucene40NormsFormat::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene40NormsFormat).tp_dict, "wrapfn_", make_descriptor(t_Lucene40NormsFormat::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene40NormsFormat).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lucene40NormsFormat_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene40NormsFormat::initializeClass, 1)))
              return NULL;
            return t_Lucene40NormsFormat::wrap_Object(Lucene40NormsFormat(((t_Lucene40NormsFormat *) arg)->object.this$));
          }
          static PyObject *t_Lucene40NormsFormat_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene40NormsFormat::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene40NormsFormat_init_(t_Lucene40NormsFormat *self, PyObject *args, PyObject *kwds)
          {
            Lucene40NormsFormat object((jobject) NULL);

            INT_CALL(object = Lucene40NormsFormat());
            self->object = object;

            return 0;
          }

          static PyObject *t_Lucene40NormsFormat_normsConsumer(t_Lucene40NormsFormat *self, PyObject *args)
          {
            ::org::apache::lucene::index::SegmentWriteState a0((jobject) NULL);
            ::org::apache::lucene::codecs::DocValuesConsumer result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::SegmentWriteState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.normsConsumer(a0));
              return ::org::apache::lucene::codecs::t_DocValuesConsumer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene40NormsFormat), (PyObject *) self, "normsConsumer", args, 2);
          }

          static PyObject *t_Lucene40NormsFormat_normsProducer(t_Lucene40NormsFormat *self, PyObject *args)
          {
            ::org::apache::lucene::index::SegmentReadState a0((jobject) NULL);
            ::org::apache::lucene::codecs::DocValuesProducer result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::SegmentReadState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.normsProducer(a0));
              return ::org::apache::lucene::codecs::t_DocValuesProducer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene40NormsFormat), (PyObject *) self, "normsProducer", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/NGramPhraseQuery.h"
#include "org/apache/lucene/search/Query.h"
#include "java/io/IOException.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *NGramPhraseQuery::class$ = NULL;
        jmethodID *NGramPhraseQuery::mids$ = NULL;
        bool NGramPhraseQuery::live$ = false;

        jclass NGramPhraseQuery::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/NGramPhraseQuery");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_rewrite_7edcaa43] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/index/IndexReader;)Lorg/apache/lucene/search/Query;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        NGramPhraseQuery::NGramPhraseQuery(jint a0) : ::org::apache::lucene::search::PhraseQuery(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

        jboolean NGramPhraseQuery::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        jint NGramPhraseQuery::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        ::org::apache::lucene::search::Query NGramPhraseQuery::rewrite(const ::org::apache::lucene::index::IndexReader & a0) const
        {
          return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_rewrite_7edcaa43], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_NGramPhraseQuery_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NGramPhraseQuery_instance_(PyTypeObject *type, PyObject *arg);
        static int t_NGramPhraseQuery_init_(t_NGramPhraseQuery *self, PyObject *args, PyObject *kwds);
        static PyObject *t_NGramPhraseQuery_equals(t_NGramPhraseQuery *self, PyObject *args);
        static PyObject *t_NGramPhraseQuery_hashCode(t_NGramPhraseQuery *self, PyObject *args);
        static PyObject *t_NGramPhraseQuery_rewrite(t_NGramPhraseQuery *self, PyObject *args);

        static PyMethodDef t_NGramPhraseQuery__methods_[] = {
          DECLARE_METHOD(t_NGramPhraseQuery, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NGramPhraseQuery, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NGramPhraseQuery, equals, METH_VARARGS),
          DECLARE_METHOD(t_NGramPhraseQuery, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_NGramPhraseQuery, rewrite, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(NGramPhraseQuery, t_NGramPhraseQuery, ::org::apache::lucene::search::PhraseQuery, NGramPhraseQuery, t_NGramPhraseQuery_init_, 0, 0, 0, 0, 0);

        void t_NGramPhraseQuery::install(PyObject *module)
        {
          installType(&PY_TYPE(NGramPhraseQuery), module, "NGramPhraseQuery", 0);
        }

        void t_NGramPhraseQuery::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(NGramPhraseQuery).tp_dict, "class_", make_descriptor(NGramPhraseQuery::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(NGramPhraseQuery).tp_dict, "wrapfn_", make_descriptor(t_NGramPhraseQuery::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(NGramPhraseQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_NGramPhraseQuery_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, NGramPhraseQuery::initializeClass, 1)))
            return NULL;
          return t_NGramPhraseQuery::wrap_Object(NGramPhraseQuery(((t_NGramPhraseQuery *) arg)->object.this$));
        }
        static PyObject *t_NGramPhraseQuery_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, NGramPhraseQuery::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_NGramPhraseQuery_init_(t_NGramPhraseQuery *self, PyObject *args, PyObject *kwds)
        {
          jint a0;
          NGramPhraseQuery object((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            INT_CALL(object = NGramPhraseQuery(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_NGramPhraseQuery_equals(t_NGramPhraseQuery *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(NGramPhraseQuery), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_NGramPhraseQuery_hashCode(t_NGramPhraseQuery *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(NGramPhraseQuery), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_NGramPhraseQuery_rewrite(t_NGramPhraseQuery *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.rewrite(a0));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(NGramPhraseQuery), (PyObject *) self, "rewrite", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ga/IrishLowerCaseFilterFactory.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/analysis/util/MultiTermAwareComponent.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/util/AbstractAnalysisFactory.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ga {

          ::java::lang::Class *IrishLowerCaseFilterFactory::class$ = NULL;
          jmethodID *IrishLowerCaseFilterFactory::mids$ = NULL;
          bool IrishLowerCaseFilterFactory::live$ = false;

          jclass IrishLowerCaseFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ga/IrishLowerCaseFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");
              mids$[mid_getMultiTermComponent_0a3f1d72] = env->getMethodID(cls, "getMultiTermComponent", "()Lorg/apache/lucene/analysis/util/AbstractAnalysisFactory;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          IrishLowerCaseFilterFactory::IrishLowerCaseFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream IrishLowerCaseFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }

          ::org::apache::lucene::analysis::util::AbstractAnalysisFactory IrishLowerCaseFilterFactory::getMultiTermComponent() const
          {
            return ::org::apache::lucene::analysis::util::AbstractAnalysisFactory(env->callObjectMethod(this$, mids$[mid_getMultiTermComponent_0a3f1d72]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ga {
          static PyObject *t_IrishLowerCaseFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IrishLowerCaseFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_IrishLowerCaseFilterFactory_init_(t_IrishLowerCaseFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_IrishLowerCaseFilterFactory_create(t_IrishLowerCaseFilterFactory *self, PyObject *args);
          static PyObject *t_IrishLowerCaseFilterFactory_getMultiTermComponent(t_IrishLowerCaseFilterFactory *self);
          static PyObject *t_IrishLowerCaseFilterFactory_get__multiTermComponent(t_IrishLowerCaseFilterFactory *self, void *data);
          static PyGetSetDef t_IrishLowerCaseFilterFactory__fields_[] = {
            DECLARE_GET_FIELD(t_IrishLowerCaseFilterFactory, multiTermComponent),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_IrishLowerCaseFilterFactory__methods_[] = {
            DECLARE_METHOD(t_IrishLowerCaseFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IrishLowerCaseFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IrishLowerCaseFilterFactory, create, METH_VARARGS),
            DECLARE_METHOD(t_IrishLowerCaseFilterFactory, getMultiTermComponent, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(IrishLowerCaseFilterFactory, t_IrishLowerCaseFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, IrishLowerCaseFilterFactory, t_IrishLowerCaseFilterFactory_init_, 0, 0, t_IrishLowerCaseFilterFactory__fields_, 0, 0);

          void t_IrishLowerCaseFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(IrishLowerCaseFilterFactory), module, "IrishLowerCaseFilterFactory", 0);
          }

          void t_IrishLowerCaseFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(IrishLowerCaseFilterFactory).tp_dict, "class_", make_descriptor(IrishLowerCaseFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(IrishLowerCaseFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_IrishLowerCaseFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(IrishLowerCaseFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_IrishLowerCaseFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, IrishLowerCaseFilterFactory::initializeClass, 1)))
              return NULL;
            return t_IrishLowerCaseFilterFactory::wrap_Object(IrishLowerCaseFilterFactory(((t_IrishLowerCaseFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_IrishLowerCaseFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, IrishLowerCaseFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_IrishLowerCaseFilterFactory_init_(t_IrishLowerCaseFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            IrishLowerCaseFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = IrishLowerCaseFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_IrishLowerCaseFilterFactory_create(t_IrishLowerCaseFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(IrishLowerCaseFilterFactory), (PyObject *) self, "create", args, 2);
          }

          static PyObject *t_IrishLowerCaseFilterFactory_getMultiTermComponent(t_IrishLowerCaseFilterFactory *self)
          {
            ::org::apache::lucene::analysis::util::AbstractAnalysisFactory result((jobject) NULL);
            OBJ_CALL(result = self->object.getMultiTermComponent());
            return ::org::apache::lucene::analysis::util::t_AbstractAnalysisFactory::wrap_Object(result);
          }

          static PyObject *t_IrishLowerCaseFilterFactory_get__multiTermComponent(t_IrishLowerCaseFilterFactory *self, void *data)
          {
            ::org::apache::lucene::analysis::util::AbstractAnalysisFactory value((jobject) NULL);
            OBJ_CALL(value = self->object.getMultiTermComponent());
            return ::org::apache::lucene::analysis::util::t_AbstractAnalysisFactory::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/fst/BytesRefFSTEnum.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/fst/FST.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/util/fst/BytesRefFSTEnum$InputOutput.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {

          ::java::lang::Class *BytesRefFSTEnum::class$ = NULL;
          jmethodID *BytesRefFSTEnum::mids$ = NULL;
          bool BytesRefFSTEnum::live$ = false;

          jclass BytesRefFSTEnum::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/fst/BytesRefFSTEnum");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_d454d65c] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/fst/FST;)V");
              mids$[mid_current_6016cb55] = env->getMethodID(cls, "current", "()Lorg/apache/lucene/util/fst/BytesRefFSTEnum$InputOutput;");
              mids$[mid_next_6016cb55] = env->getMethodID(cls, "next", "()Lorg/apache/lucene/util/fst/BytesRefFSTEnum$InputOutput;");
              mids$[mid_seekCeil_ec56792b] = env->getMethodID(cls, "seekCeil", "(Lorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/util/fst/BytesRefFSTEnum$InputOutput;");
              mids$[mid_seekExact_ec56792b] = env->getMethodID(cls, "seekExact", "(Lorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/util/fst/BytesRefFSTEnum$InputOutput;");
              mids$[mid_seekFloor_ec56792b] = env->getMethodID(cls, "seekFloor", "(Lorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/util/fst/BytesRefFSTEnum$InputOutput;");
              mids$[mid_grow_54c6a166] = env->getMethodID(cls, "grow", "()V");
              mids$[mid_getTargetLabel_54c6a179] = env->getMethodID(cls, "getTargetLabel", "()I");
              mids$[mid_getCurrentLabel_54c6a179] = env->getMethodID(cls, "getCurrentLabel", "()I");
              mids$[mid_setCurrentLabel_39c7bd3c] = env->getMethodID(cls, "setCurrentLabel", "(I)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BytesRefFSTEnum::BytesRefFSTEnum(const ::org::apache::lucene::util::fst::FST & a0) : ::org::apache::lucene::util::fst::FSTEnum(env->newObject(initializeClass, &mids$, mid_init$_d454d65c, a0.this$)) {}

          ::org::apache::lucene::util::fst::BytesRefFSTEnum$InputOutput BytesRefFSTEnum::current() const
          {
            return ::org::apache::lucene::util::fst::BytesRefFSTEnum$InputOutput(env->callObjectMethod(this$, mids$[mid_current_6016cb55]));
          }

          ::org::apache::lucene::util::fst::BytesRefFSTEnum$InputOutput BytesRefFSTEnum::next() const
          {
            return ::org::apache::lucene::util::fst::BytesRefFSTEnum$InputOutput(env->callObjectMethod(this$, mids$[mid_next_6016cb55]));
          }

          ::org::apache::lucene::util::fst::BytesRefFSTEnum$InputOutput BytesRefFSTEnum::seekCeil(const ::org::apache::lucene::util::BytesRef & a0) const
          {
            return ::org::apache::lucene::util::fst::BytesRefFSTEnum$InputOutput(env->callObjectMethod(this$, mids$[mid_seekCeil_ec56792b], a0.this$));
          }

          ::org::apache::lucene::util::fst::BytesRefFSTEnum$InputOutput BytesRefFSTEnum::seekExact(const ::org::apache::lucene::util::BytesRef & a0) const
          {
            return ::org::apache::lucene::util::fst::BytesRefFSTEnum$InputOutput(env->callObjectMethod(this$, mids$[mid_seekExact_ec56792b], a0.this$));
          }

          ::org::apache::lucene::util::fst::BytesRefFSTEnum$InputOutput BytesRefFSTEnum::seekFloor(const ::org::apache::lucene::util::BytesRef & a0) const
          {
            return ::org::apache::lucene::util::fst::BytesRefFSTEnum$InputOutput(env->callObjectMethod(this$, mids$[mid_seekFloor_ec56792b], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {
          static PyObject *t_BytesRefFSTEnum_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BytesRefFSTEnum_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BytesRefFSTEnum_of_(t_BytesRefFSTEnum *self, PyObject *args);
          static int t_BytesRefFSTEnum_init_(t_BytesRefFSTEnum *self, PyObject *args, PyObject *kwds);
          static PyObject *t_BytesRefFSTEnum_current(t_BytesRefFSTEnum *self);
          static PyObject *t_BytesRefFSTEnum_next(t_BytesRefFSTEnum *self);
          static PyObject *t_BytesRefFSTEnum_seekCeil(t_BytesRefFSTEnum *self, PyObject *arg);
          static PyObject *t_BytesRefFSTEnum_seekExact(t_BytesRefFSTEnum *self, PyObject *arg);
          static PyObject *t_BytesRefFSTEnum_seekFloor(t_BytesRefFSTEnum *self, PyObject *arg);
          static PyObject *t_BytesRefFSTEnum_get__parameters_(t_BytesRefFSTEnum *self, void *data);
          static PyGetSetDef t_BytesRefFSTEnum__fields_[] = {
            DECLARE_GET_FIELD(t_BytesRefFSTEnum, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_BytesRefFSTEnum__methods_[] = {
            DECLARE_METHOD(t_BytesRefFSTEnum, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BytesRefFSTEnum, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BytesRefFSTEnum, of_, METH_VARARGS),
            DECLARE_METHOD(t_BytesRefFSTEnum, current, METH_NOARGS),
            DECLARE_METHOD(t_BytesRefFSTEnum, next, METH_NOARGS),
            DECLARE_METHOD(t_BytesRefFSTEnum, seekCeil, METH_O),
            DECLARE_METHOD(t_BytesRefFSTEnum, seekExact, METH_O),
            DECLARE_METHOD(t_BytesRefFSTEnum, seekFloor, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(BytesRefFSTEnum, t_BytesRefFSTEnum, ::org::apache::lucene::util::fst::FSTEnum, BytesRefFSTEnum, t_BytesRefFSTEnum_init_, PyObject_SelfIter, ((PyObject *(*)(t_BytesRefFSTEnum *)) get_generic_next< t_BytesRefFSTEnum,::org::apache::lucene::util::fst::t_BytesRefFSTEnum$InputOutput,::org::apache::lucene::util::fst::BytesRefFSTEnum$InputOutput >), t_BytesRefFSTEnum__fields_, 0, 0);
          PyObject *t_BytesRefFSTEnum::wrap_Object(const BytesRefFSTEnum& object, PyTypeObject *p0)
          {
            PyObject *obj = t_BytesRefFSTEnum::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_BytesRefFSTEnum *self = (t_BytesRefFSTEnum *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_BytesRefFSTEnum::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_BytesRefFSTEnum::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_BytesRefFSTEnum *self = (t_BytesRefFSTEnum *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_BytesRefFSTEnum::install(PyObject *module)
          {
            installType(&PY_TYPE(BytesRefFSTEnum), module, "BytesRefFSTEnum", 0);
            PyDict_SetItemString(PY_TYPE(BytesRefFSTEnum).tp_dict, "InputOutput", make_descriptor(&PY_TYPE(BytesRefFSTEnum$InputOutput)));
          }

          void t_BytesRefFSTEnum::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(BytesRefFSTEnum).tp_dict, "class_", make_descriptor(BytesRefFSTEnum::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(BytesRefFSTEnum).tp_dict, "wrapfn_", make_descriptor(t_BytesRefFSTEnum::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(BytesRefFSTEnum).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_BytesRefFSTEnum_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BytesRefFSTEnum::initializeClass, 1)))
              return NULL;
            return t_BytesRefFSTEnum::wrap_Object(BytesRefFSTEnum(((t_BytesRefFSTEnum *) arg)->object.this$));
          }
          static PyObject *t_BytesRefFSTEnum_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BytesRefFSTEnum::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_BytesRefFSTEnum_of_(t_BytesRefFSTEnum *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_BytesRefFSTEnum_init_(t_BytesRefFSTEnum *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::util::fst::FST a0((jobject) NULL);
            PyTypeObject **p0;
            BytesRefFSTEnum object((jobject) NULL);

            if (!parseArgs(args, "K", ::org::apache::lucene::util::fst::FST::initializeClass, &a0, &p0, ::org::apache::lucene::util::fst::t_FST::parameters_))
            {
              INT_CALL(object = BytesRefFSTEnum(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_BytesRefFSTEnum_current(t_BytesRefFSTEnum *self)
          {
            ::org::apache::lucene::util::fst::BytesRefFSTEnum$InputOutput result((jobject) NULL);
            OBJ_CALL(result = self->object.current());
            return ::org::apache::lucene::util::fst::t_BytesRefFSTEnum$InputOutput::wrap_Object(result, self->parameters[0]);
          }

          static PyObject *t_BytesRefFSTEnum_next(t_BytesRefFSTEnum *self)
          {
            ::org::apache::lucene::util::fst::BytesRefFSTEnum$InputOutput result((jobject) NULL);
            OBJ_CALL(result = self->object.next());
            return ::org::apache::lucene::util::fst::t_BytesRefFSTEnum$InputOutput::wrap_Object(result, self->parameters[0]);
          }

          static PyObject *t_BytesRefFSTEnum_seekCeil(t_BytesRefFSTEnum *self, PyObject *arg)
          {
            ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
            ::org::apache::lucene::util::fst::BytesRefFSTEnum$InputOutput result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.seekCeil(a0));
              return ::org::apache::lucene::util::fst::t_BytesRefFSTEnum$InputOutput::wrap_Object(result, self->parameters[0]);
            }

            PyErr_SetArgsError((PyObject *) self, "seekCeil", arg);
            return NULL;
          }

          static PyObject *t_BytesRefFSTEnum_seekExact(t_BytesRefFSTEnum *self, PyObject *arg)
          {
            ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
            ::org::apache::lucene::util::fst::BytesRefFSTEnum$InputOutput result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.seekExact(a0));
              return ::org::apache::lucene::util::fst::t_BytesRefFSTEnum$InputOutput::wrap_Object(result, self->parameters[0]);
            }

            PyErr_SetArgsError((PyObject *) self, "seekExact", arg);
            return NULL;
          }

          static PyObject *t_BytesRefFSTEnum_seekFloor(t_BytesRefFSTEnum *self, PyObject *arg)
          {
            ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
            ::org::apache::lucene::util::fst::BytesRefFSTEnum$InputOutput result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.seekFloor(a0));
              return ::org::apache::lucene::util::fst::t_BytesRefFSTEnum$InputOutput::wrap_Object(result, self->parameters[0]);
            }

            PyErr_SetArgsError((PyObject *) self, "seekFloor", arg);
            return NULL;
          }
          static PyObject *t_BytesRefFSTEnum_get__parameters_(t_BytesRefFSTEnum *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/IndexCommit.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "java/util/Collection.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "java/lang/Comparable.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *IndexCommit::class$ = NULL;
        jmethodID *IndexCommit::mids$ = NULL;
        bool IndexCommit::live$ = false;

        jclass IndexCommit::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/IndexCommit");

            mids$ = new jmethodID[max_mid];
            mids$[mid_compareTo_fecc65cc] = env->getMethodID(cls, "compareTo", "(Lorg/apache/lucene/index/IndexCommit;)I");
            mids$[mid_delete_54c6a166] = env->getMethodID(cls, "delete", "()V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_getDirectory_1f3934bb] = env->getMethodID(cls, "getDirectory", "()Lorg/apache/lucene/store/Directory;");
            mids$[mid_getFileNames_2d2d7de4] = env->getMethodID(cls, "getFileNames", "()Ljava/util/Collection;");
            mids$[mid_getGeneration_54c6a17a] = env->getMethodID(cls, "getGeneration", "()J");
            mids$[mid_getSegmentCount_54c6a179] = env->getMethodID(cls, "getSegmentCount", "()I");
            mids$[mid_getSegmentsFileName_14c7b5c5] = env->getMethodID(cls, "getSegmentsFileName", "()Ljava/lang/String;");
            mids$[mid_getUserData_db60befd] = env->getMethodID(cls, "getUserData", "()Ljava/util/Map;");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_isDeleted_54c6a16a] = env->getMethodID(cls, "isDeleted", "()Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jint IndexCommit::compareTo(const IndexCommit & a0) const
        {
          return env->callIntMethod(this$, mids$[mid_compareTo_fecc65cc], a0.this$);
        }

        void IndexCommit::delete$() const
        {
          env->callVoidMethod(this$, mids$[mid_delete_54c6a166]);
        }

        jboolean IndexCommit::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        ::org::apache::lucene::store::Directory IndexCommit::getDirectory() const
        {
          return ::org::apache::lucene::store::Directory(env->callObjectMethod(this$, mids$[mid_getDirectory_1f3934bb]));
        }

        ::java::util::Collection IndexCommit::getFileNames() const
        {
          return ::java::util::Collection(env->callObjectMethod(this$, mids$[mid_getFileNames_2d2d7de4]));
        }

        jlong IndexCommit::getGeneration() const
        {
          return env->callLongMethod(this$, mids$[mid_getGeneration_54c6a17a]);
        }

        jint IndexCommit::getSegmentCount() const
        {
          return env->callIntMethod(this$, mids$[mid_getSegmentCount_54c6a179]);
        }

        ::java::lang::String IndexCommit::getSegmentsFileName() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getSegmentsFileName_14c7b5c5]));
        }

        ::java::util::Map IndexCommit::getUserData() const
        {
          return ::java::util::Map(env->callObjectMethod(this$, mids$[mid_getUserData_db60befd]));
        }

        jint IndexCommit::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jboolean IndexCommit::isDeleted() const
        {
          return env->callBooleanMethod(this$, mids$[mid_isDeleted_54c6a16a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_IndexCommit_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexCommit_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexCommit_compareTo(t_IndexCommit *self, PyObject *arg);
        static PyObject *t_IndexCommit_delete(t_IndexCommit *self);
        static PyObject *t_IndexCommit_equals(t_IndexCommit *self, PyObject *args);
        static PyObject *t_IndexCommit_getDirectory(t_IndexCommit *self);
        static PyObject *t_IndexCommit_getFileNames(t_IndexCommit *self);
        static PyObject *t_IndexCommit_getGeneration(t_IndexCommit *self);
        static PyObject *t_IndexCommit_getSegmentCount(t_IndexCommit *self);
        static PyObject *t_IndexCommit_getSegmentsFileName(t_IndexCommit *self);
        static PyObject *t_IndexCommit_getUserData(t_IndexCommit *self);
        static PyObject *t_IndexCommit_hashCode(t_IndexCommit *self, PyObject *args);
        static PyObject *t_IndexCommit_isDeleted(t_IndexCommit *self);
        static PyObject *t_IndexCommit_get__deleted(t_IndexCommit *self, void *data);
        static PyObject *t_IndexCommit_get__directory(t_IndexCommit *self, void *data);
        static PyObject *t_IndexCommit_get__fileNames(t_IndexCommit *self, void *data);
        static PyObject *t_IndexCommit_get__generation(t_IndexCommit *self, void *data);
        static PyObject *t_IndexCommit_get__segmentCount(t_IndexCommit *self, void *data);
        static PyObject *t_IndexCommit_get__segmentsFileName(t_IndexCommit *self, void *data);
        static PyObject *t_IndexCommit_get__userData(t_IndexCommit *self, void *data);
        static PyGetSetDef t_IndexCommit__fields_[] = {
          DECLARE_GET_FIELD(t_IndexCommit, deleted),
          DECLARE_GET_FIELD(t_IndexCommit, directory),
          DECLARE_GET_FIELD(t_IndexCommit, fileNames),
          DECLARE_GET_FIELD(t_IndexCommit, generation),
          DECLARE_GET_FIELD(t_IndexCommit, segmentCount),
          DECLARE_GET_FIELD(t_IndexCommit, segmentsFileName),
          DECLARE_GET_FIELD(t_IndexCommit, userData),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_IndexCommit__methods_[] = {
          DECLARE_METHOD(t_IndexCommit, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexCommit, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexCommit, compareTo, METH_O),
          DECLARE_METHOD(t_IndexCommit, delete, METH_NOARGS),
          DECLARE_METHOD(t_IndexCommit, equals, METH_VARARGS),
          DECLARE_METHOD(t_IndexCommit, getDirectory, METH_NOARGS),
          DECLARE_METHOD(t_IndexCommit, getFileNames, METH_NOARGS),
          DECLARE_METHOD(t_IndexCommit, getGeneration, METH_NOARGS),
          DECLARE_METHOD(t_IndexCommit, getSegmentCount, METH_NOARGS),
          DECLARE_METHOD(t_IndexCommit, getSegmentsFileName, METH_NOARGS),
          DECLARE_METHOD(t_IndexCommit, getUserData, METH_NOARGS),
          DECLARE_METHOD(t_IndexCommit, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_IndexCommit, isDeleted, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(IndexCommit, t_IndexCommit, ::java::lang::Object, IndexCommit, abstract_init, 0, 0, t_IndexCommit__fields_, 0, 0);

        void t_IndexCommit::install(PyObject *module)
        {
          installType(&PY_TYPE(IndexCommit), module, "IndexCommit", 0);
        }

        void t_IndexCommit::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(IndexCommit).tp_dict, "class_", make_descriptor(IndexCommit::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(IndexCommit).tp_dict, "wrapfn_", make_descriptor(t_IndexCommit::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(IndexCommit).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_IndexCommit_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IndexCommit::initializeClass, 1)))
            return NULL;
          return t_IndexCommit::wrap_Object(IndexCommit(((t_IndexCommit *) arg)->object.this$));
        }
        static PyObject *t_IndexCommit_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IndexCommit::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_IndexCommit_compareTo(t_IndexCommit *self, PyObject *arg)
        {
          IndexCommit a0((jobject) NULL);
          jint result;

          if (!parseArg(arg, "k", IndexCommit::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.compareTo(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "compareTo", arg);
          return NULL;
        }

        static PyObject *t_IndexCommit_delete(t_IndexCommit *self)
        {
          OBJ_CALL(self->object.delete$());
          Py_RETURN_NONE;
        }

        static PyObject *t_IndexCommit_equals(t_IndexCommit *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(IndexCommit), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_IndexCommit_getDirectory(t_IndexCommit *self)
        {
          ::org::apache::lucene::store::Directory result((jobject) NULL);
          OBJ_CALL(result = self->object.getDirectory());
          return ::org::apache::lucene::store::t_Directory::wrap_Object(result);
        }

        static PyObject *t_IndexCommit_getFileNames(t_IndexCommit *self)
        {
          ::java::util::Collection result((jobject) NULL);
          OBJ_CALL(result = self->object.getFileNames());
          return ::java::util::t_Collection::wrap_Object(result, &::java::lang::PY_TYPE(String));
        }

        static PyObject *t_IndexCommit_getGeneration(t_IndexCommit *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getGeneration());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_IndexCommit_getSegmentCount(t_IndexCommit *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getSegmentCount());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_IndexCommit_getSegmentsFileName(t_IndexCommit *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.getSegmentsFileName());
          return j2p(result);
        }

        static PyObject *t_IndexCommit_getUserData(t_IndexCommit *self)
        {
          ::java::util::Map result((jobject) NULL);
          OBJ_CALL(result = self->object.getUserData());
          return ::java::util::t_Map::wrap_Object(result, &::java::lang::PY_TYPE(String), &::java::lang::PY_TYPE(String));
        }

        static PyObject *t_IndexCommit_hashCode(t_IndexCommit *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(IndexCommit), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_IndexCommit_isDeleted(t_IndexCommit *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.isDeleted());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_IndexCommit_get__deleted(t_IndexCommit *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.isDeleted());
          Py_RETURN_BOOL(value);
        }

        static PyObject *t_IndexCommit_get__directory(t_IndexCommit *self, void *data)
        {
          ::org::apache::lucene::store::Directory value((jobject) NULL);
          OBJ_CALL(value = self->object.getDirectory());
          return ::org::apache::lucene::store::t_Directory::wrap_Object(value);
        }

        static PyObject *t_IndexCommit_get__fileNames(t_IndexCommit *self, void *data)
        {
          ::java::util::Collection value((jobject) NULL);
          OBJ_CALL(value = self->object.getFileNames());
          return ::java::util::t_Collection::wrap_Object(value);
        }

        static PyObject *t_IndexCommit_get__generation(t_IndexCommit *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getGeneration());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }

        static PyObject *t_IndexCommit_get__segmentCount(t_IndexCommit *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getSegmentCount());
          return PyInt_FromLong((long) value);
        }

        static PyObject *t_IndexCommit_get__segmentsFileName(t_IndexCommit *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object.getSegmentsFileName());
          return j2p(value);
        }

        static PyObject *t_IndexCommit_get__userData(t_IndexCommit *self, void *data)
        {
          ::java::util::Map value((jobject) NULL);
          OBJ_CALL(value = self->object.getUserData());
          return ::java::util::t_Map::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/InputIterator$InputIteratorWrapper.h"
#include "org/apache/lucene/util/BytesRefIterator.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "java/util/Set.h"
#include "org/apache/lucene/search/suggest/InputIterator.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/util/Comparator.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {

          ::java::lang::Class *InputIterator$InputIteratorWrapper::class$ = NULL;
          jmethodID *InputIterator$InputIteratorWrapper::mids$ = NULL;
          bool InputIterator$InputIteratorWrapper::live$ = false;

          jclass InputIterator$InputIteratorWrapper::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/InputIterator$InputIteratorWrapper");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_506719fa] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/BytesRefIterator;)V");
              mids$[mid_contexts_03e99967] = env->getMethodID(cls, "contexts", "()Ljava/util/Set;");
              mids$[mid_getComparator_5a7ff2fc] = env->getMethodID(cls, "getComparator", "()Ljava/util/Comparator;");
              mids$[mid_hasContexts_54c6a16a] = env->getMethodID(cls, "hasContexts", "()Z");
              mids$[mid_hasPayloads_54c6a16a] = env->getMethodID(cls, "hasPayloads", "()Z");
              mids$[mid_next_4ae19461] = env->getMethodID(cls, "next", "()Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_payload_4ae19461] = env->getMethodID(cls, "payload", "()Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_weight_54c6a17a] = env->getMethodID(cls, "weight", "()J");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          InputIterator$InputIteratorWrapper::InputIterator$InputIteratorWrapper(const ::org::apache::lucene::util::BytesRefIterator & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_506719fa, a0.this$)) {}

          ::java::util::Set InputIterator$InputIteratorWrapper::contexts() const
          {
            return ::java::util::Set(env->callObjectMethod(this$, mids$[mid_contexts_03e99967]));
          }

          ::java::util::Comparator InputIterator$InputIteratorWrapper::getComparator() const
          {
            return ::java::util::Comparator(env->callObjectMethod(this$, mids$[mid_getComparator_5a7ff2fc]));
          }

          jboolean InputIterator$InputIteratorWrapper::hasContexts() const
          {
            return env->callBooleanMethod(this$, mids$[mid_hasContexts_54c6a16a]);
          }

          jboolean InputIterator$InputIteratorWrapper::hasPayloads() const
          {
            return env->callBooleanMethod(this$, mids$[mid_hasPayloads_54c6a16a]);
          }

          ::org::apache::lucene::util::BytesRef InputIterator$InputIteratorWrapper::next() const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_next_4ae19461]));
          }

          ::org::apache::lucene::util::BytesRef InputIterator$InputIteratorWrapper::payload() const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_payload_4ae19461]));
          }

          jlong InputIterator$InputIteratorWrapper::weight() const
          {
            return env->callLongMethod(this$, mids$[mid_weight_54c6a17a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          static PyObject *t_InputIterator$InputIteratorWrapper_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_InputIterator$InputIteratorWrapper_instance_(PyTypeObject *type, PyObject *arg);
          static int t_InputIterator$InputIteratorWrapper_init_(t_InputIterator$InputIteratorWrapper *self, PyObject *args, PyObject *kwds);
          static PyObject *t_InputIterator$InputIteratorWrapper_contexts(t_InputIterator$InputIteratorWrapper *self);
          static PyObject *t_InputIterator$InputIteratorWrapper_getComparator(t_InputIterator$InputIteratorWrapper *self);
          static PyObject *t_InputIterator$InputIteratorWrapper_hasContexts(t_InputIterator$InputIteratorWrapper *self);
          static PyObject *t_InputIterator$InputIteratorWrapper_hasPayloads(t_InputIterator$InputIteratorWrapper *self);
          static PyObject *t_InputIterator$InputIteratorWrapper_next(t_InputIterator$InputIteratorWrapper *self);
          static PyObject *t_InputIterator$InputIteratorWrapper_payload(t_InputIterator$InputIteratorWrapper *self);
          static PyObject *t_InputIterator$InputIteratorWrapper_weight(t_InputIterator$InputIteratorWrapper *self);
          static PyObject *t_InputIterator$InputIteratorWrapper_get__comparator(t_InputIterator$InputIteratorWrapper *self, void *data);
          static PyGetSetDef t_InputIterator$InputIteratorWrapper__fields_[] = {
            DECLARE_GET_FIELD(t_InputIterator$InputIteratorWrapper, comparator),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_InputIterator$InputIteratorWrapper__methods_[] = {
            DECLARE_METHOD(t_InputIterator$InputIteratorWrapper, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_InputIterator$InputIteratorWrapper, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_InputIterator$InputIteratorWrapper, contexts, METH_NOARGS),
            DECLARE_METHOD(t_InputIterator$InputIteratorWrapper, getComparator, METH_NOARGS),
            DECLARE_METHOD(t_InputIterator$InputIteratorWrapper, hasContexts, METH_NOARGS),
            DECLARE_METHOD(t_InputIterator$InputIteratorWrapper, hasPayloads, METH_NOARGS),
            DECLARE_METHOD(t_InputIterator$InputIteratorWrapper, next, METH_NOARGS),
            DECLARE_METHOD(t_InputIterator$InputIteratorWrapper, payload, METH_NOARGS),
            DECLARE_METHOD(t_InputIterator$InputIteratorWrapper, weight, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(InputIterator$InputIteratorWrapper, t_InputIterator$InputIteratorWrapper, ::java::lang::Object, InputIterator$InputIteratorWrapper, t_InputIterator$InputIteratorWrapper_init_, PyObject_SelfIter, ((PyObject *(*)(t_InputIterator$InputIteratorWrapper *)) get_next< t_InputIterator$InputIteratorWrapper,::org::apache::lucene::util::t_BytesRef,::org::apache::lucene::util::BytesRef >), t_InputIterator$InputIteratorWrapper__fields_, 0, 0);

          void t_InputIterator$InputIteratorWrapper::install(PyObject *module)
          {
            installType(&PY_TYPE(InputIterator$InputIteratorWrapper), module, "InputIterator$InputIteratorWrapper", 0);
          }

          void t_InputIterator$InputIteratorWrapper::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(InputIterator$InputIteratorWrapper).tp_dict, "class_", make_descriptor(InputIterator$InputIteratorWrapper::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(InputIterator$InputIteratorWrapper).tp_dict, "wrapfn_", make_descriptor(t_InputIterator$InputIteratorWrapper::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(InputIterator$InputIteratorWrapper).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_InputIterator$InputIteratorWrapper_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, InputIterator$InputIteratorWrapper::initializeClass, 1)))
              return NULL;
            return t_InputIterator$InputIteratorWrapper::wrap_Object(InputIterator$InputIteratorWrapper(((t_InputIterator$InputIteratorWrapper *) arg)->object.this$));
          }
          static PyObject *t_InputIterator$InputIteratorWrapper_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, InputIterator$InputIteratorWrapper::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_InputIterator$InputIteratorWrapper_init_(t_InputIterator$InputIteratorWrapper *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::util::BytesRefIterator a0((jobject) NULL);
            InputIterator$InputIteratorWrapper object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::util::BytesRefIterator::initializeClass, &a0))
            {
              INT_CALL(object = InputIterator$InputIteratorWrapper(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_InputIterator$InputIteratorWrapper_contexts(t_InputIterator$InputIteratorWrapper *self)
          {
            ::java::util::Set result((jobject) NULL);
            OBJ_CALL(result = self->object.contexts());
            return ::java::util::t_Set::wrap_Object(result, &::org::apache::lucene::util::PY_TYPE(BytesRef));
          }

          static PyObject *t_InputIterator$InputIteratorWrapper_getComparator(t_InputIterator$InputIteratorWrapper *self)
          {
            ::java::util::Comparator result((jobject) NULL);
            OBJ_CALL(result = self->object.getComparator());
            return ::java::util::t_Comparator::wrap_Object(result, &::org::apache::lucene::util::PY_TYPE(BytesRef));
          }

          static PyObject *t_InputIterator$InputIteratorWrapper_hasContexts(t_InputIterator$InputIteratorWrapper *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.hasContexts());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_InputIterator$InputIteratorWrapper_hasPayloads(t_InputIterator$InputIteratorWrapper *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.hasPayloads());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_InputIterator$InputIteratorWrapper_next(t_InputIterator$InputIteratorWrapper *self)
          {
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);
            OBJ_CALL(result = self->object.next());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          static PyObject *t_InputIterator$InputIteratorWrapper_payload(t_InputIterator$InputIteratorWrapper *self)
          {
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);
            OBJ_CALL(result = self->object.payload());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          static PyObject *t_InputIterator$InputIteratorWrapper_weight(t_InputIterator$InputIteratorWrapper *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.weight());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_InputIterator$InputIteratorWrapper_get__comparator(t_InputIterator$InputIteratorWrapper *self, void *data)
          {
            ::java::util::Comparator value((jobject) NULL);
            OBJ_CALL(value = self->object.getComparator());
            return ::java::util::t_Comparator::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/blocktree/FieldReader.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/TermsEnum.h"
#include "org/apache/lucene/codecs/blocktree/Stats.h"
#include "org/apache/lucene/util/automaton/CompiledAutomaton.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/util/Comparator.h"
#include "org/apache/lucene/util/Accountable.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace blocktree {

          ::java::lang::Class *FieldReader::class$ = NULL;
          jmethodID *FieldReader::mids$ = NULL;
          bool FieldReader::live$ = false;

          jclass FieldReader::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/blocktree/FieldReader");

              mids$ = new jmethodID[max_mid];
              mids$[mid_computeStats_30b35506] = env->getMethodID(cls, "computeStats", "()Lorg/apache/lucene/codecs/blocktree/Stats;");
              mids$[mid_getComparator_5a7ff2fc] = env->getMethodID(cls, "getComparator", "()Ljava/util/Comparator;");
              mids$[mid_getDocCount_54c6a179] = env->getMethodID(cls, "getDocCount", "()I");
              mids$[mid_getMax_4ae19461] = env->getMethodID(cls, "getMax", "()Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_getMin_4ae19461] = env->getMethodID(cls, "getMin", "()Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_getSumDocFreq_54c6a17a] = env->getMethodID(cls, "getSumDocFreq", "()J");
              mids$[mid_getSumTotalTermFreq_54c6a17a] = env->getMethodID(cls, "getSumTotalTermFreq", "()J");
              mids$[mid_hasFreqs_54c6a16a] = env->getMethodID(cls, "hasFreqs", "()Z");
              mids$[mid_hasOffsets_54c6a16a] = env->getMethodID(cls, "hasOffsets", "()Z");
              mids$[mid_hasPayloads_54c6a16a] = env->getMethodID(cls, "hasPayloads", "()Z");
              mids$[mid_hasPositions_54c6a16a] = env->getMethodID(cls, "hasPositions", "()Z");
              mids$[mid_intersect_b8f2b1bc] = env->getMethodID(cls, "intersect", "(Lorg/apache/lucene/util/automaton/CompiledAutomaton;Lorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/index/TermsEnum;");
              mids$[mid_iterator_d737078b] = env->getMethodID(cls, "iterator", "(Lorg/apache/lucene/index/TermsEnum;)Lorg/apache/lucene/index/TermsEnum;");
              mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");
              mids$[mid_size_54c6a17a] = env->getMethodID(cls, "size", "()J");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::org::apache::lucene::codecs::blocktree::Stats FieldReader::computeStats() const
          {
            return ::org::apache::lucene::codecs::blocktree::Stats(env->callObjectMethod(this$, mids$[mid_computeStats_30b35506]));
          }

          ::java::util::Comparator FieldReader::getComparator() const
          {
            return ::java::util::Comparator(env->callObjectMethod(this$, mids$[mid_getComparator_5a7ff2fc]));
          }

          jint FieldReader::getDocCount() const
          {
            return env->callIntMethod(this$, mids$[mid_getDocCount_54c6a179]);
          }

          ::org::apache::lucene::util::BytesRef FieldReader::getMax() const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_getMax_4ae19461]));
          }

          ::org::apache::lucene::util::BytesRef FieldReader::getMin() const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_getMin_4ae19461]));
          }

          jlong FieldReader::getSumDocFreq() const
          {
            return env->callLongMethod(this$, mids$[mid_getSumDocFreq_54c6a17a]);
          }

          jlong FieldReader::getSumTotalTermFreq() const
          {
            return env->callLongMethod(this$, mids$[mid_getSumTotalTermFreq_54c6a17a]);
          }

          jboolean FieldReader::hasFreqs() const
          {
            return env->callBooleanMethod(this$, mids$[mid_hasFreqs_54c6a16a]);
          }

          jboolean FieldReader::hasOffsets() const
          {
            return env->callBooleanMethod(this$, mids$[mid_hasOffsets_54c6a16a]);
          }

          jboolean FieldReader::hasPayloads() const
          {
            return env->callBooleanMethod(this$, mids$[mid_hasPayloads_54c6a16a]);
          }

          jboolean FieldReader::hasPositions() const
          {
            return env->callBooleanMethod(this$, mids$[mid_hasPositions_54c6a16a]);
          }

          ::org::apache::lucene::index::TermsEnum FieldReader::intersect(const ::org::apache::lucene::util::automaton::CompiledAutomaton & a0, const ::org::apache::lucene::util::BytesRef & a1) const
          {
            return ::org::apache::lucene::index::TermsEnum(env->callObjectMethod(this$, mids$[mid_intersect_b8f2b1bc], a0.this$, a1.this$));
          }

          ::org::apache::lucene::index::TermsEnum FieldReader::iterator(const ::org::apache::lucene::index::TermsEnum & a0) const
          {
            return ::org::apache::lucene::index::TermsEnum(env->callObjectMethod(this$, mids$[mid_iterator_d737078b], a0.this$));
          }

          jlong FieldReader::ramBytesUsed() const
          {
            return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
          }

          jlong FieldReader::size() const
          {
            return env->callLongMethod(this$, mids$[mid_size_54c6a17a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace blocktree {
          static PyObject *t_FieldReader_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FieldReader_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FieldReader_computeStats(t_FieldReader *self);
          static PyObject *t_FieldReader_getComparator(t_FieldReader *self, PyObject *args);
          static PyObject *t_FieldReader_getDocCount(t_FieldReader *self, PyObject *args);
          static PyObject *t_FieldReader_getMax(t_FieldReader *self, PyObject *args);
          static PyObject *t_FieldReader_getMin(t_FieldReader *self, PyObject *args);
          static PyObject *t_FieldReader_getSumDocFreq(t_FieldReader *self, PyObject *args);
          static PyObject *t_FieldReader_getSumTotalTermFreq(t_FieldReader *self, PyObject *args);
          static PyObject *t_FieldReader_hasFreqs(t_FieldReader *self, PyObject *args);
          static PyObject *t_FieldReader_hasOffsets(t_FieldReader *self, PyObject *args);
          static PyObject *t_FieldReader_hasPayloads(t_FieldReader *self, PyObject *args);
          static PyObject *t_FieldReader_hasPositions(t_FieldReader *self, PyObject *args);
          static PyObject *t_FieldReader_intersect(t_FieldReader *self, PyObject *args);
          static PyObject *t_FieldReader_iterator(t_FieldReader *self, PyObject *args);
          static PyObject *t_FieldReader_ramBytesUsed(t_FieldReader *self);
          static PyObject *t_FieldReader_size(t_FieldReader *self, PyObject *args);
          static PyObject *t_FieldReader_get__comparator(t_FieldReader *self, void *data);
          static PyObject *t_FieldReader_get__docCount(t_FieldReader *self, void *data);
          static PyObject *t_FieldReader_get__max(t_FieldReader *self, void *data);
          static PyObject *t_FieldReader_get__min(t_FieldReader *self, void *data);
          static PyObject *t_FieldReader_get__sumDocFreq(t_FieldReader *self, void *data);
          static PyObject *t_FieldReader_get__sumTotalTermFreq(t_FieldReader *self, void *data);
          static PyGetSetDef t_FieldReader__fields_[] = {
            DECLARE_GET_FIELD(t_FieldReader, comparator),
            DECLARE_GET_FIELD(t_FieldReader, docCount),
            DECLARE_GET_FIELD(t_FieldReader, max),
            DECLARE_GET_FIELD(t_FieldReader, min),
            DECLARE_GET_FIELD(t_FieldReader, sumDocFreq),
            DECLARE_GET_FIELD(t_FieldReader, sumTotalTermFreq),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_FieldReader__methods_[] = {
            DECLARE_METHOD(t_FieldReader, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FieldReader, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FieldReader, computeStats, METH_NOARGS),
            DECLARE_METHOD(t_FieldReader, getComparator, METH_VARARGS),
            DECLARE_METHOD(t_FieldReader, getDocCount, METH_VARARGS),
            DECLARE_METHOD(t_FieldReader, getMax, METH_VARARGS),
            DECLARE_METHOD(t_FieldReader, getMin, METH_VARARGS),
            DECLARE_METHOD(t_FieldReader, getSumDocFreq, METH_VARARGS),
            DECLARE_METHOD(t_FieldReader, getSumTotalTermFreq, METH_VARARGS),
            DECLARE_METHOD(t_FieldReader, hasFreqs, METH_VARARGS),
            DECLARE_METHOD(t_FieldReader, hasOffsets, METH_VARARGS),
            DECLARE_METHOD(t_FieldReader, hasPayloads, METH_VARARGS),
            DECLARE_METHOD(t_FieldReader, hasPositions, METH_VARARGS),
            DECLARE_METHOD(t_FieldReader, intersect, METH_VARARGS),
            DECLARE_METHOD(t_FieldReader, iterator, METH_VARARGS),
            DECLARE_METHOD(t_FieldReader, ramBytesUsed, METH_NOARGS),
            DECLARE_METHOD(t_FieldReader, size, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FieldReader, t_FieldReader, ::org::apache::lucene::index::Terms, FieldReader, abstract_init, 0, 0, t_FieldReader__fields_, 0, 0);

          void t_FieldReader::install(PyObject *module)
          {
            installType(&PY_TYPE(FieldReader), module, "FieldReader", 0);
          }

          void t_FieldReader::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FieldReader).tp_dict, "class_", make_descriptor(FieldReader::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FieldReader).tp_dict, "wrapfn_", make_descriptor(t_FieldReader::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FieldReader).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FieldReader_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FieldReader::initializeClass, 1)))
              return NULL;
            return t_FieldReader::wrap_Object(FieldReader(((t_FieldReader *) arg)->object.this$));
          }
          static PyObject *t_FieldReader_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FieldReader::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_FieldReader_computeStats(t_FieldReader *self)
          {
            ::org::apache::lucene::codecs::blocktree::Stats result((jobject) NULL);
            OBJ_CALL(result = self->object.computeStats());
            return ::org::apache::lucene::codecs::blocktree::t_Stats::wrap_Object(result);
          }

          static PyObject *t_FieldReader_getComparator(t_FieldReader *self, PyObject *args)
          {
            ::java::util::Comparator result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getComparator());
              return ::java::util::t_Comparator::wrap_Object(result, &::org::apache::lucene::util::PY_TYPE(BytesRef));
            }

            return callSuper(&PY_TYPE(FieldReader), (PyObject *) self, "getComparator", args, 2);
          }

          static PyObject *t_FieldReader_getDocCount(t_FieldReader *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getDocCount());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(FieldReader), (PyObject *) self, "getDocCount", args, 2);
          }

          static PyObject *t_FieldReader_getMax(t_FieldReader *self, PyObject *args)
          {
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getMax());
              return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(FieldReader), (PyObject *) self, "getMax", args, 2);
          }

          static PyObject *t_FieldReader_getMin(t_FieldReader *self, PyObject *args)
          {
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getMin());
              return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(FieldReader), (PyObject *) self, "getMin", args, 2);
          }

          static PyObject *t_FieldReader_getSumDocFreq(t_FieldReader *self, PyObject *args)
          {
            jlong result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getSumDocFreq());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(&PY_TYPE(FieldReader), (PyObject *) self, "getSumDocFreq", args, 2);
          }

          static PyObject *t_FieldReader_getSumTotalTermFreq(t_FieldReader *self, PyObject *args)
          {
            jlong result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getSumTotalTermFreq());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(&PY_TYPE(FieldReader), (PyObject *) self, "getSumTotalTermFreq", args, 2);
          }

          static PyObject *t_FieldReader_hasFreqs(t_FieldReader *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hasFreqs());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(FieldReader), (PyObject *) self, "hasFreqs", args, 2);
          }

          static PyObject *t_FieldReader_hasOffsets(t_FieldReader *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hasOffsets());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(FieldReader), (PyObject *) self, "hasOffsets", args, 2);
          }

          static PyObject *t_FieldReader_hasPayloads(t_FieldReader *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hasPayloads());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(FieldReader), (PyObject *) self, "hasPayloads", args, 2);
          }

          static PyObject *t_FieldReader_hasPositions(t_FieldReader *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hasPositions());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(FieldReader), (PyObject *) self, "hasPositions", args, 2);
          }

          static PyObject *t_FieldReader_intersect(t_FieldReader *self, PyObject *args)
          {
            ::org::apache::lucene::util::automaton::CompiledAutomaton a0((jobject) NULL);
            ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
            ::org::apache::lucene::index::TermsEnum result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::automaton::CompiledAutomaton::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.intersect(a0, a1));
              return ::org::apache::lucene::index::t_TermsEnum::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(FieldReader), (PyObject *) self, "intersect", args, 2);
          }

          static PyObject *t_FieldReader_iterator(t_FieldReader *self, PyObject *args)
          {
            ::org::apache::lucene::index::TermsEnum a0((jobject) NULL);
            ::org::apache::lucene::index::TermsEnum result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::TermsEnum::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.iterator(a0));
              return ::org::apache::lucene::index::t_TermsEnum::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(FieldReader), (PyObject *) self, "iterator", args, 2);
          }

          static PyObject *t_FieldReader_ramBytesUsed(t_FieldReader *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.ramBytesUsed());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_FieldReader_size(t_FieldReader *self, PyObject *args)
          {
            jlong result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.size());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(&PY_TYPE(FieldReader), (PyObject *) self, "size", args, 2);
          }

          static PyObject *t_FieldReader_get__comparator(t_FieldReader *self, void *data)
          {
            ::java::util::Comparator value((jobject) NULL);
            OBJ_CALL(value = self->object.getComparator());
            return ::java::util::t_Comparator::wrap_Object(value);
          }

          static PyObject *t_FieldReader_get__docCount(t_FieldReader *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getDocCount());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_FieldReader_get__max(t_FieldReader *self, void *data)
          {
            ::org::apache::lucene::util::BytesRef value((jobject) NULL);
            OBJ_CALL(value = self->object.getMax());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(value);
          }

          static PyObject *t_FieldReader_get__min(t_FieldReader *self, void *data)
          {
            ::org::apache::lucene::util::BytesRef value((jobject) NULL);
            OBJ_CALL(value = self->object.getMin());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(value);
          }

          static PyObject *t_FieldReader_get__sumDocFreq(t_FieldReader *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object.getSumDocFreq());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }

          static PyObject *t_FieldReader_get__sumTotalTermFreq(t_FieldReader *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object.getSumTotalTermFreq());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ngram/Lucene43EdgeNGramTokenizer$Side.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ngram {

          ::java::lang::Class *Lucene43EdgeNGramTokenizer$Side::class$ = NULL;
          jmethodID *Lucene43EdgeNGramTokenizer$Side::mids$ = NULL;
          bool Lucene43EdgeNGramTokenizer$Side::live$ = false;
          Lucene43EdgeNGramTokenizer$Side *Lucene43EdgeNGramTokenizer$Side::BACK = NULL;
          Lucene43EdgeNGramTokenizer$Side *Lucene43EdgeNGramTokenizer$Side::FRONT = NULL;

          jclass Lucene43EdgeNGramTokenizer$Side::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ngram/Lucene43EdgeNGramTokenizer$Side");

              mids$ = new jmethodID[max_mid];
              mids$[mid_getLabel_14c7b5c5] = env->getMethodID(cls, "getLabel", "()Ljava/lang/String;");
              mids$[mid_getSide_2ac44635] = env->getStaticMethodID(cls, "getSide", "(Ljava/lang/String;)Lorg/apache/lucene/analysis/ngram/Lucene43EdgeNGramTokenizer$Side;");
              mids$[mid_valueOf_2ac44635] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/analysis/ngram/Lucene43EdgeNGramTokenizer$Side;");
              mids$[mid_values_0033eb83] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/analysis/ngram/Lucene43EdgeNGramTokenizer$Side;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              BACK = new Lucene43EdgeNGramTokenizer$Side(env->getStaticObjectField(cls, "BACK", "Lorg/apache/lucene/analysis/ngram/Lucene43EdgeNGramTokenizer$Side;"));
              FRONT = new Lucene43EdgeNGramTokenizer$Side(env->getStaticObjectField(cls, "FRONT", "Lorg/apache/lucene/analysis/ngram/Lucene43EdgeNGramTokenizer$Side;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::java::lang::String Lucene43EdgeNGramTokenizer$Side::getLabel() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getLabel_14c7b5c5]));
          }

          Lucene43EdgeNGramTokenizer$Side Lucene43EdgeNGramTokenizer$Side::getSide(const ::java::lang::String & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return Lucene43EdgeNGramTokenizer$Side(env->callStaticObjectMethod(cls, mids$[mid_getSide_2ac44635], a0.this$));
          }

          Lucene43EdgeNGramTokenizer$Side Lucene43EdgeNGramTokenizer$Side::valueOf(const ::java::lang::String & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return Lucene43EdgeNGramTokenizer$Side(env->callStaticObjectMethod(cls, mids$[mid_valueOf_2ac44635], a0.this$));
          }

          JArray< Lucene43EdgeNGramTokenizer$Side > Lucene43EdgeNGramTokenizer$Side::values()
          {
            jclass cls = env->getClass(initializeClass);
            return JArray< Lucene43EdgeNGramTokenizer$Side >(env->callStaticObjectMethod(cls, mids$[mid_values_0033eb83]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ngram {
          static PyObject *t_Lucene43EdgeNGramTokenizer$Side_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene43EdgeNGramTokenizer$Side_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene43EdgeNGramTokenizer$Side_of_(t_Lucene43EdgeNGramTokenizer$Side *self, PyObject *args);
          static PyObject *t_Lucene43EdgeNGramTokenizer$Side_getLabel(t_Lucene43EdgeNGramTokenizer$Side *self);
          static PyObject *t_Lucene43EdgeNGramTokenizer$Side_getSide(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene43EdgeNGramTokenizer$Side_valueOf(PyTypeObject *type, PyObject *args);
          static PyObject *t_Lucene43EdgeNGramTokenizer$Side_values(PyTypeObject *type);
          static PyObject *t_Lucene43EdgeNGramTokenizer$Side_get__label(t_Lucene43EdgeNGramTokenizer$Side *self, void *data);
          static PyObject *t_Lucene43EdgeNGramTokenizer$Side_get__parameters_(t_Lucene43EdgeNGramTokenizer$Side *self, void *data);
          static PyGetSetDef t_Lucene43EdgeNGramTokenizer$Side__fields_[] = {
            DECLARE_GET_FIELD(t_Lucene43EdgeNGramTokenizer$Side, label),
            DECLARE_GET_FIELD(t_Lucene43EdgeNGramTokenizer$Side, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Lucene43EdgeNGramTokenizer$Side__methods_[] = {
            DECLARE_METHOD(t_Lucene43EdgeNGramTokenizer$Side, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene43EdgeNGramTokenizer$Side, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene43EdgeNGramTokenizer$Side, of_, METH_VARARGS),
            DECLARE_METHOD(t_Lucene43EdgeNGramTokenizer$Side, getLabel, METH_NOARGS),
            DECLARE_METHOD(t_Lucene43EdgeNGramTokenizer$Side, getSide, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene43EdgeNGramTokenizer$Side, valueOf, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_Lucene43EdgeNGramTokenizer$Side, values, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene43EdgeNGramTokenizer$Side, t_Lucene43EdgeNGramTokenizer$Side, ::java::lang::Enum, Lucene43EdgeNGramTokenizer$Side, abstract_init, 0, 0, t_Lucene43EdgeNGramTokenizer$Side__fields_, 0, 0);
          PyObject *t_Lucene43EdgeNGramTokenizer$Side::wrap_Object(const Lucene43EdgeNGramTokenizer$Side& object, PyTypeObject *p0)
          {
            PyObject *obj = t_Lucene43EdgeNGramTokenizer$Side::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_Lucene43EdgeNGramTokenizer$Side *self = (t_Lucene43EdgeNGramTokenizer$Side *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_Lucene43EdgeNGramTokenizer$Side::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_Lucene43EdgeNGramTokenizer$Side::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_Lucene43EdgeNGramTokenizer$Side *self = (t_Lucene43EdgeNGramTokenizer$Side *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_Lucene43EdgeNGramTokenizer$Side::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene43EdgeNGramTokenizer$Side), module, "Lucene43EdgeNGramTokenizer$Side", 0);
          }

          void t_Lucene43EdgeNGramTokenizer$Side::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene43EdgeNGramTokenizer$Side).tp_dict, "class_", make_descriptor(Lucene43EdgeNGramTokenizer$Side::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene43EdgeNGramTokenizer$Side).tp_dict, "wrapfn_", make_descriptor(t_Lucene43EdgeNGramTokenizer$Side::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene43EdgeNGramTokenizer$Side).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(Lucene43EdgeNGramTokenizer$Side::initializeClass);
            PyDict_SetItemString(PY_TYPE(Lucene43EdgeNGramTokenizer$Side).tp_dict, "BACK", make_descriptor(t_Lucene43EdgeNGramTokenizer$Side::wrap_Object(*Lucene43EdgeNGramTokenizer$Side::BACK)));
            PyDict_SetItemString(PY_TYPE(Lucene43EdgeNGramTokenizer$Side).tp_dict, "FRONT", make_descriptor(t_Lucene43EdgeNGramTokenizer$Side::wrap_Object(*Lucene43EdgeNGramTokenizer$Side::FRONT)));
          }

          static PyObject *t_Lucene43EdgeNGramTokenizer$Side_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene43EdgeNGramTokenizer$Side::initializeClass, 1)))
              return NULL;
            return t_Lucene43EdgeNGramTokenizer$Side::wrap_Object(Lucene43EdgeNGramTokenizer$Side(((t_Lucene43EdgeNGramTokenizer$Side *) arg)->object.this$));
          }
          static PyObject *t_Lucene43EdgeNGramTokenizer$Side_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene43EdgeNGramTokenizer$Side::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_Lucene43EdgeNGramTokenizer$Side_of_(t_Lucene43EdgeNGramTokenizer$Side *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static PyObject *t_Lucene43EdgeNGramTokenizer$Side_getLabel(t_Lucene43EdgeNGramTokenizer$Side *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.getLabel());
            return j2p(result);
          }

          static PyObject *t_Lucene43EdgeNGramTokenizer$Side_getSide(PyTypeObject *type, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            Lucene43EdgeNGramTokenizer$Side result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::analysis::ngram::Lucene43EdgeNGramTokenizer$Side::getSide(a0));
              return t_Lucene43EdgeNGramTokenizer$Side::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "getSide", arg);
            return NULL;
          }

          static PyObject *t_Lucene43EdgeNGramTokenizer$Side_valueOf(PyTypeObject *type, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            Lucene43EdgeNGramTokenizer$Side result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::analysis::ngram::Lucene43EdgeNGramTokenizer$Side::valueOf(a0));
              return t_Lucene43EdgeNGramTokenizer$Side::wrap_Object(result);
            }

            return callSuper(type, "valueOf", args, 2);
          }

          static PyObject *t_Lucene43EdgeNGramTokenizer$Side_values(PyTypeObject *type)
          {
            JArray< Lucene43EdgeNGramTokenizer$Side > result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::ngram::Lucene43EdgeNGramTokenizer$Side::values());
            return JArray<jobject>(result.this$).wrap(t_Lucene43EdgeNGramTokenizer$Side::wrap_jobject);
          }
          static PyObject *t_Lucene43EdgeNGramTokenizer$Side_get__parameters_(t_Lucene43EdgeNGramTokenizer$Side *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_Lucene43EdgeNGramTokenizer$Side_get__label(t_Lucene43EdgeNGramTokenizer$Side *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getLabel());
            return j2p(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/SnapshotDeletionPolicy.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/IndexCommit.h"
#include "java/util/List.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *SnapshotDeletionPolicy::class$ = NULL;
        jmethodID *SnapshotDeletionPolicy::mids$ = NULL;
        bool SnapshotDeletionPolicy::live$ = false;

        jclass SnapshotDeletionPolicy::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/SnapshotDeletionPolicy");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_9cff6c2e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/IndexDeletionPolicy;)V");
            mids$[mid_getIndexCommit_6e559b4f] = env->getMethodID(cls, "getIndexCommit", "(J)Lorg/apache/lucene/index/IndexCommit;");
            mids$[mid_getSnapshotCount_54c6a179] = env->getMethodID(cls, "getSnapshotCount", "()I");
            mids$[mid_getSnapshots_87851566] = env->getMethodID(cls, "getSnapshots", "()Ljava/util/List;");
            mids$[mid_onCommit_1fde8fc3] = env->getMethodID(cls, "onCommit", "(Ljava/util/List;)V");
            mids$[mid_onInit_1fde8fc3] = env->getMethodID(cls, "onInit", "(Ljava/util/List;)V");
            mids$[mid_release_fecc65d3] = env->getMethodID(cls, "release", "(Lorg/apache/lucene/index/IndexCommit;)V");
            mids$[mid_snapshot_09307276] = env->getMethodID(cls, "snapshot", "()Lorg/apache/lucene/index/IndexCommit;");
            mids$[mid_incRef_fecc65d3] = env->getMethodID(cls, "incRef", "(Lorg/apache/lucene/index/IndexCommit;)V");
            mids$[mid_releaseGen_0ee6df2f] = env->getMethodID(cls, "releaseGen", "(J)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SnapshotDeletionPolicy::SnapshotDeletionPolicy(const ::org::apache::lucene::index::IndexDeletionPolicy & a0) : ::org::apache::lucene::index::IndexDeletionPolicy(env->newObject(initializeClass, &mids$, mid_init$_9cff6c2e, a0.this$)) {}

        ::org::apache::lucene::index::IndexCommit SnapshotDeletionPolicy::getIndexCommit(jlong a0) const
        {
          return ::org::apache::lucene::index::IndexCommit(env->callObjectMethod(this$, mids$[mid_getIndexCommit_6e559b4f], a0));
        }

        jint SnapshotDeletionPolicy::getSnapshotCount() const
        {
          return env->callIntMethod(this$, mids$[mid_getSnapshotCount_54c6a179]);
        }

        ::java::util::List SnapshotDeletionPolicy::getSnapshots() const
        {
          return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getSnapshots_87851566]));
        }

        void SnapshotDeletionPolicy::onCommit(const ::java::util::List & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_onCommit_1fde8fc3], a0.this$);
        }

        void SnapshotDeletionPolicy::onInit(const ::java::util::List & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_onInit_1fde8fc3], a0.this$);
        }

        void SnapshotDeletionPolicy::release(const ::org::apache::lucene::index::IndexCommit & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_release_fecc65d3], a0.this$);
        }

        ::org::apache::lucene::index::IndexCommit SnapshotDeletionPolicy::snapshot() const
        {
          return ::org::apache::lucene::index::IndexCommit(env->callObjectMethod(this$, mids$[mid_snapshot_09307276]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_SnapshotDeletionPolicy_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SnapshotDeletionPolicy_instance_(PyTypeObject *type, PyObject *arg);
        static int t_SnapshotDeletionPolicy_init_(t_SnapshotDeletionPolicy *self, PyObject *args, PyObject *kwds);
        static PyObject *t_SnapshotDeletionPolicy_getIndexCommit(t_SnapshotDeletionPolicy *self, PyObject *arg);
        static PyObject *t_SnapshotDeletionPolicy_getSnapshotCount(t_SnapshotDeletionPolicy *self);
        static PyObject *t_SnapshotDeletionPolicy_getSnapshots(t_SnapshotDeletionPolicy *self);
        static PyObject *t_SnapshotDeletionPolicy_onCommit(t_SnapshotDeletionPolicy *self, PyObject *args);
        static PyObject *t_SnapshotDeletionPolicy_onInit(t_SnapshotDeletionPolicy *self, PyObject *args);
        static PyObject *t_SnapshotDeletionPolicy_release(t_SnapshotDeletionPolicy *self, PyObject *arg);
        static PyObject *t_SnapshotDeletionPolicy_snapshot(t_SnapshotDeletionPolicy *self);
        static PyObject *t_SnapshotDeletionPolicy_get__snapshotCount(t_SnapshotDeletionPolicy *self, void *data);
        static PyObject *t_SnapshotDeletionPolicy_get__snapshots(t_SnapshotDeletionPolicy *self, void *data);
        static PyGetSetDef t_SnapshotDeletionPolicy__fields_[] = {
          DECLARE_GET_FIELD(t_SnapshotDeletionPolicy, snapshotCount),
          DECLARE_GET_FIELD(t_SnapshotDeletionPolicy, snapshots),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_SnapshotDeletionPolicy__methods_[] = {
          DECLARE_METHOD(t_SnapshotDeletionPolicy, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SnapshotDeletionPolicy, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SnapshotDeletionPolicy, getIndexCommit, METH_O),
          DECLARE_METHOD(t_SnapshotDeletionPolicy, getSnapshotCount, METH_NOARGS),
          DECLARE_METHOD(t_SnapshotDeletionPolicy, getSnapshots, METH_NOARGS),
          DECLARE_METHOD(t_SnapshotDeletionPolicy, onCommit, METH_VARARGS),
          DECLARE_METHOD(t_SnapshotDeletionPolicy, onInit, METH_VARARGS),
          DECLARE_METHOD(t_SnapshotDeletionPolicy, release, METH_O),
          DECLARE_METHOD(t_SnapshotDeletionPolicy, snapshot, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SnapshotDeletionPolicy, t_SnapshotDeletionPolicy, ::org::apache::lucene::index::IndexDeletionPolicy, SnapshotDeletionPolicy, t_SnapshotDeletionPolicy_init_, 0, 0, t_SnapshotDeletionPolicy__fields_, 0, 0);

        void t_SnapshotDeletionPolicy::install(PyObject *module)
        {
          installType(&PY_TYPE(SnapshotDeletionPolicy), module, "SnapshotDeletionPolicy", 0);
        }

        void t_SnapshotDeletionPolicy::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SnapshotDeletionPolicy).tp_dict, "class_", make_descriptor(SnapshotDeletionPolicy::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SnapshotDeletionPolicy).tp_dict, "wrapfn_", make_descriptor(t_SnapshotDeletionPolicy::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SnapshotDeletionPolicy).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SnapshotDeletionPolicy_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SnapshotDeletionPolicy::initializeClass, 1)))
            return NULL;
          return t_SnapshotDeletionPolicy::wrap_Object(SnapshotDeletionPolicy(((t_SnapshotDeletionPolicy *) arg)->object.this$));
        }
        static PyObject *t_SnapshotDeletionPolicy_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SnapshotDeletionPolicy::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_SnapshotDeletionPolicy_init_(t_SnapshotDeletionPolicy *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::index::IndexDeletionPolicy a0((jobject) NULL);
          SnapshotDeletionPolicy object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexDeletionPolicy::initializeClass, &a0))
          {
            INT_CALL(object = SnapshotDeletionPolicy(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_SnapshotDeletionPolicy_getIndexCommit(t_SnapshotDeletionPolicy *self, PyObject *arg)
        {
          jlong a0;
          ::org::apache::lucene::index::IndexCommit result((jobject) NULL);

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(result = self->object.getIndexCommit(a0));
            return ::org::apache::lucene::index::t_IndexCommit::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getIndexCommit", arg);
          return NULL;
        }

        static PyObject *t_SnapshotDeletionPolicy_getSnapshotCount(t_SnapshotDeletionPolicy *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getSnapshotCount());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_SnapshotDeletionPolicy_getSnapshots(t_SnapshotDeletionPolicy *self)
        {
          ::java::util::List result((jobject) NULL);
          OBJ_CALL(result = self->object.getSnapshots());
          return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::index::PY_TYPE(IndexCommit));
        }

        static PyObject *t_SnapshotDeletionPolicy_onCommit(t_SnapshotDeletionPolicy *self, PyObject *args)
        {
          ::java::util::List a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArgs(args, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
          {
            OBJ_CALL(self->object.onCommit(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(SnapshotDeletionPolicy), (PyObject *) self, "onCommit", args, 2);
        }

        static PyObject *t_SnapshotDeletionPolicy_onInit(t_SnapshotDeletionPolicy *self, PyObject *args)
        {
          ::java::util::List a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArgs(args, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
          {
            OBJ_CALL(self->object.onInit(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(SnapshotDeletionPolicy), (PyObject *) self, "onInit", args, 2);
        }

        static PyObject *t_SnapshotDeletionPolicy_release(t_SnapshotDeletionPolicy *self, PyObject *arg)
        {
          ::org::apache::lucene::index::IndexCommit a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::IndexCommit::initializeClass, &a0))
          {
            OBJ_CALL(self->object.release(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "release", arg);
          return NULL;
        }

        static PyObject *t_SnapshotDeletionPolicy_snapshot(t_SnapshotDeletionPolicy *self)
        {
          ::org::apache::lucene::index::IndexCommit result((jobject) NULL);
          OBJ_CALL(result = self->object.snapshot());
          return ::org::apache::lucene::index::t_IndexCommit::wrap_Object(result);
        }

        static PyObject *t_SnapshotDeletionPolicy_get__snapshotCount(t_SnapshotDeletionPolicy *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getSnapshotCount());
          return PyInt_FromLong((long) value);
        }

        static PyObject *t_SnapshotDeletionPolicy_get__snapshots(t_SnapshotDeletionPolicy *self, void *data)
        {
          ::java::util::List value((jobject) NULL);
          OBJ_CALL(value = self->object.getSnapshots());
          return ::java::util::t_List::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/PrefixCodedTerms$Builder.h"
#include "org/apache/lucene/index/Term.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *PrefixCodedTerms$Builder::class$ = NULL;
        jmethodID *PrefixCodedTerms$Builder::mids$ = NULL;
        bool PrefixCodedTerms$Builder::live$ = false;

        jclass PrefixCodedTerms$Builder::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/PrefixCodedTerms$Builder");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_add_7eca6a81] = env->getMethodID(cls, "add", "(Lorg/apache/lucene/index/Term;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PrefixCodedTerms$Builder::PrefixCodedTerms$Builder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void PrefixCodedTerms$Builder::add(const ::org::apache::lucene::index::Term & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_add_7eca6a81], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_PrefixCodedTerms$Builder_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PrefixCodedTerms$Builder_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PrefixCodedTerms$Builder_init_(t_PrefixCodedTerms$Builder *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PrefixCodedTerms$Builder_add(t_PrefixCodedTerms$Builder *self, PyObject *arg);

        static PyMethodDef t_PrefixCodedTerms$Builder__methods_[] = {
          DECLARE_METHOD(t_PrefixCodedTerms$Builder, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PrefixCodedTerms$Builder, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PrefixCodedTerms$Builder, add, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PrefixCodedTerms$Builder, t_PrefixCodedTerms$Builder, ::java::lang::Object, PrefixCodedTerms$Builder, t_PrefixCodedTerms$Builder_init_, 0, 0, 0, 0, 0);

        void t_PrefixCodedTerms$Builder::install(PyObject *module)
        {
          installType(&PY_TYPE(PrefixCodedTerms$Builder), module, "PrefixCodedTerms$Builder", 0);
        }

        void t_PrefixCodedTerms$Builder::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PrefixCodedTerms$Builder).tp_dict, "class_", make_descriptor(PrefixCodedTerms$Builder::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PrefixCodedTerms$Builder).tp_dict, "wrapfn_", make_descriptor(t_PrefixCodedTerms$Builder::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PrefixCodedTerms$Builder).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_PrefixCodedTerms$Builder_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PrefixCodedTerms$Builder::initializeClass, 1)))
            return NULL;
          return t_PrefixCodedTerms$Builder::wrap_Object(PrefixCodedTerms$Builder(((t_PrefixCodedTerms$Builder *) arg)->object.this$));
        }
        static PyObject *t_PrefixCodedTerms$Builder_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PrefixCodedTerms$Builder::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PrefixCodedTerms$Builder_init_(t_PrefixCodedTerms$Builder *self, PyObject *args, PyObject *kwds)
        {
          PrefixCodedTerms$Builder object((jobject) NULL);

          INT_CALL(object = PrefixCodedTerms$Builder());
          self->object = object;

          return 0;
        }

        static PyObject *t_PrefixCodedTerms$Builder_add(t_PrefixCodedTerms$Builder *self, PyObject *arg)
        {
          ::org::apache::lucene::index::Term a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::Term::initializeClass, &a0))
          {
            OBJ_CALL(self->object.add(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "add", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/fa/PersianNormalizationFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fa {

          ::java::lang::Class *PersianNormalizationFilter::class$ = NULL;
          jmethodID *PersianNormalizationFilter::mids$ = NULL;
          bool PersianNormalizationFilter::live$ = false;

          jclass PersianNormalizationFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/fa/PersianNormalizationFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PersianNormalizationFilter::PersianNormalizationFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean PersianNormalizationFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fa {
          static PyObject *t_PersianNormalizationFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PersianNormalizationFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PersianNormalizationFilter_init_(t_PersianNormalizationFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PersianNormalizationFilter_incrementToken(t_PersianNormalizationFilter *self, PyObject *args);

          static PyMethodDef t_PersianNormalizationFilter__methods_[] = {
            DECLARE_METHOD(t_PersianNormalizationFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PersianNormalizationFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PersianNormalizationFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PersianNormalizationFilter, t_PersianNormalizationFilter, ::org::apache::lucene::analysis::TokenFilter, PersianNormalizationFilter, t_PersianNormalizationFilter_init_, 0, 0, 0, 0, 0);

          void t_PersianNormalizationFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(PersianNormalizationFilter), module, "PersianNormalizationFilter", 0);
          }

          void t_PersianNormalizationFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PersianNormalizationFilter).tp_dict, "class_", make_descriptor(PersianNormalizationFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PersianNormalizationFilter).tp_dict, "wrapfn_", make_descriptor(t_PersianNormalizationFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PersianNormalizationFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PersianNormalizationFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PersianNormalizationFilter::initializeClass, 1)))
              return NULL;
            return t_PersianNormalizationFilter::wrap_Object(PersianNormalizationFilter(((t_PersianNormalizationFilter *) arg)->object.this$));
          }
          static PyObject *t_PersianNormalizationFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PersianNormalizationFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PersianNormalizationFilter_init_(t_PersianNormalizationFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            PersianNormalizationFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = PersianNormalizationFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PersianNormalizationFilter_incrementToken(t_PersianNormalizationFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(PersianNormalizationFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/classic/QueryParser.h"
#include "org/apache/lucene/queryparser/classic/Token.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/classic/QueryParserTokenManager.h"
#include "org/apache/lucene/queryparser/classic/ParseException.h"
#include "org/apache/lucene/queryparser/classic/CharStream.h"
#include "org/apache/lucene/queryparser/classic/QueryParserConstants.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Query.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace classic {

          ::java::lang::Class *QueryParser::class$ = NULL;
          jmethodID *QueryParser::mids$ = NULL;
          jfieldID *QueryParser::fids$ = NULL;
          bool QueryParser::live$ = false;

          jclass QueryParser::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/classic/QueryParser");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_d77cc89a] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/analysis/Analyzer;)V");
              mids$[mid_init$_504c192d] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Ljava/lang/String;Lorg/apache/lucene/analysis/Analyzer;)V");
              mids$[mid_Clause_fbed2634] = env->getMethodID(cls, "Clause", "(Ljava/lang/String;)Lorg/apache/lucene/search/Query;");
              mids$[mid_Conjunction_54c6a179] = env->getMethodID(cls, "Conjunction", "()I");
              mids$[mid_Modifiers_54c6a179] = env->getMethodID(cls, "Modifiers", "()I");
              mids$[mid_Query_fbed2634] = env->getMethodID(cls, "Query", "(Ljava/lang/String;)Lorg/apache/lucene/search/Query;");
              mids$[mid_ReInit_52865dcf] = env->getMethodID(cls, "ReInit", "(Lorg/apache/lucene/queryparser/classic/QueryParserTokenManager;)V");
              mids$[mid_ReInit_24bde9d3] = env->getMethodID(cls, "ReInit", "(Lorg/apache/lucene/queryparser/classic/CharStream;)V");
              mids$[mid_Term_fbed2634] = env->getMethodID(cls, "Term", "(Ljava/lang/String;)Lorg/apache/lucene/search/Query;");
              mids$[mid_TopLevelQuery_fbed2634] = env->getMethodID(cls, "TopLevelQuery", "(Ljava/lang/String;)Lorg/apache/lucene/search/Query;");
              mids$[mid_disable_tracing_54c6a166] = env->getMethodID(cls, "disable_tracing", "()V");
              mids$[mid_enable_tracing_54c6a166] = env->getMethodID(cls, "enable_tracing", "()V");
              mids$[mid_generateParseException_3c5b7efe] = env->getMethodID(cls, "generateParseException", "()Lorg/apache/lucene/queryparser/classic/ParseException;");
              mids$[mid_getNextToken_1983cf96] = env->getMethodID(cls, "getNextToken", "()Lorg/apache/lucene/queryparser/classic/Token;");
              mids$[mid_getToken_61c98f04] = env->getMethodID(cls, "getToken", "(I)Lorg/apache/lucene/queryparser/classic/Token;");

              fids$ = new jfieldID[max_fid];
              fids$[fid_jj_nt] = env->getFieldID(cls, "jj_nt", "Lorg/apache/lucene/queryparser/classic/Token;");
              fids$[fid_token] = env->getFieldID(cls, "token", "Lorg/apache/lucene/queryparser/classic/Token;");
              fids$[fid_token_source] = env->getFieldID(cls, "token_source", "Lorg/apache/lucene/queryparser/classic/QueryParserTokenManager;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          QueryParser::QueryParser(const ::java::lang::String & a0, const ::org::apache::lucene::analysis::Analyzer & a1) : ::org::apache::lucene::queryparser::classic::QueryParserBase(env->newObject(initializeClass, &mids$, mid_init$_d77cc89a, a0.this$, a1.this$)) {}

          QueryParser::QueryParser(const ::org::apache::lucene::util::Version & a0, const ::java::lang::String & a1, const ::org::apache::lucene::analysis::Analyzer & a2) : ::org::apache::lucene::queryparser::classic::QueryParserBase(env->newObject(initializeClass, &mids$, mid_init$_504c192d, a0.this$, a1.this$, a2.this$)) {}

          ::org::apache::lucene::search::Query QueryParser::Clause(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_Clause_fbed2634], a0.this$));
          }

          jint QueryParser::Conjunction() const
          {
            return env->callIntMethod(this$, mids$[mid_Conjunction_54c6a179]);
          }

          jint QueryParser::Modifiers() const
          {
            return env->callIntMethod(this$, mids$[mid_Modifiers_54c6a179]);
          }

          ::org::apache::lucene::search::Query QueryParser::Query(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_Query_fbed2634], a0.this$));
          }

          void QueryParser::ReInit(const ::org::apache::lucene::queryparser::classic::QueryParserTokenManager & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_ReInit_52865dcf], a0.this$);
          }

          void QueryParser::ReInit(const ::org::apache::lucene::queryparser::classic::CharStream & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_ReInit_24bde9d3], a0.this$);
          }

          ::org::apache::lucene::search::Query QueryParser::Term(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_Term_fbed2634], a0.this$));
          }

          ::org::apache::lucene::search::Query QueryParser::TopLevelQuery(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_TopLevelQuery_fbed2634], a0.this$));
          }

          void QueryParser::disable_tracing() const
          {
            env->callVoidMethod(this$, mids$[mid_disable_tracing_54c6a166]);
          }

          void QueryParser::enable_tracing() const
          {
            env->callVoidMethod(this$, mids$[mid_enable_tracing_54c6a166]);
          }

          ::org::apache::lucene::queryparser::classic::ParseException QueryParser::generateParseException() const
          {
            return ::org::apache::lucene::queryparser::classic::ParseException(env->callObjectMethod(this$, mids$[mid_generateParseException_3c5b7efe]));
          }

          ::org::apache::lucene::queryparser::classic::Token QueryParser::getNextToken() const
          {
            return ::org::apache::lucene::queryparser::classic::Token(env->callObjectMethod(this$, mids$[mid_getNextToken_1983cf96]));
          }

          ::org::apache::lucene::queryparser::classic::Token QueryParser::getToken(jint a0) const
          {
            return ::org::apache::lucene::queryparser::classic::Token(env->callObjectMethod(this$, mids$[mid_getToken_61c98f04], a0));
          }

          ::org::apache::lucene::queryparser::classic::Token QueryParser::_get_jj_nt() const
          {
            return ::org::apache::lucene::queryparser::classic::Token(env->getObjectField(this$, fids$[fid_jj_nt]));
          }

          void QueryParser::_set_jj_nt(const ::org::apache::lucene::queryparser::classic::Token & a0) const
          {
            env->setObjectField(this$, fids$[fid_jj_nt], a0.this$);
          }

          ::org::apache::lucene::queryparser::classic::Token QueryParser::_get_token() const
          {
            return ::org::apache::lucene::queryparser::classic::Token(env->getObjectField(this$, fids$[fid_token]));
          }

          void QueryParser::_set_token(const ::org::apache::lucene::queryparser::classic::Token & a0) const
          {
            env->setObjectField(this$, fids$[fid_token], a0.this$);
          }

          ::org::apache::lucene::queryparser::classic::QueryParserTokenManager QueryParser::_get_token_source() const
          {
            return ::org::apache::lucene::queryparser::classic::QueryParserTokenManager(env->getObjectField(this$, fids$[fid_token_source]));
          }

          void QueryParser::_set_token_source(const ::org::apache::lucene::queryparser::classic::QueryParserTokenManager & a0) const
          {
            env->setObjectField(this$, fids$[fid_token_source], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/queryparser/classic/QueryParser$Operator.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace classic {
          static PyObject *t_QueryParser_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_QueryParser_instance_(PyTypeObject *type, PyObject *arg);
          static int t_QueryParser_init_(t_QueryParser *self, PyObject *args, PyObject *kwds);
          static PyObject *t_QueryParser_Clause(t_QueryParser *self, PyObject *arg);
          static PyObject *t_QueryParser_Conjunction(t_QueryParser *self);
          static PyObject *t_QueryParser_Modifiers(t_QueryParser *self);
          static PyObject *t_QueryParser_Query(t_QueryParser *self, PyObject *arg);
          static PyObject *t_QueryParser_ReInit(t_QueryParser *self, PyObject *args);
          static PyObject *t_QueryParser_Term(t_QueryParser *self, PyObject *arg);
          static PyObject *t_QueryParser_TopLevelQuery(t_QueryParser *self, PyObject *args);
          static PyObject *t_QueryParser_disable_tracing(t_QueryParser *self);
          static PyObject *t_QueryParser_enable_tracing(t_QueryParser *self);
          static PyObject *t_QueryParser_generateParseException(t_QueryParser *self);
          static PyObject *t_QueryParser_getNextToken(t_QueryParser *self);
          static PyObject *t_QueryParser_getToken(t_QueryParser *self, PyObject *arg);
          static PyObject *t_QueryParser_get__jj_nt(t_QueryParser *self, void *data);
          static int t_QueryParser_set__jj_nt(t_QueryParser *self, PyObject *arg, void *data);
          static PyObject *t_QueryParser_get__token(t_QueryParser *self, void *data);
          static int t_QueryParser_set__token(t_QueryParser *self, PyObject *arg, void *data);
          static PyObject *t_QueryParser_get__token_source(t_QueryParser *self, void *data);
          static int t_QueryParser_set__token_source(t_QueryParser *self, PyObject *arg, void *data);

          static PyObject *t_QueryParser_get__nextToken(t_QueryParser *self, void *data);
          static PyGetSetDef t_QueryParser__fields_[] = {
            DECLARE_GETSET_FIELD(t_QueryParser, jj_nt),
            DECLARE_GETSET_FIELD(t_QueryParser, token),
            DECLARE_GETSET_FIELD(t_QueryParser, token_source),
            DECLARE_GET_FIELD(t_QueryParser, nextToken),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_QueryParser__methods_[] = {
            DECLARE_METHOD(t_QueryParser, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_QueryParser, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_QueryParser, Clause, METH_O),
            DECLARE_METHOD(t_QueryParser, Conjunction, METH_NOARGS),
            DECLARE_METHOD(t_QueryParser, Modifiers, METH_NOARGS),
            DECLARE_METHOD(t_QueryParser, Query, METH_O),
            DECLARE_METHOD(t_QueryParser, ReInit, METH_VARARGS),
            DECLARE_METHOD(t_QueryParser, Term, METH_O),
            DECLARE_METHOD(t_QueryParser, TopLevelQuery, METH_VARARGS),
            DECLARE_METHOD(t_QueryParser, disable_tracing, METH_NOARGS),
            DECLARE_METHOD(t_QueryParser, enable_tracing, METH_NOARGS),
            DECLARE_METHOD(t_QueryParser, generateParseException, METH_NOARGS),
            DECLARE_METHOD(t_QueryParser, getNextToken, METH_NOARGS),
            DECLARE_METHOD(t_QueryParser, getToken, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(QueryParser, t_QueryParser, ::org::apache::lucene::queryparser::classic::QueryParserBase, QueryParser, t_QueryParser_init_, 0, 0, t_QueryParser__fields_, 0, 0);

          void t_QueryParser::install(PyObject *module)
          {
            installType(&PY_TYPE(QueryParser), module, "QueryParser", 0);
            PyDict_SetItemString(PY_TYPE(QueryParser).tp_dict, "Operator", make_descriptor(&PY_TYPE(QueryParser$Operator)));
          }

          void t_QueryParser::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(QueryParser).tp_dict, "class_", make_descriptor(QueryParser::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(QueryParser).tp_dict, "wrapfn_", make_descriptor(t_QueryParser::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(QueryParser).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_QueryParser_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, QueryParser::initializeClass, 1)))
              return NULL;
            return t_QueryParser::wrap_Object(QueryParser(((t_QueryParser *) arg)->object.this$));
          }
          static PyObject *t_QueryParser_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, QueryParser::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_QueryParser_init_(t_QueryParser *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::java::lang::String a0((jobject) NULL);
                ::org::apache::lucene::analysis::Analyzer a1((jobject) NULL);
                QueryParser object((jobject) NULL);

                if (!parseArgs(args, "sk", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = QueryParser(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                ::org::apache::lucene::analysis::Analyzer a2((jobject) NULL);
                QueryParser object((jobject) NULL);

                if (!parseArgs(args, "ksk", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = QueryParser(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_QueryParser_Clause(t_QueryParser *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.Clause(a0));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "Clause", arg);
            return NULL;
          }

          static PyObject *t_QueryParser_Conjunction(t_QueryParser *self)
          {
            jint result;
            OBJ_CALL(result = self->object.Conjunction());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_QueryParser_Modifiers(t_QueryParser *self)
          {
            jint result;
            OBJ_CALL(result = self->object.Modifiers());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_QueryParser_Query(t_QueryParser *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.Query(a0));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "Query", arg);
            return NULL;
          }

          static PyObject *t_QueryParser_ReInit(t_QueryParser *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::queryparser::classic::QueryParserTokenManager a0((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::classic::QueryParserTokenManager::initializeClass, &a0))
                {
                  OBJ_CALL(self->object.ReInit(a0));
                  Py_RETURN_NONE;
                }
              }
              {
                ::org::apache::lucene::queryparser::classic::CharStream a0((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::classic::CharStream::initializeClass, &a0))
                {
                  OBJ_CALL(self->object.ReInit(a0));
                  Py_RETURN_NONE;
                }
              }
            }

            return callSuper(&PY_TYPE(QueryParser), (PyObject *) self, "ReInit", args, 2);
          }

          static PyObject *t_QueryParser_Term(t_QueryParser *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.Term(a0));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "Term", arg);
            return NULL;
          }

          static PyObject *t_QueryParser_TopLevelQuery(t_QueryParser *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = self->object.TopLevelQuery(a0));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(QueryParser), (PyObject *) self, "TopLevelQuery", args, 2);
          }

          static PyObject *t_QueryParser_disable_tracing(t_QueryParser *self)
          {
            OBJ_CALL(self->object.disable_tracing());
            Py_RETURN_NONE;
          }

          static PyObject *t_QueryParser_enable_tracing(t_QueryParser *self)
          {
            OBJ_CALL(self->object.enable_tracing());
            Py_RETURN_NONE;
          }

          static PyObject *t_QueryParser_generateParseException(t_QueryParser *self)
          {
            ::org::apache::lucene::queryparser::classic::ParseException result((jobject) NULL);
            OBJ_CALL(result = self->object.generateParseException());
            return ::org::apache::lucene::queryparser::classic::t_ParseException::wrap_Object(result);
          }

          static PyObject *t_QueryParser_getNextToken(t_QueryParser *self)
          {
            ::org::apache::lucene::queryparser::classic::Token result((jobject) NULL);
            OBJ_CALL(result = self->object.getNextToken());
            return ::org::apache::lucene::queryparser::classic::t_Token::wrap_Object(result);
          }

          static PyObject *t_QueryParser_getToken(t_QueryParser *self, PyObject *arg)
          {
            jint a0;
            ::org::apache::lucene::queryparser::classic::Token result((jobject) NULL);

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.getToken(a0));
              return ::org::apache::lucene::queryparser::classic::t_Token::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getToken", arg);
            return NULL;
          }

          static PyObject *t_QueryParser_get__jj_nt(t_QueryParser *self, void *data)
          {
            ::org::apache::lucene::queryparser::classic::Token value((jobject) NULL);
            OBJ_CALL(value = self->object._get_jj_nt());
            return ::org::apache::lucene::queryparser::classic::t_Token::wrap_Object(value);
          }
          static int t_QueryParser_set__jj_nt(t_QueryParser *self, PyObject *arg, void *data)
          {
            ::org::apache::lucene::queryparser::classic::Token value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::classic::Token::initializeClass, &value))
            {
              INT_CALL(self->object._set_jj_nt(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "jj_nt", arg);
            return -1;
          }

          static PyObject *t_QueryParser_get__token(t_QueryParser *self, void *data)
          {
            ::org::apache::lucene::queryparser::classic::Token value((jobject) NULL);
            OBJ_CALL(value = self->object._get_token());
            return ::org::apache::lucene::queryparser::classic::t_Token::wrap_Object(value);
          }
          static int t_QueryParser_set__token(t_QueryParser *self, PyObject *arg, void *data)
          {
            ::org::apache::lucene::queryparser::classic::Token value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::classic::Token::initializeClass, &value))
            {
              INT_CALL(self->object._set_token(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "token", arg);
            return -1;
          }

          static PyObject *t_QueryParser_get__token_source(t_QueryParser *self, void *data)
          {
            ::org::apache::lucene::queryparser::classic::QueryParserTokenManager value((jobject) NULL);
            OBJ_CALL(value = self->object._get_token_source());
            return ::org::apache::lucene::queryparser::classic::t_QueryParserTokenManager::wrap_Object(value);
          }
          static int t_QueryParser_set__token_source(t_QueryParser *self, PyObject *arg, void *data)
          {
            ::org::apache::lucene::queryparser::classic::QueryParserTokenManager value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::classic::QueryParserTokenManager::initializeClass, &value))
            {
              INT_CALL(self->object._set_token_source(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "token_source", arg);
            return -1;
          }

          static PyObject *t_QueryParser_get__nextToken(t_QueryParser *self, void *data)
          {
            ::org::apache::lucene::queryparser::classic::Token value((jobject) NULL);
            OBJ_CALL(value = self->object.getNextToken());
            return ::org::apache::lucene::queryparser::classic::t_Token::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/AttributeSource$State.h"
#include "java/lang/Cloneable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *AttributeSource$State::class$ = NULL;
        jmethodID *AttributeSource$State::mids$ = NULL;
        bool AttributeSource$State::live$ = false;

        jclass AttributeSource$State::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/AttributeSource$State");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_clone_0f9ed4d4] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/util/AttributeSource$State;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        AttributeSource$State::AttributeSource$State() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        AttributeSource$State AttributeSource$State::clone() const
        {
          return AttributeSource$State(env->callObjectMethod(this$, mids$[mid_clone_0f9ed4d4]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_AttributeSource$State_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_AttributeSource$State_instance_(PyTypeObject *type, PyObject *arg);
        static int t_AttributeSource$State_init_(t_AttributeSource$State *self, PyObject *args, PyObject *kwds);
        static PyObject *t_AttributeSource$State_clone(t_AttributeSource$State *self);

        static PyMethodDef t_AttributeSource$State__methods_[] = {
          DECLARE_METHOD(t_AttributeSource$State, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_AttributeSource$State, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_AttributeSource$State, clone, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(AttributeSource$State, t_AttributeSource$State, ::java::lang::Object, AttributeSource$State, t_AttributeSource$State_init_, 0, 0, 0, 0, 0);

        void t_AttributeSource$State::install(PyObject *module)
        {
          installType(&PY_TYPE(AttributeSource$State), module, "AttributeSource$State", 0);
        }

        void t_AttributeSource$State::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(AttributeSource$State).tp_dict, "class_", make_descriptor(AttributeSource$State::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(AttributeSource$State).tp_dict, "wrapfn_", make_descriptor(t_AttributeSource$State::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(AttributeSource$State).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_AttributeSource$State_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, AttributeSource$State::initializeClass, 1)))
            return NULL;
          return t_AttributeSource$State::wrap_Object(AttributeSource$State(((t_AttributeSource$State *) arg)->object.this$));
        }
        static PyObject *t_AttributeSource$State_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, AttributeSource$State::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_AttributeSource$State_init_(t_AttributeSource$State *self, PyObject *args, PyObject *kwds)
        {
          AttributeSource$State object((jobject) NULL);

          INT_CALL(object = AttributeSource$State());
          self->object = object;

          return 0;
        }

        static PyObject *t_AttributeSource$State_clone(t_AttributeSource$State *self)
        {
          AttributeSource$State result((jobject) NULL);
          OBJ_CALL(result = self->object.clone());
          return t_AttributeSource$State::wrap_Object(result);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/FixedBitSet.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/DocIdSetIterator.h"
#include "org/apache/lucene/util/Bits.h"
#include "java/lang/Object.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *FixedBitSet::class$ = NULL;
        jmethodID *FixedBitSet::mids$ = NULL;
        bool FixedBitSet::live$ = false;

        jclass FixedBitSet::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/FixedBitSet");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
            mids$[mid_init$_ce93dbcb] = env->getMethodID(cls, "<init>", "([JI)V");
            mids$[mid_and_ef674644] = env->getMethodID(cls, "and", "(Lorg/apache/lucene/util/FixedBitSet;)V");
            mids$[mid_and_c2b5607d] = env->getMethodID(cls, "and", "(Lorg/apache/lucene/search/DocIdSetIterator;)V");
            mids$[mid_andNot_ef674644] = env->getMethodID(cls, "andNot", "(Lorg/apache/lucene/util/FixedBitSet;)V");
            mids$[mid_andNot_c2b5607d] = env->getMethodID(cls, "andNot", "(Lorg/apache/lucene/search/DocIdSetIterator;)V");
            mids$[mid_andNotCount_a42679f6] = env->getStaticMethodID(cls, "andNotCount", "(Lorg/apache/lucene/util/FixedBitSet;Lorg/apache/lucene/util/FixedBitSet;)J");
            mids$[mid_bits_03c2457d] = env->getMethodID(cls, "bits", "()Lorg/apache/lucene/util/Bits;");
            mids$[mid_bits2words_39c7bd23] = env->getStaticMethodID(cls, "bits2words", "(I)I");
            mids$[mid_cardinality_54c6a179] = env->getMethodID(cls, "cardinality", "()I");
            mids$[mid_clear_39c7bd3c] = env->getMethodID(cls, "clear", "(I)V");
            mids$[mid_clear_d8d154a6] = env->getMethodID(cls, "clear", "(II)V");
            mids$[mid_clone_28209941] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/util/FixedBitSet;");
            mids$[mid_ensureCapacity_7d813305] = env->getStaticMethodID(cls, "ensureCapacity", "(Lorg/apache/lucene/util/FixedBitSet;I)Lorg/apache/lucene/util/FixedBitSet;");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_flip_d8d154a6] = env->getMethodID(cls, "flip", "(II)V");
            mids$[mid_get_39c7bd30] = env->getMethodID(cls, "get", "(I)Z");
            mids$[mid_getAndClear_39c7bd30] = env->getMethodID(cls, "getAndClear", "(I)Z");
            mids$[mid_getAndSet_39c7bd30] = env->getMethodID(cls, "getAndSet", "(I)Z");
            mids$[mid_getBits_dab10e76] = env->getMethodID(cls, "getBits", "()[J");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_intersectionCount_a42679f6] = env->getStaticMethodID(cls, "intersectionCount", "(Lorg/apache/lucene/util/FixedBitSet;Lorg/apache/lucene/util/FixedBitSet;)J");
            mids$[mid_intersects_ef674648] = env->getMethodID(cls, "intersects", "(Lorg/apache/lucene/util/FixedBitSet;)Z");
            mids$[mid_isCacheable_54c6a16a] = env->getMethodID(cls, "isCacheable", "()Z");
            mids$[mid_iterator_dc23660c] = env->getMethodID(cls, "iterator", "()Lorg/apache/lucene/search/DocIdSetIterator;");
            mids$[mid_length_54c6a179] = env->getMethodID(cls, "length", "()I");
            mids$[mid_nextSetBit_39c7bd23] = env->getMethodID(cls, "nextSetBit", "(I)I");
            mids$[mid_or_ef674644] = env->getMethodID(cls, "or", "(Lorg/apache/lucene/util/FixedBitSet;)V");
            mids$[mid_or_c2b5607d] = env->getMethodID(cls, "or", "(Lorg/apache/lucene/search/DocIdSetIterator;)V");
            mids$[mid_prevSetBit_39c7bd23] = env->getMethodID(cls, "prevSetBit", "(I)I");
            mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");
            mids$[mid_set_39c7bd3c] = env->getMethodID(cls, "set", "(I)V");
            mids$[mid_set_d8d154a6] = env->getMethodID(cls, "set", "(II)V");
            mids$[mid_unionCount_a42679f6] = env->getStaticMethodID(cls, "unionCount", "(Lorg/apache/lucene/util/FixedBitSet;Lorg/apache/lucene/util/FixedBitSet;)J");
            mids$[mid_xor_ef674644] = env->getMethodID(cls, "xor", "(Lorg/apache/lucene/util/FixedBitSet;)V");
            mids$[mid_xor_c2b5607d] = env->getMethodID(cls, "xor", "(Lorg/apache/lucene/search/DocIdSetIterator;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FixedBitSet::FixedBitSet(jint a0) : ::org::apache::lucene::search::DocIdSet(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

        FixedBitSet::FixedBitSet(const JArray< jlong > & a0, jint a1) : ::org::apache::lucene::search::DocIdSet(env->newObject(initializeClass, &mids$, mid_init$_ce93dbcb, a0.this$, a1)) {}

        void FixedBitSet::and$(const FixedBitSet & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_and_ef674644], a0.this$);
        }

        void FixedBitSet::and$(const ::org::apache::lucene::search::DocIdSetIterator & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_and_c2b5607d], a0.this$);
        }

        void FixedBitSet::andNot(const FixedBitSet & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_andNot_ef674644], a0.this$);
        }

        void FixedBitSet::andNot(const ::org::apache::lucene::search::DocIdSetIterator & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_andNot_c2b5607d], a0.this$);
        }

        jlong FixedBitSet::andNotCount(const FixedBitSet & a0, const FixedBitSet & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_andNotCount_a42679f6], a0.this$, a1.this$);
        }

        ::org::apache::lucene::util::Bits FixedBitSet::bits() const
        {
          return ::org::apache::lucene::util::Bits(env->callObjectMethod(this$, mids$[mid_bits_03c2457d]));
        }

        jint FixedBitSet::bits2words(jint a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_bits2words_39c7bd23], a0);
        }

        jint FixedBitSet::cardinality() const
        {
          return env->callIntMethod(this$, mids$[mid_cardinality_54c6a179]);
        }

        void FixedBitSet::clear(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_clear_39c7bd3c], a0);
        }

        void FixedBitSet::clear(jint a0, jint a1) const
        {
          env->callVoidMethod(this$, mids$[mid_clear_d8d154a6], a0, a1);
        }

        FixedBitSet FixedBitSet::clone() const
        {
          return FixedBitSet(env->callObjectMethod(this$, mids$[mid_clone_28209941]));
        }

        FixedBitSet FixedBitSet::ensureCapacity(const FixedBitSet & a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return FixedBitSet(env->callStaticObjectMethod(cls, mids$[mid_ensureCapacity_7d813305], a0.this$, a1));
        }

        jboolean FixedBitSet::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        void FixedBitSet::flip(jint a0, jint a1) const
        {
          env->callVoidMethod(this$, mids$[mid_flip_d8d154a6], a0, a1);
        }

        jboolean FixedBitSet::get(jint a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_get_39c7bd30], a0);
        }

        jboolean FixedBitSet::getAndClear(jint a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_getAndClear_39c7bd30], a0);
        }

        jboolean FixedBitSet::getAndSet(jint a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_getAndSet_39c7bd30], a0);
        }

        JArray< jlong > FixedBitSet::getBits() const
        {
          return JArray< jlong >(env->callObjectMethod(this$, mids$[mid_getBits_dab10e76]));
        }

        jint FixedBitSet::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jlong FixedBitSet::intersectionCount(const FixedBitSet & a0, const FixedBitSet & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_intersectionCount_a42679f6], a0.this$, a1.this$);
        }

        jboolean FixedBitSet::intersects(const FixedBitSet & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_intersects_ef674648], a0.this$);
        }

        jboolean FixedBitSet::isCacheable() const
        {
          return env->callBooleanMethod(this$, mids$[mid_isCacheable_54c6a16a]);
        }

        ::org::apache::lucene::search::DocIdSetIterator FixedBitSet::iterator() const
        {
          return ::org::apache::lucene::search::DocIdSetIterator(env->callObjectMethod(this$, mids$[mid_iterator_dc23660c]));
        }

        jint FixedBitSet::length() const
        {
          return env->callIntMethod(this$, mids$[mid_length_54c6a179]);
        }

        jint FixedBitSet::nextSetBit(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_nextSetBit_39c7bd23], a0);
        }

        void FixedBitSet::or$(const FixedBitSet & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_or_ef674644], a0.this$);
        }

        void FixedBitSet::or$(const ::org::apache::lucene::search::DocIdSetIterator & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_or_c2b5607d], a0.this$);
        }

        jint FixedBitSet::prevSetBit(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_prevSetBit_39c7bd23], a0);
        }

        jlong FixedBitSet::ramBytesUsed() const
        {
          return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
        }

        void FixedBitSet::set(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_set_39c7bd3c], a0);
        }

        void FixedBitSet::set(jint a0, jint a1) const
        {
          env->callVoidMethod(this$, mids$[mid_set_d8d154a6], a0, a1);
        }

        jlong FixedBitSet::unionCount(const FixedBitSet & a0, const FixedBitSet & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_unionCount_a42679f6], a0.this$, a1.this$);
        }

        void FixedBitSet::xor$(const FixedBitSet & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_xor_ef674644], a0.this$);
        }

        void FixedBitSet::xor$(const ::org::apache::lucene::search::DocIdSetIterator & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_xor_c2b5607d], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/util/FixedBitSet$FixedBitSetIterator.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_FixedBitSet_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FixedBitSet_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FixedBitSet_init_(t_FixedBitSet *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FixedBitSet_and(t_FixedBitSet *self, PyObject *args);
        static PyObject *t_FixedBitSet_andNot(t_FixedBitSet *self, PyObject *args);
        static PyObject *t_FixedBitSet_andNotCount(PyTypeObject *type, PyObject *args);
        static PyObject *t_FixedBitSet_bits(t_FixedBitSet *self, PyObject *args);
        static PyObject *t_FixedBitSet_bits2words(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FixedBitSet_cardinality(t_FixedBitSet *self);
        static PyObject *t_FixedBitSet_clear(t_FixedBitSet *self, PyObject *args);
        static PyObject *t_FixedBitSet_clone(t_FixedBitSet *self);
        static PyObject *t_FixedBitSet_ensureCapacity(PyTypeObject *type, PyObject *args);
        static PyObject *t_FixedBitSet_equals(t_FixedBitSet *self, PyObject *args);
        static PyObject *t_FixedBitSet_flip(t_FixedBitSet *self, PyObject *args);
        static PyObject *t_FixedBitSet_get(t_FixedBitSet *self, PyObject *arg);
        static PyObject *t_FixedBitSet_getAndClear(t_FixedBitSet *self, PyObject *arg);
        static PyObject *t_FixedBitSet_getAndSet(t_FixedBitSet *self, PyObject *arg);
        static PyObject *t_FixedBitSet_getBits(t_FixedBitSet *self);
        static PyObject *t_FixedBitSet_hashCode(t_FixedBitSet *self, PyObject *args);
        static PyObject *t_FixedBitSet_intersectionCount(PyTypeObject *type, PyObject *args);
        static PyObject *t_FixedBitSet_intersects(t_FixedBitSet *self, PyObject *arg);
        static PyObject *t_FixedBitSet_isCacheable(t_FixedBitSet *self, PyObject *args);
        static PyObject *t_FixedBitSet_iterator(t_FixedBitSet *self, PyObject *args);
        static PyObject *t_FixedBitSet_length(t_FixedBitSet *self);
        static PyObject *t_FixedBitSet_nextSetBit(t_FixedBitSet *self, PyObject *arg);
        static PyObject *t_FixedBitSet_or(t_FixedBitSet *self, PyObject *args);
        static PyObject *t_FixedBitSet_prevSetBit(t_FixedBitSet *self, PyObject *arg);
        static PyObject *t_FixedBitSet_ramBytesUsed(t_FixedBitSet *self, PyObject *args);
        static PyObject *t_FixedBitSet_set(t_FixedBitSet *self, PyObject *args);
        static PyObject *t_FixedBitSet_unionCount(PyTypeObject *type, PyObject *args);
        static PyObject *t_FixedBitSet_xor(t_FixedBitSet *self, PyObject *args);
        static PyObject *t_FixedBitSet_get__cacheable(t_FixedBitSet *self, void *data);
        static PyGetSetDef t_FixedBitSet__fields_[] = {
          DECLARE_GET_FIELD(t_FixedBitSet, cacheable),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FixedBitSet__methods_[] = {
          DECLARE_METHOD(t_FixedBitSet, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FixedBitSet, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FixedBitSet, and, METH_VARARGS),
          DECLARE_METHOD(t_FixedBitSet, andNot, METH_VARARGS),
          DECLARE_METHOD(t_FixedBitSet, andNotCount, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_FixedBitSet, bits, METH_VARARGS),
          DECLARE_METHOD(t_FixedBitSet, bits2words, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FixedBitSet, cardinality, METH_NOARGS),
          DECLARE_METHOD(t_FixedBitSet, clear, METH_VARARGS),
          DECLARE_METHOD(t_FixedBitSet, clone, METH_NOARGS),
          DECLARE_METHOD(t_FixedBitSet, ensureCapacity, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_FixedBitSet, equals, METH_VARARGS),
          DECLARE_METHOD(t_FixedBitSet, flip, METH_VARARGS),
          DECLARE_METHOD(t_FixedBitSet, get, METH_O),
          DECLARE_METHOD(t_FixedBitSet, getAndClear, METH_O),
          DECLARE_METHOD(t_FixedBitSet, getAndSet, METH_O),
          DECLARE_METHOD(t_FixedBitSet, getBits, METH_NOARGS),
          DECLARE_METHOD(t_FixedBitSet, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_FixedBitSet, intersectionCount, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_FixedBitSet, intersects, METH_O),
          DECLARE_METHOD(t_FixedBitSet, isCacheable, METH_VARARGS),
          DECLARE_METHOD(t_FixedBitSet, iterator, METH_VARARGS),
          DECLARE_METHOD(t_FixedBitSet, length, METH_NOARGS),
          DECLARE_METHOD(t_FixedBitSet, nextSetBit, METH_O),
          DECLARE_METHOD(t_FixedBitSet, or, METH_VARARGS),
          DECLARE_METHOD(t_FixedBitSet, prevSetBit, METH_O),
          DECLARE_METHOD(t_FixedBitSet, ramBytesUsed, METH_VARARGS),
          DECLARE_METHOD(t_FixedBitSet, set, METH_VARARGS),
          DECLARE_METHOD(t_FixedBitSet, unionCount, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_FixedBitSet, xor, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FixedBitSet, t_FixedBitSet, ::org::apache::lucene::search::DocIdSet, FixedBitSet, t_FixedBitSet_init_, 0, 0, t_FixedBitSet__fields_, 0, 0);

        void t_FixedBitSet::install(PyObject *module)
        {
          installType(&PY_TYPE(FixedBitSet), module, "FixedBitSet", 0);
          PyDict_SetItemString(PY_TYPE(FixedBitSet).tp_dict, "FixedBitSetIterator", make_descriptor(&PY_TYPE(FixedBitSet$FixedBitSetIterator)));
        }

        void t_FixedBitSet::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FixedBitSet).tp_dict, "class_", make_descriptor(FixedBitSet::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FixedBitSet).tp_dict, "wrapfn_", make_descriptor(t_FixedBitSet::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FixedBitSet).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FixedBitSet_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FixedBitSet::initializeClass, 1)))
            return NULL;
          return t_FixedBitSet::wrap_Object(FixedBitSet(((t_FixedBitSet *) arg)->object.this$));
        }
        static PyObject *t_FixedBitSet_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FixedBitSet::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FixedBitSet_init_(t_FixedBitSet *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jint a0;
              FixedBitSet object((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                INT_CALL(object = FixedBitSet(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              JArray< jlong > a0((jobject) NULL);
              jint a1;
              FixedBitSet object((jobject) NULL);

              if (!parseArgs(args, "[JI", &a0, &a1))
              {
                INT_CALL(object = FixedBitSet(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FixedBitSet_and(t_FixedBitSet *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              FixedBitSet a0((jobject) NULL);

              if (!parseArgs(args, "k", FixedBitSet::initializeClass, &a0))
              {
                OBJ_CALL(self->object.and$(a0));
                Py_RETURN_NONE;
              }
            }
            {
              ::org::apache::lucene::search::DocIdSetIterator a0((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::search::DocIdSetIterator::initializeClass, &a0))
              {
                OBJ_CALL(self->object.and$(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "and", args);
          return NULL;
        }

        static PyObject *t_FixedBitSet_andNot(t_FixedBitSet *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              FixedBitSet a0((jobject) NULL);

              if (!parseArgs(args, "k", FixedBitSet::initializeClass, &a0))
              {
                OBJ_CALL(self->object.andNot(a0));
                Py_RETURN_NONE;
              }
            }
            {
              ::org::apache::lucene::search::DocIdSetIterator a0((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::search::DocIdSetIterator::initializeClass, &a0))
              {
                OBJ_CALL(self->object.andNot(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "andNot", args);
          return NULL;
        }

        static PyObject *t_FixedBitSet_andNotCount(PyTypeObject *type, PyObject *args)
        {
          FixedBitSet a0((jobject) NULL);
          FixedBitSet a1((jobject) NULL);
          jlong result;

          if (!parseArgs(args, "kk", FixedBitSet::initializeClass, FixedBitSet::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::FixedBitSet::andNotCount(a0, a1));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError(type, "andNotCount", args);
          return NULL;
        }

        static PyObject *t_FixedBitSet_bits(t_FixedBitSet *self, PyObject *args)
        {
          ::org::apache::lucene::util::Bits result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.bits());
            return ::org::apache::lucene::util::t_Bits::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FixedBitSet), (PyObject *) self, "bits", args, 2);
        }

        static PyObject *t_FixedBitSet_bits2words(PyTypeObject *type, PyObject *arg)
        {
          jint a0;
          jint result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::FixedBitSet::bits2words(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError(type, "bits2words", arg);
          return NULL;
        }

        static PyObject *t_FixedBitSet_cardinality(t_FixedBitSet *self)
        {
          jint result;
          OBJ_CALL(result = self->object.cardinality());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_FixedBitSet_clear(t_FixedBitSet *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jint a0;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(self->object.clear(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 2:
            {
              jint a0;
              jint a1;

              if (!parseArgs(args, "II", &a0, &a1))
              {
                OBJ_CALL(self->object.clear(a0, a1));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "clear", args);
          return NULL;
        }

        static PyObject *t_FixedBitSet_clone(t_FixedBitSet *self)
        {
          FixedBitSet result((jobject) NULL);
          OBJ_CALL(result = self->object.clone());
          return t_FixedBitSet::wrap_Object(result);
        }

        static PyObject *t_FixedBitSet_ensureCapacity(PyTypeObject *type, PyObject *args)
        {
          FixedBitSet a0((jobject) NULL);
          jint a1;
          FixedBitSet result((jobject) NULL);

          if (!parseArgs(args, "kI", FixedBitSet::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::FixedBitSet::ensureCapacity(a0, a1));
            return t_FixedBitSet::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "ensureCapacity", args);
          return NULL;
        }

        static PyObject *t_FixedBitSet_equals(t_FixedBitSet *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(FixedBitSet), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_FixedBitSet_flip(t_FixedBitSet *self, PyObject *args)
        {
          jint a0;
          jint a1;

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(self->object.flip(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "flip", args);
          return NULL;
        }

        static PyObject *t_FixedBitSet_get(t_FixedBitSet *self, PyObject *arg)
        {
          jint a0;
          jboolean result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.get(a0));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError((PyObject *) self, "get", arg);
          return NULL;
        }

        static PyObject *t_FixedBitSet_getAndClear(t_FixedBitSet *self, PyObject *arg)
        {
          jint a0;
          jboolean result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.getAndClear(a0));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getAndClear", arg);
          return NULL;
        }

        static PyObject *t_FixedBitSet_getAndSet(t_FixedBitSet *self, PyObject *arg)
        {
          jint a0;
          jboolean result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.getAndSet(a0));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getAndSet", arg);
          return NULL;
        }

        static PyObject *t_FixedBitSet_getBits(t_FixedBitSet *self)
        {
          JArray< jlong > result((jobject) NULL);
          OBJ_CALL(result = self->object.getBits());
          return result.wrap();
        }

        static PyObject *t_FixedBitSet_hashCode(t_FixedBitSet *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FixedBitSet), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_FixedBitSet_intersectionCount(PyTypeObject *type, PyObject *args)
        {
          FixedBitSet a0((jobject) NULL);
          FixedBitSet a1((jobject) NULL);
          jlong result;

          if (!parseArgs(args, "kk", FixedBitSet::initializeClass, FixedBitSet::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::FixedBitSet::intersectionCount(a0, a1));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError(type, "intersectionCount", args);
          return NULL;
        }

        static PyObject *t_FixedBitSet_intersects(t_FixedBitSet *self, PyObject *arg)
        {
          FixedBitSet a0((jobject) NULL);
          jboolean result;

          if (!parseArg(arg, "k", FixedBitSet::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.intersects(a0));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError((PyObject *) self, "intersects", arg);
          return NULL;
        }

        static PyObject *t_FixedBitSet_isCacheable(t_FixedBitSet *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.isCacheable());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(FixedBitSet), (PyObject *) self, "isCacheable", args, 2);
        }

        static PyObject *t_FixedBitSet_iterator(t_FixedBitSet *self, PyObject *args)
        {
          ::org::apache::lucene::search::DocIdSetIterator result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.iterator());
            return ::org::apache::lucene::search::t_DocIdSetIterator::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FixedBitSet), (PyObject *) self, "iterator", args, 2);
        }

        static PyObject *t_FixedBitSet_length(t_FixedBitSet *self)
        {
          jint result;
          OBJ_CALL(result = self->object.length());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_FixedBitSet_nextSetBit(t_FixedBitSet *self, PyObject *arg)
        {
          jint a0;
          jint result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.nextSetBit(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "nextSetBit", arg);
          return NULL;
        }

        static PyObject *t_FixedBitSet_or(t_FixedBitSet *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              FixedBitSet a0((jobject) NULL);

              if (!parseArgs(args, "k", FixedBitSet::initializeClass, &a0))
              {
                OBJ_CALL(self->object.or$(a0));
                Py_RETURN_NONE;
              }
            }
            {
              ::org::apache::lucene::search::DocIdSetIterator a0((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::search::DocIdSetIterator::initializeClass, &a0))
              {
                OBJ_CALL(self->object.or$(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "or", args);
          return NULL;
        }

        static PyObject *t_FixedBitSet_prevSetBit(t_FixedBitSet *self, PyObject *arg)
        {
          jint a0;
          jint result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.prevSetBit(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "prevSetBit", arg);
          return NULL;
        }

        static PyObject *t_FixedBitSet_ramBytesUsed(t_FixedBitSet *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.ramBytesUsed());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(FixedBitSet), (PyObject *) self, "ramBytesUsed", args, 2);
        }

        static PyObject *t_FixedBitSet_set(t_FixedBitSet *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jint a0;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(self->object.set(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 2:
            {
              jint a0;
              jint a1;

              if (!parseArgs(args, "II", &a0, &a1))
              {
                OBJ_CALL(self->object.set(a0, a1));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "set", args);
          return NULL;
        }

        static PyObject *t_FixedBitSet_unionCount(PyTypeObject *type, PyObject *args)
        {
          FixedBitSet a0((jobject) NULL);
          FixedBitSet a1((jobject) NULL);
          jlong result;

          if (!parseArgs(args, "kk", FixedBitSet::initializeClass, FixedBitSet::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::FixedBitSet::unionCount(a0, a1));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError(type, "unionCount", args);
          return NULL;
        }

        static PyObject *t_FixedBitSet_xor(t_FixedBitSet *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              FixedBitSet a0((jobject) NULL);

              if (!parseArgs(args, "k", FixedBitSet::initializeClass, &a0))
              {
                OBJ_CALL(self->object.xor$(a0));
                Py_RETURN_NONE;
              }
            }
            {
              ::org::apache::lucene::search::DocIdSetIterator a0((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::search::DocIdSetIterator::initializeClass, &a0))
              {
                OBJ_CALL(self->object.xor$(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "xor", args);
          return NULL;
        }

        static PyObject *t_FixedBitSet_get__cacheable(t_FixedBitSet *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.isCacheable());
          Py_RETURN_BOOL(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene42/Lucene42NormsFormat.h"
#include "org/apache/lucene/codecs/DocValuesProducer.h"
#include "org/apache/lucene/index/SegmentWriteState.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/codecs/DocValuesConsumer.h"
#include "org/apache/lucene/index/SegmentReadState.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene42 {

          ::java::lang::Class *Lucene42NormsFormat::class$ = NULL;
          jmethodID *Lucene42NormsFormat::mids$ = NULL;
          bool Lucene42NormsFormat::live$ = false;

          jclass Lucene42NormsFormat::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene42/Lucene42NormsFormat");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_06298cab] = env->getMethodID(cls, "<init>", "(F)V");
              mids$[mid_normsConsumer_025deb44] = env->getMethodID(cls, "normsConsumer", "(Lorg/apache/lucene/index/SegmentWriteState;)Lorg/apache/lucene/codecs/DocValuesConsumer;");
              mids$[mid_normsProducer_9b0d4e4a] = env->getMethodID(cls, "normsProducer", "(Lorg/apache/lucene/index/SegmentReadState;)Lorg/apache/lucene/codecs/DocValuesProducer;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene42NormsFormat::Lucene42NormsFormat() : ::org::apache::lucene::codecs::NormsFormat(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          Lucene42NormsFormat::Lucene42NormsFormat(jfloat a0) : ::org::apache::lucene::codecs::NormsFormat(env->newObject(initializeClass, &mids$, mid_init$_06298cab, a0)) {}

          ::org::apache::lucene::codecs::DocValuesConsumer Lucene42NormsFormat::normsConsumer(const ::org::apache::lucene::index::SegmentWriteState & a0) const
          {
            return ::org::apache::lucene::codecs::DocValuesConsumer(env->callObjectMethod(this$, mids$[mid_normsConsumer_025deb44], a0.this$));
          }

          ::org::apache::lucene::codecs::DocValuesProducer Lucene42NormsFormat::normsProducer(const ::org::apache::lucene::index::SegmentReadState & a0) const
          {
            return ::org::apache::lucene::codecs::DocValuesProducer(env->callObjectMethod(this$, mids$[mid_normsProducer_9b0d4e4a], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene42 {
          static PyObject *t_Lucene42NormsFormat_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene42NormsFormat_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene42NormsFormat_init_(t_Lucene42NormsFormat *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene42NormsFormat_normsConsumer(t_Lucene42NormsFormat *self, PyObject *args);
          static PyObject *t_Lucene42NormsFormat_normsProducer(t_Lucene42NormsFormat *self, PyObject *args);

          static PyMethodDef t_Lucene42NormsFormat__methods_[] = {
            DECLARE_METHOD(t_Lucene42NormsFormat, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene42NormsFormat, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene42NormsFormat, normsConsumer, METH_VARARGS),
            DECLARE_METHOD(t_Lucene42NormsFormat, normsProducer, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene42NormsFormat, t_Lucene42NormsFormat, ::org::apache::lucene::codecs::NormsFormat, Lucene42NormsFormat, t_Lucene42NormsFormat_init_, 0, 0, 0, 0, 0);

          void t_Lucene42NormsFormat::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene42NormsFormat), module, "Lucene42NormsFormat", 0);
          }

          void t_Lucene42NormsFormat::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene42NormsFormat).tp_dict, "class_", make_descriptor(Lucene42NormsFormat::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene42NormsFormat).tp_dict, "wrapfn_", make_descriptor(t_Lucene42NormsFormat::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene42NormsFormat).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lucene42NormsFormat_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene42NormsFormat::initializeClass, 1)))
              return NULL;
            return t_Lucene42NormsFormat::wrap_Object(Lucene42NormsFormat(((t_Lucene42NormsFormat *) arg)->object.this$));
          }
          static PyObject *t_Lucene42NormsFormat_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene42NormsFormat::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene42NormsFormat_init_(t_Lucene42NormsFormat *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                Lucene42NormsFormat object((jobject) NULL);

                INT_CALL(object = Lucene42NormsFormat());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                jfloat a0;
                Lucene42NormsFormat object((jobject) NULL);

                if (!parseArgs(args, "F", &a0))
                {
                  INT_CALL(object = Lucene42NormsFormat(a0));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_Lucene42NormsFormat_normsConsumer(t_Lucene42NormsFormat *self, PyObject *args)
          {
            ::org::apache::lucene::index::SegmentWriteState a0((jobject) NULL);
            ::org::apache::lucene::codecs::DocValuesConsumer result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::SegmentWriteState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.normsConsumer(a0));
              return ::org::apache::lucene::codecs::t_DocValuesConsumer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene42NormsFormat), (PyObject *) self, "normsConsumer", args, 2);
          }

          static PyObject *t_Lucene42NormsFormat_normsProducer(t_Lucene42NormsFormat *self, PyObject *args)
          {
            ::org::apache::lucene::index::SegmentReadState a0((jobject) NULL);
            ::org::apache::lucene::codecs::DocValuesProducer result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::SegmentReadState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.normsProducer(a0));
              return ::org::apache::lucene::codecs::t_DocValuesProducer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene42NormsFormat), (PyObject *) self, "normsProducer", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/MultiTermQueryWrapperFilter.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/Bits.h"
#include "org/apache/lucene/search/DocIdSet.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *MultiTermQueryWrapperFilter::class$ = NULL;
        jmethodID *MultiTermQueryWrapperFilter::mids$ = NULL;
        bool MultiTermQueryWrapperFilter::live$ = false;

        jclass MultiTermQueryWrapperFilter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/MultiTermQueryWrapperFilter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_getDocIdSet_ccce0897] = env->getMethodID(cls, "getDocIdSet", "(Lorg/apache/lucene/index/AtomicReaderContext;Lorg/apache/lucene/util/Bits;)Lorg/apache/lucene/search/DocIdSet;");
            mids$[mid_getField_14c7b5c5] = env->getMethodID(cls, "getField", "()Ljava/lang/String;");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jboolean MultiTermQueryWrapperFilter::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        ::org::apache::lucene::search::DocIdSet MultiTermQueryWrapperFilter::getDocIdSet(const ::org::apache::lucene::index::AtomicReaderContext & a0, const ::org::apache::lucene::util::Bits & a1) const
        {
          return ::org::apache::lucene::search::DocIdSet(env->callObjectMethod(this$, mids$[mid_getDocIdSet_ccce0897], a0.this$, a1.this$));
        }

        ::java::lang::String MultiTermQueryWrapperFilter::getField() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getField_14c7b5c5]));
        }

        jint MultiTermQueryWrapperFilter::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        ::java::lang::String MultiTermQueryWrapperFilter::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_MultiTermQueryWrapperFilter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiTermQueryWrapperFilter_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiTermQueryWrapperFilter_of_(t_MultiTermQueryWrapperFilter *self, PyObject *args);
        static PyObject *t_MultiTermQueryWrapperFilter_equals(t_MultiTermQueryWrapperFilter *self, PyObject *args);
        static PyObject *t_MultiTermQueryWrapperFilter_getDocIdSet(t_MultiTermQueryWrapperFilter *self, PyObject *args);
        static PyObject *t_MultiTermQueryWrapperFilter_getField(t_MultiTermQueryWrapperFilter *self);
        static PyObject *t_MultiTermQueryWrapperFilter_hashCode(t_MultiTermQueryWrapperFilter *self, PyObject *args);
        static PyObject *t_MultiTermQueryWrapperFilter_toString(t_MultiTermQueryWrapperFilter *self, PyObject *args);
        static PyObject *t_MultiTermQueryWrapperFilter_get__field(t_MultiTermQueryWrapperFilter *self, void *data);
        static PyObject *t_MultiTermQueryWrapperFilter_get__parameters_(t_MultiTermQueryWrapperFilter *self, void *data);
        static PyGetSetDef t_MultiTermQueryWrapperFilter__fields_[] = {
          DECLARE_GET_FIELD(t_MultiTermQueryWrapperFilter, field),
          DECLARE_GET_FIELD(t_MultiTermQueryWrapperFilter, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_MultiTermQueryWrapperFilter__methods_[] = {
          DECLARE_METHOD(t_MultiTermQueryWrapperFilter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiTermQueryWrapperFilter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiTermQueryWrapperFilter, of_, METH_VARARGS),
          DECLARE_METHOD(t_MultiTermQueryWrapperFilter, equals, METH_VARARGS),
          DECLARE_METHOD(t_MultiTermQueryWrapperFilter, getDocIdSet, METH_VARARGS),
          DECLARE_METHOD(t_MultiTermQueryWrapperFilter, getField, METH_NOARGS),
          DECLARE_METHOD(t_MultiTermQueryWrapperFilter, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_MultiTermQueryWrapperFilter, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MultiTermQueryWrapperFilter, t_MultiTermQueryWrapperFilter, ::org::apache::lucene::search::Filter, MultiTermQueryWrapperFilter, abstract_init, 0, 0, t_MultiTermQueryWrapperFilter__fields_, 0, 0);
        PyObject *t_MultiTermQueryWrapperFilter::wrap_Object(const MultiTermQueryWrapperFilter& object, PyTypeObject *p0)
        {
          PyObject *obj = t_MultiTermQueryWrapperFilter::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_MultiTermQueryWrapperFilter *self = (t_MultiTermQueryWrapperFilter *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_MultiTermQueryWrapperFilter::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_MultiTermQueryWrapperFilter::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_MultiTermQueryWrapperFilter *self = (t_MultiTermQueryWrapperFilter *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_MultiTermQueryWrapperFilter::install(PyObject *module)
        {
          installType(&PY_TYPE(MultiTermQueryWrapperFilter), module, "MultiTermQueryWrapperFilter", 0);
        }

        void t_MultiTermQueryWrapperFilter::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MultiTermQueryWrapperFilter).tp_dict, "class_", make_descriptor(MultiTermQueryWrapperFilter::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MultiTermQueryWrapperFilter).tp_dict, "wrapfn_", make_descriptor(t_MultiTermQueryWrapperFilter::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MultiTermQueryWrapperFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MultiTermQueryWrapperFilter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MultiTermQueryWrapperFilter::initializeClass, 1)))
            return NULL;
          return t_MultiTermQueryWrapperFilter::wrap_Object(MultiTermQueryWrapperFilter(((t_MultiTermQueryWrapperFilter *) arg)->object.this$));
        }
        static PyObject *t_MultiTermQueryWrapperFilter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MultiTermQueryWrapperFilter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_MultiTermQueryWrapperFilter_of_(t_MultiTermQueryWrapperFilter *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_MultiTermQueryWrapperFilter_equals(t_MultiTermQueryWrapperFilter *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(MultiTermQueryWrapperFilter), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_MultiTermQueryWrapperFilter_getDocIdSet(t_MultiTermQueryWrapperFilter *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
          ::org::apache::lucene::util::Bits a1((jobject) NULL);
          ::org::apache::lucene::search::DocIdSet result((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.getDocIdSet(a0, a1));
            return ::org::apache::lucene::search::t_DocIdSet::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(MultiTermQueryWrapperFilter), (PyObject *) self, "getDocIdSet", args, 2);
        }

        static PyObject *t_MultiTermQueryWrapperFilter_getField(t_MultiTermQueryWrapperFilter *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.getField());
          return j2p(result);
        }

        static PyObject *t_MultiTermQueryWrapperFilter_hashCode(t_MultiTermQueryWrapperFilter *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(MultiTermQueryWrapperFilter), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_MultiTermQueryWrapperFilter_toString(t_MultiTermQueryWrapperFilter *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(MultiTermQueryWrapperFilter), (PyObject *) self, "toString", args, 2);
        }
        static PyObject *t_MultiTermQueryWrapperFilter_get__parameters_(t_MultiTermQueryWrapperFilter *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static PyObject *t_MultiTermQueryWrapperFilter_get__field(t_MultiTermQueryWrapperFilter *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object.getField());
          return j2p(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/FilterAtomicReader$FilterTermsEnum.h"
#include "org/apache/lucene/index/DocsEnum.h"
#include "org/apache/lucene/index/TermsEnum$SeekStatus.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/DocsAndPositionsEnum.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/AttributeSource.h"
#include "org/apache/lucene/util/Bits.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/util/Comparator.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *FilterAtomicReader$FilterTermsEnum::class$ = NULL;
        jmethodID *FilterAtomicReader$FilterTermsEnum::mids$ = NULL;
        bool FilterAtomicReader$FilterTermsEnum::live$ = false;

        jclass FilterAtomicReader$FilterTermsEnum::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/FilterAtomicReader$FilterTermsEnum");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_0f660bfe] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/TermsEnum;)V");
            mids$[mid_attributes_f901022b] = env->getMethodID(cls, "attributes", "()Lorg/apache/lucene/util/AttributeSource;");
            mids$[mid_docFreq_54c6a179] = env->getMethodID(cls, "docFreq", "()I");
            mids$[mid_docs_e6d4c3ef] = env->getMethodID(cls, "docs", "(Lorg/apache/lucene/util/Bits;Lorg/apache/lucene/index/DocsEnum;I)Lorg/apache/lucene/index/DocsEnum;");
            mids$[mid_docsAndPositions_b5d9c11b] = env->getMethodID(cls, "docsAndPositions", "(Lorg/apache/lucene/util/Bits;Lorg/apache/lucene/index/DocsAndPositionsEnum;I)Lorg/apache/lucene/index/DocsAndPositionsEnum;");
            mids$[mid_getComparator_5a7ff2fc] = env->getMethodID(cls, "getComparator", "()Ljava/util/Comparator;");
            mids$[mid_next_4ae19461] = env->getMethodID(cls, "next", "()Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_ord_54c6a17a] = env->getMethodID(cls, "ord", "()J");
            mids$[mid_seekCeil_fa9d72c4] = env->getMethodID(cls, "seekCeil", "(Lorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/index/TermsEnum$SeekStatus;");
            mids$[mid_seekExact_0ee6df2f] = env->getMethodID(cls, "seekExact", "(J)V");
            mids$[mid_term_4ae19461] = env->getMethodID(cls, "term", "()Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_totalTermFreq_54c6a17a] = env->getMethodID(cls, "totalTermFreq", "()J");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FilterAtomicReader$FilterTermsEnum::FilterAtomicReader$FilterTermsEnum(const ::org::apache::lucene::index::TermsEnum & a0) : ::org::apache::lucene::index::TermsEnum(env->newObject(initializeClass, &mids$, mid_init$_0f660bfe, a0.this$)) {}

        ::org::apache::lucene::util::AttributeSource FilterAtomicReader$FilterTermsEnum::attributes() const
        {
          return ::org::apache::lucene::util::AttributeSource(env->callObjectMethod(this$, mids$[mid_attributes_f901022b]));
        }

        jint FilterAtomicReader$FilterTermsEnum::docFreq() const
        {
          return env->callIntMethod(this$, mids$[mid_docFreq_54c6a179]);
        }

        ::org::apache::lucene::index::DocsEnum FilterAtomicReader$FilterTermsEnum::docs(const ::org::apache::lucene::util::Bits & a0, const ::org::apache::lucene::index::DocsEnum & a1, jint a2) const
        {
          return ::org::apache::lucene::index::DocsEnum(env->callObjectMethod(this$, mids$[mid_docs_e6d4c3ef], a0.this$, a1.this$, a2));
        }

        ::org::apache::lucene::index::DocsAndPositionsEnum FilterAtomicReader$FilterTermsEnum::docsAndPositions(const ::org::apache::lucene::util::Bits & a0, const ::org::apache::lucene::index::DocsAndPositionsEnum & a1, jint a2) const
        {
          return ::org::apache::lucene::index::DocsAndPositionsEnum(env->callObjectMethod(this$, mids$[mid_docsAndPositions_b5d9c11b], a0.this$, a1.this$, a2));
        }

        ::java::util::Comparator FilterAtomicReader$FilterTermsEnum::getComparator() const
        {
          return ::java::util::Comparator(env->callObjectMethod(this$, mids$[mid_getComparator_5a7ff2fc]));
        }

        ::org::apache::lucene::util::BytesRef FilterAtomicReader$FilterTermsEnum::next() const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_next_4ae19461]));
        }

        jlong FilterAtomicReader$FilterTermsEnum::ord() const
        {
          return env->callLongMethod(this$, mids$[mid_ord_54c6a17a]);
        }

        ::org::apache::lucene::index::TermsEnum$SeekStatus FilterAtomicReader$FilterTermsEnum::seekCeil(const ::org::apache::lucene::util::BytesRef & a0) const
        {
          return ::org::apache::lucene::index::TermsEnum$SeekStatus(env->callObjectMethod(this$, mids$[mid_seekCeil_fa9d72c4], a0.this$));
        }

        void FilterAtomicReader$FilterTermsEnum::seekExact(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_seekExact_0ee6df2f], a0);
        }

        ::org::apache::lucene::util::BytesRef FilterAtomicReader$FilterTermsEnum::term() const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_term_4ae19461]));
        }

        jlong FilterAtomicReader$FilterTermsEnum::totalTermFreq() const
        {
          return env->callLongMethod(this$, mids$[mid_totalTermFreq_54c6a17a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_FilterAtomicReader$FilterTermsEnum_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FilterAtomicReader$FilterTermsEnum_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FilterAtomicReader$FilterTermsEnum_init_(t_FilterAtomicReader$FilterTermsEnum *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FilterAtomicReader$FilterTermsEnum_attributes(t_FilterAtomicReader$FilterTermsEnum *self, PyObject *args);
        static PyObject *t_FilterAtomicReader$FilterTermsEnum_docFreq(t_FilterAtomicReader$FilterTermsEnum *self, PyObject *args);
        static PyObject *t_FilterAtomicReader$FilterTermsEnum_docs(t_FilterAtomicReader$FilterTermsEnum *self, PyObject *args);
        static PyObject *t_FilterAtomicReader$FilterTermsEnum_docsAndPositions(t_FilterAtomicReader$FilterTermsEnum *self, PyObject *args);
        static PyObject *t_FilterAtomicReader$FilterTermsEnum_getComparator(t_FilterAtomicReader$FilterTermsEnum *self, PyObject *args);
        static PyObject *t_FilterAtomicReader$FilterTermsEnum_next(t_FilterAtomicReader$FilterTermsEnum *self, PyObject *args);
        static PyObject *t_FilterAtomicReader$FilterTermsEnum_ord(t_FilterAtomicReader$FilterTermsEnum *self, PyObject *args);
        static PyObject *t_FilterAtomicReader$FilterTermsEnum_seekCeil(t_FilterAtomicReader$FilterTermsEnum *self, PyObject *args);
        static PyObject *t_FilterAtomicReader$FilterTermsEnum_seekExact(t_FilterAtomicReader$FilterTermsEnum *self, PyObject *args);
        static PyObject *t_FilterAtomicReader$FilterTermsEnum_term(t_FilterAtomicReader$FilterTermsEnum *self, PyObject *args);
        static PyObject *t_FilterAtomicReader$FilterTermsEnum_totalTermFreq(t_FilterAtomicReader$FilterTermsEnum *self, PyObject *args);
        static PyObject *t_FilterAtomicReader$FilterTermsEnum_get__comparator(t_FilterAtomicReader$FilterTermsEnum *self, void *data);
        static PyGetSetDef t_FilterAtomicReader$FilterTermsEnum__fields_[] = {
          DECLARE_GET_FIELD(t_FilterAtomicReader$FilterTermsEnum, comparator),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FilterAtomicReader$FilterTermsEnum__methods_[] = {
          DECLARE_METHOD(t_FilterAtomicReader$FilterTermsEnum, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterTermsEnum, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterTermsEnum, attributes, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterTermsEnum, docFreq, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterTermsEnum, docs, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterTermsEnum, docsAndPositions, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterTermsEnum, getComparator, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterTermsEnum, next, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterTermsEnum, ord, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterTermsEnum, seekCeil, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterTermsEnum, seekExact, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterTermsEnum, term, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterTermsEnum, totalTermFreq, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FilterAtomicReader$FilterTermsEnum, t_FilterAtomicReader$FilterTermsEnum, ::org::apache::lucene::index::TermsEnum, FilterAtomicReader$FilterTermsEnum, t_FilterAtomicReader$FilterTermsEnum_init_, PyObject_SelfIter, ((PyObject *(*)(t_FilterAtomicReader$FilterTermsEnum *)) get_next< t_FilterAtomicReader$FilterTermsEnum,::org::apache::lucene::util::t_BytesRef,::org::apache::lucene::util::BytesRef >), t_FilterAtomicReader$FilterTermsEnum__fields_, 0, 0);

        void t_FilterAtomicReader$FilterTermsEnum::install(PyObject *module)
        {
          installType(&PY_TYPE(FilterAtomicReader$FilterTermsEnum), module, "FilterAtomicReader$FilterTermsEnum", 0);
        }

        void t_FilterAtomicReader$FilterTermsEnum::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FilterAtomicReader$FilterTermsEnum).tp_dict, "class_", make_descriptor(FilterAtomicReader$FilterTermsEnum::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FilterAtomicReader$FilterTermsEnum).tp_dict, "wrapfn_", make_descriptor(t_FilterAtomicReader$FilterTermsEnum::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FilterAtomicReader$FilterTermsEnum).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FilterAtomicReader$FilterTermsEnum_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FilterAtomicReader$FilterTermsEnum::initializeClass, 1)))
            return NULL;
          return t_FilterAtomicReader$FilterTermsEnum::wrap_Object(FilterAtomicReader$FilterTermsEnum(((t_FilterAtomicReader$FilterTermsEnum *) arg)->object.this$));
        }
        static PyObject *t_FilterAtomicReader$FilterTermsEnum_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FilterAtomicReader$FilterTermsEnum::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FilterAtomicReader$FilterTermsEnum_init_(t_FilterAtomicReader$FilterTermsEnum *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::index::TermsEnum a0((jobject) NULL);
          FilterAtomicReader$FilterTermsEnum object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::TermsEnum::initializeClass, &a0))
          {
            INT_CALL(object = FilterAtomicReader$FilterTermsEnum(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FilterAtomicReader$FilterTermsEnum_attributes(t_FilterAtomicReader$FilterTermsEnum *self, PyObject *args)
        {
          ::org::apache::lucene::util::AttributeSource result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.attributes());
            return ::org::apache::lucene::util::t_AttributeSource::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader$FilterTermsEnum), (PyObject *) self, "attributes", args, 2);
        }

        static PyObject *t_FilterAtomicReader$FilterTermsEnum_docFreq(t_FilterAtomicReader$FilterTermsEnum *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.docFreq());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader$FilterTermsEnum), (PyObject *) self, "docFreq", args, 2);
        }

        static PyObject *t_FilterAtomicReader$FilterTermsEnum_docs(t_FilterAtomicReader$FilterTermsEnum *self, PyObject *args)
        {
          ::org::apache::lucene::util::Bits a0((jobject) NULL);
          ::org::apache::lucene::index::DocsEnum a1((jobject) NULL);
          jint a2;
          ::org::apache::lucene::index::DocsEnum result((jobject) NULL);

          if (!parseArgs(args, "kkI", ::org::apache::lucene::util::Bits::initializeClass, ::org::apache::lucene::index::DocsEnum::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.docs(a0, a1, a2));
            return ::org::apache::lucene::index::t_DocsEnum::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader$FilterTermsEnum), (PyObject *) self, "docs", args, 2);
        }

        static PyObject *t_FilterAtomicReader$FilterTermsEnum_docsAndPositions(t_FilterAtomicReader$FilterTermsEnum *self, PyObject *args)
        {
          ::org::apache::lucene::util::Bits a0((jobject) NULL);
          ::org::apache::lucene::index::DocsAndPositionsEnum a1((jobject) NULL);
          jint a2;
          ::org::apache::lucene::index::DocsAndPositionsEnum result((jobject) NULL);

          if (!parseArgs(args, "kkI", ::org::apache::lucene::util::Bits::initializeClass, ::org::apache::lucene::index::DocsAndPositionsEnum::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.docsAndPositions(a0, a1, a2));
            return ::org::apache::lucene::index::t_DocsAndPositionsEnum::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader$FilterTermsEnum), (PyObject *) self, "docsAndPositions", args, 2);
        }

        static PyObject *t_FilterAtomicReader$FilterTermsEnum_getComparator(t_FilterAtomicReader$FilterTermsEnum *self, PyObject *args)
        {
          ::java::util::Comparator result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getComparator());
            return ::java::util::t_Comparator::wrap_Object(result, &::org::apache::lucene::util::PY_TYPE(BytesRef));
          }

          return callSuper(&PY_TYPE(FilterAtomicReader$FilterTermsEnum), (PyObject *) self, "getComparator", args, 2);
        }

        static PyObject *t_FilterAtomicReader$FilterTermsEnum_next(t_FilterAtomicReader$FilterTermsEnum *self, PyObject *args)
        {
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.next());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader$FilterTermsEnum), (PyObject *) self, "next", args, 2);
        }

        static PyObject *t_FilterAtomicReader$FilterTermsEnum_ord(t_FilterAtomicReader$FilterTermsEnum *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.ord());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader$FilterTermsEnum), (PyObject *) self, "ord", args, 2);
        }

        static PyObject *t_FilterAtomicReader$FilterTermsEnum_seekCeil(t_FilterAtomicReader$FilterTermsEnum *self, PyObject *args)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          ::org::apache::lucene::index::TermsEnum$SeekStatus result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.seekCeil(a0));
            return ::org::apache::lucene::index::t_TermsEnum$SeekStatus::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader$FilterTermsEnum), (PyObject *) self, "seekCeil", args, 2);
        }

        static PyObject *t_FilterAtomicReader$FilterTermsEnum_seekExact(t_FilterAtomicReader$FilterTermsEnum *self, PyObject *args)
        {
          jlong a0;

          if (!parseArgs(args, "J", &a0))
          {
            OBJ_CALL(self->object.seekExact(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FilterAtomicReader$FilterTermsEnum), (PyObject *) self, "seekExact", args, 2);
        }

        static PyObject *t_FilterAtomicReader$FilterTermsEnum_term(t_FilterAtomicReader$FilterTermsEnum *self, PyObject *args)
        {
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.term());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader$FilterTermsEnum), (PyObject *) self, "term", args, 2);
        }

        static PyObject *t_FilterAtomicReader$FilterTermsEnum_totalTermFreq(t_FilterAtomicReader$FilterTermsEnum *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.totalTermFreq());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader$FilterTermsEnum), (PyObject *) self, "totalTermFreq", args, 2);
        }

        static PyObject *t_FilterAtomicReader$FilterTermsEnum_get__comparator(t_FilterAtomicReader$FilterTermsEnum *self, void *data)
        {
          ::java::util::Comparator value((jobject) NULL);
          OBJ_CALL(value = self->object.getComparator());
          return ::java::util::t_Comparator::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/BoostAttributeImpl.h"
#include "org/apache/lucene/search/BoostAttribute.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *BoostAttributeImpl::class$ = NULL;
        jmethodID *BoostAttributeImpl::mids$ = NULL;
        bool BoostAttributeImpl::live$ = false;

        jclass BoostAttributeImpl::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/BoostAttributeImpl");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
            mids$[mid_copyTo_d86caa9f] = env->getMethodID(cls, "copyTo", "(Lorg/apache/lucene/util/AttributeImpl;)V");
            mids$[mid_getBoost_54c6a176] = env->getMethodID(cls, "getBoost", "()F");
            mids$[mid_setBoost_06298cab] = env->getMethodID(cls, "setBoost", "(F)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        BoostAttributeImpl::BoostAttributeImpl() : ::org::apache::lucene::util::AttributeImpl(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void BoostAttributeImpl::clear() const
        {
          env->callVoidMethod(this$, mids$[mid_clear_54c6a166]);
        }

        void BoostAttributeImpl::copyTo(const ::org::apache::lucene::util::AttributeImpl & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_copyTo_d86caa9f], a0.this$);
        }

        jfloat BoostAttributeImpl::getBoost() const
        {
          return env->callFloatMethod(this$, mids$[mid_getBoost_54c6a176]);
        }

        void BoostAttributeImpl::setBoost(jfloat a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setBoost_06298cab], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_BoostAttributeImpl_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BoostAttributeImpl_instance_(PyTypeObject *type, PyObject *arg);
        static int t_BoostAttributeImpl_init_(t_BoostAttributeImpl *self, PyObject *args, PyObject *kwds);
        static PyObject *t_BoostAttributeImpl_clear(t_BoostAttributeImpl *self, PyObject *args);
        static PyObject *t_BoostAttributeImpl_copyTo(t_BoostAttributeImpl *self, PyObject *args);
        static PyObject *t_BoostAttributeImpl_getBoost(t_BoostAttributeImpl *self);
        static PyObject *t_BoostAttributeImpl_setBoost(t_BoostAttributeImpl *self, PyObject *arg);
        static PyObject *t_BoostAttributeImpl_get__boost(t_BoostAttributeImpl *self, void *data);
        static int t_BoostAttributeImpl_set__boost(t_BoostAttributeImpl *self, PyObject *arg, void *data);
        static PyGetSetDef t_BoostAttributeImpl__fields_[] = {
          DECLARE_GETSET_FIELD(t_BoostAttributeImpl, boost),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_BoostAttributeImpl__methods_[] = {
          DECLARE_METHOD(t_BoostAttributeImpl, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BoostAttributeImpl, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BoostAttributeImpl, clear, METH_VARARGS),
          DECLARE_METHOD(t_BoostAttributeImpl, copyTo, METH_VARARGS),
          DECLARE_METHOD(t_BoostAttributeImpl, getBoost, METH_NOARGS),
          DECLARE_METHOD(t_BoostAttributeImpl, setBoost, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(BoostAttributeImpl, t_BoostAttributeImpl, ::org::apache::lucene::util::AttributeImpl, BoostAttributeImpl, t_BoostAttributeImpl_init_, 0, 0, t_BoostAttributeImpl__fields_, 0, 0);

        void t_BoostAttributeImpl::install(PyObject *module)
        {
          installType(&PY_TYPE(BoostAttributeImpl), module, "BoostAttributeImpl", 0);
        }

        void t_BoostAttributeImpl::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(BoostAttributeImpl).tp_dict, "class_", make_descriptor(BoostAttributeImpl::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(BoostAttributeImpl).tp_dict, "wrapfn_", make_descriptor(t_BoostAttributeImpl::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(BoostAttributeImpl).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_BoostAttributeImpl_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, BoostAttributeImpl::initializeClass, 1)))
            return NULL;
          return t_BoostAttributeImpl::wrap_Object(BoostAttributeImpl(((t_BoostAttributeImpl *) arg)->object.this$));
        }
        static PyObject *t_BoostAttributeImpl_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, BoostAttributeImpl::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_BoostAttributeImpl_init_(t_BoostAttributeImpl *self, PyObject *args, PyObject *kwds)
        {
          BoostAttributeImpl object((jobject) NULL);

          INT_CALL(object = BoostAttributeImpl());
          self->object = object;

          return 0;
        }

        static PyObject *t_BoostAttributeImpl_clear(t_BoostAttributeImpl *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.clear());
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(BoostAttributeImpl), (PyObject *) self, "clear", args, 2);
        }

        static PyObject *t_BoostAttributeImpl_copyTo(t_BoostAttributeImpl *self, PyObject *args)
        {
          ::org::apache::lucene::util::AttributeImpl a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::util::AttributeImpl::initializeClass, &a0))
          {
            OBJ_CALL(self->object.copyTo(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(BoostAttributeImpl), (PyObject *) self, "copyTo", args, 2);
        }

        static PyObject *t_BoostAttributeImpl_getBoost(t_BoostAttributeImpl *self)
        {
          jfloat result;
          OBJ_CALL(result = self->object.getBoost());
          return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_BoostAttributeImpl_setBoost(t_BoostAttributeImpl *self, PyObject *arg)
        {
          jfloat a0;

          if (!parseArg(arg, "F", &a0))
          {
            OBJ_CALL(self->object.setBoost(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setBoost", arg);
          return NULL;
        }

        static PyObject *t_BoostAttributeImpl_get__boost(t_BoostAttributeImpl *self, void *data)
        {
          jfloat value;
          OBJ_CALL(value = self->object.getBoost());
          return PyFloat_FromDouble((double) value);
        }
        static int t_BoostAttributeImpl_set__boost(t_BoostAttributeImpl *self, PyObject *arg, void *data)
        {
          {
            jfloat value;
            if (!parseArg(arg, "F", &value))
            {
              INT_CALL(self->object.setBoost(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "boost", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene40/Lucene40FieldInfosFormat.h"
#include "org/apache/lucene/codecs/FieldInfosWriter.h"
#include "org/apache/lucene/codecs/FieldInfosReader.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene40 {

          ::java::lang::Class *Lucene40FieldInfosFormat::class$ = NULL;
          jmethodID *Lucene40FieldInfosFormat::mids$ = NULL;
          bool Lucene40FieldInfosFormat::live$ = false;

          jclass Lucene40FieldInfosFormat::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene40/Lucene40FieldInfosFormat");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_getFieldInfosReader_6ecd5494] = env->getMethodID(cls, "getFieldInfosReader", "()Lorg/apache/lucene/codecs/FieldInfosReader;");
              mids$[mid_getFieldInfosWriter_211ffa60] = env->getMethodID(cls, "getFieldInfosWriter", "()Lorg/apache/lucene/codecs/FieldInfosWriter;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene40FieldInfosFormat::Lucene40FieldInfosFormat() : ::org::apache::lucene::codecs::FieldInfosFormat(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::codecs::FieldInfosReader Lucene40FieldInfosFormat::getFieldInfosReader() const
          {
            return ::org::apache::lucene::codecs::FieldInfosReader(env->callObjectMethod(this$, mids$[mid_getFieldInfosReader_6ecd5494]));
          }

          ::org::apache::lucene::codecs::FieldInfosWriter Lucene40FieldInfosFormat::getFieldInfosWriter() const
          {
            return ::org::apache::lucene::codecs::FieldInfosWriter(env->callObjectMethod(this$, mids$[mid_getFieldInfosWriter_211ffa60]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene40 {
          static PyObject *t_Lucene40FieldInfosFormat_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene40FieldInfosFormat_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene40FieldInfosFormat_init_(t_Lucene40FieldInfosFormat *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene40FieldInfosFormat_getFieldInfosReader(t_Lucene40FieldInfosFormat *self, PyObject *args);
          static PyObject *t_Lucene40FieldInfosFormat_getFieldInfosWriter(t_Lucene40FieldInfosFormat *self, PyObject *args);
          static PyObject *t_Lucene40FieldInfosFormat_get__fieldInfosReader(t_Lucene40FieldInfosFormat *self, void *data);
          static PyObject *t_Lucene40FieldInfosFormat_get__fieldInfosWriter(t_Lucene40FieldInfosFormat *self, void *data);
          static PyGetSetDef t_Lucene40FieldInfosFormat__fields_[] = {
            DECLARE_GET_FIELD(t_Lucene40FieldInfosFormat, fieldInfosReader),
            DECLARE_GET_FIELD(t_Lucene40FieldInfosFormat, fieldInfosWriter),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Lucene40FieldInfosFormat__methods_[] = {
            DECLARE_METHOD(t_Lucene40FieldInfosFormat, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene40FieldInfosFormat, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene40FieldInfosFormat, getFieldInfosReader, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40FieldInfosFormat, getFieldInfosWriter, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene40FieldInfosFormat, t_Lucene40FieldInfosFormat, ::org::apache::lucene::codecs::FieldInfosFormat, Lucene40FieldInfosFormat, t_Lucene40FieldInfosFormat_init_, 0, 0, t_Lucene40FieldInfosFormat__fields_, 0, 0);

          void t_Lucene40FieldInfosFormat::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene40FieldInfosFormat), module, "Lucene40FieldInfosFormat", 0);
          }

          void t_Lucene40FieldInfosFormat::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene40FieldInfosFormat).tp_dict, "class_", make_descriptor(Lucene40FieldInfosFormat::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene40FieldInfosFormat).tp_dict, "wrapfn_", make_descriptor(t_Lucene40FieldInfosFormat::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene40FieldInfosFormat).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lucene40FieldInfosFormat_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene40FieldInfosFormat::initializeClass, 1)))
              return NULL;
            return t_Lucene40FieldInfosFormat::wrap_Object(Lucene40FieldInfosFormat(((t_Lucene40FieldInfosFormat *) arg)->object.this$));
          }
          static PyObject *t_Lucene40FieldInfosFormat_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene40FieldInfosFormat::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene40FieldInfosFormat_init_(t_Lucene40FieldInfosFormat *self, PyObject *args, PyObject *kwds)
          {
            Lucene40FieldInfosFormat object((jobject) NULL);

            INT_CALL(object = Lucene40FieldInfosFormat());
            self->object = object;

            return 0;
          }

          static PyObject *t_Lucene40FieldInfosFormat_getFieldInfosReader(t_Lucene40FieldInfosFormat *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::FieldInfosReader result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getFieldInfosReader());
              return ::org::apache::lucene::codecs::t_FieldInfosReader::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene40FieldInfosFormat), (PyObject *) self, "getFieldInfosReader", args, 2);
          }

          static PyObject *t_Lucene40FieldInfosFormat_getFieldInfosWriter(t_Lucene40FieldInfosFormat *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::FieldInfosWriter result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getFieldInfosWriter());
              return ::org::apache::lucene::codecs::t_FieldInfosWriter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene40FieldInfosFormat), (PyObject *) self, "getFieldInfosWriter", args, 2);
          }

          static PyObject *t_Lucene40FieldInfosFormat_get__fieldInfosReader(t_Lucene40FieldInfosFormat *self, void *data)
          {
            ::org::apache::lucene::codecs::FieldInfosReader value((jobject) NULL);
            OBJ_CALL(value = self->object.getFieldInfosReader());
            return ::org::apache::lucene::codecs::t_FieldInfosReader::wrap_Object(value);
          }

          static PyObject *t_Lucene40FieldInfosFormat_get__fieldInfosWriter(t_Lucene40FieldInfosFormat *self, void *data)
          {
            ::org::apache::lucene::codecs::FieldInfosWriter value((jobject) NULL);
            OBJ_CALL(value = self->object.getFieldInfosWriter());
            return ::org::apache::lucene::codecs::t_FieldInfosWriter::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/compound/CompoundWordTokenFilterBase.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace compound {

          ::java::lang::Class *CompoundWordTokenFilterBase::class$ = NULL;
          jmethodID *CompoundWordTokenFilterBase::mids$ = NULL;
          bool CompoundWordTokenFilterBase::live$ = false;
          jint CompoundWordTokenFilterBase::DEFAULT_MAX_SUBWORD_SIZE = (jint) 0;
          jint CompoundWordTokenFilterBase::DEFAULT_MIN_SUBWORD_SIZE = (jint) 0;
          jint CompoundWordTokenFilterBase::DEFAULT_MIN_WORD_SIZE = (jint) 0;

          jclass CompoundWordTokenFilterBase::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/compound/CompoundWordTokenFilterBase");

              mids$ = new jmethodID[max_mid];
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");
              mids$[mid_decompose_54c6a166] = env->getMethodID(cls, "decompose", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_MAX_SUBWORD_SIZE = env->getStaticIntField(cls, "DEFAULT_MAX_SUBWORD_SIZE");
              DEFAULT_MIN_SUBWORD_SIZE = env->getStaticIntField(cls, "DEFAULT_MIN_SUBWORD_SIZE");
              DEFAULT_MIN_WORD_SIZE = env->getStaticIntField(cls, "DEFAULT_MIN_WORD_SIZE");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jboolean CompoundWordTokenFilterBase::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void CompoundWordTokenFilterBase::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace compound {
          static PyObject *t_CompoundWordTokenFilterBase_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CompoundWordTokenFilterBase_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CompoundWordTokenFilterBase_incrementToken(t_CompoundWordTokenFilterBase *self, PyObject *args);
          static PyObject *t_CompoundWordTokenFilterBase_reset(t_CompoundWordTokenFilterBase *self, PyObject *args);

          static PyMethodDef t_CompoundWordTokenFilterBase__methods_[] = {
            DECLARE_METHOD(t_CompoundWordTokenFilterBase, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CompoundWordTokenFilterBase, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CompoundWordTokenFilterBase, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_CompoundWordTokenFilterBase, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CompoundWordTokenFilterBase, t_CompoundWordTokenFilterBase, ::org::apache::lucene::analysis::TokenFilter, CompoundWordTokenFilterBase, abstract_init, 0, 0, 0, 0, 0);

          void t_CompoundWordTokenFilterBase::install(PyObject *module)
          {
            installType(&PY_TYPE(CompoundWordTokenFilterBase), module, "CompoundWordTokenFilterBase", 0);
          }

          void t_CompoundWordTokenFilterBase::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CompoundWordTokenFilterBase).tp_dict, "class_", make_descriptor(CompoundWordTokenFilterBase::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CompoundWordTokenFilterBase).tp_dict, "wrapfn_", make_descriptor(t_CompoundWordTokenFilterBase::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CompoundWordTokenFilterBase).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(CompoundWordTokenFilterBase::initializeClass);
            PyDict_SetItemString(PY_TYPE(CompoundWordTokenFilterBase).tp_dict, "DEFAULT_MAX_SUBWORD_SIZE", make_descriptor(CompoundWordTokenFilterBase::DEFAULT_MAX_SUBWORD_SIZE));
            PyDict_SetItemString(PY_TYPE(CompoundWordTokenFilterBase).tp_dict, "DEFAULT_MIN_SUBWORD_SIZE", make_descriptor(CompoundWordTokenFilterBase::DEFAULT_MIN_SUBWORD_SIZE));
            PyDict_SetItemString(PY_TYPE(CompoundWordTokenFilterBase).tp_dict, "DEFAULT_MIN_WORD_SIZE", make_descriptor(CompoundWordTokenFilterBase::DEFAULT_MIN_WORD_SIZE));
          }

          static PyObject *t_CompoundWordTokenFilterBase_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CompoundWordTokenFilterBase::initializeClass, 1)))
              return NULL;
            return t_CompoundWordTokenFilterBase::wrap_Object(CompoundWordTokenFilterBase(((t_CompoundWordTokenFilterBase *) arg)->object.this$));
          }
          static PyObject *t_CompoundWordTokenFilterBase_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CompoundWordTokenFilterBase::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_CompoundWordTokenFilterBase_incrementToken(t_CompoundWordTokenFilterBase *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(CompoundWordTokenFilterBase), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_CompoundWordTokenFilterBase_reset(t_CompoundWordTokenFilterBase *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(CompoundWordTokenFilterBase), (PyObject *) self, "reset", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/BytesRefFieldSource.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *BytesRefFieldSource::class$ = NULL;
            jmethodID *BytesRefFieldSource::mids$ = NULL;
            bool BytesRefFieldSource::live$ = false;

            jclass BytesRefFieldSource::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/BytesRefFieldSource");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
                mids$[mid_getValues_4c566485] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/queries/function/FunctionValues;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            BytesRefFieldSource::BytesRefFieldSource(const ::java::lang::String & a0) : ::org::apache::lucene::queries::function::valuesource::FieldCacheSource(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

            ::org::apache::lucene::queries::function::FunctionValues BytesRefFieldSource::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::FunctionValues(env->callObjectMethod(this$, mids$[mid_getValues_4c566485], a0.this$, a1.this$));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_BytesRefFieldSource_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_BytesRefFieldSource_instance_(PyTypeObject *type, PyObject *arg);
            static int t_BytesRefFieldSource_init_(t_BytesRefFieldSource *self, PyObject *args, PyObject *kwds);
            static PyObject *t_BytesRefFieldSource_getValues(t_BytesRefFieldSource *self, PyObject *args);

            static PyMethodDef t_BytesRefFieldSource__methods_[] = {
              DECLARE_METHOD(t_BytesRefFieldSource, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_BytesRefFieldSource, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_BytesRefFieldSource, getValues, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(BytesRefFieldSource, t_BytesRefFieldSource, ::org::apache::lucene::queries::function::valuesource::FieldCacheSource, BytesRefFieldSource, t_BytesRefFieldSource_init_, 0, 0, 0, 0, 0);

            void t_BytesRefFieldSource::install(PyObject *module)
            {
              installType(&PY_TYPE(BytesRefFieldSource), module, "BytesRefFieldSource", 0);
            }

            void t_BytesRefFieldSource::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(BytesRefFieldSource).tp_dict, "class_", make_descriptor(BytesRefFieldSource::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(BytesRefFieldSource).tp_dict, "wrapfn_", make_descriptor(t_BytesRefFieldSource::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(BytesRefFieldSource).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_BytesRefFieldSource_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, BytesRefFieldSource::initializeClass, 1)))
                return NULL;
              return t_BytesRefFieldSource::wrap_Object(BytesRefFieldSource(((t_BytesRefFieldSource *) arg)->object.this$));
            }
            static PyObject *t_BytesRefFieldSource_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, BytesRefFieldSource::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_BytesRefFieldSource_init_(t_BytesRefFieldSource *self, PyObject *args, PyObject *kwds)
            {
              ::java::lang::String a0((jobject) NULL);
              BytesRefFieldSource object((jobject) NULL);

              if (!parseArgs(args, "s", &a0))
              {
                INT_CALL(object = BytesRefFieldSource(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_BytesRefFieldSource_getValues(t_BytesRefFieldSource *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::FunctionValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::t_FunctionValues::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(BytesRefFieldSource), (PyObject *) self, "getValues", args, 2);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/automaton/Automaton.h"
#include "org/apache/lucene/util/automaton/Transition.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {

          ::java::lang::Class *Automaton::class$ = NULL;
          jmethodID *Automaton::mids$ = NULL;
          bool Automaton::live$ = false;

          jclass Automaton::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/automaton/Automaton");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_addEpsilon_d8d154a6] = env->getMethodID(cls, "addEpsilon", "(II)V");
              mids$[mid_addTransition_d3236aa4] = env->getMethodID(cls, "addTransition", "(III)V");
              mids$[mid_addTransition_ca5a6f66] = env->getMethodID(cls, "addTransition", "(IIII)V");
              mids$[mid_copy_fc7cf394] = env->getMethodID(cls, "copy", "(Lorg/apache/lucene/util/automaton/Automaton;)V");
              mids$[mid_createState_54c6a179] = env->getMethodID(cls, "createState", "()I");
              mids$[mid_finishState_54c6a166] = env->getMethodID(cls, "finishState", "()V");
              mids$[mid_getNextTransition_8209dac4] = env->getMethodID(cls, "getNextTransition", "(Lorg/apache/lucene/util/automaton/Transition;)V");
              mids$[mid_getNumStates_54c6a179] = env->getMethodID(cls, "getNumStates", "()I");
              mids$[mid_getNumTransitions_39c7bd23] = env->getMethodID(cls, "getNumTransitions", "(I)I");
              mids$[mid_getSortedTransitions_14b6b645] = env->getMethodID(cls, "getSortedTransitions", "()[[Lorg/apache/lucene/util/automaton/Transition;");
              mids$[mid_getTransition_9e3dac04] = env->getMethodID(cls, "getTransition", "(IILorg/apache/lucene/util/automaton/Transition;)V");
              mids$[mid_initTransition_72087f31] = env->getMethodID(cls, "initTransition", "(ILorg/apache/lucene/util/automaton/Transition;)I");
              mids$[mid_isAccept_39c7bd30] = env->getMethodID(cls, "isAccept", "(I)Z");
              mids$[mid_isDeterministic_54c6a16a] = env->getMethodID(cls, "isDeterministic", "()Z");
              mids$[mid_setAccept_b3a85a05] = env->getMethodID(cls, "setAccept", "(IZ)V");
              mids$[mid_step_d8d154b9] = env->getMethodID(cls, "step", "(II)I");
              mids$[mid_toDot_14c7b5c5] = env->getMethodID(cls, "toDot", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Automaton::Automaton() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          void Automaton::addEpsilon(jint a0, jint a1) const
          {
            env->callVoidMethod(this$, mids$[mid_addEpsilon_d8d154a6], a0, a1);
          }

          void Automaton::addTransition(jint a0, jint a1, jint a2) const
          {
            env->callVoidMethod(this$, mids$[mid_addTransition_d3236aa4], a0, a1, a2);
          }

          void Automaton::addTransition(jint a0, jint a1, jint a2, jint a3) const
          {
            env->callVoidMethod(this$, mids$[mid_addTransition_ca5a6f66], a0, a1, a2, a3);
          }

          void Automaton::copy(const Automaton & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_copy_fc7cf394], a0.this$);
          }

          jint Automaton::createState() const
          {
            return env->callIntMethod(this$, mids$[mid_createState_54c6a179]);
          }

          void Automaton::finishState() const
          {
            env->callVoidMethod(this$, mids$[mid_finishState_54c6a166]);
          }

          void Automaton::getNextTransition(const ::org::apache::lucene::util::automaton::Transition & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_getNextTransition_8209dac4], a0.this$);
          }

          jint Automaton::getNumStates() const
          {
            return env->callIntMethod(this$, mids$[mid_getNumStates_54c6a179]);
          }

          jint Automaton::getNumTransitions(jint a0) const
          {
            return env->callIntMethod(this$, mids$[mid_getNumTransitions_39c7bd23], a0);
          }

          JArray< JArray< ::org::apache::lucene::util::automaton::Transition > > Automaton::getSortedTransitions() const
          {
            return JArray< JArray< ::org::apache::lucene::util::automaton::Transition > >(env->callObjectMethod(this$, mids$[mid_getSortedTransitions_14b6b645]));
          }

          void Automaton::getTransition(jint a0, jint a1, const ::org::apache::lucene::util::automaton::Transition & a2) const
          {
            env->callVoidMethod(this$, mids$[mid_getTransition_9e3dac04], a0, a1, a2.this$);
          }

          jint Automaton::initTransition(jint a0, const ::org::apache::lucene::util::automaton::Transition & a1) const
          {
            return env->callIntMethod(this$, mids$[mid_initTransition_72087f31], a0, a1.this$);
          }

          jboolean Automaton::isAccept(jint a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_isAccept_39c7bd30], a0);
          }

          jboolean Automaton::isDeterministic() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isDeterministic_54c6a16a]);
          }

          void Automaton::setAccept(jint a0, jboolean a1) const
          {
            env->callVoidMethod(this$, mids$[mid_setAccept_b3a85a05], a0, a1);
          }

          jint Automaton::step(jint a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_step_d8d154b9], a0, a1);
          }

          ::java::lang::String Automaton::toDot() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toDot_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/util/automaton/Automaton$Builder.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {
          static PyObject *t_Automaton_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Automaton_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Automaton_init_(t_Automaton *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Automaton_addEpsilon(t_Automaton *self, PyObject *args);
          static PyObject *t_Automaton_addTransition(t_Automaton *self, PyObject *args);
          static PyObject *t_Automaton_copy(t_Automaton *self, PyObject *arg);
          static PyObject *t_Automaton_createState(t_Automaton *self);
          static PyObject *t_Automaton_finishState(t_Automaton *self);
          static PyObject *t_Automaton_getNextTransition(t_Automaton *self, PyObject *arg);
          static PyObject *t_Automaton_getNumStates(t_Automaton *self);
          static PyObject *t_Automaton_getNumTransitions(t_Automaton *self, PyObject *arg);
          static PyObject *t_Automaton_getSortedTransitions(t_Automaton *self);
          static PyObject *t_Automaton_getTransition(t_Automaton *self, PyObject *args);
          static PyObject *t_Automaton_initTransition(t_Automaton *self, PyObject *args);
          static PyObject *t_Automaton_isAccept(t_Automaton *self, PyObject *arg);
          static PyObject *t_Automaton_isDeterministic(t_Automaton *self);
          static PyObject *t_Automaton_setAccept(t_Automaton *self, PyObject *args);
          static PyObject *t_Automaton_step(t_Automaton *self, PyObject *args);
          static PyObject *t_Automaton_toDot(t_Automaton *self);
          static PyObject *t_Automaton_get__deterministic(t_Automaton *self, void *data);
          static PyObject *t_Automaton_get__numStates(t_Automaton *self, void *data);
          static PyObject *t_Automaton_get__sortedTransitions(t_Automaton *self, void *data);
          static PyGetSetDef t_Automaton__fields_[] = {
            DECLARE_GET_FIELD(t_Automaton, deterministic),
            DECLARE_GET_FIELD(t_Automaton, numStates),
            DECLARE_GET_FIELD(t_Automaton, sortedTransitions),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Automaton__methods_[] = {
            DECLARE_METHOD(t_Automaton, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Automaton, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Automaton, addEpsilon, METH_VARARGS),
            DECLARE_METHOD(t_Automaton, addTransition, METH_VARARGS),
            DECLARE_METHOD(t_Automaton, copy, METH_O),
            DECLARE_METHOD(t_Automaton, createState, METH_NOARGS),
            DECLARE_METHOD(t_Automaton, finishState, METH_NOARGS),
            DECLARE_METHOD(t_Automaton, getNextTransition, METH_O),
            DECLARE_METHOD(t_Automaton, getNumStates, METH_NOARGS),
            DECLARE_METHOD(t_Automaton, getNumTransitions, METH_O),
            DECLARE_METHOD(t_Automaton, getSortedTransitions, METH_NOARGS),
            DECLARE_METHOD(t_Automaton, getTransition, METH_VARARGS),
            DECLARE_METHOD(t_Automaton, initTransition, METH_VARARGS),
            DECLARE_METHOD(t_Automaton, isAccept, METH_O),
            DECLARE_METHOD(t_Automaton, isDeterministic, METH_NOARGS),
            DECLARE_METHOD(t_Automaton, setAccept, METH_VARARGS),
            DECLARE_METHOD(t_Automaton, step, METH_VARARGS),
            DECLARE_METHOD(t_Automaton, toDot, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Automaton, t_Automaton, ::java::lang::Object, Automaton, t_Automaton_init_, 0, 0, t_Automaton__fields_, 0, 0);

          void t_Automaton::install(PyObject *module)
          {
            installType(&PY_TYPE(Automaton), module, "Automaton", 0);
            PyDict_SetItemString(PY_TYPE(Automaton).tp_dict, "Builder", make_descriptor(&PY_TYPE(Automaton$Builder)));
          }

          void t_Automaton::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Automaton).tp_dict, "class_", make_descriptor(Automaton::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Automaton).tp_dict, "wrapfn_", make_descriptor(t_Automaton::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Automaton).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Automaton_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Automaton::initializeClass, 1)))
              return NULL;
            return t_Automaton::wrap_Object(Automaton(((t_Automaton *) arg)->object.this$));
          }
          static PyObject *t_Automaton_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Automaton::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Automaton_init_(t_Automaton *self, PyObject *args, PyObject *kwds)
          {
            Automaton object((jobject) NULL);

            INT_CALL(object = Automaton());
            self->object = object;

            return 0;
          }

          static PyObject *t_Automaton_addEpsilon(t_Automaton *self, PyObject *args)
          {
            jint a0;
            jint a1;

            if (!parseArgs(args, "II", &a0, &a1))
            {
              OBJ_CALL(self->object.addEpsilon(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "addEpsilon", args);
            return NULL;
          }

          static PyObject *t_Automaton_addTransition(t_Automaton *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 3:
              {
                jint a0;
                jint a1;
                jint a2;

                if (!parseArgs(args, "III", &a0, &a1, &a2))
                {
                  OBJ_CALL(self->object.addTransition(a0, a1, a2));
                  Py_RETURN_NONE;
                }
              }
              break;
             case 4:
              {
                jint a0;
                jint a1;
                jint a2;
                jint a3;

                if (!parseArgs(args, "IIII", &a0, &a1, &a2, &a3))
                {
                  OBJ_CALL(self->object.addTransition(a0, a1, a2, a3));
                  Py_RETURN_NONE;
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "addTransition", args);
            return NULL;
          }

          static PyObject *t_Automaton_copy(t_Automaton *self, PyObject *arg)
          {
            Automaton a0((jobject) NULL);

            if (!parseArg(arg, "k", Automaton::initializeClass, &a0))
            {
              OBJ_CALL(self->object.copy(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "copy", arg);
            return NULL;
          }

          static PyObject *t_Automaton_createState(t_Automaton *self)
          {
            jint result;
            OBJ_CALL(result = self->object.createState());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_Automaton_finishState(t_Automaton *self)
          {
            OBJ_CALL(self->object.finishState());
            Py_RETURN_NONE;
          }

          static PyObject *t_Automaton_getNextTransition(t_Automaton *self, PyObject *arg)
          {
            ::org::apache::lucene::util::automaton::Transition a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::util::automaton::Transition::initializeClass, &a0))
            {
              OBJ_CALL(self->object.getNextTransition(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "getNextTransition", arg);
            return NULL;
          }

          static PyObject *t_Automaton_getNumStates(t_Automaton *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getNumStates());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_Automaton_getNumTransitions(t_Automaton *self, PyObject *arg)
          {
            jint a0;
            jint result;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.getNumTransitions(a0));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "getNumTransitions", arg);
            return NULL;
          }

          static PyObject *t_Automaton_getSortedTransitions(t_Automaton *self)
          {
            JArray< JArray< ::org::apache::lucene::util::automaton::Transition > > result((jobject) NULL);
            OBJ_CALL(result = self->object.getSortedTransitions());
            return JArray<jobject>(result.this$).wrap(NULL);
          }

          static PyObject *t_Automaton_getTransition(t_Automaton *self, PyObject *args)
          {
            jint a0;
            jint a1;
            ::org::apache::lucene::util::automaton::Transition a2((jobject) NULL);

            if (!parseArgs(args, "IIk", ::org::apache::lucene::util::automaton::Transition::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(self->object.getTransition(a0, a1, a2));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "getTransition", args);
            return NULL;
          }

          static PyObject *t_Automaton_initTransition(t_Automaton *self, PyObject *args)
          {
            jint a0;
            ::org::apache::lucene::util::automaton::Transition a1((jobject) NULL);
            jint result;

            if (!parseArgs(args, "Ik", ::org::apache::lucene::util::automaton::Transition::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.initTransition(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "initTransition", args);
            return NULL;
          }

          static PyObject *t_Automaton_isAccept(t_Automaton *self, PyObject *arg)
          {
            jint a0;
            jboolean result;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.isAccept(a0));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError((PyObject *) self, "isAccept", arg);
            return NULL;
          }

          static PyObject *t_Automaton_isDeterministic(t_Automaton *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isDeterministic());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_Automaton_setAccept(t_Automaton *self, PyObject *args)
          {
            jint a0;
            jboolean a1;

            if (!parseArgs(args, "IZ", &a0, &a1))
            {
              OBJ_CALL(self->object.setAccept(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setAccept", args);
            return NULL;
          }

          static PyObject *t_Automaton_step(t_Automaton *self, PyObject *args)
          {
            jint a0;
            jint a1;
            jint result;

            if (!parseArgs(args, "II", &a0, &a1))
            {
              OBJ_CALL(result = self->object.step(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "step", args);
            return NULL;
          }

          static PyObject *t_Automaton_toDot(t_Automaton *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.toDot());
            return j2p(result);
          }

          static PyObject *t_Automaton_get__deterministic(t_Automaton *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isDeterministic());
            Py_RETURN_BOOL(value);
          }

          static PyObject *t_Automaton_get__numStates(t_Automaton *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getNumStates());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_Automaton_get__sortedTransitions(t_Automaton *self, void *data)
          {
            JArray< JArray< ::org::apache::lucene::util::automaton::Transition > > value((jobject) NULL);
            OBJ_CALL(value = self->object.getSortedTransitions());
            return JArray<jobject>(value.this$).wrap(NULL);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/processors/PhraseSlopQueryNodeProcessor.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {

              ::java::lang::Class *PhraseSlopQueryNodeProcessor::class$ = NULL;
              jmethodID *PhraseSlopQueryNodeProcessor::mids$ = NULL;
              bool PhraseSlopQueryNodeProcessor::live$ = false;

              jclass PhraseSlopQueryNodeProcessor::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/processors/PhraseSlopQueryNodeProcessor");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_postProcessNode_6705aed7] = env->getMethodID(cls, "postProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_preProcessNode_6705aed7] = env->getMethodID(cls, "preProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_setChildrenOrder_4f378251] = env->getMethodID(cls, "setChildrenOrder", "(Ljava/util/List;)Ljava/util/List;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              PhraseSlopQueryNodeProcessor::PhraseSlopQueryNodeProcessor() : ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {
              static PyObject *t_PhraseSlopQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_PhraseSlopQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg);
              static int t_PhraseSlopQueryNodeProcessor_init_(t_PhraseSlopQueryNodeProcessor *self, PyObject *args, PyObject *kwds);

              static PyMethodDef t_PhraseSlopQueryNodeProcessor__methods_[] = {
                DECLARE_METHOD(t_PhraseSlopQueryNodeProcessor, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_PhraseSlopQueryNodeProcessor, instance_, METH_O | METH_CLASS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(PhraseSlopQueryNodeProcessor, t_PhraseSlopQueryNodeProcessor, ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl, PhraseSlopQueryNodeProcessor, t_PhraseSlopQueryNodeProcessor_init_, 0, 0, 0, 0, 0);

              void t_PhraseSlopQueryNodeProcessor::install(PyObject *module)
              {
                installType(&PY_TYPE(PhraseSlopQueryNodeProcessor), module, "PhraseSlopQueryNodeProcessor", 0);
              }

              void t_PhraseSlopQueryNodeProcessor::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(PhraseSlopQueryNodeProcessor).tp_dict, "class_", make_descriptor(PhraseSlopQueryNodeProcessor::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(PhraseSlopQueryNodeProcessor).tp_dict, "wrapfn_", make_descriptor(t_PhraseSlopQueryNodeProcessor::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(PhraseSlopQueryNodeProcessor).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_PhraseSlopQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, PhraseSlopQueryNodeProcessor::initializeClass, 1)))
                  return NULL;
                return t_PhraseSlopQueryNodeProcessor::wrap_Object(PhraseSlopQueryNodeProcessor(((t_PhraseSlopQueryNodeProcessor *) arg)->object.this$));
              }
              static PyObject *t_PhraseSlopQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, PhraseSlopQueryNodeProcessor::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_PhraseSlopQueryNodeProcessor_init_(t_PhraseSlopQueryNodeProcessor *self, PyObject *args, PyObject *kwds)
              {
                PhraseSlopQueryNodeProcessor object((jobject) NULL);

                INT_CALL(object = PhraseSlopQueryNodeProcessor());
                self->object = object;

                return 0;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/LongDocValuesField.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *LongDocValuesField::class$ = NULL;
        jmethodID *LongDocValuesField::mids$ = NULL;
        bool LongDocValuesField::live$ = false;

        jclass LongDocValuesField::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/LongDocValuesField");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_4372eed5] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;J)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        LongDocValuesField::LongDocValuesField(const ::java::lang::String & a0, jlong a1) : ::org::apache::lucene::document::NumericDocValuesField(env->newObject(initializeClass, &mids$, mid_init$_4372eed5, a0.this$, a1)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_LongDocValuesField_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_LongDocValuesField_instance_(PyTypeObject *type, PyObject *arg);
        static int t_LongDocValuesField_init_(t_LongDocValuesField *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_LongDocValuesField__methods_[] = {
          DECLARE_METHOD(t_LongDocValuesField, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LongDocValuesField, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(LongDocValuesField, t_LongDocValuesField, ::org::apache::lucene::document::NumericDocValuesField, LongDocValuesField, t_LongDocValuesField_init_, 0, 0, 0, 0, 0);

        void t_LongDocValuesField::install(PyObject *module)
        {
          installType(&PY_TYPE(LongDocValuesField), module, "LongDocValuesField", 0);
        }

        void t_LongDocValuesField::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(LongDocValuesField).tp_dict, "class_", make_descriptor(LongDocValuesField::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(LongDocValuesField).tp_dict, "wrapfn_", make_descriptor(t_LongDocValuesField::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(LongDocValuesField).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_LongDocValuesField_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, LongDocValuesField::initializeClass, 1)))
            return NULL;
          return t_LongDocValuesField::wrap_Object(LongDocValuesField(((t_LongDocValuesField *) arg)->object.this$));
        }
        static PyObject *t_LongDocValuesField_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, LongDocValuesField::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_LongDocValuesField_init_(t_LongDocValuesField *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::String a0((jobject) NULL);
          jlong a1;
          LongDocValuesField object((jobject) NULL);

          if (!parseArgs(args, "sJ", &a0, &a1))
          {
            INT_CALL(object = LongDocValuesField(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/antlr/runtime/RuleReturnScope.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace antlr {
    namespace runtime {

      ::java::lang::Class *RuleReturnScope::class$ = NULL;
      jmethodID *RuleReturnScope::mids$ = NULL;
      bool RuleReturnScope::live$ = false;

      jclass RuleReturnScope::initializeClass(bool getOnly)
      {
        if (getOnly)
          return (jclass) (live$ ? class$->this$ : NULL);
        if (class$ == NULL)
        {
          jclass cls = (jclass) env->findClass("org/antlr/runtime/RuleReturnScope");

          mids$ = new jmethodID[max_mid];
          mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
          mids$[mid_getStart_846352c3] = env->getMethodID(cls, "getStart", "()Ljava/lang/Object;");
          mids$[mid_getStop_846352c3] = env->getMethodID(cls, "getStop", "()Ljava/lang/Object;");
          mids$[mid_getTemplate_846352c3] = env->getMethodID(cls, "getTemplate", "()Ljava/lang/Object;");
          mids$[mid_getTree_846352c3] = env->getMethodID(cls, "getTree", "()Ljava/lang/Object;");

          class$ = (::java::lang::Class *) new JObject(cls);
          live$ = true;
        }
        return (jclass) class$->this$;
      }

      RuleReturnScope::RuleReturnScope() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

      ::java::lang::Object RuleReturnScope::getStart() const
      {
        return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_getStart_846352c3]));
      }

      ::java::lang::Object RuleReturnScope::getStop() const
      {
        return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_getStop_846352c3]));
      }

      ::java::lang::Object RuleReturnScope::getTemplate() const
      {
        return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_getTemplate_846352c3]));
      }

      ::java::lang::Object RuleReturnScope::getTree() const
      {
        return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_getTree_846352c3]));
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace antlr {
    namespace runtime {
      static PyObject *t_RuleReturnScope_cast_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_RuleReturnScope_instance_(PyTypeObject *type, PyObject *arg);
      static int t_RuleReturnScope_init_(t_RuleReturnScope *self, PyObject *args, PyObject *kwds);
      static PyObject *t_RuleReturnScope_getStart(t_RuleReturnScope *self);
      static PyObject *t_RuleReturnScope_getStop(t_RuleReturnScope *self);
      static PyObject *t_RuleReturnScope_getTemplate(t_RuleReturnScope *self);
      static PyObject *t_RuleReturnScope_getTree(t_RuleReturnScope *self);
      static PyObject *t_RuleReturnScope_get__start(t_RuleReturnScope *self, void *data);
      static PyObject *t_RuleReturnScope_get__stop(t_RuleReturnScope *self, void *data);
      static PyObject *t_RuleReturnScope_get__template(t_RuleReturnScope *self, void *data);
      static PyObject *t_RuleReturnScope_get__tree(t_RuleReturnScope *self, void *data);
      static PyGetSetDef t_RuleReturnScope__fields_[] = {
        DECLARE_GET_FIELD(t_RuleReturnScope, start),
        DECLARE_GET_FIELD(t_RuleReturnScope, stop),
        DECLARE_GET_FIELD(t_RuleReturnScope, template),
        DECLARE_GET_FIELD(t_RuleReturnScope, tree),
        { NULL, NULL, NULL, NULL, NULL }
      };

      static PyMethodDef t_RuleReturnScope__methods_[] = {
        DECLARE_METHOD(t_RuleReturnScope, cast_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_RuleReturnScope, instance_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_RuleReturnScope, getStart, METH_NOARGS),
        DECLARE_METHOD(t_RuleReturnScope, getStop, METH_NOARGS),
        DECLARE_METHOD(t_RuleReturnScope, getTemplate, METH_NOARGS),
        DECLARE_METHOD(t_RuleReturnScope, getTree, METH_NOARGS),
        { NULL, NULL, 0, NULL }
      };

      DECLARE_TYPE(RuleReturnScope, t_RuleReturnScope, ::java::lang::Object, RuleReturnScope, t_RuleReturnScope_init_, 0, 0, t_RuleReturnScope__fields_, 0, 0);

      void t_RuleReturnScope::install(PyObject *module)
      {
        installType(&PY_TYPE(RuleReturnScope), module, "RuleReturnScope", 0);
      }

      void t_RuleReturnScope::initialize(PyObject *module)
      {
        PyDict_SetItemString(PY_TYPE(RuleReturnScope).tp_dict, "class_", make_descriptor(RuleReturnScope::initializeClass, 1));
        PyDict_SetItemString(PY_TYPE(RuleReturnScope).tp_dict, "wrapfn_", make_descriptor(t_RuleReturnScope::wrap_jobject));
        PyDict_SetItemString(PY_TYPE(RuleReturnScope).tp_dict, "boxfn_", make_descriptor(boxObject));
      }

      static PyObject *t_RuleReturnScope_cast_(PyTypeObject *type, PyObject *arg)
      {
        if (!(arg = castCheck(arg, RuleReturnScope::initializeClass, 1)))
          return NULL;
        return t_RuleReturnScope::wrap_Object(RuleReturnScope(((t_RuleReturnScope *) arg)->object.this$));
      }
      static PyObject *t_RuleReturnScope_instance_(PyTypeObject *type, PyObject *arg)
      {
        if (!castCheck(arg, RuleReturnScope::initializeClass, 0))
          Py_RETURN_FALSE;
        Py_RETURN_TRUE;
      }

      static int t_RuleReturnScope_init_(t_RuleReturnScope *self, PyObject *args, PyObject *kwds)
      {
        RuleReturnScope object((jobject) NULL);

        INT_CALL(object = RuleReturnScope());
        self->object = object;

        return 0;
      }

      static PyObject *t_RuleReturnScope_getStart(t_RuleReturnScope *self)
      {
        ::java::lang::Object result((jobject) NULL);
        OBJ_CALL(result = self->object.getStart());
        return ::java::lang::t_Object::wrap_Object(result);
      }

      static PyObject *t_RuleReturnScope_getStop(t_RuleReturnScope *self)
      {
        ::java::lang::Object result((jobject) NULL);
        OBJ_CALL(result = self->object.getStop());
        return ::java::lang::t_Object::wrap_Object(result);
      }

      static PyObject *t_RuleReturnScope_getTemplate(t_RuleReturnScope *self)
      {
        ::java::lang::Object result((jobject) NULL);
        OBJ_CALL(result = self->object.getTemplate());
        return ::java::lang::t_Object::wrap_Object(result);
      }

      static PyObject *t_RuleReturnScope_getTree(t_RuleReturnScope *self)
      {
        ::java::lang::Object result((jobject) NULL);
        OBJ_CALL(result = self->object.getTree());
        return ::java::lang::t_Object::wrap_Object(result);
      }

      static PyObject *t_RuleReturnScope_get__start(t_RuleReturnScope *self, void *data)
      {
        ::java::lang::Object value((jobject) NULL);
        OBJ_CALL(value = self->object.getStart());
        return ::java::lang::t_Object::wrap_Object(value);
      }

      static PyObject *t_RuleReturnScope_get__stop(t_RuleReturnScope *self, void *data)
      {
        ::java::lang::Object value((jobject) NULL);
        OBJ_CALL(value = self->object.getStop());
        return ::java::lang::t_Object::wrap_Object(value);
      }

      static PyObject *t_RuleReturnScope_get__template(t_RuleReturnScope *self, void *data)
      {
        ::java::lang::Object value((jobject) NULL);
        OBJ_CALL(value = self->object.getTemplate());
        return ::java::lang::t_Object::wrap_Object(value);
      }

      static PyObject *t_RuleReturnScope_get__tree(t_RuleReturnScope *self, void *data)
      {
        ::java::lang::Object value((jobject) NULL);
        OBJ_CALL(value = self->object.getTree());
        return ::java::lang::t_Object::wrap_Object(value);
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/io/StringReader.h"
#include "java/io/IOException.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace java {
  namespace io {

    ::java::lang::Class *StringReader::class$ = NULL;
    jmethodID *StringReader::mids$ = NULL;
    bool StringReader::live$ = false;

    jclass StringReader::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/io/StringReader");

        mids$ = new jmethodID[max_mid];
        mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
        mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
        mids$[mid_mark_39c7bd3c] = env->getMethodID(cls, "mark", "(I)V");
        mids$[mid_markSupported_54c6a16a] = env->getMethodID(cls, "markSupported", "()Z");
        mids$[mid_read_54c6a179] = env->getMethodID(cls, "read", "()I");
        mids$[mid_read_6f0bb349] = env->getMethodID(cls, "read", "([CII)I");
        mids$[mid_ready_54c6a16a] = env->getMethodID(cls, "ready", "()Z");
        mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");
        mids$[mid_skip_0ee6df33] = env->getMethodID(cls, "skip", "(J)J");

        class$ = (::java::lang::Class *) new JObject(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    StringReader::StringReader(const ::java::lang::String & a0) : ::java::io::Reader(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

    void StringReader::close() const
    {
      env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
    }

    void StringReader::mark(jint a0) const
    {
      env->callVoidMethod(this$, mids$[mid_mark_39c7bd3c], a0);
    }

    jboolean StringReader::markSupported() const
    {
      return env->callBooleanMethod(this$, mids$[mid_markSupported_54c6a16a]);
    }

    jint StringReader::read() const
    {
      return env->callIntMethod(this$, mids$[mid_read_54c6a179]);
    }

    jint StringReader::read(const JArray< jchar > & a0, jint a1, jint a2) const
    {
      return env->callIntMethod(this$, mids$[mid_read_6f0bb349], a0.this$, a1, a2);
    }

    jboolean StringReader::ready() const
    {
      return env->callBooleanMethod(this$, mids$[mid_ready_54c6a16a]);
    }

    void StringReader::reset() const
    {
      env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
    }

    jlong StringReader::skip(jlong a0) const
    {
      return env->callLongMethod(this$, mids$[mid_skip_0ee6df33], a0);
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace io {
    static PyObject *t_StringReader_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_StringReader_instance_(PyTypeObject *type, PyObject *arg);
    static int t_StringReader_init_(t_StringReader *self, PyObject *args, PyObject *kwds);
    static PyObject *t_StringReader_close(t_StringReader *self, PyObject *args);
    static PyObject *t_StringReader_mark(t_StringReader *self, PyObject *args);
    static PyObject *t_StringReader_markSupported(t_StringReader *self, PyObject *args);
    static PyObject *t_StringReader_read(t_StringReader *self, PyObject *args);
    static PyObject *t_StringReader_ready(t_StringReader *self, PyObject *args);
    static PyObject *t_StringReader_reset(t_StringReader *self, PyObject *args);
    static PyObject *t_StringReader_skip(t_StringReader *self, PyObject *args);

    static PyMethodDef t_StringReader__methods_[] = {
      DECLARE_METHOD(t_StringReader, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_StringReader, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_StringReader, close, METH_VARARGS),
      DECLARE_METHOD(t_StringReader, mark, METH_VARARGS),
      DECLARE_METHOD(t_StringReader, markSupported, METH_VARARGS),
      DECLARE_METHOD(t_StringReader, read, METH_VARARGS),
      DECLARE_METHOD(t_StringReader, ready, METH_VARARGS),
      DECLARE_METHOD(t_StringReader, reset, METH_VARARGS),
      DECLARE_METHOD(t_StringReader, skip, METH_VARARGS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(StringReader, t_StringReader, ::java::io::Reader, StringReader, t_StringReader_init_, 0, 0, 0, 0, 0);

    void t_StringReader::install(PyObject *module)
    {
      installType(&PY_TYPE(StringReader), module, "StringReader", 0);
    }

    void t_StringReader::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(StringReader).tp_dict, "class_", make_descriptor(StringReader::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(StringReader).tp_dict, "wrapfn_", make_descriptor(t_StringReader::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(StringReader).tp_dict, "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_StringReader_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, StringReader::initializeClass, 1)))
        return NULL;
      return t_StringReader::wrap_Object(StringReader(((t_StringReader *) arg)->object.this$));
    }
    static PyObject *t_StringReader_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, StringReader::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static int t_StringReader_init_(t_StringReader *self, PyObject *args, PyObject *kwds)
    {
      ::java::lang::String a0((jobject) NULL);
      StringReader object((jobject) NULL);

      if (!parseArgs(args, "s", &a0))
      {
        INT_CALL(object = StringReader(a0));
        self->object = object;
      }
      else
      {
        PyErr_SetArgsError((PyObject *) self, "__init__", args);
        return -1;
      }

      return 0;
    }

    static PyObject *t_StringReader_close(t_StringReader *self, PyObject *args)
    {

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(self->object.close());
        Py_RETURN_NONE;
      }

      return callSuper(&PY_TYPE(StringReader), (PyObject *) self, "close", args, 2);
    }

    static PyObject *t_StringReader_mark(t_StringReader *self, PyObject *args)
    {
      jint a0;

      if (!parseArgs(args, "I", &a0))
      {
        OBJ_CALL(self->object.mark(a0));
        Py_RETURN_NONE;
      }

      return callSuper(&PY_TYPE(StringReader), (PyObject *) self, "mark", args, 2);
    }

    static PyObject *t_StringReader_markSupported(t_StringReader *self, PyObject *args)
    {
      jboolean result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.markSupported());
        Py_RETURN_BOOL(result);
      }

      return callSuper(&PY_TYPE(StringReader), (PyObject *) self, "markSupported", args, 2);
    }

    static PyObject *t_StringReader_read(t_StringReader *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          jint result;
          OBJ_CALL(result = self->object.read());
          return PyInt_FromLong((long) result);
        }
        break;
       case 3:
        {
          JArray< jchar > a0((jobject) NULL);
          jint a1;
          jint a2;
          jint result;

          if (!parseArgs(args, "[CII", &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.read(a0, a1, a2));
            return PyInt_FromLong((long) result);
          }
        }
      }

      return callSuper(&PY_TYPE(StringReader), (PyObject *) self, "read", args, 2);
    }

    static PyObject *t_StringReader_ready(t_StringReader *self, PyObject *args)
    {
      jboolean result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.ready());
        Py_RETURN_BOOL(result);
      }

      return callSuper(&PY_TYPE(StringReader), (PyObject *) self, "ready", args, 2);
    }

    static PyObject *t_StringReader_reset(t_StringReader *self, PyObject *args)
    {

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(self->object.reset());
        Py_RETURN_NONE;
      }

      return callSuper(&PY_TYPE(StringReader), (PyObject *) self, "reset", args, 2);
    }

    static PyObject *t_StringReader_skip(t_StringReader *self, PyObject *args)
    {
      jlong a0;
      jlong result;

      if (!parseArgs(args, "J", &a0))
      {
        OBJ_CALL(result = self->object.skip(a0));
        return PyLong_FromLongLong((PY_LONG_LONG) result);
      }

      return callSuper(&PY_TYPE(StringReader), (PyObject *) self, "skip", args, 2);
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ar/ArabicNormalizationFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ar {

          ::java::lang::Class *ArabicNormalizationFilter::class$ = NULL;
          jmethodID *ArabicNormalizationFilter::mids$ = NULL;
          bool ArabicNormalizationFilter::live$ = false;

          jclass ArabicNormalizationFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ar/ArabicNormalizationFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ArabicNormalizationFilter::ArabicNormalizationFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean ArabicNormalizationFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ar {
          static PyObject *t_ArabicNormalizationFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ArabicNormalizationFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ArabicNormalizationFilter_init_(t_ArabicNormalizationFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ArabicNormalizationFilter_incrementToken(t_ArabicNormalizationFilter *self, PyObject *args);

          static PyMethodDef t_ArabicNormalizationFilter__methods_[] = {
            DECLARE_METHOD(t_ArabicNormalizationFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ArabicNormalizationFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ArabicNormalizationFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ArabicNormalizationFilter, t_ArabicNormalizationFilter, ::org::apache::lucene::analysis::TokenFilter, ArabicNormalizationFilter, t_ArabicNormalizationFilter_init_, 0, 0, 0, 0, 0);

          void t_ArabicNormalizationFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(ArabicNormalizationFilter), module, "ArabicNormalizationFilter", 0);
          }

          void t_ArabicNormalizationFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ArabicNormalizationFilter).tp_dict, "class_", make_descriptor(ArabicNormalizationFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ArabicNormalizationFilter).tp_dict, "wrapfn_", make_descriptor(t_ArabicNormalizationFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ArabicNormalizationFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ArabicNormalizationFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ArabicNormalizationFilter::initializeClass, 1)))
              return NULL;
            return t_ArabicNormalizationFilter::wrap_Object(ArabicNormalizationFilter(((t_ArabicNormalizationFilter *) arg)->object.this$));
          }
          static PyObject *t_ArabicNormalizationFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ArabicNormalizationFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ArabicNormalizationFilter_init_(t_ArabicNormalizationFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ArabicNormalizationFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = ArabicNormalizationFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ArabicNormalizationFilter_incrementToken(t_ArabicNormalizationFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(ArabicNormalizationFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene41/Lucene41PostingsReader.h"
#include "org/apache/lucene/store/IndexInput.h"
#include "org/apache/lucene/index/DocsEnum.h"
#include "org/apache/lucene/util/Bits.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "org/apache/lucene/store/IOContext.h"
#include "org/apache/lucene/index/DocsAndPositionsEnum.h"
#include "org/apache/lucene/codecs/BlockTermState.h"
#include "org/apache/lucene/index/FieldInfo.h"
#include "org/apache/lucene/store/DataInput.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene41 {

          ::java::lang::Class *Lucene41PostingsReader::class$ = NULL;
          jmethodID *Lucene41PostingsReader::mids$ = NULL;
          bool Lucene41PostingsReader::live$ = false;

          jclass Lucene41PostingsReader::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene41/Lucene41PostingsReader");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_b18a8355] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/FieldInfos;Lorg/apache/lucene/index/SegmentInfo;Lorg/apache/lucene/store/IOContext;Ljava/lang/String;)V");
              mids$[mid_checkIntegrity_54c6a166] = env->getMethodID(cls, "checkIntegrity", "()V");
              mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
              mids$[mid_decodeTerm_0d1f34e8] = env->getMethodID(cls, "decodeTerm", "([JLorg/apache/lucene/store/DataInput;Lorg/apache/lucene/index/FieldInfo;Lorg/apache/lucene/codecs/BlockTermState;Z)V");
              mids$[mid_docs_4cca8a9c] = env->getMethodID(cls, "docs", "(Lorg/apache/lucene/index/FieldInfo;Lorg/apache/lucene/codecs/BlockTermState;Lorg/apache/lucene/util/Bits;Lorg/apache/lucene/index/DocsEnum;I)Lorg/apache/lucene/index/DocsEnum;");
              mids$[mid_docsAndPositions_3ae1ca58] = env->getMethodID(cls, "docsAndPositions", "(Lorg/apache/lucene/index/FieldInfo;Lorg/apache/lucene/codecs/BlockTermState;Lorg/apache/lucene/util/Bits;Lorg/apache/lucene/index/DocsAndPositionsEnum;I)Lorg/apache/lucene/index/DocsAndPositionsEnum;");
              mids$[mid_init_0441f0b2] = env->getMethodID(cls, "init", "(Lorg/apache/lucene/store/IndexInput;)V");
              mids$[mid_newTermState_9f93879c] = env->getMethodID(cls, "newTermState", "()Lorg/apache/lucene/codecs/BlockTermState;");
              mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene41PostingsReader::Lucene41PostingsReader(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::FieldInfos & a1, const ::org::apache::lucene::index::SegmentInfo & a2, const ::org::apache::lucene::store::IOContext & a3, const ::java::lang::String & a4) : ::org::apache::lucene::codecs::PostingsReaderBase(env->newObject(initializeClass, &mids$, mid_init$_b18a8355, a0.this$, a1.this$, a2.this$, a3.this$, a4.this$)) {}

          void Lucene41PostingsReader::checkIntegrity() const
          {
            env->callVoidMethod(this$, mids$[mid_checkIntegrity_54c6a166]);
          }

          void Lucene41PostingsReader::close() const
          {
            env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
          }

          void Lucene41PostingsReader::decodeTerm(const JArray< jlong > & a0, const ::org::apache::lucene::store::DataInput & a1, const ::org::apache::lucene::index::FieldInfo & a2, const ::org::apache::lucene::codecs::BlockTermState & a3, jboolean a4) const
          {
            env->callVoidMethod(this$, mids$[mid_decodeTerm_0d1f34e8], a0.this$, a1.this$, a2.this$, a3.this$, a4);
          }

          ::org::apache::lucene::index::DocsEnum Lucene41PostingsReader::docs(const ::org::apache::lucene::index::FieldInfo & a0, const ::org::apache::lucene::codecs::BlockTermState & a1, const ::org::apache::lucene::util::Bits & a2, const ::org::apache::lucene::index::DocsEnum & a3, jint a4) const
          {
            return ::org::apache::lucene::index::DocsEnum(env->callObjectMethod(this$, mids$[mid_docs_4cca8a9c], a0.this$, a1.this$, a2.this$, a3.this$, a4));
          }

          ::org::apache::lucene::index::DocsAndPositionsEnum Lucene41PostingsReader::docsAndPositions(const ::org::apache::lucene::index::FieldInfo & a0, const ::org::apache::lucene::codecs::BlockTermState & a1, const ::org::apache::lucene::util::Bits & a2, const ::org::apache::lucene::index::DocsAndPositionsEnum & a3, jint a4) const
          {
            return ::org::apache::lucene::index::DocsAndPositionsEnum(env->callObjectMethod(this$, mids$[mid_docsAndPositions_3ae1ca58], a0.this$, a1.this$, a2.this$, a3.this$, a4));
          }

          void Lucene41PostingsReader::init(const ::org::apache::lucene::store::IndexInput & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_init_0441f0b2], a0.this$);
          }

          ::org::apache::lucene::codecs::BlockTermState Lucene41PostingsReader::newTermState() const
          {
            return ::org::apache::lucene::codecs::BlockTermState(env->callObjectMethod(this$, mids$[mid_newTermState_9f93879c]));
          }

          jlong Lucene41PostingsReader::ramBytesUsed() const
          {
            return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene41 {
          static PyObject *t_Lucene41PostingsReader_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene41PostingsReader_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene41PostingsReader_init_(t_Lucene41PostingsReader *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene41PostingsReader_checkIntegrity(t_Lucene41PostingsReader *self, PyObject *args);
          static PyObject *t_Lucene41PostingsReader_close(t_Lucene41PostingsReader *self, PyObject *args);
          static PyObject *t_Lucene41PostingsReader_decodeTerm(t_Lucene41PostingsReader *self, PyObject *args);
          static PyObject *t_Lucene41PostingsReader_docs(t_Lucene41PostingsReader *self, PyObject *args);
          static PyObject *t_Lucene41PostingsReader_docsAndPositions(t_Lucene41PostingsReader *self, PyObject *args);
          static PyObject *t_Lucene41PostingsReader_init(t_Lucene41PostingsReader *self, PyObject *args);
          static PyObject *t_Lucene41PostingsReader_newTermState(t_Lucene41PostingsReader *self, PyObject *args);
          static PyObject *t_Lucene41PostingsReader_ramBytesUsed(t_Lucene41PostingsReader *self, PyObject *args);

          static PyMethodDef t_Lucene41PostingsReader__methods_[] = {
            DECLARE_METHOD(t_Lucene41PostingsReader, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene41PostingsReader, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene41PostingsReader, checkIntegrity, METH_VARARGS),
            DECLARE_METHOD(t_Lucene41PostingsReader, close, METH_VARARGS),
            DECLARE_METHOD(t_Lucene41PostingsReader, decodeTerm, METH_VARARGS),
            DECLARE_METHOD(t_Lucene41PostingsReader, docs, METH_VARARGS),
            DECLARE_METHOD(t_Lucene41PostingsReader, docsAndPositions, METH_VARARGS),
            DECLARE_METHOD(t_Lucene41PostingsReader, init, METH_VARARGS),
            DECLARE_METHOD(t_Lucene41PostingsReader, newTermState, METH_VARARGS),
            DECLARE_METHOD(t_Lucene41PostingsReader, ramBytesUsed, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene41PostingsReader, t_Lucene41PostingsReader, ::org::apache::lucene::codecs::PostingsReaderBase, Lucene41PostingsReader, t_Lucene41PostingsReader_init_, 0, 0, 0, 0, 0);

          void t_Lucene41PostingsReader::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene41PostingsReader), module, "Lucene41PostingsReader", 0);
          }

          void t_Lucene41PostingsReader::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene41PostingsReader).tp_dict, "class_", make_descriptor(Lucene41PostingsReader::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene41PostingsReader).tp_dict, "wrapfn_", make_descriptor(t_Lucene41PostingsReader::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene41PostingsReader).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lucene41PostingsReader_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene41PostingsReader::initializeClass, 1)))
              return NULL;
            return t_Lucene41PostingsReader::wrap_Object(Lucene41PostingsReader(((t_Lucene41PostingsReader *) arg)->object.this$));
          }
          static PyObject *t_Lucene41PostingsReader_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene41PostingsReader::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene41PostingsReader_init_(t_Lucene41PostingsReader *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::store::Directory a0((jobject) NULL);
            ::org::apache::lucene::index::FieldInfos a1((jobject) NULL);
            ::org::apache::lucene::index::SegmentInfo a2((jobject) NULL);
            ::org::apache::lucene::store::IOContext a3((jobject) NULL);
            ::java::lang::String a4((jobject) NULL);
            Lucene41PostingsReader object((jobject) NULL);

            if (!parseArgs(args, "kkkks", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::FieldInfos::initializeClass, ::org::apache::lucene::index::SegmentInfo::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2, &a3, &a4))
            {
              INT_CALL(object = Lucene41PostingsReader(a0, a1, a2, a3, a4));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_Lucene41PostingsReader_checkIntegrity(t_Lucene41PostingsReader *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.checkIntegrity());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene41PostingsReader), (PyObject *) self, "checkIntegrity", args, 2);
          }

          static PyObject *t_Lucene41PostingsReader_close(t_Lucene41PostingsReader *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.close());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene41PostingsReader), (PyObject *) self, "close", args, 2);
          }

          static PyObject *t_Lucene41PostingsReader_decodeTerm(t_Lucene41PostingsReader *self, PyObject *args)
          {
            JArray< jlong > a0((jobject) NULL);
            ::org::apache::lucene::store::DataInput a1((jobject) NULL);
            ::org::apache::lucene::index::FieldInfo a2((jobject) NULL);
            ::org::apache::lucene::codecs::BlockTermState a3((jobject) NULL);
            jboolean a4;

            if (!parseArgs(args, "[JkkkZ", ::org::apache::lucene::store::DataInput::initializeClass, ::org::apache::lucene::index::FieldInfo::initializeClass, ::org::apache::lucene::codecs::BlockTermState::initializeClass, &a0, &a1, &a2, &a3, &a4))
            {
              OBJ_CALL(self->object.decodeTerm(a0, a1, a2, a3, a4));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene41PostingsReader), (PyObject *) self, "decodeTerm", args, 2);
          }

          static PyObject *t_Lucene41PostingsReader_docs(t_Lucene41PostingsReader *self, PyObject *args)
          {
            ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
            ::org::apache::lucene::codecs::BlockTermState a1((jobject) NULL);
            ::org::apache::lucene::util::Bits a2((jobject) NULL);
            ::org::apache::lucene::index::DocsEnum a3((jobject) NULL);
            jint a4;
            ::org::apache::lucene::index::DocsEnum result((jobject) NULL);

            if (!parseArgs(args, "kkkkI", ::org::apache::lucene::index::FieldInfo::initializeClass, ::org::apache::lucene::codecs::BlockTermState::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, ::org::apache::lucene::index::DocsEnum::initializeClass, &a0, &a1, &a2, &a3, &a4))
            {
              OBJ_CALL(result = self->object.docs(a0, a1, a2, a3, a4));
              return ::org::apache::lucene::index::t_DocsEnum::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene41PostingsReader), (PyObject *) self, "docs", args, 2);
          }

          static PyObject *t_Lucene41PostingsReader_docsAndPositions(t_Lucene41PostingsReader *self, PyObject *args)
          {
            ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
            ::org::apache::lucene::codecs::BlockTermState a1((jobject) NULL);
            ::org::apache::lucene::util::Bits a2((jobject) NULL);
            ::org::apache::lucene::index::DocsAndPositionsEnum a3((jobject) NULL);
            jint a4;
            ::org::apache::lucene::index::DocsAndPositionsEnum result((jobject) NULL);

            if (!parseArgs(args, "kkkkI", ::org::apache::lucene::index::FieldInfo::initializeClass, ::org::apache::lucene::codecs::BlockTermState::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, ::org::apache::lucene::index::DocsAndPositionsEnum::initializeClass, &a0, &a1, &a2, &a3, &a4))
            {
              OBJ_CALL(result = self->object.docsAndPositions(a0, a1, a2, a3, a4));
              return ::org::apache::lucene::index::t_DocsAndPositionsEnum::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene41PostingsReader), (PyObject *) self, "docsAndPositions", args, 2);
          }

          static PyObject *t_Lucene41PostingsReader_init(t_Lucene41PostingsReader *self, PyObject *args)
          {
            ::org::apache::lucene::store::IndexInput a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::store::IndexInput::initializeClass, &a0))
            {
              OBJ_CALL(self->object.init(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene41PostingsReader), (PyObject *) self, "init", args, 2);
          }

          static PyObject *t_Lucene41PostingsReader_newTermState(t_Lucene41PostingsReader *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::BlockTermState result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.newTermState());
              return ::org::apache::lucene::codecs::t_BlockTermState::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene41PostingsReader), (PyObject *) self, "newTermState", args, 2);
          }

          static PyObject *t_Lucene41PostingsReader_ramBytesUsed(t_Lucene41PostingsReader *self, PyObject *args)
          {
            jlong result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.ramBytesUsed());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(&PY_TYPE(Lucene41PostingsReader), (PyObject *) self, "ramBytesUsed", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/MergeState$DocMap.h"
#include "org/apache/lucene/index/AtomicReader.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *MergeState$DocMap::class$ = NULL;
        jmethodID *MergeState$DocMap::mids$ = NULL;
        bool MergeState$DocMap::live$ = false;

        jclass MergeState$DocMap::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/MergeState$DocMap");

            mids$ = new jmethodID[max_mid];
            mids$[mid_build_a4668aa1] = env->getStaticMethodID(cls, "build", "(Lorg/apache/lucene/index/AtomicReader;)Lorg/apache/lucene/index/MergeState$DocMap;");
            mids$[mid_get_39c7bd23] = env->getMethodID(cls, "get", "(I)I");
            mids$[mid_hasDeletions_54c6a16a] = env->getMethodID(cls, "hasDeletions", "()Z");
            mids$[mid_maxDoc_54c6a179] = env->getMethodID(cls, "maxDoc", "()I");
            mids$[mid_numDeletedDocs_54c6a179] = env->getMethodID(cls, "numDeletedDocs", "()I");
            mids$[mid_numDocs_54c6a179] = env->getMethodID(cls, "numDocs", "()I");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        MergeState$DocMap MergeState$DocMap::build(const ::org::apache::lucene::index::AtomicReader & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return MergeState$DocMap(env->callStaticObjectMethod(cls, mids$[mid_build_a4668aa1], a0.this$));
        }

        jint MergeState$DocMap::get(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_get_39c7bd23], a0);
        }

        jboolean MergeState$DocMap::hasDeletions() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasDeletions_54c6a16a]);
        }

        jint MergeState$DocMap::maxDoc() const
        {
          return env->callIntMethod(this$, mids$[mid_maxDoc_54c6a179]);
        }

        jint MergeState$DocMap::numDeletedDocs() const
        {
          return env->callIntMethod(this$, mids$[mid_numDeletedDocs_54c6a179]);
        }

        jint MergeState$DocMap::numDocs() const
        {
          return env->callIntMethod(this$, mids$[mid_numDocs_54c6a179]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_MergeState$DocMap_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MergeState$DocMap_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MergeState$DocMap_build(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MergeState$DocMap_get(t_MergeState$DocMap *self, PyObject *arg);
        static PyObject *t_MergeState$DocMap_hasDeletions(t_MergeState$DocMap *self);
        static PyObject *t_MergeState$DocMap_maxDoc(t_MergeState$DocMap *self);
        static PyObject *t_MergeState$DocMap_numDeletedDocs(t_MergeState$DocMap *self);
        static PyObject *t_MergeState$DocMap_numDocs(t_MergeState$DocMap *self);

        static PyMethodDef t_MergeState$DocMap__methods_[] = {
          DECLARE_METHOD(t_MergeState$DocMap, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MergeState$DocMap, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MergeState$DocMap, build, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MergeState$DocMap, get, METH_O),
          DECLARE_METHOD(t_MergeState$DocMap, hasDeletions, METH_NOARGS),
          DECLARE_METHOD(t_MergeState$DocMap, maxDoc, METH_NOARGS),
          DECLARE_METHOD(t_MergeState$DocMap, numDeletedDocs, METH_NOARGS),
          DECLARE_METHOD(t_MergeState$DocMap, numDocs, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MergeState$DocMap, t_MergeState$DocMap, ::java::lang::Object, MergeState$DocMap, abstract_init, 0, 0, 0, 0, 0);

        void t_MergeState$DocMap::install(PyObject *module)
        {
          installType(&PY_TYPE(MergeState$DocMap), module, "MergeState$DocMap", 0);
        }

        void t_MergeState$DocMap::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MergeState$DocMap).tp_dict, "class_", make_descriptor(MergeState$DocMap::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MergeState$DocMap).tp_dict, "wrapfn_", make_descriptor(t_MergeState$DocMap::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MergeState$DocMap).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MergeState$DocMap_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MergeState$DocMap::initializeClass, 1)))
            return NULL;
          return t_MergeState$DocMap::wrap_Object(MergeState$DocMap(((t_MergeState$DocMap *) arg)->object.this$));
        }
        static PyObject *t_MergeState$DocMap_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MergeState$DocMap::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_MergeState$DocMap_build(PyTypeObject *type, PyObject *arg)
        {
          ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);
          MergeState$DocMap result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReader::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::MergeState$DocMap::build(a0));
            return t_MergeState$DocMap::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "build", arg);
          return NULL;
        }

        static PyObject *t_MergeState$DocMap_get(t_MergeState$DocMap *self, PyObject *arg)
        {
          jint a0;
          jint result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.get(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "get", arg);
          return NULL;
        }

        static PyObject *t_MergeState$DocMap_hasDeletions(t_MergeState$DocMap *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.hasDeletions());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_MergeState$DocMap_maxDoc(t_MergeState$DocMap *self)
        {
          jint result;
          OBJ_CALL(result = self->object.maxDoc());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_MergeState$DocMap_numDeletedDocs(t_MergeState$DocMap *self)
        {
          jint result;
          OBJ_CALL(result = self->object.numDeletedDocs());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_MergeState$DocMap_numDocs(t_MergeState$DocMap *self)
        {
          jint result;
          OBJ_CALL(result = self->object.numDocs());
          return PyInt_FromLong((long) result);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/BoostedQuery.h"
#include "org/apache/lucene/queries/function/ValueSource.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "java/util/Set.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/index/Term.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/search/Weight.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {

          ::java::lang::Class *BoostedQuery::class$ = NULL;
          jmethodID *BoostedQuery::mids$ = NULL;
          bool BoostedQuery::live$ = false;

          jclass BoostedQuery::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/BoostedQuery");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_59d41d93] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Query;Lorg/apache/lucene/queries/function/ValueSource;)V");
              mids$[mid_createWeight_367763cb] = env->getMethodID(cls, "createWeight", "(Lorg/apache/lucene/search/IndexSearcher;)Lorg/apache/lucene/search/Weight;");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_extractTerms_fb4f2b26] = env->getMethodID(cls, "extractTerms", "(Ljava/util/Set;)V");
              mids$[mid_getQuery_97e3851a] = env->getMethodID(cls, "getQuery", "()Lorg/apache/lucene/search/Query;");
              mids$[mid_getValueSource_b62b6193] = env->getMethodID(cls, "getValueSource", "()Lorg/apache/lucene/queries/function/ValueSource;");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_rewrite_7edcaa43] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/index/IndexReader;)Lorg/apache/lucene/search/Query;");
              mids$[mid_toString_97a5258f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BoostedQuery::BoostedQuery(const ::org::apache::lucene::search::Query & a0, const ::org::apache::lucene::queries::function::ValueSource & a1) : ::org::apache::lucene::search::Query(env->newObject(initializeClass, &mids$, mid_init$_59d41d93, a0.this$, a1.this$)) {}

          ::org::apache::lucene::search::Weight BoostedQuery::createWeight(const ::org::apache::lucene::search::IndexSearcher & a0) const
          {
            return ::org::apache::lucene::search::Weight(env->callObjectMethod(this$, mids$[mid_createWeight_367763cb], a0.this$));
          }

          jboolean BoostedQuery::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          void BoostedQuery::extractTerms(const ::java::util::Set & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_extractTerms_fb4f2b26], a0.this$);
          }

          ::org::apache::lucene::search::Query BoostedQuery::getQuery() const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_getQuery_97e3851a]));
          }

          ::org::apache::lucene::queries::function::ValueSource BoostedQuery::getValueSource() const
          {
            return ::org::apache::lucene::queries::function::ValueSource(env->callObjectMethod(this$, mids$[mid_getValueSource_b62b6193]));
          }

          jint BoostedQuery::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          ::org::apache::lucene::search::Query BoostedQuery::rewrite(const ::org::apache::lucene::index::IndexReader & a0) const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_rewrite_7edcaa43], a0.this$));
          }

          ::java::lang::String BoostedQuery::toString(const ::java::lang::String & a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_97a5258f], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          static PyObject *t_BoostedQuery_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BoostedQuery_instance_(PyTypeObject *type, PyObject *arg);
          static int t_BoostedQuery_init_(t_BoostedQuery *self, PyObject *args, PyObject *kwds);
          static PyObject *t_BoostedQuery_createWeight(t_BoostedQuery *self, PyObject *args);
          static PyObject *t_BoostedQuery_equals(t_BoostedQuery *self, PyObject *args);
          static PyObject *t_BoostedQuery_extractTerms(t_BoostedQuery *self, PyObject *args);
          static PyObject *t_BoostedQuery_getQuery(t_BoostedQuery *self);
          static PyObject *t_BoostedQuery_getValueSource(t_BoostedQuery *self);
          static PyObject *t_BoostedQuery_hashCode(t_BoostedQuery *self, PyObject *args);
          static PyObject *t_BoostedQuery_rewrite(t_BoostedQuery *self, PyObject *args);
          static PyObject *t_BoostedQuery_toString(t_BoostedQuery *self, PyObject *args);
          static PyObject *t_BoostedQuery_get__query(t_BoostedQuery *self, void *data);
          static PyObject *t_BoostedQuery_get__valueSource(t_BoostedQuery *self, void *data);
          static PyGetSetDef t_BoostedQuery__fields_[] = {
            DECLARE_GET_FIELD(t_BoostedQuery, query),
            DECLARE_GET_FIELD(t_BoostedQuery, valueSource),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_BoostedQuery__methods_[] = {
            DECLARE_METHOD(t_BoostedQuery, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BoostedQuery, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BoostedQuery, createWeight, METH_VARARGS),
            DECLARE_METHOD(t_BoostedQuery, equals, METH_VARARGS),
            DECLARE_METHOD(t_BoostedQuery, extractTerms, METH_VARARGS),
            DECLARE_METHOD(t_BoostedQuery, getQuery, METH_NOARGS),
            DECLARE_METHOD(t_BoostedQuery, getValueSource, METH_NOARGS),
            DECLARE_METHOD(t_BoostedQuery, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_BoostedQuery, rewrite, METH_VARARGS),
            DECLARE_METHOD(t_BoostedQuery, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(BoostedQuery, t_BoostedQuery, ::org::apache::lucene::search::Query, BoostedQuery, t_BoostedQuery_init_, 0, 0, t_BoostedQuery__fields_, 0, 0);

          void t_BoostedQuery::install(PyObject *module)
          {
            installType(&PY_TYPE(BoostedQuery), module, "BoostedQuery", 0);
          }

          void t_BoostedQuery::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(BoostedQuery).tp_dict, "class_", make_descriptor(BoostedQuery::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(BoostedQuery).tp_dict, "wrapfn_", make_descriptor(t_BoostedQuery::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(BoostedQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_BoostedQuery_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BoostedQuery::initializeClass, 1)))
              return NULL;
            return t_BoostedQuery::wrap_Object(BoostedQuery(((t_BoostedQuery *) arg)->object.this$));
          }
          static PyObject *t_BoostedQuery_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BoostedQuery::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_BoostedQuery_init_(t_BoostedQuery *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::search::Query a0((jobject) NULL);
            ::org::apache::lucene::queries::function::ValueSource a1((jobject) NULL);
            BoostedQuery object((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::queries::function::ValueSource::initializeClass, &a0, &a1))
            {
              INT_CALL(object = BoostedQuery(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_BoostedQuery_createWeight(t_BoostedQuery *self, PyObject *args)
          {
            ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
            ::org::apache::lucene::search::Weight result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.createWeight(a0));
              return ::org::apache::lucene::search::t_Weight::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(BoostedQuery), (PyObject *) self, "createWeight", args, 2);
          }

          static PyObject *t_BoostedQuery_equals(t_BoostedQuery *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(BoostedQuery), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_BoostedQuery_extractTerms(t_BoostedQuery *self, PyObject *args)
          {
            ::java::util::Set a0((jobject) NULL);
            PyTypeObject **p0;

            if (!parseArgs(args, "K", ::java::util::Set::initializeClass, &a0, &p0, ::java::util::t_Set::parameters_))
            {
              OBJ_CALL(self->object.extractTerms(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(BoostedQuery), (PyObject *) self, "extractTerms", args, 2);
          }

          static PyObject *t_BoostedQuery_getQuery(t_BoostedQuery *self)
          {
            ::org::apache::lucene::search::Query result((jobject) NULL);
            OBJ_CALL(result = self->object.getQuery());
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          static PyObject *t_BoostedQuery_getValueSource(t_BoostedQuery *self)
          {
            ::org::apache::lucene::queries::function::ValueSource result((jobject) NULL);
            OBJ_CALL(result = self->object.getValueSource());
            return ::org::apache::lucene::queries::function::t_ValueSource::wrap_Object(result);
          }

          static PyObject *t_BoostedQuery_hashCode(t_BoostedQuery *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(BoostedQuery), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_BoostedQuery_rewrite(t_BoostedQuery *self, PyObject *args)
          {
            ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.rewrite(a0));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(BoostedQuery), (PyObject *) self, "rewrite", args, 2);
          }

          static PyObject *t_BoostedQuery_toString(t_BoostedQuery *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = self->object.toString(a0));
              return j2p(result);
            }

            return callSuper(&PY_TYPE(BoostedQuery), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_BoostedQuery_get__query(t_BoostedQuery *self, void *data)
          {
            ::org::apache::lucene::search::Query value((jobject) NULL);
            OBJ_CALL(value = self->object.getQuery());
            return ::org::apache::lucene::search::t_Query::wrap_Object(value);
          }

          static PyObject *t_BoostedQuery_get__valueSource(t_BoostedQuery *self, void *data)
          {
            ::org::apache::lucene::queries::function::ValueSource value((jobject) NULL);
            OBJ_CALL(value = self->object.getValueSource());
            return ::org::apache::lucene::queries::function::t_ValueSource::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spans/NearSpansUnordered.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/index/TermContext.h"
#include "java/lang/Class.h"
#include "java/util/Collection.h"
#include "org/apache/lucene/util/Bits.h"
#include "org/apache/lucene/index/Term.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/spans/SpanNearQuery.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {

          ::java::lang::Class *NearSpansUnordered::class$ = NULL;
          jmethodID *NearSpansUnordered::mids$ = NULL;
          bool NearSpansUnordered::live$ = false;

          jclass NearSpansUnordered::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spans/NearSpansUnordered");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_a9b434a2] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/spans/SpanNearQuery;Lorg/apache/lucene/index/AtomicReaderContext;Lorg/apache/lucene/util/Bits;Ljava/util/Map;)V");
              mids$[mid_cost_54c6a17a] = env->getMethodID(cls, "cost", "()J");
              mids$[mid_doc_54c6a179] = env->getMethodID(cls, "doc", "()I");
              mids$[mid_end_54c6a179] = env->getMethodID(cls, "end", "()I");
              mids$[mid_getPayload_2d2d7de4] = env->getMethodID(cls, "getPayload", "()Ljava/util/Collection;");
              mids$[mid_getSubSpans_dd49b8eb] = env->getMethodID(cls, "getSubSpans", "()[Lorg/apache/lucene/search/spans/Spans;");
              mids$[mid_isPayloadAvailable_54c6a16a] = env->getMethodID(cls, "isPayloadAvailable", "()Z");
              mids$[mid_next_54c6a16a] = env->getMethodID(cls, "next", "()Z");
              mids$[mid_skipTo_39c7bd30] = env->getMethodID(cls, "skipTo", "(I)Z");
              mids$[mid_start_54c6a179] = env->getMethodID(cls, "start", "()I");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          NearSpansUnordered::NearSpansUnordered(const ::org::apache::lucene::search::spans::SpanNearQuery & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1, const ::org::apache::lucene::util::Bits & a2, const ::java::util::Map & a3) : ::org::apache::lucene::search::spans::Spans(env->newObject(initializeClass, &mids$, mid_init$_a9b434a2, a0.this$, a1.this$, a2.this$, a3.this$)) {}

          jlong NearSpansUnordered::cost() const
          {
            return env->callLongMethod(this$, mids$[mid_cost_54c6a17a]);
          }

          jint NearSpansUnordered::doc() const
          {
            return env->callIntMethod(this$, mids$[mid_doc_54c6a179]);
          }

          jint NearSpansUnordered::end() const
          {
            return env->callIntMethod(this$, mids$[mid_end_54c6a179]);
          }

          ::java::util::Collection NearSpansUnordered::getPayload() const
          {
            return ::java::util::Collection(env->callObjectMethod(this$, mids$[mid_getPayload_2d2d7de4]));
          }

          JArray< ::org::apache::lucene::search::spans::Spans > NearSpansUnordered::getSubSpans() const
          {
            return JArray< ::org::apache::lucene::search::spans::Spans >(env->callObjectMethod(this$, mids$[mid_getSubSpans_dd49b8eb]));
          }

          jboolean NearSpansUnordered::isPayloadAvailable() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isPayloadAvailable_54c6a16a]);
          }

          jboolean NearSpansUnordered::next() const
          {
            return env->callBooleanMethod(this$, mids$[mid_next_54c6a16a]);
          }

          jboolean NearSpansUnordered::skipTo(jint a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_skipTo_39c7bd30], a0);
          }

          jint NearSpansUnordered::start() const
          {
            return env->callIntMethod(this$, mids$[mid_start_54c6a179]);
          }

          ::java::lang::String NearSpansUnordered::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {
          static PyObject *t_NearSpansUnordered_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_NearSpansUnordered_instance_(PyTypeObject *type, PyObject *arg);
          static int t_NearSpansUnordered_init_(t_NearSpansUnordered *self, PyObject *args, PyObject *kwds);
          static PyObject *t_NearSpansUnordered_cost(t_NearSpansUnordered *self, PyObject *args);
          static PyObject *t_NearSpansUnordered_doc(t_NearSpansUnordered *self, PyObject *args);
          static PyObject *t_NearSpansUnordered_end(t_NearSpansUnordered *self, PyObject *args);
          static PyObject *t_NearSpansUnordered_getPayload(t_NearSpansUnordered *self, PyObject *args);
          static PyObject *t_NearSpansUnordered_getSubSpans(t_NearSpansUnordered *self);
          static PyObject *t_NearSpansUnordered_isPayloadAvailable(t_NearSpansUnordered *self, PyObject *args);
          static PyObject *t_NearSpansUnordered_next(t_NearSpansUnordered *self, PyObject *args);
          static PyObject *t_NearSpansUnordered_skipTo(t_NearSpansUnordered *self, PyObject *args);
          static PyObject *t_NearSpansUnordered_start(t_NearSpansUnordered *self, PyObject *args);
          static PyObject *t_NearSpansUnordered_toString(t_NearSpansUnordered *self, PyObject *args);
          static PyObject *t_NearSpansUnordered_get__payload(t_NearSpansUnordered *self, void *data);
          static PyObject *t_NearSpansUnordered_get__payloadAvailable(t_NearSpansUnordered *self, void *data);
          static PyObject *t_NearSpansUnordered_get__subSpans(t_NearSpansUnordered *self, void *data);
          static PyGetSetDef t_NearSpansUnordered__fields_[] = {
            DECLARE_GET_FIELD(t_NearSpansUnordered, payload),
            DECLARE_GET_FIELD(t_NearSpansUnordered, payloadAvailable),
            DECLARE_GET_FIELD(t_NearSpansUnordered, subSpans),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_NearSpansUnordered__methods_[] = {
            DECLARE_METHOD(t_NearSpansUnordered, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NearSpansUnordered, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NearSpansUnordered, cost, METH_VARARGS),
            DECLARE_METHOD(t_NearSpansUnordered, doc, METH_VARARGS),
            DECLARE_METHOD(t_NearSpansUnordered, end, METH_VARARGS),
            DECLARE_METHOD(t_NearSpansUnordered, getPayload, METH_VARARGS),
            DECLARE_METHOD(t_NearSpansUnordered, getSubSpans, METH_NOARGS),
            DECLARE_METHOD(t_NearSpansUnordered, isPayloadAvailable, METH_VARARGS),
            DECLARE_METHOD(t_NearSpansUnordered, next, METH_VARARGS),
            DECLARE_METHOD(t_NearSpansUnordered, skipTo, METH_VARARGS),
            DECLARE_METHOD(t_NearSpansUnordered, start, METH_VARARGS),
            DECLARE_METHOD(t_NearSpansUnordered, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(NearSpansUnordered, t_NearSpansUnordered, ::org::apache::lucene::search::spans::Spans, NearSpansUnordered, t_NearSpansUnordered_init_, 0, 0, t_NearSpansUnordered__fields_, 0, 0);

          void t_NearSpansUnordered::install(PyObject *module)
          {
            installType(&PY_TYPE(NearSpansUnordered), module, "NearSpansUnordered", 0);
          }

          void t_NearSpansUnordered::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(NearSpansUnordered).tp_dict, "class_", make_descriptor(NearSpansUnordered::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(NearSpansUnordered).tp_dict, "wrapfn_", make_descriptor(t_NearSpansUnordered::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(NearSpansUnordered).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_NearSpansUnordered_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, NearSpansUnordered::initializeClass, 1)))
              return NULL;
            return t_NearSpansUnordered::wrap_Object(NearSpansUnordered(((t_NearSpansUnordered *) arg)->object.this$));
          }
          static PyObject *t_NearSpansUnordered_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, NearSpansUnordered::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_NearSpansUnordered_init_(t_NearSpansUnordered *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::search::spans::SpanNearQuery a0((jobject) NULL);
            ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
            ::org::apache::lucene::util::Bits a2((jobject) NULL);
            ::java::util::Map a3((jobject) NULL);
            PyTypeObject **p3;
            NearSpansUnordered object((jobject) NULL);

            if (!parseArgs(args, "kkkK", ::org::apache::lucene::search::spans::SpanNearQuery::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, ::java::util::Map::initializeClass, &a0, &a1, &a2, &a3, &p3, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = NearSpansUnordered(a0, a1, a2, a3));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_NearSpansUnordered_cost(t_NearSpansUnordered *self, PyObject *args)
          {
            jlong result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.cost());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(&PY_TYPE(NearSpansUnordered), (PyObject *) self, "cost", args, 2);
          }

          static PyObject *t_NearSpansUnordered_doc(t_NearSpansUnordered *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.doc());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(NearSpansUnordered), (PyObject *) self, "doc", args, 2);
          }

          static PyObject *t_NearSpansUnordered_end(t_NearSpansUnordered *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.end());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(NearSpansUnordered), (PyObject *) self, "end", args, 2);
          }

          static PyObject *t_NearSpansUnordered_getPayload(t_NearSpansUnordered *self, PyObject *args)
          {
            ::java::util::Collection result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getPayload());
              return ::java::util::t_Collection::wrap_Object(result, &::java::lang::PY_TYPE(Object));
            }

            return callSuper(&PY_TYPE(NearSpansUnordered), (PyObject *) self, "getPayload", args, 2);
          }

          static PyObject *t_NearSpansUnordered_getSubSpans(t_NearSpansUnordered *self)
          {
            JArray< ::org::apache::lucene::search::spans::Spans > result((jobject) NULL);
            OBJ_CALL(result = self->object.getSubSpans());
            return JArray<jobject>(result.this$).wrap(::org::apache::lucene::search::spans::t_Spans::wrap_jobject);
          }

          static PyObject *t_NearSpansUnordered_isPayloadAvailable(t_NearSpansUnordered *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.isPayloadAvailable());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(NearSpansUnordered), (PyObject *) self, "isPayloadAvailable", args, 2);
          }

          static PyObject *t_NearSpansUnordered_next(t_NearSpansUnordered *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.next());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(NearSpansUnordered), (PyObject *) self, "next", args, 2);
          }

          static PyObject *t_NearSpansUnordered_skipTo(t_NearSpansUnordered *self, PyObject *args)
          {
            jint a0;
            jboolean result;

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(result = self->object.skipTo(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(NearSpansUnordered), (PyObject *) self, "skipTo", args, 2);
          }

          static PyObject *t_NearSpansUnordered_start(t_NearSpansUnordered *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.start());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(NearSpansUnordered), (PyObject *) self, "start", args, 2);
          }

          static PyObject *t_NearSpansUnordered_toString(t_NearSpansUnordered *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(NearSpansUnordered), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_NearSpansUnordered_get__payload(t_NearSpansUnordered *self, void *data)
          {
            ::java::util::Collection value((jobject) NULL);
            OBJ_CALL(value = self->object.getPayload());
            return ::java::util::t_Collection::wrap_Object(value);
          }

          static PyObject *t_NearSpansUnordered_get__payloadAvailable(t_NearSpansUnordered *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isPayloadAvailable());
            Py_RETURN_BOOL(value);
          }

          static PyObject *t_NearSpansUnordered_get__subSpans(t_NearSpansUnordered *self, void *data)
          {
            JArray< ::org::apache::lucene::search::spans::Spans > value((jobject) NULL);
            OBJ_CALL(value = self->object.getSubSpans());
            return JArray<jobject>(value.this$).wrap(::org::apache::lucene::search::spans::t_Spans::wrap_jobject);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/fst/FST$Arc.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {

          ::java::lang::Class *FST$Arc::class$ = NULL;
          jmethodID *FST$Arc::mids$ = NULL;
          jfieldID *FST$Arc::fids$ = NULL;
          bool FST$Arc::live$ = false;

          jclass FST$Arc::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/fst/FST$Arc");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_copyFrom_8c07e6cb] = env->getMethodID(cls, "copyFrom", "(Lorg/apache/lucene/util/fst/FST$Arc;)Lorg/apache/lucene/util/fst/FST$Arc;");
              mids$[mid_isFinal_54c6a16a] = env->getMethodID(cls, "isFinal", "()Z");
              mids$[mid_isLast_54c6a16a] = env->getMethodID(cls, "isLast", "()Z");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              fids$ = new jfieldID[max_fid];
              fids$[fid_arcIdx] = env->getFieldID(cls, "arcIdx", "I");
              fids$[fid_bytesPerArc] = env->getFieldID(cls, "bytesPerArc", "I");
              fids$[fid_label] = env->getFieldID(cls, "label", "I");
              fids$[fid_nextFinalOutput] = env->getFieldID(cls, "nextFinalOutput", "Ljava/lang/Object;");
              fids$[fid_numArcs] = env->getFieldID(cls, "numArcs", "I");
              fids$[fid_output] = env->getFieldID(cls, "output", "Ljava/lang/Object;");
              fids$[fid_posArcsStart] = env->getFieldID(cls, "posArcsStart", "J");
              fids$[fid_target] = env->getFieldID(cls, "target", "J");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FST$Arc::FST$Arc() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          FST$Arc FST$Arc::copyFrom(const FST$Arc & a0) const
          {
            return FST$Arc(env->callObjectMethod(this$, mids$[mid_copyFrom_8c07e6cb], a0.this$));
          }

          jboolean FST$Arc::isFinal() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isFinal_54c6a16a]);
          }

          jboolean FST$Arc::isLast() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isLast_54c6a16a]);
          }

          ::java::lang::String FST$Arc::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }

          jint FST$Arc::_get_arcIdx() const
          {
            return env->getIntField(this$, fids$[fid_arcIdx]);
          }

          void FST$Arc::_set_arcIdx(jint a0) const
          {
            env->setIntField(this$, fids$[fid_arcIdx], a0);
          }

          jint FST$Arc::_get_bytesPerArc() const
          {
            return env->getIntField(this$, fids$[fid_bytesPerArc]);
          }

          void FST$Arc::_set_bytesPerArc(jint a0) const
          {
            env->setIntField(this$, fids$[fid_bytesPerArc], a0);
          }

          jint FST$Arc::_get_label() const
          {
            return env->getIntField(this$, fids$[fid_label]);
          }

          void FST$Arc::_set_label(jint a0) const
          {
            env->setIntField(this$, fids$[fid_label], a0);
          }

          ::java::lang::Object FST$Arc::_get_nextFinalOutput() const
          {
            return ::java::lang::Object(env->getObjectField(this$, fids$[fid_nextFinalOutput]));
          }

          void FST$Arc::_set_nextFinalOutput(const ::java::lang::Object & a0) const
          {
            env->setObjectField(this$, fids$[fid_nextFinalOutput], a0.this$);
          }

          jint FST$Arc::_get_numArcs() const
          {
            return env->getIntField(this$, fids$[fid_numArcs]);
          }

          void FST$Arc::_set_numArcs(jint a0) const
          {
            env->setIntField(this$, fids$[fid_numArcs], a0);
          }

          ::java::lang::Object FST$Arc::_get_output() const
          {
            return ::java::lang::Object(env->getObjectField(this$, fids$[fid_output]));
          }

          void FST$Arc::_set_output(const ::java::lang::Object & a0) const
          {
            env->setObjectField(this$, fids$[fid_output], a0.this$);
          }

          jlong FST$Arc::_get_posArcsStart() const
          {
            return env->getLongField(this$, fids$[fid_posArcsStart]);
          }

          void FST$Arc::_set_posArcsStart(jlong a0) const
          {
            env->setLongField(this$, fids$[fid_posArcsStart], a0);
          }

          jlong FST$Arc::_get_target() const
          {
            return env->getLongField(this$, fids$[fid_target]);
          }

          void FST$Arc::_set_target(jlong a0) const
          {
            env->setLongField(this$, fids$[fid_target], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {
          static PyObject *t_FST$Arc_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FST$Arc_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FST$Arc_of_(t_FST$Arc *self, PyObject *args);
          static int t_FST$Arc_init_(t_FST$Arc *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FST$Arc_copyFrom(t_FST$Arc *self, PyObject *arg);
          static PyObject *t_FST$Arc_isFinal(t_FST$Arc *self);
          static PyObject *t_FST$Arc_isLast(t_FST$Arc *self);
          static PyObject *t_FST$Arc_toString(t_FST$Arc *self, PyObject *args);
          static PyObject *t_FST$Arc_get__arcIdx(t_FST$Arc *self, void *data);
          static int t_FST$Arc_set__arcIdx(t_FST$Arc *self, PyObject *arg, void *data);
          static PyObject *t_FST$Arc_get__bytesPerArc(t_FST$Arc *self, void *data);
          static int t_FST$Arc_set__bytesPerArc(t_FST$Arc *self, PyObject *arg, void *data);
          static PyObject *t_FST$Arc_get__label(t_FST$Arc *self, void *data);
          static int t_FST$Arc_set__label(t_FST$Arc *self, PyObject *arg, void *data);
          static PyObject *t_FST$Arc_get__nextFinalOutput(t_FST$Arc *self, void *data);
          static int t_FST$Arc_set__nextFinalOutput(t_FST$Arc *self, PyObject *arg, void *data);
          static PyObject *t_FST$Arc_get__numArcs(t_FST$Arc *self, void *data);
          static int t_FST$Arc_set__numArcs(t_FST$Arc *self, PyObject *arg, void *data);
          static PyObject *t_FST$Arc_get__output(t_FST$Arc *self, void *data);
          static int t_FST$Arc_set__output(t_FST$Arc *self, PyObject *arg, void *data);
          static PyObject *t_FST$Arc_get__posArcsStart(t_FST$Arc *self, void *data);
          static int t_FST$Arc_set__posArcsStart(t_FST$Arc *self, PyObject *arg, void *data);
          static PyObject *t_FST$Arc_get__target(t_FST$Arc *self, void *data);
          static int t_FST$Arc_set__target(t_FST$Arc *self, PyObject *arg, void *data);

          static PyObject *t_FST$Arc_get__final(t_FST$Arc *self, void *data);
          static PyObject *t_FST$Arc_get__last(t_FST$Arc *self, void *data);
          static PyObject *t_FST$Arc_get__parameters_(t_FST$Arc *self, void *data);
          static PyGetSetDef t_FST$Arc__fields_[] = {
            DECLARE_GETSET_FIELD(t_FST$Arc, arcIdx),
            DECLARE_GETSET_FIELD(t_FST$Arc, bytesPerArc),
            DECLARE_GETSET_FIELD(t_FST$Arc, label),
            DECLARE_GETSET_FIELD(t_FST$Arc, nextFinalOutput),
            DECLARE_GETSET_FIELD(t_FST$Arc, numArcs),
            DECLARE_GETSET_FIELD(t_FST$Arc, output),
            DECLARE_GETSET_FIELD(t_FST$Arc, posArcsStart),
            DECLARE_GETSET_FIELD(t_FST$Arc, target),
            DECLARE_GET_FIELD(t_FST$Arc, final),
            DECLARE_GET_FIELD(t_FST$Arc, last),
            DECLARE_GET_FIELD(t_FST$Arc, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_FST$Arc__methods_[] = {
            DECLARE_METHOD(t_FST$Arc, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FST$Arc, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FST$Arc, of_, METH_VARARGS),
            DECLARE_METHOD(t_FST$Arc, copyFrom, METH_O),
            DECLARE_METHOD(t_FST$Arc, isFinal, METH_NOARGS),
            DECLARE_METHOD(t_FST$Arc, isLast, METH_NOARGS),
            DECLARE_METHOD(t_FST$Arc, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FST$Arc, t_FST$Arc, ::java::lang::Object, FST$Arc, t_FST$Arc_init_, 0, 0, t_FST$Arc__fields_, 0, 0);
          PyObject *t_FST$Arc::wrap_Object(const FST$Arc& object, PyTypeObject *p0)
          {
            PyObject *obj = t_FST$Arc::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_FST$Arc *self = (t_FST$Arc *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_FST$Arc::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_FST$Arc::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_FST$Arc *self = (t_FST$Arc *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_FST$Arc::install(PyObject *module)
          {
            installType(&PY_TYPE(FST$Arc), module, "FST$Arc", 0);
          }

          void t_FST$Arc::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FST$Arc).tp_dict, "class_", make_descriptor(FST$Arc::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FST$Arc).tp_dict, "wrapfn_", make_descriptor(t_FST$Arc::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FST$Arc).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FST$Arc_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FST$Arc::initializeClass, 1)))
              return NULL;
            return t_FST$Arc::wrap_Object(FST$Arc(((t_FST$Arc *) arg)->object.this$));
          }
          static PyObject *t_FST$Arc_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FST$Arc::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_FST$Arc_of_(t_FST$Arc *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_FST$Arc_init_(t_FST$Arc *self, PyObject *args, PyObject *kwds)
          {
            FST$Arc object((jobject) NULL);

            INT_CALL(object = FST$Arc());
            self->object = object;

            return 0;
          }

          static PyObject *t_FST$Arc_copyFrom(t_FST$Arc *self, PyObject *arg)
          {
            FST$Arc a0((jobject) NULL);
            PyTypeObject **p0;
            FST$Arc result((jobject) NULL);

            if (!parseArg(arg, "K", FST$Arc::initializeClass, &a0, &p0, t_FST$Arc::parameters_))
            {
              OBJ_CALL(result = self->object.copyFrom(a0));
              return t_FST$Arc::wrap_Object(result, self->parameters[0]);
            }

            PyErr_SetArgsError((PyObject *) self, "copyFrom", arg);
            return NULL;
          }

          static PyObject *t_FST$Arc_isFinal(t_FST$Arc *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isFinal());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_FST$Arc_isLast(t_FST$Arc *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isLast());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_FST$Arc_toString(t_FST$Arc *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(FST$Arc), (PyObject *) self, "toString", args, 2);
          }
          static PyObject *t_FST$Arc_get__parameters_(t_FST$Arc *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_FST$Arc_get__arcIdx(t_FST$Arc *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object._get_arcIdx());
            return PyInt_FromLong((long) value);
          }
          static int t_FST$Arc_set__arcIdx(t_FST$Arc *self, PyObject *arg, void *data)
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object._set_arcIdx(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "arcIdx", arg);
            return -1;
          }

          static PyObject *t_FST$Arc_get__bytesPerArc(t_FST$Arc *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object._get_bytesPerArc());
            return PyInt_FromLong((long) value);
          }
          static int t_FST$Arc_set__bytesPerArc(t_FST$Arc *self, PyObject *arg, void *data)
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object._set_bytesPerArc(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "bytesPerArc", arg);
            return -1;
          }

          static PyObject *t_FST$Arc_get__label(t_FST$Arc *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object._get_label());
            return PyInt_FromLong((long) value);
          }
          static int t_FST$Arc_set__label(t_FST$Arc *self, PyObject *arg, void *data)
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object._set_label(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "label", arg);
            return -1;
          }

          static PyObject *t_FST$Arc_get__nextFinalOutput(t_FST$Arc *self, void *data)
          {
            ::java::lang::Object value((jobject) NULL);
            OBJ_CALL(value = self->object._get_nextFinalOutput());
            return ::java::lang::t_Object::wrap_Object(value);
          }
          static int t_FST$Arc_set__nextFinalOutput(t_FST$Arc *self, PyObject *arg, void *data)
          {
            ::java::lang::Object value((jobject) NULL);
            if (!parseArg(arg, "o", &value))
            {
              INT_CALL(self->object._set_nextFinalOutput(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "nextFinalOutput", arg);
            return -1;
          }

          static PyObject *t_FST$Arc_get__numArcs(t_FST$Arc *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object._get_numArcs());
            return PyInt_FromLong((long) value);
          }
          static int t_FST$Arc_set__numArcs(t_FST$Arc *self, PyObject *arg, void *data)
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object._set_numArcs(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "numArcs", arg);
            return -1;
          }

          static PyObject *t_FST$Arc_get__output(t_FST$Arc *self, void *data)
          {
            ::java::lang::Object value((jobject) NULL);
            OBJ_CALL(value = self->object._get_output());
            return ::java::lang::t_Object::wrap_Object(value);
          }
          static int t_FST$Arc_set__output(t_FST$Arc *self, PyObject *arg, void *data)
          {
            ::java::lang::Object value((jobject) NULL);
            if (!parseArg(arg, "o", &value))
            {
              INT_CALL(self->object._set_output(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "output", arg);
            return -1;
          }

          static PyObject *t_FST$Arc_get__posArcsStart(t_FST$Arc *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object._get_posArcsStart());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }
          static int t_FST$Arc_set__posArcsStart(t_FST$Arc *self, PyObject *arg, void *data)
          {
            jlong value;
            if (!parseArg(arg, "J", &value))
            {
              INT_CALL(self->object._set_posArcsStart(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "posArcsStart", arg);
            return -1;
          }

          static PyObject *t_FST$Arc_get__target(t_FST$Arc *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object._get_target());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }
          static int t_FST$Arc_set__target(t_FST$Arc *self, PyObject *arg, void *data)
          {
            jlong value;
            if (!parseArg(arg, "J", &value))
            {
              INT_CALL(self->object._set_target(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "target", arg);
            return -1;
          }

          static PyObject *t_FST$Arc_get__final(t_FST$Arc *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isFinal());
            Py_RETURN_BOOL(value);
          }

          static PyObject *t_FST$Arc_get__last(t_FST$Arc *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isLast());
            Py_RETURN_BOOL(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/TermState.h"
#include "java/lang/Cloneable.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *TermState::class$ = NULL;
        jmethodID *TermState::mids$ = NULL;
        bool TermState::live$ = false;

        jclass TermState::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/TermState");

            mids$ = new jmethodID[max_mid];
            mids$[mid_clone_3e41fede] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/index/TermState;");
            mids$[mid_copyFrom_d506ca07] = env->getMethodID(cls, "copyFrom", "(Lorg/apache/lucene/index/TermState;)V");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        TermState TermState::clone() const
        {
          return TermState(env->callObjectMethod(this$, mids$[mid_clone_3e41fede]));
        }

        void TermState::copyFrom(const TermState & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_copyFrom_d506ca07], a0.this$);
        }

        ::java::lang::String TermState::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_TermState_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TermState_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TermState_clone(t_TermState *self);
        static PyObject *t_TermState_copyFrom(t_TermState *self, PyObject *arg);
        static PyObject *t_TermState_toString(t_TermState *self, PyObject *args);

        static PyMethodDef t_TermState__methods_[] = {
          DECLARE_METHOD(t_TermState, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TermState, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TermState, clone, METH_NOARGS),
          DECLARE_METHOD(t_TermState, copyFrom, METH_O),
          DECLARE_METHOD(t_TermState, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TermState, t_TermState, ::java::lang::Object, TermState, abstract_init, 0, 0, 0, 0, 0);

        void t_TermState::install(PyObject *module)
        {
          installType(&PY_TYPE(TermState), module, "TermState", 0);
        }

        void t_TermState::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TermState).tp_dict, "class_", make_descriptor(TermState::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TermState).tp_dict, "wrapfn_", make_descriptor(t_TermState::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TermState).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TermState_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TermState::initializeClass, 1)))
            return NULL;
          return t_TermState::wrap_Object(TermState(((t_TermState *) arg)->object.this$));
        }
        static PyObject *t_TermState_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TermState::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_TermState_clone(t_TermState *self)
        {
          TermState result((jobject) NULL);
          OBJ_CALL(result = self->object.clone());
          return t_TermState::wrap_Object(result);
        }

        static PyObject *t_TermState_copyFrom(t_TermState *self, PyObject *arg)
        {
          TermState a0((jobject) NULL);

          if (!parseArg(arg, "k", TermState::initializeClass, &a0))
          {
            OBJ_CALL(self->object.copyFrom(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "copyFrom", arg);
          return NULL;
        }

        static PyObject *t_TermState_toString(t_TermState *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(TermState), (PyObject *) self, "toString", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/tokenattributes/PositionLengthAttribute.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {

          ::java::lang::Class *PositionLengthAttribute::class$ = NULL;
          jmethodID *PositionLengthAttribute::mids$ = NULL;
          bool PositionLengthAttribute::live$ = false;

          jclass PositionLengthAttribute::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/tokenattributes/PositionLengthAttribute");

              mids$ = new jmethodID[max_mid];
              mids$[mid_getPositionLength_54c6a179] = env->getMethodID(cls, "getPositionLength", "()I");
              mids$[mid_setPositionLength_39c7bd3c] = env->getMethodID(cls, "setPositionLength", "(I)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jint PositionLengthAttribute::getPositionLength() const
          {
            return env->callIntMethod(this$, mids$[mid_getPositionLength_54c6a179]);
          }

          void PositionLengthAttribute::setPositionLength(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setPositionLength_39c7bd3c], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {
          static PyObject *t_PositionLengthAttribute_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PositionLengthAttribute_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PositionLengthAttribute_getPositionLength(t_PositionLengthAttribute *self);
          static PyObject *t_PositionLengthAttribute_setPositionLength(t_PositionLengthAttribute *self, PyObject *arg);
          static PyObject *t_PositionLengthAttribute_get__positionLength(t_PositionLengthAttribute *self, void *data);
          static int t_PositionLengthAttribute_set__positionLength(t_PositionLengthAttribute *self, PyObject *arg, void *data);
          static PyGetSetDef t_PositionLengthAttribute__fields_[] = {
            DECLARE_GETSET_FIELD(t_PositionLengthAttribute, positionLength),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_PositionLengthAttribute__methods_[] = {
            DECLARE_METHOD(t_PositionLengthAttribute, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PositionLengthAttribute, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PositionLengthAttribute, getPositionLength, METH_NOARGS),
            DECLARE_METHOD(t_PositionLengthAttribute, setPositionLength, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PositionLengthAttribute, t_PositionLengthAttribute, ::org::apache::lucene::util::Attribute, PositionLengthAttribute, abstract_init, 0, 0, t_PositionLengthAttribute__fields_, 0, 0);

          void t_PositionLengthAttribute::install(PyObject *module)
          {
            installType(&PY_TYPE(PositionLengthAttribute), module, "PositionLengthAttribute", 0);
          }

          void t_PositionLengthAttribute::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PositionLengthAttribute).tp_dict, "class_", make_descriptor(PositionLengthAttribute::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PositionLengthAttribute).tp_dict, "wrapfn_", make_descriptor(t_PositionLengthAttribute::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PositionLengthAttribute).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PositionLengthAttribute_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PositionLengthAttribute::initializeClass, 1)))
              return NULL;
            return t_PositionLengthAttribute::wrap_Object(PositionLengthAttribute(((t_PositionLengthAttribute *) arg)->object.this$));
          }
          static PyObject *t_PositionLengthAttribute_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PositionLengthAttribute::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_PositionLengthAttribute_getPositionLength(t_PositionLengthAttribute *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getPositionLength());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_PositionLengthAttribute_setPositionLength(t_PositionLengthAttribute *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setPositionLength(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setPositionLength", arg);
            return NULL;
          }

          static PyObject *t_PositionLengthAttribute_get__positionLength(t_PositionLengthAttribute *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getPositionLength());
            return PyInt_FromLong((long) value);
          }
          static int t_PositionLengthAttribute_set__positionLength(t_PositionLengthAttribute *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setPositionLength(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "positionLength", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/util/ResourceLoaderAware.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/util/ResourceLoader.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {

          ::java::lang::Class *ResourceLoaderAware::class$ = NULL;
          jmethodID *ResourceLoaderAware::mids$ = NULL;
          bool ResourceLoaderAware::live$ = false;

          jclass ResourceLoaderAware::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/util/ResourceLoaderAware");

              mids$ = new jmethodID[max_mid];
              mids$[mid_inform_d6a4bc97] = env->getMethodID(cls, "inform", "(Lorg/apache/lucene/analysis/util/ResourceLoader;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          void ResourceLoaderAware::inform(const ::org::apache::lucene::analysis::util::ResourceLoader & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_inform_d6a4bc97], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {
          static PyObject *t_ResourceLoaderAware_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ResourceLoaderAware_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ResourceLoaderAware_inform(t_ResourceLoaderAware *self, PyObject *arg);

          static PyMethodDef t_ResourceLoaderAware__methods_[] = {
            DECLARE_METHOD(t_ResourceLoaderAware, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ResourceLoaderAware, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ResourceLoaderAware, inform, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ResourceLoaderAware, t_ResourceLoaderAware, ::java::lang::Object, ResourceLoaderAware, abstract_init, 0, 0, 0, 0, 0);

          void t_ResourceLoaderAware::install(PyObject *module)
          {
            installType(&PY_TYPE(ResourceLoaderAware), module, "ResourceLoaderAware", 0);
          }

          void t_ResourceLoaderAware::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ResourceLoaderAware).tp_dict, "class_", make_descriptor(ResourceLoaderAware::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ResourceLoaderAware).tp_dict, "wrapfn_", make_descriptor(t_ResourceLoaderAware::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ResourceLoaderAware).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ResourceLoaderAware_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ResourceLoaderAware::initializeClass, 1)))
              return NULL;
            return t_ResourceLoaderAware::wrap_Object(ResourceLoaderAware(((t_ResourceLoaderAware *) arg)->object.this$));
          }
          static PyObject *t_ResourceLoaderAware_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ResourceLoaderAware::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_ResourceLoaderAware_inform(t_ResourceLoaderAware *self, PyObject *arg)
          {
            ::org::apache::lucene::analysis::util::ResourceLoader a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::analysis::util::ResourceLoader::initializeClass, &a0))
            {
              OBJ_CALL(self->object.inform(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "inform", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/RAMOutputStream.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/store/RAMFile.h"
#include "org/apache/lucene/util/Accountable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *RAMOutputStream::class$ = NULL;
        jmethodID *RAMOutputStream::mids$ = NULL;
        bool RAMOutputStream::live$ = false;

        jclass RAMOutputStream::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/RAMOutputStream");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_init$_ca7ad9be] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/RAMFile;Z)V");
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_flush_54c6a166] = env->getMethodID(cls, "flush", "()V");
            mids$[mid_getChecksum_54c6a17a] = env->getMethodID(cls, "getChecksum", "()J");
            mids$[mid_getFilePointer_54c6a17a] = env->getMethodID(cls, "getFilePointer", "()J");
            mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");
            mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");
            mids$[mid_writeByte_b2271687] = env->getMethodID(cls, "writeByte", "(B)V");
            mids$[mid_writeBytes_86f4435f] = env->getMethodID(cls, "writeBytes", "([BII)V");
            mids$[mid_writeTo_27875f57] = env->getMethodID(cls, "writeTo", "(Lorg/apache/lucene/store/DataOutput;)V");
            mids$[mid_writeTo_b8354c43] = env->getMethodID(cls, "writeTo", "([BI)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        RAMOutputStream::RAMOutputStream() : ::org::apache::lucene::store::IndexOutput(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        RAMOutputStream::RAMOutputStream(const ::org::apache::lucene::store::RAMFile & a0, jboolean a1) : ::org::apache::lucene::store::IndexOutput(env->newObject(initializeClass, &mids$, mid_init$_ca7ad9be, a0.this$, a1)) {}

        void RAMOutputStream::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        void RAMOutputStream::flush() const
        {
          env->callVoidMethod(this$, mids$[mid_flush_54c6a166]);
        }

        jlong RAMOutputStream::getChecksum() const
        {
          return env->callLongMethod(this$, mids$[mid_getChecksum_54c6a17a]);
        }

        jlong RAMOutputStream::getFilePointer() const
        {
          return env->callLongMethod(this$, mids$[mid_getFilePointer_54c6a17a]);
        }

        jlong RAMOutputStream::ramBytesUsed() const
        {
          return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
        }

        void RAMOutputStream::reset() const
        {
          env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
        }

        void RAMOutputStream::writeByte(jbyte a0) const
        {
          env->callVoidMethod(this$, mids$[mid_writeByte_b2271687], a0);
        }

        void RAMOutputStream::writeBytes(const JArray< jbyte > & a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_writeBytes_86f4435f], a0.this$, a1, a2);
        }

        void RAMOutputStream::writeTo(const ::org::apache::lucene::store::DataOutput & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_writeTo_27875f57], a0.this$);
        }

        void RAMOutputStream::writeTo(const JArray< jbyte > & a0, jint a1) const
        {
          env->callVoidMethod(this$, mids$[mid_writeTo_b8354c43], a0.this$, a1);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_RAMOutputStream_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_RAMOutputStream_instance_(PyTypeObject *type, PyObject *arg);
        static int t_RAMOutputStream_init_(t_RAMOutputStream *self, PyObject *args, PyObject *kwds);
        static PyObject *t_RAMOutputStream_close(t_RAMOutputStream *self, PyObject *args);
        static PyObject *t_RAMOutputStream_flush(t_RAMOutputStream *self, PyObject *args);
        static PyObject *t_RAMOutputStream_getChecksum(t_RAMOutputStream *self, PyObject *args);
        static PyObject *t_RAMOutputStream_getFilePointer(t_RAMOutputStream *self, PyObject *args);
        static PyObject *t_RAMOutputStream_ramBytesUsed(t_RAMOutputStream *self);
        static PyObject *t_RAMOutputStream_reset(t_RAMOutputStream *self);
        static PyObject *t_RAMOutputStream_writeByte(t_RAMOutputStream *self, PyObject *args);
        static PyObject *t_RAMOutputStream_writeBytes(t_RAMOutputStream *self, PyObject *args);
        static PyObject *t_RAMOutputStream_writeTo(t_RAMOutputStream *self, PyObject *args);
        static PyObject *t_RAMOutputStream_get__checksum(t_RAMOutputStream *self, void *data);
        static PyObject *t_RAMOutputStream_get__filePointer(t_RAMOutputStream *self, void *data);
        static PyGetSetDef t_RAMOutputStream__fields_[] = {
          DECLARE_GET_FIELD(t_RAMOutputStream, checksum),
          DECLARE_GET_FIELD(t_RAMOutputStream, filePointer),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_RAMOutputStream__methods_[] = {
          DECLARE_METHOD(t_RAMOutputStream, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RAMOutputStream, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RAMOutputStream, close, METH_VARARGS),
          DECLARE_METHOD(t_RAMOutputStream, flush, METH_VARARGS),
          DECLARE_METHOD(t_RAMOutputStream, getChecksum, METH_VARARGS),
          DECLARE_METHOD(t_RAMOutputStream, getFilePointer, METH_VARARGS),
          DECLARE_METHOD(t_RAMOutputStream, ramBytesUsed, METH_NOARGS),
          DECLARE_METHOD(t_RAMOutputStream, reset, METH_NOARGS),
          DECLARE_METHOD(t_RAMOutputStream, writeByte, METH_VARARGS),
          DECLARE_METHOD(t_RAMOutputStream, writeBytes, METH_VARARGS),
          DECLARE_METHOD(t_RAMOutputStream, writeTo, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(RAMOutputStream, t_RAMOutputStream, ::org::apache::lucene::store::IndexOutput, RAMOutputStream, t_RAMOutputStream_init_, 0, 0, t_RAMOutputStream__fields_, 0, 0);

        void t_RAMOutputStream::install(PyObject *module)
        {
          installType(&PY_TYPE(RAMOutputStream), module, "RAMOutputStream", 0);
        }

        void t_RAMOutputStream::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(RAMOutputStream).tp_dict, "class_", make_descriptor(RAMOutputStream::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(RAMOutputStream).tp_dict, "wrapfn_", make_descriptor(t_RAMOutputStream::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(RAMOutputStream).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_RAMOutputStream_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, RAMOutputStream::initializeClass, 1)))
            return NULL;
          return t_RAMOutputStream::wrap_Object(RAMOutputStream(((t_RAMOutputStream *) arg)->object.this$));
        }
        static PyObject *t_RAMOutputStream_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, RAMOutputStream::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_RAMOutputStream_init_(t_RAMOutputStream *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              RAMOutputStream object((jobject) NULL);

              INT_CALL(object = RAMOutputStream());
              self->object = object;
              break;
            }
            goto err;
           case 2:
            {
              ::org::apache::lucene::store::RAMFile a0((jobject) NULL);
              jboolean a1;
              RAMOutputStream object((jobject) NULL);

              if (!parseArgs(args, "kZ", ::org::apache::lucene::store::RAMFile::initializeClass, &a0, &a1))
              {
                INT_CALL(object = RAMOutputStream(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_RAMOutputStream_close(t_RAMOutputStream *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.close());
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(RAMOutputStream), (PyObject *) self, "close", args, 2);
        }

        static PyObject *t_RAMOutputStream_flush(t_RAMOutputStream *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.flush());
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(RAMOutputStream), (PyObject *) self, "flush", args, 2);
        }

        static PyObject *t_RAMOutputStream_getChecksum(t_RAMOutputStream *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getChecksum());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(RAMOutputStream), (PyObject *) self, "getChecksum", args, 2);
        }

        static PyObject *t_RAMOutputStream_getFilePointer(t_RAMOutputStream *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getFilePointer());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(RAMOutputStream), (PyObject *) self, "getFilePointer", args, 2);
        }

        static PyObject *t_RAMOutputStream_ramBytesUsed(t_RAMOutputStream *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.ramBytesUsed());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_RAMOutputStream_reset(t_RAMOutputStream *self)
        {
          OBJ_CALL(self->object.reset());
          Py_RETURN_NONE;
        }

        static PyObject *t_RAMOutputStream_writeByte(t_RAMOutputStream *self, PyObject *args)
        {
          jbyte a0;

          if (!parseArgs(args, "B", &a0))
          {
            OBJ_CALL(self->object.writeByte(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(RAMOutputStream), (PyObject *) self, "writeByte", args, 2);
        }

        static PyObject *t_RAMOutputStream_writeBytes(t_RAMOutputStream *self, PyObject *args)
        {
          JArray< jbyte > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[BII", &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.writeBytes(a0, a1, a2));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(RAMOutputStream), (PyObject *) self, "writeBytes", args, 2);
        }

        static PyObject *t_RAMOutputStream_writeTo(t_RAMOutputStream *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::store::DataOutput a0((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::store::DataOutput::initializeClass, &a0))
              {
                OBJ_CALL(self->object.writeTo(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 2:
            {
              JArray< jbyte > a0((jobject) NULL);
              jint a1;

              if (!parseArgs(args, "[BI", &a0, &a1))
              {
                OBJ_CALL(self->object.writeTo(a0, a1));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "writeTo", args);
          return NULL;
        }

        static PyObject *t_RAMOutputStream_get__checksum(t_RAMOutputStream *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getChecksum());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }

        static PyObject *t_RAMOutputStream_get__filePointer(t_RAMOutputStream *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getFilePointer());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/SegmentReader.h"
#include "org/apache/lucene/index/SegmentCommitInfo.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/StoredFieldVisitor.h"
#include "org/apache/lucene/index/BinaryDocValues.h"
#include "org/apache/lucene/util/Accountable.h"
#include "org/apache/lucene/store/IOContext.h"
#include "org/apache/lucene/codecs/StoredFieldsReader.h"
#include "org/apache/lucene/util/Bits.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/index/NumericDocValues.h"
#include "org/apache/lucene/index/SortedNumericDocValues.h"
#include "org/apache/lucene/index/SortedDocValues.h"
#include "org/apache/lucene/index/AtomicReader$CoreClosedListener.h"
#include "org/apache/lucene/codecs/TermVectorsReader.h"
#include "org/apache/lucene/index/Fields.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/SortedSetDocValues.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *SegmentReader::class$ = NULL;
        jmethodID *SegmentReader::mids$ = NULL;
        bool SegmentReader::live$ = false;

        jclass SegmentReader::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/SegmentReader");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_20f5bc6a] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/SegmentCommitInfo;ILorg/apache/lucene/store/IOContext;)V");
            mids$[mid_addCoreClosedListener_cbc2818f] = env->getMethodID(cls, "addCoreClosedListener", "(Lorg/apache/lucene/index/AtomicReader$CoreClosedListener;)V");
            mids$[mid_checkIntegrity_54c6a166] = env->getMethodID(cls, "checkIntegrity", "()V");
            mids$[mid_directory_1f3934bb] = env->getMethodID(cls, "directory", "()Lorg/apache/lucene/store/Directory;");
            mids$[mid_document_a2ea3ebe] = env->getMethodID(cls, "document", "(ILorg/apache/lucene/index/StoredFieldVisitor;)V");
            mids$[mid_fields_77db581d] = env->getMethodID(cls, "fields", "()Lorg/apache/lucene/index/Fields;");
            mids$[mid_getBinaryDocValues_ecab96be] = env->getMethodID(cls, "getBinaryDocValues", "(Ljava/lang/String;)Lorg/apache/lucene/index/BinaryDocValues;");
            mids$[mid_getCombinedCoreAndDeletesKey_846352c3] = env->getMethodID(cls, "getCombinedCoreAndDeletesKey", "()Ljava/lang/Object;");
            mids$[mid_getCoreCacheKey_846352c3] = env->getMethodID(cls, "getCoreCacheKey", "()Ljava/lang/Object;");
            mids$[mid_getDocsWithField_e1c6a7db] = env->getMethodID(cls, "getDocsWithField", "(Ljava/lang/String;)Lorg/apache/lucene/util/Bits;");
            mids$[mid_getFieldInfos_9ba20825] = env->getMethodID(cls, "getFieldInfos", "()Lorg/apache/lucene/index/FieldInfos;");
            mids$[mid_getFieldsReader_ef585f0d] = env->getMethodID(cls, "getFieldsReader", "()Lorg/apache/lucene/codecs/StoredFieldsReader;");
            mids$[mid_getLiveDocs_03c2457d] = env->getMethodID(cls, "getLiveDocs", "()Lorg/apache/lucene/util/Bits;");
            mids$[mid_getNormValues_d2b19f49] = env->getMethodID(cls, "getNormValues", "(Ljava/lang/String;)Lorg/apache/lucene/index/NumericDocValues;");
            mids$[mid_getNumericDocValues_d2b19f49] = env->getMethodID(cls, "getNumericDocValues", "(Ljava/lang/String;)Lorg/apache/lucene/index/NumericDocValues;");
            mids$[mid_getSegmentInfo_5df298a9] = env->getMethodID(cls, "getSegmentInfo", "()Lorg/apache/lucene/index/SegmentCommitInfo;");
            mids$[mid_getSegmentName_14c7b5c5] = env->getMethodID(cls, "getSegmentName", "()Ljava/lang/String;");
            mids$[mid_getSortedDocValues_7b8b1a0a] = env->getMethodID(cls, "getSortedDocValues", "(Ljava/lang/String;)Lorg/apache/lucene/index/SortedDocValues;");
            mids$[mid_getSortedNumericDocValues_37cd1812] = env->getMethodID(cls, "getSortedNumericDocValues", "(Ljava/lang/String;)Lorg/apache/lucene/index/SortedNumericDocValues;");
            mids$[mid_getSortedSetDocValues_43e0e807] = env->getMethodID(cls, "getSortedSetDocValues", "(Ljava/lang/String;)Lorg/apache/lucene/index/SortedSetDocValues;");
            mids$[mid_getTermInfosIndexDivisor_54c6a179] = env->getMethodID(cls, "getTermInfosIndexDivisor", "()I");
            mids$[mid_getTermVectors_ef1c9c73] = env->getMethodID(cls, "getTermVectors", "(I)Lorg/apache/lucene/index/Fields;");
            mids$[mid_getTermVectorsReader_475a2624] = env->getMethodID(cls, "getTermVectorsReader", "()Lorg/apache/lucene/codecs/TermVectorsReader;");
            mids$[mid_maxDoc_54c6a179] = env->getMethodID(cls, "maxDoc", "()I");
            mids$[mid_numDocs_54c6a179] = env->getMethodID(cls, "numDocs", "()I");
            mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");
            mids$[mid_removeCoreClosedListener_cbc2818f] = env->getMethodID(cls, "removeCoreClosedListener", "(Lorg/apache/lucene/index/AtomicReader$CoreClosedListener;)V");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
            mids$[mid_doClose_54c6a166] = env->getMethodID(cls, "doClose", "()V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SegmentReader::SegmentReader(const ::org::apache::lucene::index::SegmentCommitInfo & a0, jint a1, const ::org::apache::lucene::store::IOContext & a2) : ::org::apache::lucene::index::AtomicReader(env->newObject(initializeClass, &mids$, mid_init$_20f5bc6a, a0.this$, a1, a2.this$)) {}

        void SegmentReader::addCoreClosedListener(const ::org::apache::lucene::index::AtomicReader$CoreClosedListener & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_addCoreClosedListener_cbc2818f], a0.this$);
        }

        void SegmentReader::checkIntegrity() const
        {
          env->callVoidMethod(this$, mids$[mid_checkIntegrity_54c6a166]);
        }

        ::org::apache::lucene::store::Directory SegmentReader::directory() const
        {
          return ::org::apache::lucene::store::Directory(env->callObjectMethod(this$, mids$[mid_directory_1f3934bb]));
        }

        void SegmentReader::document(jint a0, const ::org::apache::lucene::index::StoredFieldVisitor & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_document_a2ea3ebe], a0, a1.this$);
        }

        ::org::apache::lucene::index::Fields SegmentReader::fields() const
        {
          return ::org::apache::lucene::index::Fields(env->callObjectMethod(this$, mids$[mid_fields_77db581d]));
        }

        ::org::apache::lucene::index::BinaryDocValues SegmentReader::getBinaryDocValues(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::BinaryDocValues(env->callObjectMethod(this$, mids$[mid_getBinaryDocValues_ecab96be], a0.this$));
        }

        ::java::lang::Object SegmentReader::getCombinedCoreAndDeletesKey() const
        {
          return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_getCombinedCoreAndDeletesKey_846352c3]));
        }

        ::java::lang::Object SegmentReader::getCoreCacheKey() const
        {
          return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_getCoreCacheKey_846352c3]));
        }

        ::org::apache::lucene::util::Bits SegmentReader::getDocsWithField(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::util::Bits(env->callObjectMethod(this$, mids$[mid_getDocsWithField_e1c6a7db], a0.this$));
        }

        ::org::apache::lucene::index::FieldInfos SegmentReader::getFieldInfos() const
        {
          return ::org::apache::lucene::index::FieldInfos(env->callObjectMethod(this$, mids$[mid_getFieldInfos_9ba20825]));
        }

        ::org::apache::lucene::codecs::StoredFieldsReader SegmentReader::getFieldsReader() const
        {
          return ::org::apache::lucene::codecs::StoredFieldsReader(env->callObjectMethod(this$, mids$[mid_getFieldsReader_ef585f0d]));
        }

        ::org::apache::lucene::util::Bits SegmentReader::getLiveDocs() const
        {
          return ::org::apache::lucene::util::Bits(env->callObjectMethod(this$, mids$[mid_getLiveDocs_03c2457d]));
        }

        ::org::apache::lucene::index::NumericDocValues SegmentReader::getNormValues(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::NumericDocValues(env->callObjectMethod(this$, mids$[mid_getNormValues_d2b19f49], a0.this$));
        }

        ::org::apache::lucene::index::NumericDocValues SegmentReader::getNumericDocValues(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::NumericDocValues(env->callObjectMethod(this$, mids$[mid_getNumericDocValues_d2b19f49], a0.this$));
        }

        ::org::apache::lucene::index::SegmentCommitInfo SegmentReader::getSegmentInfo() const
        {
          return ::org::apache::lucene::index::SegmentCommitInfo(env->callObjectMethod(this$, mids$[mid_getSegmentInfo_5df298a9]));
        }

        ::java::lang::String SegmentReader::getSegmentName() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getSegmentName_14c7b5c5]));
        }

        ::org::apache::lucene::index::SortedDocValues SegmentReader::getSortedDocValues(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::SortedDocValues(env->callObjectMethod(this$, mids$[mid_getSortedDocValues_7b8b1a0a], a0.this$));
        }

        ::org::apache::lucene::index::SortedNumericDocValues SegmentReader::getSortedNumericDocValues(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::SortedNumericDocValues(env->callObjectMethod(this$, mids$[mid_getSortedNumericDocValues_37cd1812], a0.this$));
        }

        ::org::apache::lucene::index::SortedSetDocValues SegmentReader::getSortedSetDocValues(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::SortedSetDocValues(env->callObjectMethod(this$, mids$[mid_getSortedSetDocValues_43e0e807], a0.this$));
        }

        jint SegmentReader::getTermInfosIndexDivisor() const
        {
          return env->callIntMethod(this$, mids$[mid_getTermInfosIndexDivisor_54c6a179]);
        }

        ::org::apache::lucene::index::Fields SegmentReader::getTermVectors(jint a0) const
        {
          return ::org::apache::lucene::index::Fields(env->callObjectMethod(this$, mids$[mid_getTermVectors_ef1c9c73], a0));
        }

        ::org::apache::lucene::codecs::TermVectorsReader SegmentReader::getTermVectorsReader() const
        {
          return ::org::apache::lucene::codecs::TermVectorsReader(env->callObjectMethod(this$, mids$[mid_getTermVectorsReader_475a2624]));
        }

        jint SegmentReader::maxDoc() const
        {
          return env->callIntMethod(this$, mids$[mid_maxDoc_54c6a179]);
        }

        jint SegmentReader::numDocs() const
        {
          return env->callIntMethod(this$, mids$[mid_numDocs_54c6a179]);
        }

        jlong SegmentReader::ramBytesUsed() const
        {
          return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
        }

        void SegmentReader::removeCoreClosedListener(const ::org::apache::lucene::index::AtomicReader$CoreClosedListener & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_removeCoreClosedListener_cbc2818f], a0.this$);
        }

        ::java::lang::String SegmentReader::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_SegmentReader_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SegmentReader_instance_(PyTypeObject *type, PyObject *arg);
        static int t_SegmentReader_init_(t_SegmentReader *self, PyObject *args, PyObject *kwds);
        static PyObject *t_SegmentReader_addCoreClosedListener(t_SegmentReader *self, PyObject *args);
        static PyObject *t_SegmentReader_checkIntegrity(t_SegmentReader *self, PyObject *args);
        static PyObject *t_SegmentReader_directory(t_SegmentReader *self);
        static PyObject *t_SegmentReader_document(t_SegmentReader *self, PyObject *args);
        static PyObject *t_SegmentReader_fields(t_SegmentReader *self, PyObject *args);
        static PyObject *t_SegmentReader_getBinaryDocValues(t_SegmentReader *self, PyObject *args);
        static PyObject *t_SegmentReader_getCombinedCoreAndDeletesKey(t_SegmentReader *self, PyObject *args);
        static PyObject *t_SegmentReader_getCoreCacheKey(t_SegmentReader *self, PyObject *args);
        static PyObject *t_SegmentReader_getDocsWithField(t_SegmentReader *self, PyObject *args);
        static PyObject *t_SegmentReader_getFieldInfos(t_SegmentReader *self, PyObject *args);
        static PyObject *t_SegmentReader_getFieldsReader(t_SegmentReader *self);
        static PyObject *t_SegmentReader_getLiveDocs(t_SegmentReader *self, PyObject *args);
        static PyObject *t_SegmentReader_getNormValues(t_SegmentReader *self, PyObject *args);
        static PyObject *t_SegmentReader_getNumericDocValues(t_SegmentReader *self, PyObject *args);
        static PyObject *t_SegmentReader_getSegmentInfo(t_SegmentReader *self);
        static PyObject *t_SegmentReader_getSegmentName(t_SegmentReader *self);
        static PyObject *t_SegmentReader_getSortedDocValues(t_SegmentReader *self, PyObject *args);
        static PyObject *t_SegmentReader_getSortedNumericDocValues(t_SegmentReader *self, PyObject *args);
        static PyObject *t_SegmentReader_getSortedSetDocValues(t_SegmentReader *self, PyObject *args);
        static PyObject *t_SegmentReader_getTermInfosIndexDivisor(t_SegmentReader *self);
        static PyObject *t_SegmentReader_getTermVectors(t_SegmentReader *self, PyObject *args);
        static PyObject *t_SegmentReader_getTermVectorsReader(t_SegmentReader *self);
        static PyObject *t_SegmentReader_maxDoc(t_SegmentReader *self, PyObject *args);
        static PyObject *t_SegmentReader_numDocs(t_SegmentReader *self, PyObject *args);
        static PyObject *t_SegmentReader_ramBytesUsed(t_SegmentReader *self);
        static PyObject *t_SegmentReader_removeCoreClosedListener(t_SegmentReader *self, PyObject *args);
        static PyObject *t_SegmentReader_toString(t_SegmentReader *self, PyObject *args);
        static PyObject *t_SegmentReader_get__combinedCoreAndDeletesKey(t_SegmentReader *self, void *data);
        static PyObject *t_SegmentReader_get__coreCacheKey(t_SegmentReader *self, void *data);
        static PyObject *t_SegmentReader_get__fieldInfos(t_SegmentReader *self, void *data);
        static PyObject *t_SegmentReader_get__fieldsReader(t_SegmentReader *self, void *data);
        static PyObject *t_SegmentReader_get__liveDocs(t_SegmentReader *self, void *data);
        static PyObject *t_SegmentReader_get__segmentInfo(t_SegmentReader *self, void *data);
        static PyObject *t_SegmentReader_get__segmentName(t_SegmentReader *self, void *data);
        static PyObject *t_SegmentReader_get__termInfosIndexDivisor(t_SegmentReader *self, void *data);
        static PyObject *t_SegmentReader_get__termVectorsReader(t_SegmentReader *self, void *data);
        static PyGetSetDef t_SegmentReader__fields_[] = {
          DECLARE_GET_FIELD(t_SegmentReader, combinedCoreAndDeletesKey),
          DECLARE_GET_FIELD(t_SegmentReader, coreCacheKey),
          DECLARE_GET_FIELD(t_SegmentReader, fieldInfos),
          DECLARE_GET_FIELD(t_SegmentReader, fieldsReader),
          DECLARE_GET_FIELD(t_SegmentReader, liveDocs),
          DECLARE_GET_FIELD(t_SegmentReader, segmentInfo),
          DECLARE_GET_FIELD(t_SegmentReader, segmentName),
          DECLARE_GET_FIELD(t_SegmentReader, termInfosIndexDivisor),
          DECLARE_GET_FIELD(t_SegmentReader, termVectorsReader),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_SegmentReader__methods_[] = {
          DECLARE_METHOD(t_SegmentReader, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SegmentReader, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SegmentReader, addCoreClosedListener, METH_VARARGS),
          DECLARE_METHOD(t_SegmentReader, checkIntegrity, METH_VARARGS),
          DECLARE_METHOD(t_SegmentReader, directory, METH_NOARGS),
          DECLARE_METHOD(t_SegmentReader, document, METH_VARARGS),
          DECLARE_METHOD(t_SegmentReader, fields, METH_VARARGS),
          DECLARE_METHOD(t_SegmentReader, getBinaryDocValues, METH_VARARGS),
          DECLARE_METHOD(t_SegmentReader, getCombinedCoreAndDeletesKey, METH_VARARGS),
          DECLARE_METHOD(t_SegmentReader, getCoreCacheKey, METH_VARARGS),
          DECLARE_METHOD(t_SegmentReader, getDocsWithField, METH_VARARGS),
          DECLARE_METHOD(t_SegmentReader, getFieldInfos, METH_VARARGS),
          DECLARE_METHOD(t_SegmentReader, getFieldsReader, METH_NOARGS),
          DECLARE_METHOD(t_SegmentReader, getLiveDocs, METH_VARARGS),
          DECLARE_METHOD(t_SegmentReader, getNormValues, METH_VARARGS),
          DECLARE_METHOD(t_SegmentReader, getNumericDocValues, METH_VARARGS),
          DECLARE_METHOD(t_SegmentReader, getSegmentInfo, METH_NOARGS),
          DECLARE_METHOD(t_SegmentReader, getSegmentName, METH_NOARGS),
          DECLARE_METHOD(t_SegmentReader, getSortedDocValues, METH_VARARGS),
          DECLARE_METHOD(t_SegmentReader, getSortedNumericDocValues, METH_VARARGS),
          DECLARE_METHOD(t_SegmentReader, getSortedSetDocValues, METH_VARARGS),
          DECLARE_METHOD(t_SegmentReader, getTermInfosIndexDivisor, METH_NOARGS),
          DECLARE_METHOD(t_SegmentReader, getTermVectors, METH_VARARGS),
          DECLARE_METHOD(t_SegmentReader, getTermVectorsReader, METH_NOARGS),
          DECLARE_METHOD(t_SegmentReader, maxDoc, METH_VARARGS),
          DECLARE_METHOD(t_SegmentReader, numDocs, METH_VARARGS),
          DECLARE_METHOD(t_SegmentReader, ramBytesUsed, METH_NOARGS),
          DECLARE_METHOD(t_SegmentReader, removeCoreClosedListener, METH_VARARGS),
          DECLARE_METHOD(t_SegmentReader, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SegmentReader, t_SegmentReader, ::org::apache::lucene::index::AtomicReader, SegmentReader, t_SegmentReader_init_, 0, 0, t_SegmentReader__fields_, 0, 0);

        void t_SegmentReader::install(PyObject *module)
        {
          installType(&PY_TYPE(SegmentReader), module, "SegmentReader", 0);
        }

        void t_SegmentReader::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SegmentReader).tp_dict, "class_", make_descriptor(SegmentReader::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SegmentReader).tp_dict, "wrapfn_", make_descriptor(t_SegmentReader::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SegmentReader).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SegmentReader_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SegmentReader::initializeClass, 1)))
            return NULL;
          return t_SegmentReader::wrap_Object(SegmentReader(((t_SegmentReader *) arg)->object.this$));
        }
        static PyObject *t_SegmentReader_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SegmentReader::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_SegmentReader_init_(t_SegmentReader *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::index::SegmentCommitInfo a0((jobject) NULL);
          jint a1;
          ::org::apache::lucene::store::IOContext a2((jobject) NULL);
          SegmentReader object((jobject) NULL);

          if (!parseArgs(args, "kIk", ::org::apache::lucene::index::SegmentCommitInfo::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2))
          {
            INT_CALL(object = SegmentReader(a0, a1, a2));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_SegmentReader_addCoreClosedListener(t_SegmentReader *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReader$CoreClosedListener a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReader$CoreClosedListener::initializeClass, &a0))
          {
            OBJ_CALL(self->object.addCoreClosedListener(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(SegmentReader), (PyObject *) self, "addCoreClosedListener", args, 2);
        }

        static PyObject *t_SegmentReader_checkIntegrity(t_SegmentReader *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.checkIntegrity());
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(SegmentReader), (PyObject *) self, "checkIntegrity", args, 2);
        }

        static PyObject *t_SegmentReader_directory(t_SegmentReader *self)
        {
          ::org::apache::lucene::store::Directory result((jobject) NULL);
          OBJ_CALL(result = self->object.directory());
          return ::org::apache::lucene::store::t_Directory::wrap_Object(result);
        }

        static PyObject *t_SegmentReader_document(t_SegmentReader *self, PyObject *args)
        {
          jint a0;
          ::org::apache::lucene::index::StoredFieldVisitor a1((jobject) NULL);

          if (!parseArgs(args, "Ik", ::org::apache::lucene::index::StoredFieldVisitor::initializeClass, &a0, &a1))
          {
            OBJ_CALL(self->object.document(a0, a1));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(SegmentReader), (PyObject *) self, "document", args, 2);
        }

        static PyObject *t_SegmentReader_fields(t_SegmentReader *self, PyObject *args)
        {
          ::org::apache::lucene::index::Fields result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.fields());
            return ::org::apache::lucene::index::t_Fields::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(SegmentReader), (PyObject *) self, "fields", args, 2);
        }

        static PyObject *t_SegmentReader_getBinaryDocValues(t_SegmentReader *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::BinaryDocValues result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getBinaryDocValues(a0));
            return ::org::apache::lucene::index::t_BinaryDocValues::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(SegmentReader), (PyObject *) self, "getBinaryDocValues", args, 2);
        }

        static PyObject *t_SegmentReader_getCombinedCoreAndDeletesKey(t_SegmentReader *self, PyObject *args)
        {
          ::java::lang::Object result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getCombinedCoreAndDeletesKey());
            return ::java::lang::t_Object::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(SegmentReader), (PyObject *) self, "getCombinedCoreAndDeletesKey", args, 2);
        }

        static PyObject *t_SegmentReader_getCoreCacheKey(t_SegmentReader *self, PyObject *args)
        {
          ::java::lang::Object result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getCoreCacheKey());
            return ::java::lang::t_Object::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(SegmentReader), (PyObject *) self, "getCoreCacheKey", args, 2);
        }

        static PyObject *t_SegmentReader_getDocsWithField(t_SegmentReader *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::util::Bits result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getDocsWithField(a0));
            return ::org::apache::lucene::util::t_Bits::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(SegmentReader), (PyObject *) self, "getDocsWithField", args, 2);
        }

        static PyObject *t_SegmentReader_getFieldInfos(t_SegmentReader *self, PyObject *args)
        {
          ::org::apache::lucene::index::FieldInfos result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getFieldInfos());
            return ::org::apache::lucene::index::t_FieldInfos::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(SegmentReader), (PyObject *) self, "getFieldInfos", args, 2);
        }

        static PyObject *t_SegmentReader_getFieldsReader(t_SegmentReader *self)
        {
          ::org::apache::lucene::codecs::StoredFieldsReader result((jobject) NULL);
          OBJ_CALL(result = self->object.getFieldsReader());
          return ::org::apache::lucene::codecs::t_StoredFieldsReader::wrap_Object(result);
        }

        static PyObject *t_SegmentReader_getLiveDocs(t_SegmentReader *self, PyObject *args)
        {
          ::org::apache::lucene::util::Bits result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getLiveDocs());
            return ::org::apache::lucene::util::t_Bits::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(SegmentReader), (PyObject *) self, "getLiveDocs", args, 2);
        }

        static PyObject *t_SegmentReader_getNormValues(t_SegmentReader *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::NumericDocValues result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getNormValues(a0));
            return ::org::apache::lucene::index::t_NumericDocValues::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(SegmentReader), (PyObject *) self, "getNormValues", args, 2);
        }

        static PyObject *t_SegmentReader_getNumericDocValues(t_SegmentReader *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::NumericDocValues result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getNumericDocValues(a0));
            return ::org::apache::lucene::index::t_NumericDocValues::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(SegmentReader), (PyObject *) self, "getNumericDocValues", args, 2);
        }

        static PyObject *t_SegmentReader_getSegmentInfo(t_SegmentReader *self)
        {
          ::org::apache::lucene::index::SegmentCommitInfo result((jobject) NULL);
          OBJ_CALL(result = self->object.getSegmentInfo());
          return ::org::apache::lucene::index::t_SegmentCommitInfo::wrap_Object(result);
        }

        static PyObject *t_SegmentReader_getSegmentName(t_SegmentReader *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.getSegmentName());
          return j2p(result);
        }

        static PyObject *t_SegmentReader_getSortedDocValues(t_SegmentReader *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::SortedDocValues result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getSortedDocValues(a0));
            return ::org::apache::lucene::index::t_SortedDocValues::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(SegmentReader), (PyObject *) self, "getSortedDocValues", args, 2);
        }

        static PyObject *t_SegmentReader_getSortedNumericDocValues(t_SegmentReader *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::SortedNumericDocValues result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getSortedNumericDocValues(a0));
            return ::org::apache::lucene::index::t_SortedNumericDocValues::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(SegmentReader), (PyObject *) self, "getSortedNumericDocValues", args, 2);
        }

        static PyObject *t_SegmentReader_getSortedSetDocValues(t_SegmentReader *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::SortedSetDocValues result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getSortedSetDocValues(a0));
            return ::org::apache::lucene::index::t_SortedSetDocValues::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(SegmentReader), (PyObject *) self, "getSortedSetDocValues", args, 2);
        }

        static PyObject *t_SegmentReader_getTermInfosIndexDivisor(t_SegmentReader *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getTermInfosIndexDivisor());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_SegmentReader_getTermVectors(t_SegmentReader *self, PyObject *args)
        {
          jint a0;
          ::org::apache::lucene::index::Fields result((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.getTermVectors(a0));
            return ::org::apache::lucene::index::t_Fields::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(SegmentReader), (PyObject *) self, "getTermVectors", args, 2);
        }

        static PyObject *t_SegmentReader_getTermVectorsReader(t_SegmentReader *self)
        {
          ::org::apache::lucene::codecs::TermVectorsReader result((jobject) NULL);
          OBJ_CALL(result = self->object.getTermVectorsReader());
          return ::org::apache::lucene::codecs::t_TermVectorsReader::wrap_Object(result);
        }

        static PyObject *t_SegmentReader_maxDoc(t_SegmentReader *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.maxDoc());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(SegmentReader), (PyObject *) self, "maxDoc", args, 2);
        }

        static PyObject *t_SegmentReader_numDocs(t_SegmentReader *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.numDocs());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(SegmentReader), (PyObject *) self, "numDocs", args, 2);
        }

        static PyObject *t_SegmentReader_ramBytesUsed(t_SegmentReader *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.ramBytesUsed());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_SegmentReader_removeCoreClosedListener(t_SegmentReader *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReader$CoreClosedListener a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReader$CoreClosedListener::initializeClass, &a0))
          {
            OBJ_CALL(self->object.removeCoreClosedListener(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(SegmentReader), (PyObject *) self, "removeCoreClosedListener", args, 2);
        }

        static PyObject *t_SegmentReader_toString(t_SegmentReader *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(SegmentReader), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_SegmentReader_get__combinedCoreAndDeletesKey(t_SegmentReader *self, void *data)
        {
          ::java::lang::Object value((jobject) NULL);
          OBJ_CALL(value = self->object.getCombinedCoreAndDeletesKey());
          return ::java::lang::t_Object::wrap_Object(value);
        }

        static PyObject *t_SegmentReader_get__coreCacheKey(t_SegmentReader *self, void *data)
        {
          ::java::lang::Object value((jobject) NULL);
          OBJ_CALL(value = self->object.getCoreCacheKey());
          return ::java::lang::t_Object::wrap_Object(value);
        }

        static PyObject *t_SegmentReader_get__fieldInfos(t_SegmentReader *self, void *data)
        {
          ::org::apache::lucene::index::FieldInfos value((jobject) NULL);
          OBJ_CALL(value = self->object.getFieldInfos());
          return ::org::apache::lucene::index::t_FieldInfos::wrap_Object(value);
        }

        static PyObject *t_SegmentReader_get__fieldsReader(t_SegmentReader *self, void *data)
        {
          ::org::apache::lucene::codecs::StoredFieldsReader value((jobject) NULL);
          OBJ_CALL(value = self->object.getFieldsReader());
          return ::org::apache::lucene::codecs::t_StoredFieldsReader::wrap_Object(value);
        }

        static PyObject *t_SegmentReader_get__liveDocs(t_SegmentReader *self, void *data)
        {
          ::org::apache::lucene::util::Bits value((jobject) NULL);
          OBJ_CALL(value = self->object.getLiveDocs());
          return ::org::apache::lucene::util::t_Bits::wrap_Object(value);
        }

        static PyObject *t_SegmentReader_get__segmentInfo(t_SegmentReader *self, void *data)
        {
          ::org::apache::lucene::index::SegmentCommitInfo value((jobject) NULL);
          OBJ_CALL(value = self->object.getSegmentInfo());
          return ::org::apache::lucene::index::t_SegmentCommitInfo::wrap_Object(value);
        }

        static PyObject *t_SegmentReader_get__segmentName(t_SegmentReader *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object.getSegmentName());
          return j2p(value);
        }

        static PyObject *t_SegmentReader_get__termInfosIndexDivisor(t_SegmentReader *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getTermInfosIndexDivisor());
          return PyInt_FromLong((long) value);
        }

        static PyObject *t_SegmentReader_get__termVectorsReader(t_SegmentReader *self, void *data)
        {
          ::org::apache::lucene::codecs::TermVectorsReader value((jobject) NULL);
          OBJ_CALL(value = self->object.getTermVectorsReader());
          return ::org::apache::lucene::codecs::t_TermVectorsReader::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/surround/parser/ParseException.h"
#include "org/apache/lucene/queryparser/surround/parser/Token.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace parser {

            ::java::lang::Class *ParseException::class$ = NULL;
            jmethodID *ParseException::mids$ = NULL;
            jfieldID *ParseException::fids$ = NULL;
            bool ParseException::live$ = false;

            jclass ParseException::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/surround/parser/ParseException");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
                mids$[mid_init$_dea8e26f] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/surround/parser/Token;[[I[Ljava/lang/String;)V");

                fids$ = new jfieldID[max_fid];
                fids$[fid_currentToken] = env->getFieldID(cls, "currentToken", "Lorg/apache/lucene/queryparser/surround/parser/Token;");
                fids$[fid_expectedTokenSequences] = env->getFieldID(cls, "expectedTokenSequences", "[[I");
                fids$[fid_tokenImage] = env->getFieldID(cls, "tokenImage", "[Ljava/lang/String;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            ParseException::ParseException() : ::java::lang::Exception(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

            ParseException::ParseException(const ::java::lang::String & a0) : ::java::lang::Exception(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

            ParseException::ParseException(const ::org::apache::lucene::queryparser::surround::parser::Token & a0, const JArray< JArray< jint > > & a1, const JArray< ::java::lang::String > & a2) : ::java::lang::Exception(env->newObject(initializeClass, &mids$, mid_init$_dea8e26f, a0.this$, a1.this$, a2.this$)) {}

            ::org::apache::lucene::queryparser::surround::parser::Token ParseException::_get_currentToken() const
            {
              return ::org::apache::lucene::queryparser::surround::parser::Token(env->getObjectField(this$, fids$[fid_currentToken]));
            }

            void ParseException::_set_currentToken(const ::org::apache::lucene::queryparser::surround::parser::Token & a0) const
            {
              env->setObjectField(this$, fids$[fid_currentToken], a0.this$);
            }

            JArray< JArray< jint > > ParseException::_get_expectedTokenSequences() const
            {
              return JArray< JArray< jint > >(env->getObjectField(this$, fids$[fid_expectedTokenSequences]));
            }

            void ParseException::_set_expectedTokenSequences(const JArray< JArray< jint > > & a0) const
            {
              env->setObjectField(this$, fids$[fid_expectedTokenSequences], a0.this$);
            }

            JArray< ::java::lang::String > ParseException::_get_tokenImage() const
            {
              return JArray< ::java::lang::String >(env->getObjectField(this$, fids$[fid_tokenImage]));
            }

            void ParseException::_set_tokenImage(const JArray< ::java::lang::String > & a0) const
            {
              env->setObjectField(this$, fids$[fid_tokenImage], a0.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace parser {
            static PyObject *t_ParseException_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_ParseException_instance_(PyTypeObject *type, PyObject *arg);
            static int t_ParseException_init_(t_ParseException *self, PyObject *args, PyObject *kwds);
            static PyObject *t_ParseException_get__currentToken(t_ParseException *self, void *data);
            static int t_ParseException_set__currentToken(t_ParseException *self, PyObject *arg, void *data);
            static PyObject *t_ParseException_get__expectedTokenSequences(t_ParseException *self, void *data);
            static int t_ParseException_set__expectedTokenSequences(t_ParseException *self, PyObject *arg, void *data);
            static PyObject *t_ParseException_get__tokenImage(t_ParseException *self, void *data);
            static int t_ParseException_set__tokenImage(t_ParseException *self, PyObject *arg, void *data);

            static PyGetSetDef t_ParseException__fields_[] = {
              DECLARE_GETSET_FIELD(t_ParseException, currentToken),
              DECLARE_GETSET_FIELD(t_ParseException, expectedTokenSequences),
              DECLARE_GETSET_FIELD(t_ParseException, tokenImage),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_ParseException__methods_[] = {
              DECLARE_METHOD(t_ParseException, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_ParseException, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(ParseException, t_ParseException, ::java::lang::Exception, ParseException, t_ParseException_init_, 0, 0, t_ParseException__fields_, 0, 0);

            void t_ParseException::install(PyObject *module)
            {
              installType(&PY_TYPE(ParseException), module, "ParseException", 0);
            }

            void t_ParseException::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(ParseException).tp_dict, "class_", make_descriptor(ParseException::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(ParseException).tp_dict, "wrapfn_", make_descriptor(t_ParseException::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(ParseException).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_ParseException_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, ParseException::initializeClass, 1)))
                return NULL;
              return t_ParseException::wrap_Object(ParseException(((t_ParseException *) arg)->object.this$));
            }
            static PyObject *t_ParseException_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, ParseException::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_ParseException_init_(t_ParseException *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 0:
                {
                  ParseException object((jobject) NULL);

                  INT_CALL(object = ParseException());
                  self->object = object;
                  break;
                }
                goto err;
               case 1:
                {
                  ::java::lang::String a0((jobject) NULL);
                  ParseException object((jobject) NULL);

                  if (!parseArgs(args, "s", &a0))
                  {
                    INT_CALL(object = ParseException(a0));
                    self->object = object;
                    break;
                  }
                }
                goto err;
               case 3:
                {
                  ::org::apache::lucene::queryparser::surround::parser::Token a0((jobject) NULL);
                  JArray< JArray< jint > > a1((jobject) NULL);
                  JArray< ::java::lang::String > a2((jobject) NULL);
                  ParseException object((jobject) NULL);

                  if (!parseArgs(args, "k[[I[s", ::org::apache::lucene::queryparser::surround::parser::Token::initializeClass, &a0, &a1, &a2))
                  {
                    INT_CALL(object = ParseException(a0, a1, a2));
                    self->object = object;
                    break;
                  }
                }
               default:
               err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_ParseException_get__currentToken(t_ParseException *self, void *data)
            {
              ::org::apache::lucene::queryparser::surround::parser::Token value((jobject) NULL);
              OBJ_CALL(value = self->object._get_currentToken());
              return ::org::apache::lucene::queryparser::surround::parser::t_Token::wrap_Object(value);
            }
            static int t_ParseException_set__currentToken(t_ParseException *self, PyObject *arg, void *data)
            {
              ::org::apache::lucene::queryparser::surround::parser::Token value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::surround::parser::Token::initializeClass, &value))
              {
                INT_CALL(self->object._set_currentToken(value));
                return 0;
              }
              PyErr_SetArgsError((PyObject *) self, "currentToken", arg);
              return -1;
            }

            static PyObject *t_ParseException_get__expectedTokenSequences(t_ParseException *self, void *data)
            {
              JArray< JArray< jint > > value((jobject) NULL);
              OBJ_CALL(value = self->object._get_expectedTokenSequences());
              return JArray<jobject>(value.this$).wrap(NULL);
            }
            static int t_ParseException_set__expectedTokenSequences(t_ParseException *self, PyObject *arg, void *data)
            {
              JArray< JArray< jint > > value((jobject) NULL);
              if (!parseArg(arg, "[[I", &value))
              {
                INT_CALL(self->object._set_expectedTokenSequences(value));
                return 0;
              }
              PyErr_SetArgsError((PyObject *) self, "expectedTokenSequences", arg);
              return -1;
            }

            static PyObject *t_ParseException_get__tokenImage(t_ParseException *self, void *data)
            {
              JArray< ::java::lang::String > value((jobject) NULL);
              OBJ_CALL(value = self->object._get_tokenImage());
              return JArray<jstring>(value.this$).wrap();
            }
            static int t_ParseException_set__tokenImage(t_ParseException *self, PyObject *arg, void *data)
            {
              JArray< ::java::lang::String > value((jobject) NULL);
              if (!parseArg(arg, "[s", &value))
              {
                INT_CALL(self->object._set_tokenImage(value));
                return 0;
              }
              PyErr_SetArgsError((PyObject *) self, "tokenImage", arg);
              return -1;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/RateLimiter.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *RateLimiter::class$ = NULL;
        jmethodID *RateLimiter::mids$ = NULL;
        bool RateLimiter::live$ = false;

        jclass RateLimiter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/RateLimiter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_getMbPerSec_54c6a174] = env->getMethodID(cls, "getMbPerSec", "()D");
            mids$[mid_getMinPauseCheckBytes_54c6a17a] = env->getMethodID(cls, "getMinPauseCheckBytes", "()J");
            mids$[mid_pause_0ee6df33] = env->getMethodID(cls, "pause", "(J)J");
            mids$[mid_setMbPerSec_5d1c7645] = env->getMethodID(cls, "setMbPerSec", "(D)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        RateLimiter::RateLimiter() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jdouble RateLimiter::getMbPerSec() const
        {
          return env->callDoubleMethod(this$, mids$[mid_getMbPerSec_54c6a174]);
        }

        jlong RateLimiter::getMinPauseCheckBytes() const
        {
          return env->callLongMethod(this$, mids$[mid_getMinPauseCheckBytes_54c6a17a]);
        }

        jlong RateLimiter::pause(jlong a0) const
        {
          return env->callLongMethod(this$, mids$[mid_pause_0ee6df33], a0);
        }

        void RateLimiter::setMbPerSec(jdouble a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setMbPerSec_5d1c7645], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/store/RateLimiter$SimpleRateLimiter.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_RateLimiter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_RateLimiter_instance_(PyTypeObject *type, PyObject *arg);
        static int t_RateLimiter_init_(t_RateLimiter *self, PyObject *args, PyObject *kwds);
        static PyObject *t_RateLimiter_getMbPerSec(t_RateLimiter *self);
        static PyObject *t_RateLimiter_getMinPauseCheckBytes(t_RateLimiter *self);
        static PyObject *t_RateLimiter_pause(t_RateLimiter *self, PyObject *arg);
        static PyObject *t_RateLimiter_setMbPerSec(t_RateLimiter *self, PyObject *arg);
        static PyObject *t_RateLimiter_get__mbPerSec(t_RateLimiter *self, void *data);
        static int t_RateLimiter_set__mbPerSec(t_RateLimiter *self, PyObject *arg, void *data);
        static PyObject *t_RateLimiter_get__minPauseCheckBytes(t_RateLimiter *self, void *data);
        static PyGetSetDef t_RateLimiter__fields_[] = {
          DECLARE_GETSET_FIELD(t_RateLimiter, mbPerSec),
          DECLARE_GET_FIELD(t_RateLimiter, minPauseCheckBytes),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_RateLimiter__methods_[] = {
          DECLARE_METHOD(t_RateLimiter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RateLimiter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RateLimiter, getMbPerSec, METH_NOARGS),
          DECLARE_METHOD(t_RateLimiter, getMinPauseCheckBytes, METH_NOARGS),
          DECLARE_METHOD(t_RateLimiter, pause, METH_O),
          DECLARE_METHOD(t_RateLimiter, setMbPerSec, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(RateLimiter, t_RateLimiter, ::java::lang::Object, RateLimiter, t_RateLimiter_init_, 0, 0, t_RateLimiter__fields_, 0, 0);

        void t_RateLimiter::install(PyObject *module)
        {
          installType(&PY_TYPE(RateLimiter), module, "RateLimiter", 0);
          PyDict_SetItemString(PY_TYPE(RateLimiter).tp_dict, "SimpleRateLimiter", make_descriptor(&PY_TYPE(RateLimiter$SimpleRateLimiter)));
        }

        void t_RateLimiter::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(RateLimiter).tp_dict, "class_", make_descriptor(RateLimiter::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(RateLimiter).tp_dict, "wrapfn_", make_descriptor(t_RateLimiter::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(RateLimiter).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_RateLimiter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, RateLimiter::initializeClass, 1)))
            return NULL;
          return t_RateLimiter::wrap_Object(RateLimiter(((t_RateLimiter *) arg)->object.this$));
        }
        static PyObject *t_RateLimiter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, RateLimiter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_RateLimiter_init_(t_RateLimiter *self, PyObject *args, PyObject *kwds)
        {
          RateLimiter object((jobject) NULL);

          INT_CALL(object = RateLimiter());
          self->object = object;

          return 0;
        }

        static PyObject *t_RateLimiter_getMbPerSec(t_RateLimiter *self)
        {
          jdouble result;
          OBJ_CALL(result = self->object.getMbPerSec());
          return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_RateLimiter_getMinPauseCheckBytes(t_RateLimiter *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getMinPauseCheckBytes());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_RateLimiter_pause(t_RateLimiter *self, PyObject *arg)
        {
          jlong a0;
          jlong result;

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(result = self->object.pause(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError((PyObject *) self, "pause", arg);
          return NULL;
        }

        static PyObject *t_RateLimiter_setMbPerSec(t_RateLimiter *self, PyObject *arg)
        {
          jdouble a0;

          if (!parseArg(arg, "D", &a0))
          {
            OBJ_CALL(self->object.setMbPerSec(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setMbPerSec", arg);
          return NULL;
        }

        static PyObject *t_RateLimiter_get__mbPerSec(t_RateLimiter *self, void *data)
        {
          jdouble value;
          OBJ_CALL(value = self->object.getMbPerSec());
          return PyFloat_FromDouble((double) value);
        }
        static int t_RateLimiter_set__mbPerSec(t_RateLimiter *self, PyObject *arg, void *data)
        {
          {
            jdouble value;
            if (!parseArg(arg, "D", &value))
            {
              INT_CALL(self->object.setMbPerSec(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "mbPerSec", arg);
          return -1;
        }

        static PyObject *t_RateLimiter_get__minPauseCheckBytes(t_RateLimiter *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getMinPauseCheckBytes());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spell/SpellChecker.h"
#include "org/apache/lucene/search/spell/StringDistance.h"
#include "org/apache/lucene/index/IndexWriterConfig.h"
#include "org/apache/lucene/search/spell/SuggestWord.h"
#include "java/io/Closeable.h"
#include "org/apache/lucene/store/Directory.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/spell/Dictionary.h"
#include "org/apache/lucene/search/spell/SuggestMode.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "java/util/Comparator.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {

          ::java::lang::Class *SpellChecker::class$ = NULL;
          jmethodID *SpellChecker::mids$ = NULL;
          bool SpellChecker::live$ = false;
          jfloat SpellChecker::DEFAULT_ACCURACY = (jfloat) 0;
          ::java::lang::String *SpellChecker::F_WORD = NULL;

          jclass SpellChecker::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spell/SpellChecker");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_2e261ef2] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;)V");
              mids$[mid_init$_234c1a23] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/search/spell/StringDistance;)V");
              mids$[mid_init$_eced4abc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/search/spell/StringDistance;Ljava/util/Comparator;)V");
              mids$[mid_clearIndex_54c6a166] = env->getMethodID(cls, "clearIndex", "()V");
              mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
              mids$[mid_exist_5fdc3f44] = env->getMethodID(cls, "exist", "(Ljava/lang/String;)Z");
              mids$[mid_getAccuracy_54c6a176] = env->getMethodID(cls, "getAccuracy", "()F");
              mids$[mid_getComparator_5a7ff2fc] = env->getMethodID(cls, "getComparator", "()Ljava/util/Comparator;");
              mids$[mid_getStringDistance_a5face5e] = env->getMethodID(cls, "getStringDistance", "()Lorg/apache/lucene/search/spell/StringDistance;");
              mids$[mid_indexDictionary_dcfa1d99] = env->getMethodID(cls, "indexDictionary", "(Lorg/apache/lucene/search/spell/Dictionary;Lorg/apache/lucene/index/IndexWriterConfig;Z)V");
              mids$[mid_setAccuracy_06298cab] = env->getMethodID(cls, "setAccuracy", "(F)V");
              mids$[mid_setComparator_6ffdd545] = env->getMethodID(cls, "setComparator", "(Ljava/util/Comparator;)V");
              mids$[mid_setSpellIndex_2e261ef2] = env->getMethodID(cls, "setSpellIndex", "(Lorg/apache/lucene/store/Directory;)V");
              mids$[mid_setStringDistance_9c934047] = env->getMethodID(cls, "setStringDistance", "(Lorg/apache/lucene/search/spell/StringDistance;)V");
              mids$[mid_suggestSimilar_3384fe85] = env->getMethodID(cls, "suggestSimilar", "(Ljava/lang/String;I)[Ljava/lang/String;");
              mids$[mid_suggestSimilar_4d5d7778] = env->getMethodID(cls, "suggestSimilar", "(Ljava/lang/String;IF)[Ljava/lang/String;");
              mids$[mid_suggestSimilar_f64ed82d] = env->getMethodID(cls, "suggestSimilar", "(Ljava/lang/String;ILorg/apache/lucene/index/IndexReader;Ljava/lang/String;Lorg/apache/lucene/search/spell/SuggestMode;)[Ljava/lang/String;");
              mids$[mid_suggestSimilar_b90725e0] = env->getMethodID(cls, "suggestSimilar", "(Ljava/lang/String;ILorg/apache/lucene/index/IndexReader;Ljava/lang/String;Lorg/apache/lucene/search/spell/SuggestMode;F)[Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_ACCURACY = env->getStaticFloatField(cls, "DEFAULT_ACCURACY");
              F_WORD = new ::java::lang::String(env->getStaticObjectField(cls, "F_WORD", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SpellChecker::SpellChecker(const ::org::apache::lucene::store::Directory & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_2e261ef2, a0.this$)) {}

          SpellChecker::SpellChecker(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::search::spell::StringDistance & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_234c1a23, a0.this$, a1.this$)) {}

          SpellChecker::SpellChecker(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::search::spell::StringDistance & a1, const ::java::util::Comparator & a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_eced4abc, a0.this$, a1.this$, a2.this$)) {}

          void SpellChecker::clearIndex() const
          {
            env->callVoidMethod(this$, mids$[mid_clearIndex_54c6a166]);
          }

          void SpellChecker::close() const
          {
            env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
          }

          jboolean SpellChecker::exist(const ::java::lang::String & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_exist_5fdc3f44], a0.this$);
          }

          jfloat SpellChecker::getAccuracy() const
          {
            return env->callFloatMethod(this$, mids$[mid_getAccuracy_54c6a176]);
          }

          ::java::util::Comparator SpellChecker::getComparator() const
          {
            return ::java::util::Comparator(env->callObjectMethod(this$, mids$[mid_getComparator_5a7ff2fc]));
          }

          ::org::apache::lucene::search::spell::StringDistance SpellChecker::getStringDistance() const
          {
            return ::org::apache::lucene::search::spell::StringDistance(env->callObjectMethod(this$, mids$[mid_getStringDistance_a5face5e]));
          }

          void SpellChecker::indexDictionary(const ::org::apache::lucene::search::spell::Dictionary & a0, const ::org::apache::lucene::index::IndexWriterConfig & a1, jboolean a2) const
          {
            env->callVoidMethod(this$, mids$[mid_indexDictionary_dcfa1d99], a0.this$, a1.this$, a2);
          }

          void SpellChecker::setAccuracy(jfloat a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setAccuracy_06298cab], a0);
          }

          void SpellChecker::setComparator(const ::java::util::Comparator & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setComparator_6ffdd545], a0.this$);
          }

          void SpellChecker::setSpellIndex(const ::org::apache::lucene::store::Directory & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setSpellIndex_2e261ef2], a0.this$);
          }

          void SpellChecker::setStringDistance(const ::org::apache::lucene::search::spell::StringDistance & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setStringDistance_9c934047], a0.this$);
          }

          JArray< ::java::lang::String > SpellChecker::suggestSimilar(const ::java::lang::String & a0, jint a1) const
          {
            return JArray< ::java::lang::String >(env->callObjectMethod(this$, mids$[mid_suggestSimilar_3384fe85], a0.this$, a1));
          }

          JArray< ::java::lang::String > SpellChecker::suggestSimilar(const ::java::lang::String & a0, jint a1, jfloat a2) const
          {
            return JArray< ::java::lang::String >(env->callObjectMethod(this$, mids$[mid_suggestSimilar_4d5d7778], a0.this$, a1, a2));
          }

          JArray< ::java::lang::String > SpellChecker::suggestSimilar(const ::java::lang::String & a0, jint a1, const ::org::apache::lucene::index::IndexReader & a2, const ::java::lang::String & a3, const ::org::apache::lucene::search::spell::SuggestMode & a4) const
          {
            return JArray< ::java::lang::String >(env->callObjectMethod(this$, mids$[mid_suggestSimilar_f64ed82d], a0.this$, a1, a2.this$, a3.this$, a4.this$));
          }

          JArray< ::java::lang::String > SpellChecker::suggestSimilar(const ::java::lang::String & a0, jint a1, const ::org::apache::lucene::index::IndexReader & a2, const ::java::lang::String & a3, const ::org::apache::lucene::search::spell::SuggestMode & a4, jfloat a5) const
          {
            return JArray< ::java::lang::String >(env->callObjectMethod(this$, mids$[mid_suggestSimilar_b90725e0], a0.this$, a1, a2.this$, a3.this$, a4.this$, a5));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {
          static PyObject *t_SpellChecker_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SpellChecker_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SpellChecker_init_(t_SpellChecker *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SpellChecker_clearIndex(t_SpellChecker *self);
          static PyObject *t_SpellChecker_close(t_SpellChecker *self);
          static PyObject *t_SpellChecker_exist(t_SpellChecker *self, PyObject *arg);
          static PyObject *t_SpellChecker_getAccuracy(t_SpellChecker *self);
          static PyObject *t_SpellChecker_getComparator(t_SpellChecker *self);
          static PyObject *t_SpellChecker_getStringDistance(t_SpellChecker *self);
          static PyObject *t_SpellChecker_indexDictionary(t_SpellChecker *self, PyObject *args);
          static PyObject *t_SpellChecker_setAccuracy(t_SpellChecker *self, PyObject *arg);
          static PyObject *t_SpellChecker_setComparator(t_SpellChecker *self, PyObject *arg);
          static PyObject *t_SpellChecker_setSpellIndex(t_SpellChecker *self, PyObject *arg);
          static PyObject *t_SpellChecker_setStringDistance(t_SpellChecker *self, PyObject *arg);
          static PyObject *t_SpellChecker_suggestSimilar(t_SpellChecker *self, PyObject *args);
          static PyObject *t_SpellChecker_get__accuracy(t_SpellChecker *self, void *data);
          static int t_SpellChecker_set__accuracy(t_SpellChecker *self, PyObject *arg, void *data);
          static PyObject *t_SpellChecker_get__comparator(t_SpellChecker *self, void *data);
          static int t_SpellChecker_set__comparator(t_SpellChecker *self, PyObject *arg, void *data);
          static int t_SpellChecker_set__spellIndex(t_SpellChecker *self, PyObject *arg, void *data);
          static PyObject *t_SpellChecker_get__stringDistance(t_SpellChecker *self, void *data);
          static int t_SpellChecker_set__stringDistance(t_SpellChecker *self, PyObject *arg, void *data);
          static PyGetSetDef t_SpellChecker__fields_[] = {
            DECLARE_GETSET_FIELD(t_SpellChecker, accuracy),
            DECLARE_GETSET_FIELD(t_SpellChecker, comparator),
            DECLARE_SET_FIELD(t_SpellChecker, spellIndex),
            DECLARE_GETSET_FIELD(t_SpellChecker, stringDistance),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SpellChecker__methods_[] = {
            DECLARE_METHOD(t_SpellChecker, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpellChecker, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpellChecker, clearIndex, METH_NOARGS),
            DECLARE_METHOD(t_SpellChecker, close, METH_NOARGS),
            DECLARE_METHOD(t_SpellChecker, exist, METH_O),
            DECLARE_METHOD(t_SpellChecker, getAccuracy, METH_NOARGS),
            DECLARE_METHOD(t_SpellChecker, getComparator, METH_NOARGS),
            DECLARE_METHOD(t_SpellChecker, getStringDistance, METH_NOARGS),
            DECLARE_METHOD(t_SpellChecker, indexDictionary, METH_VARARGS),
            DECLARE_METHOD(t_SpellChecker, setAccuracy, METH_O),
            DECLARE_METHOD(t_SpellChecker, setComparator, METH_O),
            DECLARE_METHOD(t_SpellChecker, setSpellIndex, METH_O),
            DECLARE_METHOD(t_SpellChecker, setStringDistance, METH_O),
            DECLARE_METHOD(t_SpellChecker, suggestSimilar, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SpellChecker, t_SpellChecker, ::java::lang::Object, SpellChecker, t_SpellChecker_init_, 0, 0, t_SpellChecker__fields_, 0, 0);

          void t_SpellChecker::install(PyObject *module)
          {
            installType(&PY_TYPE(SpellChecker), module, "SpellChecker", 0);
          }

          void t_SpellChecker::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SpellChecker).tp_dict, "class_", make_descriptor(SpellChecker::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SpellChecker).tp_dict, "wrapfn_", make_descriptor(t_SpellChecker::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SpellChecker).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(SpellChecker::initializeClass);
            PyDict_SetItemString(PY_TYPE(SpellChecker).tp_dict, "DEFAULT_ACCURACY", make_descriptor(SpellChecker::DEFAULT_ACCURACY));
            PyDict_SetItemString(PY_TYPE(SpellChecker).tp_dict, "F_WORD", make_descriptor(j2p(*SpellChecker::F_WORD)));
          }

          static PyObject *t_SpellChecker_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SpellChecker::initializeClass, 1)))
              return NULL;
            return t_SpellChecker::wrap_Object(SpellChecker(((t_SpellChecker *) arg)->object.this$));
          }
          static PyObject *t_SpellChecker_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SpellChecker::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SpellChecker_init_(t_SpellChecker *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::store::Directory a0((jobject) NULL);
                SpellChecker object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::store::Directory::initializeClass, &a0))
                {
                  INT_CALL(object = SpellChecker(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::store::Directory a0((jobject) NULL);
                ::org::apache::lucene::search::spell::StringDistance a1((jobject) NULL);
                SpellChecker object((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::search::spell::StringDistance::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = SpellChecker(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::store::Directory a0((jobject) NULL);
                ::org::apache::lucene::search::spell::StringDistance a1((jobject) NULL);
                ::java::util::Comparator a2((jobject) NULL);
                PyTypeObject **p2;
                SpellChecker object((jobject) NULL);

                if (!parseArgs(args, "kkK", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::search::spell::StringDistance::initializeClass, ::java::util::Comparator::initializeClass, &a0, &a1, &a2, &p2, ::java::util::t_Comparator::parameters_))
                {
                  INT_CALL(object = SpellChecker(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SpellChecker_clearIndex(t_SpellChecker *self)
          {
            OBJ_CALL(self->object.clearIndex());
            Py_RETURN_NONE;
          }

          static PyObject *t_SpellChecker_close(t_SpellChecker *self)
          {
            OBJ_CALL(self->object.close());
            Py_RETURN_NONE;
          }

          static PyObject *t_SpellChecker_exist(t_SpellChecker *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            jboolean result;

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.exist(a0));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError((PyObject *) self, "exist", arg);
            return NULL;
          }

          static PyObject *t_SpellChecker_getAccuracy(t_SpellChecker *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getAccuracy());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_SpellChecker_getComparator(t_SpellChecker *self)
          {
            ::java::util::Comparator result((jobject) NULL);
            OBJ_CALL(result = self->object.getComparator());
            return ::java::util::t_Comparator::wrap_Object(result, &::org::apache::lucene::search::spell::PY_TYPE(SuggestWord));
          }

          static PyObject *t_SpellChecker_getStringDistance(t_SpellChecker *self)
          {
            ::org::apache::lucene::search::spell::StringDistance result((jobject) NULL);
            OBJ_CALL(result = self->object.getStringDistance());
            return ::org::apache::lucene::search::spell::t_StringDistance::wrap_Object(result);
          }

          static PyObject *t_SpellChecker_indexDictionary(t_SpellChecker *self, PyObject *args)
          {
            ::org::apache::lucene::search::spell::Dictionary a0((jobject) NULL);
            ::org::apache::lucene::index::IndexWriterConfig a1((jobject) NULL);
            jboolean a2;

            if (!parseArgs(args, "kkZ", ::org::apache::lucene::search::spell::Dictionary::initializeClass, ::org::apache::lucene::index::IndexWriterConfig::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(self->object.indexDictionary(a0, a1, a2));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "indexDictionary", args);
            return NULL;
          }

          static PyObject *t_SpellChecker_setAccuracy(t_SpellChecker *self, PyObject *arg)
          {
            jfloat a0;

            if (!parseArg(arg, "F", &a0))
            {
              OBJ_CALL(self->object.setAccuracy(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setAccuracy", arg);
            return NULL;
          }

          static PyObject *t_SpellChecker_setComparator(t_SpellChecker *self, PyObject *arg)
          {
            ::java::util::Comparator a0((jobject) NULL);
            PyTypeObject **p0;

            if (!parseArg(arg, "K", ::java::util::Comparator::initializeClass, &a0, &p0, ::java::util::t_Comparator::parameters_))
            {
              OBJ_CALL(self->object.setComparator(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setComparator", arg);
            return NULL;
          }

          static PyObject *t_SpellChecker_setSpellIndex(t_SpellChecker *self, PyObject *arg)
          {
            ::org::apache::lucene::store::Directory a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::store::Directory::initializeClass, &a0))
            {
              OBJ_CALL(self->object.setSpellIndex(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setSpellIndex", arg);
            return NULL;
          }

          static PyObject *t_SpellChecker_setStringDistance(t_SpellChecker *self, PyObject *arg)
          {
            ::org::apache::lucene::search::spell::StringDistance a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::search::spell::StringDistance::initializeClass, &a0))
            {
              OBJ_CALL(self->object.setStringDistance(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setStringDistance", arg);
            return NULL;
          }

          static PyObject *t_SpellChecker_suggestSimilar(t_SpellChecker *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::java::lang::String a0((jobject) NULL);
                jint a1;
                JArray< ::java::lang::String > result((jobject) NULL);

                if (!parseArgs(args, "sI", &a0, &a1))
                {
                  OBJ_CALL(result = self->object.suggestSimilar(a0, a1));
                  return JArray<jstring>(result.this$).wrap();
                }
              }
              break;
             case 3:
              {
                ::java::lang::String a0((jobject) NULL);
                jint a1;
                jfloat a2;
                JArray< ::java::lang::String > result((jobject) NULL);

                if (!parseArgs(args, "sIF", &a0, &a1, &a2))
                {
                  OBJ_CALL(result = self->object.suggestSimilar(a0, a1, a2));
                  return JArray<jstring>(result.this$).wrap();
                }
              }
              break;
             case 5:
              {
                ::java::lang::String a0((jobject) NULL);
                jint a1;
                ::org::apache::lucene::index::IndexReader a2((jobject) NULL);
                ::java::lang::String a3((jobject) NULL);
                ::org::apache::lucene::search::spell::SuggestMode a4((jobject) NULL);
                PyTypeObject **p4;
                JArray< ::java::lang::String > result((jobject) NULL);

                if (!parseArgs(args, "sIksK", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::search::spell::SuggestMode::initializeClass, &a0, &a1, &a2, &a3, &a4, &p4, ::org::apache::lucene::search::spell::t_SuggestMode::parameters_))
                {
                  OBJ_CALL(result = self->object.suggestSimilar(a0, a1, a2, a3, a4));
                  return JArray<jstring>(result.this$).wrap();
                }
              }
              break;
             case 6:
              {
                ::java::lang::String a0((jobject) NULL);
                jint a1;
                ::org::apache::lucene::index::IndexReader a2((jobject) NULL);
                ::java::lang::String a3((jobject) NULL);
                ::org::apache::lucene::search::spell::SuggestMode a4((jobject) NULL);
                PyTypeObject **p4;
                jfloat a5;
                JArray< ::java::lang::String > result((jobject) NULL);

                if (!parseArgs(args, "sIksKF", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::search::spell::SuggestMode::initializeClass, &a0, &a1, &a2, &a3, &a4, &p4, ::org::apache::lucene::search::spell::t_SuggestMode::parameters_, &a5))
                {
                  OBJ_CALL(result = self->object.suggestSimilar(a0, a1, a2, a3, a4, a5));
                  return JArray<jstring>(result.this$).wrap();
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "suggestSimilar", args);
            return NULL;
          }

          static PyObject *t_SpellChecker_get__accuracy(t_SpellChecker *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getAccuracy());
            return PyFloat_FromDouble((double) value);
          }
          static int t_SpellChecker_set__accuracy(t_SpellChecker *self, PyObject *arg, void *data)
          {
            {
              jfloat value;
              if (!parseArg(arg, "F", &value))
              {
                INT_CALL(self->object.setAccuracy(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "accuracy", arg);
            return -1;
          }

          static PyObject *t_SpellChecker_get__comparator(t_SpellChecker *self, void *data)
          {
            ::java::util::Comparator value((jobject) NULL);
            OBJ_CALL(value = self->object.getComparator());
            return ::java::util::t_Comparator::wrap_Object(value);
          }
          static int t_SpellChecker_set__comparator(t_SpellChecker *self, PyObject *arg, void *data)
          {
            {
              ::java::util::Comparator value((jobject) NULL);
              if (!parseArg(arg, "k", ::java::util::Comparator::initializeClass, &value))
              {
                INT_CALL(self->object.setComparator(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "comparator", arg);
            return -1;
          }

          static int t_SpellChecker_set__spellIndex(t_SpellChecker *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::store::Directory value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::store::Directory::initializeClass, &value))
              {
                INT_CALL(self->object.setSpellIndex(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "spellIndex", arg);
            return -1;
          }

          static PyObject *t_SpellChecker_get__stringDistance(t_SpellChecker *self, void *data)
          {
            ::org::apache::lucene::search::spell::StringDistance value((jobject) NULL);
            OBJ_CALL(value = self->object.getStringDistance());
            return ::org::apache::lucene::search::spell::t_StringDistance::wrap_Object(value);
          }
          static int t_SpellChecker_set__stringDistance(t_SpellChecker *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::search::spell::StringDistance value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::search::spell::StringDistance::initializeClass, &value))
              {
                INT_CALL(self->object.setStringDistance(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "stringDistance", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/InputIterator.h"
#include "java/util/Set.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {

          ::java::lang::Class *InputIterator::class$ = NULL;
          jmethodID *InputIterator::mids$ = NULL;
          bool InputIterator::live$ = false;
          InputIterator *InputIterator::EMPTY = NULL;

          jclass InputIterator::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/InputIterator");

              mids$ = new jmethodID[max_mid];
              mids$[mid_contexts_03e99967] = env->getMethodID(cls, "contexts", "()Ljava/util/Set;");
              mids$[mid_hasContexts_54c6a16a] = env->getMethodID(cls, "hasContexts", "()Z");
              mids$[mid_hasPayloads_54c6a16a] = env->getMethodID(cls, "hasPayloads", "()Z");
              mids$[mid_payload_4ae19461] = env->getMethodID(cls, "payload", "()Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_weight_54c6a17a] = env->getMethodID(cls, "weight", "()J");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              EMPTY = new InputIterator(env->getStaticObjectField(cls, "EMPTY", "Lorg/apache/lucene/search/suggest/InputIterator;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::java::util::Set InputIterator::contexts() const
          {
            return ::java::util::Set(env->callObjectMethod(this$, mids$[mid_contexts_03e99967]));
          }

          jboolean InputIterator::hasContexts() const
          {
            return env->callBooleanMethod(this$, mids$[mid_hasContexts_54c6a16a]);
          }

          jboolean InputIterator::hasPayloads() const
          {
            return env->callBooleanMethod(this$, mids$[mid_hasPayloads_54c6a16a]);
          }

          ::org::apache::lucene::util::BytesRef InputIterator::payload() const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_payload_4ae19461]));
          }

          jlong InputIterator::weight() const
          {
            return env->callLongMethod(this$, mids$[mid_weight_54c6a17a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/search/suggest/InputIterator$InputIteratorWrapper.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          static PyObject *t_InputIterator_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_InputIterator_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_InputIterator_contexts(t_InputIterator *self);
          static PyObject *t_InputIterator_hasContexts(t_InputIterator *self);
          static PyObject *t_InputIterator_hasPayloads(t_InputIterator *self);
          static PyObject *t_InputIterator_payload(t_InputIterator *self);
          static PyObject *t_InputIterator_weight(t_InputIterator *self);

          static PyMethodDef t_InputIterator__methods_[] = {
            DECLARE_METHOD(t_InputIterator, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_InputIterator, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_InputIterator, contexts, METH_NOARGS),
            DECLARE_METHOD(t_InputIterator, hasContexts, METH_NOARGS),
            DECLARE_METHOD(t_InputIterator, hasPayloads, METH_NOARGS),
            DECLARE_METHOD(t_InputIterator, payload, METH_NOARGS),
            DECLARE_METHOD(t_InputIterator, weight, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(InputIterator, t_InputIterator, ::org::apache::lucene::util::BytesRefIterator, InputIterator, abstract_init, 0, 0, 0, 0, 0);

          void t_InputIterator::install(PyObject *module)
          {
            installType(&PY_TYPE(InputIterator), module, "InputIterator", 0);
            PyDict_SetItemString(PY_TYPE(InputIterator).tp_dict, "InputIteratorWrapper", make_descriptor(&PY_TYPE(InputIterator$InputIteratorWrapper)));
          }

          void t_InputIterator::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(InputIterator).tp_dict, "class_", make_descriptor(InputIterator::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(InputIterator).tp_dict, "wrapfn_", make_descriptor(t_InputIterator::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(InputIterator).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(InputIterator::initializeClass);
            PyDict_SetItemString(PY_TYPE(InputIterator).tp_dict, "EMPTY", make_descriptor(t_InputIterator::wrap_Object(*InputIterator::EMPTY)));
          }

          static PyObject *t_InputIterator_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, InputIterator::initializeClass, 1)))
              return NULL;
            return t_InputIterator::wrap_Object(InputIterator(((t_InputIterator *) arg)->object.this$));
          }
          static PyObject *t_InputIterator_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, InputIterator::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_InputIterator_contexts(t_InputIterator *self)
          {
            ::java::util::Set result((jobject) NULL);
            OBJ_CALL(result = self->object.contexts());
            return ::java::util::t_Set::wrap_Object(result, &::org::apache::lucene::util::PY_TYPE(BytesRef));
          }

          static PyObject *t_InputIterator_hasContexts(t_InputIterator *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.hasContexts());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_InputIterator_hasPayloads(t_InputIterator *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.hasPayloads());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_InputIterator_payload(t_InputIterator *self)
          {
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);
            OBJ_CALL(result = self->object.payload());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          static PyObject *t_InputIterator_weight(t_InputIterator *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.weight());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/NormalizationH1.h"
#include "org/apache/lucene/search/similarities/BasicStats.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *NormalizationH1::class$ = NULL;
          jmethodID *NormalizationH1::mids$ = NULL;
          bool NormalizationH1::live$ = false;

          jclass NormalizationH1::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/NormalizationH1");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_06298cab] = env->getMethodID(cls, "<init>", "(F)V");
              mids$[mid_getC_54c6a176] = env->getMethodID(cls, "getC", "()F");
              mids$[mid_tfn_63482206] = env->getMethodID(cls, "tfn", "(Lorg/apache/lucene/search/similarities/BasicStats;FF)F");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          NormalizationH1::NormalizationH1() : ::org::apache::lucene::search::similarities::Normalization(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          NormalizationH1::NormalizationH1(jfloat a0) : ::org::apache::lucene::search::similarities::Normalization(env->newObject(initializeClass, &mids$, mid_init$_06298cab, a0)) {}

          jfloat NormalizationH1::getC() const
          {
            return env->callFloatMethod(this$, mids$[mid_getC_54c6a176]);
          }

          jfloat NormalizationH1::tfn(const ::org::apache::lucene::search::similarities::BasicStats & a0, jfloat a1, jfloat a2) const
          {
            return env->callFloatMethod(this$, mids$[mid_tfn_63482206], a0.this$, a1, a2);
          }

          ::java::lang::String NormalizationH1::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_NormalizationH1_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_NormalizationH1_instance_(PyTypeObject *type, PyObject *arg);
          static int t_NormalizationH1_init_(t_NormalizationH1 *self, PyObject *args, PyObject *kwds);
          static PyObject *t_NormalizationH1_getC(t_NormalizationH1 *self);
          static PyObject *t_NormalizationH1_tfn(t_NormalizationH1 *self, PyObject *args);
          static PyObject *t_NormalizationH1_toString(t_NormalizationH1 *self, PyObject *args);
          static PyObject *t_NormalizationH1_get__c(t_NormalizationH1 *self, void *data);
          static PyGetSetDef t_NormalizationH1__fields_[] = {
            DECLARE_GET_FIELD(t_NormalizationH1, c),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_NormalizationH1__methods_[] = {
            DECLARE_METHOD(t_NormalizationH1, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NormalizationH1, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NormalizationH1, getC, METH_NOARGS),
            DECLARE_METHOD(t_NormalizationH1, tfn, METH_VARARGS),
            DECLARE_METHOD(t_NormalizationH1, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(NormalizationH1, t_NormalizationH1, ::org::apache::lucene::search::similarities::Normalization, NormalizationH1, t_NormalizationH1_init_, 0, 0, t_NormalizationH1__fields_, 0, 0);

          void t_NormalizationH1::install(PyObject *module)
          {
            installType(&PY_TYPE(NormalizationH1), module, "NormalizationH1", 0);
          }

          void t_NormalizationH1::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(NormalizationH1).tp_dict, "class_", make_descriptor(NormalizationH1::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(NormalizationH1).tp_dict, "wrapfn_", make_descriptor(t_NormalizationH1::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(NormalizationH1).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_NormalizationH1_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, NormalizationH1::initializeClass, 1)))
              return NULL;
            return t_NormalizationH1::wrap_Object(NormalizationH1(((t_NormalizationH1 *) arg)->object.this$));
          }
          static PyObject *t_NormalizationH1_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, NormalizationH1::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_NormalizationH1_init_(t_NormalizationH1 *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                NormalizationH1 object((jobject) NULL);

                INT_CALL(object = NormalizationH1());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                jfloat a0;
                NormalizationH1 object((jobject) NULL);

                if (!parseArgs(args, "F", &a0))
                {
                  INT_CALL(object = NormalizationH1(a0));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_NormalizationH1_getC(t_NormalizationH1 *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getC());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_NormalizationH1_tfn(t_NormalizationH1 *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jfloat a1;
            jfloat a2;
            jfloat result;

            if (!parseArgs(args, "kFF", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.tfn(a0, a1, a2));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(NormalizationH1), (PyObject *) self, "tfn", args, 2);
          }

          static PyObject *t_NormalizationH1_toString(t_NormalizationH1 *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(NormalizationH1), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_NormalizationH1_get__c(t_NormalizationH1 *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getC());
            return PyFloat_FromDouble((double) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/classic/MultiFieldQueryParser.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/classic/ParseException.h"
#include "org/apache/lucene/search/BooleanClause$Occur.h"
#include "java/lang/Float.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace classic {

          ::java::lang::Class *MultiFieldQueryParser::class$ = NULL;
          jmethodID *MultiFieldQueryParser::mids$ = NULL;
          bool MultiFieldQueryParser::live$ = false;

          jclass MultiFieldQueryParser::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/classic/MultiFieldQueryParser");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_0cc1237a] = env->getMethodID(cls, "<init>", "([Ljava/lang/String;Lorg/apache/lucene/analysis/Analyzer;)V");
              mids$[mid_init$_822fc5c3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;[Ljava/lang/String;Lorg/apache/lucene/analysis/Analyzer;)V");
              mids$[mid_init$_4a8d5478] = env->getMethodID(cls, "<init>", "([Ljava/lang/String;Lorg/apache/lucene/analysis/Analyzer;Ljava/util/Map;)V");
              mids$[mid_init$_84717d3b] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;[Ljava/lang/String;Lorg/apache/lucene/analysis/Analyzer;Ljava/util/Map;)V");
              mids$[mid_parse_79a3f5c4] = env->getStaticMethodID(cls, "parse", "([Ljava/lang/String;[Ljava/lang/String;Lorg/apache/lucene/analysis/Analyzer;)Lorg/apache/lucene/search/Query;");
              mids$[mid_parse_046ef74e] = env->getStaticMethodID(cls, "parse", "(Ljava/lang/String;[Ljava/lang/String;[Lorg/apache/lucene/search/BooleanClause$Occur;Lorg/apache/lucene/analysis/Analyzer;)Lorg/apache/lucene/search/Query;");
              mids$[mid_parse_084a531a] = env->getStaticMethodID(cls, "parse", "([Ljava/lang/String;[Ljava/lang/String;[Lorg/apache/lucene/search/BooleanClause$Occur;Lorg/apache/lucene/analysis/Analyzer;)Lorg/apache/lucene/search/Query;");
              mids$[mid_parse_8e084329] = env->getStaticMethodID(cls, "parse", "(Lorg/apache/lucene/util/Version;[Ljava/lang/String;[Ljava/lang/String;Lorg/apache/lucene/analysis/Analyzer;)Lorg/apache/lucene/search/Query;");
              mids$[mid_parse_5707fee1] = env->getStaticMethodID(cls, "parse", "(Lorg/apache/lucene/util/Version;[Ljava/lang/String;[Ljava/lang/String;[Lorg/apache/lucene/search/BooleanClause$Occur;Lorg/apache/lucene/analysis/Analyzer;)Lorg/apache/lucene/search/Query;");
              mids$[mid_parse_6b08888f] = env->getStaticMethodID(cls, "parse", "(Lorg/apache/lucene/util/Version;Ljava/lang/String;[Ljava/lang/String;[Lorg/apache/lucene/search/BooleanClause$Occur;Lorg/apache/lucene/analysis/Analyzer;)Lorg/apache/lucene/search/Query;");
              mids$[mid_getFieldQuery_bd696f55] = env->getMethodID(cls, "getFieldQuery", "(Ljava/lang/String;Ljava/lang/String;Z)Lorg/apache/lucene/search/Query;");
              mids$[mid_getFieldQuery_c7c8d9a8] = env->getMethodID(cls, "getFieldQuery", "(Ljava/lang/String;Ljava/lang/String;I)Lorg/apache/lucene/search/Query;");
              mids$[mid_getWildcardQuery_38d6e77e] = env->getMethodID(cls, "getWildcardQuery", "(Ljava/lang/String;Ljava/lang/String;)Lorg/apache/lucene/search/Query;");
              mids$[mid_getRangeQuery_75fd45b6] = env->getMethodID(cls, "getRangeQuery", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ZZ)Lorg/apache/lucene/search/Query;");
              mids$[mid_getFuzzyQuery_45995161] = env->getMethodID(cls, "getFuzzyQuery", "(Ljava/lang/String;Ljava/lang/String;F)Lorg/apache/lucene/search/Query;");
              mids$[mid_getRegexpQuery_38d6e77e] = env->getMethodID(cls, "getRegexpQuery", "(Ljava/lang/String;Ljava/lang/String;)Lorg/apache/lucene/search/Query;");
              mids$[mid_getPrefixQuery_38d6e77e] = env->getMethodID(cls, "getPrefixQuery", "(Ljava/lang/String;Ljava/lang/String;)Lorg/apache/lucene/search/Query;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          MultiFieldQueryParser::MultiFieldQueryParser(const JArray< ::java::lang::String > & a0, const ::org::apache::lucene::analysis::Analyzer & a1) : ::org::apache::lucene::queryparser::classic::QueryParser(env->newObject(initializeClass, &mids$, mid_init$_0cc1237a, a0.this$, a1.this$)) {}

          MultiFieldQueryParser::MultiFieldQueryParser(const ::org::apache::lucene::util::Version & a0, const JArray< ::java::lang::String > & a1, const ::org::apache::lucene::analysis::Analyzer & a2) : ::org::apache::lucene::queryparser::classic::QueryParser(env->newObject(initializeClass, &mids$, mid_init$_822fc5c3, a0.this$, a1.this$, a2.this$)) {}

          MultiFieldQueryParser::MultiFieldQueryParser(const JArray< ::java::lang::String > & a0, const ::org::apache::lucene::analysis::Analyzer & a1, const ::java::util::Map & a2) : ::org::apache::lucene::queryparser::classic::QueryParser(env->newObject(initializeClass, &mids$, mid_init$_4a8d5478, a0.this$, a1.this$, a2.this$)) {}

          MultiFieldQueryParser::MultiFieldQueryParser(const ::org::apache::lucene::util::Version & a0, const JArray< ::java::lang::String > & a1, const ::org::apache::lucene::analysis::Analyzer & a2, const ::java::util::Map & a3) : ::org::apache::lucene::queryparser::classic::QueryParser(env->newObject(initializeClass, &mids$, mid_init$_84717d3b, a0.this$, a1.this$, a2.this$, a3.this$)) {}

          ::org::apache::lucene::search::Query MultiFieldQueryParser::parse(const JArray< ::java::lang::String > & a0, const JArray< ::java::lang::String > & a1, const ::org::apache::lucene::analysis::Analyzer & a2)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::search::Query(env->callStaticObjectMethod(cls, mids$[mid_parse_79a3f5c4], a0.this$, a1.this$, a2.this$));
          }

          ::org::apache::lucene::search::Query MultiFieldQueryParser::parse(const ::java::lang::String & a0, const JArray< ::java::lang::String > & a1, const JArray< ::org::apache::lucene::search::BooleanClause$Occur > & a2, const ::org::apache::lucene::analysis::Analyzer & a3)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::search::Query(env->callStaticObjectMethod(cls, mids$[mid_parse_046ef74e], a0.this$, a1.this$, a2.this$, a3.this$));
          }

          ::org::apache::lucene::search::Query MultiFieldQueryParser::parse(const JArray< ::java::lang::String > & a0, const JArray< ::java::lang::String > & a1, const JArray< ::org::apache::lucene::search::BooleanClause$Occur > & a2, const ::org::apache::lucene::analysis::Analyzer & a3)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::search::Query(env->callStaticObjectMethod(cls, mids$[mid_parse_084a531a], a0.this$, a1.this$, a2.this$, a3.this$));
          }

          ::org::apache::lucene::search::Query MultiFieldQueryParser::parse(const ::org::apache::lucene::util::Version & a0, const JArray< ::java::lang::String > & a1, const JArray< ::java::lang::String > & a2, const ::org::apache::lucene::analysis::Analyzer & a3)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::search::Query(env->callStaticObjectMethod(cls, mids$[mid_parse_8e084329], a0.this$, a1.this$, a2.this$, a3.this$));
          }

          ::org::apache::lucene::search::Query MultiFieldQueryParser::parse(const ::org::apache::lucene::util::Version & a0, const JArray< ::java::lang::String > & a1, const JArray< ::java::lang::String > & a2, const JArray< ::org::apache::lucene::search::BooleanClause$Occur > & a3, const ::org::apache::lucene::analysis::Analyzer & a4)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::search::Query(env->callStaticObjectMethod(cls, mids$[mid_parse_5707fee1], a0.this$, a1.this$, a2.this$, a3.this$, a4.this$));
          }

          ::org::apache::lucene::search::Query MultiFieldQueryParser::parse(const ::org::apache::lucene::util::Version & a0, const ::java::lang::String & a1, const JArray< ::java::lang::String > & a2, const JArray< ::org::apache::lucene::search::BooleanClause$Occur > & a3, const ::org::apache::lucene::analysis::Analyzer & a4)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::search::Query(env->callStaticObjectMethod(cls, mids$[mid_parse_6b08888f], a0.this$, a1.this$, a2.this$, a3.this$, a4.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace classic {
          static PyObject *t_MultiFieldQueryParser_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_MultiFieldQueryParser_instance_(PyTypeObject *type, PyObject *arg);
          static int t_MultiFieldQueryParser_init_(t_MultiFieldQueryParser *self, PyObject *args, PyObject *kwds);
          static PyObject *t_MultiFieldQueryParser_parse(PyTypeObject *type, PyObject *args);

          static PyMethodDef t_MultiFieldQueryParser__methods_[] = {
            DECLARE_METHOD(t_MultiFieldQueryParser, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MultiFieldQueryParser, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MultiFieldQueryParser, parse, METH_VARARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(MultiFieldQueryParser, t_MultiFieldQueryParser, ::org::apache::lucene::queryparser::classic::QueryParser, MultiFieldQueryParser, t_MultiFieldQueryParser_init_, 0, 0, 0, 0, 0);

          void t_MultiFieldQueryParser::install(PyObject *module)
          {
            installType(&PY_TYPE(MultiFieldQueryParser), module, "MultiFieldQueryParser", 0);
          }

          void t_MultiFieldQueryParser::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(MultiFieldQueryParser).tp_dict, "class_", make_descriptor(MultiFieldQueryParser::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(MultiFieldQueryParser).tp_dict, "wrapfn_", make_descriptor(t_MultiFieldQueryParser::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(MultiFieldQueryParser).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_MultiFieldQueryParser_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, MultiFieldQueryParser::initializeClass, 1)))
              return NULL;
            return t_MultiFieldQueryParser::wrap_Object(MultiFieldQueryParser(((t_MultiFieldQueryParser *) arg)->object.this$));
          }
          static PyObject *t_MultiFieldQueryParser_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, MultiFieldQueryParser::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_MultiFieldQueryParser_init_(t_MultiFieldQueryParser *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                JArray< ::java::lang::String > a0((jobject) NULL);
                ::org::apache::lucene::analysis::Analyzer a1((jobject) NULL);
                MultiFieldQueryParser object((jobject) NULL);

                if (!parseArgs(args, "[sk", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = MultiFieldQueryParser(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                JArray< ::java::lang::String > a1((jobject) NULL);
                ::org::apache::lucene::analysis::Analyzer a2((jobject) NULL);
                MultiFieldQueryParser object((jobject) NULL);

                if (!parseArgs(args, "k[sk", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = MultiFieldQueryParser(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              {
                JArray< ::java::lang::String > a0((jobject) NULL);
                ::org::apache::lucene::analysis::Analyzer a1((jobject) NULL);
                ::java::util::Map a2((jobject) NULL);
                PyTypeObject **p2;
                MultiFieldQueryParser object((jobject) NULL);

                if (!parseArgs(args, "[skK", ::org::apache::lucene::analysis::Analyzer::initializeClass, ::java::util::Map::initializeClass, &a0, &a1, &a2, &p2, ::java::util::t_Map::parameters_))
                {
                  INT_CALL(object = MultiFieldQueryParser(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 4:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                JArray< ::java::lang::String > a1((jobject) NULL);
                ::org::apache::lucene::analysis::Analyzer a2((jobject) NULL);
                ::java::util::Map a3((jobject) NULL);
                PyTypeObject **p3;
                MultiFieldQueryParser object((jobject) NULL);

                if (!parseArgs(args, "k[skK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, ::java::util::Map::initializeClass, &a0, &a1, &a2, &a3, &p3, ::java::util::t_Map::parameters_))
                {
                  INT_CALL(object = MultiFieldQueryParser(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_MultiFieldQueryParser_parse(PyTypeObject *type, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 3:
              {
                JArray< ::java::lang::String > a0((jobject) NULL);
                JArray< ::java::lang::String > a1((jobject) NULL);
                ::org::apache::lucene::analysis::Analyzer a2((jobject) NULL);
                ::org::apache::lucene::search::Query result((jobject) NULL);

                if (!parseArgs(args, "[s[sk", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1, &a2))
                {
                  OBJ_CALL(result = ::org::apache::lucene::queryparser::classic::MultiFieldQueryParser::parse(a0, a1, a2));
                  return ::org::apache::lucene::search::t_Query::wrap_Object(result);
                }
              }
              break;
             case 4:
              {
                ::java::lang::String a0((jobject) NULL);
                JArray< ::java::lang::String > a1((jobject) NULL);
                JArray< ::org::apache::lucene::search::BooleanClause$Occur > a2((jobject) NULL);
                PyTypeObject **p2;
                ::org::apache::lucene::analysis::Analyzer a3((jobject) NULL);
                ::org::apache::lucene::search::Query result((jobject) NULL);

                if (!parseArgs(args, "s[s[Kk", ::org::apache::lucene::search::BooleanClause$Occur::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1, &a2, &p2, ::org::apache::lucene::search::t_BooleanClause$Occur::parameters_, &a3))
                {
                  OBJ_CALL(result = ::org::apache::lucene::queryparser::classic::MultiFieldQueryParser::parse(a0, a1, a2, a3));
                  return ::org::apache::lucene::search::t_Query::wrap_Object(result);
                }
              }
              {
                JArray< ::java::lang::String > a0((jobject) NULL);
                JArray< ::java::lang::String > a1((jobject) NULL);
                JArray< ::org::apache::lucene::search::BooleanClause$Occur > a2((jobject) NULL);
                PyTypeObject **p2;
                ::org::apache::lucene::analysis::Analyzer a3((jobject) NULL);
                ::org::apache::lucene::search::Query result((jobject) NULL);

                if (!parseArgs(args, "[s[s[Kk", ::org::apache::lucene::search::BooleanClause$Occur::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1, &a2, &p2, ::org::apache::lucene::search::t_BooleanClause$Occur::parameters_, &a3))
                {
                  OBJ_CALL(result = ::org::apache::lucene::queryparser::classic::MultiFieldQueryParser::parse(a0, a1, a2, a3));
                  return ::org::apache::lucene::search::t_Query::wrap_Object(result);
                }
              }
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                JArray< ::java::lang::String > a1((jobject) NULL);
                JArray< ::java::lang::String > a2((jobject) NULL);
                ::org::apache::lucene::analysis::Analyzer a3((jobject) NULL);
                ::org::apache::lucene::search::Query result((jobject) NULL);

                if (!parseArgs(args, "k[s[sk", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1, &a2, &a3))
                {
                  OBJ_CALL(result = ::org::apache::lucene::queryparser::classic::MultiFieldQueryParser::parse(a0, a1, a2, a3));
                  return ::org::apache::lucene::search::t_Query::wrap_Object(result);
                }
              }
              break;
             case 5:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                JArray< ::java::lang::String > a1((jobject) NULL);
                JArray< ::java::lang::String > a2((jobject) NULL);
                JArray< ::org::apache::lucene::search::BooleanClause$Occur > a3((jobject) NULL);
                PyTypeObject **p3;
                ::org::apache::lucene::analysis::Analyzer a4((jobject) NULL);
                ::org::apache::lucene::search::Query result((jobject) NULL);

                if (!parseArgs(args, "k[s[s[Kk", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::search::BooleanClause$Occur::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1, &a2, &a3, &p3, ::org::apache::lucene::search::t_BooleanClause$Occur::parameters_, &a4))
                {
                  OBJ_CALL(result = ::org::apache::lucene::queryparser::classic::MultiFieldQueryParser::parse(a0, a1, a2, a3, a4));
                  return ::org::apache::lucene::search::t_Query::wrap_Object(result);
                }
              }
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                JArray< ::java::lang::String > a2((jobject) NULL);
                JArray< ::org::apache::lucene::search::BooleanClause$Occur > a3((jobject) NULL);
                PyTypeObject **p3;
                ::org::apache::lucene::analysis::Analyzer a4((jobject) NULL);
                ::org::apache::lucene::search::Query result((jobject) NULL);

                if (!parseArgs(args, "ks[s[Kk", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::search::BooleanClause$Occur::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1, &a2, &a3, &p3, ::org::apache::lucene::search::t_BooleanClause$Occur::parameters_, &a4))
                {
                  OBJ_CALL(result = ::org::apache::lucene::queryparser::classic::MultiFieldQueryParser::parse(a0, a1, a2, a3, a4));
                  return ::org::apache::lucene::search::t_Query::wrap_Object(result);
                }
              }
            }

            return callSuper(type, "parse", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/packed/GrowableWriter.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {

          ::java::lang::Class *GrowableWriter::class$ = NULL;
          jmethodID *GrowableWriter::mids$ = NULL;
          bool GrowableWriter::live$ = false;

          jclass GrowableWriter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/packed/GrowableWriter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_a74e6883] = env->getMethodID(cls, "<init>", "(IIF)V");
              mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
              mids$[mid_fill_534bf2ff] = env->getMethodID(cls, "fill", "(IIJ)V");
              mids$[mid_get_39c7bd20] = env->getMethodID(cls, "get", "(I)J");
              mids$[mid_get_d80d4c9e] = env->getMethodID(cls, "get", "(I[JII)I");
              mids$[mid_getBitsPerValue_54c6a179] = env->getMethodID(cls, "getBitsPerValue", "()I");
              mids$[mid_getMutable_ebbbff61] = env->getMethodID(cls, "getMutable", "()Lorg/apache/lucene/util/packed/PackedInts$Mutable;");
              mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");
              mids$[mid_resize_585da437] = env->getMethodID(cls, "resize", "(I)Lorg/apache/lucene/util/packed/GrowableWriter;");
              mids$[mid_save_27875f57] = env->getMethodID(cls, "save", "(Lorg/apache/lucene/store/DataOutput;)V");
              mids$[mid_set_03b232b5] = env->getMethodID(cls, "set", "(IJ)V");
              mids$[mid_set_d80d4c9e] = env->getMethodID(cls, "set", "(I[JII)I");
              mids$[mid_size_54c6a179] = env->getMethodID(cls, "size", "()I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          GrowableWriter::GrowableWriter(jint a0, jint a1, jfloat a2) : ::org::apache::lucene::util::packed::PackedInts$Mutable(env->newObject(initializeClass, &mids$, mid_init$_a74e6883, a0, a1, a2)) {}

          void GrowableWriter::clear() const
          {
            env->callVoidMethod(this$, mids$[mid_clear_54c6a166]);
          }

          void GrowableWriter::fill(jint a0, jint a1, jlong a2) const
          {
            env->callVoidMethod(this$, mids$[mid_fill_534bf2ff], a0, a1, a2);
          }

          jlong GrowableWriter::get(jint a0) const
          {
            return env->callLongMethod(this$, mids$[mid_get_39c7bd20], a0);
          }

          jint GrowableWriter::get(jint a0, const JArray< jlong > & a1, jint a2, jint a3) const
          {
            return env->callIntMethod(this$, mids$[mid_get_d80d4c9e], a0, a1.this$, a2, a3);
          }

          jint GrowableWriter::getBitsPerValue() const
          {
            return env->callIntMethod(this$, mids$[mid_getBitsPerValue_54c6a179]);
          }

          ::org::apache::lucene::util::packed::PackedInts$Mutable GrowableWriter::getMutable() const
          {
            return ::org::apache::lucene::util::packed::PackedInts$Mutable(env->callObjectMethod(this$, mids$[mid_getMutable_ebbbff61]));
          }

          jlong GrowableWriter::ramBytesUsed() const
          {
            return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
          }

          GrowableWriter GrowableWriter::resize(jint a0) const
          {
            return GrowableWriter(env->callObjectMethod(this$, mids$[mid_resize_585da437], a0));
          }

          void GrowableWriter::save(const ::org::apache::lucene::store::DataOutput & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_save_27875f57], a0.this$);
          }

          void GrowableWriter::set(jint a0, jlong a1) const
          {
            env->callVoidMethod(this$, mids$[mid_set_03b232b5], a0, a1);
          }

          jint GrowableWriter::set(jint a0, const JArray< jlong > & a1, jint a2, jint a3) const
          {
            return env->callIntMethod(this$, mids$[mid_set_d80d4c9e], a0, a1.this$, a2, a3);
          }

          jint GrowableWriter::size() const
          {
            return env->callIntMethod(this$, mids$[mid_size_54c6a179]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {
          static PyObject *t_GrowableWriter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GrowableWriter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_GrowableWriter_init_(t_GrowableWriter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_GrowableWriter_clear(t_GrowableWriter *self, PyObject *args);
          static PyObject *t_GrowableWriter_fill(t_GrowableWriter *self, PyObject *args);
          static PyObject *t_GrowableWriter_get(t_GrowableWriter *self, PyObject *args);
          static PyObject *t_GrowableWriter_getBitsPerValue(t_GrowableWriter *self, PyObject *args);
          static PyObject *t_GrowableWriter_getMutable(t_GrowableWriter *self);
          static PyObject *t_GrowableWriter_ramBytesUsed(t_GrowableWriter *self, PyObject *args);
          static PyObject *t_GrowableWriter_resize(t_GrowableWriter *self, PyObject *arg);
          static PyObject *t_GrowableWriter_save(t_GrowableWriter *self, PyObject *args);
          static PyObject *t_GrowableWriter_set(t_GrowableWriter *self, PyObject *args);
          static PyObject *t_GrowableWriter_size(t_GrowableWriter *self, PyObject *args);
          static PyObject *t_GrowableWriter_get__bitsPerValue(t_GrowableWriter *self, void *data);
          static PyObject *t_GrowableWriter_get__mutable(t_GrowableWriter *self, void *data);
          static PyGetSetDef t_GrowableWriter__fields_[] = {
            DECLARE_GET_FIELD(t_GrowableWriter, bitsPerValue),
            DECLARE_GET_FIELD(t_GrowableWriter, mutable),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_GrowableWriter__methods_[] = {
            DECLARE_METHOD(t_GrowableWriter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GrowableWriter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GrowableWriter, clear, METH_VARARGS),
            DECLARE_METHOD(t_GrowableWriter, fill, METH_VARARGS),
            DECLARE_METHOD(t_GrowableWriter, get, METH_VARARGS),
            DECLARE_METHOD(t_GrowableWriter, getBitsPerValue, METH_VARARGS),
            DECLARE_METHOD(t_GrowableWriter, getMutable, METH_NOARGS),
            DECLARE_METHOD(t_GrowableWriter, ramBytesUsed, METH_VARARGS),
            DECLARE_METHOD(t_GrowableWriter, resize, METH_O),
            DECLARE_METHOD(t_GrowableWriter, save, METH_VARARGS),
            DECLARE_METHOD(t_GrowableWriter, set, METH_VARARGS),
            DECLARE_METHOD(t_GrowableWriter, size, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(GrowableWriter, t_GrowableWriter, ::org::apache::lucene::util::packed::PackedInts$Mutable, GrowableWriter, t_GrowableWriter_init_, 0, 0, t_GrowableWriter__fields_, 0, 0);

          void t_GrowableWriter::install(PyObject *module)
          {
            installType(&PY_TYPE(GrowableWriter), module, "GrowableWriter", 0);
          }

          void t_GrowableWriter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(GrowableWriter).tp_dict, "class_", make_descriptor(GrowableWriter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(GrowableWriter).tp_dict, "wrapfn_", make_descriptor(t_GrowableWriter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(GrowableWriter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_GrowableWriter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GrowableWriter::initializeClass, 1)))
              return NULL;
            return t_GrowableWriter::wrap_Object(GrowableWriter(((t_GrowableWriter *) arg)->object.this$));
          }
          static PyObject *t_GrowableWriter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GrowableWriter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_GrowableWriter_init_(t_GrowableWriter *self, PyObject *args, PyObject *kwds)
          {
            jint a0;
            jint a1;
            jfloat a2;
            GrowableWriter object((jobject) NULL);

            if (!parseArgs(args, "IIF", &a0, &a1, &a2))
            {
              INT_CALL(object = GrowableWriter(a0, a1, a2));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_GrowableWriter_clear(t_GrowableWriter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.clear());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(GrowableWriter), (PyObject *) self, "clear", args, 2);
          }

          static PyObject *t_GrowableWriter_fill(t_GrowableWriter *self, PyObject *args)
          {
            jint a0;
            jint a1;
            jlong a2;

            if (!parseArgs(args, "IIJ", &a0, &a1, &a2))
            {
              OBJ_CALL(self->object.fill(a0, a1, a2));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(GrowableWriter), (PyObject *) self, "fill", args, 2);
          }

          static PyObject *t_GrowableWriter_get(t_GrowableWriter *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                jint a0;
                jlong result;

                if (!parseArgs(args, "I", &a0))
                {
                  OBJ_CALL(result = self->object.get(a0));
                  return PyLong_FromLongLong((PY_LONG_LONG) result);
                }
              }
              break;
             case 4:
              {
                jint a0;
                JArray< jlong > a1((jobject) NULL);
                jint a2;
                jint a3;
                jint result;

                if (!parseArgs(args, "I[JII", &a0, &a1, &a2, &a3))
                {
                  OBJ_CALL(result = self->object.get(a0, a1, a2, a3));
                  return PyInt_FromLong((long) result);
                }
              }
            }

            return callSuper(&PY_TYPE(GrowableWriter), (PyObject *) self, "get", args, 2);
          }

          static PyObject *t_GrowableWriter_getBitsPerValue(t_GrowableWriter *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getBitsPerValue());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(GrowableWriter), (PyObject *) self, "getBitsPerValue", args, 2);
          }

          static PyObject *t_GrowableWriter_getMutable(t_GrowableWriter *self)
          {
            ::org::apache::lucene::util::packed::PackedInts$Mutable result((jobject) NULL);
            OBJ_CALL(result = self->object.getMutable());
            return ::org::apache::lucene::util::packed::t_PackedInts$Mutable::wrap_Object(result);
          }

          static PyObject *t_GrowableWriter_ramBytesUsed(t_GrowableWriter *self, PyObject *args)
          {
            jlong result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.ramBytesUsed());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(&PY_TYPE(GrowableWriter), (PyObject *) self, "ramBytesUsed", args, 2);
          }

          static PyObject *t_GrowableWriter_resize(t_GrowableWriter *self, PyObject *arg)
          {
            jint a0;
            GrowableWriter result((jobject) NULL);

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.resize(a0));
              return t_GrowableWriter::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "resize", arg);
            return NULL;
          }

          static PyObject *t_GrowableWriter_save(t_GrowableWriter *self, PyObject *args)
          {
            ::org::apache::lucene::store::DataOutput a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::store::DataOutput::initializeClass, &a0))
            {
              OBJ_CALL(self->object.save(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(GrowableWriter), (PyObject *) self, "save", args, 2);
          }

          static PyObject *t_GrowableWriter_set(t_GrowableWriter *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                jint a0;
                jlong a1;

                if (!parseArgs(args, "IJ", &a0, &a1))
                {
                  OBJ_CALL(self->object.set(a0, a1));
                  Py_RETURN_NONE;
                }
              }
              break;
             case 4:
              {
                jint a0;
                JArray< jlong > a1((jobject) NULL);
                jint a2;
                jint a3;
                jint result;

                if (!parseArgs(args, "I[JII", &a0, &a1, &a2, &a3))
                {
                  OBJ_CALL(result = self->object.set(a0, a1, a2, a3));
                  return PyInt_FromLong((long) result);
                }
              }
            }

            return callSuper(&PY_TYPE(GrowableWriter), (PyObject *) self, "set", args, 2);
          }

          static PyObject *t_GrowableWriter_size(t_GrowableWriter *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.size());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(GrowableWriter), (PyObject *) self, "size", args, 2);
          }

          static PyObject *t_GrowableWriter_get__bitsPerValue(t_GrowableWriter *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getBitsPerValue());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_GrowableWriter_get__mutable(t_GrowableWriter *self, void *data)
          {
            ::org::apache::lucene::util::packed::PackedInts$Mutable value((jobject) NULL);
            OBJ_CALL(value = self->object.getMutable());
            return ::org::apache::lucene::util::packed::t_PackedInts$Mutable::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/expressions/js/VariableContext.h"
#include "org/apache/lucene/expressions/js/VariableContext$Type.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {

          ::java::lang::Class *VariableContext::class$ = NULL;
          jmethodID *VariableContext::mids$ = NULL;
          jfieldID *VariableContext::fids$ = NULL;
          bool VariableContext::live$ = false;

          jclass VariableContext::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/expressions/js/VariableContext");

              mids$ = new jmethodID[max_mid];
              mids$[mid_parse_2c9c5c6a] = env->getStaticMethodID(cls, "parse", "(Ljava/lang/String;)[Lorg/apache/lucene/expressions/js/VariableContext;");

              fids$ = new jfieldID[max_fid];
              fids$[fid_integer] = env->getFieldID(cls, "integer", "I");
              fids$[fid_text] = env->getFieldID(cls, "text", "Ljava/lang/String;");
              fids$[fid_type] = env->getFieldID(cls, "type", "Lorg/apache/lucene/expressions/js/VariableContext$Type;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          JArray< VariableContext > VariableContext::parse(const ::java::lang::String & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return JArray< VariableContext >(env->callStaticObjectMethod(cls, mids$[mid_parse_2c9c5c6a], a0.this$));
          }

          jint VariableContext::_get_integer() const
          {
            return env->getIntField(this$, fids$[fid_integer]);
          }

          ::java::lang::String VariableContext::_get_text() const
          {
            return ::java::lang::String(env->getObjectField(this$, fids$[fid_text]));
          }

          ::org::apache::lucene::expressions::js::VariableContext$Type VariableContext::_get_type() const
          {
            return ::org::apache::lucene::expressions::js::VariableContext$Type(env->getObjectField(this$, fids$[fid_type]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {
          static PyObject *t_VariableContext_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_VariableContext_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_VariableContext_parse(PyTypeObject *type, PyObject *arg);
          static PyObject *t_VariableContext_get__integer(t_VariableContext *self, void *data);
          static PyObject *t_VariableContext_get__text(t_VariableContext *self, void *data);
          static PyObject *t_VariableContext_get__type(t_VariableContext *self, void *data);

          static PyGetSetDef t_VariableContext__fields_[] = {
            DECLARE_GET_FIELD(t_VariableContext, integer),
            DECLARE_GET_FIELD(t_VariableContext, text),
            DECLARE_GET_FIELD(t_VariableContext, type),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_VariableContext__methods_[] = {
            DECLARE_METHOD(t_VariableContext, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_VariableContext, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_VariableContext, parse, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(VariableContext, t_VariableContext, ::java::lang::Object, VariableContext, abstract_init, 0, 0, t_VariableContext__fields_, 0, 0);

          void t_VariableContext::install(PyObject *module)
          {
            installType(&PY_TYPE(VariableContext), module, "VariableContext", 0);
            PyDict_SetItemString(PY_TYPE(VariableContext).tp_dict, "Type", make_descriptor(&PY_TYPE(VariableContext$Type)));
          }

          void t_VariableContext::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(VariableContext).tp_dict, "class_", make_descriptor(VariableContext::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(VariableContext).tp_dict, "wrapfn_", make_descriptor(t_VariableContext::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(VariableContext).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_VariableContext_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, VariableContext::initializeClass, 1)))
              return NULL;
            return t_VariableContext::wrap_Object(VariableContext(((t_VariableContext *) arg)->object.this$));
          }
          static PyObject *t_VariableContext_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, VariableContext::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_VariableContext_parse(PyTypeObject *type, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            JArray< VariableContext > result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::expressions::js::VariableContext::parse(a0));
              return JArray<jobject>(result.this$).wrap(t_VariableContext::wrap_jobject);
            }

            PyErr_SetArgsError(type, "parse", arg);
            return NULL;
          }

          static PyObject *t_VariableContext_get__integer(t_VariableContext *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object._get_integer());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_VariableContext_get__text(t_VariableContext *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object._get_text());
            return j2p(value);
          }

          static PyObject *t_VariableContext_get__type(t_VariableContext *self, void *data)
          {
            ::org::apache::lucene::expressions::js::VariableContext$Type value((jobject) NULL);
            OBJ_CALL(value = self->object._get_type());
            return ::org::apache::lucene::expressions::js::t_VariableContext$Type::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/hi/HindiNormalizer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace hi {

          ::java::lang::Class *HindiNormalizer::class$ = NULL;
          jmethodID *HindiNormalizer::mids$ = NULL;
          bool HindiNormalizer::live$ = false;

          jclass HindiNormalizer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/hi/HindiNormalizer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_normalize_ec6430eb] = env->getMethodID(cls, "normalize", "([CI)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          HindiNormalizer::HindiNormalizer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint HindiNormalizer::normalize(const JArray< jchar > & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_normalize_ec6430eb], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace hi {
          static PyObject *t_HindiNormalizer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_HindiNormalizer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_HindiNormalizer_init_(t_HindiNormalizer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_HindiNormalizer_normalize(t_HindiNormalizer *self, PyObject *args);

          static PyMethodDef t_HindiNormalizer__methods_[] = {
            DECLARE_METHOD(t_HindiNormalizer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HindiNormalizer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HindiNormalizer, normalize, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(HindiNormalizer, t_HindiNormalizer, ::java::lang::Object, HindiNormalizer, t_HindiNormalizer_init_, 0, 0, 0, 0, 0);

          void t_HindiNormalizer::install(PyObject *module)
          {
            installType(&PY_TYPE(HindiNormalizer), module, "HindiNormalizer", 0);
          }

          void t_HindiNormalizer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(HindiNormalizer).tp_dict, "class_", make_descriptor(HindiNormalizer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(HindiNormalizer).tp_dict, "wrapfn_", make_descriptor(t_HindiNormalizer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(HindiNormalizer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_HindiNormalizer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, HindiNormalizer::initializeClass, 1)))
              return NULL;
            return t_HindiNormalizer::wrap_Object(HindiNormalizer(((t_HindiNormalizer *) arg)->object.this$));
          }
          static PyObject *t_HindiNormalizer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, HindiNormalizer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_HindiNormalizer_init_(t_HindiNormalizer *self, PyObject *args, PyObject *kwds)
          {
            HindiNormalizer object((jobject) NULL);

            INT_CALL(object = HindiNormalizer());
            self->object = object;

            return 0;
          }

          static PyObject *t_HindiNormalizer_normalize(t_HindiNormalizer *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(result = self->object.normalize(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "normalize", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/highlight/TokenStreamFromTermPositionVector.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/Terms.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {

          ::java::lang::Class *TokenStreamFromTermPositionVector::class$ = NULL;
          jmethodID *TokenStreamFromTermPositionVector::mids$ = NULL;
          bool TokenStreamFromTermPositionVector::live$ = false;

          jclass TokenStreamFromTermPositionVector::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/highlight/TokenStreamFromTermPositionVector");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_d0b7bb17] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/Terms;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TokenStreamFromTermPositionVector::TokenStreamFromTermPositionVector(const ::org::apache::lucene::index::Terms & a0) : ::org::apache::lucene::analysis::TokenStream(env->newObject(initializeClass, &mids$, mid_init$_d0b7bb17, a0.this$)) {}

          jboolean TokenStreamFromTermPositionVector::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void TokenStreamFromTermPositionVector::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {
          static PyObject *t_TokenStreamFromTermPositionVector_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TokenStreamFromTermPositionVector_instance_(PyTypeObject *type, PyObject *arg);
          static int t_TokenStreamFromTermPositionVector_init_(t_TokenStreamFromTermPositionVector *self, PyObject *args, PyObject *kwds);
          static PyObject *t_TokenStreamFromTermPositionVector_incrementToken(t_TokenStreamFromTermPositionVector *self, PyObject *args);
          static PyObject *t_TokenStreamFromTermPositionVector_reset(t_TokenStreamFromTermPositionVector *self, PyObject *args);

          static PyMethodDef t_TokenStreamFromTermPositionVector__methods_[] = {
            DECLARE_METHOD(t_TokenStreamFromTermPositionVector, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TokenStreamFromTermPositionVector, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TokenStreamFromTermPositionVector, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_TokenStreamFromTermPositionVector, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(TokenStreamFromTermPositionVector, t_TokenStreamFromTermPositionVector, ::org::apache::lucene::analysis::TokenStream, TokenStreamFromTermPositionVector, t_TokenStreamFromTermPositionVector_init_, 0, 0, 0, 0, 0);

          void t_TokenStreamFromTermPositionVector::install(PyObject *module)
          {
            installType(&PY_TYPE(TokenStreamFromTermPositionVector), module, "TokenStreamFromTermPositionVector", 0);
          }

          void t_TokenStreamFromTermPositionVector::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(TokenStreamFromTermPositionVector).tp_dict, "class_", make_descriptor(TokenStreamFromTermPositionVector::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(TokenStreamFromTermPositionVector).tp_dict, "wrapfn_", make_descriptor(t_TokenStreamFromTermPositionVector::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(TokenStreamFromTermPositionVector).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TokenStreamFromTermPositionVector_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TokenStreamFromTermPositionVector::initializeClass, 1)))
              return NULL;
            return t_TokenStreamFromTermPositionVector::wrap_Object(TokenStreamFromTermPositionVector(((t_TokenStreamFromTermPositionVector *) arg)->object.this$));
          }
          static PyObject *t_TokenStreamFromTermPositionVector_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TokenStreamFromTermPositionVector::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_TokenStreamFromTermPositionVector_init_(t_TokenStreamFromTermPositionVector *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::index::Terms a0((jobject) NULL);
            TokenStreamFromTermPositionVector object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::Terms::initializeClass, &a0))
            {
              INT_CALL(object = TokenStreamFromTermPositionVector(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_TokenStreamFromTermPositionVector_incrementToken(t_TokenStreamFromTermPositionVector *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(TokenStreamFromTermPositionVector), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_TokenStreamFromTermPositionVector_reset(t_TokenStreamFromTermPositionVector *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(TokenStreamFromTermPositionVector), (PyObject *) self, "reset", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/payloads/AbstractEncoder.h"
#include "org/apache/lucene/analysis/payloads/PayloadEncoder.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace payloads {

          ::java::lang::Class *AbstractEncoder::class$ = NULL;
          jmethodID *AbstractEncoder::mids$ = NULL;
          bool AbstractEncoder::live$ = false;

          jclass AbstractEncoder::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/payloads/AbstractEncoder");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_encode_09e96eed] = env->getMethodID(cls, "encode", "([C)Lorg/apache/lucene/util/BytesRef;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          AbstractEncoder::AbstractEncoder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::util::BytesRef AbstractEncoder::encode(const JArray< jchar > & a0) const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_encode_09e96eed], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace payloads {
          static PyObject *t_AbstractEncoder_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AbstractEncoder_instance_(PyTypeObject *type, PyObject *arg);
          static int t_AbstractEncoder_init_(t_AbstractEncoder *self, PyObject *args, PyObject *kwds);
          static PyObject *t_AbstractEncoder_encode(t_AbstractEncoder *self, PyObject *arg);

          static PyMethodDef t_AbstractEncoder__methods_[] = {
            DECLARE_METHOD(t_AbstractEncoder, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AbstractEncoder, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AbstractEncoder, encode, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(AbstractEncoder, t_AbstractEncoder, ::java::lang::Object, AbstractEncoder, t_AbstractEncoder_init_, 0, 0, 0, 0, 0);

          void t_AbstractEncoder::install(PyObject *module)
          {
            installType(&PY_TYPE(AbstractEncoder), module, "AbstractEncoder", 0);
          }

          void t_AbstractEncoder::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(AbstractEncoder).tp_dict, "class_", make_descriptor(AbstractEncoder::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(AbstractEncoder).tp_dict, "wrapfn_", make_descriptor(t_AbstractEncoder::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(AbstractEncoder).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_AbstractEncoder_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, AbstractEncoder::initializeClass, 1)))
              return NULL;
            return t_AbstractEncoder::wrap_Object(AbstractEncoder(((t_AbstractEncoder *) arg)->object.this$));
          }
          static PyObject *t_AbstractEncoder_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, AbstractEncoder::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_AbstractEncoder_init_(t_AbstractEncoder *self, PyObject *args, PyObject *kwds)
          {
            AbstractEncoder object((jobject) NULL);

            INT_CALL(object = AbstractEncoder());
            self->object = object;

            return 0;
          }

          static PyObject *t_AbstractEncoder_encode(t_AbstractEncoder *self, PyObject *arg)
          {
            JArray< jchar > a0((jobject) NULL);
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);

            if (!parseArg(arg, "[C", &a0))
            {
              OBJ_CALL(result = self->object.encode(a0));
              return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "encode", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/InputStreamDataInput.h"
#include "java/io/IOException.h"
#include "java/io/Closeable.h"
#include "java/io/InputStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *InputStreamDataInput::class$ = NULL;
        jmethodID *InputStreamDataInput::mids$ = NULL;
        bool InputStreamDataInput::live$ = false;

        jclass InputStreamDataInput::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/InputStreamDataInput");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_be2e4f90] = env->getMethodID(cls, "<init>", "(Ljava/io/InputStream;)V");
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_readByte_54c6a172] = env->getMethodID(cls, "readByte", "()B");
            mids$[mid_readBytes_86f4435f] = env->getMethodID(cls, "readBytes", "([BII)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        InputStreamDataInput::InputStreamDataInput(const ::java::io::InputStream & a0) : ::org::apache::lucene::store::DataInput(env->newObject(initializeClass, &mids$, mid_init$_be2e4f90, a0.this$)) {}

        void InputStreamDataInput::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        jbyte InputStreamDataInput::readByte() const
        {
          return env->callByteMethod(this$, mids$[mid_readByte_54c6a172]);
        }

        void InputStreamDataInput::readBytes(const JArray< jbyte > & a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_readBytes_86f4435f], a0.this$, a1, a2);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_InputStreamDataInput_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_InputStreamDataInput_instance_(PyTypeObject *type, PyObject *arg);
        static int t_InputStreamDataInput_init_(t_InputStreamDataInput *self, PyObject *args, PyObject *kwds);
        static PyObject *t_InputStreamDataInput_close(t_InputStreamDataInput *self);
        static PyObject *t_InputStreamDataInput_readByte(t_InputStreamDataInput *self, PyObject *args);
        static PyObject *t_InputStreamDataInput_readBytes(t_InputStreamDataInput *self, PyObject *args);

        static PyMethodDef t_InputStreamDataInput__methods_[] = {
          DECLARE_METHOD(t_InputStreamDataInput, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_InputStreamDataInput, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_InputStreamDataInput, close, METH_NOARGS),
          DECLARE_METHOD(t_InputStreamDataInput, readByte, METH_VARARGS),
          DECLARE_METHOD(t_InputStreamDataInput, readBytes, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(InputStreamDataInput, t_InputStreamDataInput, ::org::apache::lucene::store::DataInput, InputStreamDataInput, t_InputStreamDataInput_init_, 0, 0, 0, 0, 0);

        void t_InputStreamDataInput::install(PyObject *module)
        {
          installType(&PY_TYPE(InputStreamDataInput), module, "InputStreamDataInput", 0);
        }

        void t_InputStreamDataInput::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(InputStreamDataInput).tp_dict, "class_", make_descriptor(InputStreamDataInput::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(InputStreamDataInput).tp_dict, "wrapfn_", make_descriptor(t_InputStreamDataInput::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(InputStreamDataInput).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_InputStreamDataInput_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, InputStreamDataInput::initializeClass, 1)))
            return NULL;
          return t_InputStreamDataInput::wrap_Object(InputStreamDataInput(((t_InputStreamDataInput *) arg)->object.this$));
        }
        static PyObject *t_InputStreamDataInput_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, InputStreamDataInput::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_InputStreamDataInput_init_(t_InputStreamDataInput *self, PyObject *args, PyObject *kwds)
        {
          ::java::io::InputStream a0((jobject) NULL);
          InputStreamDataInput object((jobject) NULL);

          if (!parseArgs(args, "k", ::java::io::InputStream::initializeClass, &a0))
          {
            INT_CALL(object = InputStreamDataInput(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_InputStreamDataInput_close(t_InputStreamDataInput *self)
        {
          OBJ_CALL(self->object.close());
          Py_RETURN_NONE;
        }

        static PyObject *t_InputStreamDataInput_readByte(t_InputStreamDataInput *self, PyObject *args)
        {
          jbyte result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.readByte());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(InputStreamDataInput), (PyObject *) self, "readByte", args, 2);
        }

        static PyObject *t_InputStreamDataInput_readBytes(t_InputStreamDataInput *self, PyObject *args)
        {
          JArray< jbyte > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[BII", &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.readBytes(a0, a1, a2));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(InputStreamDataInput), (PyObject *) self, "readBytes", args, 2);
        }
      }
    }
  }
}
