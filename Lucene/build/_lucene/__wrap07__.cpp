#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/AttributeReflector.h"
#include "java/lang/String.h"
#include "org/apache/lucene/util/Attribute.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *AttributeReflector::class$ = NULL;
        jmethodID *AttributeReflector::mids$ = NULL;
        bool AttributeReflector::live$ = false;

        jclass AttributeReflector::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/AttributeReflector");

            mids$ = new jmethodID[max_mid];
            mids$[mid_reflect_6dbf9802] = env->getMethodID(cls, "reflect", "(Ljava/lang/Class;Ljava/lang/String;Ljava/lang/Object;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void AttributeReflector::reflect(const ::java::lang::Class & a0, const ::java::lang::String & a1, const ::java::lang::Object & a2) const
        {
          env->callVoidMethod(this$, mids$[mid_reflect_6dbf9802], a0.this$, a1.this$, a2.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_AttributeReflector_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_AttributeReflector_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_AttributeReflector_reflect(t_AttributeReflector *self, PyObject *args);

        static PyMethodDef t_AttributeReflector__methods_[] = {
          DECLARE_METHOD(t_AttributeReflector, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_AttributeReflector, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_AttributeReflector, reflect, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(AttributeReflector, t_AttributeReflector, ::java::lang::Object, AttributeReflector, abstract_init, 0, 0, 0, 0, 0);

        void t_AttributeReflector::install(PyObject *module)
        {
          installType(&PY_TYPE(AttributeReflector), module, "AttributeReflector", 0);
        }

        void t_AttributeReflector::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(AttributeReflector).tp_dict, "class_", make_descriptor(AttributeReflector::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(AttributeReflector).tp_dict, "wrapfn_", make_descriptor(t_AttributeReflector::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(AttributeReflector).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_AttributeReflector_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, AttributeReflector::initializeClass, 1)))
            return NULL;
          return t_AttributeReflector::wrap_Object(AttributeReflector(((t_AttributeReflector *) arg)->object.this$));
        }
        static PyObject *t_AttributeReflector_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, AttributeReflector::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_AttributeReflector_reflect(t_AttributeReflector *self, PyObject *args)
        {
          ::java::lang::Class a0((jobject) NULL);
          PyTypeObject **p0;
          ::java::lang::String a1((jobject) NULL);
          ::java::lang::Object a2((jobject) NULL);

          if (!parseArgs(args, "Kso", ::java::lang::Class::initializeClass, &a0, &p0, ::java::lang::t_Class::parameters_, &a1, &a2))
          {
            OBJ_CALL(self->object.reflect(a0, a1, a2));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "reflect", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/analyzing/FSTUtil.h"
#include "org/apache/lucene/util/automaton/Automaton.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "java/util/List.h"
#include "org/apache/lucene/util/fst/FST.h"
#include "org/apache/lucene/search/suggest/analyzing/FSTUtil$Path.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace analyzing {

            ::java::lang::Class *FSTUtil::class$ = NULL;
            jmethodID *FSTUtil::mids$ = NULL;
            bool FSTUtil::live$ = false;

            jclass FSTUtil::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/analyzing/FSTUtil");

                mids$ = new jmethodID[max_mid];
                mids$[mid_intersectPrefixPaths_2ebdda9a] = env->getStaticMethodID(cls, "intersectPrefixPaths", "(Lorg/apache/lucene/util/automaton/Automaton;Lorg/apache/lucene/util/fst/FST;)Ljava/util/List;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            ::java::util::List FSTUtil::intersectPrefixPaths(const ::org::apache::lucene::util::automaton::Automaton & a0, const ::org::apache::lucene::util::fst::FST & a1)
            {
              jclass cls = env->getClass(initializeClass);
              return ::java::util::List(env->callStaticObjectMethod(cls, mids$[mid_intersectPrefixPaths_2ebdda9a], a0.this$, a1.this$));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace analyzing {
            static PyObject *t_FSTUtil_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_FSTUtil_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_FSTUtil_intersectPrefixPaths(PyTypeObject *type, PyObject *args);

            static PyMethodDef t_FSTUtil__methods_[] = {
              DECLARE_METHOD(t_FSTUtil, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FSTUtil, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FSTUtil, intersectPrefixPaths, METH_VARARGS | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(FSTUtil, t_FSTUtil, ::java::lang::Object, FSTUtil, abstract_init, 0, 0, 0, 0, 0);

            void t_FSTUtil::install(PyObject *module)
            {
              installType(&PY_TYPE(FSTUtil), module, "FSTUtil", 0);
              PyDict_SetItemString(PY_TYPE(FSTUtil).tp_dict, "Path", make_descriptor(&PY_TYPE(FSTUtil$Path)));
            }

            void t_FSTUtil::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(FSTUtil).tp_dict, "class_", make_descriptor(FSTUtil::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(FSTUtil).tp_dict, "wrapfn_", make_descriptor(t_FSTUtil::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(FSTUtil).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_FSTUtil_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, FSTUtil::initializeClass, 1)))
                return NULL;
              return t_FSTUtil::wrap_Object(FSTUtil(((t_FSTUtil *) arg)->object.this$));
            }
            static PyObject *t_FSTUtil_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, FSTUtil::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_FSTUtil_intersectPrefixPaths(PyTypeObject *type, PyObject *args)
            {
              ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
              ::org::apache::lucene::util::fst::FST a1((jobject) NULL);
              PyTypeObject **p1;
              ::java::util::List result((jobject) NULL);

              if (!parseArgs(args, "kK", ::org::apache::lucene::util::automaton::Automaton::initializeClass, ::org::apache::lucene::util::fst::FST::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::util::fst::t_FST::parameters_))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::suggest::analyzing::FSTUtil::intersectPrefixPaths(a0, a1));
                return ::java::util::t_List::wrap_Object(result);
              }

              PyErr_SetArgsError(type, "intersectPrefixPaths", args);
              return NULL;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/writercache/LabelToOrdinal.h"
#include "org/apache/lucene/facet/taxonomy/FacetLabel.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          namespace writercache {

            ::java::lang::Class *LabelToOrdinal::class$ = NULL;
            jmethodID *LabelToOrdinal::mids$ = NULL;
            bool LabelToOrdinal::live$ = false;
            jint LabelToOrdinal::INVALID_ORDINAL = (jint) 0;

            jclass LabelToOrdinal::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/writercache/LabelToOrdinal");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_addLabel_7ba580a8] = env->getMethodID(cls, "addLabel", "(Lorg/apache/lucene/facet/taxonomy/FacetLabel;I)V");
                mids$[mid_getMaxOrdinal_54c6a179] = env->getMethodID(cls, "getMaxOrdinal", "()I");
                mids$[mid_getNextOrdinal_54c6a179] = env->getMethodID(cls, "getNextOrdinal", "()I");
                mids$[mid_getOrdinal_283f83f5] = env->getMethodID(cls, "getOrdinal", "(Lorg/apache/lucene/facet/taxonomy/FacetLabel;)I");

                class$ = (::java::lang::Class *) new JObject(cls);
                cls = (jclass) class$->this$;

                INVALID_ORDINAL = env->getStaticIntField(cls, "INVALID_ORDINAL");
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            LabelToOrdinal::LabelToOrdinal() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

            void LabelToOrdinal::addLabel(const ::org::apache::lucene::facet::taxonomy::FacetLabel & a0, jint a1) const
            {
              env->callVoidMethod(this$, mids$[mid_addLabel_7ba580a8], a0.this$, a1);
            }

            jint LabelToOrdinal::getMaxOrdinal() const
            {
              return env->callIntMethod(this$, mids$[mid_getMaxOrdinal_54c6a179]);
            }

            jint LabelToOrdinal::getNextOrdinal() const
            {
              return env->callIntMethod(this$, mids$[mid_getNextOrdinal_54c6a179]);
            }

            jint LabelToOrdinal::getOrdinal(const ::org::apache::lucene::facet::taxonomy::FacetLabel & a0) const
            {
              return env->callIntMethod(this$, mids$[mid_getOrdinal_283f83f5], a0.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          namespace writercache {
            static PyObject *t_LabelToOrdinal_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_LabelToOrdinal_instance_(PyTypeObject *type, PyObject *arg);
            static int t_LabelToOrdinal_init_(t_LabelToOrdinal *self, PyObject *args, PyObject *kwds);
            static PyObject *t_LabelToOrdinal_addLabel(t_LabelToOrdinal *self, PyObject *args);
            static PyObject *t_LabelToOrdinal_getMaxOrdinal(t_LabelToOrdinal *self);
            static PyObject *t_LabelToOrdinal_getNextOrdinal(t_LabelToOrdinal *self);
            static PyObject *t_LabelToOrdinal_getOrdinal(t_LabelToOrdinal *self, PyObject *arg);
            static PyObject *t_LabelToOrdinal_get__maxOrdinal(t_LabelToOrdinal *self, void *data);
            static PyObject *t_LabelToOrdinal_get__nextOrdinal(t_LabelToOrdinal *self, void *data);
            static PyGetSetDef t_LabelToOrdinal__fields_[] = {
              DECLARE_GET_FIELD(t_LabelToOrdinal, maxOrdinal),
              DECLARE_GET_FIELD(t_LabelToOrdinal, nextOrdinal),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_LabelToOrdinal__methods_[] = {
              DECLARE_METHOD(t_LabelToOrdinal, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_LabelToOrdinal, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_LabelToOrdinal, addLabel, METH_VARARGS),
              DECLARE_METHOD(t_LabelToOrdinal, getMaxOrdinal, METH_NOARGS),
              DECLARE_METHOD(t_LabelToOrdinal, getNextOrdinal, METH_NOARGS),
              DECLARE_METHOD(t_LabelToOrdinal, getOrdinal, METH_O),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(LabelToOrdinal, t_LabelToOrdinal, ::java::lang::Object, LabelToOrdinal, t_LabelToOrdinal_init_, 0, 0, t_LabelToOrdinal__fields_, 0, 0);

            void t_LabelToOrdinal::install(PyObject *module)
            {
              installType(&PY_TYPE(LabelToOrdinal), module, "LabelToOrdinal", 0);
            }

            void t_LabelToOrdinal::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(LabelToOrdinal).tp_dict, "class_", make_descriptor(LabelToOrdinal::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(LabelToOrdinal).tp_dict, "wrapfn_", make_descriptor(t_LabelToOrdinal::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(LabelToOrdinal).tp_dict, "boxfn_", make_descriptor(boxObject));
              env->getClass(LabelToOrdinal::initializeClass);
              PyDict_SetItemString(PY_TYPE(LabelToOrdinal).tp_dict, "INVALID_ORDINAL", make_descriptor(LabelToOrdinal::INVALID_ORDINAL));
            }

            static PyObject *t_LabelToOrdinal_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, LabelToOrdinal::initializeClass, 1)))
                return NULL;
              return t_LabelToOrdinal::wrap_Object(LabelToOrdinal(((t_LabelToOrdinal *) arg)->object.this$));
            }
            static PyObject *t_LabelToOrdinal_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, LabelToOrdinal::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_LabelToOrdinal_init_(t_LabelToOrdinal *self, PyObject *args, PyObject *kwds)
            {
              LabelToOrdinal object((jobject) NULL);

              INT_CALL(object = LabelToOrdinal());
              self->object = object;

              return 0;
            }

            static PyObject *t_LabelToOrdinal_addLabel(t_LabelToOrdinal *self, PyObject *args)
            {
              ::org::apache::lucene::facet::taxonomy::FacetLabel a0((jobject) NULL);
              jint a1;

              if (!parseArgs(args, "kI", ::org::apache::lucene::facet::taxonomy::FacetLabel::initializeClass, &a0, &a1))
              {
                OBJ_CALL(self->object.addLabel(a0, a1));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "addLabel", args);
              return NULL;
            }

            static PyObject *t_LabelToOrdinal_getMaxOrdinal(t_LabelToOrdinal *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getMaxOrdinal());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_LabelToOrdinal_getNextOrdinal(t_LabelToOrdinal *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getNextOrdinal());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_LabelToOrdinal_getOrdinal(t_LabelToOrdinal *self, PyObject *arg)
            {
              ::org::apache::lucene::facet::taxonomy::FacetLabel a0((jobject) NULL);
              jint result;

              if (!parseArg(arg, "k", ::org::apache::lucene::facet::taxonomy::FacetLabel::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.getOrdinal(a0));
                return PyInt_FromLong((long) result);
              }

              PyErr_SetArgsError((PyObject *) self, "getOrdinal", arg);
              return NULL;
            }

            static PyObject *t_LabelToOrdinal_get__maxOrdinal(t_LabelToOrdinal *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getMaxOrdinal());
              return PyInt_FromLong((long) value);
            }

            static PyObject *t_LabelToOrdinal_get__nextOrdinal(t_LabelToOrdinal *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getNextOrdinal());
              return PyInt_FromLong((long) value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/SetOnce.h"
#include "java/lang/Cloneable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *SetOnce::class$ = NULL;
        jmethodID *SetOnce::mids$ = NULL;
        bool SetOnce::live$ = false;

        jclass SetOnce::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/SetOnce");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_init$_290588ee] = env->getMethodID(cls, "<init>", "(Ljava/lang/Object;)V");
            mids$[mid_get_846352c3] = env->getMethodID(cls, "get", "()Ljava/lang/Object;");
            mids$[mid_set_290588ee] = env->getMethodID(cls, "set", "(Ljava/lang/Object;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SetOnce::SetOnce() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        SetOnce::SetOnce(const ::java::lang::Object & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_290588ee, a0.this$)) {}

        ::java::lang::Object SetOnce::get() const
        {
          return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_get_846352c3]));
        }

        void SetOnce::set(const ::java::lang::Object & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_set_290588ee], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/util/SetOnce$AlreadySetException.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_SetOnce_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SetOnce_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SetOnce_of_(t_SetOnce *self, PyObject *args);
        static int t_SetOnce_init_(t_SetOnce *self, PyObject *args, PyObject *kwds);
        static PyObject *t_SetOnce_get(t_SetOnce *self);
        static PyObject *t_SetOnce_set(t_SetOnce *self, PyObject *arg);
        static PyObject *t_SetOnce_get__parameters_(t_SetOnce *self, void *data);
        static PyGetSetDef t_SetOnce__fields_[] = {
          DECLARE_GET_FIELD(t_SetOnce, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_SetOnce__methods_[] = {
          DECLARE_METHOD(t_SetOnce, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SetOnce, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SetOnce, of_, METH_VARARGS),
          DECLARE_METHOD(t_SetOnce, get, METH_NOARGS),
          DECLARE_METHOD(t_SetOnce, set, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SetOnce, t_SetOnce, ::java::lang::Object, SetOnce, t_SetOnce_init_, 0, 0, t_SetOnce__fields_, 0, 0);
        PyObject *t_SetOnce::wrap_Object(const SetOnce& object, PyTypeObject *p0)
        {
          PyObject *obj = t_SetOnce::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_SetOnce *self = (t_SetOnce *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_SetOnce::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_SetOnce::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_SetOnce *self = (t_SetOnce *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_SetOnce::install(PyObject *module)
        {
          installType(&PY_TYPE(SetOnce), module, "SetOnce", 0);
          PyDict_SetItemString(PY_TYPE(SetOnce).tp_dict, "AlreadySetException", make_descriptor(&PY_TYPE(SetOnce$AlreadySetException)));
        }

        void t_SetOnce::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SetOnce).tp_dict, "class_", make_descriptor(SetOnce::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SetOnce).tp_dict, "wrapfn_", make_descriptor(t_SetOnce::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SetOnce).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SetOnce_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SetOnce::initializeClass, 1)))
            return NULL;
          return t_SetOnce::wrap_Object(SetOnce(((t_SetOnce *) arg)->object.this$));
        }
        static PyObject *t_SetOnce_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SetOnce::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_SetOnce_of_(t_SetOnce *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_SetOnce_init_(t_SetOnce *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              SetOnce object((jobject) NULL);

              INT_CALL(object = SetOnce());
              self->object = object;
              break;
            }
            goto err;
           case 1:
            {
              ::java::lang::Object a0((jobject) NULL);
              SetOnce object((jobject) NULL);

              if (!parseArgs(args, "o", &a0))
              {
                INT_CALL(object = SetOnce(a0));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_SetOnce_get(t_SetOnce *self)
        {
          ::java::lang::Object result((jobject) NULL);
          OBJ_CALL(result = self->object.get());
          return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
        }

        static PyObject *t_SetOnce_set(t_SetOnce *self, PyObject *arg)
        {
          ::java::lang::Object a0((jobject) NULL);

          if (!parseArg(arg, "O", self->parameters[0], &a0))
          {
            OBJ_CALL(self->object.set(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "set", arg);
          return NULL;
        }
        static PyObject *t_SetOnce_get__parameters_(t_SetOnce *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/NormalizationH3.h"
#include "org/apache/lucene/search/similarities/BasicStats.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *NormalizationH3::class$ = NULL;
          jmethodID *NormalizationH3::mids$ = NULL;
          bool NormalizationH3::live$ = false;

          jclass NormalizationH3::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/NormalizationH3");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_06298cab] = env->getMethodID(cls, "<init>", "(F)V");
              mids$[mid_getMu_54c6a176] = env->getMethodID(cls, "getMu", "()F");
              mids$[mid_tfn_63482206] = env->getMethodID(cls, "tfn", "(Lorg/apache/lucene/search/similarities/BasicStats;FF)F");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          NormalizationH3::NormalizationH3() : ::org::apache::lucene::search::similarities::Normalization(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          NormalizationH3::NormalizationH3(jfloat a0) : ::org::apache::lucene::search::similarities::Normalization(env->newObject(initializeClass, &mids$, mid_init$_06298cab, a0)) {}

          jfloat NormalizationH3::getMu() const
          {
            return env->callFloatMethod(this$, mids$[mid_getMu_54c6a176]);
          }

          jfloat NormalizationH3::tfn(const ::org::apache::lucene::search::similarities::BasicStats & a0, jfloat a1, jfloat a2) const
          {
            return env->callFloatMethod(this$, mids$[mid_tfn_63482206], a0.this$, a1, a2);
          }

          ::java::lang::String NormalizationH3::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_NormalizationH3_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_NormalizationH3_instance_(PyTypeObject *type, PyObject *arg);
          static int t_NormalizationH3_init_(t_NormalizationH3 *self, PyObject *args, PyObject *kwds);
          static PyObject *t_NormalizationH3_getMu(t_NormalizationH3 *self);
          static PyObject *t_NormalizationH3_tfn(t_NormalizationH3 *self, PyObject *args);
          static PyObject *t_NormalizationH3_toString(t_NormalizationH3 *self, PyObject *args);
          static PyObject *t_NormalizationH3_get__mu(t_NormalizationH3 *self, void *data);
          static PyGetSetDef t_NormalizationH3__fields_[] = {
            DECLARE_GET_FIELD(t_NormalizationH3, mu),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_NormalizationH3__methods_[] = {
            DECLARE_METHOD(t_NormalizationH3, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NormalizationH3, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NormalizationH3, getMu, METH_NOARGS),
            DECLARE_METHOD(t_NormalizationH3, tfn, METH_VARARGS),
            DECLARE_METHOD(t_NormalizationH3, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(NormalizationH3, t_NormalizationH3, ::org::apache::lucene::search::similarities::Normalization, NormalizationH3, t_NormalizationH3_init_, 0, 0, t_NormalizationH3__fields_, 0, 0);

          void t_NormalizationH3::install(PyObject *module)
          {
            installType(&PY_TYPE(NormalizationH3), module, "NormalizationH3", 0);
          }

          void t_NormalizationH3::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(NormalizationH3).tp_dict, "class_", make_descriptor(NormalizationH3::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(NormalizationH3).tp_dict, "wrapfn_", make_descriptor(t_NormalizationH3::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(NormalizationH3).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_NormalizationH3_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, NormalizationH3::initializeClass, 1)))
              return NULL;
            return t_NormalizationH3::wrap_Object(NormalizationH3(((t_NormalizationH3 *) arg)->object.this$));
          }
          static PyObject *t_NormalizationH3_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, NormalizationH3::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_NormalizationH3_init_(t_NormalizationH3 *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                NormalizationH3 object((jobject) NULL);

                INT_CALL(object = NormalizationH3());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                jfloat a0;
                NormalizationH3 object((jobject) NULL);

                if (!parseArgs(args, "F", &a0))
                {
                  INT_CALL(object = NormalizationH3(a0));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_NormalizationH3_getMu(t_NormalizationH3 *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getMu());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_NormalizationH3_tfn(t_NormalizationH3 *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jfloat a1;
            jfloat a2;
            jfloat result;

            if (!parseArgs(args, "kFF", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.tfn(a0, a1, a2));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(NormalizationH3), (PyObject *) self, "tfn", args, 2);
          }

          static PyObject *t_NormalizationH3_toString(t_NormalizationH3 *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(NormalizationH3), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_NormalizationH3_get__mu(t_NormalizationH3 *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getMu());
            return PyFloat_FromDouble((double) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/cjk/CJKBigramFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace cjk {

          ::java::lang::Class *CJKBigramFilter::class$ = NULL;
          jmethodID *CJKBigramFilter::mids$ = NULL;
          bool CJKBigramFilter::live$ = false;
          ::java::lang::String *CJKBigramFilter::DOUBLE_TYPE = NULL;
          jint CJKBigramFilter::HAN = (jint) 0;
          jint CJKBigramFilter::HANGUL = (jint) 0;
          jint CJKBigramFilter::HIRAGANA = (jint) 0;
          jint CJKBigramFilter::KATAKANA = (jint) 0;
          ::java::lang::String *CJKBigramFilter::SINGLE_TYPE = NULL;

          jclass CJKBigramFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/cjk/CJKBigramFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_init$_d53bcf42] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;I)V");
              mids$[mid_init$_4f7f61d3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;IZ)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DOUBLE_TYPE = new ::java::lang::String(env->getStaticObjectField(cls, "DOUBLE_TYPE", "Ljava/lang/String;"));
              HAN = env->getStaticIntField(cls, "HAN");
              HANGUL = env->getStaticIntField(cls, "HANGUL");
              HIRAGANA = env->getStaticIntField(cls, "HIRAGANA");
              KATAKANA = env->getStaticIntField(cls, "KATAKANA");
              SINGLE_TYPE = new ::java::lang::String(env->getStaticObjectField(cls, "SINGLE_TYPE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CJKBigramFilter::CJKBigramFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          CJKBigramFilter::CJKBigramFilter(const ::org::apache::lucene::analysis::TokenStream & a0, jint a1) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_d53bcf42, a0.this$, a1)) {}

          CJKBigramFilter::CJKBigramFilter(const ::org::apache::lucene::analysis::TokenStream & a0, jint a1, jboolean a2) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_4f7f61d3, a0.this$, a1, a2)) {}

          jboolean CJKBigramFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void CJKBigramFilter::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace cjk {
          static PyObject *t_CJKBigramFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CJKBigramFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CJKBigramFilter_init_(t_CJKBigramFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CJKBigramFilter_incrementToken(t_CJKBigramFilter *self, PyObject *args);
          static PyObject *t_CJKBigramFilter_reset(t_CJKBigramFilter *self, PyObject *args);

          static PyMethodDef t_CJKBigramFilter__methods_[] = {
            DECLARE_METHOD(t_CJKBigramFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CJKBigramFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CJKBigramFilter, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_CJKBigramFilter, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CJKBigramFilter, t_CJKBigramFilter, ::org::apache::lucene::analysis::TokenFilter, CJKBigramFilter, t_CJKBigramFilter_init_, 0, 0, 0, 0, 0);

          void t_CJKBigramFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(CJKBigramFilter), module, "CJKBigramFilter", 0);
          }

          void t_CJKBigramFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CJKBigramFilter).tp_dict, "class_", make_descriptor(CJKBigramFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CJKBigramFilter).tp_dict, "wrapfn_", make_descriptor(t_CJKBigramFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CJKBigramFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(CJKBigramFilter::initializeClass);
            PyDict_SetItemString(PY_TYPE(CJKBigramFilter).tp_dict, "DOUBLE_TYPE", make_descriptor(j2p(*CJKBigramFilter::DOUBLE_TYPE)));
            PyDict_SetItemString(PY_TYPE(CJKBigramFilter).tp_dict, "HAN", make_descriptor(CJKBigramFilter::HAN));
            PyDict_SetItemString(PY_TYPE(CJKBigramFilter).tp_dict, "HANGUL", make_descriptor(CJKBigramFilter::HANGUL));
            PyDict_SetItemString(PY_TYPE(CJKBigramFilter).tp_dict, "HIRAGANA", make_descriptor(CJKBigramFilter::HIRAGANA));
            PyDict_SetItemString(PY_TYPE(CJKBigramFilter).tp_dict, "KATAKANA", make_descriptor(CJKBigramFilter::KATAKANA));
            PyDict_SetItemString(PY_TYPE(CJKBigramFilter).tp_dict, "SINGLE_TYPE", make_descriptor(j2p(*CJKBigramFilter::SINGLE_TYPE)));
          }

          static PyObject *t_CJKBigramFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CJKBigramFilter::initializeClass, 1)))
              return NULL;
            return t_CJKBigramFilter::wrap_Object(CJKBigramFilter(((t_CJKBigramFilter *) arg)->object.this$));
          }
          static PyObject *t_CJKBigramFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CJKBigramFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CJKBigramFilter_init_(t_CJKBigramFilter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                CJKBigramFilter object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
                {
                  INT_CALL(object = CJKBigramFilter(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                jint a1;
                CJKBigramFilter object((jobject) NULL);

                if (!parseArgs(args, "kI", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = CJKBigramFilter(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                jint a1;
                jboolean a2;
                CJKBigramFilter object((jobject) NULL);

                if (!parseArgs(args, "kIZ", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = CJKBigramFilter(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_CJKBigramFilter_incrementToken(t_CJKBigramFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(CJKBigramFilter), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_CJKBigramFilter_reset(t_CJKBigramFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(CJKBigramFilter), (PyObject *) self, "reset", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/range/LongRangeFacetCounts.h"
#include "org/apache/lucene/queries/function/ValueSource.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/facet/range/LongRange.h"
#include "org/apache/lucene/search/Filter.h"
#include "org/apache/lucene/facet/FacetsCollector.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace range {

          ::java::lang::Class *LongRangeFacetCounts::class$ = NULL;
          jmethodID *LongRangeFacetCounts::mids$ = NULL;
          bool LongRangeFacetCounts::live$ = false;

          jclass LongRangeFacetCounts::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/range/LongRangeFacetCounts");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_d97a5aae] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/facet/FacetsCollector;[Lorg/apache/lucene/facet/range/LongRange;)V");
              mids$[mid_init$_f040242a] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/queries/function/ValueSource;Lorg/apache/lucene/facet/FacetsCollector;[Lorg/apache/lucene/facet/range/LongRange;)V");
              mids$[mid_init$_9056893a] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/queries/function/ValueSource;Lorg/apache/lucene/facet/FacetsCollector;Lorg/apache/lucene/search/Filter;[Lorg/apache/lucene/facet/range/LongRange;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          LongRangeFacetCounts::LongRangeFacetCounts(const ::java::lang::String & a0, const ::org::apache::lucene::facet::FacetsCollector & a1, const JArray< ::org::apache::lucene::facet::range::LongRange > & a2) : ::org::apache::lucene::facet::range::RangeFacetCounts(env->newObject(initializeClass, &mids$, mid_init$_d97a5aae, a0.this$, a1.this$, a2.this$)) {}

          LongRangeFacetCounts::LongRangeFacetCounts(const ::java::lang::String & a0, const ::org::apache::lucene::queries::function::ValueSource & a1, const ::org::apache::lucene::facet::FacetsCollector & a2, const JArray< ::org::apache::lucene::facet::range::LongRange > & a3) : ::org::apache::lucene::facet::range::RangeFacetCounts(env->newObject(initializeClass, &mids$, mid_init$_f040242a, a0.this$, a1.this$, a2.this$, a3.this$)) {}

          LongRangeFacetCounts::LongRangeFacetCounts(const ::java::lang::String & a0, const ::org::apache::lucene::queries::function::ValueSource & a1, const ::org::apache::lucene::facet::FacetsCollector & a2, const ::org::apache::lucene::search::Filter & a3, const JArray< ::org::apache::lucene::facet::range::LongRange > & a4) : ::org::apache::lucene::facet::range::RangeFacetCounts(env->newObject(initializeClass, &mids$, mid_init$_9056893a, a0.this$, a1.this$, a2.this$, a3.this$, a4.this$)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace range {
          static PyObject *t_LongRangeFacetCounts_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LongRangeFacetCounts_instance_(PyTypeObject *type, PyObject *arg);
          static int t_LongRangeFacetCounts_init_(t_LongRangeFacetCounts *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_LongRangeFacetCounts__methods_[] = {
            DECLARE_METHOD(t_LongRangeFacetCounts, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LongRangeFacetCounts, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(LongRangeFacetCounts, t_LongRangeFacetCounts, ::org::apache::lucene::facet::range::RangeFacetCounts, LongRangeFacetCounts, t_LongRangeFacetCounts_init_, 0, 0, 0, 0, 0);

          void t_LongRangeFacetCounts::install(PyObject *module)
          {
            installType(&PY_TYPE(LongRangeFacetCounts), module, "LongRangeFacetCounts", 0);
          }

          void t_LongRangeFacetCounts::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(LongRangeFacetCounts).tp_dict, "class_", make_descriptor(LongRangeFacetCounts::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(LongRangeFacetCounts).tp_dict, "wrapfn_", make_descriptor(t_LongRangeFacetCounts::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(LongRangeFacetCounts).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_LongRangeFacetCounts_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LongRangeFacetCounts::initializeClass, 1)))
              return NULL;
            return t_LongRangeFacetCounts::wrap_Object(LongRangeFacetCounts(((t_LongRangeFacetCounts *) arg)->object.this$));
          }
          static PyObject *t_LongRangeFacetCounts_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LongRangeFacetCounts::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_LongRangeFacetCounts_init_(t_LongRangeFacetCounts *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 3:
              {
                ::java::lang::String a0((jobject) NULL);
                ::org::apache::lucene::facet::FacetsCollector a1((jobject) NULL);
                JArray< ::org::apache::lucene::facet::range::LongRange > a2((jobject) NULL);
                LongRangeFacetCounts object((jobject) NULL);

                if (!parseArgs(args, "sk[k", ::org::apache::lucene::facet::FacetsCollector::initializeClass, ::org::apache::lucene::facet::range::LongRange::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = LongRangeFacetCounts(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 4:
              {
                ::java::lang::String a0((jobject) NULL);
                ::org::apache::lucene::queries::function::ValueSource a1((jobject) NULL);
                ::org::apache::lucene::facet::FacetsCollector a2((jobject) NULL);
                JArray< ::org::apache::lucene::facet::range::LongRange > a3((jobject) NULL);
                LongRangeFacetCounts object((jobject) NULL);

                if (!parseArgs(args, "skk[k", ::org::apache::lucene::queries::function::ValueSource::initializeClass, ::org::apache::lucene::facet::FacetsCollector::initializeClass, ::org::apache::lucene::facet::range::LongRange::initializeClass, &a0, &a1, &a2, &a3))
                {
                  INT_CALL(object = LongRangeFacetCounts(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 5:
              {
                ::java::lang::String a0((jobject) NULL);
                ::org::apache::lucene::queries::function::ValueSource a1((jobject) NULL);
                ::org::apache::lucene::facet::FacetsCollector a2((jobject) NULL);
                ::org::apache::lucene::search::Filter a3((jobject) NULL);
                JArray< ::org::apache::lucene::facet::range::LongRange > a4((jobject) NULL);
                LongRangeFacetCounts object((jobject) NULL);

                if (!parseArgs(args, "skkk[k", ::org::apache::lucene::queries::function::ValueSource::initializeClass, ::org::apache::lucene::facet::FacetsCollector::initializeClass, ::org::apache::lucene::search::Filter::initializeClass, ::org::apache::lucene::facet::range::LongRange::initializeClass, &a0, &a1, &a2, &a3, &a4))
                {
                  INT_CALL(object = LongRangeFacetCounts(a0, a1, a2, a3, a4));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/SumTotalTermFreqValueSource.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *SumTotalTermFreqValueSource::class$ = NULL;
            jmethodID *SumTotalTermFreqValueSource::mids$ = NULL;
            bool SumTotalTermFreqValueSource::live$ = false;

            jclass SumTotalTermFreqValueSource::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/SumTotalTermFreqValueSource");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
                mids$[mid_createWeight_1b6125ba] = env->getMethodID(cls, "createWeight", "(Ljava/util/Map;Lorg/apache/lucene/search/IndexSearcher;)V");
                mids$[mid_description_14c7b5c5] = env->getMethodID(cls, "description", "()Ljava/lang/String;");
                mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_getValues_4c566485] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/queries/function/FunctionValues;");
                mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
                mids$[mid_name_14c7b5c5] = env->getMethodID(cls, "name", "()Ljava/lang/String;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            SumTotalTermFreqValueSource::SumTotalTermFreqValueSource(const ::java::lang::String & a0) : ::org::apache::lucene::queries::function::ValueSource(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

            void SumTotalTermFreqValueSource::createWeight(const ::java::util::Map & a0, const ::org::apache::lucene::search::IndexSearcher & a1) const
            {
              env->callVoidMethod(this$, mids$[mid_createWeight_1b6125ba], a0.this$, a1.this$);
            }

            ::java::lang::String SumTotalTermFreqValueSource::description() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_description_14c7b5c5]));
            }

            jboolean SumTotalTermFreqValueSource::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
            }

            ::org::apache::lucene::queries::function::FunctionValues SumTotalTermFreqValueSource::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::FunctionValues(env->callObjectMethod(this$, mids$[mid_getValues_4c566485], a0.this$, a1.this$));
            }

            jint SumTotalTermFreqValueSource::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
            }

            ::java::lang::String SumTotalTermFreqValueSource::name() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_name_14c7b5c5]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_SumTotalTermFreqValueSource_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_SumTotalTermFreqValueSource_instance_(PyTypeObject *type, PyObject *arg);
            static int t_SumTotalTermFreqValueSource_init_(t_SumTotalTermFreqValueSource *self, PyObject *args, PyObject *kwds);
            static PyObject *t_SumTotalTermFreqValueSource_createWeight(t_SumTotalTermFreqValueSource *self, PyObject *args);
            static PyObject *t_SumTotalTermFreqValueSource_description(t_SumTotalTermFreqValueSource *self, PyObject *args);
            static PyObject *t_SumTotalTermFreqValueSource_equals(t_SumTotalTermFreqValueSource *self, PyObject *args);
            static PyObject *t_SumTotalTermFreqValueSource_getValues(t_SumTotalTermFreqValueSource *self, PyObject *args);
            static PyObject *t_SumTotalTermFreqValueSource_hashCode(t_SumTotalTermFreqValueSource *self, PyObject *args);
            static PyObject *t_SumTotalTermFreqValueSource_name(t_SumTotalTermFreqValueSource *self);

            static PyMethodDef t_SumTotalTermFreqValueSource__methods_[] = {
              DECLARE_METHOD(t_SumTotalTermFreqValueSource, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SumTotalTermFreqValueSource, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SumTotalTermFreqValueSource, createWeight, METH_VARARGS),
              DECLARE_METHOD(t_SumTotalTermFreqValueSource, description, METH_VARARGS),
              DECLARE_METHOD(t_SumTotalTermFreqValueSource, equals, METH_VARARGS),
              DECLARE_METHOD(t_SumTotalTermFreqValueSource, getValues, METH_VARARGS),
              DECLARE_METHOD(t_SumTotalTermFreqValueSource, hashCode, METH_VARARGS),
              DECLARE_METHOD(t_SumTotalTermFreqValueSource, name, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(SumTotalTermFreqValueSource, t_SumTotalTermFreqValueSource, ::org::apache::lucene::queries::function::ValueSource, SumTotalTermFreqValueSource, t_SumTotalTermFreqValueSource_init_, 0, 0, 0, 0, 0);

            void t_SumTotalTermFreqValueSource::install(PyObject *module)
            {
              installType(&PY_TYPE(SumTotalTermFreqValueSource), module, "SumTotalTermFreqValueSource", 0);
            }

            void t_SumTotalTermFreqValueSource::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(SumTotalTermFreqValueSource).tp_dict, "class_", make_descriptor(SumTotalTermFreqValueSource::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(SumTotalTermFreqValueSource).tp_dict, "wrapfn_", make_descriptor(t_SumTotalTermFreqValueSource::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(SumTotalTermFreqValueSource).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_SumTotalTermFreqValueSource_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, SumTotalTermFreqValueSource::initializeClass, 1)))
                return NULL;
              return t_SumTotalTermFreqValueSource::wrap_Object(SumTotalTermFreqValueSource(((t_SumTotalTermFreqValueSource *) arg)->object.this$));
            }
            static PyObject *t_SumTotalTermFreqValueSource_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, SumTotalTermFreqValueSource::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_SumTotalTermFreqValueSource_init_(t_SumTotalTermFreqValueSource *self, PyObject *args, PyObject *kwds)
            {
              ::java::lang::String a0((jobject) NULL);
              SumTotalTermFreqValueSource object((jobject) NULL);

              if (!parseArgs(args, "s", &a0))
              {
                INT_CALL(object = SumTotalTermFreqValueSource(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_SumTotalTermFreqValueSource_createWeight(t_SumTotalTermFreqValueSource *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::search::IndexSearcher a1((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(self->object.createWeight(a0, a1));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(SumTotalTermFreqValueSource), (PyObject *) self, "createWeight", args, 2);
            }

            static PyObject *t_SumTotalTermFreqValueSource_description(t_SumTotalTermFreqValueSource *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.description());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(SumTotalTermFreqValueSource), (PyObject *) self, "description", args, 2);
            }

            static PyObject *t_SumTotalTermFreqValueSource_equals(t_SumTotalTermFreqValueSource *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(SumTotalTermFreqValueSource), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_SumTotalTermFreqValueSource_getValues(t_SumTotalTermFreqValueSource *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::FunctionValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::t_FunctionValues::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(SumTotalTermFreqValueSource), (PyObject *) self, "getValues", args, 2);
            }

            static PyObject *t_SumTotalTermFreqValueSource_hashCode(t_SumTotalTermFreqValueSource *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(SumTotalTermFreqValueSource), (PyObject *) self, "hashCode", args, 2);
            }

            static PyObject *t_SumTotalTermFreqValueSource_name(t_SumTotalTermFreqValueSource *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.name());
              return j2p(result);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/grouping/AbstractGroupFacetCollector$GroupedFacetResult.h"
#include "java/util/List.h"
#include "org/apache/lucene/search/grouping/AbstractGroupFacetCollector$FacetEntry.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {

          ::java::lang::Class *AbstractGroupFacetCollector$GroupedFacetResult::class$ = NULL;
          jmethodID *AbstractGroupFacetCollector$GroupedFacetResult::mids$ = NULL;
          bool AbstractGroupFacetCollector$GroupedFacetResult::live$ = false;

          jclass AbstractGroupFacetCollector$GroupedFacetResult::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/grouping/AbstractGroupFacetCollector$GroupedFacetResult");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_90d4781f] = env->getMethodID(cls, "<init>", "(IIZII)V");
              mids$[mid_addFacetCount_738fc2ce] = env->getMethodID(cls, "addFacetCount", "(Lorg/apache/lucene/util/BytesRef;I)V");
              mids$[mid_getFacetEntries_6bc635fe] = env->getMethodID(cls, "getFacetEntries", "(II)Ljava/util/List;");
              mids$[mid_getTotalCount_54c6a179] = env->getMethodID(cls, "getTotalCount", "()I");
              mids$[mid_getTotalMissingCount_54c6a179] = env->getMethodID(cls, "getTotalMissingCount", "()I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          AbstractGroupFacetCollector$GroupedFacetResult::AbstractGroupFacetCollector$GroupedFacetResult(jint a0, jint a1, jboolean a2, jint a3, jint a4) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_90d4781f, a0, a1, a2, a3, a4)) {}

          void AbstractGroupFacetCollector$GroupedFacetResult::addFacetCount(const ::org::apache::lucene::util::BytesRef & a0, jint a1) const
          {
            env->callVoidMethod(this$, mids$[mid_addFacetCount_738fc2ce], a0.this$, a1);
          }

          ::java::util::List AbstractGroupFacetCollector$GroupedFacetResult::getFacetEntries(jint a0, jint a1) const
          {
            return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getFacetEntries_6bc635fe], a0, a1));
          }

          jint AbstractGroupFacetCollector$GroupedFacetResult::getTotalCount() const
          {
            return env->callIntMethod(this$, mids$[mid_getTotalCount_54c6a179]);
          }

          jint AbstractGroupFacetCollector$GroupedFacetResult::getTotalMissingCount() const
          {
            return env->callIntMethod(this$, mids$[mid_getTotalMissingCount_54c6a179]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          static PyObject *t_AbstractGroupFacetCollector$GroupedFacetResult_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AbstractGroupFacetCollector$GroupedFacetResult_instance_(PyTypeObject *type, PyObject *arg);
          static int t_AbstractGroupFacetCollector$GroupedFacetResult_init_(t_AbstractGroupFacetCollector$GroupedFacetResult *self, PyObject *args, PyObject *kwds);
          static PyObject *t_AbstractGroupFacetCollector$GroupedFacetResult_addFacetCount(t_AbstractGroupFacetCollector$GroupedFacetResult *self, PyObject *args);
          static PyObject *t_AbstractGroupFacetCollector$GroupedFacetResult_getFacetEntries(t_AbstractGroupFacetCollector$GroupedFacetResult *self, PyObject *args);
          static PyObject *t_AbstractGroupFacetCollector$GroupedFacetResult_getTotalCount(t_AbstractGroupFacetCollector$GroupedFacetResult *self);
          static PyObject *t_AbstractGroupFacetCollector$GroupedFacetResult_getTotalMissingCount(t_AbstractGroupFacetCollector$GroupedFacetResult *self);
          static PyObject *t_AbstractGroupFacetCollector$GroupedFacetResult_get__totalCount(t_AbstractGroupFacetCollector$GroupedFacetResult *self, void *data);
          static PyObject *t_AbstractGroupFacetCollector$GroupedFacetResult_get__totalMissingCount(t_AbstractGroupFacetCollector$GroupedFacetResult *self, void *data);
          static PyGetSetDef t_AbstractGroupFacetCollector$GroupedFacetResult__fields_[] = {
            DECLARE_GET_FIELD(t_AbstractGroupFacetCollector$GroupedFacetResult, totalCount),
            DECLARE_GET_FIELD(t_AbstractGroupFacetCollector$GroupedFacetResult, totalMissingCount),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_AbstractGroupFacetCollector$GroupedFacetResult__methods_[] = {
            DECLARE_METHOD(t_AbstractGroupFacetCollector$GroupedFacetResult, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AbstractGroupFacetCollector$GroupedFacetResult, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AbstractGroupFacetCollector$GroupedFacetResult, addFacetCount, METH_VARARGS),
            DECLARE_METHOD(t_AbstractGroupFacetCollector$GroupedFacetResult, getFacetEntries, METH_VARARGS),
            DECLARE_METHOD(t_AbstractGroupFacetCollector$GroupedFacetResult, getTotalCount, METH_NOARGS),
            DECLARE_METHOD(t_AbstractGroupFacetCollector$GroupedFacetResult, getTotalMissingCount, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(AbstractGroupFacetCollector$GroupedFacetResult, t_AbstractGroupFacetCollector$GroupedFacetResult, ::java::lang::Object, AbstractGroupFacetCollector$GroupedFacetResult, t_AbstractGroupFacetCollector$GroupedFacetResult_init_, 0, 0, t_AbstractGroupFacetCollector$GroupedFacetResult__fields_, 0, 0);

          void t_AbstractGroupFacetCollector$GroupedFacetResult::install(PyObject *module)
          {
            installType(&PY_TYPE(AbstractGroupFacetCollector$GroupedFacetResult), module, "AbstractGroupFacetCollector$GroupedFacetResult", 0);
          }

          void t_AbstractGroupFacetCollector$GroupedFacetResult::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(AbstractGroupFacetCollector$GroupedFacetResult).tp_dict, "class_", make_descriptor(AbstractGroupFacetCollector$GroupedFacetResult::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(AbstractGroupFacetCollector$GroupedFacetResult).tp_dict, "wrapfn_", make_descriptor(t_AbstractGroupFacetCollector$GroupedFacetResult::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(AbstractGroupFacetCollector$GroupedFacetResult).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_AbstractGroupFacetCollector$GroupedFacetResult_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, AbstractGroupFacetCollector$GroupedFacetResult::initializeClass, 1)))
              return NULL;
            return t_AbstractGroupFacetCollector$GroupedFacetResult::wrap_Object(AbstractGroupFacetCollector$GroupedFacetResult(((t_AbstractGroupFacetCollector$GroupedFacetResult *) arg)->object.this$));
          }
          static PyObject *t_AbstractGroupFacetCollector$GroupedFacetResult_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, AbstractGroupFacetCollector$GroupedFacetResult::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_AbstractGroupFacetCollector$GroupedFacetResult_init_(t_AbstractGroupFacetCollector$GroupedFacetResult *self, PyObject *args, PyObject *kwds)
          {
            jint a0;
            jint a1;
            jboolean a2;
            jint a3;
            jint a4;
            AbstractGroupFacetCollector$GroupedFacetResult object((jobject) NULL);

            if (!parseArgs(args, "IIZII", &a0, &a1, &a2, &a3, &a4))
            {
              INT_CALL(object = AbstractGroupFacetCollector$GroupedFacetResult(a0, a1, a2, a3, a4));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_AbstractGroupFacetCollector$GroupedFacetResult_addFacetCount(t_AbstractGroupFacetCollector$GroupedFacetResult *self, PyObject *args)
          {
            ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
            jint a1;

            if (!parseArgs(args, "kI", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.addFacetCount(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "addFacetCount", args);
            return NULL;
          }

          static PyObject *t_AbstractGroupFacetCollector$GroupedFacetResult_getFacetEntries(t_AbstractGroupFacetCollector$GroupedFacetResult *self, PyObject *args)
          {
            jint a0;
            jint a1;
            ::java::util::List result((jobject) NULL);

            if (!parseArgs(args, "II", &a0, &a1))
            {
              OBJ_CALL(result = self->object.getFacetEntries(a0, a1));
              return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::search::grouping::PY_TYPE(AbstractGroupFacetCollector$FacetEntry));
            }

            PyErr_SetArgsError((PyObject *) self, "getFacetEntries", args);
            return NULL;
          }

          static PyObject *t_AbstractGroupFacetCollector$GroupedFacetResult_getTotalCount(t_AbstractGroupFacetCollector$GroupedFacetResult *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getTotalCount());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_AbstractGroupFacetCollector$GroupedFacetResult_getTotalMissingCount(t_AbstractGroupFacetCollector$GroupedFacetResult *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getTotalMissingCount());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_AbstractGroupFacetCollector$GroupedFacetResult_get__totalCount(t_AbstractGroupFacetCollector$GroupedFacetResult *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getTotalCount());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_AbstractGroupFacetCollector$GroupedFacetResult_get__totalMissingCount(t_AbstractGroupFacetCollector$GroupedFacetResult *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getTotalMissingCount());
            return PyInt_FromLong((long) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/Field$Store.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *Field$Store::class$ = NULL;
        jmethodID *Field$Store::mids$ = NULL;
        bool Field$Store::live$ = false;
        Field$Store *Field$Store::NO = NULL;
        Field$Store *Field$Store::YES = NULL;

        jclass Field$Store::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/Field$Store");

            mids$ = new jmethodID[max_mid];
            mids$[mid_valueOf_7fd4bea4] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/document/Field$Store;");
            mids$[mid_values_ca930bca] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/document/Field$Store;");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            NO = new Field$Store(env->getStaticObjectField(cls, "NO", "Lorg/apache/lucene/document/Field$Store;"));
            YES = new Field$Store(env->getStaticObjectField(cls, "YES", "Lorg/apache/lucene/document/Field$Store;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        Field$Store Field$Store::valueOf(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return Field$Store(env->callStaticObjectMethod(cls, mids$[mid_valueOf_7fd4bea4], a0.this$));
        }

        JArray< Field$Store > Field$Store::values()
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< Field$Store >(env->callStaticObjectMethod(cls, mids$[mid_values_ca930bca]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_Field$Store_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Field$Store_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Field$Store_of_(t_Field$Store *self, PyObject *args);
        static PyObject *t_Field$Store_valueOf(PyTypeObject *type, PyObject *args);
        static PyObject *t_Field$Store_values(PyTypeObject *type);
        static PyObject *t_Field$Store_get__parameters_(t_Field$Store *self, void *data);
        static PyGetSetDef t_Field$Store__fields_[] = {
          DECLARE_GET_FIELD(t_Field$Store, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_Field$Store__methods_[] = {
          DECLARE_METHOD(t_Field$Store, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Field$Store, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Field$Store, of_, METH_VARARGS),
          DECLARE_METHOD(t_Field$Store, valueOf, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_Field$Store, values, METH_NOARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Field$Store, t_Field$Store, ::java::lang::Enum, Field$Store, abstract_init, 0, 0, t_Field$Store__fields_, 0, 0);
        PyObject *t_Field$Store::wrap_Object(const Field$Store& object, PyTypeObject *p0)
        {
          PyObject *obj = t_Field$Store::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_Field$Store *self = (t_Field$Store *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_Field$Store::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_Field$Store::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_Field$Store *self = (t_Field$Store *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_Field$Store::install(PyObject *module)
        {
          installType(&PY_TYPE(Field$Store), module, "Field$Store", 0);
        }

        void t_Field$Store::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(Field$Store).tp_dict, "class_", make_descriptor(Field$Store::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(Field$Store).tp_dict, "wrapfn_", make_descriptor(t_Field$Store::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(Field$Store).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(Field$Store::initializeClass);
          PyDict_SetItemString(PY_TYPE(Field$Store).tp_dict, "NO", make_descriptor(t_Field$Store::wrap_Object(*Field$Store::NO)));
          PyDict_SetItemString(PY_TYPE(Field$Store).tp_dict, "YES", make_descriptor(t_Field$Store::wrap_Object(*Field$Store::YES)));
        }

        static PyObject *t_Field$Store_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Field$Store::initializeClass, 1)))
            return NULL;
          return t_Field$Store::wrap_Object(Field$Store(((t_Field$Store *) arg)->object.this$));
        }
        static PyObject *t_Field$Store_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Field$Store::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_Field$Store_of_(t_Field$Store *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_Field$Store_valueOf(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          Field$Store result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::document::Field$Store::valueOf(a0));
            return t_Field$Store::wrap_Object(result);
          }

          return callSuper(type, "valueOf", args, 2);
        }

        static PyObject *t_Field$Store_values(PyTypeObject *type)
        {
          JArray< Field$Store > result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::document::Field$Store::values());
          return JArray<jobject>(result.this$).wrap(t_Field$Store::wrap_jobject);
        }
        static PyObject *t_Field$Store_get__parameters_(t_Field$Store *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/standard/std34/StandardTokenizerImpl34.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "java/io/Reader.h"
#include "org/apache/lucene/analysis/standard/StandardTokenizerInterface.h"
#include "org/apache/lucene/analysis/tokenattributes/CharTermAttribute.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {
          namespace std34 {

            ::java::lang::Class *StandardTokenizerImpl34::class$ = NULL;
            jmethodID *StandardTokenizerImpl34::mids$ = NULL;
            bool StandardTokenizerImpl34::live$ = false;
            jint StandardTokenizerImpl34::HANGUL_TYPE = (jint) 0;
            jint StandardTokenizerImpl34::HIRAGANA_TYPE = (jint) 0;
            jint StandardTokenizerImpl34::IDEOGRAPHIC_TYPE = (jint) 0;
            jint StandardTokenizerImpl34::KATAKANA_TYPE = (jint) 0;
            jint StandardTokenizerImpl34::NUMERIC_TYPE = (jint) 0;
            jint StandardTokenizerImpl34::SOUTH_EAST_ASIAN_TYPE = (jint) 0;
            jint StandardTokenizerImpl34::WORD_TYPE = (jint) 0;
            jint StandardTokenizerImpl34::YYEOF = (jint) 0;
            jint StandardTokenizerImpl34::YYINITIAL = (jint) 0;

            jclass StandardTokenizerImpl34::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/standard/std34/StandardTokenizerImpl34");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_cf2e3c10] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;)V");
                mids$[mid_getNextToken_54c6a179] = env->getMethodID(cls, "getNextToken", "()I");
                mids$[mid_getText_64c709f2] = env->getMethodID(cls, "getText", "(Lorg/apache/lucene/analysis/tokenattributes/CharTermAttribute;)V");
                mids$[mid_setBufferSize_39c7bd3c] = env->getMethodID(cls, "setBufferSize", "(I)V");
                mids$[mid_yybegin_39c7bd3c] = env->getMethodID(cls, "yybegin", "(I)V");
                mids$[mid_yychar_54c6a179] = env->getMethodID(cls, "yychar", "()I");
                mids$[mid_yycharat_39c7bd29] = env->getMethodID(cls, "yycharat", "(I)C");
                mids$[mid_yyclose_54c6a166] = env->getMethodID(cls, "yyclose", "()V");
                mids$[mid_yylength_54c6a179] = env->getMethodID(cls, "yylength", "()I");
                mids$[mid_yypushback_39c7bd3c] = env->getMethodID(cls, "yypushback", "(I)V");
                mids$[mid_yyreset_cf2e3c10] = env->getMethodID(cls, "yyreset", "(Ljava/io/Reader;)V");
                mids$[mid_yystate_54c6a179] = env->getMethodID(cls, "yystate", "()I");
                mids$[mid_yytext_14c7b5c5] = env->getMethodID(cls, "yytext", "()Ljava/lang/String;");

                class$ = (::java::lang::Class *) new JObject(cls);
                cls = (jclass) class$->this$;

                HANGUL_TYPE = env->getStaticIntField(cls, "HANGUL_TYPE");
                HIRAGANA_TYPE = env->getStaticIntField(cls, "HIRAGANA_TYPE");
                IDEOGRAPHIC_TYPE = env->getStaticIntField(cls, "IDEOGRAPHIC_TYPE");
                KATAKANA_TYPE = env->getStaticIntField(cls, "KATAKANA_TYPE");
                NUMERIC_TYPE = env->getStaticIntField(cls, "NUMERIC_TYPE");
                SOUTH_EAST_ASIAN_TYPE = env->getStaticIntField(cls, "SOUTH_EAST_ASIAN_TYPE");
                WORD_TYPE = env->getStaticIntField(cls, "WORD_TYPE");
                YYEOF = env->getStaticIntField(cls, "YYEOF");
                YYINITIAL = env->getStaticIntField(cls, "YYINITIAL");
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            StandardTokenizerImpl34::StandardTokenizerImpl34(const ::java::io::Reader & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_cf2e3c10, a0.this$)) {}

            jint StandardTokenizerImpl34::getNextToken() const
            {
              return env->callIntMethod(this$, mids$[mid_getNextToken_54c6a179]);
            }

            void StandardTokenizerImpl34::getText(const ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_getText_64c709f2], a0.this$);
            }

            void StandardTokenizerImpl34::setBufferSize(jint a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setBufferSize_39c7bd3c], a0);
            }

            void StandardTokenizerImpl34::yybegin(jint a0) const
            {
              env->callVoidMethod(this$, mids$[mid_yybegin_39c7bd3c], a0);
            }

            jint StandardTokenizerImpl34::yychar() const
            {
              return env->callIntMethod(this$, mids$[mid_yychar_54c6a179]);
            }

            jchar StandardTokenizerImpl34::yycharat(jint a0) const
            {
              return env->callCharMethod(this$, mids$[mid_yycharat_39c7bd29], a0);
            }

            void StandardTokenizerImpl34::yyclose() const
            {
              env->callVoidMethod(this$, mids$[mid_yyclose_54c6a166]);
            }

            jint StandardTokenizerImpl34::yylength() const
            {
              return env->callIntMethod(this$, mids$[mid_yylength_54c6a179]);
            }

            void StandardTokenizerImpl34::yypushback(jint a0) const
            {
              env->callVoidMethod(this$, mids$[mid_yypushback_39c7bd3c], a0);
            }

            void StandardTokenizerImpl34::yyreset(const ::java::io::Reader & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_yyreset_cf2e3c10], a0.this$);
            }

            jint StandardTokenizerImpl34::yystate() const
            {
              return env->callIntMethod(this$, mids$[mid_yystate_54c6a179]);
            }

            ::java::lang::String StandardTokenizerImpl34::yytext() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_yytext_14c7b5c5]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {
          namespace std34 {
            static PyObject *t_StandardTokenizerImpl34_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_StandardTokenizerImpl34_instance_(PyTypeObject *type, PyObject *arg);
            static int t_StandardTokenizerImpl34_init_(t_StandardTokenizerImpl34 *self, PyObject *args, PyObject *kwds);
            static PyObject *t_StandardTokenizerImpl34_getNextToken(t_StandardTokenizerImpl34 *self);
            static PyObject *t_StandardTokenizerImpl34_getText(t_StandardTokenizerImpl34 *self, PyObject *arg);
            static PyObject *t_StandardTokenizerImpl34_setBufferSize(t_StandardTokenizerImpl34 *self, PyObject *arg);
            static PyObject *t_StandardTokenizerImpl34_yybegin(t_StandardTokenizerImpl34 *self, PyObject *arg);
            static PyObject *t_StandardTokenizerImpl34_yychar(t_StandardTokenizerImpl34 *self);
            static PyObject *t_StandardTokenizerImpl34_yycharat(t_StandardTokenizerImpl34 *self, PyObject *arg);
            static PyObject *t_StandardTokenizerImpl34_yyclose(t_StandardTokenizerImpl34 *self);
            static PyObject *t_StandardTokenizerImpl34_yylength(t_StandardTokenizerImpl34 *self);
            static PyObject *t_StandardTokenizerImpl34_yypushback(t_StandardTokenizerImpl34 *self, PyObject *arg);
            static PyObject *t_StandardTokenizerImpl34_yyreset(t_StandardTokenizerImpl34 *self, PyObject *arg);
            static PyObject *t_StandardTokenizerImpl34_yystate(t_StandardTokenizerImpl34 *self);
            static PyObject *t_StandardTokenizerImpl34_yytext(t_StandardTokenizerImpl34 *self);
            static int t_StandardTokenizerImpl34_set__bufferSize(t_StandardTokenizerImpl34 *self, PyObject *arg, void *data);
            static PyObject *t_StandardTokenizerImpl34_get__nextToken(t_StandardTokenizerImpl34 *self, void *data);
            static PyGetSetDef t_StandardTokenizerImpl34__fields_[] = {
              DECLARE_SET_FIELD(t_StandardTokenizerImpl34, bufferSize),
              DECLARE_GET_FIELD(t_StandardTokenizerImpl34, nextToken),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_StandardTokenizerImpl34__methods_[] = {
              DECLARE_METHOD(t_StandardTokenizerImpl34, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_StandardTokenizerImpl34, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_StandardTokenizerImpl34, getNextToken, METH_NOARGS),
              DECLARE_METHOD(t_StandardTokenizerImpl34, getText, METH_O),
              DECLARE_METHOD(t_StandardTokenizerImpl34, setBufferSize, METH_O),
              DECLARE_METHOD(t_StandardTokenizerImpl34, yybegin, METH_O),
              DECLARE_METHOD(t_StandardTokenizerImpl34, yychar, METH_NOARGS),
              DECLARE_METHOD(t_StandardTokenizerImpl34, yycharat, METH_O),
              DECLARE_METHOD(t_StandardTokenizerImpl34, yyclose, METH_NOARGS),
              DECLARE_METHOD(t_StandardTokenizerImpl34, yylength, METH_NOARGS),
              DECLARE_METHOD(t_StandardTokenizerImpl34, yypushback, METH_O),
              DECLARE_METHOD(t_StandardTokenizerImpl34, yyreset, METH_O),
              DECLARE_METHOD(t_StandardTokenizerImpl34, yystate, METH_NOARGS),
              DECLARE_METHOD(t_StandardTokenizerImpl34, yytext, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(StandardTokenizerImpl34, t_StandardTokenizerImpl34, ::java::lang::Object, StandardTokenizerImpl34, t_StandardTokenizerImpl34_init_, 0, 0, t_StandardTokenizerImpl34__fields_, 0, 0);

            void t_StandardTokenizerImpl34::install(PyObject *module)
            {
              installType(&PY_TYPE(StandardTokenizerImpl34), module, "StandardTokenizerImpl34", 0);
            }

            void t_StandardTokenizerImpl34::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl34).tp_dict, "class_", make_descriptor(StandardTokenizerImpl34::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl34).tp_dict, "wrapfn_", make_descriptor(t_StandardTokenizerImpl34::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl34).tp_dict, "boxfn_", make_descriptor(boxObject));
              env->getClass(StandardTokenizerImpl34::initializeClass);
              PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl34).tp_dict, "HANGUL_TYPE", make_descriptor(StandardTokenizerImpl34::HANGUL_TYPE));
              PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl34).tp_dict, "HIRAGANA_TYPE", make_descriptor(StandardTokenizerImpl34::HIRAGANA_TYPE));
              PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl34).tp_dict, "IDEOGRAPHIC_TYPE", make_descriptor(StandardTokenizerImpl34::IDEOGRAPHIC_TYPE));
              PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl34).tp_dict, "KATAKANA_TYPE", make_descriptor(StandardTokenizerImpl34::KATAKANA_TYPE));
              PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl34).tp_dict, "NUMERIC_TYPE", make_descriptor(StandardTokenizerImpl34::NUMERIC_TYPE));
              PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl34).tp_dict, "SOUTH_EAST_ASIAN_TYPE", make_descriptor(StandardTokenizerImpl34::SOUTH_EAST_ASIAN_TYPE));
              PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl34).tp_dict, "WORD_TYPE", make_descriptor(StandardTokenizerImpl34::WORD_TYPE));
              PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl34).tp_dict, "YYEOF", make_descriptor(StandardTokenizerImpl34::YYEOF));
              PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl34).tp_dict, "YYINITIAL", make_descriptor(StandardTokenizerImpl34::YYINITIAL));
            }

            static PyObject *t_StandardTokenizerImpl34_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, StandardTokenizerImpl34::initializeClass, 1)))
                return NULL;
              return t_StandardTokenizerImpl34::wrap_Object(StandardTokenizerImpl34(((t_StandardTokenizerImpl34 *) arg)->object.this$));
            }
            static PyObject *t_StandardTokenizerImpl34_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, StandardTokenizerImpl34::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_StandardTokenizerImpl34_init_(t_StandardTokenizerImpl34 *self, PyObject *args, PyObject *kwds)
            {
              ::java::io::Reader a0((jobject) NULL);
              StandardTokenizerImpl34 object((jobject) NULL);

              if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
              {
                INT_CALL(object = StandardTokenizerImpl34(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_StandardTokenizerImpl34_getNextToken(t_StandardTokenizerImpl34 *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getNextToken());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_StandardTokenizerImpl34_getText(t_StandardTokenizerImpl34 *self, PyObject *arg)
            {
              ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute a0((jobject) NULL);

              if (!parseArg(arg, "k", ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute::initializeClass, &a0))
              {
                OBJ_CALL(self->object.getText(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "getText", arg);
              return NULL;
            }

            static PyObject *t_StandardTokenizerImpl34_setBufferSize(t_StandardTokenizerImpl34 *self, PyObject *arg)
            {
              jint a0;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(self->object.setBufferSize(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setBufferSize", arg);
              return NULL;
            }

            static PyObject *t_StandardTokenizerImpl34_yybegin(t_StandardTokenizerImpl34 *self, PyObject *arg)
            {
              jint a0;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(self->object.yybegin(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "yybegin", arg);
              return NULL;
            }

            static PyObject *t_StandardTokenizerImpl34_yychar(t_StandardTokenizerImpl34 *self)
            {
              jint result;
              OBJ_CALL(result = self->object.yychar());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_StandardTokenizerImpl34_yycharat(t_StandardTokenizerImpl34 *self, PyObject *arg)
            {
              jint a0;
              jchar result;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(result = self->object.yycharat(a0));
                return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
              }

              PyErr_SetArgsError((PyObject *) self, "yycharat", arg);
              return NULL;
            }

            static PyObject *t_StandardTokenizerImpl34_yyclose(t_StandardTokenizerImpl34 *self)
            {
              OBJ_CALL(self->object.yyclose());
              Py_RETURN_NONE;
            }

            static PyObject *t_StandardTokenizerImpl34_yylength(t_StandardTokenizerImpl34 *self)
            {
              jint result;
              OBJ_CALL(result = self->object.yylength());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_StandardTokenizerImpl34_yypushback(t_StandardTokenizerImpl34 *self, PyObject *arg)
            {
              jint a0;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(self->object.yypushback(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "yypushback", arg);
              return NULL;
            }

            static PyObject *t_StandardTokenizerImpl34_yyreset(t_StandardTokenizerImpl34 *self, PyObject *arg)
            {
              ::java::io::Reader a0((jobject) NULL);

              if (!parseArg(arg, "k", ::java::io::Reader::initializeClass, &a0))
              {
                OBJ_CALL(self->object.yyreset(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "yyreset", arg);
              return NULL;
            }

            static PyObject *t_StandardTokenizerImpl34_yystate(t_StandardTokenizerImpl34 *self)
            {
              jint result;
              OBJ_CALL(result = self->object.yystate());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_StandardTokenizerImpl34_yytext(t_StandardTokenizerImpl34 *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.yytext());
              return j2p(result);
            }

            static int t_StandardTokenizerImpl34_set__bufferSize(t_StandardTokenizerImpl34 *self, PyObject *arg, void *data)
            {
              {
                jint value;
                if (!parseArg(arg, "I", &value))
                {
                  INT_CALL(self->object.setBufferSize(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "bufferSize", arg);
              return -1;
            }

            static PyObject *t_StandardTokenizerImpl34_get__nextToken(t_StandardTokenizerImpl34 *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getNextToken());
              return PyInt_FromLong((long) value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/StandardBooleanQueryNodeBuilder.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/StandardQueryBuilder.h"
#include "org/apache/lucene/search/BooleanQuery.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {

              ::java::lang::Class *StandardBooleanQueryNodeBuilder::class$ = NULL;
              jmethodID *StandardBooleanQueryNodeBuilder::mids$ = NULL;
              bool StandardBooleanQueryNodeBuilder::live$ = false;

              jclass StandardBooleanQueryNodeBuilder::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/builders/StandardBooleanQueryNodeBuilder");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_build_e1a6cc4e] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/search/BooleanQuery;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              StandardBooleanQueryNodeBuilder::StandardBooleanQueryNodeBuilder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              ::org::apache::lucene::search::BooleanQuery StandardBooleanQueryNodeBuilder::build(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                return ::org::apache::lucene::search::BooleanQuery(env->callObjectMethod(this$, mids$[mid_build_e1a6cc4e], a0.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {
              static PyObject *t_StandardBooleanQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_StandardBooleanQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg);
              static int t_StandardBooleanQueryNodeBuilder_init_(t_StandardBooleanQueryNodeBuilder *self, PyObject *args, PyObject *kwds);
              static PyObject *t_StandardBooleanQueryNodeBuilder_build(t_StandardBooleanQueryNodeBuilder *self, PyObject *arg);

              static PyMethodDef t_StandardBooleanQueryNodeBuilder__methods_[] = {
                DECLARE_METHOD(t_StandardBooleanQueryNodeBuilder, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_StandardBooleanQueryNodeBuilder, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_StandardBooleanQueryNodeBuilder, build, METH_O),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(StandardBooleanQueryNodeBuilder, t_StandardBooleanQueryNodeBuilder, ::java::lang::Object, StandardBooleanQueryNodeBuilder, t_StandardBooleanQueryNodeBuilder_init_, 0, 0, 0, 0, 0);

              void t_StandardBooleanQueryNodeBuilder::install(PyObject *module)
              {
                installType(&PY_TYPE(StandardBooleanQueryNodeBuilder), module, "StandardBooleanQueryNodeBuilder", 0);
              }

              void t_StandardBooleanQueryNodeBuilder::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(StandardBooleanQueryNodeBuilder).tp_dict, "class_", make_descriptor(StandardBooleanQueryNodeBuilder::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(StandardBooleanQueryNodeBuilder).tp_dict, "wrapfn_", make_descriptor(t_StandardBooleanQueryNodeBuilder::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(StandardBooleanQueryNodeBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_StandardBooleanQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, StandardBooleanQueryNodeBuilder::initializeClass, 1)))
                  return NULL;
                return t_StandardBooleanQueryNodeBuilder::wrap_Object(StandardBooleanQueryNodeBuilder(((t_StandardBooleanQueryNodeBuilder *) arg)->object.this$));
              }
              static PyObject *t_StandardBooleanQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, StandardBooleanQueryNodeBuilder::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_StandardBooleanQueryNodeBuilder_init_(t_StandardBooleanQueryNodeBuilder *self, PyObject *args, PyObject *kwds)
              {
                StandardBooleanQueryNodeBuilder object((jobject) NULL);

                INT_CALL(object = StandardBooleanQueryNodeBuilder());
                self->object = object;

                return 0;
              }

              static PyObject *t_StandardBooleanQueryNodeBuilder_build(t_StandardBooleanQueryNodeBuilder *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::search::BooleanQuery result((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.build(a0));
                  return ::org::apache::lucene::search::t_BooleanQuery::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "build", arg);
                return NULL;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/SortedSetDocValuesField.h"
#include "org/apache/lucene/document/FieldType.h"
#include "java/lang/String.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *SortedSetDocValuesField::class$ = NULL;
        jmethodID *SortedSetDocValuesField::mids$ = NULL;
        bool SortedSetDocValuesField::live$ = false;
        ::org::apache::lucene::document::FieldType *SortedSetDocValuesField::TYPE = NULL;

        jclass SortedSetDocValuesField::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/SortedSetDocValuesField");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_43cce44e] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/util/BytesRef;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            TYPE = new ::org::apache::lucene::document::FieldType(env->getStaticObjectField(cls, "TYPE", "Lorg/apache/lucene/document/FieldType;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SortedSetDocValuesField::SortedSetDocValuesField(const ::java::lang::String & a0, const ::org::apache::lucene::util::BytesRef & a1) : ::org::apache::lucene::document::Field(env->newObject(initializeClass, &mids$, mid_init$_43cce44e, a0.this$, a1.this$)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_SortedSetDocValuesField_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SortedSetDocValuesField_instance_(PyTypeObject *type, PyObject *arg);
        static int t_SortedSetDocValuesField_init_(t_SortedSetDocValuesField *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_SortedSetDocValuesField__methods_[] = {
          DECLARE_METHOD(t_SortedSetDocValuesField, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SortedSetDocValuesField, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SortedSetDocValuesField, t_SortedSetDocValuesField, ::org::apache::lucene::document::Field, SortedSetDocValuesField, t_SortedSetDocValuesField_init_, 0, 0, 0, 0, 0);

        void t_SortedSetDocValuesField::install(PyObject *module)
        {
          installType(&PY_TYPE(SortedSetDocValuesField), module, "SortedSetDocValuesField", 0);
        }

        void t_SortedSetDocValuesField::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SortedSetDocValuesField).tp_dict, "class_", make_descriptor(SortedSetDocValuesField::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SortedSetDocValuesField).tp_dict, "wrapfn_", make_descriptor(t_SortedSetDocValuesField::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SortedSetDocValuesField).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(SortedSetDocValuesField::initializeClass);
          PyDict_SetItemString(PY_TYPE(SortedSetDocValuesField).tp_dict, "TYPE", make_descriptor(::org::apache::lucene::document::t_FieldType::wrap_Object(*SortedSetDocValuesField::TYPE)));
        }

        static PyObject *t_SortedSetDocValuesField_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SortedSetDocValuesField::initializeClass, 1)))
            return NULL;
          return t_SortedSetDocValuesField::wrap_Object(SortedSetDocValuesField(((t_SortedSetDocValuesField *) arg)->object.this$));
        }
        static PyObject *t_SortedSetDocValuesField_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SortedSetDocValuesField::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_SortedSetDocValuesField_init_(t_SortedSetDocValuesField *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
          SortedSetDocValuesField object((jobject) NULL);

          if (!parseArgs(args, "sk", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
          {
            INT_CALL(object = SortedSetDocValuesField(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/FilterAtomicReader.h"
#include "org/apache/lucene/index/StoredFieldVisitor.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/BinaryDocValues.h"
#include "org/apache/lucene/index/Fields.h"
#include "org/apache/lucene/util/Bits.h"
#include "org/apache/lucene/index/NumericDocValues.h"
#include "org/apache/lucene/index/SortedNumericDocValues.h"
#include "org/apache/lucene/index/SortedDocValues.h"
#include "org/apache/lucene/index/AtomicReader$CoreClosedListener.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/SortedSetDocValues.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *FilterAtomicReader::class$ = NULL;
        jmethodID *FilterAtomicReader::mids$ = NULL;
        bool FilterAtomicReader::live$ = false;

        jclass FilterAtomicReader::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/FilterAtomicReader");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_c9e29579] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/AtomicReader;)V");
            mids$[mid_addCoreClosedListener_cbc2818f] = env->getMethodID(cls, "addCoreClosedListener", "(Lorg/apache/lucene/index/AtomicReader$CoreClosedListener;)V");
            mids$[mid_checkIntegrity_54c6a166] = env->getMethodID(cls, "checkIntegrity", "()V");
            mids$[mid_document_a2ea3ebe] = env->getMethodID(cls, "document", "(ILorg/apache/lucene/index/StoredFieldVisitor;)V");
            mids$[mid_fields_77db581d] = env->getMethodID(cls, "fields", "()Lorg/apache/lucene/index/Fields;");
            mids$[mid_getBinaryDocValues_ecab96be] = env->getMethodID(cls, "getBinaryDocValues", "(Ljava/lang/String;)Lorg/apache/lucene/index/BinaryDocValues;");
            mids$[mid_getDocsWithField_e1c6a7db] = env->getMethodID(cls, "getDocsWithField", "(Ljava/lang/String;)Lorg/apache/lucene/util/Bits;");
            mids$[mid_getFieldInfos_9ba20825] = env->getMethodID(cls, "getFieldInfos", "()Lorg/apache/lucene/index/FieldInfos;");
            mids$[mid_getLiveDocs_03c2457d] = env->getMethodID(cls, "getLiveDocs", "()Lorg/apache/lucene/util/Bits;");
            mids$[mid_getNormValues_d2b19f49] = env->getMethodID(cls, "getNormValues", "(Ljava/lang/String;)Lorg/apache/lucene/index/NumericDocValues;");
            mids$[mid_getNumericDocValues_d2b19f49] = env->getMethodID(cls, "getNumericDocValues", "(Ljava/lang/String;)Lorg/apache/lucene/index/NumericDocValues;");
            mids$[mid_getSortedDocValues_7b8b1a0a] = env->getMethodID(cls, "getSortedDocValues", "(Ljava/lang/String;)Lorg/apache/lucene/index/SortedDocValues;");
            mids$[mid_getSortedNumericDocValues_37cd1812] = env->getMethodID(cls, "getSortedNumericDocValues", "(Ljava/lang/String;)Lorg/apache/lucene/index/SortedNumericDocValues;");
            mids$[mid_getSortedSetDocValues_43e0e807] = env->getMethodID(cls, "getSortedSetDocValues", "(Ljava/lang/String;)Lorg/apache/lucene/index/SortedSetDocValues;");
            mids$[mid_getTermVectors_ef1c9c73] = env->getMethodID(cls, "getTermVectors", "(I)Lorg/apache/lucene/index/Fields;");
            mids$[mid_maxDoc_54c6a179] = env->getMethodID(cls, "maxDoc", "()I");
            mids$[mid_numDocs_54c6a179] = env->getMethodID(cls, "numDocs", "()I");
            mids$[mid_removeCoreClosedListener_cbc2818f] = env->getMethodID(cls, "removeCoreClosedListener", "(Lorg/apache/lucene/index/AtomicReader$CoreClosedListener;)V");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
            mids$[mid_unwrap_3b1ad795] = env->getStaticMethodID(cls, "unwrap", "(Lorg/apache/lucene/index/AtomicReader;)Lorg/apache/lucene/index/AtomicReader;");
            mids$[mid_doClose_54c6a166] = env->getMethodID(cls, "doClose", "()V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FilterAtomicReader::FilterAtomicReader(const ::org::apache::lucene::index::AtomicReader & a0) : ::org::apache::lucene::index::AtomicReader(env->newObject(initializeClass, &mids$, mid_init$_c9e29579, a0.this$)) {}

        void FilterAtomicReader::addCoreClosedListener(const ::org::apache::lucene::index::AtomicReader$CoreClosedListener & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_addCoreClosedListener_cbc2818f], a0.this$);
        }

        void FilterAtomicReader::checkIntegrity() const
        {
          env->callVoidMethod(this$, mids$[mid_checkIntegrity_54c6a166]);
        }

        void FilterAtomicReader::document(jint a0, const ::org::apache::lucene::index::StoredFieldVisitor & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_document_a2ea3ebe], a0, a1.this$);
        }

        ::org::apache::lucene::index::Fields FilterAtomicReader::fields() const
        {
          return ::org::apache::lucene::index::Fields(env->callObjectMethod(this$, mids$[mid_fields_77db581d]));
        }

        ::org::apache::lucene::index::BinaryDocValues FilterAtomicReader::getBinaryDocValues(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::BinaryDocValues(env->callObjectMethod(this$, mids$[mid_getBinaryDocValues_ecab96be], a0.this$));
        }

        ::org::apache::lucene::util::Bits FilterAtomicReader::getDocsWithField(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::util::Bits(env->callObjectMethod(this$, mids$[mid_getDocsWithField_e1c6a7db], a0.this$));
        }

        ::org::apache::lucene::index::FieldInfos FilterAtomicReader::getFieldInfos() const
        {
          return ::org::apache::lucene::index::FieldInfos(env->callObjectMethod(this$, mids$[mid_getFieldInfos_9ba20825]));
        }

        ::org::apache::lucene::util::Bits FilterAtomicReader::getLiveDocs() const
        {
          return ::org::apache::lucene::util::Bits(env->callObjectMethod(this$, mids$[mid_getLiveDocs_03c2457d]));
        }

        ::org::apache::lucene::index::NumericDocValues FilterAtomicReader::getNormValues(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::NumericDocValues(env->callObjectMethod(this$, mids$[mid_getNormValues_d2b19f49], a0.this$));
        }

        ::org::apache::lucene::index::NumericDocValues FilterAtomicReader::getNumericDocValues(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::NumericDocValues(env->callObjectMethod(this$, mids$[mid_getNumericDocValues_d2b19f49], a0.this$));
        }

        ::org::apache::lucene::index::SortedDocValues FilterAtomicReader::getSortedDocValues(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::SortedDocValues(env->callObjectMethod(this$, mids$[mid_getSortedDocValues_7b8b1a0a], a0.this$));
        }

        ::org::apache::lucene::index::SortedNumericDocValues FilterAtomicReader::getSortedNumericDocValues(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::SortedNumericDocValues(env->callObjectMethod(this$, mids$[mid_getSortedNumericDocValues_37cd1812], a0.this$));
        }

        ::org::apache::lucene::index::SortedSetDocValues FilterAtomicReader::getSortedSetDocValues(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::SortedSetDocValues(env->callObjectMethod(this$, mids$[mid_getSortedSetDocValues_43e0e807], a0.this$));
        }

        ::org::apache::lucene::index::Fields FilterAtomicReader::getTermVectors(jint a0) const
        {
          return ::org::apache::lucene::index::Fields(env->callObjectMethod(this$, mids$[mid_getTermVectors_ef1c9c73], a0));
        }

        jint FilterAtomicReader::maxDoc() const
        {
          return env->callIntMethod(this$, mids$[mid_maxDoc_54c6a179]);
        }

        jint FilterAtomicReader::numDocs() const
        {
          return env->callIntMethod(this$, mids$[mid_numDocs_54c6a179]);
        }

        void FilterAtomicReader::removeCoreClosedListener(const ::org::apache::lucene::index::AtomicReader$CoreClosedListener & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_removeCoreClosedListener_cbc2818f], a0.this$);
        }

        ::java::lang::String FilterAtomicReader::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }

        ::org::apache::lucene::index::AtomicReader FilterAtomicReader::unwrap(const ::org::apache::lucene::index::AtomicReader & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::AtomicReader(env->callStaticObjectMethod(cls, mids$[mid_unwrap_3b1ad795], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/index/FilterAtomicReader$FilterDocsAndPositionsEnum.h"
#include "org/apache/lucene/index/FilterAtomicReader$FilterDocsEnum.h"
#include "org/apache/lucene/index/FilterAtomicReader$FilterTermsEnum.h"
#include "org/apache/lucene/index/FilterAtomicReader$FilterTerms.h"
#include "org/apache/lucene/index/FilterAtomicReader$FilterFields.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_FilterAtomicReader_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FilterAtomicReader_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FilterAtomicReader_init_(t_FilterAtomicReader *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FilterAtomicReader_addCoreClosedListener(t_FilterAtomicReader *self, PyObject *args);
        static PyObject *t_FilterAtomicReader_checkIntegrity(t_FilterAtomicReader *self, PyObject *args);
        static PyObject *t_FilterAtomicReader_document(t_FilterAtomicReader *self, PyObject *args);
        static PyObject *t_FilterAtomicReader_fields(t_FilterAtomicReader *self, PyObject *args);
        static PyObject *t_FilterAtomicReader_getBinaryDocValues(t_FilterAtomicReader *self, PyObject *args);
        static PyObject *t_FilterAtomicReader_getDocsWithField(t_FilterAtomicReader *self, PyObject *args);
        static PyObject *t_FilterAtomicReader_getFieldInfos(t_FilterAtomicReader *self, PyObject *args);
        static PyObject *t_FilterAtomicReader_getLiveDocs(t_FilterAtomicReader *self, PyObject *args);
        static PyObject *t_FilterAtomicReader_getNormValues(t_FilterAtomicReader *self, PyObject *args);
        static PyObject *t_FilterAtomicReader_getNumericDocValues(t_FilterAtomicReader *self, PyObject *args);
        static PyObject *t_FilterAtomicReader_getSortedDocValues(t_FilterAtomicReader *self, PyObject *args);
        static PyObject *t_FilterAtomicReader_getSortedNumericDocValues(t_FilterAtomicReader *self, PyObject *args);
        static PyObject *t_FilterAtomicReader_getSortedSetDocValues(t_FilterAtomicReader *self, PyObject *args);
        static PyObject *t_FilterAtomicReader_getTermVectors(t_FilterAtomicReader *self, PyObject *args);
        static PyObject *t_FilterAtomicReader_maxDoc(t_FilterAtomicReader *self, PyObject *args);
        static PyObject *t_FilterAtomicReader_numDocs(t_FilterAtomicReader *self, PyObject *args);
        static PyObject *t_FilterAtomicReader_removeCoreClosedListener(t_FilterAtomicReader *self, PyObject *args);
        static PyObject *t_FilterAtomicReader_toString(t_FilterAtomicReader *self, PyObject *args);
        static PyObject *t_FilterAtomicReader_unwrap(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FilterAtomicReader_get__fieldInfos(t_FilterAtomicReader *self, void *data);
        static PyObject *t_FilterAtomicReader_get__liveDocs(t_FilterAtomicReader *self, void *data);
        static PyGetSetDef t_FilterAtomicReader__fields_[] = {
          DECLARE_GET_FIELD(t_FilterAtomicReader, fieldInfos),
          DECLARE_GET_FIELD(t_FilterAtomicReader, liveDocs),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FilterAtomicReader__methods_[] = {
          DECLARE_METHOD(t_FilterAtomicReader, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilterAtomicReader, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilterAtomicReader, addCoreClosedListener, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader, checkIntegrity, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader, document, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader, fields, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader, getBinaryDocValues, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader, getDocsWithField, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader, getFieldInfos, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader, getLiveDocs, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader, getNormValues, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader, getNumericDocValues, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader, getSortedDocValues, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader, getSortedNumericDocValues, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader, getSortedSetDocValues, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader, getTermVectors, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader, maxDoc, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader, numDocs, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader, removeCoreClosedListener, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader, toString, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader, unwrap, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FilterAtomicReader, t_FilterAtomicReader, ::org::apache::lucene::index::AtomicReader, FilterAtomicReader, t_FilterAtomicReader_init_, 0, 0, t_FilterAtomicReader__fields_, 0, 0);

        void t_FilterAtomicReader::install(PyObject *module)
        {
          installType(&PY_TYPE(FilterAtomicReader), module, "FilterAtomicReader", 0);
          PyDict_SetItemString(PY_TYPE(FilterAtomicReader).tp_dict, "FilterDocsAndPositionsEnum", make_descriptor(&PY_TYPE(FilterAtomicReader$FilterDocsAndPositionsEnum)));
          PyDict_SetItemString(PY_TYPE(FilterAtomicReader).tp_dict, "FilterDocsEnum", make_descriptor(&PY_TYPE(FilterAtomicReader$FilterDocsEnum)));
          PyDict_SetItemString(PY_TYPE(FilterAtomicReader).tp_dict, "FilterTermsEnum", make_descriptor(&PY_TYPE(FilterAtomicReader$FilterTermsEnum)));
          PyDict_SetItemString(PY_TYPE(FilterAtomicReader).tp_dict, "FilterTerms", make_descriptor(&PY_TYPE(FilterAtomicReader$FilterTerms)));
          PyDict_SetItemString(PY_TYPE(FilterAtomicReader).tp_dict, "FilterFields", make_descriptor(&PY_TYPE(FilterAtomicReader$FilterFields)));
        }

        void t_FilterAtomicReader::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FilterAtomicReader).tp_dict, "class_", make_descriptor(FilterAtomicReader::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FilterAtomicReader).tp_dict, "wrapfn_", make_descriptor(t_FilterAtomicReader::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FilterAtomicReader).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FilterAtomicReader_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FilterAtomicReader::initializeClass, 1)))
            return NULL;
          return t_FilterAtomicReader::wrap_Object(FilterAtomicReader(((t_FilterAtomicReader *) arg)->object.this$));
        }
        static PyObject *t_FilterAtomicReader_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FilterAtomicReader::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FilterAtomicReader_init_(t_FilterAtomicReader *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);
          FilterAtomicReader object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReader::initializeClass, &a0))
          {
            INT_CALL(object = FilterAtomicReader(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FilterAtomicReader_addCoreClosedListener(t_FilterAtomicReader *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReader$CoreClosedListener a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReader$CoreClosedListener::initializeClass, &a0))
          {
            OBJ_CALL(self->object.addCoreClosedListener(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FilterAtomicReader), (PyObject *) self, "addCoreClosedListener", args, 2);
        }

        static PyObject *t_FilterAtomicReader_checkIntegrity(t_FilterAtomicReader *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.checkIntegrity());
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FilterAtomicReader), (PyObject *) self, "checkIntegrity", args, 2);
        }

        static PyObject *t_FilterAtomicReader_document(t_FilterAtomicReader *self, PyObject *args)
        {
          jint a0;
          ::org::apache::lucene::index::StoredFieldVisitor a1((jobject) NULL);

          if (!parseArgs(args, "Ik", ::org::apache::lucene::index::StoredFieldVisitor::initializeClass, &a0, &a1))
          {
            OBJ_CALL(self->object.document(a0, a1));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FilterAtomicReader), (PyObject *) self, "document", args, 2);
        }

        static PyObject *t_FilterAtomicReader_fields(t_FilterAtomicReader *self, PyObject *args)
        {
          ::org::apache::lucene::index::Fields result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.fields());
            return ::org::apache::lucene::index::t_Fields::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader), (PyObject *) self, "fields", args, 2);
        }

        static PyObject *t_FilterAtomicReader_getBinaryDocValues(t_FilterAtomicReader *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::BinaryDocValues result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getBinaryDocValues(a0));
            return ::org::apache::lucene::index::t_BinaryDocValues::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader), (PyObject *) self, "getBinaryDocValues", args, 2);
        }

        static PyObject *t_FilterAtomicReader_getDocsWithField(t_FilterAtomicReader *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::util::Bits result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getDocsWithField(a0));
            return ::org::apache::lucene::util::t_Bits::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader), (PyObject *) self, "getDocsWithField", args, 2);
        }

        static PyObject *t_FilterAtomicReader_getFieldInfos(t_FilterAtomicReader *self, PyObject *args)
        {
          ::org::apache::lucene::index::FieldInfos result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getFieldInfos());
            return ::org::apache::lucene::index::t_FieldInfos::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader), (PyObject *) self, "getFieldInfos", args, 2);
        }

        static PyObject *t_FilterAtomicReader_getLiveDocs(t_FilterAtomicReader *self, PyObject *args)
        {
          ::org::apache::lucene::util::Bits result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getLiveDocs());
            return ::org::apache::lucene::util::t_Bits::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader), (PyObject *) self, "getLiveDocs", args, 2);
        }

        static PyObject *t_FilterAtomicReader_getNormValues(t_FilterAtomicReader *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::NumericDocValues result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getNormValues(a0));
            return ::org::apache::lucene::index::t_NumericDocValues::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader), (PyObject *) self, "getNormValues", args, 2);
        }

        static PyObject *t_FilterAtomicReader_getNumericDocValues(t_FilterAtomicReader *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::NumericDocValues result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getNumericDocValues(a0));
            return ::org::apache::lucene::index::t_NumericDocValues::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader), (PyObject *) self, "getNumericDocValues", args, 2);
        }

        static PyObject *t_FilterAtomicReader_getSortedDocValues(t_FilterAtomicReader *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::SortedDocValues result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getSortedDocValues(a0));
            return ::org::apache::lucene::index::t_SortedDocValues::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader), (PyObject *) self, "getSortedDocValues", args, 2);
        }

        static PyObject *t_FilterAtomicReader_getSortedNumericDocValues(t_FilterAtomicReader *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::SortedNumericDocValues result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getSortedNumericDocValues(a0));
            return ::org::apache::lucene::index::t_SortedNumericDocValues::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader), (PyObject *) self, "getSortedNumericDocValues", args, 2);
        }

        static PyObject *t_FilterAtomicReader_getSortedSetDocValues(t_FilterAtomicReader *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::SortedSetDocValues result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getSortedSetDocValues(a0));
            return ::org::apache::lucene::index::t_SortedSetDocValues::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader), (PyObject *) self, "getSortedSetDocValues", args, 2);
        }

        static PyObject *t_FilterAtomicReader_getTermVectors(t_FilterAtomicReader *self, PyObject *args)
        {
          jint a0;
          ::org::apache::lucene::index::Fields result((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.getTermVectors(a0));
            return ::org::apache::lucene::index::t_Fields::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader), (PyObject *) self, "getTermVectors", args, 2);
        }

        static PyObject *t_FilterAtomicReader_maxDoc(t_FilterAtomicReader *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.maxDoc());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader), (PyObject *) self, "maxDoc", args, 2);
        }

        static PyObject *t_FilterAtomicReader_numDocs(t_FilterAtomicReader *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.numDocs());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader), (PyObject *) self, "numDocs", args, 2);
        }

        static PyObject *t_FilterAtomicReader_removeCoreClosedListener(t_FilterAtomicReader *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReader$CoreClosedListener a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReader$CoreClosedListener::initializeClass, &a0))
          {
            OBJ_CALL(self->object.removeCoreClosedListener(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FilterAtomicReader), (PyObject *) self, "removeCoreClosedListener", args, 2);
        }

        static PyObject *t_FilterAtomicReader_toString(t_FilterAtomicReader *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_FilterAtomicReader_unwrap(PyTypeObject *type, PyObject *arg)
        {
          ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);
          ::org::apache::lucene::index::AtomicReader result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReader::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::FilterAtomicReader::unwrap(a0));
            return ::org::apache::lucene::index::t_AtomicReader::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "unwrap", arg);
          return NULL;
        }

        static PyObject *t_FilterAtomicReader_get__fieldInfos(t_FilterAtomicReader *self, void *data)
        {
          ::org::apache::lucene::index::FieldInfos value((jobject) NULL);
          OBJ_CALL(value = self->object.getFieldInfos());
          return ::org::apache::lucene::index::t_FieldInfos::wrap_Object(value);
        }

        static PyObject *t_FilterAtomicReader_get__liveDocs(t_FilterAtomicReader *self, void *data)
        {
          ::org::apache::lucene::util::Bits value((jobject) NULL);
          OBJ_CALL(value = self->object.getLiveDocs());
          return ::org::apache::lucene::util::t_Bits::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/standard/UAX29URLEmailAnalyzer.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "java/io/IOException.h"
#include "java/io/Reader.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {

          ::java::lang::Class *UAX29URLEmailAnalyzer::class$ = NULL;
          jmethodID *UAX29URLEmailAnalyzer::mids$ = NULL;
          bool UAX29URLEmailAnalyzer::live$ = false;
          jint UAX29URLEmailAnalyzer::DEFAULT_MAX_TOKEN_LENGTH = (jint) 0;
          ::org::apache::lucene::analysis::util::CharArraySet *UAX29URLEmailAnalyzer::STOP_WORDS_SET = NULL;

          jclass UAX29URLEmailAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/standard/UAX29URLEmailAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_cf2e3c10] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;)V");
              mids$[mid_init$_0d96cf33] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;)V");
              mids$[mid_init$_6d1f9881] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_7997a391] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Ljava/io/Reader;)V");
              mids$[mid_init$_83eafe28] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_getMaxTokenLength_54c6a179] = env->getMethodID(cls, "getMaxTokenLength", "()I");
              mids$[mid_setMaxTokenLength_39c7bd3c] = env->getMethodID(cls, "setMaxTokenLength", "(I)V");
              mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_MAX_TOKEN_LENGTH = env->getStaticIntField(cls, "DEFAULT_MAX_TOKEN_LENGTH");
              STOP_WORDS_SET = new ::org::apache::lucene::analysis::util::CharArraySet(env->getStaticObjectField(cls, "STOP_WORDS_SET", "Lorg/apache/lucene/analysis/util/CharArraySet;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          UAX29URLEmailAnalyzer::UAX29URLEmailAnalyzer() : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          UAX29URLEmailAnalyzer::UAX29URLEmailAnalyzer(const ::java::io::Reader & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_cf2e3c10, a0.this$)) {}

          UAX29URLEmailAnalyzer::UAX29URLEmailAnalyzer(const ::org::apache::lucene::util::Version & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_0d96cf33, a0.this$)) {}

          UAX29URLEmailAnalyzer::UAX29URLEmailAnalyzer(const ::org::apache::lucene::analysis::util::CharArraySet & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_6d1f9881, a0.this$)) {}

          UAX29URLEmailAnalyzer::UAX29URLEmailAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::java::io::Reader & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_7997a391, a0.this$, a1.this$)) {}

          UAX29URLEmailAnalyzer::UAX29URLEmailAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_83eafe28, a0.this$, a1.this$)) {}

          jint UAX29URLEmailAnalyzer::getMaxTokenLength() const
          {
            return env->callIntMethod(this$, mids$[mid_getMaxTokenLength_54c6a179]);
          }

          void UAX29URLEmailAnalyzer::setMaxTokenLength(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMaxTokenLength_39c7bd3c], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {
          static PyObject *t_UAX29URLEmailAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_UAX29URLEmailAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_UAX29URLEmailAnalyzer_init_(t_UAX29URLEmailAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_UAX29URLEmailAnalyzer_getMaxTokenLength(t_UAX29URLEmailAnalyzer *self);
          static PyObject *t_UAX29URLEmailAnalyzer_setMaxTokenLength(t_UAX29URLEmailAnalyzer *self, PyObject *arg);
          static PyObject *t_UAX29URLEmailAnalyzer_get__maxTokenLength(t_UAX29URLEmailAnalyzer *self, void *data);
          static int t_UAX29URLEmailAnalyzer_set__maxTokenLength(t_UAX29URLEmailAnalyzer *self, PyObject *arg, void *data);
          static PyGetSetDef t_UAX29URLEmailAnalyzer__fields_[] = {
            DECLARE_GETSET_FIELD(t_UAX29URLEmailAnalyzer, maxTokenLength),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_UAX29URLEmailAnalyzer__methods_[] = {
            DECLARE_METHOD(t_UAX29URLEmailAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_UAX29URLEmailAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_UAX29URLEmailAnalyzer, getMaxTokenLength, METH_NOARGS),
            DECLARE_METHOD(t_UAX29URLEmailAnalyzer, setMaxTokenLength, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(UAX29URLEmailAnalyzer, t_UAX29URLEmailAnalyzer, ::org::apache::lucene::analysis::util::StopwordAnalyzerBase, UAX29URLEmailAnalyzer, t_UAX29URLEmailAnalyzer_init_, 0, 0, t_UAX29URLEmailAnalyzer__fields_, 0, 0);

          void t_UAX29URLEmailAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(UAX29URLEmailAnalyzer), module, "UAX29URLEmailAnalyzer", 0);
          }

          void t_UAX29URLEmailAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(UAX29URLEmailAnalyzer).tp_dict, "class_", make_descriptor(UAX29URLEmailAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(UAX29URLEmailAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_UAX29URLEmailAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(UAX29URLEmailAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(UAX29URLEmailAnalyzer::initializeClass);
            PyDict_SetItemString(PY_TYPE(UAX29URLEmailAnalyzer).tp_dict, "DEFAULT_MAX_TOKEN_LENGTH", make_descriptor(UAX29URLEmailAnalyzer::DEFAULT_MAX_TOKEN_LENGTH));
            PyDict_SetItemString(PY_TYPE(UAX29URLEmailAnalyzer).tp_dict, "STOP_WORDS_SET", make_descriptor(::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(*UAX29URLEmailAnalyzer::STOP_WORDS_SET)));
          }

          static PyObject *t_UAX29URLEmailAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, UAX29URLEmailAnalyzer::initializeClass, 1)))
              return NULL;
            return t_UAX29URLEmailAnalyzer::wrap_Object(UAX29URLEmailAnalyzer(((t_UAX29URLEmailAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_UAX29URLEmailAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, UAX29URLEmailAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_UAX29URLEmailAnalyzer_init_(t_UAX29URLEmailAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                UAX29URLEmailAnalyzer object((jobject) NULL);

                INT_CALL(object = UAX29URLEmailAnalyzer());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                ::java::io::Reader a0((jobject) NULL);
                UAX29URLEmailAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
                {
                  INT_CALL(object = UAX29URLEmailAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                UAX29URLEmailAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::util::Version::initializeClass, &a0))
                {
                  INT_CALL(object = UAX29URLEmailAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::analysis::util::CharArraySet a0((jobject) NULL);
                PyTypeObject **p0;
                UAX29URLEmailAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = UAX29URLEmailAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                ::java::io::Reader a1((jobject) NULL);
                UAX29URLEmailAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::util::Version::initializeClass, ::java::io::Reader::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = UAX29URLEmailAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                UAX29URLEmailAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "kK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = UAX29URLEmailAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_UAX29URLEmailAnalyzer_getMaxTokenLength(t_UAX29URLEmailAnalyzer *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getMaxTokenLength());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_UAX29URLEmailAnalyzer_setMaxTokenLength(t_UAX29URLEmailAnalyzer *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setMaxTokenLength(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMaxTokenLength", arg);
            return NULL;
          }

          static PyObject *t_UAX29URLEmailAnalyzer_get__maxTokenLength(t_UAX29URLEmailAnalyzer *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getMaxTokenLength());
            return PyInt_FromLong((long) value);
          }
          static int t_UAX29URLEmailAnalyzer_set__maxTokenLength(t_UAX29URLEmailAnalyzer *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setMaxTokenLength(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "maxTokenLength", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/fst/Util$TopNSearcher.h"
#include "org/apache/lucene/util/fst/FST$Arc.h"
#include "org/apache/lucene/util/fst/Util$TopResults.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/IntsRefBuilder.h"
#include "java/util/Comparator.h"
#include "org/apache/lucene/util/fst/FST.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {

          ::java::lang::Class *Util$TopNSearcher::class$ = NULL;
          jmethodID *Util$TopNSearcher::mids$ = NULL;
          bool Util$TopNSearcher::live$ = false;

          jclass Util$TopNSearcher::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/fst/Util$TopNSearcher");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_95a8ae3f] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/fst/FST;IILjava/util/Comparator;)V");
              mids$[mid_addStartPaths_27f324ad] = env->getMethodID(cls, "addStartPaths", "(Lorg/apache/lucene/util/fst/FST$Arc;Ljava/lang/Object;ZLorg/apache/lucene/util/IntsRefBuilder;)V");
              mids$[mid_search_c06b4353] = env->getMethodID(cls, "search", "()Lorg/apache/lucene/util/fst/Util$TopResults;");
              mids$[mid_addIfCompetitive_175f8fc8] = env->getMethodID(cls, "addIfCompetitive", "(Lorg/apache/lucene/util/fst/Util$FSTPath;)V");
              mids$[mid_acceptResult_5219743c] = env->getMethodID(cls, "acceptResult", "(Lorg/apache/lucene/util/IntsRef;Ljava/lang/Object;)Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Util$TopNSearcher::Util$TopNSearcher(const ::org::apache::lucene::util::fst::FST & a0, jint a1, jint a2, const ::java::util::Comparator & a3) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_95a8ae3f, a0.this$, a1, a2, a3.this$)) {}

          void Util$TopNSearcher::addStartPaths(const ::org::apache::lucene::util::fst::FST$Arc & a0, const ::java::lang::Object & a1, jboolean a2, const ::org::apache::lucene::util::IntsRefBuilder & a3) const
          {
            env->callVoidMethod(this$, mids$[mid_addStartPaths_27f324ad], a0.this$, a1.this$, a2, a3.this$);
          }

          ::org::apache::lucene::util::fst::Util$TopResults Util$TopNSearcher::search() const
          {
            return ::org::apache::lucene::util::fst::Util$TopResults(env->callObjectMethod(this$, mids$[mid_search_c06b4353]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {
          static PyObject *t_Util$TopNSearcher_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Util$TopNSearcher_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Util$TopNSearcher_of_(t_Util$TopNSearcher *self, PyObject *args);
          static int t_Util$TopNSearcher_init_(t_Util$TopNSearcher *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Util$TopNSearcher_addStartPaths(t_Util$TopNSearcher *self, PyObject *args);
          static PyObject *t_Util$TopNSearcher_search(t_Util$TopNSearcher *self);
          static PyObject *t_Util$TopNSearcher_get__parameters_(t_Util$TopNSearcher *self, void *data);
          static PyGetSetDef t_Util$TopNSearcher__fields_[] = {
            DECLARE_GET_FIELD(t_Util$TopNSearcher, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Util$TopNSearcher__methods_[] = {
            DECLARE_METHOD(t_Util$TopNSearcher, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Util$TopNSearcher, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Util$TopNSearcher, of_, METH_VARARGS),
            DECLARE_METHOD(t_Util$TopNSearcher, addStartPaths, METH_VARARGS),
            DECLARE_METHOD(t_Util$TopNSearcher, search, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Util$TopNSearcher, t_Util$TopNSearcher, ::java::lang::Object, Util$TopNSearcher, t_Util$TopNSearcher_init_, 0, 0, t_Util$TopNSearcher__fields_, 0, 0);
          PyObject *t_Util$TopNSearcher::wrap_Object(const Util$TopNSearcher& object, PyTypeObject *p0)
          {
            PyObject *obj = t_Util$TopNSearcher::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_Util$TopNSearcher *self = (t_Util$TopNSearcher *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_Util$TopNSearcher::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_Util$TopNSearcher::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_Util$TopNSearcher *self = (t_Util$TopNSearcher *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_Util$TopNSearcher::install(PyObject *module)
          {
            installType(&PY_TYPE(Util$TopNSearcher), module, "Util$TopNSearcher", 0);
          }

          void t_Util$TopNSearcher::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Util$TopNSearcher).tp_dict, "class_", make_descriptor(Util$TopNSearcher::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Util$TopNSearcher).tp_dict, "wrapfn_", make_descriptor(t_Util$TopNSearcher::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Util$TopNSearcher).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Util$TopNSearcher_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Util$TopNSearcher::initializeClass, 1)))
              return NULL;
            return t_Util$TopNSearcher::wrap_Object(Util$TopNSearcher(((t_Util$TopNSearcher *) arg)->object.this$));
          }
          static PyObject *t_Util$TopNSearcher_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Util$TopNSearcher::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_Util$TopNSearcher_of_(t_Util$TopNSearcher *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_Util$TopNSearcher_init_(t_Util$TopNSearcher *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::util::fst::FST a0((jobject) NULL);
            PyTypeObject **p0;
            jint a1;
            jint a2;
            ::java::util::Comparator a3((jobject) NULL);
            PyTypeObject **p3;
            Util$TopNSearcher object((jobject) NULL);

            if (!parseArgs(args, "KIIK", ::org::apache::lucene::util::fst::FST::initializeClass, ::java::util::Comparator::initializeClass, &a0, &p0, ::org::apache::lucene::util::fst::t_FST::parameters_, &a1, &a2, &a3, &p3, ::java::util::t_Comparator::parameters_))
            {
              INT_CALL(object = Util$TopNSearcher(a0, a1, a2, a3));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_Util$TopNSearcher_addStartPaths(t_Util$TopNSearcher *self, PyObject *args)
          {
            ::org::apache::lucene::util::fst::FST$Arc a0((jobject) NULL);
            PyTypeObject **p0;
            ::java::lang::Object a1((jobject) NULL);
            jboolean a2;
            ::org::apache::lucene::util::IntsRefBuilder a3((jobject) NULL);

            if (!parseArgs(args, "KOZk", ::org::apache::lucene::util::fst::FST$Arc::initializeClass, self->parameters[0], ::org::apache::lucene::util::IntsRefBuilder::initializeClass, &a0, &p0, ::org::apache::lucene::util::fst::t_FST$Arc::parameters_, &a1, &a2, &a3))
            {
              OBJ_CALL(self->object.addStartPaths(a0, a1, a2, a3));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "addStartPaths", args);
            return NULL;
          }

          static PyObject *t_Util$TopNSearcher_search(t_Util$TopNSearcher *self)
          {
            ::org::apache::lucene::util::fst::Util$TopResults result((jobject) NULL);
            OBJ_CALL(result = self->object.search());
            return ::org::apache::lucene::util::fst::t_Util$TopResults::wrap_Object(result, self->parameters[0]);
          }
          static PyObject *t_Util$TopNSearcher_get__parameters_(t_Util$TopNSearcher *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/OpenBitSetDISI.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/DocIdSetIterator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *OpenBitSetDISI::class$ = NULL;
        jmethodID *OpenBitSetDISI::mids$ = NULL;
        bool OpenBitSetDISI::live$ = false;

        jclass OpenBitSetDISI::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/OpenBitSetDISI");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
            mids$[mid_init$_3742065d] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/DocIdSetIterator;I)V");
            mids$[mid_inPlaceAnd_c2b5607d] = env->getMethodID(cls, "inPlaceAnd", "(Lorg/apache/lucene/search/DocIdSetIterator;)V");
            mids$[mid_inPlaceNot_c2b5607d] = env->getMethodID(cls, "inPlaceNot", "(Lorg/apache/lucene/search/DocIdSetIterator;)V");
            mids$[mid_inPlaceOr_c2b5607d] = env->getMethodID(cls, "inPlaceOr", "(Lorg/apache/lucene/search/DocIdSetIterator;)V");
            mids$[mid_inPlaceXor_c2b5607d] = env->getMethodID(cls, "inPlaceXor", "(Lorg/apache/lucene/search/DocIdSetIterator;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        OpenBitSetDISI::OpenBitSetDISI(jint a0) : ::org::apache::lucene::util::OpenBitSet(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

        OpenBitSetDISI::OpenBitSetDISI(const ::org::apache::lucene::search::DocIdSetIterator & a0, jint a1) : ::org::apache::lucene::util::OpenBitSet(env->newObject(initializeClass, &mids$, mid_init$_3742065d, a0.this$, a1)) {}

        void OpenBitSetDISI::inPlaceAnd(const ::org::apache::lucene::search::DocIdSetIterator & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_inPlaceAnd_c2b5607d], a0.this$);
        }

        void OpenBitSetDISI::inPlaceNot(const ::org::apache::lucene::search::DocIdSetIterator & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_inPlaceNot_c2b5607d], a0.this$);
        }

        void OpenBitSetDISI::inPlaceOr(const ::org::apache::lucene::search::DocIdSetIterator & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_inPlaceOr_c2b5607d], a0.this$);
        }

        void OpenBitSetDISI::inPlaceXor(const ::org::apache::lucene::search::DocIdSetIterator & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_inPlaceXor_c2b5607d], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_OpenBitSetDISI_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_OpenBitSetDISI_instance_(PyTypeObject *type, PyObject *arg);
        static int t_OpenBitSetDISI_init_(t_OpenBitSetDISI *self, PyObject *args, PyObject *kwds);
        static PyObject *t_OpenBitSetDISI_inPlaceAnd(t_OpenBitSetDISI *self, PyObject *arg);
        static PyObject *t_OpenBitSetDISI_inPlaceNot(t_OpenBitSetDISI *self, PyObject *arg);
        static PyObject *t_OpenBitSetDISI_inPlaceOr(t_OpenBitSetDISI *self, PyObject *arg);
        static PyObject *t_OpenBitSetDISI_inPlaceXor(t_OpenBitSetDISI *self, PyObject *arg);

        static PyMethodDef t_OpenBitSetDISI__methods_[] = {
          DECLARE_METHOD(t_OpenBitSetDISI, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_OpenBitSetDISI, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_OpenBitSetDISI, inPlaceAnd, METH_O),
          DECLARE_METHOD(t_OpenBitSetDISI, inPlaceNot, METH_O),
          DECLARE_METHOD(t_OpenBitSetDISI, inPlaceOr, METH_O),
          DECLARE_METHOD(t_OpenBitSetDISI, inPlaceXor, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(OpenBitSetDISI, t_OpenBitSetDISI, ::org::apache::lucene::util::OpenBitSet, OpenBitSetDISI, t_OpenBitSetDISI_init_, 0, 0, 0, 0, 0);

        void t_OpenBitSetDISI::install(PyObject *module)
        {
          installType(&PY_TYPE(OpenBitSetDISI), module, "OpenBitSetDISI", 0);
        }

        void t_OpenBitSetDISI::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(OpenBitSetDISI).tp_dict, "class_", make_descriptor(OpenBitSetDISI::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(OpenBitSetDISI).tp_dict, "wrapfn_", make_descriptor(t_OpenBitSetDISI::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(OpenBitSetDISI).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_OpenBitSetDISI_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, OpenBitSetDISI::initializeClass, 1)))
            return NULL;
          return t_OpenBitSetDISI::wrap_Object(OpenBitSetDISI(((t_OpenBitSetDISI *) arg)->object.this$));
        }
        static PyObject *t_OpenBitSetDISI_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, OpenBitSetDISI::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_OpenBitSetDISI_init_(t_OpenBitSetDISI *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jint a0;
              OpenBitSetDISI object((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                INT_CALL(object = OpenBitSetDISI(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              ::org::apache::lucene::search::DocIdSetIterator a0((jobject) NULL);
              jint a1;
              OpenBitSetDISI object((jobject) NULL);

              if (!parseArgs(args, "kI", ::org::apache::lucene::search::DocIdSetIterator::initializeClass, &a0, &a1))
              {
                INT_CALL(object = OpenBitSetDISI(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_OpenBitSetDISI_inPlaceAnd(t_OpenBitSetDISI *self, PyObject *arg)
        {
          ::org::apache::lucene::search::DocIdSetIterator a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::search::DocIdSetIterator::initializeClass, &a0))
          {
            OBJ_CALL(self->object.inPlaceAnd(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "inPlaceAnd", arg);
          return NULL;
        }

        static PyObject *t_OpenBitSetDISI_inPlaceNot(t_OpenBitSetDISI *self, PyObject *arg)
        {
          ::org::apache::lucene::search::DocIdSetIterator a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::search::DocIdSetIterator::initializeClass, &a0))
          {
            OBJ_CALL(self->object.inPlaceNot(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "inPlaceNot", arg);
          return NULL;
        }

        static PyObject *t_OpenBitSetDISI_inPlaceOr(t_OpenBitSetDISI *self, PyObject *arg)
        {
          ::org::apache::lucene::search::DocIdSetIterator a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::search::DocIdSetIterator::initializeClass, &a0))
          {
            OBJ_CALL(self->object.inPlaceOr(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "inPlaceOr", arg);
          return NULL;
        }

        static PyObject *t_OpenBitSetDISI_inPlaceXor(t_OpenBitSetDISI *self, PyObject *arg)
        {
          ::org::apache::lucene::search::DocIdSetIterator a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::search::DocIdSetIterator::initializeClass, &a0))
          {
            OBJ_CALL(self->object.inPlaceXor(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "inPlaceXor", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/OfflineSorter$SortInfo.h"
#include "org/apache/lucene/util/OfflineSorter.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *OfflineSorter$SortInfo::class$ = NULL;
        jmethodID *OfflineSorter$SortInfo::mids$ = NULL;
        jfieldID *OfflineSorter$SortInfo::fids$ = NULL;
        bool OfflineSorter$SortInfo::live$ = false;

        jclass OfflineSorter$SortInfo::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/OfflineSorter$SortInfo");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_6859decd] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/OfflineSorter;)V");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            fids$ = new jfieldID[max_fid];
            fids$[fid_bufferSize] = env->getFieldID(cls, "bufferSize", "J");
            fids$[fid_lines] = env->getFieldID(cls, "lines", "I");
            fids$[fid_mergeRounds] = env->getFieldID(cls, "mergeRounds", "I");
            fids$[fid_mergeTime] = env->getFieldID(cls, "mergeTime", "J");
            fids$[fid_readTime] = env->getFieldID(cls, "readTime", "J");
            fids$[fid_sortTime] = env->getFieldID(cls, "sortTime", "J");
            fids$[fid_tempMergeFiles] = env->getFieldID(cls, "tempMergeFiles", "I");
            fids$[fid_totalTime] = env->getFieldID(cls, "totalTime", "J");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        OfflineSorter$SortInfo::OfflineSorter$SortInfo(const ::org::apache::lucene::util::OfflineSorter & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_6859decd, a0.this$)) {}

        ::java::lang::String OfflineSorter$SortInfo::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }

        jlong OfflineSorter$SortInfo::_get_bufferSize() const
        {
          return env->getLongField(this$, fids$[fid_bufferSize]);
        }

        jint OfflineSorter$SortInfo::_get_lines() const
        {
          return env->getIntField(this$, fids$[fid_lines]);
        }

        void OfflineSorter$SortInfo::_set_lines(jint a0) const
        {
          env->setIntField(this$, fids$[fid_lines], a0);
        }

        jint OfflineSorter$SortInfo::_get_mergeRounds() const
        {
          return env->getIntField(this$, fids$[fid_mergeRounds]);
        }

        void OfflineSorter$SortInfo::_set_mergeRounds(jint a0) const
        {
          env->setIntField(this$, fids$[fid_mergeRounds], a0);
        }

        jlong OfflineSorter$SortInfo::_get_mergeTime() const
        {
          return env->getLongField(this$, fids$[fid_mergeTime]);
        }

        void OfflineSorter$SortInfo::_set_mergeTime(jlong a0) const
        {
          env->setLongField(this$, fids$[fid_mergeTime], a0);
        }

        jlong OfflineSorter$SortInfo::_get_readTime() const
        {
          return env->getLongField(this$, fids$[fid_readTime]);
        }

        void OfflineSorter$SortInfo::_set_readTime(jlong a0) const
        {
          env->setLongField(this$, fids$[fid_readTime], a0);
        }

        jlong OfflineSorter$SortInfo::_get_sortTime() const
        {
          return env->getLongField(this$, fids$[fid_sortTime]);
        }

        void OfflineSorter$SortInfo::_set_sortTime(jlong a0) const
        {
          env->setLongField(this$, fids$[fid_sortTime], a0);
        }

        jint OfflineSorter$SortInfo::_get_tempMergeFiles() const
        {
          return env->getIntField(this$, fids$[fid_tempMergeFiles]);
        }

        void OfflineSorter$SortInfo::_set_tempMergeFiles(jint a0) const
        {
          env->setIntField(this$, fids$[fid_tempMergeFiles], a0);
        }

        jlong OfflineSorter$SortInfo::_get_totalTime() const
        {
          return env->getLongField(this$, fids$[fid_totalTime]);
        }

        void OfflineSorter$SortInfo::_set_totalTime(jlong a0) const
        {
          env->setLongField(this$, fids$[fid_totalTime], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_OfflineSorter$SortInfo_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_OfflineSorter$SortInfo_instance_(PyTypeObject *type, PyObject *arg);
        static int t_OfflineSorter$SortInfo_init_(t_OfflineSorter$SortInfo *self, PyObject *args, PyObject *kwds);
        static PyObject *t_OfflineSorter$SortInfo_toString(t_OfflineSorter$SortInfo *self, PyObject *args);
        static PyObject *t_OfflineSorter$SortInfo_get__bufferSize(t_OfflineSorter$SortInfo *self, void *data);
        static PyObject *t_OfflineSorter$SortInfo_get__lines(t_OfflineSorter$SortInfo *self, void *data);
        static int t_OfflineSorter$SortInfo_set__lines(t_OfflineSorter$SortInfo *self, PyObject *arg, void *data);
        static PyObject *t_OfflineSorter$SortInfo_get__mergeRounds(t_OfflineSorter$SortInfo *self, void *data);
        static int t_OfflineSorter$SortInfo_set__mergeRounds(t_OfflineSorter$SortInfo *self, PyObject *arg, void *data);
        static PyObject *t_OfflineSorter$SortInfo_get__mergeTime(t_OfflineSorter$SortInfo *self, void *data);
        static int t_OfflineSorter$SortInfo_set__mergeTime(t_OfflineSorter$SortInfo *self, PyObject *arg, void *data);
        static PyObject *t_OfflineSorter$SortInfo_get__readTime(t_OfflineSorter$SortInfo *self, void *data);
        static int t_OfflineSorter$SortInfo_set__readTime(t_OfflineSorter$SortInfo *self, PyObject *arg, void *data);
        static PyObject *t_OfflineSorter$SortInfo_get__sortTime(t_OfflineSorter$SortInfo *self, void *data);
        static int t_OfflineSorter$SortInfo_set__sortTime(t_OfflineSorter$SortInfo *self, PyObject *arg, void *data);
        static PyObject *t_OfflineSorter$SortInfo_get__tempMergeFiles(t_OfflineSorter$SortInfo *self, void *data);
        static int t_OfflineSorter$SortInfo_set__tempMergeFiles(t_OfflineSorter$SortInfo *self, PyObject *arg, void *data);
        static PyObject *t_OfflineSorter$SortInfo_get__totalTime(t_OfflineSorter$SortInfo *self, void *data);
        static int t_OfflineSorter$SortInfo_set__totalTime(t_OfflineSorter$SortInfo *self, PyObject *arg, void *data);

        static PyGetSetDef t_OfflineSorter$SortInfo__fields_[] = {
          DECLARE_GET_FIELD(t_OfflineSorter$SortInfo, bufferSize),
          DECLARE_GETSET_FIELD(t_OfflineSorter$SortInfo, lines),
          DECLARE_GETSET_FIELD(t_OfflineSorter$SortInfo, mergeRounds),
          DECLARE_GETSET_FIELD(t_OfflineSorter$SortInfo, mergeTime),
          DECLARE_GETSET_FIELD(t_OfflineSorter$SortInfo, readTime),
          DECLARE_GETSET_FIELD(t_OfflineSorter$SortInfo, sortTime),
          DECLARE_GETSET_FIELD(t_OfflineSorter$SortInfo, tempMergeFiles),
          DECLARE_GETSET_FIELD(t_OfflineSorter$SortInfo, totalTime),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_OfflineSorter$SortInfo__methods_[] = {
          DECLARE_METHOD(t_OfflineSorter$SortInfo, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_OfflineSorter$SortInfo, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_OfflineSorter$SortInfo, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(OfflineSorter$SortInfo, t_OfflineSorter$SortInfo, ::java::lang::Object, OfflineSorter$SortInfo, t_OfflineSorter$SortInfo_init_, 0, 0, t_OfflineSorter$SortInfo__fields_, 0, 0);

        void t_OfflineSorter$SortInfo::install(PyObject *module)
        {
          installType(&PY_TYPE(OfflineSorter$SortInfo), module, "OfflineSorter$SortInfo", 0);
        }

        void t_OfflineSorter$SortInfo::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(OfflineSorter$SortInfo).tp_dict, "class_", make_descriptor(OfflineSorter$SortInfo::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(OfflineSorter$SortInfo).tp_dict, "wrapfn_", make_descriptor(t_OfflineSorter$SortInfo::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(OfflineSorter$SortInfo).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_OfflineSorter$SortInfo_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, OfflineSorter$SortInfo::initializeClass, 1)))
            return NULL;
          return t_OfflineSorter$SortInfo::wrap_Object(OfflineSorter$SortInfo(((t_OfflineSorter$SortInfo *) arg)->object.this$));
        }
        static PyObject *t_OfflineSorter$SortInfo_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, OfflineSorter$SortInfo::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_OfflineSorter$SortInfo_init_(t_OfflineSorter$SortInfo *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::util::OfflineSorter a0((jobject) NULL);
          OfflineSorter$SortInfo object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::util::OfflineSorter::initializeClass, &a0))
          {
            INT_CALL(object = OfflineSorter$SortInfo(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_OfflineSorter$SortInfo_toString(t_OfflineSorter$SortInfo *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(OfflineSorter$SortInfo), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_OfflineSorter$SortInfo_get__bufferSize(t_OfflineSorter$SortInfo *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object._get_bufferSize());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }

        static PyObject *t_OfflineSorter$SortInfo_get__lines(t_OfflineSorter$SortInfo *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_lines());
          return PyInt_FromLong((long) value);
        }
        static int t_OfflineSorter$SortInfo_set__lines(t_OfflineSorter$SortInfo *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_lines(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "lines", arg);
          return -1;
        }

        static PyObject *t_OfflineSorter$SortInfo_get__mergeRounds(t_OfflineSorter$SortInfo *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_mergeRounds());
          return PyInt_FromLong((long) value);
        }
        static int t_OfflineSorter$SortInfo_set__mergeRounds(t_OfflineSorter$SortInfo *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_mergeRounds(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "mergeRounds", arg);
          return -1;
        }

        static PyObject *t_OfflineSorter$SortInfo_get__mergeTime(t_OfflineSorter$SortInfo *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object._get_mergeTime());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
        static int t_OfflineSorter$SortInfo_set__mergeTime(t_OfflineSorter$SortInfo *self, PyObject *arg, void *data)
        {
          jlong value;
          if (!parseArg(arg, "J", &value))
          {
            INT_CALL(self->object._set_mergeTime(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "mergeTime", arg);
          return -1;
        }

        static PyObject *t_OfflineSorter$SortInfo_get__readTime(t_OfflineSorter$SortInfo *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object._get_readTime());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
        static int t_OfflineSorter$SortInfo_set__readTime(t_OfflineSorter$SortInfo *self, PyObject *arg, void *data)
        {
          jlong value;
          if (!parseArg(arg, "J", &value))
          {
            INT_CALL(self->object._set_readTime(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "readTime", arg);
          return -1;
        }

        static PyObject *t_OfflineSorter$SortInfo_get__sortTime(t_OfflineSorter$SortInfo *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object._get_sortTime());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
        static int t_OfflineSorter$SortInfo_set__sortTime(t_OfflineSorter$SortInfo *self, PyObject *arg, void *data)
        {
          jlong value;
          if (!parseArg(arg, "J", &value))
          {
            INT_CALL(self->object._set_sortTime(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "sortTime", arg);
          return -1;
        }

        static PyObject *t_OfflineSorter$SortInfo_get__tempMergeFiles(t_OfflineSorter$SortInfo *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_tempMergeFiles());
          return PyInt_FromLong((long) value);
        }
        static int t_OfflineSorter$SortInfo_set__tempMergeFiles(t_OfflineSorter$SortInfo *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_tempMergeFiles(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "tempMergeFiles", arg);
          return -1;
        }

        static PyObject *t_OfflineSorter$SortInfo_get__totalTime(t_OfflineSorter$SortInfo *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object._get_totalTime());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
        static int t_OfflineSorter$SortInfo_set__totalTime(t_OfflineSorter$SortInfo *self, PyObject *arg, void *data)
        {
          jlong value;
          if (!parseArg(arg, "J", &value))
          {
            INT_CALL(self->object._set_totalTime(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "totalTime", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/xml/builders/MatchAllDocsQueryBuilder.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/queryparser/xml/QueryBuilder.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {

            ::java::lang::Class *MatchAllDocsQueryBuilder::class$ = NULL;
            jmethodID *MatchAllDocsQueryBuilder::mids$ = NULL;
            bool MatchAllDocsQueryBuilder::live$ = false;

            jclass MatchAllDocsQueryBuilder::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/xml/builders/MatchAllDocsQueryBuilder");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            MatchAllDocsQueryBuilder::MatchAllDocsQueryBuilder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {
            static PyObject *t_MatchAllDocsQueryBuilder_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_MatchAllDocsQueryBuilder_instance_(PyTypeObject *type, PyObject *arg);
            static int t_MatchAllDocsQueryBuilder_init_(t_MatchAllDocsQueryBuilder *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_MatchAllDocsQueryBuilder__methods_[] = {
              DECLARE_METHOD(t_MatchAllDocsQueryBuilder, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_MatchAllDocsQueryBuilder, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(MatchAllDocsQueryBuilder, t_MatchAllDocsQueryBuilder, ::java::lang::Object, MatchAllDocsQueryBuilder, t_MatchAllDocsQueryBuilder_init_, 0, 0, 0, 0, 0);

            void t_MatchAllDocsQueryBuilder::install(PyObject *module)
            {
              installType(&PY_TYPE(MatchAllDocsQueryBuilder), module, "MatchAllDocsQueryBuilder", 0);
            }

            void t_MatchAllDocsQueryBuilder::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(MatchAllDocsQueryBuilder).tp_dict, "class_", make_descriptor(MatchAllDocsQueryBuilder::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(MatchAllDocsQueryBuilder).tp_dict, "wrapfn_", make_descriptor(t_MatchAllDocsQueryBuilder::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(MatchAllDocsQueryBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_MatchAllDocsQueryBuilder_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, MatchAllDocsQueryBuilder::initializeClass, 1)))
                return NULL;
              return t_MatchAllDocsQueryBuilder::wrap_Object(MatchAllDocsQueryBuilder(((t_MatchAllDocsQueryBuilder *) arg)->object.this$));
            }
            static PyObject *t_MatchAllDocsQueryBuilder_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, MatchAllDocsQueryBuilder::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_MatchAllDocsQueryBuilder_init_(t_MatchAllDocsQueryBuilder *self, PyObject *args, PyObject *kwds)
            {
              MatchAllDocsQueryBuilder object((jobject) NULL);

              INT_CALL(object = MatchAllDocsQueryBuilder());
              self->object = object;

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/payloads/PayloadTermQuery.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/index/Term.h"
#include "org/apache/lucene/search/payloads/PayloadFunction.h"
#include "org/apache/lucene/search/Weight.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace payloads {

          ::java::lang::Class *PayloadTermQuery::class$ = NULL;
          jmethodID *PayloadTermQuery::mids$ = NULL;
          bool PayloadTermQuery::live$ = false;

          jclass PayloadTermQuery::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/payloads/PayloadTermQuery");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c933262d] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/Term;Lorg/apache/lucene/search/payloads/PayloadFunction;)V");
              mids$[mid_init$_dc8be042] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/Term;Lorg/apache/lucene/search/payloads/PayloadFunction;Z)V");
              mids$[mid_createWeight_367763cb] = env->getMethodID(cls, "createWeight", "(Lorg/apache/lucene/search/IndexSearcher;)Lorg/apache/lucene/search/Weight;");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PayloadTermQuery::PayloadTermQuery(const ::org::apache::lucene::index::Term & a0, const ::org::apache::lucene::search::payloads::PayloadFunction & a1) : ::org::apache::lucene::search::spans::SpanTermQuery(env->newObject(initializeClass, &mids$, mid_init$_c933262d, a0.this$, a1.this$)) {}

          PayloadTermQuery::PayloadTermQuery(const ::org::apache::lucene::index::Term & a0, const ::org::apache::lucene::search::payloads::PayloadFunction & a1, jboolean a2) : ::org::apache::lucene::search::spans::SpanTermQuery(env->newObject(initializeClass, &mids$, mid_init$_dc8be042, a0.this$, a1.this$, a2)) {}

          ::org::apache::lucene::search::Weight PayloadTermQuery::createWeight(const ::org::apache::lucene::search::IndexSearcher & a0) const
          {
            return ::org::apache::lucene::search::Weight(env->callObjectMethod(this$, mids$[mid_createWeight_367763cb], a0.this$));
          }

          jboolean PayloadTermQuery::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          jint PayloadTermQuery::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace payloads {
          static PyObject *t_PayloadTermQuery_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PayloadTermQuery_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PayloadTermQuery_init_(t_PayloadTermQuery *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PayloadTermQuery_createWeight(t_PayloadTermQuery *self, PyObject *args);
          static PyObject *t_PayloadTermQuery_equals(t_PayloadTermQuery *self, PyObject *args);
          static PyObject *t_PayloadTermQuery_hashCode(t_PayloadTermQuery *self, PyObject *args);

          static PyMethodDef t_PayloadTermQuery__methods_[] = {
            DECLARE_METHOD(t_PayloadTermQuery, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PayloadTermQuery, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PayloadTermQuery, createWeight, METH_VARARGS),
            DECLARE_METHOD(t_PayloadTermQuery, equals, METH_VARARGS),
            DECLARE_METHOD(t_PayloadTermQuery, hashCode, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PayloadTermQuery, t_PayloadTermQuery, ::org::apache::lucene::search::spans::SpanTermQuery, PayloadTermQuery, t_PayloadTermQuery_init_, 0, 0, 0, 0, 0);

          void t_PayloadTermQuery::install(PyObject *module)
          {
            installType(&PY_TYPE(PayloadTermQuery), module, "PayloadTermQuery", 0);
          }

          void t_PayloadTermQuery::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PayloadTermQuery).tp_dict, "class_", make_descriptor(PayloadTermQuery::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PayloadTermQuery).tp_dict, "wrapfn_", make_descriptor(t_PayloadTermQuery::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PayloadTermQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PayloadTermQuery_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PayloadTermQuery::initializeClass, 1)))
              return NULL;
            return t_PayloadTermQuery::wrap_Object(PayloadTermQuery(((t_PayloadTermQuery *) arg)->object.this$));
          }
          static PyObject *t_PayloadTermQuery_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PayloadTermQuery::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PayloadTermQuery_init_(t_PayloadTermQuery *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::index::Term a0((jobject) NULL);
                ::org::apache::lucene::search::payloads::PayloadFunction a1((jobject) NULL);
                PayloadTermQuery object((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::index::Term::initializeClass, ::org::apache::lucene::search::payloads::PayloadFunction::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = PayloadTermQuery(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::index::Term a0((jobject) NULL);
                ::org::apache::lucene::search::payloads::PayloadFunction a1((jobject) NULL);
                jboolean a2;
                PayloadTermQuery object((jobject) NULL);

                if (!parseArgs(args, "kkZ", ::org::apache::lucene::index::Term::initializeClass, ::org::apache::lucene::search::payloads::PayloadFunction::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = PayloadTermQuery(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PayloadTermQuery_createWeight(t_PayloadTermQuery *self, PyObject *args)
          {
            ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
            ::org::apache::lucene::search::Weight result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.createWeight(a0));
              return ::org::apache::lucene::search::t_Weight::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(PayloadTermQuery), (PyObject *) self, "createWeight", args, 2);
          }

          static PyObject *t_PayloadTermQuery_equals(t_PayloadTermQuery *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(PayloadTermQuery), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_PayloadTermQuery_hashCode(t_PayloadTermQuery *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(PayloadTermQuery), (PyObject *) self, "hashCode", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/vectorhighlight/FieldFragList$WeightedFragInfo$SubInfo.h"
#include "java/util/List.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/vectorhighlight/FieldPhraseList$WeightedPhraseInfo$Toffs.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {

          ::java::lang::Class *FieldFragList$WeightedFragInfo$SubInfo::class$ = NULL;
          jmethodID *FieldFragList$WeightedFragInfo$SubInfo::mids$ = NULL;
          bool FieldFragList$WeightedFragInfo$SubInfo::live$ = false;

          jclass FieldFragList$WeightedFragInfo$SubInfo::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/vectorhighlight/FieldFragList$WeightedFragInfo$SubInfo");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_ca488422] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/util/List;IF)V");
              mids$[mid_getBoost_54c6a176] = env->getMethodID(cls, "getBoost", "()F");
              mids$[mid_getSeqnum_54c6a179] = env->getMethodID(cls, "getSeqnum", "()I");
              mids$[mid_getTermsOffsets_87851566] = env->getMethodID(cls, "getTermsOffsets", "()Ljava/util/List;");
              mids$[mid_getText_14c7b5c5] = env->getMethodID(cls, "getText", "()Ljava/lang/String;");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FieldFragList$WeightedFragInfo$SubInfo::FieldFragList$WeightedFragInfo$SubInfo(const ::java::lang::String & a0, const ::java::util::List & a1, jint a2, jfloat a3) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_ca488422, a0.this$, a1.this$, a2, a3)) {}

          jfloat FieldFragList$WeightedFragInfo$SubInfo::getBoost() const
          {
            return env->callFloatMethod(this$, mids$[mid_getBoost_54c6a176]);
          }

          jint FieldFragList$WeightedFragInfo$SubInfo::getSeqnum() const
          {
            return env->callIntMethod(this$, mids$[mid_getSeqnum_54c6a179]);
          }

          ::java::util::List FieldFragList$WeightedFragInfo$SubInfo::getTermsOffsets() const
          {
            return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getTermsOffsets_87851566]));
          }

          ::java::lang::String FieldFragList$WeightedFragInfo$SubInfo::getText() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getText_14c7b5c5]));
          }

          ::java::lang::String FieldFragList$WeightedFragInfo$SubInfo::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {
          static PyObject *t_FieldFragList$WeightedFragInfo$SubInfo_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FieldFragList$WeightedFragInfo$SubInfo_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FieldFragList$WeightedFragInfo$SubInfo_init_(t_FieldFragList$WeightedFragInfo$SubInfo *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FieldFragList$WeightedFragInfo$SubInfo_getBoost(t_FieldFragList$WeightedFragInfo$SubInfo *self);
          static PyObject *t_FieldFragList$WeightedFragInfo$SubInfo_getSeqnum(t_FieldFragList$WeightedFragInfo$SubInfo *self);
          static PyObject *t_FieldFragList$WeightedFragInfo$SubInfo_getTermsOffsets(t_FieldFragList$WeightedFragInfo$SubInfo *self);
          static PyObject *t_FieldFragList$WeightedFragInfo$SubInfo_getText(t_FieldFragList$WeightedFragInfo$SubInfo *self);
          static PyObject *t_FieldFragList$WeightedFragInfo$SubInfo_toString(t_FieldFragList$WeightedFragInfo$SubInfo *self, PyObject *args);
          static PyObject *t_FieldFragList$WeightedFragInfo$SubInfo_get__boost(t_FieldFragList$WeightedFragInfo$SubInfo *self, void *data);
          static PyObject *t_FieldFragList$WeightedFragInfo$SubInfo_get__seqnum(t_FieldFragList$WeightedFragInfo$SubInfo *self, void *data);
          static PyObject *t_FieldFragList$WeightedFragInfo$SubInfo_get__termsOffsets(t_FieldFragList$WeightedFragInfo$SubInfo *self, void *data);
          static PyObject *t_FieldFragList$WeightedFragInfo$SubInfo_get__text(t_FieldFragList$WeightedFragInfo$SubInfo *self, void *data);
          static PyGetSetDef t_FieldFragList$WeightedFragInfo$SubInfo__fields_[] = {
            DECLARE_GET_FIELD(t_FieldFragList$WeightedFragInfo$SubInfo, boost),
            DECLARE_GET_FIELD(t_FieldFragList$WeightedFragInfo$SubInfo, seqnum),
            DECLARE_GET_FIELD(t_FieldFragList$WeightedFragInfo$SubInfo, termsOffsets),
            DECLARE_GET_FIELD(t_FieldFragList$WeightedFragInfo$SubInfo, text),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_FieldFragList$WeightedFragInfo$SubInfo__methods_[] = {
            DECLARE_METHOD(t_FieldFragList$WeightedFragInfo$SubInfo, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FieldFragList$WeightedFragInfo$SubInfo, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FieldFragList$WeightedFragInfo$SubInfo, getBoost, METH_NOARGS),
            DECLARE_METHOD(t_FieldFragList$WeightedFragInfo$SubInfo, getSeqnum, METH_NOARGS),
            DECLARE_METHOD(t_FieldFragList$WeightedFragInfo$SubInfo, getTermsOffsets, METH_NOARGS),
            DECLARE_METHOD(t_FieldFragList$WeightedFragInfo$SubInfo, getText, METH_NOARGS),
            DECLARE_METHOD(t_FieldFragList$WeightedFragInfo$SubInfo, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FieldFragList$WeightedFragInfo$SubInfo, t_FieldFragList$WeightedFragInfo$SubInfo, ::java::lang::Object, FieldFragList$WeightedFragInfo$SubInfo, t_FieldFragList$WeightedFragInfo$SubInfo_init_, 0, 0, t_FieldFragList$WeightedFragInfo$SubInfo__fields_, 0, 0);

          void t_FieldFragList$WeightedFragInfo$SubInfo::install(PyObject *module)
          {
            installType(&PY_TYPE(FieldFragList$WeightedFragInfo$SubInfo), module, "FieldFragList$WeightedFragInfo$SubInfo", 0);
          }

          void t_FieldFragList$WeightedFragInfo$SubInfo::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FieldFragList$WeightedFragInfo$SubInfo).tp_dict, "class_", make_descriptor(FieldFragList$WeightedFragInfo$SubInfo::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FieldFragList$WeightedFragInfo$SubInfo).tp_dict, "wrapfn_", make_descriptor(t_FieldFragList$WeightedFragInfo$SubInfo::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FieldFragList$WeightedFragInfo$SubInfo).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FieldFragList$WeightedFragInfo$SubInfo_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FieldFragList$WeightedFragInfo$SubInfo::initializeClass, 1)))
              return NULL;
            return t_FieldFragList$WeightedFragInfo$SubInfo::wrap_Object(FieldFragList$WeightedFragInfo$SubInfo(((t_FieldFragList$WeightedFragInfo$SubInfo *) arg)->object.this$));
          }
          static PyObject *t_FieldFragList$WeightedFragInfo$SubInfo_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FieldFragList$WeightedFragInfo$SubInfo::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FieldFragList$WeightedFragInfo$SubInfo_init_(t_FieldFragList$WeightedFragInfo$SubInfo *self, PyObject *args, PyObject *kwds)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::util::List a1((jobject) NULL);
            PyTypeObject **p1;
            jint a2;
            jfloat a3;
            FieldFragList$WeightedFragInfo$SubInfo object((jobject) NULL);

            if (!parseArgs(args, "sKIF", ::java::util::List::initializeClass, &a0, &a1, &p1, ::java::util::t_List::parameters_, &a2, &a3))
            {
              INT_CALL(object = FieldFragList$WeightedFragInfo$SubInfo(a0, a1, a2, a3));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_FieldFragList$WeightedFragInfo$SubInfo_getBoost(t_FieldFragList$WeightedFragInfo$SubInfo *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getBoost());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_FieldFragList$WeightedFragInfo$SubInfo_getSeqnum(t_FieldFragList$WeightedFragInfo$SubInfo *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getSeqnum());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_FieldFragList$WeightedFragInfo$SubInfo_getTermsOffsets(t_FieldFragList$WeightedFragInfo$SubInfo *self)
          {
            ::java::util::List result((jobject) NULL);
            OBJ_CALL(result = self->object.getTermsOffsets());
            return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::search::vectorhighlight::PY_TYPE(FieldPhraseList$WeightedPhraseInfo$Toffs));
          }

          static PyObject *t_FieldFragList$WeightedFragInfo$SubInfo_getText(t_FieldFragList$WeightedFragInfo$SubInfo *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.getText());
            return j2p(result);
          }

          static PyObject *t_FieldFragList$WeightedFragInfo$SubInfo_toString(t_FieldFragList$WeightedFragInfo$SubInfo *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(FieldFragList$WeightedFragInfo$SubInfo), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_FieldFragList$WeightedFragInfo$SubInfo_get__boost(t_FieldFragList$WeightedFragInfo$SubInfo *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getBoost());
            return PyFloat_FromDouble((double) value);
          }

          static PyObject *t_FieldFragList$WeightedFragInfo$SubInfo_get__seqnum(t_FieldFragList$WeightedFragInfo$SubInfo *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getSeqnum());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_FieldFragList$WeightedFragInfo$SubInfo_get__termsOffsets(t_FieldFragList$WeightedFragInfo$SubInfo *self, void *data)
          {
            ::java::util::List value((jobject) NULL);
            OBJ_CALL(value = self->object.getTermsOffsets());
            return ::java::util::t_List::wrap_Object(value);
          }

          static PyObject *t_FieldFragList$WeightedFragInfo$SubInfo_get__text(t_FieldFragList$WeightedFragInfo$SubInfo *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getText());
            return j2p(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/PhraseSlopQueryNode.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/FieldableNode.h"
#include "java/lang/Class.h"
#include "java/lang/CharSequence.h"
#include "org/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax.h"
#include "java/lang/CloneNotSupportedException.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {

              ::java::lang::Class *PhraseSlopQueryNode::class$ = NULL;
              jmethodID *PhraseSlopQueryNode::mids$ = NULL;
              bool PhraseSlopQueryNode::live$ = false;

              jclass PhraseSlopQueryNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/nodes/PhraseSlopQueryNode");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_bc870487] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;I)V");
                  mids$[mid_cloneTree_b387c5e6] = env->getMethodID(cls, "cloneTree", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_getChild_b387c5e6] = env->getMethodID(cls, "getChild", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_getField_e0adba2f] = env->getMethodID(cls, "getField", "()Ljava/lang/CharSequence;");
                  mids$[mid_getValue_54c6a179] = env->getMethodID(cls, "getValue", "()I");
                  mids$[mid_setField_a8afc64a] = env->getMethodID(cls, "setField", "(Ljava/lang/CharSequence;)V");
                  mids$[mid_toQueryString_99b8dfe1] = env->getMethodID(cls, "toQueryString", "(Lorg/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax;)Ljava/lang/CharSequence;");
                  mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              PhraseSlopQueryNode::PhraseSlopQueryNode(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0, jint a1) : ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNodeImpl(env->newObject(initializeClass, &mids$, mid_init$_bc870487, a0.this$, a1)) {}

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode PhraseSlopQueryNode::cloneTree() const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_cloneTree_b387c5e6]));
              }

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode PhraseSlopQueryNode::getChild() const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_getChild_b387c5e6]));
              }

              ::java::lang::CharSequence PhraseSlopQueryNode::getField() const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_getField_e0adba2f]));
              }

              jint PhraseSlopQueryNode::getValue() const
              {
                return env->callIntMethod(this$, mids$[mid_getValue_54c6a179]);
              }

              void PhraseSlopQueryNode::setField(const ::java::lang::CharSequence & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setField_a8afc64a], a0.this$);
              }

              ::java::lang::CharSequence PhraseSlopQueryNode::toQueryString(const ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax & a0) const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_toQueryString_99b8dfe1], a0.this$));
              }

              ::java::lang::String PhraseSlopQueryNode::toString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {
              static PyObject *t_PhraseSlopQueryNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_PhraseSlopQueryNode_instance_(PyTypeObject *type, PyObject *arg);
              static int t_PhraseSlopQueryNode_init_(t_PhraseSlopQueryNode *self, PyObject *args, PyObject *kwds);
              static PyObject *t_PhraseSlopQueryNode_cloneTree(t_PhraseSlopQueryNode *self, PyObject *args);
              static PyObject *t_PhraseSlopQueryNode_getChild(t_PhraseSlopQueryNode *self);
              static PyObject *t_PhraseSlopQueryNode_getField(t_PhraseSlopQueryNode *self);
              static PyObject *t_PhraseSlopQueryNode_getValue(t_PhraseSlopQueryNode *self);
              static PyObject *t_PhraseSlopQueryNode_setField(t_PhraseSlopQueryNode *self, PyObject *arg);
              static PyObject *t_PhraseSlopQueryNode_toQueryString(t_PhraseSlopQueryNode *self, PyObject *args);
              static PyObject *t_PhraseSlopQueryNode_toString(t_PhraseSlopQueryNode *self, PyObject *args);
              static PyObject *t_PhraseSlopQueryNode_get__child(t_PhraseSlopQueryNode *self, void *data);
              static PyObject *t_PhraseSlopQueryNode_get__field(t_PhraseSlopQueryNode *self, void *data);
              static int t_PhraseSlopQueryNode_set__field(t_PhraseSlopQueryNode *self, PyObject *arg, void *data);
              static PyObject *t_PhraseSlopQueryNode_get__value(t_PhraseSlopQueryNode *self, void *data);
              static PyGetSetDef t_PhraseSlopQueryNode__fields_[] = {
                DECLARE_GET_FIELD(t_PhraseSlopQueryNode, child),
                DECLARE_GETSET_FIELD(t_PhraseSlopQueryNode, field),
                DECLARE_GET_FIELD(t_PhraseSlopQueryNode, value),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_PhraseSlopQueryNode__methods_[] = {
                DECLARE_METHOD(t_PhraseSlopQueryNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_PhraseSlopQueryNode, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_PhraseSlopQueryNode, cloneTree, METH_VARARGS),
                DECLARE_METHOD(t_PhraseSlopQueryNode, getChild, METH_NOARGS),
                DECLARE_METHOD(t_PhraseSlopQueryNode, getField, METH_NOARGS),
                DECLARE_METHOD(t_PhraseSlopQueryNode, getValue, METH_NOARGS),
                DECLARE_METHOD(t_PhraseSlopQueryNode, setField, METH_O),
                DECLARE_METHOD(t_PhraseSlopQueryNode, toQueryString, METH_VARARGS),
                DECLARE_METHOD(t_PhraseSlopQueryNode, toString, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(PhraseSlopQueryNode, t_PhraseSlopQueryNode, ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNodeImpl, PhraseSlopQueryNode, t_PhraseSlopQueryNode_init_, 0, 0, t_PhraseSlopQueryNode__fields_, 0, 0);

              void t_PhraseSlopQueryNode::install(PyObject *module)
              {
                installType(&PY_TYPE(PhraseSlopQueryNode), module, "PhraseSlopQueryNode", 0);
              }

              void t_PhraseSlopQueryNode::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(PhraseSlopQueryNode).tp_dict, "class_", make_descriptor(PhraseSlopQueryNode::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(PhraseSlopQueryNode).tp_dict, "wrapfn_", make_descriptor(t_PhraseSlopQueryNode::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(PhraseSlopQueryNode).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_PhraseSlopQueryNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, PhraseSlopQueryNode::initializeClass, 1)))
                  return NULL;
                return t_PhraseSlopQueryNode::wrap_Object(PhraseSlopQueryNode(((t_PhraseSlopQueryNode *) arg)->object.this$));
              }
              static PyObject *t_PhraseSlopQueryNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, PhraseSlopQueryNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_PhraseSlopQueryNode_init_(t_PhraseSlopQueryNode *self, PyObject *args, PyObject *kwds)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                jint a1;
                PhraseSlopQueryNode object((jobject) NULL);

                if (!parseArgs(args, "kI", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = PhraseSlopQueryNode(a0, a1));
                  self->object = object;
                }
                else
                {
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_PhraseSlopQueryNode_cloneTree(t_PhraseSlopQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.cloneTree());
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(PhraseSlopQueryNode), (PyObject *) self, "cloneTree", args, 2);
              }

              static PyObject *t_PhraseSlopQueryNode_getChild(t_PhraseSlopQueryNode *self)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);
                OBJ_CALL(result = self->object.getChild());
                return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
              }

              static PyObject *t_PhraseSlopQueryNode_getField(t_PhraseSlopQueryNode *self)
              {
                ::java::lang::CharSequence result((jobject) NULL);
                OBJ_CALL(result = self->object.getField());
                return ::java::lang::t_CharSequence::wrap_Object(result);
              }

              static PyObject *t_PhraseSlopQueryNode_getValue(t_PhraseSlopQueryNode *self)
              {
                jint result;
                OBJ_CALL(result = self->object.getValue());
                return PyInt_FromLong((long) result);
              }

              static PyObject *t_PhraseSlopQueryNode_setField(t_PhraseSlopQueryNode *self, PyObject *arg)
              {
                ::java::lang::CharSequence a0((jobject) NULL);

                if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
                {
                  OBJ_CALL(self->object.setField(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setField", arg);
                return NULL;
              }

              static PyObject *t_PhraseSlopQueryNode_toQueryString(t_PhraseSlopQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax a0((jobject) NULL);
                ::java::lang::CharSequence result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.toQueryString(a0));
                  return ::java::lang::t_CharSequence::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(PhraseSlopQueryNode), (PyObject *) self, "toQueryString", args, 2);
              }

              static PyObject *t_PhraseSlopQueryNode_toString(t_PhraseSlopQueryNode *self, PyObject *args)
              {
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.toString());
                  return j2p(result);
                }

                return callSuper(&PY_TYPE(PhraseSlopQueryNode), (PyObject *) self, "toString", args, 2);
              }

              static PyObject *t_PhraseSlopQueryNode_get__child(t_PhraseSlopQueryNode *self, void *data)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode value((jobject) NULL);
                OBJ_CALL(value = self->object.getChild());
                return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(value);
              }

              static PyObject *t_PhraseSlopQueryNode_get__field(t_PhraseSlopQueryNode *self, void *data)
              {
                ::java::lang::CharSequence value((jobject) NULL);
                OBJ_CALL(value = self->object.getField());
                return ::java::lang::t_CharSequence::wrap_Object(value);
              }
              static int t_PhraseSlopQueryNode_set__field(t_PhraseSlopQueryNode *self, PyObject *arg, void *data)
              {
                {
                  ::java::lang::CharSequence value((jobject) NULL);
                  if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &value))
                  {
                    INT_CALL(self->object.setField(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "field", arg);
                return -1;
              }

              static PyObject *t_PhraseSlopQueryNode_get__value(t_PhraseSlopQueryNode *self, void *data)
              {
                jint value;
                OBJ_CALL(value = self->object.getValue());
                return PyInt_FromLong((long) value);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/fst/IntSequenceOutputs.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/IntsRef.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "org/apache/lucene/store/DataInput.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {

          ::java::lang::Class *IntSequenceOutputs::class$ = NULL;
          jmethodID *IntSequenceOutputs::mids$ = NULL;
          bool IntSequenceOutputs::live$ = false;

          jclass IntSequenceOutputs::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/fst/IntSequenceOutputs");

              mids$ = new jmethodID[max_mid];
              mids$[mid_add_d1486e01] = env->getMethodID(cls, "add", "(Lorg/apache/lucene/util/IntsRef;Lorg/apache/lucene/util/IntsRef;)Lorg/apache/lucene/util/IntsRef;");
              mids$[mid_common_d1486e01] = env->getMethodID(cls, "common", "(Lorg/apache/lucene/util/IntsRef;Lorg/apache/lucene/util/IntsRef;)Lorg/apache/lucene/util/IntsRef;");
              mids$[mid_getNoOutput_5b734841] = env->getMethodID(cls, "getNoOutput", "()Lorg/apache/lucene/util/IntsRef;");
              mids$[mid_getSingleton_5d304c4b] = env->getStaticMethodID(cls, "getSingleton", "()Lorg/apache/lucene/util/fst/IntSequenceOutputs;");
              mids$[mid_outputToString_6c8ec0cf] = env->getMethodID(cls, "outputToString", "(Lorg/apache/lucene/util/IntsRef;)Ljava/lang/String;");
              mids$[mid_ramBytesUsed_4defa0f4] = env->getMethodID(cls, "ramBytesUsed", "(Lorg/apache/lucene/util/IntsRef;)J");
              mids$[mid_read_7ae3e2dc] = env->getMethodID(cls, "read", "(Lorg/apache/lucene/store/DataInput;)Lorg/apache/lucene/util/IntsRef;");
              mids$[mid_skipOutput_f5d6a551] = env->getMethodID(cls, "skipOutput", "(Lorg/apache/lucene/store/DataInput;)V");
              mids$[mid_subtract_d1486e01] = env->getMethodID(cls, "subtract", "(Lorg/apache/lucene/util/IntsRef;Lorg/apache/lucene/util/IntsRef;)Lorg/apache/lucene/util/IntsRef;");
              mids$[mid_write_e1973ab5] = env->getMethodID(cls, "write", "(Lorg/apache/lucene/util/IntsRef;Lorg/apache/lucene/store/DataOutput;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::org::apache::lucene::util::IntsRef IntSequenceOutputs::add(const ::org::apache::lucene::util::IntsRef & a0, const ::org::apache::lucene::util::IntsRef & a1) const
          {
            return ::org::apache::lucene::util::IntsRef(env->callObjectMethod(this$, mids$[mid_add_d1486e01], a0.this$, a1.this$));
          }

          ::org::apache::lucene::util::IntsRef IntSequenceOutputs::common(const ::org::apache::lucene::util::IntsRef & a0, const ::org::apache::lucene::util::IntsRef & a1) const
          {
            return ::org::apache::lucene::util::IntsRef(env->callObjectMethod(this$, mids$[mid_common_d1486e01], a0.this$, a1.this$));
          }

          ::org::apache::lucene::util::IntsRef IntSequenceOutputs::getNoOutput() const
          {
            return ::org::apache::lucene::util::IntsRef(env->callObjectMethod(this$, mids$[mid_getNoOutput_5b734841]));
          }

          IntSequenceOutputs IntSequenceOutputs::getSingleton()
          {
            jclass cls = env->getClass(initializeClass);
            return IntSequenceOutputs(env->callStaticObjectMethod(cls, mids$[mid_getSingleton_5d304c4b]));
          }

          ::java::lang::String IntSequenceOutputs::outputToString(const ::org::apache::lucene::util::IntsRef & a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_outputToString_6c8ec0cf], a0.this$));
          }

          jlong IntSequenceOutputs::ramBytesUsed(const ::org::apache::lucene::util::IntsRef & a0) const
          {
            return env->callLongMethod(this$, mids$[mid_ramBytesUsed_4defa0f4], a0.this$);
          }

          ::org::apache::lucene::util::IntsRef IntSequenceOutputs::read(const ::org::apache::lucene::store::DataInput & a0) const
          {
            return ::org::apache::lucene::util::IntsRef(env->callObjectMethod(this$, mids$[mid_read_7ae3e2dc], a0.this$));
          }

          void IntSequenceOutputs::skipOutput(const ::org::apache::lucene::store::DataInput & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_skipOutput_f5d6a551], a0.this$);
          }

          ::org::apache::lucene::util::IntsRef IntSequenceOutputs::subtract(const ::org::apache::lucene::util::IntsRef & a0, const ::org::apache::lucene::util::IntsRef & a1) const
          {
            return ::org::apache::lucene::util::IntsRef(env->callObjectMethod(this$, mids$[mid_subtract_d1486e01], a0.this$, a1.this$));
          }

          void IntSequenceOutputs::write(const ::org::apache::lucene::util::IntsRef & a0, const ::org::apache::lucene::store::DataOutput & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_write_e1973ab5], a0.this$, a1.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {
          static PyObject *t_IntSequenceOutputs_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IntSequenceOutputs_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IntSequenceOutputs_of_(t_IntSequenceOutputs *self, PyObject *args);
          static PyObject *t_IntSequenceOutputs_add(t_IntSequenceOutputs *self, PyObject *args);
          static PyObject *t_IntSequenceOutputs_common(t_IntSequenceOutputs *self, PyObject *args);
          static PyObject *t_IntSequenceOutputs_getNoOutput(t_IntSequenceOutputs *self, PyObject *args);
          static PyObject *t_IntSequenceOutputs_getSingleton(PyTypeObject *type);
          static PyObject *t_IntSequenceOutputs_outputToString(t_IntSequenceOutputs *self, PyObject *args);
          static PyObject *t_IntSequenceOutputs_ramBytesUsed(t_IntSequenceOutputs *self, PyObject *args);
          static PyObject *t_IntSequenceOutputs_read(t_IntSequenceOutputs *self, PyObject *args);
          static PyObject *t_IntSequenceOutputs_skipOutput(t_IntSequenceOutputs *self, PyObject *args);
          static PyObject *t_IntSequenceOutputs_subtract(t_IntSequenceOutputs *self, PyObject *args);
          static PyObject *t_IntSequenceOutputs_write(t_IntSequenceOutputs *self, PyObject *args);
          static PyObject *t_IntSequenceOutputs_get__noOutput(t_IntSequenceOutputs *self, void *data);
          static PyObject *t_IntSequenceOutputs_get__singleton(t_IntSequenceOutputs *self, void *data);
          static PyObject *t_IntSequenceOutputs_get__parameters_(t_IntSequenceOutputs *self, void *data);
          static PyGetSetDef t_IntSequenceOutputs__fields_[] = {
            DECLARE_GET_FIELD(t_IntSequenceOutputs, noOutput),
            DECLARE_GET_FIELD(t_IntSequenceOutputs, singleton),
            DECLARE_GET_FIELD(t_IntSequenceOutputs, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_IntSequenceOutputs__methods_[] = {
            DECLARE_METHOD(t_IntSequenceOutputs, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IntSequenceOutputs, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IntSequenceOutputs, of_, METH_VARARGS),
            DECLARE_METHOD(t_IntSequenceOutputs, add, METH_VARARGS),
            DECLARE_METHOD(t_IntSequenceOutputs, common, METH_VARARGS),
            DECLARE_METHOD(t_IntSequenceOutputs, getNoOutput, METH_VARARGS),
            DECLARE_METHOD(t_IntSequenceOutputs, getSingleton, METH_NOARGS | METH_CLASS),
            DECLARE_METHOD(t_IntSequenceOutputs, outputToString, METH_VARARGS),
            DECLARE_METHOD(t_IntSequenceOutputs, ramBytesUsed, METH_VARARGS),
            DECLARE_METHOD(t_IntSequenceOutputs, read, METH_VARARGS),
            DECLARE_METHOD(t_IntSequenceOutputs, skipOutput, METH_VARARGS),
            DECLARE_METHOD(t_IntSequenceOutputs, subtract, METH_VARARGS),
            DECLARE_METHOD(t_IntSequenceOutputs, write, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(IntSequenceOutputs, t_IntSequenceOutputs, ::org::apache::lucene::util::fst::Outputs, IntSequenceOutputs, abstract_init, 0, 0, t_IntSequenceOutputs__fields_, 0, 0);
          PyObject *t_IntSequenceOutputs::wrap_Object(const IntSequenceOutputs& object, PyTypeObject *p0)
          {
            PyObject *obj = t_IntSequenceOutputs::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_IntSequenceOutputs *self = (t_IntSequenceOutputs *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_IntSequenceOutputs::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_IntSequenceOutputs::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_IntSequenceOutputs *self = (t_IntSequenceOutputs *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_IntSequenceOutputs::install(PyObject *module)
          {
            installType(&PY_TYPE(IntSequenceOutputs), module, "IntSequenceOutputs", 0);
          }

          void t_IntSequenceOutputs::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(IntSequenceOutputs).tp_dict, "class_", make_descriptor(IntSequenceOutputs::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(IntSequenceOutputs).tp_dict, "wrapfn_", make_descriptor(t_IntSequenceOutputs::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(IntSequenceOutputs).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_IntSequenceOutputs_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, IntSequenceOutputs::initializeClass, 1)))
              return NULL;
            return t_IntSequenceOutputs::wrap_Object(IntSequenceOutputs(((t_IntSequenceOutputs *) arg)->object.this$));
          }
          static PyObject *t_IntSequenceOutputs_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, IntSequenceOutputs::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_IntSequenceOutputs_of_(t_IntSequenceOutputs *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static PyObject *t_IntSequenceOutputs_add(t_IntSequenceOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::util::IntsRef a0((jobject) NULL);
            ::org::apache::lucene::util::IntsRef a1((jobject) NULL);
            ::org::apache::lucene::util::IntsRef result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::IntsRef::initializeClass, ::org::apache::lucene::util::IntsRef::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.add(a0, a1));
              return ::org::apache::lucene::util::t_IntsRef::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(IntSequenceOutputs), (PyObject *) self, "add", args, 2);
          }

          static PyObject *t_IntSequenceOutputs_common(t_IntSequenceOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::util::IntsRef a0((jobject) NULL);
            ::org::apache::lucene::util::IntsRef a1((jobject) NULL);
            ::org::apache::lucene::util::IntsRef result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::IntsRef::initializeClass, ::org::apache::lucene::util::IntsRef::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.common(a0, a1));
              return ::org::apache::lucene::util::t_IntsRef::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(IntSequenceOutputs), (PyObject *) self, "common", args, 2);
          }

          static PyObject *t_IntSequenceOutputs_getNoOutput(t_IntSequenceOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::util::IntsRef result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getNoOutput());
              return ::org::apache::lucene::util::t_IntsRef::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(IntSequenceOutputs), (PyObject *) self, "getNoOutput", args, 2);
          }

          static PyObject *t_IntSequenceOutputs_getSingleton(PyTypeObject *type)
          {
            IntSequenceOutputs result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::util::fst::IntSequenceOutputs::getSingleton());
            return t_IntSequenceOutputs::wrap_Object(result);
          }

          static PyObject *t_IntSequenceOutputs_outputToString(t_IntSequenceOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::util::IntsRef a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::util::IntsRef::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.outputToString(a0));
              return j2p(result);
            }

            return callSuper(&PY_TYPE(IntSequenceOutputs), (PyObject *) self, "outputToString", args, 2);
          }

          static PyObject *t_IntSequenceOutputs_ramBytesUsed(t_IntSequenceOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::util::IntsRef a0((jobject) NULL);
            jlong result;

            if (!parseArgs(args, "k", ::org::apache::lucene::util::IntsRef::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.ramBytesUsed(a0));
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(&PY_TYPE(IntSequenceOutputs), (PyObject *) self, "ramBytesUsed", args, 2);
          }

          static PyObject *t_IntSequenceOutputs_read(t_IntSequenceOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::store::DataInput a0((jobject) NULL);
            ::org::apache::lucene::util::IntsRef result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::store::DataInput::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.read(a0));
              return ::org::apache::lucene::util::t_IntsRef::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(IntSequenceOutputs), (PyObject *) self, "read", args, 2);
          }

          static PyObject *t_IntSequenceOutputs_skipOutput(t_IntSequenceOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::store::DataInput a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::store::DataInput::initializeClass, &a0))
            {
              OBJ_CALL(self->object.skipOutput(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(IntSequenceOutputs), (PyObject *) self, "skipOutput", args, 2);
          }

          static PyObject *t_IntSequenceOutputs_subtract(t_IntSequenceOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::util::IntsRef a0((jobject) NULL);
            ::org::apache::lucene::util::IntsRef a1((jobject) NULL);
            ::org::apache::lucene::util::IntsRef result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::IntsRef::initializeClass, ::org::apache::lucene::util::IntsRef::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.subtract(a0, a1));
              return ::org::apache::lucene::util::t_IntsRef::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(IntSequenceOutputs), (PyObject *) self, "subtract", args, 2);
          }

          static PyObject *t_IntSequenceOutputs_write(t_IntSequenceOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::util::IntsRef a0((jobject) NULL);
            ::org::apache::lucene::store::DataOutput a1((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::IntsRef::initializeClass, ::org::apache::lucene::store::DataOutput::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.write(a0, a1));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(IntSequenceOutputs), (PyObject *) self, "write", args, 2);
          }
          static PyObject *t_IntSequenceOutputs_get__parameters_(t_IntSequenceOutputs *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_IntSequenceOutputs_get__noOutput(t_IntSequenceOutputs *self, void *data)
          {
            ::org::apache::lucene::util::IntsRef value((jobject) NULL);
            OBJ_CALL(value = self->object.getNoOutput());
            return ::org::apache::lucene::util::t_IntsRef::wrap_Object(value);
          }

          static PyObject *t_IntSequenceOutputs_get__singleton(t_IntSequenceOutputs *self, void *data)
          {
            IntSequenceOutputs value((jobject) NULL);
            OBJ_CALL(value = self->object.getSingleton());
            return t_IntSequenceOutputs::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spell/CombineSuggestion.h"
#include "org/apache/lucene/search/spell/SuggestWord.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {

          ::java::lang::Class *CombineSuggestion::class$ = NULL;
          jmethodID *CombineSuggestion::mids$ = NULL;
          jfieldID *CombineSuggestion::fids$ = NULL;
          bool CombineSuggestion::live$ = false;

          jclass CombineSuggestion::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spell/CombineSuggestion");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_e7d3559a] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/spell/SuggestWord;[I)V");

              fids$ = new jfieldID[max_fid];
              fids$[fid_originalTermIndexes] = env->getFieldID(cls, "originalTermIndexes", "[I");
              fids$[fid_suggestion] = env->getFieldID(cls, "suggestion", "Lorg/apache/lucene/search/spell/SuggestWord;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CombineSuggestion::CombineSuggestion(const ::org::apache::lucene::search::spell::SuggestWord & a0, const JArray< jint > & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_e7d3559a, a0.this$, a1.this$)) {}

          JArray< jint > CombineSuggestion::_get_originalTermIndexes() const
          {
            return JArray< jint >(env->getObjectField(this$, fids$[fid_originalTermIndexes]));
          }

          ::org::apache::lucene::search::spell::SuggestWord CombineSuggestion::_get_suggestion() const
          {
            return ::org::apache::lucene::search::spell::SuggestWord(env->getObjectField(this$, fids$[fid_suggestion]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {
          static PyObject *t_CombineSuggestion_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CombineSuggestion_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CombineSuggestion_init_(t_CombineSuggestion *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CombineSuggestion_get__originalTermIndexes(t_CombineSuggestion *self, void *data);
          static PyObject *t_CombineSuggestion_get__suggestion(t_CombineSuggestion *self, void *data);

          static PyGetSetDef t_CombineSuggestion__fields_[] = {
            DECLARE_GET_FIELD(t_CombineSuggestion, originalTermIndexes),
            DECLARE_GET_FIELD(t_CombineSuggestion, suggestion),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_CombineSuggestion__methods_[] = {
            DECLARE_METHOD(t_CombineSuggestion, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CombineSuggestion, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CombineSuggestion, t_CombineSuggestion, ::java::lang::Object, CombineSuggestion, t_CombineSuggestion_init_, 0, 0, t_CombineSuggestion__fields_, 0, 0);

          void t_CombineSuggestion::install(PyObject *module)
          {
            installType(&PY_TYPE(CombineSuggestion), module, "CombineSuggestion", 0);
          }

          void t_CombineSuggestion::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CombineSuggestion).tp_dict, "class_", make_descriptor(CombineSuggestion::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CombineSuggestion).tp_dict, "wrapfn_", make_descriptor(t_CombineSuggestion::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CombineSuggestion).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CombineSuggestion_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CombineSuggestion::initializeClass, 1)))
              return NULL;
            return t_CombineSuggestion::wrap_Object(CombineSuggestion(((t_CombineSuggestion *) arg)->object.this$));
          }
          static PyObject *t_CombineSuggestion_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CombineSuggestion::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CombineSuggestion_init_(t_CombineSuggestion *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::search::spell::SuggestWord a0((jobject) NULL);
            JArray< jint > a1((jobject) NULL);
            CombineSuggestion object((jobject) NULL);

            if (!parseArgs(args, "k[I", ::org::apache::lucene::search::spell::SuggestWord::initializeClass, &a0, &a1))
            {
              INT_CALL(object = CombineSuggestion(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_CombineSuggestion_get__originalTermIndexes(t_CombineSuggestion *self, void *data)
          {
            JArray< jint > value((jobject) NULL);
            OBJ_CALL(value = self->object._get_originalTermIndexes());
            return value.wrap();
          }

          static PyObject *t_CombineSuggestion_get__suggestion(t_CombineSuggestion *self, void *data)
          {
            ::org::apache::lucene::search::spell::SuggestWord value((jobject) NULL);
            OBJ_CALL(value = self->object._get_suggestion());
            return ::org::apache::lucene::search::spell::t_SuggestWord::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/StoredFieldsFormat.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/codecs/StoredFieldsWriter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "org/apache/lucene/store/IOContext.h"
#include "org/apache/lucene/codecs/StoredFieldsReader.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {

        ::java::lang::Class *StoredFieldsFormat::class$ = NULL;
        jmethodID *StoredFieldsFormat::mids$ = NULL;
        bool StoredFieldsFormat::live$ = false;

        jclass StoredFieldsFormat::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/StoredFieldsFormat");

            mids$ = new jmethodID[max_mid];
            mids$[mid_fieldsReader_bbe26ec4] = env->getMethodID(cls, "fieldsReader", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/SegmentInfo;Lorg/apache/lucene/index/FieldInfos;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/codecs/StoredFieldsReader;");
            mids$[mid_fieldsWriter_c73cceda] = env->getMethodID(cls, "fieldsWriter", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/SegmentInfo;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/codecs/StoredFieldsWriter;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::codecs::StoredFieldsReader StoredFieldsFormat::fieldsReader(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::SegmentInfo & a1, const ::org::apache::lucene::index::FieldInfos & a2, const ::org::apache::lucene::store::IOContext & a3) const
        {
          return ::org::apache::lucene::codecs::StoredFieldsReader(env->callObjectMethod(this$, mids$[mid_fieldsReader_bbe26ec4], a0.this$, a1.this$, a2.this$, a3.this$));
        }

        ::org::apache::lucene::codecs::StoredFieldsWriter StoredFieldsFormat::fieldsWriter(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::SegmentInfo & a1, const ::org::apache::lucene::store::IOContext & a2) const
        {
          return ::org::apache::lucene::codecs::StoredFieldsWriter(env->callObjectMethod(this$, mids$[mid_fieldsWriter_c73cceda], a0.this$, a1.this$, a2.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        static PyObject *t_StoredFieldsFormat_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_StoredFieldsFormat_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_StoredFieldsFormat_fieldsReader(t_StoredFieldsFormat *self, PyObject *args);
        static PyObject *t_StoredFieldsFormat_fieldsWriter(t_StoredFieldsFormat *self, PyObject *args);

        static PyMethodDef t_StoredFieldsFormat__methods_[] = {
          DECLARE_METHOD(t_StoredFieldsFormat, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_StoredFieldsFormat, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_StoredFieldsFormat, fieldsReader, METH_VARARGS),
          DECLARE_METHOD(t_StoredFieldsFormat, fieldsWriter, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(StoredFieldsFormat, t_StoredFieldsFormat, ::java::lang::Object, StoredFieldsFormat, abstract_init, 0, 0, 0, 0, 0);

        void t_StoredFieldsFormat::install(PyObject *module)
        {
          installType(&PY_TYPE(StoredFieldsFormat), module, "StoredFieldsFormat", 0);
        }

        void t_StoredFieldsFormat::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(StoredFieldsFormat).tp_dict, "class_", make_descriptor(StoredFieldsFormat::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(StoredFieldsFormat).tp_dict, "wrapfn_", make_descriptor(t_StoredFieldsFormat::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(StoredFieldsFormat).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_StoredFieldsFormat_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, StoredFieldsFormat::initializeClass, 1)))
            return NULL;
          return t_StoredFieldsFormat::wrap_Object(StoredFieldsFormat(((t_StoredFieldsFormat *) arg)->object.this$));
        }
        static PyObject *t_StoredFieldsFormat_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, StoredFieldsFormat::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_StoredFieldsFormat_fieldsReader(t_StoredFieldsFormat *self, PyObject *args)
        {
          ::org::apache::lucene::store::Directory a0((jobject) NULL);
          ::org::apache::lucene::index::SegmentInfo a1((jobject) NULL);
          ::org::apache::lucene::index::FieldInfos a2((jobject) NULL);
          ::org::apache::lucene::store::IOContext a3((jobject) NULL);
          ::org::apache::lucene::codecs::StoredFieldsReader result((jobject) NULL);

          if (!parseArgs(args, "kkkk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::SegmentInfo::initializeClass, ::org::apache::lucene::index::FieldInfos::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(result = self->object.fieldsReader(a0, a1, a2, a3));
            return ::org::apache::lucene::codecs::t_StoredFieldsReader::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "fieldsReader", args);
          return NULL;
        }

        static PyObject *t_StoredFieldsFormat_fieldsWriter(t_StoredFieldsFormat *self, PyObject *args)
        {
          ::org::apache::lucene::store::Directory a0((jobject) NULL);
          ::org::apache::lucene::index::SegmentInfo a1((jobject) NULL);
          ::org::apache::lucene::store::IOContext a2((jobject) NULL);
          ::org::apache::lucene::codecs::StoredFieldsWriter result((jobject) NULL);

          if (!parseArgs(args, "kkk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::SegmentInfo::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.fieldsWriter(a0, a1, a2));
            return ::org::apache::lucene::codecs::t_StoredFieldsWriter::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "fieldsWriter", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/eu/BasqueAnalyzer.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace eu {

          ::java::lang::Class *BasqueAnalyzer::class$ = NULL;
          jmethodID *BasqueAnalyzer::mids$ = NULL;
          bool BasqueAnalyzer::live$ = false;
          ::java::lang::String *BasqueAnalyzer::DEFAULT_STOPWORD_FILE = NULL;

          jclass BasqueAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/eu/BasqueAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_6d1f9881] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_0d96cf33] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;)V");
              mids$[mid_init$_3ea629c6] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/util/CharArraySet;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_83eafe28] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_c9d7e4a3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_getDefaultStopSet_d2d3505c] = env->getStaticMethodID(cls, "getDefaultStopSet", "()Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_STOPWORD_FILE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_STOPWORD_FILE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BasqueAnalyzer::BasqueAnalyzer() : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          BasqueAnalyzer::BasqueAnalyzer(const ::org::apache::lucene::analysis::util::CharArraySet & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_6d1f9881, a0.this$)) {}

          BasqueAnalyzer::BasqueAnalyzer(const ::org::apache::lucene::util::Version & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_0d96cf33, a0.this$)) {}

          BasqueAnalyzer::BasqueAnalyzer(const ::org::apache::lucene::analysis::util::CharArraySet & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_3ea629c6, a0.this$, a1.this$)) {}

          BasqueAnalyzer::BasqueAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_83eafe28, a0.this$, a1.this$)) {}

          BasqueAnalyzer::BasqueAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1, const ::org::apache::lucene::analysis::util::CharArraySet & a2) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_c9d7e4a3, a0.this$, a1.this$, a2.this$)) {}

          ::org::apache::lucene::analysis::util::CharArraySet BasqueAnalyzer::getDefaultStopSet()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getDefaultStopSet_d2d3505c]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace eu {
          static PyObject *t_BasqueAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BasqueAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_BasqueAnalyzer_init_(t_BasqueAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_BasqueAnalyzer_getDefaultStopSet(PyTypeObject *type);
          static PyObject *t_BasqueAnalyzer_get__defaultStopSet(t_BasqueAnalyzer *self, void *data);
          static PyGetSetDef t_BasqueAnalyzer__fields_[] = {
            DECLARE_GET_FIELD(t_BasqueAnalyzer, defaultStopSet),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_BasqueAnalyzer__methods_[] = {
            DECLARE_METHOD(t_BasqueAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BasqueAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BasqueAnalyzer, getDefaultStopSet, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(BasqueAnalyzer, t_BasqueAnalyzer, ::org::apache::lucene::analysis::util::StopwordAnalyzerBase, BasqueAnalyzer, t_BasqueAnalyzer_init_, 0, 0, t_BasqueAnalyzer__fields_, 0, 0);

          void t_BasqueAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(BasqueAnalyzer), module, "BasqueAnalyzer", 0);
          }

          void t_BasqueAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(BasqueAnalyzer).tp_dict, "class_", make_descriptor(BasqueAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(BasqueAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_BasqueAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(BasqueAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(BasqueAnalyzer::initializeClass);
            PyDict_SetItemString(PY_TYPE(BasqueAnalyzer).tp_dict, "DEFAULT_STOPWORD_FILE", make_descriptor(j2p(*BasqueAnalyzer::DEFAULT_STOPWORD_FILE)));
          }

          static PyObject *t_BasqueAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BasqueAnalyzer::initializeClass, 1)))
              return NULL;
            return t_BasqueAnalyzer::wrap_Object(BasqueAnalyzer(((t_BasqueAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_BasqueAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BasqueAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_BasqueAnalyzer_init_(t_BasqueAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                BasqueAnalyzer object((jobject) NULL);

                INT_CALL(object = BasqueAnalyzer());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                ::org::apache::lucene::analysis::util::CharArraySet a0((jobject) NULL);
                PyTypeObject **p0;
                BasqueAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = BasqueAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                BasqueAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::util::Version::initializeClass, &a0))
                {
                  INT_CALL(object = BasqueAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::analysis::util::CharArraySet a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                BasqueAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = BasqueAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                BasqueAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "kK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = BasqueAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                ::org::apache::lucene::analysis::util::CharArraySet a2((jobject) NULL);
                PyTypeObject **p2;
                BasqueAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "kKK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_, &a2, &p2, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = BasqueAnalyzer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_BasqueAnalyzer_getDefaultStopSet(PyTypeObject *type)
          {
            ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::eu::BasqueAnalyzer::getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_BasqueAnalyzer_get__defaultStopSet(t_BasqueAnalyzer *self, void *data)
          {
            ::org::apache::lucene::analysis::util::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/io/PrintWriter.h"
#include "java/io/OutputStream.h"
#include "java/lang/Class.h"
#include "java/lang/CharSequence.h"
#include "java/io/File.h"
#include "java/lang/Object.h"
#include "java/util/Locale.h"
#include "java/io/UnsupportedEncodingException.h"
#include "java/lang/String.h"
#include "java/io/FileNotFoundException.h"
#include "JArray.h"

namespace java {
  namespace io {

    ::java::lang::Class *PrintWriter::class$ = NULL;
    jmethodID *PrintWriter::mids$ = NULL;
    bool PrintWriter::live$ = false;

    jclass PrintWriter::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/io/PrintWriter");

        mids$ = new jmethodID[max_mid];
        mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
        mids$[mid_init$_c3dacf57] = env->getMethodID(cls, "<init>", "(Ljava/io/File;)V");
        mids$[mid_init$_5bcd5850] = env->getMethodID(cls, "<init>", "(Ljava/io/Writer;)V");
        mids$[mid_init$_82d865f8] = env->getMethodID(cls, "<init>", "(Ljava/io/OutputStream;)V");
        mids$[mid_init$_a0fd6605] = env->getMethodID(cls, "<init>", "(Ljava/io/OutputStream;Z)V");
        mids$[mid_init$_b8789389] = env->getMethodID(cls, "<init>", "(Ljava/io/File;Ljava/lang/String;)V");
        mids$[mid_init$_4a264742] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/String;)V");
        mids$[mid_init$_53203e9d] = env->getMethodID(cls, "<init>", "(Ljava/io/Writer;Z)V");
        mids$[mid_append_4ea4b69d] = env->getMethodID(cls, "append", "(Ljava/lang/CharSequence;)Ljava/io/PrintWriter;");
        mids$[mid_append_6cdbddb5] = env->getMethodID(cls, "append", "(C)Ljava/io/PrintWriter;");
        mids$[mid_append_19a20159] = env->getMethodID(cls, "append", "(Ljava/lang/CharSequence;II)Ljava/io/PrintWriter;");
        mids$[mid_checkError_54c6a16a] = env->getMethodID(cls, "checkError", "()Z");
        mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
        mids$[mid_flush_54c6a166] = env->getMethodID(cls, "flush", "()V");
        mids$[mid_format_d515d1d7] = env->getMethodID(cls, "format", "(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/PrintWriter;");
        mids$[mid_format_0bde164c] = env->getMethodID(cls, "format", "(Ljava/util/Locale;Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/PrintWriter;");
        mids$[mid_print_290588ee] = env->getMethodID(cls, "print", "(Ljava/lang/Object;)V");
        mids$[mid_print_5d1c7645] = env->getMethodID(cls, "print", "(D)V");
        mids$[mid_print_87fd545a] = env->getMethodID(cls, "print", "(C)V");
        mids$[mid_print_700e23d6] = env->getMethodID(cls, "print", "([C)V");
        mids$[mid_print_bb0c767f] = env->getMethodID(cls, "print", "(Z)V");
        mids$[mid_print_39c7bd3c] = env->getMethodID(cls, "print", "(I)V");
        mids$[mid_print_5fdc3f48] = env->getMethodID(cls, "print", "(Ljava/lang/String;)V");
        mids$[mid_print_06298cab] = env->getMethodID(cls, "print", "(F)V");
        mids$[mid_print_0ee6df2f] = env->getMethodID(cls, "print", "(J)V");
        mids$[mid_printf_d515d1d7] = env->getMethodID(cls, "printf", "(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/PrintWriter;");
        mids$[mid_printf_0bde164c] = env->getMethodID(cls, "printf", "(Ljava/util/Locale;Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/PrintWriter;");
        mids$[mid_println_54c6a166] = env->getMethodID(cls, "println", "()V");
        mids$[mid_println_5fdc3f48] = env->getMethodID(cls, "println", "(Ljava/lang/String;)V");
        mids$[mid_println_0ee6df2f] = env->getMethodID(cls, "println", "(J)V");
        mids$[mid_println_bb0c767f] = env->getMethodID(cls, "println", "(Z)V");
        mids$[mid_println_06298cab] = env->getMethodID(cls, "println", "(F)V");
        mids$[mid_println_5d1c7645] = env->getMethodID(cls, "println", "(D)V");
        mids$[mid_println_39c7bd3c] = env->getMethodID(cls, "println", "(I)V");
        mids$[mid_println_700e23d6] = env->getMethodID(cls, "println", "([C)V");
        mids$[mid_println_290588ee] = env->getMethodID(cls, "println", "(Ljava/lang/Object;)V");
        mids$[mid_println_87fd545a] = env->getMethodID(cls, "println", "(C)V");
        mids$[mid_write_5fdc3f48] = env->getMethodID(cls, "write", "(Ljava/lang/String;)V");
        mids$[mid_write_700e23d6] = env->getMethodID(cls, "write", "([C)V");
        mids$[mid_write_39c7bd3c] = env->getMethodID(cls, "write", "(I)V");
        mids$[mid_write_6f0bb356] = env->getMethodID(cls, "write", "([CII)V");
        mids$[mid_write_555f322c] = env->getMethodID(cls, "write", "(Ljava/lang/String;II)V");
        mids$[mid_setError_54c6a166] = env->getMethodID(cls, "setError", "()V");
        mids$[mid_clearError_54c6a166] = env->getMethodID(cls, "clearError", "()V");

        class$ = (::java::lang::Class *) new JObject(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    PrintWriter::PrintWriter(const ::java::lang::String & a0) : ::java::io::Writer(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

    PrintWriter::PrintWriter(const ::java::io::File & a0) : ::java::io::Writer(env->newObject(initializeClass, &mids$, mid_init$_c3dacf57, a0.this$)) {}

    PrintWriter::PrintWriter(const ::java::io::Writer & a0) : ::java::io::Writer(env->newObject(initializeClass, &mids$, mid_init$_5bcd5850, a0.this$)) {}

    PrintWriter::PrintWriter(const ::java::io::OutputStream & a0) : ::java::io::Writer(env->newObject(initializeClass, &mids$, mid_init$_82d865f8, a0.this$)) {}

    PrintWriter::PrintWriter(const ::java::io::OutputStream & a0, jboolean a1) : ::java::io::Writer(env->newObject(initializeClass, &mids$, mid_init$_a0fd6605, a0.this$, a1)) {}

    PrintWriter::PrintWriter(const ::java::io::File & a0, const ::java::lang::String & a1) : ::java::io::Writer(env->newObject(initializeClass, &mids$, mid_init$_b8789389, a0.this$, a1.this$)) {}

    PrintWriter::PrintWriter(const ::java::lang::String & a0, const ::java::lang::String & a1) : ::java::io::Writer(env->newObject(initializeClass, &mids$, mid_init$_4a264742, a0.this$, a1.this$)) {}

    PrintWriter::PrintWriter(const ::java::io::Writer & a0, jboolean a1) : ::java::io::Writer(env->newObject(initializeClass, &mids$, mid_init$_53203e9d, a0.this$, a1)) {}

    PrintWriter PrintWriter::append(const ::java::lang::CharSequence & a0) const
    {
      return PrintWriter(env->callObjectMethod(this$, mids$[mid_append_4ea4b69d], a0.this$));
    }

    PrintWriter PrintWriter::append(jchar a0) const
    {
      return PrintWriter(env->callObjectMethod(this$, mids$[mid_append_6cdbddb5], a0));
    }

    PrintWriter PrintWriter::append(const ::java::lang::CharSequence & a0, jint a1, jint a2) const
    {
      return PrintWriter(env->callObjectMethod(this$, mids$[mid_append_19a20159], a0.this$, a1, a2));
    }

    jboolean PrintWriter::checkError() const
    {
      return env->callBooleanMethod(this$, mids$[mid_checkError_54c6a16a]);
    }

    void PrintWriter::close() const
    {
      env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
    }

    void PrintWriter::flush() const
    {
      env->callVoidMethod(this$, mids$[mid_flush_54c6a166]);
    }

    PrintWriter PrintWriter::format(const ::java::lang::String & a0, const JArray< ::java::lang::Object > & a1) const
    {
      return PrintWriter(env->callObjectMethod(this$, mids$[mid_format_d515d1d7], a0.this$, a1.this$));
    }

    PrintWriter PrintWriter::format(const ::java::util::Locale & a0, const ::java::lang::String & a1, const JArray< ::java::lang::Object > & a2) const
    {
      return PrintWriter(env->callObjectMethod(this$, mids$[mid_format_0bde164c], a0.this$, a1.this$, a2.this$));
    }

    void PrintWriter::print(const ::java::lang::Object & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_print_290588ee], a0.this$);
    }

    void PrintWriter::print(jdouble a0) const
    {
      env->callVoidMethod(this$, mids$[mid_print_5d1c7645], a0);
    }

    void PrintWriter::print(jchar a0) const
    {
      env->callVoidMethod(this$, mids$[mid_print_87fd545a], a0);
    }

    void PrintWriter::print(const JArray< jchar > & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_print_700e23d6], a0.this$);
    }

    void PrintWriter::print(jboolean a0) const
    {
      env->callVoidMethod(this$, mids$[mid_print_bb0c767f], a0);
    }

    void PrintWriter::print(jint a0) const
    {
      env->callVoidMethod(this$, mids$[mid_print_39c7bd3c], a0);
    }

    void PrintWriter::print(const ::java::lang::String & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_print_5fdc3f48], a0.this$);
    }

    void PrintWriter::print(jfloat a0) const
    {
      env->callVoidMethod(this$, mids$[mid_print_06298cab], a0);
    }

    void PrintWriter::print(jlong a0) const
    {
      env->callVoidMethod(this$, mids$[mid_print_0ee6df2f], a0);
    }

    PrintWriter PrintWriter::printf(const ::java::lang::String & a0, const JArray< ::java::lang::Object > & a1) const
    {
      return PrintWriter(env->callObjectMethod(this$, mids$[mid_printf_d515d1d7], a0.this$, a1.this$));
    }

    PrintWriter PrintWriter::printf(const ::java::util::Locale & a0, const ::java::lang::String & a1, const JArray< ::java::lang::Object > & a2) const
    {
      return PrintWriter(env->callObjectMethod(this$, mids$[mid_printf_0bde164c], a0.this$, a1.this$, a2.this$));
    }

    void PrintWriter::println() const
    {
      env->callVoidMethod(this$, mids$[mid_println_54c6a166]);
    }

    void PrintWriter::println(const ::java::lang::String & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_println_5fdc3f48], a0.this$);
    }

    void PrintWriter::println(jlong a0) const
    {
      env->callVoidMethod(this$, mids$[mid_println_0ee6df2f], a0);
    }

    void PrintWriter::println(jboolean a0) const
    {
      env->callVoidMethod(this$, mids$[mid_println_bb0c767f], a0);
    }

    void PrintWriter::println(jfloat a0) const
    {
      env->callVoidMethod(this$, mids$[mid_println_06298cab], a0);
    }

    void PrintWriter::println(jdouble a0) const
    {
      env->callVoidMethod(this$, mids$[mid_println_5d1c7645], a0);
    }

    void PrintWriter::println(jint a0) const
    {
      env->callVoidMethod(this$, mids$[mid_println_39c7bd3c], a0);
    }

    void PrintWriter::println(const JArray< jchar > & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_println_700e23d6], a0.this$);
    }

    void PrintWriter::println(const ::java::lang::Object & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_println_290588ee], a0.this$);
    }

    void PrintWriter::println(jchar a0) const
    {
      env->callVoidMethod(this$, mids$[mid_println_87fd545a], a0);
    }

    void PrintWriter::write(const ::java::lang::String & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_write_5fdc3f48], a0.this$);
    }

    void PrintWriter::write(const JArray< jchar > & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_write_700e23d6], a0.this$);
    }

    void PrintWriter::write(jint a0) const
    {
      env->callVoidMethod(this$, mids$[mid_write_39c7bd3c], a0);
    }

    void PrintWriter::write(const JArray< jchar > & a0, jint a1, jint a2) const
    {
      env->callVoidMethod(this$, mids$[mid_write_6f0bb356], a0.this$, a1, a2);
    }

    void PrintWriter::write(const ::java::lang::String & a0, jint a1, jint a2) const
    {
      env->callVoidMethod(this$, mids$[mid_write_555f322c], a0.this$, a1, a2);
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace io {
    static PyObject *t_PrintWriter_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_PrintWriter_instance_(PyTypeObject *type, PyObject *arg);
    static int t_PrintWriter_init_(t_PrintWriter *self, PyObject *args, PyObject *kwds);
    static PyObject *t_PrintWriter_append(t_PrintWriter *self, PyObject *args);
    static PyObject *t_PrintWriter_checkError(t_PrintWriter *self);
    static PyObject *t_PrintWriter_close(t_PrintWriter *self, PyObject *args);
    static PyObject *t_PrintWriter_flush(t_PrintWriter *self, PyObject *args);
    static PyObject *t_PrintWriter_format(t_PrintWriter *self, PyObject *args);
    static PyObject *t_PrintWriter_print(t_PrintWriter *self, PyObject *args);
    static PyObject *t_PrintWriter_printf(t_PrintWriter *self, PyObject *args);
    static PyObject *t_PrintWriter_println(t_PrintWriter *self, PyObject *args);
    static PyObject *t_PrintWriter_write(t_PrintWriter *self, PyObject *args);

    static PyMethodDef t_PrintWriter__methods_[] = {
      DECLARE_METHOD(t_PrintWriter, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_PrintWriter, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_PrintWriter, append, METH_VARARGS),
      DECLARE_METHOD(t_PrintWriter, checkError, METH_NOARGS),
      DECLARE_METHOD(t_PrintWriter, close, METH_VARARGS),
      DECLARE_METHOD(t_PrintWriter, flush, METH_VARARGS),
      DECLARE_METHOD(t_PrintWriter, format, METH_VARARGS),
      DECLARE_METHOD(t_PrintWriter, print, METH_VARARGS),
      DECLARE_METHOD(t_PrintWriter, printf, METH_VARARGS),
      DECLARE_METHOD(t_PrintWriter, println, METH_VARARGS),
      DECLARE_METHOD(t_PrintWriter, write, METH_VARARGS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(PrintWriter, t_PrintWriter, ::java::io::Writer, PrintWriter, t_PrintWriter_init_, 0, 0, 0, 0, 0);

    void t_PrintWriter::install(PyObject *module)
    {
      installType(&PY_TYPE(PrintWriter), module, "PrintWriter", 0);
    }

    void t_PrintWriter::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(PrintWriter).tp_dict, "class_", make_descriptor(PrintWriter::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(PrintWriter).tp_dict, "wrapfn_", make_descriptor(t_PrintWriter::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(PrintWriter).tp_dict, "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_PrintWriter_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, PrintWriter::initializeClass, 1)))
        return NULL;
      return t_PrintWriter::wrap_Object(PrintWriter(((t_PrintWriter *) arg)->object.this$));
    }
    static PyObject *t_PrintWriter_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, PrintWriter::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static int t_PrintWriter_init_(t_PrintWriter *self, PyObject *args, PyObject *kwds)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          ::java::lang::String a0((jobject) NULL);
          PrintWriter object((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            INT_CALL(object = PrintWriter(a0));
            self->object = object;
            break;
          }
        }
        {
          ::java::io::File a0((jobject) NULL);
          PrintWriter object((jobject) NULL);

          if (!parseArgs(args, "k", ::java::io::File::initializeClass, &a0))
          {
            INT_CALL(object = PrintWriter(a0));
            self->object = object;
            break;
          }
        }
        {
          ::java::io::Writer a0((jobject) NULL);
          PrintWriter object((jobject) NULL);

          if (!parseArgs(args, "k", ::java::io::Writer::initializeClass, &a0))
          {
            INT_CALL(object = PrintWriter(a0));
            self->object = object;
            break;
          }
        }
        {
          ::java::io::OutputStream a0((jobject) NULL);
          PrintWriter object((jobject) NULL);

          if (!parseArgs(args, "k", ::java::io::OutputStream::initializeClass, &a0))
          {
            INT_CALL(object = PrintWriter(a0));
            self->object = object;
            break;
          }
        }
        goto err;
       case 2:
        {
          ::java::io::OutputStream a0((jobject) NULL);
          jboolean a1;
          PrintWriter object((jobject) NULL);

          if (!parseArgs(args, "kZ", ::java::io::OutputStream::initializeClass, &a0, &a1))
          {
            INT_CALL(object = PrintWriter(a0, a1));
            self->object = object;
            break;
          }
        }
        {
          ::java::io::File a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          PrintWriter object((jobject) NULL);

          if (!parseArgs(args, "ks", ::java::io::File::initializeClass, &a0, &a1))
          {
            INT_CALL(object = PrintWriter(a0, a1));
            self->object = object;
            break;
          }
        }
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          PrintWriter object((jobject) NULL);

          if (!parseArgs(args, "ss", &a0, &a1))
          {
            INT_CALL(object = PrintWriter(a0, a1));
            self->object = object;
            break;
          }
        }
        {
          ::java::io::Writer a0((jobject) NULL);
          jboolean a1;
          PrintWriter object((jobject) NULL);

          if (!parseArgs(args, "kZ", ::java::io::Writer::initializeClass, &a0, &a1))
          {
            INT_CALL(object = PrintWriter(a0, a1));
            self->object = object;
            break;
          }
        }
       default:
       err:
        PyErr_SetArgsError((PyObject *) self, "__init__", args);
        return -1;
      }

      return 0;
    }

    static PyObject *t_PrintWriter_append(t_PrintWriter *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          ::java::lang::CharSequence a0((jobject) NULL);
          PrintWriter result((jobject) NULL);

          if (!parseArgs(args, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
          {
            OBJ_CALL(result = self->object.append(a0));
            return t_PrintWriter::wrap_Object(result);
          }
        }
        {
          jchar a0;
          PrintWriter result((jobject) NULL);

          if (!parseArgs(args, "C", &a0))
          {
            OBJ_CALL(result = self->object.append(a0));
            return t_PrintWriter::wrap_Object(result);
          }
        }
        break;
       case 3:
        {
          ::java::lang::CharSequence a0((jobject) NULL);
          jint a1;
          jint a2;
          PrintWriter result((jobject) NULL);

          if (!parseArgs(args, "OII", &::java::lang::PY_TYPE(CharSequence), &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.append(a0, a1, a2));
            return t_PrintWriter::wrap_Object(result);
          }
        }
      }

      return callSuper(&PY_TYPE(PrintWriter), (PyObject *) self, "append", args, 2);
    }

    static PyObject *t_PrintWriter_checkError(t_PrintWriter *self)
    {
      jboolean result;
      OBJ_CALL(result = self->object.checkError());
      Py_RETURN_BOOL(result);
    }

    static PyObject *t_PrintWriter_close(t_PrintWriter *self, PyObject *args)
    {

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(self->object.close());
        Py_RETURN_NONE;
      }

      return callSuper(&PY_TYPE(PrintWriter), (PyObject *) self, "close", args, 2);
    }

    static PyObject *t_PrintWriter_flush(t_PrintWriter *self, PyObject *args)
    {

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(self->object.flush());
        Py_RETURN_NONE;
      }

      return callSuper(&PY_TYPE(PrintWriter), (PyObject *) self, "flush", args, 2);
    }

    static PyObject *t_PrintWriter_format(t_PrintWriter *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 2:
        {
          ::java::lang::String a0((jobject) NULL);
          JArray< ::java::lang::Object > a1((jobject) NULL);
          PrintWriter result((jobject) NULL);

          if (!parseArgs(args, "s[o", &a0, &a1))
          {
            OBJ_CALL(result = self->object.format(a0, a1));
            return t_PrintWriter::wrap_Object(result);
          }
        }
        break;
       case 3:
        {
          ::java::util::Locale a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          JArray< ::java::lang::Object > a2((jobject) NULL);
          PrintWriter result((jobject) NULL);

          if (!parseArgs(args, "ks[o", ::java::util::Locale::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.format(a0, a1, a2));
            return t_PrintWriter::wrap_Object(result);
          }
        }
      }

      PyErr_SetArgsError((PyObject *) self, "format", args);
      return NULL;
    }

    static PyObject *t_PrintWriter_print(t_PrintWriter *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          ::java::lang::Object a0((jobject) NULL);

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(self->object.print(a0));
            Py_RETURN_NONE;
          }
        }
        {
          jdouble a0;

          if (!parseArgs(args, "D", &a0))
          {
            OBJ_CALL(self->object.print(a0));
            Py_RETURN_NONE;
          }
        }
        {
          jchar a0;

          if (!parseArgs(args, "C", &a0))
          {
            OBJ_CALL(self->object.print(a0));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jchar > a0((jobject) NULL);

          if (!parseArgs(args, "[C", &a0))
          {
            OBJ_CALL(self->object.print(a0));
            Py_RETURN_NONE;
          }
        }
        {
          jboolean a0;

          if (!parseArgs(args, "Z", &a0))
          {
            OBJ_CALL(self->object.print(a0));
            Py_RETURN_NONE;
          }
        }
        {
          jint a0;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(self->object.print(a0));
            Py_RETURN_NONE;
          }
        }
        {
          ::java::lang::String a0((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(self->object.print(a0));
            Py_RETURN_NONE;
          }
        }
        {
          jfloat a0;

          if (!parseArgs(args, "F", &a0))
          {
            OBJ_CALL(self->object.print(a0));
            Py_RETURN_NONE;
          }
        }
        {
          jlong a0;

          if (!parseArgs(args, "J", &a0))
          {
            OBJ_CALL(self->object.print(a0));
            Py_RETURN_NONE;
          }
        }
      }

      PyErr_SetArgsError((PyObject *) self, "print", args);
      return NULL;
    }

    static PyObject *t_PrintWriter_printf(t_PrintWriter *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 2:
        {
          ::java::lang::String a0((jobject) NULL);
          JArray< ::java::lang::Object > a1((jobject) NULL);
          PrintWriter result((jobject) NULL);

          if (!parseArgs(args, "s[o", &a0, &a1))
          {
            OBJ_CALL(result = self->object.printf(a0, a1));
            return t_PrintWriter::wrap_Object(result);
          }
        }
        break;
       case 3:
        {
          ::java::util::Locale a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          JArray< ::java::lang::Object > a2((jobject) NULL);
          PrintWriter result((jobject) NULL);

          if (!parseArgs(args, "ks[o", ::java::util::Locale::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.printf(a0, a1, a2));
            return t_PrintWriter::wrap_Object(result);
          }
        }
      }

      PyErr_SetArgsError((PyObject *) self, "printf", args);
      return NULL;
    }

    static PyObject *t_PrintWriter_println(t_PrintWriter *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          OBJ_CALL(self->object.println());
          Py_RETURN_NONE;
        }
        break;
       case 1:
        {
          ::java::lang::String a0((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(self->object.println(a0));
            Py_RETURN_NONE;
          }
        }
        {
          jlong a0;

          if (!parseArgs(args, "J", &a0))
          {
            OBJ_CALL(self->object.println(a0));
            Py_RETURN_NONE;
          }
        }
        {
          jboolean a0;

          if (!parseArgs(args, "Z", &a0))
          {
            OBJ_CALL(self->object.println(a0));
            Py_RETURN_NONE;
          }
        }
        {
          jfloat a0;

          if (!parseArgs(args, "F", &a0))
          {
            OBJ_CALL(self->object.println(a0));
            Py_RETURN_NONE;
          }
        }
        {
          jdouble a0;

          if (!parseArgs(args, "D", &a0))
          {
            OBJ_CALL(self->object.println(a0));
            Py_RETURN_NONE;
          }
        }
        {
          jint a0;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(self->object.println(a0));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jchar > a0((jobject) NULL);

          if (!parseArgs(args, "[C", &a0))
          {
            OBJ_CALL(self->object.println(a0));
            Py_RETURN_NONE;
          }
        }
        {
          ::java::lang::Object a0((jobject) NULL);

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(self->object.println(a0));
            Py_RETURN_NONE;
          }
        }
        {
          jchar a0;

          if (!parseArgs(args, "C", &a0))
          {
            OBJ_CALL(self->object.println(a0));
            Py_RETURN_NONE;
          }
        }
      }

      PyErr_SetArgsError((PyObject *) self, "println", args);
      return NULL;
    }

    static PyObject *t_PrintWriter_write(t_PrintWriter *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          ::java::lang::String a0((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(self->object.write(a0));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jchar > a0((jobject) NULL);

          if (!parseArgs(args, "[C", &a0))
          {
            OBJ_CALL(self->object.write(a0));
            Py_RETURN_NONE;
          }
        }
        {
          jint a0;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(self->object.write(a0));
            Py_RETURN_NONE;
          }
        }
        break;
       case 3:
        {
          JArray< jchar > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[CII", &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.write(a0, a1, a2));
            Py_RETURN_NONE;
          }
        }
        {
          ::java::lang::String a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "sII", &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.write(a0, a1, a2));
            Py_RETURN_NONE;
          }
        }
      }

      return callSuper(&PY_TYPE(PrintWriter), (PyObject *) self, "write", args, 2);
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/tokenattributes/FlagsAttributeImpl.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/analysis/tokenattributes/FlagsAttribute.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {

          ::java::lang::Class *FlagsAttributeImpl::class$ = NULL;
          jmethodID *FlagsAttributeImpl::mids$ = NULL;
          bool FlagsAttributeImpl::live$ = false;

          jclass FlagsAttributeImpl::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/tokenattributes/FlagsAttributeImpl");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
              mids$[mid_copyTo_d86caa9f] = env->getMethodID(cls, "copyTo", "(Lorg/apache/lucene/util/AttributeImpl;)V");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_getFlags_54c6a179] = env->getMethodID(cls, "getFlags", "()I");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_setFlags_39c7bd3c] = env->getMethodID(cls, "setFlags", "(I)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FlagsAttributeImpl::FlagsAttributeImpl() : ::org::apache::lucene::util::AttributeImpl(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          void FlagsAttributeImpl::clear() const
          {
            env->callVoidMethod(this$, mids$[mid_clear_54c6a166]);
          }

          void FlagsAttributeImpl::copyTo(const ::org::apache::lucene::util::AttributeImpl & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_copyTo_d86caa9f], a0.this$);
          }

          jboolean FlagsAttributeImpl::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          jint FlagsAttributeImpl::getFlags() const
          {
            return env->callIntMethod(this$, mids$[mid_getFlags_54c6a179]);
          }

          jint FlagsAttributeImpl::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          void FlagsAttributeImpl::setFlags(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setFlags_39c7bd3c], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {
          static PyObject *t_FlagsAttributeImpl_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FlagsAttributeImpl_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FlagsAttributeImpl_init_(t_FlagsAttributeImpl *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FlagsAttributeImpl_clear(t_FlagsAttributeImpl *self, PyObject *args);
          static PyObject *t_FlagsAttributeImpl_copyTo(t_FlagsAttributeImpl *self, PyObject *args);
          static PyObject *t_FlagsAttributeImpl_equals(t_FlagsAttributeImpl *self, PyObject *args);
          static PyObject *t_FlagsAttributeImpl_getFlags(t_FlagsAttributeImpl *self);
          static PyObject *t_FlagsAttributeImpl_hashCode(t_FlagsAttributeImpl *self, PyObject *args);
          static PyObject *t_FlagsAttributeImpl_setFlags(t_FlagsAttributeImpl *self, PyObject *arg);
          static PyObject *t_FlagsAttributeImpl_get__flags(t_FlagsAttributeImpl *self, void *data);
          static int t_FlagsAttributeImpl_set__flags(t_FlagsAttributeImpl *self, PyObject *arg, void *data);
          static PyGetSetDef t_FlagsAttributeImpl__fields_[] = {
            DECLARE_GETSET_FIELD(t_FlagsAttributeImpl, flags),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_FlagsAttributeImpl__methods_[] = {
            DECLARE_METHOD(t_FlagsAttributeImpl, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FlagsAttributeImpl, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FlagsAttributeImpl, clear, METH_VARARGS),
            DECLARE_METHOD(t_FlagsAttributeImpl, copyTo, METH_VARARGS),
            DECLARE_METHOD(t_FlagsAttributeImpl, equals, METH_VARARGS),
            DECLARE_METHOD(t_FlagsAttributeImpl, getFlags, METH_NOARGS),
            DECLARE_METHOD(t_FlagsAttributeImpl, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_FlagsAttributeImpl, setFlags, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FlagsAttributeImpl, t_FlagsAttributeImpl, ::org::apache::lucene::util::AttributeImpl, FlagsAttributeImpl, t_FlagsAttributeImpl_init_, 0, 0, t_FlagsAttributeImpl__fields_, 0, 0);

          void t_FlagsAttributeImpl::install(PyObject *module)
          {
            installType(&PY_TYPE(FlagsAttributeImpl), module, "FlagsAttributeImpl", 0);
          }

          void t_FlagsAttributeImpl::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FlagsAttributeImpl).tp_dict, "class_", make_descriptor(FlagsAttributeImpl::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FlagsAttributeImpl).tp_dict, "wrapfn_", make_descriptor(t_FlagsAttributeImpl::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FlagsAttributeImpl).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FlagsAttributeImpl_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FlagsAttributeImpl::initializeClass, 1)))
              return NULL;
            return t_FlagsAttributeImpl::wrap_Object(FlagsAttributeImpl(((t_FlagsAttributeImpl *) arg)->object.this$));
          }
          static PyObject *t_FlagsAttributeImpl_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FlagsAttributeImpl::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FlagsAttributeImpl_init_(t_FlagsAttributeImpl *self, PyObject *args, PyObject *kwds)
          {
            FlagsAttributeImpl object((jobject) NULL);

            INT_CALL(object = FlagsAttributeImpl());
            self->object = object;

            return 0;
          }

          static PyObject *t_FlagsAttributeImpl_clear(t_FlagsAttributeImpl *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.clear());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(FlagsAttributeImpl), (PyObject *) self, "clear", args, 2);
          }

          static PyObject *t_FlagsAttributeImpl_copyTo(t_FlagsAttributeImpl *self, PyObject *args)
          {
            ::org::apache::lucene::util::AttributeImpl a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::util::AttributeImpl::initializeClass, &a0))
            {
              OBJ_CALL(self->object.copyTo(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(FlagsAttributeImpl), (PyObject *) self, "copyTo", args, 2);
          }

          static PyObject *t_FlagsAttributeImpl_equals(t_FlagsAttributeImpl *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(FlagsAttributeImpl), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_FlagsAttributeImpl_getFlags(t_FlagsAttributeImpl *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getFlags());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_FlagsAttributeImpl_hashCode(t_FlagsAttributeImpl *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(FlagsAttributeImpl), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_FlagsAttributeImpl_setFlags(t_FlagsAttributeImpl *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setFlags(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setFlags", arg);
            return NULL;
          }

          static PyObject *t_FlagsAttributeImpl_get__flags(t_FlagsAttributeImpl *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getFlags());
            return PyInt_FromLong((long) value);
          }
          static int t_FlagsAttributeImpl_set__flags(t_FlagsAttributeImpl *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setFlags(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "flags", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/tartarus/snowball/Among.h"
#include "java/lang/String.h"
#include "org/tartarus/snowball/SnowballProgram.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace tartarus {
    namespace snowball {

      ::java::lang::Class *Among::class$ = NULL;
      jmethodID *Among::mids$ = NULL;
      jfieldID *Among::fids$ = NULL;
      bool Among::live$ = false;

      jclass Among::initializeClass(bool getOnly)
      {
        if (getOnly)
          return (jclass) (live$ ? class$->this$ : NULL);
        if (class$ == NULL)
        {
          jclass cls = (jclass) env->findClass("org/tartarus/snowball/Among");

          mids$ = new jmethodID[max_mid];
          mids$[mid_init$_c253f9f9] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;IILjava/lang/String;Lorg/tartarus/snowball/SnowballProgram;)V");

          fids$ = new jfieldID[max_fid];
          fids$[fid_methodobject] = env->getFieldID(cls, "methodobject", "Lorg/tartarus/snowball/SnowballProgram;");
          fids$[fid_result] = env->getFieldID(cls, "result", "I");
          fids$[fid_s] = env->getFieldID(cls, "s", "[C");
          fids$[fid_s_size] = env->getFieldID(cls, "s_size", "I");
          fids$[fid_substring_i] = env->getFieldID(cls, "substring_i", "I");

          class$ = (::java::lang::Class *) new JObject(cls);
          live$ = true;
        }
        return (jclass) class$->this$;
      }

      Among::Among(const ::java::lang::String & a0, jint a1, jint a2, const ::java::lang::String & a3, const ::org::tartarus::snowball::SnowballProgram & a4) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_c253f9f9, a0.this$, a1, a2, a3.this$, a4.this$)) {}

      ::org::tartarus::snowball::SnowballProgram Among::_get_methodobject() const
      {
        return ::org::tartarus::snowball::SnowballProgram(env->getObjectField(this$, fids$[fid_methodobject]));
      }

      jint Among::_get_result() const
      {
        return env->getIntField(this$, fids$[fid_result]);
      }

      JArray< jchar > Among::_get_s() const
      {
        return JArray< jchar >(env->getObjectField(this$, fids$[fid_s]));
      }

      jint Among::_get_s_size() const
      {
        return env->getIntField(this$, fids$[fid_s_size]);
      }

      jint Among::_get_substring_i() const
      {
        return env->getIntField(this$, fids$[fid_substring_i]);
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      static PyObject *t_Among_cast_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_Among_instance_(PyTypeObject *type, PyObject *arg);
      static int t_Among_init_(t_Among *self, PyObject *args, PyObject *kwds);
      static PyObject *t_Among_get__methodobject(t_Among *self, void *data);
      static PyObject *t_Among_get__result(t_Among *self, void *data);
      static PyObject *t_Among_get__s(t_Among *self, void *data);
      static PyObject *t_Among_get__s_size(t_Among *self, void *data);
      static PyObject *t_Among_get__substring_i(t_Among *self, void *data);

      static PyGetSetDef t_Among__fields_[] = {
        DECLARE_GET_FIELD(t_Among, methodobject),
        DECLARE_GET_FIELD(t_Among, result),
        DECLARE_GET_FIELD(t_Among, s),
        DECLARE_GET_FIELD(t_Among, s_size),
        DECLARE_GET_FIELD(t_Among, substring_i),
        { NULL, NULL, NULL, NULL, NULL }
      };

      static PyMethodDef t_Among__methods_[] = {
        DECLARE_METHOD(t_Among, cast_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_Among, instance_, METH_O | METH_CLASS),
        { NULL, NULL, 0, NULL }
      };

      DECLARE_TYPE(Among, t_Among, ::java::lang::Object, Among, t_Among_init_, 0, 0, t_Among__fields_, 0, 0);

      void t_Among::install(PyObject *module)
      {
        installType(&PY_TYPE(Among), module, "Among", 0);
      }

      void t_Among::initialize(PyObject *module)
      {
        PyDict_SetItemString(PY_TYPE(Among).tp_dict, "class_", make_descriptor(Among::initializeClass, 1));
        PyDict_SetItemString(PY_TYPE(Among).tp_dict, "wrapfn_", make_descriptor(t_Among::wrap_jobject));
        PyDict_SetItemString(PY_TYPE(Among).tp_dict, "boxfn_", make_descriptor(boxObject));
      }

      static PyObject *t_Among_cast_(PyTypeObject *type, PyObject *arg)
      {
        if (!(arg = castCheck(arg, Among::initializeClass, 1)))
          return NULL;
        return t_Among::wrap_Object(Among(((t_Among *) arg)->object.this$));
      }
      static PyObject *t_Among_instance_(PyTypeObject *type, PyObject *arg)
      {
        if (!castCheck(arg, Among::initializeClass, 0))
          Py_RETURN_FALSE;
        Py_RETURN_TRUE;
      }

      static int t_Among_init_(t_Among *self, PyObject *args, PyObject *kwds)
      {
        ::java::lang::String a0((jobject) NULL);
        jint a1;
        jint a2;
        ::java::lang::String a3((jobject) NULL);
        ::org::tartarus::snowball::SnowballProgram a4((jobject) NULL);
        Among object((jobject) NULL);

        if (!parseArgs(args, "sIIsk", ::org::tartarus::snowball::SnowballProgram::initializeClass, &a0, &a1, &a2, &a3, &a4))
        {
          INT_CALL(object = Among(a0, a1, a2, a3, a4));
          self->object = object;
        }
        else
        {
          PyErr_SetArgsError((PyObject *) self, "__init__", args);
          return -1;
        }

        return 0;
      }

      static PyObject *t_Among_get__methodobject(t_Among *self, void *data)
      {
        ::org::tartarus::snowball::SnowballProgram value((jobject) NULL);
        OBJ_CALL(value = self->object._get_methodobject());
        return ::org::tartarus::snowball::t_SnowballProgram::wrap_Object(value);
      }

      static PyObject *t_Among_get__result(t_Among *self, void *data)
      {
        jint value;
        OBJ_CALL(value = self->object._get_result());
        return PyInt_FromLong((long) value);
      }

      static PyObject *t_Among_get__s(t_Among *self, void *data)
      {
        JArray< jchar > value((jobject) NULL);
        OBJ_CALL(value = self->object._get_s());
        return value.wrap();
      }

      static PyObject *t_Among_get__s_size(t_Among *self, void *data)
      {
        jint value;
        OBJ_CALL(value = self->object._get_s_size());
        return PyInt_FromLong((long) value);
      }

      static PyObject *t_Among_get__substring_i(t_Among *self, void *data)
      {
        jint value;
        OBJ_CALL(value = self->object._get_substring_i());
        return PyInt_FromLong((long) value);
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/vectorhighlight/WeightedFieldFragList.h"
#include "org/apache/lucene/search/vectorhighlight/FieldPhraseList$WeightedPhraseInfo.h"
#include "java/util/List.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {

          ::java::lang::Class *WeightedFieldFragList::class$ = NULL;
          jmethodID *WeightedFieldFragList::mids$ = NULL;
          bool WeightedFieldFragList::live$ = false;

          jclass WeightedFieldFragList::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/vectorhighlight/WeightedFieldFragList");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
              mids$[mid_add_21fbeb2b] = env->getMethodID(cls, "add", "(IILjava/util/List;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          WeightedFieldFragList::WeightedFieldFragList(jint a0) : ::org::apache::lucene::search::vectorhighlight::FieldFragList(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

          void WeightedFieldFragList::add(jint a0, jint a1, const ::java::util::List & a2) const
          {
            env->callVoidMethod(this$, mids$[mid_add_21fbeb2b], a0, a1, a2.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {
          static PyObject *t_WeightedFieldFragList_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_WeightedFieldFragList_instance_(PyTypeObject *type, PyObject *arg);
          static int t_WeightedFieldFragList_init_(t_WeightedFieldFragList *self, PyObject *args, PyObject *kwds);
          static PyObject *t_WeightedFieldFragList_add(t_WeightedFieldFragList *self, PyObject *args);

          static PyMethodDef t_WeightedFieldFragList__methods_[] = {
            DECLARE_METHOD(t_WeightedFieldFragList, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_WeightedFieldFragList, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_WeightedFieldFragList, add, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(WeightedFieldFragList, t_WeightedFieldFragList, ::org::apache::lucene::search::vectorhighlight::FieldFragList, WeightedFieldFragList, t_WeightedFieldFragList_init_, 0, 0, 0, 0, 0);

          void t_WeightedFieldFragList::install(PyObject *module)
          {
            installType(&PY_TYPE(WeightedFieldFragList), module, "WeightedFieldFragList", 0);
          }

          void t_WeightedFieldFragList::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(WeightedFieldFragList).tp_dict, "class_", make_descriptor(WeightedFieldFragList::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(WeightedFieldFragList).tp_dict, "wrapfn_", make_descriptor(t_WeightedFieldFragList::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(WeightedFieldFragList).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_WeightedFieldFragList_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, WeightedFieldFragList::initializeClass, 1)))
              return NULL;
            return t_WeightedFieldFragList::wrap_Object(WeightedFieldFragList(((t_WeightedFieldFragList *) arg)->object.this$));
          }
          static PyObject *t_WeightedFieldFragList_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, WeightedFieldFragList::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_WeightedFieldFragList_init_(t_WeightedFieldFragList *self, PyObject *args, PyObject *kwds)
          {
            jint a0;
            WeightedFieldFragList object((jobject) NULL);

            if (!parseArgs(args, "I", &a0))
            {
              INT_CALL(object = WeightedFieldFragList(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_WeightedFieldFragList_add(t_WeightedFieldFragList *self, PyObject *args)
          {
            jint a0;
            jint a1;
            ::java::util::List a2((jobject) NULL);
            PyTypeObject **p2;

            if (!parseArgs(args, "IIK", ::java::util::List::initializeClass, &a0, &a1, &a2, &p2, ::java::util::t_List::parameters_))
            {
              OBJ_CALL(self->object.add(a0, a1, a2));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(WeightedFieldFragList), (PyObject *) self, "add", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/MultiFacets.h"
#include "org/apache/lucene/facet/FacetResult.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "java/util/List.h"
#include "java/lang/Number.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {

        ::java::lang::Class *MultiFacets::class$ = NULL;
        jmethodID *MultiFacets::mids$ = NULL;
        bool MultiFacets::live$ = false;

        jclass MultiFacets::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/facet/MultiFacets");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
            mids$[mid_init$_5c6c1e1e] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;Lorg/apache/lucene/facet/Facets;)V");
            mids$[mid_getAllDims_cdc2a528] = env->getMethodID(cls, "getAllDims", "(I)Ljava/util/List;");
            mids$[mid_getSpecificValue_8ecbcac9] = env->getMethodID(cls, "getSpecificValue", "(Ljava/lang/String;[Ljava/lang/String;)Ljava/lang/Number;");
            mids$[mid_getTopChildren_37e8c044] = env->getMethodID(cls, "getTopChildren", "(ILjava/lang/String;[Ljava/lang/String;)Lorg/apache/lucene/facet/FacetResult;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        MultiFacets::MultiFacets(const ::java::util::Map & a0) : ::org::apache::lucene::facet::Facets(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

        MultiFacets::MultiFacets(const ::java::util::Map & a0, const ::org::apache::lucene::facet::Facets & a1) : ::org::apache::lucene::facet::Facets(env->newObject(initializeClass, &mids$, mid_init$_5c6c1e1e, a0.this$, a1.this$)) {}

        ::java::util::List MultiFacets::getAllDims(jint a0) const
        {
          return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getAllDims_cdc2a528], a0));
        }

        ::java::lang::Number MultiFacets::getSpecificValue(const ::java::lang::String & a0, const JArray< ::java::lang::String > & a1) const
        {
          return ::java::lang::Number(env->callObjectMethod(this$, mids$[mid_getSpecificValue_8ecbcac9], a0.this$, a1.this$));
        }

        ::org::apache::lucene::facet::FacetResult MultiFacets::getTopChildren(jint a0, const ::java::lang::String & a1, const JArray< ::java::lang::String > & a2) const
        {
          return ::org::apache::lucene::facet::FacetResult(env->callObjectMethod(this$, mids$[mid_getTopChildren_37e8c044], a0, a1.this$, a2.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        static PyObject *t_MultiFacets_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiFacets_instance_(PyTypeObject *type, PyObject *arg);
        static int t_MultiFacets_init_(t_MultiFacets *self, PyObject *args, PyObject *kwds);
        static PyObject *t_MultiFacets_getAllDims(t_MultiFacets *self, PyObject *args);
        static PyObject *t_MultiFacets_getSpecificValue(t_MultiFacets *self, PyObject *args);
        static PyObject *t_MultiFacets_getTopChildren(t_MultiFacets *self, PyObject *args);

        static PyMethodDef t_MultiFacets__methods_[] = {
          DECLARE_METHOD(t_MultiFacets, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiFacets, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiFacets, getAllDims, METH_VARARGS),
          DECLARE_METHOD(t_MultiFacets, getSpecificValue, METH_VARARGS),
          DECLARE_METHOD(t_MultiFacets, getTopChildren, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MultiFacets, t_MultiFacets, ::org::apache::lucene::facet::Facets, MultiFacets, t_MultiFacets_init_, 0, 0, 0, 0, 0);

        void t_MultiFacets::install(PyObject *module)
        {
          installType(&PY_TYPE(MultiFacets), module, "MultiFacets", 0);
        }

        void t_MultiFacets::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MultiFacets).tp_dict, "class_", make_descriptor(MultiFacets::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MultiFacets).tp_dict, "wrapfn_", make_descriptor(t_MultiFacets::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MultiFacets).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MultiFacets_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MultiFacets::initializeClass, 1)))
            return NULL;
          return t_MultiFacets::wrap_Object(MultiFacets(((t_MultiFacets *) arg)->object.this$));
        }
        static PyObject *t_MultiFacets_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MultiFacets::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_MultiFacets_init_(t_MultiFacets *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              MultiFacets object((jobject) NULL);

              if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
              {
                INT_CALL(object = MultiFacets(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::facet::Facets a1((jobject) NULL);
              MultiFacets object((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::facet::Facets::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                INT_CALL(object = MultiFacets(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_MultiFacets_getAllDims(t_MultiFacets *self, PyObject *args)
        {
          jint a0;
          ::java::util::List result((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.getAllDims(a0));
            return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::facet::PY_TYPE(FacetResult));
          }

          return callSuper(&PY_TYPE(MultiFacets), (PyObject *) self, "getAllDims", args, 2);
        }

        static PyObject *t_MultiFacets_getSpecificValue(t_MultiFacets *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          JArray< ::java::lang::String > a1((jobject) NULL);
          ::java::lang::Number result((jobject) NULL);

          if (!parseArgs(args, "s[s", &a0, &a1))
          {
            OBJ_CALL(result = self->object.getSpecificValue(a0, a1));
            return ::java::lang::t_Number::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(MultiFacets), (PyObject *) self, "getSpecificValue", args, 2);
        }

        static PyObject *t_MultiFacets_getTopChildren(t_MultiFacets *self, PyObject *args)
        {
          jint a0;
          ::java::lang::String a1((jobject) NULL);
          JArray< ::java::lang::String > a2((jobject) NULL);
          ::org::apache::lucene::facet::FacetResult result((jobject) NULL);

          if (!parseArgs(args, "Is[s", &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.getTopChildren(a0, a1, a2));
            return ::org::apache::lucene::facet::t_FacetResult::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(MultiFacets), (PyObject *) self, "getTopChildren", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/DocTermOrdsRangeFilter.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/Bits.h"
#include "org/apache/lucene/search/DocIdSet.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *DocTermOrdsRangeFilter::class$ = NULL;
        jmethodID *DocTermOrdsRangeFilter::mids$ = NULL;
        bool DocTermOrdsRangeFilter::live$ = false;

        jclass DocTermOrdsRangeFilter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/DocTermOrdsRangeFilter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_getDocIdSet_ccce0897] = env->getMethodID(cls, "getDocIdSet", "(Lorg/apache/lucene/index/AtomicReaderContext;Lorg/apache/lucene/util/Bits;)Lorg/apache/lucene/search/DocIdSet;");
            mids$[mid_getField_14c7b5c5] = env->getMethodID(cls, "getField", "()Ljava/lang/String;");
            mids$[mid_getLowerVal_4ae19461] = env->getMethodID(cls, "getLowerVal", "()Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_getUpperVal_4ae19461] = env->getMethodID(cls, "getUpperVal", "()Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_includesLower_54c6a16a] = env->getMethodID(cls, "includesLower", "()Z");
            mids$[mid_includesUpper_54c6a16a] = env->getMethodID(cls, "includesUpper", "()Z");
            mids$[mid_newBytesRefRange_a12b5d0e] = env->getStaticMethodID(cls, "newBytesRefRange", "(Ljava/lang/String;Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/util/BytesRef;ZZ)Lorg/apache/lucene/search/DocTermOrdsRangeFilter;");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jboolean DocTermOrdsRangeFilter::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        ::org::apache::lucene::search::DocIdSet DocTermOrdsRangeFilter::getDocIdSet(const ::org::apache::lucene::index::AtomicReaderContext & a0, const ::org::apache::lucene::util::Bits & a1) const
        {
          return ::org::apache::lucene::search::DocIdSet(env->callObjectMethod(this$, mids$[mid_getDocIdSet_ccce0897], a0.this$, a1.this$));
        }

        ::java::lang::String DocTermOrdsRangeFilter::getField() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getField_14c7b5c5]));
        }

        ::org::apache::lucene::util::BytesRef DocTermOrdsRangeFilter::getLowerVal() const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_getLowerVal_4ae19461]));
        }

        ::org::apache::lucene::util::BytesRef DocTermOrdsRangeFilter::getUpperVal() const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_getUpperVal_4ae19461]));
        }

        jint DocTermOrdsRangeFilter::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jboolean DocTermOrdsRangeFilter::includesLower() const
        {
          return env->callBooleanMethod(this$, mids$[mid_includesLower_54c6a16a]);
        }

        jboolean DocTermOrdsRangeFilter::includesUpper() const
        {
          return env->callBooleanMethod(this$, mids$[mid_includesUpper_54c6a16a]);
        }

        DocTermOrdsRangeFilter DocTermOrdsRangeFilter::newBytesRefRange(const ::java::lang::String & a0, const ::org::apache::lucene::util::BytesRef & a1, const ::org::apache::lucene::util::BytesRef & a2, jboolean a3, jboolean a4)
        {
          jclass cls = env->getClass(initializeClass);
          return DocTermOrdsRangeFilter(env->callStaticObjectMethod(cls, mids$[mid_newBytesRefRange_a12b5d0e], a0.this$, a1.this$, a2.this$, a3, a4));
        }

        ::java::lang::String DocTermOrdsRangeFilter::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_DocTermOrdsRangeFilter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DocTermOrdsRangeFilter_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DocTermOrdsRangeFilter_equals(t_DocTermOrdsRangeFilter *self, PyObject *args);
        static PyObject *t_DocTermOrdsRangeFilter_getDocIdSet(t_DocTermOrdsRangeFilter *self, PyObject *args);
        static PyObject *t_DocTermOrdsRangeFilter_getField(t_DocTermOrdsRangeFilter *self);
        static PyObject *t_DocTermOrdsRangeFilter_getLowerVal(t_DocTermOrdsRangeFilter *self);
        static PyObject *t_DocTermOrdsRangeFilter_getUpperVal(t_DocTermOrdsRangeFilter *self);
        static PyObject *t_DocTermOrdsRangeFilter_hashCode(t_DocTermOrdsRangeFilter *self, PyObject *args);
        static PyObject *t_DocTermOrdsRangeFilter_includesLower(t_DocTermOrdsRangeFilter *self);
        static PyObject *t_DocTermOrdsRangeFilter_includesUpper(t_DocTermOrdsRangeFilter *self);
        static PyObject *t_DocTermOrdsRangeFilter_newBytesRefRange(PyTypeObject *type, PyObject *args);
        static PyObject *t_DocTermOrdsRangeFilter_toString(t_DocTermOrdsRangeFilter *self, PyObject *args);
        static PyObject *t_DocTermOrdsRangeFilter_get__field(t_DocTermOrdsRangeFilter *self, void *data);
        static PyObject *t_DocTermOrdsRangeFilter_get__lowerVal(t_DocTermOrdsRangeFilter *self, void *data);
        static PyObject *t_DocTermOrdsRangeFilter_get__upperVal(t_DocTermOrdsRangeFilter *self, void *data);
        static PyGetSetDef t_DocTermOrdsRangeFilter__fields_[] = {
          DECLARE_GET_FIELD(t_DocTermOrdsRangeFilter, field),
          DECLARE_GET_FIELD(t_DocTermOrdsRangeFilter, lowerVal),
          DECLARE_GET_FIELD(t_DocTermOrdsRangeFilter, upperVal),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_DocTermOrdsRangeFilter__methods_[] = {
          DECLARE_METHOD(t_DocTermOrdsRangeFilter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DocTermOrdsRangeFilter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DocTermOrdsRangeFilter, equals, METH_VARARGS),
          DECLARE_METHOD(t_DocTermOrdsRangeFilter, getDocIdSet, METH_VARARGS),
          DECLARE_METHOD(t_DocTermOrdsRangeFilter, getField, METH_NOARGS),
          DECLARE_METHOD(t_DocTermOrdsRangeFilter, getLowerVal, METH_NOARGS),
          DECLARE_METHOD(t_DocTermOrdsRangeFilter, getUpperVal, METH_NOARGS),
          DECLARE_METHOD(t_DocTermOrdsRangeFilter, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_DocTermOrdsRangeFilter, includesLower, METH_NOARGS),
          DECLARE_METHOD(t_DocTermOrdsRangeFilter, includesUpper, METH_NOARGS),
          DECLARE_METHOD(t_DocTermOrdsRangeFilter, newBytesRefRange, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_DocTermOrdsRangeFilter, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(DocTermOrdsRangeFilter, t_DocTermOrdsRangeFilter, ::org::apache::lucene::search::Filter, DocTermOrdsRangeFilter, abstract_init, 0, 0, t_DocTermOrdsRangeFilter__fields_, 0, 0);

        void t_DocTermOrdsRangeFilter::install(PyObject *module)
        {
          installType(&PY_TYPE(DocTermOrdsRangeFilter), module, "DocTermOrdsRangeFilter", 0);
        }

        void t_DocTermOrdsRangeFilter::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(DocTermOrdsRangeFilter).tp_dict, "class_", make_descriptor(DocTermOrdsRangeFilter::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(DocTermOrdsRangeFilter).tp_dict, "wrapfn_", make_descriptor(t_DocTermOrdsRangeFilter::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(DocTermOrdsRangeFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_DocTermOrdsRangeFilter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, DocTermOrdsRangeFilter::initializeClass, 1)))
            return NULL;
          return t_DocTermOrdsRangeFilter::wrap_Object(DocTermOrdsRangeFilter(((t_DocTermOrdsRangeFilter *) arg)->object.this$));
        }
        static PyObject *t_DocTermOrdsRangeFilter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, DocTermOrdsRangeFilter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_DocTermOrdsRangeFilter_equals(t_DocTermOrdsRangeFilter *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(DocTermOrdsRangeFilter), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_DocTermOrdsRangeFilter_getDocIdSet(t_DocTermOrdsRangeFilter *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
          ::org::apache::lucene::util::Bits a1((jobject) NULL);
          ::org::apache::lucene::search::DocIdSet result((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.getDocIdSet(a0, a1));
            return ::org::apache::lucene::search::t_DocIdSet::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(DocTermOrdsRangeFilter), (PyObject *) self, "getDocIdSet", args, 2);
        }

        static PyObject *t_DocTermOrdsRangeFilter_getField(t_DocTermOrdsRangeFilter *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.getField());
          return j2p(result);
        }

        static PyObject *t_DocTermOrdsRangeFilter_getLowerVal(t_DocTermOrdsRangeFilter *self)
        {
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);
          OBJ_CALL(result = self->object.getLowerVal());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
        }

        static PyObject *t_DocTermOrdsRangeFilter_getUpperVal(t_DocTermOrdsRangeFilter *self)
        {
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);
          OBJ_CALL(result = self->object.getUpperVal());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
        }

        static PyObject *t_DocTermOrdsRangeFilter_hashCode(t_DocTermOrdsRangeFilter *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(DocTermOrdsRangeFilter), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_DocTermOrdsRangeFilter_includesLower(t_DocTermOrdsRangeFilter *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.includesLower());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_DocTermOrdsRangeFilter_includesUpper(t_DocTermOrdsRangeFilter *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.includesUpper());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_DocTermOrdsRangeFilter_newBytesRefRange(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
          ::org::apache::lucene::util::BytesRef a2((jobject) NULL);
          jboolean a3;
          jboolean a4;
          DocTermOrdsRangeFilter result((jobject) NULL);

          if (!parseArgs(args, "skkZZ", ::org::apache::lucene::util::BytesRef::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2, &a3, &a4))
          {
            OBJ_CALL(result = ::org::apache::lucene::search::DocTermOrdsRangeFilter::newBytesRefRange(a0, a1, a2, a3, a4));
            return t_DocTermOrdsRangeFilter::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "newBytesRefRange", args);
          return NULL;
        }

        static PyObject *t_DocTermOrdsRangeFilter_toString(t_DocTermOrdsRangeFilter *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(DocTermOrdsRangeFilter), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_DocTermOrdsRangeFilter_get__field(t_DocTermOrdsRangeFilter *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object.getField());
          return j2p(value);
        }

        static PyObject *t_DocTermOrdsRangeFilter_get__lowerVal(t_DocTermOrdsRangeFilter *self, void *data)
        {
          ::org::apache::lucene::util::BytesRef value((jobject) NULL);
          OBJ_CALL(value = self->object.getLowerVal());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(value);
        }

        static PyObject *t_DocTermOrdsRangeFilter_get__upperVal(t_DocTermOrdsRangeFilter *self, void *data)
        {
          ::org::apache::lucene::util::BytesRef value((jobject) NULL);
          OBJ_CALL(value = self->object.getUpperVal());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/sandbox/queries/regex/RegexQueryCapable.h"
#include "org/apache/lucene/sandbox/queries/regex/RegexCapabilities.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace sandbox {
        namespace queries {
          namespace regex {

            ::java::lang::Class *RegexQueryCapable::class$ = NULL;
            jmethodID *RegexQueryCapable::mids$ = NULL;
            bool RegexQueryCapable::live$ = false;

            jclass RegexQueryCapable::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/sandbox/queries/regex/RegexQueryCapable");

                mids$ = new jmethodID[max_mid];
                mids$[mid_getRegexImplementation_814365f4] = env->getMethodID(cls, "getRegexImplementation", "()Lorg/apache/lucene/sandbox/queries/regex/RegexCapabilities;");
                mids$[mid_setRegexImplementation_06bf498d] = env->getMethodID(cls, "setRegexImplementation", "(Lorg/apache/lucene/sandbox/queries/regex/RegexCapabilities;)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            ::org::apache::lucene::sandbox::queries::regex::RegexCapabilities RegexQueryCapable::getRegexImplementation() const
            {
              return ::org::apache::lucene::sandbox::queries::regex::RegexCapabilities(env->callObjectMethod(this$, mids$[mid_getRegexImplementation_814365f4]));
            }

            void RegexQueryCapable::setRegexImplementation(const ::org::apache::lucene::sandbox::queries::regex::RegexCapabilities & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setRegexImplementation_06bf498d], a0.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace sandbox {
        namespace queries {
          namespace regex {
            static PyObject *t_RegexQueryCapable_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_RegexQueryCapable_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_RegexQueryCapable_getRegexImplementation(t_RegexQueryCapable *self);
            static PyObject *t_RegexQueryCapable_setRegexImplementation(t_RegexQueryCapable *self, PyObject *arg);
            static PyObject *t_RegexQueryCapable_get__regexImplementation(t_RegexQueryCapable *self, void *data);
            static int t_RegexQueryCapable_set__regexImplementation(t_RegexQueryCapable *self, PyObject *arg, void *data);
            static PyGetSetDef t_RegexQueryCapable__fields_[] = {
              DECLARE_GETSET_FIELD(t_RegexQueryCapable, regexImplementation),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_RegexQueryCapable__methods_[] = {
              DECLARE_METHOD(t_RegexQueryCapable, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_RegexQueryCapable, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_RegexQueryCapable, getRegexImplementation, METH_NOARGS),
              DECLARE_METHOD(t_RegexQueryCapable, setRegexImplementation, METH_O),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(RegexQueryCapable, t_RegexQueryCapable, ::java::lang::Object, RegexQueryCapable, abstract_init, 0, 0, t_RegexQueryCapable__fields_, 0, 0);

            void t_RegexQueryCapable::install(PyObject *module)
            {
              installType(&PY_TYPE(RegexQueryCapable), module, "RegexQueryCapable", 0);
            }

            void t_RegexQueryCapable::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(RegexQueryCapable).tp_dict, "class_", make_descriptor(RegexQueryCapable::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(RegexQueryCapable).tp_dict, "wrapfn_", make_descriptor(t_RegexQueryCapable::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(RegexQueryCapable).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_RegexQueryCapable_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, RegexQueryCapable::initializeClass, 1)))
                return NULL;
              return t_RegexQueryCapable::wrap_Object(RegexQueryCapable(((t_RegexQueryCapable *) arg)->object.this$));
            }
            static PyObject *t_RegexQueryCapable_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, RegexQueryCapable::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_RegexQueryCapable_getRegexImplementation(t_RegexQueryCapable *self)
            {
              ::org::apache::lucene::sandbox::queries::regex::RegexCapabilities result((jobject) NULL);
              OBJ_CALL(result = self->object.getRegexImplementation());
              return ::org::apache::lucene::sandbox::queries::regex::t_RegexCapabilities::wrap_Object(result);
            }

            static PyObject *t_RegexQueryCapable_setRegexImplementation(t_RegexQueryCapable *self, PyObject *arg)
            {
              ::org::apache::lucene::sandbox::queries::regex::RegexCapabilities a0((jobject) NULL);

              if (!parseArg(arg, "k", ::org::apache::lucene::sandbox::queries::regex::RegexCapabilities::initializeClass, &a0))
              {
                OBJ_CALL(self->object.setRegexImplementation(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setRegexImplementation", arg);
              return NULL;
            }

            static PyObject *t_RegexQueryCapable_get__regexImplementation(t_RegexQueryCapable *self, void *data)
            {
              ::org::apache::lucene::sandbox::queries::regex::RegexCapabilities value((jobject) NULL);
              OBJ_CALL(value = self->object.getRegexImplementation());
              return ::org::apache::lucene::sandbox::queries::regex::t_RegexCapabilities::wrap_Object(value);
            }
            static int t_RegexQueryCapable_set__regexImplementation(t_RegexQueryCapable *self, PyObject *arg, void *data)
            {
              {
                ::org::apache::lucene::sandbox::queries::regex::RegexCapabilities value((jobject) NULL);
                if (!parseArg(arg, "k", ::org::apache::lucene::sandbox::queries::regex::RegexCapabilities::initializeClass, &value))
                {
                  INT_CALL(self->object.setRegexImplementation(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "regexImplementation", arg);
              return -1;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/compressing/CompressingStoredFieldsReader.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/StoredFieldVisitor.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "org/apache/lucene/store/IOContext.h"
#include "org/apache/lucene/codecs/compressing/CompressionMode.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace compressing {

          ::java::lang::Class *CompressingStoredFieldsReader::class$ = NULL;
          jmethodID *CompressingStoredFieldsReader::mids$ = NULL;
          bool CompressingStoredFieldsReader::live$ = false;

          jclass CompressingStoredFieldsReader::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/compressing/CompressingStoredFieldsReader");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_846e12dd] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/SegmentInfo;Ljava/lang/String;Lorg/apache/lucene/index/FieldInfos;Lorg/apache/lucene/store/IOContext;Ljava/lang/String;Lorg/apache/lucene/codecs/compressing/CompressionMode;)V");
              mids$[mid_checkIntegrity_54c6a166] = env->getMethodID(cls, "checkIntegrity", "()V");
              mids$[mid_clone_ef585f0d] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/codecs/StoredFieldsReader;");
              mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
              mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");
              mids$[mid_visitDocument_a2ea3ebe] = env->getMethodID(cls, "visitDocument", "(ILorg/apache/lucene/index/StoredFieldVisitor;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CompressingStoredFieldsReader::CompressingStoredFieldsReader(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::SegmentInfo & a1, const ::java::lang::String & a2, const ::org::apache::lucene::index::FieldInfos & a3, const ::org::apache::lucene::store::IOContext & a4, const ::java::lang::String & a5, const ::org::apache::lucene::codecs::compressing::CompressionMode & a6) : ::org::apache::lucene::codecs::StoredFieldsReader(env->newObject(initializeClass, &mids$, mid_init$_846e12dd, a0.this$, a1.this$, a2.this$, a3.this$, a4.this$, a5.this$, a6.this$)) {}

          void CompressingStoredFieldsReader::checkIntegrity() const
          {
            env->callVoidMethod(this$, mids$[mid_checkIntegrity_54c6a166]);
          }

          ::org::apache::lucene::codecs::StoredFieldsReader CompressingStoredFieldsReader::clone() const
          {
            return ::org::apache::lucene::codecs::StoredFieldsReader(env->callObjectMethod(this$, mids$[mid_clone_ef585f0d]));
          }

          void CompressingStoredFieldsReader::close() const
          {
            env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
          }

          jlong CompressingStoredFieldsReader::ramBytesUsed() const
          {
            return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
          }

          void CompressingStoredFieldsReader::visitDocument(jint a0, const ::org::apache::lucene::index::StoredFieldVisitor & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_visitDocument_a2ea3ebe], a0, a1.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace compressing {
          static PyObject *t_CompressingStoredFieldsReader_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CompressingStoredFieldsReader_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CompressingStoredFieldsReader_init_(t_CompressingStoredFieldsReader *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CompressingStoredFieldsReader_checkIntegrity(t_CompressingStoredFieldsReader *self, PyObject *args);
          static PyObject *t_CompressingStoredFieldsReader_clone(t_CompressingStoredFieldsReader *self, PyObject *args);
          static PyObject *t_CompressingStoredFieldsReader_close(t_CompressingStoredFieldsReader *self, PyObject *args);
          static PyObject *t_CompressingStoredFieldsReader_ramBytesUsed(t_CompressingStoredFieldsReader *self, PyObject *args);
          static PyObject *t_CompressingStoredFieldsReader_visitDocument(t_CompressingStoredFieldsReader *self, PyObject *args);

          static PyMethodDef t_CompressingStoredFieldsReader__methods_[] = {
            DECLARE_METHOD(t_CompressingStoredFieldsReader, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CompressingStoredFieldsReader, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CompressingStoredFieldsReader, checkIntegrity, METH_VARARGS),
            DECLARE_METHOD(t_CompressingStoredFieldsReader, clone, METH_VARARGS),
            DECLARE_METHOD(t_CompressingStoredFieldsReader, close, METH_VARARGS),
            DECLARE_METHOD(t_CompressingStoredFieldsReader, ramBytesUsed, METH_VARARGS),
            DECLARE_METHOD(t_CompressingStoredFieldsReader, visitDocument, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CompressingStoredFieldsReader, t_CompressingStoredFieldsReader, ::org::apache::lucene::codecs::StoredFieldsReader, CompressingStoredFieldsReader, t_CompressingStoredFieldsReader_init_, 0, 0, 0, 0, 0);

          void t_CompressingStoredFieldsReader::install(PyObject *module)
          {
            installType(&PY_TYPE(CompressingStoredFieldsReader), module, "CompressingStoredFieldsReader", 0);
          }

          void t_CompressingStoredFieldsReader::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CompressingStoredFieldsReader).tp_dict, "class_", make_descriptor(CompressingStoredFieldsReader::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CompressingStoredFieldsReader).tp_dict, "wrapfn_", make_descriptor(t_CompressingStoredFieldsReader::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CompressingStoredFieldsReader).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CompressingStoredFieldsReader_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CompressingStoredFieldsReader::initializeClass, 1)))
              return NULL;
            return t_CompressingStoredFieldsReader::wrap_Object(CompressingStoredFieldsReader(((t_CompressingStoredFieldsReader *) arg)->object.this$));
          }
          static PyObject *t_CompressingStoredFieldsReader_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CompressingStoredFieldsReader::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CompressingStoredFieldsReader_init_(t_CompressingStoredFieldsReader *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::store::Directory a0((jobject) NULL);
            ::org::apache::lucene::index::SegmentInfo a1((jobject) NULL);
            ::java::lang::String a2((jobject) NULL);
            ::org::apache::lucene::index::FieldInfos a3((jobject) NULL);
            ::org::apache::lucene::store::IOContext a4((jobject) NULL);
            ::java::lang::String a5((jobject) NULL);
            ::org::apache::lucene::codecs::compressing::CompressionMode a6((jobject) NULL);
            CompressingStoredFieldsReader object((jobject) NULL);

            if (!parseArgs(args, "kkskksk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::SegmentInfo::initializeClass, ::org::apache::lucene::index::FieldInfos::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, ::org::apache::lucene::codecs::compressing::CompressionMode::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5, &a6))
            {
              INT_CALL(object = CompressingStoredFieldsReader(a0, a1, a2, a3, a4, a5, a6));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_CompressingStoredFieldsReader_checkIntegrity(t_CompressingStoredFieldsReader *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.checkIntegrity());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(CompressingStoredFieldsReader), (PyObject *) self, "checkIntegrity", args, 2);
          }

          static PyObject *t_CompressingStoredFieldsReader_clone(t_CompressingStoredFieldsReader *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::StoredFieldsReader result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.clone());
              return ::org::apache::lucene::codecs::t_StoredFieldsReader::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(CompressingStoredFieldsReader), (PyObject *) self, "clone", args, 2);
          }

          static PyObject *t_CompressingStoredFieldsReader_close(t_CompressingStoredFieldsReader *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.close());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(CompressingStoredFieldsReader), (PyObject *) self, "close", args, 2);
          }

          static PyObject *t_CompressingStoredFieldsReader_ramBytesUsed(t_CompressingStoredFieldsReader *self, PyObject *args)
          {
            jlong result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.ramBytesUsed());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(&PY_TYPE(CompressingStoredFieldsReader), (PyObject *) self, "ramBytesUsed", args, 2);
          }

          static PyObject *t_CompressingStoredFieldsReader_visitDocument(t_CompressingStoredFieldsReader *self, PyObject *args)
          {
            jint a0;
            ::org::apache::lucene::index::StoredFieldVisitor a1((jobject) NULL);

            if (!parseArgs(args, "Ik", ::org::apache::lucene::index::StoredFieldVisitor::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.visitDocument(a0, a1));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(CompressingStoredFieldsReader), (PyObject *) self, "visitDocument", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/NamedThreadFactory.h"
#include "java/util/concurrent/ThreadFactory.h"
#include "java/lang/Thread.h"
#include "java/lang/String.h"
#include "java/lang/Runnable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *NamedThreadFactory::class$ = NULL;
        jmethodID *NamedThreadFactory::mids$ = NULL;
        bool NamedThreadFactory::live$ = false;

        jclass NamedThreadFactory::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/NamedThreadFactory");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
            mids$[mid_newThread_9e58833c] = env->getMethodID(cls, "newThread", "(Ljava/lang/Runnable;)Ljava/lang/Thread;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        NamedThreadFactory::NamedThreadFactory(const ::java::lang::String & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

        ::java::lang::Thread NamedThreadFactory::newThread(const ::java::lang::Runnable & a0) const
        {
          return ::java::lang::Thread(env->callObjectMethod(this$, mids$[mid_newThread_9e58833c], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_NamedThreadFactory_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NamedThreadFactory_instance_(PyTypeObject *type, PyObject *arg);
        static int t_NamedThreadFactory_init_(t_NamedThreadFactory *self, PyObject *args, PyObject *kwds);
        static PyObject *t_NamedThreadFactory_newThread(t_NamedThreadFactory *self, PyObject *arg);

        static PyMethodDef t_NamedThreadFactory__methods_[] = {
          DECLARE_METHOD(t_NamedThreadFactory, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NamedThreadFactory, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NamedThreadFactory, newThread, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(NamedThreadFactory, t_NamedThreadFactory, ::java::lang::Object, NamedThreadFactory, t_NamedThreadFactory_init_, 0, 0, 0, 0, 0);

        void t_NamedThreadFactory::install(PyObject *module)
        {
          installType(&PY_TYPE(NamedThreadFactory), module, "NamedThreadFactory", 0);
        }

        void t_NamedThreadFactory::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(NamedThreadFactory).tp_dict, "class_", make_descriptor(NamedThreadFactory::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(NamedThreadFactory).tp_dict, "wrapfn_", make_descriptor(t_NamedThreadFactory::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(NamedThreadFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_NamedThreadFactory_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, NamedThreadFactory::initializeClass, 1)))
            return NULL;
          return t_NamedThreadFactory::wrap_Object(NamedThreadFactory(((t_NamedThreadFactory *) arg)->object.this$));
        }
        static PyObject *t_NamedThreadFactory_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, NamedThreadFactory::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_NamedThreadFactory_init_(t_NamedThreadFactory *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::String a0((jobject) NULL);
          NamedThreadFactory object((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            INT_CALL(object = NamedThreadFactory(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_NamedThreadFactory_newThread(t_NamedThreadFactory *self, PyObject *arg)
        {
          ::java::lang::Runnable a0((jobject) NULL);
          ::java::lang::Thread result((jobject) NULL);

          if (!parseArg(arg, "k", ::java::lang::Runnable::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.newThread(a0));
            return ::java::lang::t_Thread::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "newThread", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/egothor/stemmer/MultiTrie.h"
#include "java/lang/Class.h"
#include "java/io/DataOutput.h"
#include "java/lang/CharSequence.h"
#include "java/io/PrintStream.h"
#include "org/egothor/stemmer/Reduce.h"
#include "java/io/DataInput.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace egothor {
    namespace stemmer {

      ::java::lang::Class *MultiTrie::class$ = NULL;
      jmethodID *MultiTrie::mids$ = NULL;
      bool MultiTrie::live$ = false;

      jclass MultiTrie::initializeClass(bool getOnly)
      {
        if (getOnly)
          return (jclass) (live$ ? class$->this$ : NULL);
        if (class$ == NULL)
        {
          jclass cls = (jclass) env->findClass("org/egothor/stemmer/MultiTrie");

          mids$ = new jmethodID[max_mid];
          mids$[mid_init$_e051d6a6] = env->getMethodID(cls, "<init>", "(Ljava/io/DataInput;)V");
          mids$[mid_init$_bb0c767f] = env->getMethodID(cls, "<init>", "(Z)V");
          mids$[mid_add_db1d05ae] = env->getMethodID(cls, "add", "(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)V");
          mids$[mid_getFully_856f5013] = env->getMethodID(cls, "getFully", "(Ljava/lang/CharSequence;)Ljava/lang/CharSequence;");
          mids$[mid_getLastOnPath_856f5013] = env->getMethodID(cls, "getLastOnPath", "(Ljava/lang/CharSequence;)Ljava/lang/CharSequence;");
          mids$[mid_printInfo_bd6af9ff] = env->getMethodID(cls, "printInfo", "(Ljava/io/PrintStream;Ljava/lang/CharSequence;)V");
          mids$[mid_reduce_6ee87cd1] = env->getMethodID(cls, "reduce", "(Lorg/egothor/stemmer/Reduce;)Lorg/egothor/stemmer/Trie;");
          mids$[mid_store_cfb051e6] = env->getMethodID(cls, "store", "(Ljava/io/DataOutput;)V");

          class$ = (::java::lang::Class *) new JObject(cls);
          live$ = true;
        }
        return (jclass) class$->this$;
      }

      MultiTrie::MultiTrie(const ::java::io::DataInput & a0) : ::org::egothor::stemmer::Trie(env->newObject(initializeClass, &mids$, mid_init$_e051d6a6, a0.this$)) {}

      MultiTrie::MultiTrie(jboolean a0) : ::org::egothor::stemmer::Trie(env->newObject(initializeClass, &mids$, mid_init$_bb0c767f, a0)) {}

      void MultiTrie::add(const ::java::lang::CharSequence & a0, const ::java::lang::CharSequence & a1) const
      {
        env->callVoidMethod(this$, mids$[mid_add_db1d05ae], a0.this$, a1.this$);
      }

      ::java::lang::CharSequence MultiTrie::getFully(const ::java::lang::CharSequence & a0) const
      {
        return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_getFully_856f5013], a0.this$));
      }

      ::java::lang::CharSequence MultiTrie::getLastOnPath(const ::java::lang::CharSequence & a0) const
      {
        return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_getLastOnPath_856f5013], a0.this$));
      }

      void MultiTrie::printInfo(const ::java::io::PrintStream & a0, const ::java::lang::CharSequence & a1) const
      {
        env->callVoidMethod(this$, mids$[mid_printInfo_bd6af9ff], a0.this$, a1.this$);
      }

      ::org::egothor::stemmer::Trie MultiTrie::reduce(const ::org::egothor::stemmer::Reduce & a0) const
      {
        return ::org::egothor::stemmer::Trie(env->callObjectMethod(this$, mids$[mid_reduce_6ee87cd1], a0.this$));
      }

      void MultiTrie::store(const ::java::io::DataOutput & a0) const
      {
        env->callVoidMethod(this$, mids$[mid_store_cfb051e6], a0.this$);
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace egothor {
    namespace stemmer {
      static PyObject *t_MultiTrie_cast_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_MultiTrie_instance_(PyTypeObject *type, PyObject *arg);
      static int t_MultiTrie_init_(t_MultiTrie *self, PyObject *args, PyObject *kwds);
      static PyObject *t_MultiTrie_add(t_MultiTrie *self, PyObject *args);
      static PyObject *t_MultiTrie_getFully(t_MultiTrie *self, PyObject *args);
      static PyObject *t_MultiTrie_getLastOnPath(t_MultiTrie *self, PyObject *args);
      static PyObject *t_MultiTrie_printInfo(t_MultiTrie *self, PyObject *args);
      static PyObject *t_MultiTrie_reduce(t_MultiTrie *self, PyObject *args);
      static PyObject *t_MultiTrie_store(t_MultiTrie *self, PyObject *args);

      static PyMethodDef t_MultiTrie__methods_[] = {
        DECLARE_METHOD(t_MultiTrie, cast_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_MultiTrie, instance_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_MultiTrie, add, METH_VARARGS),
        DECLARE_METHOD(t_MultiTrie, getFully, METH_VARARGS),
        DECLARE_METHOD(t_MultiTrie, getLastOnPath, METH_VARARGS),
        DECLARE_METHOD(t_MultiTrie, printInfo, METH_VARARGS),
        DECLARE_METHOD(t_MultiTrie, reduce, METH_VARARGS),
        DECLARE_METHOD(t_MultiTrie, store, METH_VARARGS),
        { NULL, NULL, 0, NULL }
      };

      DECLARE_TYPE(MultiTrie, t_MultiTrie, ::org::egothor::stemmer::Trie, MultiTrie, t_MultiTrie_init_, 0, 0, 0, 0, 0);

      void t_MultiTrie::install(PyObject *module)
      {
        installType(&PY_TYPE(MultiTrie), module, "MultiTrie", 0);
      }

      void t_MultiTrie::initialize(PyObject *module)
      {
        PyDict_SetItemString(PY_TYPE(MultiTrie).tp_dict, "class_", make_descriptor(MultiTrie::initializeClass, 1));
        PyDict_SetItemString(PY_TYPE(MultiTrie).tp_dict, "wrapfn_", make_descriptor(t_MultiTrie::wrap_jobject));
        PyDict_SetItemString(PY_TYPE(MultiTrie).tp_dict, "boxfn_", make_descriptor(boxObject));
      }

      static PyObject *t_MultiTrie_cast_(PyTypeObject *type, PyObject *arg)
      {
        if (!(arg = castCheck(arg, MultiTrie::initializeClass, 1)))
          return NULL;
        return t_MultiTrie::wrap_Object(MultiTrie(((t_MultiTrie *) arg)->object.this$));
      }
      static PyObject *t_MultiTrie_instance_(PyTypeObject *type, PyObject *arg)
      {
        if (!castCheck(arg, MultiTrie::initializeClass, 0))
          Py_RETURN_FALSE;
        Py_RETURN_TRUE;
      }

      static int t_MultiTrie_init_(t_MultiTrie *self, PyObject *args, PyObject *kwds)
      {
        switch (PyTuple_GET_SIZE(args)) {
         case 1:
          {
            ::java::io::DataInput a0((jobject) NULL);
            MultiTrie object((jobject) NULL);

            if (!parseArgs(args, "k", ::java::io::DataInput::initializeClass, &a0))
            {
              INT_CALL(object = MultiTrie(a0));
              self->object = object;
              break;
            }
          }
          {
            jboolean a0;
            MultiTrie object((jobject) NULL);

            if (!parseArgs(args, "Z", &a0))
            {
              INT_CALL(object = MultiTrie(a0));
              self->object = object;
              break;
            }
          }
         default:
          PyErr_SetArgsError((PyObject *) self, "__init__", args);
          return -1;
        }

        return 0;
      }

      static PyObject *t_MultiTrie_add(t_MultiTrie *self, PyObject *args)
      {
        ::java::lang::CharSequence a0((jobject) NULL);
        ::java::lang::CharSequence a1((jobject) NULL);

        if (!parseArgs(args, "OO", &::java::lang::PY_TYPE(CharSequence), &::java::lang::PY_TYPE(CharSequence), &a0, &a1))
        {
          OBJ_CALL(self->object.add(a0, a1));
          Py_RETURN_NONE;
        }

        PyErr_SetArgsError((PyObject *) self, "add", args);
        return NULL;
      }

      static PyObject *t_MultiTrie_getFully(t_MultiTrie *self, PyObject *args)
      {
        ::java::lang::CharSequence a0((jobject) NULL);
        ::java::lang::CharSequence result((jobject) NULL);

        if (!parseArgs(args, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
        {
          OBJ_CALL(result = self->object.getFully(a0));
          return ::java::lang::t_CharSequence::wrap_Object(result);
        }

        return callSuper(&PY_TYPE(MultiTrie), (PyObject *) self, "getFully", args, 2);
      }

      static PyObject *t_MultiTrie_getLastOnPath(t_MultiTrie *self, PyObject *args)
      {
        ::java::lang::CharSequence a0((jobject) NULL);
        ::java::lang::CharSequence result((jobject) NULL);

        if (!parseArgs(args, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
        {
          OBJ_CALL(result = self->object.getLastOnPath(a0));
          return ::java::lang::t_CharSequence::wrap_Object(result);
        }

        return callSuper(&PY_TYPE(MultiTrie), (PyObject *) self, "getLastOnPath", args, 2);
      }

      static PyObject *t_MultiTrie_printInfo(t_MultiTrie *self, PyObject *args)
      {
        ::java::io::PrintStream a0((jobject) NULL);
        ::java::lang::CharSequence a1((jobject) NULL);

        if (!parseArgs(args, "kO", ::java::io::PrintStream::initializeClass, &::java::lang::PY_TYPE(CharSequence), &a0, &a1))
        {
          OBJ_CALL(self->object.printInfo(a0, a1));
          Py_RETURN_NONE;
        }

        return callSuper(&PY_TYPE(MultiTrie), (PyObject *) self, "printInfo", args, 2);
      }

      static PyObject *t_MultiTrie_reduce(t_MultiTrie *self, PyObject *args)
      {
        ::org::egothor::stemmer::Reduce a0((jobject) NULL);
        ::org::egothor::stemmer::Trie result((jobject) NULL);

        if (!parseArgs(args, "k", ::org::egothor::stemmer::Reduce::initializeClass, &a0))
        {
          OBJ_CALL(result = self->object.reduce(a0));
          return ::org::egothor::stemmer::t_Trie::wrap_Object(result);
        }

        return callSuper(&PY_TYPE(MultiTrie), (PyObject *) self, "reduce", args, 2);
      }

      static PyObject *t_MultiTrie_store(t_MultiTrie *self, PyObject *args)
      {
        ::java::io::DataOutput a0((jobject) NULL);

        if (!parseArgs(args, "k", ::java::io::DataOutput::initializeClass, &a0))
        {
          OBJ_CALL(self->object.store(a0));
          Py_RETURN_NONE;
        }

        return callSuper(&PY_TYPE(MultiTrie), (PyObject *) self, "store", args, 2);
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/AssociationFacetField.h"
#include "org/apache/lucene/document/FieldType.h"
#include "java/lang/String.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {

          ::java::lang::Class *AssociationFacetField::class$ = NULL;
          jmethodID *AssociationFacetField::mids$ = NULL;
          jfieldID *AssociationFacetField::fids$ = NULL;
          bool AssociationFacetField::live$ = false;
          ::org::apache::lucene::document::FieldType *AssociationFacetField::TYPE = NULL;

          jclass AssociationFacetField::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/AssociationFacetField");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_d63aecac] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/BytesRef;Ljava/lang/String;[Ljava/lang/String;)V");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              fids$ = new jfieldID[max_fid];
              fids$[fid_assoc] = env->getFieldID(cls, "assoc", "Lorg/apache/lucene/util/BytesRef;");
              fids$[fid_dim] = env->getFieldID(cls, "dim", "Ljava/lang/String;");
              fids$[fid_path] = env->getFieldID(cls, "path", "[Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              TYPE = new ::org::apache::lucene::document::FieldType(env->getStaticObjectField(cls, "TYPE", "Lorg/apache/lucene/document/FieldType;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          AssociationFacetField::AssociationFacetField(const ::org::apache::lucene::util::BytesRef & a0, const ::java::lang::String & a1, const JArray< ::java::lang::String > & a2) : ::org::apache::lucene::document::Field(env->newObject(initializeClass, &mids$, mid_init$_d63aecac, a0.this$, a1.this$, a2.this$)) {}

          ::java::lang::String AssociationFacetField::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }

          ::org::apache::lucene::util::BytesRef AssociationFacetField::_get_assoc() const
          {
            return ::org::apache::lucene::util::BytesRef(env->getObjectField(this$, fids$[fid_assoc]));
          }

          ::java::lang::String AssociationFacetField::_get_dim() const
          {
            return ::java::lang::String(env->getObjectField(this$, fids$[fid_dim]));
          }

          JArray< ::java::lang::String > AssociationFacetField::_get_path() const
          {
            return JArray< ::java::lang::String >(env->getObjectField(this$, fids$[fid_path]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          static PyObject *t_AssociationFacetField_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AssociationFacetField_instance_(PyTypeObject *type, PyObject *arg);
          static int t_AssociationFacetField_init_(t_AssociationFacetField *self, PyObject *args, PyObject *kwds);
          static PyObject *t_AssociationFacetField_toString(t_AssociationFacetField *self, PyObject *args);
          static PyObject *t_AssociationFacetField_get__assoc(t_AssociationFacetField *self, void *data);
          static PyObject *t_AssociationFacetField_get__dim(t_AssociationFacetField *self, void *data);
          static PyObject *t_AssociationFacetField_get__path(t_AssociationFacetField *self, void *data);

          static PyGetSetDef t_AssociationFacetField__fields_[] = {
            DECLARE_GET_FIELD(t_AssociationFacetField, assoc),
            DECLARE_GET_FIELD(t_AssociationFacetField, dim),
            DECLARE_GET_FIELD(t_AssociationFacetField, path),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_AssociationFacetField__methods_[] = {
            DECLARE_METHOD(t_AssociationFacetField, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AssociationFacetField, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AssociationFacetField, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(AssociationFacetField, t_AssociationFacetField, ::org::apache::lucene::document::Field, AssociationFacetField, t_AssociationFacetField_init_, 0, 0, t_AssociationFacetField__fields_, 0, 0);

          void t_AssociationFacetField::install(PyObject *module)
          {
            installType(&PY_TYPE(AssociationFacetField), module, "AssociationFacetField", 0);
          }

          void t_AssociationFacetField::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(AssociationFacetField).tp_dict, "class_", make_descriptor(AssociationFacetField::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(AssociationFacetField).tp_dict, "wrapfn_", make_descriptor(t_AssociationFacetField::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(AssociationFacetField).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(AssociationFacetField::initializeClass);
            PyDict_SetItemString(PY_TYPE(AssociationFacetField).tp_dict, "TYPE", make_descriptor(::org::apache::lucene::document::t_FieldType::wrap_Object(*AssociationFacetField::TYPE)));
          }

          static PyObject *t_AssociationFacetField_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, AssociationFacetField::initializeClass, 1)))
              return NULL;
            return t_AssociationFacetField::wrap_Object(AssociationFacetField(((t_AssociationFacetField *) arg)->object.this$));
          }
          static PyObject *t_AssociationFacetField_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, AssociationFacetField::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_AssociationFacetField_init_(t_AssociationFacetField *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            JArray< ::java::lang::String > a2((jobject) NULL);
            AssociationFacetField object((jobject) NULL);

            if (!parseArgs(args, "ks[s", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2))
            {
              INT_CALL(object = AssociationFacetField(a0, a1, a2));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_AssociationFacetField_toString(t_AssociationFacetField *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(AssociationFacetField), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_AssociationFacetField_get__assoc(t_AssociationFacetField *self, void *data)
          {
            ::org::apache::lucene::util::BytesRef value((jobject) NULL);
            OBJ_CALL(value = self->object._get_assoc());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(value);
          }

          static PyObject *t_AssociationFacetField_get__dim(t_AssociationFacetField *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object._get_dim());
            return j2p(value);
          }

          static PyObject *t_AssociationFacetField_get__path(t_AssociationFacetField *self, void *data)
          {
            JArray< ::java::lang::String > value((jobject) NULL);
            OBJ_CALL(value = self->object._get_path());
            return JArray<jstring>(value.this$).wrap();
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/util/NoSuchElementException.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace java {
  namespace util {

    ::java::lang::Class *NoSuchElementException::class$ = NULL;
    jmethodID *NoSuchElementException::mids$ = NULL;
    bool NoSuchElementException::live$ = false;

    jclass NoSuchElementException::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/util/NoSuchElementException");

        mids$ = new jmethodID[max_mid];
        mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
        mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");

        class$ = (::java::lang::Class *) new JObject(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    NoSuchElementException::NoSuchElementException() : ::java::lang::RuntimeException(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

    NoSuchElementException::NoSuchElementException(const ::java::lang::String & a0) : ::java::lang::RuntimeException(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace util {
    static PyObject *t_NoSuchElementException_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_NoSuchElementException_instance_(PyTypeObject *type, PyObject *arg);
    static int t_NoSuchElementException_init_(t_NoSuchElementException *self, PyObject *args, PyObject *kwds);

    static PyMethodDef t_NoSuchElementException__methods_[] = {
      DECLARE_METHOD(t_NoSuchElementException, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_NoSuchElementException, instance_, METH_O | METH_CLASS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(NoSuchElementException, t_NoSuchElementException, ::java::lang::RuntimeException, NoSuchElementException, t_NoSuchElementException_init_, 0, 0, 0, 0, 0);

    void t_NoSuchElementException::install(PyObject *module)
    {
      installType(&PY_TYPE(NoSuchElementException), module, "NoSuchElementException", 0);
    }

    void t_NoSuchElementException::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(NoSuchElementException).tp_dict, "class_", make_descriptor(NoSuchElementException::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(NoSuchElementException).tp_dict, "wrapfn_", make_descriptor(t_NoSuchElementException::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(NoSuchElementException).tp_dict, "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_NoSuchElementException_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, NoSuchElementException::initializeClass, 1)))
        return NULL;
      return t_NoSuchElementException::wrap_Object(NoSuchElementException(((t_NoSuchElementException *) arg)->object.this$));
    }
    static PyObject *t_NoSuchElementException_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, NoSuchElementException::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static int t_NoSuchElementException_init_(t_NoSuchElementException *self, PyObject *args, PyObject *kwds)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          NoSuchElementException object((jobject) NULL);

          INT_CALL(object = NoSuchElementException());
          self->object = object;
          break;
        }
        goto err;
       case 1:
        {
          ::java::lang::String a0((jobject) NULL);
          NoSuchElementException object((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            INT_CALL(object = NoSuchElementException(a0));
            self->object = object;
            break;
          }
        }
       default:
       err:
        PyErr_SetArgsError((PyObject *) self, "__init__", args);
        return -1;
      }

      return 0;
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/TopDocsCollector.h"
#include "org/apache/lucene/search/TopDocs.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *TopDocsCollector::class$ = NULL;
        jmethodID *TopDocsCollector::mids$ = NULL;
        bool TopDocsCollector::live$ = false;

        jclass TopDocsCollector::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/TopDocsCollector");

            mids$ = new jmethodID[max_mid];
            mids$[mid_getTotalHits_54c6a179] = env->getMethodID(cls, "getTotalHits", "()I");
            mids$[mid_topDocs_0ac630fc] = env->getMethodID(cls, "topDocs", "()Lorg/apache/lucene/search/TopDocs;");
            mids$[mid_topDocs_c7a84aba] = env->getMethodID(cls, "topDocs", "(I)Lorg/apache/lucene/search/TopDocs;");
            mids$[mid_topDocs_b17523f8] = env->getMethodID(cls, "topDocs", "(II)Lorg/apache/lucene/search/TopDocs;");
            mids$[mid_populateResults_fbb5e76c] = env->getMethodID(cls, "populateResults", "([Lorg/apache/lucene/search/ScoreDoc;I)V");
            mids$[mid_newTopDocs_a5bceb12] = env->getMethodID(cls, "newTopDocs", "([Lorg/apache/lucene/search/ScoreDoc;I)Lorg/apache/lucene/search/TopDocs;");
            mids$[mid_topDocsSize_54c6a179] = env->getMethodID(cls, "topDocsSize", "()I");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jint TopDocsCollector::getTotalHits() const
        {
          return env->callIntMethod(this$, mids$[mid_getTotalHits_54c6a179]);
        }

        ::org::apache::lucene::search::TopDocs TopDocsCollector::topDocs() const
        {
          return ::org::apache::lucene::search::TopDocs(env->callObjectMethod(this$, mids$[mid_topDocs_0ac630fc]));
        }

        ::org::apache::lucene::search::TopDocs TopDocsCollector::topDocs(jint a0) const
        {
          return ::org::apache::lucene::search::TopDocs(env->callObjectMethod(this$, mids$[mid_topDocs_c7a84aba], a0));
        }

        ::org::apache::lucene::search::TopDocs TopDocsCollector::topDocs(jint a0, jint a1) const
        {
          return ::org::apache::lucene::search::TopDocs(env->callObjectMethod(this$, mids$[mid_topDocs_b17523f8], a0, a1));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_TopDocsCollector_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TopDocsCollector_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TopDocsCollector_of_(t_TopDocsCollector *self, PyObject *args);
        static PyObject *t_TopDocsCollector_getTotalHits(t_TopDocsCollector *self);
        static PyObject *t_TopDocsCollector_topDocs(t_TopDocsCollector *self, PyObject *args);
        static PyObject *t_TopDocsCollector_get__totalHits(t_TopDocsCollector *self, void *data);
        static PyObject *t_TopDocsCollector_get__parameters_(t_TopDocsCollector *self, void *data);
        static PyGetSetDef t_TopDocsCollector__fields_[] = {
          DECLARE_GET_FIELD(t_TopDocsCollector, totalHits),
          DECLARE_GET_FIELD(t_TopDocsCollector, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_TopDocsCollector__methods_[] = {
          DECLARE_METHOD(t_TopDocsCollector, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TopDocsCollector, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TopDocsCollector, of_, METH_VARARGS),
          DECLARE_METHOD(t_TopDocsCollector, getTotalHits, METH_NOARGS),
          DECLARE_METHOD(t_TopDocsCollector, topDocs, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TopDocsCollector, t_TopDocsCollector, ::org::apache::lucene::search::Collector, TopDocsCollector, abstract_init, 0, 0, t_TopDocsCollector__fields_, 0, 0);
        PyObject *t_TopDocsCollector::wrap_Object(const TopDocsCollector& object, PyTypeObject *p0)
        {
          PyObject *obj = t_TopDocsCollector::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_TopDocsCollector *self = (t_TopDocsCollector *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_TopDocsCollector::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_TopDocsCollector::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_TopDocsCollector *self = (t_TopDocsCollector *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_TopDocsCollector::install(PyObject *module)
        {
          installType(&PY_TYPE(TopDocsCollector), module, "TopDocsCollector", 0);
        }

        void t_TopDocsCollector::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TopDocsCollector).tp_dict, "class_", make_descriptor(TopDocsCollector::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TopDocsCollector).tp_dict, "wrapfn_", make_descriptor(t_TopDocsCollector::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TopDocsCollector).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TopDocsCollector_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TopDocsCollector::initializeClass, 1)))
            return NULL;
          return t_TopDocsCollector::wrap_Object(TopDocsCollector(((t_TopDocsCollector *) arg)->object.this$));
        }
        static PyObject *t_TopDocsCollector_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TopDocsCollector::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_TopDocsCollector_of_(t_TopDocsCollector *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_TopDocsCollector_getTotalHits(t_TopDocsCollector *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getTotalHits());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_TopDocsCollector_topDocs(t_TopDocsCollector *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              ::org::apache::lucene::search::TopDocs result((jobject) NULL);
              OBJ_CALL(result = self->object.topDocs());
              return ::org::apache::lucene::search::t_TopDocs::wrap_Object(result);
            }
            break;
           case 1:
            {
              jint a0;
              ::org::apache::lucene::search::TopDocs result((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.topDocs(a0));
                return ::org::apache::lucene::search::t_TopDocs::wrap_Object(result);
              }
            }
            break;
           case 2:
            {
              jint a0;
              jint a1;
              ::org::apache::lucene::search::TopDocs result((jobject) NULL);

              if (!parseArgs(args, "II", &a0, &a1))
              {
                OBJ_CALL(result = self->object.topDocs(a0, a1));
                return ::org::apache::lucene::search::t_TopDocs::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "topDocs", args);
          return NULL;
        }
        static PyObject *t_TopDocsCollector_get__parameters_(t_TopDocsCollector *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static PyObject *t_TopDocsCollector_get__totalHits(t_TopDocsCollector *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getTotalHits());
          return PyInt_FromLong((long) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/RAMInputStream.h"
#include "java/io/IOException.h"
#include "java/lang/String.h"
#include "org/apache/lucene/store/RAMFile.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *RAMInputStream::class$ = NULL;
        jmethodID *RAMInputStream::mids$ = NULL;
        bool RAMInputStream::live$ = false;

        jclass RAMInputStream::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/RAMInputStream");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_4d2db83b] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/store/RAMFile;)V");
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_getFilePointer_54c6a17a] = env->getMethodID(cls, "getFilePointer", "()J");
            mids$[mid_length_54c6a17a] = env->getMethodID(cls, "length", "()J");
            mids$[mid_readByte_54c6a172] = env->getMethodID(cls, "readByte", "()B");
            mids$[mid_readBytes_86f4435f] = env->getMethodID(cls, "readBytes", "([BII)V");
            mids$[mid_seek_0ee6df2f] = env->getMethodID(cls, "seek", "(J)V");
            mids$[mid_slice_d00c83eb] = env->getMethodID(cls, "slice", "(Ljava/lang/String;JJ)Lorg/apache/lucene/store/IndexInput;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        RAMInputStream::RAMInputStream(const ::java::lang::String & a0, const ::org::apache::lucene::store::RAMFile & a1) : ::org::apache::lucene::store::IndexInput(env->newObject(initializeClass, &mids$, mid_init$_4d2db83b, a0.this$, a1.this$)) {}

        void RAMInputStream::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        jlong RAMInputStream::getFilePointer() const
        {
          return env->callLongMethod(this$, mids$[mid_getFilePointer_54c6a17a]);
        }

        jlong RAMInputStream::length() const
        {
          return env->callLongMethod(this$, mids$[mid_length_54c6a17a]);
        }

        jbyte RAMInputStream::readByte() const
        {
          return env->callByteMethod(this$, mids$[mid_readByte_54c6a172]);
        }

        void RAMInputStream::readBytes(const JArray< jbyte > & a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_readBytes_86f4435f], a0.this$, a1, a2);
        }

        void RAMInputStream::seek(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_seek_0ee6df2f], a0);
        }

        ::org::apache::lucene::store::IndexInput RAMInputStream::slice(const ::java::lang::String & a0, jlong a1, jlong a2) const
        {
          return ::org::apache::lucene::store::IndexInput(env->callObjectMethod(this$, mids$[mid_slice_d00c83eb], a0.this$, a1, a2));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_RAMInputStream_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_RAMInputStream_instance_(PyTypeObject *type, PyObject *arg);
        static int t_RAMInputStream_init_(t_RAMInputStream *self, PyObject *args, PyObject *kwds);
        static PyObject *t_RAMInputStream_close(t_RAMInputStream *self, PyObject *args);
        static PyObject *t_RAMInputStream_getFilePointer(t_RAMInputStream *self, PyObject *args);
        static PyObject *t_RAMInputStream_length(t_RAMInputStream *self, PyObject *args);
        static PyObject *t_RAMInputStream_readByte(t_RAMInputStream *self, PyObject *args);
        static PyObject *t_RAMInputStream_readBytes(t_RAMInputStream *self, PyObject *args);
        static PyObject *t_RAMInputStream_seek(t_RAMInputStream *self, PyObject *args);
        static PyObject *t_RAMInputStream_slice(t_RAMInputStream *self, PyObject *args);
        static PyObject *t_RAMInputStream_get__filePointer(t_RAMInputStream *self, void *data);
        static PyGetSetDef t_RAMInputStream__fields_[] = {
          DECLARE_GET_FIELD(t_RAMInputStream, filePointer),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_RAMInputStream__methods_[] = {
          DECLARE_METHOD(t_RAMInputStream, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RAMInputStream, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RAMInputStream, close, METH_VARARGS),
          DECLARE_METHOD(t_RAMInputStream, getFilePointer, METH_VARARGS),
          DECLARE_METHOD(t_RAMInputStream, length, METH_VARARGS),
          DECLARE_METHOD(t_RAMInputStream, readByte, METH_VARARGS),
          DECLARE_METHOD(t_RAMInputStream, readBytes, METH_VARARGS),
          DECLARE_METHOD(t_RAMInputStream, seek, METH_VARARGS),
          DECLARE_METHOD(t_RAMInputStream, slice, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(RAMInputStream, t_RAMInputStream, ::org::apache::lucene::store::IndexInput, RAMInputStream, t_RAMInputStream_init_, 0, 0, t_RAMInputStream__fields_, 0, 0);

        void t_RAMInputStream::install(PyObject *module)
        {
          installType(&PY_TYPE(RAMInputStream), module, "RAMInputStream", 0);
        }

        void t_RAMInputStream::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(RAMInputStream).tp_dict, "class_", make_descriptor(RAMInputStream::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(RAMInputStream).tp_dict, "wrapfn_", make_descriptor(t_RAMInputStream::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(RAMInputStream).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_RAMInputStream_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, RAMInputStream::initializeClass, 1)))
            return NULL;
          return t_RAMInputStream::wrap_Object(RAMInputStream(((t_RAMInputStream *) arg)->object.this$));
        }
        static PyObject *t_RAMInputStream_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, RAMInputStream::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_RAMInputStream_init_(t_RAMInputStream *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::store::RAMFile a1((jobject) NULL);
          RAMInputStream object((jobject) NULL);

          if (!parseArgs(args, "sk", ::org::apache::lucene::store::RAMFile::initializeClass, &a0, &a1))
          {
            INT_CALL(object = RAMInputStream(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_RAMInputStream_close(t_RAMInputStream *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.close());
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(RAMInputStream), (PyObject *) self, "close", args, 2);
        }

        static PyObject *t_RAMInputStream_getFilePointer(t_RAMInputStream *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getFilePointer());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(RAMInputStream), (PyObject *) self, "getFilePointer", args, 2);
        }

        static PyObject *t_RAMInputStream_length(t_RAMInputStream *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.length());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(RAMInputStream), (PyObject *) self, "length", args, 2);
        }

        static PyObject *t_RAMInputStream_readByte(t_RAMInputStream *self, PyObject *args)
        {
          jbyte result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.readByte());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(RAMInputStream), (PyObject *) self, "readByte", args, 2);
        }

        static PyObject *t_RAMInputStream_readBytes(t_RAMInputStream *self, PyObject *args)
        {
          JArray< jbyte > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[BII", &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.readBytes(a0, a1, a2));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(RAMInputStream), (PyObject *) self, "readBytes", args, 2);
        }

        static PyObject *t_RAMInputStream_seek(t_RAMInputStream *self, PyObject *args)
        {
          jlong a0;

          if (!parseArgs(args, "J", &a0))
          {
            OBJ_CALL(self->object.seek(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(RAMInputStream), (PyObject *) self, "seek", args, 2);
        }

        static PyObject *t_RAMInputStream_slice(t_RAMInputStream *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          jlong a1;
          jlong a2;
          ::org::apache::lucene::store::IndexInput result((jobject) NULL);

          if (!parseArgs(args, "sJJ", &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.slice(a0, a1, a2));
            return ::org::apache::lucene::store::t_IndexInput::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(RAMInputStream), (PyObject *) self, "slice", args, 2);
        }

        static PyObject *t_RAMInputStream_get__filePointer(t_RAMInputStream *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getFilePointer());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/IOContext.h"
#include "org/apache/lucene/store/FlushInfo.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/MergeInfo.h"
#include "java/lang/String.h"
#include "org/apache/lucene/store/IOContext$Context.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *IOContext::class$ = NULL;
        jmethodID *IOContext::mids$ = NULL;
        jfieldID *IOContext::fids$ = NULL;
        bool IOContext::live$ = false;
        IOContext *IOContext::DEFAULT = NULL;
        IOContext *IOContext::READ = NULL;
        IOContext *IOContext::READONCE = NULL;

        jclass IOContext::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/IOContext");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_init$_b5b0f361] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/MergeInfo;)V");
            mids$[mid_init$_080fbf4f] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/FlushInfo;)V");
            mids$[mid_init$_caa57ead] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/IOContext$Context;)V");
            mids$[mid_init$_617520cb] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/IOContext;Z)V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            fids$ = new jfieldID[max_fid];
            fids$[fid_context] = env->getFieldID(cls, "context", "Lorg/apache/lucene/store/IOContext$Context;");
            fids$[fid_flushInfo] = env->getFieldID(cls, "flushInfo", "Lorg/apache/lucene/store/FlushInfo;");
            fids$[fid_mergeInfo] = env->getFieldID(cls, "mergeInfo", "Lorg/apache/lucene/store/MergeInfo;");
            fids$[fid_readOnce] = env->getFieldID(cls, "readOnce", "Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            DEFAULT = new IOContext(env->getStaticObjectField(cls, "DEFAULT", "Lorg/apache/lucene/store/IOContext;"));
            READ = new IOContext(env->getStaticObjectField(cls, "READ", "Lorg/apache/lucene/store/IOContext;"));
            READONCE = new IOContext(env->getStaticObjectField(cls, "READONCE", "Lorg/apache/lucene/store/IOContext;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        IOContext::IOContext() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        IOContext::IOContext(const ::org::apache::lucene::store::MergeInfo & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_b5b0f361, a0.this$)) {}

        IOContext::IOContext(const ::org::apache::lucene::store::FlushInfo & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_080fbf4f, a0.this$)) {}

        IOContext::IOContext(const ::org::apache::lucene::store::IOContext$Context & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_caa57ead, a0.this$)) {}

        IOContext::IOContext(const IOContext & a0, jboolean a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_617520cb, a0.this$, a1)) {}

        jboolean IOContext::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        jint IOContext::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        ::java::lang::String IOContext::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }

        ::org::apache::lucene::store::IOContext$Context IOContext::_get_context() const
        {
          return ::org::apache::lucene::store::IOContext$Context(env->getObjectField(this$, fids$[fid_context]));
        }

        ::org::apache::lucene::store::FlushInfo IOContext::_get_flushInfo() const
        {
          return ::org::apache::lucene::store::FlushInfo(env->getObjectField(this$, fids$[fid_flushInfo]));
        }

        ::org::apache::lucene::store::MergeInfo IOContext::_get_mergeInfo() const
        {
          return ::org::apache::lucene::store::MergeInfo(env->getObjectField(this$, fids$[fid_mergeInfo]));
        }

        jboolean IOContext::_get_readOnce() const
        {
          return env->getBooleanField(this$, fids$[fid_readOnce]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_IOContext_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IOContext_instance_(PyTypeObject *type, PyObject *arg);
        static int t_IOContext_init_(t_IOContext *self, PyObject *args, PyObject *kwds);
        static PyObject *t_IOContext_equals(t_IOContext *self, PyObject *args);
        static PyObject *t_IOContext_hashCode(t_IOContext *self, PyObject *args);
        static PyObject *t_IOContext_toString(t_IOContext *self, PyObject *args);
        static PyObject *t_IOContext_get__context(t_IOContext *self, void *data);
        static PyObject *t_IOContext_get__flushInfo(t_IOContext *self, void *data);
        static PyObject *t_IOContext_get__mergeInfo(t_IOContext *self, void *data);
        static PyObject *t_IOContext_get__readOnce(t_IOContext *self, void *data);

        static PyGetSetDef t_IOContext__fields_[] = {
          DECLARE_GET_FIELD(t_IOContext, context),
          DECLARE_GET_FIELD(t_IOContext, flushInfo),
          DECLARE_GET_FIELD(t_IOContext, mergeInfo),
          DECLARE_GET_FIELD(t_IOContext, readOnce),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_IOContext__methods_[] = {
          DECLARE_METHOD(t_IOContext, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IOContext, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IOContext, equals, METH_VARARGS),
          DECLARE_METHOD(t_IOContext, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_IOContext, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(IOContext, t_IOContext, ::java::lang::Object, IOContext, t_IOContext_init_, 0, 0, t_IOContext__fields_, 0, 0);

        void t_IOContext::install(PyObject *module)
        {
          installType(&PY_TYPE(IOContext), module, "IOContext", 0);
          PyDict_SetItemString(PY_TYPE(IOContext).tp_dict, "Context", make_descriptor(&PY_TYPE(IOContext$Context)));
        }

        void t_IOContext::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(IOContext).tp_dict, "class_", make_descriptor(IOContext::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(IOContext).tp_dict, "wrapfn_", make_descriptor(t_IOContext::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(IOContext).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(IOContext::initializeClass);
          PyDict_SetItemString(PY_TYPE(IOContext).tp_dict, "DEFAULT", make_descriptor(t_IOContext::wrap_Object(*IOContext::DEFAULT)));
          PyDict_SetItemString(PY_TYPE(IOContext).tp_dict, "READ", make_descriptor(t_IOContext::wrap_Object(*IOContext::READ)));
          PyDict_SetItemString(PY_TYPE(IOContext).tp_dict, "READONCE", make_descriptor(t_IOContext::wrap_Object(*IOContext::READONCE)));
        }

        static PyObject *t_IOContext_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IOContext::initializeClass, 1)))
            return NULL;
          return t_IOContext::wrap_Object(IOContext(((t_IOContext *) arg)->object.this$));
        }
        static PyObject *t_IOContext_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IOContext::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_IOContext_init_(t_IOContext *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              IOContext object((jobject) NULL);

              INT_CALL(object = IOContext());
              self->object = object;
              break;
            }
            goto err;
           case 1:
            {
              ::org::apache::lucene::store::MergeInfo a0((jobject) NULL);
              IOContext object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::store::MergeInfo::initializeClass, &a0))
              {
                INT_CALL(object = IOContext(a0));
                self->object = object;
                break;
              }
            }
            {
              ::org::apache::lucene::store::FlushInfo a0((jobject) NULL);
              IOContext object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::store::FlushInfo::initializeClass, &a0))
              {
                INT_CALL(object = IOContext(a0));
                self->object = object;
                break;
              }
            }
            {
              ::org::apache::lucene::store::IOContext$Context a0((jobject) NULL);
              PyTypeObject **p0;
              IOContext object((jobject) NULL);

              if (!parseArgs(args, "K", ::org::apache::lucene::store::IOContext$Context::initializeClass, &a0, &p0, ::org::apache::lucene::store::t_IOContext$Context::parameters_))
              {
                INT_CALL(object = IOContext(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              IOContext a0((jobject) NULL);
              jboolean a1;
              IOContext object((jobject) NULL);

              if (!parseArgs(args, "kZ", IOContext::initializeClass, &a0, &a1))
              {
                INT_CALL(object = IOContext(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_IOContext_equals(t_IOContext *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(IOContext), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_IOContext_hashCode(t_IOContext *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(IOContext), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_IOContext_toString(t_IOContext *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(IOContext), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_IOContext_get__context(t_IOContext *self, void *data)
        {
          ::org::apache::lucene::store::IOContext$Context value((jobject) NULL);
          OBJ_CALL(value = self->object._get_context());
          return ::org::apache::lucene::store::t_IOContext$Context::wrap_Object(value);
        }

        static PyObject *t_IOContext_get__flushInfo(t_IOContext *self, void *data)
        {
          ::org::apache::lucene::store::FlushInfo value((jobject) NULL);
          OBJ_CALL(value = self->object._get_flushInfo());
          return ::org::apache::lucene::store::t_FlushInfo::wrap_Object(value);
        }

        static PyObject *t_IOContext_get__mergeInfo(t_IOContext *self, void *data)
        {
          ::org::apache::lucene::store::MergeInfo value((jobject) NULL);
          OBJ_CALL(value = self->object._get_mergeInfo());
          return ::org::apache::lucene::store::t_MergeInfo::wrap_Object(value);
        }

        static PyObject *t_IOContext_get__readOnce(t_IOContext *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object._get_readOnce());
          Py_RETURN_BOOL(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/blocktree/Stats.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace blocktree {

          ::java::lang::Class *Stats::class$ = NULL;
          jmethodID *Stats::mids$ = NULL;
          jfieldID *Stats::fids$ = NULL;
          bool Stats::live$ = false;

          jclass Stats::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/blocktree/Stats");

              mids$ = new jmethodID[max_mid];
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              fids$ = new jfieldID[max_fid];
              fids$[fid_blockCountByPrefixLen] = env->getFieldID(cls, "blockCountByPrefixLen", "[I");
              fids$[fid_field] = env->getFieldID(cls, "field", "Ljava/lang/String;");
              fids$[fid_floorBlockCount] = env->getFieldID(cls, "floorBlockCount", "I");
              fids$[fid_floorSubBlockCount] = env->getFieldID(cls, "floorSubBlockCount", "I");
              fids$[fid_indexArcCount] = env->getFieldID(cls, "indexArcCount", "J");
              fids$[fid_indexNodeCount] = env->getFieldID(cls, "indexNodeCount", "J");
              fids$[fid_indexNumBytes] = env->getFieldID(cls, "indexNumBytes", "J");
              fids$[fid_mixedBlockCount] = env->getFieldID(cls, "mixedBlockCount", "I");
              fids$[fid_nonFloorBlockCount] = env->getFieldID(cls, "nonFloorBlockCount", "I");
              fids$[fid_segment] = env->getFieldID(cls, "segment", "Ljava/lang/String;");
              fids$[fid_subBlocksOnlyBlockCount] = env->getFieldID(cls, "subBlocksOnlyBlockCount", "I");
              fids$[fid_termsOnlyBlockCount] = env->getFieldID(cls, "termsOnlyBlockCount", "I");
              fids$[fid_totalBlockCount] = env->getFieldID(cls, "totalBlockCount", "I");
              fids$[fid_totalBlockOtherBytes] = env->getFieldID(cls, "totalBlockOtherBytes", "J");
              fids$[fid_totalBlockStatsBytes] = env->getFieldID(cls, "totalBlockStatsBytes", "J");
              fids$[fid_totalBlockSuffixBytes] = env->getFieldID(cls, "totalBlockSuffixBytes", "J");
              fids$[fid_totalTermBytes] = env->getFieldID(cls, "totalTermBytes", "J");
              fids$[fid_totalTermCount] = env->getFieldID(cls, "totalTermCount", "J");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::java::lang::String Stats::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }

          JArray< jint > Stats::_get_blockCountByPrefixLen() const
          {
            return JArray< jint >(env->getObjectField(this$, fids$[fid_blockCountByPrefixLen]));
          }

          void Stats::_set_blockCountByPrefixLen(const JArray< jint > & a0) const
          {
            env->setObjectField(this$, fids$[fid_blockCountByPrefixLen], a0.this$);
          }

          ::java::lang::String Stats::_get_field() const
          {
            return ::java::lang::String(env->getObjectField(this$, fids$[fid_field]));
          }

          jint Stats::_get_floorBlockCount() const
          {
            return env->getIntField(this$, fids$[fid_floorBlockCount]);
          }

          void Stats::_set_floorBlockCount(jint a0) const
          {
            env->setIntField(this$, fids$[fid_floorBlockCount], a0);
          }

          jint Stats::_get_floorSubBlockCount() const
          {
            return env->getIntField(this$, fids$[fid_floorSubBlockCount]);
          }

          void Stats::_set_floorSubBlockCount(jint a0) const
          {
            env->setIntField(this$, fids$[fid_floorSubBlockCount], a0);
          }

          jlong Stats::_get_indexArcCount() const
          {
            return env->getLongField(this$, fids$[fid_indexArcCount]);
          }

          void Stats::_set_indexArcCount(jlong a0) const
          {
            env->setLongField(this$, fids$[fid_indexArcCount], a0);
          }

          jlong Stats::_get_indexNodeCount() const
          {
            return env->getLongField(this$, fids$[fid_indexNodeCount]);
          }

          void Stats::_set_indexNodeCount(jlong a0) const
          {
            env->setLongField(this$, fids$[fid_indexNodeCount], a0);
          }

          jlong Stats::_get_indexNumBytes() const
          {
            return env->getLongField(this$, fids$[fid_indexNumBytes]);
          }

          void Stats::_set_indexNumBytes(jlong a0) const
          {
            env->setLongField(this$, fids$[fid_indexNumBytes], a0);
          }

          jint Stats::_get_mixedBlockCount() const
          {
            return env->getIntField(this$, fids$[fid_mixedBlockCount]);
          }

          void Stats::_set_mixedBlockCount(jint a0) const
          {
            env->setIntField(this$, fids$[fid_mixedBlockCount], a0);
          }

          jint Stats::_get_nonFloorBlockCount() const
          {
            return env->getIntField(this$, fids$[fid_nonFloorBlockCount]);
          }

          void Stats::_set_nonFloorBlockCount(jint a0) const
          {
            env->setIntField(this$, fids$[fid_nonFloorBlockCount], a0);
          }

          ::java::lang::String Stats::_get_segment() const
          {
            return ::java::lang::String(env->getObjectField(this$, fids$[fid_segment]));
          }

          jint Stats::_get_subBlocksOnlyBlockCount() const
          {
            return env->getIntField(this$, fids$[fid_subBlocksOnlyBlockCount]);
          }

          void Stats::_set_subBlocksOnlyBlockCount(jint a0) const
          {
            env->setIntField(this$, fids$[fid_subBlocksOnlyBlockCount], a0);
          }

          jint Stats::_get_termsOnlyBlockCount() const
          {
            return env->getIntField(this$, fids$[fid_termsOnlyBlockCount]);
          }

          void Stats::_set_termsOnlyBlockCount(jint a0) const
          {
            env->setIntField(this$, fids$[fid_termsOnlyBlockCount], a0);
          }

          jint Stats::_get_totalBlockCount() const
          {
            return env->getIntField(this$, fids$[fid_totalBlockCount]);
          }

          void Stats::_set_totalBlockCount(jint a0) const
          {
            env->setIntField(this$, fids$[fid_totalBlockCount], a0);
          }

          jlong Stats::_get_totalBlockOtherBytes() const
          {
            return env->getLongField(this$, fids$[fid_totalBlockOtherBytes]);
          }

          void Stats::_set_totalBlockOtherBytes(jlong a0) const
          {
            env->setLongField(this$, fids$[fid_totalBlockOtherBytes], a0);
          }

          jlong Stats::_get_totalBlockStatsBytes() const
          {
            return env->getLongField(this$, fids$[fid_totalBlockStatsBytes]);
          }

          void Stats::_set_totalBlockStatsBytes(jlong a0) const
          {
            env->setLongField(this$, fids$[fid_totalBlockStatsBytes], a0);
          }

          jlong Stats::_get_totalBlockSuffixBytes() const
          {
            return env->getLongField(this$, fids$[fid_totalBlockSuffixBytes]);
          }

          void Stats::_set_totalBlockSuffixBytes(jlong a0) const
          {
            env->setLongField(this$, fids$[fid_totalBlockSuffixBytes], a0);
          }

          jlong Stats::_get_totalTermBytes() const
          {
            return env->getLongField(this$, fids$[fid_totalTermBytes]);
          }

          void Stats::_set_totalTermBytes(jlong a0) const
          {
            env->setLongField(this$, fids$[fid_totalTermBytes], a0);
          }

          jlong Stats::_get_totalTermCount() const
          {
            return env->getLongField(this$, fids$[fid_totalTermCount]);
          }

          void Stats::_set_totalTermCount(jlong a0) const
          {
            env->setLongField(this$, fids$[fid_totalTermCount], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace blocktree {
          static PyObject *t_Stats_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Stats_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Stats_toString(t_Stats *self, PyObject *args);
          static PyObject *t_Stats_get__blockCountByPrefixLen(t_Stats *self, void *data);
          static int t_Stats_set__blockCountByPrefixLen(t_Stats *self, PyObject *arg, void *data);
          static PyObject *t_Stats_get__field(t_Stats *self, void *data);
          static PyObject *t_Stats_get__floorBlockCount(t_Stats *self, void *data);
          static int t_Stats_set__floorBlockCount(t_Stats *self, PyObject *arg, void *data);
          static PyObject *t_Stats_get__floorSubBlockCount(t_Stats *self, void *data);
          static int t_Stats_set__floorSubBlockCount(t_Stats *self, PyObject *arg, void *data);
          static PyObject *t_Stats_get__indexArcCount(t_Stats *self, void *data);
          static int t_Stats_set__indexArcCount(t_Stats *self, PyObject *arg, void *data);
          static PyObject *t_Stats_get__indexNodeCount(t_Stats *self, void *data);
          static int t_Stats_set__indexNodeCount(t_Stats *self, PyObject *arg, void *data);
          static PyObject *t_Stats_get__indexNumBytes(t_Stats *self, void *data);
          static int t_Stats_set__indexNumBytes(t_Stats *self, PyObject *arg, void *data);
          static PyObject *t_Stats_get__mixedBlockCount(t_Stats *self, void *data);
          static int t_Stats_set__mixedBlockCount(t_Stats *self, PyObject *arg, void *data);
          static PyObject *t_Stats_get__nonFloorBlockCount(t_Stats *self, void *data);
          static int t_Stats_set__nonFloorBlockCount(t_Stats *self, PyObject *arg, void *data);
          static PyObject *t_Stats_get__segment(t_Stats *self, void *data);
          static PyObject *t_Stats_get__subBlocksOnlyBlockCount(t_Stats *self, void *data);
          static int t_Stats_set__subBlocksOnlyBlockCount(t_Stats *self, PyObject *arg, void *data);
          static PyObject *t_Stats_get__termsOnlyBlockCount(t_Stats *self, void *data);
          static int t_Stats_set__termsOnlyBlockCount(t_Stats *self, PyObject *arg, void *data);
          static PyObject *t_Stats_get__totalBlockCount(t_Stats *self, void *data);
          static int t_Stats_set__totalBlockCount(t_Stats *self, PyObject *arg, void *data);
          static PyObject *t_Stats_get__totalBlockOtherBytes(t_Stats *self, void *data);
          static int t_Stats_set__totalBlockOtherBytes(t_Stats *self, PyObject *arg, void *data);
          static PyObject *t_Stats_get__totalBlockStatsBytes(t_Stats *self, void *data);
          static int t_Stats_set__totalBlockStatsBytes(t_Stats *self, PyObject *arg, void *data);
          static PyObject *t_Stats_get__totalBlockSuffixBytes(t_Stats *self, void *data);
          static int t_Stats_set__totalBlockSuffixBytes(t_Stats *self, PyObject *arg, void *data);
          static PyObject *t_Stats_get__totalTermBytes(t_Stats *self, void *data);
          static int t_Stats_set__totalTermBytes(t_Stats *self, PyObject *arg, void *data);
          static PyObject *t_Stats_get__totalTermCount(t_Stats *self, void *data);
          static int t_Stats_set__totalTermCount(t_Stats *self, PyObject *arg, void *data);

          static PyGetSetDef t_Stats__fields_[] = {
            DECLARE_GETSET_FIELD(t_Stats, blockCountByPrefixLen),
            DECLARE_GET_FIELD(t_Stats, field),
            DECLARE_GETSET_FIELD(t_Stats, floorBlockCount),
            DECLARE_GETSET_FIELD(t_Stats, floorSubBlockCount),
            DECLARE_GETSET_FIELD(t_Stats, indexArcCount),
            DECLARE_GETSET_FIELD(t_Stats, indexNodeCount),
            DECLARE_GETSET_FIELD(t_Stats, indexNumBytes),
            DECLARE_GETSET_FIELD(t_Stats, mixedBlockCount),
            DECLARE_GETSET_FIELD(t_Stats, nonFloorBlockCount),
            DECLARE_GET_FIELD(t_Stats, segment),
            DECLARE_GETSET_FIELD(t_Stats, subBlocksOnlyBlockCount),
            DECLARE_GETSET_FIELD(t_Stats, termsOnlyBlockCount),
            DECLARE_GETSET_FIELD(t_Stats, totalBlockCount),
            DECLARE_GETSET_FIELD(t_Stats, totalBlockOtherBytes),
            DECLARE_GETSET_FIELD(t_Stats, totalBlockStatsBytes),
            DECLARE_GETSET_FIELD(t_Stats, totalBlockSuffixBytes),
            DECLARE_GETSET_FIELD(t_Stats, totalTermBytes),
            DECLARE_GETSET_FIELD(t_Stats, totalTermCount),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Stats__methods_[] = {
            DECLARE_METHOD(t_Stats, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Stats, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Stats, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Stats, t_Stats, ::java::lang::Object, Stats, abstract_init, 0, 0, t_Stats__fields_, 0, 0);

          void t_Stats::install(PyObject *module)
          {
            installType(&PY_TYPE(Stats), module, "Stats", 0);
          }

          void t_Stats::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Stats).tp_dict, "class_", make_descriptor(Stats::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Stats).tp_dict, "wrapfn_", make_descriptor(t_Stats::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Stats).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Stats_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Stats::initializeClass, 1)))
              return NULL;
            return t_Stats::wrap_Object(Stats(((t_Stats *) arg)->object.this$));
          }
          static PyObject *t_Stats_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Stats::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_Stats_toString(t_Stats *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(Stats), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_Stats_get__blockCountByPrefixLen(t_Stats *self, void *data)
          {
            JArray< jint > value((jobject) NULL);
            OBJ_CALL(value = self->object._get_blockCountByPrefixLen());
            return value.wrap();
          }
          static int t_Stats_set__blockCountByPrefixLen(t_Stats *self, PyObject *arg, void *data)
          {
            JArray< jint > value((jobject) NULL);
            if (!parseArg(arg, "[I", &value))
            {
              INT_CALL(self->object._set_blockCountByPrefixLen(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "blockCountByPrefixLen", arg);
            return -1;
          }

          static PyObject *t_Stats_get__field(t_Stats *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object._get_field());
            return j2p(value);
          }

          static PyObject *t_Stats_get__floorBlockCount(t_Stats *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object._get_floorBlockCount());
            return PyInt_FromLong((long) value);
          }
          static int t_Stats_set__floorBlockCount(t_Stats *self, PyObject *arg, void *data)
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object._set_floorBlockCount(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "floorBlockCount", arg);
            return -1;
          }

          static PyObject *t_Stats_get__floorSubBlockCount(t_Stats *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object._get_floorSubBlockCount());
            return PyInt_FromLong((long) value);
          }
          static int t_Stats_set__floorSubBlockCount(t_Stats *self, PyObject *arg, void *data)
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object._set_floorSubBlockCount(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "floorSubBlockCount", arg);
            return -1;
          }

          static PyObject *t_Stats_get__indexArcCount(t_Stats *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object._get_indexArcCount());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }
          static int t_Stats_set__indexArcCount(t_Stats *self, PyObject *arg, void *data)
          {
            jlong value;
            if (!parseArg(arg, "J", &value))
            {
              INT_CALL(self->object._set_indexArcCount(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "indexArcCount", arg);
            return -1;
          }

          static PyObject *t_Stats_get__indexNodeCount(t_Stats *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object._get_indexNodeCount());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }
          static int t_Stats_set__indexNodeCount(t_Stats *self, PyObject *arg, void *data)
          {
            jlong value;
            if (!parseArg(arg, "J", &value))
            {
              INT_CALL(self->object._set_indexNodeCount(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "indexNodeCount", arg);
            return -1;
          }

          static PyObject *t_Stats_get__indexNumBytes(t_Stats *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object._get_indexNumBytes());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }
          static int t_Stats_set__indexNumBytes(t_Stats *self, PyObject *arg, void *data)
          {
            jlong value;
            if (!parseArg(arg, "J", &value))
            {
              INT_CALL(self->object._set_indexNumBytes(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "indexNumBytes", arg);
            return -1;
          }

          static PyObject *t_Stats_get__mixedBlockCount(t_Stats *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object._get_mixedBlockCount());
            return PyInt_FromLong((long) value);
          }
          static int t_Stats_set__mixedBlockCount(t_Stats *self, PyObject *arg, void *data)
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object._set_mixedBlockCount(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "mixedBlockCount", arg);
            return -1;
          }

          static PyObject *t_Stats_get__nonFloorBlockCount(t_Stats *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object._get_nonFloorBlockCount());
            return PyInt_FromLong((long) value);
          }
          static int t_Stats_set__nonFloorBlockCount(t_Stats *self, PyObject *arg, void *data)
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object._set_nonFloorBlockCount(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "nonFloorBlockCount", arg);
            return -1;
          }

          static PyObject *t_Stats_get__segment(t_Stats *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object._get_segment());
            return j2p(value);
          }

          static PyObject *t_Stats_get__subBlocksOnlyBlockCount(t_Stats *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object._get_subBlocksOnlyBlockCount());
            return PyInt_FromLong((long) value);
          }
          static int t_Stats_set__subBlocksOnlyBlockCount(t_Stats *self, PyObject *arg, void *data)
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object._set_subBlocksOnlyBlockCount(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "subBlocksOnlyBlockCount", arg);
            return -1;
          }

          static PyObject *t_Stats_get__termsOnlyBlockCount(t_Stats *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object._get_termsOnlyBlockCount());
            return PyInt_FromLong((long) value);
          }
          static int t_Stats_set__termsOnlyBlockCount(t_Stats *self, PyObject *arg, void *data)
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object._set_termsOnlyBlockCount(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "termsOnlyBlockCount", arg);
            return -1;
          }

          static PyObject *t_Stats_get__totalBlockCount(t_Stats *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object._get_totalBlockCount());
            return PyInt_FromLong((long) value);
          }
          static int t_Stats_set__totalBlockCount(t_Stats *self, PyObject *arg, void *data)
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object._set_totalBlockCount(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "totalBlockCount", arg);
            return -1;
          }

          static PyObject *t_Stats_get__totalBlockOtherBytes(t_Stats *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object._get_totalBlockOtherBytes());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }
          static int t_Stats_set__totalBlockOtherBytes(t_Stats *self, PyObject *arg, void *data)
          {
            jlong value;
            if (!parseArg(arg, "J", &value))
            {
              INT_CALL(self->object._set_totalBlockOtherBytes(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "totalBlockOtherBytes", arg);
            return -1;
          }

          static PyObject *t_Stats_get__totalBlockStatsBytes(t_Stats *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object._get_totalBlockStatsBytes());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }
          static int t_Stats_set__totalBlockStatsBytes(t_Stats *self, PyObject *arg, void *data)
          {
            jlong value;
            if (!parseArg(arg, "J", &value))
            {
              INT_CALL(self->object._set_totalBlockStatsBytes(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "totalBlockStatsBytes", arg);
            return -1;
          }

          static PyObject *t_Stats_get__totalBlockSuffixBytes(t_Stats *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object._get_totalBlockSuffixBytes());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }
          static int t_Stats_set__totalBlockSuffixBytes(t_Stats *self, PyObject *arg, void *data)
          {
            jlong value;
            if (!parseArg(arg, "J", &value))
            {
              INT_CALL(self->object._set_totalBlockSuffixBytes(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "totalBlockSuffixBytes", arg);
            return -1;
          }

          static PyObject *t_Stats_get__totalTermBytes(t_Stats *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object._get_totalTermBytes());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }
          static int t_Stats_set__totalTermBytes(t_Stats *self, PyObject *arg, void *data)
          {
            jlong value;
            if (!parseArg(arg, "J", &value))
            {
              INT_CALL(self->object._set_totalTermBytes(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "totalTermBytes", arg);
            return -1;
          }

          static PyObject *t_Stats_get__totalTermCount(t_Stats *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object._get_totalTermCount());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }
          static int t_Stats_set__totalTermCount(t_Stats *self, PyObject *arg, void *data)
          {
            jlong value;
            if (!parseArg(arg, "J", &value))
            {
              INT_CALL(self->object._set_totalTermCount(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "totalTermCount", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/IndexNotFoundException.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *IndexNotFoundException::class$ = NULL;
        jmethodID *IndexNotFoundException::mids$ = NULL;
        bool IndexNotFoundException::live$ = false;

        jclass IndexNotFoundException::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/IndexNotFoundException");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        IndexNotFoundException::IndexNotFoundException(const ::java::lang::String & a0) : ::java::io::FileNotFoundException(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_IndexNotFoundException_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexNotFoundException_instance_(PyTypeObject *type, PyObject *arg);
        static int t_IndexNotFoundException_init_(t_IndexNotFoundException *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_IndexNotFoundException__methods_[] = {
          DECLARE_METHOD(t_IndexNotFoundException, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexNotFoundException, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(IndexNotFoundException, t_IndexNotFoundException, ::java::io::FileNotFoundException, IndexNotFoundException, t_IndexNotFoundException_init_, 0, 0, 0, 0, 0);

        void t_IndexNotFoundException::install(PyObject *module)
        {
          installType(&PY_TYPE(IndexNotFoundException), module, "IndexNotFoundException", 0);
        }

        void t_IndexNotFoundException::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(IndexNotFoundException).tp_dict, "class_", make_descriptor(IndexNotFoundException::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(IndexNotFoundException).tp_dict, "wrapfn_", make_descriptor(t_IndexNotFoundException::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(IndexNotFoundException).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_IndexNotFoundException_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IndexNotFoundException::initializeClass, 1)))
            return NULL;
          return t_IndexNotFoundException::wrap_Object(IndexNotFoundException(((t_IndexNotFoundException *) arg)->object.this$));
        }
        static PyObject *t_IndexNotFoundException_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IndexNotFoundException::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_IndexNotFoundException_init_(t_IndexNotFoundException *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::String a0((jobject) NULL);
          IndexNotFoundException object((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            INT_CALL(object = IndexNotFoundException(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/highlight/QueryTermExtractor.h"
#include "org/apache/lucene/search/highlight/WeightedTerm.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {

          ::java::lang::Class *QueryTermExtractor::class$ = NULL;
          jmethodID *QueryTermExtractor::mids$ = NULL;
          bool QueryTermExtractor::live$ = false;

          jclass QueryTermExtractor::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/highlight/QueryTermExtractor");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_getIdfWeightedTerms_90fb48ad] = env->getStaticMethodID(cls, "getIdfWeightedTerms", "(Lorg/apache/lucene/search/Query;Lorg/apache/lucene/index/IndexReader;Ljava/lang/String;)[Lorg/apache/lucene/search/highlight/WeightedTerm;");
              mids$[mid_getTerms_ec0cbfa8] = env->getStaticMethodID(cls, "getTerms", "(Lorg/apache/lucene/search/Query;)[Lorg/apache/lucene/search/highlight/WeightedTerm;");
              mids$[mid_getTerms_6d5da3e1] = env->getStaticMethodID(cls, "getTerms", "(Lorg/apache/lucene/search/Query;Z)[Lorg/apache/lucene/search/highlight/WeightedTerm;");
              mids$[mid_getTerms_ac3fa253] = env->getStaticMethodID(cls, "getTerms", "(Lorg/apache/lucene/search/Query;ZLjava/lang/String;)[Lorg/apache/lucene/search/highlight/WeightedTerm;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          QueryTermExtractor::QueryTermExtractor() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          JArray< ::org::apache::lucene::search::highlight::WeightedTerm > QueryTermExtractor::getIdfWeightedTerms(const ::org::apache::lucene::search::Query & a0, const ::org::apache::lucene::index::IndexReader & a1, const ::java::lang::String & a2)
          {
            jclass cls = env->getClass(initializeClass);
            return JArray< ::org::apache::lucene::search::highlight::WeightedTerm >(env->callStaticObjectMethod(cls, mids$[mid_getIdfWeightedTerms_90fb48ad], a0.this$, a1.this$, a2.this$));
          }

          JArray< ::org::apache::lucene::search::highlight::WeightedTerm > QueryTermExtractor::getTerms(const ::org::apache::lucene::search::Query & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return JArray< ::org::apache::lucene::search::highlight::WeightedTerm >(env->callStaticObjectMethod(cls, mids$[mid_getTerms_ec0cbfa8], a0.this$));
          }

          JArray< ::org::apache::lucene::search::highlight::WeightedTerm > QueryTermExtractor::getTerms(const ::org::apache::lucene::search::Query & a0, jboolean a1)
          {
            jclass cls = env->getClass(initializeClass);
            return JArray< ::org::apache::lucene::search::highlight::WeightedTerm >(env->callStaticObjectMethod(cls, mids$[mid_getTerms_6d5da3e1], a0.this$, a1));
          }

          JArray< ::org::apache::lucene::search::highlight::WeightedTerm > QueryTermExtractor::getTerms(const ::org::apache::lucene::search::Query & a0, jboolean a1, const ::java::lang::String & a2)
          {
            jclass cls = env->getClass(initializeClass);
            return JArray< ::org::apache::lucene::search::highlight::WeightedTerm >(env->callStaticObjectMethod(cls, mids$[mid_getTerms_ac3fa253], a0.this$, a1, a2.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {
          static PyObject *t_QueryTermExtractor_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_QueryTermExtractor_instance_(PyTypeObject *type, PyObject *arg);
          static int t_QueryTermExtractor_init_(t_QueryTermExtractor *self, PyObject *args, PyObject *kwds);
          static PyObject *t_QueryTermExtractor_getIdfWeightedTerms(PyTypeObject *type, PyObject *args);
          static PyObject *t_QueryTermExtractor_getTerms(PyTypeObject *type, PyObject *args);

          static PyMethodDef t_QueryTermExtractor__methods_[] = {
            DECLARE_METHOD(t_QueryTermExtractor, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_QueryTermExtractor, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_QueryTermExtractor, getIdfWeightedTerms, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_QueryTermExtractor, getTerms, METH_VARARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(QueryTermExtractor, t_QueryTermExtractor, ::java::lang::Object, QueryTermExtractor, t_QueryTermExtractor_init_, 0, 0, 0, 0, 0);

          void t_QueryTermExtractor::install(PyObject *module)
          {
            installType(&PY_TYPE(QueryTermExtractor), module, "QueryTermExtractor", 0);
          }

          void t_QueryTermExtractor::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(QueryTermExtractor).tp_dict, "class_", make_descriptor(QueryTermExtractor::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(QueryTermExtractor).tp_dict, "wrapfn_", make_descriptor(t_QueryTermExtractor::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(QueryTermExtractor).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_QueryTermExtractor_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, QueryTermExtractor::initializeClass, 1)))
              return NULL;
            return t_QueryTermExtractor::wrap_Object(QueryTermExtractor(((t_QueryTermExtractor *) arg)->object.this$));
          }
          static PyObject *t_QueryTermExtractor_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, QueryTermExtractor::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_QueryTermExtractor_init_(t_QueryTermExtractor *self, PyObject *args, PyObject *kwds)
          {
            QueryTermExtractor object((jobject) NULL);

            INT_CALL(object = QueryTermExtractor());
            self->object = object;

            return 0;
          }

          static PyObject *t_QueryTermExtractor_getIdfWeightedTerms(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::search::Query a0((jobject) NULL);
            ::org::apache::lucene::index::IndexReader a1((jobject) NULL);
            ::java::lang::String a2((jobject) NULL);
            JArray< ::org::apache::lucene::search::highlight::WeightedTerm > result((jobject) NULL);

            if (!parseArgs(args, "kks", ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = ::org::apache::lucene::search::highlight::QueryTermExtractor::getIdfWeightedTerms(a0, a1, a2));
              return JArray<jobject>(result.this$).wrap(::org::apache::lucene::search::highlight::t_WeightedTerm::wrap_jobject);
            }

            PyErr_SetArgsError(type, "getIdfWeightedTerms", args);
            return NULL;
          }

          static PyObject *t_QueryTermExtractor_getTerms(PyTypeObject *type, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::search::Query a0((jobject) NULL);
                JArray< ::org::apache::lucene::search::highlight::WeightedTerm > result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::search::Query::initializeClass, &a0))
                {
                  OBJ_CALL(result = ::org::apache::lucene::search::highlight::QueryTermExtractor::getTerms(a0));
                  return JArray<jobject>(result.this$).wrap(::org::apache::lucene::search::highlight::t_WeightedTerm::wrap_jobject);
                }
              }
              break;
             case 2:
              {
                ::org::apache::lucene::search::Query a0((jobject) NULL);
                jboolean a1;
                JArray< ::org::apache::lucene::search::highlight::WeightedTerm > result((jobject) NULL);

                if (!parseArgs(args, "kZ", ::org::apache::lucene::search::Query::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(result = ::org::apache::lucene::search::highlight::QueryTermExtractor::getTerms(a0, a1));
                  return JArray<jobject>(result.this$).wrap(::org::apache::lucene::search::highlight::t_WeightedTerm::wrap_jobject);
                }
              }
              break;
             case 3:
              {
                ::org::apache::lucene::search::Query a0((jobject) NULL);
                jboolean a1;
                ::java::lang::String a2((jobject) NULL);
                JArray< ::org::apache::lucene::search::highlight::WeightedTerm > result((jobject) NULL);

                if (!parseArgs(args, "kZs", ::org::apache::lucene::search::Query::initializeClass, &a0, &a1, &a2))
                {
                  OBJ_CALL(result = ::org::apache::lucene::search::highlight::QueryTermExtractor::getTerms(a0, a1, a2));
                  return JArray<jobject>(result.this$).wrap(::org::apache::lucene::search::highlight::t_WeightedTerm::wrap_jobject);
                }
              }
            }

            PyErr_SetArgsError(type, "getTerms", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/config/FuzzyConfig.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace config {

              ::java::lang::Class *FuzzyConfig::class$ = NULL;
              jmethodID *FuzzyConfig::mids$ = NULL;
              bool FuzzyConfig::live$ = false;

              jclass FuzzyConfig::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/config/FuzzyConfig");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_getMinSimilarity_54c6a176] = env->getMethodID(cls, "getMinSimilarity", "()F");
                  mids$[mid_getPrefixLength_54c6a179] = env->getMethodID(cls, "getPrefixLength", "()I");
                  mids$[mid_setMinSimilarity_06298cab] = env->getMethodID(cls, "setMinSimilarity", "(F)V");
                  mids$[mid_setPrefixLength_39c7bd3c] = env->getMethodID(cls, "setPrefixLength", "(I)V");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              FuzzyConfig::FuzzyConfig() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              jfloat FuzzyConfig::getMinSimilarity() const
              {
                return env->callFloatMethod(this$, mids$[mid_getMinSimilarity_54c6a176]);
              }

              jint FuzzyConfig::getPrefixLength() const
              {
                return env->callIntMethod(this$, mids$[mid_getPrefixLength_54c6a179]);
              }

              void FuzzyConfig::setMinSimilarity(jfloat a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setMinSimilarity_06298cab], a0);
              }

              void FuzzyConfig::setPrefixLength(jint a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setPrefixLength_39c7bd3c], a0);
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace config {
              static PyObject *t_FuzzyConfig_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_FuzzyConfig_instance_(PyTypeObject *type, PyObject *arg);
              static int t_FuzzyConfig_init_(t_FuzzyConfig *self, PyObject *args, PyObject *kwds);
              static PyObject *t_FuzzyConfig_getMinSimilarity(t_FuzzyConfig *self);
              static PyObject *t_FuzzyConfig_getPrefixLength(t_FuzzyConfig *self);
              static PyObject *t_FuzzyConfig_setMinSimilarity(t_FuzzyConfig *self, PyObject *arg);
              static PyObject *t_FuzzyConfig_setPrefixLength(t_FuzzyConfig *self, PyObject *arg);
              static PyObject *t_FuzzyConfig_get__minSimilarity(t_FuzzyConfig *self, void *data);
              static int t_FuzzyConfig_set__minSimilarity(t_FuzzyConfig *self, PyObject *arg, void *data);
              static PyObject *t_FuzzyConfig_get__prefixLength(t_FuzzyConfig *self, void *data);
              static int t_FuzzyConfig_set__prefixLength(t_FuzzyConfig *self, PyObject *arg, void *data);
              static PyGetSetDef t_FuzzyConfig__fields_[] = {
                DECLARE_GETSET_FIELD(t_FuzzyConfig, minSimilarity),
                DECLARE_GETSET_FIELD(t_FuzzyConfig, prefixLength),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_FuzzyConfig__methods_[] = {
                DECLARE_METHOD(t_FuzzyConfig, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_FuzzyConfig, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_FuzzyConfig, getMinSimilarity, METH_NOARGS),
                DECLARE_METHOD(t_FuzzyConfig, getPrefixLength, METH_NOARGS),
                DECLARE_METHOD(t_FuzzyConfig, setMinSimilarity, METH_O),
                DECLARE_METHOD(t_FuzzyConfig, setPrefixLength, METH_O),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(FuzzyConfig, t_FuzzyConfig, ::java::lang::Object, FuzzyConfig, t_FuzzyConfig_init_, 0, 0, t_FuzzyConfig__fields_, 0, 0);

              void t_FuzzyConfig::install(PyObject *module)
              {
                installType(&PY_TYPE(FuzzyConfig), module, "FuzzyConfig", 0);
              }

              void t_FuzzyConfig::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(FuzzyConfig).tp_dict, "class_", make_descriptor(FuzzyConfig::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(FuzzyConfig).tp_dict, "wrapfn_", make_descriptor(t_FuzzyConfig::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(FuzzyConfig).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_FuzzyConfig_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, FuzzyConfig::initializeClass, 1)))
                  return NULL;
                return t_FuzzyConfig::wrap_Object(FuzzyConfig(((t_FuzzyConfig *) arg)->object.this$));
              }
              static PyObject *t_FuzzyConfig_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, FuzzyConfig::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_FuzzyConfig_init_(t_FuzzyConfig *self, PyObject *args, PyObject *kwds)
              {
                FuzzyConfig object((jobject) NULL);

                INT_CALL(object = FuzzyConfig());
                self->object = object;

                return 0;
              }

              static PyObject *t_FuzzyConfig_getMinSimilarity(t_FuzzyConfig *self)
              {
                jfloat result;
                OBJ_CALL(result = self->object.getMinSimilarity());
                return PyFloat_FromDouble((double) result);
              }

              static PyObject *t_FuzzyConfig_getPrefixLength(t_FuzzyConfig *self)
              {
                jint result;
                OBJ_CALL(result = self->object.getPrefixLength());
                return PyInt_FromLong((long) result);
              }

              static PyObject *t_FuzzyConfig_setMinSimilarity(t_FuzzyConfig *self, PyObject *arg)
              {
                jfloat a0;

                if (!parseArg(arg, "F", &a0))
                {
                  OBJ_CALL(self->object.setMinSimilarity(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setMinSimilarity", arg);
                return NULL;
              }

              static PyObject *t_FuzzyConfig_setPrefixLength(t_FuzzyConfig *self, PyObject *arg)
              {
                jint a0;

                if (!parseArg(arg, "I", &a0))
                {
                  OBJ_CALL(self->object.setPrefixLength(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setPrefixLength", arg);
                return NULL;
              }

              static PyObject *t_FuzzyConfig_get__minSimilarity(t_FuzzyConfig *self, void *data)
              {
                jfloat value;
                OBJ_CALL(value = self->object.getMinSimilarity());
                return PyFloat_FromDouble((double) value);
              }
              static int t_FuzzyConfig_set__minSimilarity(t_FuzzyConfig *self, PyObject *arg, void *data)
              {
                {
                  jfloat value;
                  if (!parseArg(arg, "F", &value))
                  {
                    INT_CALL(self->object.setMinSimilarity(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "minSimilarity", arg);
                return -1;
              }

              static PyObject *t_FuzzyConfig_get__prefixLength(t_FuzzyConfig *self, void *data)
              {
                jint value;
                OBJ_CALL(value = self->object.getPrefixLength());
                return PyInt_FromLong((long) value);
              }
              static int t_FuzzyConfig_set__prefixLength(t_FuzzyConfig *self, PyObject *arg, void *data)
              {
                {
                  jint value;
                  if (!parseArg(arg, "I", &value))
                  {
                    INT_CALL(self->object.setPrefixLength(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "prefixLength", arg);
                return -1;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/pylucene/util/PythonAttribute.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace util {

        ::java::lang::Class *PythonAttribute::class$ = NULL;
        jmethodID *PythonAttribute::mids$ = NULL;
        bool PythonAttribute::live$ = false;

        jclass PythonAttribute::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/pylucene/util/PythonAttribute");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace util {
        static PyObject *t_PythonAttribute_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PythonAttribute_instance_(PyTypeObject *type, PyObject *arg);

        static PyMethodDef t_PythonAttribute__methods_[] = {
          DECLARE_METHOD(t_PythonAttribute, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonAttribute, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PythonAttribute, t_PythonAttribute, ::org::apache::lucene::util::Attribute, PythonAttribute, abstract_init, 0, 0, 0, 0, 0);

        void t_PythonAttribute::install(PyObject *module)
        {
          installType(&PY_TYPE(PythonAttribute), module, "PythonAttribute", 0);
        }

        void t_PythonAttribute::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PythonAttribute).tp_dict, "class_", make_descriptor(PythonAttribute::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PythonAttribute).tp_dict, "wrapfn_", make_descriptor(t_PythonAttribute::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PythonAttribute).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_PythonAttribute_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PythonAttribute::initializeClass, 1)))
            return NULL;
          return t_PythonAttribute::wrap_Object(PythonAttribute(((t_PythonAttribute *) arg)->object.this$));
        }
        static PyObject *t_PythonAttribute_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PythonAttribute::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/ValueQueryNode.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {

              ::java::lang::Class *ValueQueryNode::class$ = NULL;
              jmethodID *ValueQueryNode::mids$ = NULL;
              bool ValueQueryNode::live$ = false;

              jclass ValueQueryNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/nodes/ValueQueryNode");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_getValue_846352c3] = env->getMethodID(cls, "getValue", "()Ljava/lang/Object;");
                  mids$[mid_setValue_290588ee] = env->getMethodID(cls, "setValue", "(Ljava/lang/Object;)V");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              ::java::lang::Object ValueQueryNode::getValue() const
              {
                return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_getValue_846352c3]));
              }

              void ValueQueryNode::setValue(const ::java::lang::Object & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setValue_290588ee], a0.this$);
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {
              static PyObject *t_ValueQueryNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_ValueQueryNode_instance_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_ValueQueryNode_of_(t_ValueQueryNode *self, PyObject *args);
              static PyObject *t_ValueQueryNode_getValue(t_ValueQueryNode *self);
              static PyObject *t_ValueQueryNode_setValue(t_ValueQueryNode *self, PyObject *arg);
              static PyObject *t_ValueQueryNode_get__value(t_ValueQueryNode *self, void *data);
              static int t_ValueQueryNode_set__value(t_ValueQueryNode *self, PyObject *arg, void *data);
              static PyObject *t_ValueQueryNode_get__parameters_(t_ValueQueryNode *self, void *data);
              static PyGetSetDef t_ValueQueryNode__fields_[] = {
                DECLARE_GETSET_FIELD(t_ValueQueryNode, value),
                DECLARE_GET_FIELD(t_ValueQueryNode, parameters_),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_ValueQueryNode__methods_[] = {
                DECLARE_METHOD(t_ValueQueryNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_ValueQueryNode, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_ValueQueryNode, of_, METH_VARARGS),
                DECLARE_METHOD(t_ValueQueryNode, getValue, METH_NOARGS),
                DECLARE_METHOD(t_ValueQueryNode, setValue, METH_O),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(ValueQueryNode, t_ValueQueryNode, ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode, ValueQueryNode, abstract_init, 0, 0, t_ValueQueryNode__fields_, 0, 0);
              PyObject *t_ValueQueryNode::wrap_Object(const ValueQueryNode& object, PyTypeObject *p0)
              {
                PyObject *obj = t_ValueQueryNode::wrap_Object(object);
                if (obj != NULL && obj != Py_None)
                {
                  t_ValueQueryNode *self = (t_ValueQueryNode *) obj;
                  self->parameters[0] = p0;
                }
                return obj;
              }

              PyObject *t_ValueQueryNode::wrap_jobject(const jobject& object, PyTypeObject *p0)
              {
                PyObject *obj = t_ValueQueryNode::wrap_jobject(object);
                if (obj != NULL && obj != Py_None)
                {
                  t_ValueQueryNode *self = (t_ValueQueryNode *) obj;
                  self->parameters[0] = p0;
                }
                return obj;
              }

              void t_ValueQueryNode::install(PyObject *module)
              {
                installType(&PY_TYPE(ValueQueryNode), module, "ValueQueryNode", 0);
              }

              void t_ValueQueryNode::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(ValueQueryNode).tp_dict, "class_", make_descriptor(ValueQueryNode::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(ValueQueryNode).tp_dict, "wrapfn_", make_descriptor(t_ValueQueryNode::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(ValueQueryNode).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_ValueQueryNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, ValueQueryNode::initializeClass, 1)))
                  return NULL;
                return t_ValueQueryNode::wrap_Object(ValueQueryNode(((t_ValueQueryNode *) arg)->object.this$));
              }
              static PyObject *t_ValueQueryNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, ValueQueryNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static PyObject *t_ValueQueryNode_of_(t_ValueQueryNode *self, PyObject *args)
              {
                if (!parseArg(args, "T", 1, &(self->parameters)))
                  Py_RETURN_SELF;
                return PyErr_SetArgsError((PyObject *) self, "of_", args);
              }

              static PyObject *t_ValueQueryNode_getValue(t_ValueQueryNode *self)
              {
                ::java::lang::Object result((jobject) NULL);
                OBJ_CALL(result = self->object.getValue());
                return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
              }

              static PyObject *t_ValueQueryNode_setValue(t_ValueQueryNode *self, PyObject *arg)
              {
                ::java::lang::Object a0((jobject) NULL);

                if (!parseArg(arg, "O", self->parameters[0], &a0))
                {
                  OBJ_CALL(self->object.setValue(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setValue", arg);
                return NULL;
              }
              static PyObject *t_ValueQueryNode_get__parameters_(t_ValueQueryNode *self, void *data)
              {
                return typeParameters(self->parameters, sizeof(self->parameters));
              }

              static PyObject *t_ValueQueryNode_get__value(t_ValueQueryNode *self, void *data)
              {
                ::java::lang::Object value((jobject) NULL);
                OBJ_CALL(value = self->object.getValue());
                return ::java::lang::t_Object::wrap_Object(value);
              }
              static int t_ValueQueryNode_set__value(t_ValueQueryNode *self, PyObject *arg, void *data)
              {
                {
                  ::java::lang::Object value((jobject) NULL);
                  if (!parseArg(arg, "o", &value))
                  {
                    INT_CALL(self->object.setValue(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "value", arg);
                return -1;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/SortedNumericSortField.h"
#include "org/apache/lucene/search/SortedNumericSelector$Type.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/FieldComparator.h"
#include "org/apache/lucene/search/SortField$Type.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *SortedNumericSortField::class$ = NULL;
        jmethodID *SortedNumericSortField::mids$ = NULL;
        bool SortedNumericSortField::live$ = false;

        jclass SortedNumericSortField::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/SortedNumericSortField");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_b65c884e] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/search/SortField$Type;)V");
            mids$[mid_init$_28dc1d67] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/search/SortField$Type;Z)V");
            mids$[mid_init$_f03d0044] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/search/SortField$Type;ZLorg/apache/lucene/search/SortedNumericSelector$Type;)V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_getComparator_f38637f4] = env->getMethodID(cls, "getComparator", "(II)Lorg/apache/lucene/search/FieldComparator;");
            mids$[mid_getSelector_26022dee] = env->getMethodID(cls, "getSelector", "()Lorg/apache/lucene/search/SortedNumericSelector$Type;");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_setMissingValue_290588ee] = env->getMethodID(cls, "setMissingValue", "(Ljava/lang/Object;)V");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SortedNumericSortField::SortedNumericSortField(const ::java::lang::String & a0, const ::org::apache::lucene::search::SortField$Type & a1) : ::org::apache::lucene::search::SortField(env->newObject(initializeClass, &mids$, mid_init$_b65c884e, a0.this$, a1.this$)) {}

        SortedNumericSortField::SortedNumericSortField(const ::java::lang::String & a0, const ::org::apache::lucene::search::SortField$Type & a1, jboolean a2) : ::org::apache::lucene::search::SortField(env->newObject(initializeClass, &mids$, mid_init$_28dc1d67, a0.this$, a1.this$, a2)) {}

        SortedNumericSortField::SortedNumericSortField(const ::java::lang::String & a0, const ::org::apache::lucene::search::SortField$Type & a1, jboolean a2, const ::org::apache::lucene::search::SortedNumericSelector$Type & a3) : ::org::apache::lucene::search::SortField(env->newObject(initializeClass, &mids$, mid_init$_f03d0044, a0.this$, a1.this$, a2, a3.this$)) {}

        jboolean SortedNumericSortField::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        ::org::apache::lucene::search::FieldComparator SortedNumericSortField::getComparator(jint a0, jint a1) const
        {
          return ::org::apache::lucene::search::FieldComparator(env->callObjectMethod(this$, mids$[mid_getComparator_f38637f4], a0, a1));
        }

        ::org::apache::lucene::search::SortedNumericSelector$Type SortedNumericSortField::getSelector() const
        {
          return ::org::apache::lucene::search::SortedNumericSelector$Type(env->callObjectMethod(this$, mids$[mid_getSelector_26022dee]));
        }

        jint SortedNumericSortField::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        void SortedNumericSortField::setMissingValue(const ::java::lang::Object & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setMissingValue_290588ee], a0.this$);
        }

        ::java::lang::String SortedNumericSortField::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_SortedNumericSortField_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SortedNumericSortField_instance_(PyTypeObject *type, PyObject *arg);
        static int t_SortedNumericSortField_init_(t_SortedNumericSortField *self, PyObject *args, PyObject *kwds);
        static PyObject *t_SortedNumericSortField_equals(t_SortedNumericSortField *self, PyObject *args);
        static PyObject *t_SortedNumericSortField_getComparator(t_SortedNumericSortField *self, PyObject *args);
        static PyObject *t_SortedNumericSortField_getSelector(t_SortedNumericSortField *self);
        static PyObject *t_SortedNumericSortField_hashCode(t_SortedNumericSortField *self, PyObject *args);
        static PyObject *t_SortedNumericSortField_setMissingValue(t_SortedNumericSortField *self, PyObject *args);
        static PyObject *t_SortedNumericSortField_toString(t_SortedNumericSortField *self, PyObject *args);
        static int t_SortedNumericSortField_set__missingValue(t_SortedNumericSortField *self, PyObject *arg, void *data);
        static PyObject *t_SortedNumericSortField_get__selector(t_SortedNumericSortField *self, void *data);
        static PyGetSetDef t_SortedNumericSortField__fields_[] = {
          DECLARE_SET_FIELD(t_SortedNumericSortField, missingValue),
          DECLARE_GET_FIELD(t_SortedNumericSortField, selector),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_SortedNumericSortField__methods_[] = {
          DECLARE_METHOD(t_SortedNumericSortField, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SortedNumericSortField, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SortedNumericSortField, equals, METH_VARARGS),
          DECLARE_METHOD(t_SortedNumericSortField, getComparator, METH_VARARGS),
          DECLARE_METHOD(t_SortedNumericSortField, getSelector, METH_NOARGS),
          DECLARE_METHOD(t_SortedNumericSortField, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_SortedNumericSortField, setMissingValue, METH_VARARGS),
          DECLARE_METHOD(t_SortedNumericSortField, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SortedNumericSortField, t_SortedNumericSortField, ::org::apache::lucene::search::SortField, SortedNumericSortField, t_SortedNumericSortField_init_, 0, 0, t_SortedNumericSortField__fields_, 0, 0);

        void t_SortedNumericSortField::install(PyObject *module)
        {
          installType(&PY_TYPE(SortedNumericSortField), module, "SortedNumericSortField", 0);
        }

        void t_SortedNumericSortField::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SortedNumericSortField).tp_dict, "class_", make_descriptor(SortedNumericSortField::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SortedNumericSortField).tp_dict, "wrapfn_", make_descriptor(t_SortedNumericSortField::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SortedNumericSortField).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SortedNumericSortField_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SortedNumericSortField::initializeClass, 1)))
            return NULL;
          return t_SortedNumericSortField::wrap_Object(SortedNumericSortField(((t_SortedNumericSortField *) arg)->object.this$));
        }
        static PyObject *t_SortedNumericSortField_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SortedNumericSortField::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_SortedNumericSortField_init_(t_SortedNumericSortField *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::search::SortField$Type a1((jobject) NULL);
              PyTypeObject **p1;
              SortedNumericSortField object((jobject) NULL);

              if (!parseArgs(args, "sK", ::org::apache::lucene::search::SortField$Type::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::search::t_SortField$Type::parameters_))
              {
                INT_CALL(object = SortedNumericSortField(a0, a1));
                self->object = object;
                break;
              }
            }
            goto err;
           case 3:
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::search::SortField$Type a1((jobject) NULL);
              PyTypeObject **p1;
              jboolean a2;
              SortedNumericSortField object((jobject) NULL);

              if (!parseArgs(args, "sKZ", ::org::apache::lucene::search::SortField$Type::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::search::t_SortField$Type::parameters_, &a2))
              {
                INT_CALL(object = SortedNumericSortField(a0, a1, a2));
                self->object = object;
                break;
              }
            }
            goto err;
           case 4:
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::search::SortField$Type a1((jobject) NULL);
              PyTypeObject **p1;
              jboolean a2;
              ::org::apache::lucene::search::SortedNumericSelector$Type a3((jobject) NULL);
              PyTypeObject **p3;
              SortedNumericSortField object((jobject) NULL);

              if (!parseArgs(args, "sKZK", ::org::apache::lucene::search::SortField$Type::initializeClass, ::org::apache::lucene::search::SortedNumericSelector$Type::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::search::t_SortField$Type::parameters_, &a2, &a3, &p3, ::org::apache::lucene::search::t_SortedNumericSelector$Type::parameters_))
              {
                INT_CALL(object = SortedNumericSortField(a0, a1, a2, a3));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_SortedNumericSortField_equals(t_SortedNumericSortField *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(SortedNumericSortField), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_SortedNumericSortField_getComparator(t_SortedNumericSortField *self, PyObject *args)
        {
          jint a0;
          jint a1;
          ::org::apache::lucene::search::FieldComparator result((jobject) NULL);

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(result = self->object.getComparator(a0, a1));
            return ::org::apache::lucene::search::t_FieldComparator::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(SortedNumericSortField), (PyObject *) self, "getComparator", args, 2);
        }

        static PyObject *t_SortedNumericSortField_getSelector(t_SortedNumericSortField *self)
        {
          ::org::apache::lucene::search::SortedNumericSelector$Type result((jobject) NULL);
          OBJ_CALL(result = self->object.getSelector());
          return ::org::apache::lucene::search::t_SortedNumericSelector$Type::wrap_Object(result);
        }

        static PyObject *t_SortedNumericSortField_hashCode(t_SortedNumericSortField *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(SortedNumericSortField), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_SortedNumericSortField_setMissingValue(t_SortedNumericSortField *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(self->object.setMissingValue(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(SortedNumericSortField), (PyObject *) self, "setMissingValue", args, 2);
        }

        static PyObject *t_SortedNumericSortField_toString(t_SortedNumericSortField *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(SortedNumericSortField), (PyObject *) self, "toString", args, 2);
        }

        static int t_SortedNumericSortField_set__missingValue(t_SortedNumericSortField *self, PyObject *arg, void *data)
        {
          {
            ::java::lang::Object value((jobject) NULL);
            if (!parseArg(arg, "o", &value))
            {
              INT_CALL(self->object.setMissingValue(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "missingValue", arg);
          return -1;
        }

        static PyObject *t_SortedNumericSortField_get__selector(t_SortedNumericSortField *self, void *data)
        {
          ::org::apache::lucene::search::SortedNumericSelector$Type value((jobject) NULL);
          OBJ_CALL(value = self->object.getSelector());
          return ::org::apache::lucene::search::t_SortedNumericSelector$Type::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/VerifyingLockFactory.h"
#include "java/io/OutputStream.h"
#include "org/apache/lucene/store/Lock.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "java/lang/String.h"
#include "java/io/InputStream.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *VerifyingLockFactory::class$ = NULL;
        jmethodID *VerifyingLockFactory::mids$ = NULL;
        bool VerifyingLockFactory::live$ = false;

        jclass VerifyingLockFactory::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/VerifyingLockFactory");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_118c9b94] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/LockFactory;Ljava/io/InputStream;Ljava/io/OutputStream;)V");
            mids$[mid_clearLock_5fdc3f48] = env->getMethodID(cls, "clearLock", "(Ljava/lang/String;)V");
            mids$[mid_makeLock_f26bb9a8] = env->getMethodID(cls, "makeLock", "(Ljava/lang/String;)Lorg/apache/lucene/store/Lock;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        VerifyingLockFactory::VerifyingLockFactory(const ::org::apache::lucene::store::LockFactory & a0, const ::java::io::InputStream & a1, const ::java::io::OutputStream & a2) : ::org::apache::lucene::store::LockFactory(env->newObject(initializeClass, &mids$, mid_init$_118c9b94, a0.this$, a1.this$, a2.this$)) {}

        void VerifyingLockFactory::clearLock(const ::java::lang::String & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_clearLock_5fdc3f48], a0.this$);
        }

        ::org::apache::lucene::store::Lock VerifyingLockFactory::makeLock(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::store::Lock(env->callObjectMethod(this$, mids$[mid_makeLock_f26bb9a8], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_VerifyingLockFactory_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_VerifyingLockFactory_instance_(PyTypeObject *type, PyObject *arg);
        static int t_VerifyingLockFactory_init_(t_VerifyingLockFactory *self, PyObject *args, PyObject *kwds);
        static PyObject *t_VerifyingLockFactory_clearLock(t_VerifyingLockFactory *self, PyObject *args);
        static PyObject *t_VerifyingLockFactory_makeLock(t_VerifyingLockFactory *self, PyObject *args);

        static PyMethodDef t_VerifyingLockFactory__methods_[] = {
          DECLARE_METHOD(t_VerifyingLockFactory, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_VerifyingLockFactory, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_VerifyingLockFactory, clearLock, METH_VARARGS),
          DECLARE_METHOD(t_VerifyingLockFactory, makeLock, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(VerifyingLockFactory, t_VerifyingLockFactory, ::org::apache::lucene::store::LockFactory, VerifyingLockFactory, t_VerifyingLockFactory_init_, 0, 0, 0, 0, 0);

        void t_VerifyingLockFactory::install(PyObject *module)
        {
          installType(&PY_TYPE(VerifyingLockFactory), module, "VerifyingLockFactory", 0);
        }

        void t_VerifyingLockFactory::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(VerifyingLockFactory).tp_dict, "class_", make_descriptor(VerifyingLockFactory::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(VerifyingLockFactory).tp_dict, "wrapfn_", make_descriptor(t_VerifyingLockFactory::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(VerifyingLockFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_VerifyingLockFactory_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, VerifyingLockFactory::initializeClass, 1)))
            return NULL;
          return t_VerifyingLockFactory::wrap_Object(VerifyingLockFactory(((t_VerifyingLockFactory *) arg)->object.this$));
        }
        static PyObject *t_VerifyingLockFactory_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, VerifyingLockFactory::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_VerifyingLockFactory_init_(t_VerifyingLockFactory *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::store::LockFactory a0((jobject) NULL);
          ::java::io::InputStream a1((jobject) NULL);
          ::java::io::OutputStream a2((jobject) NULL);
          VerifyingLockFactory object((jobject) NULL);

          if (!parseArgs(args, "kkk", ::org::apache::lucene::store::LockFactory::initializeClass, ::java::io::InputStream::initializeClass, ::java::io::OutputStream::initializeClass, &a0, &a1, &a2))
          {
            INT_CALL(object = VerifyingLockFactory(a0, a1, a2));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_VerifyingLockFactory_clearLock(t_VerifyingLockFactory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(self->object.clearLock(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(VerifyingLockFactory), (PyObject *) self, "clearLock", args, 2);
        }

        static PyObject *t_VerifyingLockFactory_makeLock(t_VerifyingLockFactory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::store::Lock result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.makeLock(a0));
            return ::org::apache::lucene::store::t_Lock::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(VerifyingLockFactory), (PyObject *) self, "makeLock", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/fst/PairOutputs$Pair.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {

          ::java::lang::Class *PairOutputs$Pair::class$ = NULL;
          jmethodID *PairOutputs$Pair::mids$ = NULL;
          jfieldID *PairOutputs$Pair::fids$ = NULL;
          bool PairOutputs$Pair::live$ = false;

          jclass PairOutputs$Pair::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/fst/PairOutputs$Pair");

              mids$ = new jmethodID[max_mid];
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              fids$ = new jfieldID[max_fid];
              fids$[fid_output1] = env->getFieldID(cls, "output1", "Ljava/lang/Object;");
              fids$[fid_output2] = env->getFieldID(cls, "output2", "Ljava/lang/Object;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jboolean PairOutputs$Pair::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          jint PairOutputs$Pair::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          ::java::lang::String PairOutputs$Pair::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }

          ::java::lang::Object PairOutputs$Pair::_get_output1() const
          {
            return ::java::lang::Object(env->getObjectField(this$, fids$[fid_output1]));
          }

          ::java::lang::Object PairOutputs$Pair::_get_output2() const
          {
            return ::java::lang::Object(env->getObjectField(this$, fids$[fid_output2]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {
          static PyObject *t_PairOutputs$Pair_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PairOutputs$Pair_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PairOutputs$Pair_of_(t_PairOutputs$Pair *self, PyObject *args);
          static PyObject *t_PairOutputs$Pair_equals(t_PairOutputs$Pair *self, PyObject *args);
          static PyObject *t_PairOutputs$Pair_hashCode(t_PairOutputs$Pair *self, PyObject *args);
          static PyObject *t_PairOutputs$Pair_toString(t_PairOutputs$Pair *self, PyObject *args);
          static PyObject *t_PairOutputs$Pair_get__output1(t_PairOutputs$Pair *self, void *data);
          static PyObject *t_PairOutputs$Pair_get__output2(t_PairOutputs$Pair *self, void *data);

          static PyObject *t_PairOutputs$Pair_get__parameters_(t_PairOutputs$Pair *self, void *data);
          static PyGetSetDef t_PairOutputs$Pair__fields_[] = {
            DECLARE_GET_FIELD(t_PairOutputs$Pair, output1),
            DECLARE_GET_FIELD(t_PairOutputs$Pair, output2),
            DECLARE_GET_FIELD(t_PairOutputs$Pair, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_PairOutputs$Pair__methods_[] = {
            DECLARE_METHOD(t_PairOutputs$Pair, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PairOutputs$Pair, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PairOutputs$Pair, of_, METH_VARARGS),
            DECLARE_METHOD(t_PairOutputs$Pair, equals, METH_VARARGS),
            DECLARE_METHOD(t_PairOutputs$Pair, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_PairOutputs$Pair, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PairOutputs$Pair, t_PairOutputs$Pair, ::java::lang::Object, PairOutputs$Pair, abstract_init, 0, 0, t_PairOutputs$Pair__fields_, 0, 0);
          PyObject *t_PairOutputs$Pair::wrap_Object(const PairOutputs$Pair& object, PyTypeObject *p0, PyTypeObject *p1)
          {
            PyObject *obj = t_PairOutputs$Pair::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_PairOutputs$Pair *self = (t_PairOutputs$Pair *) obj;
              self->parameters[0] = p0;
              self->parameters[1] = p1;
            }
            return obj;
          }

          PyObject *t_PairOutputs$Pair::wrap_jobject(const jobject& object, PyTypeObject *p0, PyTypeObject *p1)
          {
            PyObject *obj = t_PairOutputs$Pair::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_PairOutputs$Pair *self = (t_PairOutputs$Pair *) obj;
              self->parameters[0] = p0;
              self->parameters[1] = p1;
            }
            return obj;
          }

          void t_PairOutputs$Pair::install(PyObject *module)
          {
            installType(&PY_TYPE(PairOutputs$Pair), module, "PairOutputs$Pair", 0);
          }

          void t_PairOutputs$Pair::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PairOutputs$Pair).tp_dict, "class_", make_descriptor(PairOutputs$Pair::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PairOutputs$Pair).tp_dict, "wrapfn_", make_descriptor(t_PairOutputs$Pair::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PairOutputs$Pair).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PairOutputs$Pair_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PairOutputs$Pair::initializeClass, 1)))
              return NULL;
            return t_PairOutputs$Pair::wrap_Object(PairOutputs$Pair(((t_PairOutputs$Pair *) arg)->object.this$));
          }
          static PyObject *t_PairOutputs$Pair_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PairOutputs$Pair::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_PairOutputs$Pair_of_(t_PairOutputs$Pair *self, PyObject *args)
          {
            if (!parseArg(args, "T", 2, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static PyObject *t_PairOutputs$Pair_equals(t_PairOutputs$Pair *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(PairOutputs$Pair), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_PairOutputs$Pair_hashCode(t_PairOutputs$Pair *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(PairOutputs$Pair), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_PairOutputs$Pair_toString(t_PairOutputs$Pair *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(PairOutputs$Pair), (PyObject *) self, "toString", args, 2);
          }
          static PyObject *t_PairOutputs$Pair_get__parameters_(t_PairOutputs$Pair *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_PairOutputs$Pair_get__output1(t_PairOutputs$Pair *self, void *data)
          {
            ::java::lang::Object value((jobject) NULL);
            OBJ_CALL(value = self->object._get_output1());
            return ::java::lang::t_Object::wrap_Object(value);
          }

          static PyObject *t_PairOutputs$Pair_get__output2(t_PairOutputs$Pair *self, void *data)
          {
            ::java::lang::Object value((jobject) NULL);
            OBJ_CALL(value = self->object._get_output2());
            return ::java::lang::t_Object::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/IndexableField.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "java/io/Reader.h"
#include "org/apache/lucene/index/IndexableFieldType.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "java/lang/Number.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *IndexableField::class$ = NULL;
        jmethodID *IndexableField::mids$ = NULL;
        bool IndexableField::live$ = false;

        jclass IndexableField::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/IndexableField");

            mids$ = new jmethodID[max_mid];
            mids$[mid_binaryValue_4ae19461] = env->getMethodID(cls, "binaryValue", "()Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_boost_54c6a176] = env->getMethodID(cls, "boost", "()F");
            mids$[mid_fieldType_58dcbc9c] = env->getMethodID(cls, "fieldType", "()Lorg/apache/lucene/index/IndexableFieldType;");
            mids$[mid_name_14c7b5c5] = env->getMethodID(cls, "name", "()Ljava/lang/String;");
            mids$[mid_numericValue_ee47e3e1] = env->getMethodID(cls, "numericValue", "()Ljava/lang/Number;");
            mids$[mid_readerValue_b6f16bdd] = env->getMethodID(cls, "readerValue", "()Ljava/io/Reader;");
            mids$[mid_stringValue_14c7b5c5] = env->getMethodID(cls, "stringValue", "()Ljava/lang/String;");
            mids$[mid_tokenStream_cea65119] = env->getMethodID(cls, "tokenStream", "(Lorg/apache/lucene/analysis/Analyzer;Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::util::BytesRef IndexableField::binaryValue() const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_binaryValue_4ae19461]));
        }

        jfloat IndexableField::boost() const
        {
          return env->callFloatMethod(this$, mids$[mid_boost_54c6a176]);
        }

        ::org::apache::lucene::index::IndexableFieldType IndexableField::fieldType() const
        {
          return ::org::apache::lucene::index::IndexableFieldType(env->callObjectMethod(this$, mids$[mid_fieldType_58dcbc9c]));
        }

        ::java::lang::String IndexableField::name() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_name_14c7b5c5]));
        }

        ::java::lang::Number IndexableField::numericValue() const
        {
          return ::java::lang::Number(env->callObjectMethod(this$, mids$[mid_numericValue_ee47e3e1]));
        }

        ::java::io::Reader IndexableField::readerValue() const
        {
          return ::java::io::Reader(env->callObjectMethod(this$, mids$[mid_readerValue_b6f16bdd]));
        }

        ::java::lang::String IndexableField::stringValue() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_stringValue_14c7b5c5]));
        }

        ::org::apache::lucene::analysis::TokenStream IndexableField::tokenStream(const ::org::apache::lucene::analysis::Analyzer & a0, const ::org::apache::lucene::analysis::TokenStream & a1) const
        {
          return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_tokenStream_cea65119], a0.this$, a1.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_IndexableField_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexableField_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexableField_binaryValue(t_IndexableField *self);
        static PyObject *t_IndexableField_boost(t_IndexableField *self);
        static PyObject *t_IndexableField_fieldType(t_IndexableField *self);
        static PyObject *t_IndexableField_name(t_IndexableField *self);
        static PyObject *t_IndexableField_numericValue(t_IndexableField *self);
        static PyObject *t_IndexableField_readerValue(t_IndexableField *self);
        static PyObject *t_IndexableField_stringValue(t_IndexableField *self);
        static PyObject *t_IndexableField_tokenStream(t_IndexableField *self, PyObject *args);

        static PyMethodDef t_IndexableField__methods_[] = {
          DECLARE_METHOD(t_IndexableField, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexableField, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexableField, binaryValue, METH_NOARGS),
          DECLARE_METHOD(t_IndexableField, boost, METH_NOARGS),
          DECLARE_METHOD(t_IndexableField, fieldType, METH_NOARGS),
          DECLARE_METHOD(t_IndexableField, name, METH_NOARGS),
          DECLARE_METHOD(t_IndexableField, numericValue, METH_NOARGS),
          DECLARE_METHOD(t_IndexableField, readerValue, METH_NOARGS),
          DECLARE_METHOD(t_IndexableField, stringValue, METH_NOARGS),
          DECLARE_METHOD(t_IndexableField, tokenStream, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(IndexableField, t_IndexableField, ::java::lang::Object, IndexableField, abstract_init, 0, 0, 0, 0, 0);

        void t_IndexableField::install(PyObject *module)
        {
          installType(&PY_TYPE(IndexableField), module, "IndexableField", 0);
        }

        void t_IndexableField::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(IndexableField).tp_dict, "class_", make_descriptor(IndexableField::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(IndexableField).tp_dict, "wrapfn_", make_descriptor(t_IndexableField::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(IndexableField).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_IndexableField_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IndexableField::initializeClass, 1)))
            return NULL;
          return t_IndexableField::wrap_Object(IndexableField(((t_IndexableField *) arg)->object.this$));
        }
        static PyObject *t_IndexableField_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IndexableField::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_IndexableField_binaryValue(t_IndexableField *self)
        {
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);
          OBJ_CALL(result = self->object.binaryValue());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
        }

        static PyObject *t_IndexableField_boost(t_IndexableField *self)
        {
          jfloat result;
          OBJ_CALL(result = self->object.boost());
          return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_IndexableField_fieldType(t_IndexableField *self)
        {
          ::org::apache::lucene::index::IndexableFieldType result((jobject) NULL);
          OBJ_CALL(result = self->object.fieldType());
          return ::org::apache::lucene::index::t_IndexableFieldType::wrap_Object(result);
        }

        static PyObject *t_IndexableField_name(t_IndexableField *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.name());
          return j2p(result);
        }

        static PyObject *t_IndexableField_numericValue(t_IndexableField *self)
        {
          ::java::lang::Number result((jobject) NULL);
          OBJ_CALL(result = self->object.numericValue());
          return ::java::lang::t_Number::wrap_Object(result);
        }

        static PyObject *t_IndexableField_readerValue(t_IndexableField *self)
        {
          ::java::io::Reader result((jobject) NULL);
          OBJ_CALL(result = self->object.readerValue());
          return ::java::io::t_Reader::wrap_Object(result);
        }

        static PyObject *t_IndexableField_stringValue(t_IndexableField *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.stringValue());
          return j2p(result);
        }

        static PyObject *t_IndexableField_tokenStream(t_IndexableField *self, PyObject *args)
        {
          ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
          ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
          ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::analysis::Analyzer::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.tokenStream(a0, a1));
            return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "tokenStream", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/FacetsCollector$MatchingDocs.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/search/DocIdSet.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {

        ::java::lang::Class *FacetsCollector$MatchingDocs::class$ = NULL;
        jmethodID *FacetsCollector$MatchingDocs::mids$ = NULL;
        jfieldID *FacetsCollector$MatchingDocs::fids$ = NULL;
        bool FacetsCollector$MatchingDocs::live$ = false;

        jclass FacetsCollector$MatchingDocs::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/facet/FacetsCollector$MatchingDocs");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_9edc9b13] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/AtomicReaderContext;Lorg/apache/lucene/search/DocIdSet;I[F)V");

            fids$ = new jfieldID[max_fid];
            fids$[fid_bits] = env->getFieldID(cls, "bits", "Lorg/apache/lucene/search/DocIdSet;");
            fids$[fid_context] = env->getFieldID(cls, "context", "Lorg/apache/lucene/index/AtomicReaderContext;");
            fids$[fid_scores] = env->getFieldID(cls, "scores", "[F");
            fids$[fid_totalHits] = env->getFieldID(cls, "totalHits", "I");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FacetsCollector$MatchingDocs::FacetsCollector$MatchingDocs(const ::org::apache::lucene::index::AtomicReaderContext & a0, const ::org::apache::lucene::search::DocIdSet & a1, jint a2, const JArray< jfloat > & a3) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_9edc9b13, a0.this$, a1.this$, a2, a3.this$)) {}

        ::org::apache::lucene::search::DocIdSet FacetsCollector$MatchingDocs::_get_bits() const
        {
          return ::org::apache::lucene::search::DocIdSet(env->getObjectField(this$, fids$[fid_bits]));
        }

        ::org::apache::lucene::index::AtomicReaderContext FacetsCollector$MatchingDocs::_get_context() const
        {
          return ::org::apache::lucene::index::AtomicReaderContext(env->getObjectField(this$, fids$[fid_context]));
        }

        JArray< jfloat > FacetsCollector$MatchingDocs::_get_scores() const
        {
          return JArray< jfloat >(env->getObjectField(this$, fids$[fid_scores]));
        }

        jint FacetsCollector$MatchingDocs::_get_totalHits() const
        {
          return env->getIntField(this$, fids$[fid_totalHits]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        static PyObject *t_FacetsCollector$MatchingDocs_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FacetsCollector$MatchingDocs_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FacetsCollector$MatchingDocs_init_(t_FacetsCollector$MatchingDocs *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FacetsCollector$MatchingDocs_get__bits(t_FacetsCollector$MatchingDocs *self, void *data);
        static PyObject *t_FacetsCollector$MatchingDocs_get__context(t_FacetsCollector$MatchingDocs *self, void *data);
        static PyObject *t_FacetsCollector$MatchingDocs_get__scores(t_FacetsCollector$MatchingDocs *self, void *data);
        static PyObject *t_FacetsCollector$MatchingDocs_get__totalHits(t_FacetsCollector$MatchingDocs *self, void *data);

        static PyGetSetDef t_FacetsCollector$MatchingDocs__fields_[] = {
          DECLARE_GET_FIELD(t_FacetsCollector$MatchingDocs, bits),
          DECLARE_GET_FIELD(t_FacetsCollector$MatchingDocs, context),
          DECLARE_GET_FIELD(t_FacetsCollector$MatchingDocs, scores),
          DECLARE_GET_FIELD(t_FacetsCollector$MatchingDocs, totalHits),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FacetsCollector$MatchingDocs__methods_[] = {
          DECLARE_METHOD(t_FacetsCollector$MatchingDocs, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FacetsCollector$MatchingDocs, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FacetsCollector$MatchingDocs, t_FacetsCollector$MatchingDocs, ::java::lang::Object, FacetsCollector$MatchingDocs, t_FacetsCollector$MatchingDocs_init_, 0, 0, t_FacetsCollector$MatchingDocs__fields_, 0, 0);

        void t_FacetsCollector$MatchingDocs::install(PyObject *module)
        {
          installType(&PY_TYPE(FacetsCollector$MatchingDocs), module, "FacetsCollector$MatchingDocs", 0);
        }

        void t_FacetsCollector$MatchingDocs::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FacetsCollector$MatchingDocs).tp_dict, "class_", make_descriptor(FacetsCollector$MatchingDocs::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FacetsCollector$MatchingDocs).tp_dict, "wrapfn_", make_descriptor(t_FacetsCollector$MatchingDocs::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FacetsCollector$MatchingDocs).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FacetsCollector$MatchingDocs_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FacetsCollector$MatchingDocs::initializeClass, 1)))
            return NULL;
          return t_FacetsCollector$MatchingDocs::wrap_Object(FacetsCollector$MatchingDocs(((t_FacetsCollector$MatchingDocs *) arg)->object.this$));
        }
        static PyObject *t_FacetsCollector$MatchingDocs_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FacetsCollector$MatchingDocs::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FacetsCollector$MatchingDocs_init_(t_FacetsCollector$MatchingDocs *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
          ::org::apache::lucene::search::DocIdSet a1((jobject) NULL);
          jint a2;
          JArray< jfloat > a3((jobject) NULL);
          FacetsCollector$MatchingDocs object((jobject) NULL);

          if (!parseArgs(args, "kkI[F", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, ::org::apache::lucene::search::DocIdSet::initializeClass, &a0, &a1, &a2, &a3))
          {
            INT_CALL(object = FacetsCollector$MatchingDocs(a0, a1, a2, a3));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FacetsCollector$MatchingDocs_get__bits(t_FacetsCollector$MatchingDocs *self, void *data)
        {
          ::org::apache::lucene::search::DocIdSet value((jobject) NULL);
          OBJ_CALL(value = self->object._get_bits());
          return ::org::apache::lucene::search::t_DocIdSet::wrap_Object(value);
        }

        static PyObject *t_FacetsCollector$MatchingDocs_get__context(t_FacetsCollector$MatchingDocs *self, void *data)
        {
          ::org::apache::lucene::index::AtomicReaderContext value((jobject) NULL);
          OBJ_CALL(value = self->object._get_context());
          return ::org::apache::lucene::index::t_AtomicReaderContext::wrap_Object(value);
        }

        static PyObject *t_FacetsCollector$MatchingDocs_get__scores(t_FacetsCollector$MatchingDocs *self, void *data)
        {
          JArray< jfloat > value((jobject) NULL);
          OBJ_CALL(value = self->object._get_scores());
          return value.wrap();
        }

        static PyObject *t_FacetsCollector$MatchingDocs_get__totalHits(t_FacetsCollector$MatchingDocs *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_totalHits());
          return PyInt_FromLong((long) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/TimeLimitingCollector.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/TimeLimitingCollector$TimerThread.h"
#include "org/apache/lucene/search/Scorer.h"
#include "org/apache/lucene/util/Counter.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *TimeLimitingCollector::class$ = NULL;
        jmethodID *TimeLimitingCollector::mids$ = NULL;
        bool TimeLimitingCollector::live$ = false;

        jclass TimeLimitingCollector::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/TimeLimitingCollector");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_d1481a7a] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Collector;Lorg/apache/lucene/util/Counter;J)V");
            mids$[mid_acceptsDocsOutOfOrder_54c6a16a] = env->getMethodID(cls, "acceptsDocsOutOfOrder", "()Z");
            mids$[mid_collect_39c7bd3c] = env->getMethodID(cls, "collect", "(I)V");
            mids$[mid_getGlobalCounter_781dd30a] = env->getStaticMethodID(cls, "getGlobalCounter", "()Lorg/apache/lucene/util/Counter;");
            mids$[mid_getGlobalTimerThread_91bdd0a8] = env->getStaticMethodID(cls, "getGlobalTimerThread", "()Lorg/apache/lucene/search/TimeLimitingCollector$TimerThread;");
            mids$[mid_isGreedy_54c6a16a] = env->getMethodID(cls, "isGreedy", "()Z");
            mids$[mid_setBaseline_54c6a166] = env->getMethodID(cls, "setBaseline", "()V");
            mids$[mid_setBaseline_0ee6df2f] = env->getMethodID(cls, "setBaseline", "(J)V");
            mids$[mid_setCollector_77379ce0] = env->getMethodID(cls, "setCollector", "(Lorg/apache/lucene/search/Collector;)V");
            mids$[mid_setGreedy_bb0c767f] = env->getMethodID(cls, "setGreedy", "(Z)V");
            mids$[mid_setNextReader_a6f59947] = env->getMethodID(cls, "setNextReader", "(Lorg/apache/lucene/index/AtomicReaderContext;)V");
            mids$[mid_setScorer_8be0880c] = env->getMethodID(cls, "setScorer", "(Lorg/apache/lucene/search/Scorer;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        TimeLimitingCollector::TimeLimitingCollector(const ::org::apache::lucene::search::Collector & a0, const ::org::apache::lucene::util::Counter & a1, jlong a2) : ::org::apache::lucene::search::Collector(env->newObject(initializeClass, &mids$, mid_init$_d1481a7a, a0.this$, a1.this$, a2)) {}

        jboolean TimeLimitingCollector::acceptsDocsOutOfOrder() const
        {
          return env->callBooleanMethod(this$, mids$[mid_acceptsDocsOutOfOrder_54c6a16a]);
        }

        void TimeLimitingCollector::collect(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_collect_39c7bd3c], a0);
        }

        ::org::apache::lucene::util::Counter TimeLimitingCollector::getGlobalCounter()
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::util::Counter(env->callStaticObjectMethod(cls, mids$[mid_getGlobalCounter_781dd30a]));
        }

        ::org::apache::lucene::search::TimeLimitingCollector$TimerThread TimeLimitingCollector::getGlobalTimerThread()
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::TimeLimitingCollector$TimerThread(env->callStaticObjectMethod(cls, mids$[mid_getGlobalTimerThread_91bdd0a8]));
        }

        jboolean TimeLimitingCollector::isGreedy() const
        {
          return env->callBooleanMethod(this$, mids$[mid_isGreedy_54c6a16a]);
        }

        void TimeLimitingCollector::setBaseline() const
        {
          env->callVoidMethod(this$, mids$[mid_setBaseline_54c6a166]);
        }

        void TimeLimitingCollector::setBaseline(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setBaseline_0ee6df2f], a0);
        }

        void TimeLimitingCollector::setCollector(const ::org::apache::lucene::search::Collector & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setCollector_77379ce0], a0.this$);
        }

        void TimeLimitingCollector::setGreedy(jboolean a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setGreedy_bb0c767f], a0);
        }

        void TimeLimitingCollector::setNextReader(const ::org::apache::lucene::index::AtomicReaderContext & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setNextReader_a6f59947], a0.this$);
        }

        void TimeLimitingCollector::setScorer(const ::org::apache::lucene::search::Scorer & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setScorer_8be0880c], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/search/TimeLimitingCollector$TimeExceededException.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_TimeLimitingCollector_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TimeLimitingCollector_instance_(PyTypeObject *type, PyObject *arg);
        static int t_TimeLimitingCollector_init_(t_TimeLimitingCollector *self, PyObject *args, PyObject *kwds);
        static PyObject *t_TimeLimitingCollector_acceptsDocsOutOfOrder(t_TimeLimitingCollector *self, PyObject *args);
        static PyObject *t_TimeLimitingCollector_collect(t_TimeLimitingCollector *self, PyObject *args);
        static PyObject *t_TimeLimitingCollector_getGlobalCounter(PyTypeObject *type);
        static PyObject *t_TimeLimitingCollector_getGlobalTimerThread(PyTypeObject *type);
        static PyObject *t_TimeLimitingCollector_isGreedy(t_TimeLimitingCollector *self);
        static PyObject *t_TimeLimitingCollector_setBaseline(t_TimeLimitingCollector *self, PyObject *args);
        static PyObject *t_TimeLimitingCollector_setCollector(t_TimeLimitingCollector *self, PyObject *arg);
        static PyObject *t_TimeLimitingCollector_setGreedy(t_TimeLimitingCollector *self, PyObject *arg);
        static PyObject *t_TimeLimitingCollector_setNextReader(t_TimeLimitingCollector *self, PyObject *args);
        static PyObject *t_TimeLimitingCollector_setScorer(t_TimeLimitingCollector *self, PyObject *args);
        static int t_TimeLimitingCollector_set__baseline(t_TimeLimitingCollector *self, PyObject *arg, void *data);
        static int t_TimeLimitingCollector_set__collector(t_TimeLimitingCollector *self, PyObject *arg, void *data);
        static PyObject *t_TimeLimitingCollector_get__globalCounter(t_TimeLimitingCollector *self, void *data);
        static PyObject *t_TimeLimitingCollector_get__globalTimerThread(t_TimeLimitingCollector *self, void *data);
        static PyObject *t_TimeLimitingCollector_get__greedy(t_TimeLimitingCollector *self, void *data);
        static int t_TimeLimitingCollector_set__greedy(t_TimeLimitingCollector *self, PyObject *arg, void *data);
        static int t_TimeLimitingCollector_set__nextReader(t_TimeLimitingCollector *self, PyObject *arg, void *data);
        static int t_TimeLimitingCollector_set__scorer(t_TimeLimitingCollector *self, PyObject *arg, void *data);
        static PyGetSetDef t_TimeLimitingCollector__fields_[] = {
          DECLARE_SET_FIELD(t_TimeLimitingCollector, baseline),
          DECLARE_SET_FIELD(t_TimeLimitingCollector, collector),
          DECLARE_GET_FIELD(t_TimeLimitingCollector, globalCounter),
          DECLARE_GET_FIELD(t_TimeLimitingCollector, globalTimerThread),
          DECLARE_GETSET_FIELD(t_TimeLimitingCollector, greedy),
          DECLARE_SET_FIELD(t_TimeLimitingCollector, nextReader),
          DECLARE_SET_FIELD(t_TimeLimitingCollector, scorer),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_TimeLimitingCollector__methods_[] = {
          DECLARE_METHOD(t_TimeLimitingCollector, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TimeLimitingCollector, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TimeLimitingCollector, acceptsDocsOutOfOrder, METH_VARARGS),
          DECLARE_METHOD(t_TimeLimitingCollector, collect, METH_VARARGS),
          DECLARE_METHOD(t_TimeLimitingCollector, getGlobalCounter, METH_NOARGS | METH_CLASS),
          DECLARE_METHOD(t_TimeLimitingCollector, getGlobalTimerThread, METH_NOARGS | METH_CLASS),
          DECLARE_METHOD(t_TimeLimitingCollector, isGreedy, METH_NOARGS),
          DECLARE_METHOD(t_TimeLimitingCollector, setBaseline, METH_VARARGS),
          DECLARE_METHOD(t_TimeLimitingCollector, setCollector, METH_O),
          DECLARE_METHOD(t_TimeLimitingCollector, setGreedy, METH_O),
          DECLARE_METHOD(t_TimeLimitingCollector, setNextReader, METH_VARARGS),
          DECLARE_METHOD(t_TimeLimitingCollector, setScorer, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TimeLimitingCollector, t_TimeLimitingCollector, ::org::apache::lucene::search::Collector, TimeLimitingCollector, t_TimeLimitingCollector_init_, 0, 0, t_TimeLimitingCollector__fields_, 0, 0);

        void t_TimeLimitingCollector::install(PyObject *module)
        {
          installType(&PY_TYPE(TimeLimitingCollector), module, "TimeLimitingCollector", 0);
          PyDict_SetItemString(PY_TYPE(TimeLimitingCollector).tp_dict, "TimerThread", make_descriptor(&PY_TYPE(TimeLimitingCollector$TimerThread)));
          PyDict_SetItemString(PY_TYPE(TimeLimitingCollector).tp_dict, "TimeExceededException", make_descriptor(&PY_TYPE(TimeLimitingCollector$TimeExceededException)));
        }

        void t_TimeLimitingCollector::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TimeLimitingCollector).tp_dict, "class_", make_descriptor(TimeLimitingCollector::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TimeLimitingCollector).tp_dict, "wrapfn_", make_descriptor(t_TimeLimitingCollector::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TimeLimitingCollector).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TimeLimitingCollector_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TimeLimitingCollector::initializeClass, 1)))
            return NULL;
          return t_TimeLimitingCollector::wrap_Object(TimeLimitingCollector(((t_TimeLimitingCollector *) arg)->object.this$));
        }
        static PyObject *t_TimeLimitingCollector_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TimeLimitingCollector::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_TimeLimitingCollector_init_(t_TimeLimitingCollector *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::search::Collector a0((jobject) NULL);
          ::org::apache::lucene::util::Counter a1((jobject) NULL);
          jlong a2;
          TimeLimitingCollector object((jobject) NULL);

          if (!parseArgs(args, "kkJ", ::org::apache::lucene::search::Collector::initializeClass, ::org::apache::lucene::util::Counter::initializeClass, &a0, &a1, &a2))
          {
            INT_CALL(object = TimeLimitingCollector(a0, a1, a2));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_TimeLimitingCollector_acceptsDocsOutOfOrder(t_TimeLimitingCollector *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.acceptsDocsOutOfOrder());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(TimeLimitingCollector), (PyObject *) self, "acceptsDocsOutOfOrder", args, 2);
        }

        static PyObject *t_TimeLimitingCollector_collect(t_TimeLimitingCollector *self, PyObject *args)
        {
          jint a0;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(self->object.collect(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(TimeLimitingCollector), (PyObject *) self, "collect", args, 2);
        }

        static PyObject *t_TimeLimitingCollector_getGlobalCounter(PyTypeObject *type)
        {
          ::org::apache::lucene::util::Counter result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::search::TimeLimitingCollector::getGlobalCounter());
          return ::org::apache::lucene::util::t_Counter::wrap_Object(result);
        }

        static PyObject *t_TimeLimitingCollector_getGlobalTimerThread(PyTypeObject *type)
        {
          ::org::apache::lucene::search::TimeLimitingCollector$TimerThread result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::search::TimeLimitingCollector::getGlobalTimerThread());
          return ::org::apache::lucene::search::t_TimeLimitingCollector$TimerThread::wrap_Object(result);
        }

        static PyObject *t_TimeLimitingCollector_isGreedy(t_TimeLimitingCollector *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.isGreedy());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_TimeLimitingCollector_setBaseline(t_TimeLimitingCollector *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              OBJ_CALL(self->object.setBaseline());
              Py_RETURN_NONE;
            }
            break;
           case 1:
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.setBaseline(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "setBaseline", args);
          return NULL;
        }

        static PyObject *t_TimeLimitingCollector_setCollector(t_TimeLimitingCollector *self, PyObject *arg)
        {
          ::org::apache::lucene::search::Collector a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::search::Collector::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setCollector(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setCollector", arg);
          return NULL;
        }

        static PyObject *t_TimeLimitingCollector_setGreedy(t_TimeLimitingCollector *self, PyObject *arg)
        {
          jboolean a0;

          if (!parseArg(arg, "Z", &a0))
          {
            OBJ_CALL(self->object.setGreedy(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setGreedy", arg);
          return NULL;
        }

        static PyObject *t_TimeLimitingCollector_setNextReader(t_TimeLimitingCollector *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setNextReader(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(TimeLimitingCollector), (PyObject *) self, "setNextReader", args, 2);
        }

        static PyObject *t_TimeLimitingCollector_setScorer(t_TimeLimitingCollector *self, PyObject *args)
        {
          ::org::apache::lucene::search::Scorer a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::search::Scorer::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setScorer(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(TimeLimitingCollector), (PyObject *) self, "setScorer", args, 2);
        }

        static int t_TimeLimitingCollector_set__baseline(t_TimeLimitingCollector *self, PyObject *arg, void *data)
        {
          {
            jlong value;
            if (!parseArg(arg, "J", &value))
            {
              INT_CALL(self->object.setBaseline(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "baseline", arg);
          return -1;
        }

        static int t_TimeLimitingCollector_set__collector(t_TimeLimitingCollector *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::search::Collector value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::search::Collector::initializeClass, &value))
            {
              INT_CALL(self->object.setCollector(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "collector", arg);
          return -1;
        }

        static PyObject *t_TimeLimitingCollector_get__globalCounter(t_TimeLimitingCollector *self, void *data)
        {
          ::org::apache::lucene::util::Counter value((jobject) NULL);
          OBJ_CALL(value = self->object.getGlobalCounter());
          return ::org::apache::lucene::util::t_Counter::wrap_Object(value);
        }

        static PyObject *t_TimeLimitingCollector_get__globalTimerThread(t_TimeLimitingCollector *self, void *data)
        {
          ::org::apache::lucene::search::TimeLimitingCollector$TimerThread value((jobject) NULL);
          OBJ_CALL(value = self->object.getGlobalTimerThread());
          return ::org::apache::lucene::search::t_TimeLimitingCollector$TimerThread::wrap_Object(value);
        }

        static PyObject *t_TimeLimitingCollector_get__greedy(t_TimeLimitingCollector *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.isGreedy());
          Py_RETURN_BOOL(value);
        }
        static int t_TimeLimitingCollector_set__greedy(t_TimeLimitingCollector *self, PyObject *arg, void *data)
        {
          {
            jboolean value;
            if (!parseArg(arg, "Z", &value))
            {
              INT_CALL(self->object.setGreedy(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "greedy", arg);
          return -1;
        }

        static int t_TimeLimitingCollector_set__nextReader(t_TimeLimitingCollector *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::index::AtomicReaderContext value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &value))
            {
              INT_CALL(self->object.setNextReader(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "nextReader", arg);
          return -1;
        }

        static int t_TimeLimitingCollector_set__scorer(t_TimeLimitingCollector *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::search::Scorer value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::search::Scorer::initializeClass, &value))
            {
              INT_CALL(self->object.setScorer(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "scorer", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/cn/ChineseAnalyzer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace cn {

          ::java::lang::Class *ChineseAnalyzer::class$ = NULL;
          jmethodID *ChineseAnalyzer::mids$ = NULL;
          bool ChineseAnalyzer::live$ = false;

          jclass ChineseAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/cn/ChineseAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ChineseAnalyzer::ChineseAnalyzer() : ::org::apache::lucene::analysis::Analyzer(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace cn {
          static PyObject *t_ChineseAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ChineseAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ChineseAnalyzer_init_(t_ChineseAnalyzer *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_ChineseAnalyzer__methods_[] = {
            DECLARE_METHOD(t_ChineseAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ChineseAnalyzer, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ChineseAnalyzer, t_ChineseAnalyzer, ::org::apache::lucene::analysis::Analyzer, ChineseAnalyzer, t_ChineseAnalyzer_init_, 0, 0, 0, 0, 0);

          void t_ChineseAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(ChineseAnalyzer), module, "ChineseAnalyzer", 0);
          }

          void t_ChineseAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ChineseAnalyzer).tp_dict, "class_", make_descriptor(ChineseAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ChineseAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_ChineseAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ChineseAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ChineseAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ChineseAnalyzer::initializeClass, 1)))
              return NULL;
            return t_ChineseAnalyzer::wrap_Object(ChineseAnalyzer(((t_ChineseAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_ChineseAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ChineseAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ChineseAnalyzer_init_(t_ChineseAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            ChineseAnalyzer object((jobject) NULL);

            INT_CALL(object = ChineseAnalyzer());
            self->object = object;

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/ReferenceManager.h"
#include "org/apache/lucene/search/ReferenceManager$RefreshListener.h"
#include "java/io/IOException.h"
#include "java/io/Closeable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *ReferenceManager::class$ = NULL;
        jmethodID *ReferenceManager::mids$ = NULL;
        bool ReferenceManager::live$ = false;

        jclass ReferenceManager::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/ReferenceManager");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_acquire_846352c3] = env->getMethodID(cls, "acquire", "()Ljava/lang/Object;");
            mids$[mid_addListener_c1691f71] = env->getMethodID(cls, "addListener", "(Lorg/apache/lucene/search/ReferenceManager$RefreshListener;)V");
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_maybeRefresh_54c6a16a] = env->getMethodID(cls, "maybeRefresh", "()Z");
            mids$[mid_maybeRefreshBlocking_54c6a166] = env->getMethodID(cls, "maybeRefreshBlocking", "()V");
            mids$[mid_release_290588ee] = env->getMethodID(cls, "release", "(Ljava/lang/Object;)V");
            mids$[mid_removeListener_c1691f71] = env->getMethodID(cls, "removeListener", "(Lorg/apache/lucene/search/ReferenceManager$RefreshListener;)V");
            mids$[mid_decRef_290588ee] = env->getMethodID(cls, "decRef", "(Ljava/lang/Object;)V");
            mids$[mid_getRefCount_290588f1] = env->getMethodID(cls, "getRefCount", "(Ljava/lang/Object;)I");
            mids$[mid_tryIncRef_290588e2] = env->getMethodID(cls, "tryIncRef", "(Ljava/lang/Object;)Z");
            mids$[mid_refreshIfNeeded_a932a95f] = env->getMethodID(cls, "refreshIfNeeded", "(Ljava/lang/Object;)Ljava/lang/Object;");
            mids$[mid_afterClose_54c6a166] = env->getMethodID(cls, "afterClose", "()V");
            mids$[mid_afterMaybeRefresh_54c6a166] = env->getMethodID(cls, "afterMaybeRefresh", "()V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ReferenceManager::ReferenceManager() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        ::java::lang::Object ReferenceManager::acquire() const
        {
          return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_acquire_846352c3]));
        }

        void ReferenceManager::addListener(const ::org::apache::lucene::search::ReferenceManager$RefreshListener & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_addListener_c1691f71], a0.this$);
        }

        void ReferenceManager::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        jboolean ReferenceManager::maybeRefresh() const
        {
          return env->callBooleanMethod(this$, mids$[mid_maybeRefresh_54c6a16a]);
        }

        void ReferenceManager::maybeRefreshBlocking() const
        {
          env->callVoidMethod(this$, mids$[mid_maybeRefreshBlocking_54c6a166]);
        }

        void ReferenceManager::release(const ::java::lang::Object & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_release_290588ee], a0.this$);
        }

        void ReferenceManager::removeListener(const ::org::apache::lucene::search::ReferenceManager$RefreshListener & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_removeListener_c1691f71], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_ReferenceManager_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ReferenceManager_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ReferenceManager_of_(t_ReferenceManager *self, PyObject *args);
        static int t_ReferenceManager_init_(t_ReferenceManager *self, PyObject *args, PyObject *kwds);
        static PyObject *t_ReferenceManager_acquire(t_ReferenceManager *self);
        static PyObject *t_ReferenceManager_addListener(t_ReferenceManager *self, PyObject *arg);
        static PyObject *t_ReferenceManager_close(t_ReferenceManager *self);
        static PyObject *t_ReferenceManager_maybeRefresh(t_ReferenceManager *self);
        static PyObject *t_ReferenceManager_maybeRefreshBlocking(t_ReferenceManager *self);
        static PyObject *t_ReferenceManager_release(t_ReferenceManager *self, PyObject *arg);
        static PyObject *t_ReferenceManager_removeListener(t_ReferenceManager *self, PyObject *arg);
        static PyObject *t_ReferenceManager_get__parameters_(t_ReferenceManager *self, void *data);
        static PyGetSetDef t_ReferenceManager__fields_[] = {
          DECLARE_GET_FIELD(t_ReferenceManager, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_ReferenceManager__methods_[] = {
          DECLARE_METHOD(t_ReferenceManager, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ReferenceManager, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ReferenceManager, of_, METH_VARARGS),
          DECLARE_METHOD(t_ReferenceManager, acquire, METH_NOARGS),
          DECLARE_METHOD(t_ReferenceManager, addListener, METH_O),
          DECLARE_METHOD(t_ReferenceManager, close, METH_NOARGS),
          DECLARE_METHOD(t_ReferenceManager, maybeRefresh, METH_NOARGS),
          DECLARE_METHOD(t_ReferenceManager, maybeRefreshBlocking, METH_NOARGS),
          DECLARE_METHOD(t_ReferenceManager, release, METH_O),
          DECLARE_METHOD(t_ReferenceManager, removeListener, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(ReferenceManager, t_ReferenceManager, ::java::lang::Object, ReferenceManager, t_ReferenceManager_init_, 0, 0, t_ReferenceManager__fields_, 0, 0);
        PyObject *t_ReferenceManager::wrap_Object(const ReferenceManager& object, PyTypeObject *p0)
        {
          PyObject *obj = t_ReferenceManager::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_ReferenceManager *self = (t_ReferenceManager *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_ReferenceManager::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_ReferenceManager::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_ReferenceManager *self = (t_ReferenceManager *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_ReferenceManager::install(PyObject *module)
        {
          installType(&PY_TYPE(ReferenceManager), module, "ReferenceManager", 0);
          PyDict_SetItemString(PY_TYPE(ReferenceManager).tp_dict, "RefreshListener", make_descriptor(&PY_TYPE(ReferenceManager$RefreshListener)));
        }

        void t_ReferenceManager::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(ReferenceManager).tp_dict, "class_", make_descriptor(ReferenceManager::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(ReferenceManager).tp_dict, "wrapfn_", make_descriptor(t_ReferenceManager::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(ReferenceManager).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_ReferenceManager_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, ReferenceManager::initializeClass, 1)))
            return NULL;
          return t_ReferenceManager::wrap_Object(ReferenceManager(((t_ReferenceManager *) arg)->object.this$));
        }
        static PyObject *t_ReferenceManager_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, ReferenceManager::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_ReferenceManager_of_(t_ReferenceManager *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_ReferenceManager_init_(t_ReferenceManager *self, PyObject *args, PyObject *kwds)
        {
          ReferenceManager object((jobject) NULL);

          INT_CALL(object = ReferenceManager());
          self->object = object;

          return 0;
        }

        static PyObject *t_ReferenceManager_acquire(t_ReferenceManager *self)
        {
          ::java::lang::Object result((jobject) NULL);
          OBJ_CALL(result = self->object.acquire());
          return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
        }

        static PyObject *t_ReferenceManager_addListener(t_ReferenceManager *self, PyObject *arg)
        {
          ::org::apache::lucene::search::ReferenceManager$RefreshListener a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArg(arg, "K", ::org::apache::lucene::search::ReferenceManager$RefreshListener::initializeClass, &a0, &p0, ::org::apache::lucene::search::t_ReferenceManager$RefreshListener::parameters_))
          {
            OBJ_CALL(self->object.addListener(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "addListener", arg);
          return NULL;
        }

        static PyObject *t_ReferenceManager_close(t_ReferenceManager *self)
        {
          OBJ_CALL(self->object.close());
          Py_RETURN_NONE;
        }

        static PyObject *t_ReferenceManager_maybeRefresh(t_ReferenceManager *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.maybeRefresh());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_ReferenceManager_maybeRefreshBlocking(t_ReferenceManager *self)
        {
          OBJ_CALL(self->object.maybeRefreshBlocking());
          Py_RETURN_NONE;
        }

        static PyObject *t_ReferenceManager_release(t_ReferenceManager *self, PyObject *arg)
        {
          ::java::lang::Object a0((jobject) NULL);

          if (!parseArg(arg, "O", self->parameters[0], &a0))
          {
            OBJ_CALL(self->object.release(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "release", arg);
          return NULL;
        }

        static PyObject *t_ReferenceManager_removeListener(t_ReferenceManager *self, PyObject *arg)
        {
          ::org::apache::lucene::search::ReferenceManager$RefreshListener a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArg(arg, "K", ::org::apache::lucene::search::ReferenceManager$RefreshListener::initializeClass, &a0, &p0, ::org::apache::lucene::search::t_ReferenceManager$RefreshListener::parameters_))
          {
            OBJ_CALL(self->object.removeListener(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "removeListener", arg);
          return NULL;
        }
        static PyObject *t_ReferenceManager_get__parameters_(t_ReferenceManager *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/CachedOrdinalsReader.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/facet/taxonomy/OrdinalsReader$OrdinalsSegmentReader.h"
#include "org/apache/lucene/util/Accountable.h"
#include "java/io/IOException.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {

          ::java::lang::Class *CachedOrdinalsReader::class$ = NULL;
          jmethodID *CachedOrdinalsReader::mids$ = NULL;
          bool CachedOrdinalsReader::live$ = false;

          jclass CachedOrdinalsReader::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/CachedOrdinalsReader");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_90116188] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/facet/taxonomy/OrdinalsReader;)V");
              mids$[mid_getIndexFieldName_14c7b5c5] = env->getMethodID(cls, "getIndexFieldName", "()Ljava/lang/String;");
              mids$[mid_getReader_7c7f912a] = env->getMethodID(cls, "getReader", "(Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/facet/taxonomy/OrdinalsReader$OrdinalsSegmentReader;");
              mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CachedOrdinalsReader::CachedOrdinalsReader(const ::org::apache::lucene::facet::taxonomy::OrdinalsReader & a0) : ::org::apache::lucene::facet::taxonomy::OrdinalsReader(env->newObject(initializeClass, &mids$, mid_init$_90116188, a0.this$)) {}

          ::java::lang::String CachedOrdinalsReader::getIndexFieldName() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getIndexFieldName_14c7b5c5]));
          }

          ::org::apache::lucene::facet::taxonomy::OrdinalsReader$OrdinalsSegmentReader CachedOrdinalsReader::getReader(const ::org::apache::lucene::index::AtomicReaderContext & a0) const
          {
            return ::org::apache::lucene::facet::taxonomy::OrdinalsReader$OrdinalsSegmentReader(env->callObjectMethod(this$, mids$[mid_getReader_7c7f912a], a0.this$));
          }

          jlong CachedOrdinalsReader::ramBytesUsed() const
          {
            return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/facet/taxonomy/CachedOrdinalsReader$CachedOrds.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          static PyObject *t_CachedOrdinalsReader_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CachedOrdinalsReader_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CachedOrdinalsReader_init_(t_CachedOrdinalsReader *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CachedOrdinalsReader_getIndexFieldName(t_CachedOrdinalsReader *self, PyObject *args);
          static PyObject *t_CachedOrdinalsReader_getReader(t_CachedOrdinalsReader *self, PyObject *args);
          static PyObject *t_CachedOrdinalsReader_ramBytesUsed(t_CachedOrdinalsReader *self);
          static PyObject *t_CachedOrdinalsReader_get__indexFieldName(t_CachedOrdinalsReader *self, void *data);
          static PyGetSetDef t_CachedOrdinalsReader__fields_[] = {
            DECLARE_GET_FIELD(t_CachedOrdinalsReader, indexFieldName),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_CachedOrdinalsReader__methods_[] = {
            DECLARE_METHOD(t_CachedOrdinalsReader, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CachedOrdinalsReader, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CachedOrdinalsReader, getIndexFieldName, METH_VARARGS),
            DECLARE_METHOD(t_CachedOrdinalsReader, getReader, METH_VARARGS),
            DECLARE_METHOD(t_CachedOrdinalsReader, ramBytesUsed, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CachedOrdinalsReader, t_CachedOrdinalsReader, ::org::apache::lucene::facet::taxonomy::OrdinalsReader, CachedOrdinalsReader, t_CachedOrdinalsReader_init_, 0, 0, t_CachedOrdinalsReader__fields_, 0, 0);

          void t_CachedOrdinalsReader::install(PyObject *module)
          {
            installType(&PY_TYPE(CachedOrdinalsReader), module, "CachedOrdinalsReader", 0);
            PyDict_SetItemString(PY_TYPE(CachedOrdinalsReader).tp_dict, "CachedOrds", make_descriptor(&PY_TYPE(CachedOrdinalsReader$CachedOrds)));
          }

          void t_CachedOrdinalsReader::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CachedOrdinalsReader).tp_dict, "class_", make_descriptor(CachedOrdinalsReader::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CachedOrdinalsReader).tp_dict, "wrapfn_", make_descriptor(t_CachedOrdinalsReader::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CachedOrdinalsReader).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CachedOrdinalsReader_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CachedOrdinalsReader::initializeClass, 1)))
              return NULL;
            return t_CachedOrdinalsReader::wrap_Object(CachedOrdinalsReader(((t_CachedOrdinalsReader *) arg)->object.this$));
          }
          static PyObject *t_CachedOrdinalsReader_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CachedOrdinalsReader::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CachedOrdinalsReader_init_(t_CachedOrdinalsReader *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::facet::taxonomy::OrdinalsReader a0((jobject) NULL);
            CachedOrdinalsReader object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::facet::taxonomy::OrdinalsReader::initializeClass, &a0))
            {
              INT_CALL(object = CachedOrdinalsReader(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_CachedOrdinalsReader_getIndexFieldName(t_CachedOrdinalsReader *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getIndexFieldName());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(CachedOrdinalsReader), (PyObject *) self, "getIndexFieldName", args, 2);
          }

          static PyObject *t_CachedOrdinalsReader_getReader(t_CachedOrdinalsReader *self, PyObject *args)
          {
            ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
            ::org::apache::lucene::facet::taxonomy::OrdinalsReader$OrdinalsSegmentReader result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.getReader(a0));
              return ::org::apache::lucene::facet::taxonomy::t_OrdinalsReader$OrdinalsSegmentReader::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(CachedOrdinalsReader), (PyObject *) self, "getReader", args, 2);
          }

          static PyObject *t_CachedOrdinalsReader_ramBytesUsed(t_CachedOrdinalsReader *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.ramBytesUsed());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_CachedOrdinalsReader_get__indexFieldName(t_CachedOrdinalsReader *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getIndexFieldName());
            return j2p(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene40/Lucene40PostingsBaseFormat.h"
#include "org/apache/lucene/index/SegmentWriteState.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/codecs/PostingsWriterBase.h"
#include "org/apache/lucene/index/SegmentReadState.h"
#include "org/apache/lucene/codecs/PostingsReaderBase.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene40 {

          ::java::lang::Class *Lucene40PostingsBaseFormat::class$ = NULL;
          jmethodID *Lucene40PostingsBaseFormat::mids$ = NULL;
          bool Lucene40PostingsBaseFormat::live$ = false;

          jclass Lucene40PostingsBaseFormat::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene40/Lucene40PostingsBaseFormat");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_postingsReaderBase_927fb3f2] = env->getMethodID(cls, "postingsReaderBase", "(Lorg/apache/lucene/index/SegmentReadState;)Lorg/apache/lucene/codecs/PostingsReaderBase;");
              mids$[mid_postingsWriterBase_c1fe85c2] = env->getMethodID(cls, "postingsWriterBase", "(Lorg/apache/lucene/index/SegmentWriteState;)Lorg/apache/lucene/codecs/PostingsWriterBase;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene40PostingsBaseFormat::Lucene40PostingsBaseFormat() : ::org::apache::lucene::codecs::PostingsBaseFormat(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::codecs::PostingsReaderBase Lucene40PostingsBaseFormat::postingsReaderBase(const ::org::apache::lucene::index::SegmentReadState & a0) const
          {
            return ::org::apache::lucene::codecs::PostingsReaderBase(env->callObjectMethod(this$, mids$[mid_postingsReaderBase_927fb3f2], a0.this$));
          }

          ::org::apache::lucene::codecs::PostingsWriterBase Lucene40PostingsBaseFormat::postingsWriterBase(const ::org::apache::lucene::index::SegmentWriteState & a0) const
          {
            return ::org::apache::lucene::codecs::PostingsWriterBase(env->callObjectMethod(this$, mids$[mid_postingsWriterBase_c1fe85c2], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene40 {
          static PyObject *t_Lucene40PostingsBaseFormat_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene40PostingsBaseFormat_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene40PostingsBaseFormat_init_(t_Lucene40PostingsBaseFormat *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene40PostingsBaseFormat_postingsReaderBase(t_Lucene40PostingsBaseFormat *self, PyObject *args);
          static PyObject *t_Lucene40PostingsBaseFormat_postingsWriterBase(t_Lucene40PostingsBaseFormat *self, PyObject *args);

          static PyMethodDef t_Lucene40PostingsBaseFormat__methods_[] = {
            DECLARE_METHOD(t_Lucene40PostingsBaseFormat, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene40PostingsBaseFormat, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene40PostingsBaseFormat, postingsReaderBase, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40PostingsBaseFormat, postingsWriterBase, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene40PostingsBaseFormat, t_Lucene40PostingsBaseFormat, ::org::apache::lucene::codecs::PostingsBaseFormat, Lucene40PostingsBaseFormat, t_Lucene40PostingsBaseFormat_init_, 0, 0, 0, 0, 0);

          void t_Lucene40PostingsBaseFormat::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene40PostingsBaseFormat), module, "Lucene40PostingsBaseFormat", 0);
          }

          void t_Lucene40PostingsBaseFormat::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene40PostingsBaseFormat).tp_dict, "class_", make_descriptor(Lucene40PostingsBaseFormat::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene40PostingsBaseFormat).tp_dict, "wrapfn_", make_descriptor(t_Lucene40PostingsBaseFormat::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene40PostingsBaseFormat).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lucene40PostingsBaseFormat_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene40PostingsBaseFormat::initializeClass, 1)))
              return NULL;
            return t_Lucene40PostingsBaseFormat::wrap_Object(Lucene40PostingsBaseFormat(((t_Lucene40PostingsBaseFormat *) arg)->object.this$));
          }
          static PyObject *t_Lucene40PostingsBaseFormat_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene40PostingsBaseFormat::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene40PostingsBaseFormat_init_(t_Lucene40PostingsBaseFormat *self, PyObject *args, PyObject *kwds)
          {
            Lucene40PostingsBaseFormat object((jobject) NULL);

            INT_CALL(object = Lucene40PostingsBaseFormat());
            self->object = object;

            return 0;
          }

          static PyObject *t_Lucene40PostingsBaseFormat_postingsReaderBase(t_Lucene40PostingsBaseFormat *self, PyObject *args)
          {
            ::org::apache::lucene::index::SegmentReadState a0((jobject) NULL);
            ::org::apache::lucene::codecs::PostingsReaderBase result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::SegmentReadState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.postingsReaderBase(a0));
              return ::org::apache::lucene::codecs::t_PostingsReaderBase::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene40PostingsBaseFormat), (PyObject *) self, "postingsReaderBase", args, 2);
          }

          static PyObject *t_Lucene40PostingsBaseFormat_postingsWriterBase(t_Lucene40PostingsBaseFormat *self, PyObject *args)
          {
            ::org::apache::lucene::index::SegmentWriteState a0((jobject) NULL);
            ::org::apache::lucene::codecs::PostingsWriterBase result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::SegmentWriteState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.postingsWriterBase(a0));
              return ::org::apache::lucene::codecs::t_PostingsWriterBase::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene40PostingsBaseFormat), (PyObject *) self, "postingsWriterBase", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/fst/BytesRefFSTEnum$InputOutput.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {

          ::java::lang::Class *BytesRefFSTEnum$InputOutput::class$ = NULL;
          jmethodID *BytesRefFSTEnum$InputOutput::mids$ = NULL;
          jfieldID *BytesRefFSTEnum$InputOutput::fids$ = NULL;
          bool BytesRefFSTEnum$InputOutput::live$ = false;

          jclass BytesRefFSTEnum$InputOutput::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/fst/BytesRefFSTEnum$InputOutput");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

              fids$ = new jfieldID[max_fid];
              fids$[fid_input] = env->getFieldID(cls, "input", "Lorg/apache/lucene/util/BytesRef;");
              fids$[fid_output] = env->getFieldID(cls, "output", "Ljava/lang/Object;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BytesRefFSTEnum$InputOutput::BytesRefFSTEnum$InputOutput() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::util::BytesRef BytesRefFSTEnum$InputOutput::_get_input() const
          {
            return ::org::apache::lucene::util::BytesRef(env->getObjectField(this$, fids$[fid_input]));
          }

          void BytesRefFSTEnum$InputOutput::_set_input(const ::org::apache::lucene::util::BytesRef & a0) const
          {
            env->setObjectField(this$, fids$[fid_input], a0.this$);
          }

          ::java::lang::Object BytesRefFSTEnum$InputOutput::_get_output() const
          {
            return ::java::lang::Object(env->getObjectField(this$, fids$[fid_output]));
          }

          void BytesRefFSTEnum$InputOutput::_set_output(const ::java::lang::Object & a0) const
          {
            env->setObjectField(this$, fids$[fid_output], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {
          static PyObject *t_BytesRefFSTEnum$InputOutput_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BytesRefFSTEnum$InputOutput_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BytesRefFSTEnum$InputOutput_of_(t_BytesRefFSTEnum$InputOutput *self, PyObject *args);
          static int t_BytesRefFSTEnum$InputOutput_init_(t_BytesRefFSTEnum$InputOutput *self, PyObject *args, PyObject *kwds);
          static PyObject *t_BytesRefFSTEnum$InputOutput_get__input(t_BytesRefFSTEnum$InputOutput *self, void *data);
          static int t_BytesRefFSTEnum$InputOutput_set__input(t_BytesRefFSTEnum$InputOutput *self, PyObject *arg, void *data);
          static PyObject *t_BytesRefFSTEnum$InputOutput_get__output(t_BytesRefFSTEnum$InputOutput *self, void *data);
          static int t_BytesRefFSTEnum$InputOutput_set__output(t_BytesRefFSTEnum$InputOutput *self, PyObject *arg, void *data);

          static PyObject *t_BytesRefFSTEnum$InputOutput_get__parameters_(t_BytesRefFSTEnum$InputOutput *self, void *data);
          static PyGetSetDef t_BytesRefFSTEnum$InputOutput__fields_[] = {
            DECLARE_GETSET_FIELD(t_BytesRefFSTEnum$InputOutput, input),
            DECLARE_GETSET_FIELD(t_BytesRefFSTEnum$InputOutput, output),
            DECLARE_GET_FIELD(t_BytesRefFSTEnum$InputOutput, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_BytesRefFSTEnum$InputOutput__methods_[] = {
            DECLARE_METHOD(t_BytesRefFSTEnum$InputOutput, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BytesRefFSTEnum$InputOutput, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BytesRefFSTEnum$InputOutput, of_, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(BytesRefFSTEnum$InputOutput, t_BytesRefFSTEnum$InputOutput, ::java::lang::Object, BytesRefFSTEnum$InputOutput, t_BytesRefFSTEnum$InputOutput_init_, 0, 0, t_BytesRefFSTEnum$InputOutput__fields_, 0, 0);
          PyObject *t_BytesRefFSTEnum$InputOutput::wrap_Object(const BytesRefFSTEnum$InputOutput& object, PyTypeObject *p0)
          {
            PyObject *obj = t_BytesRefFSTEnum$InputOutput::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_BytesRefFSTEnum$InputOutput *self = (t_BytesRefFSTEnum$InputOutput *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_BytesRefFSTEnum$InputOutput::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_BytesRefFSTEnum$InputOutput::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_BytesRefFSTEnum$InputOutput *self = (t_BytesRefFSTEnum$InputOutput *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_BytesRefFSTEnum$InputOutput::install(PyObject *module)
          {
            installType(&PY_TYPE(BytesRefFSTEnum$InputOutput), module, "BytesRefFSTEnum$InputOutput", 0);
          }

          void t_BytesRefFSTEnum$InputOutput::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(BytesRefFSTEnum$InputOutput).tp_dict, "class_", make_descriptor(BytesRefFSTEnum$InputOutput::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(BytesRefFSTEnum$InputOutput).tp_dict, "wrapfn_", make_descriptor(t_BytesRefFSTEnum$InputOutput::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(BytesRefFSTEnum$InputOutput).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_BytesRefFSTEnum$InputOutput_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BytesRefFSTEnum$InputOutput::initializeClass, 1)))
              return NULL;
            return t_BytesRefFSTEnum$InputOutput::wrap_Object(BytesRefFSTEnum$InputOutput(((t_BytesRefFSTEnum$InputOutput *) arg)->object.this$));
          }
          static PyObject *t_BytesRefFSTEnum$InputOutput_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BytesRefFSTEnum$InputOutput::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_BytesRefFSTEnum$InputOutput_of_(t_BytesRefFSTEnum$InputOutput *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_BytesRefFSTEnum$InputOutput_init_(t_BytesRefFSTEnum$InputOutput *self, PyObject *args, PyObject *kwds)
          {
            BytesRefFSTEnum$InputOutput object((jobject) NULL);

            INT_CALL(object = BytesRefFSTEnum$InputOutput());
            self->object = object;

            return 0;
          }
          static PyObject *t_BytesRefFSTEnum$InputOutput_get__parameters_(t_BytesRefFSTEnum$InputOutput *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_BytesRefFSTEnum$InputOutput_get__input(t_BytesRefFSTEnum$InputOutput *self, void *data)
          {
            ::org::apache::lucene::util::BytesRef value((jobject) NULL);
            OBJ_CALL(value = self->object._get_input());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(value);
          }
          static int t_BytesRefFSTEnum$InputOutput_set__input(t_BytesRefFSTEnum$InputOutput *self, PyObject *arg, void *data)
          {
            ::org::apache::lucene::util::BytesRef value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &value))
            {
              INT_CALL(self->object._set_input(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "input", arg);
            return -1;
          }

          static PyObject *t_BytesRefFSTEnum$InputOutput_get__output(t_BytesRefFSTEnum$InputOutput *self, void *data)
          {
            ::java::lang::Object value((jobject) NULL);
            OBJ_CALL(value = self->object._get_output());
            return ::java::lang::t_Object::wrap_Object(value);
          }
          static int t_BytesRefFSTEnum$InputOutput_set__output(t_BytesRefFSTEnum$InputOutput *self, PyObject *arg, void *data)
          {
            ::java::lang::Object value((jobject) NULL);
            if (!parseArg(arg, "o", &value))
            {
              INT_CALL(self->object._set_output(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "output", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/packed/PackedInts$Encoder.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {

          ::java::lang::Class *PackedInts$Encoder::class$ = NULL;
          jmethodID *PackedInts$Encoder::mids$ = NULL;
          bool PackedInts$Encoder::live$ = false;

          jclass PackedInts$Encoder::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/packed/PackedInts$Encoder");

              mids$ = new jmethodID[max_mid];
              mids$[mid_byteBlockCount_54c6a179] = env->getMethodID(cls, "byteBlockCount", "()I");
              mids$[mid_byteValueCount_54c6a179] = env->getMethodID(cls, "byteValueCount", "()I");
              mids$[mid_encode_b62d11da] = env->getMethodID(cls, "encode", "([JI[BII)V");
              mids$[mid_encode_9d48bd73] = env->getMethodID(cls, "encode", "([II[BII)V");
              mids$[mid_encode_6b7ac502] = env->getMethodID(cls, "encode", "([JI[JII)V");
              mids$[mid_encode_98f8869b] = env->getMethodID(cls, "encode", "([II[JII)V");
              mids$[mid_longBlockCount_54c6a179] = env->getMethodID(cls, "longBlockCount", "()I");
              mids$[mid_longValueCount_54c6a179] = env->getMethodID(cls, "longValueCount", "()I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jint PackedInts$Encoder::byteBlockCount() const
          {
            return env->callIntMethod(this$, mids$[mid_byteBlockCount_54c6a179]);
          }

          jint PackedInts$Encoder::byteValueCount() const
          {
            return env->callIntMethod(this$, mids$[mid_byteValueCount_54c6a179]);
          }

          void PackedInts$Encoder::encode(const JArray< jlong > & a0, jint a1, const JArray< jbyte > & a2, jint a3, jint a4) const
          {
            env->callVoidMethod(this$, mids$[mid_encode_b62d11da], a0.this$, a1, a2.this$, a3, a4);
          }

          void PackedInts$Encoder::encode(const JArray< jint > & a0, jint a1, const JArray< jbyte > & a2, jint a3, jint a4) const
          {
            env->callVoidMethod(this$, mids$[mid_encode_9d48bd73], a0.this$, a1, a2.this$, a3, a4);
          }

          void PackedInts$Encoder::encode(const JArray< jlong > & a0, jint a1, const JArray< jlong > & a2, jint a3, jint a4) const
          {
            env->callVoidMethod(this$, mids$[mid_encode_6b7ac502], a0.this$, a1, a2.this$, a3, a4);
          }

          void PackedInts$Encoder::encode(const JArray< jint > & a0, jint a1, const JArray< jlong > & a2, jint a3, jint a4) const
          {
            env->callVoidMethod(this$, mids$[mid_encode_98f8869b], a0.this$, a1, a2.this$, a3, a4);
          }

          jint PackedInts$Encoder::longBlockCount() const
          {
            return env->callIntMethod(this$, mids$[mid_longBlockCount_54c6a179]);
          }

          jint PackedInts$Encoder::longValueCount() const
          {
            return env->callIntMethod(this$, mids$[mid_longValueCount_54c6a179]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {
          static PyObject *t_PackedInts$Encoder_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PackedInts$Encoder_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PackedInts$Encoder_byteBlockCount(t_PackedInts$Encoder *self);
          static PyObject *t_PackedInts$Encoder_byteValueCount(t_PackedInts$Encoder *self);
          static PyObject *t_PackedInts$Encoder_encode(t_PackedInts$Encoder *self, PyObject *args);
          static PyObject *t_PackedInts$Encoder_longBlockCount(t_PackedInts$Encoder *self);
          static PyObject *t_PackedInts$Encoder_longValueCount(t_PackedInts$Encoder *self);

          static PyMethodDef t_PackedInts$Encoder__methods_[] = {
            DECLARE_METHOD(t_PackedInts$Encoder, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedInts$Encoder, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedInts$Encoder, byteBlockCount, METH_NOARGS),
            DECLARE_METHOD(t_PackedInts$Encoder, byteValueCount, METH_NOARGS),
            DECLARE_METHOD(t_PackedInts$Encoder, encode, METH_VARARGS),
            DECLARE_METHOD(t_PackedInts$Encoder, longBlockCount, METH_NOARGS),
            DECLARE_METHOD(t_PackedInts$Encoder, longValueCount, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PackedInts$Encoder, t_PackedInts$Encoder, ::java::lang::Object, PackedInts$Encoder, abstract_init, 0, 0, 0, 0, 0);

          void t_PackedInts$Encoder::install(PyObject *module)
          {
            installType(&PY_TYPE(PackedInts$Encoder), module, "PackedInts$Encoder", 0);
          }

          void t_PackedInts$Encoder::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PackedInts$Encoder).tp_dict, "class_", make_descriptor(PackedInts$Encoder::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PackedInts$Encoder).tp_dict, "wrapfn_", make_descriptor(t_PackedInts$Encoder::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PackedInts$Encoder).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PackedInts$Encoder_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PackedInts$Encoder::initializeClass, 1)))
              return NULL;
            return t_PackedInts$Encoder::wrap_Object(PackedInts$Encoder(((t_PackedInts$Encoder *) arg)->object.this$));
          }
          static PyObject *t_PackedInts$Encoder_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PackedInts$Encoder::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_PackedInts$Encoder_byteBlockCount(t_PackedInts$Encoder *self)
          {
            jint result;
            OBJ_CALL(result = self->object.byteBlockCount());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_PackedInts$Encoder_byteValueCount(t_PackedInts$Encoder *self)
          {
            jint result;
            OBJ_CALL(result = self->object.byteValueCount());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_PackedInts$Encoder_encode(t_PackedInts$Encoder *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 5:
              {
                JArray< jlong > a0((jobject) NULL);
                jint a1;
                JArray< jbyte > a2((jobject) NULL);
                jint a3;
                jint a4;

                if (!parseArgs(args, "[JI[BII", &a0, &a1, &a2, &a3, &a4))
                {
                  OBJ_CALL(self->object.encode(a0, a1, a2, a3, a4));
                  Py_RETURN_NONE;
                }
              }
              {
                JArray< jint > a0((jobject) NULL);
                jint a1;
                JArray< jbyte > a2((jobject) NULL);
                jint a3;
                jint a4;

                if (!parseArgs(args, "[II[BII", &a0, &a1, &a2, &a3, &a4))
                {
                  OBJ_CALL(self->object.encode(a0, a1, a2, a3, a4));
                  Py_RETURN_NONE;
                }
              }
              {
                JArray< jlong > a0((jobject) NULL);
                jint a1;
                JArray< jlong > a2((jobject) NULL);
                jint a3;
                jint a4;

                if (!parseArgs(args, "[JI[JII", &a0, &a1, &a2, &a3, &a4))
                {
                  OBJ_CALL(self->object.encode(a0, a1, a2, a3, a4));
                  Py_RETURN_NONE;
                }
              }
              {
                JArray< jint > a0((jobject) NULL);
                jint a1;
                JArray< jlong > a2((jobject) NULL);
                jint a3;
                jint a4;

                if (!parseArgs(args, "[II[JII", &a0, &a1, &a2, &a3, &a4))
                {
                  OBJ_CALL(self->object.encode(a0, a1, a2, a3, a4));
                  Py_RETURN_NONE;
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "encode", args);
            return NULL;
          }

          static PyObject *t_PackedInts$Encoder_longBlockCount(t_PackedInts$Encoder *self)
          {
            jint result;
            OBJ_CALL(result = self->object.longBlockCount());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_PackedInts$Encoder_longValueCount(t_PackedInts$Encoder *self)
          {
            jint result;
            OBJ_CALL(result = self->object.longValueCount());
            return PyInt_FromLong((long) result);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/TFValueSource.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *TFValueSource::class$ = NULL;
            jmethodID *TFValueSource::mids$ = NULL;
            bool TFValueSource::live$ = false;

            jclass TFValueSource::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/TFValueSource");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_b45b6622] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lorg/apache/lucene/util/BytesRef;)V");
                mids$[mid_getValues_4c566485] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/queries/function/FunctionValues;");
                mids$[mid_name_14c7b5c5] = env->getMethodID(cls, "name", "()Ljava/lang/String;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            TFValueSource::TFValueSource(const ::java::lang::String & a0, const ::java::lang::String & a1, const ::java::lang::String & a2, const ::org::apache::lucene::util::BytesRef & a3) : ::org::apache::lucene::queries::function::valuesource::TermFreqValueSource(env->newObject(initializeClass, &mids$, mid_init$_b45b6622, a0.this$, a1.this$, a2.this$, a3.this$)) {}

            ::org::apache::lucene::queries::function::FunctionValues TFValueSource::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::FunctionValues(env->callObjectMethod(this$, mids$[mid_getValues_4c566485], a0.this$, a1.this$));
            }

            ::java::lang::String TFValueSource::name() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_name_14c7b5c5]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_TFValueSource_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_TFValueSource_instance_(PyTypeObject *type, PyObject *arg);
            static int t_TFValueSource_init_(t_TFValueSource *self, PyObject *args, PyObject *kwds);
            static PyObject *t_TFValueSource_getValues(t_TFValueSource *self, PyObject *args);
            static PyObject *t_TFValueSource_name(t_TFValueSource *self, PyObject *args);

            static PyMethodDef t_TFValueSource__methods_[] = {
              DECLARE_METHOD(t_TFValueSource, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TFValueSource, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TFValueSource, getValues, METH_VARARGS),
              DECLARE_METHOD(t_TFValueSource, name, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(TFValueSource, t_TFValueSource, ::org::apache::lucene::queries::function::valuesource::TermFreqValueSource, TFValueSource, t_TFValueSource_init_, 0, 0, 0, 0, 0);

            void t_TFValueSource::install(PyObject *module)
            {
              installType(&PY_TYPE(TFValueSource), module, "TFValueSource", 0);
            }

            void t_TFValueSource::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(TFValueSource).tp_dict, "class_", make_descriptor(TFValueSource::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(TFValueSource).tp_dict, "wrapfn_", make_descriptor(t_TFValueSource::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(TFValueSource).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_TFValueSource_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, TFValueSource::initializeClass, 1)))
                return NULL;
              return t_TFValueSource::wrap_Object(TFValueSource(((t_TFValueSource *) arg)->object.this$));
            }
            static PyObject *t_TFValueSource_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, TFValueSource::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_TFValueSource_init_(t_TFValueSource *self, PyObject *args, PyObject *kwds)
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              ::java::lang::String a2((jobject) NULL);
              ::org::apache::lucene::util::BytesRef a3((jobject) NULL);
              TFValueSource object((jobject) NULL);

              if (!parseArgs(args, "sssk", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2, &a3))
              {
                INT_CALL(object = TFValueSource(a0, a1, a2, a3));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_TFValueSource_getValues(t_TFValueSource *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::FunctionValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::t_FunctionValues::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(TFValueSource), (PyObject *) self, "getValues", args, 2);
            }

            static PyObject *t_TFValueSource_name(t_TFValueSource *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.name());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(TFValueSource), (PyObject *) self, "name", args, 2);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/docvalues/DocTermsIndexDocValues.h"
#include "org/apache/lucene/queries/function/ValueSource.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queries/function/ValueSourceScorer.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/queries/function/FunctionValues$ValueFiller.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace docvalues {

            ::java::lang::Class *DocTermsIndexDocValues::class$ = NULL;
            jmethodID *DocTermsIndexDocValues::mids$ = NULL;
            bool DocTermsIndexDocValues::live$ = false;

            jclass DocTermsIndexDocValues::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/docvalues/DocTermsIndexDocValues");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_96c8ee4d] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queries/function/ValueSource;Lorg/apache/lucene/index/AtomicReaderContext;Ljava/lang/String;)V");
                mids$[mid_boolVal_39c7bd30] = env->getMethodID(cls, "boolVal", "(I)Z");
                mids$[mid_bytesVal_b7fef192] = env->getMethodID(cls, "bytesVal", "(ILorg/apache/lucene/util/BytesRef;)Z");
                mids$[mid_exists_39c7bd30] = env->getMethodID(cls, "exists", "(I)Z");
                mids$[mid_getRangeScorer_d201bc96] = env->getMethodID(cls, "getRangeScorer", "(Lorg/apache/lucene/index/IndexReader;Ljava/lang/String;Ljava/lang/String;ZZ)Lorg/apache/lucene/queries/function/ValueSourceScorer;");
                mids$[mid_getValueFiller_7731f0bd] = env->getMethodID(cls, "getValueFiller", "()Lorg/apache/lucene/queries/function/FunctionValues$ValueFiller;");
                mids$[mid_numOrd_54c6a179] = env->getMethodID(cls, "numOrd", "()I");
                mids$[mid_objectVal_29be6a55] = env->getMethodID(cls, "objectVal", "(I)Ljava/lang/Object;");
                mids$[mid_ordVal_39c7bd23] = env->getMethodID(cls, "ordVal", "(I)I");
                mids$[mid_strVal_141401b3] = env->getMethodID(cls, "strVal", "(I)Ljava/lang/String;");
                mids$[mid_toString_141401b3] = env->getMethodID(cls, "toString", "(I)Ljava/lang/String;");
                mids$[mid_toTerm_97a5258f] = env->getMethodID(cls, "toTerm", "(Ljava/lang/String;)Ljava/lang/String;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            DocTermsIndexDocValues::DocTermsIndexDocValues(const ::org::apache::lucene::queries::function::ValueSource & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1, const ::java::lang::String & a2) : ::org::apache::lucene::queries::function::FunctionValues(env->newObject(initializeClass, &mids$, mid_init$_96c8ee4d, a0.this$, a1.this$, a2.this$)) {}

            jboolean DocTermsIndexDocValues::boolVal(jint a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_boolVal_39c7bd30], a0);
            }

            jboolean DocTermsIndexDocValues::bytesVal(jint a0, const ::org::apache::lucene::util::BytesRef & a1) const
            {
              return env->callBooleanMethod(this$, mids$[mid_bytesVal_b7fef192], a0, a1.this$);
            }

            jboolean DocTermsIndexDocValues::exists(jint a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_exists_39c7bd30], a0);
            }

            ::org::apache::lucene::queries::function::ValueSourceScorer DocTermsIndexDocValues::getRangeScorer(const ::org::apache::lucene::index::IndexReader & a0, const ::java::lang::String & a1, const ::java::lang::String & a2, jboolean a3, jboolean a4) const
            {
              return ::org::apache::lucene::queries::function::ValueSourceScorer(env->callObjectMethod(this$, mids$[mid_getRangeScorer_d201bc96], a0.this$, a1.this$, a2.this$, a3, a4));
            }

            ::org::apache::lucene::queries::function::FunctionValues$ValueFiller DocTermsIndexDocValues::getValueFiller() const
            {
              return ::org::apache::lucene::queries::function::FunctionValues$ValueFiller(env->callObjectMethod(this$, mids$[mid_getValueFiller_7731f0bd]));
            }

            jint DocTermsIndexDocValues::numOrd() const
            {
              return env->callIntMethod(this$, mids$[mid_numOrd_54c6a179]);
            }

            ::java::lang::Object DocTermsIndexDocValues::objectVal(jint a0) const
            {
              return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_objectVal_29be6a55], a0));
            }

            jint DocTermsIndexDocValues::ordVal(jint a0) const
            {
              return env->callIntMethod(this$, mids$[mid_ordVal_39c7bd23], a0);
            }

            ::java::lang::String DocTermsIndexDocValues::strVal(jint a0) const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_strVal_141401b3], a0));
            }

            ::java::lang::String DocTermsIndexDocValues::toString(jint a0) const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_141401b3], a0));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/queries/function/docvalues/DocTermsIndexDocValues$DocTermsIndexException.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace docvalues {
            static PyObject *t_DocTermsIndexDocValues_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_DocTermsIndexDocValues_instance_(PyTypeObject *type, PyObject *arg);
            static int t_DocTermsIndexDocValues_init_(t_DocTermsIndexDocValues *self, PyObject *args, PyObject *kwds);
            static PyObject *t_DocTermsIndexDocValues_boolVal(t_DocTermsIndexDocValues *self, PyObject *args);
            static PyObject *t_DocTermsIndexDocValues_bytesVal(t_DocTermsIndexDocValues *self, PyObject *args);
            static PyObject *t_DocTermsIndexDocValues_exists(t_DocTermsIndexDocValues *self, PyObject *args);
            static PyObject *t_DocTermsIndexDocValues_getRangeScorer(t_DocTermsIndexDocValues *self, PyObject *args);
            static PyObject *t_DocTermsIndexDocValues_getValueFiller(t_DocTermsIndexDocValues *self, PyObject *args);
            static PyObject *t_DocTermsIndexDocValues_numOrd(t_DocTermsIndexDocValues *self, PyObject *args);
            static PyObject *t_DocTermsIndexDocValues_objectVal(t_DocTermsIndexDocValues *self, PyObject *args);
            static PyObject *t_DocTermsIndexDocValues_ordVal(t_DocTermsIndexDocValues *self, PyObject *args);
            static PyObject *t_DocTermsIndexDocValues_strVal(t_DocTermsIndexDocValues *self, PyObject *args);
            static PyObject *t_DocTermsIndexDocValues_toString(t_DocTermsIndexDocValues *self, PyObject *args);
            static PyObject *t_DocTermsIndexDocValues_get__valueFiller(t_DocTermsIndexDocValues *self, void *data);
            static PyGetSetDef t_DocTermsIndexDocValues__fields_[] = {
              DECLARE_GET_FIELD(t_DocTermsIndexDocValues, valueFiller),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_DocTermsIndexDocValues__methods_[] = {
              DECLARE_METHOD(t_DocTermsIndexDocValues, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_DocTermsIndexDocValues, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_DocTermsIndexDocValues, boolVal, METH_VARARGS),
              DECLARE_METHOD(t_DocTermsIndexDocValues, bytesVal, METH_VARARGS),
              DECLARE_METHOD(t_DocTermsIndexDocValues, exists, METH_VARARGS),
              DECLARE_METHOD(t_DocTermsIndexDocValues, getRangeScorer, METH_VARARGS),
              DECLARE_METHOD(t_DocTermsIndexDocValues, getValueFiller, METH_VARARGS),
              DECLARE_METHOD(t_DocTermsIndexDocValues, numOrd, METH_VARARGS),
              DECLARE_METHOD(t_DocTermsIndexDocValues, objectVal, METH_VARARGS),
              DECLARE_METHOD(t_DocTermsIndexDocValues, ordVal, METH_VARARGS),
              DECLARE_METHOD(t_DocTermsIndexDocValues, strVal, METH_VARARGS),
              DECLARE_METHOD(t_DocTermsIndexDocValues, toString, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(DocTermsIndexDocValues, t_DocTermsIndexDocValues, ::org::apache::lucene::queries::function::FunctionValues, DocTermsIndexDocValues, t_DocTermsIndexDocValues_init_, 0, 0, t_DocTermsIndexDocValues__fields_, 0, 0);

            void t_DocTermsIndexDocValues::install(PyObject *module)
            {
              installType(&PY_TYPE(DocTermsIndexDocValues), module, "DocTermsIndexDocValues", 0);
              PyDict_SetItemString(PY_TYPE(DocTermsIndexDocValues).tp_dict, "DocTermsIndexException", make_descriptor(&PY_TYPE(DocTermsIndexDocValues$DocTermsIndexException)));
            }

            void t_DocTermsIndexDocValues::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(DocTermsIndexDocValues).tp_dict, "class_", make_descriptor(DocTermsIndexDocValues::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(DocTermsIndexDocValues).tp_dict, "wrapfn_", make_descriptor(t_DocTermsIndexDocValues::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(DocTermsIndexDocValues).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_DocTermsIndexDocValues_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, DocTermsIndexDocValues::initializeClass, 1)))
                return NULL;
              return t_DocTermsIndexDocValues::wrap_Object(DocTermsIndexDocValues(((t_DocTermsIndexDocValues *) arg)->object.this$));
            }
            static PyObject *t_DocTermsIndexDocValues_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, DocTermsIndexDocValues::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_DocTermsIndexDocValues_init_(t_DocTermsIndexDocValues *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::queries::function::ValueSource a0((jobject) NULL);
              ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
              ::java::lang::String a2((jobject) NULL);
              DocTermsIndexDocValues object((jobject) NULL);

              if (!parseArgs(args, "kks", ::org::apache::lucene::queries::function::ValueSource::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = DocTermsIndexDocValues(a0, a1, a2));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_DocTermsIndexDocValues_boolVal(t_DocTermsIndexDocValues *self, PyObject *args)
            {
              jint a0;
              jboolean result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.boolVal(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(DocTermsIndexDocValues), (PyObject *) self, "boolVal", args, 2);
            }

            static PyObject *t_DocTermsIndexDocValues_bytesVal(t_DocTermsIndexDocValues *self, PyObject *args)
            {
              jint a0;
              ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "Ik", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = self->object.bytesVal(a0, a1));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(DocTermsIndexDocValues), (PyObject *) self, "bytesVal", args, 2);
            }

            static PyObject *t_DocTermsIndexDocValues_exists(t_DocTermsIndexDocValues *self, PyObject *args)
            {
              jint a0;
              jboolean result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.exists(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(DocTermsIndexDocValues), (PyObject *) self, "exists", args, 2);
            }

            static PyObject *t_DocTermsIndexDocValues_getRangeScorer(t_DocTermsIndexDocValues *self, PyObject *args)
            {
              ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              ::java::lang::String a2((jobject) NULL);
              jboolean a3;
              jboolean a4;
              ::org::apache::lucene::queries::function::ValueSourceScorer result((jobject) NULL);

              if (!parseArgs(args, "kssZZ", ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &a1, &a2, &a3, &a4))
              {
                OBJ_CALL(result = self->object.getRangeScorer(a0, a1, a2, a3, a4));
                return ::org::apache::lucene::queries::function::t_ValueSourceScorer::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(DocTermsIndexDocValues), (PyObject *) self, "getRangeScorer", args, 2);
            }

            static PyObject *t_DocTermsIndexDocValues_getValueFiller(t_DocTermsIndexDocValues *self, PyObject *args)
            {
              ::org::apache::lucene::queries::function::FunctionValues$ValueFiller result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getValueFiller());
                return ::org::apache::lucene::queries::function::t_FunctionValues$ValueFiller::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(DocTermsIndexDocValues), (PyObject *) self, "getValueFiller", args, 2);
            }

            static PyObject *t_DocTermsIndexDocValues_numOrd(t_DocTermsIndexDocValues *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.numOrd());
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(DocTermsIndexDocValues), (PyObject *) self, "numOrd", args, 2);
            }

            static PyObject *t_DocTermsIndexDocValues_objectVal(t_DocTermsIndexDocValues *self, PyObject *args)
            {
              jint a0;
              ::java::lang::Object result((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.objectVal(a0));
                return ::java::lang::t_Object::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(DocTermsIndexDocValues), (PyObject *) self, "objectVal", args, 2);
            }

            static PyObject *t_DocTermsIndexDocValues_ordVal(t_DocTermsIndexDocValues *self, PyObject *args)
            {
              jint a0;
              jint result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.ordVal(a0));
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(DocTermsIndexDocValues), (PyObject *) self, "ordVal", args, 2);
            }

            static PyObject *t_DocTermsIndexDocValues_strVal(t_DocTermsIndexDocValues *self, PyObject *args)
            {
              jint a0;
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.strVal(a0));
                return j2p(result);
              }

              return callSuper(&PY_TYPE(DocTermsIndexDocValues), (PyObject *) self, "strVal", args, 2);
            }

            static PyObject *t_DocTermsIndexDocValues_toString(t_DocTermsIndexDocValues *self, PyObject *args)
            {
              jint a0;
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.toString(a0));
                return j2p(result);
              }

              return callSuper(&PY_TYPE(DocTermsIndexDocValues), (PyObject *) self, "toString", args, 2);
            }

            static PyObject *t_DocTermsIndexDocValues_get__valueFiller(t_DocTermsIndexDocValues *self, void *data)
            {
              ::org::apache::lucene::queries::function::FunctionValues$ValueFiller value((jobject) NULL);
              OBJ_CALL(value = self->object.getValueFiller());
              return ::org::apache::lucene::queries::function::t_FunctionValues$ValueFiller::wrap_Object(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/analyzing/BlendedInfixSuggester.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "java/lang/CharSequence.h"
#include "org/apache/lucene/search/suggest/analyzing/BlendedInfixSuggester$BlenderType.h"
#include "java/util/Set.h"
#include "java/util/List.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "org/apache/lucene/search/suggest/Lookup$LookupResult.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace analyzing {

            ::java::lang::Class *BlendedInfixSuggester::class$ = NULL;
            jmethodID *BlendedInfixSuggester::mids$ = NULL;
            bool BlendedInfixSuggester::live$ = false;
            jint BlendedInfixSuggester::DEFAULT_NUM_FACTOR = (jint) 0;

            jclass BlendedInfixSuggester::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/analyzing/BlendedInfixSuggester");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_b2fef229] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/analysis/Analyzer;)V");
                mids$[mid_init$_185ca32c] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/analysis/Analyzer;Lorg/apache/lucene/analysis/Analyzer;ILorg/apache/lucene/search/suggest/analyzing/BlendedInfixSuggester$BlenderType;I)V");
                mids$[mid_lookup_dd3e9f51] = env->getMethodID(cls, "lookup", "(Ljava/lang/CharSequence;Ljava/util/Set;ZI)Ljava/util/List;");
                mids$[mid_lookup_bb92c162] = env->getMethodID(cls, "lookup", "(Ljava/lang/CharSequence;Ljava/util/Set;IZZ)Ljava/util/List;");
                mids$[mid_getTextFieldType_a2615189] = env->getMethodID(cls, "getTextFieldType", "()Lorg/apache/lucene/document/FieldType;");
                mids$[mid_createResults_dfa2a05f] = env->getMethodID(cls, "createResults", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/TopFieldDocs;ILjava/lang/CharSequence;ZLjava/util/Set;Ljava/lang/String;)Ljava/util/List;");
                mids$[mid_calculateCoefficient_39c7bd2e] = env->getMethodID(cls, "calculateCoefficient", "(I)D");

                class$ = (::java::lang::Class *) new JObject(cls);
                cls = (jclass) class$->this$;

                DEFAULT_NUM_FACTOR = env->getStaticIntField(cls, "DEFAULT_NUM_FACTOR");
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            BlendedInfixSuggester::BlendedInfixSuggester(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::store::Directory & a1, const ::org::apache::lucene::analysis::Analyzer & a2) : ::org::apache::lucene::search::suggest::analyzing::AnalyzingInfixSuggester(env->newObject(initializeClass, &mids$, mid_init$_b2fef229, a0.this$, a1.this$, a2.this$)) {}

            BlendedInfixSuggester::BlendedInfixSuggester(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::store::Directory & a1, const ::org::apache::lucene::analysis::Analyzer & a2, const ::org::apache::lucene::analysis::Analyzer & a3, jint a4, const ::org::apache::lucene::search::suggest::analyzing::BlendedInfixSuggester$BlenderType & a5, jint a6) : ::org::apache::lucene::search::suggest::analyzing::AnalyzingInfixSuggester(env->newObject(initializeClass, &mids$, mid_init$_185ca32c, a0.this$, a1.this$, a2.this$, a3.this$, a4, a5.this$, a6)) {}

            ::java::util::List BlendedInfixSuggester::lookup(const ::java::lang::CharSequence & a0, const ::java::util::Set & a1, jboolean a2, jint a3) const
            {
              return ::java::util::List(env->callObjectMethod(this$, mids$[mid_lookup_dd3e9f51], a0.this$, a1.this$, a2, a3));
            }

            ::java::util::List BlendedInfixSuggester::lookup(const ::java::lang::CharSequence & a0, const ::java::util::Set & a1, jint a2, jboolean a3, jboolean a4) const
            {
              return ::java::util::List(env->callObjectMethod(this$, mids$[mid_lookup_bb92c162], a0.this$, a1.this$, a2, a3, a4));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace analyzing {
            static PyObject *t_BlendedInfixSuggester_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_BlendedInfixSuggester_instance_(PyTypeObject *type, PyObject *arg);
            static int t_BlendedInfixSuggester_init_(t_BlendedInfixSuggester *self, PyObject *args, PyObject *kwds);
            static PyObject *t_BlendedInfixSuggester_lookup(t_BlendedInfixSuggester *self, PyObject *args);

            static PyMethodDef t_BlendedInfixSuggester__methods_[] = {
              DECLARE_METHOD(t_BlendedInfixSuggester, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_BlendedInfixSuggester, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_BlendedInfixSuggester, lookup, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(BlendedInfixSuggester, t_BlendedInfixSuggester, ::org::apache::lucene::search::suggest::analyzing::AnalyzingInfixSuggester, BlendedInfixSuggester, t_BlendedInfixSuggester_init_, 0, 0, 0, 0, 0);

            void t_BlendedInfixSuggester::install(PyObject *module)
            {
              installType(&PY_TYPE(BlendedInfixSuggester), module, "BlendedInfixSuggester", 0);
              PyDict_SetItemString(PY_TYPE(BlendedInfixSuggester).tp_dict, "BlenderType", make_descriptor(&PY_TYPE(BlendedInfixSuggester$BlenderType)));
            }

            void t_BlendedInfixSuggester::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(BlendedInfixSuggester).tp_dict, "class_", make_descriptor(BlendedInfixSuggester::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(BlendedInfixSuggester).tp_dict, "wrapfn_", make_descriptor(t_BlendedInfixSuggester::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(BlendedInfixSuggester).tp_dict, "boxfn_", make_descriptor(boxObject));
              env->getClass(BlendedInfixSuggester::initializeClass);
              PyDict_SetItemString(PY_TYPE(BlendedInfixSuggester).tp_dict, "DEFAULT_NUM_FACTOR", make_descriptor(BlendedInfixSuggester::DEFAULT_NUM_FACTOR));
            }

            static PyObject *t_BlendedInfixSuggester_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, BlendedInfixSuggester::initializeClass, 1)))
                return NULL;
              return t_BlendedInfixSuggester::wrap_Object(BlendedInfixSuggester(((t_BlendedInfixSuggester *) arg)->object.this$));
            }
            static PyObject *t_BlendedInfixSuggester_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, BlendedInfixSuggester::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_BlendedInfixSuggester_init_(t_BlendedInfixSuggester *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 3:
                {
                  ::org::apache::lucene::util::Version a0((jobject) NULL);
                  ::org::apache::lucene::store::Directory a1((jobject) NULL);
                  ::org::apache::lucene::analysis::Analyzer a2((jobject) NULL);
                  BlendedInfixSuggester object((jobject) NULL);

                  if (!parseArgs(args, "kkk", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1, &a2))
                  {
                    INT_CALL(object = BlendedInfixSuggester(a0, a1, a2));
                    self->object = object;
                    break;
                  }
                }
                goto err;
               case 7:
                {
                  ::org::apache::lucene::util::Version a0((jobject) NULL);
                  ::org::apache::lucene::store::Directory a1((jobject) NULL);
                  ::org::apache::lucene::analysis::Analyzer a2((jobject) NULL);
                  ::org::apache::lucene::analysis::Analyzer a3((jobject) NULL);
                  jint a4;
                  ::org::apache::lucene::search::suggest::analyzing::BlendedInfixSuggester$BlenderType a5((jobject) NULL);
                  PyTypeObject **p5;
                  jint a6;
                  BlendedInfixSuggester object((jobject) NULL);

                  if (!parseArgs(args, "kkkkIKI", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, ::org::apache::lucene::search::suggest::analyzing::BlendedInfixSuggester$BlenderType::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5, &p5, ::org::apache::lucene::search::suggest::analyzing::t_BlendedInfixSuggester$BlenderType::parameters_, &a6))
                  {
                    INT_CALL(object = BlendedInfixSuggester(a0, a1, a2, a3, a4, a5, a6));
                    self->object = object;
                    break;
                  }
                }
               default:
               err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_BlendedInfixSuggester_lookup(t_BlendedInfixSuggester *self, PyObject *args)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 4:
                {
                  ::java::lang::CharSequence a0((jobject) NULL);
                  ::java::util::Set a1((jobject) NULL);
                  PyTypeObject **p1;
                  jboolean a2;
                  jint a3;
                  ::java::util::List result((jobject) NULL);

                  if (!parseArgs(args, "OKZI", &::java::lang::PY_TYPE(CharSequence), ::java::util::Set::initializeClass, &a0, &a1, &p1, ::java::util::t_Set::parameters_, &a2, &a3))
                  {
                    OBJ_CALL(result = self->object.lookup(a0, a1, a2, a3));
                    return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::search::suggest::PY_TYPE(Lookup$LookupResult));
                  }
                }
                break;
               case 5:
                {
                  ::java::lang::CharSequence a0((jobject) NULL);
                  ::java::util::Set a1((jobject) NULL);
                  PyTypeObject **p1;
                  jint a2;
                  jboolean a3;
                  jboolean a4;
                  ::java::util::List result((jobject) NULL);

                  if (!parseArgs(args, "OKIZZ", &::java::lang::PY_TYPE(CharSequence), ::java::util::Set::initializeClass, &a0, &a1, &p1, ::java::util::t_Set::parameters_, &a2, &a3, &a4))
                  {
                    OBJ_CALL(result = self->object.lookup(a0, a1, a2, a3, a4));
                    return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::search::suggest::PY_TYPE(Lookup$LookupResult));
                  }
                }
              }

              return callSuper(&PY_TYPE(BlendedInfixSuggester), (PyObject *) self, "lookup", args, 2);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/wikipedia/WikipediaTokenizer.h"
#include "java/util/Set.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "java/io/Reader.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace wikipedia {

          ::java::lang::Class *WikipediaTokenizer::class$ = NULL;
          jmethodID *WikipediaTokenizer::mids$ = NULL;
          bool WikipediaTokenizer::live$ = false;
          jint WikipediaTokenizer::ACRONYM_ID = (jint) 0;
          jint WikipediaTokenizer::ALPHANUM_ID = (jint) 0;
          jint WikipediaTokenizer::APOSTROPHE_ID = (jint) 0;
          ::java::lang::String *WikipediaTokenizer::BOLD = NULL;
          jint WikipediaTokenizer::BOLD_ID = (jint) 0;
          ::java::lang::String *WikipediaTokenizer::BOLD_ITALICS = NULL;
          jint WikipediaTokenizer::BOLD_ITALICS_ID = (jint) 0;
          jint WikipediaTokenizer::BOTH = (jint) 0;
          ::java::lang::String *WikipediaTokenizer::CATEGORY = NULL;
          jint WikipediaTokenizer::CATEGORY_ID = (jint) 0;
          ::java::lang::String *WikipediaTokenizer::CITATION = NULL;
          jint WikipediaTokenizer::CITATION_ID = (jint) 0;
          jint WikipediaTokenizer::CJ_ID = (jint) 0;
          jint WikipediaTokenizer::COMPANY_ID = (jint) 0;
          jint WikipediaTokenizer::EMAIL_ID = (jint) 0;
          ::java::lang::String *WikipediaTokenizer::EXTERNAL_LINK = NULL;
          jint WikipediaTokenizer::EXTERNAL_LINK_ID = (jint) 0;
          ::java::lang::String *WikipediaTokenizer::EXTERNAL_LINK_URL = NULL;
          jint WikipediaTokenizer::EXTERNAL_LINK_URL_ID = (jint) 0;
          ::java::lang::String *WikipediaTokenizer::HEADING = NULL;
          jint WikipediaTokenizer::HEADING_ID = (jint) 0;
          jint WikipediaTokenizer::HOST_ID = (jint) 0;
          ::java::lang::String *WikipediaTokenizer::INTERNAL_LINK = NULL;
          jint WikipediaTokenizer::INTERNAL_LINK_ID = (jint) 0;
          ::java::lang::String *WikipediaTokenizer::ITALICS = NULL;
          jint WikipediaTokenizer::ITALICS_ID = (jint) 0;
          jint WikipediaTokenizer::NUM_ID = (jint) 0;
          ::java::lang::String *WikipediaTokenizer::SUB_HEADING = NULL;
          jint WikipediaTokenizer::SUB_HEADING_ID = (jint) 0;
          jint WikipediaTokenizer::TOKENS_ONLY = (jint) 0;
          JArray< ::java::lang::String > *WikipediaTokenizer::TOKEN_TYPES = NULL;
          jint WikipediaTokenizer::UNTOKENIZED_ONLY = (jint) 0;
          jint WikipediaTokenizer::UNTOKENIZED_TOKEN_FLAG = (jint) 0;

          jclass WikipediaTokenizer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/wikipedia/WikipediaTokenizer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_cf2e3c10] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;)V");
              mids$[mid_init$_ef926df6] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;ILjava/util/Set;)V");
              mids$[mid_init$_60b8ae4e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;ILjava/util/Set;)V");
              mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
              mids$[mid_end_54c6a166] = env->getMethodID(cls, "end", "()V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              ACRONYM_ID = env->getStaticIntField(cls, "ACRONYM_ID");
              ALPHANUM_ID = env->getStaticIntField(cls, "ALPHANUM_ID");
              APOSTROPHE_ID = env->getStaticIntField(cls, "APOSTROPHE_ID");
              BOLD = new ::java::lang::String(env->getStaticObjectField(cls, "BOLD", "Ljava/lang/String;"));
              BOLD_ID = env->getStaticIntField(cls, "BOLD_ID");
              BOLD_ITALICS = new ::java::lang::String(env->getStaticObjectField(cls, "BOLD_ITALICS", "Ljava/lang/String;"));
              BOLD_ITALICS_ID = env->getStaticIntField(cls, "BOLD_ITALICS_ID");
              BOTH = env->getStaticIntField(cls, "BOTH");
              CATEGORY = new ::java::lang::String(env->getStaticObjectField(cls, "CATEGORY", "Ljava/lang/String;"));
              CATEGORY_ID = env->getStaticIntField(cls, "CATEGORY_ID");
              CITATION = new ::java::lang::String(env->getStaticObjectField(cls, "CITATION", "Ljava/lang/String;"));
              CITATION_ID = env->getStaticIntField(cls, "CITATION_ID");
              CJ_ID = env->getStaticIntField(cls, "CJ_ID");
              COMPANY_ID = env->getStaticIntField(cls, "COMPANY_ID");
              EMAIL_ID = env->getStaticIntField(cls, "EMAIL_ID");
              EXTERNAL_LINK = new ::java::lang::String(env->getStaticObjectField(cls, "EXTERNAL_LINK", "Ljava/lang/String;"));
              EXTERNAL_LINK_ID = env->getStaticIntField(cls, "EXTERNAL_LINK_ID");
              EXTERNAL_LINK_URL = new ::java::lang::String(env->getStaticObjectField(cls, "EXTERNAL_LINK_URL", "Ljava/lang/String;"));
              EXTERNAL_LINK_URL_ID = env->getStaticIntField(cls, "EXTERNAL_LINK_URL_ID");
              HEADING = new ::java::lang::String(env->getStaticObjectField(cls, "HEADING", "Ljava/lang/String;"));
              HEADING_ID = env->getStaticIntField(cls, "HEADING_ID");
              HOST_ID = env->getStaticIntField(cls, "HOST_ID");
              INTERNAL_LINK = new ::java::lang::String(env->getStaticObjectField(cls, "INTERNAL_LINK", "Ljava/lang/String;"));
              INTERNAL_LINK_ID = env->getStaticIntField(cls, "INTERNAL_LINK_ID");
              ITALICS = new ::java::lang::String(env->getStaticObjectField(cls, "ITALICS", "Ljava/lang/String;"));
              ITALICS_ID = env->getStaticIntField(cls, "ITALICS_ID");
              NUM_ID = env->getStaticIntField(cls, "NUM_ID");
              SUB_HEADING = new ::java::lang::String(env->getStaticObjectField(cls, "SUB_HEADING", "Ljava/lang/String;"));
              SUB_HEADING_ID = env->getStaticIntField(cls, "SUB_HEADING_ID");
              TOKENS_ONLY = env->getStaticIntField(cls, "TOKENS_ONLY");
              TOKEN_TYPES = new JArray< ::java::lang::String >(env->getStaticObjectField(cls, "TOKEN_TYPES", "[Ljava/lang/String;"));
              UNTOKENIZED_ONLY = env->getStaticIntField(cls, "UNTOKENIZED_ONLY");
              UNTOKENIZED_TOKEN_FLAG = env->getStaticIntField(cls, "UNTOKENIZED_TOKEN_FLAG");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          WikipediaTokenizer::WikipediaTokenizer(const ::java::io::Reader & a0) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_cf2e3c10, a0.this$)) {}

          WikipediaTokenizer::WikipediaTokenizer(const ::java::io::Reader & a0, jint a1, const ::java::util::Set & a2) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_ef926df6, a0.this$, a1, a2.this$)) {}

          WikipediaTokenizer::WikipediaTokenizer(const ::org::apache::lucene::util::AttributeFactory & a0, const ::java::io::Reader & a1, jint a2, const ::java::util::Set & a3) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_60b8ae4e, a0.this$, a1.this$, a2, a3.this$)) {}

          void WikipediaTokenizer::close() const
          {
            env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
          }

          void WikipediaTokenizer::end() const
          {
            env->callVoidMethod(this$, mids$[mid_end_54c6a166]);
          }

          jboolean WikipediaTokenizer::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void WikipediaTokenizer::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace wikipedia {
          static PyObject *t_WikipediaTokenizer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_WikipediaTokenizer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_WikipediaTokenizer_init_(t_WikipediaTokenizer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_WikipediaTokenizer_close(t_WikipediaTokenizer *self, PyObject *args);
          static PyObject *t_WikipediaTokenizer_end(t_WikipediaTokenizer *self, PyObject *args);
          static PyObject *t_WikipediaTokenizer_incrementToken(t_WikipediaTokenizer *self, PyObject *args);
          static PyObject *t_WikipediaTokenizer_reset(t_WikipediaTokenizer *self, PyObject *args);

          static PyMethodDef t_WikipediaTokenizer__methods_[] = {
            DECLARE_METHOD(t_WikipediaTokenizer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_WikipediaTokenizer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_WikipediaTokenizer, close, METH_VARARGS),
            DECLARE_METHOD(t_WikipediaTokenizer, end, METH_VARARGS),
            DECLARE_METHOD(t_WikipediaTokenizer, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_WikipediaTokenizer, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(WikipediaTokenizer, t_WikipediaTokenizer, ::org::apache::lucene::analysis::Tokenizer, WikipediaTokenizer, t_WikipediaTokenizer_init_, 0, 0, 0, 0, 0);

          void t_WikipediaTokenizer::install(PyObject *module)
          {
            installType(&PY_TYPE(WikipediaTokenizer), module, "WikipediaTokenizer", 0);
          }

          void t_WikipediaTokenizer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(WikipediaTokenizer).tp_dict, "class_", make_descriptor(WikipediaTokenizer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(WikipediaTokenizer).tp_dict, "wrapfn_", make_descriptor(t_WikipediaTokenizer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(WikipediaTokenizer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(WikipediaTokenizer::initializeClass);
            PyDict_SetItemString(PY_TYPE(WikipediaTokenizer).tp_dict, "ACRONYM_ID", make_descriptor(WikipediaTokenizer::ACRONYM_ID));
            PyDict_SetItemString(PY_TYPE(WikipediaTokenizer).tp_dict, "ALPHANUM_ID", make_descriptor(WikipediaTokenizer::ALPHANUM_ID));
            PyDict_SetItemString(PY_TYPE(WikipediaTokenizer).tp_dict, "APOSTROPHE_ID", make_descriptor(WikipediaTokenizer::APOSTROPHE_ID));
            PyDict_SetItemString(PY_TYPE(WikipediaTokenizer).tp_dict, "BOLD", make_descriptor(j2p(*WikipediaTokenizer::BOLD)));
            PyDict_SetItemString(PY_TYPE(WikipediaTokenizer).tp_dict, "BOLD_ID", make_descriptor(WikipediaTokenizer::BOLD_ID));
            PyDict_SetItemString(PY_TYPE(WikipediaTokenizer).tp_dict, "BOLD_ITALICS", make_descriptor(j2p(*WikipediaTokenizer::BOLD_ITALICS)));
            PyDict_SetItemString(PY_TYPE(WikipediaTokenizer).tp_dict, "BOLD_ITALICS_ID", make_descriptor(WikipediaTokenizer::BOLD_ITALICS_ID));
            PyDict_SetItemString(PY_TYPE(WikipediaTokenizer).tp_dict, "BOTH", make_descriptor(WikipediaTokenizer::BOTH));
            PyDict_SetItemString(PY_TYPE(WikipediaTokenizer).tp_dict, "CATEGORY", make_descriptor(j2p(*WikipediaTokenizer::CATEGORY)));
            PyDict_SetItemString(PY_TYPE(WikipediaTokenizer).tp_dict, "CATEGORY_ID", make_descriptor(WikipediaTokenizer::CATEGORY_ID));
            PyDict_SetItemString(PY_TYPE(WikipediaTokenizer).tp_dict, "CITATION", make_descriptor(j2p(*WikipediaTokenizer::CITATION)));
            PyDict_SetItemString(PY_TYPE(WikipediaTokenizer).tp_dict, "CITATION_ID", make_descriptor(WikipediaTokenizer::CITATION_ID));
            PyDict_SetItemString(PY_TYPE(WikipediaTokenizer).tp_dict, "CJ_ID", make_descriptor(WikipediaTokenizer::CJ_ID));
            PyDict_SetItemString(PY_TYPE(WikipediaTokenizer).tp_dict, "COMPANY_ID", make_descriptor(WikipediaTokenizer::COMPANY_ID));
            PyDict_SetItemString(PY_TYPE(WikipediaTokenizer).tp_dict, "EMAIL_ID", make_descriptor(WikipediaTokenizer::EMAIL_ID));
            PyDict_SetItemString(PY_TYPE(WikipediaTokenizer).tp_dict, "EXTERNAL_LINK", make_descriptor(j2p(*WikipediaTokenizer::EXTERNAL_LINK)));
            PyDict_SetItemString(PY_TYPE(WikipediaTokenizer).tp_dict, "EXTERNAL_LINK_ID", make_descriptor(WikipediaTokenizer::EXTERNAL_LINK_ID));
            PyDict_SetItemString(PY_TYPE(WikipediaTokenizer).tp_dict, "EXTERNAL_LINK_URL", make_descriptor(j2p(*WikipediaTokenizer::EXTERNAL_LINK_URL)));
            PyDict_SetItemString(PY_TYPE(WikipediaTokenizer).tp_dict, "EXTERNAL_LINK_URL_ID", make_descriptor(WikipediaTokenizer::EXTERNAL_LINK_URL_ID));
            PyDict_SetItemString(PY_TYPE(WikipediaTokenizer).tp_dict, "HEADING", make_descriptor(j2p(*WikipediaTokenizer::HEADING)));
            PyDict_SetItemString(PY_TYPE(WikipediaTokenizer).tp_dict, "HEADING_ID", make_descriptor(WikipediaTokenizer::HEADING_ID));
            PyDict_SetItemString(PY_TYPE(WikipediaTokenizer).tp_dict, "HOST_ID", make_descriptor(WikipediaTokenizer::HOST_ID));
            PyDict_SetItemString(PY_TYPE(WikipediaTokenizer).tp_dict, "INTERNAL_LINK", make_descriptor(j2p(*WikipediaTokenizer::INTERNAL_LINK)));
            PyDict_SetItemString(PY_TYPE(WikipediaTokenizer).tp_dict, "INTERNAL_LINK_ID", make_descriptor(WikipediaTokenizer::INTERNAL_LINK_ID));
            PyDict_SetItemString(PY_TYPE(WikipediaTokenizer).tp_dict, "ITALICS", make_descriptor(j2p(*WikipediaTokenizer::ITALICS)));
            PyDict_SetItemString(PY_TYPE(WikipediaTokenizer).tp_dict, "ITALICS_ID", make_descriptor(WikipediaTokenizer::ITALICS_ID));
            PyDict_SetItemString(PY_TYPE(WikipediaTokenizer).tp_dict, "NUM_ID", make_descriptor(WikipediaTokenizer::NUM_ID));
            PyDict_SetItemString(PY_TYPE(WikipediaTokenizer).tp_dict, "SUB_HEADING", make_descriptor(j2p(*WikipediaTokenizer::SUB_HEADING)));
            PyDict_SetItemString(PY_TYPE(WikipediaTokenizer).tp_dict, "SUB_HEADING_ID", make_descriptor(WikipediaTokenizer::SUB_HEADING_ID));
            PyDict_SetItemString(PY_TYPE(WikipediaTokenizer).tp_dict, "TOKENS_ONLY", make_descriptor(WikipediaTokenizer::TOKENS_ONLY));
            PyDict_SetItemString(PY_TYPE(WikipediaTokenizer).tp_dict, "TOKEN_TYPES", make_descriptor(JArray<jstring>(WikipediaTokenizer::TOKEN_TYPES->this$).wrap()));
            PyDict_SetItemString(PY_TYPE(WikipediaTokenizer).tp_dict, "UNTOKENIZED_ONLY", make_descriptor(WikipediaTokenizer::UNTOKENIZED_ONLY));
            PyDict_SetItemString(PY_TYPE(WikipediaTokenizer).tp_dict, "UNTOKENIZED_TOKEN_FLAG", make_descriptor(WikipediaTokenizer::UNTOKENIZED_TOKEN_FLAG));
          }

          static PyObject *t_WikipediaTokenizer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, WikipediaTokenizer::initializeClass, 1)))
              return NULL;
            return t_WikipediaTokenizer::wrap_Object(WikipediaTokenizer(((t_WikipediaTokenizer *) arg)->object.this$));
          }
          static PyObject *t_WikipediaTokenizer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, WikipediaTokenizer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_WikipediaTokenizer_init_(t_WikipediaTokenizer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::java::io::Reader a0((jobject) NULL);
                WikipediaTokenizer object((jobject) NULL);

                if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
                {
                  INT_CALL(object = WikipediaTokenizer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::java::io::Reader a0((jobject) NULL);
                jint a1;
                ::java::util::Set a2((jobject) NULL);
                PyTypeObject **p2;
                WikipediaTokenizer object((jobject) NULL);

                if (!parseArgs(args, "kIK", ::java::io::Reader::initializeClass, ::java::util::Set::initializeClass, &a0, &a1, &a2, &p2, ::java::util::t_Set::parameters_))
                {
                  INT_CALL(object = WikipediaTokenizer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 4:
              {
                ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
                ::java::io::Reader a1((jobject) NULL);
                jint a2;
                ::java::util::Set a3((jobject) NULL);
                PyTypeObject **p3;
                WikipediaTokenizer object((jobject) NULL);

                if (!parseArgs(args, "kkIK", ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, ::java::util::Set::initializeClass, &a0, &a1, &a2, &a3, &p3, ::java::util::t_Set::parameters_))
                {
                  INT_CALL(object = WikipediaTokenizer(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_WikipediaTokenizer_close(t_WikipediaTokenizer *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.close());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(WikipediaTokenizer), (PyObject *) self, "close", args, 2);
          }

          static PyObject *t_WikipediaTokenizer_end(t_WikipediaTokenizer *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.end());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(WikipediaTokenizer), (PyObject *) self, "end", args, 2);
          }

          static PyObject *t_WikipediaTokenizer_incrementToken(t_WikipediaTokenizer *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(WikipediaTokenizer), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_WikipediaTokenizer_reset(t_WikipediaTokenizer *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(WikipediaTokenizer), (PyObject *) self, "reset", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/OfflineSorter.h"
#include "org/apache/lucene/util/OfflineSorter$SortInfo.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/OfflineSorter$BufferSize.h"
#include "java/io/File.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/util/Comparator.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *OfflineSorter::class$ = NULL;
        jmethodID *OfflineSorter::mids$ = NULL;
        bool OfflineSorter::live$ = false;
        jlong OfflineSorter::ABSOLUTE_MIN_SORT_BUFFER_SIZE = (jlong) 0;
        ::java::util::Comparator *OfflineSorter::DEFAULT_COMPARATOR = NULL;
        jlong OfflineSorter::GB = (jlong) 0;
        jint OfflineSorter::MAX_TEMPFILES = (jint) 0;
        jlong OfflineSorter::MB = (jlong) 0;
        jlong OfflineSorter::MIN_BUFFER_SIZE_MB = (jlong) 0;

        jclass OfflineSorter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/OfflineSorter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_init$_6ffdd545] = env->getMethodID(cls, "<init>", "(Ljava/util/Comparator;)V");
            mids$[mid_init$_22c0d43b] = env->getMethodID(cls, "<init>", "(Ljava/util/Comparator;Lorg/apache/lucene/util/OfflineSorter$BufferSize;Ljava/io/File;I)V");
            mids$[mid_defaultTempDir_a8eb7bbe] = env->getStaticMethodID(cls, "defaultTempDir", "()Ljava/io/File;");
            mids$[mid_getComparator_5a7ff2fc] = env->getMethodID(cls, "getComparator", "()Ljava/util/Comparator;");
            mids$[mid_sort_c917fc5b] = env->getMethodID(cls, "sort", "(Ljava/io/File;Ljava/io/File;)Lorg/apache/lucene/util/OfflineSorter$SortInfo;");
            mids$[mid_sortPartition_5a7c7338] = env->getMethodID(cls, "sortPartition", "(I)Ljava/io/File;");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            ABSOLUTE_MIN_SORT_BUFFER_SIZE = env->getStaticLongField(cls, "ABSOLUTE_MIN_SORT_BUFFER_SIZE");
            DEFAULT_COMPARATOR = new ::java::util::Comparator(env->getStaticObjectField(cls, "DEFAULT_COMPARATOR", "Ljava/util/Comparator;"));
            GB = env->getStaticLongField(cls, "GB");
            MAX_TEMPFILES = env->getStaticIntField(cls, "MAX_TEMPFILES");
            MB = env->getStaticLongField(cls, "MB");
            MIN_BUFFER_SIZE_MB = env->getStaticLongField(cls, "MIN_BUFFER_SIZE_MB");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        OfflineSorter::OfflineSorter() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        OfflineSorter::OfflineSorter(const ::java::util::Comparator & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_6ffdd545, a0.this$)) {}

        OfflineSorter::OfflineSorter(const ::java::util::Comparator & a0, const ::org::apache::lucene::util::OfflineSorter$BufferSize & a1, const ::java::io::File & a2, jint a3) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_22c0d43b, a0.this$, a1.this$, a2.this$, a3)) {}

        ::java::io::File OfflineSorter::defaultTempDir()
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::io::File(env->callStaticObjectMethod(cls, mids$[mid_defaultTempDir_a8eb7bbe]));
        }

        ::java::util::Comparator OfflineSorter::getComparator() const
        {
          return ::java::util::Comparator(env->callObjectMethod(this$, mids$[mid_getComparator_5a7ff2fc]));
        }

        ::org::apache::lucene::util::OfflineSorter$SortInfo OfflineSorter::sort(const ::java::io::File & a0, const ::java::io::File & a1) const
        {
          return ::org::apache::lucene::util::OfflineSorter$SortInfo(env->callObjectMethod(this$, mids$[mid_sort_c917fc5b], a0.this$, a1.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/util/OfflineSorter$ByteSequencesReader.h"
#include "org/apache/lucene/util/OfflineSorter$ByteSequencesWriter.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_OfflineSorter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_OfflineSorter_instance_(PyTypeObject *type, PyObject *arg);
        static int t_OfflineSorter_init_(t_OfflineSorter *self, PyObject *args, PyObject *kwds);
        static PyObject *t_OfflineSorter_defaultTempDir(PyTypeObject *type);
        static PyObject *t_OfflineSorter_getComparator(t_OfflineSorter *self);
        static PyObject *t_OfflineSorter_sort(t_OfflineSorter *self, PyObject *args);
        static PyObject *t_OfflineSorter_get__comparator(t_OfflineSorter *self, void *data);
        static PyGetSetDef t_OfflineSorter__fields_[] = {
          DECLARE_GET_FIELD(t_OfflineSorter, comparator),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_OfflineSorter__methods_[] = {
          DECLARE_METHOD(t_OfflineSorter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_OfflineSorter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_OfflineSorter, defaultTempDir, METH_NOARGS | METH_CLASS),
          DECLARE_METHOD(t_OfflineSorter, getComparator, METH_NOARGS),
          DECLARE_METHOD(t_OfflineSorter, sort, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(OfflineSorter, t_OfflineSorter, ::java::lang::Object, OfflineSorter, t_OfflineSorter_init_, 0, 0, t_OfflineSorter__fields_, 0, 0);

        void t_OfflineSorter::install(PyObject *module)
        {
          installType(&PY_TYPE(OfflineSorter), module, "OfflineSorter", 0);
          PyDict_SetItemString(PY_TYPE(OfflineSorter).tp_dict, "ByteSequencesReader", make_descriptor(&PY_TYPE(OfflineSorter$ByteSequencesReader)));
          PyDict_SetItemString(PY_TYPE(OfflineSorter).tp_dict, "ByteSequencesWriter", make_descriptor(&PY_TYPE(OfflineSorter$ByteSequencesWriter)));
          PyDict_SetItemString(PY_TYPE(OfflineSorter).tp_dict, "BufferSize", make_descriptor(&PY_TYPE(OfflineSorter$BufferSize)));
        }

        void t_OfflineSorter::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(OfflineSorter).tp_dict, "class_", make_descriptor(OfflineSorter::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(OfflineSorter).tp_dict, "wrapfn_", make_descriptor(t_OfflineSorter::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(OfflineSorter).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(OfflineSorter::initializeClass);
          PyDict_SetItemString(PY_TYPE(OfflineSorter).tp_dict, "ABSOLUTE_MIN_SORT_BUFFER_SIZE", make_descriptor(OfflineSorter::ABSOLUTE_MIN_SORT_BUFFER_SIZE));
          PyDict_SetItemString(PY_TYPE(OfflineSorter).tp_dict, "DEFAULT_COMPARATOR", make_descriptor(::java::util::t_Comparator::wrap_Object(*OfflineSorter::DEFAULT_COMPARATOR)));
          PyDict_SetItemString(PY_TYPE(OfflineSorter).tp_dict, "GB", make_descriptor(OfflineSorter::GB));
          PyDict_SetItemString(PY_TYPE(OfflineSorter).tp_dict, "MAX_TEMPFILES", make_descriptor(OfflineSorter::MAX_TEMPFILES));
          PyDict_SetItemString(PY_TYPE(OfflineSorter).tp_dict, "MB", make_descriptor(OfflineSorter::MB));
          PyDict_SetItemString(PY_TYPE(OfflineSorter).tp_dict, "MIN_BUFFER_SIZE_MB", make_descriptor(OfflineSorter::MIN_BUFFER_SIZE_MB));
        }

        static PyObject *t_OfflineSorter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, OfflineSorter::initializeClass, 1)))
            return NULL;
          return t_OfflineSorter::wrap_Object(OfflineSorter(((t_OfflineSorter *) arg)->object.this$));
        }
        static PyObject *t_OfflineSorter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, OfflineSorter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_OfflineSorter_init_(t_OfflineSorter *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              OfflineSorter object((jobject) NULL);

              INT_CALL(object = OfflineSorter());
              self->object = object;
              break;
            }
            goto err;
           case 1:
            {
              ::java::util::Comparator a0((jobject) NULL);
              PyTypeObject **p0;
              OfflineSorter object((jobject) NULL);

              if (!parseArgs(args, "K", ::java::util::Comparator::initializeClass, &a0, &p0, ::java::util::t_Comparator::parameters_))
              {
                INT_CALL(object = OfflineSorter(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 4:
            {
              ::java::util::Comparator a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::util::OfflineSorter$BufferSize a1((jobject) NULL);
              ::java::io::File a2((jobject) NULL);
              jint a3;
              OfflineSorter object((jobject) NULL);

              if (!parseArgs(args, "KkkI", ::java::util::Comparator::initializeClass, ::org::apache::lucene::util::OfflineSorter$BufferSize::initializeClass, ::java::io::File::initializeClass, &a0, &p0, ::java::util::t_Comparator::parameters_, &a1, &a2, &a3))
              {
                INT_CALL(object = OfflineSorter(a0, a1, a2, a3));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_OfflineSorter_defaultTempDir(PyTypeObject *type)
        {
          ::java::io::File result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::util::OfflineSorter::defaultTempDir());
          return ::java::io::t_File::wrap_Object(result);
        }

        static PyObject *t_OfflineSorter_getComparator(t_OfflineSorter *self)
        {
          ::java::util::Comparator result((jobject) NULL);
          OBJ_CALL(result = self->object.getComparator());
          return ::java::util::t_Comparator::wrap_Object(result, &::org::apache::lucene::util::PY_TYPE(BytesRef));
        }

        static PyObject *t_OfflineSorter_sort(t_OfflineSorter *self, PyObject *args)
        {
          ::java::io::File a0((jobject) NULL);
          ::java::io::File a1((jobject) NULL);
          ::org::apache::lucene::util::OfflineSorter$SortInfo result((jobject) NULL);

          if (!parseArgs(args, "kk", ::java::io::File::initializeClass, ::java::io::File::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.sort(a0, a1));
            return ::org::apache::lucene::util::t_OfflineSorter$SortInfo::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "sort", args);
          return NULL;
        }

        static PyObject *t_OfflineSorter_get__comparator(t_OfflineSorter *self, void *data)
        {
          ::java::util::Comparator value((jobject) NULL);
          OBJ_CALL(value = self->object.getComparator());
          return ::java::util::t_Comparator::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/vectorhighlight/BaseFragListBuilder.h"
#include "org/apache/lucene/search/vectorhighlight/FragListBuilder.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {

          ::java::lang::Class *BaseFragListBuilder::class$ = NULL;
          jmethodID *BaseFragListBuilder::mids$ = NULL;
          bool BaseFragListBuilder::live$ = false;
          jint BaseFragListBuilder::MARGIN_DEFAULT = (jint) 0;
          jint BaseFragListBuilder::MIN_FRAG_CHAR_SIZE_FACTOR = (jint) 0;

          jclass BaseFragListBuilder::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/vectorhighlight/BaseFragListBuilder");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
              mids$[mid_acceptPhrase_cb592899] = env->getMethodID(cls, "acceptPhrase", "(Lorg/apache/lucene/search/vectorhighlight/FieldPhraseList$WeightedPhraseInfo;II)Z");
              mids$[mid_createFieldFragList_c90c3835] = env->getMethodID(cls, "createFieldFragList", "(Lorg/apache/lucene/search/vectorhighlight/FieldPhraseList;Lorg/apache/lucene/search/vectorhighlight/FieldFragList;I)Lorg/apache/lucene/search/vectorhighlight/FieldFragList;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              MARGIN_DEFAULT = env->getStaticIntField(cls, "MARGIN_DEFAULT");
              MIN_FRAG_CHAR_SIZE_FACTOR = env->getStaticIntField(cls, "MIN_FRAG_CHAR_SIZE_FACTOR");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BaseFragListBuilder::BaseFragListBuilder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          BaseFragListBuilder::BaseFragListBuilder(jint a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {
          static PyObject *t_BaseFragListBuilder_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BaseFragListBuilder_instance_(PyTypeObject *type, PyObject *arg);
          static int t_BaseFragListBuilder_init_(t_BaseFragListBuilder *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_BaseFragListBuilder__methods_[] = {
            DECLARE_METHOD(t_BaseFragListBuilder, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BaseFragListBuilder, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(BaseFragListBuilder, t_BaseFragListBuilder, ::java::lang::Object, BaseFragListBuilder, t_BaseFragListBuilder_init_, 0, 0, 0, 0, 0);

          void t_BaseFragListBuilder::install(PyObject *module)
          {
            installType(&PY_TYPE(BaseFragListBuilder), module, "BaseFragListBuilder", 0);
          }

          void t_BaseFragListBuilder::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(BaseFragListBuilder).tp_dict, "class_", make_descriptor(BaseFragListBuilder::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(BaseFragListBuilder).tp_dict, "wrapfn_", make_descriptor(t_BaseFragListBuilder::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(BaseFragListBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(BaseFragListBuilder::initializeClass);
            PyDict_SetItemString(PY_TYPE(BaseFragListBuilder).tp_dict, "MARGIN_DEFAULT", make_descriptor(BaseFragListBuilder::MARGIN_DEFAULT));
            PyDict_SetItemString(PY_TYPE(BaseFragListBuilder).tp_dict, "MIN_FRAG_CHAR_SIZE_FACTOR", make_descriptor(BaseFragListBuilder::MIN_FRAG_CHAR_SIZE_FACTOR));
          }

          static PyObject *t_BaseFragListBuilder_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BaseFragListBuilder::initializeClass, 1)))
              return NULL;
            return t_BaseFragListBuilder::wrap_Object(BaseFragListBuilder(((t_BaseFragListBuilder *) arg)->object.this$));
          }
          static PyObject *t_BaseFragListBuilder_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BaseFragListBuilder::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_BaseFragListBuilder_init_(t_BaseFragListBuilder *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                BaseFragListBuilder object((jobject) NULL);

                INT_CALL(object = BaseFragListBuilder());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                jint a0;
                BaseFragListBuilder object((jobject) NULL);

                if (!parseArgs(args, "I", &a0))
                {
                  INT_CALL(object = BaseFragListBuilder(a0));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/CompoundFileDirectory$FileEntry.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *CompoundFileDirectory$FileEntry::class$ = NULL;
        jmethodID *CompoundFileDirectory$FileEntry::mids$ = NULL;
        bool CompoundFileDirectory$FileEntry::live$ = false;

        jclass CompoundFileDirectory$FileEntry::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/CompoundFileDirectory$FileEntry");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        CompoundFileDirectory$FileEntry::CompoundFileDirectory$FileEntry() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_CompoundFileDirectory$FileEntry_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CompoundFileDirectory$FileEntry_instance_(PyTypeObject *type, PyObject *arg);
        static int t_CompoundFileDirectory$FileEntry_init_(t_CompoundFileDirectory$FileEntry *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_CompoundFileDirectory$FileEntry__methods_[] = {
          DECLARE_METHOD(t_CompoundFileDirectory$FileEntry, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CompoundFileDirectory$FileEntry, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(CompoundFileDirectory$FileEntry, t_CompoundFileDirectory$FileEntry, ::java::lang::Object, CompoundFileDirectory$FileEntry, t_CompoundFileDirectory$FileEntry_init_, 0, 0, 0, 0, 0);

        void t_CompoundFileDirectory$FileEntry::install(PyObject *module)
        {
          installType(&PY_TYPE(CompoundFileDirectory$FileEntry), module, "CompoundFileDirectory$FileEntry", 0);
        }

        void t_CompoundFileDirectory$FileEntry::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(CompoundFileDirectory$FileEntry).tp_dict, "class_", make_descriptor(CompoundFileDirectory$FileEntry::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(CompoundFileDirectory$FileEntry).tp_dict, "wrapfn_", make_descriptor(t_CompoundFileDirectory$FileEntry::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(CompoundFileDirectory$FileEntry).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_CompoundFileDirectory$FileEntry_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CompoundFileDirectory$FileEntry::initializeClass, 1)))
            return NULL;
          return t_CompoundFileDirectory$FileEntry::wrap_Object(CompoundFileDirectory$FileEntry(((t_CompoundFileDirectory$FileEntry *) arg)->object.this$));
        }
        static PyObject *t_CompoundFileDirectory$FileEntry_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CompoundFileDirectory$FileEntry::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_CompoundFileDirectory$FileEntry_init_(t_CompoundFileDirectory$FileEntry *self, PyObject *args, PyObject *kwds)
        {
          CompoundFileDirectory$FileEntry object((jobject) NULL);

          INT_CALL(object = CompoundFileDirectory$FileEntry());
          self->object = object;

          return 0;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/FilteredTermsEnum.h"
#include "org/apache/lucene/index/DocsEnum.h"
#include "org/apache/lucene/index/TermState.h"
#include "org/apache/lucene/index/TermsEnum$SeekStatus.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/DocsAndPositionsEnum.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/AttributeSource.h"
#include "org/apache/lucene/util/Bits.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/util/Comparator.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *FilteredTermsEnum::class$ = NULL;
        jmethodID *FilteredTermsEnum::mids$ = NULL;
        bool FilteredTermsEnum::live$ = false;

        jclass FilteredTermsEnum::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/FilteredTermsEnum");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_0f660bfe] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/TermsEnum;)V");
            mids$[mid_init$_3c71de47] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/TermsEnum;Z)V");
            mids$[mid_attributes_f901022b] = env->getMethodID(cls, "attributes", "()Lorg/apache/lucene/util/AttributeSource;");
            mids$[mid_docFreq_54c6a179] = env->getMethodID(cls, "docFreq", "()I");
            mids$[mid_docs_e6d4c3ef] = env->getMethodID(cls, "docs", "(Lorg/apache/lucene/util/Bits;Lorg/apache/lucene/index/DocsEnum;I)Lorg/apache/lucene/index/DocsEnum;");
            mids$[mid_docsAndPositions_b5d9c11b] = env->getMethodID(cls, "docsAndPositions", "(Lorg/apache/lucene/util/Bits;Lorg/apache/lucene/index/DocsAndPositionsEnum;I)Lorg/apache/lucene/index/DocsAndPositionsEnum;");
            mids$[mid_getComparator_5a7ff2fc] = env->getMethodID(cls, "getComparator", "()Ljava/util/Comparator;");
            mids$[mid_next_4ae19461] = env->getMethodID(cls, "next", "()Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_ord_54c6a17a] = env->getMethodID(cls, "ord", "()J");
            mids$[mid_seekCeil_fa9d72c4] = env->getMethodID(cls, "seekCeil", "(Lorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/index/TermsEnum$SeekStatus;");
            mids$[mid_seekExact_7bc03dc8] = env->getMethodID(cls, "seekExact", "(Lorg/apache/lucene/util/BytesRef;)Z");
            mids$[mid_seekExact_0ee6df2f] = env->getMethodID(cls, "seekExact", "(J)V");
            mids$[mid_seekExact_fe46da51] = env->getMethodID(cls, "seekExact", "(Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/index/TermState;)V");
            mids$[mid_term_4ae19461] = env->getMethodID(cls, "term", "()Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_termState_3e41fede] = env->getMethodID(cls, "termState", "()Lorg/apache/lucene/index/TermState;");
            mids$[mid_totalTermFreq_54c6a17a] = env->getMethodID(cls, "totalTermFreq", "()J");
            mids$[mid_accept_30bc08e1] = env->getMethodID(cls, "accept", "(Lorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/index/FilteredTermsEnum$AcceptStatus;");
            mids$[mid_nextSeekTerm_21e43cb7] = env->getMethodID(cls, "nextSeekTerm", "(Lorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_setInitialSeekTerm_7bc03dc4] = env->getMethodID(cls, "setInitialSeekTerm", "(Lorg/apache/lucene/util/BytesRef;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FilteredTermsEnum::FilteredTermsEnum(const ::org::apache::lucene::index::TermsEnum & a0) : ::org::apache::lucene::index::TermsEnum(env->newObject(initializeClass, &mids$, mid_init$_0f660bfe, a0.this$)) {}

        FilteredTermsEnum::FilteredTermsEnum(const ::org::apache::lucene::index::TermsEnum & a0, jboolean a1) : ::org::apache::lucene::index::TermsEnum(env->newObject(initializeClass, &mids$, mid_init$_3c71de47, a0.this$, a1)) {}

        ::org::apache::lucene::util::AttributeSource FilteredTermsEnum::attributes() const
        {
          return ::org::apache::lucene::util::AttributeSource(env->callObjectMethod(this$, mids$[mid_attributes_f901022b]));
        }

        jint FilteredTermsEnum::docFreq() const
        {
          return env->callIntMethod(this$, mids$[mid_docFreq_54c6a179]);
        }

        ::org::apache::lucene::index::DocsEnum FilteredTermsEnum::docs(const ::org::apache::lucene::util::Bits & a0, const ::org::apache::lucene::index::DocsEnum & a1, jint a2) const
        {
          return ::org::apache::lucene::index::DocsEnum(env->callObjectMethod(this$, mids$[mid_docs_e6d4c3ef], a0.this$, a1.this$, a2));
        }

        ::org::apache::lucene::index::DocsAndPositionsEnum FilteredTermsEnum::docsAndPositions(const ::org::apache::lucene::util::Bits & a0, const ::org::apache::lucene::index::DocsAndPositionsEnum & a1, jint a2) const
        {
          return ::org::apache::lucene::index::DocsAndPositionsEnum(env->callObjectMethod(this$, mids$[mid_docsAndPositions_b5d9c11b], a0.this$, a1.this$, a2));
        }

        ::java::util::Comparator FilteredTermsEnum::getComparator() const
        {
          return ::java::util::Comparator(env->callObjectMethod(this$, mids$[mid_getComparator_5a7ff2fc]));
        }

        ::org::apache::lucene::util::BytesRef FilteredTermsEnum::next() const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_next_4ae19461]));
        }

        jlong FilteredTermsEnum::ord() const
        {
          return env->callLongMethod(this$, mids$[mid_ord_54c6a17a]);
        }

        ::org::apache::lucene::index::TermsEnum$SeekStatus FilteredTermsEnum::seekCeil(const ::org::apache::lucene::util::BytesRef & a0) const
        {
          return ::org::apache::lucene::index::TermsEnum$SeekStatus(env->callObjectMethod(this$, mids$[mid_seekCeil_fa9d72c4], a0.this$));
        }

        jboolean FilteredTermsEnum::seekExact(const ::org::apache::lucene::util::BytesRef & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_seekExact_7bc03dc8], a0.this$);
        }

        void FilteredTermsEnum::seekExact(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_seekExact_0ee6df2f], a0);
        }

        void FilteredTermsEnum::seekExact(const ::org::apache::lucene::util::BytesRef & a0, const ::org::apache::lucene::index::TermState & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_seekExact_fe46da51], a0.this$, a1.this$);
        }

        ::org::apache::lucene::util::BytesRef FilteredTermsEnum::term() const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_term_4ae19461]));
        }

        ::org::apache::lucene::index::TermState FilteredTermsEnum::termState() const
        {
          return ::org::apache::lucene::index::TermState(env->callObjectMethod(this$, mids$[mid_termState_3e41fede]));
        }

        jlong FilteredTermsEnum::totalTermFreq() const
        {
          return env->callLongMethod(this$, mids$[mid_totalTermFreq_54c6a17a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_FilteredTermsEnum_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FilteredTermsEnum_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FilteredTermsEnum_init_(t_FilteredTermsEnum *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FilteredTermsEnum_attributes(t_FilteredTermsEnum *self, PyObject *args);
        static PyObject *t_FilteredTermsEnum_docFreq(t_FilteredTermsEnum *self, PyObject *args);
        static PyObject *t_FilteredTermsEnum_docs(t_FilteredTermsEnum *self, PyObject *args);
        static PyObject *t_FilteredTermsEnum_docsAndPositions(t_FilteredTermsEnum *self, PyObject *args);
        static PyObject *t_FilteredTermsEnum_getComparator(t_FilteredTermsEnum *self, PyObject *args);
        static PyObject *t_FilteredTermsEnum_next(t_FilteredTermsEnum *self, PyObject *args);
        static PyObject *t_FilteredTermsEnum_ord(t_FilteredTermsEnum *self, PyObject *args);
        static PyObject *t_FilteredTermsEnum_seekCeil(t_FilteredTermsEnum *self, PyObject *args);
        static PyObject *t_FilteredTermsEnum_seekExact(t_FilteredTermsEnum *self, PyObject *args);
        static PyObject *t_FilteredTermsEnum_term(t_FilteredTermsEnum *self, PyObject *args);
        static PyObject *t_FilteredTermsEnum_termState(t_FilteredTermsEnum *self, PyObject *args);
        static PyObject *t_FilteredTermsEnum_totalTermFreq(t_FilteredTermsEnum *self, PyObject *args);
        static PyObject *t_FilteredTermsEnum_get__comparator(t_FilteredTermsEnum *self, void *data);
        static PyGetSetDef t_FilteredTermsEnum__fields_[] = {
          DECLARE_GET_FIELD(t_FilteredTermsEnum, comparator),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FilteredTermsEnum__methods_[] = {
          DECLARE_METHOD(t_FilteredTermsEnum, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilteredTermsEnum, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilteredTermsEnum, attributes, METH_VARARGS),
          DECLARE_METHOD(t_FilteredTermsEnum, docFreq, METH_VARARGS),
          DECLARE_METHOD(t_FilteredTermsEnum, docs, METH_VARARGS),
          DECLARE_METHOD(t_FilteredTermsEnum, docsAndPositions, METH_VARARGS),
          DECLARE_METHOD(t_FilteredTermsEnum, getComparator, METH_VARARGS),
          DECLARE_METHOD(t_FilteredTermsEnum, next, METH_VARARGS),
          DECLARE_METHOD(t_FilteredTermsEnum, ord, METH_VARARGS),
          DECLARE_METHOD(t_FilteredTermsEnum, seekCeil, METH_VARARGS),
          DECLARE_METHOD(t_FilteredTermsEnum, seekExact, METH_VARARGS),
          DECLARE_METHOD(t_FilteredTermsEnum, term, METH_VARARGS),
          DECLARE_METHOD(t_FilteredTermsEnum, termState, METH_VARARGS),
          DECLARE_METHOD(t_FilteredTermsEnum, totalTermFreq, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FilteredTermsEnum, t_FilteredTermsEnum, ::org::apache::lucene::index::TermsEnum, FilteredTermsEnum, t_FilteredTermsEnum_init_, PyObject_SelfIter, ((PyObject *(*)(t_FilteredTermsEnum *)) get_next< t_FilteredTermsEnum,::org::apache::lucene::util::t_BytesRef,::org::apache::lucene::util::BytesRef >), t_FilteredTermsEnum__fields_, 0, 0);

        void t_FilteredTermsEnum::install(PyObject *module)
        {
          installType(&PY_TYPE(FilteredTermsEnum), module, "FilteredTermsEnum", 0);
        }

        void t_FilteredTermsEnum::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FilteredTermsEnum).tp_dict, "class_", make_descriptor(FilteredTermsEnum::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FilteredTermsEnum).tp_dict, "wrapfn_", make_descriptor(t_FilteredTermsEnum::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FilteredTermsEnum).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FilteredTermsEnum_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FilteredTermsEnum::initializeClass, 1)))
            return NULL;
          return t_FilteredTermsEnum::wrap_Object(FilteredTermsEnum(((t_FilteredTermsEnum *) arg)->object.this$));
        }
        static PyObject *t_FilteredTermsEnum_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FilteredTermsEnum::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FilteredTermsEnum_init_(t_FilteredTermsEnum *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::index::TermsEnum a0((jobject) NULL);
              FilteredTermsEnum object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::index::TermsEnum::initializeClass, &a0))
              {
                INT_CALL(object = FilteredTermsEnum(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              ::org::apache::lucene::index::TermsEnum a0((jobject) NULL);
              jboolean a1;
              FilteredTermsEnum object((jobject) NULL);

              if (!parseArgs(args, "kZ", ::org::apache::lucene::index::TermsEnum::initializeClass, &a0, &a1))
              {
                INT_CALL(object = FilteredTermsEnum(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FilteredTermsEnum_attributes(t_FilteredTermsEnum *self, PyObject *args)
        {
          ::org::apache::lucene::util::AttributeSource result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.attributes());
            return ::org::apache::lucene::util::t_AttributeSource::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilteredTermsEnum), (PyObject *) self, "attributes", args, 2);
        }

        static PyObject *t_FilteredTermsEnum_docFreq(t_FilteredTermsEnum *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.docFreq());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FilteredTermsEnum), (PyObject *) self, "docFreq", args, 2);
        }

        static PyObject *t_FilteredTermsEnum_docs(t_FilteredTermsEnum *self, PyObject *args)
        {
          ::org::apache::lucene::util::Bits a0((jobject) NULL);
          ::org::apache::lucene::index::DocsEnum a1((jobject) NULL);
          jint a2;
          ::org::apache::lucene::index::DocsEnum result((jobject) NULL);

          if (!parseArgs(args, "kkI", ::org::apache::lucene::util::Bits::initializeClass, ::org::apache::lucene::index::DocsEnum::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.docs(a0, a1, a2));
            return ::org::apache::lucene::index::t_DocsEnum::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilteredTermsEnum), (PyObject *) self, "docs", args, 2);
        }

        static PyObject *t_FilteredTermsEnum_docsAndPositions(t_FilteredTermsEnum *self, PyObject *args)
        {
          ::org::apache::lucene::util::Bits a0((jobject) NULL);
          ::org::apache::lucene::index::DocsAndPositionsEnum a1((jobject) NULL);
          jint a2;
          ::org::apache::lucene::index::DocsAndPositionsEnum result((jobject) NULL);

          if (!parseArgs(args, "kkI", ::org::apache::lucene::util::Bits::initializeClass, ::org::apache::lucene::index::DocsAndPositionsEnum::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.docsAndPositions(a0, a1, a2));
            return ::org::apache::lucene::index::t_DocsAndPositionsEnum::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilteredTermsEnum), (PyObject *) self, "docsAndPositions", args, 2);
        }

        static PyObject *t_FilteredTermsEnum_getComparator(t_FilteredTermsEnum *self, PyObject *args)
        {
          ::java::util::Comparator result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getComparator());
            return ::java::util::t_Comparator::wrap_Object(result, &::org::apache::lucene::util::PY_TYPE(BytesRef));
          }

          return callSuper(&PY_TYPE(FilteredTermsEnum), (PyObject *) self, "getComparator", args, 2);
        }

        static PyObject *t_FilteredTermsEnum_next(t_FilteredTermsEnum *self, PyObject *args)
        {
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.next());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilteredTermsEnum), (PyObject *) self, "next", args, 2);
        }

        static PyObject *t_FilteredTermsEnum_ord(t_FilteredTermsEnum *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.ord());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(FilteredTermsEnum), (PyObject *) self, "ord", args, 2);
        }

        static PyObject *t_FilteredTermsEnum_seekCeil(t_FilteredTermsEnum *self, PyObject *args)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          ::org::apache::lucene::index::TermsEnum$SeekStatus result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.seekCeil(a0));
            return ::org::apache::lucene::index::t_TermsEnum$SeekStatus::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilteredTermsEnum), (PyObject *) self, "seekCeil", args, 2);
        }

        static PyObject *t_FilteredTermsEnum_seekExact(t_FilteredTermsEnum *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.seekExact(a0));
                Py_RETURN_BOOL(result);
              }
            }
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.seekExact(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 2:
            {
              ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
              ::org::apache::lucene::index::TermState a1((jobject) NULL);

              if (!parseArgs(args, "kk", ::org::apache::lucene::util::BytesRef::initializeClass, ::org::apache::lucene::index::TermState::initializeClass, &a0, &a1))
              {
                OBJ_CALL(self->object.seekExact(a0, a1));
                Py_RETURN_NONE;
              }
            }
          }

          return callSuper(&PY_TYPE(FilteredTermsEnum), (PyObject *) self, "seekExact", args, 2);
        }

        static PyObject *t_FilteredTermsEnum_term(t_FilteredTermsEnum *self, PyObject *args)
        {
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.term());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilteredTermsEnum), (PyObject *) self, "term", args, 2);
        }

        static PyObject *t_FilteredTermsEnum_termState(t_FilteredTermsEnum *self, PyObject *args)
        {
          ::org::apache::lucene::index::TermState result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.termState());
            return ::org::apache::lucene::index::t_TermState::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilteredTermsEnum), (PyObject *) self, "termState", args, 2);
        }

        static PyObject *t_FilteredTermsEnum_totalTermFreq(t_FilteredTermsEnum *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.totalTermFreq());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(FilteredTermsEnum), (PyObject *) self, "totalTermFreq", args, 2);
        }

        static PyObject *t_FilteredTermsEnum_get__comparator(t_FilteredTermsEnum *self, void *data)
        {
          ::java::util::Comparator value((jobject) NULL);
          OBJ_CALL(value = self->object.getComparator());
          return ::java::util::t_Comparator::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/PerFieldSimilarityWrapper.h"
#include "org/apache/lucene/index/FieldInvertState.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/search/TermStatistics.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/CollectionStatistics.h"
#include "org/apache/lucene/search/similarities/Similarity$SimWeight.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/similarities/Similarity$SimScorer.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *PerFieldSimilarityWrapper::class$ = NULL;
          jmethodID *PerFieldSimilarityWrapper::mids$ = NULL;
          bool PerFieldSimilarityWrapper::live$ = false;

          jclass PerFieldSimilarityWrapper::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/PerFieldSimilarityWrapper");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_computeNorm_6ff84e0e] = env->getMethodID(cls, "computeNorm", "(Lorg/apache/lucene/index/FieldInvertState;)J");
              mids$[mid_computeWeight_8bb6ee0b] = env->getMethodID(cls, "computeWeight", "(FLorg/apache/lucene/search/CollectionStatistics;[Lorg/apache/lucene/search/TermStatistics;)Lorg/apache/lucene/search/similarities/Similarity$SimWeight;");
              mids$[mid_get_951784a9] = env->getMethodID(cls, "get", "(Ljava/lang/String;)Lorg/apache/lucene/search/similarities/Similarity;");
              mids$[mid_simScorer_9a2cfed8] = env->getMethodID(cls, "simScorer", "(Lorg/apache/lucene/search/similarities/Similarity$SimWeight;Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/search/similarities/Similarity$SimScorer;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PerFieldSimilarityWrapper::PerFieldSimilarityWrapper() : ::org::apache::lucene::search::similarities::Similarity(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jlong PerFieldSimilarityWrapper::computeNorm(const ::org::apache::lucene::index::FieldInvertState & a0) const
          {
            return env->callLongMethod(this$, mids$[mid_computeNorm_6ff84e0e], a0.this$);
          }

          ::org::apache::lucene::search::similarities::Similarity$SimWeight PerFieldSimilarityWrapper::computeWeight(jfloat a0, const ::org::apache::lucene::search::CollectionStatistics & a1, const JArray< ::org::apache::lucene::search::TermStatistics > & a2) const
          {
            return ::org::apache::lucene::search::similarities::Similarity$SimWeight(env->callObjectMethod(this$, mids$[mid_computeWeight_8bb6ee0b], a0, a1.this$, a2.this$));
          }

          ::org::apache::lucene::search::similarities::Similarity PerFieldSimilarityWrapper::get(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::search::similarities::Similarity(env->callObjectMethod(this$, mids$[mid_get_951784a9], a0.this$));
          }

          ::org::apache::lucene::search::similarities::Similarity$SimScorer PerFieldSimilarityWrapper::simScorer(const ::org::apache::lucene::search::similarities::Similarity$SimWeight & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1) const
          {
            return ::org::apache::lucene::search::similarities::Similarity$SimScorer(env->callObjectMethod(this$, mids$[mid_simScorer_9a2cfed8], a0.this$, a1.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_PerFieldSimilarityWrapper_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PerFieldSimilarityWrapper_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PerFieldSimilarityWrapper_init_(t_PerFieldSimilarityWrapper *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PerFieldSimilarityWrapper_computeNorm(t_PerFieldSimilarityWrapper *self, PyObject *args);
          static PyObject *t_PerFieldSimilarityWrapper_computeWeight(t_PerFieldSimilarityWrapper *self, PyObject *args);
          static PyObject *t_PerFieldSimilarityWrapper_get(t_PerFieldSimilarityWrapper *self, PyObject *arg);
          static PyObject *t_PerFieldSimilarityWrapper_simScorer(t_PerFieldSimilarityWrapper *self, PyObject *args);

          static PyMethodDef t_PerFieldSimilarityWrapper__methods_[] = {
            DECLARE_METHOD(t_PerFieldSimilarityWrapper, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PerFieldSimilarityWrapper, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PerFieldSimilarityWrapper, computeNorm, METH_VARARGS),
            DECLARE_METHOD(t_PerFieldSimilarityWrapper, computeWeight, METH_VARARGS),
            DECLARE_METHOD(t_PerFieldSimilarityWrapper, get, METH_O),
            DECLARE_METHOD(t_PerFieldSimilarityWrapper, simScorer, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PerFieldSimilarityWrapper, t_PerFieldSimilarityWrapper, ::org::apache::lucene::search::similarities::Similarity, PerFieldSimilarityWrapper, t_PerFieldSimilarityWrapper_init_, 0, 0, 0, 0, 0);

          void t_PerFieldSimilarityWrapper::install(PyObject *module)
          {
            installType(&PY_TYPE(PerFieldSimilarityWrapper), module, "PerFieldSimilarityWrapper", 0);
          }

          void t_PerFieldSimilarityWrapper::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PerFieldSimilarityWrapper).tp_dict, "class_", make_descriptor(PerFieldSimilarityWrapper::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PerFieldSimilarityWrapper).tp_dict, "wrapfn_", make_descriptor(t_PerFieldSimilarityWrapper::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PerFieldSimilarityWrapper).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PerFieldSimilarityWrapper_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PerFieldSimilarityWrapper::initializeClass, 1)))
              return NULL;
            return t_PerFieldSimilarityWrapper::wrap_Object(PerFieldSimilarityWrapper(((t_PerFieldSimilarityWrapper *) arg)->object.this$));
          }
          static PyObject *t_PerFieldSimilarityWrapper_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PerFieldSimilarityWrapper::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PerFieldSimilarityWrapper_init_(t_PerFieldSimilarityWrapper *self, PyObject *args, PyObject *kwds)
          {
            PerFieldSimilarityWrapper object((jobject) NULL);

            INT_CALL(object = PerFieldSimilarityWrapper());
            self->object = object;

            return 0;
          }

          static PyObject *t_PerFieldSimilarityWrapper_computeNorm(t_PerFieldSimilarityWrapper *self, PyObject *args)
          {
            ::org::apache::lucene::index::FieldInvertState a0((jobject) NULL);
            jlong result;

            if (!parseArgs(args, "k", ::org::apache::lucene::index::FieldInvertState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.computeNorm(a0));
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(&PY_TYPE(PerFieldSimilarityWrapper), (PyObject *) self, "computeNorm", args, 2);
          }

          static PyObject *t_PerFieldSimilarityWrapper_computeWeight(t_PerFieldSimilarityWrapper *self, PyObject *args)
          {
            jfloat a0;
            ::org::apache::lucene::search::CollectionStatistics a1((jobject) NULL);
            JArray< ::org::apache::lucene::search::TermStatistics > a2((jobject) NULL);
            ::org::apache::lucene::search::similarities::Similarity$SimWeight result((jobject) NULL);

            if (!parseArgs(args, "Fk[k", ::org::apache::lucene::search::CollectionStatistics::initializeClass, ::org::apache::lucene::search::TermStatistics::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.computeWeight(a0, a1, a2));
              return ::org::apache::lucene::search::similarities::t_Similarity$SimWeight::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(PerFieldSimilarityWrapper), (PyObject *) self, "computeWeight", args, 2);
          }

          static PyObject *t_PerFieldSimilarityWrapper_get(t_PerFieldSimilarityWrapper *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::search::similarities::Similarity result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.get(a0));
              return ::org::apache::lucene::search::similarities::t_Similarity::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "get", arg);
            return NULL;
          }

          static PyObject *t_PerFieldSimilarityWrapper_simScorer(t_PerFieldSimilarityWrapper *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::Similarity$SimWeight a0((jobject) NULL);
            ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
            ::org::apache::lucene::search::similarities::Similarity$SimScorer result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::search::similarities::Similarity$SimWeight::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.simScorer(a0, a1));
              return ::org::apache::lucene::search::similarities::t_Similarity$SimScorer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(PerFieldSimilarityWrapper), (PyObject *) self, "simScorer", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/IntBlockPool$SliceReader.h"
#include "org/apache/lucene/util/IntBlockPool.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *IntBlockPool$SliceReader::class$ = NULL;
        jmethodID *IntBlockPool$SliceReader::mids$ = NULL;
        bool IntBlockPool$SliceReader::live$ = false;

        jclass IntBlockPool$SliceReader::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/IntBlockPool$SliceReader");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_67e0ad2c] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/IntBlockPool;)V");
            mids$[mid_endOfSlice_54c6a16a] = env->getMethodID(cls, "endOfSlice", "()Z");
            mids$[mid_readInt_54c6a179] = env->getMethodID(cls, "readInt", "()I");
            mids$[mid_reset_d8d154a6] = env->getMethodID(cls, "reset", "(II)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        IntBlockPool$SliceReader::IntBlockPool$SliceReader(const ::org::apache::lucene::util::IntBlockPool & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_67e0ad2c, a0.this$)) {}

        jboolean IntBlockPool$SliceReader::endOfSlice() const
        {
          return env->callBooleanMethod(this$, mids$[mid_endOfSlice_54c6a16a]);
        }

        jint IntBlockPool$SliceReader::readInt() const
        {
          return env->callIntMethod(this$, mids$[mid_readInt_54c6a179]);
        }

        void IntBlockPool$SliceReader::reset(jint a0, jint a1) const
        {
          env->callVoidMethod(this$, mids$[mid_reset_d8d154a6], a0, a1);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_IntBlockPool$SliceReader_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IntBlockPool$SliceReader_instance_(PyTypeObject *type, PyObject *arg);
        static int t_IntBlockPool$SliceReader_init_(t_IntBlockPool$SliceReader *self, PyObject *args, PyObject *kwds);
        static PyObject *t_IntBlockPool$SliceReader_endOfSlice(t_IntBlockPool$SliceReader *self);
        static PyObject *t_IntBlockPool$SliceReader_readInt(t_IntBlockPool$SliceReader *self);
        static PyObject *t_IntBlockPool$SliceReader_reset(t_IntBlockPool$SliceReader *self, PyObject *args);

        static PyMethodDef t_IntBlockPool$SliceReader__methods_[] = {
          DECLARE_METHOD(t_IntBlockPool$SliceReader, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IntBlockPool$SliceReader, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IntBlockPool$SliceReader, endOfSlice, METH_NOARGS),
          DECLARE_METHOD(t_IntBlockPool$SliceReader, readInt, METH_NOARGS),
          DECLARE_METHOD(t_IntBlockPool$SliceReader, reset, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(IntBlockPool$SliceReader, t_IntBlockPool$SliceReader, ::java::lang::Object, IntBlockPool$SliceReader, t_IntBlockPool$SliceReader_init_, 0, 0, 0, 0, 0);

        void t_IntBlockPool$SliceReader::install(PyObject *module)
        {
          installType(&PY_TYPE(IntBlockPool$SliceReader), module, "IntBlockPool$SliceReader", 0);
        }

        void t_IntBlockPool$SliceReader::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(IntBlockPool$SliceReader).tp_dict, "class_", make_descriptor(IntBlockPool$SliceReader::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(IntBlockPool$SliceReader).tp_dict, "wrapfn_", make_descriptor(t_IntBlockPool$SliceReader::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(IntBlockPool$SliceReader).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_IntBlockPool$SliceReader_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IntBlockPool$SliceReader::initializeClass, 1)))
            return NULL;
          return t_IntBlockPool$SliceReader::wrap_Object(IntBlockPool$SliceReader(((t_IntBlockPool$SliceReader *) arg)->object.this$));
        }
        static PyObject *t_IntBlockPool$SliceReader_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IntBlockPool$SliceReader::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_IntBlockPool$SliceReader_init_(t_IntBlockPool$SliceReader *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::util::IntBlockPool a0((jobject) NULL);
          IntBlockPool$SliceReader object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::util::IntBlockPool::initializeClass, &a0))
          {
            INT_CALL(object = IntBlockPool$SliceReader(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_IntBlockPool$SliceReader_endOfSlice(t_IntBlockPool$SliceReader *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.endOfSlice());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_IntBlockPool$SliceReader_readInt(t_IntBlockPool$SliceReader *self)
        {
          jint result;
          OBJ_CALL(result = self->object.readInt());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_IntBlockPool$SliceReader_reset(t_IntBlockPool$SliceReader *self, PyObject *args)
        {
          jint a0;
          jint a1;

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(self->object.reset(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "reset", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/FieldQueryNodeBuilder.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/search/TermQuery.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/StandardQueryBuilder.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {

              ::java::lang::Class *FieldQueryNodeBuilder::class$ = NULL;
              jmethodID *FieldQueryNodeBuilder::mids$ = NULL;
              bool FieldQueryNodeBuilder::live$ = false;

              jclass FieldQueryNodeBuilder::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/builders/FieldQueryNodeBuilder");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_build_0cc6eb13] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/search/TermQuery;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              FieldQueryNodeBuilder::FieldQueryNodeBuilder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              ::org::apache::lucene::search::TermQuery FieldQueryNodeBuilder::build(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                return ::org::apache::lucene::search::TermQuery(env->callObjectMethod(this$, mids$[mid_build_0cc6eb13], a0.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {
              static PyObject *t_FieldQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_FieldQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg);
              static int t_FieldQueryNodeBuilder_init_(t_FieldQueryNodeBuilder *self, PyObject *args, PyObject *kwds);
              static PyObject *t_FieldQueryNodeBuilder_build(t_FieldQueryNodeBuilder *self, PyObject *arg);

              static PyMethodDef t_FieldQueryNodeBuilder__methods_[] = {
                DECLARE_METHOD(t_FieldQueryNodeBuilder, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_FieldQueryNodeBuilder, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_FieldQueryNodeBuilder, build, METH_O),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(FieldQueryNodeBuilder, t_FieldQueryNodeBuilder, ::java::lang::Object, FieldQueryNodeBuilder, t_FieldQueryNodeBuilder_init_, 0, 0, 0, 0, 0);

              void t_FieldQueryNodeBuilder::install(PyObject *module)
              {
                installType(&PY_TYPE(FieldQueryNodeBuilder), module, "FieldQueryNodeBuilder", 0);
              }

              void t_FieldQueryNodeBuilder::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(FieldQueryNodeBuilder).tp_dict, "class_", make_descriptor(FieldQueryNodeBuilder::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(FieldQueryNodeBuilder).tp_dict, "wrapfn_", make_descriptor(t_FieldQueryNodeBuilder::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(FieldQueryNodeBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_FieldQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, FieldQueryNodeBuilder::initializeClass, 1)))
                  return NULL;
                return t_FieldQueryNodeBuilder::wrap_Object(FieldQueryNodeBuilder(((t_FieldQueryNodeBuilder *) arg)->object.this$));
              }
              static PyObject *t_FieldQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, FieldQueryNodeBuilder::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_FieldQueryNodeBuilder_init_(t_FieldQueryNodeBuilder *self, PyObject *args, PyObject *kwds)
              {
                FieldQueryNodeBuilder object((jobject) NULL);

                INT_CALL(object = FieldQueryNodeBuilder());
                self->object = object;

                return 0;
              }

              static PyObject *t_FieldQueryNodeBuilder_build(t_FieldQueryNodeBuilder *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::search::TermQuery result((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.build(a0));
                  return ::org::apache::lucene::search::t_TermQuery::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "build", arg);
                return NULL;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/compressing/CompressingTermVectorsReader.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "org/apache/lucene/store/IOContext.h"
#include "org/apache/lucene/codecs/compressing/CompressionMode.h"
#include "org/apache/lucene/index/Fields.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace compressing {

          ::java::lang::Class *CompressingTermVectorsReader::class$ = NULL;
          jmethodID *CompressingTermVectorsReader::mids$ = NULL;
          bool CompressingTermVectorsReader::live$ = false;

          jclass CompressingTermVectorsReader::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/compressing/CompressingTermVectorsReader");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_846e12dd] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/SegmentInfo;Ljava/lang/String;Lorg/apache/lucene/index/FieldInfos;Lorg/apache/lucene/store/IOContext;Ljava/lang/String;Lorg/apache/lucene/codecs/compressing/CompressionMode;)V");
              mids$[mid_checkIntegrity_54c6a166] = env->getMethodID(cls, "checkIntegrity", "()V");
              mids$[mid_clone_475a2624] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/codecs/TermVectorsReader;");
              mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
              mids$[mid_get_ef1c9c73] = env->getMethodID(cls, "get", "(I)Lorg/apache/lucene/index/Fields;");
              mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CompressingTermVectorsReader::CompressingTermVectorsReader(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::SegmentInfo & a1, const ::java::lang::String & a2, const ::org::apache::lucene::index::FieldInfos & a3, const ::org::apache::lucene::store::IOContext & a4, const ::java::lang::String & a5, const ::org::apache::lucene::codecs::compressing::CompressionMode & a6) : ::org::apache::lucene::codecs::TermVectorsReader(env->newObject(initializeClass, &mids$, mid_init$_846e12dd, a0.this$, a1.this$, a2.this$, a3.this$, a4.this$, a5.this$, a6.this$)) {}

          void CompressingTermVectorsReader::checkIntegrity() const
          {
            env->callVoidMethod(this$, mids$[mid_checkIntegrity_54c6a166]);
          }

          ::org::apache::lucene::codecs::TermVectorsReader CompressingTermVectorsReader::clone() const
          {
            return ::org::apache::lucene::codecs::TermVectorsReader(env->callObjectMethod(this$, mids$[mid_clone_475a2624]));
          }

          void CompressingTermVectorsReader::close() const
          {
            env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
          }

          ::org::apache::lucene::index::Fields CompressingTermVectorsReader::get(jint a0) const
          {
            return ::org::apache::lucene::index::Fields(env->callObjectMethod(this$, mids$[mid_get_ef1c9c73], a0));
          }

          jlong CompressingTermVectorsReader::ramBytesUsed() const
          {
            return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace compressing {
          static PyObject *t_CompressingTermVectorsReader_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CompressingTermVectorsReader_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CompressingTermVectorsReader_init_(t_CompressingTermVectorsReader *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CompressingTermVectorsReader_checkIntegrity(t_CompressingTermVectorsReader *self, PyObject *args);
          static PyObject *t_CompressingTermVectorsReader_clone(t_CompressingTermVectorsReader *self, PyObject *args);
          static PyObject *t_CompressingTermVectorsReader_close(t_CompressingTermVectorsReader *self, PyObject *args);
          static PyObject *t_CompressingTermVectorsReader_get(t_CompressingTermVectorsReader *self, PyObject *args);
          static PyObject *t_CompressingTermVectorsReader_ramBytesUsed(t_CompressingTermVectorsReader *self, PyObject *args);

          static PyMethodDef t_CompressingTermVectorsReader__methods_[] = {
            DECLARE_METHOD(t_CompressingTermVectorsReader, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CompressingTermVectorsReader, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CompressingTermVectorsReader, checkIntegrity, METH_VARARGS),
            DECLARE_METHOD(t_CompressingTermVectorsReader, clone, METH_VARARGS),
            DECLARE_METHOD(t_CompressingTermVectorsReader, close, METH_VARARGS),
            DECLARE_METHOD(t_CompressingTermVectorsReader, get, METH_VARARGS),
            DECLARE_METHOD(t_CompressingTermVectorsReader, ramBytesUsed, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CompressingTermVectorsReader, t_CompressingTermVectorsReader, ::org::apache::lucene::codecs::TermVectorsReader, CompressingTermVectorsReader, t_CompressingTermVectorsReader_init_, 0, 0, 0, 0, 0);

          void t_CompressingTermVectorsReader::install(PyObject *module)
          {
            installType(&PY_TYPE(CompressingTermVectorsReader), module, "CompressingTermVectorsReader", 0);
          }

          void t_CompressingTermVectorsReader::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CompressingTermVectorsReader).tp_dict, "class_", make_descriptor(CompressingTermVectorsReader::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CompressingTermVectorsReader).tp_dict, "wrapfn_", make_descriptor(t_CompressingTermVectorsReader::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CompressingTermVectorsReader).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CompressingTermVectorsReader_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CompressingTermVectorsReader::initializeClass, 1)))
              return NULL;
            return t_CompressingTermVectorsReader::wrap_Object(CompressingTermVectorsReader(((t_CompressingTermVectorsReader *) arg)->object.this$));
          }
          static PyObject *t_CompressingTermVectorsReader_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CompressingTermVectorsReader::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CompressingTermVectorsReader_init_(t_CompressingTermVectorsReader *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::store::Directory a0((jobject) NULL);
            ::org::apache::lucene::index::SegmentInfo a1((jobject) NULL);
            ::java::lang::String a2((jobject) NULL);
            ::org::apache::lucene::index::FieldInfos a3((jobject) NULL);
            ::org::apache::lucene::store::IOContext a4((jobject) NULL);
            ::java::lang::String a5((jobject) NULL);
            ::org::apache::lucene::codecs::compressing::CompressionMode a6((jobject) NULL);
            CompressingTermVectorsReader object((jobject) NULL);

            if (!parseArgs(args, "kkskksk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::SegmentInfo::initializeClass, ::org::apache::lucene::index::FieldInfos::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, ::org::apache::lucene::codecs::compressing::CompressionMode::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5, &a6))
            {
              INT_CALL(object = CompressingTermVectorsReader(a0, a1, a2, a3, a4, a5, a6));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_CompressingTermVectorsReader_checkIntegrity(t_CompressingTermVectorsReader *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.checkIntegrity());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(CompressingTermVectorsReader), (PyObject *) self, "checkIntegrity", args, 2);
          }

          static PyObject *t_CompressingTermVectorsReader_clone(t_CompressingTermVectorsReader *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::TermVectorsReader result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.clone());
              return ::org::apache::lucene::codecs::t_TermVectorsReader::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(CompressingTermVectorsReader), (PyObject *) self, "clone", args, 2);
          }

          static PyObject *t_CompressingTermVectorsReader_close(t_CompressingTermVectorsReader *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.close());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(CompressingTermVectorsReader), (PyObject *) self, "close", args, 2);
          }

          static PyObject *t_CompressingTermVectorsReader_get(t_CompressingTermVectorsReader *self, PyObject *args)
          {
            jint a0;
            ::org::apache::lucene::index::Fields result((jobject) NULL);

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(result = self->object.get(a0));
              return ::org::apache::lucene::index::t_Fields::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(CompressingTermVectorsReader), (PyObject *) self, "get", args, 2);
          }

          static PyObject *t_CompressingTermVectorsReader_ramBytesUsed(t_CompressingTermVectorsReader *self, PyObject *args)
          {
            jlong result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.ramBytesUsed());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(&PY_TYPE(CompressingTermVectorsReader), (PyObject *) self, "ramBytesUsed", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/highlight/SpanGradientFormatter.h"
#include "org/apache/lucene/search/highlight/TokenGroup.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {

          ::java::lang::Class *SpanGradientFormatter::class$ = NULL;
          jmethodID *SpanGradientFormatter::mids$ = NULL;
          bool SpanGradientFormatter::live$ = false;

          jclass SpanGradientFormatter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/highlight/SpanGradientFormatter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_ecfb0f33] = env->getMethodID(cls, "<init>", "(FLjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V");
              mids$[mid_highlightTerm_8838cc58] = env->getMethodID(cls, "highlightTerm", "(Ljava/lang/String;Lorg/apache/lucene/search/highlight/TokenGroup;)Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SpanGradientFormatter::SpanGradientFormatter(jfloat a0, const ::java::lang::String & a1, const ::java::lang::String & a2, const ::java::lang::String & a3, const ::java::lang::String & a4) : ::org::apache::lucene::search::highlight::GradientFormatter(env->newObject(initializeClass, &mids$, mid_init$_ecfb0f33, a0, a1.this$, a2.this$, a3.this$, a4.this$)) {}

          ::java::lang::String SpanGradientFormatter::highlightTerm(const ::java::lang::String & a0, const ::org::apache::lucene::search::highlight::TokenGroup & a1) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_highlightTerm_8838cc58], a0.this$, a1.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {
          static PyObject *t_SpanGradientFormatter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SpanGradientFormatter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SpanGradientFormatter_init_(t_SpanGradientFormatter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SpanGradientFormatter_highlightTerm(t_SpanGradientFormatter *self, PyObject *args);

          static PyMethodDef t_SpanGradientFormatter__methods_[] = {
            DECLARE_METHOD(t_SpanGradientFormatter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanGradientFormatter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanGradientFormatter, highlightTerm, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SpanGradientFormatter, t_SpanGradientFormatter, ::org::apache::lucene::search::highlight::GradientFormatter, SpanGradientFormatter, t_SpanGradientFormatter_init_, 0, 0, 0, 0, 0);

          void t_SpanGradientFormatter::install(PyObject *module)
          {
            installType(&PY_TYPE(SpanGradientFormatter), module, "SpanGradientFormatter", 0);
          }

          void t_SpanGradientFormatter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SpanGradientFormatter).tp_dict, "class_", make_descriptor(SpanGradientFormatter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SpanGradientFormatter).tp_dict, "wrapfn_", make_descriptor(t_SpanGradientFormatter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SpanGradientFormatter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SpanGradientFormatter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SpanGradientFormatter::initializeClass, 1)))
              return NULL;
            return t_SpanGradientFormatter::wrap_Object(SpanGradientFormatter(((t_SpanGradientFormatter *) arg)->object.this$));
          }
          static PyObject *t_SpanGradientFormatter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SpanGradientFormatter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SpanGradientFormatter_init_(t_SpanGradientFormatter *self, PyObject *args, PyObject *kwds)
          {
            jfloat a0;
            ::java::lang::String a1((jobject) NULL);
            ::java::lang::String a2((jobject) NULL);
            ::java::lang::String a3((jobject) NULL);
            ::java::lang::String a4((jobject) NULL);
            SpanGradientFormatter object((jobject) NULL);

            if (!parseArgs(args, "Fssss", &a0, &a1, &a2, &a3, &a4))
            {
              INT_CALL(object = SpanGradientFormatter(a0, a1, a2, a3, a4));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SpanGradientFormatter_highlightTerm(t_SpanGradientFormatter *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::search::highlight::TokenGroup a1((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "sk", ::org::apache::lucene::search::highlight::TokenGroup::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.highlightTerm(a0, a1));
              return j2p(result);
            }

            return callSuper(&PY_TYPE(SpanGradientFormatter), (PyObject *) self, "highlightTerm", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/ASCIIFoldingFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *ASCIIFoldingFilter::class$ = NULL;
          jmethodID *ASCIIFoldingFilter::mids$ = NULL;
          bool ASCIIFoldingFilter::live$ = false;

          jclass ASCIIFoldingFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/ASCIIFoldingFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_init$_a19d9eb9] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;Z)V");
              mids$[mid_foldToASCII_ec6430f4] = env->getMethodID(cls, "foldToASCII", "([CI)V");
              mids$[mid_foldToASCII_8c28d06f] = env->getStaticMethodID(cls, "foldToASCII", "([CI[CII)I");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_isPreserveOriginal_54c6a16a] = env->getMethodID(cls, "isPreserveOriginal", "()Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ASCIIFoldingFilter::ASCIIFoldingFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          ASCIIFoldingFilter::ASCIIFoldingFilter(const ::org::apache::lucene::analysis::TokenStream & a0, jboolean a1) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_a19d9eb9, a0.this$, a1)) {}

          void ASCIIFoldingFilter::foldToASCII(const JArray< jchar > & a0, jint a1) const
          {
            env->callVoidMethod(this$, mids$[mid_foldToASCII_ec6430f4], a0.this$, a1);
          }

          jint ASCIIFoldingFilter::foldToASCII(const JArray< jchar > & a0, jint a1, const JArray< jchar > & a2, jint a3, jint a4)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticIntMethod(cls, mids$[mid_foldToASCII_8c28d06f], a0.this$, a1, a2.this$, a3, a4);
          }

          jboolean ASCIIFoldingFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          jboolean ASCIIFoldingFilter::isPreserveOriginal() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isPreserveOriginal_54c6a16a]);
          }

          void ASCIIFoldingFilter::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_ASCIIFoldingFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ASCIIFoldingFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ASCIIFoldingFilter_init_(t_ASCIIFoldingFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ASCIIFoldingFilter_foldToASCII(t_ASCIIFoldingFilter *self, PyObject *args);
          static PyObject *t_ASCIIFoldingFilter_foldToASCII_(PyTypeObject *type, PyObject *args);
          static PyObject *t_ASCIIFoldingFilter_incrementToken(t_ASCIIFoldingFilter *self, PyObject *args);
          static PyObject *t_ASCIIFoldingFilter_isPreserveOriginal(t_ASCIIFoldingFilter *self);
          static PyObject *t_ASCIIFoldingFilter_reset(t_ASCIIFoldingFilter *self, PyObject *args);
          static PyObject *t_ASCIIFoldingFilter_get__preserveOriginal(t_ASCIIFoldingFilter *self, void *data);
          static PyGetSetDef t_ASCIIFoldingFilter__fields_[] = {
            DECLARE_GET_FIELD(t_ASCIIFoldingFilter, preserveOriginal),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_ASCIIFoldingFilter__methods_[] = {
            DECLARE_METHOD(t_ASCIIFoldingFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ASCIIFoldingFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ASCIIFoldingFilter, foldToASCII, METH_VARARGS),
            DECLARE_METHOD(t_ASCIIFoldingFilter, foldToASCII_, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_ASCIIFoldingFilter, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_ASCIIFoldingFilter, isPreserveOriginal, METH_NOARGS),
            DECLARE_METHOD(t_ASCIIFoldingFilter, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ASCIIFoldingFilter, t_ASCIIFoldingFilter, ::org::apache::lucene::analysis::TokenFilter, ASCIIFoldingFilter, t_ASCIIFoldingFilter_init_, 0, 0, t_ASCIIFoldingFilter__fields_, 0, 0);

          void t_ASCIIFoldingFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(ASCIIFoldingFilter), module, "ASCIIFoldingFilter", 0);
          }

          void t_ASCIIFoldingFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ASCIIFoldingFilter).tp_dict, "class_", make_descriptor(ASCIIFoldingFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ASCIIFoldingFilter).tp_dict, "wrapfn_", make_descriptor(t_ASCIIFoldingFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ASCIIFoldingFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ASCIIFoldingFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ASCIIFoldingFilter::initializeClass, 1)))
              return NULL;
            return t_ASCIIFoldingFilter::wrap_Object(ASCIIFoldingFilter(((t_ASCIIFoldingFilter *) arg)->object.this$));
          }
          static PyObject *t_ASCIIFoldingFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ASCIIFoldingFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ASCIIFoldingFilter_init_(t_ASCIIFoldingFilter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                ASCIIFoldingFilter object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
                {
                  INT_CALL(object = ASCIIFoldingFilter(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                jboolean a1;
                ASCIIFoldingFilter object((jobject) NULL);

                if (!parseArgs(args, "kZ", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = ASCIIFoldingFilter(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ASCIIFoldingFilter_foldToASCII(t_ASCIIFoldingFilter *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(self->object.foldToASCII(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "foldToASCII", args);
            return NULL;
          }

          static PyObject *t_ASCIIFoldingFilter_foldToASCII_(PyTypeObject *type, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            JArray< jchar > a2((jobject) NULL);
            jint a3;
            jint a4;
            jint result;

            if (!parseArgs(args, "[CI[CII", &a0, &a1, &a2, &a3, &a4))
            {
              OBJ_CALL(result = ::org::apache::lucene::analysis::miscellaneous::ASCIIFoldingFilter::foldToASCII(a0, a1, a2, a3, a4));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError(type, "foldToASCII_", args);
            return NULL;
          }

          static PyObject *t_ASCIIFoldingFilter_incrementToken(t_ASCIIFoldingFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(ASCIIFoldingFilter), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_ASCIIFoldingFilter_isPreserveOriginal(t_ASCIIFoldingFilter *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isPreserveOriginal());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_ASCIIFoldingFilter_reset(t_ASCIIFoldingFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(ASCIIFoldingFilter), (PyObject *) self, "reset", args, 2);
          }

          static PyObject *t_ASCIIFoldingFilter_get__preserveOriginal(t_ASCIIFoldingFilter *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isPreserveOriginal());
            Py_RETURN_BOOL(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/sandbox/queries/regex/RegexQuery.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/sandbox/queries/regex/RegexCapabilities.h"
#include "org/apache/lucene/index/Term.h"
#include "java/lang/String.h"
#include "org/apache/lucene/sandbox/queries/regex/RegexQueryCapable.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace sandbox {
        namespace queries {
          namespace regex {

            ::java::lang::Class *RegexQuery::class$ = NULL;
            jmethodID *RegexQuery::mids$ = NULL;
            bool RegexQuery::live$ = false;

            jclass RegexQuery::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/sandbox/queries/regex/RegexQuery");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_7eca6a81] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/Term;)V");
                mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_getRegexImplementation_814365f4] = env->getMethodID(cls, "getRegexImplementation", "()Lorg/apache/lucene/sandbox/queries/regex/RegexCapabilities;");
                mids$[mid_getTerm_0f71f314] = env->getMethodID(cls, "getTerm", "()Lorg/apache/lucene/index/Term;");
                mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
                mids$[mid_setRegexImplementation_06bf498d] = env->getMethodID(cls, "setRegexImplementation", "(Lorg/apache/lucene/sandbox/queries/regex/RegexCapabilities;)V");
                mids$[mid_toString_97a5258f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");
                mids$[mid_getTermsEnum_0bc2a5ab] = env->getMethodID(cls, "getTermsEnum", "(Lorg/apache/lucene/index/Terms;Lorg/apache/lucene/util/AttributeSource;)Lorg/apache/lucene/index/FilteredTermsEnum;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            RegexQuery::RegexQuery(const ::org::apache::lucene::index::Term & a0) : ::org::apache::lucene::search::MultiTermQuery(env->newObject(initializeClass, &mids$, mid_init$_7eca6a81, a0.this$)) {}

            jboolean RegexQuery::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
            }

            ::org::apache::lucene::sandbox::queries::regex::RegexCapabilities RegexQuery::getRegexImplementation() const
            {
              return ::org::apache::lucene::sandbox::queries::regex::RegexCapabilities(env->callObjectMethod(this$, mids$[mid_getRegexImplementation_814365f4]));
            }

            ::org::apache::lucene::index::Term RegexQuery::getTerm() const
            {
              return ::org::apache::lucene::index::Term(env->callObjectMethod(this$, mids$[mid_getTerm_0f71f314]));
            }

            jint RegexQuery::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
            }

            void RegexQuery::setRegexImplementation(const ::org::apache::lucene::sandbox::queries::regex::RegexCapabilities & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setRegexImplementation_06bf498d], a0.this$);
            }

            ::java::lang::String RegexQuery::toString(const ::java::lang::String & a0) const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_97a5258f], a0.this$));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace sandbox {
        namespace queries {
          namespace regex {
            static PyObject *t_RegexQuery_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_RegexQuery_instance_(PyTypeObject *type, PyObject *arg);
            static int t_RegexQuery_init_(t_RegexQuery *self, PyObject *args, PyObject *kwds);
            static PyObject *t_RegexQuery_equals(t_RegexQuery *self, PyObject *args);
            static PyObject *t_RegexQuery_getRegexImplementation(t_RegexQuery *self);
            static PyObject *t_RegexQuery_getTerm(t_RegexQuery *self);
            static PyObject *t_RegexQuery_hashCode(t_RegexQuery *self, PyObject *args);
            static PyObject *t_RegexQuery_setRegexImplementation(t_RegexQuery *self, PyObject *arg);
            static PyObject *t_RegexQuery_toString(t_RegexQuery *self, PyObject *args);
            static PyObject *t_RegexQuery_get__regexImplementation(t_RegexQuery *self, void *data);
            static int t_RegexQuery_set__regexImplementation(t_RegexQuery *self, PyObject *arg, void *data);
            static PyObject *t_RegexQuery_get__term(t_RegexQuery *self, void *data);
            static PyGetSetDef t_RegexQuery__fields_[] = {
              DECLARE_GETSET_FIELD(t_RegexQuery, regexImplementation),
              DECLARE_GET_FIELD(t_RegexQuery, term),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_RegexQuery__methods_[] = {
              DECLARE_METHOD(t_RegexQuery, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_RegexQuery, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_RegexQuery, equals, METH_VARARGS),
              DECLARE_METHOD(t_RegexQuery, getRegexImplementation, METH_NOARGS),
              DECLARE_METHOD(t_RegexQuery, getTerm, METH_NOARGS),
              DECLARE_METHOD(t_RegexQuery, hashCode, METH_VARARGS),
              DECLARE_METHOD(t_RegexQuery, setRegexImplementation, METH_O),
              DECLARE_METHOD(t_RegexQuery, toString, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(RegexQuery, t_RegexQuery, ::org::apache::lucene::search::MultiTermQuery, RegexQuery, t_RegexQuery_init_, 0, 0, t_RegexQuery__fields_, 0, 0);

            void t_RegexQuery::install(PyObject *module)
            {
              installType(&PY_TYPE(RegexQuery), module, "RegexQuery", 0);
            }

            void t_RegexQuery::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(RegexQuery).tp_dict, "class_", make_descriptor(RegexQuery::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(RegexQuery).tp_dict, "wrapfn_", make_descriptor(t_RegexQuery::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(RegexQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_RegexQuery_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, RegexQuery::initializeClass, 1)))
                return NULL;
              return t_RegexQuery::wrap_Object(RegexQuery(((t_RegexQuery *) arg)->object.this$));
            }
            static PyObject *t_RegexQuery_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, RegexQuery::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_RegexQuery_init_(t_RegexQuery *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::index::Term a0((jobject) NULL);
              RegexQuery object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::index::Term::initializeClass, &a0))
              {
                INT_CALL(object = RegexQuery(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_RegexQuery_equals(t_RegexQuery *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(RegexQuery), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_RegexQuery_getRegexImplementation(t_RegexQuery *self)
            {
              ::org::apache::lucene::sandbox::queries::regex::RegexCapabilities result((jobject) NULL);
              OBJ_CALL(result = self->object.getRegexImplementation());
              return ::org::apache::lucene::sandbox::queries::regex::t_RegexCapabilities::wrap_Object(result);
            }

            static PyObject *t_RegexQuery_getTerm(t_RegexQuery *self)
            {
              ::org::apache::lucene::index::Term result((jobject) NULL);
              OBJ_CALL(result = self->object.getTerm());
              return ::org::apache::lucene::index::t_Term::wrap_Object(result);
            }

            static PyObject *t_RegexQuery_hashCode(t_RegexQuery *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(RegexQuery), (PyObject *) self, "hashCode", args, 2);
            }

            static PyObject *t_RegexQuery_setRegexImplementation(t_RegexQuery *self, PyObject *arg)
            {
              ::org::apache::lucene::sandbox::queries::regex::RegexCapabilities a0((jobject) NULL);

              if (!parseArg(arg, "k", ::org::apache::lucene::sandbox::queries::regex::RegexCapabilities::initializeClass, &a0))
              {
                OBJ_CALL(self->object.setRegexImplementation(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setRegexImplementation", arg);
              return NULL;
            }

            static PyObject *t_RegexQuery_toString(t_RegexQuery *self, PyObject *args)
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "s", &a0))
              {
                OBJ_CALL(result = self->object.toString(a0));
                return j2p(result);
              }

              return callSuper(&PY_TYPE(RegexQuery), (PyObject *) self, "toString", args, 2);
            }

            static PyObject *t_RegexQuery_get__regexImplementation(t_RegexQuery *self, void *data)
            {
              ::org::apache::lucene::sandbox::queries::regex::RegexCapabilities value((jobject) NULL);
              OBJ_CALL(value = self->object.getRegexImplementation());
              return ::org::apache::lucene::sandbox::queries::regex::t_RegexCapabilities::wrap_Object(value);
            }
            static int t_RegexQuery_set__regexImplementation(t_RegexQuery *self, PyObject *arg, void *data)
            {
              {
                ::org::apache::lucene::sandbox::queries::regex::RegexCapabilities value((jobject) NULL);
                if (!parseArg(arg, "k", ::org::apache::lucene::sandbox::queries::regex::RegexCapabilities::initializeClass, &value))
                {
                  INT_CALL(self->object.setRegexImplementation(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "regexImplementation", arg);
              return -1;
            }

            static PyObject *t_RegexQuery_get__term(t_RegexQuery *self, void *data)
            {
              ::org::apache::lucene::index::Term value((jobject) NULL);
              OBJ_CALL(value = self->object.getTerm());
              return ::org::apache::lucene::index::t_Term::wrap_Object(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ckb/SoraniNormalizationFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ckb {

          ::java::lang::Class *SoraniNormalizationFilter::class$ = NULL;
          jmethodID *SoraniNormalizationFilter::mids$ = NULL;
          bool SoraniNormalizationFilter::live$ = false;

          jclass SoraniNormalizationFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ckb/SoraniNormalizationFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SoraniNormalizationFilter::SoraniNormalizationFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean SoraniNormalizationFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ckb {
          static PyObject *t_SoraniNormalizationFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SoraniNormalizationFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SoraniNormalizationFilter_init_(t_SoraniNormalizationFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SoraniNormalizationFilter_incrementToken(t_SoraniNormalizationFilter *self, PyObject *args);

          static PyMethodDef t_SoraniNormalizationFilter__methods_[] = {
            DECLARE_METHOD(t_SoraniNormalizationFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SoraniNormalizationFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SoraniNormalizationFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SoraniNormalizationFilter, t_SoraniNormalizationFilter, ::org::apache::lucene::analysis::TokenFilter, SoraniNormalizationFilter, t_SoraniNormalizationFilter_init_, 0, 0, 0, 0, 0);

          void t_SoraniNormalizationFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(SoraniNormalizationFilter), module, "SoraniNormalizationFilter", 0);
          }

          void t_SoraniNormalizationFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SoraniNormalizationFilter).tp_dict, "class_", make_descriptor(SoraniNormalizationFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SoraniNormalizationFilter).tp_dict, "wrapfn_", make_descriptor(t_SoraniNormalizationFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SoraniNormalizationFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SoraniNormalizationFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SoraniNormalizationFilter::initializeClass, 1)))
              return NULL;
            return t_SoraniNormalizationFilter::wrap_Object(SoraniNormalizationFilter(((t_SoraniNormalizationFilter *) arg)->object.this$));
          }
          static PyObject *t_SoraniNormalizationFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SoraniNormalizationFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SoraniNormalizationFilter_init_(t_SoraniNormalizationFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            SoraniNormalizationFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = SoraniNormalizationFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SoraniNormalizationFilter_incrementToken(t_SoraniNormalizationFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(SoraniNormalizationFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/TermVectorsWriter.h"
#include "java/io/Closeable.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/MergeState.h"
#include "org/apache/lucene/index/FieldInfo.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/util/Comparator.h"
#include "org/apache/lucene/store/DataInput.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {

        ::java::lang::Class *TermVectorsWriter::class$ = NULL;
        jmethodID *TermVectorsWriter::mids$ = NULL;
        bool TermVectorsWriter::live$ = false;

        jclass TermVectorsWriter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/TermVectorsWriter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_abort_54c6a166] = env->getMethodID(cls, "abort", "()V");
            mids$[mid_addPosition_ffd34a92] = env->getMethodID(cls, "addPosition", "(IIILorg/apache/lucene/util/BytesRef;)V");
            mids$[mid_addProx_395d0aa2] = env->getMethodID(cls, "addProx", "(ILorg/apache/lucene/store/DataInput;Lorg/apache/lucene/store/DataInput;)V");
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_finish_48f050c2] = env->getMethodID(cls, "finish", "(Lorg/apache/lucene/index/FieldInfos;I)V");
            mids$[mid_finishDocument_54c6a166] = env->getMethodID(cls, "finishDocument", "()V");
            mids$[mid_finishField_54c6a166] = env->getMethodID(cls, "finishField", "()V");
            mids$[mid_finishTerm_54c6a166] = env->getMethodID(cls, "finishTerm", "()V");
            mids$[mid_getComparator_5a7ff2fc] = env->getMethodID(cls, "getComparator", "()Ljava/util/Comparator;");
            mids$[mid_merge_fd0cfdeb] = env->getMethodID(cls, "merge", "(Lorg/apache/lucene/index/MergeState;)I");
            mids$[mid_startDocument_39c7bd3c] = env->getMethodID(cls, "startDocument", "(I)V");
            mids$[mid_startField_07c4def5] = env->getMethodID(cls, "startField", "(Lorg/apache/lucene/index/FieldInfo;IZZZ)V");
            mids$[mid_startTerm_738fc2ce] = env->getMethodID(cls, "startTerm", "(Lorg/apache/lucene/util/BytesRef;I)V");
            mids$[mid_addAllDocVectors_7f6315b6] = env->getMethodID(cls, "addAllDocVectors", "(Lorg/apache/lucene/index/Fields;Lorg/apache/lucene/index/MergeState;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void TermVectorsWriter::abort() const
        {
          env->callVoidMethod(this$, mids$[mid_abort_54c6a166]);
        }

        void TermVectorsWriter::addPosition(jint a0, jint a1, jint a2, const ::org::apache::lucene::util::BytesRef & a3) const
        {
          env->callVoidMethod(this$, mids$[mid_addPosition_ffd34a92], a0, a1, a2, a3.this$);
        }

        void TermVectorsWriter::addProx(jint a0, const ::org::apache::lucene::store::DataInput & a1, const ::org::apache::lucene::store::DataInput & a2) const
        {
          env->callVoidMethod(this$, mids$[mid_addProx_395d0aa2], a0, a1.this$, a2.this$);
        }

        void TermVectorsWriter::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        void TermVectorsWriter::finish(const ::org::apache::lucene::index::FieldInfos & a0, jint a1) const
        {
          env->callVoidMethod(this$, mids$[mid_finish_48f050c2], a0.this$, a1);
        }

        void TermVectorsWriter::finishDocument() const
        {
          env->callVoidMethod(this$, mids$[mid_finishDocument_54c6a166]);
        }

        void TermVectorsWriter::finishField() const
        {
          env->callVoidMethod(this$, mids$[mid_finishField_54c6a166]);
        }

        void TermVectorsWriter::finishTerm() const
        {
          env->callVoidMethod(this$, mids$[mid_finishTerm_54c6a166]);
        }

        ::java::util::Comparator TermVectorsWriter::getComparator() const
        {
          return ::java::util::Comparator(env->callObjectMethod(this$, mids$[mid_getComparator_5a7ff2fc]));
        }

        jint TermVectorsWriter::merge(const ::org::apache::lucene::index::MergeState & a0) const
        {
          return env->callIntMethod(this$, mids$[mid_merge_fd0cfdeb], a0.this$);
        }

        void TermVectorsWriter::startDocument(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_startDocument_39c7bd3c], a0);
        }

        void TermVectorsWriter::startField(const ::org::apache::lucene::index::FieldInfo & a0, jint a1, jboolean a2, jboolean a3, jboolean a4) const
        {
          env->callVoidMethod(this$, mids$[mid_startField_07c4def5], a0.this$, a1, a2, a3, a4);
        }

        void TermVectorsWriter::startTerm(const ::org::apache::lucene::util::BytesRef & a0, jint a1) const
        {
          env->callVoidMethod(this$, mids$[mid_startTerm_738fc2ce], a0.this$, a1);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        static PyObject *t_TermVectorsWriter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TermVectorsWriter_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TermVectorsWriter_abort(t_TermVectorsWriter *self);
        static PyObject *t_TermVectorsWriter_addPosition(t_TermVectorsWriter *self, PyObject *args);
        static PyObject *t_TermVectorsWriter_addProx(t_TermVectorsWriter *self, PyObject *args);
        static PyObject *t_TermVectorsWriter_close(t_TermVectorsWriter *self);
        static PyObject *t_TermVectorsWriter_finish(t_TermVectorsWriter *self, PyObject *args);
        static PyObject *t_TermVectorsWriter_finishDocument(t_TermVectorsWriter *self);
        static PyObject *t_TermVectorsWriter_finishField(t_TermVectorsWriter *self);
        static PyObject *t_TermVectorsWriter_finishTerm(t_TermVectorsWriter *self);
        static PyObject *t_TermVectorsWriter_getComparator(t_TermVectorsWriter *self);
        static PyObject *t_TermVectorsWriter_merge(t_TermVectorsWriter *self, PyObject *arg);
        static PyObject *t_TermVectorsWriter_startDocument(t_TermVectorsWriter *self, PyObject *arg);
        static PyObject *t_TermVectorsWriter_startField(t_TermVectorsWriter *self, PyObject *args);
        static PyObject *t_TermVectorsWriter_startTerm(t_TermVectorsWriter *self, PyObject *args);
        static PyObject *t_TermVectorsWriter_get__comparator(t_TermVectorsWriter *self, void *data);
        static PyGetSetDef t_TermVectorsWriter__fields_[] = {
          DECLARE_GET_FIELD(t_TermVectorsWriter, comparator),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_TermVectorsWriter__methods_[] = {
          DECLARE_METHOD(t_TermVectorsWriter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TermVectorsWriter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TermVectorsWriter, abort, METH_NOARGS),
          DECLARE_METHOD(t_TermVectorsWriter, addPosition, METH_VARARGS),
          DECLARE_METHOD(t_TermVectorsWriter, addProx, METH_VARARGS),
          DECLARE_METHOD(t_TermVectorsWriter, close, METH_NOARGS),
          DECLARE_METHOD(t_TermVectorsWriter, finish, METH_VARARGS),
          DECLARE_METHOD(t_TermVectorsWriter, finishDocument, METH_NOARGS),
          DECLARE_METHOD(t_TermVectorsWriter, finishField, METH_NOARGS),
          DECLARE_METHOD(t_TermVectorsWriter, finishTerm, METH_NOARGS),
          DECLARE_METHOD(t_TermVectorsWriter, getComparator, METH_NOARGS),
          DECLARE_METHOD(t_TermVectorsWriter, merge, METH_O),
          DECLARE_METHOD(t_TermVectorsWriter, startDocument, METH_O),
          DECLARE_METHOD(t_TermVectorsWriter, startField, METH_VARARGS),
          DECLARE_METHOD(t_TermVectorsWriter, startTerm, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TermVectorsWriter, t_TermVectorsWriter, ::java::lang::Object, TermVectorsWriter, abstract_init, 0, 0, t_TermVectorsWriter__fields_, 0, 0);

        void t_TermVectorsWriter::install(PyObject *module)
        {
          installType(&PY_TYPE(TermVectorsWriter), module, "TermVectorsWriter", 0);
        }

        void t_TermVectorsWriter::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TermVectorsWriter).tp_dict, "class_", make_descriptor(TermVectorsWriter::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TermVectorsWriter).tp_dict, "wrapfn_", make_descriptor(t_TermVectorsWriter::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TermVectorsWriter).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TermVectorsWriter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TermVectorsWriter::initializeClass, 1)))
            return NULL;
          return t_TermVectorsWriter::wrap_Object(TermVectorsWriter(((t_TermVectorsWriter *) arg)->object.this$));
        }
        static PyObject *t_TermVectorsWriter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TermVectorsWriter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_TermVectorsWriter_abort(t_TermVectorsWriter *self)
        {
          OBJ_CALL(self->object.abort());
          Py_RETURN_NONE;
        }

        static PyObject *t_TermVectorsWriter_addPosition(t_TermVectorsWriter *self, PyObject *args)
        {
          jint a0;
          jint a1;
          jint a2;
          ::org::apache::lucene::util::BytesRef a3((jobject) NULL);

          if (!parseArgs(args, "IIIk", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(self->object.addPosition(a0, a1, a2, a3));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "addPosition", args);
          return NULL;
        }

        static PyObject *t_TermVectorsWriter_addProx(t_TermVectorsWriter *self, PyObject *args)
        {
          jint a0;
          ::org::apache::lucene::store::DataInput a1((jobject) NULL);
          ::org::apache::lucene::store::DataInput a2((jobject) NULL);

          if (!parseArgs(args, "Ikk", ::org::apache::lucene::store::DataInput::initializeClass, ::org::apache::lucene::store::DataInput::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.addProx(a0, a1, a2));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "addProx", args);
          return NULL;
        }

        static PyObject *t_TermVectorsWriter_close(t_TermVectorsWriter *self)
        {
          OBJ_CALL(self->object.close());
          Py_RETURN_NONE;
        }

        static PyObject *t_TermVectorsWriter_finish(t_TermVectorsWriter *self, PyObject *args)
        {
          ::org::apache::lucene::index::FieldInfos a0((jobject) NULL);
          jint a1;

          if (!parseArgs(args, "kI", ::org::apache::lucene::index::FieldInfos::initializeClass, &a0, &a1))
          {
            OBJ_CALL(self->object.finish(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "finish", args);
          return NULL;
        }

        static PyObject *t_TermVectorsWriter_finishDocument(t_TermVectorsWriter *self)
        {
          OBJ_CALL(self->object.finishDocument());
          Py_RETURN_NONE;
        }

        static PyObject *t_TermVectorsWriter_finishField(t_TermVectorsWriter *self)
        {
          OBJ_CALL(self->object.finishField());
          Py_RETURN_NONE;
        }

        static PyObject *t_TermVectorsWriter_finishTerm(t_TermVectorsWriter *self)
        {
          OBJ_CALL(self->object.finishTerm());
          Py_RETURN_NONE;
        }

        static PyObject *t_TermVectorsWriter_getComparator(t_TermVectorsWriter *self)
        {
          ::java::util::Comparator result((jobject) NULL);
          OBJ_CALL(result = self->object.getComparator());
          return ::java::util::t_Comparator::wrap_Object(result, &::org::apache::lucene::util::PY_TYPE(BytesRef));
        }

        static PyObject *t_TermVectorsWriter_merge(t_TermVectorsWriter *self, PyObject *arg)
        {
          ::org::apache::lucene::index::MergeState a0((jobject) NULL);
          jint result;

          if (!parseArg(arg, "k", ::org::apache::lucene::index::MergeState::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.merge(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "merge", arg);
          return NULL;
        }

        static PyObject *t_TermVectorsWriter_startDocument(t_TermVectorsWriter *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.startDocument(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "startDocument", arg);
          return NULL;
        }

        static PyObject *t_TermVectorsWriter_startField(t_TermVectorsWriter *self, PyObject *args)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          jint a1;
          jboolean a2;
          jboolean a3;
          jboolean a4;

          if (!parseArgs(args, "kIZZZ", ::org::apache::lucene::index::FieldInfo::initializeClass, &a0, &a1, &a2, &a3, &a4))
          {
            OBJ_CALL(self->object.startField(a0, a1, a2, a3, a4));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "startField", args);
          return NULL;
        }

        static PyObject *t_TermVectorsWriter_startTerm(t_TermVectorsWriter *self, PyObject *args)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          jint a1;

          if (!parseArgs(args, "kI", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
          {
            OBJ_CALL(self->object.startTerm(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "startTerm", args);
          return NULL;
        }

        static PyObject *t_TermVectorsWriter_get__comparator(t_TermVectorsWriter *self, void *data)
        {
          ::java::util::Comparator value((jobject) NULL);
          OBJ_CALL(value = self->object.getComparator());
          return ::java::util::t_Comparator::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/no/NorwegianLightStemFilterFactory.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace no {

          ::java::lang::Class *NorwegianLightStemFilterFactory::class$ = NULL;
          jmethodID *NorwegianLightStemFilterFactory::mids$ = NULL;
          bool NorwegianLightStemFilterFactory::live$ = false;

          jclass NorwegianLightStemFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/no/NorwegianLightStemFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          NorwegianLightStemFilterFactory::NorwegianLightStemFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream NorwegianLightStemFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace no {
          static PyObject *t_NorwegianLightStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_NorwegianLightStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_NorwegianLightStemFilterFactory_init_(t_NorwegianLightStemFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_NorwegianLightStemFilterFactory_create(t_NorwegianLightStemFilterFactory *self, PyObject *args);

          static PyMethodDef t_NorwegianLightStemFilterFactory__methods_[] = {
            DECLARE_METHOD(t_NorwegianLightStemFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NorwegianLightStemFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NorwegianLightStemFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(NorwegianLightStemFilterFactory, t_NorwegianLightStemFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, NorwegianLightStemFilterFactory, t_NorwegianLightStemFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_NorwegianLightStemFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(NorwegianLightStemFilterFactory), module, "NorwegianLightStemFilterFactory", 0);
          }

          void t_NorwegianLightStemFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(NorwegianLightStemFilterFactory).tp_dict, "class_", make_descriptor(NorwegianLightStemFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(NorwegianLightStemFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_NorwegianLightStemFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(NorwegianLightStemFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_NorwegianLightStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, NorwegianLightStemFilterFactory::initializeClass, 1)))
              return NULL;
            return t_NorwegianLightStemFilterFactory::wrap_Object(NorwegianLightStemFilterFactory(((t_NorwegianLightStemFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_NorwegianLightStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, NorwegianLightStemFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_NorwegianLightStemFilterFactory_init_(t_NorwegianLightStemFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            NorwegianLightStemFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = NorwegianLightStemFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_NorwegianLightStemFilterFactory_create(t_NorwegianLightStemFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(NorwegianLightStemFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/tokenattributes/CharTermAttribute.h"
#include "java/lang/Appendable.h"
#include "java/lang/Class.h"
#include "java/lang/CharSequence.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {

          ::java::lang::Class *CharTermAttribute::class$ = NULL;
          jmethodID *CharTermAttribute::mids$ = NULL;
          bool CharTermAttribute::live$ = false;

          jclass CharTermAttribute::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/tokenattributes/CharTermAttribute");

              mids$ = new jmethodID[max_mid];
              mids$[mid_append_8fff6b0d] = env->getMethodID(cls, "append", "(Ljava/lang/StringBuilder;)Lorg/apache/lucene/analysis/tokenattributes/CharTermAttribute;");
              mids$[mid_append_ec8fc27b] = env->getMethodID(cls, "append", "(C)Lorg/apache/lucene/analysis/tokenattributes/CharTermAttribute;");
              mids$[mid_append_950755e3] = env->getMethodID(cls, "append", "(Ljava/lang/CharSequence;)Lorg/apache/lucene/analysis/tokenattributes/CharTermAttribute;");
              mids$[mid_append_727d3f8d] = env->getMethodID(cls, "append", "(Ljava/lang/String;)Lorg/apache/lucene/analysis/tokenattributes/CharTermAttribute;");
              mids$[mid_append_2b3c6943] = env->getMethodID(cls, "append", "(Lorg/apache/lucene/analysis/tokenattributes/CharTermAttribute;)Lorg/apache/lucene/analysis/tokenattributes/CharTermAttribute;");
              mids$[mid_append_6505d5ab] = env->getMethodID(cls, "append", "(Ljava/lang/CharSequence;II)Lorg/apache/lucene/analysis/tokenattributes/CharTermAttribute;");
              mids$[mid_buffer_dab10e7f] = env->getMethodID(cls, "buffer", "()[C");
              mids$[mid_copyBuffer_6f0bb356] = env->getMethodID(cls, "copyBuffer", "([CII)V");
              mids$[mid_resizeBuffer_b4292e99] = env->getMethodID(cls, "resizeBuffer", "(I)[C");
              mids$[mid_setEmpty_211a9257] = env->getMethodID(cls, "setEmpty", "()Lorg/apache/lucene/analysis/tokenattributes/CharTermAttribute;");
              mids$[mid_setLength_da4913e5] = env->getMethodID(cls, "setLength", "(I)Lorg/apache/lucene/analysis/tokenattributes/CharTermAttribute;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CharTermAttribute CharTermAttribute::append(const ::java::lang::StringBuilder & a0) const
          {
            return CharTermAttribute(env->callObjectMethod(this$, mids$[mid_append_8fff6b0d], a0.this$));
          }

          CharTermAttribute CharTermAttribute::append(jchar a0) const
          {
            return CharTermAttribute(env->callObjectMethod(this$, mids$[mid_append_ec8fc27b], a0));
          }

          CharTermAttribute CharTermAttribute::append(const ::java::lang::CharSequence & a0) const
          {
            return CharTermAttribute(env->callObjectMethod(this$, mids$[mid_append_950755e3], a0.this$));
          }

          CharTermAttribute CharTermAttribute::append(const ::java::lang::String & a0) const
          {
            return CharTermAttribute(env->callObjectMethod(this$, mids$[mid_append_727d3f8d], a0.this$));
          }

          CharTermAttribute CharTermAttribute::append(const CharTermAttribute & a0) const
          {
            return CharTermAttribute(env->callObjectMethod(this$, mids$[mid_append_2b3c6943], a0.this$));
          }

          CharTermAttribute CharTermAttribute::append(const ::java::lang::CharSequence & a0, jint a1, jint a2) const
          {
            return CharTermAttribute(env->callObjectMethod(this$, mids$[mid_append_6505d5ab], a0.this$, a1, a2));
          }

          JArray< jchar > CharTermAttribute::buffer() const
          {
            return JArray< jchar >(env->callObjectMethod(this$, mids$[mid_buffer_dab10e7f]));
          }

          void CharTermAttribute::copyBuffer(const JArray< jchar > & a0, jint a1, jint a2) const
          {
            env->callVoidMethod(this$, mids$[mid_copyBuffer_6f0bb356], a0.this$, a1, a2);
          }

          JArray< jchar > CharTermAttribute::resizeBuffer(jint a0) const
          {
            return JArray< jchar >(env->callObjectMethod(this$, mids$[mid_resizeBuffer_b4292e99], a0));
          }

          CharTermAttribute CharTermAttribute::setEmpty() const
          {
            return CharTermAttribute(env->callObjectMethod(this$, mids$[mid_setEmpty_211a9257]));
          }

          CharTermAttribute CharTermAttribute::setLength(jint a0) const
          {
            return CharTermAttribute(env->callObjectMethod(this$, mids$[mid_setLength_da4913e5], a0));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {
          static PyObject *t_CharTermAttribute_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CharTermAttribute_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CharTermAttribute_append(t_CharTermAttribute *self, PyObject *args);
          static PyObject *t_CharTermAttribute_buffer(t_CharTermAttribute *self);
          static PyObject *t_CharTermAttribute_copyBuffer(t_CharTermAttribute *self, PyObject *args);
          static PyObject *t_CharTermAttribute_resizeBuffer(t_CharTermAttribute *self, PyObject *arg);
          static PyObject *t_CharTermAttribute_setEmpty(t_CharTermAttribute *self);
          static PyObject *t_CharTermAttribute_setLength(t_CharTermAttribute *self, PyObject *arg);
          static int t_CharTermAttribute_set__length(t_CharTermAttribute *self, PyObject *arg, void *data);
          static PyGetSetDef t_CharTermAttribute__fields_[] = {
            DECLARE_SET_FIELD(t_CharTermAttribute, length),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_CharTermAttribute__methods_[] = {
            DECLARE_METHOD(t_CharTermAttribute, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CharTermAttribute, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CharTermAttribute, append, METH_VARARGS),
            DECLARE_METHOD(t_CharTermAttribute, buffer, METH_NOARGS),
            DECLARE_METHOD(t_CharTermAttribute, copyBuffer, METH_VARARGS),
            DECLARE_METHOD(t_CharTermAttribute, resizeBuffer, METH_O),
            DECLARE_METHOD(t_CharTermAttribute, setEmpty, METH_NOARGS),
            DECLARE_METHOD(t_CharTermAttribute, setLength, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CharTermAttribute, t_CharTermAttribute, ::org::apache::lucene::util::Attribute, CharTermAttribute, abstract_init, 0, 0, t_CharTermAttribute__fields_, 0, 0);

          void t_CharTermAttribute::install(PyObject *module)
          {
            installType(&PY_TYPE(CharTermAttribute), module, "CharTermAttribute", 0);
          }

          void t_CharTermAttribute::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CharTermAttribute).tp_dict, "class_", make_descriptor(CharTermAttribute::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CharTermAttribute).tp_dict, "wrapfn_", make_descriptor(t_CharTermAttribute::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CharTermAttribute).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CharTermAttribute_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CharTermAttribute::initializeClass, 1)))
              return NULL;
            return t_CharTermAttribute::wrap_Object(CharTermAttribute(((t_CharTermAttribute *) arg)->object.this$));
          }
          static PyObject *t_CharTermAttribute_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CharTermAttribute::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_CharTermAttribute_append(t_CharTermAttribute *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::java::lang::StringBuilder a0((jobject) NULL);
                CharTermAttribute result((jobject) NULL);

                if (!parseArgs(args, "k", ::java::lang::StringBuilder::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.append(a0));
                  return t_CharTermAttribute::wrap_Object(result);
                }
              }
              {
                jchar a0;
                CharTermAttribute result((jobject) NULL);

                if (!parseArgs(args, "C", &a0))
                {
                  OBJ_CALL(result = self->object.append(a0));
                  return t_CharTermAttribute::wrap_Object(result);
                }
              }
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                CharTermAttribute result((jobject) NULL);

                if (!parseArgs(args, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
                {
                  OBJ_CALL(result = self->object.append(a0));
                  return t_CharTermAttribute::wrap_Object(result);
                }
              }
              {
                ::java::lang::String a0((jobject) NULL);
                CharTermAttribute result((jobject) NULL);

                if (!parseArgs(args, "s", &a0))
                {
                  OBJ_CALL(result = self->object.append(a0));
                  return t_CharTermAttribute::wrap_Object(result);
                }
              }
              {
                CharTermAttribute a0((jobject) NULL);
                CharTermAttribute result((jobject) NULL);

                if (!parseArgs(args, "k", CharTermAttribute::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.append(a0));
                  return t_CharTermAttribute::wrap_Object(result);
                }
              }
              break;
             case 3:
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                jint a1;
                jint a2;
                CharTermAttribute result((jobject) NULL);

                if (!parseArgs(args, "OII", &::java::lang::PY_TYPE(CharSequence), &a0, &a1, &a2))
                {
                  OBJ_CALL(result = self->object.append(a0, a1, a2));
                  return t_CharTermAttribute::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "append", args);
            return NULL;
          }

          static PyObject *t_CharTermAttribute_buffer(t_CharTermAttribute *self)
          {
            JArray< jchar > result((jobject) NULL);
            OBJ_CALL(result = self->object.buffer());
            return result.wrap();
          }

          static PyObject *t_CharTermAttribute_copyBuffer(t_CharTermAttribute *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint a2;

            if (!parseArgs(args, "[CII", &a0, &a1, &a2))
            {
              OBJ_CALL(self->object.copyBuffer(a0, a1, a2));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "copyBuffer", args);
            return NULL;
          }

          static PyObject *t_CharTermAttribute_resizeBuffer(t_CharTermAttribute *self, PyObject *arg)
          {
            jint a0;
            JArray< jchar > result((jobject) NULL);

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.resizeBuffer(a0));
              return result.wrap();
            }

            PyErr_SetArgsError((PyObject *) self, "resizeBuffer", arg);
            return NULL;
          }

          static PyObject *t_CharTermAttribute_setEmpty(t_CharTermAttribute *self)
          {
            CharTermAttribute result((jobject) NULL);
            OBJ_CALL(result = self->object.setEmpty());
            return t_CharTermAttribute::wrap_Object(result);
          }

          static PyObject *t_CharTermAttribute_setLength(t_CharTermAttribute *self, PyObject *arg)
          {
            jint a0;
            CharTermAttribute result((jobject) NULL);

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.setLength(a0));
              return t_CharTermAttribute::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "setLength", arg);
            return NULL;
          }

          static int t_CharTermAttribute_set__length(t_CharTermAttribute *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setLength(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "length", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/ext/Extensions.h"
#include "org/apache/lucene/queryparser/ext/ParserExtension.h"
#include "org/apache/lucene/queryparser/ext/Extensions$Pair.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace ext {

          ::java::lang::Class *Extensions::class$ = NULL;
          jmethodID *Extensions::mids$ = NULL;
          bool Extensions::live$ = false;
          jchar Extensions::DEFAULT_EXTENSION_FIELD_DELIMITER = (jchar) 0;

          jclass Extensions::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/ext/Extensions");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_87fd545a] = env->getMethodID(cls, "<init>", "(C)V");
              mids$[mid_add_d7d984b9] = env->getMethodID(cls, "add", "(Ljava/lang/String;Lorg/apache/lucene/queryparser/ext/ParserExtension;)V");
              mids$[mid_buildExtensionField_97a5258f] = env->getMethodID(cls, "buildExtensionField", "(Ljava/lang/String;)Ljava/lang/String;");
              mids$[mid_buildExtensionField_aacea7e9] = env->getMethodID(cls, "buildExtensionField", "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;");
              mids$[mid_escapeExtensionField_97a5258f] = env->getMethodID(cls, "escapeExtensionField", "(Ljava/lang/String;)Ljava/lang/String;");
              mids$[mid_getExtension_a8956118] = env->getMethodID(cls, "getExtension", "(Ljava/lang/String;)Lorg/apache/lucene/queryparser/ext/ParserExtension;");
              mids$[mid_getExtensionFieldDelimiter_54c6a173] = env->getMethodID(cls, "getExtensionFieldDelimiter", "()C");
              mids$[mid_splitExtensionField_7a9e9194] = env->getMethodID(cls, "splitExtensionField", "(Ljava/lang/String;Ljava/lang/String;)Lorg/apache/lucene/queryparser/ext/Extensions$Pair;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_EXTENSION_FIELD_DELIMITER = env->getStaticCharField(cls, "DEFAULT_EXTENSION_FIELD_DELIMITER");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Extensions::Extensions() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          Extensions::Extensions(jchar a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_87fd545a, a0)) {}

          void Extensions::add(const ::java::lang::String & a0, const ::org::apache::lucene::queryparser::ext::ParserExtension & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_add_d7d984b9], a0.this$, a1.this$);
          }

          ::java::lang::String Extensions::buildExtensionField(const ::java::lang::String & a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_buildExtensionField_97a5258f], a0.this$));
          }

          ::java::lang::String Extensions::buildExtensionField(const ::java::lang::String & a0, const ::java::lang::String & a1) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_buildExtensionField_aacea7e9], a0.this$, a1.this$));
          }

          ::java::lang::String Extensions::escapeExtensionField(const ::java::lang::String & a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_escapeExtensionField_97a5258f], a0.this$));
          }

          ::org::apache::lucene::queryparser::ext::ParserExtension Extensions::getExtension(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::queryparser::ext::ParserExtension(env->callObjectMethod(this$, mids$[mid_getExtension_a8956118], a0.this$));
          }

          jchar Extensions::getExtensionFieldDelimiter() const
          {
            return env->callCharMethod(this$, mids$[mid_getExtensionFieldDelimiter_54c6a173]);
          }

          ::org::apache::lucene::queryparser::ext::Extensions$Pair Extensions::splitExtensionField(const ::java::lang::String & a0, const ::java::lang::String & a1) const
          {
            return ::org::apache::lucene::queryparser::ext::Extensions$Pair(env->callObjectMethod(this$, mids$[mid_splitExtensionField_7a9e9194], a0.this$, a1.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace ext {
          static PyObject *t_Extensions_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Extensions_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Extensions_init_(t_Extensions *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Extensions_add(t_Extensions *self, PyObject *args);
          static PyObject *t_Extensions_buildExtensionField(t_Extensions *self, PyObject *args);
          static PyObject *t_Extensions_escapeExtensionField(t_Extensions *self, PyObject *arg);
          static PyObject *t_Extensions_getExtension(t_Extensions *self, PyObject *arg);
          static PyObject *t_Extensions_getExtensionFieldDelimiter(t_Extensions *self);
          static PyObject *t_Extensions_splitExtensionField(t_Extensions *self, PyObject *args);
          static PyObject *t_Extensions_get__extensionFieldDelimiter(t_Extensions *self, void *data);
          static PyGetSetDef t_Extensions__fields_[] = {
            DECLARE_GET_FIELD(t_Extensions, extensionFieldDelimiter),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Extensions__methods_[] = {
            DECLARE_METHOD(t_Extensions, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Extensions, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Extensions, add, METH_VARARGS),
            DECLARE_METHOD(t_Extensions, buildExtensionField, METH_VARARGS),
            DECLARE_METHOD(t_Extensions, escapeExtensionField, METH_O),
            DECLARE_METHOD(t_Extensions, getExtension, METH_O),
            DECLARE_METHOD(t_Extensions, getExtensionFieldDelimiter, METH_NOARGS),
            DECLARE_METHOD(t_Extensions, splitExtensionField, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Extensions, t_Extensions, ::java::lang::Object, Extensions, t_Extensions_init_, 0, 0, t_Extensions__fields_, 0, 0);

          void t_Extensions::install(PyObject *module)
          {
            installType(&PY_TYPE(Extensions), module, "Extensions", 0);
            PyDict_SetItemString(PY_TYPE(Extensions).tp_dict, "Pair", make_descriptor(&PY_TYPE(Extensions$Pair)));
          }

          void t_Extensions::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Extensions).tp_dict, "class_", make_descriptor(Extensions::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Extensions).tp_dict, "wrapfn_", make_descriptor(t_Extensions::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Extensions).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(Extensions::initializeClass);
            PyDict_SetItemString(PY_TYPE(Extensions).tp_dict, "DEFAULT_EXTENSION_FIELD_DELIMITER", make_descriptor(Extensions::DEFAULT_EXTENSION_FIELD_DELIMITER));
          }

          static PyObject *t_Extensions_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Extensions::initializeClass, 1)))
              return NULL;
            return t_Extensions::wrap_Object(Extensions(((t_Extensions *) arg)->object.this$));
          }
          static PyObject *t_Extensions_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Extensions::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Extensions_init_(t_Extensions *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                Extensions object((jobject) NULL);

                INT_CALL(object = Extensions());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                jchar a0;
                Extensions object((jobject) NULL);

                if (!parseArgs(args, "C", &a0))
                {
                  INT_CALL(object = Extensions(a0));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_Extensions_add(t_Extensions *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::queryparser::ext::ParserExtension a1((jobject) NULL);

            if (!parseArgs(args, "sk", ::org::apache::lucene::queryparser::ext::ParserExtension::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.add(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "add", args);
            return NULL;
          }

          static PyObject *t_Extensions_buildExtensionField(t_Extensions *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::java::lang::String a0((jobject) NULL);
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, "s", &a0))
                {
                  OBJ_CALL(result = self->object.buildExtensionField(a0));
                  return j2p(result);
                }
              }
              break;
             case 2:
              {
                ::java::lang::String a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, "ss", &a0, &a1))
                {
                  OBJ_CALL(result = self->object.buildExtensionField(a0, a1));
                  return j2p(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "buildExtensionField", args);
            return NULL;
          }

          static PyObject *t_Extensions_escapeExtensionField(t_Extensions *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.escapeExtensionField(a0));
              return j2p(result);
            }

            PyErr_SetArgsError((PyObject *) self, "escapeExtensionField", arg);
            return NULL;
          }

          static PyObject *t_Extensions_getExtension(t_Extensions *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::queryparser::ext::ParserExtension result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.getExtension(a0));
              return ::org::apache::lucene::queryparser::ext::t_ParserExtension::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getExtension", arg);
            return NULL;
          }

          static PyObject *t_Extensions_getExtensionFieldDelimiter(t_Extensions *self)
          {
            jchar result;
            OBJ_CALL(result = self->object.getExtensionFieldDelimiter());
            return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
          }

          static PyObject *t_Extensions_splitExtensionField(t_Extensions *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            ::org::apache::lucene::queryparser::ext::Extensions$Pair result((jobject) NULL);

            if (!parseArgs(args, "ss", &a0, &a1))
            {
              OBJ_CALL(result = self->object.splitExtensionField(a0, a1));
              return ::org::apache::lucene::queryparser::ext::t_Extensions$Pair::wrap_Object(result, &::java::lang::PY_TYPE(String), &::java::lang::PY_TYPE(String));
            }

            PyErr_SetArgsError((PyObject *) self, "splitExtensionField", args);
            return NULL;
          }

          static PyObject *t_Extensions_get__extensionFieldDelimiter(t_Extensions *self, void *data)
          {
            jchar value;
            OBJ_CALL(value = self->object.getExtensionFieldDelimiter());
            return PyUnicode_FromUnicode((Py_UNICODE *) &value, 1);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/FilterDirectoryReader$StandardReaderWrapper.h"
#include "org/apache/lucene/index/AtomicReader.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *FilterDirectoryReader$StandardReaderWrapper::class$ = NULL;
        jmethodID *FilterDirectoryReader$StandardReaderWrapper::mids$ = NULL;
        bool FilterDirectoryReader$StandardReaderWrapper::live$ = false;

        jclass FilterDirectoryReader$StandardReaderWrapper::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/FilterDirectoryReader$StandardReaderWrapper");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_wrap_3b1ad795] = env->getMethodID(cls, "wrap", "(Lorg/apache/lucene/index/AtomicReader;)Lorg/apache/lucene/index/AtomicReader;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FilterDirectoryReader$StandardReaderWrapper::FilterDirectoryReader$StandardReaderWrapper() : ::org::apache::lucene::index::FilterDirectoryReader$SubReaderWrapper(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        ::org::apache::lucene::index::AtomicReader FilterDirectoryReader$StandardReaderWrapper::wrap(const ::org::apache::lucene::index::AtomicReader & a0) const
        {
          return ::org::apache::lucene::index::AtomicReader(env->callObjectMethod(this$, mids$[mid_wrap_3b1ad795], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_FilterDirectoryReader$StandardReaderWrapper_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FilterDirectoryReader$StandardReaderWrapper_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FilterDirectoryReader$StandardReaderWrapper_of_(t_FilterDirectoryReader$StandardReaderWrapper *self, PyObject *args);
        static int t_FilterDirectoryReader$StandardReaderWrapper_init_(t_FilterDirectoryReader$StandardReaderWrapper *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FilterDirectoryReader$StandardReaderWrapper_wrap(t_FilterDirectoryReader$StandardReaderWrapper *self, PyObject *args);
        static PyObject *t_FilterDirectoryReader$StandardReaderWrapper_get__parameters_(t_FilterDirectoryReader$StandardReaderWrapper *self, void *data);
        static PyGetSetDef t_FilterDirectoryReader$StandardReaderWrapper__fields_[] = {
          DECLARE_GET_FIELD(t_FilterDirectoryReader$StandardReaderWrapper, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FilterDirectoryReader$StandardReaderWrapper__methods_[] = {
          DECLARE_METHOD(t_FilterDirectoryReader$StandardReaderWrapper, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilterDirectoryReader$StandardReaderWrapper, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilterDirectoryReader$StandardReaderWrapper, of_, METH_VARARGS),
          DECLARE_METHOD(t_FilterDirectoryReader$StandardReaderWrapper, wrap, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FilterDirectoryReader$StandardReaderWrapper, t_FilterDirectoryReader$StandardReaderWrapper, ::org::apache::lucene::index::FilterDirectoryReader$SubReaderWrapper, FilterDirectoryReader$StandardReaderWrapper, t_FilterDirectoryReader$StandardReaderWrapper_init_, 0, 0, t_FilterDirectoryReader$StandardReaderWrapper__fields_, 0, 0);
        PyObject *t_FilterDirectoryReader$StandardReaderWrapper::wrap_Object(const FilterDirectoryReader$StandardReaderWrapper& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FilterDirectoryReader$StandardReaderWrapper::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FilterDirectoryReader$StandardReaderWrapper *self = (t_FilterDirectoryReader$StandardReaderWrapper *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_FilterDirectoryReader$StandardReaderWrapper::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FilterDirectoryReader$StandardReaderWrapper::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FilterDirectoryReader$StandardReaderWrapper *self = (t_FilterDirectoryReader$StandardReaderWrapper *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_FilterDirectoryReader$StandardReaderWrapper::install(PyObject *module)
        {
          installType(&PY_TYPE(FilterDirectoryReader$StandardReaderWrapper), module, "FilterDirectoryReader$StandardReaderWrapper", 0);
        }

        void t_FilterDirectoryReader$StandardReaderWrapper::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FilterDirectoryReader$StandardReaderWrapper).tp_dict, "class_", make_descriptor(FilterDirectoryReader$StandardReaderWrapper::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FilterDirectoryReader$StandardReaderWrapper).tp_dict, "wrapfn_", make_descriptor(t_FilterDirectoryReader$StandardReaderWrapper::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FilterDirectoryReader$StandardReaderWrapper).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FilterDirectoryReader$StandardReaderWrapper_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FilterDirectoryReader$StandardReaderWrapper::initializeClass, 1)))
            return NULL;
          return t_FilterDirectoryReader$StandardReaderWrapper::wrap_Object(FilterDirectoryReader$StandardReaderWrapper(((t_FilterDirectoryReader$StandardReaderWrapper *) arg)->object.this$));
        }
        static PyObject *t_FilterDirectoryReader$StandardReaderWrapper_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FilterDirectoryReader$StandardReaderWrapper::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FilterDirectoryReader$StandardReaderWrapper_of_(t_FilterDirectoryReader$StandardReaderWrapper *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_FilterDirectoryReader$StandardReaderWrapper_init_(t_FilterDirectoryReader$StandardReaderWrapper *self, PyObject *args, PyObject *kwds)
        {
          FilterDirectoryReader$StandardReaderWrapper object((jobject) NULL);

          INT_CALL(object = FilterDirectoryReader$StandardReaderWrapper());
          self->object = object;
          self->parameters[0] = &::org::apache::lucene::index::PY_TYPE(AtomicReader);

          return 0;
        }

        static PyObject *t_FilterDirectoryReader$StandardReaderWrapper_wrap(t_FilterDirectoryReader$StandardReaderWrapper *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);
          ::org::apache::lucene::index::AtomicReader result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReader::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.wrap(a0));
            return ::org::apache::lucene::index::t_AtomicReader::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilterDirectoryReader$StandardReaderWrapper), (PyObject *) self, "wrap", args, 2);
        }
        static PyObject *t_FilterDirectoryReader$StandardReaderWrapper_get__parameters_(t_FilterDirectoryReader$StandardReaderWrapper *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/text/BreakIterator.h"
#include "java/lang/Class.h"
#include "java/lang/Cloneable.h"
#include "java/util/Locale.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace java {
  namespace text {

    ::java::lang::Class *BreakIterator::class$ = NULL;
    jmethodID *BreakIterator::mids$ = NULL;
    bool BreakIterator::live$ = false;
    jint BreakIterator::DONE = (jint) 0;

    jclass BreakIterator::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/text/BreakIterator");

        mids$ = new jmethodID[max_mid];
        mids$[mid_clone_846352c3] = env->getMethodID(cls, "clone", "()Ljava/lang/Object;");
        mids$[mid_current_54c6a179] = env->getMethodID(cls, "current", "()I");
        mids$[mid_first_54c6a179] = env->getMethodID(cls, "first", "()I");
        mids$[mid_following_39c7bd23] = env->getMethodID(cls, "following", "(I)I");
        mids$[mid_getAvailableLocales_59cb5b46] = env->getStaticMethodID(cls, "getAvailableLocales", "()[Ljava/util/Locale;");
        mids$[mid_getCharacterInstance_91cbbddf] = env->getStaticMethodID(cls, "getCharacterInstance", "()Ljava/text/BreakIterator;");
        mids$[mid_getCharacterInstance_09bf44ce] = env->getStaticMethodID(cls, "getCharacterInstance", "(Ljava/util/Locale;)Ljava/text/BreakIterator;");
        mids$[mid_getLineInstance_91cbbddf] = env->getStaticMethodID(cls, "getLineInstance", "()Ljava/text/BreakIterator;");
        mids$[mid_getLineInstance_09bf44ce] = env->getStaticMethodID(cls, "getLineInstance", "(Ljava/util/Locale;)Ljava/text/BreakIterator;");
        mids$[mid_getSentenceInstance_91cbbddf] = env->getStaticMethodID(cls, "getSentenceInstance", "()Ljava/text/BreakIterator;");
        mids$[mid_getSentenceInstance_09bf44ce] = env->getStaticMethodID(cls, "getSentenceInstance", "(Ljava/util/Locale;)Ljava/text/BreakIterator;");
        mids$[mid_getWordInstance_91cbbddf] = env->getStaticMethodID(cls, "getWordInstance", "()Ljava/text/BreakIterator;");
        mids$[mid_getWordInstance_09bf44ce] = env->getStaticMethodID(cls, "getWordInstance", "(Ljava/util/Locale;)Ljava/text/BreakIterator;");
        mids$[mid_isBoundary_39c7bd30] = env->getMethodID(cls, "isBoundary", "(I)Z");
        mids$[mid_last_54c6a179] = env->getMethodID(cls, "last", "()I");
        mids$[mid_next_54c6a179] = env->getMethodID(cls, "next", "()I");
        mids$[mid_next_39c7bd23] = env->getMethodID(cls, "next", "(I)I");
        mids$[mid_preceding_39c7bd23] = env->getMethodID(cls, "preceding", "(I)I");
        mids$[mid_previous_54c6a179] = env->getMethodID(cls, "previous", "()I");
        mids$[mid_setText_5fdc3f48] = env->getMethodID(cls, "setText", "(Ljava/lang/String;)V");

        class$ = (::java::lang::Class *) new JObject(cls);
        cls = (jclass) class$->this$;

        DONE = env->getStaticIntField(cls, "DONE");
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    ::java::lang::Object BreakIterator::clone() const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_clone_846352c3]));
    }

    jint BreakIterator::current() const
    {
      return env->callIntMethod(this$, mids$[mid_current_54c6a179]);
    }

    jint BreakIterator::first() const
    {
      return env->callIntMethod(this$, mids$[mid_first_54c6a179]);
    }

    jint BreakIterator::following(jint a0) const
    {
      return env->callIntMethod(this$, mids$[mid_following_39c7bd23], a0);
    }

    JArray< ::java::util::Locale > BreakIterator::getAvailableLocales()
    {
      jclass cls = env->getClass(initializeClass);
      return JArray< ::java::util::Locale >(env->callStaticObjectMethod(cls, mids$[mid_getAvailableLocales_59cb5b46]));
    }

    BreakIterator BreakIterator::getCharacterInstance()
    {
      jclass cls = env->getClass(initializeClass);
      return BreakIterator(env->callStaticObjectMethod(cls, mids$[mid_getCharacterInstance_91cbbddf]));
    }

    BreakIterator BreakIterator::getCharacterInstance(const ::java::util::Locale & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return BreakIterator(env->callStaticObjectMethod(cls, mids$[mid_getCharacterInstance_09bf44ce], a0.this$));
    }

    BreakIterator BreakIterator::getLineInstance()
    {
      jclass cls = env->getClass(initializeClass);
      return BreakIterator(env->callStaticObjectMethod(cls, mids$[mid_getLineInstance_91cbbddf]));
    }

    BreakIterator BreakIterator::getLineInstance(const ::java::util::Locale & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return BreakIterator(env->callStaticObjectMethod(cls, mids$[mid_getLineInstance_09bf44ce], a0.this$));
    }

    BreakIterator BreakIterator::getSentenceInstance()
    {
      jclass cls = env->getClass(initializeClass);
      return BreakIterator(env->callStaticObjectMethod(cls, mids$[mid_getSentenceInstance_91cbbddf]));
    }

    BreakIterator BreakIterator::getSentenceInstance(const ::java::util::Locale & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return BreakIterator(env->callStaticObjectMethod(cls, mids$[mid_getSentenceInstance_09bf44ce], a0.this$));
    }

    BreakIterator BreakIterator::getWordInstance()
    {
      jclass cls = env->getClass(initializeClass);
      return BreakIterator(env->callStaticObjectMethod(cls, mids$[mid_getWordInstance_91cbbddf]));
    }

    BreakIterator BreakIterator::getWordInstance(const ::java::util::Locale & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return BreakIterator(env->callStaticObjectMethod(cls, mids$[mid_getWordInstance_09bf44ce], a0.this$));
    }

    jboolean BreakIterator::isBoundary(jint a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_isBoundary_39c7bd30], a0);
    }

    jint BreakIterator::last() const
    {
      return env->callIntMethod(this$, mids$[mid_last_54c6a179]);
    }

    jint BreakIterator::next() const
    {
      return env->callIntMethod(this$, mids$[mid_next_54c6a179]);
    }

    jint BreakIterator::next(jint a0) const
    {
      return env->callIntMethod(this$, mids$[mid_next_39c7bd23], a0);
    }

    jint BreakIterator::preceding(jint a0) const
    {
      return env->callIntMethod(this$, mids$[mid_preceding_39c7bd23], a0);
    }

    jint BreakIterator::previous() const
    {
      return env->callIntMethod(this$, mids$[mid_previous_54c6a179]);
    }

    void BreakIterator::setText(const ::java::lang::String & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_setText_5fdc3f48], a0.this$);
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace text {
    static PyObject *t_BreakIterator_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_BreakIterator_instance_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_BreakIterator_clone(t_BreakIterator *self);
    static PyObject *t_BreakIterator_current(t_BreakIterator *self);
    static PyObject *t_BreakIterator_first(t_BreakIterator *self);
    static PyObject *t_BreakIterator_following(t_BreakIterator *self, PyObject *arg);
    static PyObject *t_BreakIterator_getAvailableLocales(PyTypeObject *type);
    static PyObject *t_BreakIterator_getCharacterInstance(PyTypeObject *type, PyObject *args);
    static PyObject *t_BreakIterator_getLineInstance(PyTypeObject *type, PyObject *args);
    static PyObject *t_BreakIterator_getSentenceInstance(PyTypeObject *type, PyObject *args);
    static PyObject *t_BreakIterator_getWordInstance(PyTypeObject *type, PyObject *args);
    static PyObject *t_BreakIterator_isBoundary(t_BreakIterator *self, PyObject *arg);
    static PyObject *t_BreakIterator_last(t_BreakIterator *self);
    static PyObject *t_BreakIterator_next(t_BreakIterator *self, PyObject *args);
    static PyObject *t_BreakIterator_preceding(t_BreakIterator *self, PyObject *arg);
    static PyObject *t_BreakIterator_previous(t_BreakIterator *self);
    static PyObject *t_BreakIterator_setText(t_BreakIterator *self, PyObject *arg);
    static PyObject *t_BreakIterator_get__availableLocales(t_BreakIterator *self, void *data);
    static PyObject *t_BreakIterator_get__characterInstance(t_BreakIterator *self, void *data);
    static PyObject *t_BreakIterator_get__lineInstance(t_BreakIterator *self, void *data);
    static PyObject *t_BreakIterator_get__sentenceInstance(t_BreakIterator *self, void *data);
    static int t_BreakIterator_set__text(t_BreakIterator *self, PyObject *arg, void *data);
    static PyObject *t_BreakIterator_get__wordInstance(t_BreakIterator *self, void *data);
    static PyGetSetDef t_BreakIterator__fields_[] = {
      DECLARE_GET_FIELD(t_BreakIterator, availableLocales),
      DECLARE_GET_FIELD(t_BreakIterator, characterInstance),
      DECLARE_GET_FIELD(t_BreakIterator, lineInstance),
      DECLARE_GET_FIELD(t_BreakIterator, sentenceInstance),
      DECLARE_SET_FIELD(t_BreakIterator, text),
      DECLARE_GET_FIELD(t_BreakIterator, wordInstance),
      { NULL, NULL, NULL, NULL, NULL }
    };

    static PyMethodDef t_BreakIterator__methods_[] = {
      DECLARE_METHOD(t_BreakIterator, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_BreakIterator, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_BreakIterator, clone, METH_NOARGS),
      DECLARE_METHOD(t_BreakIterator, current, METH_NOARGS),
      DECLARE_METHOD(t_BreakIterator, first, METH_NOARGS),
      DECLARE_METHOD(t_BreakIterator, following, METH_O),
      DECLARE_METHOD(t_BreakIterator, getAvailableLocales, METH_NOARGS | METH_CLASS),
      DECLARE_METHOD(t_BreakIterator, getCharacterInstance, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_BreakIterator, getLineInstance, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_BreakIterator, getSentenceInstance, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_BreakIterator, getWordInstance, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_BreakIterator, isBoundary, METH_O),
      DECLARE_METHOD(t_BreakIterator, last, METH_NOARGS),
      DECLARE_METHOD(t_BreakIterator, next, METH_VARARGS),
      DECLARE_METHOD(t_BreakIterator, preceding, METH_O),
      DECLARE_METHOD(t_BreakIterator, previous, METH_NOARGS),
      DECLARE_METHOD(t_BreakIterator, setText, METH_O),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(BreakIterator, t_BreakIterator, ::java::lang::Object, BreakIterator, abstract_init, 0, 0, t_BreakIterator__fields_, 0, 0);

    void t_BreakIterator::install(PyObject *module)
    {
      installType(&PY_TYPE(BreakIterator), module, "BreakIterator", 0);
    }

    void t_BreakIterator::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(BreakIterator).tp_dict, "class_", make_descriptor(BreakIterator::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(BreakIterator).tp_dict, "wrapfn_", make_descriptor(t_BreakIterator::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(BreakIterator).tp_dict, "boxfn_", make_descriptor(boxObject));
      env->getClass(BreakIterator::initializeClass);
      PyDict_SetItemString(PY_TYPE(BreakIterator).tp_dict, "DONE", make_descriptor(BreakIterator::DONE));
    }

    static PyObject *t_BreakIterator_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, BreakIterator::initializeClass, 1)))
        return NULL;
      return t_BreakIterator::wrap_Object(BreakIterator(((t_BreakIterator *) arg)->object.this$));
    }
    static PyObject *t_BreakIterator_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, BreakIterator::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static PyObject *t_BreakIterator_clone(t_BreakIterator *self)
    {
      ::java::lang::Object result((jobject) NULL);
      OBJ_CALL(result = self->object.clone());
      return ::java::lang::t_Object::wrap_Object(result);
    }

    static PyObject *t_BreakIterator_current(t_BreakIterator *self)
    {
      jint result;
      OBJ_CALL(result = self->object.current());
      return PyInt_FromLong((long) result);
    }

    static PyObject *t_BreakIterator_first(t_BreakIterator *self)
    {
      jint result;
      OBJ_CALL(result = self->object.first());
      return PyInt_FromLong((long) result);
    }

    static PyObject *t_BreakIterator_following(t_BreakIterator *self, PyObject *arg)
    {
      jint a0;
      jint result;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(result = self->object.following(a0));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError((PyObject *) self, "following", arg);
      return NULL;
    }

    static PyObject *t_BreakIterator_getAvailableLocales(PyTypeObject *type)
    {
      JArray< ::java::util::Locale > result((jobject) NULL);
      OBJ_CALL(result = ::java::text::BreakIterator::getAvailableLocales());
      return JArray<jobject>(result.this$).wrap(::java::util::t_Locale::wrap_jobject);
    }

    static PyObject *t_BreakIterator_getCharacterInstance(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          BreakIterator result((jobject) NULL);
          OBJ_CALL(result = ::java::text::BreakIterator::getCharacterInstance());
          return t_BreakIterator::wrap_Object(result);
        }
        break;
       case 1:
        {
          ::java::util::Locale a0((jobject) NULL);
          BreakIterator result((jobject) NULL);

          if (!parseArgs(args, "k", ::java::util::Locale::initializeClass, &a0))
          {
            OBJ_CALL(result = ::java::text::BreakIterator::getCharacterInstance(a0));
            return t_BreakIterator::wrap_Object(result);
          }
        }
      }

      PyErr_SetArgsError(type, "getCharacterInstance", args);
      return NULL;
    }

    static PyObject *t_BreakIterator_getLineInstance(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          BreakIterator result((jobject) NULL);
          OBJ_CALL(result = ::java::text::BreakIterator::getLineInstance());
          return t_BreakIterator::wrap_Object(result);
        }
        break;
       case 1:
        {
          ::java::util::Locale a0((jobject) NULL);
          BreakIterator result((jobject) NULL);

          if (!parseArgs(args, "k", ::java::util::Locale::initializeClass, &a0))
          {
            OBJ_CALL(result = ::java::text::BreakIterator::getLineInstance(a0));
            return t_BreakIterator::wrap_Object(result);
          }
        }
      }

      PyErr_SetArgsError(type, "getLineInstance", args);
      return NULL;
    }

    static PyObject *t_BreakIterator_getSentenceInstance(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          BreakIterator result((jobject) NULL);
          OBJ_CALL(result = ::java::text::BreakIterator::getSentenceInstance());
          return t_BreakIterator::wrap_Object(result);
        }
        break;
       case 1:
        {
          ::java::util::Locale a0((jobject) NULL);
          BreakIterator result((jobject) NULL);

          if (!parseArgs(args, "k", ::java::util::Locale::initializeClass, &a0))
          {
            OBJ_CALL(result = ::java::text::BreakIterator::getSentenceInstance(a0));
            return t_BreakIterator::wrap_Object(result);
          }
        }
      }

      PyErr_SetArgsError(type, "getSentenceInstance", args);
      return NULL;
    }

    static PyObject *t_BreakIterator_getWordInstance(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          BreakIterator result((jobject) NULL);
          OBJ_CALL(result = ::java::text::BreakIterator::getWordInstance());
          return t_BreakIterator::wrap_Object(result);
        }
        break;
       case 1:
        {
          ::java::util::Locale a0((jobject) NULL);
          BreakIterator result((jobject) NULL);

          if (!parseArgs(args, "k", ::java::util::Locale::initializeClass, &a0))
          {
            OBJ_CALL(result = ::java::text::BreakIterator::getWordInstance(a0));
            return t_BreakIterator::wrap_Object(result);
          }
        }
      }

      PyErr_SetArgsError(type, "getWordInstance", args);
      return NULL;
    }

    static PyObject *t_BreakIterator_isBoundary(t_BreakIterator *self, PyObject *arg)
    {
      jint a0;
      jboolean result;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(result = self->object.isBoundary(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError((PyObject *) self, "isBoundary", arg);
      return NULL;
    }

    static PyObject *t_BreakIterator_last(t_BreakIterator *self)
    {
      jint result;
      OBJ_CALL(result = self->object.last());
      return PyInt_FromLong((long) result);
    }

    static PyObject *t_BreakIterator_next(t_BreakIterator *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          jint result;
          OBJ_CALL(result = self->object.next());
          return PyInt_FromLong((long) result);
        }
        break;
       case 1:
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.next(a0));
            return PyInt_FromLong((long) result);
          }
        }
      }

      PyErr_SetArgsError((PyObject *) self, "next", args);
      return NULL;
    }

    static PyObject *t_BreakIterator_preceding(t_BreakIterator *self, PyObject *arg)
    {
      jint a0;
      jint result;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(result = self->object.preceding(a0));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError((PyObject *) self, "preceding", arg);
      return NULL;
    }

    static PyObject *t_BreakIterator_previous(t_BreakIterator *self)
    {
      jint result;
      OBJ_CALL(result = self->object.previous());
      return PyInt_FromLong((long) result);
    }

    static PyObject *t_BreakIterator_setText(t_BreakIterator *self, PyObject *arg)
    {
      ::java::lang::String a0((jobject) NULL);

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(self->object.setText(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "setText", arg);
      return NULL;
    }

    static PyObject *t_BreakIterator_get__availableLocales(t_BreakIterator *self, void *data)
    {
      JArray< ::java::util::Locale > value((jobject) NULL);
      OBJ_CALL(value = self->object.getAvailableLocales());
      return JArray<jobject>(value.this$).wrap(::java::util::t_Locale::wrap_jobject);
    }

    static PyObject *t_BreakIterator_get__characterInstance(t_BreakIterator *self, void *data)
    {
      BreakIterator value((jobject) NULL);
      OBJ_CALL(value = self->object.getCharacterInstance());
      return t_BreakIterator::wrap_Object(value);
    }

    static PyObject *t_BreakIterator_get__lineInstance(t_BreakIterator *self, void *data)
    {
      BreakIterator value((jobject) NULL);
      OBJ_CALL(value = self->object.getLineInstance());
      return t_BreakIterator::wrap_Object(value);
    }

    static PyObject *t_BreakIterator_get__sentenceInstance(t_BreakIterator *self, void *data)
    {
      BreakIterator value((jobject) NULL);
      OBJ_CALL(value = self->object.getSentenceInstance());
      return t_BreakIterator::wrap_Object(value);
    }

    static int t_BreakIterator_set__text(t_BreakIterator *self, PyObject *arg, void *data)
    {
      {
        ::java::lang::String value((jobject) NULL);
        if (!parseArg(arg, "s", &value))
        {
          INT_CALL(self->object.setText(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "text", arg);
      return -1;
    }

    static PyObject *t_BreakIterator_get__wordInstance(t_BreakIterator *self, void *data)
    {
      BreakIterator value((jobject) NULL);
      OBJ_CALL(value = self->object.getWordInstance());
      return t_BreakIterator::wrap_Object(value);
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/lang/Short.h"
#include "java/lang/Class.h"
#include "java/lang/Comparable.h"
#include "java/lang/Object.h"
#include "java/lang/NumberFormatException.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace java {
  namespace lang {

    ::java::lang::Class *Short::class$ = NULL;
    jmethodID *Short::mids$ = NULL;
    bool Short::live$ = false;
    jint Short::BYTES = (jint) 0;
    jshort Short::MAX_VALUE = (jshort) 0;
    jshort Short::MIN_VALUE = (jshort) 0;
    jint Short::SIZE = (jint) 0;
    ::java::lang::Class *Short::TYPE = NULL;

    jclass Short::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/lang/Short");

        mids$ = new jmethodID[max_mid];
        mids$[mid_init$_3bc40c6a] = env->getMethodID(cls, "<init>", "(S)V");
        mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
        mids$[mid_byteValue_54c6a172] = env->getMethodID(cls, "byteValue", "()B");
        mids$[mid_compare_5729c2d1] = env->getStaticMethodID(cls, "compare", "(SS)I");
        mids$[mid_compareTo_6b8573d1] = env->getMethodID(cls, "compareTo", "(Ljava/lang/Short;)I");
        mids$[mid_decode_88c4db41] = env->getStaticMethodID(cls, "decode", "(Ljava/lang/String;)Ljava/lang/Short;");
        mids$[mid_doubleValue_54c6a174] = env->getMethodID(cls, "doubleValue", "()D");
        mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
        mids$[mid_floatValue_54c6a176] = env->getMethodID(cls, "floatValue", "()F");
        mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
        mids$[mid_hashCode_3bc40c75] = env->getStaticMethodID(cls, "hashCode", "(S)I");
        mids$[mid_intValue_54c6a179] = env->getMethodID(cls, "intValue", "()I");
        mids$[mid_longValue_54c6a17a] = env->getMethodID(cls, "longValue", "()J");
        mids$[mid_parseShort_5fdc3f4d] = env->getStaticMethodID(cls, "parseShort", "(Ljava/lang/String;)S");
        mids$[mid_parseShort_6e53ccc3] = env->getStaticMethodID(cls, "parseShort", "(Ljava/lang/String;I)S");
        mids$[mid_reverseBytes_3bc40c6f] = env->getStaticMethodID(cls, "reverseBytes", "(S)S");
        mids$[mid_shortValue_54c6a163] = env->getMethodID(cls, "shortValue", "()S");
        mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
        mids$[mid_toString_9c2e4c45] = env->getStaticMethodID(cls, "toString", "(S)Ljava/lang/String;");
        mids$[mid_toUnsignedInt_3bc40c75] = env->getStaticMethodID(cls, "toUnsignedInt", "(S)I");
        mids$[mid_toUnsignedLong_3bc40c76] = env->getStaticMethodID(cls, "toUnsignedLong", "(S)J");
        mids$[mid_valueOf_5d563b1b] = env->getStaticMethodID(cls, "valueOf", "(S)Ljava/lang/Short;");
        mids$[mid_valueOf_88c4db41] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Ljava/lang/Short;");
        mids$[mid_valueOf_0f6bcb23] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;I)Ljava/lang/Short;");

        class$ = (::java::lang::Class *) new JObject(cls);
        cls = (jclass) class$->this$;

        BYTES = env->getStaticIntField(cls, "BYTES");
        MAX_VALUE = env->getStaticShortField(cls, "MAX_VALUE");
        MIN_VALUE = env->getStaticShortField(cls, "MIN_VALUE");
        SIZE = env->getStaticIntField(cls, "SIZE");
        TYPE = new ::java::lang::Class(env->getStaticObjectField(cls, "TYPE", "Ljava/lang/Class;"));
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    Short::Short(jshort a0) : ::java::lang::Number(env->newObject(initializeClass, &mids$, mid_init$_3bc40c6a, a0)) {}

    Short::Short(const ::java::lang::String & a0) : ::java::lang::Number(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

    jbyte Short::byteValue() const
    {
      return env->callByteMethod(this$, mids$[mid_byteValue_54c6a172]);
    }

    jint Short::compare(jshort a0, jshort a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_compare_5729c2d1], a0, a1);
    }

    jint Short::compareTo(const Short & a0) const
    {
      return env->callIntMethod(this$, mids$[mid_compareTo_6b8573d1], a0.this$);
    }

    Short Short::decode(const ::java::lang::String & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return Short(env->callStaticObjectMethod(cls, mids$[mid_decode_88c4db41], a0.this$));
    }

    jdouble Short::doubleValue() const
    {
      return env->callDoubleMethod(this$, mids$[mid_doubleValue_54c6a174]);
    }

    jboolean Short::equals(const ::java::lang::Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
    }

    jfloat Short::floatValue() const
    {
      return env->callFloatMethod(this$, mids$[mid_floatValue_54c6a176]);
    }

    jint Short::hashCode() const
    {
      return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
    }

    jint Short::hashCode(jshort a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_hashCode_3bc40c75], a0);
    }

    jint Short::intValue() const
    {
      return env->callIntMethod(this$, mids$[mid_intValue_54c6a179]);
    }

    jlong Short::longValue() const
    {
      return env->callLongMethod(this$, mids$[mid_longValue_54c6a17a]);
    }

    jshort Short::parseShort(const ::java::lang::String & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticShortMethod(cls, mids$[mid_parseShort_5fdc3f4d], a0.this$);
    }

    jshort Short::parseShort(const ::java::lang::String & a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticShortMethod(cls, mids$[mid_parseShort_6e53ccc3], a0.this$, a1);
    }

    jshort Short::reverseBytes(jshort a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticShortMethod(cls, mids$[mid_reverseBytes_3bc40c6f], a0);
    }

    jshort Short::shortValue() const
    {
      return env->callShortMethod(this$, mids$[mid_shortValue_54c6a163]);
    }

    ::java::lang::String Short::toString() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
    }

    ::java::lang::String Short::toString(jshort a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toString_9c2e4c45], a0));
    }

    jint Short::toUnsignedInt(jshort a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_toUnsignedInt_3bc40c75], a0);
    }

    jlong Short::toUnsignedLong(jshort a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticLongMethod(cls, mids$[mid_toUnsignedLong_3bc40c76], a0);
    }

    Short Short::valueOf(jshort a0)
    {
      jclass cls = env->getClass(initializeClass);
      return Short(env->callStaticObjectMethod(cls, mids$[mid_valueOf_5d563b1b], a0));
    }

    Short Short::valueOf(const ::java::lang::String & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return Short(env->callStaticObjectMethod(cls, mids$[mid_valueOf_88c4db41], a0.this$));
    }

    Short Short::valueOf(const ::java::lang::String & a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return Short(env->callStaticObjectMethod(cls, mids$[mid_valueOf_0f6bcb23], a0.this$, a1));
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace lang {
    static PyObject *t_Short_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Short_instance_(PyTypeObject *type, PyObject *arg);
    static int t_Short_init_(t_Short *self, PyObject *args, PyObject *kwds);
    static PyObject *t_Short_byteValue(t_Short *self, PyObject *args);
    static PyObject *t_Short_compare(PyTypeObject *type, PyObject *args);
    static PyObject *t_Short_compareTo(t_Short *self, PyObject *arg);
    static PyObject *t_Short_decode(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Short_doubleValue(t_Short *self, PyObject *args);
    static PyObject *t_Short_equals(t_Short *self, PyObject *args);
    static PyObject *t_Short_floatValue(t_Short *self, PyObject *args);
    static PyObject *t_Short_hashCode(t_Short *self, PyObject *args);
    static PyObject *t_Short_hashCode_(PyTypeObject *type, PyObject *args);
    static PyObject *t_Short_intValue(t_Short *self, PyObject *args);
    static PyObject *t_Short_longValue(t_Short *self, PyObject *args);
    static PyObject *t_Short_parseShort(PyTypeObject *type, PyObject *args);
    static PyObject *t_Short_reverseBytes(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Short_shortValue(t_Short *self, PyObject *args);
    static PyObject *t_Short_toString(t_Short *self, PyObject *args);
    static PyObject *t_Short_toString_(PyTypeObject *type, PyObject *args);
    static PyObject *t_Short_toUnsignedInt(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Short_toUnsignedLong(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Short_valueOf(PyTypeObject *type, PyObject *args);

    static PyMethodDef t_Short__methods_[] = {
      DECLARE_METHOD(t_Short, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Short, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Short, byteValue, METH_VARARGS),
      DECLARE_METHOD(t_Short, compare, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Short, compareTo, METH_O),
      DECLARE_METHOD(t_Short, decode, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Short, doubleValue, METH_VARARGS),
      DECLARE_METHOD(t_Short, equals, METH_VARARGS),
      DECLARE_METHOD(t_Short, floatValue, METH_VARARGS),
      DECLARE_METHOD(t_Short, hashCode, METH_VARARGS),
      DECLARE_METHOD(t_Short, hashCode_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Short, intValue, METH_VARARGS),
      DECLARE_METHOD(t_Short, longValue, METH_VARARGS),
      DECLARE_METHOD(t_Short, parseShort, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Short, reverseBytes, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Short, shortValue, METH_VARARGS),
      DECLARE_METHOD(t_Short, toString, METH_VARARGS),
      DECLARE_METHOD(t_Short, toString_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Short, toUnsignedInt, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Short, toUnsignedLong, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Short, valueOf, METH_VARARGS | METH_CLASS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(Short, t_Short, ::java::lang::Number, Short, t_Short_init_, 0, 0, 0, 0, 0);

    void t_Short::install(PyObject *module)
    {
      installType(&PY_TYPE(Short), module, "Short", 0);
    }

    void t_Short::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(Short).tp_dict, "class_", make_descriptor(Short::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(Short).tp_dict, "wrapfn_", make_descriptor(unboxShort));
      PyDict_SetItemString(PY_TYPE(Short).tp_dict, "boxfn_", make_descriptor(boxShort));
      env->getClass(Short::initializeClass);
      PyDict_SetItemString(PY_TYPE(Short).tp_dict, "BYTES", make_descriptor(Short::BYTES));
      PyDict_SetItemString(PY_TYPE(Short).tp_dict, "MAX_VALUE", make_descriptor(Short::MAX_VALUE));
      PyDict_SetItemString(PY_TYPE(Short).tp_dict, "MIN_VALUE", make_descriptor(Short::MIN_VALUE));
      PyDict_SetItemString(PY_TYPE(Short).tp_dict, "SIZE", make_descriptor(Short::SIZE));
      PyDict_SetItemString(PY_TYPE(Short).tp_dict, "TYPE", make_descriptor(::java::lang::t_Class::wrap_Object(*Short::TYPE)));
    }

    static PyObject *t_Short_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, Short::initializeClass, 1)))
        return NULL;
      return t_Short::wrap_Object(Short(((t_Short *) arg)->object.this$));
    }
    static PyObject *t_Short_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, Short::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static int t_Short_init_(t_Short *self, PyObject *args, PyObject *kwds)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jshort a0;
          Short object((jobject) NULL);

          if (!parseArgs(args, "S", &a0))
          {
            INT_CALL(object = Short(a0));
            self->object = object;
            break;
          }
        }
        {
          ::java::lang::String a0((jobject) NULL);
          Short object((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            INT_CALL(object = Short(a0));
            self->object = object;
            break;
          }
        }
       default:
        PyErr_SetArgsError((PyObject *) self, "__init__", args);
        return -1;
      }

      return 0;
    }

    static PyObject *t_Short_byteValue(t_Short *self, PyObject *args)
    {
      jbyte result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.byteValue());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(Short), (PyObject *) self, "byteValue", args, 2);
    }

    static PyObject *t_Short_compare(PyTypeObject *type, PyObject *args)
    {
      jshort a0;
      jshort a1;
      jint result;

      if (!parseArgs(args, "SS", &a0, &a1))
      {
        OBJ_CALL(result = ::java::lang::Short::compare(a0, a1));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "compare", args);
      return NULL;
    }

    static PyObject *t_Short_compareTo(t_Short *self, PyObject *arg)
    {
      Short a0((jobject) NULL);
      jint result;

      if (!parseArg(arg, "O", &::java::lang::PY_TYPE(Short), &a0))
      {
        OBJ_CALL(result = self->object.compareTo(a0));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError((PyObject *) self, "compareTo", arg);
      return NULL;
    }

    static PyObject *t_Short_decode(PyTypeObject *type, PyObject *arg)
    {
      ::java::lang::String a0((jobject) NULL);
      Short result((jobject) NULL);

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(result = ::java::lang::Short::decode(a0));
        return t_Short::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "decode", arg);
      return NULL;
    }

    static PyObject *t_Short_doubleValue(t_Short *self, PyObject *args)
    {
      jdouble result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.doubleValue());
        return PyFloat_FromDouble((double) result);
      }

      return callSuper(&PY_TYPE(Short), (PyObject *) self, "doubleValue", args, 2);
    }

    static PyObject *t_Short_equals(t_Short *self, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      jboolean result;

      if (!parseArgs(args, "o", &a0))
      {
        OBJ_CALL(result = self->object.equals(a0));
        Py_RETURN_BOOL(result);
      }

      return callSuper(&PY_TYPE(Short), (PyObject *) self, "equals", args, 2);
    }

    static PyObject *t_Short_floatValue(t_Short *self, PyObject *args)
    {
      jfloat result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.floatValue());
        return PyFloat_FromDouble((double) result);
      }

      return callSuper(&PY_TYPE(Short), (PyObject *) self, "floatValue", args, 2);
    }

    static PyObject *t_Short_hashCode(t_Short *self, PyObject *args)
    {
      jint result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.hashCode());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(Short), (PyObject *) self, "hashCode", args, 2);
    }

    static PyObject *t_Short_hashCode_(PyTypeObject *type, PyObject *args)
    {
      jshort a0;
      jint result;

      if (!parseArgs(args, "S", &a0))
      {
        OBJ_CALL(result = ::java::lang::Short::hashCode(a0));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "hashCode_", args);
      return NULL;
    }

    static PyObject *t_Short_intValue(t_Short *self, PyObject *args)
    {
      jint result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.intValue());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(Short), (PyObject *) self, "intValue", args, 2);
    }

    static PyObject *t_Short_longValue(t_Short *self, PyObject *args)
    {
      jlong result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.longValue());
        return PyLong_FromLongLong((PY_LONG_LONG) result);
      }

      return callSuper(&PY_TYPE(Short), (PyObject *) self, "longValue", args, 2);
    }

    static PyObject *t_Short_parseShort(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          ::java::lang::String a0((jobject) NULL);
          jshort result;

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::java::lang::Short::parseShort(a0));
            return PyInt_FromLong((long) result);
          }
        }
        break;
       case 2:
        {
          ::java::lang::String a0((jobject) NULL);
          jint a1;
          jshort result;

          if (!parseArgs(args, "sI", &a0, &a1))
          {
            OBJ_CALL(result = ::java::lang::Short::parseShort(a0, a1));
            return PyInt_FromLong((long) result);
          }
        }
      }

      PyErr_SetArgsError(type, "parseShort", args);
      return NULL;
    }

    static PyObject *t_Short_reverseBytes(PyTypeObject *type, PyObject *arg)
    {
      jshort a0;
      jshort result;

      if (!parseArg(arg, "S", &a0))
      {
        OBJ_CALL(result = ::java::lang::Short::reverseBytes(a0));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "reverseBytes", arg);
      return NULL;
    }

    static PyObject *t_Short_shortValue(t_Short *self, PyObject *args)
    {
      jshort result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.shortValue());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(Short), (PyObject *) self, "shortValue", args, 2);
    }

    static PyObject *t_Short_toString(t_Short *self, PyObject *args)
    {
      ::java::lang::String result((jobject) NULL);

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.toString());
        return j2p(result);
      }

      return callSuper(&PY_TYPE(Short), (PyObject *) self, "toString", args, 2);
    }

    static PyObject *t_Short_toString_(PyTypeObject *type, PyObject *args)
    {
      jshort a0;
      ::java::lang::String result((jobject) NULL);

      if (!parseArgs(args, "S", &a0))
      {
        OBJ_CALL(result = ::java::lang::Short::toString(a0));
        return j2p(result);
      }

      PyErr_SetArgsError(type, "toString_", args);
      return NULL;
    }

    static PyObject *t_Short_toUnsignedInt(PyTypeObject *type, PyObject *arg)
    {
      jshort a0;
      jint result;

      if (!parseArg(arg, "S", &a0))
      {
        OBJ_CALL(result = ::java::lang::Short::toUnsignedInt(a0));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "toUnsignedInt", arg);
      return NULL;
    }

    static PyObject *t_Short_toUnsignedLong(PyTypeObject *type, PyObject *arg)
    {
      jshort a0;
      jlong result;

      if (!parseArg(arg, "S", &a0))
      {
        OBJ_CALL(result = ::java::lang::Short::toUnsignedLong(a0));
        return PyLong_FromLongLong((PY_LONG_LONG) result);
      }

      PyErr_SetArgsError(type, "toUnsignedLong", arg);
      return NULL;
    }

    static PyObject *t_Short_valueOf(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jshort a0;
          Short result((jobject) NULL);

          if (!parseArgs(args, "S", &a0))
          {
            OBJ_CALL(result = ::java::lang::Short::valueOf(a0));
            return t_Short::wrap_Object(result);
          }
        }
        {
          ::java::lang::String a0((jobject) NULL);
          Short result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::java::lang::Short::valueOf(a0));
            return t_Short::wrap_Object(result);
          }
        }
        break;
       case 2:
        {
          ::java::lang::String a0((jobject) NULL);
          jint a1;
          Short result((jobject) NULL);

          if (!parseArgs(args, "sI", &a0, &a1))
          {
            OBJ_CALL(result = ::java::lang::Short::valueOf(a0, a1));
            return t_Short::wrap_Object(result);
          }
        }
      }

      PyErr_SetArgsError(type, "valueOf", args);
      return NULL;
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeParseException.h"
#include "java/lang/CharSequence.h"
#include "java/lang/String.h"
#include "org/apache/lucene/queryparser/flexible/messages/Message.h"
#include "java/lang/Throwable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {

            ::java::lang::Class *QueryNodeParseException::class$ = NULL;
            jmethodID *QueryNodeParseException::mids$ = NULL;
            bool QueryNodeParseException::live$ = false;

            jclass QueryNodeParseException::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/QueryNodeParseException");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_c5ec8ca4] = env->getMethodID(cls, "<init>", "(Ljava/lang/Throwable;)V");
                mids$[mid_init$_1dde9d59] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/flexible/messages/Message;)V");
                mids$[mid_init$_41dcc0ed] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/flexible/messages/Message;Ljava/lang/Throwable;)V");
                mids$[mid_getBeginColumn_54c6a179] = env->getMethodID(cls, "getBeginColumn", "()I");
                mids$[mid_getBeginLine_54c6a179] = env->getMethodID(cls, "getBeginLine", "()I");
                mids$[mid_getErrorToken_14c7b5c5] = env->getMethodID(cls, "getErrorToken", "()Ljava/lang/String;");
                mids$[mid_getQuery_e0adba2f] = env->getMethodID(cls, "getQuery", "()Ljava/lang/CharSequence;");
                mids$[mid_setNonLocalizedMessage_1dde9d59] = env->getMethodID(cls, "setNonLocalizedMessage", "(Lorg/apache/lucene/queryparser/flexible/messages/Message;)V");
                mids$[mid_setQuery_a8afc64a] = env->getMethodID(cls, "setQuery", "(Ljava/lang/CharSequence;)V");
                mids$[mid_setErrorToken_5fdc3f48] = env->getMethodID(cls, "setErrorToken", "(Ljava/lang/String;)V");
                mids$[mid_setBeginLine_39c7bd3c] = env->getMethodID(cls, "setBeginLine", "(I)V");
                mids$[mid_setBeginColumn_39c7bd3c] = env->getMethodID(cls, "setBeginColumn", "(I)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            QueryNodeParseException::QueryNodeParseException(const ::java::lang::Throwable & a0) : ::org::apache::lucene::queryparser::flexible::core::QueryNodeException(env->newObject(initializeClass, &mids$, mid_init$_c5ec8ca4, a0.this$)) {}

            QueryNodeParseException::QueryNodeParseException(const ::org::apache::lucene::queryparser::flexible::messages::Message & a0) : ::org::apache::lucene::queryparser::flexible::core::QueryNodeException(env->newObject(initializeClass, &mids$, mid_init$_1dde9d59, a0.this$)) {}

            QueryNodeParseException::QueryNodeParseException(const ::org::apache::lucene::queryparser::flexible::messages::Message & a0, const ::java::lang::Throwable & a1) : ::org::apache::lucene::queryparser::flexible::core::QueryNodeException(env->newObject(initializeClass, &mids$, mid_init$_41dcc0ed, a0.this$, a1.this$)) {}

            jint QueryNodeParseException::getBeginColumn() const
            {
              return env->callIntMethod(this$, mids$[mid_getBeginColumn_54c6a179]);
            }

            jint QueryNodeParseException::getBeginLine() const
            {
              return env->callIntMethod(this$, mids$[mid_getBeginLine_54c6a179]);
            }

            ::java::lang::String QueryNodeParseException::getErrorToken() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getErrorToken_14c7b5c5]));
            }

            ::java::lang::CharSequence QueryNodeParseException::getQuery() const
            {
              return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_getQuery_e0adba2f]));
            }

            void QueryNodeParseException::setNonLocalizedMessage(const ::org::apache::lucene::queryparser::flexible::messages::Message & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setNonLocalizedMessage_1dde9d59], a0.this$);
            }

            void QueryNodeParseException::setQuery(const ::java::lang::CharSequence & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setQuery_a8afc64a], a0.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            static PyObject *t_QueryNodeParseException_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_QueryNodeParseException_instance_(PyTypeObject *type, PyObject *arg);
            static int t_QueryNodeParseException_init_(t_QueryNodeParseException *self, PyObject *args, PyObject *kwds);
            static PyObject *t_QueryNodeParseException_getBeginColumn(t_QueryNodeParseException *self);
            static PyObject *t_QueryNodeParseException_getBeginLine(t_QueryNodeParseException *self);
            static PyObject *t_QueryNodeParseException_getErrorToken(t_QueryNodeParseException *self);
            static PyObject *t_QueryNodeParseException_getQuery(t_QueryNodeParseException *self);
            static PyObject *t_QueryNodeParseException_setNonLocalizedMessage(t_QueryNodeParseException *self, PyObject *arg);
            static PyObject *t_QueryNodeParseException_setQuery(t_QueryNodeParseException *self, PyObject *arg);
            static PyObject *t_QueryNodeParseException_get__beginColumn(t_QueryNodeParseException *self, void *data);
            static PyObject *t_QueryNodeParseException_get__beginLine(t_QueryNodeParseException *self, void *data);
            static PyObject *t_QueryNodeParseException_get__errorToken(t_QueryNodeParseException *self, void *data);
            static int t_QueryNodeParseException_set__nonLocalizedMessage(t_QueryNodeParseException *self, PyObject *arg, void *data);
            static PyObject *t_QueryNodeParseException_get__query(t_QueryNodeParseException *self, void *data);
            static int t_QueryNodeParseException_set__query(t_QueryNodeParseException *self, PyObject *arg, void *data);
            static PyGetSetDef t_QueryNodeParseException__fields_[] = {
              DECLARE_GET_FIELD(t_QueryNodeParseException, beginColumn),
              DECLARE_GET_FIELD(t_QueryNodeParseException, beginLine),
              DECLARE_GET_FIELD(t_QueryNodeParseException, errorToken),
              DECLARE_SET_FIELD(t_QueryNodeParseException, nonLocalizedMessage),
              DECLARE_GETSET_FIELD(t_QueryNodeParseException, query),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_QueryNodeParseException__methods_[] = {
              DECLARE_METHOD(t_QueryNodeParseException, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_QueryNodeParseException, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_QueryNodeParseException, getBeginColumn, METH_NOARGS),
              DECLARE_METHOD(t_QueryNodeParseException, getBeginLine, METH_NOARGS),
              DECLARE_METHOD(t_QueryNodeParseException, getErrorToken, METH_NOARGS),
              DECLARE_METHOD(t_QueryNodeParseException, getQuery, METH_NOARGS),
              DECLARE_METHOD(t_QueryNodeParseException, setNonLocalizedMessage, METH_O),
              DECLARE_METHOD(t_QueryNodeParseException, setQuery, METH_O),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(QueryNodeParseException, t_QueryNodeParseException, ::org::apache::lucene::queryparser::flexible::core::QueryNodeException, QueryNodeParseException, t_QueryNodeParseException_init_, 0, 0, t_QueryNodeParseException__fields_, 0, 0);

            void t_QueryNodeParseException::install(PyObject *module)
            {
              installType(&PY_TYPE(QueryNodeParseException), module, "QueryNodeParseException", 0);
            }

            void t_QueryNodeParseException::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(QueryNodeParseException).tp_dict, "class_", make_descriptor(QueryNodeParseException::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(QueryNodeParseException).tp_dict, "wrapfn_", make_descriptor(t_QueryNodeParseException::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(QueryNodeParseException).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_QueryNodeParseException_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, QueryNodeParseException::initializeClass, 1)))
                return NULL;
              return t_QueryNodeParseException::wrap_Object(QueryNodeParseException(((t_QueryNodeParseException *) arg)->object.this$));
            }
            static PyObject *t_QueryNodeParseException_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, QueryNodeParseException::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_QueryNodeParseException_init_(t_QueryNodeParseException *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 1:
                {
                  ::java::lang::Throwable a0((jobject) NULL);
                  QueryNodeParseException object((jobject) NULL);

                  if (!parseArgs(args, "k", ::java::lang::Throwable::initializeClass, &a0))
                  {
                    INT_CALL(object = QueryNodeParseException(a0));
                    self->object = object;
                    break;
                  }
                }
                {
                  ::org::apache::lucene::queryparser::flexible::messages::Message a0((jobject) NULL);
                  QueryNodeParseException object((jobject) NULL);

                  if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::messages::Message::initializeClass, &a0))
                  {
                    INT_CALL(object = QueryNodeParseException(a0));
                    self->object = object;
                    break;
                  }
                }
                goto err;
               case 2:
                {
                  ::org::apache::lucene::queryparser::flexible::messages::Message a0((jobject) NULL);
                  ::java::lang::Throwable a1((jobject) NULL);
                  QueryNodeParseException object((jobject) NULL);

                  if (!parseArgs(args, "kk", ::org::apache::lucene::queryparser::flexible::messages::Message::initializeClass, ::java::lang::Throwable::initializeClass, &a0, &a1))
                  {
                    INT_CALL(object = QueryNodeParseException(a0, a1));
                    self->object = object;
                    break;
                  }
                }
               default:
               err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_QueryNodeParseException_getBeginColumn(t_QueryNodeParseException *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getBeginColumn());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_QueryNodeParseException_getBeginLine(t_QueryNodeParseException *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getBeginLine());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_QueryNodeParseException_getErrorToken(t_QueryNodeParseException *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.getErrorToken());
              return j2p(result);
            }

            static PyObject *t_QueryNodeParseException_getQuery(t_QueryNodeParseException *self)
            {
              ::java::lang::CharSequence result((jobject) NULL);
              OBJ_CALL(result = self->object.getQuery());
              return ::java::lang::t_CharSequence::wrap_Object(result);
            }

            static PyObject *t_QueryNodeParseException_setNonLocalizedMessage(t_QueryNodeParseException *self, PyObject *arg)
            {
              ::org::apache::lucene::queryparser::flexible::messages::Message a0((jobject) NULL);

              if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::messages::Message::initializeClass, &a0))
              {
                OBJ_CALL(self->object.setNonLocalizedMessage(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setNonLocalizedMessage", arg);
              return NULL;
            }

            static PyObject *t_QueryNodeParseException_setQuery(t_QueryNodeParseException *self, PyObject *arg)
            {
              ::java::lang::CharSequence a0((jobject) NULL);

              if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
              {
                OBJ_CALL(self->object.setQuery(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setQuery", arg);
              return NULL;
            }

            static PyObject *t_QueryNodeParseException_get__beginColumn(t_QueryNodeParseException *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getBeginColumn());
              return PyInt_FromLong((long) value);
            }

            static PyObject *t_QueryNodeParseException_get__beginLine(t_QueryNodeParseException *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getBeginLine());
              return PyInt_FromLong((long) value);
            }

            static PyObject *t_QueryNodeParseException_get__errorToken(t_QueryNodeParseException *self, void *data)
            {
              ::java::lang::String value((jobject) NULL);
              OBJ_CALL(value = self->object.getErrorToken());
              return j2p(value);
            }

            static int t_QueryNodeParseException_set__nonLocalizedMessage(t_QueryNodeParseException *self, PyObject *arg, void *data)
            {
              {
                ::org::apache::lucene::queryparser::flexible::messages::Message value((jobject) NULL);
                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::messages::Message::initializeClass, &value))
                {
                  INT_CALL(self->object.setNonLocalizedMessage(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "nonLocalizedMessage", arg);
              return -1;
            }

            static PyObject *t_QueryNodeParseException_get__query(t_QueryNodeParseException *self, void *data)
            {
              ::java::lang::CharSequence value((jobject) NULL);
              OBJ_CALL(value = self->object.getQuery());
              return ::java::lang::t_CharSequence::wrap_Object(value);
            }
            static int t_QueryNodeParseException_set__query(t_QueryNodeParseException *self, PyObject *arg, void *data)
            {
              {
                ::java::lang::CharSequence value((jobject) NULL);
                if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &value))
                {
                  INT_CALL(self->object.setQuery(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "query", arg);
              return -1;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/parser/Token.h"
#include "java/io/Serializable.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace parser {

              ::java::lang::Class *Token::class$ = NULL;
              jmethodID *Token::mids$ = NULL;
              jfieldID *Token::fids$ = NULL;
              bool Token::live$ = false;

              jclass Token::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/parser/Token");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
                  mids$[mid_init$_d40a4f2e] = env->getMethodID(cls, "<init>", "(ILjava/lang/String;)V");
                  mids$[mid_getValue_846352c3] = env->getMethodID(cls, "getValue", "()Ljava/lang/Object;");
                  mids$[mid_newToken_24cc8f6e] = env->getStaticMethodID(cls, "newToken", "(I)Lorg/apache/lucene/queryparser/flexible/standard/parser/Token;");
                  mids$[mid_newToken_b48de57c] = env->getStaticMethodID(cls, "newToken", "(ILjava/lang/String;)Lorg/apache/lucene/queryparser/flexible/standard/parser/Token;");
                  mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                  fids$ = new jfieldID[max_fid];
                  fids$[fid_beginColumn] = env->getFieldID(cls, "beginColumn", "I");
                  fids$[fid_beginLine] = env->getFieldID(cls, "beginLine", "I");
                  fids$[fid_endColumn] = env->getFieldID(cls, "endColumn", "I");
                  fids$[fid_endLine] = env->getFieldID(cls, "endLine", "I");
                  fids$[fid_image] = env->getFieldID(cls, "image", "Ljava/lang/String;");
                  fids$[fid_kind] = env->getFieldID(cls, "kind", "I");
                  fids$[fid_next] = env->getFieldID(cls, "next", "Lorg/apache/lucene/queryparser/flexible/standard/parser/Token;");
                  fids$[fid_specialToken] = env->getFieldID(cls, "specialToken", "Lorg/apache/lucene/queryparser/flexible/standard/parser/Token;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              Token::Token() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              Token::Token(jint a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

              Token::Token(jint a0, const ::java::lang::String & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_d40a4f2e, a0, a1.this$)) {}

              ::java::lang::Object Token::getValue() const
              {
                return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_getValue_846352c3]));
              }

              Token Token::newToken(jint a0)
              {
                jclass cls = env->getClass(initializeClass);
                return Token(env->callStaticObjectMethod(cls, mids$[mid_newToken_24cc8f6e], a0));
              }

              Token Token::newToken(jint a0, const ::java::lang::String & a1)
              {
                jclass cls = env->getClass(initializeClass);
                return Token(env->callStaticObjectMethod(cls, mids$[mid_newToken_b48de57c], a0, a1.this$));
              }

              ::java::lang::String Token::toString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
              }

              jint Token::_get_beginColumn() const
              {
                return env->getIntField(this$, fids$[fid_beginColumn]);
              }

              void Token::_set_beginColumn(jint a0) const
              {
                env->setIntField(this$, fids$[fid_beginColumn], a0);
              }

              jint Token::_get_beginLine() const
              {
                return env->getIntField(this$, fids$[fid_beginLine]);
              }

              void Token::_set_beginLine(jint a0) const
              {
                env->setIntField(this$, fids$[fid_beginLine], a0);
              }

              jint Token::_get_endColumn() const
              {
                return env->getIntField(this$, fids$[fid_endColumn]);
              }

              void Token::_set_endColumn(jint a0) const
              {
                env->setIntField(this$, fids$[fid_endColumn], a0);
              }

              jint Token::_get_endLine() const
              {
                return env->getIntField(this$, fids$[fid_endLine]);
              }

              void Token::_set_endLine(jint a0) const
              {
                env->setIntField(this$, fids$[fid_endLine], a0);
              }

              ::java::lang::String Token::_get_image() const
              {
                return ::java::lang::String(env->getObjectField(this$, fids$[fid_image]));
              }

              void Token::_set_image(const ::java::lang::String & a0) const
              {
                env->setObjectField(this$, fids$[fid_image], a0.this$);
              }

              jint Token::_get_kind() const
              {
                return env->getIntField(this$, fids$[fid_kind]);
              }

              void Token::_set_kind(jint a0) const
              {
                env->setIntField(this$, fids$[fid_kind], a0);
              }

              Token Token::_get_next() const
              {
                return Token(env->getObjectField(this$, fids$[fid_next]));
              }

              void Token::_set_next(const Token & a0) const
              {
                env->setObjectField(this$, fids$[fid_next], a0.this$);
              }

              Token Token::_get_specialToken() const
              {
                return Token(env->getObjectField(this$, fids$[fid_specialToken]));
              }

              void Token::_set_specialToken(const Token & a0) const
              {
                env->setObjectField(this$, fids$[fid_specialToken], a0.this$);
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace parser {
              static PyObject *t_Token_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_Token_instance_(PyTypeObject *type, PyObject *arg);
              static int t_Token_init_(t_Token *self, PyObject *args, PyObject *kwds);
              static PyObject *t_Token_getValue(t_Token *self);
              static PyObject *t_Token_newToken(PyTypeObject *type, PyObject *args);
              static PyObject *t_Token_toString(t_Token *self, PyObject *args);
              static PyObject *t_Token_get__beginColumn(t_Token *self, void *data);
              static int t_Token_set__beginColumn(t_Token *self, PyObject *arg, void *data);
              static PyObject *t_Token_get__beginLine(t_Token *self, void *data);
              static int t_Token_set__beginLine(t_Token *self, PyObject *arg, void *data);
              static PyObject *t_Token_get__endColumn(t_Token *self, void *data);
              static int t_Token_set__endColumn(t_Token *self, PyObject *arg, void *data);
              static PyObject *t_Token_get__endLine(t_Token *self, void *data);
              static int t_Token_set__endLine(t_Token *self, PyObject *arg, void *data);
              static PyObject *t_Token_get__image(t_Token *self, void *data);
              static int t_Token_set__image(t_Token *self, PyObject *arg, void *data);
              static PyObject *t_Token_get__kind(t_Token *self, void *data);
              static int t_Token_set__kind(t_Token *self, PyObject *arg, void *data);
              static PyObject *t_Token_get__next(t_Token *self, void *data);
              static int t_Token_set__next(t_Token *self, PyObject *arg, void *data);
              static PyObject *t_Token_get__specialToken(t_Token *self, void *data);
              static int t_Token_set__specialToken(t_Token *self, PyObject *arg, void *data);

              static PyObject *t_Token_get__value(t_Token *self, void *data);
              static PyGetSetDef t_Token__fields_[] = {
                DECLARE_GETSET_FIELD(t_Token, beginColumn),
                DECLARE_GETSET_FIELD(t_Token, beginLine),
                DECLARE_GETSET_FIELD(t_Token, endColumn),
                DECLARE_GETSET_FIELD(t_Token, endLine),
                DECLARE_GETSET_FIELD(t_Token, image),
                DECLARE_GETSET_FIELD(t_Token, kind),
                DECLARE_GETSET_FIELD(t_Token, next),
                DECLARE_GETSET_FIELD(t_Token, specialToken),
                DECLARE_GET_FIELD(t_Token, value),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_Token__methods_[] = {
                DECLARE_METHOD(t_Token, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_Token, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_Token, getValue, METH_NOARGS),
                DECLARE_METHOD(t_Token, newToken, METH_VARARGS | METH_CLASS),
                DECLARE_METHOD(t_Token, toString, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(Token, t_Token, ::java::lang::Object, Token, t_Token_init_, 0, 0, t_Token__fields_, 0, 0);

              void t_Token::install(PyObject *module)
              {
                installType(&PY_TYPE(Token), module, "Token", 0);
              }

              void t_Token::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(Token).tp_dict, "class_", make_descriptor(Token::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(Token).tp_dict, "wrapfn_", make_descriptor(t_Token::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(Token).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_Token_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, Token::initializeClass, 1)))
                  return NULL;
                return t_Token::wrap_Object(Token(((t_Token *) arg)->object.this$));
              }
              static PyObject *t_Token_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, Token::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_Token_init_(t_Token *self, PyObject *args, PyObject *kwds)
              {
                switch (PyTuple_GET_SIZE(args)) {
                 case 0:
                  {
                    Token object((jobject) NULL);

                    INT_CALL(object = Token());
                    self->object = object;
                    break;
                  }
                  goto err;
                 case 1:
                  {
                    jint a0;
                    Token object((jobject) NULL);

                    if (!parseArgs(args, "I", &a0))
                    {
                      INT_CALL(object = Token(a0));
                      self->object = object;
                      break;
                    }
                  }
                  goto err;
                 case 2:
                  {
                    jint a0;
                    ::java::lang::String a1((jobject) NULL);
                    Token object((jobject) NULL);

                    if (!parseArgs(args, "Is", &a0, &a1))
                    {
                      INT_CALL(object = Token(a0, a1));
                      self->object = object;
                      break;
                    }
                  }
                 default:
                 err:
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_Token_getValue(t_Token *self)
              {
                ::java::lang::Object result((jobject) NULL);
                OBJ_CALL(result = self->object.getValue());
                return ::java::lang::t_Object::wrap_Object(result);
              }

              static PyObject *t_Token_newToken(PyTypeObject *type, PyObject *args)
              {
                switch (PyTuple_GET_SIZE(args)) {
                 case 1:
                  {
                    jint a0;
                    Token result((jobject) NULL);

                    if (!parseArgs(args, "I", &a0))
                    {
                      OBJ_CALL(result = ::org::apache::lucene::queryparser::flexible::standard::parser::Token::newToken(a0));
                      return t_Token::wrap_Object(result);
                    }
                  }
                  break;
                 case 2:
                  {
                    jint a0;
                    ::java::lang::String a1((jobject) NULL);
                    Token result((jobject) NULL);

                    if (!parseArgs(args, "Is", &a0, &a1))
                    {
                      OBJ_CALL(result = ::org::apache::lucene::queryparser::flexible::standard::parser::Token::newToken(a0, a1));
                      return t_Token::wrap_Object(result);
                    }
                  }
                }

                PyErr_SetArgsError(type, "newToken", args);
                return NULL;
              }

              static PyObject *t_Token_toString(t_Token *self, PyObject *args)
              {
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.toString());
                  return j2p(result);
                }

                return callSuper(&PY_TYPE(Token), (PyObject *) self, "toString", args, 2);
              }

              static PyObject *t_Token_get__beginColumn(t_Token *self, void *data)
              {
                jint value;
                OBJ_CALL(value = self->object._get_beginColumn());
                return PyInt_FromLong((long) value);
              }
              static int t_Token_set__beginColumn(t_Token *self, PyObject *arg, void *data)
              {
                jint value;
                if (!parseArg(arg, "I", &value))
                {
                  INT_CALL(self->object._set_beginColumn(value));
                  return 0;
                }
                PyErr_SetArgsError((PyObject *) self, "beginColumn", arg);
                return -1;
              }

              static PyObject *t_Token_get__beginLine(t_Token *self, void *data)
              {
                jint value;
                OBJ_CALL(value = self->object._get_beginLine());
                return PyInt_FromLong((long) value);
              }
              static int t_Token_set__beginLine(t_Token *self, PyObject *arg, void *data)
              {
                jint value;
                if (!parseArg(arg, "I", &value))
                {
                  INT_CALL(self->object._set_beginLine(value));
                  return 0;
                }
                PyErr_SetArgsError((PyObject *) self, "beginLine", arg);
                return -1;
              }

              static PyObject *t_Token_get__endColumn(t_Token *self, void *data)
              {
                jint value;
                OBJ_CALL(value = self->object._get_endColumn());
                return PyInt_FromLong((long) value);
              }
              static int t_Token_set__endColumn(t_Token *self, PyObject *arg, void *data)
              {
                jint value;
                if (!parseArg(arg, "I", &value))
                {
                  INT_CALL(self->object._set_endColumn(value));
                  return 0;
                }
                PyErr_SetArgsError((PyObject *) self, "endColumn", arg);
                return -1;
              }

              static PyObject *t_Token_get__endLine(t_Token *self, void *data)
              {
                jint value;
                OBJ_CALL(value = self->object._get_endLine());
                return PyInt_FromLong((long) value);
              }
              static int t_Token_set__endLine(t_Token *self, PyObject *arg, void *data)
              {
                jint value;
                if (!parseArg(arg, "I", &value))
                {
                  INT_CALL(self->object._set_endLine(value));
                  return 0;
                }
                PyErr_SetArgsError((PyObject *) self, "endLine", arg);
                return -1;
              }

              static PyObject *t_Token_get__image(t_Token *self, void *data)
              {
                ::java::lang::String value((jobject) NULL);
                OBJ_CALL(value = self->object._get_image());
                return j2p(value);
              }
              static int t_Token_set__image(t_Token *self, PyObject *arg, void *data)
              {
                ::java::lang::String value((jobject) NULL);
                if (!parseArg(arg, "s", &value))
                {
                  INT_CALL(self->object._set_image(value));
                  return 0;
                }
                PyErr_SetArgsError((PyObject *) self, "image", arg);
                return -1;
              }

              static PyObject *t_Token_get__kind(t_Token *self, void *data)
              {
                jint value;
                OBJ_CALL(value = self->object._get_kind());
                return PyInt_FromLong((long) value);
              }
              static int t_Token_set__kind(t_Token *self, PyObject *arg, void *data)
              {
                jint value;
                if (!parseArg(arg, "I", &value))
                {
                  INT_CALL(self->object._set_kind(value));
                  return 0;
                }
                PyErr_SetArgsError((PyObject *) self, "kind", arg);
                return -1;
              }

              static PyObject *t_Token_get__next(t_Token *self, void *data)
              {
                Token value((jobject) NULL);
                OBJ_CALL(value = self->object._get_next());
                return t_Token::wrap_Object(value);
              }
              static int t_Token_set__next(t_Token *self, PyObject *arg, void *data)
              {
                Token value((jobject) NULL);
                if (!parseArg(arg, "k", Token::initializeClass, &value))
                {
                  INT_CALL(self->object._set_next(value));
                  return 0;
                }
                PyErr_SetArgsError((PyObject *) self, "next", arg);
                return -1;
              }

              static PyObject *t_Token_get__specialToken(t_Token *self, void *data)
              {
                Token value((jobject) NULL);
                OBJ_CALL(value = self->object._get_specialToken());
                return t_Token::wrap_Object(value);
              }
              static int t_Token_set__specialToken(t_Token *self, PyObject *arg, void *data)
              {
                Token value((jobject) NULL);
                if (!parseArg(arg, "k", Token::initializeClass, &value))
                {
                  INT_CALL(self->object._set_specialToken(value));
                  return 0;
                }
                PyErr_SetArgsError((PyObject *) self, "specialToken", arg);
                return -1;
              }

              static PyObject *t_Token_get__value(t_Token *self, void *data)
              {
                ::java::lang::Object value((jobject) NULL);
                OBJ_CALL(value = self->object.getValue());
                return ::java::lang::t_Object::wrap_Object(value);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/LogMergePolicy.h"
#include "org/apache/lucene/index/SegmentCommitInfo.h"
#include "org/apache/lucene/index/SegmentInfos.h"
#include "org/apache/lucene/index/MergePolicy$MergeSpecification.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/IndexWriter.h"
#include "java/lang/Boolean.h"
#include "org/apache/lucene/index/MergeTrigger.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *LogMergePolicy::class$ = NULL;
        jmethodID *LogMergePolicy::mids$ = NULL;
        bool LogMergePolicy::live$ = false;
        jint LogMergePolicy::DEFAULT_MAX_MERGE_DOCS = (jint) 0;
        jint LogMergePolicy::DEFAULT_MERGE_FACTOR = (jint) 0;
        jdouble LogMergePolicy::DEFAULT_NO_CFS_RATIO = (jdouble) 0;
        jdouble LogMergePolicy::LEVEL_LOG_SPAN = (jdouble) 0;

        jclass LogMergePolicy::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/LogMergePolicy");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_findForcedDeletesMerges_581dbc49] = env->getMethodID(cls, "findForcedDeletesMerges", "(Lorg/apache/lucene/index/SegmentInfos;Lorg/apache/lucene/index/IndexWriter;)Lorg/apache/lucene/index/MergePolicy$MergeSpecification;");
            mids$[mid_findForcedMerges_4fe4a5b5] = env->getMethodID(cls, "findForcedMerges", "(Lorg/apache/lucene/index/SegmentInfos;ILjava/util/Map;Lorg/apache/lucene/index/IndexWriter;)Lorg/apache/lucene/index/MergePolicy$MergeSpecification;");
            mids$[mid_findMerges_cada0df0] = env->getMethodID(cls, "findMerges", "(Lorg/apache/lucene/index/MergeTrigger;Lorg/apache/lucene/index/SegmentInfos;Lorg/apache/lucene/index/IndexWriter;)Lorg/apache/lucene/index/MergePolicy$MergeSpecification;");
            mids$[mid_getCalibrateSizeByDeletes_54c6a16a] = env->getMethodID(cls, "getCalibrateSizeByDeletes", "()Z");
            mids$[mid_getMaxMergeDocs_54c6a179] = env->getMethodID(cls, "getMaxMergeDocs", "()I");
            mids$[mid_getMergeFactor_54c6a179] = env->getMethodID(cls, "getMergeFactor", "()I");
            mids$[mid_setCalibrateSizeByDeletes_bb0c767f] = env->getMethodID(cls, "setCalibrateSizeByDeletes", "(Z)V");
            mids$[mid_setMaxMergeDocs_39c7bd3c] = env->getMethodID(cls, "setMaxMergeDocs", "(I)V");
            mids$[mid_setMergeFactor_39c7bd3c] = env->getMethodID(cls, "setMergeFactor", "(I)V");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
            mids$[mid_message_dcbb03ef] = env->getMethodID(cls, "message", "(Ljava/lang/String;Lorg/apache/lucene/index/IndexWriter;)V");
            mids$[mid_isMerged_2ee943c8] = env->getMethodID(cls, "isMerged", "(Lorg/apache/lucene/index/SegmentInfos;ILjava/util/Map;Lorg/apache/lucene/index/IndexWriter;)Z");
            mids$[mid_sizeDocs_5454cb07] = env->getMethodID(cls, "sizeDocs", "(Lorg/apache/lucene/index/SegmentCommitInfo;Lorg/apache/lucene/index/IndexWriter;)J");
            mids$[mid_sizeBytes_5454cb07] = env->getMethodID(cls, "sizeBytes", "(Lorg/apache/lucene/index/SegmentCommitInfo;Lorg/apache/lucene/index/IndexWriter;)J");
            mids$[mid_verbose_4f2fb7d9] = env->getMethodID(cls, "verbose", "(Lorg/apache/lucene/index/IndexWriter;)Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            DEFAULT_MAX_MERGE_DOCS = env->getStaticIntField(cls, "DEFAULT_MAX_MERGE_DOCS");
            DEFAULT_MERGE_FACTOR = env->getStaticIntField(cls, "DEFAULT_MERGE_FACTOR");
            DEFAULT_NO_CFS_RATIO = env->getStaticDoubleField(cls, "DEFAULT_NO_CFS_RATIO");
            LEVEL_LOG_SPAN = env->getStaticDoubleField(cls, "LEVEL_LOG_SPAN");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        LogMergePolicy::LogMergePolicy() : ::org::apache::lucene::index::MergePolicy(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        ::org::apache::lucene::index::MergePolicy$MergeSpecification LogMergePolicy::findForcedDeletesMerges(const ::org::apache::lucene::index::SegmentInfos & a0, const ::org::apache::lucene::index::IndexWriter & a1) const
        {
          return ::org::apache::lucene::index::MergePolicy$MergeSpecification(env->callObjectMethod(this$, mids$[mid_findForcedDeletesMerges_581dbc49], a0.this$, a1.this$));
        }

        ::org::apache::lucene::index::MergePolicy$MergeSpecification LogMergePolicy::findForcedMerges(const ::org::apache::lucene::index::SegmentInfos & a0, jint a1, const ::java::util::Map & a2, const ::org::apache::lucene::index::IndexWriter & a3) const
        {
          return ::org::apache::lucene::index::MergePolicy$MergeSpecification(env->callObjectMethod(this$, mids$[mid_findForcedMerges_4fe4a5b5], a0.this$, a1, a2.this$, a3.this$));
        }

        ::org::apache::lucene::index::MergePolicy$MergeSpecification LogMergePolicy::findMerges(const ::org::apache::lucene::index::MergeTrigger & a0, const ::org::apache::lucene::index::SegmentInfos & a1, const ::org::apache::lucene::index::IndexWriter & a2) const
        {
          return ::org::apache::lucene::index::MergePolicy$MergeSpecification(env->callObjectMethod(this$, mids$[mid_findMerges_cada0df0], a0.this$, a1.this$, a2.this$));
        }

        jboolean LogMergePolicy::getCalibrateSizeByDeletes() const
        {
          return env->callBooleanMethod(this$, mids$[mid_getCalibrateSizeByDeletes_54c6a16a]);
        }

        jint LogMergePolicy::getMaxMergeDocs() const
        {
          return env->callIntMethod(this$, mids$[mid_getMaxMergeDocs_54c6a179]);
        }

        jint LogMergePolicy::getMergeFactor() const
        {
          return env->callIntMethod(this$, mids$[mid_getMergeFactor_54c6a179]);
        }

        void LogMergePolicy::setCalibrateSizeByDeletes(jboolean a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setCalibrateSizeByDeletes_bb0c767f], a0);
        }

        void LogMergePolicy::setMaxMergeDocs(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setMaxMergeDocs_39c7bd3c], a0);
        }

        void LogMergePolicy::setMergeFactor(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setMergeFactor_39c7bd3c], a0);
        }

        ::java::lang::String LogMergePolicy::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_LogMergePolicy_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_LogMergePolicy_instance_(PyTypeObject *type, PyObject *arg);
        static int t_LogMergePolicy_init_(t_LogMergePolicy *self, PyObject *args, PyObject *kwds);
        static PyObject *t_LogMergePolicy_findForcedDeletesMerges(t_LogMergePolicy *self, PyObject *args);
        static PyObject *t_LogMergePolicy_findForcedMerges(t_LogMergePolicy *self, PyObject *args);
        static PyObject *t_LogMergePolicy_findMerges(t_LogMergePolicy *self, PyObject *args);
        static PyObject *t_LogMergePolicy_getCalibrateSizeByDeletes(t_LogMergePolicy *self);
        static PyObject *t_LogMergePolicy_getMaxMergeDocs(t_LogMergePolicy *self);
        static PyObject *t_LogMergePolicy_getMergeFactor(t_LogMergePolicy *self);
        static PyObject *t_LogMergePolicy_setCalibrateSizeByDeletes(t_LogMergePolicy *self, PyObject *arg);
        static PyObject *t_LogMergePolicy_setMaxMergeDocs(t_LogMergePolicy *self, PyObject *arg);
        static PyObject *t_LogMergePolicy_setMergeFactor(t_LogMergePolicy *self, PyObject *arg);
        static PyObject *t_LogMergePolicy_toString(t_LogMergePolicy *self, PyObject *args);
        static PyObject *t_LogMergePolicy_get__calibrateSizeByDeletes(t_LogMergePolicy *self, void *data);
        static int t_LogMergePolicy_set__calibrateSizeByDeletes(t_LogMergePolicy *self, PyObject *arg, void *data);
        static PyObject *t_LogMergePolicy_get__maxMergeDocs(t_LogMergePolicy *self, void *data);
        static int t_LogMergePolicy_set__maxMergeDocs(t_LogMergePolicy *self, PyObject *arg, void *data);
        static PyObject *t_LogMergePolicy_get__mergeFactor(t_LogMergePolicy *self, void *data);
        static int t_LogMergePolicy_set__mergeFactor(t_LogMergePolicy *self, PyObject *arg, void *data);
        static PyGetSetDef t_LogMergePolicy__fields_[] = {
          DECLARE_GETSET_FIELD(t_LogMergePolicy, calibrateSizeByDeletes),
          DECLARE_GETSET_FIELD(t_LogMergePolicy, maxMergeDocs),
          DECLARE_GETSET_FIELD(t_LogMergePolicy, mergeFactor),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_LogMergePolicy__methods_[] = {
          DECLARE_METHOD(t_LogMergePolicy, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LogMergePolicy, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LogMergePolicy, findForcedDeletesMerges, METH_VARARGS),
          DECLARE_METHOD(t_LogMergePolicy, findForcedMerges, METH_VARARGS),
          DECLARE_METHOD(t_LogMergePolicy, findMerges, METH_VARARGS),
          DECLARE_METHOD(t_LogMergePolicy, getCalibrateSizeByDeletes, METH_NOARGS),
          DECLARE_METHOD(t_LogMergePolicy, getMaxMergeDocs, METH_NOARGS),
          DECLARE_METHOD(t_LogMergePolicy, getMergeFactor, METH_NOARGS),
          DECLARE_METHOD(t_LogMergePolicy, setCalibrateSizeByDeletes, METH_O),
          DECLARE_METHOD(t_LogMergePolicy, setMaxMergeDocs, METH_O),
          DECLARE_METHOD(t_LogMergePolicy, setMergeFactor, METH_O),
          DECLARE_METHOD(t_LogMergePolicy, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(LogMergePolicy, t_LogMergePolicy, ::org::apache::lucene::index::MergePolicy, LogMergePolicy, t_LogMergePolicy_init_, 0, 0, t_LogMergePolicy__fields_, 0, 0);

        void t_LogMergePolicy::install(PyObject *module)
        {
          installType(&PY_TYPE(LogMergePolicy), module, "LogMergePolicy", 0);
        }

        void t_LogMergePolicy::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(LogMergePolicy).tp_dict, "class_", make_descriptor(LogMergePolicy::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(LogMergePolicy).tp_dict, "wrapfn_", make_descriptor(t_LogMergePolicy::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(LogMergePolicy).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(LogMergePolicy::initializeClass);
          PyDict_SetItemString(PY_TYPE(LogMergePolicy).tp_dict, "DEFAULT_MAX_MERGE_DOCS", make_descriptor(LogMergePolicy::DEFAULT_MAX_MERGE_DOCS));
          PyDict_SetItemString(PY_TYPE(LogMergePolicy).tp_dict, "DEFAULT_MERGE_FACTOR", make_descriptor(LogMergePolicy::DEFAULT_MERGE_FACTOR));
          PyDict_SetItemString(PY_TYPE(LogMergePolicy).tp_dict, "DEFAULT_NO_CFS_RATIO", make_descriptor(LogMergePolicy::DEFAULT_NO_CFS_RATIO));
          PyDict_SetItemString(PY_TYPE(LogMergePolicy).tp_dict, "LEVEL_LOG_SPAN", make_descriptor(LogMergePolicy::LEVEL_LOG_SPAN));
        }

        static PyObject *t_LogMergePolicy_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, LogMergePolicy::initializeClass, 1)))
            return NULL;
          return t_LogMergePolicy::wrap_Object(LogMergePolicy(((t_LogMergePolicy *) arg)->object.this$));
        }
        static PyObject *t_LogMergePolicy_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, LogMergePolicy::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_LogMergePolicy_init_(t_LogMergePolicy *self, PyObject *args, PyObject *kwds)
        {
          LogMergePolicy object((jobject) NULL);

          INT_CALL(object = LogMergePolicy());
          self->object = object;

          return 0;
        }

        static PyObject *t_LogMergePolicy_findForcedDeletesMerges(t_LogMergePolicy *self, PyObject *args)
        {
          ::org::apache::lucene::index::SegmentInfos a0((jobject) NULL);
          ::org::apache::lucene::index::IndexWriter a1((jobject) NULL);
          ::org::apache::lucene::index::MergePolicy$MergeSpecification result((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::index::SegmentInfos::initializeClass, ::org::apache::lucene::index::IndexWriter::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.findForcedDeletesMerges(a0, a1));
            return ::org::apache::lucene::index::t_MergePolicy$MergeSpecification::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(LogMergePolicy), (PyObject *) self, "findForcedDeletesMerges", args, 2);
        }

        static PyObject *t_LogMergePolicy_findForcedMerges(t_LogMergePolicy *self, PyObject *args)
        {
          ::org::apache::lucene::index::SegmentInfos a0((jobject) NULL);
          jint a1;
          ::java::util::Map a2((jobject) NULL);
          PyTypeObject **p2;
          ::org::apache::lucene::index::IndexWriter a3((jobject) NULL);
          ::org::apache::lucene::index::MergePolicy$MergeSpecification result((jobject) NULL);

          if (!parseArgs(args, "kIKk", ::org::apache::lucene::index::SegmentInfos::initializeClass, ::java::util::Map::initializeClass, ::org::apache::lucene::index::IndexWriter::initializeClass, &a0, &a1, &a2, &p2, ::java::util::t_Map::parameters_, &a3))
          {
            OBJ_CALL(result = self->object.findForcedMerges(a0, a1, a2, a3));
            return ::org::apache::lucene::index::t_MergePolicy$MergeSpecification::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(LogMergePolicy), (PyObject *) self, "findForcedMerges", args, 2);
        }

        static PyObject *t_LogMergePolicy_findMerges(t_LogMergePolicy *self, PyObject *args)
        {
          ::org::apache::lucene::index::MergeTrigger a0((jobject) NULL);
          PyTypeObject **p0;
          ::org::apache::lucene::index::SegmentInfos a1((jobject) NULL);
          ::org::apache::lucene::index::IndexWriter a2((jobject) NULL);
          ::org::apache::lucene::index::MergePolicy$MergeSpecification result((jobject) NULL);

          if (!parseArgs(args, "Kkk", ::org::apache::lucene::index::MergeTrigger::initializeClass, ::org::apache::lucene::index::SegmentInfos::initializeClass, ::org::apache::lucene::index::IndexWriter::initializeClass, &a0, &p0, ::org::apache::lucene::index::t_MergeTrigger::parameters_, &a1, &a2))
          {
            OBJ_CALL(result = self->object.findMerges(a0, a1, a2));
            return ::org::apache::lucene::index::t_MergePolicy$MergeSpecification::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(LogMergePolicy), (PyObject *) self, "findMerges", args, 2);
        }

        static PyObject *t_LogMergePolicy_getCalibrateSizeByDeletes(t_LogMergePolicy *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.getCalibrateSizeByDeletes());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_LogMergePolicy_getMaxMergeDocs(t_LogMergePolicy *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getMaxMergeDocs());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_LogMergePolicy_getMergeFactor(t_LogMergePolicy *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getMergeFactor());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_LogMergePolicy_setCalibrateSizeByDeletes(t_LogMergePolicy *self, PyObject *arg)
        {
          jboolean a0;

          if (!parseArg(arg, "Z", &a0))
          {
            OBJ_CALL(self->object.setCalibrateSizeByDeletes(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setCalibrateSizeByDeletes", arg);
          return NULL;
        }

        static PyObject *t_LogMergePolicy_setMaxMergeDocs(t_LogMergePolicy *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.setMaxMergeDocs(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setMaxMergeDocs", arg);
          return NULL;
        }

        static PyObject *t_LogMergePolicy_setMergeFactor(t_LogMergePolicy *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.setMergeFactor(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setMergeFactor", arg);
          return NULL;
        }

        static PyObject *t_LogMergePolicy_toString(t_LogMergePolicy *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(LogMergePolicy), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_LogMergePolicy_get__calibrateSizeByDeletes(t_LogMergePolicy *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.getCalibrateSizeByDeletes());
          Py_RETURN_BOOL(value);
        }
        static int t_LogMergePolicy_set__calibrateSizeByDeletes(t_LogMergePolicy *self, PyObject *arg, void *data)
        {
          {
            jboolean value;
            if (!parseArg(arg, "Z", &value))
            {
              INT_CALL(self->object.setCalibrateSizeByDeletes(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "calibrateSizeByDeletes", arg);
          return -1;
        }

        static PyObject *t_LogMergePolicy_get__maxMergeDocs(t_LogMergePolicy *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getMaxMergeDocs());
          return PyInt_FromLong((long) value);
        }
        static int t_LogMergePolicy_set__maxMergeDocs(t_LogMergePolicy *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setMaxMergeDocs(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "maxMergeDocs", arg);
          return -1;
        }

        static PyObject *t_LogMergePolicy_get__mergeFactor(t_LogMergePolicy *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getMergeFactor());
          return PyInt_FromLong((long) value);
        }
        static int t_LogMergePolicy_set__mergeFactor(t_LogMergePolicy *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setMergeFactor(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "mergeFactor", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/ValueSourceScorer.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {

          ::java::lang::Class *ValueSourceScorer::class$ = NULL;
          jmethodID *ValueSourceScorer::mids$ = NULL;
          bool ValueSourceScorer::live$ = false;

          jclass ValueSourceScorer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/ValueSourceScorer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_advance_39c7bd23] = env->getMethodID(cls, "advance", "(I)I");
              mids$[mid_cost_54c6a17a] = env->getMethodID(cls, "cost", "()J");
              mids$[mid_docID_54c6a179] = env->getMethodID(cls, "docID", "()I");
              mids$[mid_freq_54c6a179] = env->getMethodID(cls, "freq", "()I");
              mids$[mid_getReader_94bbd010] = env->getMethodID(cls, "getReader", "()Lorg/apache/lucene/index/IndexReader;");
              mids$[mid_matches_39c7bd30] = env->getMethodID(cls, "matches", "(I)Z");
              mids$[mid_matchesValue_39c7bd30] = env->getMethodID(cls, "matchesValue", "(I)Z");
              mids$[mid_nextDoc_54c6a179] = env->getMethodID(cls, "nextDoc", "()I");
              mids$[mid_score_54c6a176] = env->getMethodID(cls, "score", "()F");
              mids$[mid_setCheckDeletes_bb0c767f] = env->getMethodID(cls, "setCheckDeletes", "(Z)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jint ValueSourceScorer::advance(jint a0) const
          {
            return env->callIntMethod(this$, mids$[mid_advance_39c7bd23], a0);
          }

          jlong ValueSourceScorer::cost() const
          {
            return env->callLongMethod(this$, mids$[mid_cost_54c6a17a]);
          }

          jint ValueSourceScorer::docID() const
          {
            return env->callIntMethod(this$, mids$[mid_docID_54c6a179]);
          }

          jint ValueSourceScorer::freq() const
          {
            return env->callIntMethod(this$, mids$[mid_freq_54c6a179]);
          }

          ::org::apache::lucene::index::IndexReader ValueSourceScorer::getReader() const
          {
            return ::org::apache::lucene::index::IndexReader(env->callObjectMethod(this$, mids$[mid_getReader_94bbd010]));
          }

          jboolean ValueSourceScorer::matches(jint a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_matches_39c7bd30], a0);
          }

          jboolean ValueSourceScorer::matchesValue(jint a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_matchesValue_39c7bd30], a0);
          }

          jint ValueSourceScorer::nextDoc() const
          {
            return env->callIntMethod(this$, mids$[mid_nextDoc_54c6a179]);
          }

          jfloat ValueSourceScorer::score() const
          {
            return env->callFloatMethod(this$, mids$[mid_score_54c6a176]);
          }

          void ValueSourceScorer::setCheckDeletes(jboolean a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setCheckDeletes_bb0c767f], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          static PyObject *t_ValueSourceScorer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ValueSourceScorer_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ValueSourceScorer_advance(t_ValueSourceScorer *self, PyObject *args);
          static PyObject *t_ValueSourceScorer_cost(t_ValueSourceScorer *self, PyObject *args);
          static PyObject *t_ValueSourceScorer_docID(t_ValueSourceScorer *self, PyObject *args);
          static PyObject *t_ValueSourceScorer_freq(t_ValueSourceScorer *self, PyObject *args);
          static PyObject *t_ValueSourceScorer_getReader(t_ValueSourceScorer *self);
          static PyObject *t_ValueSourceScorer_matches(t_ValueSourceScorer *self, PyObject *arg);
          static PyObject *t_ValueSourceScorer_matchesValue(t_ValueSourceScorer *self, PyObject *arg);
          static PyObject *t_ValueSourceScorer_nextDoc(t_ValueSourceScorer *self, PyObject *args);
          static PyObject *t_ValueSourceScorer_score(t_ValueSourceScorer *self, PyObject *args);
          static PyObject *t_ValueSourceScorer_setCheckDeletes(t_ValueSourceScorer *self, PyObject *arg);
          static int t_ValueSourceScorer_set__checkDeletes(t_ValueSourceScorer *self, PyObject *arg, void *data);
          static PyObject *t_ValueSourceScorer_get__reader(t_ValueSourceScorer *self, void *data);
          static PyGetSetDef t_ValueSourceScorer__fields_[] = {
            DECLARE_SET_FIELD(t_ValueSourceScorer, checkDeletes),
            DECLARE_GET_FIELD(t_ValueSourceScorer, reader),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_ValueSourceScorer__methods_[] = {
            DECLARE_METHOD(t_ValueSourceScorer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ValueSourceScorer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ValueSourceScorer, advance, METH_VARARGS),
            DECLARE_METHOD(t_ValueSourceScorer, cost, METH_VARARGS),
            DECLARE_METHOD(t_ValueSourceScorer, docID, METH_VARARGS),
            DECLARE_METHOD(t_ValueSourceScorer, freq, METH_VARARGS),
            DECLARE_METHOD(t_ValueSourceScorer, getReader, METH_NOARGS),
            DECLARE_METHOD(t_ValueSourceScorer, matches, METH_O),
            DECLARE_METHOD(t_ValueSourceScorer, matchesValue, METH_O),
            DECLARE_METHOD(t_ValueSourceScorer, nextDoc, METH_VARARGS),
            DECLARE_METHOD(t_ValueSourceScorer, score, METH_VARARGS),
            DECLARE_METHOD(t_ValueSourceScorer, setCheckDeletes, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ValueSourceScorer, t_ValueSourceScorer, ::org::apache::lucene::search::Scorer, ValueSourceScorer, abstract_init, 0, 0, t_ValueSourceScorer__fields_, 0, 0);

          void t_ValueSourceScorer::install(PyObject *module)
          {
            installType(&PY_TYPE(ValueSourceScorer), module, "ValueSourceScorer", 0);
          }

          void t_ValueSourceScorer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ValueSourceScorer).tp_dict, "class_", make_descriptor(ValueSourceScorer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ValueSourceScorer).tp_dict, "wrapfn_", make_descriptor(t_ValueSourceScorer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ValueSourceScorer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ValueSourceScorer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ValueSourceScorer::initializeClass, 1)))
              return NULL;
            return t_ValueSourceScorer::wrap_Object(ValueSourceScorer(((t_ValueSourceScorer *) arg)->object.this$));
          }
          static PyObject *t_ValueSourceScorer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ValueSourceScorer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_ValueSourceScorer_advance(t_ValueSourceScorer *self, PyObject *args)
          {
            jint a0;
            jint result;

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(result = self->object.advance(a0));
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(ValueSourceScorer), (PyObject *) self, "advance", args, 2);
          }

          static PyObject *t_ValueSourceScorer_cost(t_ValueSourceScorer *self, PyObject *args)
          {
            jlong result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.cost());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(&PY_TYPE(ValueSourceScorer), (PyObject *) self, "cost", args, 2);
          }

          static PyObject *t_ValueSourceScorer_docID(t_ValueSourceScorer *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.docID());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(ValueSourceScorer), (PyObject *) self, "docID", args, 2);
          }

          static PyObject *t_ValueSourceScorer_freq(t_ValueSourceScorer *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.freq());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(ValueSourceScorer), (PyObject *) self, "freq", args, 2);
          }

          static PyObject *t_ValueSourceScorer_getReader(t_ValueSourceScorer *self)
          {
            ::org::apache::lucene::index::IndexReader result((jobject) NULL);
            OBJ_CALL(result = self->object.getReader());
            return ::org::apache::lucene::index::t_IndexReader::wrap_Object(result);
          }

          static PyObject *t_ValueSourceScorer_matches(t_ValueSourceScorer *self, PyObject *arg)
          {
            jint a0;
            jboolean result;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.matches(a0));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError((PyObject *) self, "matches", arg);
            return NULL;
          }

          static PyObject *t_ValueSourceScorer_matchesValue(t_ValueSourceScorer *self, PyObject *arg)
          {
            jint a0;
            jboolean result;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.matchesValue(a0));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError((PyObject *) self, "matchesValue", arg);
            return NULL;
          }

          static PyObject *t_ValueSourceScorer_nextDoc(t_ValueSourceScorer *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.nextDoc());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(ValueSourceScorer), (PyObject *) self, "nextDoc", args, 2);
          }

          static PyObject *t_ValueSourceScorer_score(t_ValueSourceScorer *self, PyObject *args)
          {
            jfloat result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.score());
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(ValueSourceScorer), (PyObject *) self, "score", args, 2);
          }

          static PyObject *t_ValueSourceScorer_setCheckDeletes(t_ValueSourceScorer *self, PyObject *arg)
          {
            jboolean a0;

            if (!parseArg(arg, "Z", &a0))
            {
              OBJ_CALL(self->object.setCheckDeletes(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setCheckDeletes", arg);
            return NULL;
          }

          static int t_ValueSourceScorer_set__checkDeletes(t_ValueSourceScorer *self, PyObject *arg, void *data)
          {
            {
              jboolean value;
              if (!parseArg(arg, "Z", &value))
              {
                INT_CALL(self->object.setCheckDeletes(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "checkDeletes", arg);
            return -1;
          }

          static PyObject *t_ValueSourceScorer_get__reader(t_ValueSourceScorer *self, void *data)
          {
            ::org::apache::lucene::index::IndexReader value((jobject) NULL);
            OBJ_CALL(value = self->object.getReader());
            return ::org::apache::lucene::index::t_IndexReader::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/tartarus/snowball/ext/FinnishStemmer.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {

        ::java::lang::Class *FinnishStemmer::class$ = NULL;
        jmethodID *FinnishStemmer::mids$ = NULL;
        bool FinnishStemmer::live$ = false;

        jclass FinnishStemmer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/tartarus/snowball/ext/FinnishStemmer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_stem_54c6a16a] = env->getMethodID(cls, "stem", "()Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FinnishStemmer::FinnishStemmer() : ::org::tartarus::snowball::SnowballProgram(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jboolean FinnishStemmer::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        jint FinnishStemmer::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jboolean FinnishStemmer::stem() const
        {
          return env->callBooleanMethod(this$, mids$[mid_stem_54c6a16a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {
        static PyObject *t_FinnishStemmer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FinnishStemmer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FinnishStemmer_init_(t_FinnishStemmer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FinnishStemmer_equals(t_FinnishStemmer *self, PyObject *args);
        static PyObject *t_FinnishStemmer_hashCode(t_FinnishStemmer *self, PyObject *args);
        static PyObject *t_FinnishStemmer_stem(t_FinnishStemmer *self, PyObject *args);

        static PyMethodDef t_FinnishStemmer__methods_[] = {
          DECLARE_METHOD(t_FinnishStemmer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FinnishStemmer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FinnishStemmer, equals, METH_VARARGS),
          DECLARE_METHOD(t_FinnishStemmer, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_FinnishStemmer, stem, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FinnishStemmer, t_FinnishStemmer, ::org::tartarus::snowball::SnowballProgram, FinnishStemmer, t_FinnishStemmer_init_, 0, 0, 0, 0, 0);

        void t_FinnishStemmer::install(PyObject *module)
        {
          installType(&PY_TYPE(FinnishStemmer), module, "FinnishStemmer", 0);
        }

        void t_FinnishStemmer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FinnishStemmer).tp_dict, "class_", make_descriptor(FinnishStemmer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FinnishStemmer).tp_dict, "wrapfn_", make_descriptor(t_FinnishStemmer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FinnishStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FinnishStemmer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FinnishStemmer::initializeClass, 1)))
            return NULL;
          return t_FinnishStemmer::wrap_Object(FinnishStemmer(((t_FinnishStemmer *) arg)->object.this$));
        }
        static PyObject *t_FinnishStemmer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FinnishStemmer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FinnishStemmer_init_(t_FinnishStemmer *self, PyObject *args, PyObject *kwds)
        {
          FinnishStemmer object((jobject) NULL);

          INT_CALL(object = FinnishStemmer());
          self->object = object;

          return 0;
        }

        static PyObject *t_FinnishStemmer_equals(t_FinnishStemmer *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(FinnishStemmer), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_FinnishStemmer_hashCode(t_FinnishStemmer *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FinnishStemmer), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_FinnishStemmer_stem(t_FinnishStemmer *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.stem());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(FinnishStemmer), (PyObject *) self, "stem", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/FilterIterator.h"
#include "java/util/Iterator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *FilterIterator::class$ = NULL;
        jmethodID *FilterIterator::mids$ = NULL;
        bool FilterIterator::live$ = false;

        jclass FilterIterator::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/FilterIterator");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_106d97d5] = env->getMethodID(cls, "<init>", "(Ljava/util/Iterator;)V");
            mids$[mid_hasNext_54c6a16a] = env->getMethodID(cls, "hasNext", "()Z");
            mids$[mid_next_846352c3] = env->getMethodID(cls, "next", "()Ljava/lang/Object;");
            mids$[mid_remove_54c6a166] = env->getMethodID(cls, "remove", "()V");
            mids$[mid_predicateFunction_290588e2] = env->getMethodID(cls, "predicateFunction", "(Ljava/lang/Object;)Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FilterIterator::FilterIterator(const ::java::util::Iterator & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_106d97d5, a0.this$)) {}

        jboolean FilterIterator::hasNext() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasNext_54c6a16a]);
        }

        ::java::lang::Object FilterIterator::next() const
        {
          return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_next_846352c3]));
        }

        void FilterIterator::remove() const
        {
          env->callVoidMethod(this$, mids$[mid_remove_54c6a166]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_FilterIterator_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FilterIterator_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FilterIterator_of_(t_FilterIterator *self, PyObject *args);
        static int t_FilterIterator_init_(t_FilterIterator *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FilterIterator_hasNext(t_FilterIterator *self);
        static PyObject *t_FilterIterator_next(t_FilterIterator *self);
        static PyObject *t_FilterIterator_remove(t_FilterIterator *self);
        static PyObject *t_FilterIterator_get__parameters_(t_FilterIterator *self, void *data);
        static PyGetSetDef t_FilterIterator__fields_[] = {
          DECLARE_GET_FIELD(t_FilterIterator, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FilterIterator__methods_[] = {
          DECLARE_METHOD(t_FilterIterator, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilterIterator, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilterIterator, of_, METH_VARARGS),
          DECLARE_METHOD(t_FilterIterator, hasNext, METH_NOARGS),
          DECLARE_METHOD(t_FilterIterator, next, METH_NOARGS),
          DECLARE_METHOD(t_FilterIterator, remove, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FilterIterator, t_FilterIterator, ::java::lang::Object, FilterIterator, t_FilterIterator_init_, PyObject_SelfIter, ((PyObject *(*)(::java::util::t_Iterator *)) get_generic_iterator_next< ::java::util::t_Iterator,::java::lang::t_Object >), t_FilterIterator__fields_, 0, 0);
        PyObject *t_FilterIterator::wrap_Object(const FilterIterator& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FilterIterator::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FilterIterator *self = (t_FilterIterator *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_FilterIterator::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FilterIterator::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FilterIterator *self = (t_FilterIterator *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_FilterIterator::install(PyObject *module)
        {
          installType(&PY_TYPE(FilterIterator), module, "FilterIterator", 0);
        }

        void t_FilterIterator::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FilterIterator).tp_dict, "class_", make_descriptor(FilterIterator::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FilterIterator).tp_dict, "wrapfn_", make_descriptor(t_FilterIterator::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FilterIterator).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FilterIterator_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FilterIterator::initializeClass, 1)))
            return NULL;
          return t_FilterIterator::wrap_Object(FilterIterator(((t_FilterIterator *) arg)->object.this$));
        }
        static PyObject *t_FilterIterator_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FilterIterator::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FilterIterator_of_(t_FilterIterator *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_FilterIterator_init_(t_FilterIterator *self, PyObject *args, PyObject *kwds)
        {
          ::java::util::Iterator a0((jobject) NULL);
          PyTypeObject **p0;
          FilterIterator object((jobject) NULL);

          if (!parseArgs(args, "K", ::java::util::Iterator::initializeClass, &a0, &p0, ::java::util::t_Iterator::parameters_))
          {
            INT_CALL(object = FilterIterator(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FilterIterator_hasNext(t_FilterIterator *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.hasNext());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_FilterIterator_next(t_FilterIterator *self)
        {
          ::java::lang::Object result((jobject) NULL);
          OBJ_CALL(result = self->object.next());
          return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
        }

        static PyObject *t_FilterIterator_remove(t_FilterIterator *self)
        {
          OBJ_CALL(self->object.remove());
          Py_RETURN_NONE;
        }
        static PyObject *t_FilterIterator_get__parameters_(t_FilterIterator *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/sandbox/queries/SlowCollatedTermRangeQuery.h"
#include "java/text/Collator.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace sandbox {
        namespace queries {

          ::java::lang::Class *SlowCollatedTermRangeQuery::class$ = NULL;
          jmethodID *SlowCollatedTermRangeQuery::mids$ = NULL;
          bool SlowCollatedTermRangeQuery::live$ = false;

          jclass SlowCollatedTermRangeQuery::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/sandbox/queries/SlowCollatedTermRangeQuery");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_ad38c2c0] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ZZLjava/text/Collator;)V");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_field_14c7b5c5] = env->getMethodID(cls, "field", "()Ljava/lang/String;");
              mids$[mid_getCollator_44b7fa29] = env->getMethodID(cls, "getCollator", "()Ljava/text/Collator;");
              mids$[mid_getLowerTerm_14c7b5c5] = env->getMethodID(cls, "getLowerTerm", "()Ljava/lang/String;");
              mids$[mid_getUpperTerm_14c7b5c5] = env->getMethodID(cls, "getUpperTerm", "()Ljava/lang/String;");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_includesLower_54c6a16a] = env->getMethodID(cls, "includesLower", "()Z");
              mids$[mid_includesUpper_54c6a16a] = env->getMethodID(cls, "includesUpper", "()Z");
              mids$[mid_toString_97a5258f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");
              mids$[mid_getTermsEnum_67b5a29a] = env->getMethodID(cls, "getTermsEnum", "(Lorg/apache/lucene/index/Terms;Lorg/apache/lucene/util/AttributeSource;)Lorg/apache/lucene/index/TermsEnum;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SlowCollatedTermRangeQuery::SlowCollatedTermRangeQuery(const ::java::lang::String & a0, const ::java::lang::String & a1, const ::java::lang::String & a2, jboolean a3, jboolean a4, const ::java::text::Collator & a5) : ::org::apache::lucene::search::MultiTermQuery(env->newObject(initializeClass, &mids$, mid_init$_ad38c2c0, a0.this$, a1.this$, a2.this$, a3, a4, a5.this$)) {}

          jboolean SlowCollatedTermRangeQuery::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          ::java::lang::String SlowCollatedTermRangeQuery::field() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_field_14c7b5c5]));
          }

          ::java::text::Collator SlowCollatedTermRangeQuery::getCollator() const
          {
            return ::java::text::Collator(env->callObjectMethod(this$, mids$[mid_getCollator_44b7fa29]));
          }

          ::java::lang::String SlowCollatedTermRangeQuery::getLowerTerm() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getLowerTerm_14c7b5c5]));
          }

          ::java::lang::String SlowCollatedTermRangeQuery::getUpperTerm() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getUpperTerm_14c7b5c5]));
          }

          jint SlowCollatedTermRangeQuery::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          jboolean SlowCollatedTermRangeQuery::includesLower() const
          {
            return env->callBooleanMethod(this$, mids$[mid_includesLower_54c6a16a]);
          }

          jboolean SlowCollatedTermRangeQuery::includesUpper() const
          {
            return env->callBooleanMethod(this$, mids$[mid_includesUpper_54c6a16a]);
          }

          ::java::lang::String SlowCollatedTermRangeQuery::toString(const ::java::lang::String & a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_97a5258f], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace sandbox {
        namespace queries {
          static PyObject *t_SlowCollatedTermRangeQuery_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SlowCollatedTermRangeQuery_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SlowCollatedTermRangeQuery_init_(t_SlowCollatedTermRangeQuery *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SlowCollatedTermRangeQuery_equals(t_SlowCollatedTermRangeQuery *self, PyObject *args);
          static PyObject *t_SlowCollatedTermRangeQuery_field(t_SlowCollatedTermRangeQuery *self);
          static PyObject *t_SlowCollatedTermRangeQuery_getCollator(t_SlowCollatedTermRangeQuery *self);
          static PyObject *t_SlowCollatedTermRangeQuery_getLowerTerm(t_SlowCollatedTermRangeQuery *self);
          static PyObject *t_SlowCollatedTermRangeQuery_getUpperTerm(t_SlowCollatedTermRangeQuery *self);
          static PyObject *t_SlowCollatedTermRangeQuery_hashCode(t_SlowCollatedTermRangeQuery *self, PyObject *args);
          static PyObject *t_SlowCollatedTermRangeQuery_includesLower(t_SlowCollatedTermRangeQuery *self);
          static PyObject *t_SlowCollatedTermRangeQuery_includesUpper(t_SlowCollatedTermRangeQuery *self);
          static PyObject *t_SlowCollatedTermRangeQuery_toString(t_SlowCollatedTermRangeQuery *self, PyObject *args);
          static PyObject *t_SlowCollatedTermRangeQuery_get__collator(t_SlowCollatedTermRangeQuery *self, void *data);
          static PyObject *t_SlowCollatedTermRangeQuery_get__lowerTerm(t_SlowCollatedTermRangeQuery *self, void *data);
          static PyObject *t_SlowCollatedTermRangeQuery_get__upperTerm(t_SlowCollatedTermRangeQuery *self, void *data);
          static PyGetSetDef t_SlowCollatedTermRangeQuery__fields_[] = {
            DECLARE_GET_FIELD(t_SlowCollatedTermRangeQuery, collator),
            DECLARE_GET_FIELD(t_SlowCollatedTermRangeQuery, lowerTerm),
            DECLARE_GET_FIELD(t_SlowCollatedTermRangeQuery, upperTerm),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SlowCollatedTermRangeQuery__methods_[] = {
            DECLARE_METHOD(t_SlowCollatedTermRangeQuery, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SlowCollatedTermRangeQuery, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SlowCollatedTermRangeQuery, equals, METH_VARARGS),
            DECLARE_METHOD(t_SlowCollatedTermRangeQuery, field, METH_NOARGS),
            DECLARE_METHOD(t_SlowCollatedTermRangeQuery, getCollator, METH_NOARGS),
            DECLARE_METHOD(t_SlowCollatedTermRangeQuery, getLowerTerm, METH_NOARGS),
            DECLARE_METHOD(t_SlowCollatedTermRangeQuery, getUpperTerm, METH_NOARGS),
            DECLARE_METHOD(t_SlowCollatedTermRangeQuery, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_SlowCollatedTermRangeQuery, includesLower, METH_NOARGS),
            DECLARE_METHOD(t_SlowCollatedTermRangeQuery, includesUpper, METH_NOARGS),
            DECLARE_METHOD(t_SlowCollatedTermRangeQuery, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SlowCollatedTermRangeQuery, t_SlowCollatedTermRangeQuery, ::org::apache::lucene::search::MultiTermQuery, SlowCollatedTermRangeQuery, t_SlowCollatedTermRangeQuery_init_, 0, 0, t_SlowCollatedTermRangeQuery__fields_, 0, 0);

          void t_SlowCollatedTermRangeQuery::install(PyObject *module)
          {
            installType(&PY_TYPE(SlowCollatedTermRangeQuery), module, "SlowCollatedTermRangeQuery", 0);
          }

          void t_SlowCollatedTermRangeQuery::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SlowCollatedTermRangeQuery).tp_dict, "class_", make_descriptor(SlowCollatedTermRangeQuery::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SlowCollatedTermRangeQuery).tp_dict, "wrapfn_", make_descriptor(t_SlowCollatedTermRangeQuery::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SlowCollatedTermRangeQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SlowCollatedTermRangeQuery_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SlowCollatedTermRangeQuery::initializeClass, 1)))
              return NULL;
            return t_SlowCollatedTermRangeQuery::wrap_Object(SlowCollatedTermRangeQuery(((t_SlowCollatedTermRangeQuery *) arg)->object.this$));
          }
          static PyObject *t_SlowCollatedTermRangeQuery_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SlowCollatedTermRangeQuery::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SlowCollatedTermRangeQuery_init_(t_SlowCollatedTermRangeQuery *self, PyObject *args, PyObject *kwds)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            ::java::lang::String a2((jobject) NULL);
            jboolean a3;
            jboolean a4;
            ::java::text::Collator a5((jobject) NULL);
            SlowCollatedTermRangeQuery object((jobject) NULL);

            if (!parseArgs(args, "sssZZk", ::java::text::Collator::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5))
            {
              INT_CALL(object = SlowCollatedTermRangeQuery(a0, a1, a2, a3, a4, a5));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SlowCollatedTermRangeQuery_equals(t_SlowCollatedTermRangeQuery *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(SlowCollatedTermRangeQuery), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_SlowCollatedTermRangeQuery_field(t_SlowCollatedTermRangeQuery *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.field());
            return j2p(result);
          }

          static PyObject *t_SlowCollatedTermRangeQuery_getCollator(t_SlowCollatedTermRangeQuery *self)
          {
            ::java::text::Collator result((jobject) NULL);
            OBJ_CALL(result = self->object.getCollator());
            return ::java::text::t_Collator::wrap_Object(result);
          }

          static PyObject *t_SlowCollatedTermRangeQuery_getLowerTerm(t_SlowCollatedTermRangeQuery *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.getLowerTerm());
            return j2p(result);
          }

          static PyObject *t_SlowCollatedTermRangeQuery_getUpperTerm(t_SlowCollatedTermRangeQuery *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.getUpperTerm());
            return j2p(result);
          }

          static PyObject *t_SlowCollatedTermRangeQuery_hashCode(t_SlowCollatedTermRangeQuery *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(SlowCollatedTermRangeQuery), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_SlowCollatedTermRangeQuery_includesLower(t_SlowCollatedTermRangeQuery *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.includesLower());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_SlowCollatedTermRangeQuery_includesUpper(t_SlowCollatedTermRangeQuery *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.includesUpper());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_SlowCollatedTermRangeQuery_toString(t_SlowCollatedTermRangeQuery *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = self->object.toString(a0));
              return j2p(result);
            }

            return callSuper(&PY_TYPE(SlowCollatedTermRangeQuery), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_SlowCollatedTermRangeQuery_get__collator(t_SlowCollatedTermRangeQuery *self, void *data)
          {
            ::java::text::Collator value((jobject) NULL);
            OBJ_CALL(value = self->object.getCollator());
            return ::java::text::t_Collator::wrap_Object(value);
          }

          static PyObject *t_SlowCollatedTermRangeQuery_get__lowerTerm(t_SlowCollatedTermRangeQuery *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getLowerTerm());
            return j2p(value);
          }

          static PyObject *t_SlowCollatedTermRangeQuery_get__upperTerm(t_SlowCollatedTermRangeQuery *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getUpperTerm());
            return j2p(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/BooleanQuery.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "java/util/List.h"
#include "org/apache/lucene/index/Term.h"
#include "java/lang/Class.h"
#include "java/lang/Iterable.h"
#include "java/io/IOException.h"
#include "java/util/Set.h"
#include "org/apache/lucene/search/BooleanClause.h"
#include "java/util/Iterator.h"
#include "org/apache/lucene/search/BooleanClause$Occur.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/search/Weight.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *BooleanQuery::class$ = NULL;
        jmethodID *BooleanQuery::mids$ = NULL;
        bool BooleanQuery::live$ = false;

        jclass BooleanQuery::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/BooleanQuery");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_init$_bb0c767f] = env->getMethodID(cls, "<init>", "(Z)V");
            mids$[mid_add_982477b6] = env->getMethodID(cls, "add", "(Lorg/apache/lucene/search/BooleanClause;)V");
            mids$[mid_add_827be425] = env->getMethodID(cls, "add", "(Lorg/apache/lucene/search/Query;Lorg/apache/lucene/search/BooleanClause$Occur;)V");
            mids$[mid_clauses_87851566] = env->getMethodID(cls, "clauses", "()Ljava/util/List;");
            mids$[mid_clone_6f9339e7] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/search/BooleanQuery;");
            mids$[mid_createWeight_367763cb] = env->getMethodID(cls, "createWeight", "(Lorg/apache/lucene/search/IndexSearcher;)Lorg/apache/lucene/search/Weight;");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_extractTerms_fb4f2b26] = env->getMethodID(cls, "extractTerms", "(Ljava/util/Set;)V");
            mids$[mid_getClauses_e6b4c83b] = env->getMethodID(cls, "getClauses", "()[Lorg/apache/lucene/search/BooleanClause;");
            mids$[mid_getMaxClauseCount_54c6a179] = env->getStaticMethodID(cls, "getMaxClauseCount", "()I");
            mids$[mid_getMinimumNumberShouldMatch_54c6a179] = env->getMethodID(cls, "getMinimumNumberShouldMatch", "()I");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_isCoordDisabled_54c6a16a] = env->getMethodID(cls, "isCoordDisabled", "()Z");
            mids$[mid_iterator_40858c90] = env->getMethodID(cls, "iterator", "()Ljava/util/Iterator;");
            mids$[mid_rewrite_7edcaa43] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/index/IndexReader;)Lorg/apache/lucene/search/Query;");
            mids$[mid_setMaxClauseCount_39c7bd3c] = env->getStaticMethodID(cls, "setMaxClauseCount", "(I)V");
            mids$[mid_setMinimumNumberShouldMatch_39c7bd3c] = env->getMethodID(cls, "setMinimumNumberShouldMatch", "(I)V");
            mids$[mid_toString_97a5258f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        BooleanQuery::BooleanQuery() : ::org::apache::lucene::search::Query(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        BooleanQuery::BooleanQuery(jboolean a0) : ::org::apache::lucene::search::Query(env->newObject(initializeClass, &mids$, mid_init$_bb0c767f, a0)) {}

        void BooleanQuery::add(const ::org::apache::lucene::search::BooleanClause & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_add_982477b6], a0.this$);
        }

        void BooleanQuery::add(const ::org::apache::lucene::search::Query & a0, const ::org::apache::lucene::search::BooleanClause$Occur & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_add_827be425], a0.this$, a1.this$);
        }

        ::java::util::List BooleanQuery::clauses() const
        {
          return ::java::util::List(env->callObjectMethod(this$, mids$[mid_clauses_87851566]));
        }

        BooleanQuery BooleanQuery::clone() const
        {
          return BooleanQuery(env->callObjectMethod(this$, mids$[mid_clone_6f9339e7]));
        }

        ::org::apache::lucene::search::Weight BooleanQuery::createWeight(const ::org::apache::lucene::search::IndexSearcher & a0) const
        {
          return ::org::apache::lucene::search::Weight(env->callObjectMethod(this$, mids$[mid_createWeight_367763cb], a0.this$));
        }

        jboolean BooleanQuery::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        void BooleanQuery::extractTerms(const ::java::util::Set & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_extractTerms_fb4f2b26], a0.this$);
        }

        JArray< ::org::apache::lucene::search::BooleanClause > BooleanQuery::getClauses() const
        {
          return JArray< ::org::apache::lucene::search::BooleanClause >(env->callObjectMethod(this$, mids$[mid_getClauses_e6b4c83b]));
        }

        jint BooleanQuery::getMaxClauseCount()
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_getMaxClauseCount_54c6a179]);
        }

        jint BooleanQuery::getMinimumNumberShouldMatch() const
        {
          return env->callIntMethod(this$, mids$[mid_getMinimumNumberShouldMatch_54c6a179]);
        }

        jint BooleanQuery::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jboolean BooleanQuery::isCoordDisabled() const
        {
          return env->callBooleanMethod(this$, mids$[mid_isCoordDisabled_54c6a16a]);
        }

        ::java::util::Iterator BooleanQuery::iterator() const
        {
          return ::java::util::Iterator(env->callObjectMethod(this$, mids$[mid_iterator_40858c90]));
        }

        ::org::apache::lucene::search::Query BooleanQuery::rewrite(const ::org::apache::lucene::index::IndexReader & a0) const
        {
          return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_rewrite_7edcaa43], a0.this$));
        }

        void BooleanQuery::setMaxClauseCount(jint a0)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_setMaxClauseCount_39c7bd3c], a0);
        }

        void BooleanQuery::setMinimumNumberShouldMatch(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setMinimumNumberShouldMatch_39c7bd3c], a0);
        }

        ::java::lang::String BooleanQuery::toString(const ::java::lang::String & a0) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_97a5258f], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/search/BooleanQuery$TooManyClauses.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_BooleanQuery_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BooleanQuery_instance_(PyTypeObject *type, PyObject *arg);
        static int t_BooleanQuery_init_(t_BooleanQuery *self, PyObject *args, PyObject *kwds);
        static PyObject *t_BooleanQuery_add(t_BooleanQuery *self, PyObject *args);
        static PyObject *t_BooleanQuery_clauses(t_BooleanQuery *self);
        static PyObject *t_BooleanQuery_clone(t_BooleanQuery *self, PyObject *args);
        static PyObject *t_BooleanQuery_createWeight(t_BooleanQuery *self, PyObject *args);
        static PyObject *t_BooleanQuery_equals(t_BooleanQuery *self, PyObject *args);
        static PyObject *t_BooleanQuery_extractTerms(t_BooleanQuery *self, PyObject *args);
        static PyObject *t_BooleanQuery_getClauses(t_BooleanQuery *self);
        static PyObject *t_BooleanQuery_getMaxClauseCount(PyTypeObject *type);
        static PyObject *t_BooleanQuery_getMinimumNumberShouldMatch(t_BooleanQuery *self);
        static PyObject *t_BooleanQuery_hashCode(t_BooleanQuery *self, PyObject *args);
        static PyObject *t_BooleanQuery_isCoordDisabled(t_BooleanQuery *self);
        static PyObject *t_BooleanQuery_iterator(t_BooleanQuery *self);
        static PyObject *t_BooleanQuery_rewrite(t_BooleanQuery *self, PyObject *args);
        static PyObject *t_BooleanQuery_setMaxClauseCount(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BooleanQuery_setMinimumNumberShouldMatch(t_BooleanQuery *self, PyObject *arg);
        static PyObject *t_BooleanQuery_toString(t_BooleanQuery *self, PyObject *args);
        static PyObject *t_BooleanQuery_get__coordDisabled(t_BooleanQuery *self, void *data);
        static PyObject *t_BooleanQuery_get__maxClauseCount(t_BooleanQuery *self, void *data);
        static int t_BooleanQuery_set__maxClauseCount(t_BooleanQuery *self, PyObject *arg, void *data);
        static PyObject *t_BooleanQuery_get__minimumNumberShouldMatch(t_BooleanQuery *self, void *data);
        static int t_BooleanQuery_set__minimumNumberShouldMatch(t_BooleanQuery *self, PyObject *arg, void *data);
        static PyGetSetDef t_BooleanQuery__fields_[] = {
          DECLARE_GET_FIELD(t_BooleanQuery, coordDisabled),
          DECLARE_GETSET_FIELD(t_BooleanQuery, maxClauseCount),
          DECLARE_GETSET_FIELD(t_BooleanQuery, minimumNumberShouldMatch),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_BooleanQuery__methods_[] = {
          DECLARE_METHOD(t_BooleanQuery, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BooleanQuery, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BooleanQuery, add, METH_VARARGS),
          DECLARE_METHOD(t_BooleanQuery, clauses, METH_NOARGS),
          DECLARE_METHOD(t_BooleanQuery, clone, METH_VARARGS),
          DECLARE_METHOD(t_BooleanQuery, createWeight, METH_VARARGS),
          DECLARE_METHOD(t_BooleanQuery, equals, METH_VARARGS),
          DECLARE_METHOD(t_BooleanQuery, extractTerms, METH_VARARGS),
          DECLARE_METHOD(t_BooleanQuery, getClauses, METH_NOARGS),
          DECLARE_METHOD(t_BooleanQuery, getMaxClauseCount, METH_NOARGS | METH_CLASS),
          DECLARE_METHOD(t_BooleanQuery, getMinimumNumberShouldMatch, METH_NOARGS),
          DECLARE_METHOD(t_BooleanQuery, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_BooleanQuery, isCoordDisabled, METH_NOARGS),
          DECLARE_METHOD(t_BooleanQuery, iterator, METH_NOARGS),
          DECLARE_METHOD(t_BooleanQuery, rewrite, METH_VARARGS),
          DECLARE_METHOD(t_BooleanQuery, setMaxClauseCount, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BooleanQuery, setMinimumNumberShouldMatch, METH_O),
          DECLARE_METHOD(t_BooleanQuery, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(BooleanQuery, t_BooleanQuery, ::org::apache::lucene::search::Query, BooleanQuery, t_BooleanQuery_init_, ((PyObject *(*)(t_BooleanQuery *)) get_iterator< t_BooleanQuery >), 0, t_BooleanQuery__fields_, 0, 0);

        void t_BooleanQuery::install(PyObject *module)
        {
          installType(&PY_TYPE(BooleanQuery), module, "BooleanQuery", 0);
          PyDict_SetItemString(PY_TYPE(BooleanQuery).tp_dict, "TooManyClauses", make_descriptor(&PY_TYPE(BooleanQuery$TooManyClauses)));
        }

        void t_BooleanQuery::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(BooleanQuery).tp_dict, "class_", make_descriptor(BooleanQuery::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(BooleanQuery).tp_dict, "wrapfn_", make_descriptor(t_BooleanQuery::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(BooleanQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_BooleanQuery_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, BooleanQuery::initializeClass, 1)))
            return NULL;
          return t_BooleanQuery::wrap_Object(BooleanQuery(((t_BooleanQuery *) arg)->object.this$));
        }
        static PyObject *t_BooleanQuery_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, BooleanQuery::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_BooleanQuery_init_(t_BooleanQuery *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              BooleanQuery object((jobject) NULL);

              INT_CALL(object = BooleanQuery());
              self->object = object;
              break;
            }
            goto err;
           case 1:
            {
              jboolean a0;
              BooleanQuery object((jobject) NULL);

              if (!parseArgs(args, "Z", &a0))
              {
                INT_CALL(object = BooleanQuery(a0));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_BooleanQuery_add(t_BooleanQuery *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::search::BooleanClause a0((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::search::BooleanClause::initializeClass, &a0))
              {
                OBJ_CALL(self->object.add(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 2:
            {
              ::org::apache::lucene::search::Query a0((jobject) NULL);
              ::org::apache::lucene::search::BooleanClause$Occur a1((jobject) NULL);
              PyTypeObject **p1;

              if (!parseArgs(args, "kK", ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::search::BooleanClause$Occur::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::search::t_BooleanClause$Occur::parameters_))
              {
                OBJ_CALL(self->object.add(a0, a1));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "add", args);
          return NULL;
        }

        static PyObject *t_BooleanQuery_clauses(t_BooleanQuery *self)
        {
          ::java::util::List result((jobject) NULL);
          OBJ_CALL(result = self->object.clauses());
          return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::search::PY_TYPE(BooleanClause));
        }

        static PyObject *t_BooleanQuery_clone(t_BooleanQuery *self, PyObject *args)
        {
          BooleanQuery result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.clone());
            return t_BooleanQuery::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(BooleanQuery), (PyObject *) self, "clone", args, 2);
        }

        static PyObject *t_BooleanQuery_createWeight(t_BooleanQuery *self, PyObject *args)
        {
          ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
          ::org::apache::lucene::search::Weight result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.createWeight(a0));
            return ::org::apache::lucene::search::t_Weight::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(BooleanQuery), (PyObject *) self, "createWeight", args, 2);
        }

        static PyObject *t_BooleanQuery_equals(t_BooleanQuery *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(BooleanQuery), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_BooleanQuery_extractTerms(t_BooleanQuery *self, PyObject *args)
        {
          ::java::util::Set a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArgs(args, "K", ::java::util::Set::initializeClass, &a0, &p0, ::java::util::t_Set::parameters_))
          {
            OBJ_CALL(self->object.extractTerms(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(BooleanQuery), (PyObject *) self, "extractTerms", args, 2);
        }

        static PyObject *t_BooleanQuery_getClauses(t_BooleanQuery *self)
        {
          JArray< ::org::apache::lucene::search::BooleanClause > result((jobject) NULL);
          OBJ_CALL(result = self->object.getClauses());
          return JArray<jobject>(result.this$).wrap(::org::apache::lucene::search::t_BooleanClause::wrap_jobject);
        }

        static PyObject *t_BooleanQuery_getMaxClauseCount(PyTypeObject *type)
        {
          jint result;
          OBJ_CALL(result = ::org::apache::lucene::search::BooleanQuery::getMaxClauseCount());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_BooleanQuery_getMinimumNumberShouldMatch(t_BooleanQuery *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getMinimumNumberShouldMatch());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_BooleanQuery_hashCode(t_BooleanQuery *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(BooleanQuery), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_BooleanQuery_isCoordDisabled(t_BooleanQuery *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.isCoordDisabled());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_BooleanQuery_iterator(t_BooleanQuery *self)
        {
          ::java::util::Iterator result((jobject) NULL);
          OBJ_CALL(result = self->object.iterator());
          return ::java::util::t_Iterator::wrap_Object(result, &::org::apache::lucene::search::PY_TYPE(BooleanClause));
        }

        static PyObject *t_BooleanQuery_rewrite(t_BooleanQuery *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.rewrite(a0));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(BooleanQuery), (PyObject *) self, "rewrite", args, 2);
        }

        static PyObject *t_BooleanQuery_setMaxClauseCount(PyTypeObject *type, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(::org::apache::lucene::search::BooleanQuery::setMaxClauseCount(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "setMaxClauseCount", arg);
          return NULL;
        }

        static PyObject *t_BooleanQuery_setMinimumNumberShouldMatch(t_BooleanQuery *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.setMinimumNumberShouldMatch(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setMinimumNumberShouldMatch", arg);
          return NULL;
        }

        static PyObject *t_BooleanQuery_toString(t_BooleanQuery *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.toString(a0));
            return j2p(result);
          }

          return callSuper(&PY_TYPE(BooleanQuery), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_BooleanQuery_get__coordDisabled(t_BooleanQuery *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.isCoordDisabled());
          Py_RETURN_BOOL(value);
        }

        static PyObject *t_BooleanQuery_get__maxClauseCount(t_BooleanQuery *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getMaxClauseCount());
          return PyInt_FromLong((long) value);
        }
        static int t_BooleanQuery_set__maxClauseCount(t_BooleanQuery *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setMaxClauseCount(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "maxClauseCount", arg);
          return -1;
        }

        static PyObject *t_BooleanQuery_get__minimumNumberShouldMatch(t_BooleanQuery *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getMinimumNumberShouldMatch());
          return PyInt_FromLong((long) value);
        }
        static int t_BooleanQuery_set__minimumNumberShouldMatch(t_BooleanQuery *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setMinimumNumberShouldMatch(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "minimumNumberShouldMatch", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/join/ToParentBlockJoinSortField.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/Filter.h"
#include "org/apache/lucene/search/SortField$Type.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/search/FieldComparator.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace join {

          ::java::lang::Class *ToParentBlockJoinSortField::class$ = NULL;
          jmethodID *ToParentBlockJoinSortField::mids$ = NULL;
          bool ToParentBlockJoinSortField::live$ = false;

          jclass ToParentBlockJoinSortField::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/join/ToParentBlockJoinSortField");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_71ee501b] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/search/SortField$Type;ZLorg/apache/lucene/search/Filter;Lorg/apache/lucene/search/Filter;)V");
              mids$[mid_init$_f8b18760] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/search/SortField$Type;ZZLorg/apache/lucene/search/Filter;Lorg/apache/lucene/search/Filter;)V");
              mids$[mid_getComparator_f38637f4] = env->getMethodID(cls, "getComparator", "(II)Lorg/apache/lucene/search/FieldComparator;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ToParentBlockJoinSortField::ToParentBlockJoinSortField(const ::java::lang::String & a0, const ::org::apache::lucene::search::SortField$Type & a1, jboolean a2, const ::org::apache::lucene::search::Filter & a3, const ::org::apache::lucene::search::Filter & a4) : ::org::apache::lucene::search::SortField(env->newObject(initializeClass, &mids$, mid_init$_71ee501b, a0.this$, a1.this$, a2, a3.this$, a4.this$)) {}

          ToParentBlockJoinSortField::ToParentBlockJoinSortField(const ::java::lang::String & a0, const ::org::apache::lucene::search::SortField$Type & a1, jboolean a2, jboolean a3, const ::org::apache::lucene::search::Filter & a4, const ::org::apache::lucene::search::Filter & a5) : ::org::apache::lucene::search::SortField(env->newObject(initializeClass, &mids$, mid_init$_f8b18760, a0.this$, a1.this$, a2, a3, a4.this$, a5.this$)) {}

          ::org::apache::lucene::search::FieldComparator ToParentBlockJoinSortField::getComparator(jint a0, jint a1) const
          {
            return ::org::apache::lucene::search::FieldComparator(env->callObjectMethod(this$, mids$[mid_getComparator_f38637f4], a0, a1));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace join {
          static PyObject *t_ToParentBlockJoinSortField_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ToParentBlockJoinSortField_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ToParentBlockJoinSortField_init_(t_ToParentBlockJoinSortField *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ToParentBlockJoinSortField_getComparator(t_ToParentBlockJoinSortField *self, PyObject *args);

          static PyMethodDef t_ToParentBlockJoinSortField__methods_[] = {
            DECLARE_METHOD(t_ToParentBlockJoinSortField, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ToParentBlockJoinSortField, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ToParentBlockJoinSortField, getComparator, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ToParentBlockJoinSortField, t_ToParentBlockJoinSortField, ::org::apache::lucene::search::SortField, ToParentBlockJoinSortField, t_ToParentBlockJoinSortField_init_, 0, 0, 0, 0, 0);

          void t_ToParentBlockJoinSortField::install(PyObject *module)
          {
            installType(&PY_TYPE(ToParentBlockJoinSortField), module, "ToParentBlockJoinSortField", 0);
          }

          void t_ToParentBlockJoinSortField::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ToParentBlockJoinSortField).tp_dict, "class_", make_descriptor(ToParentBlockJoinSortField::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ToParentBlockJoinSortField).tp_dict, "wrapfn_", make_descriptor(t_ToParentBlockJoinSortField::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ToParentBlockJoinSortField).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ToParentBlockJoinSortField_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ToParentBlockJoinSortField::initializeClass, 1)))
              return NULL;
            return t_ToParentBlockJoinSortField::wrap_Object(ToParentBlockJoinSortField(((t_ToParentBlockJoinSortField *) arg)->object.this$));
          }
          static PyObject *t_ToParentBlockJoinSortField_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ToParentBlockJoinSortField::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ToParentBlockJoinSortField_init_(t_ToParentBlockJoinSortField *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 5:
              {
                ::java::lang::String a0((jobject) NULL);
                ::org::apache::lucene::search::SortField$Type a1((jobject) NULL);
                PyTypeObject **p1;
                jboolean a2;
                ::org::apache::lucene::search::Filter a3((jobject) NULL);
                ::org::apache::lucene::search::Filter a4((jobject) NULL);
                ToParentBlockJoinSortField object((jobject) NULL);

                if (!parseArgs(args, "sKZkk", ::org::apache::lucene::search::SortField$Type::initializeClass, ::org::apache::lucene::search::Filter::initializeClass, ::org::apache::lucene::search::Filter::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::search::t_SortField$Type::parameters_, &a2, &a3, &a4))
                {
                  INT_CALL(object = ToParentBlockJoinSortField(a0, a1, a2, a3, a4));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 6:
              {
                ::java::lang::String a0((jobject) NULL);
                ::org::apache::lucene::search::SortField$Type a1((jobject) NULL);
                PyTypeObject **p1;
                jboolean a2;
                jboolean a3;
                ::org::apache::lucene::search::Filter a4((jobject) NULL);
                ::org::apache::lucene::search::Filter a5((jobject) NULL);
                ToParentBlockJoinSortField object((jobject) NULL);

                if (!parseArgs(args, "sKZZkk", ::org::apache::lucene::search::SortField$Type::initializeClass, ::org::apache::lucene::search::Filter::initializeClass, ::org::apache::lucene::search::Filter::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::search::t_SortField$Type::parameters_, &a2, &a3, &a4, &a5))
                {
                  INT_CALL(object = ToParentBlockJoinSortField(a0, a1, a2, a3, a4, a5));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ToParentBlockJoinSortField_getComparator(t_ToParentBlockJoinSortField *self, PyObject *args)
          {
            jint a0;
            jint a1;
            ::org::apache::lucene::search::FieldComparator result((jobject) NULL);

            if (!parseArgs(args, "II", &a0, &a1))
            {
              OBJ_CALL(result = self->object.getComparator(a0, a1));
              return ::org::apache::lucene::search::t_FieldComparator::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(ToParentBlockJoinSortField), (PyObject *) self, "getComparator", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/pt/PortugueseAnalyzer.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pt {

          ::java::lang::Class *PortugueseAnalyzer::class$ = NULL;
          jmethodID *PortugueseAnalyzer::mids$ = NULL;
          bool PortugueseAnalyzer::live$ = false;
          ::java::lang::String *PortugueseAnalyzer::DEFAULT_STOPWORD_FILE = NULL;

          jclass PortugueseAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/pt/PortugueseAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_6d1f9881] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_0d96cf33] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;)V");
              mids$[mid_init$_3ea629c6] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/util/CharArraySet;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_83eafe28] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_c9d7e4a3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_getDefaultStopSet_d2d3505c] = env->getStaticMethodID(cls, "getDefaultStopSet", "()Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_STOPWORD_FILE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_STOPWORD_FILE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PortugueseAnalyzer::PortugueseAnalyzer() : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          PortugueseAnalyzer::PortugueseAnalyzer(const ::org::apache::lucene::analysis::util::CharArraySet & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_6d1f9881, a0.this$)) {}

          PortugueseAnalyzer::PortugueseAnalyzer(const ::org::apache::lucene::util::Version & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_0d96cf33, a0.this$)) {}

          PortugueseAnalyzer::PortugueseAnalyzer(const ::org::apache::lucene::analysis::util::CharArraySet & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_3ea629c6, a0.this$, a1.this$)) {}

          PortugueseAnalyzer::PortugueseAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_83eafe28, a0.this$, a1.this$)) {}

          PortugueseAnalyzer::PortugueseAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1, const ::org::apache::lucene::analysis::util::CharArraySet & a2) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_c9d7e4a3, a0.this$, a1.this$, a2.this$)) {}

          ::org::apache::lucene::analysis::util::CharArraySet PortugueseAnalyzer::getDefaultStopSet()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getDefaultStopSet_d2d3505c]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pt {
          static PyObject *t_PortugueseAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PortugueseAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PortugueseAnalyzer_init_(t_PortugueseAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PortugueseAnalyzer_getDefaultStopSet(PyTypeObject *type);
          static PyObject *t_PortugueseAnalyzer_get__defaultStopSet(t_PortugueseAnalyzer *self, void *data);
          static PyGetSetDef t_PortugueseAnalyzer__fields_[] = {
            DECLARE_GET_FIELD(t_PortugueseAnalyzer, defaultStopSet),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_PortugueseAnalyzer__methods_[] = {
            DECLARE_METHOD(t_PortugueseAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PortugueseAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PortugueseAnalyzer, getDefaultStopSet, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PortugueseAnalyzer, t_PortugueseAnalyzer, ::org::apache::lucene::analysis::util::StopwordAnalyzerBase, PortugueseAnalyzer, t_PortugueseAnalyzer_init_, 0, 0, t_PortugueseAnalyzer__fields_, 0, 0);

          void t_PortugueseAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(PortugueseAnalyzer), module, "PortugueseAnalyzer", 0);
          }

          void t_PortugueseAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PortugueseAnalyzer).tp_dict, "class_", make_descriptor(PortugueseAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PortugueseAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_PortugueseAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PortugueseAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(PortugueseAnalyzer::initializeClass);
            PyDict_SetItemString(PY_TYPE(PortugueseAnalyzer).tp_dict, "DEFAULT_STOPWORD_FILE", make_descriptor(j2p(*PortugueseAnalyzer::DEFAULT_STOPWORD_FILE)));
          }

          static PyObject *t_PortugueseAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PortugueseAnalyzer::initializeClass, 1)))
              return NULL;
            return t_PortugueseAnalyzer::wrap_Object(PortugueseAnalyzer(((t_PortugueseAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_PortugueseAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PortugueseAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PortugueseAnalyzer_init_(t_PortugueseAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                PortugueseAnalyzer object((jobject) NULL);

                INT_CALL(object = PortugueseAnalyzer());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                ::org::apache::lucene::analysis::util::CharArraySet a0((jobject) NULL);
                PyTypeObject **p0;
                PortugueseAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = PortugueseAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PortugueseAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::util::Version::initializeClass, &a0))
                {
                  INT_CALL(object = PortugueseAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::analysis::util::CharArraySet a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                PortugueseAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = PortugueseAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                PortugueseAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "kK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = PortugueseAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                ::org::apache::lucene::analysis::util::CharArraySet a2((jobject) NULL);
                PyTypeObject **p2;
                PortugueseAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "kKK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_, &a2, &p2, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = PortugueseAnalyzer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PortugueseAnalyzer_getDefaultStopSet(PyTypeObject *type)
          {
            ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::pt::PortugueseAnalyzer::getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_PortugueseAnalyzer_get__defaultStopSet(t_PortugueseAnalyzer *self, void *data)
          {
            ::org::apache::lucene::analysis::util::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/BaseCompositeReader.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/StoredFieldVisitor.h"
#include "org/apache/lucene/index/Fields.h"
#include "org/apache/lucene/index/Term.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *BaseCompositeReader::class$ = NULL;
        jmethodID *BaseCompositeReader::mids$ = NULL;
        bool BaseCompositeReader::live$ = false;

        jclass BaseCompositeReader::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/BaseCompositeReader");

            mids$ = new jmethodID[max_mid];
            mids$[mid_docFreq_7eca6a9e] = env->getMethodID(cls, "docFreq", "(Lorg/apache/lucene/index/Term;)I");
            mids$[mid_document_a2ea3ebe] = env->getMethodID(cls, "document", "(ILorg/apache/lucene/index/StoredFieldVisitor;)V");
            mids$[mid_getDocCount_5fdc3f57] = env->getMethodID(cls, "getDocCount", "(Ljava/lang/String;)I");
            mids$[mid_getSumDocFreq_5fdc3f54] = env->getMethodID(cls, "getSumDocFreq", "(Ljava/lang/String;)J");
            mids$[mid_getSumTotalTermFreq_5fdc3f54] = env->getMethodID(cls, "getSumTotalTermFreq", "(Ljava/lang/String;)J");
            mids$[mid_getTermVectors_ef1c9c73] = env->getMethodID(cls, "getTermVectors", "(I)Lorg/apache/lucene/index/Fields;");
            mids$[mid_maxDoc_54c6a179] = env->getMethodID(cls, "maxDoc", "()I");
            mids$[mid_numDocs_54c6a179] = env->getMethodID(cls, "numDocs", "()I");
            mids$[mid_totalTermFreq_7eca6a9d] = env->getMethodID(cls, "totalTermFreq", "(Lorg/apache/lucene/index/Term;)J");
            mids$[mid_readerIndex_39c7bd23] = env->getMethodID(cls, "readerIndex", "(I)I");
            mids$[mid_getSequentialSubReaders_87851566] = env->getMethodID(cls, "getSequentialSubReaders", "()Ljava/util/List;");
            mids$[mid_readerBase_39c7bd23] = env->getMethodID(cls, "readerBase", "(I)I");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jint BaseCompositeReader::docFreq(const ::org::apache::lucene::index::Term & a0) const
        {
          return env->callIntMethod(this$, mids$[mid_docFreq_7eca6a9e], a0.this$);
        }

        void BaseCompositeReader::document(jint a0, const ::org::apache::lucene::index::StoredFieldVisitor & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_document_a2ea3ebe], a0, a1.this$);
        }

        jint BaseCompositeReader::getDocCount(const ::java::lang::String & a0) const
        {
          return env->callIntMethod(this$, mids$[mid_getDocCount_5fdc3f57], a0.this$);
        }

        jlong BaseCompositeReader::getSumDocFreq(const ::java::lang::String & a0) const
        {
          return env->callLongMethod(this$, mids$[mid_getSumDocFreq_5fdc3f54], a0.this$);
        }

        jlong BaseCompositeReader::getSumTotalTermFreq(const ::java::lang::String & a0) const
        {
          return env->callLongMethod(this$, mids$[mid_getSumTotalTermFreq_5fdc3f54], a0.this$);
        }

        ::org::apache::lucene::index::Fields BaseCompositeReader::getTermVectors(jint a0) const
        {
          return ::org::apache::lucene::index::Fields(env->callObjectMethod(this$, mids$[mid_getTermVectors_ef1c9c73], a0));
        }

        jint BaseCompositeReader::maxDoc() const
        {
          return env->callIntMethod(this$, mids$[mid_maxDoc_54c6a179]);
        }

        jint BaseCompositeReader::numDocs() const
        {
          return env->callIntMethod(this$, mids$[mid_numDocs_54c6a179]);
        }

        jlong BaseCompositeReader::totalTermFreq(const ::org::apache::lucene::index::Term & a0) const
        {
          return env->callLongMethod(this$, mids$[mid_totalTermFreq_7eca6a9d], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_BaseCompositeReader_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BaseCompositeReader_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BaseCompositeReader_of_(t_BaseCompositeReader *self, PyObject *args);
        static PyObject *t_BaseCompositeReader_docFreq(t_BaseCompositeReader *self, PyObject *args);
        static PyObject *t_BaseCompositeReader_document(t_BaseCompositeReader *self, PyObject *args);
        static PyObject *t_BaseCompositeReader_getDocCount(t_BaseCompositeReader *self, PyObject *args);
        static PyObject *t_BaseCompositeReader_getSumDocFreq(t_BaseCompositeReader *self, PyObject *args);
        static PyObject *t_BaseCompositeReader_getSumTotalTermFreq(t_BaseCompositeReader *self, PyObject *args);
        static PyObject *t_BaseCompositeReader_getTermVectors(t_BaseCompositeReader *self, PyObject *args);
        static PyObject *t_BaseCompositeReader_maxDoc(t_BaseCompositeReader *self, PyObject *args);
        static PyObject *t_BaseCompositeReader_numDocs(t_BaseCompositeReader *self, PyObject *args);
        static PyObject *t_BaseCompositeReader_totalTermFreq(t_BaseCompositeReader *self, PyObject *args);
        static PyObject *t_BaseCompositeReader_get__parameters_(t_BaseCompositeReader *self, void *data);
        static PyGetSetDef t_BaseCompositeReader__fields_[] = {
          DECLARE_GET_FIELD(t_BaseCompositeReader, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_BaseCompositeReader__methods_[] = {
          DECLARE_METHOD(t_BaseCompositeReader, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BaseCompositeReader, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BaseCompositeReader, of_, METH_VARARGS),
          DECLARE_METHOD(t_BaseCompositeReader, docFreq, METH_VARARGS),
          DECLARE_METHOD(t_BaseCompositeReader, document, METH_VARARGS),
          DECLARE_METHOD(t_BaseCompositeReader, getDocCount, METH_VARARGS),
          DECLARE_METHOD(t_BaseCompositeReader, getSumDocFreq, METH_VARARGS),
          DECLARE_METHOD(t_BaseCompositeReader, getSumTotalTermFreq, METH_VARARGS),
          DECLARE_METHOD(t_BaseCompositeReader, getTermVectors, METH_VARARGS),
          DECLARE_METHOD(t_BaseCompositeReader, maxDoc, METH_VARARGS),
          DECLARE_METHOD(t_BaseCompositeReader, numDocs, METH_VARARGS),
          DECLARE_METHOD(t_BaseCompositeReader, totalTermFreq, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(BaseCompositeReader, t_BaseCompositeReader, ::org::apache::lucene::index::CompositeReader, BaseCompositeReader, abstract_init, 0, 0, t_BaseCompositeReader__fields_, 0, 0);
        PyObject *t_BaseCompositeReader::wrap_Object(const BaseCompositeReader& object, PyTypeObject *p0)
        {
          PyObject *obj = t_BaseCompositeReader::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_BaseCompositeReader *self = (t_BaseCompositeReader *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_BaseCompositeReader::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_BaseCompositeReader::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_BaseCompositeReader *self = (t_BaseCompositeReader *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_BaseCompositeReader::install(PyObject *module)
        {
          installType(&PY_TYPE(BaseCompositeReader), module, "BaseCompositeReader", 0);
        }

        void t_BaseCompositeReader::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(BaseCompositeReader).tp_dict, "class_", make_descriptor(BaseCompositeReader::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(BaseCompositeReader).tp_dict, "wrapfn_", make_descriptor(t_BaseCompositeReader::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(BaseCompositeReader).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_BaseCompositeReader_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, BaseCompositeReader::initializeClass, 1)))
            return NULL;
          return t_BaseCompositeReader::wrap_Object(BaseCompositeReader(((t_BaseCompositeReader *) arg)->object.this$));
        }
        static PyObject *t_BaseCompositeReader_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, BaseCompositeReader::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_BaseCompositeReader_of_(t_BaseCompositeReader *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_BaseCompositeReader_docFreq(t_BaseCompositeReader *self, PyObject *args)
        {
          ::org::apache::lucene::index::Term a0((jobject) NULL);
          jint result;

          if (!parseArgs(args, "k", ::org::apache::lucene::index::Term::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.docFreq(a0));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(BaseCompositeReader), (PyObject *) self, "docFreq", args, 2);
        }

        static PyObject *t_BaseCompositeReader_document(t_BaseCompositeReader *self, PyObject *args)
        {
          jint a0;
          ::org::apache::lucene::index::StoredFieldVisitor a1((jobject) NULL);

          if (!parseArgs(args, "Ik", ::org::apache::lucene::index::StoredFieldVisitor::initializeClass, &a0, &a1))
          {
            OBJ_CALL(self->object.document(a0, a1));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(BaseCompositeReader), (PyObject *) self, "document", args, 2);
        }

        static PyObject *t_BaseCompositeReader_getDocCount(t_BaseCompositeReader *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          jint result;

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getDocCount(a0));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(BaseCompositeReader), (PyObject *) self, "getDocCount", args, 2);
        }

        static PyObject *t_BaseCompositeReader_getSumDocFreq(t_BaseCompositeReader *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          jlong result;

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getSumDocFreq(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(BaseCompositeReader), (PyObject *) self, "getSumDocFreq", args, 2);
        }

        static PyObject *t_BaseCompositeReader_getSumTotalTermFreq(t_BaseCompositeReader *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          jlong result;

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getSumTotalTermFreq(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(BaseCompositeReader), (PyObject *) self, "getSumTotalTermFreq", args, 2);
        }

        static PyObject *t_BaseCompositeReader_getTermVectors(t_BaseCompositeReader *self, PyObject *args)
        {
          jint a0;
          ::org::apache::lucene::index::Fields result((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.getTermVectors(a0));
            return ::org::apache::lucene::index::t_Fields::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(BaseCompositeReader), (PyObject *) self, "getTermVectors", args, 2);
        }

        static PyObject *t_BaseCompositeReader_maxDoc(t_BaseCompositeReader *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.maxDoc());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(BaseCompositeReader), (PyObject *) self, "maxDoc", args, 2);
        }

        static PyObject *t_BaseCompositeReader_numDocs(t_BaseCompositeReader *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.numDocs());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(BaseCompositeReader), (PyObject *) self, "numDocs", args, 2);
        }

        static PyObject *t_BaseCompositeReader_totalTermFreq(t_BaseCompositeReader *self, PyObject *args)
        {
          ::org::apache::lucene::index::Term a0((jobject) NULL);
          jlong result;

          if (!parseArgs(args, "k", ::org::apache::lucene::index::Term::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.totalTermFreq(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(BaseCompositeReader), (PyObject *) self, "totalTermFreq", args, 2);
        }
        static PyObject *t_BaseCompositeReader_get__parameters_(t_BaseCompositeReader *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/processors/MultiFieldQueryNodeProcessor.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {

              ::java::lang::Class *MultiFieldQueryNodeProcessor::class$ = NULL;
              jmethodID *MultiFieldQueryNodeProcessor::mids$ = NULL;
              bool MultiFieldQueryNodeProcessor::live$ = false;

              jclass MultiFieldQueryNodeProcessor::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/processors/MultiFieldQueryNodeProcessor");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_postProcessNode_6705aed7] = env->getMethodID(cls, "postProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_preProcessNode_6705aed7] = env->getMethodID(cls, "preProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_setChildrenOrder_4f378251] = env->getMethodID(cls, "setChildrenOrder", "(Ljava/util/List;)Ljava/util/List;");
                  mids$[mid_processChildren_cc04aeef] = env->getMethodID(cls, "processChildren", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)V");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              MultiFieldQueryNodeProcessor::MultiFieldQueryNodeProcessor() : ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {
              static PyObject *t_MultiFieldQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_MultiFieldQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg);
              static int t_MultiFieldQueryNodeProcessor_init_(t_MultiFieldQueryNodeProcessor *self, PyObject *args, PyObject *kwds);

              static PyMethodDef t_MultiFieldQueryNodeProcessor__methods_[] = {
                DECLARE_METHOD(t_MultiFieldQueryNodeProcessor, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_MultiFieldQueryNodeProcessor, instance_, METH_O | METH_CLASS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(MultiFieldQueryNodeProcessor, t_MultiFieldQueryNodeProcessor, ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl, MultiFieldQueryNodeProcessor, t_MultiFieldQueryNodeProcessor_init_, 0, 0, 0, 0, 0);

              void t_MultiFieldQueryNodeProcessor::install(PyObject *module)
              {
                installType(&PY_TYPE(MultiFieldQueryNodeProcessor), module, "MultiFieldQueryNodeProcessor", 0);
              }

              void t_MultiFieldQueryNodeProcessor::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(MultiFieldQueryNodeProcessor).tp_dict, "class_", make_descriptor(MultiFieldQueryNodeProcessor::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(MultiFieldQueryNodeProcessor).tp_dict, "wrapfn_", make_descriptor(t_MultiFieldQueryNodeProcessor::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(MultiFieldQueryNodeProcessor).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_MultiFieldQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, MultiFieldQueryNodeProcessor::initializeClass, 1)))
                  return NULL;
                return t_MultiFieldQueryNodeProcessor::wrap_Object(MultiFieldQueryNodeProcessor(((t_MultiFieldQueryNodeProcessor *) arg)->object.this$));
              }
              static PyObject *t_MultiFieldQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, MultiFieldQueryNodeProcessor::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_MultiFieldQueryNodeProcessor_init_(t_MultiFieldQueryNodeProcessor *self, PyObject *args, PyObject *kwds)
              {
                MultiFieldQueryNodeProcessor object((jobject) NULL);

                INT_CALL(object = MultiFieldQueryNodeProcessor());
                self->object = object;

                return 0;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/lv/LatvianStemmer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace lv {

          ::java::lang::Class *LatvianStemmer::class$ = NULL;
          jmethodID *LatvianStemmer::mids$ = NULL;
          bool LatvianStemmer::live$ = false;

          jclass LatvianStemmer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/lv/LatvianStemmer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_stem_ec6430eb] = env->getMethodID(cls, "stem", "([CI)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          LatvianStemmer::LatvianStemmer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint LatvianStemmer::stem(const JArray< jchar > & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_stem_ec6430eb], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace lv {
          static PyObject *t_LatvianStemmer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LatvianStemmer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_LatvianStemmer_init_(t_LatvianStemmer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_LatvianStemmer_stem(t_LatvianStemmer *self, PyObject *args);

          static PyMethodDef t_LatvianStemmer__methods_[] = {
            DECLARE_METHOD(t_LatvianStemmer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LatvianStemmer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LatvianStemmer, stem, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(LatvianStemmer, t_LatvianStemmer, ::java::lang::Object, LatvianStemmer, t_LatvianStemmer_init_, 0, 0, 0, 0, 0);

          void t_LatvianStemmer::install(PyObject *module)
          {
            installType(&PY_TYPE(LatvianStemmer), module, "LatvianStemmer", 0);
          }

          void t_LatvianStemmer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(LatvianStemmer).tp_dict, "class_", make_descriptor(LatvianStemmer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(LatvianStemmer).tp_dict, "wrapfn_", make_descriptor(t_LatvianStemmer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(LatvianStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_LatvianStemmer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LatvianStemmer::initializeClass, 1)))
              return NULL;
            return t_LatvianStemmer::wrap_Object(LatvianStemmer(((t_LatvianStemmer *) arg)->object.this$));
          }
          static PyObject *t_LatvianStemmer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LatvianStemmer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_LatvianStemmer_init_(t_LatvianStemmer *self, PyObject *args, PyObject *kwds)
          {
            LatvianStemmer object((jobject) NULL);

            INT_CALL(object = LatvianStemmer());
            self->object = object;

            return 0;
          }

          static PyObject *t_LatvianStemmer_stem(t_LatvianStemmer *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(result = self->object.stem(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "stem", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/StoredFieldsWriter.h"
#include "java/io/Closeable.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/MergeState.h"
#include "org/apache/lucene/index/FieldInfo.h"
#include "org/apache/lucene/index/IndexableField.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {

        ::java::lang::Class *StoredFieldsWriter::class$ = NULL;
        jmethodID *StoredFieldsWriter::mids$ = NULL;
        bool StoredFieldsWriter::live$ = false;

        jclass StoredFieldsWriter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/StoredFieldsWriter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_abort_54c6a166] = env->getMethodID(cls, "abort", "()V");
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_finish_48f050c2] = env->getMethodID(cls, "finish", "(Lorg/apache/lucene/index/FieldInfos;I)V");
            mids$[mid_finishDocument_54c6a166] = env->getMethodID(cls, "finishDocument", "()V");
            mids$[mid_merge_fd0cfdeb] = env->getMethodID(cls, "merge", "(Lorg/apache/lucene/index/MergeState;)I");
            mids$[mid_startDocument_54c6a166] = env->getMethodID(cls, "startDocument", "()V");
            mids$[mid_writeField_0de3c993] = env->getMethodID(cls, "writeField", "(Lorg/apache/lucene/index/FieldInfo;Lorg/apache/lucene/index/IndexableField;)V");
            mids$[mid_addDocument_2c3bf2c7] = env->getMethodID(cls, "addDocument", "(Ljava/lang/Iterable;Lorg/apache/lucene/index/FieldInfos;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void StoredFieldsWriter::abort() const
        {
          env->callVoidMethod(this$, mids$[mid_abort_54c6a166]);
        }

        void StoredFieldsWriter::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        void StoredFieldsWriter::finish(const ::org::apache::lucene::index::FieldInfos & a0, jint a1) const
        {
          env->callVoidMethod(this$, mids$[mid_finish_48f050c2], a0.this$, a1);
        }

        void StoredFieldsWriter::finishDocument() const
        {
          env->callVoidMethod(this$, mids$[mid_finishDocument_54c6a166]);
        }

        jint StoredFieldsWriter::merge(const ::org::apache::lucene::index::MergeState & a0) const
        {
          return env->callIntMethod(this$, mids$[mid_merge_fd0cfdeb], a0.this$);
        }

        void StoredFieldsWriter::startDocument() const
        {
          env->callVoidMethod(this$, mids$[mid_startDocument_54c6a166]);
        }

        void StoredFieldsWriter::writeField(const ::org::apache::lucene::index::FieldInfo & a0, const ::org::apache::lucene::index::IndexableField & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_writeField_0de3c993], a0.this$, a1.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        static PyObject *t_StoredFieldsWriter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_StoredFieldsWriter_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_StoredFieldsWriter_abort(t_StoredFieldsWriter *self);
        static PyObject *t_StoredFieldsWriter_close(t_StoredFieldsWriter *self);
        static PyObject *t_StoredFieldsWriter_finish(t_StoredFieldsWriter *self, PyObject *args);
        static PyObject *t_StoredFieldsWriter_finishDocument(t_StoredFieldsWriter *self);
        static PyObject *t_StoredFieldsWriter_merge(t_StoredFieldsWriter *self, PyObject *arg);
        static PyObject *t_StoredFieldsWriter_startDocument(t_StoredFieldsWriter *self);
        static PyObject *t_StoredFieldsWriter_writeField(t_StoredFieldsWriter *self, PyObject *args);

        static PyMethodDef t_StoredFieldsWriter__methods_[] = {
          DECLARE_METHOD(t_StoredFieldsWriter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_StoredFieldsWriter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_StoredFieldsWriter, abort, METH_NOARGS),
          DECLARE_METHOD(t_StoredFieldsWriter, close, METH_NOARGS),
          DECLARE_METHOD(t_StoredFieldsWriter, finish, METH_VARARGS),
          DECLARE_METHOD(t_StoredFieldsWriter, finishDocument, METH_NOARGS),
          DECLARE_METHOD(t_StoredFieldsWriter, merge, METH_O),
          DECLARE_METHOD(t_StoredFieldsWriter, startDocument, METH_NOARGS),
          DECLARE_METHOD(t_StoredFieldsWriter, writeField, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(StoredFieldsWriter, t_StoredFieldsWriter, ::java::lang::Object, StoredFieldsWriter, abstract_init, 0, 0, 0, 0, 0);

        void t_StoredFieldsWriter::install(PyObject *module)
        {
          installType(&PY_TYPE(StoredFieldsWriter), module, "StoredFieldsWriter", 0);
        }

        void t_StoredFieldsWriter::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(StoredFieldsWriter).tp_dict, "class_", make_descriptor(StoredFieldsWriter::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(StoredFieldsWriter).tp_dict, "wrapfn_", make_descriptor(t_StoredFieldsWriter::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(StoredFieldsWriter).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_StoredFieldsWriter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, StoredFieldsWriter::initializeClass, 1)))
            return NULL;
          return t_StoredFieldsWriter::wrap_Object(StoredFieldsWriter(((t_StoredFieldsWriter *) arg)->object.this$));
        }
        static PyObject *t_StoredFieldsWriter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, StoredFieldsWriter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_StoredFieldsWriter_abort(t_StoredFieldsWriter *self)
        {
          OBJ_CALL(self->object.abort());
          Py_RETURN_NONE;
        }

        static PyObject *t_StoredFieldsWriter_close(t_StoredFieldsWriter *self)
        {
          OBJ_CALL(self->object.close());
          Py_RETURN_NONE;
        }

        static PyObject *t_StoredFieldsWriter_finish(t_StoredFieldsWriter *self, PyObject *args)
        {
          ::org::apache::lucene::index::FieldInfos a0((jobject) NULL);
          jint a1;

          if (!parseArgs(args, "kI", ::org::apache::lucene::index::FieldInfos::initializeClass, &a0, &a1))
          {
            OBJ_CALL(self->object.finish(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "finish", args);
          return NULL;
        }

        static PyObject *t_StoredFieldsWriter_finishDocument(t_StoredFieldsWriter *self)
        {
          OBJ_CALL(self->object.finishDocument());
          Py_RETURN_NONE;
        }

        static PyObject *t_StoredFieldsWriter_merge(t_StoredFieldsWriter *self, PyObject *arg)
        {
          ::org::apache::lucene::index::MergeState a0((jobject) NULL);
          jint result;

          if (!parseArg(arg, "k", ::org::apache::lucene::index::MergeState::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.merge(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "merge", arg);
          return NULL;
        }

        static PyObject *t_StoredFieldsWriter_startDocument(t_StoredFieldsWriter *self)
        {
          OBJ_CALL(self->object.startDocument());
          Py_RETURN_NONE;
        }

        static PyObject *t_StoredFieldsWriter_writeField(t_StoredFieldsWriter *self, PyObject *args)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          ::org::apache::lucene::index::IndexableField a1((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::index::FieldInfo::initializeClass, ::org::apache::lucene::index::IndexableField::initializeClass, &a0, &a1))
          {
            OBJ_CALL(self->object.writeField(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "writeField", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/highlight/TokenSources.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/Terms.h"
#include "org/apache/lucene/document/Document.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {

          ::java::lang::Class *TokenSources::class$ = NULL;
          jmethodID *TokenSources::mids$ = NULL;
          bool TokenSources::live$ = false;

          jclass TokenSources::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/highlight/TokenSources");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_getAnyTokenStream_2593cc2a] = env->getStaticMethodID(cls, "getAnyTokenStream", "(Lorg/apache/lucene/index/IndexReader;ILjava/lang/String;Lorg/apache/lucene/analysis/Analyzer;)Lorg/apache/lucene/analysis/TokenStream;");
              mids$[mid_getAnyTokenStream_326e373c] = env->getStaticMethodID(cls, "getAnyTokenStream", "(Lorg/apache/lucene/index/IndexReader;ILjava/lang/String;Lorg/apache/lucene/document/Document;Lorg/apache/lucene/analysis/Analyzer;)Lorg/apache/lucene/analysis/TokenStream;");
              mids$[mid_getTokenStream_a3ddc01a] = env->getStaticMethodID(cls, "getTokenStream", "(Lorg/apache/lucene/index/Terms;)Lorg/apache/lucene/analysis/TokenStream;");
              mids$[mid_getTokenStream_6006da77] = env->getStaticMethodID(cls, "getTokenStream", "(Lorg/apache/lucene/index/Terms;Z)Lorg/apache/lucene/analysis/TokenStream;");
              mids$[mid_getTokenStream_f436def7] = env->getStaticMethodID(cls, "getTokenStream", "(Ljava/lang/String;Ljava/lang/String;Lorg/apache/lucene/analysis/Analyzer;)Lorg/apache/lucene/analysis/TokenStream;");
              mids$[mid_getTokenStream_5d782325] = env->getStaticMethodID(cls, "getTokenStream", "(Lorg/apache/lucene/document/Document;Ljava/lang/String;Lorg/apache/lucene/analysis/Analyzer;)Lorg/apache/lucene/analysis/TokenStream;");
              mids$[mid_getTokenStream_2593cc2a] = env->getStaticMethodID(cls, "getTokenStream", "(Lorg/apache/lucene/index/IndexReader;ILjava/lang/String;Lorg/apache/lucene/analysis/Analyzer;)Lorg/apache/lucene/analysis/TokenStream;");
              mids$[mid_getTokenStreamWithOffsets_1c01cdda] = env->getStaticMethodID(cls, "getTokenStreamWithOffsets", "(Lorg/apache/lucene/index/IndexReader;ILjava/lang/String;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TokenSources::TokenSources() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::analysis::TokenStream TokenSources::getAnyTokenStream(const ::org::apache::lucene::index::IndexReader & a0, jint a1, const ::java::lang::String & a2, const ::org::apache::lucene::analysis::Analyzer & a3)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::TokenStream(env->callStaticObjectMethod(cls, mids$[mid_getAnyTokenStream_2593cc2a], a0.this$, a1, a2.this$, a3.this$));
          }

          ::org::apache::lucene::analysis::TokenStream TokenSources::getAnyTokenStream(const ::org::apache::lucene::index::IndexReader & a0, jint a1, const ::java::lang::String & a2, const ::org::apache::lucene::document::Document & a3, const ::org::apache::lucene::analysis::Analyzer & a4)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::TokenStream(env->callStaticObjectMethod(cls, mids$[mid_getAnyTokenStream_326e373c], a0.this$, a1, a2.this$, a3.this$, a4.this$));
          }

          ::org::apache::lucene::analysis::TokenStream TokenSources::getTokenStream(const ::org::apache::lucene::index::Terms & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::TokenStream(env->callStaticObjectMethod(cls, mids$[mid_getTokenStream_a3ddc01a], a0.this$));
          }

          ::org::apache::lucene::analysis::TokenStream TokenSources::getTokenStream(const ::org::apache::lucene::index::Terms & a0, jboolean a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::TokenStream(env->callStaticObjectMethod(cls, mids$[mid_getTokenStream_6006da77], a0.this$, a1));
          }

          ::org::apache::lucene::analysis::TokenStream TokenSources::getTokenStream(const ::java::lang::String & a0, const ::java::lang::String & a1, const ::org::apache::lucene::analysis::Analyzer & a2)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::TokenStream(env->callStaticObjectMethod(cls, mids$[mid_getTokenStream_f436def7], a0.this$, a1.this$, a2.this$));
          }

          ::org::apache::lucene::analysis::TokenStream TokenSources::getTokenStream(const ::org::apache::lucene::document::Document & a0, const ::java::lang::String & a1, const ::org::apache::lucene::analysis::Analyzer & a2)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::TokenStream(env->callStaticObjectMethod(cls, mids$[mid_getTokenStream_5d782325], a0.this$, a1.this$, a2.this$));
          }

          ::org::apache::lucene::analysis::TokenStream TokenSources::getTokenStream(const ::org::apache::lucene::index::IndexReader & a0, jint a1, const ::java::lang::String & a2, const ::org::apache::lucene::analysis::Analyzer & a3)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::TokenStream(env->callStaticObjectMethod(cls, mids$[mid_getTokenStream_2593cc2a], a0.this$, a1, a2.this$, a3.this$));
          }

          ::org::apache::lucene::analysis::TokenStream TokenSources::getTokenStreamWithOffsets(const ::org::apache::lucene::index::IndexReader & a0, jint a1, const ::java::lang::String & a2)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::TokenStream(env->callStaticObjectMethod(cls, mids$[mid_getTokenStreamWithOffsets_1c01cdda], a0.this$, a1, a2.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {
          static PyObject *t_TokenSources_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TokenSources_instance_(PyTypeObject *type, PyObject *arg);
          static int t_TokenSources_init_(t_TokenSources *self, PyObject *args, PyObject *kwds);
          static PyObject *t_TokenSources_getAnyTokenStream(PyTypeObject *type, PyObject *args);
          static PyObject *t_TokenSources_getTokenStream(PyTypeObject *type, PyObject *args);
          static PyObject *t_TokenSources_getTokenStreamWithOffsets(PyTypeObject *type, PyObject *args);

          static PyMethodDef t_TokenSources__methods_[] = {
            DECLARE_METHOD(t_TokenSources, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TokenSources, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TokenSources, getAnyTokenStream, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_TokenSources, getTokenStream, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_TokenSources, getTokenStreamWithOffsets, METH_VARARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(TokenSources, t_TokenSources, ::java::lang::Object, TokenSources, t_TokenSources_init_, 0, 0, 0, 0, 0);

          void t_TokenSources::install(PyObject *module)
          {
            installType(&PY_TYPE(TokenSources), module, "TokenSources", 0);
          }

          void t_TokenSources::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(TokenSources).tp_dict, "class_", make_descriptor(TokenSources::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(TokenSources).tp_dict, "wrapfn_", make_descriptor(t_TokenSources::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(TokenSources).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TokenSources_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TokenSources::initializeClass, 1)))
              return NULL;
            return t_TokenSources::wrap_Object(TokenSources(((t_TokenSources *) arg)->object.this$));
          }
          static PyObject *t_TokenSources_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TokenSources::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_TokenSources_init_(t_TokenSources *self, PyObject *args, PyObject *kwds)
          {
            TokenSources object((jobject) NULL);

            INT_CALL(object = TokenSources());
            self->object = object;

            return 0;
          }

          static PyObject *t_TokenSources_getAnyTokenStream(PyTypeObject *type, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 4:
              {
                ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
                jint a1;
                ::java::lang::String a2((jobject) NULL);
                ::org::apache::lucene::analysis::Analyzer a3((jobject) NULL);
                ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

                if (!parseArgs(args, "kIsk", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1, &a2, &a3))
                {
                  OBJ_CALL(result = ::org::apache::lucene::search::highlight::TokenSources::getAnyTokenStream(a0, a1, a2, a3));
                  return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
                }
              }
              break;
             case 5:
              {
                ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
                jint a1;
                ::java::lang::String a2((jobject) NULL);
                ::org::apache::lucene::document::Document a3((jobject) NULL);
                ::org::apache::lucene::analysis::Analyzer a4((jobject) NULL);
                ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

                if (!parseArgs(args, "kIskk", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::document::Document::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1, &a2, &a3, &a4))
                {
                  OBJ_CALL(result = ::org::apache::lucene::search::highlight::TokenSources::getAnyTokenStream(a0, a1, a2, a3, a4));
                  return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError(type, "getAnyTokenStream", args);
            return NULL;
          }

          static PyObject *t_TokenSources_getTokenStream(PyTypeObject *type, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::index::Terms a0((jobject) NULL);
                ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::index::Terms::initializeClass, &a0))
                {
                  OBJ_CALL(result = ::org::apache::lucene::search::highlight::TokenSources::getTokenStream(a0));
                  return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
                }
              }
              break;
             case 2:
              {
                ::org::apache::lucene::index::Terms a0((jobject) NULL);
                jboolean a1;
                ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

                if (!parseArgs(args, "kZ", ::org::apache::lucene::index::Terms::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(result = ::org::apache::lucene::search::highlight::TokenSources::getTokenStream(a0, a1));
                  return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
                }
              }
              break;
             case 3:
              {
                ::java::lang::String a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                ::org::apache::lucene::analysis::Analyzer a2((jobject) NULL);
                ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

                if (!parseArgs(args, "ssk", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1, &a2))
                {
                  OBJ_CALL(result = ::org::apache::lucene::search::highlight::TokenSources::getTokenStream(a0, a1, a2));
                  return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
                }
              }
              {
                ::org::apache::lucene::document::Document a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                ::org::apache::lucene::analysis::Analyzer a2((jobject) NULL);
                ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

                if (!parseArgs(args, "ksk", ::org::apache::lucene::document::Document::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1, &a2))
                {
                  OBJ_CALL(result = ::org::apache::lucene::search::highlight::TokenSources::getTokenStream(a0, a1, a2));
                  return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
                }
              }
              break;
             case 4:
              {
                ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
                jint a1;
                ::java::lang::String a2((jobject) NULL);
                ::org::apache::lucene::analysis::Analyzer a3((jobject) NULL);
                ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

                if (!parseArgs(args, "kIsk", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1, &a2, &a3))
                {
                  OBJ_CALL(result = ::org::apache::lucene::search::highlight::TokenSources::getTokenStream(a0, a1, a2, a3));
                  return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError(type, "getTokenStream", args);
            return NULL;
          }

          static PyObject *t_TokenSources_getTokenStreamWithOffsets(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
            jint a1;
            ::java::lang::String a2((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "kIs", ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = ::org::apache::lucene::search::highlight::TokenSources::getTokenStreamWithOffsets(a0, a1, a2));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "getTokenStreamWithOffsets", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/sandbox/queries/regex/RegexCapabilities$RegexMatcher.h"
#include "java/lang/String.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace sandbox {
        namespace queries {
          namespace regex {

            ::java::lang::Class *RegexCapabilities$RegexMatcher::class$ = NULL;
            jmethodID *RegexCapabilities$RegexMatcher::mids$ = NULL;
            bool RegexCapabilities$RegexMatcher::live$ = false;

            jclass RegexCapabilities$RegexMatcher::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/sandbox/queries/regex/RegexCapabilities$RegexMatcher");

                mids$ = new jmethodID[max_mid];
                mids$[mid_match_7bc03dc8] = env->getMethodID(cls, "match", "(Lorg/apache/lucene/util/BytesRef;)Z");
                mids$[mid_prefix_14c7b5c5] = env->getMethodID(cls, "prefix", "()Ljava/lang/String;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            jboolean RegexCapabilities$RegexMatcher::match(const ::org::apache::lucene::util::BytesRef & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_match_7bc03dc8], a0.this$);
            }

            ::java::lang::String RegexCapabilities$RegexMatcher::prefix() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_prefix_14c7b5c5]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace sandbox {
        namespace queries {
          namespace regex {
            static PyObject *t_RegexCapabilities$RegexMatcher_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_RegexCapabilities$RegexMatcher_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_RegexCapabilities$RegexMatcher_match(t_RegexCapabilities$RegexMatcher *self, PyObject *arg);
            static PyObject *t_RegexCapabilities$RegexMatcher_prefix(t_RegexCapabilities$RegexMatcher *self);

            static PyMethodDef t_RegexCapabilities$RegexMatcher__methods_[] = {
              DECLARE_METHOD(t_RegexCapabilities$RegexMatcher, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_RegexCapabilities$RegexMatcher, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_RegexCapabilities$RegexMatcher, match, METH_O),
              DECLARE_METHOD(t_RegexCapabilities$RegexMatcher, prefix, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(RegexCapabilities$RegexMatcher, t_RegexCapabilities$RegexMatcher, ::java::lang::Object, RegexCapabilities$RegexMatcher, abstract_init, 0, 0, 0, 0, 0);

            void t_RegexCapabilities$RegexMatcher::install(PyObject *module)
            {
              installType(&PY_TYPE(RegexCapabilities$RegexMatcher), module, "RegexCapabilities$RegexMatcher", 0);
            }

            void t_RegexCapabilities$RegexMatcher::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(RegexCapabilities$RegexMatcher).tp_dict, "class_", make_descriptor(RegexCapabilities$RegexMatcher::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(RegexCapabilities$RegexMatcher).tp_dict, "wrapfn_", make_descriptor(t_RegexCapabilities$RegexMatcher::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(RegexCapabilities$RegexMatcher).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_RegexCapabilities$RegexMatcher_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, RegexCapabilities$RegexMatcher::initializeClass, 1)))
                return NULL;
              return t_RegexCapabilities$RegexMatcher::wrap_Object(RegexCapabilities$RegexMatcher(((t_RegexCapabilities$RegexMatcher *) arg)->object.this$));
            }
            static PyObject *t_RegexCapabilities$RegexMatcher_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, RegexCapabilities$RegexMatcher::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_RegexCapabilities$RegexMatcher_match(t_RegexCapabilities$RegexMatcher *self, PyObject *arg)
            {
              ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
              jboolean result;

              if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.match(a0));
                Py_RETURN_BOOL(result);
              }

              PyErr_SetArgsError((PyObject *) self, "match", arg);
              return NULL;
            }

            static PyObject *t_RegexCapabilities$RegexMatcher_prefix(t_RegexCapabilities$RegexMatcher *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.prefix());
              return j2p(result);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spans/SpanScorer.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {

          ::java::lang::Class *SpanScorer::class$ = NULL;
          jmethodID *SpanScorer::mids$ = NULL;
          bool SpanScorer::live$ = false;

          jclass SpanScorer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spans/SpanScorer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_advance_39c7bd23] = env->getMethodID(cls, "advance", "(I)I");
              mids$[mid_cost_54c6a17a] = env->getMethodID(cls, "cost", "()J");
              mids$[mid_docID_54c6a179] = env->getMethodID(cls, "docID", "()I");
              mids$[mid_freq_54c6a179] = env->getMethodID(cls, "freq", "()I");
              mids$[mid_nextDoc_54c6a179] = env->getMethodID(cls, "nextDoc", "()I");
              mids$[mid_score_54c6a176] = env->getMethodID(cls, "score", "()F");
              mids$[mid_sloppyFreq_54c6a176] = env->getMethodID(cls, "sloppyFreq", "()F");
              mids$[mid_setFreqCurrentDoc_54c6a16a] = env->getMethodID(cls, "setFreqCurrentDoc", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jint SpanScorer::advance(jint a0) const
          {
            return env->callIntMethod(this$, mids$[mid_advance_39c7bd23], a0);
          }

          jlong SpanScorer::cost() const
          {
            return env->callLongMethod(this$, mids$[mid_cost_54c6a17a]);
          }

          jint SpanScorer::docID() const
          {
            return env->callIntMethod(this$, mids$[mid_docID_54c6a179]);
          }

          jint SpanScorer::freq() const
          {
            return env->callIntMethod(this$, mids$[mid_freq_54c6a179]);
          }

          jint SpanScorer::nextDoc() const
          {
            return env->callIntMethod(this$, mids$[mid_nextDoc_54c6a179]);
          }

          jfloat SpanScorer::score() const
          {
            return env->callFloatMethod(this$, mids$[mid_score_54c6a176]);
          }

          jfloat SpanScorer::sloppyFreq() const
          {
            return env->callFloatMethod(this$, mids$[mid_sloppyFreq_54c6a176]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {
          static PyObject *t_SpanScorer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SpanScorer_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SpanScorer_advance(t_SpanScorer *self, PyObject *args);
          static PyObject *t_SpanScorer_cost(t_SpanScorer *self, PyObject *args);
          static PyObject *t_SpanScorer_docID(t_SpanScorer *self, PyObject *args);
          static PyObject *t_SpanScorer_freq(t_SpanScorer *self, PyObject *args);
          static PyObject *t_SpanScorer_nextDoc(t_SpanScorer *self, PyObject *args);
          static PyObject *t_SpanScorer_score(t_SpanScorer *self, PyObject *args);
          static PyObject *t_SpanScorer_sloppyFreq(t_SpanScorer *self);

          static PyMethodDef t_SpanScorer__methods_[] = {
            DECLARE_METHOD(t_SpanScorer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanScorer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanScorer, advance, METH_VARARGS),
            DECLARE_METHOD(t_SpanScorer, cost, METH_VARARGS),
            DECLARE_METHOD(t_SpanScorer, docID, METH_VARARGS),
            DECLARE_METHOD(t_SpanScorer, freq, METH_VARARGS),
            DECLARE_METHOD(t_SpanScorer, nextDoc, METH_VARARGS),
            DECLARE_METHOD(t_SpanScorer, score, METH_VARARGS),
            DECLARE_METHOD(t_SpanScorer, sloppyFreq, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SpanScorer, t_SpanScorer, ::org::apache::lucene::search::Scorer, SpanScorer, abstract_init, 0, 0, 0, 0, 0);

          void t_SpanScorer::install(PyObject *module)
          {
            installType(&PY_TYPE(SpanScorer), module, "SpanScorer", 0);
          }

          void t_SpanScorer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SpanScorer).tp_dict, "class_", make_descriptor(SpanScorer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SpanScorer).tp_dict, "wrapfn_", make_descriptor(t_SpanScorer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SpanScorer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SpanScorer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SpanScorer::initializeClass, 1)))
              return NULL;
            return t_SpanScorer::wrap_Object(SpanScorer(((t_SpanScorer *) arg)->object.this$));
          }
          static PyObject *t_SpanScorer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SpanScorer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_SpanScorer_advance(t_SpanScorer *self, PyObject *args)
          {
            jint a0;
            jint result;

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(result = self->object.advance(a0));
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(SpanScorer), (PyObject *) self, "advance", args, 2);
          }

          static PyObject *t_SpanScorer_cost(t_SpanScorer *self, PyObject *args)
          {
            jlong result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.cost());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(&PY_TYPE(SpanScorer), (PyObject *) self, "cost", args, 2);
          }

          static PyObject *t_SpanScorer_docID(t_SpanScorer *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.docID());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(SpanScorer), (PyObject *) self, "docID", args, 2);
          }

          static PyObject *t_SpanScorer_freq(t_SpanScorer *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.freq());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(SpanScorer), (PyObject *) self, "freq", args, 2);
          }

          static PyObject *t_SpanScorer_nextDoc(t_SpanScorer *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.nextDoc());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(SpanScorer), (PyObject *) self, "nextDoc", args, 2);
          }

          static PyObject *t_SpanScorer_score(t_SpanScorer *self, PyObject *args)
          {
            jfloat result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.score());
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(SpanScorer), (PyObject *) self, "score", args, 2);
          }

          static PyObject *t_SpanScorer_sloppyFreq(t_SpanScorer *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.sloppyFreq());
            return PyFloat_FromDouble((double) result);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/SimpleFSDirectory.h"
#include "org/apache/lucene/store/IndexInput.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/store/IOContext.h"
#include "java/io/File.h"
#include "org/apache/lucene/store/LockFactory.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *SimpleFSDirectory::class$ = NULL;
        jmethodID *SimpleFSDirectory::mids$ = NULL;
        bool SimpleFSDirectory::live$ = false;

        jclass SimpleFSDirectory::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/SimpleFSDirectory");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_c3dacf57] = env->getMethodID(cls, "<init>", "(Ljava/io/File;)V");
            mids$[mid_init$_5f9cf6ef] = env->getMethodID(cls, "<init>", "(Ljava/io/File;Lorg/apache/lucene/store/LockFactory;)V");
            mids$[mid_openInput_3e1b5375] = env->getMethodID(cls, "openInput", "(Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/store/IndexInput;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SimpleFSDirectory::SimpleFSDirectory(const ::java::io::File & a0) : ::org::apache::lucene::store::FSDirectory(env->newObject(initializeClass, &mids$, mid_init$_c3dacf57, a0.this$)) {}

        SimpleFSDirectory::SimpleFSDirectory(const ::java::io::File & a0, const ::org::apache::lucene::store::LockFactory & a1) : ::org::apache::lucene::store::FSDirectory(env->newObject(initializeClass, &mids$, mid_init$_5f9cf6ef, a0.this$, a1.this$)) {}

        ::org::apache::lucene::store::IndexInput SimpleFSDirectory::openInput(const ::java::lang::String & a0, const ::org::apache::lucene::store::IOContext & a1) const
        {
          return ::org::apache::lucene::store::IndexInput(env->callObjectMethod(this$, mids$[mid_openInput_3e1b5375], a0.this$, a1.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_SimpleFSDirectory_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SimpleFSDirectory_instance_(PyTypeObject *type, PyObject *arg);
        static int t_SimpleFSDirectory_init_(t_SimpleFSDirectory *self, PyObject *args, PyObject *kwds);
        static PyObject *t_SimpleFSDirectory_openInput(t_SimpleFSDirectory *self, PyObject *args);

        static PyMethodDef t_SimpleFSDirectory__methods_[] = {
          DECLARE_METHOD(t_SimpleFSDirectory, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SimpleFSDirectory, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SimpleFSDirectory, openInput, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SimpleFSDirectory, t_SimpleFSDirectory, ::org::apache::lucene::store::FSDirectory, SimpleFSDirectory, t_SimpleFSDirectory_init_, 0, 0, 0, 0, 0);

        void t_SimpleFSDirectory::install(PyObject *module)
        {
          installType(&PY_TYPE(SimpleFSDirectory), module, "SimpleFSDirectory", 0);
        }

        void t_SimpleFSDirectory::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SimpleFSDirectory).tp_dict, "class_", make_descriptor(SimpleFSDirectory::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SimpleFSDirectory).tp_dict, "wrapfn_", make_descriptor(t_SimpleFSDirectory::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SimpleFSDirectory).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SimpleFSDirectory_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SimpleFSDirectory::initializeClass, 1)))
            return NULL;
          return t_SimpleFSDirectory::wrap_Object(SimpleFSDirectory(((t_SimpleFSDirectory *) arg)->object.this$));
        }
        static PyObject *t_SimpleFSDirectory_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SimpleFSDirectory::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_SimpleFSDirectory_init_(t_SimpleFSDirectory *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::io::File a0((jobject) NULL);
              SimpleFSDirectory object((jobject) NULL);

              if (!parseArgs(args, "k", ::java::io::File::initializeClass, &a0))
              {
                INT_CALL(object = SimpleFSDirectory(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              ::java::io::File a0((jobject) NULL);
              ::org::apache::lucene::store::LockFactory a1((jobject) NULL);
              SimpleFSDirectory object((jobject) NULL);

              if (!parseArgs(args, "kk", ::java::io::File::initializeClass, ::org::apache::lucene::store::LockFactory::initializeClass, &a0, &a1))
              {
                INT_CALL(object = SimpleFSDirectory(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_SimpleFSDirectory_openInput(t_SimpleFSDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::store::IOContext a1((jobject) NULL);
          ::org::apache::lucene::store::IndexInput result((jobject) NULL);

          if (!parseArgs(args, "sk", ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.openInput(a0, a1));
            return ::org::apache::lucene::store::t_IndexInput::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(SimpleFSDirectory), (PyObject *) self, "openInput", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/payloads/MinPayloadFunction.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace payloads {

          ::java::lang::Class *MinPayloadFunction::class$ = NULL;
          jmethodID *MinPayloadFunction::mids$ = NULL;
          bool MinPayloadFunction::live$ = false;

          jclass MinPayloadFunction::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/payloads/MinPayloadFunction");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_currentScore_9fe8c3f6] = env->getMethodID(cls, "currentScore", "(ILjava/lang/String;IIIFF)F");
              mids$[mid_docScore_08788a8d] = env->getMethodID(cls, "docScore", "(ILjava/lang/String;IF)F");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          MinPayloadFunction::MinPayloadFunction() : ::org::apache::lucene::search::payloads::PayloadFunction(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jfloat MinPayloadFunction::currentScore(jint a0, const ::java::lang::String & a1, jint a2, jint a3, jint a4, jfloat a5, jfloat a6) const
          {
            return env->callFloatMethod(this$, mids$[mid_currentScore_9fe8c3f6], a0, a1.this$, a2, a3, a4, a5, a6);
          }

          jfloat MinPayloadFunction::docScore(jint a0, const ::java::lang::String & a1, jint a2, jfloat a3) const
          {
            return env->callFloatMethod(this$, mids$[mid_docScore_08788a8d], a0, a1.this$, a2, a3);
          }

          jboolean MinPayloadFunction::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          jint MinPayloadFunction::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace payloads {
          static PyObject *t_MinPayloadFunction_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_MinPayloadFunction_instance_(PyTypeObject *type, PyObject *arg);
          static int t_MinPayloadFunction_init_(t_MinPayloadFunction *self, PyObject *args, PyObject *kwds);
          static PyObject *t_MinPayloadFunction_currentScore(t_MinPayloadFunction *self, PyObject *args);
          static PyObject *t_MinPayloadFunction_docScore(t_MinPayloadFunction *self, PyObject *args);
          static PyObject *t_MinPayloadFunction_equals(t_MinPayloadFunction *self, PyObject *args);
          static PyObject *t_MinPayloadFunction_hashCode(t_MinPayloadFunction *self, PyObject *args);

          static PyMethodDef t_MinPayloadFunction__methods_[] = {
            DECLARE_METHOD(t_MinPayloadFunction, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MinPayloadFunction, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MinPayloadFunction, currentScore, METH_VARARGS),
            DECLARE_METHOD(t_MinPayloadFunction, docScore, METH_VARARGS),
            DECLARE_METHOD(t_MinPayloadFunction, equals, METH_VARARGS),
            DECLARE_METHOD(t_MinPayloadFunction, hashCode, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(MinPayloadFunction, t_MinPayloadFunction, ::org::apache::lucene::search::payloads::PayloadFunction, MinPayloadFunction, t_MinPayloadFunction_init_, 0, 0, 0, 0, 0);

          void t_MinPayloadFunction::install(PyObject *module)
          {
            installType(&PY_TYPE(MinPayloadFunction), module, "MinPayloadFunction", 0);
          }

          void t_MinPayloadFunction::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(MinPayloadFunction).tp_dict, "class_", make_descriptor(MinPayloadFunction::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(MinPayloadFunction).tp_dict, "wrapfn_", make_descriptor(t_MinPayloadFunction::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(MinPayloadFunction).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_MinPayloadFunction_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, MinPayloadFunction::initializeClass, 1)))
              return NULL;
            return t_MinPayloadFunction::wrap_Object(MinPayloadFunction(((t_MinPayloadFunction *) arg)->object.this$));
          }
          static PyObject *t_MinPayloadFunction_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, MinPayloadFunction::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_MinPayloadFunction_init_(t_MinPayloadFunction *self, PyObject *args, PyObject *kwds)
          {
            MinPayloadFunction object((jobject) NULL);

            INT_CALL(object = MinPayloadFunction());
            self->object = object;

            return 0;
          }

          static PyObject *t_MinPayloadFunction_currentScore(t_MinPayloadFunction *self, PyObject *args)
          {
            jint a0;
            ::java::lang::String a1((jobject) NULL);
            jint a2;
            jint a3;
            jint a4;
            jfloat a5;
            jfloat a6;
            jfloat result;

            if (!parseArgs(args, "IsIIIFF", &a0, &a1, &a2, &a3, &a4, &a5, &a6))
            {
              OBJ_CALL(result = self->object.currentScore(a0, a1, a2, a3, a4, a5, a6));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(MinPayloadFunction), (PyObject *) self, "currentScore", args, 2);
          }

          static PyObject *t_MinPayloadFunction_docScore(t_MinPayloadFunction *self, PyObject *args)
          {
            jint a0;
            ::java::lang::String a1((jobject) NULL);
            jint a2;
            jfloat a3;
            jfloat result;

            if (!parseArgs(args, "IsIF", &a0, &a1, &a2, &a3))
            {
              OBJ_CALL(result = self->object.docScore(a0, a1, a2, a3));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(MinPayloadFunction), (PyObject *) self, "docScore", args, 2);
          }

          static PyObject *t_MinPayloadFunction_equals(t_MinPayloadFunction *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(MinPayloadFunction), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_MinPayloadFunction_hashCode(t_MinPayloadFunction *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(MinPayloadFunction), (PyObject *) self, "hashCode", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/mutable/MutableValueBool.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace mutable$ {

          ::java::lang::Class *MutableValueBool::class$ = NULL;
          jmethodID *MutableValueBool::mids$ = NULL;
          jfieldID *MutableValueBool::fids$ = NULL;
          bool MutableValueBool::live$ = false;

          jclass MutableValueBool::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/mutable/MutableValueBool");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_compareSameType_290588f1] = env->getMethodID(cls, "compareSameType", "(Ljava/lang/Object;)I");
              mids$[mid_copy_d590ce7c] = env->getMethodID(cls, "copy", "(Lorg/apache/lucene/util/mutable/MutableValue;)V");
              mids$[mid_duplicate_15ab3811] = env->getMethodID(cls, "duplicate", "()Lorg/apache/lucene/util/mutable/MutableValue;");
              mids$[mid_equalsSameType_290588e2] = env->getMethodID(cls, "equalsSameType", "(Ljava/lang/Object;)Z");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_toObject_846352c3] = env->getMethodID(cls, "toObject", "()Ljava/lang/Object;");

              fids$ = new jfieldID[max_fid];
              fids$[fid_value] = env->getFieldID(cls, "value", "Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          MutableValueBool::MutableValueBool() : ::org::apache::lucene::util::mutable$::MutableValue(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint MutableValueBool::compareSameType(const ::java::lang::Object & a0) const
          {
            return env->callIntMethod(this$, mids$[mid_compareSameType_290588f1], a0.this$);
          }

          void MutableValueBool::copy(const ::org::apache::lucene::util::mutable$::MutableValue & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_copy_d590ce7c], a0.this$);
          }

          ::org::apache::lucene::util::mutable$::MutableValue MutableValueBool::duplicate() const
          {
            return ::org::apache::lucene::util::mutable$::MutableValue(env->callObjectMethod(this$, mids$[mid_duplicate_15ab3811]));
          }

          jboolean MutableValueBool::equalsSameType(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equalsSameType_290588e2], a0.this$);
          }

          jint MutableValueBool::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          ::java::lang::Object MutableValueBool::toObject() const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_toObject_846352c3]));
          }

          jboolean MutableValueBool::_get_value() const
          {
            return env->getBooleanField(this$, fids$[fid_value]);
          }

          void MutableValueBool::_set_value(jboolean a0) const
          {
            env->setBooleanField(this$, fids$[fid_value], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace mutable$ {
          static PyObject *t_MutableValueBool_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_MutableValueBool_instance_(PyTypeObject *type, PyObject *arg);
          static int t_MutableValueBool_init_(t_MutableValueBool *self, PyObject *args, PyObject *kwds);
          static PyObject *t_MutableValueBool_compareSameType(t_MutableValueBool *self, PyObject *args);
          static PyObject *t_MutableValueBool_copy(t_MutableValueBool *self, PyObject *args);
          static PyObject *t_MutableValueBool_duplicate(t_MutableValueBool *self, PyObject *args);
          static PyObject *t_MutableValueBool_equalsSameType(t_MutableValueBool *self, PyObject *args);
          static PyObject *t_MutableValueBool_hashCode(t_MutableValueBool *self, PyObject *args);
          static PyObject *t_MutableValueBool_toObject(t_MutableValueBool *self, PyObject *args);
          static PyObject *t_MutableValueBool_get__value(t_MutableValueBool *self, void *data);
          static int t_MutableValueBool_set__value(t_MutableValueBool *self, PyObject *arg, void *data);

          static PyGetSetDef t_MutableValueBool__fields_[] = {
            DECLARE_GETSET_FIELD(t_MutableValueBool, value),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_MutableValueBool__methods_[] = {
            DECLARE_METHOD(t_MutableValueBool, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MutableValueBool, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MutableValueBool, compareSameType, METH_VARARGS),
            DECLARE_METHOD(t_MutableValueBool, copy, METH_VARARGS),
            DECLARE_METHOD(t_MutableValueBool, duplicate, METH_VARARGS),
            DECLARE_METHOD(t_MutableValueBool, equalsSameType, METH_VARARGS),
            DECLARE_METHOD(t_MutableValueBool, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_MutableValueBool, toObject, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(MutableValueBool, t_MutableValueBool, ::org::apache::lucene::util::mutable$::MutableValue, MutableValueBool, t_MutableValueBool_init_, 0, 0, t_MutableValueBool__fields_, 0, 0);

          void t_MutableValueBool::install(PyObject *module)
          {
            installType(&PY_TYPE(MutableValueBool), module, "MutableValueBool", 0);
          }

          void t_MutableValueBool::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(MutableValueBool).tp_dict, "class_", make_descriptor(MutableValueBool::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(MutableValueBool).tp_dict, "wrapfn_", make_descriptor(t_MutableValueBool::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(MutableValueBool).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_MutableValueBool_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, MutableValueBool::initializeClass, 1)))
              return NULL;
            return t_MutableValueBool::wrap_Object(MutableValueBool(((t_MutableValueBool *) arg)->object.this$));
          }
          static PyObject *t_MutableValueBool_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, MutableValueBool::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_MutableValueBool_init_(t_MutableValueBool *self, PyObject *args, PyObject *kwds)
          {
            MutableValueBool object((jobject) NULL);

            INT_CALL(object = MutableValueBool());
            self->object = object;

            return 0;
          }

          static PyObject *t_MutableValueBool_compareSameType(t_MutableValueBool *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jint result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.compareSameType(a0));
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(MutableValueBool), (PyObject *) self, "compareSameType", args, 2);
          }

          static PyObject *t_MutableValueBool_copy(t_MutableValueBool *self, PyObject *args)
          {
            ::org::apache::lucene::util::mutable$::MutableValue a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::util::mutable$::MutableValue::initializeClass, &a0))
            {
              OBJ_CALL(self->object.copy(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(MutableValueBool), (PyObject *) self, "copy", args, 2);
          }

          static PyObject *t_MutableValueBool_duplicate(t_MutableValueBool *self, PyObject *args)
          {
            ::org::apache::lucene::util::mutable$::MutableValue result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.duplicate());
              return ::org::apache::lucene::util::mutable$::t_MutableValue::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(MutableValueBool), (PyObject *) self, "duplicate", args, 2);
          }

          static PyObject *t_MutableValueBool_equalsSameType(t_MutableValueBool *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equalsSameType(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(MutableValueBool), (PyObject *) self, "equalsSameType", args, 2);
          }

          static PyObject *t_MutableValueBool_hashCode(t_MutableValueBool *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(MutableValueBool), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_MutableValueBool_toObject(t_MutableValueBool *self, PyObject *args)
          {
            ::java::lang::Object result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toObject());
              return ::java::lang::t_Object::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(MutableValueBool), (PyObject *) self, "toObject", args, 2);
          }

          static PyObject *t_MutableValueBool_get__value(t_MutableValueBool *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object._get_value());
            Py_RETURN_BOOL(value);
          }
          static int t_MutableValueBool_set__value(t_MutableValueBool *self, PyObject *arg, void *data)
          {
            jboolean value;
            if (!parseArg(arg, "Z", &value))
            {
              INT_CALL(self->object._set_value(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "value", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/charfilter/NormalizeCharMap$Builder.h"
#include "org/apache/lucene/analysis/charfilter/NormalizeCharMap.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace charfilter {

          ::java::lang::Class *NormalizeCharMap$Builder::class$ = NULL;
          jmethodID *NormalizeCharMap$Builder::mids$ = NULL;
          bool NormalizeCharMap$Builder::live$ = false;

          jclass NormalizeCharMap$Builder::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/charfilter/NormalizeCharMap$Builder");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_add_4a264742] = env->getMethodID(cls, "add", "(Ljava/lang/String;Ljava/lang/String;)V");
              mids$[mid_build_bf8be9b0] = env->getMethodID(cls, "build", "()Lorg/apache/lucene/analysis/charfilter/NormalizeCharMap;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          NormalizeCharMap$Builder::NormalizeCharMap$Builder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          void NormalizeCharMap$Builder::add(const ::java::lang::String & a0, const ::java::lang::String & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_add_4a264742], a0.this$, a1.this$);
          }

          ::org::apache::lucene::analysis::charfilter::NormalizeCharMap NormalizeCharMap$Builder::build() const
          {
            return ::org::apache::lucene::analysis::charfilter::NormalizeCharMap(env->callObjectMethod(this$, mids$[mid_build_bf8be9b0]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace charfilter {
          static PyObject *t_NormalizeCharMap$Builder_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_NormalizeCharMap$Builder_instance_(PyTypeObject *type, PyObject *arg);
          static int t_NormalizeCharMap$Builder_init_(t_NormalizeCharMap$Builder *self, PyObject *args, PyObject *kwds);
          static PyObject *t_NormalizeCharMap$Builder_add(t_NormalizeCharMap$Builder *self, PyObject *args);
          static PyObject *t_NormalizeCharMap$Builder_build(t_NormalizeCharMap$Builder *self);

          static PyMethodDef t_NormalizeCharMap$Builder__methods_[] = {
            DECLARE_METHOD(t_NormalizeCharMap$Builder, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NormalizeCharMap$Builder, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NormalizeCharMap$Builder, add, METH_VARARGS),
            DECLARE_METHOD(t_NormalizeCharMap$Builder, build, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(NormalizeCharMap$Builder, t_NormalizeCharMap$Builder, ::java::lang::Object, NormalizeCharMap$Builder, t_NormalizeCharMap$Builder_init_, 0, 0, 0, 0, 0);

          void t_NormalizeCharMap$Builder::install(PyObject *module)
          {
            installType(&PY_TYPE(NormalizeCharMap$Builder), module, "NormalizeCharMap$Builder", 0);
          }

          void t_NormalizeCharMap$Builder::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(NormalizeCharMap$Builder).tp_dict, "class_", make_descriptor(NormalizeCharMap$Builder::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(NormalizeCharMap$Builder).tp_dict, "wrapfn_", make_descriptor(t_NormalizeCharMap$Builder::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(NormalizeCharMap$Builder).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_NormalizeCharMap$Builder_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, NormalizeCharMap$Builder::initializeClass, 1)))
              return NULL;
            return t_NormalizeCharMap$Builder::wrap_Object(NormalizeCharMap$Builder(((t_NormalizeCharMap$Builder *) arg)->object.this$));
          }
          static PyObject *t_NormalizeCharMap$Builder_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, NormalizeCharMap$Builder::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_NormalizeCharMap$Builder_init_(t_NormalizeCharMap$Builder *self, PyObject *args, PyObject *kwds)
          {
            NormalizeCharMap$Builder object((jobject) NULL);

            INT_CALL(object = NormalizeCharMap$Builder());
            self->object = object;

            return 0;
          }

          static PyObject *t_NormalizeCharMap$Builder_add(t_NormalizeCharMap$Builder *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);

            if (!parseArgs(args, "ss", &a0, &a1))
            {
              OBJ_CALL(self->object.add(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "add", args);
            return NULL;
          }

          static PyObject *t_NormalizeCharMap$Builder_build(t_NormalizeCharMap$Builder *self)
          {
            ::org::apache::lucene::analysis::charfilter::NormalizeCharMap result((jobject) NULL);
            OBJ_CALL(result = self->object.build());
            return ::org::apache::lucene::analysis::charfilter::t_NormalizeCharMap::wrap_Object(result);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FieldComparator$DoubleComparator.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/Double.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/FieldComparator.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/FieldCache$Parser.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FieldComparator$DoubleComparator::class$ = NULL;
        jmethodID *FieldComparator$DoubleComparator::mids$ = NULL;
        bool FieldComparator$DoubleComparator::live$ = false;

        jclass FieldComparator$DoubleComparator::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FieldComparator$DoubleComparator");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_bf59efcc] = env->getMethodID(cls, "<init>", "(ILjava/lang/String;Lorg/apache/lucene/search/FieldCache$Parser;Ljava/lang/Double;)V");
            mids$[mid_compare_d8d154b9] = env->getMethodID(cls, "compare", "(II)I");
            mids$[mid_compareBottom_39c7bd23] = env->getMethodID(cls, "compareBottom", "(I)I");
            mids$[mid_compareTop_39c7bd23] = env->getMethodID(cls, "compareTop", "(I)I");
            mids$[mid_copy_d8d154a6] = env->getMethodID(cls, "copy", "(II)V");
            mids$[mid_setBottom_39c7bd3c] = env->getMethodID(cls, "setBottom", "(I)V");
            mids$[mid_setNextReader_6329aed7] = env->getMethodID(cls, "setNextReader", "(Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/search/FieldComparator;");
            mids$[mid_setTopValue_8baed06c] = env->getMethodID(cls, "setTopValue", "(Ljava/lang/Double;)V");
            mids$[mid_value_a0bf0c9f] = env->getMethodID(cls, "value", "(I)Ljava/lang/Double;");
            mids$[mid_getDoubleValues_9f6b3702] = env->getMethodID(cls, "getDoubleValues", "(Lorg/apache/lucene/index/AtomicReaderContext;Ljava/lang/String;)Lorg/apache/lucene/search/FieldCache$Doubles;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FieldComparator$DoubleComparator::FieldComparator$DoubleComparator(jint a0, const ::java::lang::String & a1, const ::org::apache::lucene::search::FieldCache$Parser & a2, const ::java::lang::Double & a3) : ::org::apache::lucene::search::FieldComparator$NumericComparator(env->newObject(initializeClass, &mids$, mid_init$_bf59efcc, a0, a1.this$, a2.this$, a3.this$)) {}

        jint FieldComparator$DoubleComparator::compare(jint a0, jint a1) const
        {
          return env->callIntMethod(this$, mids$[mid_compare_d8d154b9], a0, a1);
        }

        jint FieldComparator$DoubleComparator::compareBottom(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_compareBottom_39c7bd23], a0);
        }

        jint FieldComparator$DoubleComparator::compareTop(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_compareTop_39c7bd23], a0);
        }

        void FieldComparator$DoubleComparator::copy(jint a0, jint a1) const
        {
          env->callVoidMethod(this$, mids$[mid_copy_d8d154a6], a0, a1);
        }

        void FieldComparator$DoubleComparator::setBottom(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setBottom_39c7bd3c], a0);
        }

        ::org::apache::lucene::search::FieldComparator FieldComparator$DoubleComparator::setNextReader(const ::org::apache::lucene::index::AtomicReaderContext & a0) const
        {
          return ::org::apache::lucene::search::FieldComparator(env->callObjectMethod(this$, mids$[mid_setNextReader_6329aed7], a0.this$));
        }

        void FieldComparator$DoubleComparator::setTopValue(const ::java::lang::Double & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setTopValue_8baed06c], a0.this$);
        }

        ::java::lang::Double FieldComparator$DoubleComparator::value(jint a0) const
        {
          return ::java::lang::Double(env->callObjectMethod(this$, mids$[mid_value_a0bf0c9f], a0));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FieldComparator$DoubleComparator_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldComparator$DoubleComparator_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldComparator$DoubleComparator_of_(t_FieldComparator$DoubleComparator *self, PyObject *args);
        static int t_FieldComparator$DoubleComparator_init_(t_FieldComparator$DoubleComparator *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FieldComparator$DoubleComparator_compare(t_FieldComparator$DoubleComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$DoubleComparator_compareBottom(t_FieldComparator$DoubleComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$DoubleComparator_compareTop(t_FieldComparator$DoubleComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$DoubleComparator_copy(t_FieldComparator$DoubleComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$DoubleComparator_setBottom(t_FieldComparator$DoubleComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$DoubleComparator_setNextReader(t_FieldComparator$DoubleComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$DoubleComparator_setTopValue(t_FieldComparator$DoubleComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$DoubleComparator_value(t_FieldComparator$DoubleComparator *self, PyObject *args);
        static int t_FieldComparator$DoubleComparator_set__bottom(t_FieldComparator$DoubleComparator *self, PyObject *arg, void *data);
        static int t_FieldComparator$DoubleComparator_set__nextReader(t_FieldComparator$DoubleComparator *self, PyObject *arg, void *data);
        static int t_FieldComparator$DoubleComparator_set__topValue(t_FieldComparator$DoubleComparator *self, PyObject *arg, void *data);
        static PyObject *t_FieldComparator$DoubleComparator_get__parameters_(t_FieldComparator$DoubleComparator *self, void *data);
        static PyGetSetDef t_FieldComparator$DoubleComparator__fields_[] = {
          DECLARE_SET_FIELD(t_FieldComparator$DoubleComparator, bottom),
          DECLARE_SET_FIELD(t_FieldComparator$DoubleComparator, nextReader),
          DECLARE_SET_FIELD(t_FieldComparator$DoubleComparator, topValue),
          DECLARE_GET_FIELD(t_FieldComparator$DoubleComparator, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FieldComparator$DoubleComparator__methods_[] = {
          DECLARE_METHOD(t_FieldComparator$DoubleComparator, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldComparator$DoubleComparator, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldComparator$DoubleComparator, of_, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$DoubleComparator, compare, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$DoubleComparator, compareBottom, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$DoubleComparator, compareTop, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$DoubleComparator, copy, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$DoubleComparator, setBottom, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$DoubleComparator, setNextReader, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$DoubleComparator, setTopValue, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$DoubleComparator, value, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldComparator$DoubleComparator, t_FieldComparator$DoubleComparator, ::org::apache::lucene::search::FieldComparator$NumericComparator, FieldComparator$DoubleComparator, t_FieldComparator$DoubleComparator_init_, 0, 0, t_FieldComparator$DoubleComparator__fields_, 0, 0);
        PyObject *t_FieldComparator$DoubleComparator::wrap_Object(const FieldComparator$DoubleComparator& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FieldComparator$DoubleComparator::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FieldComparator$DoubleComparator *self = (t_FieldComparator$DoubleComparator *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_FieldComparator$DoubleComparator::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FieldComparator$DoubleComparator::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FieldComparator$DoubleComparator *self = (t_FieldComparator$DoubleComparator *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_FieldComparator$DoubleComparator::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldComparator$DoubleComparator), module, "FieldComparator$DoubleComparator", 0);
        }

        void t_FieldComparator$DoubleComparator::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldComparator$DoubleComparator).tp_dict, "class_", make_descriptor(FieldComparator$DoubleComparator::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldComparator$DoubleComparator).tp_dict, "wrapfn_", make_descriptor(t_FieldComparator$DoubleComparator::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldComparator$DoubleComparator).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldComparator$DoubleComparator_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldComparator$DoubleComparator::initializeClass, 1)))
            return NULL;
          return t_FieldComparator$DoubleComparator::wrap_Object(FieldComparator$DoubleComparator(((t_FieldComparator$DoubleComparator *) arg)->object.this$));
        }
        static PyObject *t_FieldComparator$DoubleComparator_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldComparator$DoubleComparator::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FieldComparator$DoubleComparator_of_(t_FieldComparator$DoubleComparator *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_FieldComparator$DoubleComparator_init_(t_FieldComparator$DoubleComparator *self, PyObject *args, PyObject *kwds)
        {
          jint a0;
          ::java::lang::String a1((jobject) NULL);
          ::org::apache::lucene::search::FieldCache$Parser a2((jobject) NULL);
          ::java::lang::Double a3((jobject) NULL);
          FieldComparator$DoubleComparator object((jobject) NULL);

          if (!parseArgs(args, "IskO", ::org::apache::lucene::search::FieldCache$Parser::initializeClass, &::java::lang::PY_TYPE(Double), &a0, &a1, &a2, &a3))
          {
            INT_CALL(object = FieldComparator$DoubleComparator(a0, a1, a2, a3));
            self->object = object;
            self->parameters[0] = &::java::lang::PY_TYPE(Double);
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FieldComparator$DoubleComparator_compare(t_FieldComparator$DoubleComparator *self, PyObject *args)
        {
          jint a0;
          jint a1;
          jint result;

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(result = self->object.compare(a0, a1));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FieldComparator$DoubleComparator), (PyObject *) self, "compare", args, 2);
        }

        static PyObject *t_FieldComparator$DoubleComparator_compareBottom(t_FieldComparator$DoubleComparator *self, PyObject *args)
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.compareBottom(a0));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FieldComparator$DoubleComparator), (PyObject *) self, "compareBottom", args, 2);
        }

        static PyObject *t_FieldComparator$DoubleComparator_compareTop(t_FieldComparator$DoubleComparator *self, PyObject *args)
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.compareTop(a0));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FieldComparator$DoubleComparator), (PyObject *) self, "compareTop", args, 2);
        }

        static PyObject *t_FieldComparator$DoubleComparator_copy(t_FieldComparator$DoubleComparator *self, PyObject *args)
        {
          jint a0;
          jint a1;

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(self->object.copy(a0, a1));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FieldComparator$DoubleComparator), (PyObject *) self, "copy", args, 2);
        }

        static PyObject *t_FieldComparator$DoubleComparator_setBottom(t_FieldComparator$DoubleComparator *self, PyObject *args)
        {
          jint a0;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(self->object.setBottom(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FieldComparator$DoubleComparator), (PyObject *) self, "setBottom", args, 2);
        }

        static PyObject *t_FieldComparator$DoubleComparator_setNextReader(t_FieldComparator$DoubleComparator *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
          ::org::apache::lucene::search::FieldComparator result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.setNextReader(a0));
            return ::org::apache::lucene::search::t_FieldComparator::wrap_Object(result, &::java::lang::PY_TYPE(Double));
          }

          return callSuper(&PY_TYPE(FieldComparator$DoubleComparator), (PyObject *) self, "setNextReader", args, 2);
        }

        static PyObject *t_FieldComparator$DoubleComparator_setTopValue(t_FieldComparator$DoubleComparator *self, PyObject *args)
        {
          ::java::lang::Double a0((jobject) NULL);

          if (!parseArgs(args, "O", &::java::lang::PY_TYPE(Double), &a0))
          {
            OBJ_CALL(self->object.setTopValue(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FieldComparator$DoubleComparator), (PyObject *) self, "setTopValue", args, 2);
        }

        static PyObject *t_FieldComparator$DoubleComparator_value(t_FieldComparator$DoubleComparator *self, PyObject *args)
        {
          jint a0;
          ::java::lang::Double result((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.value(a0));
            return ::java::lang::t_Double::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FieldComparator$DoubleComparator), (PyObject *) self, "value", args, 2);
        }
        static PyObject *t_FieldComparator$DoubleComparator_get__parameters_(t_FieldComparator$DoubleComparator *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static int t_FieldComparator$DoubleComparator_set__bottom(t_FieldComparator$DoubleComparator *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setBottom(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "bottom", arg);
          return -1;
        }

        static int t_FieldComparator$DoubleComparator_set__nextReader(t_FieldComparator$DoubleComparator *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::index::AtomicReaderContext value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &value))
            {
              INT_CALL(self->object.setNextReader(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "nextReader", arg);
          return -1;
        }

        static int t_FieldComparator$DoubleComparator_set__topValue(t_FieldComparator$DoubleComparator *self, PyObject *arg, void *data)
        {
          {
            ::java::lang::Double value((jobject) NULL);
            if (!parseArg(arg, "O", &::java::lang::PY_TYPE(Double), &value))
            {
              INT_CALL(self->object.setTopValue(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "topValue", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/util/CharacterUtils$CharacterBuffer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {

          ::java::lang::Class *CharacterUtils$CharacterBuffer::class$ = NULL;
          jmethodID *CharacterUtils$CharacterBuffer::mids$ = NULL;
          bool CharacterUtils$CharacterBuffer::live$ = false;

          jclass CharacterUtils$CharacterBuffer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/util/CharacterUtils$CharacterBuffer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_getBuffer_dab10e7f] = env->getMethodID(cls, "getBuffer", "()[C");
              mids$[mid_getLength_54c6a179] = env->getMethodID(cls, "getLength", "()I");
              mids$[mid_getOffset_54c6a179] = env->getMethodID(cls, "getOffset", "()I");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          JArray< jchar > CharacterUtils$CharacterBuffer::getBuffer() const
          {
            return JArray< jchar >(env->callObjectMethod(this$, mids$[mid_getBuffer_dab10e7f]));
          }

          jint CharacterUtils$CharacterBuffer::getLength() const
          {
            return env->callIntMethod(this$, mids$[mid_getLength_54c6a179]);
          }

          jint CharacterUtils$CharacterBuffer::getOffset() const
          {
            return env->callIntMethod(this$, mids$[mid_getOffset_54c6a179]);
          }

          void CharacterUtils$CharacterBuffer::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {
          static PyObject *t_CharacterUtils$CharacterBuffer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CharacterUtils$CharacterBuffer_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CharacterUtils$CharacterBuffer_getBuffer(t_CharacterUtils$CharacterBuffer *self);
          static PyObject *t_CharacterUtils$CharacterBuffer_getLength(t_CharacterUtils$CharacterBuffer *self);
          static PyObject *t_CharacterUtils$CharacterBuffer_getOffset(t_CharacterUtils$CharacterBuffer *self);
          static PyObject *t_CharacterUtils$CharacterBuffer_reset(t_CharacterUtils$CharacterBuffer *self);
          static PyObject *t_CharacterUtils$CharacterBuffer_get__buffer(t_CharacterUtils$CharacterBuffer *self, void *data);
          static PyObject *t_CharacterUtils$CharacterBuffer_get__length(t_CharacterUtils$CharacterBuffer *self, void *data);
          static PyObject *t_CharacterUtils$CharacterBuffer_get__offset(t_CharacterUtils$CharacterBuffer *self, void *data);
          static PyGetSetDef t_CharacterUtils$CharacterBuffer__fields_[] = {
            DECLARE_GET_FIELD(t_CharacterUtils$CharacterBuffer, buffer),
            DECLARE_GET_FIELD(t_CharacterUtils$CharacterBuffer, length),
            DECLARE_GET_FIELD(t_CharacterUtils$CharacterBuffer, offset),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_CharacterUtils$CharacterBuffer__methods_[] = {
            DECLARE_METHOD(t_CharacterUtils$CharacterBuffer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CharacterUtils$CharacterBuffer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CharacterUtils$CharacterBuffer, getBuffer, METH_NOARGS),
            DECLARE_METHOD(t_CharacterUtils$CharacterBuffer, getLength, METH_NOARGS),
            DECLARE_METHOD(t_CharacterUtils$CharacterBuffer, getOffset, METH_NOARGS),
            DECLARE_METHOD(t_CharacterUtils$CharacterBuffer, reset, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CharacterUtils$CharacterBuffer, t_CharacterUtils$CharacterBuffer, ::java::lang::Object, CharacterUtils$CharacterBuffer, abstract_init, 0, 0, t_CharacterUtils$CharacterBuffer__fields_, 0, 0);

          void t_CharacterUtils$CharacterBuffer::install(PyObject *module)
          {
            installType(&PY_TYPE(CharacterUtils$CharacterBuffer), module, "CharacterUtils$CharacterBuffer", 0);
          }

          void t_CharacterUtils$CharacterBuffer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CharacterUtils$CharacterBuffer).tp_dict, "class_", make_descriptor(CharacterUtils$CharacterBuffer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CharacterUtils$CharacterBuffer).tp_dict, "wrapfn_", make_descriptor(t_CharacterUtils$CharacterBuffer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CharacterUtils$CharacterBuffer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CharacterUtils$CharacterBuffer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CharacterUtils$CharacterBuffer::initializeClass, 1)))
              return NULL;
            return t_CharacterUtils$CharacterBuffer::wrap_Object(CharacterUtils$CharacterBuffer(((t_CharacterUtils$CharacterBuffer *) arg)->object.this$));
          }
          static PyObject *t_CharacterUtils$CharacterBuffer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CharacterUtils$CharacterBuffer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_CharacterUtils$CharacterBuffer_getBuffer(t_CharacterUtils$CharacterBuffer *self)
          {
            JArray< jchar > result((jobject) NULL);
            OBJ_CALL(result = self->object.getBuffer());
            return result.wrap();
          }

          static PyObject *t_CharacterUtils$CharacterBuffer_getLength(t_CharacterUtils$CharacterBuffer *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getLength());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_CharacterUtils$CharacterBuffer_getOffset(t_CharacterUtils$CharacterBuffer *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getOffset());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_CharacterUtils$CharacterBuffer_reset(t_CharacterUtils$CharacterBuffer *self)
          {
            OBJ_CALL(self->object.reset());
            Py_RETURN_NONE;
          }

          static PyObject *t_CharacterUtils$CharacterBuffer_get__buffer(t_CharacterUtils$CharacterBuffer *self, void *data)
          {
            JArray< jchar > value((jobject) NULL);
            OBJ_CALL(value = self->object.getBuffer());
            return value.wrap();
          }

          static PyObject *t_CharacterUtils$CharacterBuffer_get__length(t_CharacterUtils$CharacterBuffer *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getLength());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_CharacterUtils$CharacterBuffer_get__offset(t_CharacterUtils$CharacterBuffer *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getOffset());
            return PyInt_FromLong((long) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/Attribute.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *Attribute::class$ = NULL;
        jmethodID *Attribute::mids$ = NULL;
        bool Attribute::live$ = false;

        jclass Attribute::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/Attribute");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_Attribute_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Attribute_instance_(PyTypeObject *type, PyObject *arg);

        static PyMethodDef t_Attribute__methods_[] = {
          DECLARE_METHOD(t_Attribute, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Attribute, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Attribute, t_Attribute, ::java::lang::Object, Attribute, abstract_init, 0, 0, 0, 0, 0);

        void t_Attribute::install(PyObject *module)
        {
          installType(&PY_TYPE(Attribute), module, "Attribute", 0);
        }

        void t_Attribute::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(Attribute).tp_dict, "class_", make_descriptor(Attribute::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(Attribute).tp_dict, "wrapfn_", make_descriptor(t_Attribute::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(Attribute).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Attribute_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Attribute::initializeClass, 1)))
            return NULL;
          return t_Attribute::wrap_Object(Attribute(((t_Attribute *) arg)->object.this$));
        }
        static PyObject *t_Attribute_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Attribute::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/surround/parser/QueryParserTokenManager.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/surround/parser/QueryParserConstants.h"
#include "java/io/PrintStream.h"
#include "org/apache/lucene/queryparser/surround/parser/CharStream.h"
#include "org/apache/lucene/queryparser/surround/parser/Token.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace parser {

            ::java::lang::Class *QueryParserTokenManager::class$ = NULL;
            jmethodID *QueryParserTokenManager::mids$ = NULL;
            jfieldID *QueryParserTokenManager::fids$ = NULL;
            bool QueryParserTokenManager::live$ = false;
            JArray< jint > *QueryParserTokenManager::jjnewLexState = NULL;
            JArray< ::java::lang::String > *QueryParserTokenManager::jjstrLiteralImages = NULL;
            JArray< ::java::lang::String > *QueryParserTokenManager::lexStateNames = NULL;

            jclass QueryParserTokenManager::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/surround/parser/QueryParserTokenManager");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_5bfa6473] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/surround/parser/CharStream;)V");
                mids$[mid_init$_5ba65d1b] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/surround/parser/CharStream;I)V");
                mids$[mid_ReInit_5bfa6473] = env->getMethodID(cls, "ReInit", "(Lorg/apache/lucene/queryparser/surround/parser/CharStream;)V");
                mids$[mid_ReInit_5ba65d1b] = env->getMethodID(cls, "ReInit", "(Lorg/apache/lucene/queryparser/surround/parser/CharStream;I)V");
                mids$[mid_SwitchTo_39c7bd3c] = env->getMethodID(cls, "SwitchTo", "(I)V");
                mids$[mid_getNextToken_353aefd6] = env->getMethodID(cls, "getNextToken", "()Lorg/apache/lucene/queryparser/surround/parser/Token;");
                mids$[mid_setDebugStream_1b7c898b] = env->getMethodID(cls, "setDebugStream", "(Ljava/io/PrintStream;)V");
                mids$[mid_jjFillToken_353aefd6] = env->getMethodID(cls, "jjFillToken", "()Lorg/apache/lucene/queryparser/surround/parser/Token;");

                fids$ = new jfieldID[max_fid];
                fids$[fid_debugStream] = env->getFieldID(cls, "debugStream", "Ljava/io/PrintStream;");

                class$ = (::java::lang::Class *) new JObject(cls);
                cls = (jclass) class$->this$;

                jjnewLexState = new JArray< jint >(env->getStaticObjectField(cls, "jjnewLexState", "[I"));
                jjstrLiteralImages = new JArray< ::java::lang::String >(env->getStaticObjectField(cls, "jjstrLiteralImages", "[Ljava/lang/String;"));
                lexStateNames = new JArray< ::java::lang::String >(env->getStaticObjectField(cls, "lexStateNames", "[Ljava/lang/String;"));
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            QueryParserTokenManager::QueryParserTokenManager(const ::org::apache::lucene::queryparser::surround::parser::CharStream & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_5bfa6473, a0.this$)) {}

            QueryParserTokenManager::QueryParserTokenManager(const ::org::apache::lucene::queryparser::surround::parser::CharStream & a0, jint a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_5ba65d1b, a0.this$, a1)) {}

            void QueryParserTokenManager::ReInit(const ::org::apache::lucene::queryparser::surround::parser::CharStream & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_ReInit_5bfa6473], a0.this$);
            }

            void QueryParserTokenManager::ReInit(const ::org::apache::lucene::queryparser::surround::parser::CharStream & a0, jint a1) const
            {
              env->callVoidMethod(this$, mids$[mid_ReInit_5ba65d1b], a0.this$, a1);
            }

            void QueryParserTokenManager::SwitchTo(jint a0) const
            {
              env->callVoidMethod(this$, mids$[mid_SwitchTo_39c7bd3c], a0);
            }

            ::org::apache::lucene::queryparser::surround::parser::Token QueryParserTokenManager::getNextToken() const
            {
              return ::org::apache::lucene::queryparser::surround::parser::Token(env->callObjectMethod(this$, mids$[mid_getNextToken_353aefd6]));
            }

            void QueryParserTokenManager::setDebugStream(const ::java::io::PrintStream & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setDebugStream_1b7c898b], a0.this$);
            }

            ::java::io::PrintStream QueryParserTokenManager::_get_debugStream() const
            {
              return ::java::io::PrintStream(env->getObjectField(this$, fids$[fid_debugStream]));
            }

            void QueryParserTokenManager::_set_debugStream(const ::java::io::PrintStream & a0) const
            {
              env->setObjectField(this$, fids$[fid_debugStream], a0.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace parser {
            static PyObject *t_QueryParserTokenManager_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_QueryParserTokenManager_instance_(PyTypeObject *type, PyObject *arg);
            static int t_QueryParserTokenManager_init_(t_QueryParserTokenManager *self, PyObject *args, PyObject *kwds);
            static PyObject *t_QueryParserTokenManager_ReInit(t_QueryParserTokenManager *self, PyObject *args);
            static PyObject *t_QueryParserTokenManager_SwitchTo(t_QueryParserTokenManager *self, PyObject *arg);
            static PyObject *t_QueryParserTokenManager_getNextToken(t_QueryParserTokenManager *self);
            static PyObject *t_QueryParserTokenManager_setDebugStream(t_QueryParserTokenManager *self, PyObject *arg);

            static int t_QueryParserTokenManager_set__debugStream(t_QueryParserTokenManager *self, PyObject *arg, void *data);
            static PyObject *t_QueryParserTokenManager_get__nextToken(t_QueryParserTokenManager *self, void *data);
            static PyGetSetDef t_QueryParserTokenManager__fields_[] = {
              DECLARE_SET_FIELD(t_QueryParserTokenManager, debugStream),
              DECLARE_GET_FIELD(t_QueryParserTokenManager, nextToken),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_QueryParserTokenManager__methods_[] = {
              DECLARE_METHOD(t_QueryParserTokenManager, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_QueryParserTokenManager, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_QueryParserTokenManager, ReInit, METH_VARARGS),
              DECLARE_METHOD(t_QueryParserTokenManager, SwitchTo, METH_O),
              DECLARE_METHOD(t_QueryParserTokenManager, getNextToken, METH_NOARGS),
              DECLARE_METHOD(t_QueryParserTokenManager, setDebugStream, METH_O),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(QueryParserTokenManager, t_QueryParserTokenManager, ::java::lang::Object, QueryParserTokenManager, t_QueryParserTokenManager_init_, 0, 0, t_QueryParserTokenManager__fields_, 0, 0);

            void t_QueryParserTokenManager::install(PyObject *module)
            {
              installType(&PY_TYPE(QueryParserTokenManager), module, "QueryParserTokenManager", 0);
            }

            void t_QueryParserTokenManager::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(QueryParserTokenManager).tp_dict, "class_", make_descriptor(QueryParserTokenManager::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(QueryParserTokenManager).tp_dict, "wrapfn_", make_descriptor(t_QueryParserTokenManager::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(QueryParserTokenManager).tp_dict, "boxfn_", make_descriptor(boxObject));
              env->getClass(QueryParserTokenManager::initializeClass);
              PyDict_SetItemString(PY_TYPE(QueryParserTokenManager).tp_dict, "jjnewLexState", make_descriptor(QueryParserTokenManager::jjnewLexState->wrap()));
              PyDict_SetItemString(PY_TYPE(QueryParserTokenManager).tp_dict, "jjstrLiteralImages", make_descriptor(JArray<jstring>(QueryParserTokenManager::jjstrLiteralImages->this$).wrap()));
              PyDict_SetItemString(PY_TYPE(QueryParserTokenManager).tp_dict, "lexStateNames", make_descriptor(JArray<jstring>(QueryParserTokenManager::lexStateNames->this$).wrap()));
            }

            static PyObject *t_QueryParserTokenManager_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, QueryParserTokenManager::initializeClass, 1)))
                return NULL;
              return t_QueryParserTokenManager::wrap_Object(QueryParserTokenManager(((t_QueryParserTokenManager *) arg)->object.this$));
            }
            static PyObject *t_QueryParserTokenManager_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, QueryParserTokenManager::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_QueryParserTokenManager_init_(t_QueryParserTokenManager *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 1:
                {
                  ::org::apache::lucene::queryparser::surround::parser::CharStream a0((jobject) NULL);
                  QueryParserTokenManager object((jobject) NULL);

                  if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::surround::parser::CharStream::initializeClass, &a0))
                  {
                    INT_CALL(object = QueryParserTokenManager(a0));
                    self->object = object;
                    break;
                  }
                }
                goto err;
               case 2:
                {
                  ::org::apache::lucene::queryparser::surround::parser::CharStream a0((jobject) NULL);
                  jint a1;
                  QueryParserTokenManager object((jobject) NULL);

                  if (!parseArgs(args, "kI", ::org::apache::lucene::queryparser::surround::parser::CharStream::initializeClass, &a0, &a1))
                  {
                    INT_CALL(object = QueryParserTokenManager(a0, a1));
                    self->object = object;
                    break;
                  }
                }
               default:
               err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_QueryParserTokenManager_ReInit(t_QueryParserTokenManager *self, PyObject *args)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 1:
                {
                  ::org::apache::lucene::queryparser::surround::parser::CharStream a0((jobject) NULL);

                  if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::surround::parser::CharStream::initializeClass, &a0))
                  {
                    OBJ_CALL(self->object.ReInit(a0));
                    Py_RETURN_NONE;
                  }
                }
                break;
               case 2:
                {
                  ::org::apache::lucene::queryparser::surround::parser::CharStream a0((jobject) NULL);
                  jint a1;

                  if (!parseArgs(args, "kI", ::org::apache::lucene::queryparser::surround::parser::CharStream::initializeClass, &a0, &a1))
                  {
                    OBJ_CALL(self->object.ReInit(a0, a1));
                    Py_RETURN_NONE;
                  }
                }
              }

              PyErr_SetArgsError((PyObject *) self, "ReInit", args);
              return NULL;
            }

            static PyObject *t_QueryParserTokenManager_SwitchTo(t_QueryParserTokenManager *self, PyObject *arg)
            {
              jint a0;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(self->object.SwitchTo(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "SwitchTo", arg);
              return NULL;
            }

            static PyObject *t_QueryParserTokenManager_getNextToken(t_QueryParserTokenManager *self)
            {
              ::org::apache::lucene::queryparser::surround::parser::Token result((jobject) NULL);
              OBJ_CALL(result = self->object.getNextToken());
              return ::org::apache::lucene::queryparser::surround::parser::t_Token::wrap_Object(result);
            }

            static PyObject *t_QueryParserTokenManager_setDebugStream(t_QueryParserTokenManager *self, PyObject *arg)
            {
              ::java::io::PrintStream a0((jobject) NULL);

              if (!parseArg(arg, "k", ::java::io::PrintStream::initializeClass, &a0))
              {
                OBJ_CALL(self->object.setDebugStream(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setDebugStream", arg);
              return NULL;
            }

            static int t_QueryParserTokenManager_set__debugStream(t_QueryParserTokenManager *self, PyObject *arg, void *data)
            {
              {
                ::java::io::PrintStream value((jobject) NULL);
                if (!parseArg(arg, "k", ::java::io::PrintStream::initializeClass, &value))
                {
                  INT_CALL(self->object.setDebugStream(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "debugStream", arg);
              return -1;
            }

            static PyObject *t_QueryParserTokenManager_get__nextToken(t_QueryParserTokenManager *self, void *data)
            {
              ::org::apache::lucene::queryparser::surround::parser::Token value((jobject) NULL);
              OBJ_CALL(value = self->object.getNextToken());
              return ::org::apache::lucene::queryparser::surround::parser::t_Token::wrap_Object(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/IntTaxonomyFacets.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/facet/FacetResult.h"
#include "java/lang/Number.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {

          ::java::lang::Class *IntTaxonomyFacets::class$ = NULL;
          jmethodID *IntTaxonomyFacets::mids$ = NULL;
          bool IntTaxonomyFacets::live$ = false;

          jclass IntTaxonomyFacets::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/IntTaxonomyFacets");

              mids$ = new jmethodID[max_mid];
              mids$[mid_getSpecificValue_8ecbcac9] = env->getMethodID(cls, "getSpecificValue", "(Ljava/lang/String;[Ljava/lang/String;)Ljava/lang/Number;");
              mids$[mid_getTopChildren_37e8c044] = env->getMethodID(cls, "getTopChildren", "(ILjava/lang/String;[Ljava/lang/String;)Lorg/apache/lucene/facet/FacetResult;");
              mids$[mid_rollup_54c6a166] = env->getMethodID(cls, "rollup", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::java::lang::Number IntTaxonomyFacets::getSpecificValue(const ::java::lang::String & a0, const JArray< ::java::lang::String > & a1) const
          {
            return ::java::lang::Number(env->callObjectMethod(this$, mids$[mid_getSpecificValue_8ecbcac9], a0.this$, a1.this$));
          }

          ::org::apache::lucene::facet::FacetResult IntTaxonomyFacets::getTopChildren(jint a0, const ::java::lang::String & a1, const JArray< ::java::lang::String > & a2) const
          {
            return ::org::apache::lucene::facet::FacetResult(env->callObjectMethod(this$, mids$[mid_getTopChildren_37e8c044], a0, a1.this$, a2.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          static PyObject *t_IntTaxonomyFacets_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IntTaxonomyFacets_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IntTaxonomyFacets_getSpecificValue(t_IntTaxonomyFacets *self, PyObject *args);
          static PyObject *t_IntTaxonomyFacets_getTopChildren(t_IntTaxonomyFacets *self, PyObject *args);

          static PyMethodDef t_IntTaxonomyFacets__methods_[] = {
            DECLARE_METHOD(t_IntTaxonomyFacets, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IntTaxonomyFacets, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IntTaxonomyFacets, getSpecificValue, METH_VARARGS),
            DECLARE_METHOD(t_IntTaxonomyFacets, getTopChildren, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(IntTaxonomyFacets, t_IntTaxonomyFacets, ::org::apache::lucene::facet::taxonomy::TaxonomyFacets, IntTaxonomyFacets, abstract_init, 0, 0, 0, 0, 0);

          void t_IntTaxonomyFacets::install(PyObject *module)
          {
            installType(&PY_TYPE(IntTaxonomyFacets), module, "IntTaxonomyFacets", 0);
          }

          void t_IntTaxonomyFacets::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(IntTaxonomyFacets).tp_dict, "class_", make_descriptor(IntTaxonomyFacets::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(IntTaxonomyFacets).tp_dict, "wrapfn_", make_descriptor(t_IntTaxonomyFacets::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(IntTaxonomyFacets).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_IntTaxonomyFacets_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, IntTaxonomyFacets::initializeClass, 1)))
              return NULL;
            return t_IntTaxonomyFacets::wrap_Object(IntTaxonomyFacets(((t_IntTaxonomyFacets *) arg)->object.this$));
          }
          static PyObject *t_IntTaxonomyFacets_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, IntTaxonomyFacets::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_IntTaxonomyFacets_getSpecificValue(t_IntTaxonomyFacets *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            JArray< ::java::lang::String > a1((jobject) NULL);
            ::java::lang::Number result((jobject) NULL);

            if (!parseArgs(args, "s[s", &a0, &a1))
            {
              OBJ_CALL(result = self->object.getSpecificValue(a0, a1));
              return ::java::lang::t_Number::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(IntTaxonomyFacets), (PyObject *) self, "getSpecificValue", args, 2);
          }

          static PyObject *t_IntTaxonomyFacets_getTopChildren(t_IntTaxonomyFacets *self, PyObject *args)
          {
            jint a0;
            ::java::lang::String a1((jobject) NULL);
            JArray< ::java::lang::String > a2((jobject) NULL);
            ::org::apache::lucene::facet::FacetResult result((jobject) NULL);

            if (!parseArgs(args, "Is[s", &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.getTopChildren(a0, a1, a2));
              return ::org::apache::lucene::facet::t_FacetResult::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(IntTaxonomyFacets), (PyObject *) self, "getTopChildren", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/packed/DirectReader.h"
#include "org/apache/lucene/store/RandomAccessInput.h"
#include "org/apache/lucene/util/LongValues.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {

          ::java::lang::Class *DirectReader::class$ = NULL;
          jmethodID *DirectReader::mids$ = NULL;
          bool DirectReader::live$ = false;

          jclass DirectReader::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/packed/DirectReader");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_getInstance_9b696251] = env->getStaticMethodID(cls, "getInstance", "(Lorg/apache/lucene/store/RandomAccessInput;I)Lorg/apache/lucene/util/LongValues;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          DirectReader::DirectReader() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::util::LongValues DirectReader::getInstance(const ::org::apache::lucene::store::RandomAccessInput & a0, jint a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::LongValues(env->callStaticObjectMethod(cls, mids$[mid_getInstance_9b696251], a0.this$, a1));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {
          static PyObject *t_DirectReader_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DirectReader_instance_(PyTypeObject *type, PyObject *arg);
          static int t_DirectReader_init_(t_DirectReader *self, PyObject *args, PyObject *kwds);
          static PyObject *t_DirectReader_getInstance(PyTypeObject *type, PyObject *args);

          static PyMethodDef t_DirectReader__methods_[] = {
            DECLARE_METHOD(t_DirectReader, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DirectReader, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DirectReader, getInstance, METH_VARARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(DirectReader, t_DirectReader, ::java::lang::Object, DirectReader, t_DirectReader_init_, 0, 0, 0, 0, 0);

          void t_DirectReader::install(PyObject *module)
          {
            installType(&PY_TYPE(DirectReader), module, "DirectReader", 0);
          }

          void t_DirectReader::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(DirectReader).tp_dict, "class_", make_descriptor(DirectReader::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(DirectReader).tp_dict, "wrapfn_", make_descriptor(t_DirectReader::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(DirectReader).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_DirectReader_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, DirectReader::initializeClass, 1)))
              return NULL;
            return t_DirectReader::wrap_Object(DirectReader(((t_DirectReader *) arg)->object.this$));
          }
          static PyObject *t_DirectReader_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, DirectReader::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_DirectReader_init_(t_DirectReader *self, PyObject *args, PyObject *kwds)
          {
            DirectReader object((jobject) NULL);

            INT_CALL(object = DirectReader());
            self->object = object;

            return 0;
          }

          static PyObject *t_DirectReader_getInstance(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::store::RandomAccessInput a0((jobject) NULL);
            jint a1;
            ::org::apache::lucene::util::LongValues result((jobject) NULL);

            if (!parseArgs(args, "kI", ::org::apache::lucene::store::RandomAccessInput::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::packed::DirectReader::getInstance(a0, a1));
              return ::org::apache::lucene::util::t_LongValues::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "getInstance", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/fr/FrenchMinimalStemmer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fr {

          ::java::lang::Class *FrenchMinimalStemmer::class$ = NULL;
          jmethodID *FrenchMinimalStemmer::mids$ = NULL;
          bool FrenchMinimalStemmer::live$ = false;

          jclass FrenchMinimalStemmer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/fr/FrenchMinimalStemmer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_stem_ec6430eb] = env->getMethodID(cls, "stem", "([CI)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FrenchMinimalStemmer::FrenchMinimalStemmer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint FrenchMinimalStemmer::stem(const JArray< jchar > & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_stem_ec6430eb], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fr {
          static PyObject *t_FrenchMinimalStemmer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FrenchMinimalStemmer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FrenchMinimalStemmer_init_(t_FrenchMinimalStemmer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FrenchMinimalStemmer_stem(t_FrenchMinimalStemmer *self, PyObject *args);

          static PyMethodDef t_FrenchMinimalStemmer__methods_[] = {
            DECLARE_METHOD(t_FrenchMinimalStemmer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FrenchMinimalStemmer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FrenchMinimalStemmer, stem, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FrenchMinimalStemmer, t_FrenchMinimalStemmer, ::java::lang::Object, FrenchMinimalStemmer, t_FrenchMinimalStemmer_init_, 0, 0, 0, 0, 0);

          void t_FrenchMinimalStemmer::install(PyObject *module)
          {
            installType(&PY_TYPE(FrenchMinimalStemmer), module, "FrenchMinimalStemmer", 0);
          }

          void t_FrenchMinimalStemmer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FrenchMinimalStemmer).tp_dict, "class_", make_descriptor(FrenchMinimalStemmer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FrenchMinimalStemmer).tp_dict, "wrapfn_", make_descriptor(t_FrenchMinimalStemmer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FrenchMinimalStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FrenchMinimalStemmer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FrenchMinimalStemmer::initializeClass, 1)))
              return NULL;
            return t_FrenchMinimalStemmer::wrap_Object(FrenchMinimalStemmer(((t_FrenchMinimalStemmer *) arg)->object.this$));
          }
          static PyObject *t_FrenchMinimalStemmer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FrenchMinimalStemmer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FrenchMinimalStemmer_init_(t_FrenchMinimalStemmer *self, PyObject *args, PyObject *kwds)
          {
            FrenchMinimalStemmer object((jobject) NULL);

            INT_CALL(object = FrenchMinimalStemmer());
            self->object = object;

            return 0;
          }

          static PyObject *t_FrenchMinimalStemmer_stem(t_FrenchMinimalStemmer *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(result = self->object.stem(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "stem", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/tartarus/snowball/ext/GermanStemmer.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {

        ::java::lang::Class *GermanStemmer::class$ = NULL;
        jmethodID *GermanStemmer::mids$ = NULL;
        bool GermanStemmer::live$ = false;

        jclass GermanStemmer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/tartarus/snowball/ext/GermanStemmer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_stem_54c6a16a] = env->getMethodID(cls, "stem", "()Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        GermanStemmer::GermanStemmer() : ::org::tartarus::snowball::SnowballProgram(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jboolean GermanStemmer::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        jint GermanStemmer::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jboolean GermanStemmer::stem() const
        {
          return env->callBooleanMethod(this$, mids$[mid_stem_54c6a16a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {
        static PyObject *t_GermanStemmer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_GermanStemmer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_GermanStemmer_init_(t_GermanStemmer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_GermanStemmer_equals(t_GermanStemmer *self, PyObject *args);
        static PyObject *t_GermanStemmer_hashCode(t_GermanStemmer *self, PyObject *args);
        static PyObject *t_GermanStemmer_stem(t_GermanStemmer *self, PyObject *args);

        static PyMethodDef t_GermanStemmer__methods_[] = {
          DECLARE_METHOD(t_GermanStemmer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_GermanStemmer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_GermanStemmer, equals, METH_VARARGS),
          DECLARE_METHOD(t_GermanStemmer, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_GermanStemmer, stem, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(GermanStemmer, t_GermanStemmer, ::org::tartarus::snowball::SnowballProgram, GermanStemmer, t_GermanStemmer_init_, 0, 0, 0, 0, 0);

        void t_GermanStemmer::install(PyObject *module)
        {
          installType(&PY_TYPE(GermanStemmer), module, "GermanStemmer", 0);
        }

        void t_GermanStemmer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(GermanStemmer).tp_dict, "class_", make_descriptor(GermanStemmer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(GermanStemmer).tp_dict, "wrapfn_", make_descriptor(t_GermanStemmer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(GermanStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_GermanStemmer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, GermanStemmer::initializeClass, 1)))
            return NULL;
          return t_GermanStemmer::wrap_Object(GermanStemmer(((t_GermanStemmer *) arg)->object.this$));
        }
        static PyObject *t_GermanStemmer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, GermanStemmer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_GermanStemmer_init_(t_GermanStemmer *self, PyObject *args, PyObject *kwds)
        {
          GermanStemmer object((jobject) NULL);

          INT_CALL(object = GermanStemmer());
          self->object = object;

          return 0;
        }

        static PyObject *t_GermanStemmer_equals(t_GermanStemmer *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(GermanStemmer), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_GermanStemmer_hashCode(t_GermanStemmer *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(GermanStemmer), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_GermanStemmer_stem(t_GermanStemmer *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.stem());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(GermanStemmer), (PyObject *) self, "stem", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/grouping/term/TermFirstPassGroupingCollector.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/search/Sort.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          namespace term {

            ::java::lang::Class *TermFirstPassGroupingCollector::class$ = NULL;
            jmethodID *TermFirstPassGroupingCollector::mids$ = NULL;
            bool TermFirstPassGroupingCollector::live$ = false;

            jclass TermFirstPassGroupingCollector::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/grouping/term/TermFirstPassGroupingCollector");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_a296710a] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/search/Sort;I)V");
                mids$[mid_setNextReader_a6f59947] = env->getMethodID(cls, "setNextReader", "(Lorg/apache/lucene/index/AtomicReaderContext;)V");
                mids$[mid_getDocGroupValue_b57e9c3f] = env->getMethodID(cls, "getDocGroupValue", "(I)Lorg/apache/lucene/util/BytesRef;");
                mids$[mid_copyDocGroupValue_0991fadd] = env->getMethodID(cls, "copyDocGroupValue", "(Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/util/BytesRef;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            TermFirstPassGroupingCollector::TermFirstPassGroupingCollector(const ::java::lang::String & a0, const ::org::apache::lucene::search::Sort & a1, jint a2) : ::org::apache::lucene::search::grouping::AbstractFirstPassGroupingCollector(env->newObject(initializeClass, &mids$, mid_init$_a296710a, a0.this$, a1.this$, a2)) {}

            void TermFirstPassGroupingCollector::setNextReader(const ::org::apache::lucene::index::AtomicReaderContext & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setNextReader_a6f59947], a0.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          namespace term {
            static PyObject *t_TermFirstPassGroupingCollector_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_TermFirstPassGroupingCollector_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_TermFirstPassGroupingCollector_of_(t_TermFirstPassGroupingCollector *self, PyObject *args);
            static int t_TermFirstPassGroupingCollector_init_(t_TermFirstPassGroupingCollector *self, PyObject *args, PyObject *kwds);
            static PyObject *t_TermFirstPassGroupingCollector_setNextReader(t_TermFirstPassGroupingCollector *self, PyObject *args);
            static int t_TermFirstPassGroupingCollector_set__nextReader(t_TermFirstPassGroupingCollector *self, PyObject *arg, void *data);
            static PyObject *t_TermFirstPassGroupingCollector_get__parameters_(t_TermFirstPassGroupingCollector *self, void *data);
            static PyGetSetDef t_TermFirstPassGroupingCollector__fields_[] = {
              DECLARE_SET_FIELD(t_TermFirstPassGroupingCollector, nextReader),
              DECLARE_GET_FIELD(t_TermFirstPassGroupingCollector, parameters_),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_TermFirstPassGroupingCollector__methods_[] = {
              DECLARE_METHOD(t_TermFirstPassGroupingCollector, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TermFirstPassGroupingCollector, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TermFirstPassGroupingCollector, of_, METH_VARARGS),
              DECLARE_METHOD(t_TermFirstPassGroupingCollector, setNextReader, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(TermFirstPassGroupingCollector, t_TermFirstPassGroupingCollector, ::org::apache::lucene::search::grouping::AbstractFirstPassGroupingCollector, TermFirstPassGroupingCollector, t_TermFirstPassGroupingCollector_init_, 0, 0, t_TermFirstPassGroupingCollector__fields_, 0, 0);
            PyObject *t_TermFirstPassGroupingCollector::wrap_Object(const TermFirstPassGroupingCollector& object, PyTypeObject *p0)
            {
              PyObject *obj = t_TermFirstPassGroupingCollector::wrap_Object(object);
              if (obj != NULL && obj != Py_None)
              {
                t_TermFirstPassGroupingCollector *self = (t_TermFirstPassGroupingCollector *) obj;
                self->parameters[0] = p0;
              }
              return obj;
            }

            PyObject *t_TermFirstPassGroupingCollector::wrap_jobject(const jobject& object, PyTypeObject *p0)
            {
              PyObject *obj = t_TermFirstPassGroupingCollector::wrap_jobject(object);
              if (obj != NULL && obj != Py_None)
              {
                t_TermFirstPassGroupingCollector *self = (t_TermFirstPassGroupingCollector *) obj;
                self->parameters[0] = p0;
              }
              return obj;
            }

            void t_TermFirstPassGroupingCollector::install(PyObject *module)
            {
              installType(&PY_TYPE(TermFirstPassGroupingCollector), module, "TermFirstPassGroupingCollector", 0);
            }

            void t_TermFirstPassGroupingCollector::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(TermFirstPassGroupingCollector).tp_dict, "class_", make_descriptor(TermFirstPassGroupingCollector::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(TermFirstPassGroupingCollector).tp_dict, "wrapfn_", make_descriptor(t_TermFirstPassGroupingCollector::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(TermFirstPassGroupingCollector).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_TermFirstPassGroupingCollector_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, TermFirstPassGroupingCollector::initializeClass, 1)))
                return NULL;
              return t_TermFirstPassGroupingCollector::wrap_Object(TermFirstPassGroupingCollector(((t_TermFirstPassGroupingCollector *) arg)->object.this$));
            }
            static PyObject *t_TermFirstPassGroupingCollector_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, TermFirstPassGroupingCollector::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_TermFirstPassGroupingCollector_of_(t_TermFirstPassGroupingCollector *self, PyObject *args)
            {
              if (!parseArg(args, "T", 1, &(self->parameters)))
                Py_RETURN_SELF;
              return PyErr_SetArgsError((PyObject *) self, "of_", args);
            }

            static int t_TermFirstPassGroupingCollector_init_(t_TermFirstPassGroupingCollector *self, PyObject *args, PyObject *kwds)
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::search::Sort a1((jobject) NULL);
              jint a2;
              TermFirstPassGroupingCollector object((jobject) NULL);

              if (!parseArgs(args, "skI", ::org::apache::lucene::search::Sort::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = TermFirstPassGroupingCollector(a0, a1, a2));
                self->object = object;
                self->parameters[0] = &::org::apache::lucene::util::PY_TYPE(BytesRef);
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_TermFirstPassGroupingCollector_setNextReader(t_TermFirstPassGroupingCollector *self, PyObject *args)
            {
              ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0))
              {
                OBJ_CALL(self->object.setNextReader(a0));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(TermFirstPassGroupingCollector), (PyObject *) self, "setNextReader", args, 2);
            }
            static PyObject *t_TermFirstPassGroupingCollector_get__parameters_(t_TermFirstPassGroupingCollector *self, void *data)
            {
              return typeParameters(self->parameters, sizeof(self->parameters));
            }

            static int t_TermFirstPassGroupingCollector_set__nextReader(t_TermFirstPassGroupingCollector *self, PyObject *arg, void *data)
            {
              {
                ::org::apache::lucene::index::AtomicReaderContext value((jobject) NULL);
                if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &value))
                {
                  INT_CALL(self->object.setNextReader(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "nextReader", arg);
              return -1;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/expressions/js/JavascriptParser$relational_return.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {

          ::java::lang::Class *JavascriptParser$relational_return::class$ = NULL;
          jmethodID *JavascriptParser$relational_return::mids$ = NULL;
          bool JavascriptParser$relational_return::live$ = false;

          jclass JavascriptParser$relational_return::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/expressions/js/JavascriptParser$relational_return");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          JavascriptParser$relational_return::JavascriptParser$relational_return() : ::org::antlr::runtime::ParserRuleReturnScope(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {
          static PyObject *t_JavascriptParser$relational_return_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_JavascriptParser$relational_return_instance_(PyTypeObject *type, PyObject *arg);
          static int t_JavascriptParser$relational_return_init_(t_JavascriptParser$relational_return *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_JavascriptParser$relational_return__methods_[] = {
            DECLARE_METHOD(t_JavascriptParser$relational_return, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_JavascriptParser$relational_return, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(JavascriptParser$relational_return, t_JavascriptParser$relational_return, ::org::antlr::runtime::ParserRuleReturnScope, JavascriptParser$relational_return, t_JavascriptParser$relational_return_init_, 0, 0, 0, 0, 0);

          void t_JavascriptParser$relational_return::install(PyObject *module)
          {
            installType(&PY_TYPE(JavascriptParser$relational_return), module, "JavascriptParser$relational_return", 0);
          }

          void t_JavascriptParser$relational_return::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(JavascriptParser$relational_return).tp_dict, "class_", make_descriptor(JavascriptParser$relational_return::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(JavascriptParser$relational_return).tp_dict, "wrapfn_", make_descriptor(t_JavascriptParser$relational_return::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(JavascriptParser$relational_return).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_JavascriptParser$relational_return_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, JavascriptParser$relational_return::initializeClass, 1)))
              return NULL;
            return t_JavascriptParser$relational_return::wrap_Object(JavascriptParser$relational_return(((t_JavascriptParser$relational_return *) arg)->object.this$));
          }
          static PyObject *t_JavascriptParser$relational_return_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, JavascriptParser$relational_return::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_JavascriptParser$relational_return_init_(t_JavascriptParser$relational_return *self, PyObject *args, PyObject *kwds)
          {
            JavascriptParser$relational_return object((jobject) NULL);

            INT_CALL(object = JavascriptParser$relational_return());
            self->object = object;

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/fst/FSTCompletionBuilder.h"
#include "org/apache/lucene/search/suggest/fst/BytesRefSorter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/suggest/fst/FSTCompletion.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace fst {

            ::java::lang::Class *FSTCompletionBuilder::class$ = NULL;
            jmethodID *FSTCompletionBuilder::mids$ = NULL;
            bool FSTCompletionBuilder::live$ = false;
            jint FSTCompletionBuilder::DEFAULT_BUCKETS = (jint) 0;

            jclass FSTCompletionBuilder::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/fst/FSTCompletionBuilder");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_init$_4a786a26] = env->getMethodID(cls, "<init>", "(ILorg/apache/lucene/search/suggest/fst/BytesRefSorter;I)V");
                mids$[mid_add_738fc2ce] = env->getMethodID(cls, "add", "(Lorg/apache/lucene/util/BytesRef;I)V");
                mids$[mid_build_18e9287a] = env->getMethodID(cls, "build", "()Lorg/apache/lucene/search/suggest/fst/FSTCompletion;");

                class$ = (::java::lang::Class *) new JObject(cls);
                cls = (jclass) class$->this$;

                DEFAULT_BUCKETS = env->getStaticIntField(cls, "DEFAULT_BUCKETS");
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            FSTCompletionBuilder::FSTCompletionBuilder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

            FSTCompletionBuilder::FSTCompletionBuilder(jint a0, const ::org::apache::lucene::search::suggest::fst::BytesRefSorter & a1, jint a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_4a786a26, a0, a1.this$, a2)) {}

            void FSTCompletionBuilder::add(const ::org::apache::lucene::util::BytesRef & a0, jint a1) const
            {
              env->callVoidMethod(this$, mids$[mid_add_738fc2ce], a0.this$, a1);
            }

            ::org::apache::lucene::search::suggest::fst::FSTCompletion FSTCompletionBuilder::build() const
            {
              return ::org::apache::lucene::search::suggest::fst::FSTCompletion(env->callObjectMethod(this$, mids$[mid_build_18e9287a]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace fst {
            static PyObject *t_FSTCompletionBuilder_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_FSTCompletionBuilder_instance_(PyTypeObject *type, PyObject *arg);
            static int t_FSTCompletionBuilder_init_(t_FSTCompletionBuilder *self, PyObject *args, PyObject *kwds);
            static PyObject *t_FSTCompletionBuilder_add(t_FSTCompletionBuilder *self, PyObject *args);
            static PyObject *t_FSTCompletionBuilder_build(t_FSTCompletionBuilder *self);

            static PyMethodDef t_FSTCompletionBuilder__methods_[] = {
              DECLARE_METHOD(t_FSTCompletionBuilder, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FSTCompletionBuilder, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FSTCompletionBuilder, add, METH_VARARGS),
              DECLARE_METHOD(t_FSTCompletionBuilder, build, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(FSTCompletionBuilder, t_FSTCompletionBuilder, ::java::lang::Object, FSTCompletionBuilder, t_FSTCompletionBuilder_init_, 0, 0, 0, 0, 0);

            void t_FSTCompletionBuilder::install(PyObject *module)
            {
              installType(&PY_TYPE(FSTCompletionBuilder), module, "FSTCompletionBuilder", 0);
            }

            void t_FSTCompletionBuilder::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(FSTCompletionBuilder).tp_dict, "class_", make_descriptor(FSTCompletionBuilder::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(FSTCompletionBuilder).tp_dict, "wrapfn_", make_descriptor(t_FSTCompletionBuilder::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(FSTCompletionBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
              env->getClass(FSTCompletionBuilder::initializeClass);
              PyDict_SetItemString(PY_TYPE(FSTCompletionBuilder).tp_dict, "DEFAULT_BUCKETS", make_descriptor(FSTCompletionBuilder::DEFAULT_BUCKETS));
            }

            static PyObject *t_FSTCompletionBuilder_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, FSTCompletionBuilder::initializeClass, 1)))
                return NULL;
              return t_FSTCompletionBuilder::wrap_Object(FSTCompletionBuilder(((t_FSTCompletionBuilder *) arg)->object.this$));
            }
            static PyObject *t_FSTCompletionBuilder_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, FSTCompletionBuilder::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_FSTCompletionBuilder_init_(t_FSTCompletionBuilder *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 0:
                {
                  FSTCompletionBuilder object((jobject) NULL);

                  INT_CALL(object = FSTCompletionBuilder());
                  self->object = object;
                  break;
                }
                goto err;
               case 3:
                {
                  jint a0;
                  ::org::apache::lucene::search::suggest::fst::BytesRefSorter a1((jobject) NULL);
                  jint a2;
                  FSTCompletionBuilder object((jobject) NULL);

                  if (!parseArgs(args, "IkI", ::org::apache::lucene::search::suggest::fst::BytesRefSorter::initializeClass, &a0, &a1, &a2))
                  {
                    INT_CALL(object = FSTCompletionBuilder(a0, a1, a2));
                    self->object = object;
                    break;
                  }
                }
               default:
               err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_FSTCompletionBuilder_add(t_FSTCompletionBuilder *self, PyObject *args)
            {
              ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
              jint a1;

              if (!parseArgs(args, "kI", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
              {
                OBJ_CALL(self->object.add(a0, a1));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "add", args);
              return NULL;
            }

            static PyObject *t_FSTCompletionBuilder_build(t_FSTCompletionBuilder *self)
            {
              ::org::apache::lucene::search::suggest::fst::FSTCompletion result((jobject) NULL);
              OBJ_CALL(result = self->object.build());
              return ::org::apache::lucene::search::suggest::fst::t_FSTCompletion::wrap_Object(result);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/PagedBytes.h"
#include "org/apache/lucene/store/IndexInput.h"
#include "org/apache/lucene/util/PagedBytes$Reader.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/Accountable.h"
#include "org/apache/lucene/util/PagedBytes$PagedBytesDataOutput.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/util/PagedBytes$PagedBytesDataInput.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *PagedBytes::class$ = NULL;
        jmethodID *PagedBytes::mids$ = NULL;
        bool PagedBytes::live$ = false;

        jclass PagedBytes::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/PagedBytes");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
            mids$[mid_copy_ec9e0593] = env->getMethodID(cls, "copy", "(Lorg/apache/lucene/store/IndexInput;J)V");
            mids$[mid_copy_594e5ee6] = env->getMethodID(cls, "copy", "(Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/util/BytesRef;)V");
            mids$[mid_copyUsingLengthPrefix_7bc03dd8] = env->getMethodID(cls, "copyUsingLengthPrefix", "(Lorg/apache/lucene/util/BytesRef;)J");
            mids$[mid_freeze_6c94cff0] = env->getMethodID(cls, "freeze", "(Z)Lorg/apache/lucene/util/PagedBytes$Reader;");
            mids$[mid_getDataInput_da9ab8b7] = env->getMethodID(cls, "getDataInput", "()Lorg/apache/lucene/util/PagedBytes$PagedBytesDataInput;");
            mids$[mid_getDataOutput_279c2d0b] = env->getMethodID(cls, "getDataOutput", "()Lorg/apache/lucene/util/PagedBytes$PagedBytesDataOutput;");
            mids$[mid_getPointer_54c6a17a] = env->getMethodID(cls, "getPointer", "()J");
            mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PagedBytes::PagedBytes(jint a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

        void PagedBytes::copy(const ::org::apache::lucene::store::IndexInput & a0, jlong a1) const
        {
          env->callVoidMethod(this$, mids$[mid_copy_ec9e0593], a0.this$, a1);
        }

        void PagedBytes::copy(const ::org::apache::lucene::util::BytesRef & a0, const ::org::apache::lucene::util::BytesRef & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_copy_594e5ee6], a0.this$, a1.this$);
        }

        jlong PagedBytes::copyUsingLengthPrefix(const ::org::apache::lucene::util::BytesRef & a0) const
        {
          return env->callLongMethod(this$, mids$[mid_copyUsingLengthPrefix_7bc03dd8], a0.this$);
        }

        ::org::apache::lucene::util::PagedBytes$Reader PagedBytes::freeze(jboolean a0) const
        {
          return ::org::apache::lucene::util::PagedBytes$Reader(env->callObjectMethod(this$, mids$[mid_freeze_6c94cff0], a0));
        }

        ::org::apache::lucene::util::PagedBytes$PagedBytesDataInput PagedBytes::getDataInput() const
        {
          return ::org::apache::lucene::util::PagedBytes$PagedBytesDataInput(env->callObjectMethod(this$, mids$[mid_getDataInput_da9ab8b7]));
        }

        ::org::apache::lucene::util::PagedBytes$PagedBytesDataOutput PagedBytes::getDataOutput() const
        {
          return ::org::apache::lucene::util::PagedBytes$PagedBytesDataOutput(env->callObjectMethod(this$, mids$[mid_getDataOutput_279c2d0b]));
        }

        jlong PagedBytes::getPointer() const
        {
          return env->callLongMethod(this$, mids$[mid_getPointer_54c6a17a]);
        }

        jlong PagedBytes::ramBytesUsed() const
        {
          return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_PagedBytes_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PagedBytes_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PagedBytes_init_(t_PagedBytes *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PagedBytes_copy(t_PagedBytes *self, PyObject *args);
        static PyObject *t_PagedBytes_copyUsingLengthPrefix(t_PagedBytes *self, PyObject *arg);
        static PyObject *t_PagedBytes_freeze(t_PagedBytes *self, PyObject *arg);
        static PyObject *t_PagedBytes_getDataInput(t_PagedBytes *self);
        static PyObject *t_PagedBytes_getDataOutput(t_PagedBytes *self);
        static PyObject *t_PagedBytes_getPointer(t_PagedBytes *self);
        static PyObject *t_PagedBytes_ramBytesUsed(t_PagedBytes *self);
        static PyObject *t_PagedBytes_get__dataInput(t_PagedBytes *self, void *data);
        static PyObject *t_PagedBytes_get__dataOutput(t_PagedBytes *self, void *data);
        static PyObject *t_PagedBytes_get__pointer(t_PagedBytes *self, void *data);
        static PyGetSetDef t_PagedBytes__fields_[] = {
          DECLARE_GET_FIELD(t_PagedBytes, dataInput),
          DECLARE_GET_FIELD(t_PagedBytes, dataOutput),
          DECLARE_GET_FIELD(t_PagedBytes, pointer),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PagedBytes__methods_[] = {
          DECLARE_METHOD(t_PagedBytes, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PagedBytes, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PagedBytes, copy, METH_VARARGS),
          DECLARE_METHOD(t_PagedBytes, copyUsingLengthPrefix, METH_O),
          DECLARE_METHOD(t_PagedBytes, freeze, METH_O),
          DECLARE_METHOD(t_PagedBytes, getDataInput, METH_NOARGS),
          DECLARE_METHOD(t_PagedBytes, getDataOutput, METH_NOARGS),
          DECLARE_METHOD(t_PagedBytes, getPointer, METH_NOARGS),
          DECLARE_METHOD(t_PagedBytes, ramBytesUsed, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PagedBytes, t_PagedBytes, ::java::lang::Object, PagedBytes, t_PagedBytes_init_, 0, 0, t_PagedBytes__fields_, 0, 0);

        void t_PagedBytes::install(PyObject *module)
        {
          installType(&PY_TYPE(PagedBytes), module, "PagedBytes", 0);
          PyDict_SetItemString(PY_TYPE(PagedBytes).tp_dict, "Reader", make_descriptor(&PY_TYPE(PagedBytes$Reader)));
        }

        void t_PagedBytes::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PagedBytes).tp_dict, "class_", make_descriptor(PagedBytes::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PagedBytes).tp_dict, "wrapfn_", make_descriptor(t_PagedBytes::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PagedBytes).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_PagedBytes_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PagedBytes::initializeClass, 1)))
            return NULL;
          return t_PagedBytes::wrap_Object(PagedBytes(((t_PagedBytes *) arg)->object.this$));
        }
        static PyObject *t_PagedBytes_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PagedBytes::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PagedBytes_init_(t_PagedBytes *self, PyObject *args, PyObject *kwds)
        {
          jint a0;
          PagedBytes object((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            INT_CALL(object = PagedBytes(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_PagedBytes_copy(t_PagedBytes *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::org::apache::lucene::store::IndexInput a0((jobject) NULL);
              jlong a1;

              if (!parseArgs(args, "kJ", ::org::apache::lucene::store::IndexInput::initializeClass, &a0, &a1))
              {
                OBJ_CALL(self->object.copy(a0, a1));
                Py_RETURN_NONE;
              }
            }
            {
              ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
              ::org::apache::lucene::util::BytesRef a1((jobject) NULL);

              if (!parseArgs(args, "kk", ::org::apache::lucene::util::BytesRef::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
              {
                OBJ_CALL(self->object.copy(a0, a1));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "copy", args);
          return NULL;
        }

        static PyObject *t_PagedBytes_copyUsingLengthPrefix(t_PagedBytes *self, PyObject *arg)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          jlong result;

          if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.copyUsingLengthPrefix(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError((PyObject *) self, "copyUsingLengthPrefix", arg);
          return NULL;
        }

        static PyObject *t_PagedBytes_freeze(t_PagedBytes *self, PyObject *arg)
        {
          jboolean a0;
          ::org::apache::lucene::util::PagedBytes$Reader result((jobject) NULL);

          if (!parseArg(arg, "Z", &a0))
          {
            OBJ_CALL(result = self->object.freeze(a0));
            return ::org::apache::lucene::util::t_PagedBytes$Reader::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "freeze", arg);
          return NULL;
        }

        static PyObject *t_PagedBytes_getDataInput(t_PagedBytes *self)
        {
          ::org::apache::lucene::util::PagedBytes$PagedBytesDataInput result((jobject) NULL);
          OBJ_CALL(result = self->object.getDataInput());
          return ::org::apache::lucene::util::t_PagedBytes$PagedBytesDataInput::wrap_Object(result);
        }

        static PyObject *t_PagedBytes_getDataOutput(t_PagedBytes *self)
        {
          ::org::apache::lucene::util::PagedBytes$PagedBytesDataOutput result((jobject) NULL);
          OBJ_CALL(result = self->object.getDataOutput());
          return ::org::apache::lucene::util::t_PagedBytes$PagedBytesDataOutput::wrap_Object(result);
        }

        static PyObject *t_PagedBytes_getPointer(t_PagedBytes *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getPointer());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_PagedBytes_ramBytesUsed(t_PagedBytes *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.ramBytesUsed());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_PagedBytes_get__dataInput(t_PagedBytes *self, void *data)
        {
          ::org::apache::lucene::util::PagedBytes$PagedBytesDataInput value((jobject) NULL);
          OBJ_CALL(value = self->object.getDataInput());
          return ::org::apache::lucene::util::t_PagedBytes$PagedBytesDataInput::wrap_Object(value);
        }

        static PyObject *t_PagedBytes_get__dataOutput(t_PagedBytes *self, void *data)
        {
          ::org::apache::lucene::util::PagedBytes$PagedBytesDataOutput value((jobject) NULL);
          OBJ_CALL(value = self->object.getDataOutput());
          return ::org::apache::lucene::util::t_PagedBytes$PagedBytesDataOutput::wrap_Object(value);
        }

        static PyObject *t_PagedBytes_get__pointer(t_PagedBytes *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getPointer());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/classic/TokenMgrError.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace classic {

          ::java::lang::Class *TokenMgrError::class$ = NULL;
          jmethodID *TokenMgrError::mids$ = NULL;
          bool TokenMgrError::live$ = false;

          jclass TokenMgrError::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/classic/TokenMgrError");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_6e53ccc6] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;I)V");
              mids$[mid_init$_8aaeec67] = env->getMethodID(cls, "<init>", "(ZIIILjava/lang/String;CI)V");
              mids$[mid_getMessage_14c7b5c5] = env->getMethodID(cls, "getMessage", "()Ljava/lang/String;");
              mids$[mid_addEscapes_97a5258f] = env->getStaticMethodID(cls, "addEscapes", "(Ljava/lang/String;)Ljava/lang/String;");
              mids$[mid_LexicalError_e888c5f6] = env->getStaticMethodID(cls, "LexicalError", "(ZIIILjava/lang/String;C)Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TokenMgrError::TokenMgrError() : ::java::lang::Error(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          TokenMgrError::TokenMgrError(const ::java::lang::String & a0, jint a1) : ::java::lang::Error(env->newObject(initializeClass, &mids$, mid_init$_6e53ccc6, a0.this$, a1)) {}

          TokenMgrError::TokenMgrError(jboolean a0, jint a1, jint a2, jint a3, const ::java::lang::String & a4, jchar a5, jint a6) : ::java::lang::Error(env->newObject(initializeClass, &mids$, mid_init$_8aaeec67, a0, a1, a2, a3, a4.this$, a5, a6)) {}

          ::java::lang::String TokenMgrError::getMessage() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getMessage_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace classic {
          static PyObject *t_TokenMgrError_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TokenMgrError_instance_(PyTypeObject *type, PyObject *arg);
          static int t_TokenMgrError_init_(t_TokenMgrError *self, PyObject *args, PyObject *kwds);
          static PyObject *t_TokenMgrError_getMessage(t_TokenMgrError *self, PyObject *args);
          static PyObject *t_TokenMgrError_get__message(t_TokenMgrError *self, void *data);
          static PyGetSetDef t_TokenMgrError__fields_[] = {
            DECLARE_GET_FIELD(t_TokenMgrError, message),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_TokenMgrError__methods_[] = {
            DECLARE_METHOD(t_TokenMgrError, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TokenMgrError, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TokenMgrError, getMessage, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(TokenMgrError, t_TokenMgrError, ::java::lang::Error, TokenMgrError, t_TokenMgrError_init_, 0, 0, t_TokenMgrError__fields_, 0, 0);

          void t_TokenMgrError::install(PyObject *module)
          {
            installType(&PY_TYPE(TokenMgrError), module, "TokenMgrError", 0);
          }

          void t_TokenMgrError::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(TokenMgrError).tp_dict, "class_", make_descriptor(TokenMgrError::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(TokenMgrError).tp_dict, "wrapfn_", make_descriptor(t_TokenMgrError::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(TokenMgrError).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TokenMgrError_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TokenMgrError::initializeClass, 1)))
              return NULL;
            return t_TokenMgrError::wrap_Object(TokenMgrError(((t_TokenMgrError *) arg)->object.this$));
          }
          static PyObject *t_TokenMgrError_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TokenMgrError::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_TokenMgrError_init_(t_TokenMgrError *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                TokenMgrError object((jobject) NULL);

                INT_CALL(object = TokenMgrError());
                self->object = object;
                break;
              }
              goto err;
             case 2:
              {
                ::java::lang::String a0((jobject) NULL);
                jint a1;
                TokenMgrError object((jobject) NULL);

                if (!parseArgs(args, "sI", &a0, &a1))
                {
                  INT_CALL(object = TokenMgrError(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 7:
              {
                jboolean a0;
                jint a1;
                jint a2;
                jint a3;
                ::java::lang::String a4((jobject) NULL);
                jchar a5;
                jint a6;
                TokenMgrError object((jobject) NULL);

                if (!parseArgs(args, "ZIIIsCI", &a0, &a1, &a2, &a3, &a4, &a5, &a6))
                {
                  INT_CALL(object = TokenMgrError(a0, a1, a2, a3, a4, a5, a6));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_TokenMgrError_getMessage(t_TokenMgrError *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getMessage());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(TokenMgrError), (PyObject *) self, "getMessage", args, 2);
          }

          static PyObject *t_TokenMgrError_get__message(t_TokenMgrError *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getMessage());
            return j2p(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/tartarus/snowball/ext/NorwegianStemmer.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {

        ::java::lang::Class *NorwegianStemmer::class$ = NULL;
        jmethodID *NorwegianStemmer::mids$ = NULL;
        bool NorwegianStemmer::live$ = false;

        jclass NorwegianStemmer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/tartarus/snowball/ext/NorwegianStemmer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_stem_54c6a16a] = env->getMethodID(cls, "stem", "()Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        NorwegianStemmer::NorwegianStemmer() : ::org::tartarus::snowball::SnowballProgram(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jboolean NorwegianStemmer::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        jint NorwegianStemmer::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jboolean NorwegianStemmer::stem() const
        {
          return env->callBooleanMethod(this$, mids$[mid_stem_54c6a16a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {
        static PyObject *t_NorwegianStemmer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NorwegianStemmer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_NorwegianStemmer_init_(t_NorwegianStemmer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_NorwegianStemmer_equals(t_NorwegianStemmer *self, PyObject *args);
        static PyObject *t_NorwegianStemmer_hashCode(t_NorwegianStemmer *self, PyObject *args);
        static PyObject *t_NorwegianStemmer_stem(t_NorwegianStemmer *self, PyObject *args);

        static PyMethodDef t_NorwegianStemmer__methods_[] = {
          DECLARE_METHOD(t_NorwegianStemmer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NorwegianStemmer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NorwegianStemmer, equals, METH_VARARGS),
          DECLARE_METHOD(t_NorwegianStemmer, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_NorwegianStemmer, stem, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(NorwegianStemmer, t_NorwegianStemmer, ::org::tartarus::snowball::SnowballProgram, NorwegianStemmer, t_NorwegianStemmer_init_, 0, 0, 0, 0, 0);

        void t_NorwegianStemmer::install(PyObject *module)
        {
          installType(&PY_TYPE(NorwegianStemmer), module, "NorwegianStemmer", 0);
        }

        void t_NorwegianStemmer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(NorwegianStemmer).tp_dict, "class_", make_descriptor(NorwegianStemmer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(NorwegianStemmer).tp_dict, "wrapfn_", make_descriptor(t_NorwegianStemmer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(NorwegianStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_NorwegianStemmer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, NorwegianStemmer::initializeClass, 1)))
            return NULL;
          return t_NorwegianStemmer::wrap_Object(NorwegianStemmer(((t_NorwegianStemmer *) arg)->object.this$));
        }
        static PyObject *t_NorwegianStemmer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, NorwegianStemmer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_NorwegianStemmer_init_(t_NorwegianStemmer *self, PyObject *args, PyObject *kwds)
        {
          NorwegianStemmer object((jobject) NULL);

          INT_CALL(object = NorwegianStemmer());
          self->object = object;

          return 0;
        }

        static PyObject *t_NorwegianStemmer_equals(t_NorwegianStemmer *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(NorwegianStemmer), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_NorwegianStemmer_hashCode(t_NorwegianStemmer *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(NorwegianStemmer), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_NorwegianStemmer_stem(t_NorwegianStemmer *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.stem());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(NorwegianStemmer), (PyObject *) self, "stem", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/xml/ParserException.h"
#include "java/lang/String.h"
#include "java/lang/Throwable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {

          ::java::lang::Class *ParserException::class$ = NULL;
          jmethodID *ParserException::mids$ = NULL;
          bool ParserException::live$ = false;

          jclass ParserException::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/xml/ParserException");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_c5ec8ca4] = env->getMethodID(cls, "<init>", "(Ljava/lang/Throwable;)V");
              mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
              mids$[mid_init$_01646a2e] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/Throwable;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ParserException::ParserException() : ::java::lang::Exception(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ParserException::ParserException(const ::java::lang::Throwable & a0) : ::java::lang::Exception(env->newObject(initializeClass, &mids$, mid_init$_c5ec8ca4, a0.this$)) {}

          ParserException::ParserException(const ::java::lang::String & a0) : ::java::lang::Exception(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

          ParserException::ParserException(const ::java::lang::String & a0, const ::java::lang::Throwable & a1) : ::java::lang::Exception(env->newObject(initializeClass, &mids$, mid_init$_01646a2e, a0.this$, a1.this$)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          static PyObject *t_ParserException_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ParserException_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ParserException_init_(t_ParserException *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_ParserException__methods_[] = {
            DECLARE_METHOD(t_ParserException, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ParserException, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ParserException, t_ParserException, ::java::lang::Exception, ParserException, t_ParserException_init_, 0, 0, 0, 0, 0);

          void t_ParserException::install(PyObject *module)
          {
            installType(&PY_TYPE(ParserException), module, "ParserException", 0);
          }

          void t_ParserException::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ParserException).tp_dict, "class_", make_descriptor(ParserException::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ParserException).tp_dict, "wrapfn_", make_descriptor(t_ParserException::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ParserException).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ParserException_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ParserException::initializeClass, 1)))
              return NULL;
            return t_ParserException::wrap_Object(ParserException(((t_ParserException *) arg)->object.this$));
          }
          static PyObject *t_ParserException_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ParserException::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ParserException_init_(t_ParserException *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                ParserException object((jobject) NULL);

                INT_CALL(object = ParserException());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                ::java::lang::Throwable a0((jobject) NULL);
                ParserException object((jobject) NULL);

                if (!parseArgs(args, "k", ::java::lang::Throwable::initializeClass, &a0))
                {
                  INT_CALL(object = ParserException(a0));
                  self->object = object;
                  break;
                }
              }
              {
                ::java::lang::String a0((jobject) NULL);
                ParserException object((jobject) NULL);

                if (!parseArgs(args, "s", &a0))
                {
                  INT_CALL(object = ParserException(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::java::lang::String a0((jobject) NULL);
                ::java::lang::Throwable a1((jobject) NULL);
                ParserException object((jobject) NULL);

                if (!parseArgs(args, "sk", ::java::lang::Throwable::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = ParserException(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/no/NorwegianAnalyzer.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace no {

          ::java::lang::Class *NorwegianAnalyzer::class$ = NULL;
          jmethodID *NorwegianAnalyzer::mids$ = NULL;
          bool NorwegianAnalyzer::live$ = false;
          ::java::lang::String *NorwegianAnalyzer::DEFAULT_STOPWORD_FILE = NULL;

          jclass NorwegianAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/no/NorwegianAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_6d1f9881] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_0d96cf33] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;)V");
              mids$[mid_init$_3ea629c6] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/util/CharArraySet;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_83eafe28] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_c9d7e4a3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_getDefaultStopSet_d2d3505c] = env->getStaticMethodID(cls, "getDefaultStopSet", "()Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_STOPWORD_FILE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_STOPWORD_FILE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          NorwegianAnalyzer::NorwegianAnalyzer() : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          NorwegianAnalyzer::NorwegianAnalyzer(const ::org::apache::lucene::analysis::util::CharArraySet & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_6d1f9881, a0.this$)) {}

          NorwegianAnalyzer::NorwegianAnalyzer(const ::org::apache::lucene::util::Version & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_0d96cf33, a0.this$)) {}

          NorwegianAnalyzer::NorwegianAnalyzer(const ::org::apache::lucene::analysis::util::CharArraySet & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_3ea629c6, a0.this$, a1.this$)) {}

          NorwegianAnalyzer::NorwegianAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_83eafe28, a0.this$, a1.this$)) {}

          NorwegianAnalyzer::NorwegianAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1, const ::org::apache::lucene::analysis::util::CharArraySet & a2) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_c9d7e4a3, a0.this$, a1.this$, a2.this$)) {}

          ::org::apache::lucene::analysis::util::CharArraySet NorwegianAnalyzer::getDefaultStopSet()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getDefaultStopSet_d2d3505c]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace no {
          static PyObject *t_NorwegianAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_NorwegianAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_NorwegianAnalyzer_init_(t_NorwegianAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_NorwegianAnalyzer_getDefaultStopSet(PyTypeObject *type);
          static PyObject *t_NorwegianAnalyzer_get__defaultStopSet(t_NorwegianAnalyzer *self, void *data);
          static PyGetSetDef t_NorwegianAnalyzer__fields_[] = {
            DECLARE_GET_FIELD(t_NorwegianAnalyzer, defaultStopSet),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_NorwegianAnalyzer__methods_[] = {
            DECLARE_METHOD(t_NorwegianAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NorwegianAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NorwegianAnalyzer, getDefaultStopSet, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(NorwegianAnalyzer, t_NorwegianAnalyzer, ::org::apache::lucene::analysis::util::StopwordAnalyzerBase, NorwegianAnalyzer, t_NorwegianAnalyzer_init_, 0, 0, t_NorwegianAnalyzer__fields_, 0, 0);

          void t_NorwegianAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(NorwegianAnalyzer), module, "NorwegianAnalyzer", 0);
          }

          void t_NorwegianAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(NorwegianAnalyzer).tp_dict, "class_", make_descriptor(NorwegianAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(NorwegianAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_NorwegianAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(NorwegianAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(NorwegianAnalyzer::initializeClass);
            PyDict_SetItemString(PY_TYPE(NorwegianAnalyzer).tp_dict, "DEFAULT_STOPWORD_FILE", make_descriptor(j2p(*NorwegianAnalyzer::DEFAULT_STOPWORD_FILE)));
          }

          static PyObject *t_NorwegianAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, NorwegianAnalyzer::initializeClass, 1)))
              return NULL;
            return t_NorwegianAnalyzer::wrap_Object(NorwegianAnalyzer(((t_NorwegianAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_NorwegianAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, NorwegianAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_NorwegianAnalyzer_init_(t_NorwegianAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                NorwegianAnalyzer object((jobject) NULL);

                INT_CALL(object = NorwegianAnalyzer());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                ::org::apache::lucene::analysis::util::CharArraySet a0((jobject) NULL);
                PyTypeObject **p0;
                NorwegianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = NorwegianAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                NorwegianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::util::Version::initializeClass, &a0))
                {
                  INT_CALL(object = NorwegianAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::analysis::util::CharArraySet a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                NorwegianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = NorwegianAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                NorwegianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "kK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = NorwegianAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                ::org::apache::lucene::analysis::util::CharArraySet a2((jobject) NULL);
                PyTypeObject **p2;
                NorwegianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "kKK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_, &a2, &p2, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = NorwegianAnalyzer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_NorwegianAnalyzer_getDefaultStopSet(PyTypeObject *type)
          {
            ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::no::NorwegianAnalyzer::getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_NorwegianAnalyzer_get__defaultStopSet(t_NorwegianAnalyzer *self, void *data)
          {
            ::org::apache::lucene::analysis::util::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/ByteBlockPool$DirectTrackingAllocator.h"
#include "org/apache/lucene/util/Counter.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *ByteBlockPool$DirectTrackingAllocator::class$ = NULL;
        jmethodID *ByteBlockPool$DirectTrackingAllocator::mids$ = NULL;
        bool ByteBlockPool$DirectTrackingAllocator::live$ = false;

        jclass ByteBlockPool$DirectTrackingAllocator::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/ByteBlockPool$DirectTrackingAllocator");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_4ae88947] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Counter;)V");
            mids$[mid_init$_395956a1] = env->getMethodID(cls, "<init>", "(ILorg/apache/lucene/util/Counter;)V");
            mids$[mid_getByteBlock_dab10e7e] = env->getMethodID(cls, "getByteBlock", "()[B");
            mids$[mid_recycleByteBlocks_d3ffa89f] = env->getMethodID(cls, "recycleByteBlocks", "([[BII)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ByteBlockPool$DirectTrackingAllocator::ByteBlockPool$DirectTrackingAllocator(const ::org::apache::lucene::util::Counter & a0) : ::org::apache::lucene::util::ByteBlockPool$Allocator(env->newObject(initializeClass, &mids$, mid_init$_4ae88947, a0.this$)) {}

        ByteBlockPool$DirectTrackingAllocator::ByteBlockPool$DirectTrackingAllocator(jint a0, const ::org::apache::lucene::util::Counter & a1) : ::org::apache::lucene::util::ByteBlockPool$Allocator(env->newObject(initializeClass, &mids$, mid_init$_395956a1, a0, a1.this$)) {}

        JArray< jbyte > ByteBlockPool$DirectTrackingAllocator::getByteBlock() const
        {
          return JArray< jbyte >(env->callObjectMethod(this$, mids$[mid_getByteBlock_dab10e7e]));
        }

        void ByteBlockPool$DirectTrackingAllocator::recycleByteBlocks(const JArray< JArray< jbyte > > & a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_recycleByteBlocks_d3ffa89f], a0.this$, a1, a2);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_ByteBlockPool$DirectTrackingAllocator_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ByteBlockPool$DirectTrackingAllocator_instance_(PyTypeObject *type, PyObject *arg);
        static int t_ByteBlockPool$DirectTrackingAllocator_init_(t_ByteBlockPool$DirectTrackingAllocator *self, PyObject *args, PyObject *kwds);
        static PyObject *t_ByteBlockPool$DirectTrackingAllocator_getByteBlock(t_ByteBlockPool$DirectTrackingAllocator *self, PyObject *args);
        static PyObject *t_ByteBlockPool$DirectTrackingAllocator_recycleByteBlocks(t_ByteBlockPool$DirectTrackingAllocator *self, PyObject *args);
        static PyObject *t_ByteBlockPool$DirectTrackingAllocator_get__byteBlock(t_ByteBlockPool$DirectTrackingAllocator *self, void *data);
        static PyGetSetDef t_ByteBlockPool$DirectTrackingAllocator__fields_[] = {
          DECLARE_GET_FIELD(t_ByteBlockPool$DirectTrackingAllocator, byteBlock),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_ByteBlockPool$DirectTrackingAllocator__methods_[] = {
          DECLARE_METHOD(t_ByteBlockPool$DirectTrackingAllocator, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ByteBlockPool$DirectTrackingAllocator, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ByteBlockPool$DirectTrackingAllocator, getByteBlock, METH_VARARGS),
          DECLARE_METHOD(t_ByteBlockPool$DirectTrackingAllocator, recycleByteBlocks, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(ByteBlockPool$DirectTrackingAllocator, t_ByteBlockPool$DirectTrackingAllocator, ::org::apache::lucene::util::ByteBlockPool$Allocator, ByteBlockPool$DirectTrackingAllocator, t_ByteBlockPool$DirectTrackingAllocator_init_, 0, 0, t_ByteBlockPool$DirectTrackingAllocator__fields_, 0, 0);

        void t_ByteBlockPool$DirectTrackingAllocator::install(PyObject *module)
        {
          installType(&PY_TYPE(ByteBlockPool$DirectTrackingAllocator), module, "ByteBlockPool$DirectTrackingAllocator", 0);
        }

        void t_ByteBlockPool$DirectTrackingAllocator::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(ByteBlockPool$DirectTrackingAllocator).tp_dict, "class_", make_descriptor(ByteBlockPool$DirectTrackingAllocator::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(ByteBlockPool$DirectTrackingAllocator).tp_dict, "wrapfn_", make_descriptor(t_ByteBlockPool$DirectTrackingAllocator::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(ByteBlockPool$DirectTrackingAllocator).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_ByteBlockPool$DirectTrackingAllocator_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, ByteBlockPool$DirectTrackingAllocator::initializeClass, 1)))
            return NULL;
          return t_ByteBlockPool$DirectTrackingAllocator::wrap_Object(ByteBlockPool$DirectTrackingAllocator(((t_ByteBlockPool$DirectTrackingAllocator *) arg)->object.this$));
        }
        static PyObject *t_ByteBlockPool$DirectTrackingAllocator_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, ByteBlockPool$DirectTrackingAllocator::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_ByteBlockPool$DirectTrackingAllocator_init_(t_ByteBlockPool$DirectTrackingAllocator *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::util::Counter a0((jobject) NULL);
              ByteBlockPool$DirectTrackingAllocator object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::util::Counter::initializeClass, &a0))
              {
                INT_CALL(object = ByteBlockPool$DirectTrackingAllocator(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              jint a0;
              ::org::apache::lucene::util::Counter a1((jobject) NULL);
              ByteBlockPool$DirectTrackingAllocator object((jobject) NULL);

              if (!parseArgs(args, "Ik", ::org::apache::lucene::util::Counter::initializeClass, &a0, &a1))
              {
                INT_CALL(object = ByteBlockPool$DirectTrackingAllocator(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_ByteBlockPool$DirectTrackingAllocator_getByteBlock(t_ByteBlockPool$DirectTrackingAllocator *self, PyObject *args)
        {
          JArray< jbyte > result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getByteBlock());
            return result.wrap();
          }

          return callSuper(&PY_TYPE(ByteBlockPool$DirectTrackingAllocator), (PyObject *) self, "getByteBlock", args, 2);
        }

        static PyObject *t_ByteBlockPool$DirectTrackingAllocator_recycleByteBlocks(t_ByteBlockPool$DirectTrackingAllocator *self, PyObject *args)
        {
          JArray< JArray< jbyte > > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[[BII", &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.recycleByteBlocks(a0, a1, a2));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(ByteBlockPool$DirectTrackingAllocator), (PyObject *) self, "recycleByteBlocks", args, 2);
        }

        static PyObject *t_ByteBlockPool$DirectTrackingAllocator_get__byteBlock(t_ByteBlockPool$DirectTrackingAllocator *self, void *data)
        {
          JArray< jbyte > value((jobject) NULL);
          OBJ_CALL(value = self->object.getByteBlock());
          return value.wrap();
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/grouping/function/FunctionAllGroupHeadsCollector.h"
#include "org/apache/lucene/queries/function/ValueSource.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/search/Sort.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/Scorer.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/search/grouping/function/FunctionAllGroupHeadsCollector$GroupHead.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          namespace function {

            ::java::lang::Class *FunctionAllGroupHeadsCollector::class$ = NULL;
            jmethodID *FunctionAllGroupHeadsCollector::mids$ = NULL;
            bool FunctionAllGroupHeadsCollector::live$ = false;

            jclass FunctionAllGroupHeadsCollector::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/grouping/function/FunctionAllGroupHeadsCollector");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_0f36bb74] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queries/function/ValueSource;Ljava/util/Map;Lorg/apache/lucene/search/Sort;)V");
                mids$[mid_setNextReader_a6f59947] = env->getMethodID(cls, "setNextReader", "(Lorg/apache/lucene/index/AtomicReaderContext;)V");
                mids$[mid_setScorer_8be0880c] = env->getMethodID(cls, "setScorer", "(Lorg/apache/lucene/search/Scorer;)V");
                mids$[mid_retrieveGroupHeadAndAddIfNotExist_39c7bd3c] = env->getMethodID(cls, "retrieveGroupHeadAndAddIfNotExist", "(I)V");
                mids$[mid_getCollectedGroupHeads_2d2d7de4] = env->getMethodID(cls, "getCollectedGroupHeads", "()Ljava/util/Collection;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            FunctionAllGroupHeadsCollector::FunctionAllGroupHeadsCollector(const ::org::apache::lucene::queries::function::ValueSource & a0, const ::java::util::Map & a1, const ::org::apache::lucene::search::Sort & a2) : ::org::apache::lucene::search::grouping::AbstractAllGroupHeadsCollector(env->newObject(initializeClass, &mids$, mid_init$_0f36bb74, a0.this$, a1.this$, a2.this$)) {}

            void FunctionAllGroupHeadsCollector::setNextReader(const ::org::apache::lucene::index::AtomicReaderContext & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setNextReader_a6f59947], a0.this$);
            }

            void FunctionAllGroupHeadsCollector::setScorer(const ::org::apache::lucene::search::Scorer & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setScorer_8be0880c], a0.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          namespace function {
            static PyObject *t_FunctionAllGroupHeadsCollector_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_FunctionAllGroupHeadsCollector_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_FunctionAllGroupHeadsCollector_of_(t_FunctionAllGroupHeadsCollector *self, PyObject *args);
            static int t_FunctionAllGroupHeadsCollector_init_(t_FunctionAllGroupHeadsCollector *self, PyObject *args, PyObject *kwds);
            static PyObject *t_FunctionAllGroupHeadsCollector_setNextReader(t_FunctionAllGroupHeadsCollector *self, PyObject *args);
            static PyObject *t_FunctionAllGroupHeadsCollector_setScorer(t_FunctionAllGroupHeadsCollector *self, PyObject *args);
            static int t_FunctionAllGroupHeadsCollector_set__nextReader(t_FunctionAllGroupHeadsCollector *self, PyObject *arg, void *data);
            static int t_FunctionAllGroupHeadsCollector_set__scorer(t_FunctionAllGroupHeadsCollector *self, PyObject *arg, void *data);
            static PyObject *t_FunctionAllGroupHeadsCollector_get__parameters_(t_FunctionAllGroupHeadsCollector *self, void *data);
            static PyGetSetDef t_FunctionAllGroupHeadsCollector__fields_[] = {
              DECLARE_SET_FIELD(t_FunctionAllGroupHeadsCollector, nextReader),
              DECLARE_SET_FIELD(t_FunctionAllGroupHeadsCollector, scorer),
              DECLARE_GET_FIELD(t_FunctionAllGroupHeadsCollector, parameters_),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_FunctionAllGroupHeadsCollector__methods_[] = {
              DECLARE_METHOD(t_FunctionAllGroupHeadsCollector, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FunctionAllGroupHeadsCollector, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FunctionAllGroupHeadsCollector, of_, METH_VARARGS),
              DECLARE_METHOD(t_FunctionAllGroupHeadsCollector, setNextReader, METH_VARARGS),
              DECLARE_METHOD(t_FunctionAllGroupHeadsCollector, setScorer, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(FunctionAllGroupHeadsCollector, t_FunctionAllGroupHeadsCollector, ::org::apache::lucene::search::grouping::AbstractAllGroupHeadsCollector, FunctionAllGroupHeadsCollector, t_FunctionAllGroupHeadsCollector_init_, 0, 0, t_FunctionAllGroupHeadsCollector__fields_, 0, 0);
            PyObject *t_FunctionAllGroupHeadsCollector::wrap_Object(const FunctionAllGroupHeadsCollector& object, PyTypeObject *p0)
            {
              PyObject *obj = t_FunctionAllGroupHeadsCollector::wrap_Object(object);
              if (obj != NULL && obj != Py_None)
              {
                t_FunctionAllGroupHeadsCollector *self = (t_FunctionAllGroupHeadsCollector *) obj;
                self->parameters[0] = p0;
              }
              return obj;
            }

            PyObject *t_FunctionAllGroupHeadsCollector::wrap_jobject(const jobject& object, PyTypeObject *p0)
            {
              PyObject *obj = t_FunctionAllGroupHeadsCollector::wrap_jobject(object);
              if (obj != NULL && obj != Py_None)
              {
                t_FunctionAllGroupHeadsCollector *self = (t_FunctionAllGroupHeadsCollector *) obj;
                self->parameters[0] = p0;
              }
              return obj;
            }

            void t_FunctionAllGroupHeadsCollector::install(PyObject *module)
            {
              installType(&PY_TYPE(FunctionAllGroupHeadsCollector), module, "FunctionAllGroupHeadsCollector", 0);
            }

            void t_FunctionAllGroupHeadsCollector::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(FunctionAllGroupHeadsCollector).tp_dict, "class_", make_descriptor(FunctionAllGroupHeadsCollector::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(FunctionAllGroupHeadsCollector).tp_dict, "wrapfn_", make_descriptor(t_FunctionAllGroupHeadsCollector::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(FunctionAllGroupHeadsCollector).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_FunctionAllGroupHeadsCollector_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, FunctionAllGroupHeadsCollector::initializeClass, 1)))
                return NULL;
              return t_FunctionAllGroupHeadsCollector::wrap_Object(FunctionAllGroupHeadsCollector(((t_FunctionAllGroupHeadsCollector *) arg)->object.this$));
            }
            static PyObject *t_FunctionAllGroupHeadsCollector_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, FunctionAllGroupHeadsCollector::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_FunctionAllGroupHeadsCollector_of_(t_FunctionAllGroupHeadsCollector *self, PyObject *args)
            {
              if (!parseArg(args, "T", 1, &(self->parameters)))
                Py_RETURN_SELF;
              return PyErr_SetArgsError((PyObject *) self, "of_", args);
            }

            static int t_FunctionAllGroupHeadsCollector_init_(t_FunctionAllGroupHeadsCollector *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::queries::function::ValueSource a0((jobject) NULL);
              ::java::util::Map a1((jobject) NULL);
              PyTypeObject **p1;
              ::org::apache::lucene::search::Sort a2((jobject) NULL);
              FunctionAllGroupHeadsCollector object((jobject) NULL);

              if (!parseArgs(args, "kKk", ::org::apache::lucene::queries::function::ValueSource::initializeClass, ::java::util::Map::initializeClass, ::org::apache::lucene::search::Sort::initializeClass, &a0, &a1, &p1, ::java::util::t_Map::parameters_, &a2))
              {
                INT_CALL(object = FunctionAllGroupHeadsCollector(a0, a1, a2));
                self->object = object;
                self->parameters[0] = &::org::apache::lucene::search::grouping::function::PY_TYPE(FunctionAllGroupHeadsCollector$GroupHead);
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_FunctionAllGroupHeadsCollector_setNextReader(t_FunctionAllGroupHeadsCollector *self, PyObject *args)
            {
              ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0))
              {
                OBJ_CALL(self->object.setNextReader(a0));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(FunctionAllGroupHeadsCollector), (PyObject *) self, "setNextReader", args, 2);
            }

            static PyObject *t_FunctionAllGroupHeadsCollector_setScorer(t_FunctionAllGroupHeadsCollector *self, PyObject *args)
            {
              ::org::apache::lucene::search::Scorer a0((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::search::Scorer::initializeClass, &a0))
              {
                OBJ_CALL(self->object.setScorer(a0));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(FunctionAllGroupHeadsCollector), (PyObject *) self, "setScorer", args, 2);
            }
            static PyObject *t_FunctionAllGroupHeadsCollector_get__parameters_(t_FunctionAllGroupHeadsCollector *self, void *data)
            {
              return typeParameters(self->parameters, sizeof(self->parameters));
            }

            static int t_FunctionAllGroupHeadsCollector_set__nextReader(t_FunctionAllGroupHeadsCollector *self, PyObject *arg, void *data)
            {
              {
                ::org::apache::lucene::index::AtomicReaderContext value((jobject) NULL);
                if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &value))
                {
                  INT_CALL(self->object.setNextReader(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "nextReader", arg);
              return -1;
            }

            static int t_FunctionAllGroupHeadsCollector_set__scorer(t_FunctionAllGroupHeadsCollector *self, PyObject *arg, void *data)
            {
              {
                ::org::apache::lucene::search::Scorer value((jobject) NULL);
                if (!parseArg(arg, "k", ::org::apache::lucene::search::Scorer::initializeClass, &value))
                {
                  INT_CALL(self->object.setScorer(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "scorer", arg);
              return -1;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/memory/MemoryIndex.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "java/util/Collection.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Query.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        namespace memory {

          ::java::lang::Class *MemoryIndex::class$ = NULL;
          jmethodID *MemoryIndex::mids$ = NULL;
          bool MemoryIndex::live$ = false;

          jclass MemoryIndex::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/index/memory/MemoryIndex");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_bb0c767f] = env->getMethodID(cls, "<init>", "(Z)V");
              mids$[mid_addField_7d0c5392] = env->getMethodID(cls, "addField", "(Ljava/lang/String;Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_addField_2f58d53f] = env->getMethodID(cls, "addField", "(Ljava/lang/String;Lorg/apache/lucene/analysis/TokenStream;F)V");
              mids$[mid_addField_94a4a674] = env->getMethodID(cls, "addField", "(Ljava/lang/String;Ljava/lang/String;Lorg/apache/lucene/analysis/Analyzer;)V");
              mids$[mid_addField_29c81a73] = env->getMethodID(cls, "addField", "(Ljava/lang/String;Lorg/apache/lucene/analysis/TokenStream;FI)V");
              mids$[mid_addField_6b38bf6f] = env->getMethodID(cls, "addField", "(Ljava/lang/String;Lorg/apache/lucene/analysis/TokenStream;FII)V");
              mids$[mid_createSearcher_cab79e71] = env->getMethodID(cls, "createSearcher", "()Lorg/apache/lucene/search/IndexSearcher;");
              mids$[mid_keywordTokenStream_f7dc1120] = env->getMethodID(cls, "keywordTokenStream", "(Ljava/util/Collection;)Lorg/apache/lucene/analysis/TokenStream;");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");
              mids$[mid_search_6e301103] = env->getMethodID(cls, "search", "(Lorg/apache/lucene/search/Query;)F");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          MemoryIndex::MemoryIndex() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          MemoryIndex::MemoryIndex(jboolean a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_bb0c767f, a0)) {}

          void MemoryIndex::addField(const ::java::lang::String & a0, const ::org::apache::lucene::analysis::TokenStream & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_addField_7d0c5392], a0.this$, a1.this$);
          }

          void MemoryIndex::addField(const ::java::lang::String & a0, const ::org::apache::lucene::analysis::TokenStream & a1, jfloat a2) const
          {
            env->callVoidMethod(this$, mids$[mid_addField_2f58d53f], a0.this$, a1.this$, a2);
          }

          void MemoryIndex::addField(const ::java::lang::String & a0, const ::java::lang::String & a1, const ::org::apache::lucene::analysis::Analyzer & a2) const
          {
            env->callVoidMethod(this$, mids$[mid_addField_94a4a674], a0.this$, a1.this$, a2.this$);
          }

          void MemoryIndex::addField(const ::java::lang::String & a0, const ::org::apache::lucene::analysis::TokenStream & a1, jfloat a2, jint a3) const
          {
            env->callVoidMethod(this$, mids$[mid_addField_29c81a73], a0.this$, a1.this$, a2, a3);
          }

          void MemoryIndex::addField(const ::java::lang::String & a0, const ::org::apache::lucene::analysis::TokenStream & a1, jfloat a2, jint a3, jint a4) const
          {
            env->callVoidMethod(this$, mids$[mid_addField_6b38bf6f], a0.this$, a1.this$, a2, a3, a4);
          }

          ::org::apache::lucene::search::IndexSearcher MemoryIndex::createSearcher() const
          {
            return ::org::apache::lucene::search::IndexSearcher(env->callObjectMethod(this$, mids$[mid_createSearcher_cab79e71]));
          }

          ::org::apache::lucene::analysis::TokenStream MemoryIndex::keywordTokenStream(const ::java::util::Collection & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_keywordTokenStream_f7dc1120], a0.this$));
          }

          void MemoryIndex::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }

          jfloat MemoryIndex::search(const ::org::apache::lucene::search::Query & a0) const
          {
            return env->callFloatMethod(this$, mids$[mid_search_6e301103], a0.this$);
          }

          ::java::lang::String MemoryIndex::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        namespace memory {
          static PyObject *t_MemoryIndex_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_MemoryIndex_instance_(PyTypeObject *type, PyObject *arg);
          static int t_MemoryIndex_init_(t_MemoryIndex *self, PyObject *args, PyObject *kwds);
          static PyObject *t_MemoryIndex_addField(t_MemoryIndex *self, PyObject *args);
          static PyObject *t_MemoryIndex_createSearcher(t_MemoryIndex *self);
          static PyObject *t_MemoryIndex_keywordTokenStream(t_MemoryIndex *self, PyObject *arg);
          static PyObject *t_MemoryIndex_reset(t_MemoryIndex *self);
          static PyObject *t_MemoryIndex_search(t_MemoryIndex *self, PyObject *arg);
          static PyObject *t_MemoryIndex_toString(t_MemoryIndex *self, PyObject *args);

          static PyMethodDef t_MemoryIndex__methods_[] = {
            DECLARE_METHOD(t_MemoryIndex, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MemoryIndex, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MemoryIndex, addField, METH_VARARGS),
            DECLARE_METHOD(t_MemoryIndex, createSearcher, METH_NOARGS),
            DECLARE_METHOD(t_MemoryIndex, keywordTokenStream, METH_O),
            DECLARE_METHOD(t_MemoryIndex, reset, METH_NOARGS),
            DECLARE_METHOD(t_MemoryIndex, search, METH_O),
            DECLARE_METHOD(t_MemoryIndex, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(MemoryIndex, t_MemoryIndex, ::java::lang::Object, MemoryIndex, t_MemoryIndex_init_, 0, 0, 0, 0, 0);

          void t_MemoryIndex::install(PyObject *module)
          {
            installType(&PY_TYPE(MemoryIndex), module, "MemoryIndex", 0);
          }

          void t_MemoryIndex::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(MemoryIndex).tp_dict, "class_", make_descriptor(MemoryIndex::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(MemoryIndex).tp_dict, "wrapfn_", make_descriptor(t_MemoryIndex::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(MemoryIndex).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_MemoryIndex_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, MemoryIndex::initializeClass, 1)))
              return NULL;
            return t_MemoryIndex::wrap_Object(MemoryIndex(((t_MemoryIndex *) arg)->object.this$));
          }
          static PyObject *t_MemoryIndex_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, MemoryIndex::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_MemoryIndex_init_(t_MemoryIndex *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                MemoryIndex object((jobject) NULL);

                INT_CALL(object = MemoryIndex());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                jboolean a0;
                MemoryIndex object((jobject) NULL);

                if (!parseArgs(args, "Z", &a0))
                {
                  INT_CALL(object = MemoryIndex(a0));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_MemoryIndex_addField(t_MemoryIndex *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::java::lang::String a0((jobject) NULL);
                ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);

                if (!parseArgs(args, "sk", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(self->object.addField(a0, a1));
                  Py_RETURN_NONE;
                }
              }
              break;
             case 3:
              {
                ::java::lang::String a0((jobject) NULL);
                ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
                jfloat a2;

                if (!parseArgs(args, "skF", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1, &a2))
                {
                  OBJ_CALL(self->object.addField(a0, a1, a2));
                  Py_RETURN_NONE;
                }
              }
              {
                ::java::lang::String a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                ::org::apache::lucene::analysis::Analyzer a2((jobject) NULL);

                if (!parseArgs(args, "ssk", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1, &a2))
                {
                  OBJ_CALL(self->object.addField(a0, a1, a2));
                  Py_RETURN_NONE;
                }
              }
              break;
             case 4:
              {
                ::java::lang::String a0((jobject) NULL);
                ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
                jfloat a2;
                jint a3;

                if (!parseArgs(args, "skFI", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1, &a2, &a3))
                {
                  OBJ_CALL(self->object.addField(a0, a1, a2, a3));
                  Py_RETURN_NONE;
                }
              }
              break;
             case 5:
              {
                ::java::lang::String a0((jobject) NULL);
                ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
                jfloat a2;
                jint a3;
                jint a4;

                if (!parseArgs(args, "skFII", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1, &a2, &a3, &a4))
                {
                  OBJ_CALL(self->object.addField(a0, a1, a2, a3, a4));
                  Py_RETURN_NONE;
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "addField", args);
            return NULL;
          }

          static PyObject *t_MemoryIndex_createSearcher(t_MemoryIndex *self)
          {
            ::org::apache::lucene::search::IndexSearcher result((jobject) NULL);
            OBJ_CALL(result = self->object.createSearcher());
            return ::org::apache::lucene::search::t_IndexSearcher::wrap_Object(result);
          }

          static PyObject *t_MemoryIndex_keywordTokenStream(t_MemoryIndex *self, PyObject *arg)
          {
            ::java::util::Collection a0((jobject) NULL);
            PyTypeObject **p0;
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArg(arg, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
            {
              OBJ_CALL(result = self->object.keywordTokenStream(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "keywordTokenStream", arg);
            return NULL;
          }

          static PyObject *t_MemoryIndex_reset(t_MemoryIndex *self)
          {
            OBJ_CALL(self->object.reset());
            Py_RETURN_NONE;
          }

          static PyObject *t_MemoryIndex_search(t_MemoryIndex *self, PyObject *arg)
          {
            ::org::apache::lucene::search::Query a0((jobject) NULL);
            jfloat result;

            if (!parseArg(arg, "k", ::org::apache::lucene::search::Query::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.search(a0));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "search", arg);
            return NULL;
          }

          static PyObject *t_MemoryIndex_toString(t_MemoryIndex *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(MemoryIndex), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/DocIdSet.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/Accountable.h"
#include "org/apache/lucene/search/DocIdSetIterator.h"
#include "org/apache/lucene/util/Bits.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *DocIdSet::class$ = NULL;
        jmethodID *DocIdSet::mids$ = NULL;
        bool DocIdSet::live$ = false;
        DocIdSet *DocIdSet::EMPTY = NULL;

        jclass DocIdSet::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/DocIdSet");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_bits_03c2457d] = env->getMethodID(cls, "bits", "()Lorg/apache/lucene/util/Bits;");
            mids$[mid_isCacheable_54c6a16a] = env->getMethodID(cls, "isCacheable", "()Z");
            mids$[mid_iterator_dc23660c] = env->getMethodID(cls, "iterator", "()Lorg/apache/lucene/search/DocIdSetIterator;");
            mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            EMPTY = new DocIdSet(env->getStaticObjectField(cls, "EMPTY", "Lorg/apache/lucene/search/DocIdSet;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        DocIdSet::DocIdSet() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        ::org::apache::lucene::util::Bits DocIdSet::bits() const
        {
          return ::org::apache::lucene::util::Bits(env->callObjectMethod(this$, mids$[mid_bits_03c2457d]));
        }

        jboolean DocIdSet::isCacheable() const
        {
          return env->callBooleanMethod(this$, mids$[mid_isCacheable_54c6a16a]);
        }

        ::org::apache::lucene::search::DocIdSetIterator DocIdSet::iterator() const
        {
          return ::org::apache::lucene::search::DocIdSetIterator(env->callObjectMethod(this$, mids$[mid_iterator_dc23660c]));
        }

        jlong DocIdSet::ramBytesUsed() const
        {
          return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_DocIdSet_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DocIdSet_instance_(PyTypeObject *type, PyObject *arg);
        static int t_DocIdSet_init_(t_DocIdSet *self, PyObject *args, PyObject *kwds);
        static PyObject *t_DocIdSet_bits(t_DocIdSet *self);
        static PyObject *t_DocIdSet_isCacheable(t_DocIdSet *self);
        static PyObject *t_DocIdSet_iterator(t_DocIdSet *self);
        static PyObject *t_DocIdSet_ramBytesUsed(t_DocIdSet *self);
        static PyObject *t_DocIdSet_get__cacheable(t_DocIdSet *self, void *data);
        static PyGetSetDef t_DocIdSet__fields_[] = {
          DECLARE_GET_FIELD(t_DocIdSet, cacheable),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_DocIdSet__methods_[] = {
          DECLARE_METHOD(t_DocIdSet, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DocIdSet, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DocIdSet, bits, METH_NOARGS),
          DECLARE_METHOD(t_DocIdSet, isCacheable, METH_NOARGS),
          DECLARE_METHOD(t_DocIdSet, iterator, METH_NOARGS),
          DECLARE_METHOD(t_DocIdSet, ramBytesUsed, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(DocIdSet, t_DocIdSet, ::java::lang::Object, DocIdSet, t_DocIdSet_init_, 0, 0, t_DocIdSet__fields_, 0, 0);

        void t_DocIdSet::install(PyObject *module)
        {
          installType(&PY_TYPE(DocIdSet), module, "DocIdSet", 0);
        }

        void t_DocIdSet::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(DocIdSet).tp_dict, "class_", make_descriptor(DocIdSet::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(DocIdSet).tp_dict, "wrapfn_", make_descriptor(t_DocIdSet::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(DocIdSet).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(DocIdSet::initializeClass);
          PyDict_SetItemString(PY_TYPE(DocIdSet).tp_dict, "EMPTY", make_descriptor(t_DocIdSet::wrap_Object(*DocIdSet::EMPTY)));
        }

        static PyObject *t_DocIdSet_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, DocIdSet::initializeClass, 1)))
            return NULL;
          return t_DocIdSet::wrap_Object(DocIdSet(((t_DocIdSet *) arg)->object.this$));
        }
        static PyObject *t_DocIdSet_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, DocIdSet::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_DocIdSet_init_(t_DocIdSet *self, PyObject *args, PyObject *kwds)
        {
          DocIdSet object((jobject) NULL);

          INT_CALL(object = DocIdSet());
          self->object = object;

          return 0;
        }

        static PyObject *t_DocIdSet_bits(t_DocIdSet *self)
        {
          ::org::apache::lucene::util::Bits result((jobject) NULL);
          OBJ_CALL(result = self->object.bits());
          return ::org::apache::lucene::util::t_Bits::wrap_Object(result);
        }

        static PyObject *t_DocIdSet_isCacheable(t_DocIdSet *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.isCacheable());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_DocIdSet_iterator(t_DocIdSet *self)
        {
          ::org::apache::lucene::search::DocIdSetIterator result((jobject) NULL);
          OBJ_CALL(result = self->object.iterator());
          return ::org::apache::lucene::search::t_DocIdSetIterator::wrap_Object(result);
        }

        static PyObject *t_DocIdSet_ramBytesUsed(t_DocIdSet *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.ramBytesUsed());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_DocIdSet_get__cacheable(t_DocIdSet *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.isCacheable());
          Py_RETURN_BOOL(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/lang/Throwable.h"
#include "java/lang/Class.h"
#include "java/lang/StackTraceElement.h"
#include "java/io/Serializable.h"
#include "java/io/PrintStream.h"
#include "java/io/PrintWriter.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace java {
  namespace lang {

    ::java::lang::Class *Throwable::class$ = NULL;
    jmethodID *Throwable::mids$ = NULL;
    bool Throwable::live$ = false;

    jclass Throwable::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/lang/Throwable");

        mids$ = new jmethodID[max_mid];
        mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
        mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
        mids$[mid_init$_01646a2e] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/Throwable;)V");
        mids$[mid_addSuppressed_c5ec8ca4] = env->getMethodID(cls, "addSuppressed", "(Ljava/lang/Throwable;)V");
        mids$[mid_fillInStackTrace_9a29189d] = env->getMethodID(cls, "fillInStackTrace", "()Ljava/lang/Throwable;");
        mids$[mid_getCause_9a29189d] = env->getMethodID(cls, "getCause", "()Ljava/lang/Throwable;");
        mids$[mid_getLocalizedMessage_14c7b5c5] = env->getMethodID(cls, "getLocalizedMessage", "()Ljava/lang/String;");
        mids$[mid_getMessage_14c7b5c5] = env->getMethodID(cls, "getMessage", "()Ljava/lang/String;");
        mids$[mid_getStackTrace_25f1f6aa] = env->getMethodID(cls, "getStackTrace", "()[Ljava/lang/StackTraceElement;");
        mids$[mid_getSuppressed_f4efa455] = env->getMethodID(cls, "getSuppressed", "()[Ljava/lang/Throwable;");
        mids$[mid_initCause_dabad90f] = env->getMethodID(cls, "initCause", "(Ljava/lang/Throwable;)Ljava/lang/Throwable;");
        mids$[mid_printStackTrace_54c6a166] = env->getMethodID(cls, "printStackTrace", "()V");
        mids$[mid_printStackTrace_1b7c898b] = env->getMethodID(cls, "printStackTrace", "(Ljava/io/PrintStream;)V");
        mids$[mid_printStackTrace_82fffd94] = env->getMethodID(cls, "printStackTrace", "(Ljava/io/PrintWriter;)V");
        mids$[mid_setStackTrace_3d8798bf] = env->getMethodID(cls, "setStackTrace", "([Ljava/lang/StackTraceElement;)V");
        mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

        class$ = (::java::lang::Class *) new JObject(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    Throwable::Throwable() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

    Throwable::Throwable(const ::java::lang::String & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

    Throwable::Throwable(const ::java::lang::String & a0, const Throwable & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_01646a2e, a0.this$, a1.this$)) {}

    void Throwable::addSuppressed(const Throwable & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_addSuppressed_c5ec8ca4], a0.this$);
    }

    Throwable Throwable::fillInStackTrace() const
    {
      return Throwable(env->callObjectMethod(this$, mids$[mid_fillInStackTrace_9a29189d]));
    }

    Throwable Throwable::getCause() const
    {
      return Throwable(env->callObjectMethod(this$, mids$[mid_getCause_9a29189d]));
    }

    ::java::lang::String Throwable::getLocalizedMessage() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getLocalizedMessage_14c7b5c5]));
    }

    ::java::lang::String Throwable::getMessage() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getMessage_14c7b5c5]));
    }

    JArray< ::java::lang::StackTraceElement > Throwable::getStackTrace() const
    {
      return JArray< ::java::lang::StackTraceElement >(env->callObjectMethod(this$, mids$[mid_getStackTrace_25f1f6aa]));
    }

    JArray< Throwable > Throwable::getSuppressed() const
    {
      return JArray< Throwable >(env->callObjectMethod(this$, mids$[mid_getSuppressed_f4efa455]));
    }

    Throwable Throwable::initCause(const Throwable & a0) const
    {
      return Throwable(env->callObjectMethod(this$, mids$[mid_initCause_dabad90f], a0.this$));
    }

    void Throwable::printStackTrace() const
    {
      env->callVoidMethod(this$, mids$[mid_printStackTrace_54c6a166]);
    }

    void Throwable::printStackTrace(const ::java::io::PrintStream & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_printStackTrace_1b7c898b], a0.this$);
    }

    void Throwable::printStackTrace(const ::java::io::PrintWriter & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_printStackTrace_82fffd94], a0.this$);
    }

    void Throwable::setStackTrace(const JArray< ::java::lang::StackTraceElement > & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_setStackTrace_3d8798bf], a0.this$);
    }

    ::java::lang::String Throwable::toString() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace lang {
    static PyObject *t_Throwable_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Throwable_instance_(PyTypeObject *type, PyObject *arg);
    static int t_Throwable_init_(t_Throwable *self, PyObject *args, PyObject *kwds);
    static PyObject *t_Throwable_addSuppressed(t_Throwable *self, PyObject *arg);
    static PyObject *t_Throwable_fillInStackTrace(t_Throwable *self);
    static PyObject *t_Throwable_getCause(t_Throwable *self);
    static PyObject *t_Throwable_getLocalizedMessage(t_Throwable *self);
    static PyObject *t_Throwable_getMessage(t_Throwable *self);
    static PyObject *t_Throwable_getStackTrace(t_Throwable *self);
    static PyObject *t_Throwable_getSuppressed(t_Throwable *self);
    static PyObject *t_Throwable_initCause(t_Throwable *self, PyObject *arg);
    static PyObject *t_Throwable_printStackTrace(t_Throwable *self, PyObject *args);
    static PyObject *t_Throwable_setStackTrace(t_Throwable *self, PyObject *arg);
    static PyObject *t_Throwable_toString(t_Throwable *self, PyObject *args);
    static PyObject *t_Throwable_get__cause(t_Throwable *self, void *data);
    static PyObject *t_Throwable_get__localizedMessage(t_Throwable *self, void *data);
    static PyObject *t_Throwable_get__message(t_Throwable *self, void *data);
    static PyObject *t_Throwable_get__stackTrace(t_Throwable *self, void *data);
    static int t_Throwable_set__stackTrace(t_Throwable *self, PyObject *arg, void *data);
    static PyObject *t_Throwable_get__suppressed(t_Throwable *self, void *data);
    static PyGetSetDef t_Throwable__fields_[] = {
      DECLARE_GET_FIELD(t_Throwable, cause),
      DECLARE_GET_FIELD(t_Throwable, localizedMessage),
      DECLARE_GET_FIELD(t_Throwable, message),
      DECLARE_GETSET_FIELD(t_Throwable, stackTrace),
      DECLARE_GET_FIELD(t_Throwable, suppressed),
      { NULL, NULL, NULL, NULL, NULL }
    };

    static PyMethodDef t_Throwable__methods_[] = {
      DECLARE_METHOD(t_Throwable, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Throwable, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Throwable, addSuppressed, METH_O),
      DECLARE_METHOD(t_Throwable, fillInStackTrace, METH_NOARGS),
      DECLARE_METHOD(t_Throwable, getCause, METH_NOARGS),
      DECLARE_METHOD(t_Throwable, getLocalizedMessage, METH_NOARGS),
      DECLARE_METHOD(t_Throwable, getMessage, METH_NOARGS),
      DECLARE_METHOD(t_Throwable, getStackTrace, METH_NOARGS),
      DECLARE_METHOD(t_Throwable, getSuppressed, METH_NOARGS),
      DECLARE_METHOD(t_Throwable, initCause, METH_O),
      DECLARE_METHOD(t_Throwable, printStackTrace, METH_VARARGS),
      DECLARE_METHOD(t_Throwable, setStackTrace, METH_O),
      DECLARE_METHOD(t_Throwable, toString, METH_VARARGS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(Throwable, t_Throwable, ::java::lang::Object, Throwable, t_Throwable_init_, 0, 0, t_Throwable__fields_, 0, 0);

    void t_Throwable::install(PyObject *module)
    {
      installType(&PY_TYPE(Throwable), module, "Throwable", 0);
    }

    void t_Throwable::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(Throwable).tp_dict, "class_", make_descriptor(Throwable::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(Throwable).tp_dict, "wrapfn_", make_descriptor(t_Throwable::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(Throwable).tp_dict, "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_Throwable_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, Throwable::initializeClass, 1)))
        return NULL;
      return t_Throwable::wrap_Object(Throwable(((t_Throwable *) arg)->object.this$));
    }
    static PyObject *t_Throwable_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, Throwable::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static int t_Throwable_init_(t_Throwable *self, PyObject *args, PyObject *kwds)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          Throwable object((jobject) NULL);

          INT_CALL(object = Throwable());
          self->object = object;
          break;
        }
        goto err;
       case 1:
        {
          ::java::lang::String a0((jobject) NULL);
          Throwable object((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            INT_CALL(object = Throwable(a0));
            self->object = object;
            break;
          }
        }
        goto err;
       case 2:
        {
          ::java::lang::String a0((jobject) NULL);
          Throwable a1((jobject) NULL);
          Throwable object((jobject) NULL);

          if (!parseArgs(args, "sk", Throwable::initializeClass, &a0, &a1))
          {
            INT_CALL(object = Throwable(a0, a1));
            self->object = object;
            break;
          }
        }
       default:
       err:
        PyErr_SetArgsError((PyObject *) self, "__init__", args);
        return -1;
      }

      return 0;
    }

    static PyObject *t_Throwable_addSuppressed(t_Throwable *self, PyObject *arg)
    {
      Throwable a0((jobject) NULL);

      if (!parseArg(arg, "k", Throwable::initializeClass, &a0))
      {
        OBJ_CALL(self->object.addSuppressed(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "addSuppressed", arg);
      return NULL;
    }

    static PyObject *t_Throwable_fillInStackTrace(t_Throwable *self)
    {
      Throwable result((jobject) NULL);
      OBJ_CALL(result = self->object.fillInStackTrace());
      return t_Throwable::wrap_Object(result);
    }

    static PyObject *t_Throwable_getCause(t_Throwable *self)
    {
      Throwable result((jobject) NULL);
      OBJ_CALL(result = self->object.getCause());
      return t_Throwable::wrap_Object(result);
    }

    static PyObject *t_Throwable_getLocalizedMessage(t_Throwable *self)
    {
      ::java::lang::String result((jobject) NULL);
      OBJ_CALL(result = self->object.getLocalizedMessage());
      return j2p(result);
    }

    static PyObject *t_Throwable_getMessage(t_Throwable *self)
    {
      ::java::lang::String result((jobject) NULL);
      OBJ_CALL(result = self->object.getMessage());
      return j2p(result);
    }

    static PyObject *t_Throwable_getStackTrace(t_Throwable *self)
    {
      JArray< ::java::lang::StackTraceElement > result((jobject) NULL);
      OBJ_CALL(result = self->object.getStackTrace());
      return JArray<jobject>(result.this$).wrap(::java::lang::t_StackTraceElement::wrap_jobject);
    }

    static PyObject *t_Throwable_getSuppressed(t_Throwable *self)
    {
      JArray< Throwable > result((jobject) NULL);
      OBJ_CALL(result = self->object.getSuppressed());
      return JArray<jobject>(result.this$).wrap(t_Throwable::wrap_jobject);
    }

    static PyObject *t_Throwable_initCause(t_Throwable *self, PyObject *arg)
    {
      Throwable a0((jobject) NULL);
      Throwable result((jobject) NULL);

      if (!parseArg(arg, "k", Throwable::initializeClass, &a0))
      {
        OBJ_CALL(result = self->object.initCause(a0));
        return t_Throwable::wrap_Object(result);
      }

      PyErr_SetArgsError((PyObject *) self, "initCause", arg);
      return NULL;
    }

    static PyObject *t_Throwable_printStackTrace(t_Throwable *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          OBJ_CALL(self->object.printStackTrace());
          Py_RETURN_NONE;
        }
        break;
       case 1:
        {
          ::java::io::PrintStream a0((jobject) NULL);

          if (!parseArgs(args, "k", ::java::io::PrintStream::initializeClass, &a0))
          {
            OBJ_CALL(self->object.printStackTrace(a0));
            Py_RETURN_NONE;
          }
        }
        {
          ::java::io::PrintWriter a0((jobject) NULL);

          if (!parseArgs(args, "k", ::java::io::PrintWriter::initializeClass, &a0))
          {
            OBJ_CALL(self->object.printStackTrace(a0));
            Py_RETURN_NONE;
          }
        }
      }

      PyErr_SetArgsError((PyObject *) self, "printStackTrace", args);
      return NULL;
    }

    static PyObject *t_Throwable_setStackTrace(t_Throwable *self, PyObject *arg)
    {
      JArray< ::java::lang::StackTraceElement > a0((jobject) NULL);

      if (!parseArg(arg, "[k", ::java::lang::StackTraceElement::initializeClass, &a0))
      {
        OBJ_CALL(self->object.setStackTrace(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "setStackTrace", arg);
      return NULL;
    }

    static PyObject *t_Throwable_toString(t_Throwable *self, PyObject *args)
    {
      ::java::lang::String result((jobject) NULL);

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.toString());
        return j2p(result);
      }

      return callSuper(&PY_TYPE(Throwable), (PyObject *) self, "toString", args, 2);
    }

    static PyObject *t_Throwable_get__cause(t_Throwable *self, void *data)
    {
      Throwable value((jobject) NULL);
      OBJ_CALL(value = self->object.getCause());
      return t_Throwable::wrap_Object(value);
    }

    static PyObject *t_Throwable_get__localizedMessage(t_Throwable *self, void *data)
    {
      ::java::lang::String value((jobject) NULL);
      OBJ_CALL(value = self->object.getLocalizedMessage());
      return j2p(value);
    }

    static PyObject *t_Throwable_get__message(t_Throwable *self, void *data)
    {
      ::java::lang::String value((jobject) NULL);
      OBJ_CALL(value = self->object.getMessage());
      return j2p(value);
    }

    static PyObject *t_Throwable_get__stackTrace(t_Throwable *self, void *data)
    {
      JArray< ::java::lang::StackTraceElement > value((jobject) NULL);
      OBJ_CALL(value = self->object.getStackTrace());
      return JArray<jobject>(value.this$).wrap(::java::lang::t_StackTraceElement::wrap_jobject);
    }
    static int t_Throwable_set__stackTrace(t_Throwable *self, PyObject *arg, void *data)
    {
      {
        JArray< ::java::lang::StackTraceElement > value((jobject) NULL);
        if (!parseArg(arg, "[k", ::java::lang::StackTraceElement::initializeClass, &value))
        {
          INT_CALL(self->object.setStackTrace(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "stackTrace", arg);
      return -1;
    }

    static PyObject *t_Throwable_get__suppressed(t_Throwable *self, void *data)
    {
      JArray< Throwable > value((jobject) NULL);
      OBJ_CALL(value = self->object.getSuppressed());
      return JArray<jobject>(value.this$).wrap(t_Throwable::wrap_jobject);
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/DoubleConstValueSource.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "java/lang/Object.h"
#include "java/lang/Number.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *DoubleConstValueSource::class$ = NULL;
            jmethodID *DoubleConstValueSource::mids$ = NULL;
            bool DoubleConstValueSource::live$ = false;

            jclass DoubleConstValueSource::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/DoubleConstValueSource");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_5d1c7645] = env->getMethodID(cls, "<init>", "(D)V");
                mids$[mid_description_14c7b5c5] = env->getMethodID(cls, "description", "()Ljava/lang/String;");
                mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_getBool_54c6a16a] = env->getMethodID(cls, "getBool", "()Z");
                mids$[mid_getDouble_54c6a174] = env->getMethodID(cls, "getDouble", "()D");
                mids$[mid_getFloat_54c6a176] = env->getMethodID(cls, "getFloat", "()F");
                mids$[mid_getInt_54c6a179] = env->getMethodID(cls, "getInt", "()I");
                mids$[mid_getLong_54c6a17a] = env->getMethodID(cls, "getLong", "()J");
                mids$[mid_getNumber_ee47e3e1] = env->getMethodID(cls, "getNumber", "()Ljava/lang/Number;");
                mids$[mid_getValues_4c566485] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/queries/function/FunctionValues;");
                mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            DoubleConstValueSource::DoubleConstValueSource(jdouble a0) : ::org::apache::lucene::queries::function::valuesource::ConstNumberSource(env->newObject(initializeClass, &mids$, mid_init$_5d1c7645, a0)) {}

            ::java::lang::String DoubleConstValueSource::description() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_description_14c7b5c5]));
            }

            jboolean DoubleConstValueSource::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
            }

            jboolean DoubleConstValueSource::getBool() const
            {
              return env->callBooleanMethod(this$, mids$[mid_getBool_54c6a16a]);
            }

            jdouble DoubleConstValueSource::getDouble() const
            {
              return env->callDoubleMethod(this$, mids$[mid_getDouble_54c6a174]);
            }

            jfloat DoubleConstValueSource::getFloat() const
            {
              return env->callFloatMethod(this$, mids$[mid_getFloat_54c6a176]);
            }

            jint DoubleConstValueSource::getInt() const
            {
              return env->callIntMethod(this$, mids$[mid_getInt_54c6a179]);
            }

            jlong DoubleConstValueSource::getLong() const
            {
              return env->callLongMethod(this$, mids$[mid_getLong_54c6a17a]);
            }

            ::java::lang::Number DoubleConstValueSource::getNumber() const
            {
              return ::java::lang::Number(env->callObjectMethod(this$, mids$[mid_getNumber_ee47e3e1]));
            }

            ::org::apache::lucene::queries::function::FunctionValues DoubleConstValueSource::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::FunctionValues(env->callObjectMethod(this$, mids$[mid_getValues_4c566485], a0.this$, a1.this$));
            }

            jint DoubleConstValueSource::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_DoubleConstValueSource_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_DoubleConstValueSource_instance_(PyTypeObject *type, PyObject *arg);
            static int t_DoubleConstValueSource_init_(t_DoubleConstValueSource *self, PyObject *args, PyObject *kwds);
            static PyObject *t_DoubleConstValueSource_description(t_DoubleConstValueSource *self, PyObject *args);
            static PyObject *t_DoubleConstValueSource_equals(t_DoubleConstValueSource *self, PyObject *args);
            static PyObject *t_DoubleConstValueSource_getBool(t_DoubleConstValueSource *self, PyObject *args);
            static PyObject *t_DoubleConstValueSource_getDouble(t_DoubleConstValueSource *self, PyObject *args);
            static PyObject *t_DoubleConstValueSource_getFloat(t_DoubleConstValueSource *self, PyObject *args);
            static PyObject *t_DoubleConstValueSource_getInt(t_DoubleConstValueSource *self, PyObject *args);
            static PyObject *t_DoubleConstValueSource_getLong(t_DoubleConstValueSource *self, PyObject *args);
            static PyObject *t_DoubleConstValueSource_getNumber(t_DoubleConstValueSource *self, PyObject *args);
            static PyObject *t_DoubleConstValueSource_getValues(t_DoubleConstValueSource *self, PyObject *args);
            static PyObject *t_DoubleConstValueSource_hashCode(t_DoubleConstValueSource *self, PyObject *args);
            static PyObject *t_DoubleConstValueSource_get__bool(t_DoubleConstValueSource *self, void *data);
            static PyObject *t_DoubleConstValueSource_get__double(t_DoubleConstValueSource *self, void *data);
            static PyObject *t_DoubleConstValueSource_get__float(t_DoubleConstValueSource *self, void *data);
            static PyObject *t_DoubleConstValueSource_get__int(t_DoubleConstValueSource *self, void *data);
            static PyObject *t_DoubleConstValueSource_get__long(t_DoubleConstValueSource *self, void *data);
            static PyObject *t_DoubleConstValueSource_get__number(t_DoubleConstValueSource *self, void *data);
            static PyGetSetDef t_DoubleConstValueSource__fields_[] = {
              DECLARE_GET_FIELD(t_DoubleConstValueSource, bool),
              DECLARE_GET_FIELD(t_DoubleConstValueSource, double),
              DECLARE_GET_FIELD(t_DoubleConstValueSource, float),
              DECLARE_GET_FIELD(t_DoubleConstValueSource, int),
              DECLARE_GET_FIELD(t_DoubleConstValueSource, long),
              DECLARE_GET_FIELD(t_DoubleConstValueSource, number),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_DoubleConstValueSource__methods_[] = {
              DECLARE_METHOD(t_DoubleConstValueSource, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_DoubleConstValueSource, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_DoubleConstValueSource, description, METH_VARARGS),
              DECLARE_METHOD(t_DoubleConstValueSource, equals, METH_VARARGS),
              DECLARE_METHOD(t_DoubleConstValueSource, getBool, METH_VARARGS),
              DECLARE_METHOD(t_DoubleConstValueSource, getDouble, METH_VARARGS),
              DECLARE_METHOD(t_DoubleConstValueSource, getFloat, METH_VARARGS),
              DECLARE_METHOD(t_DoubleConstValueSource, getInt, METH_VARARGS),
              DECLARE_METHOD(t_DoubleConstValueSource, getLong, METH_VARARGS),
              DECLARE_METHOD(t_DoubleConstValueSource, getNumber, METH_VARARGS),
              DECLARE_METHOD(t_DoubleConstValueSource, getValues, METH_VARARGS),
              DECLARE_METHOD(t_DoubleConstValueSource, hashCode, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(DoubleConstValueSource, t_DoubleConstValueSource, ::org::apache::lucene::queries::function::valuesource::ConstNumberSource, DoubleConstValueSource, t_DoubleConstValueSource_init_, 0, 0, t_DoubleConstValueSource__fields_, 0, 0);

            void t_DoubleConstValueSource::install(PyObject *module)
            {
              installType(&PY_TYPE(DoubleConstValueSource), module, "DoubleConstValueSource", 0);
            }

            void t_DoubleConstValueSource::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(DoubleConstValueSource).tp_dict, "class_", make_descriptor(DoubleConstValueSource::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(DoubleConstValueSource).tp_dict, "wrapfn_", make_descriptor(t_DoubleConstValueSource::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(DoubleConstValueSource).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_DoubleConstValueSource_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, DoubleConstValueSource::initializeClass, 1)))
                return NULL;
              return t_DoubleConstValueSource::wrap_Object(DoubleConstValueSource(((t_DoubleConstValueSource *) arg)->object.this$));
            }
            static PyObject *t_DoubleConstValueSource_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, DoubleConstValueSource::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_DoubleConstValueSource_init_(t_DoubleConstValueSource *self, PyObject *args, PyObject *kwds)
            {
              jdouble a0;
              DoubleConstValueSource object((jobject) NULL);

              if (!parseArgs(args, "D", &a0))
              {
                INT_CALL(object = DoubleConstValueSource(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_DoubleConstValueSource_description(t_DoubleConstValueSource *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.description());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(DoubleConstValueSource), (PyObject *) self, "description", args, 2);
            }

            static PyObject *t_DoubleConstValueSource_equals(t_DoubleConstValueSource *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(DoubleConstValueSource), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_DoubleConstValueSource_getBool(t_DoubleConstValueSource *self, PyObject *args)
            {
              jboolean result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getBool());
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(DoubleConstValueSource), (PyObject *) self, "getBool", args, 2);
            }

            static PyObject *t_DoubleConstValueSource_getDouble(t_DoubleConstValueSource *self, PyObject *args)
            {
              jdouble result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getDouble());
                return PyFloat_FromDouble((double) result);
              }

              return callSuper(&PY_TYPE(DoubleConstValueSource), (PyObject *) self, "getDouble", args, 2);
            }

            static PyObject *t_DoubleConstValueSource_getFloat(t_DoubleConstValueSource *self, PyObject *args)
            {
              jfloat result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getFloat());
                return PyFloat_FromDouble((double) result);
              }

              return callSuper(&PY_TYPE(DoubleConstValueSource), (PyObject *) self, "getFloat", args, 2);
            }

            static PyObject *t_DoubleConstValueSource_getInt(t_DoubleConstValueSource *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getInt());
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(DoubleConstValueSource), (PyObject *) self, "getInt", args, 2);
            }

            static PyObject *t_DoubleConstValueSource_getLong(t_DoubleConstValueSource *self, PyObject *args)
            {
              jlong result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getLong());
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }

              return callSuper(&PY_TYPE(DoubleConstValueSource), (PyObject *) self, "getLong", args, 2);
            }

            static PyObject *t_DoubleConstValueSource_getNumber(t_DoubleConstValueSource *self, PyObject *args)
            {
              ::java::lang::Number result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getNumber());
                return ::java::lang::t_Number::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(DoubleConstValueSource), (PyObject *) self, "getNumber", args, 2);
            }

            static PyObject *t_DoubleConstValueSource_getValues(t_DoubleConstValueSource *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::FunctionValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::t_FunctionValues::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(DoubleConstValueSource), (PyObject *) self, "getValues", args, 2);
            }

            static PyObject *t_DoubleConstValueSource_hashCode(t_DoubleConstValueSource *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(DoubleConstValueSource), (PyObject *) self, "hashCode", args, 2);
            }

            static PyObject *t_DoubleConstValueSource_get__bool(t_DoubleConstValueSource *self, void *data)
            {
              jboolean value;
              OBJ_CALL(value = self->object.getBool());
              Py_RETURN_BOOL(value);
            }

            static PyObject *t_DoubleConstValueSource_get__double(t_DoubleConstValueSource *self, void *data)
            {
              jdouble value;
              OBJ_CALL(value = self->object.getDouble());
              return PyFloat_FromDouble((double) value);
            }

            static PyObject *t_DoubleConstValueSource_get__float(t_DoubleConstValueSource *self, void *data)
            {
              jfloat value;
              OBJ_CALL(value = self->object.getFloat());
              return PyFloat_FromDouble((double) value);
            }

            static PyObject *t_DoubleConstValueSource_get__int(t_DoubleConstValueSource *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getInt());
              return PyInt_FromLong((long) value);
            }

            static PyObject *t_DoubleConstValueSource_get__long(t_DoubleConstValueSource *self, void *data)
            {
              jlong value;
              OBJ_CALL(value = self->object.getLong());
              return PyLong_FromLongLong((PY_LONG_LONG) value);
            }

            static PyObject *t_DoubleConstValueSource_get__number(t_DoubleConstValueSource *self, void *data)
            {
              ::java::lang::Number value((jobject) NULL);
              OBJ_CALL(value = self->object.getNumber());
              return ::java::lang::t_Number::wrap_Object(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/payloads/DelimitedPayloadTokenFilterFactory.h"
#include "org/apache/lucene/analysis/payloads/DelimitedPayloadTokenFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/util/ResourceLoader.h"
#include "org/apache/lucene/analysis/util/ResourceLoaderAware.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace payloads {

          ::java::lang::Class *DelimitedPayloadTokenFilterFactory::class$ = NULL;
          jmethodID *DelimitedPayloadTokenFilterFactory::mids$ = NULL;
          bool DelimitedPayloadTokenFilterFactory::live$ = false;
          ::java::lang::String *DelimitedPayloadTokenFilterFactory::DELIMITER_ATTR = NULL;
          ::java::lang::String *DelimitedPayloadTokenFilterFactory::ENCODER_ATTR = NULL;

          jclass DelimitedPayloadTokenFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/payloads/DelimitedPayloadTokenFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_ca2c8453] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/payloads/DelimitedPayloadTokenFilter;");
              mids$[mid_inform_d6a4bc97] = env->getMethodID(cls, "inform", "(Lorg/apache/lucene/analysis/util/ResourceLoader;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DELIMITER_ATTR = new ::java::lang::String(env->getStaticObjectField(cls, "DELIMITER_ATTR", "Ljava/lang/String;"));
              ENCODER_ATTR = new ::java::lang::String(env->getStaticObjectField(cls, "ENCODER_ATTR", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          DelimitedPayloadTokenFilterFactory::DelimitedPayloadTokenFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::payloads::DelimitedPayloadTokenFilter DelimitedPayloadTokenFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::payloads::DelimitedPayloadTokenFilter(env->callObjectMethod(this$, mids$[mid_create_ca2c8453], a0.this$));
          }

          void DelimitedPayloadTokenFilterFactory::inform(const ::org::apache::lucene::analysis::util::ResourceLoader & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_inform_d6a4bc97], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace payloads {
          static PyObject *t_DelimitedPayloadTokenFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DelimitedPayloadTokenFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_DelimitedPayloadTokenFilterFactory_init_(t_DelimitedPayloadTokenFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_DelimitedPayloadTokenFilterFactory_create(t_DelimitedPayloadTokenFilterFactory *self, PyObject *args);
          static PyObject *t_DelimitedPayloadTokenFilterFactory_inform(t_DelimitedPayloadTokenFilterFactory *self, PyObject *arg);

          static PyMethodDef t_DelimitedPayloadTokenFilterFactory__methods_[] = {
            DECLARE_METHOD(t_DelimitedPayloadTokenFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DelimitedPayloadTokenFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DelimitedPayloadTokenFilterFactory, create, METH_VARARGS),
            DECLARE_METHOD(t_DelimitedPayloadTokenFilterFactory, inform, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(DelimitedPayloadTokenFilterFactory, t_DelimitedPayloadTokenFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, DelimitedPayloadTokenFilterFactory, t_DelimitedPayloadTokenFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_DelimitedPayloadTokenFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(DelimitedPayloadTokenFilterFactory), module, "DelimitedPayloadTokenFilterFactory", 0);
          }

          void t_DelimitedPayloadTokenFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(DelimitedPayloadTokenFilterFactory).tp_dict, "class_", make_descriptor(DelimitedPayloadTokenFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(DelimitedPayloadTokenFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_DelimitedPayloadTokenFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(DelimitedPayloadTokenFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(DelimitedPayloadTokenFilterFactory::initializeClass);
            PyDict_SetItemString(PY_TYPE(DelimitedPayloadTokenFilterFactory).tp_dict, "DELIMITER_ATTR", make_descriptor(j2p(*DelimitedPayloadTokenFilterFactory::DELIMITER_ATTR)));
            PyDict_SetItemString(PY_TYPE(DelimitedPayloadTokenFilterFactory).tp_dict, "ENCODER_ATTR", make_descriptor(j2p(*DelimitedPayloadTokenFilterFactory::ENCODER_ATTR)));
          }

          static PyObject *t_DelimitedPayloadTokenFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, DelimitedPayloadTokenFilterFactory::initializeClass, 1)))
              return NULL;
            return t_DelimitedPayloadTokenFilterFactory::wrap_Object(DelimitedPayloadTokenFilterFactory(((t_DelimitedPayloadTokenFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_DelimitedPayloadTokenFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, DelimitedPayloadTokenFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_DelimitedPayloadTokenFilterFactory_init_(t_DelimitedPayloadTokenFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            DelimitedPayloadTokenFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = DelimitedPayloadTokenFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_DelimitedPayloadTokenFilterFactory_create(t_DelimitedPayloadTokenFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::payloads::DelimitedPayloadTokenFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::payloads::t_DelimitedPayloadTokenFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(DelimitedPayloadTokenFilterFactory), (PyObject *) self, "create", args, 2);
          }

          static PyObject *t_DelimitedPayloadTokenFilterFactory_inform(t_DelimitedPayloadTokenFilterFactory *self, PyObject *arg)
          {
            ::org::apache::lucene::analysis::util::ResourceLoader a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::analysis::util::ResourceLoader::initializeClass, &a0))
            {
              OBJ_CALL(self->object.inform(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "inform", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/DocValuesProducer.h"
#include "java/io/Closeable.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/BinaryDocValues.h"
#include "org/apache/lucene/util/Accountable.h"
#include "org/apache/lucene/index/FieldInfo.h"
#include "org/apache/lucene/util/Bits.h"
#include "org/apache/lucene/index/NumericDocValues.h"
#include "org/apache/lucene/index/SortedNumericDocValues.h"
#include "org/apache/lucene/index/SortedDocValues.h"
#include "org/apache/lucene/index/SortedSetDocValues.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {

        ::java::lang::Class *DocValuesProducer::class$ = NULL;
        jmethodID *DocValuesProducer::mids$ = NULL;
        bool DocValuesProducer::live$ = false;

        jclass DocValuesProducer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/DocValuesProducer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_checkIntegrity_54c6a166] = env->getMethodID(cls, "checkIntegrity", "()V");
            mids$[mid_getBinary_97c169be] = env->getMethodID(cls, "getBinary", "(Lorg/apache/lucene/index/FieldInfo;)Lorg/apache/lucene/index/BinaryDocValues;");
            mids$[mid_getDocsWithField_e4c7eda7] = env->getMethodID(cls, "getDocsWithField", "(Lorg/apache/lucene/index/FieldInfo;)Lorg/apache/lucene/util/Bits;");
            mids$[mid_getNumeric_9eab6241] = env->getMethodID(cls, "getNumeric", "(Lorg/apache/lucene/index/FieldInfo;)Lorg/apache/lucene/index/NumericDocValues;");
            mids$[mid_getSorted_984b8536] = env->getMethodID(cls, "getSorted", "(Lorg/apache/lucene/index/FieldInfo;)Lorg/apache/lucene/index/SortedDocValues;");
            mids$[mid_getSortedNumeric_ccea608a] = env->getMethodID(cls, "getSortedNumeric", "(Lorg/apache/lucene/index/FieldInfo;)Lorg/apache/lucene/index/SortedNumericDocValues;");
            mids$[mid_getSortedSet_05eaac8f] = env->getMethodID(cls, "getSortedSet", "(Lorg/apache/lucene/index/FieldInfo;)Lorg/apache/lucene/index/SortedSetDocValues;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void DocValuesProducer::checkIntegrity() const
        {
          env->callVoidMethod(this$, mids$[mid_checkIntegrity_54c6a166]);
        }

        ::org::apache::lucene::index::BinaryDocValues DocValuesProducer::getBinary(const ::org::apache::lucene::index::FieldInfo & a0) const
        {
          return ::org::apache::lucene::index::BinaryDocValues(env->callObjectMethod(this$, mids$[mid_getBinary_97c169be], a0.this$));
        }

        ::org::apache::lucene::util::Bits DocValuesProducer::getDocsWithField(const ::org::apache::lucene::index::FieldInfo & a0) const
        {
          return ::org::apache::lucene::util::Bits(env->callObjectMethod(this$, mids$[mid_getDocsWithField_e4c7eda7], a0.this$));
        }

        ::org::apache::lucene::index::NumericDocValues DocValuesProducer::getNumeric(const ::org::apache::lucene::index::FieldInfo & a0) const
        {
          return ::org::apache::lucene::index::NumericDocValues(env->callObjectMethod(this$, mids$[mid_getNumeric_9eab6241], a0.this$));
        }

        ::org::apache::lucene::index::SortedDocValues DocValuesProducer::getSorted(const ::org::apache::lucene::index::FieldInfo & a0) const
        {
          return ::org::apache::lucene::index::SortedDocValues(env->callObjectMethod(this$, mids$[mid_getSorted_984b8536], a0.this$));
        }

        ::org::apache::lucene::index::SortedNumericDocValues DocValuesProducer::getSortedNumeric(const ::org::apache::lucene::index::FieldInfo & a0) const
        {
          return ::org::apache::lucene::index::SortedNumericDocValues(env->callObjectMethod(this$, mids$[mid_getSortedNumeric_ccea608a], a0.this$));
        }

        ::org::apache::lucene::index::SortedSetDocValues DocValuesProducer::getSortedSet(const ::org::apache::lucene::index::FieldInfo & a0) const
        {
          return ::org::apache::lucene::index::SortedSetDocValues(env->callObjectMethod(this$, mids$[mid_getSortedSet_05eaac8f], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        static PyObject *t_DocValuesProducer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DocValuesProducer_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DocValuesProducer_checkIntegrity(t_DocValuesProducer *self);
        static PyObject *t_DocValuesProducer_getBinary(t_DocValuesProducer *self, PyObject *arg);
        static PyObject *t_DocValuesProducer_getDocsWithField(t_DocValuesProducer *self, PyObject *arg);
        static PyObject *t_DocValuesProducer_getNumeric(t_DocValuesProducer *self, PyObject *arg);
        static PyObject *t_DocValuesProducer_getSorted(t_DocValuesProducer *self, PyObject *arg);
        static PyObject *t_DocValuesProducer_getSortedNumeric(t_DocValuesProducer *self, PyObject *arg);
        static PyObject *t_DocValuesProducer_getSortedSet(t_DocValuesProducer *self, PyObject *arg);

        static PyMethodDef t_DocValuesProducer__methods_[] = {
          DECLARE_METHOD(t_DocValuesProducer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DocValuesProducer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DocValuesProducer, checkIntegrity, METH_NOARGS),
          DECLARE_METHOD(t_DocValuesProducer, getBinary, METH_O),
          DECLARE_METHOD(t_DocValuesProducer, getDocsWithField, METH_O),
          DECLARE_METHOD(t_DocValuesProducer, getNumeric, METH_O),
          DECLARE_METHOD(t_DocValuesProducer, getSorted, METH_O),
          DECLARE_METHOD(t_DocValuesProducer, getSortedNumeric, METH_O),
          DECLARE_METHOD(t_DocValuesProducer, getSortedSet, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(DocValuesProducer, t_DocValuesProducer, ::java::lang::Object, DocValuesProducer, abstract_init, 0, 0, 0, 0, 0);

        void t_DocValuesProducer::install(PyObject *module)
        {
          installType(&PY_TYPE(DocValuesProducer), module, "DocValuesProducer", 0);
        }

        void t_DocValuesProducer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(DocValuesProducer).tp_dict, "class_", make_descriptor(DocValuesProducer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(DocValuesProducer).tp_dict, "wrapfn_", make_descriptor(t_DocValuesProducer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(DocValuesProducer).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_DocValuesProducer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, DocValuesProducer::initializeClass, 1)))
            return NULL;
          return t_DocValuesProducer::wrap_Object(DocValuesProducer(((t_DocValuesProducer *) arg)->object.this$));
        }
        static PyObject *t_DocValuesProducer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, DocValuesProducer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_DocValuesProducer_checkIntegrity(t_DocValuesProducer *self)
        {
          OBJ_CALL(self->object.checkIntegrity());
          Py_RETURN_NONE;
        }

        static PyObject *t_DocValuesProducer_getBinary(t_DocValuesProducer *self, PyObject *arg)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          ::org::apache::lucene::index::BinaryDocValues result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::FieldInfo::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.getBinary(a0));
            return ::org::apache::lucene::index::t_BinaryDocValues::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getBinary", arg);
          return NULL;
        }

        static PyObject *t_DocValuesProducer_getDocsWithField(t_DocValuesProducer *self, PyObject *arg)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          ::org::apache::lucene::util::Bits result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::FieldInfo::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.getDocsWithField(a0));
            return ::org::apache::lucene::util::t_Bits::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getDocsWithField", arg);
          return NULL;
        }

        static PyObject *t_DocValuesProducer_getNumeric(t_DocValuesProducer *self, PyObject *arg)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          ::org::apache::lucene::index::NumericDocValues result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::FieldInfo::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.getNumeric(a0));
            return ::org::apache::lucene::index::t_NumericDocValues::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getNumeric", arg);
          return NULL;
        }

        static PyObject *t_DocValuesProducer_getSorted(t_DocValuesProducer *self, PyObject *arg)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          ::org::apache::lucene::index::SortedDocValues result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::FieldInfo::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.getSorted(a0));
            return ::org::apache::lucene::index::t_SortedDocValues::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getSorted", arg);
          return NULL;
        }

        static PyObject *t_DocValuesProducer_getSortedNumeric(t_DocValuesProducer *self, PyObject *arg)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          ::org::apache::lucene::index::SortedNumericDocValues result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::FieldInfo::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.getSortedNumeric(a0));
            return ::org::apache::lucene::index::t_SortedNumericDocValues::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getSortedNumeric", arg);
          return NULL;
        }

        static PyObject *t_DocValuesProducer_getSortedSet(t_DocValuesProducer *self, PyObject *arg)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          ::org::apache::lucene::index::SortedSetDocValues result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::FieldInfo::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.getSortedSet(a0));
            return ::org::apache::lucene::index::t_SortedSetDocValues::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getSortedSet", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/BasicStats.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *BasicStats::class$ = NULL;
          jmethodID *BasicStats::mids$ = NULL;
          bool BasicStats::live$ = false;

          jclass BasicStats::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/BasicStats");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f0649ce1] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;F)V");
              mids$[mid_getAvgFieldLength_54c6a176] = env->getMethodID(cls, "getAvgFieldLength", "()F");
              mids$[mid_getDocFreq_54c6a17a] = env->getMethodID(cls, "getDocFreq", "()J");
              mids$[mid_getNumberOfDocuments_54c6a17a] = env->getMethodID(cls, "getNumberOfDocuments", "()J");
              mids$[mid_getNumberOfFieldTokens_54c6a17a] = env->getMethodID(cls, "getNumberOfFieldTokens", "()J");
              mids$[mid_getTotalBoost_54c6a176] = env->getMethodID(cls, "getTotalBoost", "()F");
              mids$[mid_getTotalTermFreq_54c6a17a] = env->getMethodID(cls, "getTotalTermFreq", "()J");
              mids$[mid_getValueForNormalization_54c6a176] = env->getMethodID(cls, "getValueForNormalization", "()F");
              mids$[mid_normalize_f1b0c004] = env->getMethodID(cls, "normalize", "(FF)V");
              mids$[mid_setAvgFieldLength_06298cab] = env->getMethodID(cls, "setAvgFieldLength", "(F)V");
              mids$[mid_setDocFreq_0ee6df2f] = env->getMethodID(cls, "setDocFreq", "(J)V");
              mids$[mid_setNumberOfDocuments_0ee6df2f] = env->getMethodID(cls, "setNumberOfDocuments", "(J)V");
              mids$[mid_setNumberOfFieldTokens_0ee6df2f] = env->getMethodID(cls, "setNumberOfFieldTokens", "(J)V");
              mids$[mid_setTotalTermFreq_0ee6df2f] = env->getMethodID(cls, "setTotalTermFreq", "(J)V");
              mids$[mid_rawNormalizationValue_54c6a176] = env->getMethodID(cls, "rawNormalizationValue", "()F");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BasicStats::BasicStats(const ::java::lang::String & a0, jfloat a1) : ::org::apache::lucene::search::similarities::Similarity$SimWeight(env->newObject(initializeClass, &mids$, mid_init$_f0649ce1, a0.this$, a1)) {}

          jfloat BasicStats::getAvgFieldLength() const
          {
            return env->callFloatMethod(this$, mids$[mid_getAvgFieldLength_54c6a176]);
          }

          jlong BasicStats::getDocFreq() const
          {
            return env->callLongMethod(this$, mids$[mid_getDocFreq_54c6a17a]);
          }

          jlong BasicStats::getNumberOfDocuments() const
          {
            return env->callLongMethod(this$, mids$[mid_getNumberOfDocuments_54c6a17a]);
          }

          jlong BasicStats::getNumberOfFieldTokens() const
          {
            return env->callLongMethod(this$, mids$[mid_getNumberOfFieldTokens_54c6a17a]);
          }

          jfloat BasicStats::getTotalBoost() const
          {
            return env->callFloatMethod(this$, mids$[mid_getTotalBoost_54c6a176]);
          }

          jlong BasicStats::getTotalTermFreq() const
          {
            return env->callLongMethod(this$, mids$[mid_getTotalTermFreq_54c6a17a]);
          }

          jfloat BasicStats::getValueForNormalization() const
          {
            return env->callFloatMethod(this$, mids$[mid_getValueForNormalization_54c6a176]);
          }

          void BasicStats::normalize(jfloat a0, jfloat a1) const
          {
            env->callVoidMethod(this$, mids$[mid_normalize_f1b0c004], a0, a1);
          }

          void BasicStats::setAvgFieldLength(jfloat a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setAvgFieldLength_06298cab], a0);
          }

          void BasicStats::setDocFreq(jlong a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setDocFreq_0ee6df2f], a0);
          }

          void BasicStats::setNumberOfDocuments(jlong a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setNumberOfDocuments_0ee6df2f], a0);
          }

          void BasicStats::setNumberOfFieldTokens(jlong a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setNumberOfFieldTokens_0ee6df2f], a0);
          }

          void BasicStats::setTotalTermFreq(jlong a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setTotalTermFreq_0ee6df2f], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_BasicStats_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BasicStats_instance_(PyTypeObject *type, PyObject *arg);
          static int t_BasicStats_init_(t_BasicStats *self, PyObject *args, PyObject *kwds);
          static PyObject *t_BasicStats_getAvgFieldLength(t_BasicStats *self);
          static PyObject *t_BasicStats_getDocFreq(t_BasicStats *self);
          static PyObject *t_BasicStats_getNumberOfDocuments(t_BasicStats *self);
          static PyObject *t_BasicStats_getNumberOfFieldTokens(t_BasicStats *self);
          static PyObject *t_BasicStats_getTotalBoost(t_BasicStats *self);
          static PyObject *t_BasicStats_getTotalTermFreq(t_BasicStats *self);
          static PyObject *t_BasicStats_getValueForNormalization(t_BasicStats *self, PyObject *args);
          static PyObject *t_BasicStats_normalize(t_BasicStats *self, PyObject *args);
          static PyObject *t_BasicStats_setAvgFieldLength(t_BasicStats *self, PyObject *arg);
          static PyObject *t_BasicStats_setDocFreq(t_BasicStats *self, PyObject *arg);
          static PyObject *t_BasicStats_setNumberOfDocuments(t_BasicStats *self, PyObject *arg);
          static PyObject *t_BasicStats_setNumberOfFieldTokens(t_BasicStats *self, PyObject *arg);
          static PyObject *t_BasicStats_setTotalTermFreq(t_BasicStats *self, PyObject *arg);
          static PyObject *t_BasicStats_get__avgFieldLength(t_BasicStats *self, void *data);
          static int t_BasicStats_set__avgFieldLength(t_BasicStats *self, PyObject *arg, void *data);
          static PyObject *t_BasicStats_get__docFreq(t_BasicStats *self, void *data);
          static int t_BasicStats_set__docFreq(t_BasicStats *self, PyObject *arg, void *data);
          static PyObject *t_BasicStats_get__numberOfDocuments(t_BasicStats *self, void *data);
          static int t_BasicStats_set__numberOfDocuments(t_BasicStats *self, PyObject *arg, void *data);
          static PyObject *t_BasicStats_get__numberOfFieldTokens(t_BasicStats *self, void *data);
          static int t_BasicStats_set__numberOfFieldTokens(t_BasicStats *self, PyObject *arg, void *data);
          static PyObject *t_BasicStats_get__totalBoost(t_BasicStats *self, void *data);
          static PyObject *t_BasicStats_get__totalTermFreq(t_BasicStats *self, void *data);
          static int t_BasicStats_set__totalTermFreq(t_BasicStats *self, PyObject *arg, void *data);
          static PyObject *t_BasicStats_get__valueForNormalization(t_BasicStats *self, void *data);
          static PyGetSetDef t_BasicStats__fields_[] = {
            DECLARE_GETSET_FIELD(t_BasicStats, avgFieldLength),
            DECLARE_GETSET_FIELD(t_BasicStats, docFreq),
            DECLARE_GETSET_FIELD(t_BasicStats, numberOfDocuments),
            DECLARE_GETSET_FIELD(t_BasicStats, numberOfFieldTokens),
            DECLARE_GET_FIELD(t_BasicStats, totalBoost),
            DECLARE_GETSET_FIELD(t_BasicStats, totalTermFreq),
            DECLARE_GET_FIELD(t_BasicStats, valueForNormalization),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_BasicStats__methods_[] = {
            DECLARE_METHOD(t_BasicStats, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BasicStats, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BasicStats, getAvgFieldLength, METH_NOARGS),
            DECLARE_METHOD(t_BasicStats, getDocFreq, METH_NOARGS),
            DECLARE_METHOD(t_BasicStats, getNumberOfDocuments, METH_NOARGS),
            DECLARE_METHOD(t_BasicStats, getNumberOfFieldTokens, METH_NOARGS),
            DECLARE_METHOD(t_BasicStats, getTotalBoost, METH_NOARGS),
            DECLARE_METHOD(t_BasicStats, getTotalTermFreq, METH_NOARGS),
            DECLARE_METHOD(t_BasicStats, getValueForNormalization, METH_VARARGS),
            DECLARE_METHOD(t_BasicStats, normalize, METH_VARARGS),
            DECLARE_METHOD(t_BasicStats, setAvgFieldLength, METH_O),
            DECLARE_METHOD(t_BasicStats, setDocFreq, METH_O),
            DECLARE_METHOD(t_BasicStats, setNumberOfDocuments, METH_O),
            DECLARE_METHOD(t_BasicStats, setNumberOfFieldTokens, METH_O),
            DECLARE_METHOD(t_BasicStats, setTotalTermFreq, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(BasicStats, t_BasicStats, ::org::apache::lucene::search::similarities::Similarity$SimWeight, BasicStats, t_BasicStats_init_, 0, 0, t_BasicStats__fields_, 0, 0);

          void t_BasicStats::install(PyObject *module)
          {
            installType(&PY_TYPE(BasicStats), module, "BasicStats", 0);
          }

          void t_BasicStats::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(BasicStats).tp_dict, "class_", make_descriptor(BasicStats::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(BasicStats).tp_dict, "wrapfn_", make_descriptor(t_BasicStats::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(BasicStats).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_BasicStats_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BasicStats::initializeClass, 1)))
              return NULL;
            return t_BasicStats::wrap_Object(BasicStats(((t_BasicStats *) arg)->object.this$));
          }
          static PyObject *t_BasicStats_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BasicStats::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_BasicStats_init_(t_BasicStats *self, PyObject *args, PyObject *kwds)
          {
            ::java::lang::String a0((jobject) NULL);
            jfloat a1;
            BasicStats object((jobject) NULL);

            if (!parseArgs(args, "sF", &a0, &a1))
            {
              INT_CALL(object = BasicStats(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_BasicStats_getAvgFieldLength(t_BasicStats *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getAvgFieldLength());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_BasicStats_getDocFreq(t_BasicStats *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.getDocFreq());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_BasicStats_getNumberOfDocuments(t_BasicStats *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.getNumberOfDocuments());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_BasicStats_getNumberOfFieldTokens(t_BasicStats *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.getNumberOfFieldTokens());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_BasicStats_getTotalBoost(t_BasicStats *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getTotalBoost());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_BasicStats_getTotalTermFreq(t_BasicStats *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.getTotalTermFreq());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_BasicStats_getValueForNormalization(t_BasicStats *self, PyObject *args)
          {
            jfloat result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getValueForNormalization());
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(BasicStats), (PyObject *) self, "getValueForNormalization", args, 2);
          }

          static PyObject *t_BasicStats_normalize(t_BasicStats *self, PyObject *args)
          {
            jfloat a0;
            jfloat a1;

            if (!parseArgs(args, "FF", &a0, &a1))
            {
              OBJ_CALL(self->object.normalize(a0, a1));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(BasicStats), (PyObject *) self, "normalize", args, 2);
          }

          static PyObject *t_BasicStats_setAvgFieldLength(t_BasicStats *self, PyObject *arg)
          {
            jfloat a0;

            if (!parseArg(arg, "F", &a0))
            {
              OBJ_CALL(self->object.setAvgFieldLength(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setAvgFieldLength", arg);
            return NULL;
          }

          static PyObject *t_BasicStats_setDocFreq(t_BasicStats *self, PyObject *arg)
          {
            jlong a0;

            if (!parseArg(arg, "J", &a0))
            {
              OBJ_CALL(self->object.setDocFreq(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setDocFreq", arg);
            return NULL;
          }

          static PyObject *t_BasicStats_setNumberOfDocuments(t_BasicStats *self, PyObject *arg)
          {
            jlong a0;

            if (!parseArg(arg, "J", &a0))
            {
              OBJ_CALL(self->object.setNumberOfDocuments(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setNumberOfDocuments", arg);
            return NULL;
          }

          static PyObject *t_BasicStats_setNumberOfFieldTokens(t_BasicStats *self, PyObject *arg)
          {
            jlong a0;

            if (!parseArg(arg, "J", &a0))
            {
              OBJ_CALL(self->object.setNumberOfFieldTokens(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setNumberOfFieldTokens", arg);
            return NULL;
          }

          static PyObject *t_BasicStats_setTotalTermFreq(t_BasicStats *self, PyObject *arg)
          {
            jlong a0;

            if (!parseArg(arg, "J", &a0))
            {
              OBJ_CALL(self->object.setTotalTermFreq(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setTotalTermFreq", arg);
            return NULL;
          }

          static PyObject *t_BasicStats_get__avgFieldLength(t_BasicStats *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getAvgFieldLength());
            return PyFloat_FromDouble((double) value);
          }
          static int t_BasicStats_set__avgFieldLength(t_BasicStats *self, PyObject *arg, void *data)
          {
            {
              jfloat value;
              if (!parseArg(arg, "F", &value))
              {
                INT_CALL(self->object.setAvgFieldLength(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "avgFieldLength", arg);
            return -1;
          }

          static PyObject *t_BasicStats_get__docFreq(t_BasicStats *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object.getDocFreq());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }
          static int t_BasicStats_set__docFreq(t_BasicStats *self, PyObject *arg, void *data)
          {
            {
              jlong value;
              if (!parseArg(arg, "J", &value))
              {
                INT_CALL(self->object.setDocFreq(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "docFreq", arg);
            return -1;
          }

          static PyObject *t_BasicStats_get__numberOfDocuments(t_BasicStats *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object.getNumberOfDocuments());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }
          static int t_BasicStats_set__numberOfDocuments(t_BasicStats *self, PyObject *arg, void *data)
          {
            {
              jlong value;
              if (!parseArg(arg, "J", &value))
              {
                INT_CALL(self->object.setNumberOfDocuments(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "numberOfDocuments", arg);
            return -1;
          }

          static PyObject *t_BasicStats_get__numberOfFieldTokens(t_BasicStats *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object.getNumberOfFieldTokens());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }
          static int t_BasicStats_set__numberOfFieldTokens(t_BasicStats *self, PyObject *arg, void *data)
          {
            {
              jlong value;
              if (!parseArg(arg, "J", &value))
              {
                INT_CALL(self->object.setNumberOfFieldTokens(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "numberOfFieldTokens", arg);
            return -1;
          }

          static PyObject *t_BasicStats_get__totalBoost(t_BasicStats *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getTotalBoost());
            return PyFloat_FromDouble((double) value);
          }

          static PyObject *t_BasicStats_get__totalTermFreq(t_BasicStats *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object.getTotalTermFreq());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }
          static int t_BasicStats_set__totalTermFreq(t_BasicStats *self, PyObject *arg, void *data)
          {
            {
              jlong value;
              if (!parseArg(arg, "J", &value))
              {
                INT_CALL(self->object.setTotalTermFreq(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "totalTermFreq", arg);
            return -1;
          }

          static PyObject *t_BasicStats_get__valueForNormalization(t_BasicStats *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getValueForNormalization());
            return PyFloat_FromDouble((double) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/sandbox/queries/SlowCollatedTermRangeTermsEnum.h"
#include "java/text/Collator.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/TermsEnum.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace sandbox {
        namespace queries {

          ::java::lang::Class *SlowCollatedTermRangeTermsEnum::class$ = NULL;
          jmethodID *SlowCollatedTermRangeTermsEnum::mids$ = NULL;
          bool SlowCollatedTermRangeTermsEnum::live$ = false;

          jclass SlowCollatedTermRangeTermsEnum::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/sandbox/queries/SlowCollatedTermRangeTermsEnum");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_b77b0cda] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/TermsEnum;Ljava/lang/String;Ljava/lang/String;ZZLjava/text/Collator;)V");
              mids$[mid_accept_30bc08e1] = env->getMethodID(cls, "accept", "(Lorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/index/FilteredTermsEnum$AcceptStatus;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SlowCollatedTermRangeTermsEnum::SlowCollatedTermRangeTermsEnum(const ::org::apache::lucene::index::TermsEnum & a0, const ::java::lang::String & a1, const ::java::lang::String & a2, jboolean a3, jboolean a4, const ::java::text::Collator & a5) : ::org::apache::lucene::index::FilteredTermsEnum(env->newObject(initializeClass, &mids$, mid_init$_b77b0cda, a0.this$, a1.this$, a2.this$, a3, a4, a5.this$)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace sandbox {
        namespace queries {
          static PyObject *t_SlowCollatedTermRangeTermsEnum_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SlowCollatedTermRangeTermsEnum_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SlowCollatedTermRangeTermsEnum_init_(t_SlowCollatedTermRangeTermsEnum *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_SlowCollatedTermRangeTermsEnum__methods_[] = {
            DECLARE_METHOD(t_SlowCollatedTermRangeTermsEnum, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SlowCollatedTermRangeTermsEnum, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SlowCollatedTermRangeTermsEnum, t_SlowCollatedTermRangeTermsEnum, ::org::apache::lucene::index::FilteredTermsEnum, SlowCollatedTermRangeTermsEnum, t_SlowCollatedTermRangeTermsEnum_init_, 0, 0, 0, 0, 0);

          void t_SlowCollatedTermRangeTermsEnum::install(PyObject *module)
          {
            installType(&PY_TYPE(SlowCollatedTermRangeTermsEnum), module, "SlowCollatedTermRangeTermsEnum", 0);
          }

          void t_SlowCollatedTermRangeTermsEnum::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SlowCollatedTermRangeTermsEnum).tp_dict, "class_", make_descriptor(SlowCollatedTermRangeTermsEnum::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SlowCollatedTermRangeTermsEnum).tp_dict, "wrapfn_", make_descriptor(t_SlowCollatedTermRangeTermsEnum::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SlowCollatedTermRangeTermsEnum).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SlowCollatedTermRangeTermsEnum_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SlowCollatedTermRangeTermsEnum::initializeClass, 1)))
              return NULL;
            return t_SlowCollatedTermRangeTermsEnum::wrap_Object(SlowCollatedTermRangeTermsEnum(((t_SlowCollatedTermRangeTermsEnum *) arg)->object.this$));
          }
          static PyObject *t_SlowCollatedTermRangeTermsEnum_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SlowCollatedTermRangeTermsEnum::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SlowCollatedTermRangeTermsEnum_init_(t_SlowCollatedTermRangeTermsEnum *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::index::TermsEnum a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            ::java::lang::String a2((jobject) NULL);
            jboolean a3;
            jboolean a4;
            ::java::text::Collator a5((jobject) NULL);
            SlowCollatedTermRangeTermsEnum object((jobject) NULL);

            if (!parseArgs(args, "kssZZk", ::org::apache::lucene::index::TermsEnum::initializeClass, ::java::text::Collator::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5))
            {
              INT_CALL(object = SlowCollatedTermRangeTermsEnum(a0, a1, a2, a3, a4, a5));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParser.h"
#include "org/apache/lucene/queryparser/flexible/standard/parser/ParseException.h"
#include "org/apache/lucene/queryparser/flexible/core/parser/SyntaxParser.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/ModifierQueryNode$Modifier.h"
#include "org/apache/lucene/queryparser/flexible/standard/parser/Token.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParserConstants.h"
#include "java/lang/CharSequence.h"
#include "org/apache/lucene/queryparser/flexible/standard/parser/CharStream.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeParseException.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "org/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParserTokenManager.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace parser {

              ::java::lang::Class *StandardSyntaxParser::class$ = NULL;
              jmethodID *StandardSyntaxParser::mids$ = NULL;
              jfieldID *StandardSyntaxParser::fids$ = NULL;
              bool StandardSyntaxParser::live$ = false;

              jclass StandardSyntaxParser::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParser");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_init$_8af5fa89] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/flexible/standard/parser/CharStream;)V");
                  mids$[mid_init$_491f91b2] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParserTokenManager;)V");
                  mids$[mid_Clause_9709215a] = env->getMethodID(cls, "Clause", "(Ljava/lang/CharSequence;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_ConjQuery_9709215a] = env->getMethodID(cls, "ConjQuery", "(Ljava/lang/CharSequence;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_Conjunction_54c6a179] = env->getMethodID(cls, "Conjunction", "()I");
                  mids$[mid_DisjQuery_9709215a] = env->getMethodID(cls, "DisjQuery", "(Ljava/lang/CharSequence;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_ModClause_9709215a] = env->getMethodID(cls, "ModClause", "(Ljava/lang/CharSequence;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_Modifiers_511690a9] = env->getMethodID(cls, "Modifiers", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/ModifierQueryNode$Modifier;");
                  mids$[mid_Query_9709215a] = env->getMethodID(cls, "Query", "(Ljava/lang/CharSequence;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_ReInit_491f91b2] = env->getMethodID(cls, "ReInit", "(Lorg/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParserTokenManager;)V");
                  mids$[mid_ReInit_8af5fa89] = env->getMethodID(cls, "ReInit", "(Lorg/apache/lucene/queryparser/flexible/standard/parser/CharStream;)V");
                  mids$[mid_Term_9709215a] = env->getMethodID(cls, "Term", "(Ljava/lang/CharSequence;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_TopLevelQuery_9709215a] = env->getMethodID(cls, "TopLevelQuery", "(Ljava/lang/CharSequence;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_disable_tracing_54c6a166] = env->getMethodID(cls, "disable_tracing", "()V");
                  mids$[mid_enable_tracing_54c6a166] = env->getMethodID(cls, "enable_tracing", "()V");
                  mids$[mid_generateParseException_4481d278] = env->getMethodID(cls, "generateParseException", "()Lorg/apache/lucene/queryparser/flexible/standard/parser/ParseException;");
                  mids$[mid_getNextToken_5eb4cff8] = env->getMethodID(cls, "getNextToken", "()Lorg/apache/lucene/queryparser/flexible/standard/parser/Token;");
                  mids$[mid_getToken_24cc8f6e] = env->getMethodID(cls, "getToken", "(I)Lorg/apache/lucene/queryparser/flexible/standard/parser/Token;");
                  mids$[mid_parse_051054be] = env->getMethodID(cls, "parse", "(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");

                  fids$ = new jfieldID[max_fid];
                  fids$[fid_jj_nt] = env->getFieldID(cls, "jj_nt", "Lorg/apache/lucene/queryparser/flexible/standard/parser/Token;");
                  fids$[fid_token] = env->getFieldID(cls, "token", "Lorg/apache/lucene/queryparser/flexible/standard/parser/Token;");
                  fids$[fid_token_source] = env->getFieldID(cls, "token_source", "Lorg/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParserTokenManager;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              StandardSyntaxParser::StandardSyntaxParser() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              StandardSyntaxParser::StandardSyntaxParser(const ::org::apache::lucene::queryparser::flexible::standard::parser::CharStream & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_8af5fa89, a0.this$)) {}

              StandardSyntaxParser::StandardSyntaxParser(const ::org::apache::lucene::queryparser::flexible::standard::parser::StandardSyntaxParserTokenManager & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_491f91b2, a0.this$)) {}

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode StandardSyntaxParser::Clause(const ::java::lang::CharSequence & a0) const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_Clause_9709215a], a0.this$));
              }

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode StandardSyntaxParser::ConjQuery(const ::java::lang::CharSequence & a0) const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_ConjQuery_9709215a], a0.this$));
              }

              jint StandardSyntaxParser::Conjunction() const
              {
                return env->callIntMethod(this$, mids$[mid_Conjunction_54c6a179]);
              }

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode StandardSyntaxParser::DisjQuery(const ::java::lang::CharSequence & a0) const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_DisjQuery_9709215a], a0.this$));
              }

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode StandardSyntaxParser::ModClause(const ::java::lang::CharSequence & a0) const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_ModClause_9709215a], a0.this$));
              }

              ::org::apache::lucene::queryparser::flexible::core::nodes::ModifierQueryNode$Modifier StandardSyntaxParser::Modifiers() const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::ModifierQueryNode$Modifier(env->callObjectMethod(this$, mids$[mid_Modifiers_511690a9]));
              }

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode StandardSyntaxParser::Query(const ::java::lang::CharSequence & a0) const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_Query_9709215a], a0.this$));
              }

              void StandardSyntaxParser::ReInit(const ::org::apache::lucene::queryparser::flexible::standard::parser::StandardSyntaxParserTokenManager & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_ReInit_491f91b2], a0.this$);
              }

              void StandardSyntaxParser::ReInit(const ::org::apache::lucene::queryparser::flexible::standard::parser::CharStream & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_ReInit_8af5fa89], a0.this$);
              }

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode StandardSyntaxParser::Term(const ::java::lang::CharSequence & a0) const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_Term_9709215a], a0.this$));
              }

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode StandardSyntaxParser::TopLevelQuery(const ::java::lang::CharSequence & a0) const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_TopLevelQuery_9709215a], a0.this$));
              }

              void StandardSyntaxParser::disable_tracing() const
              {
                env->callVoidMethod(this$, mids$[mid_disable_tracing_54c6a166]);
              }

              void StandardSyntaxParser::enable_tracing() const
              {
                env->callVoidMethod(this$, mids$[mid_enable_tracing_54c6a166]);
              }

              ::org::apache::lucene::queryparser::flexible::standard::parser::ParseException StandardSyntaxParser::generateParseException() const
              {
                return ::org::apache::lucene::queryparser::flexible::standard::parser::ParseException(env->callObjectMethod(this$, mids$[mid_generateParseException_4481d278]));
              }

              ::org::apache::lucene::queryparser::flexible::standard::parser::Token StandardSyntaxParser::getNextToken() const
              {
                return ::org::apache::lucene::queryparser::flexible::standard::parser::Token(env->callObjectMethod(this$, mids$[mid_getNextToken_5eb4cff8]));
              }

              ::org::apache::lucene::queryparser::flexible::standard::parser::Token StandardSyntaxParser::getToken(jint a0) const
              {
                return ::org::apache::lucene::queryparser::flexible::standard::parser::Token(env->callObjectMethod(this$, mids$[mid_getToken_24cc8f6e], a0));
              }

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode StandardSyntaxParser::parse(const ::java::lang::CharSequence & a0, const ::java::lang::CharSequence & a1) const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_parse_051054be], a0.this$, a1.this$));
              }

              ::org::apache::lucene::queryparser::flexible::standard::parser::Token StandardSyntaxParser::_get_jj_nt() const
              {
                return ::org::apache::lucene::queryparser::flexible::standard::parser::Token(env->getObjectField(this$, fids$[fid_jj_nt]));
              }

              void StandardSyntaxParser::_set_jj_nt(const ::org::apache::lucene::queryparser::flexible::standard::parser::Token & a0) const
              {
                env->setObjectField(this$, fids$[fid_jj_nt], a0.this$);
              }

              ::org::apache::lucene::queryparser::flexible::standard::parser::Token StandardSyntaxParser::_get_token() const
              {
                return ::org::apache::lucene::queryparser::flexible::standard::parser::Token(env->getObjectField(this$, fids$[fid_token]));
              }

              void StandardSyntaxParser::_set_token(const ::org::apache::lucene::queryparser::flexible::standard::parser::Token & a0) const
              {
                env->setObjectField(this$, fids$[fid_token], a0.this$);
              }

              ::org::apache::lucene::queryparser::flexible::standard::parser::StandardSyntaxParserTokenManager StandardSyntaxParser::_get_token_source() const
              {
                return ::org::apache::lucene::queryparser::flexible::standard::parser::StandardSyntaxParserTokenManager(env->getObjectField(this$, fids$[fid_token_source]));
              }

              void StandardSyntaxParser::_set_token_source(const ::org::apache::lucene::queryparser::flexible::standard::parser::StandardSyntaxParserTokenManager & a0) const
              {
                env->setObjectField(this$, fids$[fid_token_source], a0.this$);
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace parser {
              static PyObject *t_StandardSyntaxParser_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_StandardSyntaxParser_instance_(PyTypeObject *type, PyObject *arg);
              static int t_StandardSyntaxParser_init_(t_StandardSyntaxParser *self, PyObject *args, PyObject *kwds);
              static PyObject *t_StandardSyntaxParser_Clause(t_StandardSyntaxParser *self, PyObject *arg);
              static PyObject *t_StandardSyntaxParser_ConjQuery(t_StandardSyntaxParser *self, PyObject *arg);
              static PyObject *t_StandardSyntaxParser_Conjunction(t_StandardSyntaxParser *self);
              static PyObject *t_StandardSyntaxParser_DisjQuery(t_StandardSyntaxParser *self, PyObject *arg);
              static PyObject *t_StandardSyntaxParser_ModClause(t_StandardSyntaxParser *self, PyObject *arg);
              static PyObject *t_StandardSyntaxParser_Modifiers(t_StandardSyntaxParser *self);
              static PyObject *t_StandardSyntaxParser_Query(t_StandardSyntaxParser *self, PyObject *arg);
              static PyObject *t_StandardSyntaxParser_ReInit(t_StandardSyntaxParser *self, PyObject *args);
              static PyObject *t_StandardSyntaxParser_Term(t_StandardSyntaxParser *self, PyObject *arg);
              static PyObject *t_StandardSyntaxParser_TopLevelQuery(t_StandardSyntaxParser *self, PyObject *arg);
              static PyObject *t_StandardSyntaxParser_disable_tracing(t_StandardSyntaxParser *self);
              static PyObject *t_StandardSyntaxParser_enable_tracing(t_StandardSyntaxParser *self);
              static PyObject *t_StandardSyntaxParser_generateParseException(t_StandardSyntaxParser *self);
              static PyObject *t_StandardSyntaxParser_getNextToken(t_StandardSyntaxParser *self);
              static PyObject *t_StandardSyntaxParser_getToken(t_StandardSyntaxParser *self, PyObject *arg);
              static PyObject *t_StandardSyntaxParser_parse(t_StandardSyntaxParser *self, PyObject *args);
              static PyObject *t_StandardSyntaxParser_get__jj_nt(t_StandardSyntaxParser *self, void *data);
              static int t_StandardSyntaxParser_set__jj_nt(t_StandardSyntaxParser *self, PyObject *arg, void *data);
              static PyObject *t_StandardSyntaxParser_get__token(t_StandardSyntaxParser *self, void *data);
              static int t_StandardSyntaxParser_set__token(t_StandardSyntaxParser *self, PyObject *arg, void *data);
              static PyObject *t_StandardSyntaxParser_get__token_source(t_StandardSyntaxParser *self, void *data);
              static int t_StandardSyntaxParser_set__token_source(t_StandardSyntaxParser *self, PyObject *arg, void *data);

              static PyObject *t_StandardSyntaxParser_get__nextToken(t_StandardSyntaxParser *self, void *data);
              static PyGetSetDef t_StandardSyntaxParser__fields_[] = {
                DECLARE_GETSET_FIELD(t_StandardSyntaxParser, jj_nt),
                DECLARE_GETSET_FIELD(t_StandardSyntaxParser, token),
                DECLARE_GETSET_FIELD(t_StandardSyntaxParser, token_source),
                DECLARE_GET_FIELD(t_StandardSyntaxParser, nextToken),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_StandardSyntaxParser__methods_[] = {
                DECLARE_METHOD(t_StandardSyntaxParser, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_StandardSyntaxParser, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_StandardSyntaxParser, Clause, METH_O),
                DECLARE_METHOD(t_StandardSyntaxParser, ConjQuery, METH_O),
                DECLARE_METHOD(t_StandardSyntaxParser, Conjunction, METH_NOARGS),
                DECLARE_METHOD(t_StandardSyntaxParser, DisjQuery, METH_O),
                DECLARE_METHOD(t_StandardSyntaxParser, ModClause, METH_O),
                DECLARE_METHOD(t_StandardSyntaxParser, Modifiers, METH_NOARGS),
                DECLARE_METHOD(t_StandardSyntaxParser, Query, METH_O),
                DECLARE_METHOD(t_StandardSyntaxParser, ReInit, METH_VARARGS),
                DECLARE_METHOD(t_StandardSyntaxParser, Term, METH_O),
                DECLARE_METHOD(t_StandardSyntaxParser, TopLevelQuery, METH_O),
                DECLARE_METHOD(t_StandardSyntaxParser, disable_tracing, METH_NOARGS),
                DECLARE_METHOD(t_StandardSyntaxParser, enable_tracing, METH_NOARGS),
                DECLARE_METHOD(t_StandardSyntaxParser, generateParseException, METH_NOARGS),
                DECLARE_METHOD(t_StandardSyntaxParser, getNextToken, METH_NOARGS),
                DECLARE_METHOD(t_StandardSyntaxParser, getToken, METH_O),
                DECLARE_METHOD(t_StandardSyntaxParser, parse, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(StandardSyntaxParser, t_StandardSyntaxParser, ::java::lang::Object, StandardSyntaxParser, t_StandardSyntaxParser_init_, 0, 0, t_StandardSyntaxParser__fields_, 0, 0);

              void t_StandardSyntaxParser::install(PyObject *module)
              {
                installType(&PY_TYPE(StandardSyntaxParser), module, "StandardSyntaxParser", 0);
              }

              void t_StandardSyntaxParser::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParser).tp_dict, "class_", make_descriptor(StandardSyntaxParser::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParser).tp_dict, "wrapfn_", make_descriptor(t_StandardSyntaxParser::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParser).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_StandardSyntaxParser_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, StandardSyntaxParser::initializeClass, 1)))
                  return NULL;
                return t_StandardSyntaxParser::wrap_Object(StandardSyntaxParser(((t_StandardSyntaxParser *) arg)->object.this$));
              }
              static PyObject *t_StandardSyntaxParser_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, StandardSyntaxParser::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_StandardSyntaxParser_init_(t_StandardSyntaxParser *self, PyObject *args, PyObject *kwds)
              {
                switch (PyTuple_GET_SIZE(args)) {
                 case 0:
                  {
                    StandardSyntaxParser object((jobject) NULL);

                    INT_CALL(object = StandardSyntaxParser());
                    self->object = object;
                    break;
                  }
                  goto err;
                 case 1:
                  {
                    ::org::apache::lucene::queryparser::flexible::standard::parser::CharStream a0((jobject) NULL);
                    StandardSyntaxParser object((jobject) NULL);

                    if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::standard::parser::CharStream::initializeClass, &a0))
                    {
                      INT_CALL(object = StandardSyntaxParser(a0));
                      self->object = object;
                      break;
                    }
                  }
                  {
                    ::org::apache::lucene::queryparser::flexible::standard::parser::StandardSyntaxParserTokenManager a0((jobject) NULL);
                    StandardSyntaxParser object((jobject) NULL);

                    if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::standard::parser::StandardSyntaxParserTokenManager::initializeClass, &a0))
                    {
                      INT_CALL(object = StandardSyntaxParser(a0));
                      self->object = object;
                      break;
                    }
                  }
                 default:
                 err:
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_StandardSyntaxParser_Clause(t_StandardSyntaxParser *self, PyObject *arg)
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
                {
                  OBJ_CALL(result = self->object.Clause(a0));
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "Clause", arg);
                return NULL;
              }

              static PyObject *t_StandardSyntaxParser_ConjQuery(t_StandardSyntaxParser *self, PyObject *arg)
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
                {
                  OBJ_CALL(result = self->object.ConjQuery(a0));
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "ConjQuery", arg);
                return NULL;
              }

              static PyObject *t_StandardSyntaxParser_Conjunction(t_StandardSyntaxParser *self)
              {
                jint result;
                OBJ_CALL(result = self->object.Conjunction());
                return PyInt_FromLong((long) result);
              }

              static PyObject *t_StandardSyntaxParser_DisjQuery(t_StandardSyntaxParser *self, PyObject *arg)
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
                {
                  OBJ_CALL(result = self->object.DisjQuery(a0));
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "DisjQuery", arg);
                return NULL;
              }

              static PyObject *t_StandardSyntaxParser_ModClause(t_StandardSyntaxParser *self, PyObject *arg)
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
                {
                  OBJ_CALL(result = self->object.ModClause(a0));
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "ModClause", arg);
                return NULL;
              }

              static PyObject *t_StandardSyntaxParser_Modifiers(t_StandardSyntaxParser *self)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::ModifierQueryNode$Modifier result((jobject) NULL);
                OBJ_CALL(result = self->object.Modifiers());
                return ::org::apache::lucene::queryparser::flexible::core::nodes::t_ModifierQueryNode$Modifier::wrap_Object(result);
              }

              static PyObject *t_StandardSyntaxParser_Query(t_StandardSyntaxParser *self, PyObject *arg)
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
                {
                  OBJ_CALL(result = self->object.Query(a0));
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "Query", arg);
                return NULL;
              }

              static PyObject *t_StandardSyntaxParser_ReInit(t_StandardSyntaxParser *self, PyObject *args)
              {
                switch (PyTuple_GET_SIZE(args)) {
                 case 1:
                  {
                    ::org::apache::lucene::queryparser::flexible::standard::parser::StandardSyntaxParserTokenManager a0((jobject) NULL);

                    if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::standard::parser::StandardSyntaxParserTokenManager::initializeClass, &a0))
                    {
                      OBJ_CALL(self->object.ReInit(a0));
                      Py_RETURN_NONE;
                    }
                  }
                  {
                    ::org::apache::lucene::queryparser::flexible::standard::parser::CharStream a0((jobject) NULL);

                    if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::standard::parser::CharStream::initializeClass, &a0))
                    {
                      OBJ_CALL(self->object.ReInit(a0));
                      Py_RETURN_NONE;
                    }
                  }
                }

                PyErr_SetArgsError((PyObject *) self, "ReInit", args);
                return NULL;
              }

              static PyObject *t_StandardSyntaxParser_Term(t_StandardSyntaxParser *self, PyObject *arg)
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
                {
                  OBJ_CALL(result = self->object.Term(a0));
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "Term", arg);
                return NULL;
              }

              static PyObject *t_StandardSyntaxParser_TopLevelQuery(t_StandardSyntaxParser *self, PyObject *arg)
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
                {
                  OBJ_CALL(result = self->object.TopLevelQuery(a0));
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "TopLevelQuery", arg);
                return NULL;
              }

              static PyObject *t_StandardSyntaxParser_disable_tracing(t_StandardSyntaxParser *self)
              {
                OBJ_CALL(self->object.disable_tracing());
                Py_RETURN_NONE;
              }

              static PyObject *t_StandardSyntaxParser_enable_tracing(t_StandardSyntaxParser *self)
              {
                OBJ_CALL(self->object.enable_tracing());
                Py_RETURN_NONE;
              }

              static PyObject *t_StandardSyntaxParser_generateParseException(t_StandardSyntaxParser *self)
              {
                ::org::apache::lucene::queryparser::flexible::standard::parser::ParseException result((jobject) NULL);
                OBJ_CALL(result = self->object.generateParseException());
                return ::org::apache::lucene::queryparser::flexible::standard::parser::t_ParseException::wrap_Object(result);
              }

              static PyObject *t_StandardSyntaxParser_getNextToken(t_StandardSyntaxParser *self)
              {
                ::org::apache::lucene::queryparser::flexible::standard::parser::Token result((jobject) NULL);
                OBJ_CALL(result = self->object.getNextToken());
                return ::org::apache::lucene::queryparser::flexible::standard::parser::t_Token::wrap_Object(result);
              }

              static PyObject *t_StandardSyntaxParser_getToken(t_StandardSyntaxParser *self, PyObject *arg)
              {
                jint a0;
                ::org::apache::lucene::queryparser::flexible::standard::parser::Token result((jobject) NULL);

                if (!parseArg(arg, "I", &a0))
                {
                  OBJ_CALL(result = self->object.getToken(a0));
                  return ::org::apache::lucene::queryparser::flexible::standard::parser::t_Token::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "getToken", arg);
                return NULL;
              }

              static PyObject *t_StandardSyntaxParser_parse(t_StandardSyntaxParser *self, PyObject *args)
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                ::java::lang::CharSequence a1((jobject) NULL);
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArgs(args, "OO", &::java::lang::PY_TYPE(CharSequence), &::java::lang::PY_TYPE(CharSequence), &a0, &a1))
                {
                  OBJ_CALL(result = self->object.parse(a0, a1));
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "parse", args);
                return NULL;
              }

              static PyObject *t_StandardSyntaxParser_get__jj_nt(t_StandardSyntaxParser *self, void *data)
              {
                ::org::apache::lucene::queryparser::flexible::standard::parser::Token value((jobject) NULL);
                OBJ_CALL(value = self->object._get_jj_nt());
                return ::org::apache::lucene::queryparser::flexible::standard::parser::t_Token::wrap_Object(value);
              }
              static int t_StandardSyntaxParser_set__jj_nt(t_StandardSyntaxParser *self, PyObject *arg, void *data)
              {
                ::org::apache::lucene::queryparser::flexible::standard::parser::Token value((jobject) NULL);
                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::standard::parser::Token::initializeClass, &value))
                {
                  INT_CALL(self->object._set_jj_nt(value));
                  return 0;
                }
                PyErr_SetArgsError((PyObject *) self, "jj_nt", arg);
                return -1;
              }

              static PyObject *t_StandardSyntaxParser_get__token(t_StandardSyntaxParser *self, void *data)
              {
                ::org::apache::lucene::queryparser::flexible::standard::parser::Token value((jobject) NULL);
                OBJ_CALL(value = self->object._get_token());
                return ::org::apache::lucene::queryparser::flexible::standard::parser::t_Token::wrap_Object(value);
              }
              static int t_StandardSyntaxParser_set__token(t_StandardSyntaxParser *self, PyObject *arg, void *data)
              {
                ::org::apache::lucene::queryparser::flexible::standard::parser::Token value((jobject) NULL);
                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::standard::parser::Token::initializeClass, &value))
                {
                  INT_CALL(self->object._set_token(value));
                  return 0;
                }
                PyErr_SetArgsError((PyObject *) self, "token", arg);
                return -1;
              }

              static PyObject *t_StandardSyntaxParser_get__token_source(t_StandardSyntaxParser *self, void *data)
              {
                ::org::apache::lucene::queryparser::flexible::standard::parser::StandardSyntaxParserTokenManager value((jobject) NULL);
                OBJ_CALL(value = self->object._get_token_source());
                return ::org::apache::lucene::queryparser::flexible::standard::parser::t_StandardSyntaxParserTokenManager::wrap_Object(value);
              }
              static int t_StandardSyntaxParser_set__token_source(t_StandardSyntaxParser *self, PyObject *arg, void *data)
              {
                ::org::apache::lucene::queryparser::flexible::standard::parser::StandardSyntaxParserTokenManager value((jobject) NULL);
                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::standard::parser::StandardSyntaxParserTokenManager::initializeClass, &value))
                {
                  INT_CALL(self->object._set_token_source(value));
                  return 0;
                }
                PyErr_SetArgsError((PyObject *) self, "token_source", arg);
                return -1;
              }

              static PyObject *t_StandardSyntaxParser_get__nextToken(t_StandardSyntaxParser *self, void *data)
              {
                ::org::apache::lucene::queryparser::flexible::standard::parser::Token value((jobject) NULL);
                OBJ_CALL(value = self->object.getNextToken());
                return ::org::apache::lucene::queryparser::flexible::standard::parser::t_Token::wrap_Object(value);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/sortedset/SortedSetDocValuesFacetField.h"
#include "org/apache/lucene/document/FieldType.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace sortedset {

          ::java::lang::Class *SortedSetDocValuesFacetField::class$ = NULL;
          jmethodID *SortedSetDocValuesFacetField::mids$ = NULL;
          jfieldID *SortedSetDocValuesFacetField::fids$ = NULL;
          bool SortedSetDocValuesFacetField::live$ = false;
          ::org::apache::lucene::document::FieldType *SortedSetDocValuesFacetField::TYPE = NULL;

          jclass SortedSetDocValuesFacetField::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/sortedset/SortedSetDocValuesFacetField");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4a264742] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/String;)V");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              fids$ = new jfieldID[max_fid];
              fids$[fid_dim] = env->getFieldID(cls, "dim", "Ljava/lang/String;");
              fids$[fid_label] = env->getFieldID(cls, "label", "Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              TYPE = new ::org::apache::lucene::document::FieldType(env->getStaticObjectField(cls, "TYPE", "Lorg/apache/lucene/document/FieldType;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SortedSetDocValuesFacetField::SortedSetDocValuesFacetField(const ::java::lang::String & a0, const ::java::lang::String & a1) : ::org::apache::lucene::document::Field(env->newObject(initializeClass, &mids$, mid_init$_4a264742, a0.this$, a1.this$)) {}

          ::java::lang::String SortedSetDocValuesFacetField::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }

          ::java::lang::String SortedSetDocValuesFacetField::_get_dim() const
          {
            return ::java::lang::String(env->getObjectField(this$, fids$[fid_dim]));
          }

          ::java::lang::String SortedSetDocValuesFacetField::_get_label() const
          {
            return ::java::lang::String(env->getObjectField(this$, fids$[fid_label]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace sortedset {
          static PyObject *t_SortedSetDocValuesFacetField_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SortedSetDocValuesFacetField_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SortedSetDocValuesFacetField_init_(t_SortedSetDocValuesFacetField *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SortedSetDocValuesFacetField_toString(t_SortedSetDocValuesFacetField *self, PyObject *args);
          static PyObject *t_SortedSetDocValuesFacetField_get__dim(t_SortedSetDocValuesFacetField *self, void *data);
          static PyObject *t_SortedSetDocValuesFacetField_get__label(t_SortedSetDocValuesFacetField *self, void *data);

          static PyGetSetDef t_SortedSetDocValuesFacetField__fields_[] = {
            DECLARE_GET_FIELD(t_SortedSetDocValuesFacetField, dim),
            DECLARE_GET_FIELD(t_SortedSetDocValuesFacetField, label),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SortedSetDocValuesFacetField__methods_[] = {
            DECLARE_METHOD(t_SortedSetDocValuesFacetField, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SortedSetDocValuesFacetField, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SortedSetDocValuesFacetField, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SortedSetDocValuesFacetField, t_SortedSetDocValuesFacetField, ::org::apache::lucene::document::Field, SortedSetDocValuesFacetField, t_SortedSetDocValuesFacetField_init_, 0, 0, t_SortedSetDocValuesFacetField__fields_, 0, 0);

          void t_SortedSetDocValuesFacetField::install(PyObject *module)
          {
            installType(&PY_TYPE(SortedSetDocValuesFacetField), module, "SortedSetDocValuesFacetField", 0);
          }

          void t_SortedSetDocValuesFacetField::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SortedSetDocValuesFacetField).tp_dict, "class_", make_descriptor(SortedSetDocValuesFacetField::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SortedSetDocValuesFacetField).tp_dict, "wrapfn_", make_descriptor(t_SortedSetDocValuesFacetField::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SortedSetDocValuesFacetField).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(SortedSetDocValuesFacetField::initializeClass);
            PyDict_SetItemString(PY_TYPE(SortedSetDocValuesFacetField).tp_dict, "TYPE", make_descriptor(::org::apache::lucene::document::t_FieldType::wrap_Object(*SortedSetDocValuesFacetField::TYPE)));
          }

          static PyObject *t_SortedSetDocValuesFacetField_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SortedSetDocValuesFacetField::initializeClass, 1)))
              return NULL;
            return t_SortedSetDocValuesFacetField::wrap_Object(SortedSetDocValuesFacetField(((t_SortedSetDocValuesFacetField *) arg)->object.this$));
          }
          static PyObject *t_SortedSetDocValuesFacetField_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SortedSetDocValuesFacetField::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SortedSetDocValuesFacetField_init_(t_SortedSetDocValuesFacetField *self, PyObject *args, PyObject *kwds)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            SortedSetDocValuesFacetField object((jobject) NULL);

            if (!parseArgs(args, "ss", &a0, &a1))
            {
              INT_CALL(object = SortedSetDocValuesFacetField(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SortedSetDocValuesFacetField_toString(t_SortedSetDocValuesFacetField *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(SortedSetDocValuesFacetField), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_SortedSetDocValuesFacetField_get__dim(t_SortedSetDocValuesFacetField *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object._get_dim());
            return j2p(value);
          }

          static PyObject *t_SortedSetDocValuesFacetField_get__label(t_SortedSetDocValuesFacetField *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object._get_label());
            return j2p(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/xml/builders/SpanTermBuilder.h"
#include "org/apache/lucene/search/spans/SpanQuery.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {

            ::java::lang::Class *SpanTermBuilder::class$ = NULL;
            jmethodID *SpanTermBuilder::mids$ = NULL;
            bool SpanTermBuilder::live$ = false;

            jclass SpanTermBuilder::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/xml/builders/SpanTermBuilder");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            SpanTermBuilder::SpanTermBuilder() : ::org::apache::lucene::queryparser::xml::builders::SpanBuilderBase(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {
            static PyObject *t_SpanTermBuilder_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_SpanTermBuilder_instance_(PyTypeObject *type, PyObject *arg);
            static int t_SpanTermBuilder_init_(t_SpanTermBuilder *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_SpanTermBuilder__methods_[] = {
              DECLARE_METHOD(t_SpanTermBuilder, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SpanTermBuilder, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(SpanTermBuilder, t_SpanTermBuilder, ::org::apache::lucene::queryparser::xml::builders::SpanBuilderBase, SpanTermBuilder, t_SpanTermBuilder_init_, 0, 0, 0, 0, 0);

            void t_SpanTermBuilder::install(PyObject *module)
            {
              installType(&PY_TYPE(SpanTermBuilder), module, "SpanTermBuilder", 0);
            }

            void t_SpanTermBuilder::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(SpanTermBuilder).tp_dict, "class_", make_descriptor(SpanTermBuilder::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(SpanTermBuilder).tp_dict, "wrapfn_", make_descriptor(t_SpanTermBuilder::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(SpanTermBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_SpanTermBuilder_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, SpanTermBuilder::initializeClass, 1)))
                return NULL;
              return t_SpanTermBuilder::wrap_Object(SpanTermBuilder(((t_SpanTermBuilder *) arg)->object.this$));
            }
            static PyObject *t_SpanTermBuilder_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, SpanTermBuilder::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_SpanTermBuilder_init_(t_SpanTermBuilder *self, PyObject *args, PyObject *kwds)
            {
              SpanTermBuilder object((jobject) NULL);

              INT_CALL(object = SpanTermBuilder());
              self->object = object;

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/BasicModelG.h"
#include "org/apache/lucene/search/similarities/BasicStats.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *BasicModelG::class$ = NULL;
          jmethodID *BasicModelG::mids$ = NULL;
          bool BasicModelG::live$ = false;

          jclass BasicModelG::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/BasicModelG");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_score_076760a9] = env->getMethodID(cls, "score", "(Lorg/apache/lucene/search/similarities/BasicStats;F)F");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BasicModelG::BasicModelG() : ::org::apache::lucene::search::similarities::BasicModel(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jfloat BasicModelG::score(const ::org::apache::lucene::search::similarities::BasicStats & a0, jfloat a1) const
          {
            return env->callFloatMethod(this$, mids$[mid_score_076760a9], a0.this$, a1);
          }

          ::java::lang::String BasicModelG::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_BasicModelG_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BasicModelG_instance_(PyTypeObject *type, PyObject *arg);
          static int t_BasicModelG_init_(t_BasicModelG *self, PyObject *args, PyObject *kwds);
          static PyObject *t_BasicModelG_score(t_BasicModelG *self, PyObject *args);
          static PyObject *t_BasicModelG_toString(t_BasicModelG *self, PyObject *args);

          static PyMethodDef t_BasicModelG__methods_[] = {
            DECLARE_METHOD(t_BasicModelG, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BasicModelG, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BasicModelG, score, METH_VARARGS),
            DECLARE_METHOD(t_BasicModelG, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(BasicModelG, t_BasicModelG, ::org::apache::lucene::search::similarities::BasicModel, BasicModelG, t_BasicModelG_init_, 0, 0, 0, 0, 0);

          void t_BasicModelG::install(PyObject *module)
          {
            installType(&PY_TYPE(BasicModelG), module, "BasicModelG", 0);
          }

          void t_BasicModelG::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(BasicModelG).tp_dict, "class_", make_descriptor(BasicModelG::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(BasicModelG).tp_dict, "wrapfn_", make_descriptor(t_BasicModelG::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(BasicModelG).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_BasicModelG_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BasicModelG::initializeClass, 1)))
              return NULL;
            return t_BasicModelG::wrap_Object(BasicModelG(((t_BasicModelG *) arg)->object.this$));
          }
          static PyObject *t_BasicModelG_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BasicModelG::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_BasicModelG_init_(t_BasicModelG *self, PyObject *args, PyObject *kwds)
          {
            BasicModelG object((jobject) NULL);

            INT_CALL(object = BasicModelG());
            self->object = object;

            return 0;
          }

          static PyObject *t_BasicModelG_score(t_BasicModelG *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jfloat a1;
            jfloat result;

            if (!parseArgs(args, "kF", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.score(a0, a1));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(BasicModelG), (PyObject *) self, "score", args, 2);
          }

          static PyObject *t_BasicModelG_toString(t_BasicModelG *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(BasicModelG), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/MergeTrigger.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *MergeTrigger::class$ = NULL;
        jmethodID *MergeTrigger::mids$ = NULL;
        bool MergeTrigger::live$ = false;
        MergeTrigger *MergeTrigger::CLOSING = NULL;
        MergeTrigger *MergeTrigger::EXPLICIT = NULL;
        MergeTrigger *MergeTrigger::FULL_FLUSH = NULL;
        MergeTrigger *MergeTrigger::MERGE_FINISHED = NULL;
        MergeTrigger *MergeTrigger::SEGMENT_FLUSH = NULL;

        jclass MergeTrigger::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/MergeTrigger");

            mids$ = new jmethodID[max_mid];
            mids$[mid_valueOf_c198d758] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/index/MergeTrigger;");
            mids$[mid_values_5144e632] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/index/MergeTrigger;");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            CLOSING = new MergeTrigger(env->getStaticObjectField(cls, "CLOSING", "Lorg/apache/lucene/index/MergeTrigger;"));
            EXPLICIT = new MergeTrigger(env->getStaticObjectField(cls, "EXPLICIT", "Lorg/apache/lucene/index/MergeTrigger;"));
            FULL_FLUSH = new MergeTrigger(env->getStaticObjectField(cls, "FULL_FLUSH", "Lorg/apache/lucene/index/MergeTrigger;"));
            MERGE_FINISHED = new MergeTrigger(env->getStaticObjectField(cls, "MERGE_FINISHED", "Lorg/apache/lucene/index/MergeTrigger;"));
            SEGMENT_FLUSH = new MergeTrigger(env->getStaticObjectField(cls, "SEGMENT_FLUSH", "Lorg/apache/lucene/index/MergeTrigger;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        MergeTrigger MergeTrigger::valueOf(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return MergeTrigger(env->callStaticObjectMethod(cls, mids$[mid_valueOf_c198d758], a0.this$));
        }

        JArray< MergeTrigger > MergeTrigger::values()
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< MergeTrigger >(env->callStaticObjectMethod(cls, mids$[mid_values_5144e632]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_MergeTrigger_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MergeTrigger_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MergeTrigger_of_(t_MergeTrigger *self, PyObject *args);
        static PyObject *t_MergeTrigger_valueOf(PyTypeObject *type, PyObject *args);
        static PyObject *t_MergeTrigger_values(PyTypeObject *type);
        static PyObject *t_MergeTrigger_get__parameters_(t_MergeTrigger *self, void *data);
        static PyGetSetDef t_MergeTrigger__fields_[] = {
          DECLARE_GET_FIELD(t_MergeTrigger, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_MergeTrigger__methods_[] = {
          DECLARE_METHOD(t_MergeTrigger, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MergeTrigger, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MergeTrigger, of_, METH_VARARGS),
          DECLARE_METHOD(t_MergeTrigger, valueOf, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_MergeTrigger, values, METH_NOARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MergeTrigger, t_MergeTrigger, ::java::lang::Enum, MergeTrigger, abstract_init, 0, 0, t_MergeTrigger__fields_, 0, 0);
        PyObject *t_MergeTrigger::wrap_Object(const MergeTrigger& object, PyTypeObject *p0)
        {
          PyObject *obj = t_MergeTrigger::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_MergeTrigger *self = (t_MergeTrigger *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_MergeTrigger::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_MergeTrigger::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_MergeTrigger *self = (t_MergeTrigger *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_MergeTrigger::install(PyObject *module)
        {
          installType(&PY_TYPE(MergeTrigger), module, "MergeTrigger", 0);
        }

        void t_MergeTrigger::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MergeTrigger).tp_dict, "class_", make_descriptor(MergeTrigger::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MergeTrigger).tp_dict, "wrapfn_", make_descriptor(t_MergeTrigger::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MergeTrigger).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(MergeTrigger::initializeClass);
          PyDict_SetItemString(PY_TYPE(MergeTrigger).tp_dict, "CLOSING", make_descriptor(t_MergeTrigger::wrap_Object(*MergeTrigger::CLOSING)));
          PyDict_SetItemString(PY_TYPE(MergeTrigger).tp_dict, "EXPLICIT", make_descriptor(t_MergeTrigger::wrap_Object(*MergeTrigger::EXPLICIT)));
          PyDict_SetItemString(PY_TYPE(MergeTrigger).tp_dict, "FULL_FLUSH", make_descriptor(t_MergeTrigger::wrap_Object(*MergeTrigger::FULL_FLUSH)));
          PyDict_SetItemString(PY_TYPE(MergeTrigger).tp_dict, "MERGE_FINISHED", make_descriptor(t_MergeTrigger::wrap_Object(*MergeTrigger::MERGE_FINISHED)));
          PyDict_SetItemString(PY_TYPE(MergeTrigger).tp_dict, "SEGMENT_FLUSH", make_descriptor(t_MergeTrigger::wrap_Object(*MergeTrigger::SEGMENT_FLUSH)));
        }

        static PyObject *t_MergeTrigger_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MergeTrigger::initializeClass, 1)))
            return NULL;
          return t_MergeTrigger::wrap_Object(MergeTrigger(((t_MergeTrigger *) arg)->object.this$));
        }
        static PyObject *t_MergeTrigger_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MergeTrigger::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_MergeTrigger_of_(t_MergeTrigger *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_MergeTrigger_valueOf(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          MergeTrigger result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::MergeTrigger::valueOf(a0));
            return t_MergeTrigger::wrap_Object(result);
          }

          return callSuper(type, "valueOf", args, 2);
        }

        static PyObject *t_MergeTrigger_values(PyTypeObject *type)
        {
          JArray< MergeTrigger > result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::index::MergeTrigger::values());
          return JArray<jobject>(result.this$).wrap(t_MergeTrigger::wrap_jobject);
        }
        static PyObject *t_MergeTrigger_get__parameters_(t_MergeTrigger *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/id/IndonesianAnalyzer.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace id {

          ::java::lang::Class *IndonesianAnalyzer::class$ = NULL;
          jmethodID *IndonesianAnalyzer::mids$ = NULL;
          bool IndonesianAnalyzer::live$ = false;
          ::java::lang::String *IndonesianAnalyzer::DEFAULT_STOPWORD_FILE = NULL;

          jclass IndonesianAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/id/IndonesianAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_6d1f9881] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_0d96cf33] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;)V");
              mids$[mid_init$_3ea629c6] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/util/CharArraySet;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_83eafe28] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_c9d7e4a3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_getDefaultStopSet_d2d3505c] = env->getStaticMethodID(cls, "getDefaultStopSet", "()Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_STOPWORD_FILE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_STOPWORD_FILE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          IndonesianAnalyzer::IndonesianAnalyzer() : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          IndonesianAnalyzer::IndonesianAnalyzer(const ::org::apache::lucene::analysis::util::CharArraySet & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_6d1f9881, a0.this$)) {}

          IndonesianAnalyzer::IndonesianAnalyzer(const ::org::apache::lucene::util::Version & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_0d96cf33, a0.this$)) {}

          IndonesianAnalyzer::IndonesianAnalyzer(const ::org::apache::lucene::analysis::util::CharArraySet & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_3ea629c6, a0.this$, a1.this$)) {}

          IndonesianAnalyzer::IndonesianAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_83eafe28, a0.this$, a1.this$)) {}

          IndonesianAnalyzer::IndonesianAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1, const ::org::apache::lucene::analysis::util::CharArraySet & a2) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_c9d7e4a3, a0.this$, a1.this$, a2.this$)) {}

          ::org::apache::lucene::analysis::util::CharArraySet IndonesianAnalyzer::getDefaultStopSet()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getDefaultStopSet_d2d3505c]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace id {
          static PyObject *t_IndonesianAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IndonesianAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_IndonesianAnalyzer_init_(t_IndonesianAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_IndonesianAnalyzer_getDefaultStopSet(PyTypeObject *type);
          static PyObject *t_IndonesianAnalyzer_get__defaultStopSet(t_IndonesianAnalyzer *self, void *data);
          static PyGetSetDef t_IndonesianAnalyzer__fields_[] = {
            DECLARE_GET_FIELD(t_IndonesianAnalyzer, defaultStopSet),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_IndonesianAnalyzer__methods_[] = {
            DECLARE_METHOD(t_IndonesianAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IndonesianAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IndonesianAnalyzer, getDefaultStopSet, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(IndonesianAnalyzer, t_IndonesianAnalyzer, ::org::apache::lucene::analysis::util::StopwordAnalyzerBase, IndonesianAnalyzer, t_IndonesianAnalyzer_init_, 0, 0, t_IndonesianAnalyzer__fields_, 0, 0);

          void t_IndonesianAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(IndonesianAnalyzer), module, "IndonesianAnalyzer", 0);
          }

          void t_IndonesianAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(IndonesianAnalyzer).tp_dict, "class_", make_descriptor(IndonesianAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(IndonesianAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_IndonesianAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(IndonesianAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(IndonesianAnalyzer::initializeClass);
            PyDict_SetItemString(PY_TYPE(IndonesianAnalyzer).tp_dict, "DEFAULT_STOPWORD_FILE", make_descriptor(j2p(*IndonesianAnalyzer::DEFAULT_STOPWORD_FILE)));
          }

          static PyObject *t_IndonesianAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, IndonesianAnalyzer::initializeClass, 1)))
              return NULL;
            return t_IndonesianAnalyzer::wrap_Object(IndonesianAnalyzer(((t_IndonesianAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_IndonesianAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, IndonesianAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_IndonesianAnalyzer_init_(t_IndonesianAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                IndonesianAnalyzer object((jobject) NULL);

                INT_CALL(object = IndonesianAnalyzer());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                ::org::apache::lucene::analysis::util::CharArraySet a0((jobject) NULL);
                PyTypeObject **p0;
                IndonesianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = IndonesianAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                IndonesianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::util::Version::initializeClass, &a0))
                {
                  INT_CALL(object = IndonesianAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::analysis::util::CharArraySet a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                IndonesianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = IndonesianAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                IndonesianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "kK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = IndonesianAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                ::org::apache::lucene::analysis::util::CharArraySet a2((jobject) NULL);
                PyTypeObject **p2;
                IndonesianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "kKK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_, &a2, &p2, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = IndonesianAnalyzer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_IndonesianAnalyzer_getDefaultStopSet(PyTypeObject *type)
          {
            ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::id::IndonesianAnalyzer::getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_IndonesianAnalyzer_get__defaultStopSet(t_IndonesianAnalyzer *self, void *data)
          {
            ::org::apache::lucene::analysis::util::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/DateTools.h"
#include "org/apache/lucene/document/DateTools$Resolution.h"
#include "java/util/Date.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *DateTools::class$ = NULL;
        jmethodID *DateTools::mids$ = NULL;
        bool DateTools::live$ = false;

        jclass DateTools::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/DateTools");

            mids$ = new jmethodID[max_mid];
            mids$[mid_dateToString_ca526ca6] = env->getStaticMethodID(cls, "dateToString", "(Ljava/util/Date;Lorg/apache/lucene/document/DateTools$Resolution;)Ljava/lang/String;");
            mids$[mid_round_d582ee11] = env->getStaticMethodID(cls, "round", "(Ljava/util/Date;Lorg/apache/lucene/document/DateTools$Resolution;)Ljava/util/Date;");
            mids$[mid_round_ebfd1017] = env->getStaticMethodID(cls, "round", "(JLorg/apache/lucene/document/DateTools$Resolution;)J");
            mids$[mid_stringToDate_e1ca31a4] = env->getStaticMethodID(cls, "stringToDate", "(Ljava/lang/String;)Ljava/util/Date;");
            mids$[mid_stringToTime_5fdc3f54] = env->getStaticMethodID(cls, "stringToTime", "(Ljava/lang/String;)J");
            mids$[mid_timeToString_3ccc1506] = env->getStaticMethodID(cls, "timeToString", "(JLorg/apache/lucene/document/DateTools$Resolution;)Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::java::lang::String DateTools::dateToString(const ::java::util::Date & a0, const ::org::apache::lucene::document::DateTools$Resolution & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_dateToString_ca526ca6], a0.this$, a1.this$));
        }

        ::java::util::Date DateTools::round(const ::java::util::Date & a0, const ::org::apache::lucene::document::DateTools$Resolution & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::util::Date(env->callStaticObjectMethod(cls, mids$[mid_round_d582ee11], a0.this$, a1.this$));
        }

        jlong DateTools::round(jlong a0, const ::org::apache::lucene::document::DateTools$Resolution & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_round_ebfd1017], a0, a1.this$);
        }

        ::java::util::Date DateTools::stringToDate(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::util::Date(env->callStaticObjectMethod(cls, mids$[mid_stringToDate_e1ca31a4], a0.this$));
        }

        jlong DateTools::stringToTime(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_stringToTime_5fdc3f54], a0.this$);
        }

        ::java::lang::String DateTools::timeToString(jlong a0, const ::org::apache::lucene::document::DateTools$Resolution & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_timeToString_3ccc1506], a0, a1.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_DateTools_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DateTools_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DateTools_dateToString(PyTypeObject *type, PyObject *args);
        static PyObject *t_DateTools_round(PyTypeObject *type, PyObject *args);
        static PyObject *t_DateTools_stringToDate(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DateTools_stringToTime(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DateTools_timeToString(PyTypeObject *type, PyObject *args);

        static PyMethodDef t_DateTools__methods_[] = {
          DECLARE_METHOD(t_DateTools, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DateTools, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DateTools, dateToString, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_DateTools, round, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_DateTools, stringToDate, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DateTools, stringToTime, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DateTools, timeToString, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(DateTools, t_DateTools, ::java::lang::Object, DateTools, abstract_init, 0, 0, 0, 0, 0);

        void t_DateTools::install(PyObject *module)
        {
          installType(&PY_TYPE(DateTools), module, "DateTools", 0);
          PyDict_SetItemString(PY_TYPE(DateTools).tp_dict, "Resolution", make_descriptor(&PY_TYPE(DateTools$Resolution)));
        }

        void t_DateTools::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(DateTools).tp_dict, "class_", make_descriptor(DateTools::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(DateTools).tp_dict, "wrapfn_", make_descriptor(t_DateTools::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(DateTools).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_DateTools_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, DateTools::initializeClass, 1)))
            return NULL;
          return t_DateTools::wrap_Object(DateTools(((t_DateTools *) arg)->object.this$));
        }
        static PyObject *t_DateTools_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, DateTools::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_DateTools_dateToString(PyTypeObject *type, PyObject *args)
        {
          ::java::util::Date a0((jobject) NULL);
          ::org::apache::lucene::document::DateTools$Resolution a1((jobject) NULL);
          PyTypeObject **p1;
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "kK", ::java::util::Date::initializeClass, ::org::apache::lucene::document::DateTools$Resolution::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::document::t_DateTools$Resolution::parameters_))
          {
            OBJ_CALL(result = ::org::apache::lucene::document::DateTools::dateToString(a0, a1));
            return j2p(result);
          }

          PyErr_SetArgsError(type, "dateToString", args);
          return NULL;
        }

        static PyObject *t_DateTools_round(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::java::util::Date a0((jobject) NULL);
              ::org::apache::lucene::document::DateTools$Resolution a1((jobject) NULL);
              PyTypeObject **p1;
              ::java::util::Date result((jobject) NULL);

              if (!parseArgs(args, "kK", ::java::util::Date::initializeClass, ::org::apache::lucene::document::DateTools$Resolution::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::document::t_DateTools$Resolution::parameters_))
              {
                OBJ_CALL(result = ::org::apache::lucene::document::DateTools::round(a0, a1));
                return ::java::util::t_Date::wrap_Object(result);
              }
            }
            {
              jlong a0;
              ::org::apache::lucene::document::DateTools$Resolution a1((jobject) NULL);
              PyTypeObject **p1;
              jlong result;

              if (!parseArgs(args, "JK", ::org::apache::lucene::document::DateTools$Resolution::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::document::t_DateTools$Resolution::parameters_))
              {
                OBJ_CALL(result = ::org::apache::lucene::document::DateTools::round(a0, a1));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
          }

          PyErr_SetArgsError(type, "round", args);
          return NULL;
        }

        static PyObject *t_DateTools_stringToDate(PyTypeObject *type, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::util::Date result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::document::DateTools::stringToDate(a0));
            return ::java::util::t_Date::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "stringToDate", arg);
          return NULL;
        }

        static PyObject *t_DateTools_stringToTime(PyTypeObject *type, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          jlong result;

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::document::DateTools::stringToTime(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError(type, "stringToTime", arg);
          return NULL;
        }

        static PyObject *t_DateTools_timeToString(PyTypeObject *type, PyObject *args)
        {
          jlong a0;
          ::org::apache::lucene::document::DateTools$Resolution a1((jobject) NULL);
          PyTypeObject **p1;
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "JK", ::org::apache::lucene::document::DateTools$Resolution::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::document::t_DateTools$Resolution::parameters_))
          {
            OBJ_CALL(result = ::org::apache::lucene::document::DateTools::timeToString(a0, a1));
            return j2p(result);
          }

          PyErr_SetArgsError(type, "timeToString", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/surround/parser/QueryParserConstants.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace parser {

            ::java::lang::Class *QueryParserConstants::class$ = NULL;
            jmethodID *QueryParserConstants::mids$ = NULL;
            bool QueryParserConstants::live$ = false;
            jint QueryParserConstants::AND = (jint) 0;
            jint QueryParserConstants::Boost = (jint) 0;
            jint QueryParserConstants::CARAT = (jint) 0;
            jint QueryParserConstants::COLON = (jint) 0;
            jint QueryParserConstants::COMMA = (jint) 0;
            jint QueryParserConstants::DEFAULT = (jint) 0;
            jint QueryParserConstants::EOF = (jint) 0;
            jint QueryParserConstants::LPAREN = (jint) 0;
            jint QueryParserConstants::N = (jint) 0;
            jint QueryParserConstants::NOT = (jint) 0;
            jint QueryParserConstants::NUMBER = (jint) 0;
            jint QueryParserConstants::OR = (jint) 0;
            jint QueryParserConstants::QUOTED = (jint) 0;
            jint QueryParserConstants::RPAREN = (jint) 0;
            jint QueryParserConstants::SUFFIXTERM = (jint) 0;
            jint QueryParserConstants::TERM = (jint) 0;
            jint QueryParserConstants::TRUNCQUOTED = (jint) 0;
            jint QueryParserConstants::TRUNCTERM = (jint) 0;
            jint QueryParserConstants::W = (jint) 0;
            jint QueryParserConstants::_DISTOP_NUM = (jint) 0;
            jint QueryParserConstants::_NUM_CHAR = (jint) 0;
            jint QueryParserConstants::_ONE_CHAR = (jint) 0;
            jint QueryParserConstants::_STAR = (jint) 0;
            jint QueryParserConstants::_TERM_CHAR = (jint) 0;
            jint QueryParserConstants::_WHITESPACE = (jint) 0;
            JArray< ::java::lang::String > *QueryParserConstants::tokenImage = NULL;

            jclass QueryParserConstants::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/surround/parser/QueryParserConstants");

                class$ = (::java::lang::Class *) new JObject(cls);
                cls = (jclass) class$->this$;

                AND = env->getStaticIntField(cls, "AND");
                Boost = env->getStaticIntField(cls, "Boost");
                CARAT = env->getStaticIntField(cls, "CARAT");
                COLON = env->getStaticIntField(cls, "COLON");
                COMMA = env->getStaticIntField(cls, "COMMA");
                DEFAULT = env->getStaticIntField(cls, "DEFAULT");
                EOF = env->getStaticIntField(cls, "EOF");
                LPAREN = env->getStaticIntField(cls, "LPAREN");
                N = env->getStaticIntField(cls, "N");
                NOT = env->getStaticIntField(cls, "NOT");
                NUMBER = env->getStaticIntField(cls, "NUMBER");
                OR = env->getStaticIntField(cls, "OR");
                QUOTED = env->getStaticIntField(cls, "QUOTED");
                RPAREN = env->getStaticIntField(cls, "RPAREN");
                SUFFIXTERM = env->getStaticIntField(cls, "SUFFIXTERM");
                TERM = env->getStaticIntField(cls, "TERM");
                TRUNCQUOTED = env->getStaticIntField(cls, "TRUNCQUOTED");
                TRUNCTERM = env->getStaticIntField(cls, "TRUNCTERM");
                W = env->getStaticIntField(cls, "W");
                _DISTOP_NUM = env->getStaticIntField(cls, "_DISTOP_NUM");
                _NUM_CHAR = env->getStaticIntField(cls, "_NUM_CHAR");
                _ONE_CHAR = env->getStaticIntField(cls, "_ONE_CHAR");
                _STAR = env->getStaticIntField(cls, "_STAR");
                _TERM_CHAR = env->getStaticIntField(cls, "_TERM_CHAR");
                _WHITESPACE = env->getStaticIntField(cls, "_WHITESPACE");
                tokenImage = new JArray< ::java::lang::String >(env->getStaticObjectField(cls, "tokenImage", "[Ljava/lang/String;"));
                live$ = true;
              }
              return (jclass) class$->this$;
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace parser {
            static PyObject *t_QueryParserConstants_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_QueryParserConstants_instance_(PyTypeObject *type, PyObject *arg);

            static PyMethodDef t_QueryParserConstants__methods_[] = {
              DECLARE_METHOD(t_QueryParserConstants, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_QueryParserConstants, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(QueryParserConstants, t_QueryParserConstants, ::java::lang::Object, QueryParserConstants, abstract_init, 0, 0, 0, 0, 0);

            void t_QueryParserConstants::install(PyObject *module)
            {
              installType(&PY_TYPE(QueryParserConstants), module, "QueryParserConstants", 0);
            }

            void t_QueryParserConstants::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "class_", make_descriptor(QueryParserConstants::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "wrapfn_", make_descriptor(t_QueryParserConstants::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "boxfn_", make_descriptor(boxObject));
              env->getClass(QueryParserConstants::initializeClass);
              PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "AND", make_descriptor(QueryParserConstants::AND));
              PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "Boost", make_descriptor(QueryParserConstants::Boost));
              PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "CARAT", make_descriptor(QueryParserConstants::CARAT));
              PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "COLON", make_descriptor(QueryParserConstants::COLON));
              PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "COMMA", make_descriptor(QueryParserConstants::COMMA));
              PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "DEFAULT", make_descriptor(QueryParserConstants::DEFAULT));
              PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "EOF", make_descriptor(QueryParserConstants::EOF));
              PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "LPAREN", make_descriptor(QueryParserConstants::LPAREN));
              PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "N", make_descriptor(QueryParserConstants::N));
              PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "NOT", make_descriptor(QueryParserConstants::NOT));
              PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "NUMBER", make_descriptor(QueryParserConstants::NUMBER));
              PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "OR", make_descriptor(QueryParserConstants::OR));
              PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "QUOTED", make_descriptor(QueryParserConstants::QUOTED));
              PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "RPAREN", make_descriptor(QueryParserConstants::RPAREN));
              PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "SUFFIXTERM", make_descriptor(QueryParserConstants::SUFFIXTERM));
              PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "TERM", make_descriptor(QueryParserConstants::TERM));
              PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "TRUNCQUOTED", make_descriptor(QueryParserConstants::TRUNCQUOTED));
              PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "TRUNCTERM", make_descriptor(QueryParserConstants::TRUNCTERM));
              PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "W", make_descriptor(QueryParserConstants::W));
              PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "_DISTOP_NUM", make_descriptor(QueryParserConstants::_DISTOP_NUM));
              PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "_NUM_CHAR", make_descriptor(QueryParserConstants::_NUM_CHAR));
              PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "_ONE_CHAR", make_descriptor(QueryParserConstants::_ONE_CHAR));
              PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "_STAR", make_descriptor(QueryParserConstants::_STAR));
              PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "_TERM_CHAR", make_descriptor(QueryParserConstants::_TERM_CHAR));
              PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "_WHITESPACE", make_descriptor(QueryParserConstants::_WHITESPACE));
              PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "tokenImage", make_descriptor(JArray<jstring>(QueryParserConstants::tokenImage->this$).wrap()));
            }

            static PyObject *t_QueryParserConstants_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, QueryParserConstants::initializeClass, 1)))
                return NULL;
              return t_QueryParserConstants::wrap_Object(QueryParserConstants(((t_QueryParserConstants *) arg)->object.this$));
            }
            static PyObject *t_QueryParserConstants_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, QueryParserConstants::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/PrefixQuery.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/Term.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *PrefixQuery::class$ = NULL;
        jmethodID *PrefixQuery::mids$ = NULL;
        bool PrefixQuery::live$ = false;

        jclass PrefixQuery::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/PrefixQuery");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_7eca6a81] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/Term;)V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_getPrefix_0f71f314] = env->getMethodID(cls, "getPrefix", "()Lorg/apache/lucene/index/Term;");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_toString_97a5258f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");
            mids$[mid_getTermsEnum_67b5a29a] = env->getMethodID(cls, "getTermsEnum", "(Lorg/apache/lucene/index/Terms;Lorg/apache/lucene/util/AttributeSource;)Lorg/apache/lucene/index/TermsEnum;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PrefixQuery::PrefixQuery(const ::org::apache::lucene::index::Term & a0) : ::org::apache::lucene::search::MultiTermQuery(env->newObject(initializeClass, &mids$, mid_init$_7eca6a81, a0.this$)) {}

        jboolean PrefixQuery::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        ::org::apache::lucene::index::Term PrefixQuery::getPrefix() const
        {
          return ::org::apache::lucene::index::Term(env->callObjectMethod(this$, mids$[mid_getPrefix_0f71f314]));
        }

        jint PrefixQuery::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        ::java::lang::String PrefixQuery::toString(const ::java::lang::String & a0) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_97a5258f], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_PrefixQuery_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PrefixQuery_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PrefixQuery_init_(t_PrefixQuery *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PrefixQuery_equals(t_PrefixQuery *self, PyObject *args);
        static PyObject *t_PrefixQuery_getPrefix(t_PrefixQuery *self);
        static PyObject *t_PrefixQuery_hashCode(t_PrefixQuery *self, PyObject *args);
        static PyObject *t_PrefixQuery_toString(t_PrefixQuery *self, PyObject *args);
        static PyObject *t_PrefixQuery_get__prefix(t_PrefixQuery *self, void *data);
        static PyGetSetDef t_PrefixQuery__fields_[] = {
          DECLARE_GET_FIELD(t_PrefixQuery, prefix),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PrefixQuery__methods_[] = {
          DECLARE_METHOD(t_PrefixQuery, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PrefixQuery, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PrefixQuery, equals, METH_VARARGS),
          DECLARE_METHOD(t_PrefixQuery, getPrefix, METH_NOARGS),
          DECLARE_METHOD(t_PrefixQuery, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_PrefixQuery, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PrefixQuery, t_PrefixQuery, ::org::apache::lucene::search::MultiTermQuery, PrefixQuery, t_PrefixQuery_init_, 0, 0, t_PrefixQuery__fields_, 0, 0);

        void t_PrefixQuery::install(PyObject *module)
        {
          installType(&PY_TYPE(PrefixQuery), module, "PrefixQuery", 0);
        }

        void t_PrefixQuery::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PrefixQuery).tp_dict, "class_", make_descriptor(PrefixQuery::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PrefixQuery).tp_dict, "wrapfn_", make_descriptor(t_PrefixQuery::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PrefixQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_PrefixQuery_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PrefixQuery::initializeClass, 1)))
            return NULL;
          return t_PrefixQuery::wrap_Object(PrefixQuery(((t_PrefixQuery *) arg)->object.this$));
        }
        static PyObject *t_PrefixQuery_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PrefixQuery::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PrefixQuery_init_(t_PrefixQuery *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::index::Term a0((jobject) NULL);
          PrefixQuery object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::Term::initializeClass, &a0))
          {
            INT_CALL(object = PrefixQuery(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_PrefixQuery_equals(t_PrefixQuery *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(PrefixQuery), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_PrefixQuery_getPrefix(t_PrefixQuery *self)
        {
          ::org::apache::lucene::index::Term result((jobject) NULL);
          OBJ_CALL(result = self->object.getPrefix());
          return ::org::apache::lucene::index::t_Term::wrap_Object(result);
        }

        static PyObject *t_PrefixQuery_hashCode(t_PrefixQuery *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(PrefixQuery), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_PrefixQuery_toString(t_PrefixQuery *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.toString(a0));
            return j2p(result);
          }

          return callSuper(&PY_TYPE(PrefixQuery), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_PrefixQuery_get__prefix(t_PrefixQuery *self, void *data)
        {
          ::org::apache::lucene::index::Term value((jobject) NULL);
          OBJ_CALL(value = self->object.getPrefix());
          return ::org::apache::lucene::index::t_Term::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/LockFactory.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/store/Lock.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *LockFactory::class$ = NULL;
        jmethodID *LockFactory::mids$ = NULL;
        bool LockFactory::live$ = false;

        jclass LockFactory::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/LockFactory");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_clearLock_5fdc3f48] = env->getMethodID(cls, "clearLock", "(Ljava/lang/String;)V");
            mids$[mid_getLockPrefix_14c7b5c5] = env->getMethodID(cls, "getLockPrefix", "()Ljava/lang/String;");
            mids$[mid_makeLock_f26bb9a8] = env->getMethodID(cls, "makeLock", "(Ljava/lang/String;)Lorg/apache/lucene/store/Lock;");
            mids$[mid_setLockPrefix_5fdc3f48] = env->getMethodID(cls, "setLockPrefix", "(Ljava/lang/String;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        LockFactory::LockFactory() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void LockFactory::clearLock(const ::java::lang::String & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_clearLock_5fdc3f48], a0.this$);
        }

        ::java::lang::String LockFactory::getLockPrefix() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getLockPrefix_14c7b5c5]));
        }

        ::org::apache::lucene::store::Lock LockFactory::makeLock(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::store::Lock(env->callObjectMethod(this$, mids$[mid_makeLock_f26bb9a8], a0.this$));
        }

        void LockFactory::setLockPrefix(const ::java::lang::String & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setLockPrefix_5fdc3f48], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_LockFactory_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_LockFactory_instance_(PyTypeObject *type, PyObject *arg);
        static int t_LockFactory_init_(t_LockFactory *self, PyObject *args, PyObject *kwds);
        static PyObject *t_LockFactory_clearLock(t_LockFactory *self, PyObject *arg);
        static PyObject *t_LockFactory_getLockPrefix(t_LockFactory *self);
        static PyObject *t_LockFactory_makeLock(t_LockFactory *self, PyObject *arg);
        static PyObject *t_LockFactory_setLockPrefix(t_LockFactory *self, PyObject *arg);
        static PyObject *t_LockFactory_get__lockPrefix(t_LockFactory *self, void *data);
        static int t_LockFactory_set__lockPrefix(t_LockFactory *self, PyObject *arg, void *data);
        static PyGetSetDef t_LockFactory__fields_[] = {
          DECLARE_GETSET_FIELD(t_LockFactory, lockPrefix),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_LockFactory__methods_[] = {
          DECLARE_METHOD(t_LockFactory, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LockFactory, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LockFactory, clearLock, METH_O),
          DECLARE_METHOD(t_LockFactory, getLockPrefix, METH_NOARGS),
          DECLARE_METHOD(t_LockFactory, makeLock, METH_O),
          DECLARE_METHOD(t_LockFactory, setLockPrefix, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(LockFactory, t_LockFactory, ::java::lang::Object, LockFactory, t_LockFactory_init_, 0, 0, t_LockFactory__fields_, 0, 0);

        void t_LockFactory::install(PyObject *module)
        {
          installType(&PY_TYPE(LockFactory), module, "LockFactory", 0);
        }

        void t_LockFactory::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(LockFactory).tp_dict, "class_", make_descriptor(LockFactory::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(LockFactory).tp_dict, "wrapfn_", make_descriptor(t_LockFactory::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(LockFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_LockFactory_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, LockFactory::initializeClass, 1)))
            return NULL;
          return t_LockFactory::wrap_Object(LockFactory(((t_LockFactory *) arg)->object.this$));
        }
        static PyObject *t_LockFactory_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, LockFactory::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_LockFactory_init_(t_LockFactory *self, PyObject *args, PyObject *kwds)
        {
          LockFactory object((jobject) NULL);

          INT_CALL(object = LockFactory());
          self->object = object;

          return 0;
        }

        static PyObject *t_LockFactory_clearLock(t_LockFactory *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(self->object.clearLock(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "clearLock", arg);
          return NULL;
        }

        static PyObject *t_LockFactory_getLockPrefix(t_LockFactory *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.getLockPrefix());
          return j2p(result);
        }

        static PyObject *t_LockFactory_makeLock(t_LockFactory *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::store::Lock result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = self->object.makeLock(a0));
            return ::org::apache::lucene::store::t_Lock::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "makeLock", arg);
          return NULL;
        }

        static PyObject *t_LockFactory_setLockPrefix(t_LockFactory *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(self->object.setLockPrefix(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setLockPrefix", arg);
          return NULL;
        }

        static PyObject *t_LockFactory_get__lockPrefix(t_LockFactory *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object.getLockPrefix());
          return j2p(value);
        }
        static int t_LockFactory_set__lockPrefix(t_LockFactory *self, PyObject *arg, void *data)
        {
          {
            ::java::lang::String value((jobject) NULL);
            if (!parseArg(arg, "s", &value))
            {
              INT_CALL(self->object.setLockPrefix(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "lockPrefix", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ro/RomanianAnalyzer.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ro {

          ::java::lang::Class *RomanianAnalyzer::class$ = NULL;
          jmethodID *RomanianAnalyzer::mids$ = NULL;
          bool RomanianAnalyzer::live$ = false;
          ::java::lang::String *RomanianAnalyzer::DEFAULT_STOPWORD_FILE = NULL;

          jclass RomanianAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ro/RomanianAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_6d1f9881] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_0d96cf33] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;)V");
              mids$[mid_init$_3ea629c6] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/util/CharArraySet;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_83eafe28] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_c9d7e4a3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_getDefaultStopSet_d2d3505c] = env->getStaticMethodID(cls, "getDefaultStopSet", "()Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_STOPWORD_FILE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_STOPWORD_FILE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          RomanianAnalyzer::RomanianAnalyzer() : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          RomanianAnalyzer::RomanianAnalyzer(const ::org::apache::lucene::analysis::util::CharArraySet & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_6d1f9881, a0.this$)) {}

          RomanianAnalyzer::RomanianAnalyzer(const ::org::apache::lucene::util::Version & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_0d96cf33, a0.this$)) {}

          RomanianAnalyzer::RomanianAnalyzer(const ::org::apache::lucene::analysis::util::CharArraySet & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_3ea629c6, a0.this$, a1.this$)) {}

          RomanianAnalyzer::RomanianAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_83eafe28, a0.this$, a1.this$)) {}

          RomanianAnalyzer::RomanianAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1, const ::org::apache::lucene::analysis::util::CharArraySet & a2) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_c9d7e4a3, a0.this$, a1.this$, a2.this$)) {}

          ::org::apache::lucene::analysis::util::CharArraySet RomanianAnalyzer::getDefaultStopSet()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getDefaultStopSet_d2d3505c]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ro {
          static PyObject *t_RomanianAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_RomanianAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_RomanianAnalyzer_init_(t_RomanianAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_RomanianAnalyzer_getDefaultStopSet(PyTypeObject *type);
          static PyObject *t_RomanianAnalyzer_get__defaultStopSet(t_RomanianAnalyzer *self, void *data);
          static PyGetSetDef t_RomanianAnalyzer__fields_[] = {
            DECLARE_GET_FIELD(t_RomanianAnalyzer, defaultStopSet),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_RomanianAnalyzer__methods_[] = {
            DECLARE_METHOD(t_RomanianAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_RomanianAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_RomanianAnalyzer, getDefaultStopSet, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(RomanianAnalyzer, t_RomanianAnalyzer, ::org::apache::lucene::analysis::util::StopwordAnalyzerBase, RomanianAnalyzer, t_RomanianAnalyzer_init_, 0, 0, t_RomanianAnalyzer__fields_, 0, 0);

          void t_RomanianAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(RomanianAnalyzer), module, "RomanianAnalyzer", 0);
          }

          void t_RomanianAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(RomanianAnalyzer).tp_dict, "class_", make_descriptor(RomanianAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(RomanianAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_RomanianAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(RomanianAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(RomanianAnalyzer::initializeClass);
            PyDict_SetItemString(PY_TYPE(RomanianAnalyzer).tp_dict, "DEFAULT_STOPWORD_FILE", make_descriptor(j2p(*RomanianAnalyzer::DEFAULT_STOPWORD_FILE)));
          }

          static PyObject *t_RomanianAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, RomanianAnalyzer::initializeClass, 1)))
              return NULL;
            return t_RomanianAnalyzer::wrap_Object(RomanianAnalyzer(((t_RomanianAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_RomanianAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, RomanianAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_RomanianAnalyzer_init_(t_RomanianAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                RomanianAnalyzer object((jobject) NULL);

                INT_CALL(object = RomanianAnalyzer());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                ::org::apache::lucene::analysis::util::CharArraySet a0((jobject) NULL);
                PyTypeObject **p0;
                RomanianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = RomanianAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                RomanianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::util::Version::initializeClass, &a0))
                {
                  INT_CALL(object = RomanianAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::analysis::util::CharArraySet a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                RomanianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = RomanianAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                RomanianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "kK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = RomanianAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                ::org::apache::lucene::analysis::util::CharArraySet a2((jobject) NULL);
                PyTypeObject **p2;
                RomanianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "kKK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_, &a2, &p2, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = RomanianAnalyzer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_RomanianAnalyzer_getDefaultStopSet(PyTypeObject *type)
          {
            ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::ro::RomanianAnalyzer::getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_RomanianAnalyzer_get__defaultStopSet(t_RomanianAnalyzer *self, void *data)
          {
            ::org::apache::lucene::analysis::util::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/join/ScoreMode.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace join {

          ::java::lang::Class *ScoreMode::class$ = NULL;
          jmethodID *ScoreMode::mids$ = NULL;
          bool ScoreMode::live$ = false;
          ScoreMode *ScoreMode::Avg = NULL;
          ScoreMode *ScoreMode::Max = NULL;
          ScoreMode *ScoreMode::None = NULL;
          ScoreMode *ScoreMode::Total = NULL;

          jclass ScoreMode::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/join/ScoreMode");

              mids$ = new jmethodID[max_mid];
              mids$[mid_valueOf_0d6e5195] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/search/join/ScoreMode;");
              mids$[mid_values_dbd87c7b] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/search/join/ScoreMode;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              Avg = new ScoreMode(env->getStaticObjectField(cls, "Avg", "Lorg/apache/lucene/search/join/ScoreMode;"));
              Max = new ScoreMode(env->getStaticObjectField(cls, "Max", "Lorg/apache/lucene/search/join/ScoreMode;"));
              None = new ScoreMode(env->getStaticObjectField(cls, "None", "Lorg/apache/lucene/search/join/ScoreMode;"));
              Total = new ScoreMode(env->getStaticObjectField(cls, "Total", "Lorg/apache/lucene/search/join/ScoreMode;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ScoreMode ScoreMode::valueOf(const ::java::lang::String & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ScoreMode(env->callStaticObjectMethod(cls, mids$[mid_valueOf_0d6e5195], a0.this$));
          }

          JArray< ScoreMode > ScoreMode::values()
          {
            jclass cls = env->getClass(initializeClass);
            return JArray< ScoreMode >(env->callStaticObjectMethod(cls, mids$[mid_values_dbd87c7b]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace join {
          static PyObject *t_ScoreMode_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ScoreMode_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ScoreMode_of_(t_ScoreMode *self, PyObject *args);
          static PyObject *t_ScoreMode_valueOf(PyTypeObject *type, PyObject *args);
          static PyObject *t_ScoreMode_values(PyTypeObject *type);
          static PyObject *t_ScoreMode_get__parameters_(t_ScoreMode *self, void *data);
          static PyGetSetDef t_ScoreMode__fields_[] = {
            DECLARE_GET_FIELD(t_ScoreMode, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_ScoreMode__methods_[] = {
            DECLARE_METHOD(t_ScoreMode, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ScoreMode, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ScoreMode, of_, METH_VARARGS),
            DECLARE_METHOD(t_ScoreMode, valueOf, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_ScoreMode, values, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ScoreMode, t_ScoreMode, ::java::lang::Enum, ScoreMode, abstract_init, 0, 0, t_ScoreMode__fields_, 0, 0);
          PyObject *t_ScoreMode::wrap_Object(const ScoreMode& object, PyTypeObject *p0)
          {
            PyObject *obj = t_ScoreMode::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_ScoreMode *self = (t_ScoreMode *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_ScoreMode::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_ScoreMode::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_ScoreMode *self = (t_ScoreMode *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_ScoreMode::install(PyObject *module)
          {
            installType(&PY_TYPE(ScoreMode), module, "ScoreMode", 0);
          }

          void t_ScoreMode::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ScoreMode).tp_dict, "class_", make_descriptor(ScoreMode::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ScoreMode).tp_dict, "wrapfn_", make_descriptor(t_ScoreMode::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ScoreMode).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(ScoreMode::initializeClass);
            PyDict_SetItemString(PY_TYPE(ScoreMode).tp_dict, "Avg", make_descriptor(t_ScoreMode::wrap_Object(*ScoreMode::Avg)));
            PyDict_SetItemString(PY_TYPE(ScoreMode).tp_dict, "Max", make_descriptor(t_ScoreMode::wrap_Object(*ScoreMode::Max)));
            PyDict_SetItemString(PY_TYPE(ScoreMode).tp_dict, "None", make_descriptor(t_ScoreMode::wrap_Object(*ScoreMode::None)));
            PyDict_SetItemString(PY_TYPE(ScoreMode).tp_dict, "Total", make_descriptor(t_ScoreMode::wrap_Object(*ScoreMode::Total)));
          }

          static PyObject *t_ScoreMode_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ScoreMode::initializeClass, 1)))
              return NULL;
            return t_ScoreMode::wrap_Object(ScoreMode(((t_ScoreMode *) arg)->object.this$));
          }
          static PyObject *t_ScoreMode_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ScoreMode::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_ScoreMode_of_(t_ScoreMode *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static PyObject *t_ScoreMode_valueOf(PyTypeObject *type, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ScoreMode result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::search::join::ScoreMode::valueOf(a0));
              return t_ScoreMode::wrap_Object(result);
            }

            return callSuper(type, "valueOf", args, 2);
          }

          static PyObject *t_ScoreMode_values(PyTypeObject *type)
          {
            JArray< ScoreMode > result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::search::join::ScoreMode::values());
            return JArray<jobject>(result.this$).wrap(t_ScoreMode::wrap_jobject);
          }
          static PyObject *t_ScoreMode_get__parameters_(t_ScoreMode *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/xml/builders/SpanFirstBuilder.h"
#include "org/apache/lucene/search/spans/SpanQuery.h"
#include "org/apache/lucene/queryparser/xml/builders/SpanQueryBuilder.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {

            ::java::lang::Class *SpanFirstBuilder::class$ = NULL;
            jmethodID *SpanFirstBuilder::mids$ = NULL;
            bool SpanFirstBuilder::live$ = false;

            jclass SpanFirstBuilder::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/xml/builders/SpanFirstBuilder");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_d9ca31a9] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/xml/builders/SpanQueryBuilder;)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            SpanFirstBuilder::SpanFirstBuilder(const ::org::apache::lucene::queryparser::xml::builders::SpanQueryBuilder & a0) : ::org::apache::lucene::queryparser::xml::builders::SpanBuilderBase(env->newObject(initializeClass, &mids$, mid_init$_d9ca31a9, a0.this$)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {
            static PyObject *t_SpanFirstBuilder_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_SpanFirstBuilder_instance_(PyTypeObject *type, PyObject *arg);
            static int t_SpanFirstBuilder_init_(t_SpanFirstBuilder *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_SpanFirstBuilder__methods_[] = {
              DECLARE_METHOD(t_SpanFirstBuilder, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SpanFirstBuilder, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(SpanFirstBuilder, t_SpanFirstBuilder, ::org::apache::lucene::queryparser::xml::builders::SpanBuilderBase, SpanFirstBuilder, t_SpanFirstBuilder_init_, 0, 0, 0, 0, 0);

            void t_SpanFirstBuilder::install(PyObject *module)
            {
              installType(&PY_TYPE(SpanFirstBuilder), module, "SpanFirstBuilder", 0);
            }

            void t_SpanFirstBuilder::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(SpanFirstBuilder).tp_dict, "class_", make_descriptor(SpanFirstBuilder::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(SpanFirstBuilder).tp_dict, "wrapfn_", make_descriptor(t_SpanFirstBuilder::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(SpanFirstBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_SpanFirstBuilder_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, SpanFirstBuilder::initializeClass, 1)))
                return NULL;
              return t_SpanFirstBuilder::wrap_Object(SpanFirstBuilder(((t_SpanFirstBuilder *) arg)->object.this$));
            }
            static PyObject *t_SpanFirstBuilder_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, SpanFirstBuilder::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_SpanFirstBuilder_init_(t_SpanFirstBuilder *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::queryparser::xml::builders::SpanQueryBuilder a0((jobject) NULL);
              SpanFirstBuilder object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::xml::builders::SpanQueryBuilder::initializeClass, &a0))
              {
                INT_CALL(object = SpanFirstBuilder(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/util/FilesystemResourceLoader.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "java/lang/String.h"
#include "java/io/File.h"
#include "org/apache/lucene/analysis/util/ResourceLoader.h"
#include "java/io/InputStream.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {

          ::java::lang::Class *FilesystemResourceLoader::class$ = NULL;
          jmethodID *FilesystemResourceLoader::mids$ = NULL;
          bool FilesystemResourceLoader::live$ = false;

          jclass FilesystemResourceLoader::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/util/FilesystemResourceLoader");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_c3dacf57] = env->getMethodID(cls, "<init>", "(Ljava/io/File;)V");
              mids$[mid_init$_002bf8fe] = env->getMethodID(cls, "<init>", "(Ljava/io/File;Lorg/apache/lucene/analysis/util/ResourceLoader;)V");
              mids$[mid_findClass_4aee1c89] = env->getMethodID(cls, "findClass", "(Ljava/lang/String;Ljava/lang/Class;)Ljava/lang/Class;");
              mids$[mid_newInstance_61899367] = env->getMethodID(cls, "newInstance", "(Ljava/lang/String;Ljava/lang/Class;)Ljava/lang/Object;");
              mids$[mid_openResource_222e59eb] = env->getMethodID(cls, "openResource", "(Ljava/lang/String;)Ljava/io/InputStream;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FilesystemResourceLoader::FilesystemResourceLoader() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          FilesystemResourceLoader::FilesystemResourceLoader(const ::java::io::File & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_c3dacf57, a0.this$)) {}

          FilesystemResourceLoader::FilesystemResourceLoader(const ::java::io::File & a0, const ::org::apache::lucene::analysis::util::ResourceLoader & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_002bf8fe, a0.this$, a1.this$)) {}

          ::java::lang::Class FilesystemResourceLoader::findClass(const ::java::lang::String & a0, const ::java::lang::Class & a1) const
          {
            return ::java::lang::Class(env->callObjectMethod(this$, mids$[mid_findClass_4aee1c89], a0.this$, a1.this$));
          }

          ::java::lang::Object FilesystemResourceLoader::newInstance(const ::java::lang::String & a0, const ::java::lang::Class & a1) const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_newInstance_61899367], a0.this$, a1.this$));
          }

          ::java::io::InputStream FilesystemResourceLoader::openResource(const ::java::lang::String & a0) const
          {
            return ::java::io::InputStream(env->callObjectMethod(this$, mids$[mid_openResource_222e59eb], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {
          static PyObject *t_FilesystemResourceLoader_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FilesystemResourceLoader_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FilesystemResourceLoader_init_(t_FilesystemResourceLoader *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FilesystemResourceLoader_findClass(t_FilesystemResourceLoader *self, PyObject *args);
          static PyObject *t_FilesystemResourceLoader_newInstance(t_FilesystemResourceLoader *self, PyObject *args);
          static PyObject *t_FilesystemResourceLoader_openResource(t_FilesystemResourceLoader *self, PyObject *arg);

          static PyMethodDef t_FilesystemResourceLoader__methods_[] = {
            DECLARE_METHOD(t_FilesystemResourceLoader, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FilesystemResourceLoader, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FilesystemResourceLoader, findClass, METH_VARARGS),
            DECLARE_METHOD(t_FilesystemResourceLoader, newInstance, METH_VARARGS),
            DECLARE_METHOD(t_FilesystemResourceLoader, openResource, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FilesystemResourceLoader, t_FilesystemResourceLoader, ::java::lang::Object, FilesystemResourceLoader, t_FilesystemResourceLoader_init_, 0, 0, 0, 0, 0);

          void t_FilesystemResourceLoader::install(PyObject *module)
          {
            installType(&PY_TYPE(FilesystemResourceLoader), module, "FilesystemResourceLoader", 0);
          }

          void t_FilesystemResourceLoader::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FilesystemResourceLoader).tp_dict, "class_", make_descriptor(FilesystemResourceLoader::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FilesystemResourceLoader).tp_dict, "wrapfn_", make_descriptor(t_FilesystemResourceLoader::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FilesystemResourceLoader).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FilesystemResourceLoader_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FilesystemResourceLoader::initializeClass, 1)))
              return NULL;
            return t_FilesystemResourceLoader::wrap_Object(FilesystemResourceLoader(((t_FilesystemResourceLoader *) arg)->object.this$));
          }
          static PyObject *t_FilesystemResourceLoader_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FilesystemResourceLoader::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FilesystemResourceLoader_init_(t_FilesystemResourceLoader *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                FilesystemResourceLoader object((jobject) NULL);

                INT_CALL(object = FilesystemResourceLoader());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                ::java::io::File a0((jobject) NULL);
                FilesystemResourceLoader object((jobject) NULL);

                if (!parseArgs(args, "k", ::java::io::File::initializeClass, &a0))
                {
                  INT_CALL(object = FilesystemResourceLoader(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::java::io::File a0((jobject) NULL);
                ::org::apache::lucene::analysis::util::ResourceLoader a1((jobject) NULL);
                FilesystemResourceLoader object((jobject) NULL);

                if (!parseArgs(args, "kk", ::java::io::File::initializeClass, ::org::apache::lucene::analysis::util::ResourceLoader::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = FilesystemResourceLoader(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_FilesystemResourceLoader_findClass(t_FilesystemResourceLoader *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::Class a1((jobject) NULL);
            PyTypeObject **p1;
            ::java::lang::Class result((jobject) NULL);

            if (!parseArgs(args, "sK", ::java::lang::Class::initializeClass, &a0, &a1, &p1, ::java::lang::t_Class::parameters_))
            {
              OBJ_CALL(result = self->object.findClass(a0, a1));
              return ::java::lang::t_Class::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "findClass", args);
            return NULL;
          }

          static PyObject *t_FilesystemResourceLoader_newInstance(t_FilesystemResourceLoader *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::Class a1((jobject) NULL);
            PyTypeObject **p1;
            ::java::lang::Object result((jobject) NULL);

            if (!parseArgs(args, "sK", ::java::lang::Class::initializeClass, &a0, &a1, &p1, ::java::lang::t_Class::parameters_))
            {
              OBJ_CALL(result = self->object.newInstance(a0, a1));
              return ::java::lang::t_Object::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "newInstance", args);
            return NULL;
          }

          static PyObject *t_FilesystemResourceLoader_openResource(t_FilesystemResourceLoader *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::io::InputStream result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.openResource(a0));
              return ::java::io::t_InputStream::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "openResource", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/payloads/TokenOffsetPayloadTokenFilterFactory.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/payloads/TokenOffsetPayloadTokenFilter.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace payloads {

          ::java::lang::Class *TokenOffsetPayloadTokenFilterFactory::class$ = NULL;
          jmethodID *TokenOffsetPayloadTokenFilterFactory::mids$ = NULL;
          bool TokenOffsetPayloadTokenFilterFactory::live$ = false;

          jclass TokenOffsetPayloadTokenFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/payloads/TokenOffsetPayloadTokenFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_4b14c4a0] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/payloads/TokenOffsetPayloadTokenFilter;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TokenOffsetPayloadTokenFilterFactory::TokenOffsetPayloadTokenFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::payloads::TokenOffsetPayloadTokenFilter TokenOffsetPayloadTokenFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::payloads::TokenOffsetPayloadTokenFilter(env->callObjectMethod(this$, mids$[mid_create_4b14c4a0], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace payloads {
          static PyObject *t_TokenOffsetPayloadTokenFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TokenOffsetPayloadTokenFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_TokenOffsetPayloadTokenFilterFactory_init_(t_TokenOffsetPayloadTokenFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_TokenOffsetPayloadTokenFilterFactory_create(t_TokenOffsetPayloadTokenFilterFactory *self, PyObject *args);

          static PyMethodDef t_TokenOffsetPayloadTokenFilterFactory__methods_[] = {
            DECLARE_METHOD(t_TokenOffsetPayloadTokenFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TokenOffsetPayloadTokenFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TokenOffsetPayloadTokenFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(TokenOffsetPayloadTokenFilterFactory, t_TokenOffsetPayloadTokenFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, TokenOffsetPayloadTokenFilterFactory, t_TokenOffsetPayloadTokenFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_TokenOffsetPayloadTokenFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(TokenOffsetPayloadTokenFilterFactory), module, "TokenOffsetPayloadTokenFilterFactory", 0);
          }

          void t_TokenOffsetPayloadTokenFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(TokenOffsetPayloadTokenFilterFactory).tp_dict, "class_", make_descriptor(TokenOffsetPayloadTokenFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(TokenOffsetPayloadTokenFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_TokenOffsetPayloadTokenFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(TokenOffsetPayloadTokenFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TokenOffsetPayloadTokenFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TokenOffsetPayloadTokenFilterFactory::initializeClass, 1)))
              return NULL;
            return t_TokenOffsetPayloadTokenFilterFactory::wrap_Object(TokenOffsetPayloadTokenFilterFactory(((t_TokenOffsetPayloadTokenFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_TokenOffsetPayloadTokenFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TokenOffsetPayloadTokenFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_TokenOffsetPayloadTokenFilterFactory_init_(t_TokenOffsetPayloadTokenFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            TokenOffsetPayloadTokenFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = TokenOffsetPayloadTokenFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_TokenOffsetPayloadTokenFilterFactory_create(t_TokenOffsetPayloadTokenFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::payloads::TokenOffsetPayloadTokenFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::payloads::t_TokenOffsetPayloadTokenFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(TokenOffsetPayloadTokenFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/th/ThaiTokenizer.h"
#include "java/io/Reader.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace th {

          ::java::lang::Class *ThaiTokenizer::class$ = NULL;
          jmethodID *ThaiTokenizer::mids$ = NULL;
          bool ThaiTokenizer::live$ = false;
          jboolean ThaiTokenizer::DBBI_AVAILABLE = (jboolean) 0;

          jclass ThaiTokenizer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/th/ThaiTokenizer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_cf2e3c10] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;)V");
              mids$[mid_init$_5877b8f0] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;)V");
              mids$[mid_setNextSentence_d8d154a6] = env->getMethodID(cls, "setNextSentence", "(II)V");
              mids$[mid_incrementWord_54c6a16a] = env->getMethodID(cls, "incrementWord", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DBBI_AVAILABLE = env->getStaticBooleanField(cls, "DBBI_AVAILABLE");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ThaiTokenizer::ThaiTokenizer(const ::java::io::Reader & a0) : ::org::apache::lucene::analysis::util::SegmentingTokenizerBase(env->newObject(initializeClass, &mids$, mid_init$_cf2e3c10, a0.this$)) {}

          ThaiTokenizer::ThaiTokenizer(const ::org::apache::lucene::util::AttributeFactory & a0, const ::java::io::Reader & a1) : ::org::apache::lucene::analysis::util::SegmentingTokenizerBase(env->newObject(initializeClass, &mids$, mid_init$_5877b8f0, a0.this$, a1.this$)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace th {
          static PyObject *t_ThaiTokenizer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ThaiTokenizer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ThaiTokenizer_init_(t_ThaiTokenizer *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_ThaiTokenizer__methods_[] = {
            DECLARE_METHOD(t_ThaiTokenizer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ThaiTokenizer, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ThaiTokenizer, t_ThaiTokenizer, ::org::apache::lucene::analysis::util::SegmentingTokenizerBase, ThaiTokenizer, t_ThaiTokenizer_init_, 0, 0, 0, 0, 0);

          void t_ThaiTokenizer::install(PyObject *module)
          {
            installType(&PY_TYPE(ThaiTokenizer), module, "ThaiTokenizer", 0);
          }

          void t_ThaiTokenizer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ThaiTokenizer).tp_dict, "class_", make_descriptor(ThaiTokenizer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ThaiTokenizer).tp_dict, "wrapfn_", make_descriptor(t_ThaiTokenizer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ThaiTokenizer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(ThaiTokenizer::initializeClass);
            PyDict_SetItemString(PY_TYPE(ThaiTokenizer).tp_dict, "DBBI_AVAILABLE", make_descriptor(ThaiTokenizer::DBBI_AVAILABLE));
          }

          static PyObject *t_ThaiTokenizer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ThaiTokenizer::initializeClass, 1)))
              return NULL;
            return t_ThaiTokenizer::wrap_Object(ThaiTokenizer(((t_ThaiTokenizer *) arg)->object.this$));
          }
          static PyObject *t_ThaiTokenizer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ThaiTokenizer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ThaiTokenizer_init_(t_ThaiTokenizer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::java::io::Reader a0((jobject) NULL);
                ThaiTokenizer object((jobject) NULL);

                if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
                {
                  INT_CALL(object = ThaiTokenizer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
                ::java::io::Reader a1((jobject) NULL);
                ThaiTokenizer object((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = ThaiTokenizer(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/xml/builders/FilteredQueryBuilder.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/queryparser/xml/QueryBuilder.h"
#include "org/apache/lucene/queryparser/xml/FilterBuilder.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {

            ::java::lang::Class *FilteredQueryBuilder::class$ = NULL;
            jmethodID *FilteredQueryBuilder::mids$ = NULL;
            bool FilteredQueryBuilder::live$ = false;

            jclass FilteredQueryBuilder::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/xml/builders/FilteredQueryBuilder");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_60b0c0b9] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/xml/FilterBuilder;Lorg/apache/lucene/queryparser/xml/QueryBuilder;)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            FilteredQueryBuilder::FilteredQueryBuilder(const ::org::apache::lucene::queryparser::xml::FilterBuilder & a0, const ::org::apache::lucene::queryparser::xml::QueryBuilder & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_60b0c0b9, a0.this$, a1.this$)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {
            static PyObject *t_FilteredQueryBuilder_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_FilteredQueryBuilder_instance_(PyTypeObject *type, PyObject *arg);
            static int t_FilteredQueryBuilder_init_(t_FilteredQueryBuilder *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_FilteredQueryBuilder__methods_[] = {
              DECLARE_METHOD(t_FilteredQueryBuilder, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FilteredQueryBuilder, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(FilteredQueryBuilder, t_FilteredQueryBuilder, ::java::lang::Object, FilteredQueryBuilder, t_FilteredQueryBuilder_init_, 0, 0, 0, 0, 0);

            void t_FilteredQueryBuilder::install(PyObject *module)
            {
              installType(&PY_TYPE(FilteredQueryBuilder), module, "FilteredQueryBuilder", 0);
            }

            void t_FilteredQueryBuilder::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(FilteredQueryBuilder).tp_dict, "class_", make_descriptor(FilteredQueryBuilder::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(FilteredQueryBuilder).tp_dict, "wrapfn_", make_descriptor(t_FilteredQueryBuilder::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(FilteredQueryBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_FilteredQueryBuilder_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, FilteredQueryBuilder::initializeClass, 1)))
                return NULL;
              return t_FilteredQueryBuilder::wrap_Object(FilteredQueryBuilder(((t_FilteredQueryBuilder *) arg)->object.this$));
            }
            static PyObject *t_FilteredQueryBuilder_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, FilteredQueryBuilder::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_FilteredQueryBuilder_init_(t_FilteredQueryBuilder *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::queryparser::xml::FilterBuilder a0((jobject) NULL);
              ::org::apache::lucene::queryparser::xml::QueryBuilder a1((jobject) NULL);
              FilteredQueryBuilder object((jobject) NULL);

              if (!parseArgs(args, "kk", ::org::apache::lucene::queryparser::xml::FilterBuilder::initializeClass, ::org::apache::lucene::queryparser::xml::QueryBuilder::initializeClass, &a0, &a1))
              {
                INT_CALL(object = FilteredQueryBuilder(a0, a1));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/SimilarityBase.h"
#include "org/apache/lucene/index/FieldInvertState.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/search/TermStatistics.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/CollectionStatistics.h"
#include "org/apache/lucene/search/similarities/Similarity$SimWeight.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/similarities/Similarity$SimScorer.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *SimilarityBase::class$ = NULL;
          jmethodID *SimilarityBase::mids$ = NULL;
          bool SimilarityBase::live$ = false;

          jclass SimilarityBase::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/SimilarityBase");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_computeNorm_6ff84e0e] = env->getMethodID(cls, "computeNorm", "(Lorg/apache/lucene/index/FieldInvertState;)J");
              mids$[mid_computeWeight_8bb6ee0b] = env->getMethodID(cls, "computeWeight", "(FLorg/apache/lucene/search/CollectionStatistics;[Lorg/apache/lucene/search/TermStatistics;)Lorg/apache/lucene/search/similarities/Similarity$SimWeight;");
              mids$[mid_getDiscountOverlaps_54c6a16a] = env->getMethodID(cls, "getDiscountOverlaps", "()Z");
              mids$[mid_log2_5d1c7657] = env->getStaticMethodID(cls, "log2", "(D)D");
              mids$[mid_setDiscountOverlaps_bb0c767f] = env->getMethodID(cls, "setDiscountOverlaps", "(Z)V");
              mids$[mid_simScorer_9a2cfed8] = env->getMethodID(cls, "simScorer", "(Lorg/apache/lucene/search/similarities/Similarity$SimWeight;Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/search/similarities/Similarity$SimScorer;");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
              mids$[mid_score_63482206] = env->getMethodID(cls, "score", "(Lorg/apache/lucene/search/similarities/BasicStats;FF)F");
              mids$[mid_explain_347d95f8] = env->getMethodID(cls, "explain", "(Lorg/apache/lucene/search/Explanation;Lorg/apache/lucene/search/similarities/BasicStats;IFF)V");
              mids$[mid_explain_be9c5a0c] = env->getMethodID(cls, "explain", "(Lorg/apache/lucene/search/similarities/BasicStats;ILorg/apache/lucene/search/Explanation;F)Lorg/apache/lucene/search/Explanation;");
              mids$[mid_decodeNormValue_b2271697] = env->getMethodID(cls, "decodeNormValue", "(B)F");
              mids$[mid_newStats_5129800c] = env->getMethodID(cls, "newStats", "(Ljava/lang/String;F)Lorg/apache/lucene/search/similarities/BasicStats;");
              mids$[mid_fillBasicStats_c856a532] = env->getMethodID(cls, "fillBasicStats", "(Lorg/apache/lucene/search/similarities/BasicStats;Lorg/apache/lucene/search/CollectionStatistics;Lorg/apache/lucene/search/TermStatistics;)V");
              mids$[mid_encodeNormValue_f1b0c010] = env->getMethodID(cls, "encodeNormValue", "(FF)B");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SimilarityBase::SimilarityBase() : ::org::apache::lucene::search::similarities::Similarity(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jlong SimilarityBase::computeNorm(const ::org::apache::lucene::index::FieldInvertState & a0) const
          {
            return env->callLongMethod(this$, mids$[mid_computeNorm_6ff84e0e], a0.this$);
          }

          ::org::apache::lucene::search::similarities::Similarity$SimWeight SimilarityBase::computeWeight(jfloat a0, const ::org::apache::lucene::search::CollectionStatistics & a1, const JArray< ::org::apache::lucene::search::TermStatistics > & a2) const
          {
            return ::org::apache::lucene::search::similarities::Similarity$SimWeight(env->callObjectMethod(this$, mids$[mid_computeWeight_8bb6ee0b], a0, a1.this$, a2.this$));
          }

          jboolean SimilarityBase::getDiscountOverlaps() const
          {
            return env->callBooleanMethod(this$, mids$[mid_getDiscountOverlaps_54c6a16a]);
          }

          jdouble SimilarityBase::log2(jdouble a0)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticDoubleMethod(cls, mids$[mid_log2_5d1c7657], a0);
          }

          void SimilarityBase::setDiscountOverlaps(jboolean a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setDiscountOverlaps_bb0c767f], a0);
          }

          ::org::apache::lucene::search::similarities::Similarity$SimScorer SimilarityBase::simScorer(const ::org::apache::lucene::search::similarities::Similarity$SimWeight & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1) const
          {
            return ::org::apache::lucene::search::similarities::Similarity$SimScorer(env->callObjectMethod(this$, mids$[mid_simScorer_9a2cfed8], a0.this$, a1.this$));
          }

          ::java::lang::String SimilarityBase::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_SimilarityBase_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SimilarityBase_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SimilarityBase_init_(t_SimilarityBase *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SimilarityBase_computeNorm(t_SimilarityBase *self, PyObject *args);
          static PyObject *t_SimilarityBase_computeWeight(t_SimilarityBase *self, PyObject *args);
          static PyObject *t_SimilarityBase_getDiscountOverlaps(t_SimilarityBase *self);
          static PyObject *t_SimilarityBase_log2(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SimilarityBase_setDiscountOverlaps(t_SimilarityBase *self, PyObject *arg);
          static PyObject *t_SimilarityBase_simScorer(t_SimilarityBase *self, PyObject *args);
          static PyObject *t_SimilarityBase_toString(t_SimilarityBase *self, PyObject *args);
          static PyObject *t_SimilarityBase_get__discountOverlaps(t_SimilarityBase *self, void *data);
          static int t_SimilarityBase_set__discountOverlaps(t_SimilarityBase *self, PyObject *arg, void *data);
          static PyGetSetDef t_SimilarityBase__fields_[] = {
            DECLARE_GETSET_FIELD(t_SimilarityBase, discountOverlaps),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SimilarityBase__methods_[] = {
            DECLARE_METHOD(t_SimilarityBase, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SimilarityBase, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SimilarityBase, computeNorm, METH_VARARGS),
            DECLARE_METHOD(t_SimilarityBase, computeWeight, METH_VARARGS),
            DECLARE_METHOD(t_SimilarityBase, getDiscountOverlaps, METH_NOARGS),
            DECLARE_METHOD(t_SimilarityBase, log2, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SimilarityBase, setDiscountOverlaps, METH_O),
            DECLARE_METHOD(t_SimilarityBase, simScorer, METH_VARARGS),
            DECLARE_METHOD(t_SimilarityBase, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SimilarityBase, t_SimilarityBase, ::org::apache::lucene::search::similarities::Similarity, SimilarityBase, t_SimilarityBase_init_, 0, 0, t_SimilarityBase__fields_, 0, 0);

          void t_SimilarityBase::install(PyObject *module)
          {
            installType(&PY_TYPE(SimilarityBase), module, "SimilarityBase", 0);
          }

          void t_SimilarityBase::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SimilarityBase).tp_dict, "class_", make_descriptor(SimilarityBase::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SimilarityBase).tp_dict, "wrapfn_", make_descriptor(t_SimilarityBase::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SimilarityBase).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SimilarityBase_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SimilarityBase::initializeClass, 1)))
              return NULL;
            return t_SimilarityBase::wrap_Object(SimilarityBase(((t_SimilarityBase *) arg)->object.this$));
          }
          static PyObject *t_SimilarityBase_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SimilarityBase::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SimilarityBase_init_(t_SimilarityBase *self, PyObject *args, PyObject *kwds)
          {
            SimilarityBase object((jobject) NULL);

            INT_CALL(object = SimilarityBase());
            self->object = object;

            return 0;
          }

          static PyObject *t_SimilarityBase_computeNorm(t_SimilarityBase *self, PyObject *args)
          {
            ::org::apache::lucene::index::FieldInvertState a0((jobject) NULL);
            jlong result;

            if (!parseArgs(args, "k", ::org::apache::lucene::index::FieldInvertState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.computeNorm(a0));
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(&PY_TYPE(SimilarityBase), (PyObject *) self, "computeNorm", args, 2);
          }

          static PyObject *t_SimilarityBase_computeWeight(t_SimilarityBase *self, PyObject *args)
          {
            jfloat a0;
            ::org::apache::lucene::search::CollectionStatistics a1((jobject) NULL);
            JArray< ::org::apache::lucene::search::TermStatistics > a2((jobject) NULL);
            ::org::apache::lucene::search::similarities::Similarity$SimWeight result((jobject) NULL);

            if (!parseArgs(args, "Fk[k", ::org::apache::lucene::search::CollectionStatistics::initializeClass, ::org::apache::lucene::search::TermStatistics::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.computeWeight(a0, a1, a2));
              return ::org::apache::lucene::search::similarities::t_Similarity$SimWeight::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(SimilarityBase), (PyObject *) self, "computeWeight", args, 2);
          }

          static PyObject *t_SimilarityBase_getDiscountOverlaps(t_SimilarityBase *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.getDiscountOverlaps());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_SimilarityBase_log2(PyTypeObject *type, PyObject *arg)
          {
            jdouble a0;
            jdouble result;

            if (!parseArg(arg, "D", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::search::similarities::SimilarityBase::log2(a0));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError(type, "log2", arg);
            return NULL;
          }

          static PyObject *t_SimilarityBase_setDiscountOverlaps(t_SimilarityBase *self, PyObject *arg)
          {
            jboolean a0;

            if (!parseArg(arg, "Z", &a0))
            {
              OBJ_CALL(self->object.setDiscountOverlaps(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setDiscountOverlaps", arg);
            return NULL;
          }

          static PyObject *t_SimilarityBase_simScorer(t_SimilarityBase *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::Similarity$SimWeight a0((jobject) NULL);
            ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
            ::org::apache::lucene::search::similarities::Similarity$SimScorer result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::search::similarities::Similarity$SimWeight::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.simScorer(a0, a1));
              return ::org::apache::lucene::search::similarities::t_Similarity$SimScorer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(SimilarityBase), (PyObject *) self, "simScorer", args, 2);
          }

          static PyObject *t_SimilarityBase_toString(t_SimilarityBase *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(SimilarityBase), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_SimilarityBase_get__discountOverlaps(t_SimilarityBase *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.getDiscountOverlaps());
            Py_RETURN_BOOL(value);
          }
          static int t_SimilarityBase_set__discountOverlaps(t_SimilarityBase *self, PyObject *arg, void *data)
          {
            {
              jboolean value;
              if (!parseArg(arg, "Z", &value))
              {
                INT_CALL(self->object.setDiscountOverlaps(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "discountOverlaps", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/no/NorwegianMinimalStemFilterFactory.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace no {

          ::java::lang::Class *NorwegianMinimalStemFilterFactory::class$ = NULL;
          jmethodID *NorwegianMinimalStemFilterFactory::mids$ = NULL;
          bool NorwegianMinimalStemFilterFactory::live$ = false;

          jclass NorwegianMinimalStemFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/no/NorwegianMinimalStemFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          NorwegianMinimalStemFilterFactory::NorwegianMinimalStemFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream NorwegianMinimalStemFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace no {
          static PyObject *t_NorwegianMinimalStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_NorwegianMinimalStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_NorwegianMinimalStemFilterFactory_init_(t_NorwegianMinimalStemFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_NorwegianMinimalStemFilterFactory_create(t_NorwegianMinimalStemFilterFactory *self, PyObject *args);

          static PyMethodDef t_NorwegianMinimalStemFilterFactory__methods_[] = {
            DECLARE_METHOD(t_NorwegianMinimalStemFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NorwegianMinimalStemFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NorwegianMinimalStemFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(NorwegianMinimalStemFilterFactory, t_NorwegianMinimalStemFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, NorwegianMinimalStemFilterFactory, t_NorwegianMinimalStemFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_NorwegianMinimalStemFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(NorwegianMinimalStemFilterFactory), module, "NorwegianMinimalStemFilterFactory", 0);
          }

          void t_NorwegianMinimalStemFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(NorwegianMinimalStemFilterFactory).tp_dict, "class_", make_descriptor(NorwegianMinimalStemFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(NorwegianMinimalStemFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_NorwegianMinimalStemFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(NorwegianMinimalStemFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_NorwegianMinimalStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, NorwegianMinimalStemFilterFactory::initializeClass, 1)))
              return NULL;
            return t_NorwegianMinimalStemFilterFactory::wrap_Object(NorwegianMinimalStemFilterFactory(((t_NorwegianMinimalStemFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_NorwegianMinimalStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, NorwegianMinimalStemFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_NorwegianMinimalStemFilterFactory_init_(t_NorwegianMinimalStemFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            NorwegianMinimalStemFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = NorwegianMinimalStemFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_NorwegianMinimalStemFilterFactory_create(t_NorwegianMinimalStemFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(NorwegianMinimalStemFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/RemoveDuplicatesTokenFilterFactory.h"
#include "org/apache/lucene/analysis/miscellaneous/RemoveDuplicatesTokenFilter.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *RemoveDuplicatesTokenFilterFactory::class$ = NULL;
          jmethodID *RemoveDuplicatesTokenFilterFactory::mids$ = NULL;
          bool RemoveDuplicatesTokenFilterFactory::live$ = false;

          jclass RemoveDuplicatesTokenFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/RemoveDuplicatesTokenFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_f366c0be] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/miscellaneous/RemoveDuplicatesTokenFilter;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          RemoveDuplicatesTokenFilterFactory::RemoveDuplicatesTokenFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::miscellaneous::RemoveDuplicatesTokenFilter RemoveDuplicatesTokenFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::miscellaneous::RemoveDuplicatesTokenFilter(env->callObjectMethod(this$, mids$[mid_create_f366c0be], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_RemoveDuplicatesTokenFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_RemoveDuplicatesTokenFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_RemoveDuplicatesTokenFilterFactory_init_(t_RemoveDuplicatesTokenFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_RemoveDuplicatesTokenFilterFactory_create(t_RemoveDuplicatesTokenFilterFactory *self, PyObject *args);

          static PyMethodDef t_RemoveDuplicatesTokenFilterFactory__methods_[] = {
            DECLARE_METHOD(t_RemoveDuplicatesTokenFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_RemoveDuplicatesTokenFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_RemoveDuplicatesTokenFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(RemoveDuplicatesTokenFilterFactory, t_RemoveDuplicatesTokenFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, RemoveDuplicatesTokenFilterFactory, t_RemoveDuplicatesTokenFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_RemoveDuplicatesTokenFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(RemoveDuplicatesTokenFilterFactory), module, "RemoveDuplicatesTokenFilterFactory", 0);
          }

          void t_RemoveDuplicatesTokenFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(RemoveDuplicatesTokenFilterFactory).tp_dict, "class_", make_descriptor(RemoveDuplicatesTokenFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(RemoveDuplicatesTokenFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_RemoveDuplicatesTokenFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(RemoveDuplicatesTokenFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_RemoveDuplicatesTokenFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, RemoveDuplicatesTokenFilterFactory::initializeClass, 1)))
              return NULL;
            return t_RemoveDuplicatesTokenFilterFactory::wrap_Object(RemoveDuplicatesTokenFilterFactory(((t_RemoveDuplicatesTokenFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_RemoveDuplicatesTokenFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, RemoveDuplicatesTokenFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_RemoveDuplicatesTokenFilterFactory_init_(t_RemoveDuplicatesTokenFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            RemoveDuplicatesTokenFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = RemoveDuplicatesTokenFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_RemoveDuplicatesTokenFilterFactory_create(t_RemoveDuplicatesTokenFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::miscellaneous::RemoveDuplicatesTokenFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::miscellaneous::t_RemoveDuplicatesTokenFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(RemoveDuplicatesTokenFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/stempel/StempelPolishStemFilterFactory.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace stempel {

          ::java::lang::Class *StempelPolishStemFilterFactory::class$ = NULL;
          jmethodID *StempelPolishStemFilterFactory::mids$ = NULL;
          bool StempelPolishStemFilterFactory::live$ = false;

          jclass StempelPolishStemFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/stempel/StempelPolishStemFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          StempelPolishStemFilterFactory::StempelPolishStemFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream StempelPolishStemFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace stempel {
          static PyObject *t_StempelPolishStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_StempelPolishStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_StempelPolishStemFilterFactory_init_(t_StempelPolishStemFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_StempelPolishStemFilterFactory_create(t_StempelPolishStemFilterFactory *self, PyObject *args);

          static PyMethodDef t_StempelPolishStemFilterFactory__methods_[] = {
            DECLARE_METHOD(t_StempelPolishStemFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StempelPolishStemFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StempelPolishStemFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(StempelPolishStemFilterFactory, t_StempelPolishStemFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, StempelPolishStemFilterFactory, t_StempelPolishStemFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_StempelPolishStemFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(StempelPolishStemFilterFactory), module, "StempelPolishStemFilterFactory", 0);
          }

          void t_StempelPolishStemFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(StempelPolishStemFilterFactory).tp_dict, "class_", make_descriptor(StempelPolishStemFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(StempelPolishStemFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_StempelPolishStemFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(StempelPolishStemFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_StempelPolishStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, StempelPolishStemFilterFactory::initializeClass, 1)))
              return NULL;
            return t_StempelPolishStemFilterFactory::wrap_Object(StempelPolishStemFilterFactory(((t_StempelPolishStemFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_StempelPolishStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, StempelPolishStemFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_StempelPolishStemFilterFactory_init_(t_StempelPolishStemFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            StempelPolishStemFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = StempelPolishStemFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_StempelPolishStemFilterFactory_create(t_StempelPolishStemFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(StempelPolishStemFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/io/IOException.h"
#include "java/io/Closeable.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {

        ::java::lang::Class *TokenStream::class$ = NULL;
        jmethodID *TokenStream::mids$ = NULL;
        bool TokenStream::live$ = false;
        ::org::apache::lucene::util::AttributeFactory *TokenStream::DEFAULT_TOKEN_ATTRIBUTE_FACTORY = NULL;

        jclass TokenStream::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/TokenStream");

            mids$ = new jmethodID[max_mid];
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_end_54c6a166] = env->getMethodID(cls, "end", "()V");
            mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
            mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            DEFAULT_TOKEN_ATTRIBUTE_FACTORY = new ::org::apache::lucene::util::AttributeFactory(env->getStaticObjectField(cls, "DEFAULT_TOKEN_ATTRIBUTE_FACTORY", "Lorg/apache/lucene/util/AttributeFactory;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void TokenStream::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        void TokenStream::end() const
        {
          env->callVoidMethod(this$, mids$[mid_end_54c6a166]);
        }

        jboolean TokenStream::incrementToken() const
        {
          return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
        }

        void TokenStream::reset() const
        {
          env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        static PyObject *t_TokenStream_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TokenStream_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TokenStream_close(t_TokenStream *self);
        static PyObject *t_TokenStream_end(t_TokenStream *self);
        static PyObject *t_TokenStream_incrementToken(t_TokenStream *self);
        static PyObject *t_TokenStream_reset(t_TokenStream *self);

        static PyMethodDef t_TokenStream__methods_[] = {
          DECLARE_METHOD(t_TokenStream, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TokenStream, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TokenStream, close, METH_NOARGS),
          DECLARE_METHOD(t_TokenStream, end, METH_NOARGS),
          DECLARE_METHOD(t_TokenStream, incrementToken, METH_NOARGS),
          DECLARE_METHOD(t_TokenStream, reset, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TokenStream, t_TokenStream, ::org::apache::lucene::util::AttributeSource, TokenStream, abstract_init, 0, 0, 0, 0, 0);

        void t_TokenStream::install(PyObject *module)
        {
          installType(&PY_TYPE(TokenStream), module, "TokenStream", 0);
        }

        void t_TokenStream::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TokenStream).tp_dict, "class_", make_descriptor(TokenStream::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TokenStream).tp_dict, "wrapfn_", make_descriptor(t_TokenStream::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TokenStream).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(TokenStream::initializeClass);
          PyDict_SetItemString(PY_TYPE(TokenStream).tp_dict, "DEFAULT_TOKEN_ATTRIBUTE_FACTORY", make_descriptor(::org::apache::lucene::util::t_AttributeFactory::wrap_Object(*TokenStream::DEFAULT_TOKEN_ATTRIBUTE_FACTORY)));
        }

        static PyObject *t_TokenStream_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TokenStream::initializeClass, 1)))
            return NULL;
          return t_TokenStream::wrap_Object(TokenStream(((t_TokenStream *) arg)->object.this$));
        }
        static PyObject *t_TokenStream_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TokenStream::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_TokenStream_close(t_TokenStream *self)
        {
          OBJ_CALL(self->object.close());
          Py_RETURN_NONE;
        }

        static PyObject *t_TokenStream_end(t_TokenStream *self)
        {
          OBJ_CALL(self->object.end());
          Py_RETURN_NONE;
        }

        static PyObject *t_TokenStream_incrementToken(t_TokenStream *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.incrementToken());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_TokenStream_reset(t_TokenStream *self)
        {
          OBJ_CALL(self->object.reset());
          Py_RETURN_NONE;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/BooleanQuery$TooManyClauses.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *BooleanQuery$TooManyClauses::class$ = NULL;
        jmethodID *BooleanQuery$TooManyClauses::mids$ = NULL;
        bool BooleanQuery$TooManyClauses::live$ = false;

        jclass BooleanQuery$TooManyClauses::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/BooleanQuery$TooManyClauses");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        BooleanQuery$TooManyClauses::BooleanQuery$TooManyClauses() : ::java::lang::RuntimeException(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_BooleanQuery$TooManyClauses_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BooleanQuery$TooManyClauses_instance_(PyTypeObject *type, PyObject *arg);
        static int t_BooleanQuery$TooManyClauses_init_(t_BooleanQuery$TooManyClauses *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_BooleanQuery$TooManyClauses__methods_[] = {
          DECLARE_METHOD(t_BooleanQuery$TooManyClauses, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BooleanQuery$TooManyClauses, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(BooleanQuery$TooManyClauses, t_BooleanQuery$TooManyClauses, ::java::lang::RuntimeException, BooleanQuery$TooManyClauses, t_BooleanQuery$TooManyClauses_init_, 0, 0, 0, 0, 0);

        void t_BooleanQuery$TooManyClauses::install(PyObject *module)
        {
          installType(&PY_TYPE(BooleanQuery$TooManyClauses), module, "BooleanQuery$TooManyClauses", 0);
        }

        void t_BooleanQuery$TooManyClauses::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(BooleanQuery$TooManyClauses).tp_dict, "class_", make_descriptor(BooleanQuery$TooManyClauses::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(BooleanQuery$TooManyClauses).tp_dict, "wrapfn_", make_descriptor(t_BooleanQuery$TooManyClauses::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(BooleanQuery$TooManyClauses).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_BooleanQuery$TooManyClauses_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, BooleanQuery$TooManyClauses::initializeClass, 1)))
            return NULL;
          return t_BooleanQuery$TooManyClauses::wrap_Object(BooleanQuery$TooManyClauses(((t_BooleanQuery$TooManyClauses *) arg)->object.this$));
        }
        static PyObject *t_BooleanQuery$TooManyClauses_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, BooleanQuery$TooManyClauses::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_BooleanQuery$TooManyClauses_init_(t_BooleanQuery$TooManyClauses *self, PyObject *args, PyObject *kwds)
        {
          BooleanQuery$TooManyClauses object((jobject) NULL);

          INT_CALL(object = BooleanQuery$TooManyClauses());
          self->object = object;

          return 0;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/lang/Runtime.h"
#include "java/io/OutputStream.h"
#include "java/lang/Process.h"
#include "java/lang/Thread.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "java/io/File.h"
#include "java/io/InputStream.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace java {
  namespace lang {

    ::java::lang::Class *Runtime::class$ = NULL;
    jmethodID *Runtime::mids$ = NULL;
    bool Runtime::live$ = false;

    jclass Runtime::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/lang/Runtime");

        mids$ = new jmethodID[max_mid];
        mids$[mid_addShutdownHook_cfc68b69] = env->getMethodID(cls, "addShutdownHook", "(Ljava/lang/Thread;)V");
        mids$[mid_availableProcessors_54c6a179] = env->getMethodID(cls, "availableProcessors", "()I");
        mids$[mid_exec_cb215688] = env->getMethodID(cls, "exec", "([Ljava/lang/String;)Ljava/lang/Process;");
        mids$[mid_exec_a3a0dfc8] = env->getMethodID(cls, "exec", "(Ljava/lang/String;)Ljava/lang/Process;");
        mids$[mid_exec_d0c45a12] = env->getMethodID(cls, "exec", "([Ljava/lang/String;[Ljava/lang/String;)Ljava/lang/Process;");
        mids$[mid_exec_dfe32e32] = env->getMethodID(cls, "exec", "(Ljava/lang/String;[Ljava/lang/String;)Ljava/lang/Process;");
        mids$[mid_exec_e1ed077f] = env->getMethodID(cls, "exec", "(Ljava/lang/String;[Ljava/lang/String;Ljava/io/File;)Ljava/lang/Process;");
        mids$[mid_exec_5726a223] = env->getMethodID(cls, "exec", "([Ljava/lang/String;[Ljava/lang/String;Ljava/io/File;)Ljava/lang/Process;");
        mids$[mid_exit_39c7bd3c] = env->getMethodID(cls, "exit", "(I)V");
        mids$[mid_freeMemory_54c6a17a] = env->getMethodID(cls, "freeMemory", "()J");
        mids$[mid_gc_54c6a166] = env->getMethodID(cls, "gc", "()V");
        mids$[mid_getLocalizedInputStream_04932eef] = env->getMethodID(cls, "getLocalizedInputStream", "(Ljava/io/InputStream;)Ljava/io/InputStream;");
        mids$[mid_getLocalizedOutputStream_97714a3f] = env->getMethodID(cls, "getLocalizedOutputStream", "(Ljava/io/OutputStream;)Ljava/io/OutputStream;");
        mids$[mid_getRuntime_620bf90f] = env->getStaticMethodID(cls, "getRuntime", "()Ljava/lang/Runtime;");
        mids$[mid_halt_39c7bd3c] = env->getMethodID(cls, "halt", "(I)V");
        mids$[mid_load_5fdc3f48] = env->getMethodID(cls, "load", "(Ljava/lang/String;)V");
        mids$[mid_loadLibrary_5fdc3f48] = env->getMethodID(cls, "loadLibrary", "(Ljava/lang/String;)V");
        mids$[mid_maxMemory_54c6a17a] = env->getMethodID(cls, "maxMemory", "()J");
        mids$[mid_removeShutdownHook_cfc68b65] = env->getMethodID(cls, "removeShutdownHook", "(Ljava/lang/Thread;)Z");
        mids$[mid_runFinalization_54c6a166] = env->getMethodID(cls, "runFinalization", "()V");
        mids$[mid_runFinalizersOnExit_bb0c767f] = env->getStaticMethodID(cls, "runFinalizersOnExit", "(Z)V");
        mids$[mid_totalMemory_54c6a17a] = env->getMethodID(cls, "totalMemory", "()J");
        mids$[mid_traceInstructions_bb0c767f] = env->getMethodID(cls, "traceInstructions", "(Z)V");
        mids$[mid_traceMethodCalls_bb0c767f] = env->getMethodID(cls, "traceMethodCalls", "(Z)V");

        class$ = (::java::lang::Class *) new JObject(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    void Runtime::addShutdownHook(const ::java::lang::Thread & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_addShutdownHook_cfc68b69], a0.this$);
    }

    jint Runtime::availableProcessors() const
    {
      return env->callIntMethod(this$, mids$[mid_availableProcessors_54c6a179]);
    }

    ::java::lang::Process Runtime::exec(const JArray< ::java::lang::String > & a0) const
    {
      return ::java::lang::Process(env->callObjectMethod(this$, mids$[mid_exec_cb215688], a0.this$));
    }

    ::java::lang::Process Runtime::exec(const ::java::lang::String & a0) const
    {
      return ::java::lang::Process(env->callObjectMethod(this$, mids$[mid_exec_a3a0dfc8], a0.this$));
    }

    ::java::lang::Process Runtime::exec(const JArray< ::java::lang::String > & a0, const JArray< ::java::lang::String > & a1) const
    {
      return ::java::lang::Process(env->callObjectMethod(this$, mids$[mid_exec_d0c45a12], a0.this$, a1.this$));
    }

    ::java::lang::Process Runtime::exec(const ::java::lang::String & a0, const JArray< ::java::lang::String > & a1) const
    {
      return ::java::lang::Process(env->callObjectMethod(this$, mids$[mid_exec_dfe32e32], a0.this$, a1.this$));
    }

    ::java::lang::Process Runtime::exec(const ::java::lang::String & a0, const JArray< ::java::lang::String > & a1, const ::java::io::File & a2) const
    {
      return ::java::lang::Process(env->callObjectMethod(this$, mids$[mid_exec_e1ed077f], a0.this$, a1.this$, a2.this$));
    }

    ::java::lang::Process Runtime::exec(const JArray< ::java::lang::String > & a0, const JArray< ::java::lang::String > & a1, const ::java::io::File & a2) const
    {
      return ::java::lang::Process(env->callObjectMethod(this$, mids$[mid_exec_5726a223], a0.this$, a1.this$, a2.this$));
    }

    void Runtime::exit(jint a0) const
    {
      env->callVoidMethod(this$, mids$[mid_exit_39c7bd3c], a0);
    }

    jlong Runtime::freeMemory() const
    {
      return env->callLongMethod(this$, mids$[mid_freeMemory_54c6a17a]);
    }

    void Runtime::gc() const
    {
      env->callVoidMethod(this$, mids$[mid_gc_54c6a166]);
    }

    ::java::io::InputStream Runtime::getLocalizedInputStream(const ::java::io::InputStream & a0) const
    {
      return ::java::io::InputStream(env->callObjectMethod(this$, mids$[mid_getLocalizedInputStream_04932eef], a0.this$));
    }

    ::java::io::OutputStream Runtime::getLocalizedOutputStream(const ::java::io::OutputStream & a0) const
    {
      return ::java::io::OutputStream(env->callObjectMethod(this$, mids$[mid_getLocalizedOutputStream_97714a3f], a0.this$));
    }

    Runtime Runtime::getRuntime()
    {
      jclass cls = env->getClass(initializeClass);
      return Runtime(env->callStaticObjectMethod(cls, mids$[mid_getRuntime_620bf90f]));
    }

    void Runtime::halt(jint a0) const
    {
      env->callVoidMethod(this$, mids$[mid_halt_39c7bd3c], a0);
    }

    void Runtime::load(const ::java::lang::String & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_load_5fdc3f48], a0.this$);
    }

    void Runtime::loadLibrary(const ::java::lang::String & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_loadLibrary_5fdc3f48], a0.this$);
    }

    jlong Runtime::maxMemory() const
    {
      return env->callLongMethod(this$, mids$[mid_maxMemory_54c6a17a]);
    }

    jboolean Runtime::removeShutdownHook(const ::java::lang::Thread & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_removeShutdownHook_cfc68b65], a0.this$);
    }

    void Runtime::runFinalization() const
    {
      env->callVoidMethod(this$, mids$[mid_runFinalization_54c6a166]);
    }

    void Runtime::runFinalizersOnExit(jboolean a0)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_runFinalizersOnExit_bb0c767f], a0);
    }

    jlong Runtime::totalMemory() const
    {
      return env->callLongMethod(this$, mids$[mid_totalMemory_54c6a17a]);
    }

    void Runtime::traceInstructions(jboolean a0) const
    {
      env->callVoidMethod(this$, mids$[mid_traceInstructions_bb0c767f], a0);
    }

    void Runtime::traceMethodCalls(jboolean a0) const
    {
      env->callVoidMethod(this$, mids$[mid_traceMethodCalls_bb0c767f], a0);
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace lang {
    static PyObject *t_Runtime_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Runtime_instance_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Runtime_addShutdownHook(t_Runtime *self, PyObject *arg);
    static PyObject *t_Runtime_availableProcessors(t_Runtime *self);
    static PyObject *t_Runtime_exec(t_Runtime *self, PyObject *args);
    static PyObject *t_Runtime_exit(t_Runtime *self, PyObject *arg);
    static PyObject *t_Runtime_freeMemory(t_Runtime *self);
    static PyObject *t_Runtime_gc(t_Runtime *self);
    static PyObject *t_Runtime_getLocalizedInputStream(t_Runtime *self, PyObject *arg);
    static PyObject *t_Runtime_getLocalizedOutputStream(t_Runtime *self, PyObject *arg);
    static PyObject *t_Runtime_getRuntime(PyTypeObject *type);
    static PyObject *t_Runtime_halt(t_Runtime *self, PyObject *arg);
    static PyObject *t_Runtime_load(t_Runtime *self, PyObject *arg);
    static PyObject *t_Runtime_loadLibrary(t_Runtime *self, PyObject *arg);
    static PyObject *t_Runtime_maxMemory(t_Runtime *self);
    static PyObject *t_Runtime_removeShutdownHook(t_Runtime *self, PyObject *arg);
    static PyObject *t_Runtime_runFinalization(t_Runtime *self);
    static PyObject *t_Runtime_runFinalizersOnExit(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Runtime_totalMemory(t_Runtime *self);
    static PyObject *t_Runtime_traceInstructions(t_Runtime *self, PyObject *arg);
    static PyObject *t_Runtime_traceMethodCalls(t_Runtime *self, PyObject *arg);
    static PyObject *t_Runtime_get__runtime(t_Runtime *self, void *data);
    static PyGetSetDef t_Runtime__fields_[] = {
      DECLARE_GET_FIELD(t_Runtime, runtime),
      { NULL, NULL, NULL, NULL, NULL }
    };

    static PyMethodDef t_Runtime__methods_[] = {
      DECLARE_METHOD(t_Runtime, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Runtime, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Runtime, addShutdownHook, METH_O),
      DECLARE_METHOD(t_Runtime, availableProcessors, METH_NOARGS),
      DECLARE_METHOD(t_Runtime, exec, METH_VARARGS),
      DECLARE_METHOD(t_Runtime, exit, METH_O),
      DECLARE_METHOD(t_Runtime, freeMemory, METH_NOARGS),
      DECLARE_METHOD(t_Runtime, gc, METH_NOARGS),
      DECLARE_METHOD(t_Runtime, getLocalizedInputStream, METH_O),
      DECLARE_METHOD(t_Runtime, getLocalizedOutputStream, METH_O),
      DECLARE_METHOD(t_Runtime, getRuntime, METH_NOARGS | METH_CLASS),
      DECLARE_METHOD(t_Runtime, halt, METH_O),
      DECLARE_METHOD(t_Runtime, load, METH_O),
      DECLARE_METHOD(t_Runtime, loadLibrary, METH_O),
      DECLARE_METHOD(t_Runtime, maxMemory, METH_NOARGS),
      DECLARE_METHOD(t_Runtime, removeShutdownHook, METH_O),
      DECLARE_METHOD(t_Runtime, runFinalization, METH_NOARGS),
      DECLARE_METHOD(t_Runtime, runFinalizersOnExit, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Runtime, totalMemory, METH_NOARGS),
      DECLARE_METHOD(t_Runtime, traceInstructions, METH_O),
      DECLARE_METHOD(t_Runtime, traceMethodCalls, METH_O),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(Runtime, t_Runtime, ::java::lang::Object, Runtime, abstract_init, 0, 0, t_Runtime__fields_, 0, 0);

    void t_Runtime::install(PyObject *module)
    {
      installType(&PY_TYPE(Runtime), module, "Runtime", 0);
    }

    void t_Runtime::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(Runtime).tp_dict, "class_", make_descriptor(Runtime::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(Runtime).tp_dict, "wrapfn_", make_descriptor(t_Runtime::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(Runtime).tp_dict, "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_Runtime_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, Runtime::initializeClass, 1)))
        return NULL;
      return t_Runtime::wrap_Object(Runtime(((t_Runtime *) arg)->object.this$));
    }
    static PyObject *t_Runtime_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, Runtime::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static PyObject *t_Runtime_addShutdownHook(t_Runtime *self, PyObject *arg)
    {
      ::java::lang::Thread a0((jobject) NULL);

      if (!parseArg(arg, "k", ::java::lang::Thread::initializeClass, &a0))
      {
        OBJ_CALL(self->object.addShutdownHook(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "addShutdownHook", arg);
      return NULL;
    }

    static PyObject *t_Runtime_availableProcessors(t_Runtime *self)
    {
      jint result;
      OBJ_CALL(result = self->object.availableProcessors());
      return PyInt_FromLong((long) result);
    }

    static PyObject *t_Runtime_exec(t_Runtime *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          JArray< ::java::lang::String > a0((jobject) NULL);
          ::java::lang::Process result((jobject) NULL);

          if (!parseArgs(args, "[s", &a0))
          {
            OBJ_CALL(result = self->object.exec(a0));
            return ::java::lang::t_Process::wrap_Object(result);
          }
        }
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::Process result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.exec(a0));
            return ::java::lang::t_Process::wrap_Object(result);
          }
        }
        break;
       case 2:
        {
          JArray< ::java::lang::String > a0((jobject) NULL);
          JArray< ::java::lang::String > a1((jobject) NULL);
          ::java::lang::Process result((jobject) NULL);

          if (!parseArgs(args, "[s[s", &a0, &a1))
          {
            OBJ_CALL(result = self->object.exec(a0, a1));
            return ::java::lang::t_Process::wrap_Object(result);
          }
        }
        {
          ::java::lang::String a0((jobject) NULL);
          JArray< ::java::lang::String > a1((jobject) NULL);
          ::java::lang::Process result((jobject) NULL);

          if (!parseArgs(args, "s[s", &a0, &a1))
          {
            OBJ_CALL(result = self->object.exec(a0, a1));
            return ::java::lang::t_Process::wrap_Object(result);
          }
        }
        break;
       case 3:
        {
          ::java::lang::String a0((jobject) NULL);
          JArray< ::java::lang::String > a1((jobject) NULL);
          ::java::io::File a2((jobject) NULL);
          ::java::lang::Process result((jobject) NULL);

          if (!parseArgs(args, "s[sk", ::java::io::File::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.exec(a0, a1, a2));
            return ::java::lang::t_Process::wrap_Object(result);
          }
        }
        {
          JArray< ::java::lang::String > a0((jobject) NULL);
          JArray< ::java::lang::String > a1((jobject) NULL);
          ::java::io::File a2((jobject) NULL);
          ::java::lang::Process result((jobject) NULL);

          if (!parseArgs(args, "[s[sk", ::java::io::File::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.exec(a0, a1, a2));
            return ::java::lang::t_Process::wrap_Object(result);
          }
        }
      }

      PyErr_SetArgsError((PyObject *) self, "exec", args);
      return NULL;
    }

    static PyObject *t_Runtime_exit(t_Runtime *self, PyObject *arg)
    {
      jint a0;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(self->object.exit(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "exit", arg);
      return NULL;
    }

    static PyObject *t_Runtime_freeMemory(t_Runtime *self)
    {
      jlong result;
      OBJ_CALL(result = self->object.freeMemory());
      return PyLong_FromLongLong((PY_LONG_LONG) result);
    }

    static PyObject *t_Runtime_gc(t_Runtime *self)
    {
      OBJ_CALL(self->object.gc());
      Py_RETURN_NONE;
    }

    static PyObject *t_Runtime_getLocalizedInputStream(t_Runtime *self, PyObject *arg)
    {
      ::java::io::InputStream a0((jobject) NULL);
      ::java::io::InputStream result((jobject) NULL);

      if (!parseArg(arg, "k", ::java::io::InputStream::initializeClass, &a0))
      {
        OBJ_CALL(result = self->object.getLocalizedInputStream(a0));
        return ::java::io::t_InputStream::wrap_Object(result);
      }

      PyErr_SetArgsError((PyObject *) self, "getLocalizedInputStream", arg);
      return NULL;
    }

    static PyObject *t_Runtime_getLocalizedOutputStream(t_Runtime *self, PyObject *arg)
    {
      ::java::io::OutputStream a0((jobject) NULL);
      ::java::io::OutputStream result((jobject) NULL);

      if (!parseArg(arg, "k", ::java::io::OutputStream::initializeClass, &a0))
      {
        OBJ_CALL(result = self->object.getLocalizedOutputStream(a0));
        return ::java::io::t_OutputStream::wrap_Object(result);
      }

      PyErr_SetArgsError((PyObject *) self, "getLocalizedOutputStream", arg);
      return NULL;
    }

    static PyObject *t_Runtime_getRuntime(PyTypeObject *type)
    {
      Runtime result((jobject) NULL);
      OBJ_CALL(result = ::java::lang::Runtime::getRuntime());
      return t_Runtime::wrap_Object(result);
    }

    static PyObject *t_Runtime_halt(t_Runtime *self, PyObject *arg)
    {
      jint a0;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(self->object.halt(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "halt", arg);
      return NULL;
    }

    static PyObject *t_Runtime_load(t_Runtime *self, PyObject *arg)
    {
      ::java::lang::String a0((jobject) NULL);

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(self->object.load(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "load", arg);
      return NULL;
    }

    static PyObject *t_Runtime_loadLibrary(t_Runtime *self, PyObject *arg)
    {
      ::java::lang::String a0((jobject) NULL);

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(self->object.loadLibrary(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "loadLibrary", arg);
      return NULL;
    }

    static PyObject *t_Runtime_maxMemory(t_Runtime *self)
    {
      jlong result;
      OBJ_CALL(result = self->object.maxMemory());
      return PyLong_FromLongLong((PY_LONG_LONG) result);
    }

    static PyObject *t_Runtime_removeShutdownHook(t_Runtime *self, PyObject *arg)
    {
      ::java::lang::Thread a0((jobject) NULL);
      jboolean result;

      if (!parseArg(arg, "k", ::java::lang::Thread::initializeClass, &a0))
      {
        OBJ_CALL(result = self->object.removeShutdownHook(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError((PyObject *) self, "removeShutdownHook", arg);
      return NULL;
    }

    static PyObject *t_Runtime_runFinalization(t_Runtime *self)
    {
      OBJ_CALL(self->object.runFinalization());
      Py_RETURN_NONE;
    }

    static PyObject *t_Runtime_runFinalizersOnExit(PyTypeObject *type, PyObject *arg)
    {
      jboolean a0;

      if (!parseArg(arg, "Z", &a0))
      {
        OBJ_CALL(::java::lang::Runtime::runFinalizersOnExit(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError(type, "runFinalizersOnExit", arg);
      return NULL;
    }

    static PyObject *t_Runtime_totalMemory(t_Runtime *self)
    {
      jlong result;
      OBJ_CALL(result = self->object.totalMemory());
      return PyLong_FromLongLong((PY_LONG_LONG) result);
    }

    static PyObject *t_Runtime_traceInstructions(t_Runtime *self, PyObject *arg)
    {
      jboolean a0;

      if (!parseArg(arg, "Z", &a0))
      {
        OBJ_CALL(self->object.traceInstructions(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "traceInstructions", arg);
      return NULL;
    }

    static PyObject *t_Runtime_traceMethodCalls(t_Runtime *self, PyObject *arg)
    {
      jboolean a0;

      if (!parseArg(arg, "Z", &a0))
      {
        OBJ_CALL(self->object.traceMethodCalls(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "traceMethodCalls", arg);
      return NULL;
    }

    static PyObject *t_Runtime_get__runtime(t_Runtime *self, void *data)
    {
      Runtime value((jobject) NULL);
      OBJ_CALL(value = self->object.getRuntime());
      return t_Runtime::wrap_Object(value);
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/pt/PortugueseStemFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pt {

          ::java::lang::Class *PortugueseStemFilter::class$ = NULL;
          jmethodID *PortugueseStemFilter::mids$ = NULL;
          bool PortugueseStemFilter::live$ = false;

          jclass PortugueseStemFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/pt/PortugueseStemFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PortugueseStemFilter::PortugueseStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean PortugueseStemFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pt {
          static PyObject *t_PortugueseStemFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PortugueseStemFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PortugueseStemFilter_init_(t_PortugueseStemFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PortugueseStemFilter_incrementToken(t_PortugueseStemFilter *self, PyObject *args);

          static PyMethodDef t_PortugueseStemFilter__methods_[] = {
            DECLARE_METHOD(t_PortugueseStemFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PortugueseStemFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PortugueseStemFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PortugueseStemFilter, t_PortugueseStemFilter, ::org::apache::lucene::analysis::TokenFilter, PortugueseStemFilter, t_PortugueseStemFilter_init_, 0, 0, 0, 0, 0);

          void t_PortugueseStemFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(PortugueseStemFilter), module, "PortugueseStemFilter", 0);
          }

          void t_PortugueseStemFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PortugueseStemFilter).tp_dict, "class_", make_descriptor(PortugueseStemFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PortugueseStemFilter).tp_dict, "wrapfn_", make_descriptor(t_PortugueseStemFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PortugueseStemFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PortugueseStemFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PortugueseStemFilter::initializeClass, 1)))
              return NULL;
            return t_PortugueseStemFilter::wrap_Object(PortugueseStemFilter(((t_PortugueseStemFilter *) arg)->object.this$));
          }
          static PyObject *t_PortugueseStemFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PortugueseStemFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PortugueseStemFilter_init_(t_PortugueseStemFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            PortugueseStemFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = PortugueseStemFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PortugueseStemFilter_incrementToken(t_PortugueseStemFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(PortugueseStemFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FieldCacheImpl$SortedDocValuesImpl.h"
#include "org/apache/lucene/util/packed/PackedInts$Reader.h"
#include "org/apache/lucene/util/PagedBytes$Reader.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/packed/PackedLongValues.h"
#include "org/apache/lucene/util/Accountable.h"
#include "org/apache/lucene/index/SortedDocValues.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FieldCacheImpl$SortedDocValuesImpl::class$ = NULL;
        jmethodID *FieldCacheImpl$SortedDocValuesImpl::mids$ = NULL;
        bool FieldCacheImpl$SortedDocValuesImpl::live$ = false;

        jclass FieldCacheImpl$SortedDocValuesImpl::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FieldCacheImpl$SortedDocValuesImpl");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_3bec9174] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/PagedBytes$Reader;Lorg/apache/lucene/util/packed/PackedLongValues;Lorg/apache/lucene/util/packed/PackedInts$Reader;I)V");
            mids$[mid_iterator_57832734] = env->getMethodID(cls, "iterator", "()Lorg/apache/lucene/index/SortedDocValues;");
            mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FieldCacheImpl$SortedDocValuesImpl::FieldCacheImpl$SortedDocValuesImpl(const ::org::apache::lucene::util::PagedBytes$Reader & a0, const ::org::apache::lucene::util::packed::PackedLongValues & a1, const ::org::apache::lucene::util::packed::PackedInts$Reader & a2, jint a3) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_3bec9174, a0.this$, a1.this$, a2.this$, a3)) {}

        ::org::apache::lucene::index::SortedDocValues FieldCacheImpl$SortedDocValuesImpl::iterator() const
        {
          return ::org::apache::lucene::index::SortedDocValues(env->callObjectMethod(this$, mids$[mid_iterator_57832734]));
        }

        jlong FieldCacheImpl$SortedDocValuesImpl::ramBytesUsed() const
        {
          return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FieldCacheImpl$SortedDocValuesImpl_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldCacheImpl$SortedDocValuesImpl_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FieldCacheImpl$SortedDocValuesImpl_init_(t_FieldCacheImpl$SortedDocValuesImpl *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FieldCacheImpl$SortedDocValuesImpl_iterator(t_FieldCacheImpl$SortedDocValuesImpl *self);
        static PyObject *t_FieldCacheImpl$SortedDocValuesImpl_ramBytesUsed(t_FieldCacheImpl$SortedDocValuesImpl *self);

        static PyMethodDef t_FieldCacheImpl$SortedDocValuesImpl__methods_[] = {
          DECLARE_METHOD(t_FieldCacheImpl$SortedDocValuesImpl, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCacheImpl$SortedDocValuesImpl, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCacheImpl$SortedDocValuesImpl, iterator, METH_NOARGS),
          DECLARE_METHOD(t_FieldCacheImpl$SortedDocValuesImpl, ramBytesUsed, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldCacheImpl$SortedDocValuesImpl, t_FieldCacheImpl$SortedDocValuesImpl, ::java::lang::Object, FieldCacheImpl$SortedDocValuesImpl, t_FieldCacheImpl$SortedDocValuesImpl_init_, 0, 0, 0, 0, 0);

        void t_FieldCacheImpl$SortedDocValuesImpl::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldCacheImpl$SortedDocValuesImpl), module, "FieldCacheImpl$SortedDocValuesImpl", 0);
        }

        void t_FieldCacheImpl$SortedDocValuesImpl::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldCacheImpl$SortedDocValuesImpl).tp_dict, "class_", make_descriptor(FieldCacheImpl$SortedDocValuesImpl::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldCacheImpl$SortedDocValuesImpl).tp_dict, "wrapfn_", make_descriptor(t_FieldCacheImpl$SortedDocValuesImpl::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldCacheImpl$SortedDocValuesImpl).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldCacheImpl$SortedDocValuesImpl_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldCacheImpl$SortedDocValuesImpl::initializeClass, 1)))
            return NULL;
          return t_FieldCacheImpl$SortedDocValuesImpl::wrap_Object(FieldCacheImpl$SortedDocValuesImpl(((t_FieldCacheImpl$SortedDocValuesImpl *) arg)->object.this$));
        }
        static PyObject *t_FieldCacheImpl$SortedDocValuesImpl_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldCacheImpl$SortedDocValuesImpl::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FieldCacheImpl$SortedDocValuesImpl_init_(t_FieldCacheImpl$SortedDocValuesImpl *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::util::PagedBytes$Reader a0((jobject) NULL);
          ::org::apache::lucene::util::packed::PackedLongValues a1((jobject) NULL);
          ::org::apache::lucene::util::packed::PackedInts$Reader a2((jobject) NULL);
          jint a3;
          FieldCacheImpl$SortedDocValuesImpl object((jobject) NULL);

          if (!parseArgs(args, "kkkI", ::org::apache::lucene::util::PagedBytes$Reader::initializeClass, ::org::apache::lucene::util::packed::PackedLongValues::initializeClass, ::org::apache::lucene::util::packed::PackedInts$Reader::initializeClass, &a0, &a1, &a2, &a3))
          {
            INT_CALL(object = FieldCacheImpl$SortedDocValuesImpl(a0, a1, a2, a3));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FieldCacheImpl$SortedDocValuesImpl_iterator(t_FieldCacheImpl$SortedDocValuesImpl *self)
        {
          ::org::apache::lucene::index::SortedDocValues result((jobject) NULL);
          OBJ_CALL(result = self->object.iterator());
          return ::org::apache::lucene::index::t_SortedDocValues::wrap_Object(result);
        }

        static PyObject *t_FieldCacheImpl$SortedDocValuesImpl_ramBytesUsed(t_FieldCacheImpl$SortedDocValuesImpl *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.ramBytesUsed());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/xml/QueryBuilderFactory.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/queryparser/xml/QueryBuilder.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {

          ::java::lang::Class *QueryBuilderFactory::class$ = NULL;
          jmethodID *QueryBuilderFactory::mids$ = NULL;
          bool QueryBuilderFactory::live$ = false;

          jclass QueryBuilderFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/xml/QueryBuilderFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_addBuilder_155f2547] = env->getMethodID(cls, "addBuilder", "(Ljava/lang/String;Lorg/apache/lucene/queryparser/xml/QueryBuilder;)V");
              mids$[mid_getQueryBuilder_c1a99e2e] = env->getMethodID(cls, "getQueryBuilder", "(Ljava/lang/String;)Lorg/apache/lucene/queryparser/xml/QueryBuilder;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          QueryBuilderFactory::QueryBuilderFactory() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          void QueryBuilderFactory::addBuilder(const ::java::lang::String & a0, const ::org::apache::lucene::queryparser::xml::QueryBuilder & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_addBuilder_155f2547], a0.this$, a1.this$);
          }

          ::org::apache::lucene::queryparser::xml::QueryBuilder QueryBuilderFactory::getQueryBuilder(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::queryparser::xml::QueryBuilder(env->callObjectMethod(this$, mids$[mid_getQueryBuilder_c1a99e2e], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          static PyObject *t_QueryBuilderFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_QueryBuilderFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_QueryBuilderFactory_init_(t_QueryBuilderFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_QueryBuilderFactory_addBuilder(t_QueryBuilderFactory *self, PyObject *args);
          static PyObject *t_QueryBuilderFactory_getQueryBuilder(t_QueryBuilderFactory *self, PyObject *arg);

          static PyMethodDef t_QueryBuilderFactory__methods_[] = {
            DECLARE_METHOD(t_QueryBuilderFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_QueryBuilderFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_QueryBuilderFactory, addBuilder, METH_VARARGS),
            DECLARE_METHOD(t_QueryBuilderFactory, getQueryBuilder, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(QueryBuilderFactory, t_QueryBuilderFactory, ::java::lang::Object, QueryBuilderFactory, t_QueryBuilderFactory_init_, 0, 0, 0, 0, 0);

          void t_QueryBuilderFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(QueryBuilderFactory), module, "QueryBuilderFactory", 0);
          }

          void t_QueryBuilderFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(QueryBuilderFactory).tp_dict, "class_", make_descriptor(QueryBuilderFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(QueryBuilderFactory).tp_dict, "wrapfn_", make_descriptor(t_QueryBuilderFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(QueryBuilderFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_QueryBuilderFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, QueryBuilderFactory::initializeClass, 1)))
              return NULL;
            return t_QueryBuilderFactory::wrap_Object(QueryBuilderFactory(((t_QueryBuilderFactory *) arg)->object.this$));
          }
          static PyObject *t_QueryBuilderFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, QueryBuilderFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_QueryBuilderFactory_init_(t_QueryBuilderFactory *self, PyObject *args, PyObject *kwds)
          {
            QueryBuilderFactory object((jobject) NULL);

            INT_CALL(object = QueryBuilderFactory());
            self->object = object;

            return 0;
          }

          static PyObject *t_QueryBuilderFactory_addBuilder(t_QueryBuilderFactory *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::queryparser::xml::QueryBuilder a1((jobject) NULL);

            if (!parseArgs(args, "sk", ::org::apache::lucene::queryparser::xml::QueryBuilder::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.addBuilder(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "addBuilder", args);
            return NULL;
          }

          static PyObject *t_QueryBuilderFactory_getQueryBuilder(t_QueryBuilderFactory *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::queryparser::xml::QueryBuilder result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.getQueryBuilder(a0));
              return ::org::apache::lucene::queryparser::xml::t_QueryBuilder::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getQueryBuilder", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/TermsEnum$SeekStatus.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *TermsEnum$SeekStatus::class$ = NULL;
        jmethodID *TermsEnum$SeekStatus::mids$ = NULL;
        bool TermsEnum$SeekStatus::live$ = false;
        TermsEnum$SeekStatus *TermsEnum$SeekStatus::END = NULL;
        TermsEnum$SeekStatus *TermsEnum$SeekStatus::FOUND = NULL;
        TermsEnum$SeekStatus *TermsEnum$SeekStatus::NOT_FOUND = NULL;

        jclass TermsEnum$SeekStatus::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/TermsEnum$SeekStatus");

            mids$ = new jmethodID[max_mid];
            mids$[mid_valueOf_e0b0a2bc] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/index/TermsEnum$SeekStatus;");
            mids$[mid_values_5e8184a6] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/index/TermsEnum$SeekStatus;");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            END = new TermsEnum$SeekStatus(env->getStaticObjectField(cls, "END", "Lorg/apache/lucene/index/TermsEnum$SeekStatus;"));
            FOUND = new TermsEnum$SeekStatus(env->getStaticObjectField(cls, "FOUND", "Lorg/apache/lucene/index/TermsEnum$SeekStatus;"));
            NOT_FOUND = new TermsEnum$SeekStatus(env->getStaticObjectField(cls, "NOT_FOUND", "Lorg/apache/lucene/index/TermsEnum$SeekStatus;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        TermsEnum$SeekStatus TermsEnum$SeekStatus::valueOf(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return TermsEnum$SeekStatus(env->callStaticObjectMethod(cls, mids$[mid_valueOf_e0b0a2bc], a0.this$));
        }

        JArray< TermsEnum$SeekStatus > TermsEnum$SeekStatus::values()
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< TermsEnum$SeekStatus >(env->callStaticObjectMethod(cls, mids$[mid_values_5e8184a6]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_TermsEnum$SeekStatus_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TermsEnum$SeekStatus_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TermsEnum$SeekStatus_of_(t_TermsEnum$SeekStatus *self, PyObject *args);
        static PyObject *t_TermsEnum$SeekStatus_valueOf(PyTypeObject *type, PyObject *args);
        static PyObject *t_TermsEnum$SeekStatus_values(PyTypeObject *type);
        static PyObject *t_TermsEnum$SeekStatus_get__parameters_(t_TermsEnum$SeekStatus *self, void *data);
        static PyGetSetDef t_TermsEnum$SeekStatus__fields_[] = {
          DECLARE_GET_FIELD(t_TermsEnum$SeekStatus, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_TermsEnum$SeekStatus__methods_[] = {
          DECLARE_METHOD(t_TermsEnum$SeekStatus, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TermsEnum$SeekStatus, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TermsEnum$SeekStatus, of_, METH_VARARGS),
          DECLARE_METHOD(t_TermsEnum$SeekStatus, valueOf, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_TermsEnum$SeekStatus, values, METH_NOARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TermsEnum$SeekStatus, t_TermsEnum$SeekStatus, ::java::lang::Enum, TermsEnum$SeekStatus, abstract_init, 0, 0, t_TermsEnum$SeekStatus__fields_, 0, 0);
        PyObject *t_TermsEnum$SeekStatus::wrap_Object(const TermsEnum$SeekStatus& object, PyTypeObject *p0)
        {
          PyObject *obj = t_TermsEnum$SeekStatus::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_TermsEnum$SeekStatus *self = (t_TermsEnum$SeekStatus *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_TermsEnum$SeekStatus::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_TermsEnum$SeekStatus::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_TermsEnum$SeekStatus *self = (t_TermsEnum$SeekStatus *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_TermsEnum$SeekStatus::install(PyObject *module)
        {
          installType(&PY_TYPE(TermsEnum$SeekStatus), module, "TermsEnum$SeekStatus", 0);
        }

        void t_TermsEnum$SeekStatus::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TermsEnum$SeekStatus).tp_dict, "class_", make_descriptor(TermsEnum$SeekStatus::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TermsEnum$SeekStatus).tp_dict, "wrapfn_", make_descriptor(t_TermsEnum$SeekStatus::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TermsEnum$SeekStatus).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(TermsEnum$SeekStatus::initializeClass);
          PyDict_SetItemString(PY_TYPE(TermsEnum$SeekStatus).tp_dict, "END", make_descriptor(t_TermsEnum$SeekStatus::wrap_Object(*TermsEnum$SeekStatus::END)));
          PyDict_SetItemString(PY_TYPE(TermsEnum$SeekStatus).tp_dict, "FOUND", make_descriptor(t_TermsEnum$SeekStatus::wrap_Object(*TermsEnum$SeekStatus::FOUND)));
          PyDict_SetItemString(PY_TYPE(TermsEnum$SeekStatus).tp_dict, "NOT_FOUND", make_descriptor(t_TermsEnum$SeekStatus::wrap_Object(*TermsEnum$SeekStatus::NOT_FOUND)));
        }

        static PyObject *t_TermsEnum$SeekStatus_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TermsEnum$SeekStatus::initializeClass, 1)))
            return NULL;
          return t_TermsEnum$SeekStatus::wrap_Object(TermsEnum$SeekStatus(((t_TermsEnum$SeekStatus *) arg)->object.this$));
        }
        static PyObject *t_TermsEnum$SeekStatus_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TermsEnum$SeekStatus::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_TermsEnum$SeekStatus_of_(t_TermsEnum$SeekStatus *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_TermsEnum$SeekStatus_valueOf(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          TermsEnum$SeekStatus result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::TermsEnum$SeekStatus::valueOf(a0));
            return t_TermsEnum$SeekStatus::wrap_Object(result);
          }

          return callSuper(type, "valueOf", args, 2);
        }

        static PyObject *t_TermsEnum$SeekStatus_values(PyTypeObject *type)
        {
          JArray< TermsEnum$SeekStatus > result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::index::TermsEnum$SeekStatus::values());
          return JArray<jobject>(result.this$).wrap(t_TermsEnum$SeekStatus::wrap_jobject);
        }
        static PyObject *t_TermsEnum$SeekStatus_get__parameters_(t_TermsEnum$SeekStatus *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/xml/sax/helpers/DefaultHandler.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace xml {
    namespace sax {
      namespace helpers {

        ::java::lang::Class *DefaultHandler::class$ = NULL;
        jmethodID *DefaultHandler::mids$ = NULL;
        bool DefaultHandler::live$ = false;

        jclass DefaultHandler::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/xml/sax/helpers/DefaultHandler");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_characters_6f0bb356] = env->getMethodID(cls, "characters", "([CII)V");
            mids$[mid_endDocument_54c6a166] = env->getMethodID(cls, "endDocument", "()V");
            mids$[mid_endElement_9c119564] = env->getMethodID(cls, "endElement", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V");
            mids$[mid_endPrefixMapping_5fdc3f48] = env->getMethodID(cls, "endPrefixMapping", "(Ljava/lang/String;)V");
            mids$[mid_ignorableWhitespace_6f0bb356] = env->getMethodID(cls, "ignorableWhitespace", "([CII)V");
            mids$[mid_notationDecl_9c119564] = env->getMethodID(cls, "notationDecl", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V");
            mids$[mid_processingInstruction_4a264742] = env->getMethodID(cls, "processingInstruction", "(Ljava/lang/String;Ljava/lang/String;)V");
            mids$[mid_skippedEntity_5fdc3f48] = env->getMethodID(cls, "skippedEntity", "(Ljava/lang/String;)V");
            mids$[mid_startDocument_54c6a166] = env->getMethodID(cls, "startDocument", "()V");
            mids$[mid_startPrefixMapping_4a264742] = env->getMethodID(cls, "startPrefixMapping", "(Ljava/lang/String;Ljava/lang/String;)V");
            mids$[mid_unparsedEntityDecl_3202cd2e] = env->getMethodID(cls, "unparsedEntityDecl", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        DefaultHandler::DefaultHandler() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void DefaultHandler::characters(const JArray< jchar > & a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_characters_6f0bb356], a0.this$, a1, a2);
        }

        void DefaultHandler::endDocument() const
        {
          env->callVoidMethod(this$, mids$[mid_endDocument_54c6a166]);
        }

        void DefaultHandler::endElement(const ::java::lang::String & a0, const ::java::lang::String & a1, const ::java::lang::String & a2) const
        {
          env->callVoidMethod(this$, mids$[mid_endElement_9c119564], a0.this$, a1.this$, a2.this$);
        }

        void DefaultHandler::endPrefixMapping(const ::java::lang::String & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_endPrefixMapping_5fdc3f48], a0.this$);
        }

        void DefaultHandler::ignorableWhitespace(const JArray< jchar > & a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_ignorableWhitespace_6f0bb356], a0.this$, a1, a2);
        }

        void DefaultHandler::notationDecl(const ::java::lang::String & a0, const ::java::lang::String & a1, const ::java::lang::String & a2) const
        {
          env->callVoidMethod(this$, mids$[mid_notationDecl_9c119564], a0.this$, a1.this$, a2.this$);
        }

        void DefaultHandler::processingInstruction(const ::java::lang::String & a0, const ::java::lang::String & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_processingInstruction_4a264742], a0.this$, a1.this$);
        }

        void DefaultHandler::skippedEntity(const ::java::lang::String & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_skippedEntity_5fdc3f48], a0.this$);
        }

        void DefaultHandler::startDocument() const
        {
          env->callVoidMethod(this$, mids$[mid_startDocument_54c6a166]);
        }

        void DefaultHandler::startPrefixMapping(const ::java::lang::String & a0, const ::java::lang::String & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_startPrefixMapping_4a264742], a0.this$, a1.this$);
        }

        void DefaultHandler::unparsedEntityDecl(const ::java::lang::String & a0, const ::java::lang::String & a1, const ::java::lang::String & a2, const ::java::lang::String & a3) const
        {
          env->callVoidMethod(this$, mids$[mid_unparsedEntityDecl_3202cd2e], a0.this$, a1.this$, a2.this$, a3.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace xml {
    namespace sax {
      namespace helpers {
        static PyObject *t_DefaultHandler_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DefaultHandler_instance_(PyTypeObject *type, PyObject *arg);
        static int t_DefaultHandler_init_(t_DefaultHandler *self, PyObject *args, PyObject *kwds);
        static PyObject *t_DefaultHandler_characters(t_DefaultHandler *self, PyObject *args);
        static PyObject *t_DefaultHandler_endDocument(t_DefaultHandler *self);
        static PyObject *t_DefaultHandler_endElement(t_DefaultHandler *self, PyObject *args);
        static PyObject *t_DefaultHandler_endPrefixMapping(t_DefaultHandler *self, PyObject *arg);
        static PyObject *t_DefaultHandler_ignorableWhitespace(t_DefaultHandler *self, PyObject *args);
        static PyObject *t_DefaultHandler_notationDecl(t_DefaultHandler *self, PyObject *args);
        static PyObject *t_DefaultHandler_processingInstruction(t_DefaultHandler *self, PyObject *args);
        static PyObject *t_DefaultHandler_skippedEntity(t_DefaultHandler *self, PyObject *arg);
        static PyObject *t_DefaultHandler_startDocument(t_DefaultHandler *self);
        static PyObject *t_DefaultHandler_startPrefixMapping(t_DefaultHandler *self, PyObject *args);
        static PyObject *t_DefaultHandler_unparsedEntityDecl(t_DefaultHandler *self, PyObject *args);

        static PyMethodDef t_DefaultHandler__methods_[] = {
          DECLARE_METHOD(t_DefaultHandler, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DefaultHandler, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DefaultHandler, characters, METH_VARARGS),
          DECLARE_METHOD(t_DefaultHandler, endDocument, METH_NOARGS),
          DECLARE_METHOD(t_DefaultHandler, endElement, METH_VARARGS),
          DECLARE_METHOD(t_DefaultHandler, endPrefixMapping, METH_O),
          DECLARE_METHOD(t_DefaultHandler, ignorableWhitespace, METH_VARARGS),
          DECLARE_METHOD(t_DefaultHandler, notationDecl, METH_VARARGS),
          DECLARE_METHOD(t_DefaultHandler, processingInstruction, METH_VARARGS),
          DECLARE_METHOD(t_DefaultHandler, skippedEntity, METH_O),
          DECLARE_METHOD(t_DefaultHandler, startDocument, METH_NOARGS),
          DECLARE_METHOD(t_DefaultHandler, startPrefixMapping, METH_VARARGS),
          DECLARE_METHOD(t_DefaultHandler, unparsedEntityDecl, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(DefaultHandler, t_DefaultHandler, ::java::lang::Object, DefaultHandler, t_DefaultHandler_init_, 0, 0, 0, 0, 0);

        void t_DefaultHandler::install(PyObject *module)
        {
          installType(&PY_TYPE(DefaultHandler), module, "DefaultHandler", 0);
        }

        void t_DefaultHandler::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(DefaultHandler).tp_dict, "class_", make_descriptor(DefaultHandler::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(DefaultHandler).tp_dict, "wrapfn_", make_descriptor(t_DefaultHandler::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(DefaultHandler).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_DefaultHandler_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, DefaultHandler::initializeClass, 1)))
            return NULL;
          return t_DefaultHandler::wrap_Object(DefaultHandler(((t_DefaultHandler *) arg)->object.this$));
        }
        static PyObject *t_DefaultHandler_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, DefaultHandler::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_DefaultHandler_init_(t_DefaultHandler *self, PyObject *args, PyObject *kwds)
        {
          DefaultHandler object((jobject) NULL);

          INT_CALL(object = DefaultHandler());
          self->object = object;

          return 0;
        }

        static PyObject *t_DefaultHandler_characters(t_DefaultHandler *self, PyObject *args)
        {
          JArray< jchar > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[CII", &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.characters(a0, a1, a2));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "characters", args);
          return NULL;
        }

        static PyObject *t_DefaultHandler_endDocument(t_DefaultHandler *self)
        {
          OBJ_CALL(self->object.endDocument());
          Py_RETURN_NONE;
        }

        static PyObject *t_DefaultHandler_endElement(t_DefaultHandler *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::java::lang::String a2((jobject) NULL);

          if (!parseArgs(args, "sss", &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.endElement(a0, a1, a2));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "endElement", args);
          return NULL;
        }

        static PyObject *t_DefaultHandler_endPrefixMapping(t_DefaultHandler *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(self->object.endPrefixMapping(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "endPrefixMapping", arg);
          return NULL;
        }

        static PyObject *t_DefaultHandler_ignorableWhitespace(t_DefaultHandler *self, PyObject *args)
        {
          JArray< jchar > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[CII", &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.ignorableWhitespace(a0, a1, a2));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "ignorableWhitespace", args);
          return NULL;
        }

        static PyObject *t_DefaultHandler_notationDecl(t_DefaultHandler *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::java::lang::String a2((jobject) NULL);

          if (!parseArgs(args, "sss", &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.notationDecl(a0, a1, a2));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "notationDecl", args);
          return NULL;
        }

        static PyObject *t_DefaultHandler_processingInstruction(t_DefaultHandler *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);

          if (!parseArgs(args, "ss", &a0, &a1))
          {
            OBJ_CALL(self->object.processingInstruction(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "processingInstruction", args);
          return NULL;
        }

        static PyObject *t_DefaultHandler_skippedEntity(t_DefaultHandler *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(self->object.skippedEntity(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "skippedEntity", arg);
          return NULL;
        }

        static PyObject *t_DefaultHandler_startDocument(t_DefaultHandler *self)
        {
          OBJ_CALL(self->object.startDocument());
          Py_RETURN_NONE;
        }

        static PyObject *t_DefaultHandler_startPrefixMapping(t_DefaultHandler *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);

          if (!parseArgs(args, "ss", &a0, &a1))
          {
            OBJ_CALL(self->object.startPrefixMapping(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "startPrefixMapping", args);
          return NULL;
        }

        static PyObject *t_DefaultHandler_unparsedEntityDecl(t_DefaultHandler *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::java::lang::String a2((jobject) NULL);
          ::java::lang::String a3((jobject) NULL);

          if (!parseArgs(args, "ssss", &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(self->object.unparsedEntityDecl(a0, a1, a2, a3));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "unparsedEntityDecl", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/tokenattributes/PositionIncrementAttribute.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {

          ::java::lang::Class *PositionIncrementAttribute::class$ = NULL;
          jmethodID *PositionIncrementAttribute::mids$ = NULL;
          bool PositionIncrementAttribute::live$ = false;

          jclass PositionIncrementAttribute::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/tokenattributes/PositionIncrementAttribute");

              mids$ = new jmethodID[max_mid];
              mids$[mid_getPositionIncrement_54c6a179] = env->getMethodID(cls, "getPositionIncrement", "()I");
              mids$[mid_setPositionIncrement_39c7bd3c] = env->getMethodID(cls, "setPositionIncrement", "(I)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jint PositionIncrementAttribute::getPositionIncrement() const
          {
            return env->callIntMethod(this$, mids$[mid_getPositionIncrement_54c6a179]);
          }

          void PositionIncrementAttribute::setPositionIncrement(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setPositionIncrement_39c7bd3c], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {
          static PyObject *t_PositionIncrementAttribute_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PositionIncrementAttribute_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PositionIncrementAttribute_getPositionIncrement(t_PositionIncrementAttribute *self);
          static PyObject *t_PositionIncrementAttribute_setPositionIncrement(t_PositionIncrementAttribute *self, PyObject *arg);
          static PyObject *t_PositionIncrementAttribute_get__positionIncrement(t_PositionIncrementAttribute *self, void *data);
          static int t_PositionIncrementAttribute_set__positionIncrement(t_PositionIncrementAttribute *self, PyObject *arg, void *data);
          static PyGetSetDef t_PositionIncrementAttribute__fields_[] = {
            DECLARE_GETSET_FIELD(t_PositionIncrementAttribute, positionIncrement),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_PositionIncrementAttribute__methods_[] = {
            DECLARE_METHOD(t_PositionIncrementAttribute, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PositionIncrementAttribute, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PositionIncrementAttribute, getPositionIncrement, METH_NOARGS),
            DECLARE_METHOD(t_PositionIncrementAttribute, setPositionIncrement, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PositionIncrementAttribute, t_PositionIncrementAttribute, ::org::apache::lucene::util::Attribute, PositionIncrementAttribute, abstract_init, 0, 0, t_PositionIncrementAttribute__fields_, 0, 0);

          void t_PositionIncrementAttribute::install(PyObject *module)
          {
            installType(&PY_TYPE(PositionIncrementAttribute), module, "PositionIncrementAttribute", 0);
          }

          void t_PositionIncrementAttribute::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PositionIncrementAttribute).tp_dict, "class_", make_descriptor(PositionIncrementAttribute::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PositionIncrementAttribute).tp_dict, "wrapfn_", make_descriptor(t_PositionIncrementAttribute::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PositionIncrementAttribute).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PositionIncrementAttribute_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PositionIncrementAttribute::initializeClass, 1)))
              return NULL;
            return t_PositionIncrementAttribute::wrap_Object(PositionIncrementAttribute(((t_PositionIncrementAttribute *) arg)->object.this$));
          }
          static PyObject *t_PositionIncrementAttribute_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PositionIncrementAttribute::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_PositionIncrementAttribute_getPositionIncrement(t_PositionIncrementAttribute *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getPositionIncrement());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_PositionIncrementAttribute_setPositionIncrement(t_PositionIncrementAttribute *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setPositionIncrement(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setPositionIncrement", arg);
            return NULL;
          }

          static PyObject *t_PositionIncrementAttribute_get__positionIncrement(t_PositionIncrementAttribute *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getPositionIncrement());
            return PyInt_FromLong((long) value);
          }
          static int t_PositionIncrementAttribute_set__positionIncrement(t_PositionIncrementAttribute *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setPositionIncrement(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "positionIncrement", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FieldCache$CreationPlaceholder.h"
#include "org/apache/lucene/util/Accountable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FieldCache$CreationPlaceholder::class$ = NULL;
        jmethodID *FieldCache$CreationPlaceholder::mids$ = NULL;
        bool FieldCache$CreationPlaceholder::live$ = false;

        jclass FieldCache$CreationPlaceholder::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FieldCache$CreationPlaceholder");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FieldCache$CreationPlaceholder::FieldCache$CreationPlaceholder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jlong FieldCache$CreationPlaceholder::ramBytesUsed() const
        {
          return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FieldCache$CreationPlaceholder_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldCache$CreationPlaceholder_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FieldCache$CreationPlaceholder_init_(t_FieldCache$CreationPlaceholder *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FieldCache$CreationPlaceholder_ramBytesUsed(t_FieldCache$CreationPlaceholder *self);

        static PyMethodDef t_FieldCache$CreationPlaceholder__methods_[] = {
          DECLARE_METHOD(t_FieldCache$CreationPlaceholder, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCache$CreationPlaceholder, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCache$CreationPlaceholder, ramBytesUsed, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldCache$CreationPlaceholder, t_FieldCache$CreationPlaceholder, ::java::lang::Object, FieldCache$CreationPlaceholder, t_FieldCache$CreationPlaceholder_init_, 0, 0, 0, 0, 0);

        void t_FieldCache$CreationPlaceholder::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldCache$CreationPlaceholder), module, "FieldCache$CreationPlaceholder", 0);
        }

        void t_FieldCache$CreationPlaceholder::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldCache$CreationPlaceholder).tp_dict, "class_", make_descriptor(FieldCache$CreationPlaceholder::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldCache$CreationPlaceholder).tp_dict, "wrapfn_", make_descriptor(t_FieldCache$CreationPlaceholder::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldCache$CreationPlaceholder).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldCache$CreationPlaceholder_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldCache$CreationPlaceholder::initializeClass, 1)))
            return NULL;
          return t_FieldCache$CreationPlaceholder::wrap_Object(FieldCache$CreationPlaceholder(((t_FieldCache$CreationPlaceholder *) arg)->object.this$));
        }
        static PyObject *t_FieldCache$CreationPlaceholder_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldCache$CreationPlaceholder::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FieldCache$CreationPlaceholder_init_(t_FieldCache$CreationPlaceholder *self, PyObject *args, PyObject *kwds)
        {
          FieldCache$CreationPlaceholder object((jobject) NULL);

          INT_CALL(object = FieldCache$CreationPlaceholder());
          self->object = object;

          return 0;
        }

        static PyObject *t_FieldCache$CreationPlaceholder_ramBytesUsed(t_FieldCache$CreationPlaceholder *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.ramBytesUsed());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/xml/builders/SpanOrTermsBuilder.h"
#include "org/apache/lucene/search/spans/SpanQuery.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {

            ::java::lang::Class *SpanOrTermsBuilder::class$ = NULL;
            jmethodID *SpanOrTermsBuilder::mids$ = NULL;
            bool SpanOrTermsBuilder::live$ = false;

            jclass SpanOrTermsBuilder::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/xml/builders/SpanOrTermsBuilder");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_31619410] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Analyzer;)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            SpanOrTermsBuilder::SpanOrTermsBuilder(const ::org::apache::lucene::analysis::Analyzer & a0) : ::org::apache::lucene::queryparser::xml::builders::SpanBuilderBase(env->newObject(initializeClass, &mids$, mid_init$_31619410, a0.this$)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {
            static PyObject *t_SpanOrTermsBuilder_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_SpanOrTermsBuilder_instance_(PyTypeObject *type, PyObject *arg);
            static int t_SpanOrTermsBuilder_init_(t_SpanOrTermsBuilder *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_SpanOrTermsBuilder__methods_[] = {
              DECLARE_METHOD(t_SpanOrTermsBuilder, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SpanOrTermsBuilder, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(SpanOrTermsBuilder, t_SpanOrTermsBuilder, ::org::apache::lucene::queryparser::xml::builders::SpanBuilderBase, SpanOrTermsBuilder, t_SpanOrTermsBuilder_init_, 0, 0, 0, 0, 0);

            void t_SpanOrTermsBuilder::install(PyObject *module)
            {
              installType(&PY_TYPE(SpanOrTermsBuilder), module, "SpanOrTermsBuilder", 0);
            }

            void t_SpanOrTermsBuilder::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(SpanOrTermsBuilder).tp_dict, "class_", make_descriptor(SpanOrTermsBuilder::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(SpanOrTermsBuilder).tp_dict, "wrapfn_", make_descriptor(t_SpanOrTermsBuilder::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(SpanOrTermsBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_SpanOrTermsBuilder_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, SpanOrTermsBuilder::initializeClass, 1)))
                return NULL;
              return t_SpanOrTermsBuilder::wrap_Object(SpanOrTermsBuilder(((t_SpanOrTermsBuilder *) arg)->object.this$));
            }
            static PyObject *t_SpanOrTermsBuilder_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, SpanOrTermsBuilder::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_SpanOrTermsBuilder_init_(t_SpanOrTermsBuilder *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
              SpanOrTermsBuilder object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0))
              {
                INT_CALL(object = SpanOrTermsBuilder(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/xml/builders/TermQueryBuilder.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/queryparser/xml/QueryBuilder.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {

            ::java::lang::Class *TermQueryBuilder::class$ = NULL;
            jmethodID *TermQueryBuilder::mids$ = NULL;
            bool TermQueryBuilder::live$ = false;

            jclass TermQueryBuilder::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/xml/builders/TermQueryBuilder");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            TermQueryBuilder::TermQueryBuilder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {
            static PyObject *t_TermQueryBuilder_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_TermQueryBuilder_instance_(PyTypeObject *type, PyObject *arg);
            static int t_TermQueryBuilder_init_(t_TermQueryBuilder *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_TermQueryBuilder__methods_[] = {
              DECLARE_METHOD(t_TermQueryBuilder, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TermQueryBuilder, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(TermQueryBuilder, t_TermQueryBuilder, ::java::lang::Object, TermQueryBuilder, t_TermQueryBuilder_init_, 0, 0, 0, 0, 0);

            void t_TermQueryBuilder::install(PyObject *module)
            {
              installType(&PY_TYPE(TermQueryBuilder), module, "TermQueryBuilder", 0);
            }

            void t_TermQueryBuilder::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(TermQueryBuilder).tp_dict, "class_", make_descriptor(TermQueryBuilder::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(TermQueryBuilder).tp_dict, "wrapfn_", make_descriptor(t_TermQueryBuilder::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(TermQueryBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_TermQueryBuilder_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, TermQueryBuilder::initializeClass, 1)))
                return NULL;
              return t_TermQueryBuilder::wrap_Object(TermQueryBuilder(((t_TermQueryBuilder *) arg)->object.this$));
            }
            static PyObject *t_TermQueryBuilder_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, TermQueryBuilder::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_TermQueryBuilder_init_(t_TermQueryBuilder *self, PyObject *args, PyObject *kwds)
            {
              TermQueryBuilder object((jobject) NULL);

              INT_CALL(object = TermQueryBuilder());
              self->object = object;

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/TopFieldDocs.h"
#include "org/apache/lucene/search/ScoreDoc.h"
#include "org/apache/lucene/search/SortField.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *TopFieldDocs::class$ = NULL;
        jmethodID *TopFieldDocs::mids$ = NULL;
        jfieldID *TopFieldDocs::fids$ = NULL;
        bool TopFieldDocs::live$ = false;

        jclass TopFieldDocs::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/TopFieldDocs");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_e6001f02] = env->getMethodID(cls, "<init>", "(I[Lorg/apache/lucene/search/ScoreDoc;[Lorg/apache/lucene/search/SortField;F)V");

            fids$ = new jfieldID[max_fid];
            fids$[fid_fields] = env->getFieldID(cls, "fields", "[Lorg/apache/lucene/search/SortField;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        TopFieldDocs::TopFieldDocs(jint a0, const JArray< ::org::apache::lucene::search::ScoreDoc > & a1, const JArray< ::org::apache::lucene::search::SortField > & a2, jfloat a3) : ::org::apache::lucene::search::TopDocs(env->newObject(initializeClass, &mids$, mid_init$_e6001f02, a0, a1.this$, a2.this$, a3)) {}

        JArray< ::org::apache::lucene::search::SortField > TopFieldDocs::_get_fields() const
        {
          return JArray< ::org::apache::lucene::search::SortField >(env->getObjectField(this$, fids$[fid_fields]));
        }

        void TopFieldDocs::_set_fields(const JArray< ::org::apache::lucene::search::SortField > & a0) const
        {
          env->setObjectField(this$, fids$[fid_fields], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_TopFieldDocs_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TopFieldDocs_instance_(PyTypeObject *type, PyObject *arg);
        static int t_TopFieldDocs_init_(t_TopFieldDocs *self, PyObject *args, PyObject *kwds);
        static PyObject *t_TopFieldDocs_get__fields(t_TopFieldDocs *self, void *data);
        static int t_TopFieldDocs_set__fields(t_TopFieldDocs *self, PyObject *arg, void *data);

        static PyGetSetDef t_TopFieldDocs__fields_[] = {
          DECLARE_GETSET_FIELD(t_TopFieldDocs, fields),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_TopFieldDocs__methods_[] = {
          DECLARE_METHOD(t_TopFieldDocs, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TopFieldDocs, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TopFieldDocs, t_TopFieldDocs, ::org::apache::lucene::search::TopDocs, TopFieldDocs, t_TopFieldDocs_init_, 0, 0, t_TopFieldDocs__fields_, 0, 0);

        void t_TopFieldDocs::install(PyObject *module)
        {
          installType(&PY_TYPE(TopFieldDocs), module, "TopFieldDocs", 0);
        }

        void t_TopFieldDocs::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TopFieldDocs).tp_dict, "class_", make_descriptor(TopFieldDocs::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TopFieldDocs).tp_dict, "wrapfn_", make_descriptor(t_TopFieldDocs::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TopFieldDocs).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TopFieldDocs_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TopFieldDocs::initializeClass, 1)))
            return NULL;
          return t_TopFieldDocs::wrap_Object(TopFieldDocs(((t_TopFieldDocs *) arg)->object.this$));
        }
        static PyObject *t_TopFieldDocs_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TopFieldDocs::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_TopFieldDocs_init_(t_TopFieldDocs *self, PyObject *args, PyObject *kwds)
        {
          jint a0;
          JArray< ::org::apache::lucene::search::ScoreDoc > a1((jobject) NULL);
          JArray< ::org::apache::lucene::search::SortField > a2((jobject) NULL);
          jfloat a3;
          TopFieldDocs object((jobject) NULL);

          if (!parseArgs(args, "I[k[kF", ::org::apache::lucene::search::ScoreDoc::initializeClass, ::org::apache::lucene::search::SortField::initializeClass, &a0, &a1, &a2, &a3))
          {
            INT_CALL(object = TopFieldDocs(a0, a1, a2, a3));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_TopFieldDocs_get__fields(t_TopFieldDocs *self, void *data)
        {
          JArray< ::org::apache::lucene::search::SortField > value((jobject) NULL);
          OBJ_CALL(value = self->object._get_fields());
          return JArray<jobject>(value.this$).wrap(::org::apache::lucene::search::t_SortField::wrap_jobject);
        }
        static int t_TopFieldDocs_set__fields(t_TopFieldDocs *self, PyObject *arg, void *data)
        {
          JArray< ::org::apache::lucene::search::SortField > value((jobject) NULL);
          if (!parseArg(arg, "[k", ::org::apache::lucene::search::SortField::initializeClass, &value))
          {
            INT_CALL(self->object._set_fields(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "fields", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/lv/LatvianStemFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace lv {

          ::java::lang::Class *LatvianStemFilter::class$ = NULL;
          jmethodID *LatvianStemFilter::mids$ = NULL;
          bool LatvianStemFilter::live$ = false;

          jclass LatvianStemFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/lv/LatvianStemFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          LatvianStemFilter::LatvianStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean LatvianStemFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace lv {
          static PyObject *t_LatvianStemFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LatvianStemFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_LatvianStemFilter_init_(t_LatvianStemFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_LatvianStemFilter_incrementToken(t_LatvianStemFilter *self, PyObject *args);

          static PyMethodDef t_LatvianStemFilter__methods_[] = {
            DECLARE_METHOD(t_LatvianStemFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LatvianStemFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LatvianStemFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(LatvianStemFilter, t_LatvianStemFilter, ::org::apache::lucene::analysis::TokenFilter, LatvianStemFilter, t_LatvianStemFilter_init_, 0, 0, 0, 0, 0);

          void t_LatvianStemFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(LatvianStemFilter), module, "LatvianStemFilter", 0);
          }

          void t_LatvianStemFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(LatvianStemFilter).tp_dict, "class_", make_descriptor(LatvianStemFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(LatvianStemFilter).tp_dict, "wrapfn_", make_descriptor(t_LatvianStemFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(LatvianStemFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_LatvianStemFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LatvianStemFilter::initializeClass, 1)))
              return NULL;
            return t_LatvianStemFilter::wrap_Object(LatvianStemFilter(((t_LatvianStemFilter *) arg)->object.this$));
          }
          static PyObject *t_LatvianStemFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LatvianStemFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_LatvianStemFilter_init_(t_LatvianStemFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            LatvianStemFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = LatvianStemFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_LatvianStemFilter_incrementToken(t_LatvianStemFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(LatvianStemFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FieldCache$Longs.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FieldCache$Longs::class$ = NULL;
        jmethodID *FieldCache$Longs::mids$ = NULL;
        bool FieldCache$Longs::live$ = false;
        FieldCache$Longs *FieldCache$Longs::EMPTY = NULL;

        jclass FieldCache$Longs::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FieldCache$Longs");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_get_39c7bd20] = env->getMethodID(cls, "get", "(I)J");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            EMPTY = new FieldCache$Longs(env->getStaticObjectField(cls, "EMPTY", "Lorg/apache/lucene/search/FieldCache$Longs;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FieldCache$Longs::FieldCache$Longs() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jlong FieldCache$Longs::get(jint a0) const
        {
          return env->callLongMethod(this$, mids$[mid_get_39c7bd20], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FieldCache$Longs_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldCache$Longs_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FieldCache$Longs_init_(t_FieldCache$Longs *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FieldCache$Longs_get(t_FieldCache$Longs *self, PyObject *arg);

        static PyMethodDef t_FieldCache$Longs__methods_[] = {
          DECLARE_METHOD(t_FieldCache$Longs, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCache$Longs, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCache$Longs, get, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldCache$Longs, t_FieldCache$Longs, ::java::lang::Object, FieldCache$Longs, t_FieldCache$Longs_init_, 0, 0, 0, 0, 0);

        void t_FieldCache$Longs::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldCache$Longs), module, "FieldCache$Longs", 0);
        }

        void t_FieldCache$Longs::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldCache$Longs).tp_dict, "class_", make_descriptor(FieldCache$Longs::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldCache$Longs).tp_dict, "wrapfn_", make_descriptor(t_FieldCache$Longs::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldCache$Longs).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(FieldCache$Longs::initializeClass);
          PyDict_SetItemString(PY_TYPE(FieldCache$Longs).tp_dict, "EMPTY", make_descriptor(t_FieldCache$Longs::wrap_Object(*FieldCache$Longs::EMPTY)));
        }

        static PyObject *t_FieldCache$Longs_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldCache$Longs::initializeClass, 1)))
            return NULL;
          return t_FieldCache$Longs::wrap_Object(FieldCache$Longs(((t_FieldCache$Longs *) arg)->object.this$));
        }
        static PyObject *t_FieldCache$Longs_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldCache$Longs::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FieldCache$Longs_init_(t_FieldCache$Longs *self, PyObject *args, PyObject *kwds)
        {
          FieldCache$Longs object((jobject) NULL);

          INT_CALL(object = FieldCache$Longs());
          self->object = object;

          return 0;
        }

        static PyObject *t_FieldCache$Longs_get(t_FieldCache$Longs *self, PyObject *arg)
        {
          jint a0;
          jlong result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.get(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError((PyObject *) self, "get", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FilterScorer.h"
#include "org/apache/lucene/util/AttributeSource.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FilterScorer::class$ = NULL;
        jmethodID *FilterScorer::mids$ = NULL;
        bool FilterScorer::live$ = false;

        jclass FilterScorer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FilterScorer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_8be0880c] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Scorer;)V");
            mids$[mid_advance_39c7bd23] = env->getMethodID(cls, "advance", "(I)I");
            mids$[mid_attributes_f901022b] = env->getMethodID(cls, "attributes", "()Lorg/apache/lucene/util/AttributeSource;");
            mids$[mid_cost_54c6a17a] = env->getMethodID(cls, "cost", "()J");
            mids$[mid_docID_54c6a179] = env->getMethodID(cls, "docID", "()I");
            mids$[mid_freq_54c6a179] = env->getMethodID(cls, "freq", "()I");
            mids$[mid_nextDoc_54c6a179] = env->getMethodID(cls, "nextDoc", "()I");
            mids$[mid_score_54c6a176] = env->getMethodID(cls, "score", "()F");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FilterScorer::FilterScorer(const ::org::apache::lucene::search::Scorer & a0) : ::org::apache::lucene::search::Scorer(env->newObject(initializeClass, &mids$, mid_init$_8be0880c, a0.this$)) {}

        jint FilterScorer::advance(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_advance_39c7bd23], a0);
        }

        ::org::apache::lucene::util::AttributeSource FilterScorer::attributes() const
        {
          return ::org::apache::lucene::util::AttributeSource(env->callObjectMethod(this$, mids$[mid_attributes_f901022b]));
        }

        jlong FilterScorer::cost() const
        {
          return env->callLongMethod(this$, mids$[mid_cost_54c6a17a]);
        }

        jint FilterScorer::docID() const
        {
          return env->callIntMethod(this$, mids$[mid_docID_54c6a179]);
        }

        jint FilterScorer::freq() const
        {
          return env->callIntMethod(this$, mids$[mid_freq_54c6a179]);
        }

        jint FilterScorer::nextDoc() const
        {
          return env->callIntMethod(this$, mids$[mid_nextDoc_54c6a179]);
        }

        jfloat FilterScorer::score() const
        {
          return env->callFloatMethod(this$, mids$[mid_score_54c6a176]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FilterScorer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FilterScorer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FilterScorer_init_(t_FilterScorer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FilterScorer_advance(t_FilterScorer *self, PyObject *args);
        static PyObject *t_FilterScorer_attributes(t_FilterScorer *self, PyObject *args);
        static PyObject *t_FilterScorer_cost(t_FilterScorer *self, PyObject *args);
        static PyObject *t_FilterScorer_docID(t_FilterScorer *self, PyObject *args);
        static PyObject *t_FilterScorer_freq(t_FilterScorer *self, PyObject *args);
        static PyObject *t_FilterScorer_nextDoc(t_FilterScorer *self, PyObject *args);
        static PyObject *t_FilterScorer_score(t_FilterScorer *self, PyObject *args);

        static PyMethodDef t_FilterScorer__methods_[] = {
          DECLARE_METHOD(t_FilterScorer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilterScorer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilterScorer, advance, METH_VARARGS),
          DECLARE_METHOD(t_FilterScorer, attributes, METH_VARARGS),
          DECLARE_METHOD(t_FilterScorer, cost, METH_VARARGS),
          DECLARE_METHOD(t_FilterScorer, docID, METH_VARARGS),
          DECLARE_METHOD(t_FilterScorer, freq, METH_VARARGS),
          DECLARE_METHOD(t_FilterScorer, nextDoc, METH_VARARGS),
          DECLARE_METHOD(t_FilterScorer, score, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FilterScorer, t_FilterScorer, ::org::apache::lucene::search::Scorer, FilterScorer, t_FilterScorer_init_, 0, 0, 0, 0, 0);

        void t_FilterScorer::install(PyObject *module)
        {
          installType(&PY_TYPE(FilterScorer), module, "FilterScorer", 0);
        }

        void t_FilterScorer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FilterScorer).tp_dict, "class_", make_descriptor(FilterScorer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FilterScorer).tp_dict, "wrapfn_", make_descriptor(t_FilterScorer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FilterScorer).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FilterScorer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FilterScorer::initializeClass, 1)))
            return NULL;
          return t_FilterScorer::wrap_Object(FilterScorer(((t_FilterScorer *) arg)->object.this$));
        }
        static PyObject *t_FilterScorer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FilterScorer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FilterScorer_init_(t_FilterScorer *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::search::Scorer a0((jobject) NULL);
          FilterScorer object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::search::Scorer::initializeClass, &a0))
          {
            INT_CALL(object = FilterScorer(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FilterScorer_advance(t_FilterScorer *self, PyObject *args)
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.advance(a0));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FilterScorer), (PyObject *) self, "advance", args, 2);
        }

        static PyObject *t_FilterScorer_attributes(t_FilterScorer *self, PyObject *args)
        {
          ::org::apache::lucene::util::AttributeSource result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.attributes());
            return ::org::apache::lucene::util::t_AttributeSource::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilterScorer), (PyObject *) self, "attributes", args, 2);
        }

        static PyObject *t_FilterScorer_cost(t_FilterScorer *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.cost());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(FilterScorer), (PyObject *) self, "cost", args, 2);
        }

        static PyObject *t_FilterScorer_docID(t_FilterScorer *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.docID());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FilterScorer), (PyObject *) self, "docID", args, 2);
        }

        static PyObject *t_FilterScorer_freq(t_FilterScorer *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.freq());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FilterScorer), (PyObject *) self, "freq", args, 2);
        }

        static PyObject *t_FilterScorer_nextDoc(t_FilterScorer *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.nextDoc());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FilterScorer), (PyObject *) self, "nextDoc", args, 2);
        }

        static PyObject *t_FilterScorer_score(t_FilterScorer *self, PyObject *args)
        {
          jfloat result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.score());
            return PyFloat_FromDouble((double) result);
          }

          return callSuper(&PY_TYPE(FilterScorer), (PyObject *) self, "score", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "org/apache/lucene/util/AttributeImpl.h"
#include "org/apache/lucene/util/Attribute.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *AttributeFactory::class$ = NULL;
        jmethodID *AttributeFactory::mids$ = NULL;
        bool AttributeFactory::live$ = false;
        AttributeFactory *AttributeFactory::DEFAULT_ATTRIBUTE_FACTORY = NULL;

        jclass AttributeFactory::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/AttributeFactory");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_createAttributeInstance_4f9d0910] = env->getMethodID(cls, "createAttributeInstance", "(Ljava/lang/Class;)Lorg/apache/lucene/util/AttributeImpl;");
            mids$[mid_getStaticImplementation_223064f9] = env->getStaticMethodID(cls, "getStaticImplementation", "(Lorg/apache/lucene/util/AttributeFactory;Ljava/lang/Class;)Lorg/apache/lucene/util/AttributeFactory;");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            DEFAULT_ATTRIBUTE_FACTORY = new AttributeFactory(env->getStaticObjectField(cls, "DEFAULT_ATTRIBUTE_FACTORY", "Lorg/apache/lucene/util/AttributeFactory;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        AttributeFactory::AttributeFactory() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        ::org::apache::lucene::util::AttributeImpl AttributeFactory::createAttributeInstance(const ::java::lang::Class & a0) const
        {
          return ::org::apache::lucene::util::AttributeImpl(env->callObjectMethod(this$, mids$[mid_createAttributeInstance_4f9d0910], a0.this$));
        }

        AttributeFactory AttributeFactory::getStaticImplementation(const AttributeFactory & a0, const ::java::lang::Class & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return AttributeFactory(env->callStaticObjectMethod(cls, mids$[mid_getStaticImplementation_223064f9], a0.this$, a1.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/util/AttributeFactory$StaticImplementationAttributeFactory.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_AttributeFactory_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_AttributeFactory_instance_(PyTypeObject *type, PyObject *arg);
        static int t_AttributeFactory_init_(t_AttributeFactory *self, PyObject *args, PyObject *kwds);
        static PyObject *t_AttributeFactory_createAttributeInstance(t_AttributeFactory *self, PyObject *arg);
        static PyObject *t_AttributeFactory_getStaticImplementation(PyTypeObject *type, PyObject *args);

        static PyMethodDef t_AttributeFactory__methods_[] = {
          DECLARE_METHOD(t_AttributeFactory, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_AttributeFactory, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_AttributeFactory, createAttributeInstance, METH_O),
          DECLARE_METHOD(t_AttributeFactory, getStaticImplementation, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(AttributeFactory, t_AttributeFactory, ::java::lang::Object, AttributeFactory, t_AttributeFactory_init_, 0, 0, 0, 0, 0);

        void t_AttributeFactory::install(PyObject *module)
        {
          installType(&PY_TYPE(AttributeFactory), module, "AttributeFactory", 0);
          PyDict_SetItemString(PY_TYPE(AttributeFactory).tp_dict, "StaticImplementationAttributeFactory", make_descriptor(&PY_TYPE(AttributeFactory$StaticImplementationAttributeFactory)));
        }

        void t_AttributeFactory::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(AttributeFactory).tp_dict, "class_", make_descriptor(AttributeFactory::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(AttributeFactory).tp_dict, "wrapfn_", make_descriptor(t_AttributeFactory::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(AttributeFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(AttributeFactory::initializeClass);
          PyDict_SetItemString(PY_TYPE(AttributeFactory).tp_dict, "DEFAULT_ATTRIBUTE_FACTORY", make_descriptor(t_AttributeFactory::wrap_Object(*AttributeFactory::DEFAULT_ATTRIBUTE_FACTORY)));
        }

        static PyObject *t_AttributeFactory_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, AttributeFactory::initializeClass, 1)))
            return NULL;
          return t_AttributeFactory::wrap_Object(AttributeFactory(((t_AttributeFactory *) arg)->object.this$));
        }
        static PyObject *t_AttributeFactory_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, AttributeFactory::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_AttributeFactory_init_(t_AttributeFactory *self, PyObject *args, PyObject *kwds)
        {
          AttributeFactory object((jobject) NULL);

          INT_CALL(object = AttributeFactory());
          self->object = object;

          return 0;
        }

        static PyObject *t_AttributeFactory_createAttributeInstance(t_AttributeFactory *self, PyObject *arg)
        {
          ::java::lang::Class a0((jobject) NULL);
          PyTypeObject **p0;
          ::org::apache::lucene::util::AttributeImpl result((jobject) NULL);

          if (!parseArg(arg, "K", ::java::lang::Class::initializeClass, &a0, &p0, ::java::lang::t_Class::parameters_))
          {
            OBJ_CALL(result = self->object.createAttributeInstance(a0));
            return ::org::apache::lucene::util::t_AttributeImpl::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "createAttributeInstance", arg);
          return NULL;
        }

        static PyObject *t_AttributeFactory_getStaticImplementation(PyTypeObject *type, PyObject *args)
        {
          AttributeFactory a0((jobject) NULL);
          ::java::lang::Class a1((jobject) NULL);
          PyTypeObject **p1;
          AttributeFactory result((jobject) NULL);

          if (!parseArgs(args, "kK", AttributeFactory::initializeClass, ::java::lang::Class::initializeClass, &a0, &a1, &p1, ::java::lang::t_Class::parameters_))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::AttributeFactory::getStaticImplementation(a0, a1));
            return t_AttributeFactory::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "getStaticImplementation", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/StraightBytesDocValuesField.h"
#include "org/apache/lucene/document/FieldType.h"
#include "java/lang/String.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *StraightBytesDocValuesField::class$ = NULL;
        jmethodID *StraightBytesDocValuesField::mids$ = NULL;
        bool StraightBytesDocValuesField::live$ = false;
        ::org::apache::lucene::document::FieldType *StraightBytesDocValuesField::TYPE_FIXED_LEN = NULL;
        ::org::apache::lucene::document::FieldType *StraightBytesDocValuesField::TYPE_VAR_LEN = NULL;

        jclass StraightBytesDocValuesField::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/StraightBytesDocValuesField");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_43cce44e] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/util/BytesRef;)V");
            mids$[mid_init$_6c8dc377] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/util/BytesRef;Z)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            TYPE_FIXED_LEN = new ::org::apache::lucene::document::FieldType(env->getStaticObjectField(cls, "TYPE_FIXED_LEN", "Lorg/apache/lucene/document/FieldType;"));
            TYPE_VAR_LEN = new ::org::apache::lucene::document::FieldType(env->getStaticObjectField(cls, "TYPE_VAR_LEN", "Lorg/apache/lucene/document/FieldType;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        StraightBytesDocValuesField::StraightBytesDocValuesField(const ::java::lang::String & a0, const ::org::apache::lucene::util::BytesRef & a1) : ::org::apache::lucene::document::BinaryDocValuesField(env->newObject(initializeClass, &mids$, mid_init$_43cce44e, a0.this$, a1.this$)) {}

        StraightBytesDocValuesField::StraightBytesDocValuesField(const ::java::lang::String & a0, const ::org::apache::lucene::util::BytesRef & a1, jboolean a2) : ::org::apache::lucene::document::BinaryDocValuesField(env->newObject(initializeClass, &mids$, mid_init$_6c8dc377, a0.this$, a1.this$, a2)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_StraightBytesDocValuesField_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_StraightBytesDocValuesField_instance_(PyTypeObject *type, PyObject *arg);
        static int t_StraightBytesDocValuesField_init_(t_StraightBytesDocValuesField *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_StraightBytesDocValuesField__methods_[] = {
          DECLARE_METHOD(t_StraightBytesDocValuesField, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_StraightBytesDocValuesField, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(StraightBytesDocValuesField, t_StraightBytesDocValuesField, ::org::apache::lucene::document::BinaryDocValuesField, StraightBytesDocValuesField, t_StraightBytesDocValuesField_init_, 0, 0, 0, 0, 0);

        void t_StraightBytesDocValuesField::install(PyObject *module)
        {
          installType(&PY_TYPE(StraightBytesDocValuesField), module, "StraightBytesDocValuesField", 0);
        }

        void t_StraightBytesDocValuesField::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(StraightBytesDocValuesField).tp_dict, "class_", make_descriptor(StraightBytesDocValuesField::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(StraightBytesDocValuesField).tp_dict, "wrapfn_", make_descriptor(t_StraightBytesDocValuesField::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(StraightBytesDocValuesField).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(StraightBytesDocValuesField::initializeClass);
          PyDict_SetItemString(PY_TYPE(StraightBytesDocValuesField).tp_dict, "TYPE_FIXED_LEN", make_descriptor(::org::apache::lucene::document::t_FieldType::wrap_Object(*StraightBytesDocValuesField::TYPE_FIXED_LEN)));
          PyDict_SetItemString(PY_TYPE(StraightBytesDocValuesField).tp_dict, "TYPE_VAR_LEN", make_descriptor(::org::apache::lucene::document::t_FieldType::wrap_Object(*StraightBytesDocValuesField::TYPE_VAR_LEN)));
        }

        static PyObject *t_StraightBytesDocValuesField_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, StraightBytesDocValuesField::initializeClass, 1)))
            return NULL;
          return t_StraightBytesDocValuesField::wrap_Object(StraightBytesDocValuesField(((t_StraightBytesDocValuesField *) arg)->object.this$));
        }
        static PyObject *t_StraightBytesDocValuesField_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, StraightBytesDocValuesField::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_StraightBytesDocValuesField_init_(t_StraightBytesDocValuesField *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
              StraightBytesDocValuesField object((jobject) NULL);

              if (!parseArgs(args, "sk", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
              {
                INT_CALL(object = StraightBytesDocValuesField(a0, a1));
                self->object = object;
                break;
              }
            }
            goto err;
           case 3:
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
              jboolean a2;
              StraightBytesDocValuesField object((jobject) NULL);

              if (!parseArgs(args, "skZ", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = StraightBytesDocValuesField(a0, a1, a2));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/BlockTermState.h"
#include "org/apache/lucene/index/TermState.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {

        ::java::lang::Class *BlockTermState::class$ = NULL;
        jmethodID *BlockTermState::mids$ = NULL;
        jfieldID *BlockTermState::fids$ = NULL;
        bool BlockTermState::live$ = false;

        jclass BlockTermState::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/BlockTermState");

            mids$ = new jmethodID[max_mid];
            mids$[mid_copyFrom_d506ca07] = env->getMethodID(cls, "copyFrom", "(Lorg/apache/lucene/index/TermState;)V");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            fids$ = new jfieldID[max_fid];
            fids$[fid_blockFilePointer] = env->getFieldID(cls, "blockFilePointer", "J");
            fids$[fid_docFreq] = env->getFieldID(cls, "docFreq", "I");
            fids$[fid_termBlockOrd] = env->getFieldID(cls, "termBlockOrd", "I");
            fids$[fid_totalTermFreq] = env->getFieldID(cls, "totalTermFreq", "J");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void BlockTermState::copyFrom(const ::org::apache::lucene::index::TermState & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_copyFrom_d506ca07], a0.this$);
        }

        ::java::lang::String BlockTermState::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }

        jlong BlockTermState::_get_blockFilePointer() const
        {
          return env->getLongField(this$, fids$[fid_blockFilePointer]);
        }

        void BlockTermState::_set_blockFilePointer(jlong a0) const
        {
          env->setLongField(this$, fids$[fid_blockFilePointer], a0);
        }

        jint BlockTermState::_get_docFreq() const
        {
          return env->getIntField(this$, fids$[fid_docFreq]);
        }

        void BlockTermState::_set_docFreq(jint a0) const
        {
          env->setIntField(this$, fids$[fid_docFreq], a0);
        }

        jint BlockTermState::_get_termBlockOrd() const
        {
          return env->getIntField(this$, fids$[fid_termBlockOrd]);
        }

        void BlockTermState::_set_termBlockOrd(jint a0) const
        {
          env->setIntField(this$, fids$[fid_termBlockOrd], a0);
        }

        jlong BlockTermState::_get_totalTermFreq() const
        {
          return env->getLongField(this$, fids$[fid_totalTermFreq]);
        }

        void BlockTermState::_set_totalTermFreq(jlong a0) const
        {
          env->setLongField(this$, fids$[fid_totalTermFreq], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        static PyObject *t_BlockTermState_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BlockTermState_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BlockTermState_copyFrom(t_BlockTermState *self, PyObject *args);
        static PyObject *t_BlockTermState_toString(t_BlockTermState *self, PyObject *args);
        static PyObject *t_BlockTermState_get__blockFilePointer(t_BlockTermState *self, void *data);
        static int t_BlockTermState_set__blockFilePointer(t_BlockTermState *self, PyObject *arg, void *data);
        static PyObject *t_BlockTermState_get__docFreq(t_BlockTermState *self, void *data);
        static int t_BlockTermState_set__docFreq(t_BlockTermState *self, PyObject *arg, void *data);
        static PyObject *t_BlockTermState_get__termBlockOrd(t_BlockTermState *self, void *data);
        static int t_BlockTermState_set__termBlockOrd(t_BlockTermState *self, PyObject *arg, void *data);
        static PyObject *t_BlockTermState_get__totalTermFreq(t_BlockTermState *self, void *data);
        static int t_BlockTermState_set__totalTermFreq(t_BlockTermState *self, PyObject *arg, void *data);

        static PyGetSetDef t_BlockTermState__fields_[] = {
          DECLARE_GETSET_FIELD(t_BlockTermState, blockFilePointer),
          DECLARE_GETSET_FIELD(t_BlockTermState, docFreq),
          DECLARE_GETSET_FIELD(t_BlockTermState, termBlockOrd),
          DECLARE_GETSET_FIELD(t_BlockTermState, totalTermFreq),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_BlockTermState__methods_[] = {
          DECLARE_METHOD(t_BlockTermState, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BlockTermState, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BlockTermState, copyFrom, METH_VARARGS),
          DECLARE_METHOD(t_BlockTermState, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(BlockTermState, t_BlockTermState, ::org::apache::lucene::index::OrdTermState, BlockTermState, abstract_init, 0, 0, t_BlockTermState__fields_, 0, 0);

        void t_BlockTermState::install(PyObject *module)
        {
          installType(&PY_TYPE(BlockTermState), module, "BlockTermState", 0);
        }

        void t_BlockTermState::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(BlockTermState).tp_dict, "class_", make_descriptor(BlockTermState::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(BlockTermState).tp_dict, "wrapfn_", make_descriptor(t_BlockTermState::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(BlockTermState).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_BlockTermState_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, BlockTermState::initializeClass, 1)))
            return NULL;
          return t_BlockTermState::wrap_Object(BlockTermState(((t_BlockTermState *) arg)->object.this$));
        }
        static PyObject *t_BlockTermState_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, BlockTermState::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_BlockTermState_copyFrom(t_BlockTermState *self, PyObject *args)
        {
          ::org::apache::lucene::index::TermState a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::TermState::initializeClass, &a0))
          {
            OBJ_CALL(self->object.copyFrom(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(BlockTermState), (PyObject *) self, "copyFrom", args, 2);
        }

        static PyObject *t_BlockTermState_toString(t_BlockTermState *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(BlockTermState), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_BlockTermState_get__blockFilePointer(t_BlockTermState *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object._get_blockFilePointer());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
        static int t_BlockTermState_set__blockFilePointer(t_BlockTermState *self, PyObject *arg, void *data)
        {
          jlong value;
          if (!parseArg(arg, "J", &value))
          {
            INT_CALL(self->object._set_blockFilePointer(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "blockFilePointer", arg);
          return -1;
        }

        static PyObject *t_BlockTermState_get__docFreq(t_BlockTermState *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_docFreq());
          return PyInt_FromLong((long) value);
        }
        static int t_BlockTermState_set__docFreq(t_BlockTermState *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_docFreq(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "docFreq", arg);
          return -1;
        }

        static PyObject *t_BlockTermState_get__termBlockOrd(t_BlockTermState *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_termBlockOrd());
          return PyInt_FromLong((long) value);
        }
        static int t_BlockTermState_set__termBlockOrd(t_BlockTermState *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_termBlockOrd(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "termBlockOrd", arg);
          return -1;
        }

        static PyObject *t_BlockTermState_get__totalTermFreq(t_BlockTermState *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object._get_totalTermFreq());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
        static int t_BlockTermState_set__totalTermFreq(t_BlockTermState *self, PyObject *arg, void *data)
        {
          jlong value;
          if (!parseArg(arg, "J", &value))
          {
            INT_CALL(self->object._set_totalTermFreq(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "totalTermFreq", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/CustomScoreProvider.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/search/Explanation.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {

        ::java::lang::Class *CustomScoreProvider::class$ = NULL;
        jmethodID *CustomScoreProvider::mids$ = NULL;
        bool CustomScoreProvider::live$ = false;

        jclass CustomScoreProvider::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/queries/CustomScoreProvider");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_a6f59947] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/AtomicReaderContext;)V");
            mids$[mid_customExplain_3236f395] = env->getMethodID(cls, "customExplain", "(ILorg/apache/lucene/search/Explanation;Lorg/apache/lucene/search/Explanation;)Lorg/apache/lucene/search/Explanation;");
            mids$[mid_customExplain_bec3370d] = env->getMethodID(cls, "customExplain", "(ILorg/apache/lucene/search/Explanation;[Lorg/apache/lucene/search/Explanation;)Lorg/apache/lucene/search/Explanation;");
            mids$[mid_customScore_f55b9306] = env->getMethodID(cls, "customScore", "(IFF)F");
            mids$[mid_customScore_c9ca8e84] = env->getMethodID(cls, "customScore", "(IF[F)F");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        CustomScoreProvider::CustomScoreProvider(const ::org::apache::lucene::index::AtomicReaderContext & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_a6f59947, a0.this$)) {}

        ::org::apache::lucene::search::Explanation CustomScoreProvider::customExplain(jint a0, const ::org::apache::lucene::search::Explanation & a1, const ::org::apache::lucene::search::Explanation & a2) const
        {
          return ::org::apache::lucene::search::Explanation(env->callObjectMethod(this$, mids$[mid_customExplain_3236f395], a0, a1.this$, a2.this$));
        }

        ::org::apache::lucene::search::Explanation CustomScoreProvider::customExplain(jint a0, const ::org::apache::lucene::search::Explanation & a1, const JArray< ::org::apache::lucene::search::Explanation > & a2) const
        {
          return ::org::apache::lucene::search::Explanation(env->callObjectMethod(this$, mids$[mid_customExplain_bec3370d], a0, a1.this$, a2.this$));
        }

        jfloat CustomScoreProvider::customScore(jint a0, jfloat a1, jfloat a2) const
        {
          return env->callFloatMethod(this$, mids$[mid_customScore_f55b9306], a0, a1, a2);
        }

        jfloat CustomScoreProvider::customScore(jint a0, jfloat a1, const JArray< jfloat > & a2) const
        {
          return env->callFloatMethod(this$, mids$[mid_customScore_c9ca8e84], a0, a1, a2.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        static PyObject *t_CustomScoreProvider_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CustomScoreProvider_instance_(PyTypeObject *type, PyObject *arg);
        static int t_CustomScoreProvider_init_(t_CustomScoreProvider *self, PyObject *args, PyObject *kwds);
        static PyObject *t_CustomScoreProvider_customExplain(t_CustomScoreProvider *self, PyObject *args);
        static PyObject *t_CustomScoreProvider_customScore(t_CustomScoreProvider *self, PyObject *args);

        static PyMethodDef t_CustomScoreProvider__methods_[] = {
          DECLARE_METHOD(t_CustomScoreProvider, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CustomScoreProvider, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CustomScoreProvider, customExplain, METH_VARARGS),
          DECLARE_METHOD(t_CustomScoreProvider, customScore, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(CustomScoreProvider, t_CustomScoreProvider, ::java::lang::Object, CustomScoreProvider, t_CustomScoreProvider_init_, 0, 0, 0, 0, 0);

        void t_CustomScoreProvider::install(PyObject *module)
        {
          installType(&PY_TYPE(CustomScoreProvider), module, "CustomScoreProvider", 0);
        }

        void t_CustomScoreProvider::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(CustomScoreProvider).tp_dict, "class_", make_descriptor(CustomScoreProvider::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(CustomScoreProvider).tp_dict, "wrapfn_", make_descriptor(t_CustomScoreProvider::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(CustomScoreProvider).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_CustomScoreProvider_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CustomScoreProvider::initializeClass, 1)))
            return NULL;
          return t_CustomScoreProvider::wrap_Object(CustomScoreProvider(((t_CustomScoreProvider *) arg)->object.this$));
        }
        static PyObject *t_CustomScoreProvider_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CustomScoreProvider::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_CustomScoreProvider_init_(t_CustomScoreProvider *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
          CustomScoreProvider object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0))
          {
            INT_CALL(object = CustomScoreProvider(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_CustomScoreProvider_customExplain(t_CustomScoreProvider *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 3:
            {
              jint a0;
              ::org::apache::lucene::search::Explanation a1((jobject) NULL);
              ::org::apache::lucene::search::Explanation a2((jobject) NULL);
              ::org::apache::lucene::search::Explanation result((jobject) NULL);

              if (!parseArgs(args, "Ikk", ::org::apache::lucene::search::Explanation::initializeClass, ::org::apache::lucene::search::Explanation::initializeClass, &a0, &a1, &a2))
              {
                OBJ_CALL(result = self->object.customExplain(a0, a1, a2));
                return ::org::apache::lucene::search::t_Explanation::wrap_Object(result);
              }
            }
            {
              jint a0;
              ::org::apache::lucene::search::Explanation a1((jobject) NULL);
              JArray< ::org::apache::lucene::search::Explanation > a2((jobject) NULL);
              ::org::apache::lucene::search::Explanation result((jobject) NULL);

              if (!parseArgs(args, "Ik[k", ::org::apache::lucene::search::Explanation::initializeClass, ::org::apache::lucene::search::Explanation::initializeClass, &a0, &a1, &a2))
              {
                OBJ_CALL(result = self->object.customExplain(a0, a1, a2));
                return ::org::apache::lucene::search::t_Explanation::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "customExplain", args);
          return NULL;
        }

        static PyObject *t_CustomScoreProvider_customScore(t_CustomScoreProvider *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 3:
            {
              jint a0;
              jfloat a1;
              jfloat a2;
              jfloat result;

              if (!parseArgs(args, "IFF", &a0, &a1, &a2))
              {
                OBJ_CALL(result = self->object.customScore(a0, a1, a2));
                return PyFloat_FromDouble((double) result);
              }
            }
            {
              jint a0;
              jfloat a1;
              JArray< jfloat > a2((jobject) NULL);
              jfloat result;

              if (!parseArgs(args, "IF[F", &a0, &a1, &a2))
              {
                OBJ_CALL(result = self->object.customScore(a0, a1, a2));
                return PyFloat_FromDouble((double) result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "customScore", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FilteredQuery$FilterStrategy.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/Scorer.h"
#include "org/apache/lucene/search/DocIdSet.h"
#include "org/apache/lucene/search/Weight.h"
#include "org/apache/lucene/search/BulkScorer.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FilteredQuery$FilterStrategy::class$ = NULL;
        jmethodID *FilteredQuery$FilterStrategy::mids$ = NULL;
        bool FilteredQuery$FilterStrategy::live$ = false;

        jclass FilteredQuery$FilterStrategy::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FilteredQuery$FilterStrategy");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_filteredBulkScorer_b5c185de] = env->getMethodID(cls, "filteredBulkScorer", "(Lorg/apache/lucene/index/AtomicReaderContext;Lorg/apache/lucene/search/Weight;ZLorg/apache/lucene/search/DocIdSet;)Lorg/apache/lucene/search/BulkScorer;");
            mids$[mid_filteredScorer_05f41f97] = env->getMethodID(cls, "filteredScorer", "(Lorg/apache/lucene/index/AtomicReaderContext;Lorg/apache/lucene/search/Weight;Lorg/apache/lucene/search/DocIdSet;)Lorg/apache/lucene/search/Scorer;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FilteredQuery$FilterStrategy::FilteredQuery$FilterStrategy() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        ::org::apache::lucene::search::BulkScorer FilteredQuery$FilterStrategy::filteredBulkScorer(const ::org::apache::lucene::index::AtomicReaderContext & a0, const ::org::apache::lucene::search::Weight & a1, jboolean a2, const ::org::apache::lucene::search::DocIdSet & a3) const
        {
          return ::org::apache::lucene::search::BulkScorer(env->callObjectMethod(this$, mids$[mid_filteredBulkScorer_b5c185de], a0.this$, a1.this$, a2, a3.this$));
        }

        ::org::apache::lucene::search::Scorer FilteredQuery$FilterStrategy::filteredScorer(const ::org::apache::lucene::index::AtomicReaderContext & a0, const ::org::apache::lucene::search::Weight & a1, const ::org::apache::lucene::search::DocIdSet & a2) const
        {
          return ::org::apache::lucene::search::Scorer(env->callObjectMethod(this$, mids$[mid_filteredScorer_05f41f97], a0.this$, a1.this$, a2.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FilteredQuery$FilterStrategy_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FilteredQuery$FilterStrategy_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FilteredQuery$FilterStrategy_init_(t_FilteredQuery$FilterStrategy *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FilteredQuery$FilterStrategy_filteredBulkScorer(t_FilteredQuery$FilterStrategy *self, PyObject *args);
        static PyObject *t_FilteredQuery$FilterStrategy_filteredScorer(t_FilteredQuery$FilterStrategy *self, PyObject *args);

        static PyMethodDef t_FilteredQuery$FilterStrategy__methods_[] = {
          DECLARE_METHOD(t_FilteredQuery$FilterStrategy, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilteredQuery$FilterStrategy, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilteredQuery$FilterStrategy, filteredBulkScorer, METH_VARARGS),
          DECLARE_METHOD(t_FilteredQuery$FilterStrategy, filteredScorer, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FilteredQuery$FilterStrategy, t_FilteredQuery$FilterStrategy, ::java::lang::Object, FilteredQuery$FilterStrategy, t_FilteredQuery$FilterStrategy_init_, 0, 0, 0, 0, 0);

        void t_FilteredQuery$FilterStrategy::install(PyObject *module)
        {
          installType(&PY_TYPE(FilteredQuery$FilterStrategy), module, "FilteredQuery$FilterStrategy", 0);
        }

        void t_FilteredQuery$FilterStrategy::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FilteredQuery$FilterStrategy).tp_dict, "class_", make_descriptor(FilteredQuery$FilterStrategy::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FilteredQuery$FilterStrategy).tp_dict, "wrapfn_", make_descriptor(t_FilteredQuery$FilterStrategy::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FilteredQuery$FilterStrategy).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FilteredQuery$FilterStrategy_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FilteredQuery$FilterStrategy::initializeClass, 1)))
            return NULL;
          return t_FilteredQuery$FilterStrategy::wrap_Object(FilteredQuery$FilterStrategy(((t_FilteredQuery$FilterStrategy *) arg)->object.this$));
        }
        static PyObject *t_FilteredQuery$FilterStrategy_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FilteredQuery$FilterStrategy::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FilteredQuery$FilterStrategy_init_(t_FilteredQuery$FilterStrategy *self, PyObject *args, PyObject *kwds)
        {
          FilteredQuery$FilterStrategy object((jobject) NULL);

          INT_CALL(object = FilteredQuery$FilterStrategy());
          self->object = object;

          return 0;
        }

        static PyObject *t_FilteredQuery$FilterStrategy_filteredBulkScorer(t_FilteredQuery$FilterStrategy *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
          ::org::apache::lucene::search::Weight a1((jobject) NULL);
          jboolean a2;
          ::org::apache::lucene::search::DocIdSet a3((jobject) NULL);
          ::org::apache::lucene::search::BulkScorer result((jobject) NULL);

          if (!parseArgs(args, "kkZk", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, ::org::apache::lucene::search::Weight::initializeClass, ::org::apache::lucene::search::DocIdSet::initializeClass, &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(result = self->object.filteredBulkScorer(a0, a1, a2, a3));
            return ::org::apache::lucene::search::t_BulkScorer::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "filteredBulkScorer", args);
          return NULL;
        }

        static PyObject *t_FilteredQuery$FilterStrategy_filteredScorer(t_FilteredQuery$FilterStrategy *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
          ::org::apache::lucene::search::Weight a1((jobject) NULL);
          ::org::apache::lucene::search::DocIdSet a2((jobject) NULL);
          ::org::apache::lucene::search::Scorer result((jobject) NULL);

          if (!parseArgs(args, "kkk", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, ::org::apache::lucene::search::Weight::initializeClass, ::org::apache::lucene::search::DocIdSet::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.filteredScorer(a0, a1, a2));
            return ::org::apache::lucene::search::t_Scorer::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "filteredScorer", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/cjk/CJKTokenizer.h"
#include "java/io/IOException.h"
#include "java/io/Reader.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace cjk {

          ::java::lang::Class *CJKTokenizer::class$ = NULL;
          jmethodID *CJKTokenizer::mids$ = NULL;
          bool CJKTokenizer::live$ = false;

          jclass CJKTokenizer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/cjk/CJKTokenizer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_cf2e3c10] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;)V");
              mids$[mid_init$_5877b8f0] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;)V");
              mids$[mid_end_54c6a166] = env->getMethodID(cls, "end", "()V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CJKTokenizer::CJKTokenizer(const ::java::io::Reader & a0) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_cf2e3c10, a0.this$)) {}

          CJKTokenizer::CJKTokenizer(const ::org::apache::lucene::util::AttributeFactory & a0, const ::java::io::Reader & a1) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_5877b8f0, a0.this$, a1.this$)) {}

          void CJKTokenizer::end() const
          {
            env->callVoidMethod(this$, mids$[mid_end_54c6a166]);
          }

          jboolean CJKTokenizer::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void CJKTokenizer::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace cjk {
          static PyObject *t_CJKTokenizer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CJKTokenizer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CJKTokenizer_init_(t_CJKTokenizer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CJKTokenizer_end(t_CJKTokenizer *self, PyObject *args);
          static PyObject *t_CJKTokenizer_incrementToken(t_CJKTokenizer *self, PyObject *args);
          static PyObject *t_CJKTokenizer_reset(t_CJKTokenizer *self, PyObject *args);

          static PyMethodDef t_CJKTokenizer__methods_[] = {
            DECLARE_METHOD(t_CJKTokenizer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CJKTokenizer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CJKTokenizer, end, METH_VARARGS),
            DECLARE_METHOD(t_CJKTokenizer, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_CJKTokenizer, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CJKTokenizer, t_CJKTokenizer, ::org::apache::lucene::analysis::Tokenizer, CJKTokenizer, t_CJKTokenizer_init_, 0, 0, 0, 0, 0);

          void t_CJKTokenizer::install(PyObject *module)
          {
            installType(&PY_TYPE(CJKTokenizer), module, "CJKTokenizer", 0);
          }

          void t_CJKTokenizer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CJKTokenizer).tp_dict, "class_", make_descriptor(CJKTokenizer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CJKTokenizer).tp_dict, "wrapfn_", make_descriptor(t_CJKTokenizer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CJKTokenizer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CJKTokenizer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CJKTokenizer::initializeClass, 1)))
              return NULL;
            return t_CJKTokenizer::wrap_Object(CJKTokenizer(((t_CJKTokenizer *) arg)->object.this$));
          }
          static PyObject *t_CJKTokenizer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CJKTokenizer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CJKTokenizer_init_(t_CJKTokenizer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::java::io::Reader a0((jobject) NULL);
                CJKTokenizer object((jobject) NULL);

                if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
                {
                  INT_CALL(object = CJKTokenizer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
                ::java::io::Reader a1((jobject) NULL);
                CJKTokenizer object((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = CJKTokenizer(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_CJKTokenizer_end(t_CJKTokenizer *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.end());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(CJKTokenizer), (PyObject *) self, "end", args, 2);
          }

          static PyObject *t_CJKTokenizer_incrementToken(t_CJKTokenizer *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(CJKTokenizer), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_CJKTokenizer_reset(t_CJKTokenizer *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(CJKTokenizer), (PyObject *) self, "reset", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/Field$Index.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *Field$Index::class$ = NULL;
        jmethodID *Field$Index::mids$ = NULL;
        bool Field$Index::live$ = false;
        Field$Index *Field$Index::ANALYZED = NULL;
        Field$Index *Field$Index::ANALYZED_NO_NORMS = NULL;
        Field$Index *Field$Index::NO = NULL;
        Field$Index *Field$Index::NOT_ANALYZED = NULL;
        Field$Index *Field$Index::NOT_ANALYZED_NO_NORMS = NULL;

        jclass Field$Index::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/Field$Index");

            mids$ = new jmethodID[max_mid];
            mids$[mid_isAnalyzed_54c6a16a] = env->getMethodID(cls, "isAnalyzed", "()Z");
            mids$[mid_isIndexed_54c6a16a] = env->getMethodID(cls, "isIndexed", "()Z");
            mids$[mid_omitNorms_54c6a16a] = env->getMethodID(cls, "omitNorms", "()Z");
            mids$[mid_toIndex_0139857d] = env->getStaticMethodID(cls, "toIndex", "(ZZ)Lorg/apache/lucene/document/Field$Index;");
            mids$[mid_toIndex_fddaa68a] = env->getStaticMethodID(cls, "toIndex", "(ZZZ)Lorg/apache/lucene/document/Field$Index;");
            mids$[mid_valueOf_6b6ff451] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/document/Field$Index;");
            mids$[mid_values_d9660127] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/document/Field$Index;");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            ANALYZED = new Field$Index(env->getStaticObjectField(cls, "ANALYZED", "Lorg/apache/lucene/document/Field$Index;"));
            ANALYZED_NO_NORMS = new Field$Index(env->getStaticObjectField(cls, "ANALYZED_NO_NORMS", "Lorg/apache/lucene/document/Field$Index;"));
            NO = new Field$Index(env->getStaticObjectField(cls, "NO", "Lorg/apache/lucene/document/Field$Index;"));
            NOT_ANALYZED = new Field$Index(env->getStaticObjectField(cls, "NOT_ANALYZED", "Lorg/apache/lucene/document/Field$Index;"));
            NOT_ANALYZED_NO_NORMS = new Field$Index(env->getStaticObjectField(cls, "NOT_ANALYZED_NO_NORMS", "Lorg/apache/lucene/document/Field$Index;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jboolean Field$Index::isAnalyzed() const
        {
          return env->callBooleanMethod(this$, mids$[mid_isAnalyzed_54c6a16a]);
        }

        jboolean Field$Index::isIndexed() const
        {
          return env->callBooleanMethod(this$, mids$[mid_isIndexed_54c6a16a]);
        }

        jboolean Field$Index::omitNorms() const
        {
          return env->callBooleanMethod(this$, mids$[mid_omitNorms_54c6a16a]);
        }

        Field$Index Field$Index::toIndex(jboolean a0, jboolean a1)
        {
          jclass cls = env->getClass(initializeClass);
          return Field$Index(env->callStaticObjectMethod(cls, mids$[mid_toIndex_0139857d], a0, a1));
        }

        Field$Index Field$Index::toIndex(jboolean a0, jboolean a1, jboolean a2)
        {
          jclass cls = env->getClass(initializeClass);
          return Field$Index(env->callStaticObjectMethod(cls, mids$[mid_toIndex_fddaa68a], a0, a1, a2));
        }

        Field$Index Field$Index::valueOf(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return Field$Index(env->callStaticObjectMethod(cls, mids$[mid_valueOf_6b6ff451], a0.this$));
        }

        JArray< Field$Index > Field$Index::values()
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< Field$Index >(env->callStaticObjectMethod(cls, mids$[mid_values_d9660127]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_Field$Index_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Field$Index_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Field$Index_of_(t_Field$Index *self, PyObject *args);
        static PyObject *t_Field$Index_isAnalyzed(t_Field$Index *self);
        static PyObject *t_Field$Index_isIndexed(t_Field$Index *self);
        static PyObject *t_Field$Index_omitNorms(t_Field$Index *self);
        static PyObject *t_Field$Index_toIndex(PyTypeObject *type, PyObject *args);
        static PyObject *t_Field$Index_valueOf(PyTypeObject *type, PyObject *args);
        static PyObject *t_Field$Index_values(PyTypeObject *type);
        static PyObject *t_Field$Index_get__analyzed(t_Field$Index *self, void *data);
        static PyObject *t_Field$Index_get__indexed(t_Field$Index *self, void *data);
        static PyObject *t_Field$Index_get__parameters_(t_Field$Index *self, void *data);
        static PyGetSetDef t_Field$Index__fields_[] = {
          DECLARE_GET_FIELD(t_Field$Index, analyzed),
          DECLARE_GET_FIELD(t_Field$Index, indexed),
          DECLARE_GET_FIELD(t_Field$Index, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_Field$Index__methods_[] = {
          DECLARE_METHOD(t_Field$Index, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Field$Index, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Field$Index, of_, METH_VARARGS),
          DECLARE_METHOD(t_Field$Index, isAnalyzed, METH_NOARGS),
          DECLARE_METHOD(t_Field$Index, isIndexed, METH_NOARGS),
          DECLARE_METHOD(t_Field$Index, omitNorms, METH_NOARGS),
          DECLARE_METHOD(t_Field$Index, toIndex, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_Field$Index, valueOf, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_Field$Index, values, METH_NOARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Field$Index, t_Field$Index, ::java::lang::Enum, Field$Index, abstract_init, 0, 0, t_Field$Index__fields_, 0, 0);
        PyObject *t_Field$Index::wrap_Object(const Field$Index& object, PyTypeObject *p0)
        {
          PyObject *obj = t_Field$Index::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_Field$Index *self = (t_Field$Index *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_Field$Index::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_Field$Index::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_Field$Index *self = (t_Field$Index *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_Field$Index::install(PyObject *module)
        {
          installType(&PY_TYPE(Field$Index), module, "Field$Index", 0);
        }

        void t_Field$Index::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(Field$Index).tp_dict, "class_", make_descriptor(Field$Index::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(Field$Index).tp_dict, "wrapfn_", make_descriptor(t_Field$Index::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(Field$Index).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(Field$Index::initializeClass);
          PyDict_SetItemString(PY_TYPE(Field$Index).tp_dict, "ANALYZED", make_descriptor(t_Field$Index::wrap_Object(*Field$Index::ANALYZED)));
          PyDict_SetItemString(PY_TYPE(Field$Index).tp_dict, "ANALYZED_NO_NORMS", make_descriptor(t_Field$Index::wrap_Object(*Field$Index::ANALYZED_NO_NORMS)));
          PyDict_SetItemString(PY_TYPE(Field$Index).tp_dict, "NO", make_descriptor(t_Field$Index::wrap_Object(*Field$Index::NO)));
          PyDict_SetItemString(PY_TYPE(Field$Index).tp_dict, "NOT_ANALYZED", make_descriptor(t_Field$Index::wrap_Object(*Field$Index::NOT_ANALYZED)));
          PyDict_SetItemString(PY_TYPE(Field$Index).tp_dict, "NOT_ANALYZED_NO_NORMS", make_descriptor(t_Field$Index::wrap_Object(*Field$Index::NOT_ANALYZED_NO_NORMS)));
        }

        static PyObject *t_Field$Index_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Field$Index::initializeClass, 1)))
            return NULL;
          return t_Field$Index::wrap_Object(Field$Index(((t_Field$Index *) arg)->object.this$));
        }
        static PyObject *t_Field$Index_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Field$Index::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_Field$Index_of_(t_Field$Index *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_Field$Index_isAnalyzed(t_Field$Index *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.isAnalyzed());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_Field$Index_isIndexed(t_Field$Index *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.isIndexed());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_Field$Index_omitNorms(t_Field$Index *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.omitNorms());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_Field$Index_toIndex(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              jboolean a0;
              jboolean a1;
              Field$Index result((jobject) NULL);

              if (!parseArgs(args, "ZZ", &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::document::Field$Index::toIndex(a0, a1));
                return t_Field$Index::wrap_Object(result);
              }
            }
            break;
           case 3:
            {
              jboolean a0;
              jboolean a1;
              jboolean a2;
              Field$Index result((jobject) NULL);

              if (!parseArgs(args, "ZZZ", &a0, &a1, &a2))
              {
                OBJ_CALL(result = ::org::apache::lucene::document::Field$Index::toIndex(a0, a1, a2));
                return t_Field$Index::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError(type, "toIndex", args);
          return NULL;
        }

        static PyObject *t_Field$Index_valueOf(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          Field$Index result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::document::Field$Index::valueOf(a0));
            return t_Field$Index::wrap_Object(result);
          }

          return callSuper(type, "valueOf", args, 2);
        }

        static PyObject *t_Field$Index_values(PyTypeObject *type)
        {
          JArray< Field$Index > result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::document::Field$Index::values());
          return JArray<jobject>(result.this$).wrap(t_Field$Index::wrap_jobject);
        }
        static PyObject *t_Field$Index_get__parameters_(t_Field$Index *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static PyObject *t_Field$Index_get__analyzed(t_Field$Index *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.isAnalyzed());
          Py_RETURN_BOOL(value);
        }

        static PyObject *t_Field$Index_get__indexed(t_Field$Index *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.isIndexed());
          Py_RETURN_BOOL(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/config/StandardQueryConfigHandler$ConfigurationKeys.h"
#include "java/lang/Integer.h"
#include "java/util/TimeZone.h"
#include "java/lang/Class.h"
#include "java/lang/CharSequence.h"
#include "org/apache/lucene/search/MultiTermQuery$RewriteMethod.h"
#include "java/lang/Boolean.h"
#include "org/apache/lucene/queryparser/flexible/standard/config/StandardQueryConfigHandler$Operator.h"
#include "org/apache/lucene/queryparser/flexible/standard/config/NumericConfig.h"
#include "java/lang/Float.h"
#include "org/apache/lucene/queryparser/flexible/core/config/ConfigurationKey.h"
#include "java/util/Locale.h"
#include "org/apache/lucene/document/DateTools$Resolution.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "java/lang/String.h"
#include "org/apache/lucene/queryparser/flexible/standard/config/FuzzyConfig.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace config {

              ::java::lang::Class *StandardQueryConfigHandler$ConfigurationKeys::class$ = NULL;
              jmethodID *StandardQueryConfigHandler$ConfigurationKeys::mids$ = NULL;
              bool StandardQueryConfigHandler$ConfigurationKeys::live$ = false;
              ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey *StandardQueryConfigHandler$ConfigurationKeys::ALLOW_LEADING_WILDCARD = NULL;
              ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey *StandardQueryConfigHandler$ConfigurationKeys::ANALYZER = NULL;
              ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey *StandardQueryConfigHandler$ConfigurationKeys::BOOST = NULL;
              ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey *StandardQueryConfigHandler$ConfigurationKeys::DATE_RESOLUTION = NULL;
              ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey *StandardQueryConfigHandler$ConfigurationKeys::DEFAULT_OPERATOR = NULL;
              ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey *StandardQueryConfigHandler$ConfigurationKeys::ENABLE_POSITION_INCREMENTS = NULL;
              ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey *StandardQueryConfigHandler$ConfigurationKeys::FIELD_BOOST_MAP = NULL;
              ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey *StandardQueryConfigHandler$ConfigurationKeys::FIELD_DATE_RESOLUTION_MAP = NULL;
              ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey *StandardQueryConfigHandler$ConfigurationKeys::FUZZY_CONFIG = NULL;
              ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey *StandardQueryConfigHandler$ConfigurationKeys::LOCALE = NULL;
              ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey *StandardQueryConfigHandler$ConfigurationKeys::LOWERCASE_EXPANDED_TERMS = NULL;
              ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey *StandardQueryConfigHandler$ConfigurationKeys::MULTI_FIELDS = NULL;
              ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey *StandardQueryConfigHandler$ConfigurationKeys::MULTI_TERM_REWRITE_METHOD = NULL;
              ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey *StandardQueryConfigHandler$ConfigurationKeys::NUMERIC_CONFIG = NULL;
              ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey *StandardQueryConfigHandler$ConfigurationKeys::NUMERIC_CONFIG_MAP = NULL;
              ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey *StandardQueryConfigHandler$ConfigurationKeys::PHRASE_SLOP = NULL;
              ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey *StandardQueryConfigHandler$ConfigurationKeys::TIMEZONE = NULL;

              jclass StandardQueryConfigHandler$ConfigurationKeys::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/config/StandardQueryConfigHandler$ConfigurationKeys");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  cls = (jclass) class$->this$;

                  ALLOW_LEADING_WILDCARD = new ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey(env->getStaticObjectField(cls, "ALLOW_LEADING_WILDCARD", "Lorg/apache/lucene/queryparser/flexible/core/config/ConfigurationKey;"));
                  ANALYZER = new ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey(env->getStaticObjectField(cls, "ANALYZER", "Lorg/apache/lucene/queryparser/flexible/core/config/ConfigurationKey;"));
                  BOOST = new ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey(env->getStaticObjectField(cls, "BOOST", "Lorg/apache/lucene/queryparser/flexible/core/config/ConfigurationKey;"));
                  DATE_RESOLUTION = new ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey(env->getStaticObjectField(cls, "DATE_RESOLUTION", "Lorg/apache/lucene/queryparser/flexible/core/config/ConfigurationKey;"));
                  DEFAULT_OPERATOR = new ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey(env->getStaticObjectField(cls, "DEFAULT_OPERATOR", "Lorg/apache/lucene/queryparser/flexible/core/config/ConfigurationKey;"));
                  ENABLE_POSITION_INCREMENTS = new ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey(env->getStaticObjectField(cls, "ENABLE_POSITION_INCREMENTS", "Lorg/apache/lucene/queryparser/flexible/core/config/ConfigurationKey;"));
                  FIELD_BOOST_MAP = new ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey(env->getStaticObjectField(cls, "FIELD_BOOST_MAP", "Lorg/apache/lucene/queryparser/flexible/core/config/ConfigurationKey;"));
                  FIELD_DATE_RESOLUTION_MAP = new ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey(env->getStaticObjectField(cls, "FIELD_DATE_RESOLUTION_MAP", "Lorg/apache/lucene/queryparser/flexible/core/config/ConfigurationKey;"));
                  FUZZY_CONFIG = new ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey(env->getStaticObjectField(cls, "FUZZY_CONFIG", "Lorg/apache/lucene/queryparser/flexible/core/config/ConfigurationKey;"));
                  LOCALE = new ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey(env->getStaticObjectField(cls, "LOCALE", "Lorg/apache/lucene/queryparser/flexible/core/config/ConfigurationKey;"));
                  LOWERCASE_EXPANDED_TERMS = new ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey(env->getStaticObjectField(cls, "LOWERCASE_EXPANDED_TERMS", "Lorg/apache/lucene/queryparser/flexible/core/config/ConfigurationKey;"));
                  MULTI_FIELDS = new ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey(env->getStaticObjectField(cls, "MULTI_FIELDS", "Lorg/apache/lucene/queryparser/flexible/core/config/ConfigurationKey;"));
                  MULTI_TERM_REWRITE_METHOD = new ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey(env->getStaticObjectField(cls, "MULTI_TERM_REWRITE_METHOD", "Lorg/apache/lucene/queryparser/flexible/core/config/ConfigurationKey;"));
                  NUMERIC_CONFIG = new ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey(env->getStaticObjectField(cls, "NUMERIC_CONFIG", "Lorg/apache/lucene/queryparser/flexible/core/config/ConfigurationKey;"));
                  NUMERIC_CONFIG_MAP = new ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey(env->getStaticObjectField(cls, "NUMERIC_CONFIG_MAP", "Lorg/apache/lucene/queryparser/flexible/core/config/ConfigurationKey;"));
                  PHRASE_SLOP = new ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey(env->getStaticObjectField(cls, "PHRASE_SLOP", "Lorg/apache/lucene/queryparser/flexible/core/config/ConfigurationKey;"));
                  TIMEZONE = new ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey(env->getStaticObjectField(cls, "TIMEZONE", "Lorg/apache/lucene/queryparser/flexible/core/config/ConfigurationKey;"));
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              StandardQueryConfigHandler$ConfigurationKeys::StandardQueryConfigHandler$ConfigurationKeys() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace config {
              static PyObject *t_StandardQueryConfigHandler$ConfigurationKeys_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_StandardQueryConfigHandler$ConfigurationKeys_instance_(PyTypeObject *type, PyObject *arg);
              static int t_StandardQueryConfigHandler$ConfigurationKeys_init_(t_StandardQueryConfigHandler$ConfigurationKeys *self, PyObject *args, PyObject *kwds);

              static PyMethodDef t_StandardQueryConfigHandler$ConfigurationKeys__methods_[] = {
                DECLARE_METHOD(t_StandardQueryConfigHandler$ConfigurationKeys, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_StandardQueryConfigHandler$ConfigurationKeys, instance_, METH_O | METH_CLASS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(StandardQueryConfigHandler$ConfigurationKeys, t_StandardQueryConfigHandler$ConfigurationKeys, ::java::lang::Object, StandardQueryConfigHandler$ConfigurationKeys, t_StandardQueryConfigHandler$ConfigurationKeys_init_, 0, 0, 0, 0, 0);

              void t_StandardQueryConfigHandler$ConfigurationKeys::install(PyObject *module)
              {
                installType(&PY_TYPE(StandardQueryConfigHandler$ConfigurationKeys), module, "StandardQueryConfigHandler$ConfigurationKeys", 0);
              }

              void t_StandardQueryConfigHandler$ConfigurationKeys::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(StandardQueryConfigHandler$ConfigurationKeys).tp_dict, "class_", make_descriptor(StandardQueryConfigHandler$ConfigurationKeys::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(StandardQueryConfigHandler$ConfigurationKeys).tp_dict, "wrapfn_", make_descriptor(t_StandardQueryConfigHandler$ConfigurationKeys::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(StandardQueryConfigHandler$ConfigurationKeys).tp_dict, "boxfn_", make_descriptor(boxObject));
                env->getClass(StandardQueryConfigHandler$ConfigurationKeys::initializeClass);
                PyDict_SetItemString(PY_TYPE(StandardQueryConfigHandler$ConfigurationKeys).tp_dict, "ALLOW_LEADING_WILDCARD", make_descriptor(::org::apache::lucene::queryparser::flexible::core::config::t_ConfigurationKey::wrap_Object(*StandardQueryConfigHandler$ConfigurationKeys::ALLOW_LEADING_WILDCARD)));
                PyDict_SetItemString(PY_TYPE(StandardQueryConfigHandler$ConfigurationKeys).tp_dict, "ANALYZER", make_descriptor(::org::apache::lucene::queryparser::flexible::core::config::t_ConfigurationKey::wrap_Object(*StandardQueryConfigHandler$ConfigurationKeys::ANALYZER)));
                PyDict_SetItemString(PY_TYPE(StandardQueryConfigHandler$ConfigurationKeys).tp_dict, "BOOST", make_descriptor(::org::apache::lucene::queryparser::flexible::core::config::t_ConfigurationKey::wrap_Object(*StandardQueryConfigHandler$ConfigurationKeys::BOOST)));
                PyDict_SetItemString(PY_TYPE(StandardQueryConfigHandler$ConfigurationKeys).tp_dict, "DATE_RESOLUTION", make_descriptor(::org::apache::lucene::queryparser::flexible::core::config::t_ConfigurationKey::wrap_Object(*StandardQueryConfigHandler$ConfigurationKeys::DATE_RESOLUTION)));
                PyDict_SetItemString(PY_TYPE(StandardQueryConfigHandler$ConfigurationKeys).tp_dict, "DEFAULT_OPERATOR", make_descriptor(::org::apache::lucene::queryparser::flexible::core::config::t_ConfigurationKey::wrap_Object(*StandardQueryConfigHandler$ConfigurationKeys::DEFAULT_OPERATOR)));
                PyDict_SetItemString(PY_TYPE(StandardQueryConfigHandler$ConfigurationKeys).tp_dict, "ENABLE_POSITION_INCREMENTS", make_descriptor(::org::apache::lucene::queryparser::flexible::core::config::t_ConfigurationKey::wrap_Object(*StandardQueryConfigHandler$ConfigurationKeys::ENABLE_POSITION_INCREMENTS)));
                PyDict_SetItemString(PY_TYPE(StandardQueryConfigHandler$ConfigurationKeys).tp_dict, "FIELD_BOOST_MAP", make_descriptor(::org::apache::lucene::queryparser::flexible::core::config::t_ConfigurationKey::wrap_Object(*StandardQueryConfigHandler$ConfigurationKeys::FIELD_BOOST_MAP)));
                PyDict_SetItemString(PY_TYPE(StandardQueryConfigHandler$ConfigurationKeys).tp_dict, "FIELD_DATE_RESOLUTION_MAP", make_descriptor(::org::apache::lucene::queryparser::flexible::core::config::t_ConfigurationKey::wrap_Object(*StandardQueryConfigHandler$ConfigurationKeys::FIELD_DATE_RESOLUTION_MAP)));
                PyDict_SetItemString(PY_TYPE(StandardQueryConfigHandler$ConfigurationKeys).tp_dict, "FUZZY_CONFIG", make_descriptor(::org::apache::lucene::queryparser::flexible::core::config::t_ConfigurationKey::wrap_Object(*StandardQueryConfigHandler$ConfigurationKeys::FUZZY_CONFIG)));
                PyDict_SetItemString(PY_TYPE(StandardQueryConfigHandler$ConfigurationKeys).tp_dict, "LOCALE", make_descriptor(::org::apache::lucene::queryparser::flexible::core::config::t_ConfigurationKey::wrap_Object(*StandardQueryConfigHandler$ConfigurationKeys::LOCALE)));
                PyDict_SetItemString(PY_TYPE(StandardQueryConfigHandler$ConfigurationKeys).tp_dict, "LOWERCASE_EXPANDED_TERMS", make_descriptor(::org::apache::lucene::queryparser::flexible::core::config::t_ConfigurationKey::wrap_Object(*StandardQueryConfigHandler$ConfigurationKeys::LOWERCASE_EXPANDED_TERMS)));
                PyDict_SetItemString(PY_TYPE(StandardQueryConfigHandler$ConfigurationKeys).tp_dict, "MULTI_FIELDS", make_descriptor(::org::apache::lucene::queryparser::flexible::core::config::t_ConfigurationKey::wrap_Object(*StandardQueryConfigHandler$ConfigurationKeys::MULTI_FIELDS)));
                PyDict_SetItemString(PY_TYPE(StandardQueryConfigHandler$ConfigurationKeys).tp_dict, "MULTI_TERM_REWRITE_METHOD", make_descriptor(::org::apache::lucene::queryparser::flexible::core::config::t_ConfigurationKey::wrap_Object(*StandardQueryConfigHandler$ConfigurationKeys::MULTI_TERM_REWRITE_METHOD)));
                PyDict_SetItemString(PY_TYPE(StandardQueryConfigHandler$ConfigurationKeys).tp_dict, "NUMERIC_CONFIG", make_descriptor(::org::apache::lucene::queryparser::flexible::core::config::t_ConfigurationKey::wrap_Object(*StandardQueryConfigHandler$ConfigurationKeys::NUMERIC_CONFIG)));
                PyDict_SetItemString(PY_TYPE(StandardQueryConfigHandler$ConfigurationKeys).tp_dict, "NUMERIC_CONFIG_MAP", make_descriptor(::org::apache::lucene::queryparser::flexible::core::config::t_ConfigurationKey::wrap_Object(*StandardQueryConfigHandler$ConfigurationKeys::NUMERIC_CONFIG_MAP)));
                PyDict_SetItemString(PY_TYPE(StandardQueryConfigHandler$ConfigurationKeys).tp_dict, "PHRASE_SLOP", make_descriptor(::org::apache::lucene::queryparser::flexible::core::config::t_ConfigurationKey::wrap_Object(*StandardQueryConfigHandler$ConfigurationKeys::PHRASE_SLOP)));
                PyDict_SetItemString(PY_TYPE(StandardQueryConfigHandler$ConfigurationKeys).tp_dict, "TIMEZONE", make_descriptor(::org::apache::lucene::queryparser::flexible::core::config::t_ConfigurationKey::wrap_Object(*StandardQueryConfigHandler$ConfigurationKeys::TIMEZONE)));
              }

              static PyObject *t_StandardQueryConfigHandler$ConfigurationKeys_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, StandardQueryConfigHandler$ConfigurationKeys::initializeClass, 1)))
                  return NULL;
                return t_StandardQueryConfigHandler$ConfigurationKeys::wrap_Object(StandardQueryConfigHandler$ConfigurationKeys(((t_StandardQueryConfigHandler$ConfigurationKeys *) arg)->object.this$));
              }
              static PyObject *t_StandardQueryConfigHandler$ConfigurationKeys_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, StandardQueryConfigHandler$ConfigurationKeys::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_StandardQueryConfigHandler$ConfigurationKeys_init_(t_StandardQueryConfigHandler$ConfigurationKeys *self, PyObject *args, PyObject *kwds)
              {
                StandardQueryConfigHandler$ConfigurationKeys object((jobject) NULL);

                INT_CALL(object = StandardQueryConfigHandler$ConfigurationKeys());
                self->object = object;

                return 0;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene41/Lucene41StoredFieldsFormat.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene41 {

          ::java::lang::Class *Lucene41StoredFieldsFormat::class$ = NULL;
          jmethodID *Lucene41StoredFieldsFormat::mids$ = NULL;
          bool Lucene41StoredFieldsFormat::live$ = false;

          jclass Lucene41StoredFieldsFormat::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene41/Lucene41StoredFieldsFormat");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene41StoredFieldsFormat::Lucene41StoredFieldsFormat() : ::org::apache::lucene::codecs::compressing::CompressingStoredFieldsFormat(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene41 {
          static PyObject *t_Lucene41StoredFieldsFormat_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene41StoredFieldsFormat_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene41StoredFieldsFormat_init_(t_Lucene41StoredFieldsFormat *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_Lucene41StoredFieldsFormat__methods_[] = {
            DECLARE_METHOD(t_Lucene41StoredFieldsFormat, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene41StoredFieldsFormat, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene41StoredFieldsFormat, t_Lucene41StoredFieldsFormat, ::org::apache::lucene::codecs::compressing::CompressingStoredFieldsFormat, Lucene41StoredFieldsFormat, t_Lucene41StoredFieldsFormat_init_, 0, 0, 0, 0, 0);

          void t_Lucene41StoredFieldsFormat::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene41StoredFieldsFormat), module, "Lucene41StoredFieldsFormat", 0);
          }

          void t_Lucene41StoredFieldsFormat::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene41StoredFieldsFormat).tp_dict, "class_", make_descriptor(Lucene41StoredFieldsFormat::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene41StoredFieldsFormat).tp_dict, "wrapfn_", make_descriptor(t_Lucene41StoredFieldsFormat::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene41StoredFieldsFormat).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lucene41StoredFieldsFormat_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene41StoredFieldsFormat::initializeClass, 1)))
              return NULL;
            return t_Lucene41StoredFieldsFormat::wrap_Object(Lucene41StoredFieldsFormat(((t_Lucene41StoredFieldsFormat *) arg)->object.this$));
          }
          static PyObject *t_Lucene41StoredFieldsFormat_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene41StoredFieldsFormat::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene41StoredFieldsFormat_init_(t_Lucene41StoredFieldsFormat *self, PyObject *args, PyObject *kwds)
          {
            Lucene41StoredFieldsFormat object((jobject) NULL);

            INT_CALL(object = Lucene41StoredFieldsFormat());
            self->object = object;

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/fst/PositiveIntOutputs.h"
#include "java/lang/Class.h"
#include "java/lang/Long.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "org/apache/lucene/store/DataInput.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {

          ::java::lang::Class *PositiveIntOutputs::class$ = NULL;
          jmethodID *PositiveIntOutputs::mids$ = NULL;
          bool PositiveIntOutputs::live$ = false;

          jclass PositiveIntOutputs::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/fst/PositiveIntOutputs");

              mids$ = new jmethodID[max_mid];
              mids$[mid_add_9f6e77f0] = env->getMethodID(cls, "add", "(Ljava/lang/Long;Ljava/lang/Long;)Ljava/lang/Long;");
              mids$[mid_common_9f6e77f0] = env->getMethodID(cls, "common", "(Ljava/lang/Long;Ljava/lang/Long;)Ljava/lang/Long;");
              mids$[mid_getNoOutput_c5e93900] = env->getMethodID(cls, "getNoOutput", "()Ljava/lang/Long;");
              mids$[mid_getSingleton_62a4b337] = env->getStaticMethodID(cls, "getSingleton", "()Lorg/apache/lucene/util/fst/PositiveIntOutputs;");
              mids$[mid_outputToString_d1a33160] = env->getMethodID(cls, "outputToString", "(Ljava/lang/Long;)Ljava/lang/String;");
              mids$[mid_ramBytesUsed_da55802d] = env->getMethodID(cls, "ramBytesUsed", "(Ljava/lang/Long;)J");
              mids$[mid_read_5eca7461] = env->getMethodID(cls, "read", "(Lorg/apache/lucene/store/DataInput;)Ljava/lang/Long;");
              mids$[mid_subtract_9f6e77f0] = env->getMethodID(cls, "subtract", "(Ljava/lang/Long;Ljava/lang/Long;)Ljava/lang/Long;");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
              mids$[mid_write_6466b4a8] = env->getMethodID(cls, "write", "(Ljava/lang/Long;Lorg/apache/lucene/store/DataOutput;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::java::lang::Long PositiveIntOutputs::add(const ::java::lang::Long & a0, const ::java::lang::Long & a1) const
          {
            return ::java::lang::Long(env->callObjectMethod(this$, mids$[mid_add_9f6e77f0], a0.this$, a1.this$));
          }

          ::java::lang::Long PositiveIntOutputs::common(const ::java::lang::Long & a0, const ::java::lang::Long & a1) const
          {
            return ::java::lang::Long(env->callObjectMethod(this$, mids$[mid_common_9f6e77f0], a0.this$, a1.this$));
          }

          ::java::lang::Long PositiveIntOutputs::getNoOutput() const
          {
            return ::java::lang::Long(env->callObjectMethod(this$, mids$[mid_getNoOutput_c5e93900]));
          }

          PositiveIntOutputs PositiveIntOutputs::getSingleton()
          {
            jclass cls = env->getClass(initializeClass);
            return PositiveIntOutputs(env->callStaticObjectMethod(cls, mids$[mid_getSingleton_62a4b337]));
          }

          ::java::lang::String PositiveIntOutputs::outputToString(const ::java::lang::Long & a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_outputToString_d1a33160], a0.this$));
          }

          jlong PositiveIntOutputs::ramBytesUsed(const ::java::lang::Long & a0) const
          {
            return env->callLongMethod(this$, mids$[mid_ramBytesUsed_da55802d], a0.this$);
          }

          ::java::lang::Long PositiveIntOutputs::read(const ::org::apache::lucene::store::DataInput & a0) const
          {
            return ::java::lang::Long(env->callObjectMethod(this$, mids$[mid_read_5eca7461], a0.this$));
          }

          ::java::lang::Long PositiveIntOutputs::subtract(const ::java::lang::Long & a0, const ::java::lang::Long & a1) const
          {
            return ::java::lang::Long(env->callObjectMethod(this$, mids$[mid_subtract_9f6e77f0], a0.this$, a1.this$));
          }

          ::java::lang::String PositiveIntOutputs::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }

          void PositiveIntOutputs::write(const ::java::lang::Long & a0, const ::org::apache::lucene::store::DataOutput & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_write_6466b4a8], a0.this$, a1.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {
          static PyObject *t_PositiveIntOutputs_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PositiveIntOutputs_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PositiveIntOutputs_of_(t_PositiveIntOutputs *self, PyObject *args);
          static PyObject *t_PositiveIntOutputs_add(t_PositiveIntOutputs *self, PyObject *args);
          static PyObject *t_PositiveIntOutputs_common(t_PositiveIntOutputs *self, PyObject *args);
          static PyObject *t_PositiveIntOutputs_getNoOutput(t_PositiveIntOutputs *self, PyObject *args);
          static PyObject *t_PositiveIntOutputs_getSingleton(PyTypeObject *type);
          static PyObject *t_PositiveIntOutputs_outputToString(t_PositiveIntOutputs *self, PyObject *args);
          static PyObject *t_PositiveIntOutputs_ramBytesUsed(t_PositiveIntOutputs *self, PyObject *args);
          static PyObject *t_PositiveIntOutputs_read(t_PositiveIntOutputs *self, PyObject *args);
          static PyObject *t_PositiveIntOutputs_subtract(t_PositiveIntOutputs *self, PyObject *args);
          static PyObject *t_PositiveIntOutputs_toString(t_PositiveIntOutputs *self, PyObject *args);
          static PyObject *t_PositiveIntOutputs_write(t_PositiveIntOutputs *self, PyObject *args);
          static PyObject *t_PositiveIntOutputs_get__noOutput(t_PositiveIntOutputs *self, void *data);
          static PyObject *t_PositiveIntOutputs_get__singleton(t_PositiveIntOutputs *self, void *data);
          static PyObject *t_PositiveIntOutputs_get__parameters_(t_PositiveIntOutputs *self, void *data);
          static PyGetSetDef t_PositiveIntOutputs__fields_[] = {
            DECLARE_GET_FIELD(t_PositiveIntOutputs, noOutput),
            DECLARE_GET_FIELD(t_PositiveIntOutputs, singleton),
            DECLARE_GET_FIELD(t_PositiveIntOutputs, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_PositiveIntOutputs__methods_[] = {
            DECLARE_METHOD(t_PositiveIntOutputs, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PositiveIntOutputs, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PositiveIntOutputs, of_, METH_VARARGS),
            DECLARE_METHOD(t_PositiveIntOutputs, add, METH_VARARGS),
            DECLARE_METHOD(t_PositiveIntOutputs, common, METH_VARARGS),
            DECLARE_METHOD(t_PositiveIntOutputs, getNoOutput, METH_VARARGS),
            DECLARE_METHOD(t_PositiveIntOutputs, getSingleton, METH_NOARGS | METH_CLASS),
            DECLARE_METHOD(t_PositiveIntOutputs, outputToString, METH_VARARGS),
            DECLARE_METHOD(t_PositiveIntOutputs, ramBytesUsed, METH_VARARGS),
            DECLARE_METHOD(t_PositiveIntOutputs, read, METH_VARARGS),
            DECLARE_METHOD(t_PositiveIntOutputs, subtract, METH_VARARGS),
            DECLARE_METHOD(t_PositiveIntOutputs, toString, METH_VARARGS),
            DECLARE_METHOD(t_PositiveIntOutputs, write, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PositiveIntOutputs, t_PositiveIntOutputs, ::org::apache::lucene::util::fst::Outputs, PositiveIntOutputs, abstract_init, 0, 0, t_PositiveIntOutputs__fields_, 0, 0);
          PyObject *t_PositiveIntOutputs::wrap_Object(const PositiveIntOutputs& object, PyTypeObject *p0)
          {
            PyObject *obj = t_PositiveIntOutputs::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_PositiveIntOutputs *self = (t_PositiveIntOutputs *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_PositiveIntOutputs::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_PositiveIntOutputs::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_PositiveIntOutputs *self = (t_PositiveIntOutputs *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_PositiveIntOutputs::install(PyObject *module)
          {
            installType(&PY_TYPE(PositiveIntOutputs), module, "PositiveIntOutputs", 0);
          }

          void t_PositiveIntOutputs::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PositiveIntOutputs).tp_dict, "class_", make_descriptor(PositiveIntOutputs::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PositiveIntOutputs).tp_dict, "wrapfn_", make_descriptor(t_PositiveIntOutputs::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PositiveIntOutputs).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PositiveIntOutputs_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PositiveIntOutputs::initializeClass, 1)))
              return NULL;
            return t_PositiveIntOutputs::wrap_Object(PositiveIntOutputs(((t_PositiveIntOutputs *) arg)->object.this$));
          }
          static PyObject *t_PositiveIntOutputs_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PositiveIntOutputs::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_PositiveIntOutputs_of_(t_PositiveIntOutputs *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static PyObject *t_PositiveIntOutputs_add(t_PositiveIntOutputs *self, PyObject *args)
          {
            ::java::lang::Long a0((jobject) NULL);
            ::java::lang::Long a1((jobject) NULL);
            ::java::lang::Long result((jobject) NULL);

            if (!parseArgs(args, "OO", &::java::lang::PY_TYPE(Long), &::java::lang::PY_TYPE(Long), &a0, &a1))
            {
              OBJ_CALL(result = self->object.add(a0, a1));
              return ::java::lang::t_Long::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(PositiveIntOutputs), (PyObject *) self, "add", args, 2);
          }

          static PyObject *t_PositiveIntOutputs_common(t_PositiveIntOutputs *self, PyObject *args)
          {
            ::java::lang::Long a0((jobject) NULL);
            ::java::lang::Long a1((jobject) NULL);
            ::java::lang::Long result((jobject) NULL);

            if (!parseArgs(args, "OO", &::java::lang::PY_TYPE(Long), &::java::lang::PY_TYPE(Long), &a0, &a1))
            {
              OBJ_CALL(result = self->object.common(a0, a1));
              return ::java::lang::t_Long::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(PositiveIntOutputs), (PyObject *) self, "common", args, 2);
          }

          static PyObject *t_PositiveIntOutputs_getNoOutput(t_PositiveIntOutputs *self, PyObject *args)
          {
            ::java::lang::Long result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getNoOutput());
              return ::java::lang::t_Long::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(PositiveIntOutputs), (PyObject *) self, "getNoOutput", args, 2);
          }

          static PyObject *t_PositiveIntOutputs_getSingleton(PyTypeObject *type)
          {
            PositiveIntOutputs result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::util::fst::PositiveIntOutputs::getSingleton());
            return t_PositiveIntOutputs::wrap_Object(result);
          }

          static PyObject *t_PositiveIntOutputs_outputToString(t_PositiveIntOutputs *self, PyObject *args)
          {
            ::java::lang::Long a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "O", &::java::lang::PY_TYPE(Long), &a0))
            {
              OBJ_CALL(result = self->object.outputToString(a0));
              return j2p(result);
            }

            return callSuper(&PY_TYPE(PositiveIntOutputs), (PyObject *) self, "outputToString", args, 2);
          }

          static PyObject *t_PositiveIntOutputs_ramBytesUsed(t_PositiveIntOutputs *self, PyObject *args)
          {
            ::java::lang::Long a0((jobject) NULL);
            jlong result;

            if (!parseArgs(args, "O", &::java::lang::PY_TYPE(Long), &a0))
            {
              OBJ_CALL(result = self->object.ramBytesUsed(a0));
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(&PY_TYPE(PositiveIntOutputs), (PyObject *) self, "ramBytesUsed", args, 2);
          }

          static PyObject *t_PositiveIntOutputs_read(t_PositiveIntOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::store::DataInput a0((jobject) NULL);
            ::java::lang::Long result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::store::DataInput::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.read(a0));
              return ::java::lang::t_Long::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(PositiveIntOutputs), (PyObject *) self, "read", args, 2);
          }

          static PyObject *t_PositiveIntOutputs_subtract(t_PositiveIntOutputs *self, PyObject *args)
          {
            ::java::lang::Long a0((jobject) NULL);
            ::java::lang::Long a1((jobject) NULL);
            ::java::lang::Long result((jobject) NULL);

            if (!parseArgs(args, "OO", &::java::lang::PY_TYPE(Long), &::java::lang::PY_TYPE(Long), &a0, &a1))
            {
              OBJ_CALL(result = self->object.subtract(a0, a1));
              return ::java::lang::t_Long::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(PositiveIntOutputs), (PyObject *) self, "subtract", args, 2);
          }

          static PyObject *t_PositiveIntOutputs_toString(t_PositiveIntOutputs *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(PositiveIntOutputs), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_PositiveIntOutputs_write(t_PositiveIntOutputs *self, PyObject *args)
          {
            ::java::lang::Long a0((jobject) NULL);
            ::org::apache::lucene::store::DataOutput a1((jobject) NULL);

            if (!parseArgs(args, "Ok", &::java::lang::PY_TYPE(Long), ::org::apache::lucene::store::DataOutput::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.write(a0, a1));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(PositiveIntOutputs), (PyObject *) self, "write", args, 2);
          }
          static PyObject *t_PositiveIntOutputs_get__parameters_(t_PositiveIntOutputs *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_PositiveIntOutputs_get__noOutput(t_PositiveIntOutputs *self, void *data)
          {
            ::java::lang::Long value((jobject) NULL);
            OBJ_CALL(value = self->object.getNoOutput());
            return ::java::lang::t_Long::wrap_Object(value);
          }

          static PyObject *t_PositiveIntOutputs_get__singleton(t_PositiveIntOutputs *self, void *data)
          {
            PositiveIntOutputs value((jobject) NULL);
            OBJ_CALL(value = self->object.getSingleton());
            return t_PositiveIntOutputs::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter$OrdinalMap.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          namespace directory {

            ::java::lang::Class *DirectoryTaxonomyWriter$OrdinalMap::class$ = NULL;
            jmethodID *DirectoryTaxonomyWriter$OrdinalMap::mids$ = NULL;
            bool DirectoryTaxonomyWriter$OrdinalMap::live$ = false;

            jclass DirectoryTaxonomyWriter$OrdinalMap::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter$OrdinalMap");

                mids$ = new jmethodID[max_mid];
                mids$[mid_addDone_54c6a166] = env->getMethodID(cls, "addDone", "()V");
                mids$[mid_addMapping_d8d154a6] = env->getMethodID(cls, "addMapping", "(II)V");
                mids$[mid_getMap_dab10e75] = env->getMethodID(cls, "getMap", "()[I");
                mids$[mid_setSize_39c7bd3c] = env->getMethodID(cls, "setSize", "(I)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            void DirectoryTaxonomyWriter$OrdinalMap::addDone() const
            {
              env->callVoidMethod(this$, mids$[mid_addDone_54c6a166]);
            }

            void DirectoryTaxonomyWriter$OrdinalMap::addMapping(jint a0, jint a1) const
            {
              env->callVoidMethod(this$, mids$[mid_addMapping_d8d154a6], a0, a1);
            }

            JArray< jint > DirectoryTaxonomyWriter$OrdinalMap::getMap() const
            {
              return JArray< jint >(env->callObjectMethod(this$, mids$[mid_getMap_dab10e75]));
            }

            void DirectoryTaxonomyWriter$OrdinalMap::setSize(jint a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setSize_39c7bd3c], a0);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          namespace directory {
            static PyObject *t_DirectoryTaxonomyWriter$OrdinalMap_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_DirectoryTaxonomyWriter$OrdinalMap_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_DirectoryTaxonomyWriter$OrdinalMap_addDone(t_DirectoryTaxonomyWriter$OrdinalMap *self);
            static PyObject *t_DirectoryTaxonomyWriter$OrdinalMap_addMapping(t_DirectoryTaxonomyWriter$OrdinalMap *self, PyObject *args);
            static PyObject *t_DirectoryTaxonomyWriter$OrdinalMap_getMap(t_DirectoryTaxonomyWriter$OrdinalMap *self);
            static PyObject *t_DirectoryTaxonomyWriter$OrdinalMap_setSize(t_DirectoryTaxonomyWriter$OrdinalMap *self, PyObject *arg);
            static PyObject *t_DirectoryTaxonomyWriter$OrdinalMap_get__map(t_DirectoryTaxonomyWriter$OrdinalMap *self, void *data);
            static int t_DirectoryTaxonomyWriter$OrdinalMap_set__size(t_DirectoryTaxonomyWriter$OrdinalMap *self, PyObject *arg, void *data);
            static PyGetSetDef t_DirectoryTaxonomyWriter$OrdinalMap__fields_[] = {
              DECLARE_GET_FIELD(t_DirectoryTaxonomyWriter$OrdinalMap, map),
              DECLARE_SET_FIELD(t_DirectoryTaxonomyWriter$OrdinalMap, size),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_DirectoryTaxonomyWriter$OrdinalMap__methods_[] = {
              DECLARE_METHOD(t_DirectoryTaxonomyWriter$OrdinalMap, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_DirectoryTaxonomyWriter$OrdinalMap, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_DirectoryTaxonomyWriter$OrdinalMap, addDone, METH_NOARGS),
              DECLARE_METHOD(t_DirectoryTaxonomyWriter$OrdinalMap, addMapping, METH_VARARGS),
              DECLARE_METHOD(t_DirectoryTaxonomyWriter$OrdinalMap, getMap, METH_NOARGS),
              DECLARE_METHOD(t_DirectoryTaxonomyWriter$OrdinalMap, setSize, METH_O),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(DirectoryTaxonomyWriter$OrdinalMap, t_DirectoryTaxonomyWriter$OrdinalMap, ::java::lang::Object, DirectoryTaxonomyWriter$OrdinalMap, abstract_init, 0, 0, t_DirectoryTaxonomyWriter$OrdinalMap__fields_, 0, 0);

            void t_DirectoryTaxonomyWriter$OrdinalMap::install(PyObject *module)
            {
              installType(&PY_TYPE(DirectoryTaxonomyWriter$OrdinalMap), module, "DirectoryTaxonomyWriter$OrdinalMap", 0);
            }

            void t_DirectoryTaxonomyWriter$OrdinalMap::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(DirectoryTaxonomyWriter$OrdinalMap).tp_dict, "class_", make_descriptor(DirectoryTaxonomyWriter$OrdinalMap::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(DirectoryTaxonomyWriter$OrdinalMap).tp_dict, "wrapfn_", make_descriptor(t_DirectoryTaxonomyWriter$OrdinalMap::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(DirectoryTaxonomyWriter$OrdinalMap).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_DirectoryTaxonomyWriter$OrdinalMap_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, DirectoryTaxonomyWriter$OrdinalMap::initializeClass, 1)))
                return NULL;
              return t_DirectoryTaxonomyWriter$OrdinalMap::wrap_Object(DirectoryTaxonomyWriter$OrdinalMap(((t_DirectoryTaxonomyWriter$OrdinalMap *) arg)->object.this$));
            }
            static PyObject *t_DirectoryTaxonomyWriter$OrdinalMap_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, DirectoryTaxonomyWriter$OrdinalMap::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_DirectoryTaxonomyWriter$OrdinalMap_addDone(t_DirectoryTaxonomyWriter$OrdinalMap *self)
            {
              OBJ_CALL(self->object.addDone());
              Py_RETURN_NONE;
            }

            static PyObject *t_DirectoryTaxonomyWriter$OrdinalMap_addMapping(t_DirectoryTaxonomyWriter$OrdinalMap *self, PyObject *args)
            {
              jint a0;
              jint a1;

              if (!parseArgs(args, "II", &a0, &a1))
              {
                OBJ_CALL(self->object.addMapping(a0, a1));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "addMapping", args);
              return NULL;
            }

            static PyObject *t_DirectoryTaxonomyWriter$OrdinalMap_getMap(t_DirectoryTaxonomyWriter$OrdinalMap *self)
            {
              JArray< jint > result((jobject) NULL);
              OBJ_CALL(result = self->object.getMap());
              return result.wrap();
            }

            static PyObject *t_DirectoryTaxonomyWriter$OrdinalMap_setSize(t_DirectoryTaxonomyWriter$OrdinalMap *self, PyObject *arg)
            {
              jint a0;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(self->object.setSize(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setSize", arg);
              return NULL;
            }

            static PyObject *t_DirectoryTaxonomyWriter$OrdinalMap_get__map(t_DirectoryTaxonomyWriter$OrdinalMap *self, void *data)
            {
              JArray< jint > value((jobject) NULL);
              OBJ_CALL(value = self->object.getMap());
              return value.wrap();
            }

            static int t_DirectoryTaxonomyWriter$OrdinalMap_set__size(t_DirectoryTaxonomyWriter$OrdinalMap *self, PyObject *arg, void *data)
            {
              {
                jint value;
                if (!parseArg(arg, "I", &value))
                {
                  INT_CALL(self->object.setSize(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "size", arg);
              return -1;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/TotalHitCountCollector.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/search/Scorer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *TotalHitCountCollector::class$ = NULL;
        jmethodID *TotalHitCountCollector::mids$ = NULL;
        bool TotalHitCountCollector::live$ = false;

        jclass TotalHitCountCollector::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/TotalHitCountCollector");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_acceptsDocsOutOfOrder_54c6a16a] = env->getMethodID(cls, "acceptsDocsOutOfOrder", "()Z");
            mids$[mid_collect_39c7bd3c] = env->getMethodID(cls, "collect", "(I)V");
            mids$[mid_getTotalHits_54c6a179] = env->getMethodID(cls, "getTotalHits", "()I");
            mids$[mid_setNextReader_a6f59947] = env->getMethodID(cls, "setNextReader", "(Lorg/apache/lucene/index/AtomicReaderContext;)V");
            mids$[mid_setScorer_8be0880c] = env->getMethodID(cls, "setScorer", "(Lorg/apache/lucene/search/Scorer;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        TotalHitCountCollector::TotalHitCountCollector() : ::org::apache::lucene::search::Collector(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jboolean TotalHitCountCollector::acceptsDocsOutOfOrder() const
        {
          return env->callBooleanMethod(this$, mids$[mid_acceptsDocsOutOfOrder_54c6a16a]);
        }

        void TotalHitCountCollector::collect(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_collect_39c7bd3c], a0);
        }

        jint TotalHitCountCollector::getTotalHits() const
        {
          return env->callIntMethod(this$, mids$[mid_getTotalHits_54c6a179]);
        }

        void TotalHitCountCollector::setNextReader(const ::org::apache::lucene::index::AtomicReaderContext & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setNextReader_a6f59947], a0.this$);
        }

        void TotalHitCountCollector::setScorer(const ::org::apache::lucene::search::Scorer & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setScorer_8be0880c], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_TotalHitCountCollector_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TotalHitCountCollector_instance_(PyTypeObject *type, PyObject *arg);
        static int t_TotalHitCountCollector_init_(t_TotalHitCountCollector *self, PyObject *args, PyObject *kwds);
        static PyObject *t_TotalHitCountCollector_acceptsDocsOutOfOrder(t_TotalHitCountCollector *self, PyObject *args);
        static PyObject *t_TotalHitCountCollector_collect(t_TotalHitCountCollector *self, PyObject *args);
        static PyObject *t_TotalHitCountCollector_getTotalHits(t_TotalHitCountCollector *self);
        static PyObject *t_TotalHitCountCollector_setNextReader(t_TotalHitCountCollector *self, PyObject *args);
        static PyObject *t_TotalHitCountCollector_setScorer(t_TotalHitCountCollector *self, PyObject *args);
        static int t_TotalHitCountCollector_set__nextReader(t_TotalHitCountCollector *self, PyObject *arg, void *data);
        static int t_TotalHitCountCollector_set__scorer(t_TotalHitCountCollector *self, PyObject *arg, void *data);
        static PyObject *t_TotalHitCountCollector_get__totalHits(t_TotalHitCountCollector *self, void *data);
        static PyGetSetDef t_TotalHitCountCollector__fields_[] = {
          DECLARE_SET_FIELD(t_TotalHitCountCollector, nextReader),
          DECLARE_SET_FIELD(t_TotalHitCountCollector, scorer),
          DECLARE_GET_FIELD(t_TotalHitCountCollector, totalHits),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_TotalHitCountCollector__methods_[] = {
          DECLARE_METHOD(t_TotalHitCountCollector, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TotalHitCountCollector, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TotalHitCountCollector, acceptsDocsOutOfOrder, METH_VARARGS),
          DECLARE_METHOD(t_TotalHitCountCollector, collect, METH_VARARGS),
          DECLARE_METHOD(t_TotalHitCountCollector, getTotalHits, METH_NOARGS),
          DECLARE_METHOD(t_TotalHitCountCollector, setNextReader, METH_VARARGS),
          DECLARE_METHOD(t_TotalHitCountCollector, setScorer, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TotalHitCountCollector, t_TotalHitCountCollector, ::org::apache::lucene::search::Collector, TotalHitCountCollector, t_TotalHitCountCollector_init_, 0, 0, t_TotalHitCountCollector__fields_, 0, 0);

        void t_TotalHitCountCollector::install(PyObject *module)
        {
          installType(&PY_TYPE(TotalHitCountCollector), module, "TotalHitCountCollector", 0);
        }

        void t_TotalHitCountCollector::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TotalHitCountCollector).tp_dict, "class_", make_descriptor(TotalHitCountCollector::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TotalHitCountCollector).tp_dict, "wrapfn_", make_descriptor(t_TotalHitCountCollector::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TotalHitCountCollector).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TotalHitCountCollector_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TotalHitCountCollector::initializeClass, 1)))
            return NULL;
          return t_TotalHitCountCollector::wrap_Object(TotalHitCountCollector(((t_TotalHitCountCollector *) arg)->object.this$));
        }
        static PyObject *t_TotalHitCountCollector_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TotalHitCountCollector::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_TotalHitCountCollector_init_(t_TotalHitCountCollector *self, PyObject *args, PyObject *kwds)
        {
          TotalHitCountCollector object((jobject) NULL);

          INT_CALL(object = TotalHitCountCollector());
          self->object = object;

          return 0;
        }

        static PyObject *t_TotalHitCountCollector_acceptsDocsOutOfOrder(t_TotalHitCountCollector *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.acceptsDocsOutOfOrder());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(TotalHitCountCollector), (PyObject *) self, "acceptsDocsOutOfOrder", args, 2);
        }

        static PyObject *t_TotalHitCountCollector_collect(t_TotalHitCountCollector *self, PyObject *args)
        {
          jint a0;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(self->object.collect(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(TotalHitCountCollector), (PyObject *) self, "collect", args, 2);
        }

        static PyObject *t_TotalHitCountCollector_getTotalHits(t_TotalHitCountCollector *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getTotalHits());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_TotalHitCountCollector_setNextReader(t_TotalHitCountCollector *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setNextReader(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(TotalHitCountCollector), (PyObject *) self, "setNextReader", args, 2);
        }

        static PyObject *t_TotalHitCountCollector_setScorer(t_TotalHitCountCollector *self, PyObject *args)
        {
          ::org::apache::lucene::search::Scorer a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::search::Scorer::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setScorer(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(TotalHitCountCollector), (PyObject *) self, "setScorer", args, 2);
        }

        static int t_TotalHitCountCollector_set__nextReader(t_TotalHitCountCollector *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::index::AtomicReaderContext value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &value))
            {
              INT_CALL(self->object.setNextReader(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "nextReader", arg);
          return -1;
        }

        static int t_TotalHitCountCollector_set__scorer(t_TotalHitCountCollector *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::search::Scorer value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::search::Scorer::initializeClass, &value))
            {
              INT_CALL(self->object.setScorer(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "scorer", arg);
          return -1;
        }

        static PyObject *t_TotalHitCountCollector_get__totalHits(t_TotalHitCountCollector *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getTotalHits());
          return PyInt_FromLong((long) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/StringField.h"
#include "org/apache/lucene/document/FieldType.h"
#include "org/apache/lucene/document/Field$Store.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *StringField::class$ = NULL;
        jmethodID *StringField::mids$ = NULL;
        bool StringField::live$ = false;
        ::org::apache::lucene::document::FieldType *StringField::TYPE_NOT_STORED = NULL;
        ::org::apache::lucene::document::FieldType *StringField::TYPE_STORED = NULL;

        jclass StringField::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/StringField");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_064fa087] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/String;Lorg/apache/lucene/document/Field$Store;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            TYPE_NOT_STORED = new ::org::apache::lucene::document::FieldType(env->getStaticObjectField(cls, "TYPE_NOT_STORED", "Lorg/apache/lucene/document/FieldType;"));
            TYPE_STORED = new ::org::apache::lucene::document::FieldType(env->getStaticObjectField(cls, "TYPE_STORED", "Lorg/apache/lucene/document/FieldType;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        StringField::StringField(const ::java::lang::String & a0, const ::java::lang::String & a1, const ::org::apache::lucene::document::Field$Store & a2) : ::org::apache::lucene::document::Field(env->newObject(initializeClass, &mids$, mid_init$_064fa087, a0.this$, a1.this$, a2.this$)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_StringField_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_StringField_instance_(PyTypeObject *type, PyObject *arg);
        static int t_StringField_init_(t_StringField *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_StringField__methods_[] = {
          DECLARE_METHOD(t_StringField, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_StringField, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(StringField, t_StringField, ::org::apache::lucene::document::Field, StringField, t_StringField_init_, 0, 0, 0, 0, 0);

        void t_StringField::install(PyObject *module)
        {
          installType(&PY_TYPE(StringField), module, "StringField", 0);
        }

        void t_StringField::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(StringField).tp_dict, "class_", make_descriptor(StringField::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(StringField).tp_dict, "wrapfn_", make_descriptor(t_StringField::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(StringField).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(StringField::initializeClass);
          PyDict_SetItemString(PY_TYPE(StringField).tp_dict, "TYPE_NOT_STORED", make_descriptor(::org::apache::lucene::document::t_FieldType::wrap_Object(*StringField::TYPE_NOT_STORED)));
          PyDict_SetItemString(PY_TYPE(StringField).tp_dict, "TYPE_STORED", make_descriptor(::org::apache::lucene::document::t_FieldType::wrap_Object(*StringField::TYPE_STORED)));
        }

        static PyObject *t_StringField_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, StringField::initializeClass, 1)))
            return NULL;
          return t_StringField::wrap_Object(StringField(((t_StringField *) arg)->object.this$));
        }
        static PyObject *t_StringField_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, StringField::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_StringField_init_(t_StringField *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::org::apache::lucene::document::Field$Store a2((jobject) NULL);
          PyTypeObject **p2;
          StringField object((jobject) NULL);

          if (!parseArgs(args, "ssK", ::org::apache::lucene::document::Field$Store::initializeClass, &a0, &a1, &a2, &p2, ::org::apache::lucene::document::t_Field$Store::parameters_))
          {
            INT_CALL(object = StringField(a0, a1, a2));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene40/Lucene40SegmentInfoWriter.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "org/apache/lucene/store/IOContext.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene40 {

          ::java::lang::Class *Lucene40SegmentInfoWriter::class$ = NULL;
          jmethodID *Lucene40SegmentInfoWriter::mids$ = NULL;
          bool Lucene40SegmentInfoWriter::live$ = false;

          jclass Lucene40SegmentInfoWriter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene40/Lucene40SegmentInfoWriter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_write_3589180f] = env->getMethodID(cls, "write", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/SegmentInfo;Lorg/apache/lucene/index/FieldInfos;Lorg/apache/lucene/store/IOContext;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene40SegmentInfoWriter::Lucene40SegmentInfoWriter() : ::org::apache::lucene::codecs::SegmentInfoWriter(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          void Lucene40SegmentInfoWriter::write(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::SegmentInfo & a1, const ::org::apache::lucene::index::FieldInfos & a2, const ::org::apache::lucene::store::IOContext & a3) const
          {
            env->callVoidMethod(this$, mids$[mid_write_3589180f], a0.this$, a1.this$, a2.this$, a3.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene40 {
          static PyObject *t_Lucene40SegmentInfoWriter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene40SegmentInfoWriter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene40SegmentInfoWriter_init_(t_Lucene40SegmentInfoWriter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene40SegmentInfoWriter_write(t_Lucene40SegmentInfoWriter *self, PyObject *args);

          static PyMethodDef t_Lucene40SegmentInfoWriter__methods_[] = {
            DECLARE_METHOD(t_Lucene40SegmentInfoWriter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene40SegmentInfoWriter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene40SegmentInfoWriter, write, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene40SegmentInfoWriter, t_Lucene40SegmentInfoWriter, ::org::apache::lucene::codecs::SegmentInfoWriter, Lucene40SegmentInfoWriter, t_Lucene40SegmentInfoWriter_init_, 0, 0, 0, 0, 0);

          void t_Lucene40SegmentInfoWriter::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene40SegmentInfoWriter), module, "Lucene40SegmentInfoWriter", 0);
          }

          void t_Lucene40SegmentInfoWriter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene40SegmentInfoWriter).tp_dict, "class_", make_descriptor(Lucene40SegmentInfoWriter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene40SegmentInfoWriter).tp_dict, "wrapfn_", make_descriptor(t_Lucene40SegmentInfoWriter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene40SegmentInfoWriter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lucene40SegmentInfoWriter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene40SegmentInfoWriter::initializeClass, 1)))
              return NULL;
            return t_Lucene40SegmentInfoWriter::wrap_Object(Lucene40SegmentInfoWriter(((t_Lucene40SegmentInfoWriter *) arg)->object.this$));
          }
          static PyObject *t_Lucene40SegmentInfoWriter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene40SegmentInfoWriter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene40SegmentInfoWriter_init_(t_Lucene40SegmentInfoWriter *self, PyObject *args, PyObject *kwds)
          {
            Lucene40SegmentInfoWriter object((jobject) NULL);

            INT_CALL(object = Lucene40SegmentInfoWriter());
            self->object = object;

            return 0;
          }

          static PyObject *t_Lucene40SegmentInfoWriter_write(t_Lucene40SegmentInfoWriter *self, PyObject *args)
          {
            ::org::apache::lucene::store::Directory a0((jobject) NULL);
            ::org::apache::lucene::index::SegmentInfo a1((jobject) NULL);
            ::org::apache::lucene::index::FieldInfos a2((jobject) NULL);
            ::org::apache::lucene::store::IOContext a3((jobject) NULL);

            if (!parseArgs(args, "kkkk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::SegmentInfo::initializeClass, ::org::apache::lucene::index::FieldInfos::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2, &a3))
            {
              OBJ_CALL(self->object.write(a0, a1, a2, a3));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene40SegmentInfoWriter), (PyObject *) self, "write", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/Bits.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *Bits::class$ = NULL;
        jmethodID *Bits::mids$ = NULL;
        bool Bits::live$ = false;
        JArray< Bits > *Bits::EMPTY_ARRAY = NULL;

        jclass Bits::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/Bits");

            mids$ = new jmethodID[max_mid];
            mids$[mid_get_39c7bd30] = env->getMethodID(cls, "get", "(I)Z");
            mids$[mid_length_54c6a179] = env->getMethodID(cls, "length", "()I");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            EMPTY_ARRAY = new JArray< Bits >(env->getStaticObjectField(cls, "EMPTY_ARRAY", "[Lorg/apache/lucene/util/Bits;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jboolean Bits::get(jint a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_get_39c7bd30], a0);
        }

        jint Bits::length() const
        {
          return env->callIntMethod(this$, mids$[mid_length_54c6a179]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/util/Bits$MatchNoBits.h"
#include "org/apache/lucene/util/Bits$MatchAllBits.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_Bits_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Bits_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Bits_get(t_Bits *self, PyObject *arg);
        static PyObject *t_Bits_length(t_Bits *self);

        static PyMethodDef t_Bits__methods_[] = {
          DECLARE_METHOD(t_Bits, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Bits, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Bits, get, METH_O),
          DECLARE_METHOD(t_Bits, length, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Bits, t_Bits, ::java::lang::Object, Bits, abstract_init, 0, 0, 0, 0, 0);

        void t_Bits::install(PyObject *module)
        {
          installType(&PY_TYPE(Bits), module, "Bits", 0);
          PyDict_SetItemString(PY_TYPE(Bits).tp_dict, "MatchNoBits", make_descriptor(&PY_TYPE(Bits$MatchNoBits)));
          PyDict_SetItemString(PY_TYPE(Bits).tp_dict, "MatchAllBits", make_descriptor(&PY_TYPE(Bits$MatchAllBits)));
        }

        void t_Bits::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(Bits).tp_dict, "class_", make_descriptor(Bits::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(Bits).tp_dict, "wrapfn_", make_descriptor(t_Bits::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(Bits).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(Bits::initializeClass);
          PyDict_SetItemString(PY_TYPE(Bits).tp_dict, "EMPTY_ARRAY", make_descriptor(JArray<jobject>(Bits::EMPTY_ARRAY->this$).wrap(t_Bits::wrap_jobject)));
        }

        static PyObject *t_Bits_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Bits::initializeClass, 1)))
            return NULL;
          return t_Bits::wrap_Object(Bits(((t_Bits *) arg)->object.this$));
        }
        static PyObject *t_Bits_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Bits::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_Bits_get(t_Bits *self, PyObject *arg)
        {
          jint a0;
          jboolean result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.get(a0));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError((PyObject *) self, "get", arg);
          return NULL;
        }

        static PyObject *t_Bits_length(t_Bits *self)
        {
          jint result;
          OBJ_CALL(result = self->object.length());
          return PyInt_FromLong((long) result);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/grouping/AbstractAllGroupHeadsCollector.h"
#include "org/apache/lucene/util/FixedBitSet.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {

          ::java::lang::Class *AbstractAllGroupHeadsCollector::class$ = NULL;
          jmethodID *AbstractAllGroupHeadsCollector::mids$ = NULL;
          bool AbstractAllGroupHeadsCollector::live$ = false;

          jclass AbstractAllGroupHeadsCollector::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/grouping/AbstractAllGroupHeadsCollector");

              mids$ = new jmethodID[max_mid];
              mids$[mid_acceptsDocsOutOfOrder_54c6a16a] = env->getMethodID(cls, "acceptsDocsOutOfOrder", "()Z");
              mids$[mid_collect_39c7bd3c] = env->getMethodID(cls, "collect", "(I)V");
              mids$[mid_groupHeadsSize_54c6a179] = env->getMethodID(cls, "groupHeadsSize", "()I");
              mids$[mid_retrieveGroupHeads_dab10e75] = env->getMethodID(cls, "retrieveGroupHeads", "()[I");
              mids$[mid_retrieveGroupHeads_e64a66db] = env->getMethodID(cls, "retrieveGroupHeads", "(I)Lorg/apache/lucene/util/FixedBitSet;");
              mids$[mid_retrieveGroupHeadAndAddIfNotExist_39c7bd3c] = env->getMethodID(cls, "retrieveGroupHeadAndAddIfNotExist", "(I)V");
              mids$[mid_getCollectedGroupHeads_2d2d7de4] = env->getMethodID(cls, "getCollectedGroupHeads", "()Ljava/util/Collection;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jboolean AbstractAllGroupHeadsCollector::acceptsDocsOutOfOrder() const
          {
            return env->callBooleanMethod(this$, mids$[mid_acceptsDocsOutOfOrder_54c6a16a]);
          }

          void AbstractAllGroupHeadsCollector::collect(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_collect_39c7bd3c], a0);
          }

          jint AbstractAllGroupHeadsCollector::groupHeadsSize() const
          {
            return env->callIntMethod(this$, mids$[mid_groupHeadsSize_54c6a179]);
          }

          JArray< jint > AbstractAllGroupHeadsCollector::retrieveGroupHeads() const
          {
            return JArray< jint >(env->callObjectMethod(this$, mids$[mid_retrieveGroupHeads_dab10e75]));
          }

          ::org::apache::lucene::util::FixedBitSet AbstractAllGroupHeadsCollector::retrieveGroupHeads(jint a0) const
          {
            return ::org::apache::lucene::util::FixedBitSet(env->callObjectMethod(this$, mids$[mid_retrieveGroupHeads_e64a66db], a0));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/search/grouping/AbstractAllGroupHeadsCollector$GroupHead.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          static PyObject *t_AbstractAllGroupHeadsCollector_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AbstractAllGroupHeadsCollector_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AbstractAllGroupHeadsCollector_of_(t_AbstractAllGroupHeadsCollector *self, PyObject *args);
          static PyObject *t_AbstractAllGroupHeadsCollector_acceptsDocsOutOfOrder(t_AbstractAllGroupHeadsCollector *self, PyObject *args);
          static PyObject *t_AbstractAllGroupHeadsCollector_collect(t_AbstractAllGroupHeadsCollector *self, PyObject *args);
          static PyObject *t_AbstractAllGroupHeadsCollector_groupHeadsSize(t_AbstractAllGroupHeadsCollector *self);
          static PyObject *t_AbstractAllGroupHeadsCollector_retrieveGroupHeads(t_AbstractAllGroupHeadsCollector *self, PyObject *args);
          static PyObject *t_AbstractAllGroupHeadsCollector_get__parameters_(t_AbstractAllGroupHeadsCollector *self, void *data);
          static PyGetSetDef t_AbstractAllGroupHeadsCollector__fields_[] = {
            DECLARE_GET_FIELD(t_AbstractAllGroupHeadsCollector, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_AbstractAllGroupHeadsCollector__methods_[] = {
            DECLARE_METHOD(t_AbstractAllGroupHeadsCollector, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AbstractAllGroupHeadsCollector, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AbstractAllGroupHeadsCollector, of_, METH_VARARGS),
            DECLARE_METHOD(t_AbstractAllGroupHeadsCollector, acceptsDocsOutOfOrder, METH_VARARGS),
            DECLARE_METHOD(t_AbstractAllGroupHeadsCollector, collect, METH_VARARGS),
            DECLARE_METHOD(t_AbstractAllGroupHeadsCollector, groupHeadsSize, METH_NOARGS),
            DECLARE_METHOD(t_AbstractAllGroupHeadsCollector, retrieveGroupHeads, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(AbstractAllGroupHeadsCollector, t_AbstractAllGroupHeadsCollector, ::org::apache::lucene::search::Collector, AbstractAllGroupHeadsCollector, abstract_init, 0, 0, t_AbstractAllGroupHeadsCollector__fields_, 0, 0);
          PyObject *t_AbstractAllGroupHeadsCollector::wrap_Object(const AbstractAllGroupHeadsCollector& object, PyTypeObject *p0)
          {
            PyObject *obj = t_AbstractAllGroupHeadsCollector::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_AbstractAllGroupHeadsCollector *self = (t_AbstractAllGroupHeadsCollector *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_AbstractAllGroupHeadsCollector::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_AbstractAllGroupHeadsCollector::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_AbstractAllGroupHeadsCollector *self = (t_AbstractAllGroupHeadsCollector *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_AbstractAllGroupHeadsCollector::install(PyObject *module)
          {
            installType(&PY_TYPE(AbstractAllGroupHeadsCollector), module, "AbstractAllGroupHeadsCollector", 0);
            PyDict_SetItemString(PY_TYPE(AbstractAllGroupHeadsCollector).tp_dict, "GroupHead", make_descriptor(&PY_TYPE(AbstractAllGroupHeadsCollector$GroupHead)));
          }

          void t_AbstractAllGroupHeadsCollector::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(AbstractAllGroupHeadsCollector).tp_dict, "class_", make_descriptor(AbstractAllGroupHeadsCollector::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(AbstractAllGroupHeadsCollector).tp_dict, "wrapfn_", make_descriptor(t_AbstractAllGroupHeadsCollector::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(AbstractAllGroupHeadsCollector).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_AbstractAllGroupHeadsCollector_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, AbstractAllGroupHeadsCollector::initializeClass, 1)))
              return NULL;
            return t_AbstractAllGroupHeadsCollector::wrap_Object(AbstractAllGroupHeadsCollector(((t_AbstractAllGroupHeadsCollector *) arg)->object.this$));
          }
          static PyObject *t_AbstractAllGroupHeadsCollector_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, AbstractAllGroupHeadsCollector::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_AbstractAllGroupHeadsCollector_of_(t_AbstractAllGroupHeadsCollector *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static PyObject *t_AbstractAllGroupHeadsCollector_acceptsDocsOutOfOrder(t_AbstractAllGroupHeadsCollector *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.acceptsDocsOutOfOrder());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(AbstractAllGroupHeadsCollector), (PyObject *) self, "acceptsDocsOutOfOrder", args, 2);
          }

          static PyObject *t_AbstractAllGroupHeadsCollector_collect(t_AbstractAllGroupHeadsCollector *self, PyObject *args)
          {
            jint a0;

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(self->object.collect(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(AbstractAllGroupHeadsCollector), (PyObject *) self, "collect", args, 2);
          }

          static PyObject *t_AbstractAllGroupHeadsCollector_groupHeadsSize(t_AbstractAllGroupHeadsCollector *self)
          {
            jint result;
            OBJ_CALL(result = self->object.groupHeadsSize());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_AbstractAllGroupHeadsCollector_retrieveGroupHeads(t_AbstractAllGroupHeadsCollector *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                JArray< jint > result((jobject) NULL);
                OBJ_CALL(result = self->object.retrieveGroupHeads());
                return result.wrap();
              }
              break;
             case 1:
              {
                jint a0;
                ::org::apache::lucene::util::FixedBitSet result((jobject) NULL);

                if (!parseArgs(args, "I", &a0))
                {
                  OBJ_CALL(result = self->object.retrieveGroupHeads(a0));
                  return ::org::apache::lucene::util::t_FixedBitSet::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "retrieveGroupHeads", args);
            return NULL;
          }
          static PyObject *t_AbstractAllGroupHeadsCollector_get__parameters_(t_AbstractAllGroupHeadsCollector *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader.h"
#include "org/apache/lucene/facet/taxonomy/ParallelTaxonomyArrays.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter.h"
#include "org/apache/lucene/facet/taxonomy/FacetLabel.h"
#include "java/io/IOException.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          namespace directory {

            ::java::lang::Class *DirectoryTaxonomyReader::class$ = NULL;
            jmethodID *DirectoryTaxonomyReader::mids$ = NULL;
            bool DirectoryTaxonomyReader::live$ = false;

            jclass DirectoryTaxonomyReader::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_49dc27eb] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter;)V");
                mids$[mid_init$_2e261ef2] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;)V");
                mids$[mid_getCommitUserData_db60befd] = env->getMethodID(cls, "getCommitUserData", "()Ljava/util/Map;");
                mids$[mid_getOrdinal_283f83f5] = env->getMethodID(cls, "getOrdinal", "(Lorg/apache/lucene/facet/taxonomy/FacetLabel;)I");
                mids$[mid_getParallelTaxonomyArrays_306e748e] = env->getMethodID(cls, "getParallelTaxonomyArrays", "()Lorg/apache/lucene/facet/taxonomy/ParallelTaxonomyArrays;");
                mids$[mid_getPath_38cf071d] = env->getMethodID(cls, "getPath", "(I)Lorg/apache/lucene/facet/taxonomy/FacetLabel;");
                mids$[mid_getSize_54c6a179] = env->getMethodID(cls, "getSize", "()I");
                mids$[mid_setCacheSize_39c7bd3c] = env->getMethodID(cls, "setCacheSize", "(I)V");
                mids$[mid_toString_141401b3] = env->getMethodID(cls, "toString", "(I)Ljava/lang/String;");
                mids$[mid_doClose_54c6a166] = env->getMethodID(cls, "doClose", "()V");
                mids$[mid_openIndexReader_109b8ac7] = env->getMethodID(cls, "openIndexReader", "(Lorg/apache/lucene/store/Directory;)Lorg/apache/lucene/index/DirectoryReader;");
                mids$[mid_openIndexReader_880937e0] = env->getMethodID(cls, "openIndexReader", "(Lorg/apache/lucene/index/IndexWriter;)Lorg/apache/lucene/index/DirectoryReader;");
                mids$[mid_doOpenIfChanged_57c99022] = env->getMethodID(cls, "doOpenIfChanged", "()Lorg/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            DirectoryTaxonomyReader::DirectoryTaxonomyReader(const ::org::apache::lucene::facet::taxonomy::directory::DirectoryTaxonomyWriter & a0) : ::org::apache::lucene::facet::taxonomy::TaxonomyReader(env->newObject(initializeClass, &mids$, mid_init$_49dc27eb, a0.this$)) {}

            DirectoryTaxonomyReader::DirectoryTaxonomyReader(const ::org::apache::lucene::store::Directory & a0) : ::org::apache::lucene::facet::taxonomy::TaxonomyReader(env->newObject(initializeClass, &mids$, mid_init$_2e261ef2, a0.this$)) {}

            ::java::util::Map DirectoryTaxonomyReader::getCommitUserData() const
            {
              return ::java::util::Map(env->callObjectMethod(this$, mids$[mid_getCommitUserData_db60befd]));
            }

            jint DirectoryTaxonomyReader::getOrdinal(const ::org::apache::lucene::facet::taxonomy::FacetLabel & a0) const
            {
              return env->callIntMethod(this$, mids$[mid_getOrdinal_283f83f5], a0.this$);
            }

            ::org::apache::lucene::facet::taxonomy::ParallelTaxonomyArrays DirectoryTaxonomyReader::getParallelTaxonomyArrays() const
            {
              return ::org::apache::lucene::facet::taxonomy::ParallelTaxonomyArrays(env->callObjectMethod(this$, mids$[mid_getParallelTaxonomyArrays_306e748e]));
            }

            ::org::apache::lucene::facet::taxonomy::FacetLabel DirectoryTaxonomyReader::getPath(jint a0) const
            {
              return ::org::apache::lucene::facet::taxonomy::FacetLabel(env->callObjectMethod(this$, mids$[mid_getPath_38cf071d], a0));
            }

            jint DirectoryTaxonomyReader::getSize() const
            {
              return env->callIntMethod(this$, mids$[mid_getSize_54c6a179]);
            }

            void DirectoryTaxonomyReader::setCacheSize(jint a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setCacheSize_39c7bd3c], a0);
            }

            ::java::lang::String DirectoryTaxonomyReader::toString(jint a0) const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_141401b3], a0));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          namespace directory {
            static PyObject *t_DirectoryTaxonomyReader_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_DirectoryTaxonomyReader_instance_(PyTypeObject *type, PyObject *arg);
            static int t_DirectoryTaxonomyReader_init_(t_DirectoryTaxonomyReader *self, PyObject *args, PyObject *kwds);
            static PyObject *t_DirectoryTaxonomyReader_getCommitUserData(t_DirectoryTaxonomyReader *self, PyObject *args);
            static PyObject *t_DirectoryTaxonomyReader_getOrdinal(t_DirectoryTaxonomyReader *self, PyObject *args);
            static PyObject *t_DirectoryTaxonomyReader_getParallelTaxonomyArrays(t_DirectoryTaxonomyReader *self, PyObject *args);
            static PyObject *t_DirectoryTaxonomyReader_getPath(t_DirectoryTaxonomyReader *self, PyObject *args);
            static PyObject *t_DirectoryTaxonomyReader_getSize(t_DirectoryTaxonomyReader *self, PyObject *args);
            static PyObject *t_DirectoryTaxonomyReader_setCacheSize(t_DirectoryTaxonomyReader *self, PyObject *arg);
            static PyObject *t_DirectoryTaxonomyReader_toString(t_DirectoryTaxonomyReader *self, PyObject *args);
            static int t_DirectoryTaxonomyReader_set__cacheSize(t_DirectoryTaxonomyReader *self, PyObject *arg, void *data);
            static PyObject *t_DirectoryTaxonomyReader_get__commitUserData(t_DirectoryTaxonomyReader *self, void *data);
            static PyObject *t_DirectoryTaxonomyReader_get__parallelTaxonomyArrays(t_DirectoryTaxonomyReader *self, void *data);
            static PyObject *t_DirectoryTaxonomyReader_get__size(t_DirectoryTaxonomyReader *self, void *data);
            static PyGetSetDef t_DirectoryTaxonomyReader__fields_[] = {
              DECLARE_SET_FIELD(t_DirectoryTaxonomyReader, cacheSize),
              DECLARE_GET_FIELD(t_DirectoryTaxonomyReader, commitUserData),
              DECLARE_GET_FIELD(t_DirectoryTaxonomyReader, parallelTaxonomyArrays),
              DECLARE_GET_FIELD(t_DirectoryTaxonomyReader, size),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_DirectoryTaxonomyReader__methods_[] = {
              DECLARE_METHOD(t_DirectoryTaxonomyReader, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_DirectoryTaxonomyReader, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_DirectoryTaxonomyReader, getCommitUserData, METH_VARARGS),
              DECLARE_METHOD(t_DirectoryTaxonomyReader, getOrdinal, METH_VARARGS),
              DECLARE_METHOD(t_DirectoryTaxonomyReader, getParallelTaxonomyArrays, METH_VARARGS),
              DECLARE_METHOD(t_DirectoryTaxonomyReader, getPath, METH_VARARGS),
              DECLARE_METHOD(t_DirectoryTaxonomyReader, getSize, METH_VARARGS),
              DECLARE_METHOD(t_DirectoryTaxonomyReader, setCacheSize, METH_O),
              DECLARE_METHOD(t_DirectoryTaxonomyReader, toString, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(DirectoryTaxonomyReader, t_DirectoryTaxonomyReader, ::org::apache::lucene::facet::taxonomy::TaxonomyReader, DirectoryTaxonomyReader, t_DirectoryTaxonomyReader_init_, 0, 0, t_DirectoryTaxonomyReader__fields_, 0, 0);

            void t_DirectoryTaxonomyReader::install(PyObject *module)
            {
              installType(&PY_TYPE(DirectoryTaxonomyReader), module, "DirectoryTaxonomyReader", 0);
            }

            void t_DirectoryTaxonomyReader::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(DirectoryTaxonomyReader).tp_dict, "class_", make_descriptor(DirectoryTaxonomyReader::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(DirectoryTaxonomyReader).tp_dict, "wrapfn_", make_descriptor(t_DirectoryTaxonomyReader::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(DirectoryTaxonomyReader).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_DirectoryTaxonomyReader_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, DirectoryTaxonomyReader::initializeClass, 1)))
                return NULL;
              return t_DirectoryTaxonomyReader::wrap_Object(DirectoryTaxonomyReader(((t_DirectoryTaxonomyReader *) arg)->object.this$));
            }
            static PyObject *t_DirectoryTaxonomyReader_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, DirectoryTaxonomyReader::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_DirectoryTaxonomyReader_init_(t_DirectoryTaxonomyReader *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 1:
                {
                  ::org::apache::lucene::facet::taxonomy::directory::DirectoryTaxonomyWriter a0((jobject) NULL);
                  DirectoryTaxonomyReader object((jobject) NULL);

                  if (!parseArgs(args, "k", ::org::apache::lucene::facet::taxonomy::directory::DirectoryTaxonomyWriter::initializeClass, &a0))
                  {
                    INT_CALL(object = DirectoryTaxonomyReader(a0));
                    self->object = object;
                    break;
                  }
                }
                {
                  ::org::apache::lucene::store::Directory a0((jobject) NULL);
                  DirectoryTaxonomyReader object((jobject) NULL);

                  if (!parseArgs(args, "k", ::org::apache::lucene::store::Directory::initializeClass, &a0))
                  {
                    INT_CALL(object = DirectoryTaxonomyReader(a0));
                    self->object = object;
                    break;
                  }
                }
               default:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_DirectoryTaxonomyReader_getCommitUserData(t_DirectoryTaxonomyReader *self, PyObject *args)
            {
              ::java::util::Map result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getCommitUserData());
                return ::java::util::t_Map::wrap_Object(result, &::java::lang::PY_TYPE(String), &::java::lang::PY_TYPE(String));
              }

              return callSuper(&PY_TYPE(DirectoryTaxonomyReader), (PyObject *) self, "getCommitUserData", args, 2);
            }

            static PyObject *t_DirectoryTaxonomyReader_getOrdinal(t_DirectoryTaxonomyReader *self, PyObject *args)
            {
              ::org::apache::lucene::facet::taxonomy::FacetLabel a0((jobject) NULL);
              jint result;

              if (!parseArgs(args, "k", ::org::apache::lucene::facet::taxonomy::FacetLabel::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.getOrdinal(a0));
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(DirectoryTaxonomyReader), (PyObject *) self, "getOrdinal", args, 2);
            }

            static PyObject *t_DirectoryTaxonomyReader_getParallelTaxonomyArrays(t_DirectoryTaxonomyReader *self, PyObject *args)
            {
              ::org::apache::lucene::facet::taxonomy::ParallelTaxonomyArrays result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getParallelTaxonomyArrays());
                return ::org::apache::lucene::facet::taxonomy::t_ParallelTaxonomyArrays::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(DirectoryTaxonomyReader), (PyObject *) self, "getParallelTaxonomyArrays", args, 2);
            }

            static PyObject *t_DirectoryTaxonomyReader_getPath(t_DirectoryTaxonomyReader *self, PyObject *args)
            {
              jint a0;
              ::org::apache::lucene::facet::taxonomy::FacetLabel result((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.getPath(a0));
                return ::org::apache::lucene::facet::taxonomy::t_FacetLabel::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(DirectoryTaxonomyReader), (PyObject *) self, "getPath", args, 2);
            }

            static PyObject *t_DirectoryTaxonomyReader_getSize(t_DirectoryTaxonomyReader *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getSize());
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(DirectoryTaxonomyReader), (PyObject *) self, "getSize", args, 2);
            }

            static PyObject *t_DirectoryTaxonomyReader_setCacheSize(t_DirectoryTaxonomyReader *self, PyObject *arg)
            {
              jint a0;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(self->object.setCacheSize(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setCacheSize", arg);
              return NULL;
            }

            static PyObject *t_DirectoryTaxonomyReader_toString(t_DirectoryTaxonomyReader *self, PyObject *args)
            {
              jint a0;
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.toString(a0));
                return j2p(result);
              }

              return callSuper(&PY_TYPE(DirectoryTaxonomyReader), (PyObject *) self, "toString", args, 2);
            }

            static int t_DirectoryTaxonomyReader_set__cacheSize(t_DirectoryTaxonomyReader *self, PyObject *arg, void *data)
            {
              {
                jint value;
                if (!parseArg(arg, "I", &value))
                {
                  INT_CALL(self->object.setCacheSize(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "cacheSize", arg);
              return -1;
            }

            static PyObject *t_DirectoryTaxonomyReader_get__commitUserData(t_DirectoryTaxonomyReader *self, void *data)
            {
              ::java::util::Map value((jobject) NULL);
              OBJ_CALL(value = self->object.getCommitUserData());
              return ::java::util::t_Map::wrap_Object(value);
            }

            static PyObject *t_DirectoryTaxonomyReader_get__parallelTaxonomyArrays(t_DirectoryTaxonomyReader *self, void *data)
            {
              ::org::apache::lucene::facet::taxonomy::ParallelTaxonomyArrays value((jobject) NULL);
              OBJ_CALL(value = self->object.getParallelTaxonomyArrays());
              return ::org::apache::lucene::facet::taxonomy::t_ParallelTaxonomyArrays::wrap_Object(value);
            }

            static PyObject *t_DirectoryTaxonomyReader_get__size(t_DirectoryTaxonomyReader *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getSize());
              return PyInt_FromLong((long) value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/pattern/PatternReplaceFilter.h"
#include "java/util/regex/Pattern.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pattern {

          ::java::lang::Class *PatternReplaceFilter::class$ = NULL;
          jmethodID *PatternReplaceFilter::mids$ = NULL;
          bool PatternReplaceFilter::live$ = false;

          jclass PatternReplaceFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/pattern/PatternReplaceFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_afb3adc3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;Ljava/util/regex/Pattern;Ljava/lang/String;Z)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PatternReplaceFilter::PatternReplaceFilter(const ::org::apache::lucene::analysis::TokenStream & a0, const ::java::util::regex::Pattern & a1, const ::java::lang::String & a2, jboolean a3) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_afb3adc3, a0.this$, a1.this$, a2.this$, a3)) {}

          jboolean PatternReplaceFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pattern {
          static PyObject *t_PatternReplaceFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PatternReplaceFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PatternReplaceFilter_init_(t_PatternReplaceFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PatternReplaceFilter_incrementToken(t_PatternReplaceFilter *self, PyObject *args);

          static PyMethodDef t_PatternReplaceFilter__methods_[] = {
            DECLARE_METHOD(t_PatternReplaceFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PatternReplaceFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PatternReplaceFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PatternReplaceFilter, t_PatternReplaceFilter, ::org::apache::lucene::analysis::TokenFilter, PatternReplaceFilter, t_PatternReplaceFilter_init_, 0, 0, 0, 0, 0);

          void t_PatternReplaceFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(PatternReplaceFilter), module, "PatternReplaceFilter", 0);
          }

          void t_PatternReplaceFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PatternReplaceFilter).tp_dict, "class_", make_descriptor(PatternReplaceFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PatternReplaceFilter).tp_dict, "wrapfn_", make_descriptor(t_PatternReplaceFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PatternReplaceFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PatternReplaceFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PatternReplaceFilter::initializeClass, 1)))
              return NULL;
            return t_PatternReplaceFilter::wrap_Object(PatternReplaceFilter(((t_PatternReplaceFilter *) arg)->object.this$));
          }
          static PyObject *t_PatternReplaceFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PatternReplaceFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PatternReplaceFilter_init_(t_PatternReplaceFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::java::util::regex::Pattern a1((jobject) NULL);
            ::java::lang::String a2((jobject) NULL);
            jboolean a3;
            PatternReplaceFilter object((jobject) NULL);

            if (!parseArgs(args, "kksZ", ::org::apache::lucene::analysis::TokenStream::initializeClass, ::java::util::regex::Pattern::initializeClass, &a0, &a1, &a2, &a3))
            {
              INT_CALL(object = PatternReplaceFilter(a0, a1, a2, a3));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PatternReplaceFilter_incrementToken(t_PatternReplaceFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(PatternReplaceFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/grouping/function/FunctionAllGroupsCollector.h"
#include "org/apache/lucene/queries/function/ValueSource.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/Class.h"
#include "java/util/Collection.h"
#include "org/apache/lucene/util/mutable/MutableValue.h"
#include "java/lang/Object.h"
#include "java/io/IOException.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          namespace function {

            ::java::lang::Class *FunctionAllGroupsCollector::class$ = NULL;
            jmethodID *FunctionAllGroupsCollector::mids$ = NULL;
            bool FunctionAllGroupsCollector::live$ = false;

            jclass FunctionAllGroupsCollector::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/grouping/function/FunctionAllGroupsCollector");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_9d3ebac8] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queries/function/ValueSource;Ljava/util/Map;)V");
                mids$[mid_collect_39c7bd3c] = env->getMethodID(cls, "collect", "(I)V");
                mids$[mid_getGroups_2d2d7de4] = env->getMethodID(cls, "getGroups", "()Ljava/util/Collection;");
                mids$[mid_setNextReader_a6f59947] = env->getMethodID(cls, "setNextReader", "(Lorg/apache/lucene/index/AtomicReaderContext;)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            FunctionAllGroupsCollector::FunctionAllGroupsCollector(const ::org::apache::lucene::queries::function::ValueSource & a0, const ::java::util::Map & a1) : ::org::apache::lucene::search::grouping::AbstractAllGroupsCollector(env->newObject(initializeClass, &mids$, mid_init$_9d3ebac8, a0.this$, a1.this$)) {}

            void FunctionAllGroupsCollector::collect(jint a0) const
            {
              env->callVoidMethod(this$, mids$[mid_collect_39c7bd3c], a0);
            }

            ::java::util::Collection FunctionAllGroupsCollector::getGroups() const
            {
              return ::java::util::Collection(env->callObjectMethod(this$, mids$[mid_getGroups_2d2d7de4]));
            }

            void FunctionAllGroupsCollector::setNextReader(const ::org::apache::lucene::index::AtomicReaderContext & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setNextReader_a6f59947], a0.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          namespace function {
            static PyObject *t_FunctionAllGroupsCollector_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_FunctionAllGroupsCollector_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_FunctionAllGroupsCollector_of_(t_FunctionAllGroupsCollector *self, PyObject *args);
            static int t_FunctionAllGroupsCollector_init_(t_FunctionAllGroupsCollector *self, PyObject *args, PyObject *kwds);
            static PyObject *t_FunctionAllGroupsCollector_collect(t_FunctionAllGroupsCollector *self, PyObject *args);
            static PyObject *t_FunctionAllGroupsCollector_getGroups(t_FunctionAllGroupsCollector *self, PyObject *args);
            static PyObject *t_FunctionAllGroupsCollector_setNextReader(t_FunctionAllGroupsCollector *self, PyObject *args);
            static PyObject *t_FunctionAllGroupsCollector_get__groups(t_FunctionAllGroupsCollector *self, void *data);
            static int t_FunctionAllGroupsCollector_set__nextReader(t_FunctionAllGroupsCollector *self, PyObject *arg, void *data);
            static PyObject *t_FunctionAllGroupsCollector_get__parameters_(t_FunctionAllGroupsCollector *self, void *data);
            static PyGetSetDef t_FunctionAllGroupsCollector__fields_[] = {
              DECLARE_GET_FIELD(t_FunctionAllGroupsCollector, groups),
              DECLARE_SET_FIELD(t_FunctionAllGroupsCollector, nextReader),
              DECLARE_GET_FIELD(t_FunctionAllGroupsCollector, parameters_),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_FunctionAllGroupsCollector__methods_[] = {
              DECLARE_METHOD(t_FunctionAllGroupsCollector, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FunctionAllGroupsCollector, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FunctionAllGroupsCollector, of_, METH_VARARGS),
              DECLARE_METHOD(t_FunctionAllGroupsCollector, collect, METH_VARARGS),
              DECLARE_METHOD(t_FunctionAllGroupsCollector, getGroups, METH_VARARGS),
              DECLARE_METHOD(t_FunctionAllGroupsCollector, setNextReader, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(FunctionAllGroupsCollector, t_FunctionAllGroupsCollector, ::org::apache::lucene::search::grouping::AbstractAllGroupsCollector, FunctionAllGroupsCollector, t_FunctionAllGroupsCollector_init_, 0, 0, t_FunctionAllGroupsCollector__fields_, 0, 0);
            PyObject *t_FunctionAllGroupsCollector::wrap_Object(const FunctionAllGroupsCollector& object, PyTypeObject *p0)
            {
              PyObject *obj = t_FunctionAllGroupsCollector::wrap_Object(object);
              if (obj != NULL && obj != Py_None)
              {
                t_FunctionAllGroupsCollector *self = (t_FunctionAllGroupsCollector *) obj;
                self->parameters[0] = p0;
              }
              return obj;
            }

            PyObject *t_FunctionAllGroupsCollector::wrap_jobject(const jobject& object, PyTypeObject *p0)
            {
              PyObject *obj = t_FunctionAllGroupsCollector::wrap_jobject(object);
              if (obj != NULL && obj != Py_None)
              {
                t_FunctionAllGroupsCollector *self = (t_FunctionAllGroupsCollector *) obj;
                self->parameters[0] = p0;
              }
              return obj;
            }

            void t_FunctionAllGroupsCollector::install(PyObject *module)
            {
              installType(&PY_TYPE(FunctionAllGroupsCollector), module, "FunctionAllGroupsCollector", 0);
            }

            void t_FunctionAllGroupsCollector::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(FunctionAllGroupsCollector).tp_dict, "class_", make_descriptor(FunctionAllGroupsCollector::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(FunctionAllGroupsCollector).tp_dict, "wrapfn_", make_descriptor(t_FunctionAllGroupsCollector::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(FunctionAllGroupsCollector).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_FunctionAllGroupsCollector_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, FunctionAllGroupsCollector::initializeClass, 1)))
                return NULL;
              return t_FunctionAllGroupsCollector::wrap_Object(FunctionAllGroupsCollector(((t_FunctionAllGroupsCollector *) arg)->object.this$));
            }
            static PyObject *t_FunctionAllGroupsCollector_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, FunctionAllGroupsCollector::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_FunctionAllGroupsCollector_of_(t_FunctionAllGroupsCollector *self, PyObject *args)
            {
              if (!parseArg(args, "T", 1, &(self->parameters)))
                Py_RETURN_SELF;
              return PyErr_SetArgsError((PyObject *) self, "of_", args);
            }

            static int t_FunctionAllGroupsCollector_init_(t_FunctionAllGroupsCollector *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::queries::function::ValueSource a0((jobject) NULL);
              ::java::util::Map a1((jobject) NULL);
              PyTypeObject **p1;
              FunctionAllGroupsCollector object((jobject) NULL);

              if (!parseArgs(args, "kK", ::org::apache::lucene::queries::function::ValueSource::initializeClass, ::java::util::Map::initializeClass, &a0, &a1, &p1, ::java::util::t_Map::parameters_))
              {
                INT_CALL(object = FunctionAllGroupsCollector(a0, a1));
                self->object = object;
                self->parameters[0] = &::org::apache::lucene::util::mutable$::PY_TYPE(MutableValue);
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_FunctionAllGroupsCollector_collect(t_FunctionAllGroupsCollector *self, PyObject *args)
            {
              jint a0;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(self->object.collect(a0));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(FunctionAllGroupsCollector), (PyObject *) self, "collect", args, 2);
            }

            static PyObject *t_FunctionAllGroupsCollector_getGroups(t_FunctionAllGroupsCollector *self, PyObject *args)
            {
              ::java::util::Collection result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getGroups());
                return ::java::util::t_Collection::wrap_Object(result, &::org::apache::lucene::util::mutable$::PY_TYPE(MutableValue));
              }

              return callSuper(&PY_TYPE(FunctionAllGroupsCollector), (PyObject *) self, "getGroups", args, 2);
            }

            static PyObject *t_FunctionAllGroupsCollector_setNextReader(t_FunctionAllGroupsCollector *self, PyObject *args)
            {
              ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0))
              {
                OBJ_CALL(self->object.setNextReader(a0));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(FunctionAllGroupsCollector), (PyObject *) self, "setNextReader", args, 2);
            }
            static PyObject *t_FunctionAllGroupsCollector_get__parameters_(t_FunctionAllGroupsCollector *self, void *data)
            {
              return typeParameters(self->parameters, sizeof(self->parameters));
            }

            static PyObject *t_FunctionAllGroupsCollector_get__groups(t_FunctionAllGroupsCollector *self, void *data)
            {
              ::java::util::Collection value((jobject) NULL);
              OBJ_CALL(value = self->object.getGroups());
              return ::java::util::t_Collection::wrap_Object(value);
            }

            static int t_FunctionAllGroupsCollector_set__nextReader(t_FunctionAllGroupsCollector *self, PyObject *arg, void *data)
            {
              {
                ::org::apache::lucene::index::AtomicReaderContext value((jobject) NULL);
                if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &value))
                {
                  INT_CALL(self->object.setNextReader(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "nextReader", arg);
              return -1;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/vectorhighlight/BaseFragmentsBuilder.h"
#include "org/apache/lucene/search/vectorhighlight/FieldFragList$WeightedFragInfo.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/vectorhighlight/FragmentsBuilder.h"
#include "org/apache/lucene/search/vectorhighlight/FieldFragList.h"
#include "java/util/List.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/search/highlight/Encoder.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {

          ::java::lang::Class *BaseFragmentsBuilder::class$ = NULL;
          jmethodID *BaseFragmentsBuilder::mids$ = NULL;
          bool BaseFragmentsBuilder::live$ = false;
          JArray< ::java::lang::String > *BaseFragmentsBuilder::COLORED_POST_TAGS = NULL;
          JArray< ::java::lang::String > *BaseFragmentsBuilder::COLORED_PRE_TAGS = NULL;

          jclass BaseFragmentsBuilder::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/vectorhighlight/BaseFragmentsBuilder");

              mids$ = new jmethodID[max_mid];
              mids$[mid_createFragment_dbdbadf3] = env->getMethodID(cls, "createFragment", "(Lorg/apache/lucene/index/IndexReader;ILjava/lang/String;Lorg/apache/lucene/search/vectorhighlight/FieldFragList;)Ljava/lang/String;");
              mids$[mid_createFragment_4ae15401] = env->getMethodID(cls, "createFragment", "(Lorg/apache/lucene/index/IndexReader;ILjava/lang/String;Lorg/apache/lucene/search/vectorhighlight/FieldFragList;[Ljava/lang/String;[Ljava/lang/String;Lorg/apache/lucene/search/highlight/Encoder;)Ljava/lang/String;");
              mids$[mid_createFragments_b5534699] = env->getMethodID(cls, "createFragments", "(Lorg/apache/lucene/index/IndexReader;ILjava/lang/String;Lorg/apache/lucene/search/vectorhighlight/FieldFragList;I)[Ljava/lang/String;");
              mids$[mid_createFragments_a6aed56f] = env->getMethodID(cls, "createFragments", "(Lorg/apache/lucene/index/IndexReader;ILjava/lang/String;Lorg/apache/lucene/search/vectorhighlight/FieldFragList;I[Ljava/lang/String;[Ljava/lang/String;Lorg/apache/lucene/search/highlight/Encoder;)[Ljava/lang/String;");
              mids$[mid_getMultiValuedSeparator_54c6a173] = env->getMethodID(cls, "getMultiValuedSeparator", "()C");
              mids$[mid_getWeightedFragInfoList_4f378251] = env->getMethodID(cls, "getWeightedFragInfoList", "(Ljava/util/List;)Ljava/util/List;");
              mids$[mid_isDiscreteMultiValueHighlighting_54c6a16a] = env->getMethodID(cls, "isDiscreteMultiValueHighlighting", "()Z");
              mids$[mid_setDiscreteMultiValueHighlighting_bb0c767f] = env->getMethodID(cls, "setDiscreteMultiValueHighlighting", "(Z)V");
              mids$[mid_setMultiValuedSeparator_87fd545a] = env->getMethodID(cls, "setMultiValuedSeparator", "(C)V");
              mids$[mid_getFields_cc0d693c] = env->getMethodID(cls, "getFields", "(Lorg/apache/lucene/index/IndexReader;ILjava/lang/String;)[Lorg/apache/lucene/document/Field;");
              mids$[mid_discreteMultiValueHighlighting_d191731d] = env->getMethodID(cls, "discreteMultiValueHighlighting", "(Ljava/util/List;[Lorg/apache/lucene/document/Field;)Ljava/util/List;");
              mids$[mid_makeFragment_b70fa26e] = env->getMethodID(cls, "makeFragment", "(Ljava/lang/StringBuilder;[I[Lorg/apache/lucene/document/Field;Lorg/apache/lucene/search/vectorhighlight/FieldFragList$WeightedFragInfo;[Ljava/lang/String;[Ljava/lang/String;Lorg/apache/lucene/search/highlight/Encoder;)Ljava/lang/String;");
              mids$[mid_getFragmentSourceMSO_a32be9ad] = env->getMethodID(cls, "getFragmentSourceMSO", "(Ljava/lang/StringBuilder;[I[Lorg/apache/lucene/document/Field;II[I)Ljava/lang/String;");
              mids$[mid_getFragmentSource_771056c3] = env->getMethodID(cls, "getFragmentSource", "(Ljava/lang/StringBuilder;[I[Lorg/apache/lucene/document/Field;II)Ljava/lang/String;");
              mids$[mid_getPreTag_64aeb14d] = env->getMethodID(cls, "getPreTag", "([Ljava/lang/String;I)Ljava/lang/String;");
              mids$[mid_getPreTag_141401b3] = env->getMethodID(cls, "getPreTag", "(I)Ljava/lang/String;");
              mids$[mid_getPostTag_64aeb14d] = env->getMethodID(cls, "getPostTag", "([Ljava/lang/String;I)Ljava/lang/String;");
              mids$[mid_getPostTag_141401b3] = env->getMethodID(cls, "getPostTag", "(I)Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              COLORED_POST_TAGS = new JArray< ::java::lang::String >(env->getStaticObjectField(cls, "COLORED_POST_TAGS", "[Ljava/lang/String;"));
              COLORED_PRE_TAGS = new JArray< ::java::lang::String >(env->getStaticObjectField(cls, "COLORED_PRE_TAGS", "[Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::java::lang::String BaseFragmentsBuilder::createFragment(const ::org::apache::lucene::index::IndexReader & a0, jint a1, const ::java::lang::String & a2, const ::org::apache::lucene::search::vectorhighlight::FieldFragList & a3) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_createFragment_dbdbadf3], a0.this$, a1, a2.this$, a3.this$));
          }

          ::java::lang::String BaseFragmentsBuilder::createFragment(const ::org::apache::lucene::index::IndexReader & a0, jint a1, const ::java::lang::String & a2, const ::org::apache::lucene::search::vectorhighlight::FieldFragList & a3, const JArray< ::java::lang::String > & a4, const JArray< ::java::lang::String > & a5, const ::org::apache::lucene::search::highlight::Encoder & a6) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_createFragment_4ae15401], a0.this$, a1, a2.this$, a3.this$, a4.this$, a5.this$, a6.this$));
          }

          JArray< ::java::lang::String > BaseFragmentsBuilder::createFragments(const ::org::apache::lucene::index::IndexReader & a0, jint a1, const ::java::lang::String & a2, const ::org::apache::lucene::search::vectorhighlight::FieldFragList & a3, jint a4) const
          {
            return JArray< ::java::lang::String >(env->callObjectMethod(this$, mids$[mid_createFragments_b5534699], a0.this$, a1, a2.this$, a3.this$, a4));
          }

          JArray< ::java::lang::String > BaseFragmentsBuilder::createFragments(const ::org::apache::lucene::index::IndexReader & a0, jint a1, const ::java::lang::String & a2, const ::org::apache::lucene::search::vectorhighlight::FieldFragList & a3, jint a4, const JArray< ::java::lang::String > & a5, const JArray< ::java::lang::String > & a6, const ::org::apache::lucene::search::highlight::Encoder & a7) const
          {
            return JArray< ::java::lang::String >(env->callObjectMethod(this$, mids$[mid_createFragments_a6aed56f], a0.this$, a1, a2.this$, a3.this$, a4, a5.this$, a6.this$, a7.this$));
          }

          jchar BaseFragmentsBuilder::getMultiValuedSeparator() const
          {
            return env->callCharMethod(this$, mids$[mid_getMultiValuedSeparator_54c6a173]);
          }

          ::java::util::List BaseFragmentsBuilder::getWeightedFragInfoList(const ::java::util::List & a0) const
          {
            return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getWeightedFragInfoList_4f378251], a0.this$));
          }

          jboolean BaseFragmentsBuilder::isDiscreteMultiValueHighlighting() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isDiscreteMultiValueHighlighting_54c6a16a]);
          }

          void BaseFragmentsBuilder::setDiscreteMultiValueHighlighting(jboolean a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setDiscreteMultiValueHighlighting_bb0c767f], a0);
          }

          void BaseFragmentsBuilder::setMultiValuedSeparator(jchar a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMultiValuedSeparator_87fd545a], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {
          static PyObject *t_BaseFragmentsBuilder_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BaseFragmentsBuilder_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BaseFragmentsBuilder_createFragment(t_BaseFragmentsBuilder *self, PyObject *args);
          static PyObject *t_BaseFragmentsBuilder_createFragments(t_BaseFragmentsBuilder *self, PyObject *args);
          static PyObject *t_BaseFragmentsBuilder_getMultiValuedSeparator(t_BaseFragmentsBuilder *self);
          static PyObject *t_BaseFragmentsBuilder_getWeightedFragInfoList(t_BaseFragmentsBuilder *self, PyObject *arg);
          static PyObject *t_BaseFragmentsBuilder_isDiscreteMultiValueHighlighting(t_BaseFragmentsBuilder *self);
          static PyObject *t_BaseFragmentsBuilder_setDiscreteMultiValueHighlighting(t_BaseFragmentsBuilder *self, PyObject *arg);
          static PyObject *t_BaseFragmentsBuilder_setMultiValuedSeparator(t_BaseFragmentsBuilder *self, PyObject *arg);
          static PyObject *t_BaseFragmentsBuilder_get__discreteMultiValueHighlighting(t_BaseFragmentsBuilder *self, void *data);
          static int t_BaseFragmentsBuilder_set__discreteMultiValueHighlighting(t_BaseFragmentsBuilder *self, PyObject *arg, void *data);
          static PyObject *t_BaseFragmentsBuilder_get__multiValuedSeparator(t_BaseFragmentsBuilder *self, void *data);
          static int t_BaseFragmentsBuilder_set__multiValuedSeparator(t_BaseFragmentsBuilder *self, PyObject *arg, void *data);
          static PyGetSetDef t_BaseFragmentsBuilder__fields_[] = {
            DECLARE_GETSET_FIELD(t_BaseFragmentsBuilder, discreteMultiValueHighlighting),
            DECLARE_GETSET_FIELD(t_BaseFragmentsBuilder, multiValuedSeparator),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_BaseFragmentsBuilder__methods_[] = {
            DECLARE_METHOD(t_BaseFragmentsBuilder, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BaseFragmentsBuilder, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BaseFragmentsBuilder, createFragment, METH_VARARGS),
            DECLARE_METHOD(t_BaseFragmentsBuilder, createFragments, METH_VARARGS),
            DECLARE_METHOD(t_BaseFragmentsBuilder, getMultiValuedSeparator, METH_NOARGS),
            DECLARE_METHOD(t_BaseFragmentsBuilder, getWeightedFragInfoList, METH_O),
            DECLARE_METHOD(t_BaseFragmentsBuilder, isDiscreteMultiValueHighlighting, METH_NOARGS),
            DECLARE_METHOD(t_BaseFragmentsBuilder, setDiscreteMultiValueHighlighting, METH_O),
            DECLARE_METHOD(t_BaseFragmentsBuilder, setMultiValuedSeparator, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(BaseFragmentsBuilder, t_BaseFragmentsBuilder, ::java::lang::Object, BaseFragmentsBuilder, abstract_init, 0, 0, t_BaseFragmentsBuilder__fields_, 0, 0);

          void t_BaseFragmentsBuilder::install(PyObject *module)
          {
            installType(&PY_TYPE(BaseFragmentsBuilder), module, "BaseFragmentsBuilder", 0);
          }

          void t_BaseFragmentsBuilder::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(BaseFragmentsBuilder).tp_dict, "class_", make_descriptor(BaseFragmentsBuilder::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(BaseFragmentsBuilder).tp_dict, "wrapfn_", make_descriptor(t_BaseFragmentsBuilder::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(BaseFragmentsBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(BaseFragmentsBuilder::initializeClass);
            PyDict_SetItemString(PY_TYPE(BaseFragmentsBuilder).tp_dict, "COLORED_POST_TAGS", make_descriptor(JArray<jstring>(BaseFragmentsBuilder::COLORED_POST_TAGS->this$).wrap()));
            PyDict_SetItemString(PY_TYPE(BaseFragmentsBuilder).tp_dict, "COLORED_PRE_TAGS", make_descriptor(JArray<jstring>(BaseFragmentsBuilder::COLORED_PRE_TAGS->this$).wrap()));
          }

          static PyObject *t_BaseFragmentsBuilder_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BaseFragmentsBuilder::initializeClass, 1)))
              return NULL;
            return t_BaseFragmentsBuilder::wrap_Object(BaseFragmentsBuilder(((t_BaseFragmentsBuilder *) arg)->object.this$));
          }
          static PyObject *t_BaseFragmentsBuilder_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BaseFragmentsBuilder::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_BaseFragmentsBuilder_createFragment(t_BaseFragmentsBuilder *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 4:
              {
                ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
                jint a1;
                ::java::lang::String a2((jobject) NULL);
                ::org::apache::lucene::search::vectorhighlight::FieldFragList a3((jobject) NULL);
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, "kIsk", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::search::vectorhighlight::FieldFragList::initializeClass, &a0, &a1, &a2, &a3))
                {
                  OBJ_CALL(result = self->object.createFragment(a0, a1, a2, a3));
                  return j2p(result);
                }
              }
              break;
             case 7:
              {
                ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
                jint a1;
                ::java::lang::String a2((jobject) NULL);
                ::org::apache::lucene::search::vectorhighlight::FieldFragList a3((jobject) NULL);
                JArray< ::java::lang::String > a4((jobject) NULL);
                JArray< ::java::lang::String > a5((jobject) NULL);
                ::org::apache::lucene::search::highlight::Encoder a6((jobject) NULL);
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, "kIsk[s[sk", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::search::vectorhighlight::FieldFragList::initializeClass, ::org::apache::lucene::search::highlight::Encoder::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5, &a6))
                {
                  OBJ_CALL(result = self->object.createFragment(a0, a1, a2, a3, a4, a5, a6));
                  return j2p(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "createFragment", args);
            return NULL;
          }

          static PyObject *t_BaseFragmentsBuilder_createFragments(t_BaseFragmentsBuilder *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 5:
              {
                ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
                jint a1;
                ::java::lang::String a2((jobject) NULL);
                ::org::apache::lucene::search::vectorhighlight::FieldFragList a3((jobject) NULL);
                jint a4;
                JArray< ::java::lang::String > result((jobject) NULL);

                if (!parseArgs(args, "kIskI", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::search::vectorhighlight::FieldFragList::initializeClass, &a0, &a1, &a2, &a3, &a4))
                {
                  OBJ_CALL(result = self->object.createFragments(a0, a1, a2, a3, a4));
                  return JArray<jstring>(result.this$).wrap();
                }
              }
              break;
             case 8:
              {
                ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
                jint a1;
                ::java::lang::String a2((jobject) NULL);
                ::org::apache::lucene::search::vectorhighlight::FieldFragList a3((jobject) NULL);
                jint a4;
                JArray< ::java::lang::String > a5((jobject) NULL);
                JArray< ::java::lang::String > a6((jobject) NULL);
                ::org::apache::lucene::search::highlight::Encoder a7((jobject) NULL);
                JArray< ::java::lang::String > result((jobject) NULL);

                if (!parseArgs(args, "kIskI[s[sk", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::search::vectorhighlight::FieldFragList::initializeClass, ::org::apache::lucene::search::highlight::Encoder::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7))
                {
                  OBJ_CALL(result = self->object.createFragments(a0, a1, a2, a3, a4, a5, a6, a7));
                  return JArray<jstring>(result.this$).wrap();
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "createFragments", args);
            return NULL;
          }

          static PyObject *t_BaseFragmentsBuilder_getMultiValuedSeparator(t_BaseFragmentsBuilder *self)
          {
            jchar result;
            OBJ_CALL(result = self->object.getMultiValuedSeparator());
            return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
          }

          static PyObject *t_BaseFragmentsBuilder_getWeightedFragInfoList(t_BaseFragmentsBuilder *self, PyObject *arg)
          {
            ::java::util::List a0((jobject) NULL);
            PyTypeObject **p0;
            ::java::util::List result((jobject) NULL);

            if (!parseArg(arg, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
            {
              OBJ_CALL(result = self->object.getWeightedFragInfoList(a0));
              return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::search::vectorhighlight::PY_TYPE(FieldFragList$WeightedFragInfo));
            }

            PyErr_SetArgsError((PyObject *) self, "getWeightedFragInfoList", arg);
            return NULL;
          }

          static PyObject *t_BaseFragmentsBuilder_isDiscreteMultiValueHighlighting(t_BaseFragmentsBuilder *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isDiscreteMultiValueHighlighting());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_BaseFragmentsBuilder_setDiscreteMultiValueHighlighting(t_BaseFragmentsBuilder *self, PyObject *arg)
          {
            jboolean a0;

            if (!parseArg(arg, "Z", &a0))
            {
              OBJ_CALL(self->object.setDiscreteMultiValueHighlighting(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setDiscreteMultiValueHighlighting", arg);
            return NULL;
          }

          static PyObject *t_BaseFragmentsBuilder_setMultiValuedSeparator(t_BaseFragmentsBuilder *self, PyObject *arg)
          {
            jchar a0;

            if (!parseArg(arg, "C", &a0))
            {
              OBJ_CALL(self->object.setMultiValuedSeparator(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMultiValuedSeparator", arg);
            return NULL;
          }

          static PyObject *t_BaseFragmentsBuilder_get__discreteMultiValueHighlighting(t_BaseFragmentsBuilder *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isDiscreteMultiValueHighlighting());
            Py_RETURN_BOOL(value);
          }
          static int t_BaseFragmentsBuilder_set__discreteMultiValueHighlighting(t_BaseFragmentsBuilder *self, PyObject *arg, void *data)
          {
            {
              jboolean value;
              if (!parseArg(arg, "Z", &value))
              {
                INT_CALL(self->object.setDiscreteMultiValueHighlighting(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "discreteMultiValueHighlighting", arg);
            return -1;
          }

          static PyObject *t_BaseFragmentsBuilder_get__multiValuedSeparator(t_BaseFragmentsBuilder *self, void *data)
          {
            jchar value;
            OBJ_CALL(value = self->object.getMultiValuedSeparator());
            return PyUnicode_FromUnicode((Py_UNICODE *) &value, 1);
          }
          static int t_BaseFragmentsBuilder_set__multiValuedSeparator(t_BaseFragmentsBuilder *self, PyObject *arg, void *data)
          {
            {
              jchar value;
              if (!parseArg(arg, "C", &value))
              {
                INT_CALL(self->object.setMultiValuedSeparator(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "multiValuedSeparator", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ngram/NGramTokenFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ngram {

          ::java::lang::Class *NGramTokenFilter::class$ = NULL;
          jmethodID *NGramTokenFilter::mids$ = NULL;
          bool NGramTokenFilter::live$ = false;
          jint NGramTokenFilter::DEFAULT_MAX_NGRAM_SIZE = (jint) 0;
          jint NGramTokenFilter::DEFAULT_MIN_NGRAM_SIZE = (jint) 0;

          jclass NGramTokenFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ngram/NGramTokenFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_init$_8f50e725] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_init$_7f9e10a8] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;II)V");
              mids$[mid_init$_46a9ddd5] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/TokenStream;II)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_MAX_NGRAM_SIZE = env->getStaticIntField(cls, "DEFAULT_MAX_NGRAM_SIZE");
              DEFAULT_MIN_NGRAM_SIZE = env->getStaticIntField(cls, "DEFAULT_MIN_NGRAM_SIZE");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          NGramTokenFilter::NGramTokenFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          NGramTokenFilter::NGramTokenFilter(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::TokenStream & a1) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_8f50e725, a0.this$, a1.this$)) {}

          NGramTokenFilter::NGramTokenFilter(const ::org::apache::lucene::analysis::TokenStream & a0, jint a1, jint a2) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_7f9e10a8, a0.this$, a1, a2)) {}

          NGramTokenFilter::NGramTokenFilter(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::TokenStream & a1, jint a2, jint a3) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_46a9ddd5, a0.this$, a1.this$, a2, a3)) {}

          jboolean NGramTokenFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void NGramTokenFilter::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ngram {
          static PyObject *t_NGramTokenFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_NGramTokenFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_NGramTokenFilter_init_(t_NGramTokenFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_NGramTokenFilter_incrementToken(t_NGramTokenFilter *self, PyObject *args);
          static PyObject *t_NGramTokenFilter_reset(t_NGramTokenFilter *self, PyObject *args);

          static PyMethodDef t_NGramTokenFilter__methods_[] = {
            DECLARE_METHOD(t_NGramTokenFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NGramTokenFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NGramTokenFilter, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_NGramTokenFilter, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(NGramTokenFilter, t_NGramTokenFilter, ::org::apache::lucene::analysis::TokenFilter, NGramTokenFilter, t_NGramTokenFilter_init_, 0, 0, 0, 0, 0);

          void t_NGramTokenFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(NGramTokenFilter), module, "NGramTokenFilter", 0);
          }

          void t_NGramTokenFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(NGramTokenFilter).tp_dict, "class_", make_descriptor(NGramTokenFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(NGramTokenFilter).tp_dict, "wrapfn_", make_descriptor(t_NGramTokenFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(NGramTokenFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(NGramTokenFilter::initializeClass);
            PyDict_SetItemString(PY_TYPE(NGramTokenFilter).tp_dict, "DEFAULT_MAX_NGRAM_SIZE", make_descriptor(NGramTokenFilter::DEFAULT_MAX_NGRAM_SIZE));
            PyDict_SetItemString(PY_TYPE(NGramTokenFilter).tp_dict, "DEFAULT_MIN_NGRAM_SIZE", make_descriptor(NGramTokenFilter::DEFAULT_MIN_NGRAM_SIZE));
          }

          static PyObject *t_NGramTokenFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, NGramTokenFilter::initializeClass, 1)))
              return NULL;
            return t_NGramTokenFilter::wrap_Object(NGramTokenFilter(((t_NGramTokenFilter *) arg)->object.this$));
          }
          static PyObject *t_NGramTokenFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, NGramTokenFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_NGramTokenFilter_init_(t_NGramTokenFilter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                NGramTokenFilter object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
                {
                  INT_CALL(object = NGramTokenFilter(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
                NGramTokenFilter object((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = NGramTokenFilter(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                jint a1;
                jint a2;
                NGramTokenFilter object((jobject) NULL);

                if (!parseArgs(args, "kII", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = NGramTokenFilter(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 4:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
                jint a2;
                jint a3;
                NGramTokenFilter object((jobject) NULL);

                if (!parseArgs(args, "kkII", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1, &a2, &a3))
                {
                  INT_CALL(object = NGramTokenFilter(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_NGramTokenFilter_incrementToken(t_NGramTokenFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(NGramTokenFilter), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_NGramTokenFilter_reset(t_NGramTokenFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(NGramTokenFilter), (PyObject *) self, "reset", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spans/SpanWeight.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/Bits.h"
#include "org/apache/lucene/search/Scorer.h"
#include "org/apache/lucene/search/Explanation.h"
#include "org/apache/lucene/search/spans/SpanQuery.h"
#include "org/apache/lucene/search/Query.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {

          ::java::lang::Class *SpanWeight::class$ = NULL;
          jmethodID *SpanWeight::mids$ = NULL;
          bool SpanWeight::live$ = false;

          jclass SpanWeight::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spans/SpanWeight");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_917aaae1] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/spans/SpanQuery;Lorg/apache/lucene/search/IndexSearcher;)V");
              mids$[mid_explain_6ad94adc] = env->getMethodID(cls, "explain", "(Lorg/apache/lucene/index/AtomicReaderContext;I)Lorg/apache/lucene/search/Explanation;");
              mids$[mid_getQuery_97e3851a] = env->getMethodID(cls, "getQuery", "()Lorg/apache/lucene/search/Query;");
              mids$[mid_getValueForNormalization_54c6a176] = env->getMethodID(cls, "getValueForNormalization", "()F");
              mids$[mid_normalize_f1b0c004] = env->getMethodID(cls, "normalize", "(FF)V");
              mids$[mid_scorer_3869ad24] = env->getMethodID(cls, "scorer", "(Lorg/apache/lucene/index/AtomicReaderContext;Lorg/apache/lucene/util/Bits;)Lorg/apache/lucene/search/Scorer;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SpanWeight::SpanWeight(const ::org::apache::lucene::search::spans::SpanQuery & a0, const ::org::apache::lucene::search::IndexSearcher & a1) : ::org::apache::lucene::search::Weight(env->newObject(initializeClass, &mids$, mid_init$_917aaae1, a0.this$, a1.this$)) {}

          ::org::apache::lucene::search::Explanation SpanWeight::explain(const ::org::apache::lucene::index::AtomicReaderContext & a0, jint a1) const
          {
            return ::org::apache::lucene::search::Explanation(env->callObjectMethod(this$, mids$[mid_explain_6ad94adc], a0.this$, a1));
          }

          ::org::apache::lucene::search::Query SpanWeight::getQuery() const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_getQuery_97e3851a]));
          }

          jfloat SpanWeight::getValueForNormalization() const
          {
            return env->callFloatMethod(this$, mids$[mid_getValueForNormalization_54c6a176]);
          }

          void SpanWeight::normalize(jfloat a0, jfloat a1) const
          {
            env->callVoidMethod(this$, mids$[mid_normalize_f1b0c004], a0, a1);
          }

          ::org::apache::lucene::search::Scorer SpanWeight::scorer(const ::org::apache::lucene::index::AtomicReaderContext & a0, const ::org::apache::lucene::util::Bits & a1) const
          {
            return ::org::apache::lucene::search::Scorer(env->callObjectMethod(this$, mids$[mid_scorer_3869ad24], a0.this$, a1.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {
          static PyObject *t_SpanWeight_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SpanWeight_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SpanWeight_init_(t_SpanWeight *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SpanWeight_explain(t_SpanWeight *self, PyObject *args);
          static PyObject *t_SpanWeight_getQuery(t_SpanWeight *self, PyObject *args);
          static PyObject *t_SpanWeight_getValueForNormalization(t_SpanWeight *self, PyObject *args);
          static PyObject *t_SpanWeight_normalize(t_SpanWeight *self, PyObject *args);
          static PyObject *t_SpanWeight_scorer(t_SpanWeight *self, PyObject *args);
          static PyObject *t_SpanWeight_get__query(t_SpanWeight *self, void *data);
          static PyObject *t_SpanWeight_get__valueForNormalization(t_SpanWeight *self, void *data);
          static PyGetSetDef t_SpanWeight__fields_[] = {
            DECLARE_GET_FIELD(t_SpanWeight, query),
            DECLARE_GET_FIELD(t_SpanWeight, valueForNormalization),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SpanWeight__methods_[] = {
            DECLARE_METHOD(t_SpanWeight, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanWeight, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanWeight, explain, METH_VARARGS),
            DECLARE_METHOD(t_SpanWeight, getQuery, METH_VARARGS),
            DECLARE_METHOD(t_SpanWeight, getValueForNormalization, METH_VARARGS),
            DECLARE_METHOD(t_SpanWeight, normalize, METH_VARARGS),
            DECLARE_METHOD(t_SpanWeight, scorer, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SpanWeight, t_SpanWeight, ::org::apache::lucene::search::Weight, SpanWeight, t_SpanWeight_init_, 0, 0, t_SpanWeight__fields_, 0, 0);

          void t_SpanWeight::install(PyObject *module)
          {
            installType(&PY_TYPE(SpanWeight), module, "SpanWeight", 0);
          }

          void t_SpanWeight::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SpanWeight).tp_dict, "class_", make_descriptor(SpanWeight::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SpanWeight).tp_dict, "wrapfn_", make_descriptor(t_SpanWeight::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SpanWeight).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SpanWeight_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SpanWeight::initializeClass, 1)))
              return NULL;
            return t_SpanWeight::wrap_Object(SpanWeight(((t_SpanWeight *) arg)->object.this$));
          }
          static PyObject *t_SpanWeight_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SpanWeight::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SpanWeight_init_(t_SpanWeight *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::search::spans::SpanQuery a0((jobject) NULL);
            ::org::apache::lucene::search::IndexSearcher a1((jobject) NULL);
            SpanWeight object((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::search::spans::SpanQuery::initializeClass, ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0, &a1))
            {
              INT_CALL(object = SpanWeight(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SpanWeight_explain(t_SpanWeight *self, PyObject *args)
          {
            ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
            jint a1;
            ::org::apache::lucene::search::Explanation result((jobject) NULL);

            if (!parseArgs(args, "kI", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.explain(a0, a1));
              return ::org::apache::lucene::search::t_Explanation::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(SpanWeight), (PyObject *) self, "explain", args, 2);
          }

          static PyObject *t_SpanWeight_getQuery(t_SpanWeight *self, PyObject *args)
          {
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getQuery());
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(SpanWeight), (PyObject *) self, "getQuery", args, 2);
          }

          static PyObject *t_SpanWeight_getValueForNormalization(t_SpanWeight *self, PyObject *args)
          {
            jfloat result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getValueForNormalization());
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(SpanWeight), (PyObject *) self, "getValueForNormalization", args, 2);
          }

          static PyObject *t_SpanWeight_normalize(t_SpanWeight *self, PyObject *args)
          {
            jfloat a0;
            jfloat a1;

            if (!parseArgs(args, "FF", &a0, &a1))
            {
              OBJ_CALL(self->object.normalize(a0, a1));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(SpanWeight), (PyObject *) self, "normalize", args, 2);
          }

          static PyObject *t_SpanWeight_scorer(t_SpanWeight *self, PyObject *args)
          {
            ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
            ::org::apache::lucene::util::Bits a1((jobject) NULL);
            ::org::apache::lucene::search::Scorer result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.scorer(a0, a1));
              return ::org::apache::lucene::search::t_Scorer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(SpanWeight), (PyObject *) self, "scorer", args, 2);
          }

          static PyObject *t_SpanWeight_get__query(t_SpanWeight *self, void *data)
          {
            ::org::apache::lucene::search::Query value((jobject) NULL);
            OBJ_CALL(value = self->object.getQuery());
            return ::org::apache::lucene::search::t_Query::wrap_Object(value);
          }

          static PyObject *t_SpanWeight_get__valueForNormalization(t_SpanWeight *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getValueForNormalization());
            return PyFloat_FromDouble((double) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/expressions/js/JavascriptParser$additive_return.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {

          ::java::lang::Class *JavascriptParser$additive_return::class$ = NULL;
          jmethodID *JavascriptParser$additive_return::mids$ = NULL;
          bool JavascriptParser$additive_return::live$ = false;

          jclass JavascriptParser$additive_return::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/expressions/js/JavascriptParser$additive_return");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          JavascriptParser$additive_return::JavascriptParser$additive_return() : ::org::antlr::runtime::ParserRuleReturnScope(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {
          static PyObject *t_JavascriptParser$additive_return_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_JavascriptParser$additive_return_instance_(PyTypeObject *type, PyObject *arg);
          static int t_JavascriptParser$additive_return_init_(t_JavascriptParser$additive_return *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_JavascriptParser$additive_return__methods_[] = {
            DECLARE_METHOD(t_JavascriptParser$additive_return, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_JavascriptParser$additive_return, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(JavascriptParser$additive_return, t_JavascriptParser$additive_return, ::org::antlr::runtime::ParserRuleReturnScope, JavascriptParser$additive_return, t_JavascriptParser$additive_return_init_, 0, 0, 0, 0, 0);

          void t_JavascriptParser$additive_return::install(PyObject *module)
          {
            installType(&PY_TYPE(JavascriptParser$additive_return), module, "JavascriptParser$additive_return", 0);
          }

          void t_JavascriptParser$additive_return::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(JavascriptParser$additive_return).tp_dict, "class_", make_descriptor(JavascriptParser$additive_return::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(JavascriptParser$additive_return).tp_dict, "wrapfn_", make_descriptor(t_JavascriptParser$additive_return::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(JavascriptParser$additive_return).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_JavascriptParser$additive_return_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, JavascriptParser$additive_return::initializeClass, 1)))
              return NULL;
            return t_JavascriptParser$additive_return::wrap_Object(JavascriptParser$additive_return(((t_JavascriptParser$additive_return *) arg)->object.this$));
          }
          static PyObject *t_JavascriptParser$additive_return_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, JavascriptParser$additive_return::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_JavascriptParser$additive_return_init_(t_JavascriptParser$additive_return *self, PyObject *args, PyObject *kwds)
          {
            JavascriptParser$additive_return object((jobject) NULL);

            INT_CALL(object = JavascriptParser$additive_return());
            self->object = object;

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/ToStringUtils.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *ToStringUtils::class$ = NULL;
        jmethodID *ToStringUtils::mids$ = NULL;
        bool ToStringUtils::live$ = false;

        jclass ToStringUtils::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/ToStringUtils");

            mids$ = new jmethodID[max_mid];
            mids$[mid_boost_5ded254a] = env->getStaticMethodID(cls, "boost", "(F)Ljava/lang/String;");
            mids$[mid_byteArray_982a0ced] = env->getStaticMethodID(cls, "byteArray", "(Ljava/lang/StringBuilder;[B)V");
            mids$[mid_longHex_3e02f30e] = env->getStaticMethodID(cls, "longHex", "(J)Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::java::lang::String ToStringUtils::boost(jfloat a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_boost_5ded254a], a0));
        }

        void ToStringUtils::byteArray(const ::java::lang::StringBuilder & a0, const JArray< jbyte > & a1)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_byteArray_982a0ced], a0.this$, a1.this$);
        }

        ::java::lang::String ToStringUtils::longHex(jlong a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_longHex_3e02f30e], a0));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_ToStringUtils_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ToStringUtils_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ToStringUtils_boost(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ToStringUtils_byteArray(PyTypeObject *type, PyObject *args);
        static PyObject *t_ToStringUtils_longHex(PyTypeObject *type, PyObject *arg);

        static PyMethodDef t_ToStringUtils__methods_[] = {
          DECLARE_METHOD(t_ToStringUtils, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ToStringUtils, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ToStringUtils, boost, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ToStringUtils, byteArray, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_ToStringUtils, longHex, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(ToStringUtils, t_ToStringUtils, ::java::lang::Object, ToStringUtils, abstract_init, 0, 0, 0, 0, 0);

        void t_ToStringUtils::install(PyObject *module)
        {
          installType(&PY_TYPE(ToStringUtils), module, "ToStringUtils", 0);
        }

        void t_ToStringUtils::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(ToStringUtils).tp_dict, "class_", make_descriptor(ToStringUtils::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(ToStringUtils).tp_dict, "wrapfn_", make_descriptor(t_ToStringUtils::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(ToStringUtils).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_ToStringUtils_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, ToStringUtils::initializeClass, 1)))
            return NULL;
          return t_ToStringUtils::wrap_Object(ToStringUtils(((t_ToStringUtils *) arg)->object.this$));
        }
        static PyObject *t_ToStringUtils_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, ToStringUtils::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_ToStringUtils_boost(PyTypeObject *type, PyObject *arg)
        {
          jfloat a0;
          ::java::lang::String result((jobject) NULL);

          if (!parseArg(arg, "F", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::ToStringUtils::boost(a0));
            return j2p(result);
          }

          PyErr_SetArgsError(type, "boost", arg);
          return NULL;
        }

        static PyObject *t_ToStringUtils_byteArray(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::StringBuilder a0((jobject) NULL);
          JArray< jbyte > a1((jobject) NULL);

          if (!parseArgs(args, "k[B", ::java::lang::StringBuilder::initializeClass, &a0, &a1))
          {
            OBJ_CALL(::org::apache::lucene::util::ToStringUtils::byteArray(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "byteArray", args);
          return NULL;
        }

        static PyObject *t_ToStringUtils_longHex(PyTypeObject *type, PyObject *arg)
        {
          jlong a0;
          ::java::lang::String result((jobject) NULL);

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::ToStringUtils::longHex(a0));
            return j2p(result);
          }

          PyErr_SetArgsError(type, "longHex", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/precedence/PrecedenceQueryParser.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace precedence {

            ::java::lang::Class *PrecedenceQueryParser::class$ = NULL;
            jmethodID *PrecedenceQueryParser::mids$ = NULL;
            bool PrecedenceQueryParser::live$ = false;

            jclass PrecedenceQueryParser::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/precedence/PrecedenceQueryParser");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_init$_31619410] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Analyzer;)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            PrecedenceQueryParser::PrecedenceQueryParser() : ::org::apache::lucene::queryparser::flexible::standard::StandardQueryParser(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

            PrecedenceQueryParser::PrecedenceQueryParser(const ::org::apache::lucene::analysis::Analyzer & a0) : ::org::apache::lucene::queryparser::flexible::standard::StandardQueryParser(env->newObject(initializeClass, &mids$, mid_init$_31619410, a0.this$)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace precedence {
            static PyObject *t_PrecedenceQueryParser_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_PrecedenceQueryParser_instance_(PyTypeObject *type, PyObject *arg);
            static int t_PrecedenceQueryParser_init_(t_PrecedenceQueryParser *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_PrecedenceQueryParser__methods_[] = {
              DECLARE_METHOD(t_PrecedenceQueryParser, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_PrecedenceQueryParser, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(PrecedenceQueryParser, t_PrecedenceQueryParser, ::org::apache::lucene::queryparser::flexible::standard::StandardQueryParser, PrecedenceQueryParser, t_PrecedenceQueryParser_init_, 0, 0, 0, 0, 0);

            void t_PrecedenceQueryParser::install(PyObject *module)
            {
              installType(&PY_TYPE(PrecedenceQueryParser), module, "PrecedenceQueryParser", 0);
            }

            void t_PrecedenceQueryParser::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(PrecedenceQueryParser).tp_dict, "class_", make_descriptor(PrecedenceQueryParser::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(PrecedenceQueryParser).tp_dict, "wrapfn_", make_descriptor(t_PrecedenceQueryParser::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(PrecedenceQueryParser).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_PrecedenceQueryParser_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, PrecedenceQueryParser::initializeClass, 1)))
                return NULL;
              return t_PrecedenceQueryParser::wrap_Object(PrecedenceQueryParser(((t_PrecedenceQueryParser *) arg)->object.this$));
            }
            static PyObject *t_PrecedenceQueryParser_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, PrecedenceQueryParser::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_PrecedenceQueryParser_init_(t_PrecedenceQueryParser *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 0:
                {
                  PrecedenceQueryParser object((jobject) NULL);

                  INT_CALL(object = PrecedenceQueryParser());
                  self->object = object;
                  break;
                }
                goto err;
               case 1:
                {
                  ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
                  PrecedenceQueryParser object((jobject) NULL);

                  if (!parseArgs(args, "k", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0))
                  {
                    INT_CALL(object = PrecedenceQueryParser(a0));
                    self->object = object;
                    break;
                  }
                }
               default:
               err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/util/Arrays.h"
#include "java/lang/Comparable.h"
#include "java/util/Spliterator$OfInt.h"
#include "java/lang/Class.h"
#include "java/util/Spliterator.h"
#include "java/util/List.h"
#include "java/util/Comparator.h"
#include "java/util/Spliterator$OfDouble.h"
#include "java/util/Spliterator$OfLong.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace java {
  namespace util {

    ::java::lang::Class *Arrays::class$ = NULL;
    jmethodID *Arrays::mids$ = NULL;
    bool Arrays::live$ = false;

    jclass Arrays::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/util/Arrays");

        mids$ = new jmethodID[max_mid];
        mids$[mid_asList_b1a4e262] = env->getStaticMethodID(cls, "asList", "([Ljava/lang/Object;)Ljava/util/List;");
        mids$[mid_binarySearch_c36b04d7] = env->getStaticMethodID(cls, "binarySearch", "([FF)I");
        mids$[mid_binarySearch_1da92101] = env->getStaticMethodID(cls, "binarySearch", "([Ljava/lang/Object;Ljava/lang/Object;)I");
        mids$[mid_binarySearch_8f13b3af] = env->getStaticMethodID(cls, "binarySearch", "([BB)I");
        mids$[mid_binarySearch_e6fbc3d5] = env->getStaticMethodID(cls, "binarySearch", "([SS)I");
        mids$[mid_binarySearch_4c830bcf] = env->getStaticMethodID(cls, "binarySearch", "([JJ)I");
        mids$[mid_binarySearch_d6ab1c2f] = env->getStaticMethodID(cls, "binarySearch", "([DD)I");
        mids$[mid_binarySearch_df726439] = env->getStaticMethodID(cls, "binarySearch", "([II)I");
        mids$[mid_binarySearch_ea67e195] = env->getStaticMethodID(cls, "binarySearch", "([CC)I");
        mids$[mid_binarySearch_736a8636] = env->getStaticMethodID(cls, "binarySearch", "([Ljava/lang/Object;Ljava/lang/Object;Ljava/util/Comparator;)I");
        mids$[mid_binarySearch_c8914cef] = env->getStaticMethodID(cls, "binarySearch", "([JIIJ)I");
        mids$[mid_binarySearch_1e4305af] = env->getStaticMethodID(cls, "binarySearch", "([BIIB)I");
        mids$[mid_binarySearch_b3c1f717] = env->getStaticMethodID(cls, "binarySearch", "([FIIF)I");
        mids$[mid_binarySearch_dee75d29] = env->getStaticMethodID(cls, "binarySearch", "([Ljava/lang/Object;IILjava/lang/Object;)I");
        mids$[mid_binarySearch_695adc4b] = env->getStaticMethodID(cls, "binarySearch", "([DIID)I");
        mids$[mid_binarySearch_4f5bed95] = env->getStaticMethodID(cls, "binarySearch", "([SIIS)I");
        mids$[mid_binarySearch_b5b4fc35] = env->getStaticMethodID(cls, "binarySearch", "([CIIC)I");
        mids$[mid_binarySearch_4eae659d] = env->getStaticMethodID(cls, "binarySearch", "([IIII)I");
        mids$[mid_binarySearch_07be7c2a] = env->getStaticMethodID(cls, "binarySearch", "([Ljava/lang/Object;IILjava/lang/Object;Ljava/util/Comparator;)I");
        mids$[mid_copyOf_d090ee39] = env->getStaticMethodID(cls, "copyOf", "([SI)[S");
        mids$[mid_copyOf_91cb90f9] = env->getStaticMethodID(cls, "copyOf", "([CI)[C");
        mids$[mid_copyOf_0f9a030d] = env->getStaticMethodID(cls, "copyOf", "([JI)[J");
        mids$[mid_copyOf_e2c1f835] = env->getStaticMethodID(cls, "copyOf", "([DI)[D");
        mids$[mid_copyOf_6bd5869d] = env->getStaticMethodID(cls, "copyOf", "([BI)[B");
        mids$[mid_copyOf_669ee2d1] = env->getStaticMethodID(cls, "copyOf", "([Ljava/lang/Object;I)[Ljava/lang/Object;");
        mids$[mid_copyOf_d766d189] = env->getStaticMethodID(cls, "copyOf", "([II)[I");
        mids$[mid_copyOf_a415095d] = env->getStaticMethodID(cls, "copyOf", "([FI)[F");
        mids$[mid_copyOf_1fbccced] = env->getStaticMethodID(cls, "copyOf", "([ZI)[Z");
        mids$[mid_copyOf_3608f1f7] = env->getStaticMethodID(cls, "copyOf", "([Ljava/lang/Object;ILjava/lang/Class;)[Ljava/lang/Object;");
        mids$[mid_copyOfRange_16e37a35] = env->getStaticMethodID(cls, "copyOfRange", "([FII)[F");
        mids$[mid_copyOfRange_b92120ff] = env->getStaticMethodID(cls, "copyOfRange", "([Ljava/lang/Object;II)[Ljava/lang/Object;");
        mids$[mid_copyOfRange_bb313e1d] = env->getStaticMethodID(cls, "copyOfRange", "([DII)[D");
        mids$[mid_copyOfRange_96b1a95f] = env->getStaticMethodID(cls, "copyOfRange", "([CII)[C");
        mids$[mid_copyOfRange_3d448975] = env->getStaticMethodID(cls, "copyOfRange", "([BII)[B");
        mids$[mid_copyOfRange_a80c3bb3] = env->getStaticMethodID(cls, "copyOfRange", "([III)[I");
        mids$[mid_copyOfRange_be4afb45] = env->getStaticMethodID(cls, "copyOfRange", "([JII)[J");
        mids$[mid_copyOfRange_9766cdc5] = env->getStaticMethodID(cls, "copyOfRange", "([ZII)[Z");
        mids$[mid_copyOfRange_3a8237ff] = env->getStaticMethodID(cls, "copyOfRange", "([SII)[S");
        mids$[mid_copyOfRange_bca17599] = env->getStaticMethodID(cls, "copyOfRange", "([Ljava/lang/Object;IILjava/lang/Class;)[Ljava/lang/Object;");
        mids$[mid_deepEquals_a9ca87d2] = env->getStaticMethodID(cls, "deepEquals", "([Ljava/lang/Object;[Ljava/lang/Object;)Z");
        mids$[mid_deepHashCode_c0f5dac5] = env->getStaticMethodID(cls, "deepHashCode", "([Ljava/lang/Object;)I");
        mids$[mid_deepToString_02ea1cdd] = env->getStaticMethodID(cls, "deepToString", "([Ljava/lang/Object;)Ljava/lang/String;");
        mids$[mid_equals_a9ca87d2] = env->getStaticMethodID(cls, "equals", "([Ljava/lang/Object;[Ljava/lang/Object;)Z");
        mids$[mid_equals_7868d93a] = env->getStaticMethodID(cls, "equals", "([S[S)Z");
        mids$[mid_equals_6f6949ea] = env->getStaticMethodID(cls, "equals", "([Z[Z)Z");
        mids$[mid_equals_e3842e2a] = env->getStaticMethodID(cls, "equals", "([J[J)Z");
        mids$[mid_equals_2a42df9a] = env->getStaticMethodID(cls, "equals", "([C[C)Z");
        mids$[mid_equals_7c26725e] = env->getStaticMethodID(cls, "equals", "([I[I)Z");
        mids$[mid_equals_38a3e932] = env->getStaticMethodID(cls, "equals", "([F[F)Z");
        mids$[mid_equals_a2d8877a] = env->getStaticMethodID(cls, "equals", "([B[B)Z");
        mids$[mid_equals_2383bf16] = env->getStaticMethodID(cls, "equals", "([D[D)Z");
        mids$[mid_fill_8f13b3b0] = env->getStaticMethodID(cls, "fill", "([BB)V");
        mids$[mid_fill_e6fbc3ca] = env->getStaticMethodID(cls, "fill", "([SS)V");
        mids$[mid_fill_c36b04c8] = env->getStaticMethodID(cls, "fill", "([FF)V");
        mids$[mid_fill_1da9211e] = env->getStaticMethodID(cls, "fill", "([Ljava/lang/Object;Ljava/lang/Object;)V");
        mids$[mid_fill_ea67e18a] = env->getStaticMethodID(cls, "fill", "([CC)V");
        mids$[mid_fill_4c830bd0] = env->getStaticMethodID(cls, "fill", "([JJ)V");
        mids$[mid_fill_d6ab1c30] = env->getStaticMethodID(cls, "fill", "([DD)V");
        mids$[mid_fill_df726426] = env->getStaticMethodID(cls, "fill", "([II)V");
        mids$[mid_fill_ad7155b0] = env->getStaticMethodID(cls, "fill", "([ZZ)V");
        mids$[mid_fill_b5b4fc2a] = env->getStaticMethodID(cls, "fill", "([CIIC)V");
        mids$[mid_fill_b3c1f708] = env->getStaticMethodID(cls, "fill", "([FIIF)V");
        mids$[mid_fill_c8914cf0] = env->getStaticMethodID(cls, "fill", "([JIIJ)V");
        mids$[mid_fill_77210c30] = env->getStaticMethodID(cls, "fill", "([ZIIZ)V");
        mids$[mid_fill_dee75d36] = env->getStaticMethodID(cls, "fill", "([Ljava/lang/Object;IILjava/lang/Object;)V");
        mids$[mid_fill_4f5bed8a] = env->getStaticMethodID(cls, "fill", "([SIIS)V");
        mids$[mid_fill_1e4305b0] = env->getStaticMethodID(cls, "fill", "([BIIB)V");
        mids$[mid_fill_4eae6582] = env->getStaticMethodID(cls, "fill", "([IIII)V");
        mids$[mid_fill_695adc54] = env->getStaticMethodID(cls, "fill", "([DIID)V");
        mids$[mid_hashCode_f0c5b9dc] = env->getStaticMethodID(cls, "hashCode", "([Z)I");
        mids$[mid_hashCode_9ceb500c] = env->getStaticMethodID(cls, "hashCode", "([J)I");
        mids$[mid_hashCode_49b4f134] = env->getStaticMethodID(cls, "hashCode", "([B)I");
        mids$[mid_hashCode_700e23c9] = env->getStaticMethodID(cls, "hashCode", "([C)I");
        mids$[mid_hashCode_c017fc59] = env->getStaticMethodID(cls, "hashCode", "([S)I");
        mids$[mid_hashCode_f3b62cc6] = env->getStaticMethodID(cls, "hashCode", "([D)I");
        mids$[mid_hashCode_9cc34320] = env->getStaticMethodID(cls, "hashCode", "([F)I");
        mids$[mid_hashCode_1efc2017] = env->getStaticMethodID(cls, "hashCode", "([I)I");
        mids$[mid_hashCode_c0f5dac5] = env->getStaticMethodID(cls, "hashCode", "([Ljava/lang/Object;)I");
        mids$[mid_parallelSort_01dac18d] = env->getStaticMethodID(cls, "parallelSort", "([Ljava/lang/Comparable;)V");
        mids$[mid_parallelSort_9cc3433f] = env->getStaticMethodID(cls, "parallelSort", "([F)V");
        mids$[mid_parallelSort_f3b62cd9] = env->getStaticMethodID(cls, "parallelSort", "([D)V");
        mids$[mid_parallelSort_49b4f12b] = env->getStaticMethodID(cls, "parallelSort", "([B)V");
        mids$[mid_parallelSort_700e23d6] = env->getStaticMethodID(cls, "parallelSort", "([C)V");
        mids$[mid_parallelSort_9ceb5013] = env->getStaticMethodID(cls, "parallelSort", "([J)V");
        mids$[mid_parallelSort_1efc2008] = env->getStaticMethodID(cls, "parallelSort", "([I)V");
        mids$[mid_parallelSort_c017fc46] = env->getStaticMethodID(cls, "parallelSort", "([S)V");
        mids$[mid_parallelSort_8c46d789] = env->getStaticMethodID(cls, "parallelSort", "([Ljava/lang/Object;Ljava/util/Comparator;)V");
        mids$[mid_parallelSort_6ae021e7] = env->getStaticMethodID(cls, "parallelSort", "([JII)V");
        mids$[mid_parallelSort_266f4139] = env->getStaticMethodID(cls, "parallelSort", "([Ljava/lang/Comparable;II)V");
        mids$[mid_parallelSort_3be2c5d1] = env->getStaticMethodID(cls, "parallelSort", "([DII)V");
        mids$[mid_parallelSort_c8bd2f63] = env->getStaticMethodID(cls, "parallelSort", "([FII)V");
        mids$[mid_parallelSort_3e1ea22c] = env->getStaticMethodID(cls, "parallelSort", "([III)V");
        mids$[mid_parallelSort_6f0bb356] = env->getStaticMethodID(cls, "parallelSort", "([CII)V");
        mids$[mid_parallelSort_b389e986] = env->getStaticMethodID(cls, "parallelSort", "([SII)V");
        mids$[mid_parallelSort_86f4435f] = env->getStaticMethodID(cls, "parallelSort", "([BII)V");
        mids$[mid_parallelSort_7c263389] = env->getStaticMethodID(cls, "parallelSort", "([Ljava/lang/Object;IILjava/util/Comparator;)V");
        mids$[mid_sort_9cc3433f] = env->getStaticMethodID(cls, "sort", "([F)V");
        mids$[mid_sort_f3b62cd9] = env->getStaticMethodID(cls, "sort", "([D)V");
        mids$[mid_sort_700e23d6] = env->getStaticMethodID(cls, "sort", "([C)V");
        mids$[mid_sort_c0f5dada] = env->getStaticMethodID(cls, "sort", "([Ljava/lang/Object;)V");
        mids$[mid_sort_49b4f12b] = env->getStaticMethodID(cls, "sort", "([B)V");
        mids$[mid_sort_9ceb5013] = env->getStaticMethodID(cls, "sort", "([J)V");
        mids$[mid_sort_c017fc46] = env->getStaticMethodID(cls, "sort", "([S)V");
        mids$[mid_sort_1efc2008] = env->getStaticMethodID(cls, "sort", "([I)V");
        mids$[mid_sort_8c46d789] = env->getStaticMethodID(cls, "sort", "([Ljava/lang/Object;Ljava/util/Comparator;)V");
        mids$[mid_sort_b389e986] = env->getStaticMethodID(cls, "sort", "([SII)V");
        mids$[mid_sort_3e1ea22c] = env->getStaticMethodID(cls, "sort", "([III)V");
        mids$[mid_sort_c8bd2f63] = env->getStaticMethodID(cls, "sort", "([FII)V");
        mids$[mid_sort_86f4435f] = env->getStaticMethodID(cls, "sort", "([BII)V");
        mids$[mid_sort_6f0bb356] = env->getStaticMethodID(cls, "sort", "([CII)V");
        mids$[mid_sort_3be2c5d1] = env->getStaticMethodID(cls, "sort", "([DII)V");
        mids$[mid_sort_6ae021e7] = env->getStaticMethodID(cls, "sort", "([JII)V");
        mids$[mid_sort_4172dade] = env->getStaticMethodID(cls, "sort", "([Ljava/lang/Object;II)V");
        mids$[mid_sort_7c263389] = env->getStaticMethodID(cls, "sort", "([Ljava/lang/Object;IILjava/util/Comparator;)V");
        mids$[mid_spliterator_eb34d33a] = env->getStaticMethodID(cls, "spliterator", "([D)Ljava/util/Spliterator$OfDouble;");
        mids$[mid_spliterator_24b4ecc4] = env->getStaticMethodID(cls, "spliterator", "([Ljava/lang/Object;)Ljava/util/Spliterator;");
        mids$[mid_spliterator_a4f55b95] = env->getStaticMethodID(cls, "spliterator", "([J)Ljava/util/Spliterator$OfLong;");
        mids$[mid_spliterator_8c25906e] = env->getStaticMethodID(cls, "spliterator", "([I)Ljava/util/Spliterator$OfInt;");
        mids$[mid_spliterator_218f8c32] = env->getStaticMethodID(cls, "spliterator", "([DII)Ljava/util/Spliterator$OfDouble;");
        mids$[mid_spliterator_90ced414] = env->getStaticMethodID(cls, "spliterator", "([Ljava/lang/Object;II)Ljava/util/Spliterator;");
        mids$[mid_spliterator_fb0d86ad] = env->getStaticMethodID(cls, "spliterator", "([JII)Ljava/util/Spliterator$OfLong;");
        mids$[mid_spliterator_552485d2] = env->getStaticMethodID(cls, "spliterator", "([III)Ljava/util/Spliterator$OfInt;");
        mids$[mid_toString_08b6580a] = env->getStaticMethodID(cls, "toString", "([F)Ljava/lang/String;");
        mids$[mid_toString_c783d655] = env->getStaticMethodID(cls, "toString", "([C)Ljava/lang/String;");
        mids$[mid_toString_9352a4bc] = env->getStaticMethodID(cls, "toString", "([D)Ljava/lang/String;");
        mids$[mid_toString_aeceff45] = env->getStaticMethodID(cls, "toString", "([S)Ljava/lang/String;");
        mids$[mid_toString_14e8bbde] = env->getStaticMethodID(cls, "toString", "([Z)Ljava/lang/String;");
        mids$[mid_toString_0f6e0f86] = env->getStaticMethodID(cls, "toString", "([B)Ljava/lang/String;");
        mids$[mid_toString_02ea1cdd] = env->getStaticMethodID(cls, "toString", "([Ljava/lang/Object;)Ljava/lang/String;");
        mids$[mid_toString_053bf1ae] = env->getStaticMethodID(cls, "toString", "([J)Ljava/lang/String;");
        mids$[mid_toString_9570afaf] = env->getStaticMethodID(cls, "toString", "([I)Ljava/lang/String;");

        class$ = (::java::lang::Class *) new JObject(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    ::java::util::List Arrays::asList(const JArray< ::java::lang::Object > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::List(env->callStaticObjectMethod(cls, mids$[mid_asList_b1a4e262], a0.this$));
    }

    jint Arrays::binarySearch(const JArray< jfloat > & a0, jfloat a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_binarySearch_c36b04d7], a0.this$, a1);
    }

    jint Arrays::binarySearch(const JArray< ::java::lang::Object > & a0, const ::java::lang::Object & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_binarySearch_1da92101], a0.this$, a1.this$);
    }

    jint Arrays::binarySearch(const JArray< jbyte > & a0, jbyte a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_binarySearch_8f13b3af], a0.this$, a1);
    }

    jint Arrays::binarySearch(const JArray< jshort > & a0, jshort a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_binarySearch_e6fbc3d5], a0.this$, a1);
    }

    jint Arrays::binarySearch(const JArray< jlong > & a0, jlong a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_binarySearch_4c830bcf], a0.this$, a1);
    }

    jint Arrays::binarySearch(const JArray< jdouble > & a0, jdouble a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_binarySearch_d6ab1c2f], a0.this$, a1);
    }

    jint Arrays::binarySearch(const JArray< jint > & a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_binarySearch_df726439], a0.this$, a1);
    }

    jint Arrays::binarySearch(const JArray< jchar > & a0, jchar a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_binarySearch_ea67e195], a0.this$, a1);
    }

    jint Arrays::binarySearch(const JArray< ::java::lang::Object > & a0, const ::java::lang::Object & a1, const ::java::util::Comparator & a2)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_binarySearch_736a8636], a0.this$, a1.this$, a2.this$);
    }

    jint Arrays::binarySearch(const JArray< jlong > & a0, jint a1, jint a2, jlong a3)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_binarySearch_c8914cef], a0.this$, a1, a2, a3);
    }

    jint Arrays::binarySearch(const JArray< jbyte > & a0, jint a1, jint a2, jbyte a3)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_binarySearch_1e4305af], a0.this$, a1, a2, a3);
    }

    jint Arrays::binarySearch(const JArray< jfloat > & a0, jint a1, jint a2, jfloat a3)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_binarySearch_b3c1f717], a0.this$, a1, a2, a3);
    }

    jint Arrays::binarySearch(const JArray< ::java::lang::Object > & a0, jint a1, jint a2, const ::java::lang::Object & a3)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_binarySearch_dee75d29], a0.this$, a1, a2, a3.this$);
    }

    jint Arrays::binarySearch(const JArray< jdouble > & a0, jint a1, jint a2, jdouble a3)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_binarySearch_695adc4b], a0.this$, a1, a2, a3);
    }

    jint Arrays::binarySearch(const JArray< jshort > & a0, jint a1, jint a2, jshort a3)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_binarySearch_4f5bed95], a0.this$, a1, a2, a3);
    }

    jint Arrays::binarySearch(const JArray< jchar > & a0, jint a1, jint a2, jchar a3)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_binarySearch_b5b4fc35], a0.this$, a1, a2, a3);
    }

    jint Arrays::binarySearch(const JArray< jint > & a0, jint a1, jint a2, jint a3)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_binarySearch_4eae659d], a0.this$, a1, a2, a3);
    }

    jint Arrays::binarySearch(const JArray< ::java::lang::Object > & a0, jint a1, jint a2, const ::java::lang::Object & a3, const ::java::util::Comparator & a4)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_binarySearch_07be7c2a], a0.this$, a1, a2, a3.this$, a4.this$);
    }

    JArray< jshort > Arrays::copyOf(const JArray< jshort > & a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return JArray< jshort >(env->callStaticObjectMethod(cls, mids$[mid_copyOf_d090ee39], a0.this$, a1));
    }

    JArray< jchar > Arrays::copyOf(const JArray< jchar > & a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return JArray< jchar >(env->callStaticObjectMethod(cls, mids$[mid_copyOf_91cb90f9], a0.this$, a1));
    }

    JArray< jlong > Arrays::copyOf(const JArray< jlong > & a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return JArray< jlong >(env->callStaticObjectMethod(cls, mids$[mid_copyOf_0f9a030d], a0.this$, a1));
    }

    JArray< jdouble > Arrays::copyOf(const JArray< jdouble > & a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return JArray< jdouble >(env->callStaticObjectMethod(cls, mids$[mid_copyOf_e2c1f835], a0.this$, a1));
    }

    JArray< jbyte > Arrays::copyOf(const JArray< jbyte > & a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return JArray< jbyte >(env->callStaticObjectMethod(cls, mids$[mid_copyOf_6bd5869d], a0.this$, a1));
    }

    JArray< ::java::lang::Object > Arrays::copyOf(const JArray< ::java::lang::Object > & a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return JArray< ::java::lang::Object >(env->callStaticObjectMethod(cls, mids$[mid_copyOf_669ee2d1], a0.this$, a1));
    }

    JArray< jint > Arrays::copyOf(const JArray< jint > & a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return JArray< jint >(env->callStaticObjectMethod(cls, mids$[mid_copyOf_d766d189], a0.this$, a1));
    }

    JArray< jfloat > Arrays::copyOf(const JArray< jfloat > & a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return JArray< jfloat >(env->callStaticObjectMethod(cls, mids$[mid_copyOf_a415095d], a0.this$, a1));
    }

    JArray< jboolean > Arrays::copyOf(const JArray< jboolean > & a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return JArray< jboolean >(env->callStaticObjectMethod(cls, mids$[mid_copyOf_1fbccced], a0.this$, a1));
    }

    JArray< ::java::lang::Object > Arrays::copyOf(const JArray< ::java::lang::Object > & a0, jint a1, const ::java::lang::Class & a2)
    {
      jclass cls = env->getClass(initializeClass);
      return JArray< ::java::lang::Object >(env->callStaticObjectMethod(cls, mids$[mid_copyOf_3608f1f7], a0.this$, a1, a2.this$));
    }

    JArray< jfloat > Arrays::copyOfRange(const JArray< jfloat > & a0, jint a1, jint a2)
    {
      jclass cls = env->getClass(initializeClass);
      return JArray< jfloat >(env->callStaticObjectMethod(cls, mids$[mid_copyOfRange_16e37a35], a0.this$, a1, a2));
    }

    JArray< ::java::lang::Object > Arrays::copyOfRange(const JArray< ::java::lang::Object > & a0, jint a1, jint a2)
    {
      jclass cls = env->getClass(initializeClass);
      return JArray< ::java::lang::Object >(env->callStaticObjectMethod(cls, mids$[mid_copyOfRange_b92120ff], a0.this$, a1, a2));
    }

    JArray< jdouble > Arrays::copyOfRange(const JArray< jdouble > & a0, jint a1, jint a2)
    {
      jclass cls = env->getClass(initializeClass);
      return JArray< jdouble >(env->callStaticObjectMethod(cls, mids$[mid_copyOfRange_bb313e1d], a0.this$, a1, a2));
    }

    JArray< jchar > Arrays::copyOfRange(const JArray< jchar > & a0, jint a1, jint a2)
    {
      jclass cls = env->getClass(initializeClass);
      return JArray< jchar >(env->callStaticObjectMethod(cls, mids$[mid_copyOfRange_96b1a95f], a0.this$, a1, a2));
    }

    JArray< jbyte > Arrays::copyOfRange(const JArray< jbyte > & a0, jint a1, jint a2)
    {
      jclass cls = env->getClass(initializeClass);
      return JArray< jbyte >(env->callStaticObjectMethod(cls, mids$[mid_copyOfRange_3d448975], a0.this$, a1, a2));
    }

    JArray< jint > Arrays::copyOfRange(const JArray< jint > & a0, jint a1, jint a2)
    {
      jclass cls = env->getClass(initializeClass);
      return JArray< jint >(env->callStaticObjectMethod(cls, mids$[mid_copyOfRange_a80c3bb3], a0.this$, a1, a2));
    }

    JArray< jlong > Arrays::copyOfRange(const JArray< jlong > & a0, jint a1, jint a2)
    {
      jclass cls = env->getClass(initializeClass);
      return JArray< jlong >(env->callStaticObjectMethod(cls, mids$[mid_copyOfRange_be4afb45], a0.this$, a1, a2));
    }

    JArray< jboolean > Arrays::copyOfRange(const JArray< jboolean > & a0, jint a1, jint a2)
    {
      jclass cls = env->getClass(initializeClass);
      return JArray< jboolean >(env->callStaticObjectMethod(cls, mids$[mid_copyOfRange_9766cdc5], a0.this$, a1, a2));
    }

    JArray< jshort > Arrays::copyOfRange(const JArray< jshort > & a0, jint a1, jint a2)
    {
      jclass cls = env->getClass(initializeClass);
      return JArray< jshort >(env->callStaticObjectMethod(cls, mids$[mid_copyOfRange_3a8237ff], a0.this$, a1, a2));
    }

    JArray< ::java::lang::Object > Arrays::copyOfRange(const JArray< ::java::lang::Object > & a0, jint a1, jint a2, const ::java::lang::Class & a3)
    {
      jclass cls = env->getClass(initializeClass);
      return JArray< ::java::lang::Object >(env->callStaticObjectMethod(cls, mids$[mid_copyOfRange_bca17599], a0.this$, a1, a2, a3.this$));
    }

    jboolean Arrays::deepEquals(const JArray< ::java::lang::Object > & a0, const JArray< ::java::lang::Object > & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_deepEquals_a9ca87d2], a0.this$, a1.this$);
    }

    jint Arrays::deepHashCode(const JArray< ::java::lang::Object > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_deepHashCode_c0f5dac5], a0.this$);
    }

    ::java::lang::String Arrays::deepToString(const JArray< ::java::lang::Object > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_deepToString_02ea1cdd], a0.this$));
    }

    jboolean Arrays::equals(const JArray< ::java::lang::Object > & a0, const JArray< ::java::lang::Object > & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_equals_a9ca87d2], a0.this$, a1.this$);
    }

    jboolean Arrays::equals(const JArray< jshort > & a0, const JArray< jshort > & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_equals_7868d93a], a0.this$, a1.this$);
    }

    jboolean Arrays::equals(const JArray< jboolean > & a0, const JArray< jboolean > & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_equals_6f6949ea], a0.this$, a1.this$);
    }

    jboolean Arrays::equals(const JArray< jlong > & a0, const JArray< jlong > & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_equals_e3842e2a], a0.this$, a1.this$);
    }

    jboolean Arrays::equals(const JArray< jchar > & a0, const JArray< jchar > & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_equals_2a42df9a], a0.this$, a1.this$);
    }

    jboolean Arrays::equals(const JArray< jint > & a0, const JArray< jint > & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_equals_7c26725e], a0.this$, a1.this$);
    }

    jboolean Arrays::equals(const JArray< jfloat > & a0, const JArray< jfloat > & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_equals_38a3e932], a0.this$, a1.this$);
    }

    jboolean Arrays::equals(const JArray< jbyte > & a0, const JArray< jbyte > & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_equals_a2d8877a], a0.this$, a1.this$);
    }

    jboolean Arrays::equals(const JArray< jdouble > & a0, const JArray< jdouble > & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_equals_2383bf16], a0.this$, a1.this$);
    }

    void Arrays::fill(const JArray< jbyte > & a0, jbyte a1)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_fill_8f13b3b0], a0.this$, a1);
    }

    void Arrays::fill(const JArray< jshort > & a0, jshort a1)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_fill_e6fbc3ca], a0.this$, a1);
    }

    void Arrays::fill(const JArray< jfloat > & a0, jfloat a1)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_fill_c36b04c8], a0.this$, a1);
    }

    void Arrays::fill(const JArray< ::java::lang::Object > & a0, const ::java::lang::Object & a1)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_fill_1da9211e], a0.this$, a1.this$);
    }

    void Arrays::fill(const JArray< jchar > & a0, jchar a1)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_fill_ea67e18a], a0.this$, a1);
    }

    void Arrays::fill(const JArray< jlong > & a0, jlong a1)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_fill_4c830bd0], a0.this$, a1);
    }

    void Arrays::fill(const JArray< jdouble > & a0, jdouble a1)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_fill_d6ab1c30], a0.this$, a1);
    }

    void Arrays::fill(const JArray< jint > & a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_fill_df726426], a0.this$, a1);
    }

    void Arrays::fill(const JArray< jboolean > & a0, jboolean a1)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_fill_ad7155b0], a0.this$, a1);
    }

    void Arrays::fill(const JArray< jchar > & a0, jint a1, jint a2, jchar a3)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_fill_b5b4fc2a], a0.this$, a1, a2, a3);
    }

    void Arrays::fill(const JArray< jfloat > & a0, jint a1, jint a2, jfloat a3)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_fill_b3c1f708], a0.this$, a1, a2, a3);
    }

    void Arrays::fill(const JArray< jlong > & a0, jint a1, jint a2, jlong a3)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_fill_c8914cf0], a0.this$, a1, a2, a3);
    }

    void Arrays::fill(const JArray< jboolean > & a0, jint a1, jint a2, jboolean a3)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_fill_77210c30], a0.this$, a1, a2, a3);
    }

    void Arrays::fill(const JArray< ::java::lang::Object > & a0, jint a1, jint a2, const ::java::lang::Object & a3)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_fill_dee75d36], a0.this$, a1, a2, a3.this$);
    }

    void Arrays::fill(const JArray< jshort > & a0, jint a1, jint a2, jshort a3)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_fill_4f5bed8a], a0.this$, a1, a2, a3);
    }

    void Arrays::fill(const JArray< jbyte > & a0, jint a1, jint a2, jbyte a3)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_fill_1e4305b0], a0.this$, a1, a2, a3);
    }

    void Arrays::fill(const JArray< jint > & a0, jint a1, jint a2, jint a3)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_fill_4eae6582], a0.this$, a1, a2, a3);
    }

    void Arrays::fill(const JArray< jdouble > & a0, jint a1, jint a2, jdouble a3)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_fill_695adc54], a0.this$, a1, a2, a3);
    }

    jint Arrays::hashCode(const JArray< jboolean > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_hashCode_f0c5b9dc], a0.this$);
    }

    jint Arrays::hashCode(const JArray< jlong > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_hashCode_9ceb500c], a0.this$);
    }

    jint Arrays::hashCode(const JArray< jbyte > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_hashCode_49b4f134], a0.this$);
    }

    jint Arrays::hashCode(const JArray< jchar > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_hashCode_700e23c9], a0.this$);
    }

    jint Arrays::hashCode(const JArray< jshort > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_hashCode_c017fc59], a0.this$);
    }

    jint Arrays::hashCode(const JArray< jdouble > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_hashCode_f3b62cc6], a0.this$);
    }

    jint Arrays::hashCode(const JArray< jfloat > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_hashCode_9cc34320], a0.this$);
    }

    jint Arrays::hashCode(const JArray< jint > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_hashCode_1efc2017], a0.this$);
    }

    jint Arrays::hashCode(const JArray< ::java::lang::Object > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_hashCode_c0f5dac5], a0.this$);
    }

    void Arrays::parallelSort(const JArray< ::java::lang::Comparable > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_parallelSort_01dac18d], a0.this$);
    }

    void Arrays::parallelSort(const JArray< jfloat > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_parallelSort_9cc3433f], a0.this$);
    }

    void Arrays::parallelSort(const JArray< jdouble > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_parallelSort_f3b62cd9], a0.this$);
    }

    void Arrays::parallelSort(const JArray< jbyte > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_parallelSort_49b4f12b], a0.this$);
    }

    void Arrays::parallelSort(const JArray< jchar > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_parallelSort_700e23d6], a0.this$);
    }

    void Arrays::parallelSort(const JArray< jlong > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_parallelSort_9ceb5013], a0.this$);
    }

    void Arrays::parallelSort(const JArray< jint > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_parallelSort_1efc2008], a0.this$);
    }

    void Arrays::parallelSort(const JArray< jshort > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_parallelSort_c017fc46], a0.this$);
    }

    void Arrays::parallelSort(const JArray< ::java::lang::Object > & a0, const ::java::util::Comparator & a1)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_parallelSort_8c46d789], a0.this$, a1.this$);
    }

    void Arrays::parallelSort(const JArray< jlong > & a0, jint a1, jint a2)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_parallelSort_6ae021e7], a0.this$, a1, a2);
    }

    void Arrays::parallelSort(const JArray< ::java::lang::Comparable > & a0, jint a1, jint a2)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_parallelSort_266f4139], a0.this$, a1, a2);
    }

    void Arrays::parallelSort(const JArray< jdouble > & a0, jint a1, jint a2)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_parallelSort_3be2c5d1], a0.this$, a1, a2);
    }

    void Arrays::parallelSort(const JArray< jfloat > & a0, jint a1, jint a2)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_parallelSort_c8bd2f63], a0.this$, a1, a2);
    }

    void Arrays::parallelSort(const JArray< jint > & a0, jint a1, jint a2)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_parallelSort_3e1ea22c], a0.this$, a1, a2);
    }

    void Arrays::parallelSort(const JArray< jchar > & a0, jint a1, jint a2)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_parallelSort_6f0bb356], a0.this$, a1, a2);
    }

    void Arrays::parallelSort(const JArray< jshort > & a0, jint a1, jint a2)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_parallelSort_b389e986], a0.this$, a1, a2);
    }

    void Arrays::parallelSort(const JArray< jbyte > & a0, jint a1, jint a2)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_parallelSort_86f4435f], a0.this$, a1, a2);
    }

    void Arrays::parallelSort(const JArray< ::java::lang::Object > & a0, jint a1, jint a2, const ::java::util::Comparator & a3)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_parallelSort_7c263389], a0.this$, a1, a2, a3.this$);
    }

    void Arrays::sort(const JArray< jfloat > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_sort_9cc3433f], a0.this$);
    }

    void Arrays::sort(const JArray< jdouble > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_sort_f3b62cd9], a0.this$);
    }

    void Arrays::sort(const JArray< jchar > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_sort_700e23d6], a0.this$);
    }

    void Arrays::sort(const JArray< ::java::lang::Object > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_sort_c0f5dada], a0.this$);
    }

    void Arrays::sort(const JArray< jbyte > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_sort_49b4f12b], a0.this$);
    }

    void Arrays::sort(const JArray< jlong > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_sort_9ceb5013], a0.this$);
    }

    void Arrays::sort(const JArray< jshort > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_sort_c017fc46], a0.this$);
    }

    void Arrays::sort(const JArray< jint > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_sort_1efc2008], a0.this$);
    }

    void Arrays::sort(const JArray< ::java::lang::Object > & a0, const ::java::util::Comparator & a1)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_sort_8c46d789], a0.this$, a1.this$);
    }

    void Arrays::sort(const JArray< jshort > & a0, jint a1, jint a2)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_sort_b389e986], a0.this$, a1, a2);
    }

    void Arrays::sort(const JArray< jint > & a0, jint a1, jint a2)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_sort_3e1ea22c], a0.this$, a1, a2);
    }

    void Arrays::sort(const JArray< jfloat > & a0, jint a1, jint a2)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_sort_c8bd2f63], a0.this$, a1, a2);
    }

    void Arrays::sort(const JArray< jbyte > & a0, jint a1, jint a2)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_sort_86f4435f], a0.this$, a1, a2);
    }

    void Arrays::sort(const JArray< jchar > & a0, jint a1, jint a2)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_sort_6f0bb356], a0.this$, a1, a2);
    }

    void Arrays::sort(const JArray< jdouble > & a0, jint a1, jint a2)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_sort_3be2c5d1], a0.this$, a1, a2);
    }

    void Arrays::sort(const JArray< jlong > & a0, jint a1, jint a2)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_sort_6ae021e7], a0.this$, a1, a2);
    }

    void Arrays::sort(const JArray< ::java::lang::Object > & a0, jint a1, jint a2)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_sort_4172dade], a0.this$, a1, a2);
    }

    void Arrays::sort(const JArray< ::java::lang::Object > & a0, jint a1, jint a2, const ::java::util::Comparator & a3)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_sort_7c263389], a0.this$, a1, a2, a3.this$);
    }

    ::java::util::Spliterator$OfDouble Arrays::spliterator(const JArray< jdouble > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::Spliterator$OfDouble(env->callStaticObjectMethod(cls, mids$[mid_spliterator_eb34d33a], a0.this$));
    }

    ::java::util::Spliterator Arrays::spliterator(const JArray< ::java::lang::Object > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::Spliterator(env->callStaticObjectMethod(cls, mids$[mid_spliterator_24b4ecc4], a0.this$));
    }

    ::java::util::Spliterator$OfLong Arrays::spliterator(const JArray< jlong > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::Spliterator$OfLong(env->callStaticObjectMethod(cls, mids$[mid_spliterator_a4f55b95], a0.this$));
    }

    ::java::util::Spliterator$OfInt Arrays::spliterator(const JArray< jint > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::Spliterator$OfInt(env->callStaticObjectMethod(cls, mids$[mid_spliterator_8c25906e], a0.this$));
    }

    ::java::util::Spliterator$OfDouble Arrays::spliterator(const JArray< jdouble > & a0, jint a1, jint a2)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::Spliterator$OfDouble(env->callStaticObjectMethod(cls, mids$[mid_spliterator_218f8c32], a0.this$, a1, a2));
    }

    ::java::util::Spliterator Arrays::spliterator(const JArray< ::java::lang::Object > & a0, jint a1, jint a2)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::Spliterator(env->callStaticObjectMethod(cls, mids$[mid_spliterator_90ced414], a0.this$, a1, a2));
    }

    ::java::util::Spliterator$OfLong Arrays::spliterator(const JArray< jlong > & a0, jint a1, jint a2)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::Spliterator$OfLong(env->callStaticObjectMethod(cls, mids$[mid_spliterator_fb0d86ad], a0.this$, a1, a2));
    }

    ::java::util::Spliterator$OfInt Arrays::spliterator(const JArray< jint > & a0, jint a1, jint a2)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::Spliterator$OfInt(env->callStaticObjectMethod(cls, mids$[mid_spliterator_552485d2], a0.this$, a1, a2));
    }

    ::java::lang::String Arrays::toString(const JArray< jfloat > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toString_08b6580a], a0.this$));
    }

    ::java::lang::String Arrays::toString(const JArray< jchar > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toString_c783d655], a0.this$));
    }

    ::java::lang::String Arrays::toString(const JArray< jdouble > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toString_9352a4bc], a0.this$));
    }

    ::java::lang::String Arrays::toString(const JArray< jshort > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toString_aeceff45], a0.this$));
    }

    ::java::lang::String Arrays::toString(const JArray< jboolean > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toString_14e8bbde], a0.this$));
    }

    ::java::lang::String Arrays::toString(const JArray< jbyte > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toString_0f6e0f86], a0.this$));
    }

    ::java::lang::String Arrays::toString(const JArray< ::java::lang::Object > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toString_02ea1cdd], a0.this$));
    }

    ::java::lang::String Arrays::toString(const JArray< jlong > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toString_053bf1ae], a0.this$));
    }

    ::java::lang::String Arrays::toString(const JArray< jint > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toString_9570afaf], a0.this$));
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace util {
    static PyObject *t_Arrays_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Arrays_instance_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Arrays_asList(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Arrays_binarySearch(PyTypeObject *type, PyObject *args);
    static PyObject *t_Arrays_copyOf(PyTypeObject *type, PyObject *args);
    static PyObject *t_Arrays_copyOfRange(PyTypeObject *type, PyObject *args);
    static PyObject *t_Arrays_deepEquals(PyTypeObject *type, PyObject *args);
    static PyObject *t_Arrays_deepHashCode(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Arrays_deepToString(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Arrays_equals(PyTypeObject *type, PyObject *args);
    static PyObject *t_Arrays_fill(PyTypeObject *type, PyObject *args);
    static PyObject *t_Arrays_hashCode(PyTypeObject *type, PyObject *args);
    static PyObject *t_Arrays_parallelSort(PyTypeObject *type, PyObject *args);
    static PyObject *t_Arrays_sort(PyTypeObject *type, PyObject *args);
    static PyObject *t_Arrays_spliterator(PyTypeObject *type, PyObject *args);
    static PyObject *t_Arrays_toString(PyTypeObject *type, PyObject *args);

    static PyMethodDef t_Arrays__methods_[] = {
      DECLARE_METHOD(t_Arrays, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Arrays, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Arrays, asList, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Arrays, binarySearch, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Arrays, copyOf, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Arrays, copyOfRange, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Arrays, deepEquals, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Arrays, deepHashCode, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Arrays, deepToString, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Arrays, equals, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Arrays, fill, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Arrays, hashCode, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Arrays, parallelSort, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Arrays, sort, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Arrays, spliterator, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Arrays, toString, METH_VARARGS | METH_CLASS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(Arrays, t_Arrays, ::java::lang::Object, Arrays, abstract_init, 0, 0, 0, 0, 0);

    void t_Arrays::install(PyObject *module)
    {
      installType(&PY_TYPE(Arrays), module, "Arrays", 0);
    }

    void t_Arrays::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(Arrays).tp_dict, "class_", make_descriptor(Arrays::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(Arrays).tp_dict, "wrapfn_", make_descriptor(t_Arrays::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(Arrays).tp_dict, "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_Arrays_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, Arrays::initializeClass, 1)))
        return NULL;
      return t_Arrays::wrap_Object(Arrays(((t_Arrays *) arg)->object.this$));
    }
    static PyObject *t_Arrays_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, Arrays::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static PyObject *t_Arrays_asList(PyTypeObject *type, PyObject *arg)
    {
      JArray< ::java::lang::Object > a0((jobject) NULL);
      ::java::util::List result((jobject) NULL);

      if (!parseArg(arg, "[o", &a0))
      {
        OBJ_CALL(result = ::java::util::Arrays::asList(a0));
        return ::java::util::t_List::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "asList", arg);
      return NULL;
    }

    static PyObject *t_Arrays_binarySearch(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 2:
        {
          JArray< jfloat > a0((jobject) NULL);
          jfloat a1;
          jint result;

          if (!parseArgs(args, "[FF", &a0, &a1))
          {
            OBJ_CALL(result = ::java::util::Arrays::binarySearch(a0, a1));
            return PyInt_FromLong((long) result);
          }
        }
        {
          JArray< ::java::lang::Object > a0((jobject) NULL);
          ::java::lang::Object a1((jobject) NULL);
          jint result;

          if (!parseArgs(args, "[oo", &a0, &a1))
          {
            OBJ_CALL(result = ::java::util::Arrays::binarySearch(a0, a1));
            return PyInt_FromLong((long) result);
          }
        }
        {
          JArray< jbyte > a0((jobject) NULL);
          jbyte a1;
          jint result;

          if (!parseArgs(args, "[BB", &a0, &a1))
          {
            OBJ_CALL(result = ::java::util::Arrays::binarySearch(a0, a1));
            return PyInt_FromLong((long) result);
          }
        }
        {
          JArray< jshort > a0((jobject) NULL);
          jshort a1;
          jint result;

          if (!parseArgs(args, "[SS", &a0, &a1))
          {
            OBJ_CALL(result = ::java::util::Arrays::binarySearch(a0, a1));
            return PyInt_FromLong((long) result);
          }
        }
        {
          JArray< jlong > a0((jobject) NULL);
          jlong a1;
          jint result;

          if (!parseArgs(args, "[JJ", &a0, &a1))
          {
            OBJ_CALL(result = ::java::util::Arrays::binarySearch(a0, a1));
            return PyInt_FromLong((long) result);
          }
        }
        {
          JArray< jdouble > a0((jobject) NULL);
          jdouble a1;
          jint result;

          if (!parseArgs(args, "[DD", &a0, &a1))
          {
            OBJ_CALL(result = ::java::util::Arrays::binarySearch(a0, a1));
            return PyInt_FromLong((long) result);
          }
        }
        {
          JArray< jint > a0((jobject) NULL);
          jint a1;
          jint result;

          if (!parseArgs(args, "[II", &a0, &a1))
          {
            OBJ_CALL(result = ::java::util::Arrays::binarySearch(a0, a1));
            return PyInt_FromLong((long) result);
          }
        }
        {
          JArray< jchar > a0((jobject) NULL);
          jchar a1;
          jint result;

          if (!parseArgs(args, "[CC", &a0, &a1))
          {
            OBJ_CALL(result = ::java::util::Arrays::binarySearch(a0, a1));
            return PyInt_FromLong((long) result);
          }
        }
        break;
       case 3:
        {
          JArray< ::java::lang::Object > a0((jobject) NULL);
          ::java::lang::Object a1((jobject) NULL);
          ::java::util::Comparator a2((jobject) NULL);
          PyTypeObject **p2;
          jint result;

          if (!parseArgs(args, "[ooK", ::java::util::Comparator::initializeClass, &a0, &a1, &a2, &p2, ::java::util::t_Comparator::parameters_))
          {
            OBJ_CALL(result = ::java::util::Arrays::binarySearch(a0, a1, a2));
            return PyInt_FromLong((long) result);
          }
        }
        break;
       case 4:
        {
          JArray< jlong > a0((jobject) NULL);
          jint a1;
          jint a2;
          jlong a3;
          jint result;

          if (!parseArgs(args, "[JIIJ", &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(result = ::java::util::Arrays::binarySearch(a0, a1, a2, a3));
            return PyInt_FromLong((long) result);
          }
        }
        {
          JArray< jbyte > a0((jobject) NULL);
          jint a1;
          jint a2;
          jbyte a3;
          jint result;

          if (!parseArgs(args, "[BIIB", &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(result = ::java::util::Arrays::binarySearch(a0, a1, a2, a3));
            return PyInt_FromLong((long) result);
          }
        }
        {
          JArray< jfloat > a0((jobject) NULL);
          jint a1;
          jint a2;
          jfloat a3;
          jint result;

          if (!parseArgs(args, "[FIIF", &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(result = ::java::util::Arrays::binarySearch(a0, a1, a2, a3));
            return PyInt_FromLong((long) result);
          }
        }
        {
          JArray< ::java::lang::Object > a0((jobject) NULL);
          jint a1;
          jint a2;
          ::java::lang::Object a3((jobject) NULL);
          jint result;

          if (!parseArgs(args, "[oIIo", &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(result = ::java::util::Arrays::binarySearch(a0, a1, a2, a3));
            return PyInt_FromLong((long) result);
          }
        }
        {
          JArray< jdouble > a0((jobject) NULL);
          jint a1;
          jint a2;
          jdouble a3;
          jint result;

          if (!parseArgs(args, "[DIID", &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(result = ::java::util::Arrays::binarySearch(a0, a1, a2, a3));
            return PyInt_FromLong((long) result);
          }
        }
        {
          JArray< jshort > a0((jobject) NULL);
          jint a1;
          jint a2;
          jshort a3;
          jint result;

          if (!parseArgs(args, "[SIIS", &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(result = ::java::util::Arrays::binarySearch(a0, a1, a2, a3));
            return PyInt_FromLong((long) result);
          }
        }
        {
          JArray< jchar > a0((jobject) NULL);
          jint a1;
          jint a2;
          jchar a3;
          jint result;

          if (!parseArgs(args, "[CIIC", &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(result = ::java::util::Arrays::binarySearch(a0, a1, a2, a3));
            return PyInt_FromLong((long) result);
          }
        }
        {
          JArray< jint > a0((jobject) NULL);
          jint a1;
          jint a2;
          jint a3;
          jint result;

          if (!parseArgs(args, "[IIII", &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(result = ::java::util::Arrays::binarySearch(a0, a1, a2, a3));
            return PyInt_FromLong((long) result);
          }
        }
        break;
       case 5:
        {
          JArray< ::java::lang::Object > a0((jobject) NULL);
          jint a1;
          jint a2;
          ::java::lang::Object a3((jobject) NULL);
          ::java::util::Comparator a4((jobject) NULL);
          PyTypeObject **p4;
          jint result;

          if (!parseArgs(args, "[oIIoK", ::java::util::Comparator::initializeClass, &a0, &a1, &a2, &a3, &a4, &p4, ::java::util::t_Comparator::parameters_))
          {
            OBJ_CALL(result = ::java::util::Arrays::binarySearch(a0, a1, a2, a3, a4));
            return PyInt_FromLong((long) result);
          }
        }
      }

      PyErr_SetArgsError(type, "binarySearch", args);
      return NULL;
    }

    static PyObject *t_Arrays_copyOf(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 2:
        {
          JArray< jshort > a0((jobject) NULL);
          jint a1;
          JArray< jshort > result((jobject) NULL);

          if (!parseArgs(args, "[SI", &a0, &a1))
          {
            OBJ_CALL(result = ::java::util::Arrays::copyOf(a0, a1));
            return result.wrap();
          }
        }
        {
          JArray< jchar > a0((jobject) NULL);
          jint a1;
          JArray< jchar > result((jobject) NULL);

          if (!parseArgs(args, "[CI", &a0, &a1))
          {
            OBJ_CALL(result = ::java::util::Arrays::copyOf(a0, a1));
            return result.wrap();
          }
        }
        {
          JArray< jlong > a0((jobject) NULL);
          jint a1;
          JArray< jlong > result((jobject) NULL);

          if (!parseArgs(args, "[JI", &a0, &a1))
          {
            OBJ_CALL(result = ::java::util::Arrays::copyOf(a0, a1));
            return result.wrap();
          }
        }
        {
          JArray< jdouble > a0((jobject) NULL);
          jint a1;
          JArray< jdouble > result((jobject) NULL);

          if (!parseArgs(args, "[DI", &a0, &a1))
          {
            OBJ_CALL(result = ::java::util::Arrays::copyOf(a0, a1));
            return result.wrap();
          }
        }
        {
          JArray< jbyte > a0((jobject) NULL);
          jint a1;
          JArray< jbyte > result((jobject) NULL);

          if (!parseArgs(args, "[BI", &a0, &a1))
          {
            OBJ_CALL(result = ::java::util::Arrays::copyOf(a0, a1));
            return result.wrap();
          }
        }
        {
          JArray< ::java::lang::Object > a0((jobject) NULL);
          jint a1;
          JArray< ::java::lang::Object > result((jobject) NULL);

          if (!parseArgs(args, "[oI", &a0, &a1))
          {
            OBJ_CALL(result = ::java::util::Arrays::copyOf(a0, a1));
            return JArray<jobject>(result.this$).wrap(::java::lang::t_Object::wrap_jobject);
          }
        }
        {
          JArray< jint > a0((jobject) NULL);
          jint a1;
          JArray< jint > result((jobject) NULL);

          if (!parseArgs(args, "[II", &a0, &a1))
          {
            OBJ_CALL(result = ::java::util::Arrays::copyOf(a0, a1));
            return result.wrap();
          }
        }
        {
          JArray< jfloat > a0((jobject) NULL);
          jint a1;
          JArray< jfloat > result((jobject) NULL);

          if (!parseArgs(args, "[FI", &a0, &a1))
          {
            OBJ_CALL(result = ::java::util::Arrays::copyOf(a0, a1));
            return result.wrap();
          }
        }
        {
          JArray< jboolean > a0((jobject) NULL);
          jint a1;
          JArray< jboolean > result((jobject) NULL);

          if (!parseArgs(args, "[ZI", &a0, &a1))
          {
            OBJ_CALL(result = ::java::util::Arrays::copyOf(a0, a1));
            return result.wrap();
          }
        }
        break;
       case 3:
        {
          JArray< ::java::lang::Object > a0((jobject) NULL);
          jint a1;
          ::java::lang::Class a2((jobject) NULL);
          PyTypeObject **p2;
          JArray< ::java::lang::Object > result((jobject) NULL);

          if (!parseArgs(args, "[oIK", ::java::lang::Class::initializeClass, &a0, &a1, &a2, &p2, ::java::lang::t_Class::parameters_))
          {
            OBJ_CALL(result = ::java::util::Arrays::copyOf(a0, a1, a2));
            return JArray<jobject>(result.this$).wrap(::java::lang::t_Object::wrap_jobject);
          }
        }
      }

      PyErr_SetArgsError(type, "copyOf", args);
      return NULL;
    }

    static PyObject *t_Arrays_copyOfRange(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 3:
        {
          JArray< jfloat > a0((jobject) NULL);
          jint a1;
          jint a2;
          JArray< jfloat > result((jobject) NULL);

          if (!parseArgs(args, "[FII", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::java::util::Arrays::copyOfRange(a0, a1, a2));
            return result.wrap();
          }
        }
        {
          JArray< ::java::lang::Object > a0((jobject) NULL);
          jint a1;
          jint a2;
          JArray< ::java::lang::Object > result((jobject) NULL);

          if (!parseArgs(args, "[oII", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::java::util::Arrays::copyOfRange(a0, a1, a2));
            return JArray<jobject>(result.this$).wrap(::java::lang::t_Object::wrap_jobject);
          }
        }
        {
          JArray< jdouble > a0((jobject) NULL);
          jint a1;
          jint a2;
          JArray< jdouble > result((jobject) NULL);

          if (!parseArgs(args, "[DII", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::java::util::Arrays::copyOfRange(a0, a1, a2));
            return result.wrap();
          }
        }
        {
          JArray< jchar > a0((jobject) NULL);
          jint a1;
          jint a2;
          JArray< jchar > result((jobject) NULL);

          if (!parseArgs(args, "[CII", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::java::util::Arrays::copyOfRange(a0, a1, a2));
            return result.wrap();
          }
        }
        {
          JArray< jbyte > a0((jobject) NULL);
          jint a1;
          jint a2;
          JArray< jbyte > result((jobject) NULL);

          if (!parseArgs(args, "[BII", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::java::util::Arrays::copyOfRange(a0, a1, a2));
            return result.wrap();
          }
        }
        {
          JArray< jint > a0((jobject) NULL);
          jint a1;
          jint a2;
          JArray< jint > result((jobject) NULL);

          if (!parseArgs(args, "[III", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::java::util::Arrays::copyOfRange(a0, a1, a2));
            return result.wrap();
          }
        }
        {
          JArray< jlong > a0((jobject) NULL);
          jint a1;
          jint a2;
          JArray< jlong > result((jobject) NULL);

          if (!parseArgs(args, "[JII", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::java::util::Arrays::copyOfRange(a0, a1, a2));
            return result.wrap();
          }
        }
        {
          JArray< jboolean > a0((jobject) NULL);
          jint a1;
          jint a2;
          JArray< jboolean > result((jobject) NULL);

          if (!parseArgs(args, "[ZII", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::java::util::Arrays::copyOfRange(a0, a1, a2));
            return result.wrap();
          }
        }
        {
          JArray< jshort > a0((jobject) NULL);
          jint a1;
          jint a2;
          JArray< jshort > result((jobject) NULL);

          if (!parseArgs(args, "[SII", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::java::util::Arrays::copyOfRange(a0, a1, a2));
            return result.wrap();
          }
        }
        break;
       case 4:
        {
          JArray< ::java::lang::Object > a0((jobject) NULL);
          jint a1;
          jint a2;
          ::java::lang::Class a3((jobject) NULL);
          PyTypeObject **p3;
          JArray< ::java::lang::Object > result((jobject) NULL);

          if (!parseArgs(args, "[oIIK", ::java::lang::Class::initializeClass, &a0, &a1, &a2, &a3, &p3, ::java::lang::t_Class::parameters_))
          {
            OBJ_CALL(result = ::java::util::Arrays::copyOfRange(a0, a1, a2, a3));
            return JArray<jobject>(result.this$).wrap(::java::lang::t_Object::wrap_jobject);
          }
        }
      }

      PyErr_SetArgsError(type, "copyOfRange", args);
      return NULL;
    }

    static PyObject *t_Arrays_deepEquals(PyTypeObject *type, PyObject *args)
    {
      JArray< ::java::lang::Object > a0((jobject) NULL);
      JArray< ::java::lang::Object > a1((jobject) NULL);
      jboolean result;

      if (!parseArgs(args, "[o[o", &a0, &a1))
      {
        OBJ_CALL(result = ::java::util::Arrays::deepEquals(a0, a1));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError(type, "deepEquals", args);
      return NULL;
    }

    static PyObject *t_Arrays_deepHashCode(PyTypeObject *type, PyObject *arg)
    {
      JArray< ::java::lang::Object > a0((jobject) NULL);
      jint result;

      if (!parseArg(arg, "[o", &a0))
      {
        OBJ_CALL(result = ::java::util::Arrays::deepHashCode(a0));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "deepHashCode", arg);
      return NULL;
    }

    static PyObject *t_Arrays_deepToString(PyTypeObject *type, PyObject *arg)
    {
      JArray< ::java::lang::Object > a0((jobject) NULL);
      ::java::lang::String result((jobject) NULL);

      if (!parseArg(arg, "[o", &a0))
      {
        OBJ_CALL(result = ::java::util::Arrays::deepToString(a0));
        return j2p(result);
      }

      PyErr_SetArgsError(type, "deepToString", arg);
      return NULL;
    }

    static PyObject *t_Arrays_equals(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 2:
        {
          JArray< ::java::lang::Object > a0((jobject) NULL);
          JArray< ::java::lang::Object > a1((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "[o[o", &a0, &a1))
          {
            OBJ_CALL(result = ::java::util::Arrays::equals(a0, a1));
            Py_RETURN_BOOL(result);
          }
        }
        {
          JArray< jshort > a0((jobject) NULL);
          JArray< jshort > a1((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "[S[S", &a0, &a1))
          {
            OBJ_CALL(result = ::java::util::Arrays::equals(a0, a1));
            Py_RETURN_BOOL(result);
          }
        }
        {
          JArray< jboolean > a0((jobject) NULL);
          JArray< jboolean > a1((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "[Z[Z", &a0, &a1))
          {
            OBJ_CALL(result = ::java::util::Arrays::equals(a0, a1));
            Py_RETURN_BOOL(result);
          }
        }
        {
          JArray< jlong > a0((jobject) NULL);
          JArray< jlong > a1((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "[J[J", &a0, &a1))
          {
            OBJ_CALL(result = ::java::util::Arrays::equals(a0, a1));
            Py_RETURN_BOOL(result);
          }
        }
        {
          JArray< jchar > a0((jobject) NULL);
          JArray< jchar > a1((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "[C[C", &a0, &a1))
          {
            OBJ_CALL(result = ::java::util::Arrays::equals(a0, a1));
            Py_RETURN_BOOL(result);
          }
        }
        {
          JArray< jint > a0((jobject) NULL);
          JArray< jint > a1((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "[I[I", &a0, &a1))
          {
            OBJ_CALL(result = ::java::util::Arrays::equals(a0, a1));
            Py_RETURN_BOOL(result);
          }
        }
        {
          JArray< jfloat > a0((jobject) NULL);
          JArray< jfloat > a1((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "[F[F", &a0, &a1))
          {
            OBJ_CALL(result = ::java::util::Arrays::equals(a0, a1));
            Py_RETURN_BOOL(result);
          }
        }
        {
          JArray< jbyte > a0((jobject) NULL);
          JArray< jbyte > a1((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "[B[B", &a0, &a1))
          {
            OBJ_CALL(result = ::java::util::Arrays::equals(a0, a1));
            Py_RETURN_BOOL(result);
          }
        }
        {
          JArray< jdouble > a0((jobject) NULL);
          JArray< jdouble > a1((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "[D[D", &a0, &a1))
          {
            OBJ_CALL(result = ::java::util::Arrays::equals(a0, a1));
            Py_RETURN_BOOL(result);
          }
        }
      }

      return callSuper(type, "equals", args, 2);
    }

    static PyObject *t_Arrays_fill(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 2:
        {
          JArray< jbyte > a0((jobject) NULL);
          jbyte a1;

          if (!parseArgs(args, "[BB", &a0, &a1))
          {
            OBJ_CALL(::java::util::Arrays::fill(a0, a1));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jshort > a0((jobject) NULL);
          jshort a1;

          if (!parseArgs(args, "[SS", &a0, &a1))
          {
            OBJ_CALL(::java::util::Arrays::fill(a0, a1));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jfloat > a0((jobject) NULL);
          jfloat a1;

          if (!parseArgs(args, "[FF", &a0, &a1))
          {
            OBJ_CALL(::java::util::Arrays::fill(a0, a1));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< ::java::lang::Object > a0((jobject) NULL);
          ::java::lang::Object a1((jobject) NULL);

          if (!parseArgs(args, "[oo", &a0, &a1))
          {
            OBJ_CALL(::java::util::Arrays::fill(a0, a1));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jchar > a0((jobject) NULL);
          jchar a1;

          if (!parseArgs(args, "[CC", &a0, &a1))
          {
            OBJ_CALL(::java::util::Arrays::fill(a0, a1));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jlong > a0((jobject) NULL);
          jlong a1;

          if (!parseArgs(args, "[JJ", &a0, &a1))
          {
            OBJ_CALL(::java::util::Arrays::fill(a0, a1));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jdouble > a0((jobject) NULL);
          jdouble a1;

          if (!parseArgs(args, "[DD", &a0, &a1))
          {
            OBJ_CALL(::java::util::Arrays::fill(a0, a1));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jint > a0((jobject) NULL);
          jint a1;

          if (!parseArgs(args, "[II", &a0, &a1))
          {
            OBJ_CALL(::java::util::Arrays::fill(a0, a1));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jboolean > a0((jobject) NULL);
          jboolean a1;

          if (!parseArgs(args, "[ZZ", &a0, &a1))
          {
            OBJ_CALL(::java::util::Arrays::fill(a0, a1));
            Py_RETURN_NONE;
          }
        }
        break;
       case 4:
        {
          JArray< jchar > a0((jobject) NULL);
          jint a1;
          jint a2;
          jchar a3;

          if (!parseArgs(args, "[CIIC", &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(::java::util::Arrays::fill(a0, a1, a2, a3));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jfloat > a0((jobject) NULL);
          jint a1;
          jint a2;
          jfloat a3;

          if (!parseArgs(args, "[FIIF", &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(::java::util::Arrays::fill(a0, a1, a2, a3));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jlong > a0((jobject) NULL);
          jint a1;
          jint a2;
          jlong a3;

          if (!parseArgs(args, "[JIIJ", &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(::java::util::Arrays::fill(a0, a1, a2, a3));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jboolean > a0((jobject) NULL);
          jint a1;
          jint a2;
          jboolean a3;

          if (!parseArgs(args, "[ZIIZ", &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(::java::util::Arrays::fill(a0, a1, a2, a3));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< ::java::lang::Object > a0((jobject) NULL);
          jint a1;
          jint a2;
          ::java::lang::Object a3((jobject) NULL);

          if (!parseArgs(args, "[oIIo", &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(::java::util::Arrays::fill(a0, a1, a2, a3));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jshort > a0((jobject) NULL);
          jint a1;
          jint a2;
          jshort a3;

          if (!parseArgs(args, "[SIIS", &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(::java::util::Arrays::fill(a0, a1, a2, a3));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jbyte > a0((jobject) NULL);
          jint a1;
          jint a2;
          jbyte a3;

          if (!parseArgs(args, "[BIIB", &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(::java::util::Arrays::fill(a0, a1, a2, a3));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jint > a0((jobject) NULL);
          jint a1;
          jint a2;
          jint a3;

          if (!parseArgs(args, "[IIII", &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(::java::util::Arrays::fill(a0, a1, a2, a3));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jdouble > a0((jobject) NULL);
          jint a1;
          jint a2;
          jdouble a3;

          if (!parseArgs(args, "[DIID", &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(::java::util::Arrays::fill(a0, a1, a2, a3));
            Py_RETURN_NONE;
          }
        }
      }

      PyErr_SetArgsError(type, "fill", args);
      return NULL;
    }

    static PyObject *t_Arrays_hashCode(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          JArray< jboolean > a0((jobject) NULL);
          jint result;

          if (!parseArgs(args, "[Z", &a0))
          {
            OBJ_CALL(result = ::java::util::Arrays::hashCode(a0));
            return PyInt_FromLong((long) result);
          }
        }
        {
          JArray< jlong > a0((jobject) NULL);
          jint result;

          if (!parseArgs(args, "[J", &a0))
          {
            OBJ_CALL(result = ::java::util::Arrays::hashCode(a0));
            return PyInt_FromLong((long) result);
          }
        }
        {
          JArray< jbyte > a0((jobject) NULL);
          jint result;

          if (!parseArgs(args, "[B", &a0))
          {
            OBJ_CALL(result = ::java::util::Arrays::hashCode(a0));
            return PyInt_FromLong((long) result);
          }
        }
        {
          JArray< jchar > a0((jobject) NULL);
          jint result;

          if (!parseArgs(args, "[C", &a0))
          {
            OBJ_CALL(result = ::java::util::Arrays::hashCode(a0));
            return PyInt_FromLong((long) result);
          }
        }
        {
          JArray< jshort > a0((jobject) NULL);
          jint result;

          if (!parseArgs(args, "[S", &a0))
          {
            OBJ_CALL(result = ::java::util::Arrays::hashCode(a0));
            return PyInt_FromLong((long) result);
          }
        }
        {
          JArray< jdouble > a0((jobject) NULL);
          jint result;

          if (!parseArgs(args, "[D", &a0))
          {
            OBJ_CALL(result = ::java::util::Arrays::hashCode(a0));
            return PyInt_FromLong((long) result);
          }
        }
        {
          JArray< jfloat > a0((jobject) NULL);
          jint result;

          if (!parseArgs(args, "[F", &a0))
          {
            OBJ_CALL(result = ::java::util::Arrays::hashCode(a0));
            return PyInt_FromLong((long) result);
          }
        }
        {
          JArray< jint > a0((jobject) NULL);
          jint result;

          if (!parseArgs(args, "[I", &a0))
          {
            OBJ_CALL(result = ::java::util::Arrays::hashCode(a0));
            return PyInt_FromLong((long) result);
          }
        }
        {
          JArray< ::java::lang::Object > a0((jobject) NULL);
          jint result;

          if (!parseArgs(args, "[o", &a0))
          {
            OBJ_CALL(result = ::java::util::Arrays::hashCode(a0));
            return PyInt_FromLong((long) result);
          }
        }
      }

      return callSuper(type, "hashCode", args, 2);
    }

    static PyObject *t_Arrays_parallelSort(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          JArray< ::java::lang::Comparable > a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArgs(args, "[K", ::java::lang::Comparable::initializeClass, &a0, &p0, ::java::lang::t_Comparable::parameters_))
          {
            OBJ_CALL(::java::util::Arrays::parallelSort(a0));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jfloat > a0((jobject) NULL);

          if (!parseArgs(args, "[F", &a0))
          {
            OBJ_CALL(::java::util::Arrays::parallelSort(a0));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jdouble > a0((jobject) NULL);

          if (!parseArgs(args, "[D", &a0))
          {
            OBJ_CALL(::java::util::Arrays::parallelSort(a0));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jbyte > a0((jobject) NULL);

          if (!parseArgs(args, "[B", &a0))
          {
            OBJ_CALL(::java::util::Arrays::parallelSort(a0));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jchar > a0((jobject) NULL);

          if (!parseArgs(args, "[C", &a0))
          {
            OBJ_CALL(::java::util::Arrays::parallelSort(a0));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jlong > a0((jobject) NULL);

          if (!parseArgs(args, "[J", &a0))
          {
            OBJ_CALL(::java::util::Arrays::parallelSort(a0));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jint > a0((jobject) NULL);

          if (!parseArgs(args, "[I", &a0))
          {
            OBJ_CALL(::java::util::Arrays::parallelSort(a0));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jshort > a0((jobject) NULL);

          if (!parseArgs(args, "[S", &a0))
          {
            OBJ_CALL(::java::util::Arrays::parallelSort(a0));
            Py_RETURN_NONE;
          }
        }
        break;
       case 2:
        {
          JArray< ::java::lang::Object > a0((jobject) NULL);
          ::java::util::Comparator a1((jobject) NULL);
          PyTypeObject **p1;

          if (!parseArgs(args, "[oK", ::java::util::Comparator::initializeClass, &a0, &a1, &p1, ::java::util::t_Comparator::parameters_))
          {
            OBJ_CALL(::java::util::Arrays::parallelSort(a0, a1));
            Py_RETURN_NONE;
          }
        }
        break;
       case 3:
        {
          JArray< jlong > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[JII", &a0, &a1, &a2))
          {
            OBJ_CALL(::java::util::Arrays::parallelSort(a0, a1, a2));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< ::java::lang::Comparable > a0((jobject) NULL);
          PyTypeObject **p0;
          jint a1;
          jint a2;

          if (!parseArgs(args, "[KII", ::java::lang::Comparable::initializeClass, &a0, &p0, ::java::lang::t_Comparable::parameters_, &a1, &a2))
          {
            OBJ_CALL(::java::util::Arrays::parallelSort(a0, a1, a2));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jdouble > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[DII", &a0, &a1, &a2))
          {
            OBJ_CALL(::java::util::Arrays::parallelSort(a0, a1, a2));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jfloat > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[FII", &a0, &a1, &a2))
          {
            OBJ_CALL(::java::util::Arrays::parallelSort(a0, a1, a2));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jint > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[III", &a0, &a1, &a2))
          {
            OBJ_CALL(::java::util::Arrays::parallelSort(a0, a1, a2));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jchar > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[CII", &a0, &a1, &a2))
          {
            OBJ_CALL(::java::util::Arrays::parallelSort(a0, a1, a2));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jshort > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[SII", &a0, &a1, &a2))
          {
            OBJ_CALL(::java::util::Arrays::parallelSort(a0, a1, a2));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jbyte > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[BII", &a0, &a1, &a2))
          {
            OBJ_CALL(::java::util::Arrays::parallelSort(a0, a1, a2));
            Py_RETURN_NONE;
          }
        }
        break;
       case 4:
        {
          JArray< ::java::lang::Object > a0((jobject) NULL);
          jint a1;
          jint a2;
          ::java::util::Comparator a3((jobject) NULL);
          PyTypeObject **p3;

          if (!parseArgs(args, "[oIIK", ::java::util::Comparator::initializeClass, &a0, &a1, &a2, &a3, &p3, ::java::util::t_Comparator::parameters_))
          {
            OBJ_CALL(::java::util::Arrays::parallelSort(a0, a1, a2, a3));
            Py_RETURN_NONE;
          }
        }
      }

      PyErr_SetArgsError(type, "parallelSort", args);
      return NULL;
    }

    static PyObject *t_Arrays_sort(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          JArray< jfloat > a0((jobject) NULL);

          if (!parseArgs(args, "[F", &a0))
          {
            OBJ_CALL(::java::util::Arrays::sort(a0));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jdouble > a0((jobject) NULL);

          if (!parseArgs(args, "[D", &a0))
          {
            OBJ_CALL(::java::util::Arrays::sort(a0));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jchar > a0((jobject) NULL);

          if (!parseArgs(args, "[C", &a0))
          {
            OBJ_CALL(::java::util::Arrays::sort(a0));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< ::java::lang::Object > a0((jobject) NULL);

          if (!parseArgs(args, "[o", &a0))
          {
            OBJ_CALL(::java::util::Arrays::sort(a0));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jbyte > a0((jobject) NULL);

          if (!parseArgs(args, "[B", &a0))
          {
            OBJ_CALL(::java::util::Arrays::sort(a0));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jlong > a0((jobject) NULL);

          if (!parseArgs(args, "[J", &a0))
          {
            OBJ_CALL(::java::util::Arrays::sort(a0));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jshort > a0((jobject) NULL);

          if (!parseArgs(args, "[S", &a0))
          {
            OBJ_CALL(::java::util::Arrays::sort(a0));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jint > a0((jobject) NULL);

          if (!parseArgs(args, "[I", &a0))
          {
            OBJ_CALL(::java::util::Arrays::sort(a0));
            Py_RETURN_NONE;
          }
        }
        break;
       case 2:
        {
          JArray< ::java::lang::Object > a0((jobject) NULL);
          ::java::util::Comparator a1((jobject) NULL);
          PyTypeObject **p1;

          if (!parseArgs(args, "[oK", ::java::util::Comparator::initializeClass, &a0, &a1, &p1, ::java::util::t_Comparator::parameters_))
          {
            OBJ_CALL(::java::util::Arrays::sort(a0, a1));
            Py_RETURN_NONE;
          }
        }
        break;
       case 3:
        {
          JArray< jshort > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[SII", &a0, &a1, &a2))
          {
            OBJ_CALL(::java::util::Arrays::sort(a0, a1, a2));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jint > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[III", &a0, &a1, &a2))
          {
            OBJ_CALL(::java::util::Arrays::sort(a0, a1, a2));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jfloat > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[FII", &a0, &a1, &a2))
          {
            OBJ_CALL(::java::util::Arrays::sort(a0, a1, a2));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jbyte > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[BII", &a0, &a1, &a2))
          {
            OBJ_CALL(::java::util::Arrays::sort(a0, a1, a2));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jchar > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[CII", &a0, &a1, &a2))
          {
            OBJ_CALL(::java::util::Arrays::sort(a0, a1, a2));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jdouble > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[DII", &a0, &a1, &a2))
          {
            OBJ_CALL(::java::util::Arrays::sort(a0, a1, a2));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jlong > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[JII", &a0, &a1, &a2))
          {
            OBJ_CALL(::java::util::Arrays::sort(a0, a1, a2));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< ::java::lang::Object > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[oII", &a0, &a1, &a2))
          {
            OBJ_CALL(::java::util::Arrays::sort(a0, a1, a2));
            Py_RETURN_NONE;
          }
        }
        break;
       case 4:
        {
          JArray< ::java::lang::Object > a0((jobject) NULL);
          jint a1;
          jint a2;
          ::java::util::Comparator a3((jobject) NULL);
          PyTypeObject **p3;

          if (!parseArgs(args, "[oIIK", ::java::util::Comparator::initializeClass, &a0, &a1, &a2, &a3, &p3, ::java::util::t_Comparator::parameters_))
          {
            OBJ_CALL(::java::util::Arrays::sort(a0, a1, a2, a3));
            Py_RETURN_NONE;
          }
        }
      }

      PyErr_SetArgsError(type, "sort", args);
      return NULL;
    }

    static PyObject *t_Arrays_spliterator(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          JArray< jdouble > a0((jobject) NULL);
          ::java::util::Spliterator$OfDouble result((jobject) NULL);

          if (!parseArgs(args, "[D", &a0))
          {
            OBJ_CALL(result = ::java::util::Arrays::spliterator(a0));
            return ::java::util::t_Spliterator$OfDouble::wrap_Object(result);
          }
        }
        {
          JArray< ::java::lang::Object > a0((jobject) NULL);
          ::java::util::Spliterator result((jobject) NULL);

          if (!parseArgs(args, "[o", &a0))
          {
            OBJ_CALL(result = ::java::util::Arrays::spliterator(a0));
            return ::java::util::t_Spliterator::wrap_Object(result);
          }
        }
        {
          JArray< jlong > a0((jobject) NULL);
          ::java::util::Spliterator$OfLong result((jobject) NULL);

          if (!parseArgs(args, "[J", &a0))
          {
            OBJ_CALL(result = ::java::util::Arrays::spliterator(a0));
            return ::java::util::t_Spliterator$OfLong::wrap_Object(result);
          }
        }
        {
          JArray< jint > a0((jobject) NULL);
          ::java::util::Spliterator$OfInt result((jobject) NULL);

          if (!parseArgs(args, "[I", &a0))
          {
            OBJ_CALL(result = ::java::util::Arrays::spliterator(a0));
            return ::java::util::t_Spliterator$OfInt::wrap_Object(result);
          }
        }
        break;
       case 3:
        {
          JArray< jdouble > a0((jobject) NULL);
          jint a1;
          jint a2;
          ::java::util::Spliterator$OfDouble result((jobject) NULL);

          if (!parseArgs(args, "[DII", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::java::util::Arrays::spliterator(a0, a1, a2));
            return ::java::util::t_Spliterator$OfDouble::wrap_Object(result);
          }
        }
        {
          JArray< ::java::lang::Object > a0((jobject) NULL);
          jint a1;
          jint a2;
          ::java::util::Spliterator result((jobject) NULL);

          if (!parseArgs(args, "[oII", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::java::util::Arrays::spliterator(a0, a1, a2));
            return ::java::util::t_Spliterator::wrap_Object(result);
          }
        }
        {
          JArray< jlong > a0((jobject) NULL);
          jint a1;
          jint a2;
          ::java::util::Spliterator$OfLong result((jobject) NULL);

          if (!parseArgs(args, "[JII", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::java::util::Arrays::spliterator(a0, a1, a2));
            return ::java::util::t_Spliterator$OfLong::wrap_Object(result);
          }
        }
        {
          JArray< jint > a0((jobject) NULL);
          jint a1;
          jint a2;
          ::java::util::Spliterator$OfInt result((jobject) NULL);

          if (!parseArgs(args, "[III", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::java::util::Arrays::spliterator(a0, a1, a2));
            return ::java::util::t_Spliterator$OfInt::wrap_Object(result);
          }
        }
      }

      PyErr_SetArgsError(type, "spliterator", args);
      return NULL;
    }

    static PyObject *t_Arrays_toString(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          JArray< jfloat > a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "[F", &a0))
          {
            OBJ_CALL(result = ::java::util::Arrays::toString(a0));
            return j2p(result);
          }
        }
        {
          JArray< jchar > a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "[C", &a0))
          {
            OBJ_CALL(result = ::java::util::Arrays::toString(a0));
            return j2p(result);
          }
        }
        {
          JArray< jdouble > a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "[D", &a0))
          {
            OBJ_CALL(result = ::java::util::Arrays::toString(a0));
            return j2p(result);
          }
        }
        {
          JArray< jshort > a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "[S", &a0))
          {
            OBJ_CALL(result = ::java::util::Arrays::toString(a0));
            return j2p(result);
          }
        }
        {
          JArray< jboolean > a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "[Z", &a0))
          {
            OBJ_CALL(result = ::java::util::Arrays::toString(a0));
            return j2p(result);
          }
        }
        {
          JArray< jbyte > a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "[B", &a0))
          {
            OBJ_CALL(result = ::java::util::Arrays::toString(a0));
            return j2p(result);
          }
        }
        {
          JArray< ::java::lang::Object > a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "[o", &a0))
          {
            OBJ_CALL(result = ::java::util::Arrays::toString(a0));
            return j2p(result);
          }
        }
        {
          JArray< jlong > a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "[J", &a0))
          {
            OBJ_CALL(result = ::java::util::Arrays::toString(a0));
            return j2p(result);
          }
        }
        {
          JArray< jint > a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "[I", &a0))
          {
            OBJ_CALL(result = ::java::util::Arrays::toString(a0));
            return j2p(result);
          }
        }
      }

      return callSuper(type, "toString", args, 2);
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/FlushInfo.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *FlushInfo::class$ = NULL;
        jmethodID *FlushInfo::mids$ = NULL;
        jfieldID *FlushInfo::fids$ = NULL;
        bool FlushInfo::live$ = false;

        jclass FlushInfo::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/FlushInfo");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_03b232b5] = env->getMethodID(cls, "<init>", "(IJ)V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            fids$ = new jfieldID[max_fid];
            fids$[fid_estimatedSegmentSize] = env->getFieldID(cls, "estimatedSegmentSize", "J");
            fids$[fid_numDocs] = env->getFieldID(cls, "numDocs", "I");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FlushInfo::FlushInfo(jint a0, jlong a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_03b232b5, a0, a1)) {}

        jboolean FlushInfo::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        jint FlushInfo::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        ::java::lang::String FlushInfo::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }

        jlong FlushInfo::_get_estimatedSegmentSize() const
        {
          return env->getLongField(this$, fids$[fid_estimatedSegmentSize]);
        }

        jint FlushInfo::_get_numDocs() const
        {
          return env->getIntField(this$, fids$[fid_numDocs]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_FlushInfo_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FlushInfo_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FlushInfo_init_(t_FlushInfo *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FlushInfo_equals(t_FlushInfo *self, PyObject *args);
        static PyObject *t_FlushInfo_hashCode(t_FlushInfo *self, PyObject *args);
        static PyObject *t_FlushInfo_toString(t_FlushInfo *self, PyObject *args);
        static PyObject *t_FlushInfo_get__estimatedSegmentSize(t_FlushInfo *self, void *data);
        static PyObject *t_FlushInfo_get__numDocs(t_FlushInfo *self, void *data);

        static PyGetSetDef t_FlushInfo__fields_[] = {
          DECLARE_GET_FIELD(t_FlushInfo, estimatedSegmentSize),
          DECLARE_GET_FIELD(t_FlushInfo, numDocs),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FlushInfo__methods_[] = {
          DECLARE_METHOD(t_FlushInfo, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FlushInfo, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FlushInfo, equals, METH_VARARGS),
          DECLARE_METHOD(t_FlushInfo, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_FlushInfo, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FlushInfo, t_FlushInfo, ::java::lang::Object, FlushInfo, t_FlushInfo_init_, 0, 0, t_FlushInfo__fields_, 0, 0);

        void t_FlushInfo::install(PyObject *module)
        {
          installType(&PY_TYPE(FlushInfo), module, "FlushInfo", 0);
        }

        void t_FlushInfo::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FlushInfo).tp_dict, "class_", make_descriptor(FlushInfo::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FlushInfo).tp_dict, "wrapfn_", make_descriptor(t_FlushInfo::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FlushInfo).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FlushInfo_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FlushInfo::initializeClass, 1)))
            return NULL;
          return t_FlushInfo::wrap_Object(FlushInfo(((t_FlushInfo *) arg)->object.this$));
        }
        static PyObject *t_FlushInfo_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FlushInfo::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FlushInfo_init_(t_FlushInfo *self, PyObject *args, PyObject *kwds)
        {
          jint a0;
          jlong a1;
          FlushInfo object((jobject) NULL);

          if (!parseArgs(args, "IJ", &a0, &a1))
          {
            INT_CALL(object = FlushInfo(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FlushInfo_equals(t_FlushInfo *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(FlushInfo), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_FlushInfo_hashCode(t_FlushInfo *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FlushInfo), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_FlushInfo_toString(t_FlushInfo *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(FlushInfo), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_FlushInfo_get__estimatedSegmentSize(t_FlushInfo *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object._get_estimatedSegmentSize());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }

        static PyObject *t_FlushInfo_get__numDocs(t_FlushInfo *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_numDocs());
          return PyInt_FromLong((long) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/PriorityQueue.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *PriorityQueue::class$ = NULL;
        jmethodID *PriorityQueue::mids$ = NULL;
        bool PriorityQueue::live$ = false;

        jclass PriorityQueue::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/PriorityQueue");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
            mids$[mid_init$_b3a85a05] = env->getMethodID(cls, "<init>", "(IZ)V");
            mids$[mid_add_a932a95f] = env->getMethodID(cls, "add", "(Ljava/lang/Object;)Ljava/lang/Object;");
            mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
            mids$[mid_insertWithOverflow_a932a95f] = env->getMethodID(cls, "insertWithOverflow", "(Ljava/lang/Object;)Ljava/lang/Object;");
            mids$[mid_pop_846352c3] = env->getMethodID(cls, "pop", "()Ljava/lang/Object;");
            mids$[mid_size_54c6a179] = env->getMethodID(cls, "size", "()I");
            mids$[mid_top_846352c3] = env->getMethodID(cls, "top", "()Ljava/lang/Object;");
            mids$[mid_updateTop_846352c3] = env->getMethodID(cls, "updateTop", "()Ljava/lang/Object;");
            mids$[mid_lessThan_466982fe] = env->getMethodID(cls, "lessThan", "(Ljava/lang/Object;Ljava/lang/Object;)Z");
            mids$[mid_getSentinelObject_846352c3] = env->getMethodID(cls, "getSentinelObject", "()Ljava/lang/Object;");
            mids$[mid_getHeapArray_94e49c77] = env->getMethodID(cls, "getHeapArray", "()[Ljava/lang/Object;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PriorityQueue::PriorityQueue(jint a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

        PriorityQueue::PriorityQueue(jint a0, jboolean a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_b3a85a05, a0, a1)) {}

        ::java::lang::Object PriorityQueue::add(const ::java::lang::Object & a0) const
        {
          return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_add_a932a95f], a0.this$));
        }

        void PriorityQueue::clear() const
        {
          env->callVoidMethod(this$, mids$[mid_clear_54c6a166]);
        }

        ::java::lang::Object PriorityQueue::insertWithOverflow(const ::java::lang::Object & a0) const
        {
          return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_insertWithOverflow_a932a95f], a0.this$));
        }

        ::java::lang::Object PriorityQueue::pop() const
        {
          return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_pop_846352c3]));
        }

        jint PriorityQueue::size() const
        {
          return env->callIntMethod(this$, mids$[mid_size_54c6a179]);
        }

        ::java::lang::Object PriorityQueue::top() const
        {
          return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_top_846352c3]));
        }

        ::java::lang::Object PriorityQueue::updateTop() const
        {
          return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_updateTop_846352c3]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_PriorityQueue_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PriorityQueue_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PriorityQueue_of_(t_PriorityQueue *self, PyObject *args);
        static int t_PriorityQueue_init_(t_PriorityQueue *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PriorityQueue_add(t_PriorityQueue *self, PyObject *arg);
        static PyObject *t_PriorityQueue_clear(t_PriorityQueue *self);
        static PyObject *t_PriorityQueue_insertWithOverflow(t_PriorityQueue *self, PyObject *arg);
        static PyObject *t_PriorityQueue_pop(t_PriorityQueue *self);
        static PyObject *t_PriorityQueue_size(t_PriorityQueue *self);
        static PyObject *t_PriorityQueue_top(t_PriorityQueue *self);
        static PyObject *t_PriorityQueue_updateTop(t_PriorityQueue *self);
        static PyObject *t_PriorityQueue_get__parameters_(t_PriorityQueue *self, void *data);
        static PyGetSetDef t_PriorityQueue__fields_[] = {
          DECLARE_GET_FIELD(t_PriorityQueue, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PriorityQueue__methods_[] = {
          DECLARE_METHOD(t_PriorityQueue, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PriorityQueue, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PriorityQueue, of_, METH_VARARGS),
          DECLARE_METHOD(t_PriorityQueue, add, METH_O),
          DECLARE_METHOD(t_PriorityQueue, clear, METH_NOARGS),
          DECLARE_METHOD(t_PriorityQueue, insertWithOverflow, METH_O),
          DECLARE_METHOD(t_PriorityQueue, pop, METH_NOARGS),
          DECLARE_METHOD(t_PriorityQueue, size, METH_NOARGS),
          DECLARE_METHOD(t_PriorityQueue, top, METH_NOARGS),
          DECLARE_METHOD(t_PriorityQueue, updateTop, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PriorityQueue, t_PriorityQueue, ::java::lang::Object, PriorityQueue, t_PriorityQueue_init_, 0, 0, t_PriorityQueue__fields_, 0, 0);
        PyObject *t_PriorityQueue::wrap_Object(const PriorityQueue& object, PyTypeObject *p0)
        {
          PyObject *obj = t_PriorityQueue::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_PriorityQueue *self = (t_PriorityQueue *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_PriorityQueue::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_PriorityQueue::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_PriorityQueue *self = (t_PriorityQueue *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_PriorityQueue::install(PyObject *module)
        {
          installType(&PY_TYPE(PriorityQueue), module, "PriorityQueue", 0);
        }

        void t_PriorityQueue::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PriorityQueue).tp_dict, "class_", make_descriptor(PriorityQueue::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PriorityQueue).tp_dict, "wrapfn_", make_descriptor(t_PriorityQueue::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PriorityQueue).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_PriorityQueue_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PriorityQueue::initializeClass, 1)))
            return NULL;
          return t_PriorityQueue::wrap_Object(PriorityQueue(((t_PriorityQueue *) arg)->object.this$));
        }
        static PyObject *t_PriorityQueue_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PriorityQueue::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_PriorityQueue_of_(t_PriorityQueue *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_PriorityQueue_init_(t_PriorityQueue *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jint a0;
              PriorityQueue object((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                INT_CALL(object = PriorityQueue(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              jint a0;
              jboolean a1;
              PriorityQueue object((jobject) NULL);

              if (!parseArgs(args, "IZ", &a0, &a1))
              {
                INT_CALL(object = PriorityQueue(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_PriorityQueue_add(t_PriorityQueue *self, PyObject *arg)
        {
          ::java::lang::Object a0((jobject) NULL);
          ::java::lang::Object result((jobject) NULL);

          if (!parseArg(arg, "O", self->parameters[0], &a0))
          {
            OBJ_CALL(result = self->object.add(a0));
            return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "add", arg);
          return NULL;
        }

        static PyObject *t_PriorityQueue_clear(t_PriorityQueue *self)
        {
          OBJ_CALL(self->object.clear());
          Py_RETURN_NONE;
        }

        static PyObject *t_PriorityQueue_insertWithOverflow(t_PriorityQueue *self, PyObject *arg)
        {
          ::java::lang::Object a0((jobject) NULL);
          ::java::lang::Object result((jobject) NULL);

          if (!parseArg(arg, "O", self->parameters[0], &a0))
          {
            OBJ_CALL(result = self->object.insertWithOverflow(a0));
            return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "insertWithOverflow", arg);
          return NULL;
        }

        static PyObject *t_PriorityQueue_pop(t_PriorityQueue *self)
        {
          ::java::lang::Object result((jobject) NULL);
          OBJ_CALL(result = self->object.pop());
          return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
        }

        static PyObject *t_PriorityQueue_size(t_PriorityQueue *self)
        {
          jint result;
          OBJ_CALL(result = self->object.size());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_PriorityQueue_top(t_PriorityQueue *self)
        {
          ::java::lang::Object result((jobject) NULL);
          OBJ_CALL(result = self->object.top());
          return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
        }

        static PyObject *t_PriorityQueue_updateTop(t_PriorityQueue *self)
        {
          ::java::lang::Object result((jobject) NULL);
          OBJ_CALL(result = self->object.updateTop());
          return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
        }
        static PyObject *t_PriorityQueue_get__parameters_(t_PriorityQueue *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/ConstantScoreQuery.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "java/util/Set.h"
#include "org/apache/lucene/search/Filter.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/index/Term.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/search/Weight.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *ConstantScoreQuery::class$ = NULL;
        jmethodID *ConstantScoreQuery::mids$ = NULL;
        bool ConstantScoreQuery::live$ = false;

        jclass ConstantScoreQuery::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/ConstantScoreQuery");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_6e301113] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Query;)V");
            mids$[mid_init$_9bb37152] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Filter;)V");
            mids$[mid_createWeight_367763cb] = env->getMethodID(cls, "createWeight", "(Lorg/apache/lucene/search/IndexSearcher;)Lorg/apache/lucene/search/Weight;");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_extractTerms_fb4f2b26] = env->getMethodID(cls, "extractTerms", "(Ljava/util/Set;)V");
            mids$[mid_getFilter_b40f961f] = env->getMethodID(cls, "getFilter", "()Lorg/apache/lucene/search/Filter;");
            mids$[mid_getQuery_97e3851a] = env->getMethodID(cls, "getQuery", "()Lorg/apache/lucene/search/Query;");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_rewrite_7edcaa43] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/index/IndexReader;)Lorg/apache/lucene/search/Query;");
            mids$[mid_toString_97a5258f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ConstantScoreQuery::ConstantScoreQuery(const ::org::apache::lucene::search::Query & a0) : ::org::apache::lucene::search::Query(env->newObject(initializeClass, &mids$, mid_init$_6e301113, a0.this$)) {}

        ConstantScoreQuery::ConstantScoreQuery(const ::org::apache::lucene::search::Filter & a0) : ::org::apache::lucene::search::Query(env->newObject(initializeClass, &mids$, mid_init$_9bb37152, a0.this$)) {}

        ::org::apache::lucene::search::Weight ConstantScoreQuery::createWeight(const ::org::apache::lucene::search::IndexSearcher & a0) const
        {
          return ::org::apache::lucene::search::Weight(env->callObjectMethod(this$, mids$[mid_createWeight_367763cb], a0.this$));
        }

        jboolean ConstantScoreQuery::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        void ConstantScoreQuery::extractTerms(const ::java::util::Set & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_extractTerms_fb4f2b26], a0.this$);
        }

        ::org::apache::lucene::search::Filter ConstantScoreQuery::getFilter() const
        {
          return ::org::apache::lucene::search::Filter(env->callObjectMethod(this$, mids$[mid_getFilter_b40f961f]));
        }

        ::org::apache::lucene::search::Query ConstantScoreQuery::getQuery() const
        {
          return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_getQuery_97e3851a]));
        }

        jint ConstantScoreQuery::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        ::org::apache::lucene::search::Query ConstantScoreQuery::rewrite(const ::org::apache::lucene::index::IndexReader & a0) const
        {
          return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_rewrite_7edcaa43], a0.this$));
        }

        ::java::lang::String ConstantScoreQuery::toString(const ::java::lang::String & a0) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_97a5258f], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_ConstantScoreQuery_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ConstantScoreQuery_instance_(PyTypeObject *type, PyObject *arg);
        static int t_ConstantScoreQuery_init_(t_ConstantScoreQuery *self, PyObject *args, PyObject *kwds);
        static PyObject *t_ConstantScoreQuery_createWeight(t_ConstantScoreQuery *self, PyObject *args);
        static PyObject *t_ConstantScoreQuery_equals(t_ConstantScoreQuery *self, PyObject *args);
        static PyObject *t_ConstantScoreQuery_extractTerms(t_ConstantScoreQuery *self, PyObject *args);
        static PyObject *t_ConstantScoreQuery_getFilter(t_ConstantScoreQuery *self);
        static PyObject *t_ConstantScoreQuery_getQuery(t_ConstantScoreQuery *self);
        static PyObject *t_ConstantScoreQuery_hashCode(t_ConstantScoreQuery *self, PyObject *args);
        static PyObject *t_ConstantScoreQuery_rewrite(t_ConstantScoreQuery *self, PyObject *args);
        static PyObject *t_ConstantScoreQuery_toString(t_ConstantScoreQuery *self, PyObject *args);
        static PyObject *t_ConstantScoreQuery_get__filter(t_ConstantScoreQuery *self, void *data);
        static PyObject *t_ConstantScoreQuery_get__query(t_ConstantScoreQuery *self, void *data);
        static PyGetSetDef t_ConstantScoreQuery__fields_[] = {
          DECLARE_GET_FIELD(t_ConstantScoreQuery, filter),
          DECLARE_GET_FIELD(t_ConstantScoreQuery, query),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_ConstantScoreQuery__methods_[] = {
          DECLARE_METHOD(t_ConstantScoreQuery, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ConstantScoreQuery, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ConstantScoreQuery, createWeight, METH_VARARGS),
          DECLARE_METHOD(t_ConstantScoreQuery, equals, METH_VARARGS),
          DECLARE_METHOD(t_ConstantScoreQuery, extractTerms, METH_VARARGS),
          DECLARE_METHOD(t_ConstantScoreQuery, getFilter, METH_NOARGS),
          DECLARE_METHOD(t_ConstantScoreQuery, getQuery, METH_NOARGS),
          DECLARE_METHOD(t_ConstantScoreQuery, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_ConstantScoreQuery, rewrite, METH_VARARGS),
          DECLARE_METHOD(t_ConstantScoreQuery, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(ConstantScoreQuery, t_ConstantScoreQuery, ::org::apache::lucene::search::Query, ConstantScoreQuery, t_ConstantScoreQuery_init_, 0, 0, t_ConstantScoreQuery__fields_, 0, 0);

        void t_ConstantScoreQuery::install(PyObject *module)
        {
          installType(&PY_TYPE(ConstantScoreQuery), module, "ConstantScoreQuery", 0);
        }

        void t_ConstantScoreQuery::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(ConstantScoreQuery).tp_dict, "class_", make_descriptor(ConstantScoreQuery::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(ConstantScoreQuery).tp_dict, "wrapfn_", make_descriptor(t_ConstantScoreQuery::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(ConstantScoreQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_ConstantScoreQuery_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, ConstantScoreQuery::initializeClass, 1)))
            return NULL;
          return t_ConstantScoreQuery::wrap_Object(ConstantScoreQuery(((t_ConstantScoreQuery *) arg)->object.this$));
        }
        static PyObject *t_ConstantScoreQuery_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, ConstantScoreQuery::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_ConstantScoreQuery_init_(t_ConstantScoreQuery *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::search::Query a0((jobject) NULL);
              ConstantScoreQuery object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::search::Query::initializeClass, &a0))
              {
                INT_CALL(object = ConstantScoreQuery(a0));
                self->object = object;
                break;
              }
            }
            {
              ::org::apache::lucene::search::Filter a0((jobject) NULL);
              ConstantScoreQuery object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::search::Filter::initializeClass, &a0))
              {
                INT_CALL(object = ConstantScoreQuery(a0));
                self->object = object;
                break;
              }
            }
           default:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_ConstantScoreQuery_createWeight(t_ConstantScoreQuery *self, PyObject *args)
        {
          ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
          ::org::apache::lucene::search::Weight result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.createWeight(a0));
            return ::org::apache::lucene::search::t_Weight::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(ConstantScoreQuery), (PyObject *) self, "createWeight", args, 2);
        }

        static PyObject *t_ConstantScoreQuery_equals(t_ConstantScoreQuery *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(ConstantScoreQuery), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_ConstantScoreQuery_extractTerms(t_ConstantScoreQuery *self, PyObject *args)
        {
          ::java::util::Set a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArgs(args, "K", ::java::util::Set::initializeClass, &a0, &p0, ::java::util::t_Set::parameters_))
          {
            OBJ_CALL(self->object.extractTerms(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(ConstantScoreQuery), (PyObject *) self, "extractTerms", args, 2);
        }

        static PyObject *t_ConstantScoreQuery_getFilter(t_ConstantScoreQuery *self)
        {
          ::org::apache::lucene::search::Filter result((jobject) NULL);
          OBJ_CALL(result = self->object.getFilter());
          return ::org::apache::lucene::search::t_Filter::wrap_Object(result);
        }

        static PyObject *t_ConstantScoreQuery_getQuery(t_ConstantScoreQuery *self)
        {
          ::org::apache::lucene::search::Query result((jobject) NULL);
          OBJ_CALL(result = self->object.getQuery());
          return ::org::apache::lucene::search::t_Query::wrap_Object(result);
        }

        static PyObject *t_ConstantScoreQuery_hashCode(t_ConstantScoreQuery *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(ConstantScoreQuery), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_ConstantScoreQuery_rewrite(t_ConstantScoreQuery *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.rewrite(a0));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(ConstantScoreQuery), (PyObject *) self, "rewrite", args, 2);
        }

        static PyObject *t_ConstantScoreQuery_toString(t_ConstantScoreQuery *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.toString(a0));
            return j2p(result);
          }

          return callSuper(&PY_TYPE(ConstantScoreQuery), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_ConstantScoreQuery_get__filter(t_ConstantScoreQuery *self, void *data)
        {
          ::org::apache::lucene::search::Filter value((jobject) NULL);
          OBJ_CALL(value = self->object.getFilter());
          return ::org::apache::lucene::search::t_Filter::wrap_Object(value);
        }

        static PyObject *t_ConstantScoreQuery_get__query(t_ConstantScoreQuery *self, void *data)
        {
          ::org::apache::lucene::search::Query value((jobject) NULL);
          OBJ_CALL(value = self->object.getQuery());
          return ::org::apache::lucene::search::t_Query::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/compound/HyphenationCompoundWordTokenFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/compound/hyphenation/HyphenationTree.h"
#include "java/io/IOException.h"
#include "java/io/File.h"
#include "java/lang/String.h"
#include "org/apache/lucene/util/Version.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace compound {

          ::java::lang::Class *HyphenationCompoundWordTokenFilter::class$ = NULL;
          jmethodID *HyphenationCompoundWordTokenFilter::mids$ = NULL;
          bool HyphenationCompoundWordTokenFilter::live$ = false;

          jclass HyphenationCompoundWordTokenFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/compound/HyphenationCompoundWordTokenFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_9fc9df59] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;Lorg/apache/lucene/analysis/compound/hyphenation/HyphenationTree;)V");
              mids$[mid_init$_6851072a] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/TokenStream;Lorg/apache/lucene/analysis/compound/hyphenation/HyphenationTree;)V");
              mids$[mid_init$_928921fa] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;Lorg/apache/lucene/analysis/compound/hyphenation/HyphenationTree;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_213956f5] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/TokenStream;Lorg/apache/lucene/analysis/compound/hyphenation/HyphenationTree;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_b555ce7d] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;Lorg/apache/lucene/analysis/compound/hyphenation/HyphenationTree;III)V");
              mids$[mid_init$_9c907b94] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/TokenStream;Lorg/apache/lucene/analysis/compound/hyphenation/HyphenationTree;III)V");
              mids$[mid_init$_d8bc9319] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;Lorg/apache/lucene/analysis/compound/hyphenation/HyphenationTree;Lorg/apache/lucene/analysis/util/CharArraySet;IIIZ)V");
              mids$[mid_init$_46c08466] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/TokenStream;Lorg/apache/lucene/analysis/compound/hyphenation/HyphenationTree;Lorg/apache/lucene/analysis/util/CharArraySet;IIIZ)V");
              mids$[mid_getHyphenationTree_5c26e2ec] = env->getStaticMethodID(cls, "getHyphenationTree", "(Ljava/lang/String;)Lorg/apache/lucene/analysis/compound/hyphenation/HyphenationTree;");
              mids$[mid_getHyphenationTree_70e8a373] = env->getStaticMethodID(cls, "getHyphenationTree", "(Ljava/io/File;)Lorg/apache/lucene/analysis/compound/hyphenation/HyphenationTree;");
              mids$[mid_decompose_54c6a166] = env->getMethodID(cls, "decompose", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          HyphenationCompoundWordTokenFilter::HyphenationCompoundWordTokenFilter(const ::org::apache::lucene::analysis::TokenStream & a0, const ::org::apache::lucene::analysis::compound::hyphenation::HyphenationTree & a1) : ::org::apache::lucene::analysis::compound::CompoundWordTokenFilterBase(env->newObject(initializeClass, &mids$, mid_init$_9fc9df59, a0.this$, a1.this$)) {}

          HyphenationCompoundWordTokenFilter::HyphenationCompoundWordTokenFilter(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::TokenStream & a1, const ::org::apache::lucene::analysis::compound::hyphenation::HyphenationTree & a2) : ::org::apache::lucene::analysis::compound::CompoundWordTokenFilterBase(env->newObject(initializeClass, &mids$, mid_init$_6851072a, a0.this$, a1.this$, a2.this$)) {}

          HyphenationCompoundWordTokenFilter::HyphenationCompoundWordTokenFilter(const ::org::apache::lucene::analysis::TokenStream & a0, const ::org::apache::lucene::analysis::compound::hyphenation::HyphenationTree & a1, const ::org::apache::lucene::analysis::util::CharArraySet & a2) : ::org::apache::lucene::analysis::compound::CompoundWordTokenFilterBase(env->newObject(initializeClass, &mids$, mid_init$_928921fa, a0.this$, a1.this$, a2.this$)) {}

          HyphenationCompoundWordTokenFilter::HyphenationCompoundWordTokenFilter(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::TokenStream & a1, const ::org::apache::lucene::analysis::compound::hyphenation::HyphenationTree & a2, const ::org::apache::lucene::analysis::util::CharArraySet & a3) : ::org::apache::lucene::analysis::compound::CompoundWordTokenFilterBase(env->newObject(initializeClass, &mids$, mid_init$_213956f5, a0.this$, a1.this$, a2.this$, a3.this$)) {}

          HyphenationCompoundWordTokenFilter::HyphenationCompoundWordTokenFilter(const ::org::apache::lucene::analysis::TokenStream & a0, const ::org::apache::lucene::analysis::compound::hyphenation::HyphenationTree & a1, jint a2, jint a3, jint a4) : ::org::apache::lucene::analysis::compound::CompoundWordTokenFilterBase(env->newObject(initializeClass, &mids$, mid_init$_b555ce7d, a0.this$, a1.this$, a2, a3, a4)) {}

          HyphenationCompoundWordTokenFilter::HyphenationCompoundWordTokenFilter(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::TokenStream & a1, const ::org::apache::lucene::analysis::compound::hyphenation::HyphenationTree & a2, jint a3, jint a4, jint a5) : ::org::apache::lucene::analysis::compound::CompoundWordTokenFilterBase(env->newObject(initializeClass, &mids$, mid_init$_9c907b94, a0.this$, a1.this$, a2.this$, a3, a4, a5)) {}

          HyphenationCompoundWordTokenFilter::HyphenationCompoundWordTokenFilter(const ::org::apache::lucene::analysis::TokenStream & a0, const ::org::apache::lucene::analysis::compound::hyphenation::HyphenationTree & a1, const ::org::apache::lucene::analysis::util::CharArraySet & a2, jint a3, jint a4, jint a5, jboolean a6) : ::org::apache::lucene::analysis::compound::CompoundWordTokenFilterBase(env->newObject(initializeClass, &mids$, mid_init$_d8bc9319, a0.this$, a1.this$, a2.this$, a3, a4, a5, a6)) {}

          HyphenationCompoundWordTokenFilter::HyphenationCompoundWordTokenFilter(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::TokenStream & a1, const ::org::apache::lucene::analysis::compound::hyphenation::HyphenationTree & a2, const ::org::apache::lucene::analysis::util::CharArraySet & a3, jint a4, jint a5, jint a6, jboolean a7) : ::org::apache::lucene::analysis::compound::CompoundWordTokenFilterBase(env->newObject(initializeClass, &mids$, mid_init$_46c08466, a0.this$, a1.this$, a2.this$, a3.this$, a4, a5, a6, a7)) {}

          ::org::apache::lucene::analysis::compound::hyphenation::HyphenationTree HyphenationCompoundWordTokenFilter::getHyphenationTree(const ::java::lang::String & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::compound::hyphenation::HyphenationTree(env->callStaticObjectMethod(cls, mids$[mid_getHyphenationTree_5c26e2ec], a0.this$));
          }

          ::org::apache::lucene::analysis::compound::hyphenation::HyphenationTree HyphenationCompoundWordTokenFilter::getHyphenationTree(const ::java::io::File & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::compound::hyphenation::HyphenationTree(env->callStaticObjectMethod(cls, mids$[mid_getHyphenationTree_70e8a373], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace compound {
          static PyObject *t_HyphenationCompoundWordTokenFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_HyphenationCompoundWordTokenFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_HyphenationCompoundWordTokenFilter_init_(t_HyphenationCompoundWordTokenFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_HyphenationCompoundWordTokenFilter_getHyphenationTree(PyTypeObject *type, PyObject *args);

          static PyMethodDef t_HyphenationCompoundWordTokenFilter__methods_[] = {
            DECLARE_METHOD(t_HyphenationCompoundWordTokenFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HyphenationCompoundWordTokenFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HyphenationCompoundWordTokenFilter, getHyphenationTree, METH_VARARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(HyphenationCompoundWordTokenFilter, t_HyphenationCompoundWordTokenFilter, ::org::apache::lucene::analysis::compound::CompoundWordTokenFilterBase, HyphenationCompoundWordTokenFilter, t_HyphenationCompoundWordTokenFilter_init_, 0, 0, 0, 0, 0);

          void t_HyphenationCompoundWordTokenFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(HyphenationCompoundWordTokenFilter), module, "HyphenationCompoundWordTokenFilter", 0);
          }

          void t_HyphenationCompoundWordTokenFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(HyphenationCompoundWordTokenFilter).tp_dict, "class_", make_descriptor(HyphenationCompoundWordTokenFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(HyphenationCompoundWordTokenFilter).tp_dict, "wrapfn_", make_descriptor(t_HyphenationCompoundWordTokenFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(HyphenationCompoundWordTokenFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_HyphenationCompoundWordTokenFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, HyphenationCompoundWordTokenFilter::initializeClass, 1)))
              return NULL;
            return t_HyphenationCompoundWordTokenFilter::wrap_Object(HyphenationCompoundWordTokenFilter(((t_HyphenationCompoundWordTokenFilter *) arg)->object.this$));
          }
          static PyObject *t_HyphenationCompoundWordTokenFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, HyphenationCompoundWordTokenFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_HyphenationCompoundWordTokenFilter_init_(t_HyphenationCompoundWordTokenFilter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                ::org::apache::lucene::analysis::compound::hyphenation::HyphenationTree a1((jobject) NULL);
                HyphenationCompoundWordTokenFilter object((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::analysis::compound::hyphenation::HyphenationTree::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = HyphenationCompoundWordTokenFilter(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
                ::org::apache::lucene::analysis::compound::hyphenation::HyphenationTree a2((jobject) NULL);
                HyphenationCompoundWordTokenFilter object((jobject) NULL);

                if (!parseArgs(args, "kkk", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::analysis::compound::hyphenation::HyphenationTree::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = HyphenationCompoundWordTokenFilter(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                ::org::apache::lucene::analysis::compound::hyphenation::HyphenationTree a1((jobject) NULL);
                ::org::apache::lucene::analysis::util::CharArraySet a2((jobject) NULL);
                PyTypeObject **p2;
                HyphenationCompoundWordTokenFilter object((jobject) NULL);

                if (!parseArgs(args, "kkK", ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::analysis::compound::hyphenation::HyphenationTree::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &a1, &a2, &p2, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = HyphenationCompoundWordTokenFilter(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 4:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
                ::org::apache::lucene::analysis::compound::hyphenation::HyphenationTree a2((jobject) NULL);
                ::org::apache::lucene::analysis::util::CharArraySet a3((jobject) NULL);
                PyTypeObject **p3;
                HyphenationCompoundWordTokenFilter object((jobject) NULL);

                if (!parseArgs(args, "kkkK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::analysis::compound::hyphenation::HyphenationTree::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &a1, &a2, &a3, &p3, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = HyphenationCompoundWordTokenFilter(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 5:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                ::org::apache::lucene::analysis::compound::hyphenation::HyphenationTree a1((jobject) NULL);
                jint a2;
                jint a3;
                jint a4;
                HyphenationCompoundWordTokenFilter object((jobject) NULL);

                if (!parseArgs(args, "kkIII", ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::analysis::compound::hyphenation::HyphenationTree::initializeClass, &a0, &a1, &a2, &a3, &a4))
                {
                  INT_CALL(object = HyphenationCompoundWordTokenFilter(a0, a1, a2, a3, a4));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 6:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
                ::org::apache::lucene::analysis::compound::hyphenation::HyphenationTree a2((jobject) NULL);
                jint a3;
                jint a4;
                jint a5;
                HyphenationCompoundWordTokenFilter object((jobject) NULL);

                if (!parseArgs(args, "kkkIII", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::analysis::compound::hyphenation::HyphenationTree::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5))
                {
                  INT_CALL(object = HyphenationCompoundWordTokenFilter(a0, a1, a2, a3, a4, a5));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 7:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                ::org::apache::lucene::analysis::compound::hyphenation::HyphenationTree a1((jobject) NULL);
                ::org::apache::lucene::analysis::util::CharArraySet a2((jobject) NULL);
                PyTypeObject **p2;
                jint a3;
                jint a4;
                jint a5;
                jboolean a6;
                HyphenationCompoundWordTokenFilter object((jobject) NULL);

                if (!parseArgs(args, "kkKIIIZ", ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::analysis::compound::hyphenation::HyphenationTree::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &a1, &a2, &p2, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_, &a3, &a4, &a5, &a6))
                {
                  INT_CALL(object = HyphenationCompoundWordTokenFilter(a0, a1, a2, a3, a4, a5, a6));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 8:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
                ::org::apache::lucene::analysis::compound::hyphenation::HyphenationTree a2((jobject) NULL);
                ::org::apache::lucene::analysis::util::CharArraySet a3((jobject) NULL);
                PyTypeObject **p3;
                jint a4;
                jint a5;
                jint a6;
                jboolean a7;
                HyphenationCompoundWordTokenFilter object((jobject) NULL);

                if (!parseArgs(args, "kkkKIIIZ", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::analysis::compound::hyphenation::HyphenationTree::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &a1, &a2, &a3, &p3, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_, &a4, &a5, &a6, &a7))
                {
                  INT_CALL(object = HyphenationCompoundWordTokenFilter(a0, a1, a2, a3, a4, a5, a6, a7));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_HyphenationCompoundWordTokenFilter_getHyphenationTree(PyTypeObject *type, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::java::lang::String a0((jobject) NULL);
                ::org::apache::lucene::analysis::compound::hyphenation::HyphenationTree result((jobject) NULL);

                if (!parseArgs(args, "s", &a0))
                {
                  OBJ_CALL(result = ::org::apache::lucene::analysis::compound::HyphenationCompoundWordTokenFilter::getHyphenationTree(a0));
                  return ::org::apache::lucene::analysis::compound::hyphenation::t_HyphenationTree::wrap_Object(result);
                }
              }
              {
                ::java::io::File a0((jobject) NULL);
                ::org::apache::lucene::analysis::compound::hyphenation::HyphenationTree result((jobject) NULL);

                if (!parseArgs(args, "k", ::java::io::File::initializeClass, &a0))
                {
                  OBJ_CALL(result = ::org::apache::lucene::analysis::compound::HyphenationCompoundWordTokenFilter::getHyphenationTree(a0));
                  return ::org::apache::lucene::analysis::compound::hyphenation::t_HyphenationTree::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError(type, "getHyphenationTree", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/compressing/CompressingStoredFieldsWriter.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "org/apache/lucene/store/IOContext.h"
#include "org/apache/lucene/codecs/compressing/CompressionMode.h"
#include "org/apache/lucene/index/MergeState.h"
#include "org/apache/lucene/index/FieldInfo.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/IndexableField.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace compressing {

          ::java::lang::Class *CompressingStoredFieldsWriter::class$ = NULL;
          jmethodID *CompressingStoredFieldsWriter::mids$ = NULL;
          bool CompressingStoredFieldsWriter::live$ = false;

          jclass CompressingStoredFieldsWriter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/compressing/CompressingStoredFieldsWriter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_999e6287] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/SegmentInfo;Ljava/lang/String;Lorg/apache/lucene/store/IOContext;Ljava/lang/String;Lorg/apache/lucene/codecs/compressing/CompressionMode;I)V");
              mids$[mid_abort_54c6a166] = env->getMethodID(cls, "abort", "()V");
              mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
              mids$[mid_finish_48f050c2] = env->getMethodID(cls, "finish", "(Lorg/apache/lucene/index/FieldInfos;I)V");
              mids$[mid_finishDocument_54c6a166] = env->getMethodID(cls, "finishDocument", "()V");
              mids$[mid_merge_fd0cfdeb] = env->getMethodID(cls, "merge", "(Lorg/apache/lucene/index/MergeState;)I");
              mids$[mid_startDocument_54c6a166] = env->getMethodID(cls, "startDocument", "()V");
              mids$[mid_writeField_0de3c993] = env->getMethodID(cls, "writeField", "(Lorg/apache/lucene/index/FieldInfo;Lorg/apache/lucene/index/IndexableField;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CompressingStoredFieldsWriter::CompressingStoredFieldsWriter(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::SegmentInfo & a1, const ::java::lang::String & a2, const ::org::apache::lucene::store::IOContext & a3, const ::java::lang::String & a4, const ::org::apache::lucene::codecs::compressing::CompressionMode & a5, jint a6) : ::org::apache::lucene::codecs::StoredFieldsWriter(env->newObject(initializeClass, &mids$, mid_init$_999e6287, a0.this$, a1.this$, a2.this$, a3.this$, a4.this$, a5.this$, a6)) {}

          void CompressingStoredFieldsWriter::abort() const
          {
            env->callVoidMethod(this$, mids$[mid_abort_54c6a166]);
          }

          void CompressingStoredFieldsWriter::close() const
          {
            env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
          }

          void CompressingStoredFieldsWriter::finish(const ::org::apache::lucene::index::FieldInfos & a0, jint a1) const
          {
            env->callVoidMethod(this$, mids$[mid_finish_48f050c2], a0.this$, a1);
          }

          void CompressingStoredFieldsWriter::finishDocument() const
          {
            env->callVoidMethod(this$, mids$[mid_finishDocument_54c6a166]);
          }

          jint CompressingStoredFieldsWriter::merge(const ::org::apache::lucene::index::MergeState & a0) const
          {
            return env->callIntMethod(this$, mids$[mid_merge_fd0cfdeb], a0.this$);
          }

          void CompressingStoredFieldsWriter::startDocument() const
          {
            env->callVoidMethod(this$, mids$[mid_startDocument_54c6a166]);
          }

          void CompressingStoredFieldsWriter::writeField(const ::org::apache::lucene::index::FieldInfo & a0, const ::org::apache::lucene::index::IndexableField & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_writeField_0de3c993], a0.this$, a1.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace compressing {
          static PyObject *t_CompressingStoredFieldsWriter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CompressingStoredFieldsWriter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CompressingStoredFieldsWriter_init_(t_CompressingStoredFieldsWriter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CompressingStoredFieldsWriter_abort(t_CompressingStoredFieldsWriter *self, PyObject *args);
          static PyObject *t_CompressingStoredFieldsWriter_close(t_CompressingStoredFieldsWriter *self, PyObject *args);
          static PyObject *t_CompressingStoredFieldsWriter_finish(t_CompressingStoredFieldsWriter *self, PyObject *args);
          static PyObject *t_CompressingStoredFieldsWriter_finishDocument(t_CompressingStoredFieldsWriter *self, PyObject *args);
          static PyObject *t_CompressingStoredFieldsWriter_merge(t_CompressingStoredFieldsWriter *self, PyObject *args);
          static PyObject *t_CompressingStoredFieldsWriter_startDocument(t_CompressingStoredFieldsWriter *self, PyObject *args);
          static PyObject *t_CompressingStoredFieldsWriter_writeField(t_CompressingStoredFieldsWriter *self, PyObject *args);

          static PyMethodDef t_CompressingStoredFieldsWriter__methods_[] = {
            DECLARE_METHOD(t_CompressingStoredFieldsWriter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CompressingStoredFieldsWriter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CompressingStoredFieldsWriter, abort, METH_VARARGS),
            DECLARE_METHOD(t_CompressingStoredFieldsWriter, close, METH_VARARGS),
            DECLARE_METHOD(t_CompressingStoredFieldsWriter, finish, METH_VARARGS),
            DECLARE_METHOD(t_CompressingStoredFieldsWriter, finishDocument, METH_VARARGS),
            DECLARE_METHOD(t_CompressingStoredFieldsWriter, merge, METH_VARARGS),
            DECLARE_METHOD(t_CompressingStoredFieldsWriter, startDocument, METH_VARARGS),
            DECLARE_METHOD(t_CompressingStoredFieldsWriter, writeField, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CompressingStoredFieldsWriter, t_CompressingStoredFieldsWriter, ::org::apache::lucene::codecs::StoredFieldsWriter, CompressingStoredFieldsWriter, t_CompressingStoredFieldsWriter_init_, 0, 0, 0, 0, 0);

          void t_CompressingStoredFieldsWriter::install(PyObject *module)
          {
            installType(&PY_TYPE(CompressingStoredFieldsWriter), module, "CompressingStoredFieldsWriter", 0);
          }

          void t_CompressingStoredFieldsWriter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CompressingStoredFieldsWriter).tp_dict, "class_", make_descriptor(CompressingStoredFieldsWriter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CompressingStoredFieldsWriter).tp_dict, "wrapfn_", make_descriptor(t_CompressingStoredFieldsWriter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CompressingStoredFieldsWriter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CompressingStoredFieldsWriter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CompressingStoredFieldsWriter::initializeClass, 1)))
              return NULL;
            return t_CompressingStoredFieldsWriter::wrap_Object(CompressingStoredFieldsWriter(((t_CompressingStoredFieldsWriter *) arg)->object.this$));
          }
          static PyObject *t_CompressingStoredFieldsWriter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CompressingStoredFieldsWriter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CompressingStoredFieldsWriter_init_(t_CompressingStoredFieldsWriter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::store::Directory a0((jobject) NULL);
            ::org::apache::lucene::index::SegmentInfo a1((jobject) NULL);
            ::java::lang::String a2((jobject) NULL);
            ::org::apache::lucene::store::IOContext a3((jobject) NULL);
            ::java::lang::String a4((jobject) NULL);
            ::org::apache::lucene::codecs::compressing::CompressionMode a5((jobject) NULL);
            jint a6;
            CompressingStoredFieldsWriter object((jobject) NULL);

            if (!parseArgs(args, "kkskskI", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::SegmentInfo::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, ::org::apache::lucene::codecs::compressing::CompressionMode::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5, &a6))
            {
              INT_CALL(object = CompressingStoredFieldsWriter(a0, a1, a2, a3, a4, a5, a6));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_CompressingStoredFieldsWriter_abort(t_CompressingStoredFieldsWriter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.abort());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(CompressingStoredFieldsWriter), (PyObject *) self, "abort", args, 2);
          }

          static PyObject *t_CompressingStoredFieldsWriter_close(t_CompressingStoredFieldsWriter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.close());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(CompressingStoredFieldsWriter), (PyObject *) self, "close", args, 2);
          }

          static PyObject *t_CompressingStoredFieldsWriter_finish(t_CompressingStoredFieldsWriter *self, PyObject *args)
          {
            ::org::apache::lucene::index::FieldInfos a0((jobject) NULL);
            jint a1;

            if (!parseArgs(args, "kI", ::org::apache::lucene::index::FieldInfos::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.finish(a0, a1));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(CompressingStoredFieldsWriter), (PyObject *) self, "finish", args, 2);
          }

          static PyObject *t_CompressingStoredFieldsWriter_finishDocument(t_CompressingStoredFieldsWriter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.finishDocument());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(CompressingStoredFieldsWriter), (PyObject *) self, "finishDocument", args, 2);
          }

          static PyObject *t_CompressingStoredFieldsWriter_merge(t_CompressingStoredFieldsWriter *self, PyObject *args)
          {
            ::org::apache::lucene::index::MergeState a0((jobject) NULL);
            jint result;

            if (!parseArgs(args, "k", ::org::apache::lucene::index::MergeState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.merge(a0));
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(CompressingStoredFieldsWriter), (PyObject *) self, "merge", args, 2);
          }

          static PyObject *t_CompressingStoredFieldsWriter_startDocument(t_CompressingStoredFieldsWriter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.startDocument());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(CompressingStoredFieldsWriter), (PyObject *) self, "startDocument", args, 2);
          }

          static PyObject *t_CompressingStoredFieldsWriter_writeField(t_CompressingStoredFieldsWriter *self, PyObject *args)
          {
            ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
            ::org::apache::lucene::index::IndexableField a1((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::index::FieldInfo::initializeClass, ::org::apache::lucene::index::IndexableField::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.writeField(a0, a1));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(CompressingStoredFieldsWriter), (PyObject *) self, "writeField", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/core/LetterTokenizerFactory.h"
#include "java/lang/Class.h"
#include "java/io/Reader.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "org/apache/lucene/analysis/core/LetterTokenizer.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {

          ::java::lang::Class *LetterTokenizerFactory::class$ = NULL;
          jmethodID *LetterTokenizerFactory::mids$ = NULL;
          bool LetterTokenizerFactory::live$ = false;

          jclass LetterTokenizerFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/core/LetterTokenizerFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_5d87cc2c] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;)Lorg/apache/lucene/analysis/core/LetterTokenizer;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          LetterTokenizerFactory::LetterTokenizerFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenizerFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::core::LetterTokenizer LetterTokenizerFactory::create(const ::org::apache::lucene::util::AttributeFactory & a0, const ::java::io::Reader & a1) const
          {
            return ::org::apache::lucene::analysis::core::LetterTokenizer(env->callObjectMethod(this$, mids$[mid_create_5d87cc2c], a0.this$, a1.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {
          static PyObject *t_LetterTokenizerFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LetterTokenizerFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_LetterTokenizerFactory_init_(t_LetterTokenizerFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_LetterTokenizerFactory_create(t_LetterTokenizerFactory *self, PyObject *args);

          static PyMethodDef t_LetterTokenizerFactory__methods_[] = {
            DECLARE_METHOD(t_LetterTokenizerFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LetterTokenizerFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LetterTokenizerFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(LetterTokenizerFactory, t_LetterTokenizerFactory, ::org::apache::lucene::analysis::util::TokenizerFactory, LetterTokenizerFactory, t_LetterTokenizerFactory_init_, 0, 0, 0, 0, 0);

          void t_LetterTokenizerFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(LetterTokenizerFactory), module, "LetterTokenizerFactory", 0);
          }

          void t_LetterTokenizerFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(LetterTokenizerFactory).tp_dict, "class_", make_descriptor(LetterTokenizerFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(LetterTokenizerFactory).tp_dict, "wrapfn_", make_descriptor(t_LetterTokenizerFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(LetterTokenizerFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_LetterTokenizerFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LetterTokenizerFactory::initializeClass, 1)))
              return NULL;
            return t_LetterTokenizerFactory::wrap_Object(LetterTokenizerFactory(((t_LetterTokenizerFactory *) arg)->object.this$));
          }
          static PyObject *t_LetterTokenizerFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LetterTokenizerFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_LetterTokenizerFactory_init_(t_LetterTokenizerFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            LetterTokenizerFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = LetterTokenizerFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_LetterTokenizerFactory_create(t_LetterTokenizerFactory *self, PyObject *args)
          {
            ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
            ::java::io::Reader a1((jobject) NULL);
            ::org::apache::lucene::analysis::core::LetterTokenizer result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.create(a0, a1));
              return ::org::apache::lucene::analysis::core::t_LetterTokenizer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(LetterTokenizerFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/processors/RemoveDeletedQueryNodesProcessor.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace processors {

              ::java::lang::Class *RemoveDeletedQueryNodesProcessor::class$ = NULL;
              jmethodID *RemoveDeletedQueryNodesProcessor::mids$ = NULL;
              bool RemoveDeletedQueryNodesProcessor::live$ = false;

              jclass RemoveDeletedQueryNodesProcessor::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/processors/RemoveDeletedQueryNodesProcessor");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_process_6705aed7] = env->getMethodID(cls, "process", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_postProcessNode_6705aed7] = env->getMethodID(cls, "postProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_preProcessNode_6705aed7] = env->getMethodID(cls, "preProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_setChildrenOrder_4f378251] = env->getMethodID(cls, "setChildrenOrder", "(Ljava/util/List;)Ljava/util/List;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              RemoveDeletedQueryNodesProcessor::RemoveDeletedQueryNodesProcessor() : ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode RemoveDeletedQueryNodesProcessor::process(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_process_6705aed7], a0.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace processors {
              static PyObject *t_RemoveDeletedQueryNodesProcessor_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_RemoveDeletedQueryNodesProcessor_instance_(PyTypeObject *type, PyObject *arg);
              static int t_RemoveDeletedQueryNodesProcessor_init_(t_RemoveDeletedQueryNodesProcessor *self, PyObject *args, PyObject *kwds);
              static PyObject *t_RemoveDeletedQueryNodesProcessor_process(t_RemoveDeletedQueryNodesProcessor *self, PyObject *args);

              static PyMethodDef t_RemoveDeletedQueryNodesProcessor__methods_[] = {
                DECLARE_METHOD(t_RemoveDeletedQueryNodesProcessor, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_RemoveDeletedQueryNodesProcessor, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_RemoveDeletedQueryNodesProcessor, process, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(RemoveDeletedQueryNodesProcessor, t_RemoveDeletedQueryNodesProcessor, ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl, RemoveDeletedQueryNodesProcessor, t_RemoveDeletedQueryNodesProcessor_init_, 0, 0, 0, 0, 0);

              void t_RemoveDeletedQueryNodesProcessor::install(PyObject *module)
              {
                installType(&PY_TYPE(RemoveDeletedQueryNodesProcessor), module, "RemoveDeletedQueryNodesProcessor", 0);
              }

              void t_RemoveDeletedQueryNodesProcessor::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(RemoveDeletedQueryNodesProcessor).tp_dict, "class_", make_descriptor(RemoveDeletedQueryNodesProcessor::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(RemoveDeletedQueryNodesProcessor).tp_dict, "wrapfn_", make_descriptor(t_RemoveDeletedQueryNodesProcessor::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(RemoveDeletedQueryNodesProcessor).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_RemoveDeletedQueryNodesProcessor_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, RemoveDeletedQueryNodesProcessor::initializeClass, 1)))
                  return NULL;
                return t_RemoveDeletedQueryNodesProcessor::wrap_Object(RemoveDeletedQueryNodesProcessor(((t_RemoveDeletedQueryNodesProcessor *) arg)->object.this$));
              }
              static PyObject *t_RemoveDeletedQueryNodesProcessor_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, RemoveDeletedQueryNodesProcessor::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_RemoveDeletedQueryNodesProcessor_init_(t_RemoveDeletedQueryNodesProcessor *self, PyObject *args, PyObject *kwds)
              {
                RemoveDeletedQueryNodesProcessor object((jobject) NULL);

                INT_CALL(object = RemoveDeletedQueryNodesProcessor());
                self->object = object;

                return 0;
              }

              static PyObject *t_RemoveDeletedQueryNodesProcessor_process(t_RemoveDeletedQueryNodesProcessor *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.process(a0));
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(RemoveDeletedQueryNodesProcessor), (PyObject *) self, "process", args, 2);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/en/EnglishAnalyzer.h"
#include "org/apache/lucene/util/Version.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace en {

          ::java::lang::Class *EnglishAnalyzer::class$ = NULL;
          jmethodID *EnglishAnalyzer::mids$ = NULL;
          bool EnglishAnalyzer::live$ = false;

          jclass EnglishAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/en/EnglishAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_6d1f9881] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_0d96cf33] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;)V");
              mids$[mid_init$_3ea629c6] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/util/CharArraySet;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_83eafe28] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_c9d7e4a3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_getDefaultStopSet_d2d3505c] = env->getStaticMethodID(cls, "getDefaultStopSet", "()Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          EnglishAnalyzer::EnglishAnalyzer() : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          EnglishAnalyzer::EnglishAnalyzer(const ::org::apache::lucene::analysis::util::CharArraySet & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_6d1f9881, a0.this$)) {}

          EnglishAnalyzer::EnglishAnalyzer(const ::org::apache::lucene::util::Version & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_0d96cf33, a0.this$)) {}

          EnglishAnalyzer::EnglishAnalyzer(const ::org::apache::lucene::analysis::util::CharArraySet & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_3ea629c6, a0.this$, a1.this$)) {}

          EnglishAnalyzer::EnglishAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_83eafe28, a0.this$, a1.this$)) {}

          EnglishAnalyzer::EnglishAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1, const ::org::apache::lucene::analysis::util::CharArraySet & a2) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_c9d7e4a3, a0.this$, a1.this$, a2.this$)) {}

          ::org::apache::lucene::analysis::util::CharArraySet EnglishAnalyzer::getDefaultStopSet()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getDefaultStopSet_d2d3505c]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace en {
          static PyObject *t_EnglishAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_EnglishAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_EnglishAnalyzer_init_(t_EnglishAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_EnglishAnalyzer_getDefaultStopSet(PyTypeObject *type);
          static PyObject *t_EnglishAnalyzer_get__defaultStopSet(t_EnglishAnalyzer *self, void *data);
          static PyGetSetDef t_EnglishAnalyzer__fields_[] = {
            DECLARE_GET_FIELD(t_EnglishAnalyzer, defaultStopSet),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_EnglishAnalyzer__methods_[] = {
            DECLARE_METHOD(t_EnglishAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_EnglishAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_EnglishAnalyzer, getDefaultStopSet, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(EnglishAnalyzer, t_EnglishAnalyzer, ::org::apache::lucene::analysis::util::StopwordAnalyzerBase, EnglishAnalyzer, t_EnglishAnalyzer_init_, 0, 0, t_EnglishAnalyzer__fields_, 0, 0);

          void t_EnglishAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(EnglishAnalyzer), module, "EnglishAnalyzer", 0);
          }

          void t_EnglishAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(EnglishAnalyzer).tp_dict, "class_", make_descriptor(EnglishAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(EnglishAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_EnglishAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(EnglishAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_EnglishAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, EnglishAnalyzer::initializeClass, 1)))
              return NULL;
            return t_EnglishAnalyzer::wrap_Object(EnglishAnalyzer(((t_EnglishAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_EnglishAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, EnglishAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_EnglishAnalyzer_init_(t_EnglishAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                EnglishAnalyzer object((jobject) NULL);

                INT_CALL(object = EnglishAnalyzer());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                ::org::apache::lucene::analysis::util::CharArraySet a0((jobject) NULL);
                PyTypeObject **p0;
                EnglishAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = EnglishAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                EnglishAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::util::Version::initializeClass, &a0))
                {
                  INT_CALL(object = EnglishAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::analysis::util::CharArraySet a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                EnglishAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = EnglishAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                EnglishAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "kK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = EnglishAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                ::org::apache::lucene::analysis::util::CharArraySet a2((jobject) NULL);
                PyTypeObject **p2;
                EnglishAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "kKK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_, &a2, &p2, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = EnglishAnalyzer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_EnglishAnalyzer_getDefaultStopSet(PyTypeObject *type)
          {
            ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::en::EnglishAnalyzer::getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_EnglishAnalyzer_get__defaultStopSet(t_EnglishAnalyzer *self, void *data)
          {
            ::org::apache::lucene::analysis::util::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/PrefixTermsEnum.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/index/TermsEnum.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *PrefixTermsEnum::class$ = NULL;
        jmethodID *PrefixTermsEnum::mids$ = NULL;
        bool PrefixTermsEnum::live$ = false;

        jclass PrefixTermsEnum::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/PrefixTermsEnum");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_acc8615c] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/TermsEnum;Lorg/apache/lucene/util/BytesRef;)V");
            mids$[mid_accept_30bc08e1] = env->getMethodID(cls, "accept", "(Lorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/index/FilteredTermsEnum$AcceptStatus;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PrefixTermsEnum::PrefixTermsEnum(const ::org::apache::lucene::index::TermsEnum & a0, const ::org::apache::lucene::util::BytesRef & a1) : ::org::apache::lucene::index::FilteredTermsEnum(env->newObject(initializeClass, &mids$, mid_init$_acc8615c, a0.this$, a1.this$)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_PrefixTermsEnum_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PrefixTermsEnum_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PrefixTermsEnum_init_(t_PrefixTermsEnum *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_PrefixTermsEnum__methods_[] = {
          DECLARE_METHOD(t_PrefixTermsEnum, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PrefixTermsEnum, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PrefixTermsEnum, t_PrefixTermsEnum, ::org::apache::lucene::index::FilteredTermsEnum, PrefixTermsEnum, t_PrefixTermsEnum_init_, 0, 0, 0, 0, 0);

        void t_PrefixTermsEnum::install(PyObject *module)
        {
          installType(&PY_TYPE(PrefixTermsEnum), module, "PrefixTermsEnum", 0);
        }

        void t_PrefixTermsEnum::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PrefixTermsEnum).tp_dict, "class_", make_descriptor(PrefixTermsEnum::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PrefixTermsEnum).tp_dict, "wrapfn_", make_descriptor(t_PrefixTermsEnum::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PrefixTermsEnum).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_PrefixTermsEnum_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PrefixTermsEnum::initializeClass, 1)))
            return NULL;
          return t_PrefixTermsEnum::wrap_Object(PrefixTermsEnum(((t_PrefixTermsEnum *) arg)->object.this$));
        }
        static PyObject *t_PrefixTermsEnum_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PrefixTermsEnum::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PrefixTermsEnum_init_(t_PrefixTermsEnum *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::index::TermsEnum a0((jobject) NULL);
          ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
          PrefixTermsEnum object((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::index::TermsEnum::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
          {
            INT_CALL(object = PrefixTermsEnum(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/IntAssociationFacetField.h"
#include "java/lang/String.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {

          ::java::lang::Class *IntAssociationFacetField::class$ = NULL;
          jmethodID *IntAssociationFacetField::mids$ = NULL;
          bool IntAssociationFacetField::live$ = false;

          jclass IntAssociationFacetField::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/IntAssociationFacetField");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_6b7c0b54] = env->getMethodID(cls, "<init>", "(ILjava/lang/String;[Ljava/lang/String;)V");
              mids$[mid_bytesRefToInt_7bc03ddb] = env->getStaticMethodID(cls, "bytesRefToInt", "(Lorg/apache/lucene/util/BytesRef;)I");
              mids$[mid_intToBytesRef_b57e9c3f] = env->getStaticMethodID(cls, "intToBytesRef", "(I)Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          IntAssociationFacetField::IntAssociationFacetField(jint a0, const ::java::lang::String & a1, const JArray< ::java::lang::String > & a2) : ::org::apache::lucene::facet::taxonomy::AssociationFacetField(env->newObject(initializeClass, &mids$, mid_init$_6b7c0b54, a0, a1.this$, a2.this$)) {}

          jint IntAssociationFacetField::bytesRefToInt(const ::org::apache::lucene::util::BytesRef & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticIntMethod(cls, mids$[mid_bytesRefToInt_7bc03ddb], a0.this$);
          }

          ::org::apache::lucene::util::BytesRef IntAssociationFacetField::intToBytesRef(jint a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::BytesRef(env->callStaticObjectMethod(cls, mids$[mid_intToBytesRef_b57e9c3f], a0));
          }

          ::java::lang::String IntAssociationFacetField::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          static PyObject *t_IntAssociationFacetField_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IntAssociationFacetField_instance_(PyTypeObject *type, PyObject *arg);
          static int t_IntAssociationFacetField_init_(t_IntAssociationFacetField *self, PyObject *args, PyObject *kwds);
          static PyObject *t_IntAssociationFacetField_bytesRefToInt(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IntAssociationFacetField_intToBytesRef(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IntAssociationFacetField_toString(t_IntAssociationFacetField *self, PyObject *args);

          static PyMethodDef t_IntAssociationFacetField__methods_[] = {
            DECLARE_METHOD(t_IntAssociationFacetField, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IntAssociationFacetField, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IntAssociationFacetField, bytesRefToInt, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IntAssociationFacetField, intToBytesRef, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IntAssociationFacetField, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(IntAssociationFacetField, t_IntAssociationFacetField, ::org::apache::lucene::facet::taxonomy::AssociationFacetField, IntAssociationFacetField, t_IntAssociationFacetField_init_, 0, 0, 0, 0, 0);

          void t_IntAssociationFacetField::install(PyObject *module)
          {
            installType(&PY_TYPE(IntAssociationFacetField), module, "IntAssociationFacetField", 0);
          }

          void t_IntAssociationFacetField::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(IntAssociationFacetField).tp_dict, "class_", make_descriptor(IntAssociationFacetField::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(IntAssociationFacetField).tp_dict, "wrapfn_", make_descriptor(t_IntAssociationFacetField::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(IntAssociationFacetField).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_IntAssociationFacetField_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, IntAssociationFacetField::initializeClass, 1)))
              return NULL;
            return t_IntAssociationFacetField::wrap_Object(IntAssociationFacetField(((t_IntAssociationFacetField *) arg)->object.this$));
          }
          static PyObject *t_IntAssociationFacetField_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, IntAssociationFacetField::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_IntAssociationFacetField_init_(t_IntAssociationFacetField *self, PyObject *args, PyObject *kwds)
          {
            jint a0;
            ::java::lang::String a1((jobject) NULL);
            JArray< ::java::lang::String > a2((jobject) NULL);
            IntAssociationFacetField object((jobject) NULL);

            if (!parseArgs(args, "Is[s", &a0, &a1, &a2))
            {
              INT_CALL(object = IntAssociationFacetField(a0, a1, a2));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_IntAssociationFacetField_bytesRefToInt(PyTypeObject *type, PyObject *arg)
          {
            ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
            jint result;

            if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::facet::taxonomy::IntAssociationFacetField::bytesRefToInt(a0));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError(type, "bytesRefToInt", arg);
            return NULL;
          }

          static PyObject *t_IntAssociationFacetField_intToBytesRef(PyTypeObject *type, PyObject *arg)
          {
            jint a0;
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::facet::taxonomy::IntAssociationFacetField::intToBytesRef(a0));
              return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "intToBytesRef", arg);
            return NULL;
          }

          static PyObject *t_IntAssociationFacetField_toString(t_IntAssociationFacetField *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(IntAssociationFacetField), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/no/NorwegianLightStemmer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace no {

          ::java::lang::Class *NorwegianLightStemmer::class$ = NULL;
          jmethodID *NorwegianLightStemmer::mids$ = NULL;
          bool NorwegianLightStemmer::live$ = false;
          jint NorwegianLightStemmer::BOKMAAL = (jint) 0;
          jint NorwegianLightStemmer::NYNORSK = (jint) 0;

          jclass NorwegianLightStemmer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/no/NorwegianLightStemmer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
              mids$[mid_stem_ec6430eb] = env->getMethodID(cls, "stem", "([CI)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              BOKMAAL = env->getStaticIntField(cls, "BOKMAAL");
              NYNORSK = env->getStaticIntField(cls, "NYNORSK");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          NorwegianLightStemmer::NorwegianLightStemmer(jint a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

          jint NorwegianLightStemmer::stem(const JArray< jchar > & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_stem_ec6430eb], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace no {
          static PyObject *t_NorwegianLightStemmer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_NorwegianLightStemmer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_NorwegianLightStemmer_init_(t_NorwegianLightStemmer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_NorwegianLightStemmer_stem(t_NorwegianLightStemmer *self, PyObject *args);

          static PyMethodDef t_NorwegianLightStemmer__methods_[] = {
            DECLARE_METHOD(t_NorwegianLightStemmer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NorwegianLightStemmer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NorwegianLightStemmer, stem, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(NorwegianLightStemmer, t_NorwegianLightStemmer, ::java::lang::Object, NorwegianLightStemmer, t_NorwegianLightStemmer_init_, 0, 0, 0, 0, 0);

          void t_NorwegianLightStemmer::install(PyObject *module)
          {
            installType(&PY_TYPE(NorwegianLightStemmer), module, "NorwegianLightStemmer", 0);
          }

          void t_NorwegianLightStemmer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(NorwegianLightStemmer).tp_dict, "class_", make_descriptor(NorwegianLightStemmer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(NorwegianLightStemmer).tp_dict, "wrapfn_", make_descriptor(t_NorwegianLightStemmer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(NorwegianLightStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(NorwegianLightStemmer::initializeClass);
            PyDict_SetItemString(PY_TYPE(NorwegianLightStemmer).tp_dict, "BOKMAAL", make_descriptor(NorwegianLightStemmer::BOKMAAL));
            PyDict_SetItemString(PY_TYPE(NorwegianLightStemmer).tp_dict, "NYNORSK", make_descriptor(NorwegianLightStemmer::NYNORSK));
          }

          static PyObject *t_NorwegianLightStemmer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, NorwegianLightStemmer::initializeClass, 1)))
              return NULL;
            return t_NorwegianLightStemmer::wrap_Object(NorwegianLightStemmer(((t_NorwegianLightStemmer *) arg)->object.this$));
          }
          static PyObject *t_NorwegianLightStemmer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, NorwegianLightStemmer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_NorwegianLightStemmer_init_(t_NorwegianLightStemmer *self, PyObject *args, PyObject *kwds)
          {
            jint a0;
            NorwegianLightStemmer object((jobject) NULL);

            if (!parseArgs(args, "I", &a0))
            {
              INT_CALL(object = NorwegianLightStemmer(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_NorwegianLightStemmer_stem(t_NorwegianLightStemmer *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(result = self->object.stem(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "stem", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spell/DirectSpellChecker.h"
#include "org/apache/lucene/search/spell/StringDistance.h"
#include "org/apache/lucene/search/spell/SuggestWord.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/spell/SuggestMode.h"
#include "org/apache/lucene/index/Term.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "java/util/Comparator.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {

          ::java::lang::Class *DirectSpellChecker::class$ = NULL;
          jmethodID *DirectSpellChecker::mids$ = NULL;
          bool DirectSpellChecker::live$ = false;
          ::org::apache::lucene::search::spell::StringDistance *DirectSpellChecker::INTERNAL_LEVENSHTEIN = NULL;

          jclass DirectSpellChecker::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spell/DirectSpellChecker");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_getAccuracy_54c6a176] = env->getMethodID(cls, "getAccuracy", "()F");
              mids$[mid_getComparator_5a7ff2fc] = env->getMethodID(cls, "getComparator", "()Ljava/util/Comparator;");
              mids$[mid_getDistance_a5face5e] = env->getMethodID(cls, "getDistance", "()Lorg/apache/lucene/search/spell/StringDistance;");
              mids$[mid_getLowerCaseTerms_54c6a16a] = env->getMethodID(cls, "getLowerCaseTerms", "()Z");
              mids$[mid_getMaxEdits_54c6a179] = env->getMethodID(cls, "getMaxEdits", "()I");
              mids$[mid_getMaxInspections_54c6a179] = env->getMethodID(cls, "getMaxInspections", "()I");
              mids$[mid_getMaxQueryFrequency_54c6a176] = env->getMethodID(cls, "getMaxQueryFrequency", "()F");
              mids$[mid_getMinPrefix_54c6a179] = env->getMethodID(cls, "getMinPrefix", "()I");
              mids$[mid_getMinQueryLength_54c6a179] = env->getMethodID(cls, "getMinQueryLength", "()I");
              mids$[mid_getThresholdFrequency_54c6a176] = env->getMethodID(cls, "getThresholdFrequency", "()F");
              mids$[mid_setAccuracy_06298cab] = env->getMethodID(cls, "setAccuracy", "(F)V");
              mids$[mid_setComparator_6ffdd545] = env->getMethodID(cls, "setComparator", "(Ljava/util/Comparator;)V");
              mids$[mid_setDistance_9c934047] = env->getMethodID(cls, "setDistance", "(Lorg/apache/lucene/search/spell/StringDistance;)V");
              mids$[mid_setLowerCaseTerms_bb0c767f] = env->getMethodID(cls, "setLowerCaseTerms", "(Z)V");
              mids$[mid_setMaxEdits_39c7bd3c] = env->getMethodID(cls, "setMaxEdits", "(I)V");
              mids$[mid_setMaxInspections_39c7bd3c] = env->getMethodID(cls, "setMaxInspections", "(I)V");
              mids$[mid_setMaxQueryFrequency_06298cab] = env->getMethodID(cls, "setMaxQueryFrequency", "(F)V");
              mids$[mid_setMinPrefix_39c7bd3c] = env->getMethodID(cls, "setMinPrefix", "(I)V");
              mids$[mid_setMinQueryLength_39c7bd3c] = env->getMethodID(cls, "setMinQueryLength", "(I)V");
              mids$[mid_setThresholdFrequency_06298cab] = env->getMethodID(cls, "setThresholdFrequency", "(F)V");
              mids$[mid_suggestSimilar_45727077] = env->getMethodID(cls, "suggestSimilar", "(Lorg/apache/lucene/index/Term;ILorg/apache/lucene/index/IndexReader;)[Lorg/apache/lucene/search/spell/SuggestWord;");
              mids$[mid_suggestSimilar_cd50864e] = env->getMethodID(cls, "suggestSimilar", "(Lorg/apache/lucene/index/Term;ILorg/apache/lucene/index/IndexReader;Lorg/apache/lucene/search/spell/SuggestMode;)[Lorg/apache/lucene/search/spell/SuggestWord;");
              mids$[mid_suggestSimilar_96cb19cd] = env->getMethodID(cls, "suggestSimilar", "(Lorg/apache/lucene/index/Term;ILorg/apache/lucene/index/IndexReader;Lorg/apache/lucene/search/spell/SuggestMode;F)[Lorg/apache/lucene/search/spell/SuggestWord;");
              mids$[mid_suggestSimilar_b8136be1] = env->getMethodID(cls, "suggestSimilar", "(Lorg/apache/lucene/index/Term;ILorg/apache/lucene/index/IndexReader;IIFLorg/apache/lucene/util/CharsRefBuilder;)Ljava/util/Collection;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              INTERNAL_LEVENSHTEIN = new ::org::apache::lucene::search::spell::StringDistance(env->getStaticObjectField(cls, "INTERNAL_LEVENSHTEIN", "Lorg/apache/lucene/search/spell/StringDistance;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          DirectSpellChecker::DirectSpellChecker() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jfloat DirectSpellChecker::getAccuracy() const
          {
            return env->callFloatMethod(this$, mids$[mid_getAccuracy_54c6a176]);
          }

          ::java::util::Comparator DirectSpellChecker::getComparator() const
          {
            return ::java::util::Comparator(env->callObjectMethod(this$, mids$[mid_getComparator_5a7ff2fc]));
          }

          ::org::apache::lucene::search::spell::StringDistance DirectSpellChecker::getDistance() const
          {
            return ::org::apache::lucene::search::spell::StringDistance(env->callObjectMethod(this$, mids$[mid_getDistance_a5face5e]));
          }

          jboolean DirectSpellChecker::getLowerCaseTerms() const
          {
            return env->callBooleanMethod(this$, mids$[mid_getLowerCaseTerms_54c6a16a]);
          }

          jint DirectSpellChecker::getMaxEdits() const
          {
            return env->callIntMethod(this$, mids$[mid_getMaxEdits_54c6a179]);
          }

          jint DirectSpellChecker::getMaxInspections() const
          {
            return env->callIntMethod(this$, mids$[mid_getMaxInspections_54c6a179]);
          }

          jfloat DirectSpellChecker::getMaxQueryFrequency() const
          {
            return env->callFloatMethod(this$, mids$[mid_getMaxQueryFrequency_54c6a176]);
          }

          jint DirectSpellChecker::getMinPrefix() const
          {
            return env->callIntMethod(this$, mids$[mid_getMinPrefix_54c6a179]);
          }

          jint DirectSpellChecker::getMinQueryLength() const
          {
            return env->callIntMethod(this$, mids$[mid_getMinQueryLength_54c6a179]);
          }

          jfloat DirectSpellChecker::getThresholdFrequency() const
          {
            return env->callFloatMethod(this$, mids$[mid_getThresholdFrequency_54c6a176]);
          }

          void DirectSpellChecker::setAccuracy(jfloat a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setAccuracy_06298cab], a0);
          }

          void DirectSpellChecker::setComparator(const ::java::util::Comparator & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setComparator_6ffdd545], a0.this$);
          }

          void DirectSpellChecker::setDistance(const ::org::apache::lucene::search::spell::StringDistance & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setDistance_9c934047], a0.this$);
          }

          void DirectSpellChecker::setLowerCaseTerms(jboolean a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setLowerCaseTerms_bb0c767f], a0);
          }

          void DirectSpellChecker::setMaxEdits(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMaxEdits_39c7bd3c], a0);
          }

          void DirectSpellChecker::setMaxInspections(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMaxInspections_39c7bd3c], a0);
          }

          void DirectSpellChecker::setMaxQueryFrequency(jfloat a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMaxQueryFrequency_06298cab], a0);
          }

          void DirectSpellChecker::setMinPrefix(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMinPrefix_39c7bd3c], a0);
          }

          void DirectSpellChecker::setMinQueryLength(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMinQueryLength_39c7bd3c], a0);
          }

          void DirectSpellChecker::setThresholdFrequency(jfloat a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setThresholdFrequency_06298cab], a0);
          }

          JArray< ::org::apache::lucene::search::spell::SuggestWord > DirectSpellChecker::suggestSimilar(const ::org::apache::lucene::index::Term & a0, jint a1, const ::org::apache::lucene::index::IndexReader & a2) const
          {
            return JArray< ::org::apache::lucene::search::spell::SuggestWord >(env->callObjectMethod(this$, mids$[mid_suggestSimilar_45727077], a0.this$, a1, a2.this$));
          }

          JArray< ::org::apache::lucene::search::spell::SuggestWord > DirectSpellChecker::suggestSimilar(const ::org::apache::lucene::index::Term & a0, jint a1, const ::org::apache::lucene::index::IndexReader & a2, const ::org::apache::lucene::search::spell::SuggestMode & a3) const
          {
            return JArray< ::org::apache::lucene::search::spell::SuggestWord >(env->callObjectMethod(this$, mids$[mid_suggestSimilar_cd50864e], a0.this$, a1, a2.this$, a3.this$));
          }

          JArray< ::org::apache::lucene::search::spell::SuggestWord > DirectSpellChecker::suggestSimilar(const ::org::apache::lucene::index::Term & a0, jint a1, const ::org::apache::lucene::index::IndexReader & a2, const ::org::apache::lucene::search::spell::SuggestMode & a3, jfloat a4) const
          {
            return JArray< ::org::apache::lucene::search::spell::SuggestWord >(env->callObjectMethod(this$, mids$[mid_suggestSimilar_96cb19cd], a0.this$, a1, a2.this$, a3.this$, a4));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {
          static PyObject *t_DirectSpellChecker_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DirectSpellChecker_instance_(PyTypeObject *type, PyObject *arg);
          static int t_DirectSpellChecker_init_(t_DirectSpellChecker *self, PyObject *args, PyObject *kwds);
          static PyObject *t_DirectSpellChecker_getAccuracy(t_DirectSpellChecker *self);
          static PyObject *t_DirectSpellChecker_getComparator(t_DirectSpellChecker *self);
          static PyObject *t_DirectSpellChecker_getDistance(t_DirectSpellChecker *self);
          static PyObject *t_DirectSpellChecker_getLowerCaseTerms(t_DirectSpellChecker *self);
          static PyObject *t_DirectSpellChecker_getMaxEdits(t_DirectSpellChecker *self);
          static PyObject *t_DirectSpellChecker_getMaxInspections(t_DirectSpellChecker *self);
          static PyObject *t_DirectSpellChecker_getMaxQueryFrequency(t_DirectSpellChecker *self);
          static PyObject *t_DirectSpellChecker_getMinPrefix(t_DirectSpellChecker *self);
          static PyObject *t_DirectSpellChecker_getMinQueryLength(t_DirectSpellChecker *self);
          static PyObject *t_DirectSpellChecker_getThresholdFrequency(t_DirectSpellChecker *self);
          static PyObject *t_DirectSpellChecker_setAccuracy(t_DirectSpellChecker *self, PyObject *arg);
          static PyObject *t_DirectSpellChecker_setComparator(t_DirectSpellChecker *self, PyObject *arg);
          static PyObject *t_DirectSpellChecker_setDistance(t_DirectSpellChecker *self, PyObject *arg);
          static PyObject *t_DirectSpellChecker_setLowerCaseTerms(t_DirectSpellChecker *self, PyObject *arg);
          static PyObject *t_DirectSpellChecker_setMaxEdits(t_DirectSpellChecker *self, PyObject *arg);
          static PyObject *t_DirectSpellChecker_setMaxInspections(t_DirectSpellChecker *self, PyObject *arg);
          static PyObject *t_DirectSpellChecker_setMaxQueryFrequency(t_DirectSpellChecker *self, PyObject *arg);
          static PyObject *t_DirectSpellChecker_setMinPrefix(t_DirectSpellChecker *self, PyObject *arg);
          static PyObject *t_DirectSpellChecker_setMinQueryLength(t_DirectSpellChecker *self, PyObject *arg);
          static PyObject *t_DirectSpellChecker_setThresholdFrequency(t_DirectSpellChecker *self, PyObject *arg);
          static PyObject *t_DirectSpellChecker_suggestSimilar(t_DirectSpellChecker *self, PyObject *args);
          static PyObject *t_DirectSpellChecker_get__accuracy(t_DirectSpellChecker *self, void *data);
          static int t_DirectSpellChecker_set__accuracy(t_DirectSpellChecker *self, PyObject *arg, void *data);
          static PyObject *t_DirectSpellChecker_get__comparator(t_DirectSpellChecker *self, void *data);
          static int t_DirectSpellChecker_set__comparator(t_DirectSpellChecker *self, PyObject *arg, void *data);
          static PyObject *t_DirectSpellChecker_get__distance(t_DirectSpellChecker *self, void *data);
          static int t_DirectSpellChecker_set__distance(t_DirectSpellChecker *self, PyObject *arg, void *data);
          static PyObject *t_DirectSpellChecker_get__lowerCaseTerms(t_DirectSpellChecker *self, void *data);
          static int t_DirectSpellChecker_set__lowerCaseTerms(t_DirectSpellChecker *self, PyObject *arg, void *data);
          static PyObject *t_DirectSpellChecker_get__maxEdits(t_DirectSpellChecker *self, void *data);
          static int t_DirectSpellChecker_set__maxEdits(t_DirectSpellChecker *self, PyObject *arg, void *data);
          static PyObject *t_DirectSpellChecker_get__maxInspections(t_DirectSpellChecker *self, void *data);
          static int t_DirectSpellChecker_set__maxInspections(t_DirectSpellChecker *self, PyObject *arg, void *data);
          static PyObject *t_DirectSpellChecker_get__maxQueryFrequency(t_DirectSpellChecker *self, void *data);
          static int t_DirectSpellChecker_set__maxQueryFrequency(t_DirectSpellChecker *self, PyObject *arg, void *data);
          static PyObject *t_DirectSpellChecker_get__minPrefix(t_DirectSpellChecker *self, void *data);
          static int t_DirectSpellChecker_set__minPrefix(t_DirectSpellChecker *self, PyObject *arg, void *data);
          static PyObject *t_DirectSpellChecker_get__minQueryLength(t_DirectSpellChecker *self, void *data);
          static int t_DirectSpellChecker_set__minQueryLength(t_DirectSpellChecker *self, PyObject *arg, void *data);
          static PyObject *t_DirectSpellChecker_get__thresholdFrequency(t_DirectSpellChecker *self, void *data);
          static int t_DirectSpellChecker_set__thresholdFrequency(t_DirectSpellChecker *self, PyObject *arg, void *data);
          static PyGetSetDef t_DirectSpellChecker__fields_[] = {
            DECLARE_GETSET_FIELD(t_DirectSpellChecker, accuracy),
            DECLARE_GETSET_FIELD(t_DirectSpellChecker, comparator),
            DECLARE_GETSET_FIELD(t_DirectSpellChecker, distance),
            DECLARE_GETSET_FIELD(t_DirectSpellChecker, lowerCaseTerms),
            DECLARE_GETSET_FIELD(t_DirectSpellChecker, maxEdits),
            DECLARE_GETSET_FIELD(t_DirectSpellChecker, maxInspections),
            DECLARE_GETSET_FIELD(t_DirectSpellChecker, maxQueryFrequency),
            DECLARE_GETSET_FIELD(t_DirectSpellChecker, minPrefix),
            DECLARE_GETSET_FIELD(t_DirectSpellChecker, minQueryLength),
            DECLARE_GETSET_FIELD(t_DirectSpellChecker, thresholdFrequency),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_DirectSpellChecker__methods_[] = {
            DECLARE_METHOD(t_DirectSpellChecker, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DirectSpellChecker, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DirectSpellChecker, getAccuracy, METH_NOARGS),
            DECLARE_METHOD(t_DirectSpellChecker, getComparator, METH_NOARGS),
            DECLARE_METHOD(t_DirectSpellChecker, getDistance, METH_NOARGS),
            DECLARE_METHOD(t_DirectSpellChecker, getLowerCaseTerms, METH_NOARGS),
            DECLARE_METHOD(t_DirectSpellChecker, getMaxEdits, METH_NOARGS),
            DECLARE_METHOD(t_DirectSpellChecker, getMaxInspections, METH_NOARGS),
            DECLARE_METHOD(t_DirectSpellChecker, getMaxQueryFrequency, METH_NOARGS),
            DECLARE_METHOD(t_DirectSpellChecker, getMinPrefix, METH_NOARGS),
            DECLARE_METHOD(t_DirectSpellChecker, getMinQueryLength, METH_NOARGS),
            DECLARE_METHOD(t_DirectSpellChecker, getThresholdFrequency, METH_NOARGS),
            DECLARE_METHOD(t_DirectSpellChecker, setAccuracy, METH_O),
            DECLARE_METHOD(t_DirectSpellChecker, setComparator, METH_O),
            DECLARE_METHOD(t_DirectSpellChecker, setDistance, METH_O),
            DECLARE_METHOD(t_DirectSpellChecker, setLowerCaseTerms, METH_O),
            DECLARE_METHOD(t_DirectSpellChecker, setMaxEdits, METH_O),
            DECLARE_METHOD(t_DirectSpellChecker, setMaxInspections, METH_O),
            DECLARE_METHOD(t_DirectSpellChecker, setMaxQueryFrequency, METH_O),
            DECLARE_METHOD(t_DirectSpellChecker, setMinPrefix, METH_O),
            DECLARE_METHOD(t_DirectSpellChecker, setMinQueryLength, METH_O),
            DECLARE_METHOD(t_DirectSpellChecker, setThresholdFrequency, METH_O),
            DECLARE_METHOD(t_DirectSpellChecker, suggestSimilar, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(DirectSpellChecker, t_DirectSpellChecker, ::java::lang::Object, DirectSpellChecker, t_DirectSpellChecker_init_, 0, 0, t_DirectSpellChecker__fields_, 0, 0);

          void t_DirectSpellChecker::install(PyObject *module)
          {
            installType(&PY_TYPE(DirectSpellChecker), module, "DirectSpellChecker", 0);
          }

          void t_DirectSpellChecker::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(DirectSpellChecker).tp_dict, "class_", make_descriptor(DirectSpellChecker::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(DirectSpellChecker).tp_dict, "wrapfn_", make_descriptor(t_DirectSpellChecker::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(DirectSpellChecker).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(DirectSpellChecker::initializeClass);
            PyDict_SetItemString(PY_TYPE(DirectSpellChecker).tp_dict, "INTERNAL_LEVENSHTEIN", make_descriptor(::org::apache::lucene::search::spell::t_StringDistance::wrap_Object(*DirectSpellChecker::INTERNAL_LEVENSHTEIN)));
          }

          static PyObject *t_DirectSpellChecker_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, DirectSpellChecker::initializeClass, 1)))
              return NULL;
            return t_DirectSpellChecker::wrap_Object(DirectSpellChecker(((t_DirectSpellChecker *) arg)->object.this$));
          }
          static PyObject *t_DirectSpellChecker_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, DirectSpellChecker::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_DirectSpellChecker_init_(t_DirectSpellChecker *self, PyObject *args, PyObject *kwds)
          {
            DirectSpellChecker object((jobject) NULL);

            INT_CALL(object = DirectSpellChecker());
            self->object = object;

            return 0;
          }

          static PyObject *t_DirectSpellChecker_getAccuracy(t_DirectSpellChecker *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getAccuracy());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_DirectSpellChecker_getComparator(t_DirectSpellChecker *self)
          {
            ::java::util::Comparator result((jobject) NULL);
            OBJ_CALL(result = self->object.getComparator());
            return ::java::util::t_Comparator::wrap_Object(result, &::org::apache::lucene::search::spell::PY_TYPE(SuggestWord));
          }

          static PyObject *t_DirectSpellChecker_getDistance(t_DirectSpellChecker *self)
          {
            ::org::apache::lucene::search::spell::StringDistance result((jobject) NULL);
            OBJ_CALL(result = self->object.getDistance());
            return ::org::apache::lucene::search::spell::t_StringDistance::wrap_Object(result);
          }

          static PyObject *t_DirectSpellChecker_getLowerCaseTerms(t_DirectSpellChecker *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.getLowerCaseTerms());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_DirectSpellChecker_getMaxEdits(t_DirectSpellChecker *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getMaxEdits());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_DirectSpellChecker_getMaxInspections(t_DirectSpellChecker *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getMaxInspections());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_DirectSpellChecker_getMaxQueryFrequency(t_DirectSpellChecker *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getMaxQueryFrequency());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_DirectSpellChecker_getMinPrefix(t_DirectSpellChecker *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getMinPrefix());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_DirectSpellChecker_getMinQueryLength(t_DirectSpellChecker *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getMinQueryLength());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_DirectSpellChecker_getThresholdFrequency(t_DirectSpellChecker *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getThresholdFrequency());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_DirectSpellChecker_setAccuracy(t_DirectSpellChecker *self, PyObject *arg)
          {
            jfloat a0;

            if (!parseArg(arg, "F", &a0))
            {
              OBJ_CALL(self->object.setAccuracy(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setAccuracy", arg);
            return NULL;
          }

          static PyObject *t_DirectSpellChecker_setComparator(t_DirectSpellChecker *self, PyObject *arg)
          {
            ::java::util::Comparator a0((jobject) NULL);
            PyTypeObject **p0;

            if (!parseArg(arg, "K", ::java::util::Comparator::initializeClass, &a0, &p0, ::java::util::t_Comparator::parameters_))
            {
              OBJ_CALL(self->object.setComparator(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setComparator", arg);
            return NULL;
          }

          static PyObject *t_DirectSpellChecker_setDistance(t_DirectSpellChecker *self, PyObject *arg)
          {
            ::org::apache::lucene::search::spell::StringDistance a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::search::spell::StringDistance::initializeClass, &a0))
            {
              OBJ_CALL(self->object.setDistance(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setDistance", arg);
            return NULL;
          }

          static PyObject *t_DirectSpellChecker_setLowerCaseTerms(t_DirectSpellChecker *self, PyObject *arg)
          {
            jboolean a0;

            if (!parseArg(arg, "Z", &a0))
            {
              OBJ_CALL(self->object.setLowerCaseTerms(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setLowerCaseTerms", arg);
            return NULL;
          }

          static PyObject *t_DirectSpellChecker_setMaxEdits(t_DirectSpellChecker *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setMaxEdits(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMaxEdits", arg);
            return NULL;
          }

          static PyObject *t_DirectSpellChecker_setMaxInspections(t_DirectSpellChecker *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setMaxInspections(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMaxInspections", arg);
            return NULL;
          }

          static PyObject *t_DirectSpellChecker_setMaxQueryFrequency(t_DirectSpellChecker *self, PyObject *arg)
          {
            jfloat a0;

            if (!parseArg(arg, "F", &a0))
            {
              OBJ_CALL(self->object.setMaxQueryFrequency(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMaxQueryFrequency", arg);
            return NULL;
          }

          static PyObject *t_DirectSpellChecker_setMinPrefix(t_DirectSpellChecker *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setMinPrefix(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMinPrefix", arg);
            return NULL;
          }

          static PyObject *t_DirectSpellChecker_setMinQueryLength(t_DirectSpellChecker *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setMinQueryLength(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMinQueryLength", arg);
            return NULL;
          }

          static PyObject *t_DirectSpellChecker_setThresholdFrequency(t_DirectSpellChecker *self, PyObject *arg)
          {
            jfloat a0;

            if (!parseArg(arg, "F", &a0))
            {
              OBJ_CALL(self->object.setThresholdFrequency(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setThresholdFrequency", arg);
            return NULL;
          }

          static PyObject *t_DirectSpellChecker_suggestSimilar(t_DirectSpellChecker *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 3:
              {
                ::org::apache::lucene::index::Term a0((jobject) NULL);
                jint a1;
                ::org::apache::lucene::index::IndexReader a2((jobject) NULL);
                JArray< ::org::apache::lucene::search::spell::SuggestWord > result((jobject) NULL);

                if (!parseArgs(args, "kIk", ::org::apache::lucene::index::Term::initializeClass, ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &a1, &a2))
                {
                  OBJ_CALL(result = self->object.suggestSimilar(a0, a1, a2));
                  return JArray<jobject>(result.this$).wrap(::org::apache::lucene::search::spell::t_SuggestWord::wrap_jobject);
                }
              }
              break;
             case 4:
              {
                ::org::apache::lucene::index::Term a0((jobject) NULL);
                jint a1;
                ::org::apache::lucene::index::IndexReader a2((jobject) NULL);
                ::org::apache::lucene::search::spell::SuggestMode a3((jobject) NULL);
                PyTypeObject **p3;
                JArray< ::org::apache::lucene::search::spell::SuggestWord > result((jobject) NULL);

                if (!parseArgs(args, "kIkK", ::org::apache::lucene::index::Term::initializeClass, ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::search::spell::SuggestMode::initializeClass, &a0, &a1, &a2, &a3, &p3, ::org::apache::lucene::search::spell::t_SuggestMode::parameters_))
                {
                  OBJ_CALL(result = self->object.suggestSimilar(a0, a1, a2, a3));
                  return JArray<jobject>(result.this$).wrap(::org::apache::lucene::search::spell::t_SuggestWord::wrap_jobject);
                }
              }
              break;
             case 5:
              {
                ::org::apache::lucene::index::Term a0((jobject) NULL);
                jint a1;
                ::org::apache::lucene::index::IndexReader a2((jobject) NULL);
                ::org::apache::lucene::search::spell::SuggestMode a3((jobject) NULL);
                PyTypeObject **p3;
                jfloat a4;
                JArray< ::org::apache::lucene::search::spell::SuggestWord > result((jobject) NULL);

                if (!parseArgs(args, "kIkKF", ::org::apache::lucene::index::Term::initializeClass, ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::search::spell::SuggestMode::initializeClass, &a0, &a1, &a2, &a3, &p3, ::org::apache::lucene::search::spell::t_SuggestMode::parameters_, &a4))
                {
                  OBJ_CALL(result = self->object.suggestSimilar(a0, a1, a2, a3, a4));
                  return JArray<jobject>(result.this$).wrap(::org::apache::lucene::search::spell::t_SuggestWord::wrap_jobject);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "suggestSimilar", args);
            return NULL;
          }

          static PyObject *t_DirectSpellChecker_get__accuracy(t_DirectSpellChecker *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getAccuracy());
            return PyFloat_FromDouble((double) value);
          }
          static int t_DirectSpellChecker_set__accuracy(t_DirectSpellChecker *self, PyObject *arg, void *data)
          {
            {
              jfloat value;
              if (!parseArg(arg, "F", &value))
              {
                INT_CALL(self->object.setAccuracy(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "accuracy", arg);
            return -1;
          }

          static PyObject *t_DirectSpellChecker_get__comparator(t_DirectSpellChecker *self, void *data)
          {
            ::java::util::Comparator value((jobject) NULL);
            OBJ_CALL(value = self->object.getComparator());
            return ::java::util::t_Comparator::wrap_Object(value);
          }
          static int t_DirectSpellChecker_set__comparator(t_DirectSpellChecker *self, PyObject *arg, void *data)
          {
            {
              ::java::util::Comparator value((jobject) NULL);
              if (!parseArg(arg, "k", ::java::util::Comparator::initializeClass, &value))
              {
                INT_CALL(self->object.setComparator(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "comparator", arg);
            return -1;
          }

          static PyObject *t_DirectSpellChecker_get__distance(t_DirectSpellChecker *self, void *data)
          {
            ::org::apache::lucene::search::spell::StringDistance value((jobject) NULL);
            OBJ_CALL(value = self->object.getDistance());
            return ::org::apache::lucene::search::spell::t_StringDistance::wrap_Object(value);
          }
          static int t_DirectSpellChecker_set__distance(t_DirectSpellChecker *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::search::spell::StringDistance value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::search::spell::StringDistance::initializeClass, &value))
              {
                INT_CALL(self->object.setDistance(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "distance", arg);
            return -1;
          }

          static PyObject *t_DirectSpellChecker_get__lowerCaseTerms(t_DirectSpellChecker *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.getLowerCaseTerms());
            Py_RETURN_BOOL(value);
          }
          static int t_DirectSpellChecker_set__lowerCaseTerms(t_DirectSpellChecker *self, PyObject *arg, void *data)
          {
            {
              jboolean value;
              if (!parseArg(arg, "Z", &value))
              {
                INT_CALL(self->object.setLowerCaseTerms(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "lowerCaseTerms", arg);
            return -1;
          }

          static PyObject *t_DirectSpellChecker_get__maxEdits(t_DirectSpellChecker *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getMaxEdits());
            return PyInt_FromLong((long) value);
          }
          static int t_DirectSpellChecker_set__maxEdits(t_DirectSpellChecker *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setMaxEdits(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "maxEdits", arg);
            return -1;
          }

          static PyObject *t_DirectSpellChecker_get__maxInspections(t_DirectSpellChecker *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getMaxInspections());
            return PyInt_FromLong((long) value);
          }
          static int t_DirectSpellChecker_set__maxInspections(t_DirectSpellChecker *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setMaxInspections(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "maxInspections", arg);
            return -1;
          }

          static PyObject *t_DirectSpellChecker_get__maxQueryFrequency(t_DirectSpellChecker *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getMaxQueryFrequency());
            return PyFloat_FromDouble((double) value);
          }
          static int t_DirectSpellChecker_set__maxQueryFrequency(t_DirectSpellChecker *self, PyObject *arg, void *data)
          {
            {
              jfloat value;
              if (!parseArg(arg, "F", &value))
              {
                INT_CALL(self->object.setMaxQueryFrequency(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "maxQueryFrequency", arg);
            return -1;
          }

          static PyObject *t_DirectSpellChecker_get__minPrefix(t_DirectSpellChecker *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getMinPrefix());
            return PyInt_FromLong((long) value);
          }
          static int t_DirectSpellChecker_set__minPrefix(t_DirectSpellChecker *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setMinPrefix(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "minPrefix", arg);
            return -1;
          }

          static PyObject *t_DirectSpellChecker_get__minQueryLength(t_DirectSpellChecker *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getMinQueryLength());
            return PyInt_FromLong((long) value);
          }
          static int t_DirectSpellChecker_set__minQueryLength(t_DirectSpellChecker *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setMinQueryLength(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "minQueryLength", arg);
            return -1;
          }

          static PyObject *t_DirectSpellChecker_get__thresholdFrequency(t_DirectSpellChecker *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getThresholdFrequency());
            return PyFloat_FromDouble((double) value);
          }
          static int t_DirectSpellChecker_set__thresholdFrequency(t_DirectSpellChecker *self, PyObject *arg, void *data)
          {
            {
              jfloat value;
              if (!parseArg(arg, "F", &value))
              {
                INT_CALL(self->object.setThresholdFrequency(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "thresholdFrequency", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/PowFloatFunction.h"
#include "org/apache/lucene/queries/function/ValueSource.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *PowFloatFunction::class$ = NULL;
            jmethodID *PowFloatFunction::mids$ = NULL;
            bool PowFloatFunction::live$ = false;

            jclass PowFloatFunction::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/PowFloatFunction");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_74aa307e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queries/function/ValueSource;Lorg/apache/lucene/queries/function/ValueSource;)V");
                mids$[mid_name_14c7b5c5] = env->getMethodID(cls, "name", "()Ljava/lang/String;");
                mids$[mid_func_3711414a] = env->getMethodID(cls, "func", "(ILorg/apache/lucene/queries/function/FunctionValues;Lorg/apache/lucene/queries/function/FunctionValues;)F");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            PowFloatFunction::PowFloatFunction(const ::org::apache::lucene::queries::function::ValueSource & a0, const ::org::apache::lucene::queries::function::ValueSource & a1) : ::org::apache::lucene::queries::function::valuesource::DualFloatFunction(env->newObject(initializeClass, &mids$, mid_init$_74aa307e, a0.this$, a1.this$)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_PowFloatFunction_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_PowFloatFunction_instance_(PyTypeObject *type, PyObject *arg);
            static int t_PowFloatFunction_init_(t_PowFloatFunction *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_PowFloatFunction__methods_[] = {
              DECLARE_METHOD(t_PowFloatFunction, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_PowFloatFunction, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(PowFloatFunction, t_PowFloatFunction, ::org::apache::lucene::queries::function::valuesource::DualFloatFunction, PowFloatFunction, t_PowFloatFunction_init_, 0, 0, 0, 0, 0);

            void t_PowFloatFunction::install(PyObject *module)
            {
              installType(&PY_TYPE(PowFloatFunction), module, "PowFloatFunction", 0);
            }

            void t_PowFloatFunction::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(PowFloatFunction).tp_dict, "class_", make_descriptor(PowFloatFunction::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(PowFloatFunction).tp_dict, "wrapfn_", make_descriptor(t_PowFloatFunction::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(PowFloatFunction).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_PowFloatFunction_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, PowFloatFunction::initializeClass, 1)))
                return NULL;
              return t_PowFloatFunction::wrap_Object(PowFloatFunction(((t_PowFloatFunction *) arg)->object.this$));
            }
            static PyObject *t_PowFloatFunction_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, PowFloatFunction::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_PowFloatFunction_init_(t_PowFloatFunction *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::queries::function::ValueSource a0((jobject) NULL);
              ::org::apache::lucene::queries::function::ValueSource a1((jobject) NULL);
              PowFloatFunction object((jobject) NULL);

              if (!parseArgs(args, "kk", ::org::apache::lucene::queries::function::ValueSource::initializeClass, ::org::apache::lucene::queries::function::ValueSource::initializeClass, &a0, &a1))
              {
                INT_CALL(object = PowFloatFunction(a0, a1));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/automaton/AutomatonProvider.h"
#include "org/apache/lucene/util/automaton/Automaton.h"
#include "java/io/IOException.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {

          ::java::lang::Class *AutomatonProvider::class$ = NULL;
          jmethodID *AutomatonProvider::mids$ = NULL;
          bool AutomatonProvider::live$ = false;

          jclass AutomatonProvider::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/automaton/AutomatonProvider");

              mids$ = new jmethodID[max_mid];
              mids$[mid_getAutomaton_af13056f] = env->getMethodID(cls, "getAutomaton", "(Ljava/lang/String;)Lorg/apache/lucene/util/automaton/Automaton;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::org::apache::lucene::util::automaton::Automaton AutomatonProvider::getAutomaton(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::util::automaton::Automaton(env->callObjectMethod(this$, mids$[mid_getAutomaton_af13056f], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {
          static PyObject *t_AutomatonProvider_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AutomatonProvider_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AutomatonProvider_getAutomaton(t_AutomatonProvider *self, PyObject *arg);

          static PyMethodDef t_AutomatonProvider__methods_[] = {
            DECLARE_METHOD(t_AutomatonProvider, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AutomatonProvider, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AutomatonProvider, getAutomaton, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(AutomatonProvider, t_AutomatonProvider, ::java::lang::Object, AutomatonProvider, abstract_init, 0, 0, 0, 0, 0);

          void t_AutomatonProvider::install(PyObject *module)
          {
            installType(&PY_TYPE(AutomatonProvider), module, "AutomatonProvider", 0);
          }

          void t_AutomatonProvider::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(AutomatonProvider).tp_dict, "class_", make_descriptor(AutomatonProvider::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(AutomatonProvider).tp_dict, "wrapfn_", make_descriptor(t_AutomatonProvider::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(AutomatonProvider).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_AutomatonProvider_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, AutomatonProvider::initializeClass, 1)))
              return NULL;
            return t_AutomatonProvider::wrap_Object(AutomatonProvider(((t_AutomatonProvider *) arg)->object.this$));
          }
          static PyObject *t_AutomatonProvider_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, AutomatonProvider::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_AutomatonProvider_getAutomaton(t_AutomatonProvider *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.getAutomaton(a0));
              return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getAutomaton", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/TokenFilter.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {

        ::java::lang::Class *TokenFilter::class$ = NULL;
        jmethodID *TokenFilter::mids$ = NULL;
        bool TokenFilter::live$ = false;

        jclass TokenFilter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/TokenFilter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_end_54c6a166] = env->getMethodID(cls, "end", "()V");
            mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void TokenFilter::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        void TokenFilter::end() const
        {
          env->callVoidMethod(this$, mids$[mid_end_54c6a166]);
        }

        void TokenFilter::reset() const
        {
          env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        static PyObject *t_TokenFilter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TokenFilter_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TokenFilter_close(t_TokenFilter *self, PyObject *args);
        static PyObject *t_TokenFilter_end(t_TokenFilter *self, PyObject *args);
        static PyObject *t_TokenFilter_reset(t_TokenFilter *self, PyObject *args);

        static PyMethodDef t_TokenFilter__methods_[] = {
          DECLARE_METHOD(t_TokenFilter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TokenFilter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TokenFilter, close, METH_VARARGS),
          DECLARE_METHOD(t_TokenFilter, end, METH_VARARGS),
          DECLARE_METHOD(t_TokenFilter, reset, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TokenFilter, t_TokenFilter, ::org::apache::lucene::analysis::TokenStream, TokenFilter, abstract_init, 0, 0, 0, 0, 0);

        void t_TokenFilter::install(PyObject *module)
        {
          installType(&PY_TYPE(TokenFilter), module, "TokenFilter", 0);
        }

        void t_TokenFilter::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TokenFilter).tp_dict, "class_", make_descriptor(TokenFilter::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TokenFilter).tp_dict, "wrapfn_", make_descriptor(t_TokenFilter::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TokenFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TokenFilter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TokenFilter::initializeClass, 1)))
            return NULL;
          return t_TokenFilter::wrap_Object(TokenFilter(((t_TokenFilter *) arg)->object.this$));
        }
        static PyObject *t_TokenFilter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TokenFilter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_TokenFilter_close(t_TokenFilter *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.close());
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(TokenFilter), (PyObject *) self, "close", args, 2);
        }

        static PyObject *t_TokenFilter_end(t_TokenFilter *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.end());
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(TokenFilter), (PyObject *) self, "end", args, 2);
        }

        static PyObject *t_TokenFilter_reset(t_TokenFilter *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.reset());
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(TokenFilter), (PyObject *) self, "reset", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/ChecksumIndexInput.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *ChecksumIndexInput::class$ = NULL;
        jmethodID *ChecksumIndexInput::mids$ = NULL;
        bool ChecksumIndexInput::live$ = false;

        jclass ChecksumIndexInput::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/ChecksumIndexInput");

            mids$ = new jmethodID[max_mid];
            mids$[mid_getChecksum_54c6a17a] = env->getMethodID(cls, "getChecksum", "()J");
            mids$[mid_seek_0ee6df2f] = env->getMethodID(cls, "seek", "(J)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jlong ChecksumIndexInput::getChecksum() const
        {
          return env->callLongMethod(this$, mids$[mid_getChecksum_54c6a17a]);
        }

        void ChecksumIndexInput::seek(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_seek_0ee6df2f], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_ChecksumIndexInput_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ChecksumIndexInput_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ChecksumIndexInput_getChecksum(t_ChecksumIndexInput *self);
        static PyObject *t_ChecksumIndexInput_seek(t_ChecksumIndexInput *self, PyObject *args);
        static PyObject *t_ChecksumIndexInput_get__checksum(t_ChecksumIndexInput *self, void *data);
        static PyGetSetDef t_ChecksumIndexInput__fields_[] = {
          DECLARE_GET_FIELD(t_ChecksumIndexInput, checksum),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_ChecksumIndexInput__methods_[] = {
          DECLARE_METHOD(t_ChecksumIndexInput, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ChecksumIndexInput, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ChecksumIndexInput, getChecksum, METH_NOARGS),
          DECLARE_METHOD(t_ChecksumIndexInput, seek, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(ChecksumIndexInput, t_ChecksumIndexInput, ::org::apache::lucene::store::IndexInput, ChecksumIndexInput, abstract_init, 0, 0, t_ChecksumIndexInput__fields_, 0, 0);

        void t_ChecksumIndexInput::install(PyObject *module)
        {
          installType(&PY_TYPE(ChecksumIndexInput), module, "ChecksumIndexInput", 0);
        }

        void t_ChecksumIndexInput::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(ChecksumIndexInput).tp_dict, "class_", make_descriptor(ChecksumIndexInput::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(ChecksumIndexInput).tp_dict, "wrapfn_", make_descriptor(t_ChecksumIndexInput::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(ChecksumIndexInput).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_ChecksumIndexInput_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, ChecksumIndexInput::initializeClass, 1)))
            return NULL;
          return t_ChecksumIndexInput::wrap_Object(ChecksumIndexInput(((t_ChecksumIndexInput *) arg)->object.this$));
        }
        static PyObject *t_ChecksumIndexInput_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, ChecksumIndexInput::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_ChecksumIndexInput_getChecksum(t_ChecksumIndexInput *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getChecksum());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_ChecksumIndexInput_seek(t_ChecksumIndexInput *self, PyObject *args)
        {
          jlong a0;

          if (!parseArgs(args, "J", &a0))
          {
            OBJ_CALL(self->object.seek(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(ChecksumIndexInput), (PyObject *) self, "seek", args, 2);
        }

        static PyObject *t_ChecksumIndexInput_get__checksum(t_ChecksumIndexInput *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getChecksum());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/PagedBytes$Reader.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/util/Accountable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *PagedBytes$Reader::class$ = NULL;
        jmethodID *PagedBytes$Reader::mids$ = NULL;
        bool PagedBytes$Reader::live$ = false;

        jclass PagedBytes$Reader::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/PagedBytes$Reader");

            mids$ = new jmethodID[max_mid];
            mids$[mid_fill_9e70a0dd] = env->getMethodID(cls, "fill", "(Lorg/apache/lucene/util/BytesRef;J)V");
            mids$[mid_fillSlice_8caa1345] = env->getMethodID(cls, "fillSlice", "(Lorg/apache/lucene/util/BytesRef;JI)V");
            mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void PagedBytes$Reader::fill(const ::org::apache::lucene::util::BytesRef & a0, jlong a1) const
        {
          env->callVoidMethod(this$, mids$[mid_fill_9e70a0dd], a0.this$, a1);
        }

        void PagedBytes$Reader::fillSlice(const ::org::apache::lucene::util::BytesRef & a0, jlong a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_fillSlice_8caa1345], a0.this$, a1, a2);
        }

        jlong PagedBytes$Reader::ramBytesUsed() const
        {
          return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_PagedBytes$Reader_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PagedBytes$Reader_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PagedBytes$Reader_fill(t_PagedBytes$Reader *self, PyObject *args);
        static PyObject *t_PagedBytes$Reader_fillSlice(t_PagedBytes$Reader *self, PyObject *args);
        static PyObject *t_PagedBytes$Reader_ramBytesUsed(t_PagedBytes$Reader *self);

        static PyMethodDef t_PagedBytes$Reader__methods_[] = {
          DECLARE_METHOD(t_PagedBytes$Reader, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PagedBytes$Reader, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PagedBytes$Reader, fill, METH_VARARGS),
          DECLARE_METHOD(t_PagedBytes$Reader, fillSlice, METH_VARARGS),
          DECLARE_METHOD(t_PagedBytes$Reader, ramBytesUsed, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PagedBytes$Reader, t_PagedBytes$Reader, ::java::lang::Object, PagedBytes$Reader, abstract_init, 0, 0, 0, 0, 0);

        void t_PagedBytes$Reader::install(PyObject *module)
        {
          installType(&PY_TYPE(PagedBytes$Reader), module, "PagedBytes$Reader", 0);
        }

        void t_PagedBytes$Reader::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PagedBytes$Reader).tp_dict, "class_", make_descriptor(PagedBytes$Reader::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PagedBytes$Reader).tp_dict, "wrapfn_", make_descriptor(t_PagedBytes$Reader::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PagedBytes$Reader).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_PagedBytes$Reader_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PagedBytes$Reader::initializeClass, 1)))
            return NULL;
          return t_PagedBytes$Reader::wrap_Object(PagedBytes$Reader(((t_PagedBytes$Reader *) arg)->object.this$));
        }
        static PyObject *t_PagedBytes$Reader_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PagedBytes$Reader::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_PagedBytes$Reader_fill(t_PagedBytes$Reader *self, PyObject *args)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          jlong a1;

          if (!parseArgs(args, "kJ", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
          {
            OBJ_CALL(self->object.fill(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "fill", args);
          return NULL;
        }

        static PyObject *t_PagedBytes$Reader_fillSlice(t_PagedBytes$Reader *self, PyObject *args)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          jlong a1;
          jint a2;

          if (!parseArgs(args, "kJI", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.fillSlice(a0, a1, a2));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "fillSlice", args);
          return NULL;
        }

        static PyObject *t_PagedBytes$Reader_ramBytesUsed(t_PagedBytes$Reader *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.ramBytesUsed());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "java/io/Reader.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/util/Version.h"
#include "java/io/Closeable.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/Analyzer$ReuseStrategy.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {

        ::java::lang::Class *Analyzer::class$ = NULL;
        jmethodID *Analyzer::mids$ = NULL;
        bool Analyzer::live$ = false;
        ::org::apache::lucene::analysis::Analyzer$ReuseStrategy *Analyzer::GLOBAL_REUSE_STRATEGY = NULL;
        ::org::apache::lucene::analysis::Analyzer$ReuseStrategy *Analyzer::PER_FIELD_REUSE_STRATEGY = NULL;

        jclass Analyzer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/Analyzer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_init$_9d052de7] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Analyzer$ReuseStrategy;)V");
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_getOffsetGap_5fdc3f57] = env->getMethodID(cls, "getOffsetGap", "(Ljava/lang/String;)I");
            mids$[mid_getPositionIncrementGap_5fdc3f57] = env->getMethodID(cls, "getPositionIncrementGap", "(Ljava/lang/String;)I");
            mids$[mid_getReuseStrategy_723277fa] = env->getMethodID(cls, "getReuseStrategy", "()Lorg/apache/lucene/analysis/Analyzer$ReuseStrategy;");
            mids$[mid_getVersion_a83d688e] = env->getMethodID(cls, "getVersion", "()Lorg/apache/lucene/util/Version;");
            mids$[mid_setVersion_0d96cf33] = env->getMethodID(cls, "setVersion", "(Lorg/apache/lucene/util/Version;)V");
            mids$[mid_tokenStream_b2e3f2ad] = env->getMethodID(cls, "tokenStream", "(Ljava/lang/String;Ljava/lang/String;)Lorg/apache/lucene/analysis/TokenStream;");
            mids$[mid_tokenStream_f8551151] = env->getMethodID(cls, "tokenStream", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/TokenStream;");
            mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");
            mids$[mid_initReader_d8fb1c81] = env->getMethodID(cls, "initReader", "(Ljava/lang/String;Ljava/io/Reader;)Ljava/io/Reader;");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            GLOBAL_REUSE_STRATEGY = new ::org::apache::lucene::analysis::Analyzer$ReuseStrategy(env->getStaticObjectField(cls, "GLOBAL_REUSE_STRATEGY", "Lorg/apache/lucene/analysis/Analyzer$ReuseStrategy;"));
            PER_FIELD_REUSE_STRATEGY = new ::org::apache::lucene::analysis::Analyzer$ReuseStrategy(env->getStaticObjectField(cls, "PER_FIELD_REUSE_STRATEGY", "Lorg/apache/lucene/analysis/Analyzer$ReuseStrategy;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        Analyzer::Analyzer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        Analyzer::Analyzer(const ::org::apache::lucene::analysis::Analyzer$ReuseStrategy & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_9d052de7, a0.this$)) {}

        void Analyzer::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        jint Analyzer::getOffsetGap(const ::java::lang::String & a0) const
        {
          return env->callIntMethod(this$, mids$[mid_getOffsetGap_5fdc3f57], a0.this$);
        }

        jint Analyzer::getPositionIncrementGap(const ::java::lang::String & a0) const
        {
          return env->callIntMethod(this$, mids$[mid_getPositionIncrementGap_5fdc3f57], a0.this$);
        }

        ::org::apache::lucene::analysis::Analyzer$ReuseStrategy Analyzer::getReuseStrategy() const
        {
          return ::org::apache::lucene::analysis::Analyzer$ReuseStrategy(env->callObjectMethod(this$, mids$[mid_getReuseStrategy_723277fa]));
        }

        ::org::apache::lucene::util::Version Analyzer::getVersion() const
        {
          return ::org::apache::lucene::util::Version(env->callObjectMethod(this$, mids$[mid_getVersion_a83d688e]));
        }

        void Analyzer::setVersion(const ::org::apache::lucene::util::Version & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setVersion_0d96cf33], a0.this$);
        }

        ::org::apache::lucene::analysis::TokenStream Analyzer::tokenStream(const ::java::lang::String & a0, const ::java::lang::String & a1) const
        {
          return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_tokenStream_b2e3f2ad], a0.this$, a1.this$));
        }

        ::org::apache::lucene::analysis::TokenStream Analyzer::tokenStream(const ::java::lang::String & a0, const ::java::io::Reader & a1) const
        {
          return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_tokenStream_f8551151], a0.this$, a1.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/analysis/Analyzer$PerFieldReuseStrategy.h"
#include "org/apache/lucene/analysis/Analyzer$GlobalReuseStrategy.h"
#include "org/apache/lucene/analysis/Analyzer$TokenStreamComponents.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        static PyObject *t_Analyzer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Analyzer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_Analyzer_init_(t_Analyzer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_Analyzer_close(t_Analyzer *self);
        static PyObject *t_Analyzer_getOffsetGap(t_Analyzer *self, PyObject *arg);
        static PyObject *t_Analyzer_getPositionIncrementGap(t_Analyzer *self, PyObject *arg);
        static PyObject *t_Analyzer_getReuseStrategy(t_Analyzer *self);
        static PyObject *t_Analyzer_getVersion(t_Analyzer *self);
        static PyObject *t_Analyzer_setVersion(t_Analyzer *self, PyObject *arg);
        static PyObject *t_Analyzer_tokenStream(t_Analyzer *self, PyObject *args);
        static PyObject *t_Analyzer_get__reuseStrategy(t_Analyzer *self, void *data);
        static PyObject *t_Analyzer_get__version(t_Analyzer *self, void *data);
        static int t_Analyzer_set__version(t_Analyzer *self, PyObject *arg, void *data);
        static PyGetSetDef t_Analyzer__fields_[] = {
          DECLARE_GET_FIELD(t_Analyzer, reuseStrategy),
          DECLARE_GETSET_FIELD(t_Analyzer, version),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_Analyzer__methods_[] = {
          DECLARE_METHOD(t_Analyzer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Analyzer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Analyzer, close, METH_NOARGS),
          DECLARE_METHOD(t_Analyzer, getOffsetGap, METH_O),
          DECLARE_METHOD(t_Analyzer, getPositionIncrementGap, METH_O),
          DECLARE_METHOD(t_Analyzer, getReuseStrategy, METH_NOARGS),
          DECLARE_METHOD(t_Analyzer, getVersion, METH_NOARGS),
          DECLARE_METHOD(t_Analyzer, setVersion, METH_O),
          DECLARE_METHOD(t_Analyzer, tokenStream, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Analyzer, t_Analyzer, ::java::lang::Object, Analyzer, t_Analyzer_init_, 0, 0, t_Analyzer__fields_, 0, 0);

        void t_Analyzer::install(PyObject *module)
        {
          installType(&PY_TYPE(Analyzer), module, "Analyzer", 0);
          PyDict_SetItemString(PY_TYPE(Analyzer).tp_dict, "PerFieldReuseStrategy", make_descriptor(&PY_TYPE(Analyzer$PerFieldReuseStrategy)));
          PyDict_SetItemString(PY_TYPE(Analyzer).tp_dict, "GlobalReuseStrategy", make_descriptor(&PY_TYPE(Analyzer$GlobalReuseStrategy)));
          PyDict_SetItemString(PY_TYPE(Analyzer).tp_dict, "ReuseStrategy", make_descriptor(&PY_TYPE(Analyzer$ReuseStrategy)));
          PyDict_SetItemString(PY_TYPE(Analyzer).tp_dict, "TokenStreamComponents", make_descriptor(&PY_TYPE(Analyzer$TokenStreamComponents)));
        }

        void t_Analyzer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(Analyzer).tp_dict, "class_", make_descriptor(Analyzer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(Analyzer).tp_dict, "wrapfn_", make_descriptor(t_Analyzer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(Analyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(Analyzer::initializeClass);
          PyDict_SetItemString(PY_TYPE(Analyzer).tp_dict, "GLOBAL_REUSE_STRATEGY", make_descriptor(::org::apache::lucene::analysis::t_Analyzer$ReuseStrategy::wrap_Object(*Analyzer::GLOBAL_REUSE_STRATEGY)));
          PyDict_SetItemString(PY_TYPE(Analyzer).tp_dict, "PER_FIELD_REUSE_STRATEGY", make_descriptor(::org::apache::lucene::analysis::t_Analyzer$ReuseStrategy::wrap_Object(*Analyzer::PER_FIELD_REUSE_STRATEGY)));
        }

        static PyObject *t_Analyzer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Analyzer::initializeClass, 1)))
            return NULL;
          return t_Analyzer::wrap_Object(Analyzer(((t_Analyzer *) arg)->object.this$));
        }
        static PyObject *t_Analyzer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Analyzer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_Analyzer_init_(t_Analyzer *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              Analyzer object((jobject) NULL);

              INT_CALL(object = Analyzer());
              self->object = object;
              break;
            }
            goto err;
           case 1:
            {
              ::org::apache::lucene::analysis::Analyzer$ReuseStrategy a0((jobject) NULL);
              Analyzer object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::analysis::Analyzer$ReuseStrategy::initializeClass, &a0))
              {
                INT_CALL(object = Analyzer(a0));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_Analyzer_close(t_Analyzer *self)
        {
          OBJ_CALL(self->object.close());
          Py_RETURN_NONE;
        }

        static PyObject *t_Analyzer_getOffsetGap(t_Analyzer *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          jint result;

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = self->object.getOffsetGap(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "getOffsetGap", arg);
          return NULL;
        }

        static PyObject *t_Analyzer_getPositionIncrementGap(t_Analyzer *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          jint result;

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = self->object.getPositionIncrementGap(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "getPositionIncrementGap", arg);
          return NULL;
        }

        static PyObject *t_Analyzer_getReuseStrategy(t_Analyzer *self)
        {
          ::org::apache::lucene::analysis::Analyzer$ReuseStrategy result((jobject) NULL);
          OBJ_CALL(result = self->object.getReuseStrategy());
          return ::org::apache::lucene::analysis::t_Analyzer$ReuseStrategy::wrap_Object(result);
        }

        static PyObject *t_Analyzer_getVersion(t_Analyzer *self)
        {
          ::org::apache::lucene::util::Version result((jobject) NULL);
          OBJ_CALL(result = self->object.getVersion());
          return ::org::apache::lucene::util::t_Version::wrap_Object(result);
        }

        static PyObject *t_Analyzer_setVersion(t_Analyzer *self, PyObject *arg)
        {
          ::org::apache::lucene::util::Version a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::util::Version::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setVersion(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setVersion", arg);
          return NULL;
        }

        static PyObject *t_Analyzer_tokenStream(t_Analyzer *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

              if (!parseArgs(args, "ss", &a0, &a1))
              {
                OBJ_CALL(result = self->object.tokenStream(a0, a1));
                return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::io::Reader a1((jobject) NULL);
              ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

              if (!parseArgs(args, "sk", ::java::io::Reader::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = self->object.tokenStream(a0, a1));
                return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "tokenStream", args);
          return NULL;
        }

        static PyObject *t_Analyzer_get__reuseStrategy(t_Analyzer *self, void *data)
        {
          ::org::apache::lucene::analysis::Analyzer$ReuseStrategy value((jobject) NULL);
          OBJ_CALL(value = self->object.getReuseStrategy());
          return ::org::apache::lucene::analysis::t_Analyzer$ReuseStrategy::wrap_Object(value);
        }

        static PyObject *t_Analyzer_get__version(t_Analyzer *self, void *data)
        {
          ::org::apache::lucene::util::Version value((jobject) NULL);
          OBJ_CALL(value = self->object.getVersion());
          return ::org::apache::lucene::util::t_Version::wrap_Object(value);
        }
        static int t_Analyzer_set__version(t_Analyzer *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::util::Version value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::util::Version::initializeClass, &value))
            {
              INT_CALL(self->object.setVersion(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "version", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/hunspell/HunspellStemFilterFactory.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/util/ResourceLoader.h"
#include "org/apache/lucene/analysis/util/ResourceLoaderAware.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace hunspell {

          ::java::lang::Class *HunspellStemFilterFactory::class$ = NULL;
          jmethodID *HunspellStemFilterFactory::mids$ = NULL;
          bool HunspellStemFilterFactory::live$ = false;

          jclass HunspellStemFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/hunspell/HunspellStemFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");
              mids$[mid_inform_d6a4bc97] = env->getMethodID(cls, "inform", "(Lorg/apache/lucene/analysis/util/ResourceLoader;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          HunspellStemFilterFactory::HunspellStemFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream HunspellStemFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }

          void HunspellStemFilterFactory::inform(const ::org::apache::lucene::analysis::util::ResourceLoader & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_inform_d6a4bc97], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace hunspell {
          static PyObject *t_HunspellStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_HunspellStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_HunspellStemFilterFactory_init_(t_HunspellStemFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_HunspellStemFilterFactory_create(t_HunspellStemFilterFactory *self, PyObject *args);
          static PyObject *t_HunspellStemFilterFactory_inform(t_HunspellStemFilterFactory *self, PyObject *arg);

          static PyMethodDef t_HunspellStemFilterFactory__methods_[] = {
            DECLARE_METHOD(t_HunspellStemFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HunspellStemFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HunspellStemFilterFactory, create, METH_VARARGS),
            DECLARE_METHOD(t_HunspellStemFilterFactory, inform, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(HunspellStemFilterFactory, t_HunspellStemFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, HunspellStemFilterFactory, t_HunspellStemFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_HunspellStemFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(HunspellStemFilterFactory), module, "HunspellStemFilterFactory", 0);
          }

          void t_HunspellStemFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(HunspellStemFilterFactory).tp_dict, "class_", make_descriptor(HunspellStemFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(HunspellStemFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_HunspellStemFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(HunspellStemFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_HunspellStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, HunspellStemFilterFactory::initializeClass, 1)))
              return NULL;
            return t_HunspellStemFilterFactory::wrap_Object(HunspellStemFilterFactory(((t_HunspellStemFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_HunspellStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, HunspellStemFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_HunspellStemFilterFactory_init_(t_HunspellStemFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            HunspellStemFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = HunspellStemFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_HunspellStemFilterFactory_create(t_HunspellStemFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(HunspellStemFilterFactory), (PyObject *) self, "create", args, 2);
          }

          static PyObject *t_HunspellStemFilterFactory_inform(t_HunspellStemFilterFactory *self, PyObject *arg)
          {
            ::org::apache::lucene::analysis::util::ResourceLoader a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::analysis::util::ResourceLoader::initializeClass, &a0))
            {
              OBJ_CALL(self->object.inform(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "inform", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/messages/QueryParserMessages.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace messages {

              ::java::lang::Class *QueryParserMessages::class$ = NULL;
              jmethodID *QueryParserMessages::mids$ = NULL;
              bool QueryParserMessages::live$ = false;
              ::java::lang::String *QueryParserMessages::COULD_NOT_PARSE_NUMBER = NULL;
              ::java::lang::String *QueryParserMessages::EMPTY_MESSAGE = NULL;
              ::java::lang::String *QueryParserMessages::INVALID_SYNTAX = NULL;
              ::java::lang::String *QueryParserMessages::INVALID_SYNTAX_CANNOT_PARSE = NULL;
              ::java::lang::String *QueryParserMessages::INVALID_SYNTAX_ESCAPE_CHARACTER = NULL;
              ::java::lang::String *QueryParserMessages::INVALID_SYNTAX_ESCAPE_NONE_HEX_UNICODE = NULL;
              ::java::lang::String *QueryParserMessages::INVALID_SYNTAX_ESCAPE_UNICODE_TRUNCATION = NULL;
              ::java::lang::String *QueryParserMessages::INVALID_SYNTAX_FUZZY_EDITS = NULL;
              ::java::lang::String *QueryParserMessages::INVALID_SYNTAX_FUZZY_LIMITS = NULL;
              ::java::lang::String *QueryParserMessages::LEADING_WILDCARD_NOT_ALLOWED = NULL;
              ::java::lang::String *QueryParserMessages::LUCENE_QUERY_CONVERSION_ERROR = NULL;
              ::java::lang::String *QueryParserMessages::NODE_ACTION_NOT_SUPPORTED = NULL;
              ::java::lang::String *QueryParserMessages::NUMBER_CLASS_NOT_SUPPORTED_BY_NUMERIC_RANGE_QUERY = NULL;
              ::java::lang::String *QueryParserMessages::NUMERIC_CANNOT_BE_EMPTY = NULL;
              ::java::lang::String *QueryParserMessages::PARAMETER_VALUE_NOT_SUPPORTED = NULL;
              ::java::lang::String *QueryParserMessages::TOO_MANY_BOOLEAN_CLAUSES = NULL;
              ::java::lang::String *QueryParserMessages::UNSUPPORTED_NUMERIC_DATA_TYPE = NULL;
              ::java::lang::String *QueryParserMessages::WILDCARD_NOT_SUPPORTED = NULL;

              jclass QueryParserMessages::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/messages/QueryParserMessages");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  cls = (jclass) class$->this$;

                  COULD_NOT_PARSE_NUMBER = new ::java::lang::String(env->getStaticObjectField(cls, "COULD_NOT_PARSE_NUMBER", "Ljava/lang/String;"));
                  EMPTY_MESSAGE = new ::java::lang::String(env->getStaticObjectField(cls, "EMPTY_MESSAGE", "Ljava/lang/String;"));
                  INVALID_SYNTAX = new ::java::lang::String(env->getStaticObjectField(cls, "INVALID_SYNTAX", "Ljava/lang/String;"));
                  INVALID_SYNTAX_CANNOT_PARSE = new ::java::lang::String(env->getStaticObjectField(cls, "INVALID_SYNTAX_CANNOT_PARSE", "Ljava/lang/String;"));
                  INVALID_SYNTAX_ESCAPE_CHARACTER = new ::java::lang::String(env->getStaticObjectField(cls, "INVALID_SYNTAX_ESCAPE_CHARACTER", "Ljava/lang/String;"));
                  INVALID_SYNTAX_ESCAPE_NONE_HEX_UNICODE = new ::java::lang::String(env->getStaticObjectField(cls, "INVALID_SYNTAX_ESCAPE_NONE_HEX_UNICODE", "Ljava/lang/String;"));
                  INVALID_SYNTAX_ESCAPE_UNICODE_TRUNCATION = new ::java::lang::String(env->getStaticObjectField(cls, "INVALID_SYNTAX_ESCAPE_UNICODE_TRUNCATION", "Ljava/lang/String;"));
                  INVALID_SYNTAX_FUZZY_EDITS = new ::java::lang::String(env->getStaticObjectField(cls, "INVALID_SYNTAX_FUZZY_EDITS", "Ljava/lang/String;"));
                  INVALID_SYNTAX_FUZZY_LIMITS = new ::java::lang::String(env->getStaticObjectField(cls, "INVALID_SYNTAX_FUZZY_LIMITS", "Ljava/lang/String;"));
                  LEADING_WILDCARD_NOT_ALLOWED = new ::java::lang::String(env->getStaticObjectField(cls, "LEADING_WILDCARD_NOT_ALLOWED", "Ljava/lang/String;"));
                  LUCENE_QUERY_CONVERSION_ERROR = new ::java::lang::String(env->getStaticObjectField(cls, "LUCENE_QUERY_CONVERSION_ERROR", "Ljava/lang/String;"));
                  NODE_ACTION_NOT_SUPPORTED = new ::java::lang::String(env->getStaticObjectField(cls, "NODE_ACTION_NOT_SUPPORTED", "Ljava/lang/String;"));
                  NUMBER_CLASS_NOT_SUPPORTED_BY_NUMERIC_RANGE_QUERY = new ::java::lang::String(env->getStaticObjectField(cls, "NUMBER_CLASS_NOT_SUPPORTED_BY_NUMERIC_RANGE_QUERY", "Ljava/lang/String;"));
                  NUMERIC_CANNOT_BE_EMPTY = new ::java::lang::String(env->getStaticObjectField(cls, "NUMERIC_CANNOT_BE_EMPTY", "Ljava/lang/String;"));
                  PARAMETER_VALUE_NOT_SUPPORTED = new ::java::lang::String(env->getStaticObjectField(cls, "PARAMETER_VALUE_NOT_SUPPORTED", "Ljava/lang/String;"));
                  TOO_MANY_BOOLEAN_CLAUSES = new ::java::lang::String(env->getStaticObjectField(cls, "TOO_MANY_BOOLEAN_CLAUSES", "Ljava/lang/String;"));
                  UNSUPPORTED_NUMERIC_DATA_TYPE = new ::java::lang::String(env->getStaticObjectField(cls, "UNSUPPORTED_NUMERIC_DATA_TYPE", "Ljava/lang/String;"));
                  WILDCARD_NOT_SUPPORTED = new ::java::lang::String(env->getStaticObjectField(cls, "WILDCARD_NOT_SUPPORTED", "Ljava/lang/String;"));
                  live$ = true;
                }
                return (jclass) class$->this$;
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace messages {
              static PyObject *t_QueryParserMessages_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_QueryParserMessages_instance_(PyTypeObject *type, PyObject *arg);

              static PyMethodDef t_QueryParserMessages__methods_[] = {
                DECLARE_METHOD(t_QueryParserMessages, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_QueryParserMessages, instance_, METH_O | METH_CLASS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(QueryParserMessages, t_QueryParserMessages, ::org::apache::lucene::queryparser::flexible::messages::NLS, QueryParserMessages, abstract_init, 0, 0, 0, 0, 0);

              void t_QueryParserMessages::install(PyObject *module)
              {
                installType(&PY_TYPE(QueryParserMessages), module, "QueryParserMessages", 0);
              }

              void t_QueryParserMessages::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(QueryParserMessages).tp_dict, "class_", make_descriptor(QueryParserMessages::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(QueryParserMessages).tp_dict, "wrapfn_", make_descriptor(t_QueryParserMessages::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(QueryParserMessages).tp_dict, "boxfn_", make_descriptor(boxObject));
                env->getClass(QueryParserMessages::initializeClass);
                PyDict_SetItemString(PY_TYPE(QueryParserMessages).tp_dict, "COULD_NOT_PARSE_NUMBER", make_descriptor(j2p(*QueryParserMessages::COULD_NOT_PARSE_NUMBER)));
                PyDict_SetItemString(PY_TYPE(QueryParserMessages).tp_dict, "EMPTY_MESSAGE", make_descriptor(j2p(*QueryParserMessages::EMPTY_MESSAGE)));
                PyDict_SetItemString(PY_TYPE(QueryParserMessages).tp_dict, "INVALID_SYNTAX", make_descriptor(j2p(*QueryParserMessages::INVALID_SYNTAX)));
                PyDict_SetItemString(PY_TYPE(QueryParserMessages).tp_dict, "INVALID_SYNTAX_CANNOT_PARSE", make_descriptor(j2p(*QueryParserMessages::INVALID_SYNTAX_CANNOT_PARSE)));
                PyDict_SetItemString(PY_TYPE(QueryParserMessages).tp_dict, "INVALID_SYNTAX_ESCAPE_CHARACTER", make_descriptor(j2p(*QueryParserMessages::INVALID_SYNTAX_ESCAPE_CHARACTER)));
                PyDict_SetItemString(PY_TYPE(QueryParserMessages).tp_dict, "INVALID_SYNTAX_ESCAPE_NONE_HEX_UNICODE", make_descriptor(j2p(*QueryParserMessages::INVALID_SYNTAX_ESCAPE_NONE_HEX_UNICODE)));
                PyDict_SetItemString(PY_TYPE(QueryParserMessages).tp_dict, "INVALID_SYNTAX_ESCAPE_UNICODE_TRUNCATION", make_descriptor(j2p(*QueryParserMessages::INVALID_SYNTAX_ESCAPE_UNICODE_TRUNCATION)));
                PyDict_SetItemString(PY_TYPE(QueryParserMessages).tp_dict, "INVALID_SYNTAX_FUZZY_EDITS", make_descriptor(j2p(*QueryParserMessages::INVALID_SYNTAX_FUZZY_EDITS)));
                PyDict_SetItemString(PY_TYPE(QueryParserMessages).tp_dict, "INVALID_SYNTAX_FUZZY_LIMITS", make_descriptor(j2p(*QueryParserMessages::INVALID_SYNTAX_FUZZY_LIMITS)));
                PyDict_SetItemString(PY_TYPE(QueryParserMessages).tp_dict, "LEADING_WILDCARD_NOT_ALLOWED", make_descriptor(j2p(*QueryParserMessages::LEADING_WILDCARD_NOT_ALLOWED)));
                PyDict_SetItemString(PY_TYPE(QueryParserMessages).tp_dict, "LUCENE_QUERY_CONVERSION_ERROR", make_descriptor(j2p(*QueryParserMessages::LUCENE_QUERY_CONVERSION_ERROR)));
                PyDict_SetItemString(PY_TYPE(QueryParserMessages).tp_dict, "NODE_ACTION_NOT_SUPPORTED", make_descriptor(j2p(*QueryParserMessages::NODE_ACTION_NOT_SUPPORTED)));
                PyDict_SetItemString(PY_TYPE(QueryParserMessages).tp_dict, "NUMBER_CLASS_NOT_SUPPORTED_BY_NUMERIC_RANGE_QUERY", make_descriptor(j2p(*QueryParserMessages::NUMBER_CLASS_NOT_SUPPORTED_BY_NUMERIC_RANGE_QUERY)));
                PyDict_SetItemString(PY_TYPE(QueryParserMessages).tp_dict, "NUMERIC_CANNOT_BE_EMPTY", make_descriptor(j2p(*QueryParserMessages::NUMERIC_CANNOT_BE_EMPTY)));
                PyDict_SetItemString(PY_TYPE(QueryParserMessages).tp_dict, "PARAMETER_VALUE_NOT_SUPPORTED", make_descriptor(j2p(*QueryParserMessages::PARAMETER_VALUE_NOT_SUPPORTED)));
                PyDict_SetItemString(PY_TYPE(QueryParserMessages).tp_dict, "TOO_MANY_BOOLEAN_CLAUSES", make_descriptor(j2p(*QueryParserMessages::TOO_MANY_BOOLEAN_CLAUSES)));
                PyDict_SetItemString(PY_TYPE(QueryParserMessages).tp_dict, "UNSUPPORTED_NUMERIC_DATA_TYPE", make_descriptor(j2p(*QueryParserMessages::UNSUPPORTED_NUMERIC_DATA_TYPE)));
                PyDict_SetItemString(PY_TYPE(QueryParserMessages).tp_dict, "WILDCARD_NOT_SUPPORTED", make_descriptor(j2p(*QueryParserMessages::WILDCARD_NOT_SUPPORTED)));
              }

              static PyObject *t_QueryParserMessages_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, QueryParserMessages::initializeClass, 1)))
                  return NULL;
                return t_QueryParserMessages::wrap_Object(QueryParserMessages(((t_QueryParserMessages *) arg)->object.this$));
              }
              static PyObject *t_QueryParserMessages_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, QueryParserMessages::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/CheckIndex$Status$FieldNormStatus.h"
#include "java/lang/Throwable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *CheckIndex$Status$FieldNormStatus::class$ = NULL;
        jmethodID *CheckIndex$Status$FieldNormStatus::mids$ = NULL;
        jfieldID *CheckIndex$Status$FieldNormStatus::fids$ = NULL;
        bool CheckIndex$Status$FieldNormStatus::live$ = false;

        jclass CheckIndex$Status$FieldNormStatus::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/CheckIndex$Status$FieldNormStatus");

            fids$ = new jfieldID[max_fid];
            fids$[fid_error] = env->getFieldID(cls, "error", "Ljava/lang/Throwable;");
            fids$[fid_totFields] = env->getFieldID(cls, "totFields", "J");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::java::lang::Throwable CheckIndex$Status$FieldNormStatus::_get_error() const
        {
          return ::java::lang::Throwable(env->getObjectField(this$, fids$[fid_error]));
        }

        void CheckIndex$Status$FieldNormStatus::_set_error(const ::java::lang::Throwable & a0) const
        {
          env->setObjectField(this$, fids$[fid_error], a0.this$);
        }

        jlong CheckIndex$Status$FieldNormStatus::_get_totFields() const
        {
          return env->getLongField(this$, fids$[fid_totFields]);
        }

        void CheckIndex$Status$FieldNormStatus::_set_totFields(jlong a0) const
        {
          env->setLongField(this$, fids$[fid_totFields], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_CheckIndex$Status$FieldNormStatus_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CheckIndex$Status$FieldNormStatus_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CheckIndex$Status$FieldNormStatus_get__error(t_CheckIndex$Status$FieldNormStatus *self, void *data);
        static int t_CheckIndex$Status$FieldNormStatus_set__error(t_CheckIndex$Status$FieldNormStatus *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status$FieldNormStatus_get__totFields(t_CheckIndex$Status$FieldNormStatus *self, void *data);
        static int t_CheckIndex$Status$FieldNormStatus_set__totFields(t_CheckIndex$Status$FieldNormStatus *self, PyObject *arg, void *data);

        static PyGetSetDef t_CheckIndex$Status$FieldNormStatus__fields_[] = {
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$FieldNormStatus, error),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$FieldNormStatus, totFields),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_CheckIndex$Status$FieldNormStatus__methods_[] = {
          DECLARE_METHOD(t_CheckIndex$Status$FieldNormStatus, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CheckIndex$Status$FieldNormStatus, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(CheckIndex$Status$FieldNormStatus, t_CheckIndex$Status$FieldNormStatus, ::java::lang::Object, CheckIndex$Status$FieldNormStatus, abstract_init, 0, 0, t_CheckIndex$Status$FieldNormStatus__fields_, 0, 0);

        void t_CheckIndex$Status$FieldNormStatus::install(PyObject *module)
        {
          installType(&PY_TYPE(CheckIndex$Status$FieldNormStatus), module, "CheckIndex$Status$FieldNormStatus", 0);
        }

        void t_CheckIndex$Status$FieldNormStatus::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(CheckIndex$Status$FieldNormStatus).tp_dict, "class_", make_descriptor(CheckIndex$Status$FieldNormStatus::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(CheckIndex$Status$FieldNormStatus).tp_dict, "wrapfn_", make_descriptor(t_CheckIndex$Status$FieldNormStatus::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(CheckIndex$Status$FieldNormStatus).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_CheckIndex$Status$FieldNormStatus_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CheckIndex$Status$FieldNormStatus::initializeClass, 1)))
            return NULL;
          return t_CheckIndex$Status$FieldNormStatus::wrap_Object(CheckIndex$Status$FieldNormStatus(((t_CheckIndex$Status$FieldNormStatus *) arg)->object.this$));
        }
        static PyObject *t_CheckIndex$Status$FieldNormStatus_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CheckIndex$Status$FieldNormStatus::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_CheckIndex$Status$FieldNormStatus_get__error(t_CheckIndex$Status$FieldNormStatus *self, void *data)
        {
          ::java::lang::Throwable value((jobject) NULL);
          OBJ_CALL(value = self->object._get_error());
          return ::java::lang::t_Throwable::wrap_Object(value);
        }
        static int t_CheckIndex$Status$FieldNormStatus_set__error(t_CheckIndex$Status$FieldNormStatus *self, PyObject *arg, void *data)
        {
          ::java::lang::Throwable value((jobject) NULL);
          if (!parseArg(arg, "k", ::java::lang::Throwable::initializeClass, &value))
          {
            INT_CALL(self->object._set_error(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "error", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status$FieldNormStatus_get__totFields(t_CheckIndex$Status$FieldNormStatus *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object._get_totFields());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
        static int t_CheckIndex$Status$FieldNormStatus_set__totFields(t_CheckIndex$Status$FieldNormStatus *self, PyObject *arg, void *data)
        {
          jlong value;
          if (!parseArg(arg, "J", &value))
          {
            INT_CALL(self->object._set_totFields(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "totFields", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/messages/NLSException.h"
#include "org/apache/lucene/queryparser/flexible/messages/Message.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace messages {

            ::java::lang::Class *NLSException::class$ = NULL;
            jmethodID *NLSException::mids$ = NULL;
            bool NLSException::live$ = false;

            jclass NLSException::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/messages/NLSException");

                mids$ = new jmethodID[max_mid];
                mids$[mid_getMessageObject_1bceed44] = env->getMethodID(cls, "getMessageObject", "()Lorg/apache/lucene/queryparser/flexible/messages/Message;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            ::org::apache::lucene::queryparser::flexible::messages::Message NLSException::getMessageObject() const
            {
              return ::org::apache::lucene::queryparser::flexible::messages::Message(env->callObjectMethod(this$, mids$[mid_getMessageObject_1bceed44]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace messages {
            static PyObject *t_NLSException_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_NLSException_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_NLSException_getMessageObject(t_NLSException *self);
            static PyObject *t_NLSException_get__messageObject(t_NLSException *self, void *data);
            static PyGetSetDef t_NLSException__fields_[] = {
              DECLARE_GET_FIELD(t_NLSException, messageObject),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_NLSException__methods_[] = {
              DECLARE_METHOD(t_NLSException, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_NLSException, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_NLSException, getMessageObject, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(NLSException, t_NLSException, ::java::lang::Object, NLSException, abstract_init, 0, 0, t_NLSException__fields_, 0, 0);

            void t_NLSException::install(PyObject *module)
            {
              installType(&PY_TYPE(NLSException), module, "NLSException", 0);
            }

            void t_NLSException::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(NLSException).tp_dict, "class_", make_descriptor(NLSException::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(NLSException).tp_dict, "wrapfn_", make_descriptor(t_NLSException::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(NLSException).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_NLSException_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, NLSException::initializeClass, 1)))
                return NULL;
              return t_NLSException::wrap_Object(NLSException(((t_NLSException *) arg)->object.this$));
            }
            static PyObject *t_NLSException_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, NLSException::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_NLSException_getMessageObject(t_NLSException *self)
            {
              ::org::apache::lucene::queryparser::flexible::messages::Message result((jobject) NULL);
              OBJ_CALL(result = self->object.getMessageObject());
              return ::org::apache::lucene::queryparser::flexible::messages::t_Message::wrap_Object(result);
            }

            static PyObject *t_NLSException_get__messageObject(t_NLSException *self, void *data)
            {
              ::org::apache::lucene::queryparser::flexible::messages::Message value((jobject) NULL);
              OBJ_CALL(value = self->object.getMessageObject());
              return ::org::apache::lucene::queryparser::flexible::messages::t_Message::wrap_Object(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/grouping/GroupDocs.h"
#include "org/apache/lucene/search/ScoreDoc.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {

          ::java::lang::Class *GroupDocs::class$ = NULL;
          jmethodID *GroupDocs::mids$ = NULL;
          jfieldID *GroupDocs::fids$ = NULL;
          bool GroupDocs::live$ = false;

          jclass GroupDocs::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/grouping/GroupDocs");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_e4916722] = env->getMethodID(cls, "<init>", "(FFI[Lorg/apache/lucene/search/ScoreDoc;Ljava/lang/Object;[Ljava/lang/Object;)V");

              fids$ = new jfieldID[max_fid];
              fids$[fid_groupSortValues] = env->getFieldID(cls, "groupSortValues", "[Ljava/lang/Object;");
              fids$[fid_groupValue] = env->getFieldID(cls, "groupValue", "Ljava/lang/Object;");
              fids$[fid_maxScore] = env->getFieldID(cls, "maxScore", "F");
              fids$[fid_score] = env->getFieldID(cls, "score", "F");
              fids$[fid_scoreDocs] = env->getFieldID(cls, "scoreDocs", "[Lorg/apache/lucene/search/ScoreDoc;");
              fids$[fid_totalHits] = env->getFieldID(cls, "totalHits", "I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          GroupDocs::GroupDocs(jfloat a0, jfloat a1, jint a2, const JArray< ::org::apache::lucene::search::ScoreDoc > & a3, const ::java::lang::Object & a4, const JArray< ::java::lang::Object > & a5) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_e4916722, a0, a1, a2, a3.this$, a4.this$, a5.this$)) {}

          JArray< ::java::lang::Object > GroupDocs::_get_groupSortValues() const
          {
            return JArray< ::java::lang::Object >(env->getObjectField(this$, fids$[fid_groupSortValues]));
          }

          ::java::lang::Object GroupDocs::_get_groupValue() const
          {
            return ::java::lang::Object(env->getObjectField(this$, fids$[fid_groupValue]));
          }

          jfloat GroupDocs::_get_maxScore() const
          {
            return env->getFloatField(this$, fids$[fid_maxScore]);
          }

          jfloat GroupDocs::_get_score() const
          {
            return env->getFloatField(this$, fids$[fid_score]);
          }

          JArray< ::org::apache::lucene::search::ScoreDoc > GroupDocs::_get_scoreDocs() const
          {
            return JArray< ::org::apache::lucene::search::ScoreDoc >(env->getObjectField(this$, fids$[fid_scoreDocs]));
          }

          jint GroupDocs::_get_totalHits() const
          {
            return env->getIntField(this$, fids$[fid_totalHits]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          static PyObject *t_GroupDocs_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GroupDocs_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GroupDocs_of_(t_GroupDocs *self, PyObject *args);
          static int t_GroupDocs_init_(t_GroupDocs *self, PyObject *args, PyObject *kwds);
          static PyObject *t_GroupDocs_get__groupSortValues(t_GroupDocs *self, void *data);
          static PyObject *t_GroupDocs_get__groupValue(t_GroupDocs *self, void *data);
          static PyObject *t_GroupDocs_get__maxScore(t_GroupDocs *self, void *data);
          static PyObject *t_GroupDocs_get__score(t_GroupDocs *self, void *data);
          static PyObject *t_GroupDocs_get__scoreDocs(t_GroupDocs *self, void *data);
          static PyObject *t_GroupDocs_get__totalHits(t_GroupDocs *self, void *data);

          static PyObject *t_GroupDocs_get__parameters_(t_GroupDocs *self, void *data);
          static PyGetSetDef t_GroupDocs__fields_[] = {
            DECLARE_GET_FIELD(t_GroupDocs, groupSortValues),
            DECLARE_GET_FIELD(t_GroupDocs, groupValue),
            DECLARE_GET_FIELD(t_GroupDocs, maxScore),
            DECLARE_GET_FIELD(t_GroupDocs, score),
            DECLARE_GET_FIELD(t_GroupDocs, scoreDocs),
            DECLARE_GET_FIELD(t_GroupDocs, totalHits),
            DECLARE_GET_FIELD(t_GroupDocs, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_GroupDocs__methods_[] = {
            DECLARE_METHOD(t_GroupDocs, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GroupDocs, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GroupDocs, of_, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(GroupDocs, t_GroupDocs, ::java::lang::Object, GroupDocs, t_GroupDocs_init_, 0, 0, t_GroupDocs__fields_, 0, 0);
          PyObject *t_GroupDocs::wrap_Object(const GroupDocs& object, PyTypeObject *p0)
          {
            PyObject *obj = t_GroupDocs::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_GroupDocs *self = (t_GroupDocs *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_GroupDocs::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_GroupDocs::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_GroupDocs *self = (t_GroupDocs *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_GroupDocs::install(PyObject *module)
          {
            installType(&PY_TYPE(GroupDocs), module, "GroupDocs", 0);
          }

          void t_GroupDocs::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(GroupDocs).tp_dict, "class_", make_descriptor(GroupDocs::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(GroupDocs).tp_dict, "wrapfn_", make_descriptor(t_GroupDocs::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(GroupDocs).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_GroupDocs_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GroupDocs::initializeClass, 1)))
              return NULL;
            return t_GroupDocs::wrap_Object(GroupDocs(((t_GroupDocs *) arg)->object.this$));
          }
          static PyObject *t_GroupDocs_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GroupDocs::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_GroupDocs_of_(t_GroupDocs *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_GroupDocs_init_(t_GroupDocs *self, PyObject *args, PyObject *kwds)
          {
            jfloat a0;
            jfloat a1;
            jint a2;
            JArray< ::org::apache::lucene::search::ScoreDoc > a3((jobject) NULL);
            ::java::lang::Object a4((jobject) NULL);
            JArray< ::java::lang::Object > a5((jobject) NULL);
            GroupDocs object((jobject) NULL);

            if (!parseArgs(args, "FFI[ko[o", ::org::apache::lucene::search::ScoreDoc::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5))
            {
              INT_CALL(object = GroupDocs(a0, a1, a2, a3, a4, a5));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
          static PyObject *t_GroupDocs_get__parameters_(t_GroupDocs *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_GroupDocs_get__groupSortValues(t_GroupDocs *self, void *data)
          {
            JArray< ::java::lang::Object > value((jobject) NULL);
            OBJ_CALL(value = self->object._get_groupSortValues());
            return JArray<jobject>(value.this$).wrap(::java::lang::t_Object::wrap_jobject);
          }

          static PyObject *t_GroupDocs_get__groupValue(t_GroupDocs *self, void *data)
          {
            ::java::lang::Object value((jobject) NULL);
            OBJ_CALL(value = self->object._get_groupValue());
            return ::java::lang::t_Object::wrap_Object(value);
          }

          static PyObject *t_GroupDocs_get__maxScore(t_GroupDocs *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object._get_maxScore());
            return PyFloat_FromDouble((double) value);
          }

          static PyObject *t_GroupDocs_get__score(t_GroupDocs *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object._get_score());
            return PyFloat_FromDouble((double) value);
          }

          static PyObject *t_GroupDocs_get__scoreDocs(t_GroupDocs *self, void *data)
          {
            JArray< ::org::apache::lucene::search::ScoreDoc > value((jobject) NULL);
            OBJ_CALL(value = self->object._get_scoreDocs());
            return JArray<jobject>(value.this$).wrap(::org::apache::lucene::search::t_ScoreDoc::wrap_jobject);
          }

          static PyObject *t_GroupDocs_get__totalHits(t_GroupDocs *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object._get_totalHits());
            return PyInt_FromLong((long) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/surround/query/DistanceSubQuery.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/queryparser/surround/query/SpanNearClauseFactory.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace query {

            ::java::lang::Class *DistanceSubQuery::class$ = NULL;
            jmethodID *DistanceSubQuery::mids$ = NULL;
            bool DistanceSubQuery::live$ = false;

            jclass DistanceSubQuery::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/surround/query/DistanceSubQuery");

                mids$ = new jmethodID[max_mid];
                mids$[mid_addSpanQueries_0564f431] = env->getMethodID(cls, "addSpanQueries", "(Lorg/apache/lucene/queryparser/surround/query/SpanNearClauseFactory;)V");
                mids$[mid_distanceSubQueryNotAllowed_14c7b5c5] = env->getMethodID(cls, "distanceSubQueryNotAllowed", "()Ljava/lang/String;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            void DistanceSubQuery::addSpanQueries(const ::org::apache::lucene::queryparser::surround::query::SpanNearClauseFactory & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_addSpanQueries_0564f431], a0.this$);
            }

            ::java::lang::String DistanceSubQuery::distanceSubQueryNotAllowed() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_distanceSubQueryNotAllowed_14c7b5c5]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace query {
            static PyObject *t_DistanceSubQuery_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_DistanceSubQuery_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_DistanceSubQuery_addSpanQueries(t_DistanceSubQuery *self, PyObject *arg);
            static PyObject *t_DistanceSubQuery_distanceSubQueryNotAllowed(t_DistanceSubQuery *self);

            static PyMethodDef t_DistanceSubQuery__methods_[] = {
              DECLARE_METHOD(t_DistanceSubQuery, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_DistanceSubQuery, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_DistanceSubQuery, addSpanQueries, METH_O),
              DECLARE_METHOD(t_DistanceSubQuery, distanceSubQueryNotAllowed, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(DistanceSubQuery, t_DistanceSubQuery, ::java::lang::Object, DistanceSubQuery, abstract_init, 0, 0, 0, 0, 0);

            void t_DistanceSubQuery::install(PyObject *module)
            {
              installType(&PY_TYPE(DistanceSubQuery), module, "DistanceSubQuery", 0);
            }

            void t_DistanceSubQuery::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(DistanceSubQuery).tp_dict, "class_", make_descriptor(DistanceSubQuery::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(DistanceSubQuery).tp_dict, "wrapfn_", make_descriptor(t_DistanceSubQuery::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(DistanceSubQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_DistanceSubQuery_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, DistanceSubQuery::initializeClass, 1)))
                return NULL;
              return t_DistanceSubQuery::wrap_Object(DistanceSubQuery(((t_DistanceSubQuery *) arg)->object.this$));
            }
            static PyObject *t_DistanceSubQuery_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, DistanceSubQuery::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_DistanceSubQuery_addSpanQueries(t_DistanceSubQuery *self, PyObject *arg)
            {
              ::org::apache::lucene::queryparser::surround::query::SpanNearClauseFactory a0((jobject) NULL);

              if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::surround::query::SpanNearClauseFactory::initializeClass, &a0))
              {
                OBJ_CALL(self->object.addSpanQueries(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "addSpanQueries", arg);
              return NULL;
            }

            static PyObject *t_DistanceSubQuery_distanceSubQueryNotAllowed(t_DistanceSubQuery *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.distanceSubQueryNotAllowed());
              return j2p(result);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/hi/HindiAnalyzer.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "java/lang/String.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace hi {

          ::java::lang::Class *HindiAnalyzer::class$ = NULL;
          jmethodID *HindiAnalyzer::mids$ = NULL;
          bool HindiAnalyzer::live$ = false;
          ::java::lang::String *HindiAnalyzer::DEFAULT_STOPWORD_FILE = NULL;

          jclass HindiAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/hi/HindiAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_0d96cf33] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;)V");
              mids$[mid_init$_6d1f9881] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_3ea629c6] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/util/CharArraySet;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_83eafe28] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_c9d7e4a3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_getDefaultStopSet_d2d3505c] = env->getStaticMethodID(cls, "getDefaultStopSet", "()Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_STOPWORD_FILE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_STOPWORD_FILE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          HindiAnalyzer::HindiAnalyzer() : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          HindiAnalyzer::HindiAnalyzer(const ::org::apache::lucene::util::Version & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_0d96cf33, a0.this$)) {}

          HindiAnalyzer::HindiAnalyzer(const ::org::apache::lucene::analysis::util::CharArraySet & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_6d1f9881, a0.this$)) {}

          HindiAnalyzer::HindiAnalyzer(const ::org::apache::lucene::analysis::util::CharArraySet & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_3ea629c6, a0.this$, a1.this$)) {}

          HindiAnalyzer::HindiAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_83eafe28, a0.this$, a1.this$)) {}

          HindiAnalyzer::HindiAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1, const ::org::apache::lucene::analysis::util::CharArraySet & a2) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_c9d7e4a3, a0.this$, a1.this$, a2.this$)) {}

          ::org::apache::lucene::analysis::util::CharArraySet HindiAnalyzer::getDefaultStopSet()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getDefaultStopSet_d2d3505c]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace hi {
          static PyObject *t_HindiAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_HindiAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_HindiAnalyzer_init_(t_HindiAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_HindiAnalyzer_getDefaultStopSet(PyTypeObject *type);
          static PyObject *t_HindiAnalyzer_get__defaultStopSet(t_HindiAnalyzer *self, void *data);
          static PyGetSetDef t_HindiAnalyzer__fields_[] = {
            DECLARE_GET_FIELD(t_HindiAnalyzer, defaultStopSet),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_HindiAnalyzer__methods_[] = {
            DECLARE_METHOD(t_HindiAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HindiAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HindiAnalyzer, getDefaultStopSet, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(HindiAnalyzer, t_HindiAnalyzer, ::org::apache::lucene::analysis::util::StopwordAnalyzerBase, HindiAnalyzer, t_HindiAnalyzer_init_, 0, 0, t_HindiAnalyzer__fields_, 0, 0);

          void t_HindiAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(HindiAnalyzer), module, "HindiAnalyzer", 0);
          }

          void t_HindiAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(HindiAnalyzer).tp_dict, "class_", make_descriptor(HindiAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(HindiAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_HindiAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(HindiAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(HindiAnalyzer::initializeClass);
            PyDict_SetItemString(PY_TYPE(HindiAnalyzer).tp_dict, "DEFAULT_STOPWORD_FILE", make_descriptor(j2p(*HindiAnalyzer::DEFAULT_STOPWORD_FILE)));
          }

          static PyObject *t_HindiAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, HindiAnalyzer::initializeClass, 1)))
              return NULL;
            return t_HindiAnalyzer::wrap_Object(HindiAnalyzer(((t_HindiAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_HindiAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, HindiAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_HindiAnalyzer_init_(t_HindiAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                HindiAnalyzer object((jobject) NULL);

                INT_CALL(object = HindiAnalyzer());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                HindiAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::util::Version::initializeClass, &a0))
                {
                  INT_CALL(object = HindiAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::analysis::util::CharArraySet a0((jobject) NULL);
                PyTypeObject **p0;
                HindiAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = HindiAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::analysis::util::CharArraySet a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                HindiAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = HindiAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                HindiAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "kK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = HindiAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                ::org::apache::lucene::analysis::util::CharArraySet a2((jobject) NULL);
                PyTypeObject **p2;
                HindiAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "kKK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_, &a2, &p2, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = HindiAnalyzer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_HindiAnalyzer_getDefaultStopSet(PyTypeObject *type)
          {
            ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::hi::HindiAnalyzer::getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_HindiAnalyzer_get__defaultStopSet(t_HindiAnalyzer *self, void *data)
          {
            ::org::apache::lucene::analysis::util::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ar/ArabicNormalizationFilterFactory.h"
#include "org/apache/lucene/analysis/ar/ArabicNormalizationFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/analysis/util/MultiTermAwareComponent.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/util/AbstractAnalysisFactory.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ar {

          ::java::lang::Class *ArabicNormalizationFilterFactory::class$ = NULL;
          jmethodID *ArabicNormalizationFilterFactory::mids$ = NULL;
          bool ArabicNormalizationFilterFactory::live$ = false;

          jclass ArabicNormalizationFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ar/ArabicNormalizationFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_4e13fbb2] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/ar/ArabicNormalizationFilter;");
              mids$[mid_getMultiTermComponent_0a3f1d72] = env->getMethodID(cls, "getMultiTermComponent", "()Lorg/apache/lucene/analysis/util/AbstractAnalysisFactory;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ArabicNormalizationFilterFactory::ArabicNormalizationFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::ar::ArabicNormalizationFilter ArabicNormalizationFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::ar::ArabicNormalizationFilter(env->callObjectMethod(this$, mids$[mid_create_4e13fbb2], a0.this$));
          }

          ::org::apache::lucene::analysis::util::AbstractAnalysisFactory ArabicNormalizationFilterFactory::getMultiTermComponent() const
          {
            return ::org::apache::lucene::analysis::util::AbstractAnalysisFactory(env->callObjectMethod(this$, mids$[mid_getMultiTermComponent_0a3f1d72]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ar {
          static PyObject *t_ArabicNormalizationFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ArabicNormalizationFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ArabicNormalizationFilterFactory_init_(t_ArabicNormalizationFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ArabicNormalizationFilterFactory_create(t_ArabicNormalizationFilterFactory *self, PyObject *args);
          static PyObject *t_ArabicNormalizationFilterFactory_getMultiTermComponent(t_ArabicNormalizationFilterFactory *self);
          static PyObject *t_ArabicNormalizationFilterFactory_get__multiTermComponent(t_ArabicNormalizationFilterFactory *self, void *data);
          static PyGetSetDef t_ArabicNormalizationFilterFactory__fields_[] = {
            DECLARE_GET_FIELD(t_ArabicNormalizationFilterFactory, multiTermComponent),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_ArabicNormalizationFilterFactory__methods_[] = {
            DECLARE_METHOD(t_ArabicNormalizationFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ArabicNormalizationFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ArabicNormalizationFilterFactory, create, METH_VARARGS),
            DECLARE_METHOD(t_ArabicNormalizationFilterFactory, getMultiTermComponent, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ArabicNormalizationFilterFactory, t_ArabicNormalizationFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, ArabicNormalizationFilterFactory, t_ArabicNormalizationFilterFactory_init_, 0, 0, t_ArabicNormalizationFilterFactory__fields_, 0, 0);

          void t_ArabicNormalizationFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(ArabicNormalizationFilterFactory), module, "ArabicNormalizationFilterFactory", 0);
          }

          void t_ArabicNormalizationFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ArabicNormalizationFilterFactory).tp_dict, "class_", make_descriptor(ArabicNormalizationFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ArabicNormalizationFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_ArabicNormalizationFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ArabicNormalizationFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ArabicNormalizationFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ArabicNormalizationFilterFactory::initializeClass, 1)))
              return NULL;
            return t_ArabicNormalizationFilterFactory::wrap_Object(ArabicNormalizationFilterFactory(((t_ArabicNormalizationFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_ArabicNormalizationFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ArabicNormalizationFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ArabicNormalizationFilterFactory_init_(t_ArabicNormalizationFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            ArabicNormalizationFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = ArabicNormalizationFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ArabicNormalizationFilterFactory_create(t_ArabicNormalizationFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::ar::ArabicNormalizationFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::ar::t_ArabicNormalizationFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(ArabicNormalizationFilterFactory), (PyObject *) self, "create", args, 2);
          }

          static PyObject *t_ArabicNormalizationFilterFactory_getMultiTermComponent(t_ArabicNormalizationFilterFactory *self)
          {
            ::org::apache::lucene::analysis::util::AbstractAnalysisFactory result((jobject) NULL);
            OBJ_CALL(result = self->object.getMultiTermComponent());
            return ::org::apache::lucene::analysis::util::t_AbstractAnalysisFactory::wrap_Object(result);
          }

          static PyObject *t_ArabicNormalizationFilterFactory_get__multiTermComponent(t_ArabicNormalizationFilterFactory *self, void *data)
          {
            ::org::apache::lucene::analysis::util::AbstractAnalysisFactory value((jobject) NULL);
            OBJ_CALL(value = self->object.getMultiTermComponent());
            return ::org::apache::lucene::analysis::util::t_AbstractAnalysisFactory::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/fr/FrenchLightStemFilterFactory.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fr {

          ::java::lang::Class *FrenchLightStemFilterFactory::class$ = NULL;
          jmethodID *FrenchLightStemFilterFactory::mids$ = NULL;
          bool FrenchLightStemFilterFactory::live$ = false;

          jclass FrenchLightStemFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/fr/FrenchLightStemFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FrenchLightStemFilterFactory::FrenchLightStemFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream FrenchLightStemFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fr {
          static PyObject *t_FrenchLightStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FrenchLightStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FrenchLightStemFilterFactory_init_(t_FrenchLightStemFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FrenchLightStemFilterFactory_create(t_FrenchLightStemFilterFactory *self, PyObject *args);

          static PyMethodDef t_FrenchLightStemFilterFactory__methods_[] = {
            DECLARE_METHOD(t_FrenchLightStemFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FrenchLightStemFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FrenchLightStemFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FrenchLightStemFilterFactory, t_FrenchLightStemFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, FrenchLightStemFilterFactory, t_FrenchLightStemFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_FrenchLightStemFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(FrenchLightStemFilterFactory), module, "FrenchLightStemFilterFactory", 0);
          }

          void t_FrenchLightStemFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FrenchLightStemFilterFactory).tp_dict, "class_", make_descriptor(FrenchLightStemFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FrenchLightStemFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_FrenchLightStemFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FrenchLightStemFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FrenchLightStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FrenchLightStemFilterFactory::initializeClass, 1)))
              return NULL;
            return t_FrenchLightStemFilterFactory::wrap_Object(FrenchLightStemFilterFactory(((t_FrenchLightStemFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_FrenchLightStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FrenchLightStemFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FrenchLightStemFilterFactory_init_(t_FrenchLightStemFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            FrenchLightStemFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = FrenchLightStemFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_FrenchLightStemFilterFactory_create(t_FrenchLightStemFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(FrenchLightStemFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/automaton/CompiledAutomaton.h"
#include "org/apache/lucene/util/automaton/Automaton.h"
#include "java/lang/Boolean.h"
#include "org/apache/lucene/util/BytesRefBuilder.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/automaton/CompiledAutomaton$AUTOMATON_TYPE.h"
#include "org/apache/lucene/util/automaton/ByteRunAutomaton.h"
#include "org/apache/lucene/index/Terms.h"
#include "org/apache/lucene/index/TermsEnum.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {

          ::java::lang::Class *CompiledAutomaton::class$ = NULL;
          jmethodID *CompiledAutomaton::mids$ = NULL;
          jfieldID *CompiledAutomaton::fids$ = NULL;
          bool CompiledAutomaton::live$ = false;

          jclass CompiledAutomaton::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/automaton/CompiledAutomaton");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_fc7cf394] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/automaton/Automaton;)V");
              mids$[mid_init$_3d57924d] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/automaton/Automaton;Ljava/lang/Boolean;Z)V");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_floor_d0941801] = env->getMethodID(cls, "floor", "(Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/util/BytesRefBuilder;)Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_getTermsEnum_fb3ac14e] = env->getMethodID(cls, "getTermsEnum", "(Lorg/apache/lucene/index/Terms;)Lorg/apache/lucene/index/TermsEnum;");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");

              fids$ = new jfieldID[max_fid];
              fids$[fid_automaton] = env->getFieldID(cls, "automaton", "Lorg/apache/lucene/util/automaton/Automaton;");
              fids$[fid_commonSuffixRef] = env->getFieldID(cls, "commonSuffixRef", "Lorg/apache/lucene/util/BytesRef;");
              fids$[fid_finite] = env->getFieldID(cls, "finite", "Ljava/lang/Boolean;");
              fids$[fid_runAutomaton] = env->getFieldID(cls, "runAutomaton", "Lorg/apache/lucene/util/automaton/ByteRunAutomaton;");
              fids$[fid_term] = env->getFieldID(cls, "term", "Lorg/apache/lucene/util/BytesRef;");
              fids$[fid_type] = env->getFieldID(cls, "type", "Lorg/apache/lucene/util/automaton/CompiledAutomaton$AUTOMATON_TYPE;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CompiledAutomaton::CompiledAutomaton(const ::org::apache::lucene::util::automaton::Automaton & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_fc7cf394, a0.this$)) {}

          CompiledAutomaton::CompiledAutomaton(const ::org::apache::lucene::util::automaton::Automaton & a0, const ::java::lang::Boolean & a1, jboolean a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_3d57924d, a0.this$, a1.this$, a2)) {}

          jboolean CompiledAutomaton::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          ::org::apache::lucene::util::BytesRef CompiledAutomaton::floor(const ::org::apache::lucene::util::BytesRef & a0, const ::org::apache::lucene::util::BytesRefBuilder & a1) const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_floor_d0941801], a0.this$, a1.this$));
          }

          ::org::apache::lucene::index::TermsEnum CompiledAutomaton::getTermsEnum(const ::org::apache::lucene::index::Terms & a0) const
          {
            return ::org::apache::lucene::index::TermsEnum(env->callObjectMethod(this$, mids$[mid_getTermsEnum_fb3ac14e], a0.this$));
          }

          jint CompiledAutomaton::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          ::org::apache::lucene::util::automaton::Automaton CompiledAutomaton::_get_automaton() const
          {
            return ::org::apache::lucene::util::automaton::Automaton(env->getObjectField(this$, fids$[fid_automaton]));
          }

          ::org::apache::lucene::util::BytesRef CompiledAutomaton::_get_commonSuffixRef() const
          {
            return ::org::apache::lucene::util::BytesRef(env->getObjectField(this$, fids$[fid_commonSuffixRef]));
          }

          ::java::lang::Boolean CompiledAutomaton::_get_finite() const
          {
            return ::java::lang::Boolean(env->getObjectField(this$, fids$[fid_finite]));
          }

          ::org::apache::lucene::util::automaton::ByteRunAutomaton CompiledAutomaton::_get_runAutomaton() const
          {
            return ::org::apache::lucene::util::automaton::ByteRunAutomaton(env->getObjectField(this$, fids$[fid_runAutomaton]));
          }

          ::org::apache::lucene::util::BytesRef CompiledAutomaton::_get_term() const
          {
            return ::org::apache::lucene::util::BytesRef(env->getObjectField(this$, fids$[fid_term]));
          }

          ::org::apache::lucene::util::automaton::CompiledAutomaton$AUTOMATON_TYPE CompiledAutomaton::_get_type() const
          {
            return ::org::apache::lucene::util::automaton::CompiledAutomaton$AUTOMATON_TYPE(env->getObjectField(this$, fids$[fid_type]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {
          static PyObject *t_CompiledAutomaton_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CompiledAutomaton_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CompiledAutomaton_init_(t_CompiledAutomaton *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CompiledAutomaton_equals(t_CompiledAutomaton *self, PyObject *args);
          static PyObject *t_CompiledAutomaton_floor(t_CompiledAutomaton *self, PyObject *args);
          static PyObject *t_CompiledAutomaton_getTermsEnum(t_CompiledAutomaton *self, PyObject *arg);
          static PyObject *t_CompiledAutomaton_hashCode(t_CompiledAutomaton *self, PyObject *args);
          static PyObject *t_CompiledAutomaton_get__automaton(t_CompiledAutomaton *self, void *data);
          static PyObject *t_CompiledAutomaton_get__commonSuffixRef(t_CompiledAutomaton *self, void *data);
          static PyObject *t_CompiledAutomaton_get__finite(t_CompiledAutomaton *self, void *data);
          static PyObject *t_CompiledAutomaton_get__runAutomaton(t_CompiledAutomaton *self, void *data);
          static PyObject *t_CompiledAutomaton_get__term(t_CompiledAutomaton *self, void *data);
          static PyObject *t_CompiledAutomaton_get__type(t_CompiledAutomaton *self, void *data);

          static PyGetSetDef t_CompiledAutomaton__fields_[] = {
            DECLARE_GET_FIELD(t_CompiledAutomaton, automaton),
            DECLARE_GET_FIELD(t_CompiledAutomaton, commonSuffixRef),
            DECLARE_GET_FIELD(t_CompiledAutomaton, finite),
            DECLARE_GET_FIELD(t_CompiledAutomaton, runAutomaton),
            DECLARE_GET_FIELD(t_CompiledAutomaton, term),
            DECLARE_GET_FIELD(t_CompiledAutomaton, type),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_CompiledAutomaton__methods_[] = {
            DECLARE_METHOD(t_CompiledAutomaton, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CompiledAutomaton, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CompiledAutomaton, equals, METH_VARARGS),
            DECLARE_METHOD(t_CompiledAutomaton, floor, METH_VARARGS),
            DECLARE_METHOD(t_CompiledAutomaton, getTermsEnum, METH_O),
            DECLARE_METHOD(t_CompiledAutomaton, hashCode, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CompiledAutomaton, t_CompiledAutomaton, ::java::lang::Object, CompiledAutomaton, t_CompiledAutomaton_init_, 0, 0, t_CompiledAutomaton__fields_, 0, 0);

          void t_CompiledAutomaton::install(PyObject *module)
          {
            installType(&PY_TYPE(CompiledAutomaton), module, "CompiledAutomaton", 0);
            PyDict_SetItemString(PY_TYPE(CompiledAutomaton).tp_dict, "AUTOMATON_TYPE", make_descriptor(&PY_TYPE(CompiledAutomaton$AUTOMATON_TYPE)));
          }

          void t_CompiledAutomaton::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CompiledAutomaton).tp_dict, "class_", make_descriptor(CompiledAutomaton::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CompiledAutomaton).tp_dict, "wrapfn_", make_descriptor(t_CompiledAutomaton::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CompiledAutomaton).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CompiledAutomaton_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CompiledAutomaton::initializeClass, 1)))
              return NULL;
            return t_CompiledAutomaton::wrap_Object(CompiledAutomaton(((t_CompiledAutomaton *) arg)->object.this$));
          }
          static PyObject *t_CompiledAutomaton_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CompiledAutomaton::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CompiledAutomaton_init_(t_CompiledAutomaton *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
                CompiledAutomaton object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0))
                {
                  INT_CALL(object = CompiledAutomaton(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
                ::java::lang::Boolean a1((jobject) NULL);
                jboolean a2;
                CompiledAutomaton object((jobject) NULL);

                if (!parseArgs(args, "kOZ", ::org::apache::lucene::util::automaton::Automaton::initializeClass, &::java::lang::PY_TYPE(Boolean), &a0, &a1, &a2))
                {
                  INT_CALL(object = CompiledAutomaton(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_CompiledAutomaton_equals(t_CompiledAutomaton *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(CompiledAutomaton), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_CompiledAutomaton_floor(t_CompiledAutomaton *self, PyObject *args)
          {
            ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
            ::org::apache::lucene::util::BytesRefBuilder a1((jobject) NULL);
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::BytesRef::initializeClass, ::org::apache::lucene::util::BytesRefBuilder::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.floor(a0, a1));
              return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "floor", args);
            return NULL;
          }

          static PyObject *t_CompiledAutomaton_getTermsEnum(t_CompiledAutomaton *self, PyObject *arg)
          {
            ::org::apache::lucene::index::Terms a0((jobject) NULL);
            ::org::apache::lucene::index::TermsEnum result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::index::Terms::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.getTermsEnum(a0));
              return ::org::apache::lucene::index::t_TermsEnum::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getTermsEnum", arg);
            return NULL;
          }

          static PyObject *t_CompiledAutomaton_hashCode(t_CompiledAutomaton *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(CompiledAutomaton), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_CompiledAutomaton_get__automaton(t_CompiledAutomaton *self, void *data)
          {
            ::org::apache::lucene::util::automaton::Automaton value((jobject) NULL);
            OBJ_CALL(value = self->object._get_automaton());
            return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(value);
          }

          static PyObject *t_CompiledAutomaton_get__commonSuffixRef(t_CompiledAutomaton *self, void *data)
          {
            ::org::apache::lucene::util::BytesRef value((jobject) NULL);
            OBJ_CALL(value = self->object._get_commonSuffixRef());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(value);
          }

          static PyObject *t_CompiledAutomaton_get__finite(t_CompiledAutomaton *self, void *data)
          {
            ::java::lang::Boolean value((jobject) NULL);
            OBJ_CALL(value = self->object._get_finite());
            return ::java::lang::t_Boolean::wrap_Object(value);
          }

          static PyObject *t_CompiledAutomaton_get__runAutomaton(t_CompiledAutomaton *self, void *data)
          {
            ::org::apache::lucene::util::automaton::ByteRunAutomaton value((jobject) NULL);
            OBJ_CALL(value = self->object._get_runAutomaton());
            return ::org::apache::lucene::util::automaton::t_ByteRunAutomaton::wrap_Object(value);
          }

          static PyObject *t_CompiledAutomaton_get__term(t_CompiledAutomaton *self, void *data)
          {
            ::org::apache::lucene::util::BytesRef value((jobject) NULL);
            OBJ_CALL(value = self->object._get_term());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(value);
          }

          static PyObject *t_CompiledAutomaton_get__type(t_CompiledAutomaton *self, void *data)
          {
            ::org::apache::lucene::util::automaton::CompiledAutomaton$AUTOMATON_TYPE value((jobject) NULL);
            OBJ_CALL(value = self->object._get_type());
            return ::org::apache::lucene::util::automaton::t_CompiledAutomaton$AUTOMATON_TYPE::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/NIOFSDirectory.h"
#include "org/apache/lucene/store/IndexInput.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/store/IOContext.h"
#include "java/io/File.h"
#include "org/apache/lucene/store/LockFactory.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *NIOFSDirectory::class$ = NULL;
        jmethodID *NIOFSDirectory::mids$ = NULL;
        bool NIOFSDirectory::live$ = false;

        jclass NIOFSDirectory::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/NIOFSDirectory");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_c3dacf57] = env->getMethodID(cls, "<init>", "(Ljava/io/File;)V");
            mids$[mid_init$_5f9cf6ef] = env->getMethodID(cls, "<init>", "(Ljava/io/File;Lorg/apache/lucene/store/LockFactory;)V");
            mids$[mid_openInput_3e1b5375] = env->getMethodID(cls, "openInput", "(Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/store/IndexInput;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        NIOFSDirectory::NIOFSDirectory(const ::java::io::File & a0) : ::org::apache::lucene::store::FSDirectory(env->newObject(initializeClass, &mids$, mid_init$_c3dacf57, a0.this$)) {}

        NIOFSDirectory::NIOFSDirectory(const ::java::io::File & a0, const ::org::apache::lucene::store::LockFactory & a1) : ::org::apache::lucene::store::FSDirectory(env->newObject(initializeClass, &mids$, mid_init$_5f9cf6ef, a0.this$, a1.this$)) {}

        ::org::apache::lucene::store::IndexInput NIOFSDirectory::openInput(const ::java::lang::String & a0, const ::org::apache::lucene::store::IOContext & a1) const
        {
          return ::org::apache::lucene::store::IndexInput(env->callObjectMethod(this$, mids$[mid_openInput_3e1b5375], a0.this$, a1.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_NIOFSDirectory_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NIOFSDirectory_instance_(PyTypeObject *type, PyObject *arg);
        static int t_NIOFSDirectory_init_(t_NIOFSDirectory *self, PyObject *args, PyObject *kwds);
        static PyObject *t_NIOFSDirectory_openInput(t_NIOFSDirectory *self, PyObject *args);

        static PyMethodDef t_NIOFSDirectory__methods_[] = {
          DECLARE_METHOD(t_NIOFSDirectory, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NIOFSDirectory, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NIOFSDirectory, openInput, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(NIOFSDirectory, t_NIOFSDirectory, ::org::apache::lucene::store::FSDirectory, NIOFSDirectory, t_NIOFSDirectory_init_, 0, 0, 0, 0, 0);

        void t_NIOFSDirectory::install(PyObject *module)
        {
          installType(&PY_TYPE(NIOFSDirectory), module, "NIOFSDirectory", 0);
        }

        void t_NIOFSDirectory::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(NIOFSDirectory).tp_dict, "class_", make_descriptor(NIOFSDirectory::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(NIOFSDirectory).tp_dict, "wrapfn_", make_descriptor(t_NIOFSDirectory::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(NIOFSDirectory).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_NIOFSDirectory_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, NIOFSDirectory::initializeClass, 1)))
            return NULL;
          return t_NIOFSDirectory::wrap_Object(NIOFSDirectory(((t_NIOFSDirectory *) arg)->object.this$));
        }
        static PyObject *t_NIOFSDirectory_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, NIOFSDirectory::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_NIOFSDirectory_init_(t_NIOFSDirectory *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::io::File a0((jobject) NULL);
              NIOFSDirectory object((jobject) NULL);

              if (!parseArgs(args, "k", ::java::io::File::initializeClass, &a0))
              {
                INT_CALL(object = NIOFSDirectory(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              ::java::io::File a0((jobject) NULL);
              ::org::apache::lucene::store::LockFactory a1((jobject) NULL);
              NIOFSDirectory object((jobject) NULL);

              if (!parseArgs(args, "kk", ::java::io::File::initializeClass, ::org::apache::lucene::store::LockFactory::initializeClass, &a0, &a1))
              {
                INT_CALL(object = NIOFSDirectory(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_NIOFSDirectory_openInput(t_NIOFSDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::store::IOContext a1((jobject) NULL);
          ::org::apache::lucene::store::IndexInput result((jobject) NULL);

          if (!parseArgs(args, "sk", ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.openInput(a0, a1));
            return ::org::apache::lucene::store::t_IndexInput::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(NIOFSDirectory), (PyObject *) self, "openInput", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/bg/BulgarianStemFilterFactory.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace bg {

          ::java::lang::Class *BulgarianStemFilterFactory::class$ = NULL;
          jmethodID *BulgarianStemFilterFactory::mids$ = NULL;
          bool BulgarianStemFilterFactory::live$ = false;

          jclass BulgarianStemFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/bg/BulgarianStemFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BulgarianStemFilterFactory::BulgarianStemFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream BulgarianStemFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace bg {
          static PyObject *t_BulgarianStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BulgarianStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_BulgarianStemFilterFactory_init_(t_BulgarianStemFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_BulgarianStemFilterFactory_create(t_BulgarianStemFilterFactory *self, PyObject *args);

          static PyMethodDef t_BulgarianStemFilterFactory__methods_[] = {
            DECLARE_METHOD(t_BulgarianStemFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BulgarianStemFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BulgarianStemFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(BulgarianStemFilterFactory, t_BulgarianStemFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, BulgarianStemFilterFactory, t_BulgarianStemFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_BulgarianStemFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(BulgarianStemFilterFactory), module, "BulgarianStemFilterFactory", 0);
          }

          void t_BulgarianStemFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(BulgarianStemFilterFactory).tp_dict, "class_", make_descriptor(BulgarianStemFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(BulgarianStemFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_BulgarianStemFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(BulgarianStemFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_BulgarianStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BulgarianStemFilterFactory::initializeClass, 1)))
              return NULL;
            return t_BulgarianStemFilterFactory::wrap_Object(BulgarianStemFilterFactory(((t_BulgarianStemFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_BulgarianStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BulgarianStemFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_BulgarianStemFilterFactory_init_(t_BulgarianStemFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            BulgarianStemFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = BulgarianStemFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_BulgarianStemFilterFactory_create(t_BulgarianStemFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(BulgarianStemFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/writercache/CompactLabelToOrdinal.h"
#include "org/apache/lucene/facet/taxonomy/FacetLabel.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          namespace writercache {

            ::java::lang::Class *CompactLabelToOrdinal::class$ = NULL;
            jmethodID *CompactLabelToOrdinal::mids$ = NULL;
            bool CompactLabelToOrdinal::live$ = false;
            jfloat CompactLabelToOrdinal::DefaultLoadFactor = (jfloat) 0;

            jclass CompactLabelToOrdinal::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/writercache/CompactLabelToOrdinal");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_776c6331] = env->getMethodID(cls, "<init>", "(IFI)V");
                mids$[mid_addLabel_7ba580a8] = env->getMethodID(cls, "addLabel", "(Lorg/apache/lucene/facet/taxonomy/FacetLabel;I)V");
                mids$[mid_getOrdinal_283f83f5] = env->getMethodID(cls, "getOrdinal", "(Lorg/apache/lucene/facet/taxonomy/FacetLabel;)I");
                mids$[mid_sizeOfMap_54c6a179] = env->getMethodID(cls, "sizeOfMap", "()I");

                class$ = (::java::lang::Class *) new JObject(cls);
                cls = (jclass) class$->this$;

                DefaultLoadFactor = env->getStaticFloatField(cls, "DefaultLoadFactor");
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            CompactLabelToOrdinal::CompactLabelToOrdinal(jint a0, jfloat a1, jint a2) : ::org::apache::lucene::facet::taxonomy::writercache::LabelToOrdinal(env->newObject(initializeClass, &mids$, mid_init$_776c6331, a0, a1, a2)) {}

            void CompactLabelToOrdinal::addLabel(const ::org::apache::lucene::facet::taxonomy::FacetLabel & a0, jint a1) const
            {
              env->callVoidMethod(this$, mids$[mid_addLabel_7ba580a8], a0.this$, a1);
            }

            jint CompactLabelToOrdinal::getOrdinal(const ::org::apache::lucene::facet::taxonomy::FacetLabel & a0) const
            {
              return env->callIntMethod(this$, mids$[mid_getOrdinal_283f83f5], a0.this$);
            }

            jint CompactLabelToOrdinal::sizeOfMap() const
            {
              return env->callIntMethod(this$, mids$[mid_sizeOfMap_54c6a179]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          namespace writercache {
            static PyObject *t_CompactLabelToOrdinal_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_CompactLabelToOrdinal_instance_(PyTypeObject *type, PyObject *arg);
            static int t_CompactLabelToOrdinal_init_(t_CompactLabelToOrdinal *self, PyObject *args, PyObject *kwds);
            static PyObject *t_CompactLabelToOrdinal_addLabel(t_CompactLabelToOrdinal *self, PyObject *args);
            static PyObject *t_CompactLabelToOrdinal_getOrdinal(t_CompactLabelToOrdinal *self, PyObject *args);
            static PyObject *t_CompactLabelToOrdinal_sizeOfMap(t_CompactLabelToOrdinal *self);

            static PyMethodDef t_CompactLabelToOrdinal__methods_[] = {
              DECLARE_METHOD(t_CompactLabelToOrdinal, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_CompactLabelToOrdinal, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_CompactLabelToOrdinal, addLabel, METH_VARARGS),
              DECLARE_METHOD(t_CompactLabelToOrdinal, getOrdinal, METH_VARARGS),
              DECLARE_METHOD(t_CompactLabelToOrdinal, sizeOfMap, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(CompactLabelToOrdinal, t_CompactLabelToOrdinal, ::org::apache::lucene::facet::taxonomy::writercache::LabelToOrdinal, CompactLabelToOrdinal, t_CompactLabelToOrdinal_init_, 0, 0, 0, 0, 0);

            void t_CompactLabelToOrdinal::install(PyObject *module)
            {
              installType(&PY_TYPE(CompactLabelToOrdinal), module, "CompactLabelToOrdinal", 0);
            }

            void t_CompactLabelToOrdinal::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(CompactLabelToOrdinal).tp_dict, "class_", make_descriptor(CompactLabelToOrdinal::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(CompactLabelToOrdinal).tp_dict, "wrapfn_", make_descriptor(t_CompactLabelToOrdinal::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(CompactLabelToOrdinal).tp_dict, "boxfn_", make_descriptor(boxObject));
              env->getClass(CompactLabelToOrdinal::initializeClass);
              PyDict_SetItemString(PY_TYPE(CompactLabelToOrdinal).tp_dict, "DefaultLoadFactor", make_descriptor(CompactLabelToOrdinal::DefaultLoadFactor));
            }

            static PyObject *t_CompactLabelToOrdinal_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, CompactLabelToOrdinal::initializeClass, 1)))
                return NULL;
              return t_CompactLabelToOrdinal::wrap_Object(CompactLabelToOrdinal(((t_CompactLabelToOrdinal *) arg)->object.this$));
            }
            static PyObject *t_CompactLabelToOrdinal_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, CompactLabelToOrdinal::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_CompactLabelToOrdinal_init_(t_CompactLabelToOrdinal *self, PyObject *args, PyObject *kwds)
            {
              jint a0;
              jfloat a1;
              jint a2;
              CompactLabelToOrdinal object((jobject) NULL);

              if (!parseArgs(args, "IFI", &a0, &a1, &a2))
              {
                INT_CALL(object = CompactLabelToOrdinal(a0, a1, a2));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_CompactLabelToOrdinal_addLabel(t_CompactLabelToOrdinal *self, PyObject *args)
            {
              ::org::apache::lucene::facet::taxonomy::FacetLabel a0((jobject) NULL);
              jint a1;

              if (!parseArgs(args, "kI", ::org::apache::lucene::facet::taxonomy::FacetLabel::initializeClass, &a0, &a1))
              {
                OBJ_CALL(self->object.addLabel(a0, a1));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(CompactLabelToOrdinal), (PyObject *) self, "addLabel", args, 2);
            }

            static PyObject *t_CompactLabelToOrdinal_getOrdinal(t_CompactLabelToOrdinal *self, PyObject *args)
            {
              ::org::apache::lucene::facet::taxonomy::FacetLabel a0((jobject) NULL);
              jint result;

              if (!parseArgs(args, "k", ::org::apache::lucene::facet::taxonomy::FacetLabel::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.getOrdinal(a0));
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(CompactLabelToOrdinal), (PyObject *) self, "getOrdinal", args, 2);
            }

            static PyObject *t_CompactLabelToOrdinal_sizeOfMap(t_CompactLabelToOrdinal *self)
            {
              jint result;
              OBJ_CALL(result = self->object.sizeOfMap());
              return PyInt_FromLong((long) result);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/standard/std40/UAX29URLEmailTokenizerImpl40.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "java/io/Reader.h"
#include "org/apache/lucene/analysis/standard/StandardTokenizerInterface.h"
#include "org/apache/lucene/analysis/tokenattributes/CharTermAttribute.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {
          namespace std40 {

            ::java::lang::Class *UAX29URLEmailTokenizerImpl40::class$ = NULL;
            jmethodID *UAX29URLEmailTokenizerImpl40::mids$ = NULL;
            bool UAX29URLEmailTokenizerImpl40::live$ = false;
            jint UAX29URLEmailTokenizerImpl40::EMAIL_TYPE = (jint) 0;
            jint UAX29URLEmailTokenizerImpl40::HANGUL_TYPE = (jint) 0;
            jint UAX29URLEmailTokenizerImpl40::HIRAGANA_TYPE = (jint) 0;
            jint UAX29URLEmailTokenizerImpl40::IDEOGRAPHIC_TYPE = (jint) 0;
            jint UAX29URLEmailTokenizerImpl40::KATAKANA_TYPE = (jint) 0;
            jint UAX29URLEmailTokenizerImpl40::NUMERIC_TYPE = (jint) 0;
            jint UAX29URLEmailTokenizerImpl40::SOUTH_EAST_ASIAN_TYPE = (jint) 0;
            jint UAX29URLEmailTokenizerImpl40::URL_TYPE = (jint) 0;
            jint UAX29URLEmailTokenizerImpl40::WORD_TYPE = (jint) 0;
            jint UAX29URLEmailTokenizerImpl40::YYEOF = (jint) 0;
            jint UAX29URLEmailTokenizerImpl40::YYINITIAL = (jint) 0;

            jclass UAX29URLEmailTokenizerImpl40::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/standard/std40/UAX29URLEmailTokenizerImpl40");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_cf2e3c10] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;)V");
                mids$[mid_getNextToken_54c6a179] = env->getMethodID(cls, "getNextToken", "()I");
                mids$[mid_getText_64c709f2] = env->getMethodID(cls, "getText", "(Lorg/apache/lucene/analysis/tokenattributes/CharTermAttribute;)V");
                mids$[mid_setBufferSize_39c7bd3c] = env->getMethodID(cls, "setBufferSize", "(I)V");
                mids$[mid_yybegin_39c7bd3c] = env->getMethodID(cls, "yybegin", "(I)V");
                mids$[mid_yychar_54c6a179] = env->getMethodID(cls, "yychar", "()I");
                mids$[mid_yycharat_39c7bd29] = env->getMethodID(cls, "yycharat", "(I)C");
                mids$[mid_yyclose_54c6a166] = env->getMethodID(cls, "yyclose", "()V");
                mids$[mid_yylength_54c6a179] = env->getMethodID(cls, "yylength", "()I");
                mids$[mid_yypushback_39c7bd3c] = env->getMethodID(cls, "yypushback", "(I)V");
                mids$[mid_yyreset_cf2e3c10] = env->getMethodID(cls, "yyreset", "(Ljava/io/Reader;)V");
                mids$[mid_yystate_54c6a179] = env->getMethodID(cls, "yystate", "()I");
                mids$[mid_yytext_14c7b5c5] = env->getMethodID(cls, "yytext", "()Ljava/lang/String;");

                class$ = (::java::lang::Class *) new JObject(cls);
                cls = (jclass) class$->this$;

                EMAIL_TYPE = env->getStaticIntField(cls, "EMAIL_TYPE");
                HANGUL_TYPE = env->getStaticIntField(cls, "HANGUL_TYPE");
                HIRAGANA_TYPE = env->getStaticIntField(cls, "HIRAGANA_TYPE");
                IDEOGRAPHIC_TYPE = env->getStaticIntField(cls, "IDEOGRAPHIC_TYPE");
                KATAKANA_TYPE = env->getStaticIntField(cls, "KATAKANA_TYPE");
                NUMERIC_TYPE = env->getStaticIntField(cls, "NUMERIC_TYPE");
                SOUTH_EAST_ASIAN_TYPE = env->getStaticIntField(cls, "SOUTH_EAST_ASIAN_TYPE");
                URL_TYPE = env->getStaticIntField(cls, "URL_TYPE");
                WORD_TYPE = env->getStaticIntField(cls, "WORD_TYPE");
                YYEOF = env->getStaticIntField(cls, "YYEOF");
                YYINITIAL = env->getStaticIntField(cls, "YYINITIAL");
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            UAX29URLEmailTokenizerImpl40::UAX29URLEmailTokenizerImpl40(const ::java::io::Reader & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_cf2e3c10, a0.this$)) {}

            jint UAX29URLEmailTokenizerImpl40::getNextToken() const
            {
              return env->callIntMethod(this$, mids$[mid_getNextToken_54c6a179]);
            }

            void UAX29URLEmailTokenizerImpl40::getText(const ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_getText_64c709f2], a0.this$);
            }

            void UAX29URLEmailTokenizerImpl40::setBufferSize(jint a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setBufferSize_39c7bd3c], a0);
            }

            void UAX29URLEmailTokenizerImpl40::yybegin(jint a0) const
            {
              env->callVoidMethod(this$, mids$[mid_yybegin_39c7bd3c], a0);
            }

            jint UAX29URLEmailTokenizerImpl40::yychar() const
            {
              return env->callIntMethod(this$, mids$[mid_yychar_54c6a179]);
            }

            jchar UAX29URLEmailTokenizerImpl40::yycharat(jint a0) const
            {
              return env->callCharMethod(this$, mids$[mid_yycharat_39c7bd29], a0);
            }

            void UAX29URLEmailTokenizerImpl40::yyclose() const
            {
              env->callVoidMethod(this$, mids$[mid_yyclose_54c6a166]);
            }

            jint UAX29URLEmailTokenizerImpl40::yylength() const
            {
              return env->callIntMethod(this$, mids$[mid_yylength_54c6a179]);
            }

            void UAX29URLEmailTokenizerImpl40::yypushback(jint a0) const
            {
              env->callVoidMethod(this$, mids$[mid_yypushback_39c7bd3c], a0);
            }

            void UAX29URLEmailTokenizerImpl40::yyreset(const ::java::io::Reader & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_yyreset_cf2e3c10], a0.this$);
            }

            jint UAX29URLEmailTokenizerImpl40::yystate() const
            {
              return env->callIntMethod(this$, mids$[mid_yystate_54c6a179]);
            }

            ::java::lang::String UAX29URLEmailTokenizerImpl40::yytext() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_yytext_14c7b5c5]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {
          namespace std40 {
            static PyObject *t_UAX29URLEmailTokenizerImpl40_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_UAX29URLEmailTokenizerImpl40_instance_(PyTypeObject *type, PyObject *arg);
            static int t_UAX29URLEmailTokenizerImpl40_init_(t_UAX29URLEmailTokenizerImpl40 *self, PyObject *args, PyObject *kwds);
            static PyObject *t_UAX29URLEmailTokenizerImpl40_getNextToken(t_UAX29URLEmailTokenizerImpl40 *self);
            static PyObject *t_UAX29URLEmailTokenizerImpl40_getText(t_UAX29URLEmailTokenizerImpl40 *self, PyObject *arg);
            static PyObject *t_UAX29URLEmailTokenizerImpl40_setBufferSize(t_UAX29URLEmailTokenizerImpl40 *self, PyObject *arg);
            static PyObject *t_UAX29URLEmailTokenizerImpl40_yybegin(t_UAX29URLEmailTokenizerImpl40 *self, PyObject *arg);
            static PyObject *t_UAX29URLEmailTokenizerImpl40_yychar(t_UAX29URLEmailTokenizerImpl40 *self);
            static PyObject *t_UAX29URLEmailTokenizerImpl40_yycharat(t_UAX29URLEmailTokenizerImpl40 *self, PyObject *arg);
            static PyObject *t_UAX29URLEmailTokenizerImpl40_yyclose(t_UAX29URLEmailTokenizerImpl40 *self);
            static PyObject *t_UAX29URLEmailTokenizerImpl40_yylength(t_UAX29URLEmailTokenizerImpl40 *self);
            static PyObject *t_UAX29URLEmailTokenizerImpl40_yypushback(t_UAX29URLEmailTokenizerImpl40 *self, PyObject *arg);
            static PyObject *t_UAX29URLEmailTokenizerImpl40_yyreset(t_UAX29URLEmailTokenizerImpl40 *self, PyObject *arg);
            static PyObject *t_UAX29URLEmailTokenizerImpl40_yystate(t_UAX29URLEmailTokenizerImpl40 *self);
            static PyObject *t_UAX29URLEmailTokenizerImpl40_yytext(t_UAX29URLEmailTokenizerImpl40 *self);
            static int t_UAX29URLEmailTokenizerImpl40_set__bufferSize(t_UAX29URLEmailTokenizerImpl40 *self, PyObject *arg, void *data);
            static PyObject *t_UAX29URLEmailTokenizerImpl40_get__nextToken(t_UAX29URLEmailTokenizerImpl40 *self, void *data);
            static PyGetSetDef t_UAX29URLEmailTokenizerImpl40__fields_[] = {
              DECLARE_SET_FIELD(t_UAX29URLEmailTokenizerImpl40, bufferSize),
              DECLARE_GET_FIELD(t_UAX29URLEmailTokenizerImpl40, nextToken),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_UAX29URLEmailTokenizerImpl40__methods_[] = {
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl40, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl40, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl40, getNextToken, METH_NOARGS),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl40, getText, METH_O),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl40, setBufferSize, METH_O),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl40, yybegin, METH_O),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl40, yychar, METH_NOARGS),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl40, yycharat, METH_O),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl40, yyclose, METH_NOARGS),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl40, yylength, METH_NOARGS),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl40, yypushback, METH_O),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl40, yyreset, METH_O),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl40, yystate, METH_NOARGS),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl40, yytext, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(UAX29URLEmailTokenizerImpl40, t_UAX29URLEmailTokenizerImpl40, ::java::lang::Object, UAX29URLEmailTokenizerImpl40, t_UAX29URLEmailTokenizerImpl40_init_, 0, 0, t_UAX29URLEmailTokenizerImpl40__fields_, 0, 0);

            void t_UAX29URLEmailTokenizerImpl40::install(PyObject *module)
            {
              installType(&PY_TYPE(UAX29URLEmailTokenizerImpl40), module, "UAX29URLEmailTokenizerImpl40", 0);
            }

            void t_UAX29URLEmailTokenizerImpl40::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl40).tp_dict, "class_", make_descriptor(UAX29URLEmailTokenizerImpl40::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl40).tp_dict, "wrapfn_", make_descriptor(t_UAX29URLEmailTokenizerImpl40::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl40).tp_dict, "boxfn_", make_descriptor(boxObject));
              env->getClass(UAX29URLEmailTokenizerImpl40::initializeClass);
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl40).tp_dict, "EMAIL_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl40::EMAIL_TYPE));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl40).tp_dict, "HANGUL_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl40::HANGUL_TYPE));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl40).tp_dict, "HIRAGANA_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl40::HIRAGANA_TYPE));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl40).tp_dict, "IDEOGRAPHIC_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl40::IDEOGRAPHIC_TYPE));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl40).tp_dict, "KATAKANA_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl40::KATAKANA_TYPE));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl40).tp_dict, "NUMERIC_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl40::NUMERIC_TYPE));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl40).tp_dict, "SOUTH_EAST_ASIAN_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl40::SOUTH_EAST_ASIAN_TYPE));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl40).tp_dict, "URL_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl40::URL_TYPE));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl40).tp_dict, "WORD_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl40::WORD_TYPE));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl40).tp_dict, "YYEOF", make_descriptor(UAX29URLEmailTokenizerImpl40::YYEOF));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl40).tp_dict, "YYINITIAL", make_descriptor(UAX29URLEmailTokenizerImpl40::YYINITIAL));
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl40_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, UAX29URLEmailTokenizerImpl40::initializeClass, 1)))
                return NULL;
              return t_UAX29URLEmailTokenizerImpl40::wrap_Object(UAX29URLEmailTokenizerImpl40(((t_UAX29URLEmailTokenizerImpl40 *) arg)->object.this$));
            }
            static PyObject *t_UAX29URLEmailTokenizerImpl40_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, UAX29URLEmailTokenizerImpl40::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_UAX29URLEmailTokenizerImpl40_init_(t_UAX29URLEmailTokenizerImpl40 *self, PyObject *args, PyObject *kwds)
            {
              ::java::io::Reader a0((jobject) NULL);
              UAX29URLEmailTokenizerImpl40 object((jobject) NULL);

              if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
              {
                INT_CALL(object = UAX29URLEmailTokenizerImpl40(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl40_getNextToken(t_UAX29URLEmailTokenizerImpl40 *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getNextToken());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl40_getText(t_UAX29URLEmailTokenizerImpl40 *self, PyObject *arg)
            {
              ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute a0((jobject) NULL);

              if (!parseArg(arg, "k", ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute::initializeClass, &a0))
              {
                OBJ_CALL(self->object.getText(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "getText", arg);
              return NULL;
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl40_setBufferSize(t_UAX29URLEmailTokenizerImpl40 *self, PyObject *arg)
            {
              jint a0;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(self->object.setBufferSize(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setBufferSize", arg);
              return NULL;
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl40_yybegin(t_UAX29URLEmailTokenizerImpl40 *self, PyObject *arg)
            {
              jint a0;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(self->object.yybegin(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "yybegin", arg);
              return NULL;
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl40_yychar(t_UAX29URLEmailTokenizerImpl40 *self)
            {
              jint result;
              OBJ_CALL(result = self->object.yychar());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl40_yycharat(t_UAX29URLEmailTokenizerImpl40 *self, PyObject *arg)
            {
              jint a0;
              jchar result;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(result = self->object.yycharat(a0));
                return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
              }

              PyErr_SetArgsError((PyObject *) self, "yycharat", arg);
              return NULL;
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl40_yyclose(t_UAX29URLEmailTokenizerImpl40 *self)
            {
              OBJ_CALL(self->object.yyclose());
              Py_RETURN_NONE;
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl40_yylength(t_UAX29URLEmailTokenizerImpl40 *self)
            {
              jint result;
              OBJ_CALL(result = self->object.yylength());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl40_yypushback(t_UAX29URLEmailTokenizerImpl40 *self, PyObject *arg)
            {
              jint a0;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(self->object.yypushback(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "yypushback", arg);
              return NULL;
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl40_yyreset(t_UAX29URLEmailTokenizerImpl40 *self, PyObject *arg)
            {
              ::java::io::Reader a0((jobject) NULL);

              if (!parseArg(arg, "k", ::java::io::Reader::initializeClass, &a0))
              {
                OBJ_CALL(self->object.yyreset(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "yyreset", arg);
              return NULL;
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl40_yystate(t_UAX29URLEmailTokenizerImpl40 *self)
            {
              jint result;
              OBJ_CALL(result = self->object.yystate());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl40_yytext(t_UAX29URLEmailTokenizerImpl40 *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.yytext());
              return j2p(result);
            }

            static int t_UAX29URLEmailTokenizerImpl40_set__bufferSize(t_UAX29URLEmailTokenizerImpl40 *self, PyObject *arg, void *data)
            {
              {
                jint value;
                if (!parseArg(arg, "I", &value))
                {
                  INT_CALL(self->object.setBufferSize(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "bufferSize", arg);
              return -1;
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl40_get__nextToken(t_UAX29URLEmailTokenizerImpl40 *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getNextToken());
              return PyInt_FromLong((long) value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/payloads/FloatEncoder.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace payloads {

          ::java::lang::Class *FloatEncoder::class$ = NULL;
          jmethodID *FloatEncoder::mids$ = NULL;
          bool FloatEncoder::live$ = false;

          jclass FloatEncoder::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/payloads/FloatEncoder");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_encode_871544e1] = env->getMethodID(cls, "encode", "([CII)Lorg/apache/lucene/util/BytesRef;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FloatEncoder::FloatEncoder() : ::org::apache::lucene::analysis::payloads::AbstractEncoder(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::util::BytesRef FloatEncoder::encode(const JArray< jchar > & a0, jint a1, jint a2) const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_encode_871544e1], a0.this$, a1, a2));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace payloads {
          static PyObject *t_FloatEncoder_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FloatEncoder_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FloatEncoder_init_(t_FloatEncoder *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FloatEncoder_encode(t_FloatEncoder *self, PyObject *args);

          static PyMethodDef t_FloatEncoder__methods_[] = {
            DECLARE_METHOD(t_FloatEncoder, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FloatEncoder, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FloatEncoder, encode, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FloatEncoder, t_FloatEncoder, ::org::apache::lucene::analysis::payloads::AbstractEncoder, FloatEncoder, t_FloatEncoder_init_, 0, 0, 0, 0, 0);

          void t_FloatEncoder::install(PyObject *module)
          {
            installType(&PY_TYPE(FloatEncoder), module, "FloatEncoder", 0);
          }

          void t_FloatEncoder::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FloatEncoder).tp_dict, "class_", make_descriptor(FloatEncoder::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FloatEncoder).tp_dict, "wrapfn_", make_descriptor(t_FloatEncoder::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FloatEncoder).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FloatEncoder_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FloatEncoder::initializeClass, 1)))
              return NULL;
            return t_FloatEncoder::wrap_Object(FloatEncoder(((t_FloatEncoder *) arg)->object.this$));
          }
          static PyObject *t_FloatEncoder_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FloatEncoder::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FloatEncoder_init_(t_FloatEncoder *self, PyObject *args, PyObject *kwds)
          {
            FloatEncoder object((jobject) NULL);

            INT_CALL(object = FloatEncoder());
            self->object = object;

            return 0;
          }

          static PyObject *t_FloatEncoder_encode(t_FloatEncoder *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint a2;
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);

            if (!parseArgs(args, "[CII", &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.encode(a0, a1, a2));
              return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(FloatEncoder), (PyObject *) self, "encode", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/grouping/function/FunctionFirstPassGroupingCollector.h"
#include "org/apache/lucene/queries/function/ValueSource.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/search/Sort.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/mutable/MutableValue.h"
#include "java/lang/Object.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          namespace function {

            ::java::lang::Class *FunctionFirstPassGroupingCollector::class$ = NULL;
            jmethodID *FunctionFirstPassGroupingCollector::mids$ = NULL;
            bool FunctionFirstPassGroupingCollector::live$ = false;

            jclass FunctionFirstPassGroupingCollector::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/grouping/function/FunctionFirstPassGroupingCollector");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_ef44e36a] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queries/function/ValueSource;Ljava/util/Map;Lorg/apache/lucene/search/Sort;I)V");
                mids$[mid_setNextReader_a6f59947] = env->getMethodID(cls, "setNextReader", "(Lorg/apache/lucene/index/AtomicReaderContext;)V");
                mids$[mid_getDocGroupValue_5767061f] = env->getMethodID(cls, "getDocGroupValue", "(I)Lorg/apache/lucene/util/mutable/MutableValue;");
                mids$[mid_copyDocGroupValue_25e3929d] = env->getMethodID(cls, "copyDocGroupValue", "(Lorg/apache/lucene/util/mutable/MutableValue;Lorg/apache/lucene/util/mutable/MutableValue;)Lorg/apache/lucene/util/mutable/MutableValue;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            FunctionFirstPassGroupingCollector::FunctionFirstPassGroupingCollector(const ::org::apache::lucene::queries::function::ValueSource & a0, const ::java::util::Map & a1, const ::org::apache::lucene::search::Sort & a2, jint a3) : ::org::apache::lucene::search::grouping::AbstractFirstPassGroupingCollector(env->newObject(initializeClass, &mids$, mid_init$_ef44e36a, a0.this$, a1.this$, a2.this$, a3)) {}

            void FunctionFirstPassGroupingCollector::setNextReader(const ::org::apache::lucene::index::AtomicReaderContext & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setNextReader_a6f59947], a0.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          namespace function {
            static PyObject *t_FunctionFirstPassGroupingCollector_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_FunctionFirstPassGroupingCollector_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_FunctionFirstPassGroupingCollector_of_(t_FunctionFirstPassGroupingCollector *self, PyObject *args);
            static int t_FunctionFirstPassGroupingCollector_init_(t_FunctionFirstPassGroupingCollector *self, PyObject *args, PyObject *kwds);
            static PyObject *t_FunctionFirstPassGroupingCollector_setNextReader(t_FunctionFirstPassGroupingCollector *self, PyObject *args);
            static int t_FunctionFirstPassGroupingCollector_set__nextReader(t_FunctionFirstPassGroupingCollector *self, PyObject *arg, void *data);
            static PyObject *t_FunctionFirstPassGroupingCollector_get__parameters_(t_FunctionFirstPassGroupingCollector *self, void *data);
            static PyGetSetDef t_FunctionFirstPassGroupingCollector__fields_[] = {
              DECLARE_SET_FIELD(t_FunctionFirstPassGroupingCollector, nextReader),
              DECLARE_GET_FIELD(t_FunctionFirstPassGroupingCollector, parameters_),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_FunctionFirstPassGroupingCollector__methods_[] = {
              DECLARE_METHOD(t_FunctionFirstPassGroupingCollector, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FunctionFirstPassGroupingCollector, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FunctionFirstPassGroupingCollector, of_, METH_VARARGS),
              DECLARE_METHOD(t_FunctionFirstPassGroupingCollector, setNextReader, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(FunctionFirstPassGroupingCollector, t_FunctionFirstPassGroupingCollector, ::org::apache::lucene::search::grouping::AbstractFirstPassGroupingCollector, FunctionFirstPassGroupingCollector, t_FunctionFirstPassGroupingCollector_init_, 0, 0, t_FunctionFirstPassGroupingCollector__fields_, 0, 0);
            PyObject *t_FunctionFirstPassGroupingCollector::wrap_Object(const FunctionFirstPassGroupingCollector& object, PyTypeObject *p0)
            {
              PyObject *obj = t_FunctionFirstPassGroupingCollector::wrap_Object(object);
              if (obj != NULL && obj != Py_None)
              {
                t_FunctionFirstPassGroupingCollector *self = (t_FunctionFirstPassGroupingCollector *) obj;
                self->parameters[0] = p0;
              }
              return obj;
            }

            PyObject *t_FunctionFirstPassGroupingCollector::wrap_jobject(const jobject& object, PyTypeObject *p0)
            {
              PyObject *obj = t_FunctionFirstPassGroupingCollector::wrap_jobject(object);
              if (obj != NULL && obj != Py_None)
              {
                t_FunctionFirstPassGroupingCollector *self = (t_FunctionFirstPassGroupingCollector *) obj;
                self->parameters[0] = p0;
              }
              return obj;
            }

            void t_FunctionFirstPassGroupingCollector::install(PyObject *module)
            {
              installType(&PY_TYPE(FunctionFirstPassGroupingCollector), module, "FunctionFirstPassGroupingCollector", 0);
            }

            void t_FunctionFirstPassGroupingCollector::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(FunctionFirstPassGroupingCollector).tp_dict, "class_", make_descriptor(FunctionFirstPassGroupingCollector::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(FunctionFirstPassGroupingCollector).tp_dict, "wrapfn_", make_descriptor(t_FunctionFirstPassGroupingCollector::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(FunctionFirstPassGroupingCollector).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_FunctionFirstPassGroupingCollector_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, FunctionFirstPassGroupingCollector::initializeClass, 1)))
                return NULL;
              return t_FunctionFirstPassGroupingCollector::wrap_Object(FunctionFirstPassGroupingCollector(((t_FunctionFirstPassGroupingCollector *) arg)->object.this$));
            }
            static PyObject *t_FunctionFirstPassGroupingCollector_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, FunctionFirstPassGroupingCollector::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_FunctionFirstPassGroupingCollector_of_(t_FunctionFirstPassGroupingCollector *self, PyObject *args)
            {
              if (!parseArg(args, "T", 1, &(self->parameters)))
                Py_RETURN_SELF;
              return PyErr_SetArgsError((PyObject *) self, "of_", args);
            }

            static int t_FunctionFirstPassGroupingCollector_init_(t_FunctionFirstPassGroupingCollector *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::queries::function::ValueSource a0((jobject) NULL);
              ::java::util::Map a1((jobject) NULL);
              PyTypeObject **p1;
              ::org::apache::lucene::search::Sort a2((jobject) NULL);
              jint a3;
              FunctionFirstPassGroupingCollector object((jobject) NULL);

              if (!parseArgs(args, "kKkI", ::org::apache::lucene::queries::function::ValueSource::initializeClass, ::java::util::Map::initializeClass, ::org::apache::lucene::search::Sort::initializeClass, &a0, &a1, &p1, ::java::util::t_Map::parameters_, &a2, &a3))
              {
                INT_CALL(object = FunctionFirstPassGroupingCollector(a0, a1, a2, a3));
                self->object = object;
                self->parameters[0] = &::org::apache::lucene::util::mutable$::PY_TYPE(MutableValue);
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_FunctionFirstPassGroupingCollector_setNextReader(t_FunctionFirstPassGroupingCollector *self, PyObject *args)
            {
              ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0))
              {
                OBJ_CALL(self->object.setNextReader(a0));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(FunctionFirstPassGroupingCollector), (PyObject *) self, "setNextReader", args, 2);
            }
            static PyObject *t_FunctionFirstPassGroupingCollector_get__parameters_(t_FunctionFirstPassGroupingCollector *self, void *data)
            {
              return typeParameters(self->parameters, sizeof(self->parameters));
            }

            static int t_FunctionFirstPassGroupingCollector_set__nextReader(t_FunctionFirstPassGroupingCollector *self, PyObject *arg, void *data)
            {
              {
                ::org::apache::lucene::index::AtomicReaderContext value((jobject) NULL);
                if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &value))
                {
                  INT_CALL(self->object.setNextReader(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "nextReader", arg);
              return -1;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/MatchNoDocsQueryNodeBuilder.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/StandardQueryBuilder.h"
#include "org/apache/lucene/search/BooleanQuery.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {

              ::java::lang::Class *MatchNoDocsQueryNodeBuilder::class$ = NULL;
              jmethodID *MatchNoDocsQueryNodeBuilder::mids$ = NULL;
              bool MatchNoDocsQueryNodeBuilder::live$ = false;

              jclass MatchNoDocsQueryNodeBuilder::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/builders/MatchNoDocsQueryNodeBuilder");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_build_e1a6cc4e] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/search/BooleanQuery;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              MatchNoDocsQueryNodeBuilder::MatchNoDocsQueryNodeBuilder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              ::org::apache::lucene::search::BooleanQuery MatchNoDocsQueryNodeBuilder::build(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                return ::org::apache::lucene::search::BooleanQuery(env->callObjectMethod(this$, mids$[mid_build_e1a6cc4e], a0.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {
              static PyObject *t_MatchNoDocsQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_MatchNoDocsQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg);
              static int t_MatchNoDocsQueryNodeBuilder_init_(t_MatchNoDocsQueryNodeBuilder *self, PyObject *args, PyObject *kwds);
              static PyObject *t_MatchNoDocsQueryNodeBuilder_build(t_MatchNoDocsQueryNodeBuilder *self, PyObject *arg);

              static PyMethodDef t_MatchNoDocsQueryNodeBuilder__methods_[] = {
                DECLARE_METHOD(t_MatchNoDocsQueryNodeBuilder, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_MatchNoDocsQueryNodeBuilder, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_MatchNoDocsQueryNodeBuilder, build, METH_O),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(MatchNoDocsQueryNodeBuilder, t_MatchNoDocsQueryNodeBuilder, ::java::lang::Object, MatchNoDocsQueryNodeBuilder, t_MatchNoDocsQueryNodeBuilder_init_, 0, 0, 0, 0, 0);

              void t_MatchNoDocsQueryNodeBuilder::install(PyObject *module)
              {
                installType(&PY_TYPE(MatchNoDocsQueryNodeBuilder), module, "MatchNoDocsQueryNodeBuilder", 0);
              }

              void t_MatchNoDocsQueryNodeBuilder::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(MatchNoDocsQueryNodeBuilder).tp_dict, "class_", make_descriptor(MatchNoDocsQueryNodeBuilder::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(MatchNoDocsQueryNodeBuilder).tp_dict, "wrapfn_", make_descriptor(t_MatchNoDocsQueryNodeBuilder::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(MatchNoDocsQueryNodeBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_MatchNoDocsQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, MatchNoDocsQueryNodeBuilder::initializeClass, 1)))
                  return NULL;
                return t_MatchNoDocsQueryNodeBuilder::wrap_Object(MatchNoDocsQueryNodeBuilder(((t_MatchNoDocsQueryNodeBuilder *) arg)->object.this$));
              }
              static PyObject *t_MatchNoDocsQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, MatchNoDocsQueryNodeBuilder::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_MatchNoDocsQueryNodeBuilder_init_(t_MatchNoDocsQueryNodeBuilder *self, PyObject *args, PyObject *kwds)
              {
                MatchNoDocsQueryNodeBuilder object((jobject) NULL);

                INT_CALL(object = MatchNoDocsQueryNodeBuilder());
                self->object = object;

                return 0;
              }

              static PyObject *t_MatchNoDocsQueryNodeBuilder_build(t_MatchNoDocsQueryNodeBuilder *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::search::BooleanQuery result((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.build(a0));
                  return ::org::apache::lucene::search::t_BooleanQuery::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "build", arg);
                return NULL;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/MergePolicy$MergeAbortedException.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *MergePolicy$MergeAbortedException::class$ = NULL;
        jmethodID *MergePolicy$MergeAbortedException::mids$ = NULL;
        bool MergePolicy$MergeAbortedException::live$ = false;

        jclass MergePolicy$MergeAbortedException::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/MergePolicy$MergeAbortedException");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        MergePolicy$MergeAbortedException::MergePolicy$MergeAbortedException() : ::java::io::IOException(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        MergePolicy$MergeAbortedException::MergePolicy$MergeAbortedException(const ::java::lang::String & a0) : ::java::io::IOException(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_MergePolicy$MergeAbortedException_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MergePolicy$MergeAbortedException_instance_(PyTypeObject *type, PyObject *arg);
        static int t_MergePolicy$MergeAbortedException_init_(t_MergePolicy$MergeAbortedException *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_MergePolicy$MergeAbortedException__methods_[] = {
          DECLARE_METHOD(t_MergePolicy$MergeAbortedException, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MergePolicy$MergeAbortedException, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MergePolicy$MergeAbortedException, t_MergePolicy$MergeAbortedException, ::java::io::IOException, MergePolicy$MergeAbortedException, t_MergePolicy$MergeAbortedException_init_, 0, 0, 0, 0, 0);

        void t_MergePolicy$MergeAbortedException::install(PyObject *module)
        {
          installType(&PY_TYPE(MergePolicy$MergeAbortedException), module, "MergePolicy$MergeAbortedException", 0);
        }

        void t_MergePolicy$MergeAbortedException::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MergePolicy$MergeAbortedException).tp_dict, "class_", make_descriptor(MergePolicy$MergeAbortedException::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MergePolicy$MergeAbortedException).tp_dict, "wrapfn_", make_descriptor(t_MergePolicy$MergeAbortedException::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MergePolicy$MergeAbortedException).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MergePolicy$MergeAbortedException_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MergePolicy$MergeAbortedException::initializeClass, 1)))
            return NULL;
          return t_MergePolicy$MergeAbortedException::wrap_Object(MergePolicy$MergeAbortedException(((t_MergePolicy$MergeAbortedException *) arg)->object.this$));
        }
        static PyObject *t_MergePolicy$MergeAbortedException_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MergePolicy$MergeAbortedException::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_MergePolicy$MergeAbortedException_init_(t_MergePolicy$MergeAbortedException *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              MergePolicy$MergeAbortedException object((jobject) NULL);

              INT_CALL(object = MergePolicy$MergeAbortedException());
              self->object = object;
              break;
            }
            goto err;
           case 1:
            {
              ::java::lang::String a0((jobject) NULL);
              MergePolicy$MergeAbortedException object((jobject) NULL);

              if (!parseArgs(args, "s", &a0))
              {
                INT_CALL(object = MergePolicy$MergeAbortedException(a0));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/surround/parser/Token.h"
#include "java/io/Serializable.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace parser {

            ::java::lang::Class *Token::class$ = NULL;
            jmethodID *Token::mids$ = NULL;
            jfieldID *Token::fids$ = NULL;
            bool Token::live$ = false;

            jclass Token::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/surround/parser/Token");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
                mids$[mid_init$_d40a4f2e] = env->getMethodID(cls, "<init>", "(ILjava/lang/String;)V");
                mids$[mid_getValue_846352c3] = env->getMethodID(cls, "getValue", "()Ljava/lang/Object;");
                mids$[mid_newToken_1162c488] = env->getStaticMethodID(cls, "newToken", "(I)Lorg/apache/lucene/queryparser/surround/parser/Token;");
                mids$[mid_newToken_b6d076fa] = env->getStaticMethodID(cls, "newToken", "(ILjava/lang/String;)Lorg/apache/lucene/queryparser/surround/parser/Token;");
                mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                fids$ = new jfieldID[max_fid];
                fids$[fid_beginColumn] = env->getFieldID(cls, "beginColumn", "I");
                fids$[fid_beginLine] = env->getFieldID(cls, "beginLine", "I");
                fids$[fid_endColumn] = env->getFieldID(cls, "endColumn", "I");
                fids$[fid_endLine] = env->getFieldID(cls, "endLine", "I");
                fids$[fid_image] = env->getFieldID(cls, "image", "Ljava/lang/String;");
                fids$[fid_kind] = env->getFieldID(cls, "kind", "I");
                fids$[fid_next] = env->getFieldID(cls, "next", "Lorg/apache/lucene/queryparser/surround/parser/Token;");
                fids$[fid_specialToken] = env->getFieldID(cls, "specialToken", "Lorg/apache/lucene/queryparser/surround/parser/Token;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            Token::Token() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

            Token::Token(jint a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

            Token::Token(jint a0, const ::java::lang::String & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_d40a4f2e, a0, a1.this$)) {}

            ::java::lang::Object Token::getValue() const
            {
              return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_getValue_846352c3]));
            }

            Token Token::newToken(jint a0)
            {
              jclass cls = env->getClass(initializeClass);
              return Token(env->callStaticObjectMethod(cls, mids$[mid_newToken_1162c488], a0));
            }

            Token Token::newToken(jint a0, const ::java::lang::String & a1)
            {
              jclass cls = env->getClass(initializeClass);
              return Token(env->callStaticObjectMethod(cls, mids$[mid_newToken_b6d076fa], a0, a1.this$));
            }

            ::java::lang::String Token::toString() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
            }

            jint Token::_get_beginColumn() const
            {
              return env->getIntField(this$, fids$[fid_beginColumn]);
            }

            void Token::_set_beginColumn(jint a0) const
            {
              env->setIntField(this$, fids$[fid_beginColumn], a0);
            }

            jint Token::_get_beginLine() const
            {
              return env->getIntField(this$, fids$[fid_beginLine]);
            }

            void Token::_set_beginLine(jint a0) const
            {
              env->setIntField(this$, fids$[fid_beginLine], a0);
            }

            jint Token::_get_endColumn() const
            {
              return env->getIntField(this$, fids$[fid_endColumn]);
            }

            void Token::_set_endColumn(jint a0) const
            {
              env->setIntField(this$, fids$[fid_endColumn], a0);
            }

            jint Token::_get_endLine() const
            {
              return env->getIntField(this$, fids$[fid_endLine]);
            }

            void Token::_set_endLine(jint a0) const
            {
              env->setIntField(this$, fids$[fid_endLine], a0);
            }

            ::java::lang::String Token::_get_image() const
            {
              return ::java::lang::String(env->getObjectField(this$, fids$[fid_image]));
            }

            void Token::_set_image(const ::java::lang::String & a0) const
            {
              env->setObjectField(this$, fids$[fid_image], a0.this$);
            }

            jint Token::_get_kind() const
            {
              return env->getIntField(this$, fids$[fid_kind]);
            }

            void Token::_set_kind(jint a0) const
            {
              env->setIntField(this$, fids$[fid_kind], a0);
            }

            Token Token::_get_next() const
            {
              return Token(env->getObjectField(this$, fids$[fid_next]));
            }

            void Token::_set_next(const Token & a0) const
            {
              env->setObjectField(this$, fids$[fid_next], a0.this$);
            }

            Token Token::_get_specialToken() const
            {
              return Token(env->getObjectField(this$, fids$[fid_specialToken]));
            }

            void Token::_set_specialToken(const Token & a0) const
            {
              env->setObjectField(this$, fids$[fid_specialToken], a0.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace parser {
            static PyObject *t_Token_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_Token_instance_(PyTypeObject *type, PyObject *arg);
            static int t_Token_init_(t_Token *self, PyObject *args, PyObject *kwds);
            static PyObject *t_Token_getValue(t_Token *self);
            static PyObject *t_Token_newToken(PyTypeObject *type, PyObject *args);
            static PyObject *t_Token_toString(t_Token *self, PyObject *args);
            static PyObject *t_Token_get__beginColumn(t_Token *self, void *data);
            static int t_Token_set__beginColumn(t_Token *self, PyObject *arg, void *data);
            static PyObject *t_Token_get__beginLine(t_Token *self, void *data);
            static int t_Token_set__beginLine(t_Token *self, PyObject *arg, void *data);
            static PyObject *t_Token_get__endColumn(t_Token *self, void *data);
            static int t_Token_set__endColumn(t_Token *self, PyObject *arg, void *data);
            static PyObject *t_Token_get__endLine(t_Token *self, void *data);
            static int t_Token_set__endLine(t_Token *self, PyObject *arg, void *data);
            static PyObject *t_Token_get__image(t_Token *self, void *data);
            static int t_Token_set__image(t_Token *self, PyObject *arg, void *data);
            static PyObject *t_Token_get__kind(t_Token *self, void *data);
            static int t_Token_set__kind(t_Token *self, PyObject *arg, void *data);
            static PyObject *t_Token_get__next(t_Token *self, void *data);
            static int t_Token_set__next(t_Token *self, PyObject *arg, void *data);
            static PyObject *t_Token_get__specialToken(t_Token *self, void *data);
            static int t_Token_set__specialToken(t_Token *self, PyObject *arg, void *data);

            static PyObject *t_Token_get__value(t_Token *self, void *data);
            static PyGetSetDef t_Token__fields_[] = {
              DECLARE_GETSET_FIELD(t_Token, beginColumn),
              DECLARE_GETSET_FIELD(t_Token, beginLine),
              DECLARE_GETSET_FIELD(t_Token, endColumn),
              DECLARE_GETSET_FIELD(t_Token, endLine),
              DECLARE_GETSET_FIELD(t_Token, image),
              DECLARE_GETSET_FIELD(t_Token, kind),
              DECLARE_GETSET_FIELD(t_Token, next),
              DECLARE_GETSET_FIELD(t_Token, specialToken),
              DECLARE_GET_FIELD(t_Token, value),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_Token__methods_[] = {
              DECLARE_METHOD(t_Token, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_Token, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_Token, getValue, METH_NOARGS),
              DECLARE_METHOD(t_Token, newToken, METH_VARARGS | METH_CLASS),
              DECLARE_METHOD(t_Token, toString, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(Token, t_Token, ::java::lang::Object, Token, t_Token_init_, 0, 0, t_Token__fields_, 0, 0);

            void t_Token::install(PyObject *module)
            {
              installType(&PY_TYPE(Token), module, "Token", 0);
            }

            void t_Token::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(Token).tp_dict, "class_", make_descriptor(Token::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(Token).tp_dict, "wrapfn_", make_descriptor(t_Token::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(Token).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_Token_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, Token::initializeClass, 1)))
                return NULL;
              return t_Token::wrap_Object(Token(((t_Token *) arg)->object.this$));
            }
            static PyObject *t_Token_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, Token::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_Token_init_(t_Token *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 0:
                {
                  Token object((jobject) NULL);

                  INT_CALL(object = Token());
                  self->object = object;
                  break;
                }
                goto err;
               case 1:
                {
                  jint a0;
                  Token object((jobject) NULL);

                  if (!parseArgs(args, "I", &a0))
                  {
                    INT_CALL(object = Token(a0));
                    self->object = object;
                    break;
                  }
                }
                goto err;
               case 2:
                {
                  jint a0;
                  ::java::lang::String a1((jobject) NULL);
                  Token object((jobject) NULL);

                  if (!parseArgs(args, "Is", &a0, &a1))
                  {
                    INT_CALL(object = Token(a0, a1));
                    self->object = object;
                    break;
                  }
                }
               default:
               err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_Token_getValue(t_Token *self)
            {
              ::java::lang::Object result((jobject) NULL);
              OBJ_CALL(result = self->object.getValue());
              return ::java::lang::t_Object::wrap_Object(result);
            }

            static PyObject *t_Token_newToken(PyTypeObject *type, PyObject *args)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 1:
                {
                  jint a0;
                  Token result((jobject) NULL);

                  if (!parseArgs(args, "I", &a0))
                  {
                    OBJ_CALL(result = ::org::apache::lucene::queryparser::surround::parser::Token::newToken(a0));
                    return t_Token::wrap_Object(result);
                  }
                }
                break;
               case 2:
                {
                  jint a0;
                  ::java::lang::String a1((jobject) NULL);
                  Token result((jobject) NULL);

                  if (!parseArgs(args, "Is", &a0, &a1))
                  {
                    OBJ_CALL(result = ::org::apache::lucene::queryparser::surround::parser::Token::newToken(a0, a1));
                    return t_Token::wrap_Object(result);
                  }
                }
              }

              PyErr_SetArgsError(type, "newToken", args);
              return NULL;
            }

            static PyObject *t_Token_toString(t_Token *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.toString());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(Token), (PyObject *) self, "toString", args, 2);
            }

            static PyObject *t_Token_get__beginColumn(t_Token *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object._get_beginColumn());
              return PyInt_FromLong((long) value);
            }
            static int t_Token_set__beginColumn(t_Token *self, PyObject *arg, void *data)
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object._set_beginColumn(value));
                return 0;
              }
              PyErr_SetArgsError((PyObject *) self, "beginColumn", arg);
              return -1;
            }

            static PyObject *t_Token_get__beginLine(t_Token *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object._get_beginLine());
              return PyInt_FromLong((long) value);
            }
            static int t_Token_set__beginLine(t_Token *self, PyObject *arg, void *data)
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object._set_beginLine(value));
                return 0;
              }
              PyErr_SetArgsError((PyObject *) self, "beginLine", arg);
              return -1;
            }

            static PyObject *t_Token_get__endColumn(t_Token *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object._get_endColumn());
              return PyInt_FromLong((long) value);
            }
            static int t_Token_set__endColumn(t_Token *self, PyObject *arg, void *data)
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object._set_endColumn(value));
                return 0;
              }
              PyErr_SetArgsError((PyObject *) self, "endColumn", arg);
              return -1;
            }

            static PyObject *t_Token_get__endLine(t_Token *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object._get_endLine());
              return PyInt_FromLong((long) value);
            }
            static int t_Token_set__endLine(t_Token *self, PyObject *arg, void *data)
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object._set_endLine(value));
                return 0;
              }
              PyErr_SetArgsError((PyObject *) self, "endLine", arg);
              return -1;
            }

            static PyObject *t_Token_get__image(t_Token *self, void *data)
            {
              ::java::lang::String value((jobject) NULL);
              OBJ_CALL(value = self->object._get_image());
              return j2p(value);
            }
            static int t_Token_set__image(t_Token *self, PyObject *arg, void *data)
            {
              ::java::lang::String value((jobject) NULL);
              if (!parseArg(arg, "s", &value))
              {
                INT_CALL(self->object._set_image(value));
                return 0;
              }
              PyErr_SetArgsError((PyObject *) self, "image", arg);
              return -1;
            }

            static PyObject *t_Token_get__kind(t_Token *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object._get_kind());
              return PyInt_FromLong((long) value);
            }
            static int t_Token_set__kind(t_Token *self, PyObject *arg, void *data)
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object._set_kind(value));
                return 0;
              }
              PyErr_SetArgsError((PyObject *) self, "kind", arg);
              return -1;
            }

            static PyObject *t_Token_get__next(t_Token *self, void *data)
            {
              Token value((jobject) NULL);
              OBJ_CALL(value = self->object._get_next());
              return t_Token::wrap_Object(value);
            }
            static int t_Token_set__next(t_Token *self, PyObject *arg, void *data)
            {
              Token value((jobject) NULL);
              if (!parseArg(arg, "k", Token::initializeClass, &value))
              {
                INT_CALL(self->object._set_next(value));
                return 0;
              }
              PyErr_SetArgsError((PyObject *) self, "next", arg);
              return -1;
            }

            static PyObject *t_Token_get__specialToken(t_Token *self, void *data)
            {
              Token value((jobject) NULL);
              OBJ_CALL(value = self->object._get_specialToken());
              return t_Token::wrap_Object(value);
            }
            static int t_Token_set__specialToken(t_Token *self, PyObject *arg, void *data)
            {
              Token value((jobject) NULL);
              if (!parseArg(arg, "k", Token::initializeClass, &value))
              {
                INT_CALL(self->object._set_specialToken(value));
                return 0;
              }
              PyErr_SetArgsError((PyObject *) self, "specialToken", arg);
              return -1;
            }

            static PyObject *t_Token_get__value(t_Token *self, void *data)
            {
              ::java::lang::Object value((jobject) NULL);
              OBJ_CALL(value = self->object.getValue());
              return ::java::lang::t_Object::wrap_Object(value);
            }
          }
        }
      }
    }
  }
}
