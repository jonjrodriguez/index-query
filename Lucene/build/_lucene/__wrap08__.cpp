#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/OrdFieldSource.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *OrdFieldSource::class$ = NULL;
            jmethodID *OrdFieldSource::mids$ = NULL;
            bool OrdFieldSource::live$ = false;

            jclass OrdFieldSource::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/OrdFieldSource");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
                mids$[mid_description_14c7b5c5] = env->getMethodID(cls, "description", "()Ljava/lang/String;");
                mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_getValues_4c566485] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/queries/function/FunctionValues;");
                mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            OrdFieldSource::OrdFieldSource(const ::java::lang::String & a0) : ::org::apache::lucene::queries::function::ValueSource(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

            ::java::lang::String OrdFieldSource::description() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_description_14c7b5c5]));
            }

            jboolean OrdFieldSource::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
            }

            ::org::apache::lucene::queries::function::FunctionValues OrdFieldSource::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::FunctionValues(env->callObjectMethod(this$, mids$[mid_getValues_4c566485], a0.this$, a1.this$));
            }

            jint OrdFieldSource::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_OrdFieldSource_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_OrdFieldSource_instance_(PyTypeObject *type, PyObject *arg);
            static int t_OrdFieldSource_init_(t_OrdFieldSource *self, PyObject *args, PyObject *kwds);
            static PyObject *t_OrdFieldSource_description(t_OrdFieldSource *self, PyObject *args);
            static PyObject *t_OrdFieldSource_equals(t_OrdFieldSource *self, PyObject *args);
            static PyObject *t_OrdFieldSource_getValues(t_OrdFieldSource *self, PyObject *args);
            static PyObject *t_OrdFieldSource_hashCode(t_OrdFieldSource *self, PyObject *args);

            static PyMethodDef t_OrdFieldSource__methods_[] = {
              DECLARE_METHOD(t_OrdFieldSource, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_OrdFieldSource, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_OrdFieldSource, description, METH_VARARGS),
              DECLARE_METHOD(t_OrdFieldSource, equals, METH_VARARGS),
              DECLARE_METHOD(t_OrdFieldSource, getValues, METH_VARARGS),
              DECLARE_METHOD(t_OrdFieldSource, hashCode, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(OrdFieldSource, t_OrdFieldSource, ::org::apache::lucene::queries::function::ValueSource, OrdFieldSource, t_OrdFieldSource_init_, 0, 0, 0, 0, 0);

            void t_OrdFieldSource::install(PyObject *module)
            {
              installType(&PY_TYPE(OrdFieldSource), module, "OrdFieldSource", 0);
            }

            void t_OrdFieldSource::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(OrdFieldSource).tp_dict, "class_", make_descriptor(OrdFieldSource::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(OrdFieldSource).tp_dict, "wrapfn_", make_descriptor(t_OrdFieldSource::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(OrdFieldSource).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_OrdFieldSource_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, OrdFieldSource::initializeClass, 1)))
                return NULL;
              return t_OrdFieldSource::wrap_Object(OrdFieldSource(((t_OrdFieldSource *) arg)->object.this$));
            }
            static PyObject *t_OrdFieldSource_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, OrdFieldSource::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_OrdFieldSource_init_(t_OrdFieldSource *self, PyObject *args, PyObject *kwds)
            {
              ::java::lang::String a0((jobject) NULL);
              OrdFieldSource object((jobject) NULL);

              if (!parseArgs(args, "s", &a0))
              {
                INT_CALL(object = OrdFieldSource(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_OrdFieldSource_description(t_OrdFieldSource *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.description());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(OrdFieldSource), (PyObject *) self, "description", args, 2);
            }

            static PyObject *t_OrdFieldSource_equals(t_OrdFieldSource *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(OrdFieldSource), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_OrdFieldSource_getValues(t_OrdFieldSource *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::FunctionValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::t_FunctionValues::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(OrdFieldSource), (PyObject *) self, "getValues", args, 2);
            }

            static PyObject *t_OrdFieldSource_hashCode(t_OrdFieldSource *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(OrdFieldSource), (PyObject *) self, "hashCode", args, 2);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/Facets.h"
#include "org/apache/lucene/facet/FacetResult.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "java/util/List.h"
#include "java/lang/Number.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {

        ::java::lang::Class *Facets::class$ = NULL;
        jmethodID *Facets::mids$ = NULL;
        bool Facets::live$ = false;

        jclass Facets::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/facet/Facets");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_getAllDims_cdc2a528] = env->getMethodID(cls, "getAllDims", "(I)Ljava/util/List;");
            mids$[mid_getSpecificValue_8ecbcac9] = env->getMethodID(cls, "getSpecificValue", "(Ljava/lang/String;[Ljava/lang/String;)Ljava/lang/Number;");
            mids$[mid_getTopChildren_37e8c044] = env->getMethodID(cls, "getTopChildren", "(ILjava/lang/String;[Ljava/lang/String;)Lorg/apache/lucene/facet/FacetResult;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        Facets::Facets() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        ::java::util::List Facets::getAllDims(jint a0) const
        {
          return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getAllDims_cdc2a528], a0));
        }

        ::java::lang::Number Facets::getSpecificValue(const ::java::lang::String & a0, const JArray< ::java::lang::String > & a1) const
        {
          return ::java::lang::Number(env->callObjectMethod(this$, mids$[mid_getSpecificValue_8ecbcac9], a0.this$, a1.this$));
        }

        ::org::apache::lucene::facet::FacetResult Facets::getTopChildren(jint a0, const ::java::lang::String & a1, const JArray< ::java::lang::String > & a2) const
        {
          return ::org::apache::lucene::facet::FacetResult(env->callObjectMethod(this$, mids$[mid_getTopChildren_37e8c044], a0, a1.this$, a2.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        static PyObject *t_Facets_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Facets_instance_(PyTypeObject *type, PyObject *arg);
        static int t_Facets_init_(t_Facets *self, PyObject *args, PyObject *kwds);
        static PyObject *t_Facets_getAllDims(t_Facets *self, PyObject *arg);
        static PyObject *t_Facets_getSpecificValue(t_Facets *self, PyObject *args);
        static PyObject *t_Facets_getTopChildren(t_Facets *self, PyObject *args);

        static PyMethodDef t_Facets__methods_[] = {
          DECLARE_METHOD(t_Facets, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Facets, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Facets, getAllDims, METH_O),
          DECLARE_METHOD(t_Facets, getSpecificValue, METH_VARARGS),
          DECLARE_METHOD(t_Facets, getTopChildren, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Facets, t_Facets, ::java::lang::Object, Facets, t_Facets_init_, 0, 0, 0, 0, 0);

        void t_Facets::install(PyObject *module)
        {
          installType(&PY_TYPE(Facets), module, "Facets", 0);
        }

        void t_Facets::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(Facets).tp_dict, "class_", make_descriptor(Facets::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(Facets).tp_dict, "wrapfn_", make_descriptor(t_Facets::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(Facets).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Facets_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Facets::initializeClass, 1)))
            return NULL;
          return t_Facets::wrap_Object(Facets(((t_Facets *) arg)->object.this$));
        }
        static PyObject *t_Facets_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Facets::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_Facets_init_(t_Facets *self, PyObject *args, PyObject *kwds)
        {
          Facets object((jobject) NULL);

          INT_CALL(object = Facets());
          self->object = object;

          return 0;
        }

        static PyObject *t_Facets_getAllDims(t_Facets *self, PyObject *arg)
        {
          jint a0;
          ::java::util::List result((jobject) NULL);

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.getAllDims(a0));
            return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::facet::PY_TYPE(FacetResult));
          }

          PyErr_SetArgsError((PyObject *) self, "getAllDims", arg);
          return NULL;
        }

        static PyObject *t_Facets_getSpecificValue(t_Facets *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          JArray< ::java::lang::String > a1((jobject) NULL);
          ::java::lang::Number result((jobject) NULL);

          if (!parseArgs(args, "s[s", &a0, &a1))
          {
            OBJ_CALL(result = self->object.getSpecificValue(a0, a1));
            return ::java::lang::t_Number::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getSpecificValue", args);
          return NULL;
        }

        static PyObject *t_Facets_getTopChildren(t_Facets *self, PyObject *args)
        {
          jint a0;
          ::java::lang::String a1((jobject) NULL);
          JArray< ::java::lang::String > a2((jobject) NULL);
          ::org::apache::lucene::facet::FacetResult result((jobject) NULL);

          if (!parseArgs(args, "Is[s", &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.getTopChildren(a0, a1, a2));
            return ::org::apache::lucene::facet::t_FacetResult::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getTopChildren", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spell/SuggestWordScoreComparator.h"
#include "java/util/Comparator.h"
#include "org/apache/lucene/search/spell/SuggestWord.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {

          ::java::lang::Class *SuggestWordScoreComparator::class$ = NULL;
          jmethodID *SuggestWordScoreComparator::mids$ = NULL;
          bool SuggestWordScoreComparator::live$ = false;

          jclass SuggestWordScoreComparator::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spell/SuggestWordScoreComparator");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_compare_2e903bf1] = env->getMethodID(cls, "compare", "(Lorg/apache/lucene/search/spell/SuggestWord;Lorg/apache/lucene/search/spell/SuggestWord;)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SuggestWordScoreComparator::SuggestWordScoreComparator() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint SuggestWordScoreComparator::compare(const ::org::apache::lucene::search::spell::SuggestWord & a0, const ::org::apache::lucene::search::spell::SuggestWord & a1) const
          {
            return env->callIntMethod(this$, mids$[mid_compare_2e903bf1], a0.this$, a1.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {
          static PyObject *t_SuggestWordScoreComparator_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SuggestWordScoreComparator_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SuggestWordScoreComparator_init_(t_SuggestWordScoreComparator *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SuggestWordScoreComparator_compare(t_SuggestWordScoreComparator *self, PyObject *args);

          static PyMethodDef t_SuggestWordScoreComparator__methods_[] = {
            DECLARE_METHOD(t_SuggestWordScoreComparator, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SuggestWordScoreComparator, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SuggestWordScoreComparator, compare, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SuggestWordScoreComparator, t_SuggestWordScoreComparator, ::java::lang::Object, SuggestWordScoreComparator, t_SuggestWordScoreComparator_init_, 0, 0, 0, 0, 0);

          void t_SuggestWordScoreComparator::install(PyObject *module)
          {
            installType(&PY_TYPE(SuggestWordScoreComparator), module, "SuggestWordScoreComparator", 0);
          }

          void t_SuggestWordScoreComparator::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SuggestWordScoreComparator).tp_dict, "class_", make_descriptor(SuggestWordScoreComparator::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SuggestWordScoreComparator).tp_dict, "wrapfn_", make_descriptor(t_SuggestWordScoreComparator::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SuggestWordScoreComparator).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SuggestWordScoreComparator_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SuggestWordScoreComparator::initializeClass, 1)))
              return NULL;
            return t_SuggestWordScoreComparator::wrap_Object(SuggestWordScoreComparator(((t_SuggestWordScoreComparator *) arg)->object.this$));
          }
          static PyObject *t_SuggestWordScoreComparator_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SuggestWordScoreComparator::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SuggestWordScoreComparator_init_(t_SuggestWordScoreComparator *self, PyObject *args, PyObject *kwds)
          {
            SuggestWordScoreComparator object((jobject) NULL);

            INT_CALL(object = SuggestWordScoreComparator());
            self->object = object;

            return 0;
          }

          static PyObject *t_SuggestWordScoreComparator_compare(t_SuggestWordScoreComparator *self, PyObject *args)
          {
            ::org::apache::lucene::search::spell::SuggestWord a0((jobject) NULL);
            ::org::apache::lucene::search::spell::SuggestWord a1((jobject) NULL);
            jint result;

            if (!parseArgs(args, "kk", ::org::apache::lucene::search::spell::SuggestWord::initializeClass, ::org::apache::lucene::search::spell::SuggestWord::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.compare(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "compare", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/NumericTokenStream$NumericTermAttributeImpl.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/NumericTokenStream$NumericTermAttribute.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/analysis/tokenattributes/TermToBytesRefAttribute.h"
#include "org/apache/lucene/util/AttributeReflector.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {

        ::java::lang::Class *NumericTokenStream$NumericTermAttributeImpl::class$ = NULL;
        jmethodID *NumericTokenStream$NumericTermAttributeImpl::mids$ = NULL;
        bool NumericTokenStream$NumericTermAttributeImpl::live$ = false;

        jclass NumericTokenStream$NumericTermAttributeImpl::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/NumericTokenStream$NumericTermAttributeImpl");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
            mids$[mid_copyTo_d86caa9f] = env->getMethodID(cls, "copyTo", "(Lorg/apache/lucene/util/AttributeImpl;)V");
            mids$[mid_fillBytesRef_54c6a166] = env->getMethodID(cls, "fillBytesRef", "()V");
            mids$[mid_getBytesRef_4ae19461] = env->getMethodID(cls, "getBytesRef", "()Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_getRawValue_54c6a17a] = env->getMethodID(cls, "getRawValue", "()J");
            mids$[mid_getShift_54c6a179] = env->getMethodID(cls, "getShift", "()I");
            mids$[mid_getValueSize_54c6a179] = env->getMethodID(cls, "getValueSize", "()I");
            mids$[mid_incShift_54c6a179] = env->getMethodID(cls, "incShift", "()I");
            mids$[mid_init_72e1d373] = env->getMethodID(cls, "init", "(JIII)V");
            mids$[mid_reflectWith_5f3f5102] = env->getMethodID(cls, "reflectWith", "(Lorg/apache/lucene/util/AttributeReflector;)V");
            mids$[mid_setShift_39c7bd3c] = env->getMethodID(cls, "setShift", "(I)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        NumericTokenStream$NumericTermAttributeImpl::NumericTokenStream$NumericTermAttributeImpl() : ::org::apache::lucene::util::AttributeImpl(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void NumericTokenStream$NumericTermAttributeImpl::clear() const
        {
          env->callVoidMethod(this$, mids$[mid_clear_54c6a166]);
        }

        void NumericTokenStream$NumericTermAttributeImpl::copyTo(const ::org::apache::lucene::util::AttributeImpl & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_copyTo_d86caa9f], a0.this$);
        }

        void NumericTokenStream$NumericTermAttributeImpl::fillBytesRef() const
        {
          env->callVoidMethod(this$, mids$[mid_fillBytesRef_54c6a166]);
        }

        ::org::apache::lucene::util::BytesRef NumericTokenStream$NumericTermAttributeImpl::getBytesRef() const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_getBytesRef_4ae19461]));
        }

        jlong NumericTokenStream$NumericTermAttributeImpl::getRawValue() const
        {
          return env->callLongMethod(this$, mids$[mid_getRawValue_54c6a17a]);
        }

        jint NumericTokenStream$NumericTermAttributeImpl::getShift() const
        {
          return env->callIntMethod(this$, mids$[mid_getShift_54c6a179]);
        }

        jint NumericTokenStream$NumericTermAttributeImpl::getValueSize() const
        {
          return env->callIntMethod(this$, mids$[mid_getValueSize_54c6a179]);
        }

        jint NumericTokenStream$NumericTermAttributeImpl::incShift() const
        {
          return env->callIntMethod(this$, mids$[mid_incShift_54c6a179]);
        }

        void NumericTokenStream$NumericTermAttributeImpl::init(jlong a0, jint a1, jint a2, jint a3) const
        {
          env->callVoidMethod(this$, mids$[mid_init_72e1d373], a0, a1, a2, a3);
        }

        void NumericTokenStream$NumericTermAttributeImpl::reflectWith(const ::org::apache::lucene::util::AttributeReflector & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_reflectWith_5f3f5102], a0.this$);
        }

        void NumericTokenStream$NumericTermAttributeImpl::setShift(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setShift_39c7bd3c], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        static PyObject *t_NumericTokenStream$NumericTermAttributeImpl_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NumericTokenStream$NumericTermAttributeImpl_instance_(PyTypeObject *type, PyObject *arg);
        static int t_NumericTokenStream$NumericTermAttributeImpl_init_(t_NumericTokenStream$NumericTermAttributeImpl *self, PyObject *args, PyObject *kwds);
        static PyObject *t_NumericTokenStream$NumericTermAttributeImpl_clear(t_NumericTokenStream$NumericTermAttributeImpl *self, PyObject *args);
        static PyObject *t_NumericTokenStream$NumericTermAttributeImpl_copyTo(t_NumericTokenStream$NumericTermAttributeImpl *self, PyObject *args);
        static PyObject *t_NumericTokenStream$NumericTermAttributeImpl_fillBytesRef(t_NumericTokenStream$NumericTermAttributeImpl *self);
        static PyObject *t_NumericTokenStream$NumericTermAttributeImpl_getBytesRef(t_NumericTokenStream$NumericTermAttributeImpl *self);
        static PyObject *t_NumericTokenStream$NumericTermAttributeImpl_getRawValue(t_NumericTokenStream$NumericTermAttributeImpl *self);
        static PyObject *t_NumericTokenStream$NumericTermAttributeImpl_getShift(t_NumericTokenStream$NumericTermAttributeImpl *self);
        static PyObject *t_NumericTokenStream$NumericTermAttributeImpl_getValueSize(t_NumericTokenStream$NumericTermAttributeImpl *self);
        static PyObject *t_NumericTokenStream$NumericTermAttributeImpl_incShift(t_NumericTokenStream$NumericTermAttributeImpl *self);
        static PyObject *t_NumericTokenStream$NumericTermAttributeImpl_init(t_NumericTokenStream$NumericTermAttributeImpl *self, PyObject *args);
        static PyObject *t_NumericTokenStream$NumericTermAttributeImpl_reflectWith(t_NumericTokenStream$NumericTermAttributeImpl *self, PyObject *args);
        static PyObject *t_NumericTokenStream$NumericTermAttributeImpl_setShift(t_NumericTokenStream$NumericTermAttributeImpl *self, PyObject *arg);
        static PyObject *t_NumericTokenStream$NumericTermAttributeImpl_get__bytesRef(t_NumericTokenStream$NumericTermAttributeImpl *self, void *data);
        static PyObject *t_NumericTokenStream$NumericTermAttributeImpl_get__rawValue(t_NumericTokenStream$NumericTermAttributeImpl *self, void *data);
        static PyObject *t_NumericTokenStream$NumericTermAttributeImpl_get__shift(t_NumericTokenStream$NumericTermAttributeImpl *self, void *data);
        static int t_NumericTokenStream$NumericTermAttributeImpl_set__shift(t_NumericTokenStream$NumericTermAttributeImpl *self, PyObject *arg, void *data);
        static PyObject *t_NumericTokenStream$NumericTermAttributeImpl_get__valueSize(t_NumericTokenStream$NumericTermAttributeImpl *self, void *data);
        static PyGetSetDef t_NumericTokenStream$NumericTermAttributeImpl__fields_[] = {
          DECLARE_GET_FIELD(t_NumericTokenStream$NumericTermAttributeImpl, bytesRef),
          DECLARE_GET_FIELD(t_NumericTokenStream$NumericTermAttributeImpl, rawValue),
          DECLARE_GETSET_FIELD(t_NumericTokenStream$NumericTermAttributeImpl, shift),
          DECLARE_GET_FIELD(t_NumericTokenStream$NumericTermAttributeImpl, valueSize),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_NumericTokenStream$NumericTermAttributeImpl__methods_[] = {
          DECLARE_METHOD(t_NumericTokenStream$NumericTermAttributeImpl, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NumericTokenStream$NumericTermAttributeImpl, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NumericTokenStream$NumericTermAttributeImpl, clear, METH_VARARGS),
          DECLARE_METHOD(t_NumericTokenStream$NumericTermAttributeImpl, copyTo, METH_VARARGS),
          DECLARE_METHOD(t_NumericTokenStream$NumericTermAttributeImpl, fillBytesRef, METH_NOARGS),
          DECLARE_METHOD(t_NumericTokenStream$NumericTermAttributeImpl, getBytesRef, METH_NOARGS),
          DECLARE_METHOD(t_NumericTokenStream$NumericTermAttributeImpl, getRawValue, METH_NOARGS),
          DECLARE_METHOD(t_NumericTokenStream$NumericTermAttributeImpl, getShift, METH_NOARGS),
          DECLARE_METHOD(t_NumericTokenStream$NumericTermAttributeImpl, getValueSize, METH_NOARGS),
          DECLARE_METHOD(t_NumericTokenStream$NumericTermAttributeImpl, incShift, METH_NOARGS),
          DECLARE_METHOD(t_NumericTokenStream$NumericTermAttributeImpl, init, METH_VARARGS),
          DECLARE_METHOD(t_NumericTokenStream$NumericTermAttributeImpl, reflectWith, METH_VARARGS),
          DECLARE_METHOD(t_NumericTokenStream$NumericTermAttributeImpl, setShift, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(NumericTokenStream$NumericTermAttributeImpl, t_NumericTokenStream$NumericTermAttributeImpl, ::org::apache::lucene::util::AttributeImpl, NumericTokenStream$NumericTermAttributeImpl, t_NumericTokenStream$NumericTermAttributeImpl_init_, 0, 0, t_NumericTokenStream$NumericTermAttributeImpl__fields_, 0, 0);

        void t_NumericTokenStream$NumericTermAttributeImpl::install(PyObject *module)
        {
          installType(&PY_TYPE(NumericTokenStream$NumericTermAttributeImpl), module, "NumericTokenStream$NumericTermAttributeImpl", 0);
        }

        void t_NumericTokenStream$NumericTermAttributeImpl::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(NumericTokenStream$NumericTermAttributeImpl).tp_dict, "class_", make_descriptor(NumericTokenStream$NumericTermAttributeImpl::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(NumericTokenStream$NumericTermAttributeImpl).tp_dict, "wrapfn_", make_descriptor(t_NumericTokenStream$NumericTermAttributeImpl::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(NumericTokenStream$NumericTermAttributeImpl).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_NumericTokenStream$NumericTermAttributeImpl_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, NumericTokenStream$NumericTermAttributeImpl::initializeClass, 1)))
            return NULL;
          return t_NumericTokenStream$NumericTermAttributeImpl::wrap_Object(NumericTokenStream$NumericTermAttributeImpl(((t_NumericTokenStream$NumericTermAttributeImpl *) arg)->object.this$));
        }
        static PyObject *t_NumericTokenStream$NumericTermAttributeImpl_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, NumericTokenStream$NumericTermAttributeImpl::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_NumericTokenStream$NumericTermAttributeImpl_init_(t_NumericTokenStream$NumericTermAttributeImpl *self, PyObject *args, PyObject *kwds)
        {
          NumericTokenStream$NumericTermAttributeImpl object((jobject) NULL);

          INT_CALL(object = NumericTokenStream$NumericTermAttributeImpl());
          self->object = object;

          return 0;
        }

        static PyObject *t_NumericTokenStream$NumericTermAttributeImpl_clear(t_NumericTokenStream$NumericTermAttributeImpl *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.clear());
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(NumericTokenStream$NumericTermAttributeImpl), (PyObject *) self, "clear", args, 2);
        }

        static PyObject *t_NumericTokenStream$NumericTermAttributeImpl_copyTo(t_NumericTokenStream$NumericTermAttributeImpl *self, PyObject *args)
        {
          ::org::apache::lucene::util::AttributeImpl a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::util::AttributeImpl::initializeClass, &a0))
          {
            OBJ_CALL(self->object.copyTo(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(NumericTokenStream$NumericTermAttributeImpl), (PyObject *) self, "copyTo", args, 2);
        }

        static PyObject *t_NumericTokenStream$NumericTermAttributeImpl_fillBytesRef(t_NumericTokenStream$NumericTermAttributeImpl *self)
        {
          OBJ_CALL(self->object.fillBytesRef());
          Py_RETURN_NONE;
        }

        static PyObject *t_NumericTokenStream$NumericTermAttributeImpl_getBytesRef(t_NumericTokenStream$NumericTermAttributeImpl *self)
        {
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);
          OBJ_CALL(result = self->object.getBytesRef());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
        }

        static PyObject *t_NumericTokenStream$NumericTermAttributeImpl_getRawValue(t_NumericTokenStream$NumericTermAttributeImpl *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getRawValue());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_NumericTokenStream$NumericTermAttributeImpl_getShift(t_NumericTokenStream$NumericTermAttributeImpl *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getShift());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_NumericTokenStream$NumericTermAttributeImpl_getValueSize(t_NumericTokenStream$NumericTermAttributeImpl *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getValueSize());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_NumericTokenStream$NumericTermAttributeImpl_incShift(t_NumericTokenStream$NumericTermAttributeImpl *self)
        {
          jint result;
          OBJ_CALL(result = self->object.incShift());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_NumericTokenStream$NumericTermAttributeImpl_init(t_NumericTokenStream$NumericTermAttributeImpl *self, PyObject *args)
        {
          jlong a0;
          jint a1;
          jint a2;
          jint a3;

          if (!parseArgs(args, "JIII", &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(self->object.init(a0, a1, a2, a3));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "init", args);
          return NULL;
        }

        static PyObject *t_NumericTokenStream$NumericTermAttributeImpl_reflectWith(t_NumericTokenStream$NumericTermAttributeImpl *self, PyObject *args)
        {
          ::org::apache::lucene::util::AttributeReflector a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::util::AttributeReflector::initializeClass, &a0))
          {
            OBJ_CALL(self->object.reflectWith(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(NumericTokenStream$NumericTermAttributeImpl), (PyObject *) self, "reflectWith", args, 2);
        }

        static PyObject *t_NumericTokenStream$NumericTermAttributeImpl_setShift(t_NumericTokenStream$NumericTermAttributeImpl *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.setShift(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setShift", arg);
          return NULL;
        }

        static PyObject *t_NumericTokenStream$NumericTermAttributeImpl_get__bytesRef(t_NumericTokenStream$NumericTermAttributeImpl *self, void *data)
        {
          ::org::apache::lucene::util::BytesRef value((jobject) NULL);
          OBJ_CALL(value = self->object.getBytesRef());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(value);
        }

        static PyObject *t_NumericTokenStream$NumericTermAttributeImpl_get__rawValue(t_NumericTokenStream$NumericTermAttributeImpl *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getRawValue());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }

        static PyObject *t_NumericTokenStream$NumericTermAttributeImpl_get__shift(t_NumericTokenStream$NumericTermAttributeImpl *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getShift());
          return PyInt_FromLong((long) value);
        }
        static int t_NumericTokenStream$NumericTermAttributeImpl_set__shift(t_NumericTokenStream$NumericTermAttributeImpl *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setShift(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "shift", arg);
          return -1;
        }

        static PyObject *t_NumericTokenStream$NumericTermAttributeImpl_get__valueSize(t_NumericTokenStream$NumericTermAttributeImpl *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getValueSize());
          return PyInt_FromLong((long) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/CheckIndex$Status$SegmentInfoStatus.h"
#include "org/apache/lucene/index/CheckIndex$Status$StoredFieldStatus.h"
#include "org/apache/lucene/index/CheckIndex$Status$TermVectorStatus.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/CheckIndex$Status$TermIndexStatus.h"
#include "org/apache/lucene/codecs/Codec.h"
#include "org/apache/lucene/index/CheckIndex$Status$FieldNormStatus.h"
#include "org/apache/lucene/index/CheckIndex$Status$DocValuesStatus.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *CheckIndex$Status$SegmentInfoStatus::class$ = NULL;
        jmethodID *CheckIndex$Status$SegmentInfoStatus::mids$ = NULL;
        jfieldID *CheckIndex$Status$SegmentInfoStatus::fids$ = NULL;
        bool CheckIndex$Status$SegmentInfoStatus::live$ = false;

        jclass CheckIndex$Status$SegmentInfoStatus::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/CheckIndex$Status$SegmentInfoStatus");

            fids$ = new jfieldID[max_fid];
            fids$[fid_codec] = env->getFieldID(cls, "codec", "Lorg/apache/lucene/codecs/Codec;");
            fids$[fid_compound] = env->getFieldID(cls, "compound", "Z");
            fids$[fid_deletionsGen] = env->getFieldID(cls, "deletionsGen", "J");
            fids$[fid_diagnostics] = env->getFieldID(cls, "diagnostics", "Ljava/util/Map;");
            fids$[fid_docCount] = env->getFieldID(cls, "docCount", "I");
            fids$[fid_docStoreCompoundFile] = env->getFieldID(cls, "docStoreCompoundFile", "Z");
            fids$[fid_docStoreOffset] = env->getFieldID(cls, "docStoreOffset", "I");
            fids$[fid_docStoreSegment] = env->getFieldID(cls, "docStoreSegment", "Ljava/lang/String;");
            fids$[fid_docValuesStatus] = env->getFieldID(cls, "docValuesStatus", "Lorg/apache/lucene/index/CheckIndex$Status$DocValuesStatus;");
            fids$[fid_fieldNormStatus] = env->getFieldID(cls, "fieldNormStatus", "Lorg/apache/lucene/index/CheckIndex$Status$FieldNormStatus;");
            fids$[fid_hasDeletions] = env->getFieldID(cls, "hasDeletions", "Z");
            fids$[fid_name] = env->getFieldID(cls, "name", "Ljava/lang/String;");
            fids$[fid_numDeleted] = env->getFieldID(cls, "numDeleted", "I");
            fids$[fid_numFiles] = env->getFieldID(cls, "numFiles", "I");
            fids$[fid_openReaderPassed] = env->getFieldID(cls, "openReaderPassed", "Z");
            fids$[fid_sizeMB] = env->getFieldID(cls, "sizeMB", "D");
            fids$[fid_storedFieldStatus] = env->getFieldID(cls, "storedFieldStatus", "Lorg/apache/lucene/index/CheckIndex$Status$StoredFieldStatus;");
            fids$[fid_termIndexStatus] = env->getFieldID(cls, "termIndexStatus", "Lorg/apache/lucene/index/CheckIndex$Status$TermIndexStatus;");
            fids$[fid_termVectorStatus] = env->getFieldID(cls, "termVectorStatus", "Lorg/apache/lucene/index/CheckIndex$Status$TermVectorStatus;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::codecs::Codec CheckIndex$Status$SegmentInfoStatus::_get_codec() const
        {
          return ::org::apache::lucene::codecs::Codec(env->getObjectField(this$, fids$[fid_codec]));
        }

        void CheckIndex$Status$SegmentInfoStatus::_set_codec(const ::org::apache::lucene::codecs::Codec & a0) const
        {
          env->setObjectField(this$, fids$[fid_codec], a0.this$);
        }

        jboolean CheckIndex$Status$SegmentInfoStatus::_get_compound() const
        {
          return env->getBooleanField(this$, fids$[fid_compound]);
        }

        void CheckIndex$Status$SegmentInfoStatus::_set_compound(jboolean a0) const
        {
          env->setBooleanField(this$, fids$[fid_compound], a0);
        }

        jlong CheckIndex$Status$SegmentInfoStatus::_get_deletionsGen() const
        {
          return env->getLongField(this$, fids$[fid_deletionsGen]);
        }

        void CheckIndex$Status$SegmentInfoStatus::_set_deletionsGen(jlong a0) const
        {
          env->setLongField(this$, fids$[fid_deletionsGen], a0);
        }

        ::java::util::Map CheckIndex$Status$SegmentInfoStatus::_get_diagnostics() const
        {
          return ::java::util::Map(env->getObjectField(this$, fids$[fid_diagnostics]));
        }

        void CheckIndex$Status$SegmentInfoStatus::_set_diagnostics(const ::java::util::Map & a0) const
        {
          env->setObjectField(this$, fids$[fid_diagnostics], a0.this$);
        }

        jint CheckIndex$Status$SegmentInfoStatus::_get_docCount() const
        {
          return env->getIntField(this$, fids$[fid_docCount]);
        }

        void CheckIndex$Status$SegmentInfoStatus::_set_docCount(jint a0) const
        {
          env->setIntField(this$, fids$[fid_docCount], a0);
        }

        jboolean CheckIndex$Status$SegmentInfoStatus::_get_docStoreCompoundFile() const
        {
          return env->getBooleanField(this$, fids$[fid_docStoreCompoundFile]);
        }

        void CheckIndex$Status$SegmentInfoStatus::_set_docStoreCompoundFile(jboolean a0) const
        {
          env->setBooleanField(this$, fids$[fid_docStoreCompoundFile], a0);
        }

        jint CheckIndex$Status$SegmentInfoStatus::_get_docStoreOffset() const
        {
          return env->getIntField(this$, fids$[fid_docStoreOffset]);
        }

        void CheckIndex$Status$SegmentInfoStatus::_set_docStoreOffset(jint a0) const
        {
          env->setIntField(this$, fids$[fid_docStoreOffset], a0);
        }

        ::java::lang::String CheckIndex$Status$SegmentInfoStatus::_get_docStoreSegment() const
        {
          return ::java::lang::String(env->getObjectField(this$, fids$[fid_docStoreSegment]));
        }

        void CheckIndex$Status$SegmentInfoStatus::_set_docStoreSegment(const ::java::lang::String & a0) const
        {
          env->setObjectField(this$, fids$[fid_docStoreSegment], a0.this$);
        }

        ::org::apache::lucene::index::CheckIndex$Status$DocValuesStatus CheckIndex$Status$SegmentInfoStatus::_get_docValuesStatus() const
        {
          return ::org::apache::lucene::index::CheckIndex$Status$DocValuesStatus(env->getObjectField(this$, fids$[fid_docValuesStatus]));
        }

        void CheckIndex$Status$SegmentInfoStatus::_set_docValuesStatus(const ::org::apache::lucene::index::CheckIndex$Status$DocValuesStatus & a0) const
        {
          env->setObjectField(this$, fids$[fid_docValuesStatus], a0.this$);
        }

        ::org::apache::lucene::index::CheckIndex$Status$FieldNormStatus CheckIndex$Status$SegmentInfoStatus::_get_fieldNormStatus() const
        {
          return ::org::apache::lucene::index::CheckIndex$Status$FieldNormStatus(env->getObjectField(this$, fids$[fid_fieldNormStatus]));
        }

        void CheckIndex$Status$SegmentInfoStatus::_set_fieldNormStatus(const ::org::apache::lucene::index::CheckIndex$Status$FieldNormStatus & a0) const
        {
          env->setObjectField(this$, fids$[fid_fieldNormStatus], a0.this$);
        }

        jboolean CheckIndex$Status$SegmentInfoStatus::_get_hasDeletions() const
        {
          return env->getBooleanField(this$, fids$[fid_hasDeletions]);
        }

        void CheckIndex$Status$SegmentInfoStatus::_set_hasDeletions(jboolean a0) const
        {
          env->setBooleanField(this$, fids$[fid_hasDeletions], a0);
        }

        ::java::lang::String CheckIndex$Status$SegmentInfoStatus::_get_name() const
        {
          return ::java::lang::String(env->getObjectField(this$, fids$[fid_name]));
        }

        void CheckIndex$Status$SegmentInfoStatus::_set_name(const ::java::lang::String & a0) const
        {
          env->setObjectField(this$, fids$[fid_name], a0.this$);
        }

        jint CheckIndex$Status$SegmentInfoStatus::_get_numDeleted() const
        {
          return env->getIntField(this$, fids$[fid_numDeleted]);
        }

        void CheckIndex$Status$SegmentInfoStatus::_set_numDeleted(jint a0) const
        {
          env->setIntField(this$, fids$[fid_numDeleted], a0);
        }

        jint CheckIndex$Status$SegmentInfoStatus::_get_numFiles() const
        {
          return env->getIntField(this$, fids$[fid_numFiles]);
        }

        void CheckIndex$Status$SegmentInfoStatus::_set_numFiles(jint a0) const
        {
          env->setIntField(this$, fids$[fid_numFiles], a0);
        }

        jboolean CheckIndex$Status$SegmentInfoStatus::_get_openReaderPassed() const
        {
          return env->getBooleanField(this$, fids$[fid_openReaderPassed]);
        }

        void CheckIndex$Status$SegmentInfoStatus::_set_openReaderPassed(jboolean a0) const
        {
          env->setBooleanField(this$, fids$[fid_openReaderPassed], a0);
        }

        jdouble CheckIndex$Status$SegmentInfoStatus::_get_sizeMB() const
        {
          return env->getDoubleField(this$, fids$[fid_sizeMB]);
        }

        void CheckIndex$Status$SegmentInfoStatus::_set_sizeMB(jdouble a0) const
        {
          env->setDoubleField(this$, fids$[fid_sizeMB], a0);
        }

        ::org::apache::lucene::index::CheckIndex$Status$StoredFieldStatus CheckIndex$Status$SegmentInfoStatus::_get_storedFieldStatus() const
        {
          return ::org::apache::lucene::index::CheckIndex$Status$StoredFieldStatus(env->getObjectField(this$, fids$[fid_storedFieldStatus]));
        }

        void CheckIndex$Status$SegmentInfoStatus::_set_storedFieldStatus(const ::org::apache::lucene::index::CheckIndex$Status$StoredFieldStatus & a0) const
        {
          env->setObjectField(this$, fids$[fid_storedFieldStatus], a0.this$);
        }

        ::org::apache::lucene::index::CheckIndex$Status$TermIndexStatus CheckIndex$Status$SegmentInfoStatus::_get_termIndexStatus() const
        {
          return ::org::apache::lucene::index::CheckIndex$Status$TermIndexStatus(env->getObjectField(this$, fids$[fid_termIndexStatus]));
        }

        void CheckIndex$Status$SegmentInfoStatus::_set_termIndexStatus(const ::org::apache::lucene::index::CheckIndex$Status$TermIndexStatus & a0) const
        {
          env->setObjectField(this$, fids$[fid_termIndexStatus], a0.this$);
        }

        ::org::apache::lucene::index::CheckIndex$Status$TermVectorStatus CheckIndex$Status$SegmentInfoStatus::_get_termVectorStatus() const
        {
          return ::org::apache::lucene::index::CheckIndex$Status$TermVectorStatus(env->getObjectField(this$, fids$[fid_termVectorStatus]));
        }

        void CheckIndex$Status$SegmentInfoStatus::_set_termVectorStatus(const ::org::apache::lucene::index::CheckIndex$Status$TermVectorStatus & a0) const
        {
          env->setObjectField(this$, fids$[fid_termVectorStatus], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__codec(t_CheckIndex$Status$SegmentInfoStatus *self, void *data);
        static int t_CheckIndex$Status$SegmentInfoStatus_set__codec(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__compound(t_CheckIndex$Status$SegmentInfoStatus *self, void *data);
        static int t_CheckIndex$Status$SegmentInfoStatus_set__compound(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__deletionsGen(t_CheckIndex$Status$SegmentInfoStatus *self, void *data);
        static int t_CheckIndex$Status$SegmentInfoStatus_set__deletionsGen(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__diagnostics(t_CheckIndex$Status$SegmentInfoStatus *self, void *data);
        static int t_CheckIndex$Status$SegmentInfoStatus_set__diagnostics(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__docCount(t_CheckIndex$Status$SegmentInfoStatus *self, void *data);
        static int t_CheckIndex$Status$SegmentInfoStatus_set__docCount(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__docStoreCompoundFile(t_CheckIndex$Status$SegmentInfoStatus *self, void *data);
        static int t_CheckIndex$Status$SegmentInfoStatus_set__docStoreCompoundFile(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__docStoreOffset(t_CheckIndex$Status$SegmentInfoStatus *self, void *data);
        static int t_CheckIndex$Status$SegmentInfoStatus_set__docStoreOffset(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__docStoreSegment(t_CheckIndex$Status$SegmentInfoStatus *self, void *data);
        static int t_CheckIndex$Status$SegmentInfoStatus_set__docStoreSegment(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__docValuesStatus(t_CheckIndex$Status$SegmentInfoStatus *self, void *data);
        static int t_CheckIndex$Status$SegmentInfoStatus_set__docValuesStatus(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__fieldNormStatus(t_CheckIndex$Status$SegmentInfoStatus *self, void *data);
        static int t_CheckIndex$Status$SegmentInfoStatus_set__fieldNormStatus(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__hasDeletions(t_CheckIndex$Status$SegmentInfoStatus *self, void *data);
        static int t_CheckIndex$Status$SegmentInfoStatus_set__hasDeletions(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__name(t_CheckIndex$Status$SegmentInfoStatus *self, void *data);
        static int t_CheckIndex$Status$SegmentInfoStatus_set__name(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__numDeleted(t_CheckIndex$Status$SegmentInfoStatus *self, void *data);
        static int t_CheckIndex$Status$SegmentInfoStatus_set__numDeleted(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__numFiles(t_CheckIndex$Status$SegmentInfoStatus *self, void *data);
        static int t_CheckIndex$Status$SegmentInfoStatus_set__numFiles(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__openReaderPassed(t_CheckIndex$Status$SegmentInfoStatus *self, void *data);
        static int t_CheckIndex$Status$SegmentInfoStatus_set__openReaderPassed(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__sizeMB(t_CheckIndex$Status$SegmentInfoStatus *self, void *data);
        static int t_CheckIndex$Status$SegmentInfoStatus_set__sizeMB(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__storedFieldStatus(t_CheckIndex$Status$SegmentInfoStatus *self, void *data);
        static int t_CheckIndex$Status$SegmentInfoStatus_set__storedFieldStatus(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__termIndexStatus(t_CheckIndex$Status$SegmentInfoStatus *self, void *data);
        static int t_CheckIndex$Status$SegmentInfoStatus_set__termIndexStatus(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__termVectorStatus(t_CheckIndex$Status$SegmentInfoStatus *self, void *data);
        static int t_CheckIndex$Status$SegmentInfoStatus_set__termVectorStatus(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data);

        static PyGetSetDef t_CheckIndex$Status$SegmentInfoStatus__fields_[] = {
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$SegmentInfoStatus, codec),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$SegmentInfoStatus, compound),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$SegmentInfoStatus, deletionsGen),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$SegmentInfoStatus, diagnostics),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$SegmentInfoStatus, docCount),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$SegmentInfoStatus, docStoreCompoundFile),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$SegmentInfoStatus, docStoreOffset),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$SegmentInfoStatus, docStoreSegment),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$SegmentInfoStatus, docValuesStatus),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$SegmentInfoStatus, fieldNormStatus),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$SegmentInfoStatus, hasDeletions),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$SegmentInfoStatus, name),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$SegmentInfoStatus, numDeleted),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$SegmentInfoStatus, numFiles),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$SegmentInfoStatus, openReaderPassed),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$SegmentInfoStatus, sizeMB),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$SegmentInfoStatus, storedFieldStatus),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$SegmentInfoStatus, termIndexStatus),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$SegmentInfoStatus, termVectorStatus),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_CheckIndex$Status$SegmentInfoStatus__methods_[] = {
          DECLARE_METHOD(t_CheckIndex$Status$SegmentInfoStatus, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CheckIndex$Status$SegmentInfoStatus, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(CheckIndex$Status$SegmentInfoStatus, t_CheckIndex$Status$SegmentInfoStatus, ::java::lang::Object, CheckIndex$Status$SegmentInfoStatus, abstract_init, 0, 0, t_CheckIndex$Status$SegmentInfoStatus__fields_, 0, 0);

        void t_CheckIndex$Status$SegmentInfoStatus::install(PyObject *module)
        {
          installType(&PY_TYPE(CheckIndex$Status$SegmentInfoStatus), module, "CheckIndex$Status$SegmentInfoStatus", 0);
        }

        void t_CheckIndex$Status$SegmentInfoStatus::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(CheckIndex$Status$SegmentInfoStatus).tp_dict, "class_", make_descriptor(CheckIndex$Status$SegmentInfoStatus::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(CheckIndex$Status$SegmentInfoStatus).tp_dict, "wrapfn_", make_descriptor(t_CheckIndex$Status$SegmentInfoStatus::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(CheckIndex$Status$SegmentInfoStatus).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CheckIndex$Status$SegmentInfoStatus::initializeClass, 1)))
            return NULL;
          return t_CheckIndex$Status$SegmentInfoStatus::wrap_Object(CheckIndex$Status$SegmentInfoStatus(((t_CheckIndex$Status$SegmentInfoStatus *) arg)->object.this$));
        }
        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CheckIndex$Status$SegmentInfoStatus::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__codec(t_CheckIndex$Status$SegmentInfoStatus *self, void *data)
        {
          ::org::apache::lucene::codecs::Codec value((jobject) NULL);
          OBJ_CALL(value = self->object._get_codec());
          return ::org::apache::lucene::codecs::t_Codec::wrap_Object(value);
        }
        static int t_CheckIndex$Status$SegmentInfoStatus_set__codec(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data)
        {
          ::org::apache::lucene::codecs::Codec value((jobject) NULL);
          if (!parseArg(arg, "k", ::org::apache::lucene::codecs::Codec::initializeClass, &value))
          {
            INT_CALL(self->object._set_codec(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "codec", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__compound(t_CheckIndex$Status$SegmentInfoStatus *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object._get_compound());
          Py_RETURN_BOOL(value);
        }
        static int t_CheckIndex$Status$SegmentInfoStatus_set__compound(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data)
        {
          jboolean value;
          if (!parseArg(arg, "Z", &value))
          {
            INT_CALL(self->object._set_compound(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "compound", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__deletionsGen(t_CheckIndex$Status$SegmentInfoStatus *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object._get_deletionsGen());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
        static int t_CheckIndex$Status$SegmentInfoStatus_set__deletionsGen(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data)
        {
          jlong value;
          if (!parseArg(arg, "J", &value))
          {
            INT_CALL(self->object._set_deletionsGen(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "deletionsGen", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__diagnostics(t_CheckIndex$Status$SegmentInfoStatus *self, void *data)
        {
          ::java::util::Map value((jobject) NULL);
          OBJ_CALL(value = self->object._get_diagnostics());
          return ::java::util::t_Map::wrap_Object(value);
        }
        static int t_CheckIndex$Status$SegmentInfoStatus_set__diagnostics(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data)
        {
          ::java::util::Map value((jobject) NULL);
          if (!parseArg(arg, "k", ::java::util::Map::initializeClass, &value))
          {
            INT_CALL(self->object._set_diagnostics(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "diagnostics", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__docCount(t_CheckIndex$Status$SegmentInfoStatus *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_docCount());
          return PyInt_FromLong((long) value);
        }
        static int t_CheckIndex$Status$SegmentInfoStatus_set__docCount(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_docCount(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "docCount", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__docStoreCompoundFile(t_CheckIndex$Status$SegmentInfoStatus *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object._get_docStoreCompoundFile());
          Py_RETURN_BOOL(value);
        }
        static int t_CheckIndex$Status$SegmentInfoStatus_set__docStoreCompoundFile(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data)
        {
          jboolean value;
          if (!parseArg(arg, "Z", &value))
          {
            INT_CALL(self->object._set_docStoreCompoundFile(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "docStoreCompoundFile", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__docStoreOffset(t_CheckIndex$Status$SegmentInfoStatus *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_docStoreOffset());
          return PyInt_FromLong((long) value);
        }
        static int t_CheckIndex$Status$SegmentInfoStatus_set__docStoreOffset(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_docStoreOffset(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "docStoreOffset", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__docStoreSegment(t_CheckIndex$Status$SegmentInfoStatus *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object._get_docStoreSegment());
          return j2p(value);
        }
        static int t_CheckIndex$Status$SegmentInfoStatus_set__docStoreSegment(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          if (!parseArg(arg, "s", &value))
          {
            INT_CALL(self->object._set_docStoreSegment(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "docStoreSegment", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__docValuesStatus(t_CheckIndex$Status$SegmentInfoStatus *self, void *data)
        {
          ::org::apache::lucene::index::CheckIndex$Status$DocValuesStatus value((jobject) NULL);
          OBJ_CALL(value = self->object._get_docValuesStatus());
          return ::org::apache::lucene::index::t_CheckIndex$Status$DocValuesStatus::wrap_Object(value);
        }
        static int t_CheckIndex$Status$SegmentInfoStatus_set__docValuesStatus(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data)
        {
          ::org::apache::lucene::index::CheckIndex$Status$DocValuesStatus value((jobject) NULL);
          if (!parseArg(arg, "k", ::org::apache::lucene::index::CheckIndex$Status$DocValuesStatus::initializeClass, &value))
          {
            INT_CALL(self->object._set_docValuesStatus(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "docValuesStatus", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__fieldNormStatus(t_CheckIndex$Status$SegmentInfoStatus *self, void *data)
        {
          ::org::apache::lucene::index::CheckIndex$Status$FieldNormStatus value((jobject) NULL);
          OBJ_CALL(value = self->object._get_fieldNormStatus());
          return ::org::apache::lucene::index::t_CheckIndex$Status$FieldNormStatus::wrap_Object(value);
        }
        static int t_CheckIndex$Status$SegmentInfoStatus_set__fieldNormStatus(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data)
        {
          ::org::apache::lucene::index::CheckIndex$Status$FieldNormStatus value((jobject) NULL);
          if (!parseArg(arg, "k", ::org::apache::lucene::index::CheckIndex$Status$FieldNormStatus::initializeClass, &value))
          {
            INT_CALL(self->object._set_fieldNormStatus(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "fieldNormStatus", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__hasDeletions(t_CheckIndex$Status$SegmentInfoStatus *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object._get_hasDeletions());
          Py_RETURN_BOOL(value);
        }
        static int t_CheckIndex$Status$SegmentInfoStatus_set__hasDeletions(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data)
        {
          jboolean value;
          if (!parseArg(arg, "Z", &value))
          {
            INT_CALL(self->object._set_hasDeletions(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "hasDeletions", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__name(t_CheckIndex$Status$SegmentInfoStatus *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object._get_name());
          return j2p(value);
        }
        static int t_CheckIndex$Status$SegmentInfoStatus_set__name(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          if (!parseArg(arg, "s", &value))
          {
            INT_CALL(self->object._set_name(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "name", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__numDeleted(t_CheckIndex$Status$SegmentInfoStatus *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_numDeleted());
          return PyInt_FromLong((long) value);
        }
        static int t_CheckIndex$Status$SegmentInfoStatus_set__numDeleted(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_numDeleted(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "numDeleted", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__numFiles(t_CheckIndex$Status$SegmentInfoStatus *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_numFiles());
          return PyInt_FromLong((long) value);
        }
        static int t_CheckIndex$Status$SegmentInfoStatus_set__numFiles(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_numFiles(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "numFiles", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__openReaderPassed(t_CheckIndex$Status$SegmentInfoStatus *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object._get_openReaderPassed());
          Py_RETURN_BOOL(value);
        }
        static int t_CheckIndex$Status$SegmentInfoStatus_set__openReaderPassed(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data)
        {
          jboolean value;
          if (!parseArg(arg, "Z", &value))
          {
            INT_CALL(self->object._set_openReaderPassed(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "openReaderPassed", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__sizeMB(t_CheckIndex$Status$SegmentInfoStatus *self, void *data)
        {
          jdouble value;
          OBJ_CALL(value = self->object._get_sizeMB());
          return PyFloat_FromDouble((double) value);
        }
        static int t_CheckIndex$Status$SegmentInfoStatus_set__sizeMB(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data)
        {
          jdouble value;
          if (!parseArg(arg, "D", &value))
          {
            INT_CALL(self->object._set_sizeMB(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "sizeMB", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__storedFieldStatus(t_CheckIndex$Status$SegmentInfoStatus *self, void *data)
        {
          ::org::apache::lucene::index::CheckIndex$Status$StoredFieldStatus value((jobject) NULL);
          OBJ_CALL(value = self->object._get_storedFieldStatus());
          return ::org::apache::lucene::index::t_CheckIndex$Status$StoredFieldStatus::wrap_Object(value);
        }
        static int t_CheckIndex$Status$SegmentInfoStatus_set__storedFieldStatus(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data)
        {
          ::org::apache::lucene::index::CheckIndex$Status$StoredFieldStatus value((jobject) NULL);
          if (!parseArg(arg, "k", ::org::apache::lucene::index::CheckIndex$Status$StoredFieldStatus::initializeClass, &value))
          {
            INT_CALL(self->object._set_storedFieldStatus(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "storedFieldStatus", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__termIndexStatus(t_CheckIndex$Status$SegmentInfoStatus *self, void *data)
        {
          ::org::apache::lucene::index::CheckIndex$Status$TermIndexStatus value((jobject) NULL);
          OBJ_CALL(value = self->object._get_termIndexStatus());
          return ::org::apache::lucene::index::t_CheckIndex$Status$TermIndexStatus::wrap_Object(value);
        }
        static int t_CheckIndex$Status$SegmentInfoStatus_set__termIndexStatus(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data)
        {
          ::org::apache::lucene::index::CheckIndex$Status$TermIndexStatus value((jobject) NULL);
          if (!parseArg(arg, "k", ::org::apache::lucene::index::CheckIndex$Status$TermIndexStatus::initializeClass, &value))
          {
            INT_CALL(self->object._set_termIndexStatus(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "termIndexStatus", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__termVectorStatus(t_CheckIndex$Status$SegmentInfoStatus *self, void *data)
        {
          ::org::apache::lucene::index::CheckIndex$Status$TermVectorStatus value((jobject) NULL);
          OBJ_CALL(value = self->object._get_termVectorStatus());
          return ::org::apache::lucene::index::t_CheckIndex$Status$TermVectorStatus::wrap_Object(value);
        }
        static int t_CheckIndex$Status$SegmentInfoStatus_set__termVectorStatus(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data)
        {
          ::org::apache::lucene::index::CheckIndex$Status$TermVectorStatus value((jobject) NULL);
          if (!parseArg(arg, "k", ::org::apache::lucene::index::CheckIndex$Status$TermVectorStatus::initializeClass, &value))
          {
            INT_CALL(self->object._set_termVectorStatus(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "termVectorStatus", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/pt/RSLPStemmerBase.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pt {

          ::java::lang::Class *RSLPStemmerBase::class$ = NULL;
          jmethodID *RSLPStemmerBase::mids$ = NULL;
          bool RSLPStemmerBase::live$ = false;

          jclass RSLPStemmerBase::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/pt/RSLPStemmerBase");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_parse_7d2165b9] = env->getStaticMethodID(cls, "parse", "(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/Map;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          RSLPStemmerBase::RSLPStemmerBase() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pt {
          static PyObject *t_RSLPStemmerBase_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_RSLPStemmerBase_instance_(PyTypeObject *type, PyObject *arg);
          static int t_RSLPStemmerBase_init_(t_RSLPStemmerBase *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_RSLPStemmerBase__methods_[] = {
            DECLARE_METHOD(t_RSLPStemmerBase, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_RSLPStemmerBase, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(RSLPStemmerBase, t_RSLPStemmerBase, ::java::lang::Object, RSLPStemmerBase, t_RSLPStemmerBase_init_, 0, 0, 0, 0, 0);

          void t_RSLPStemmerBase::install(PyObject *module)
          {
            installType(&PY_TYPE(RSLPStemmerBase), module, "RSLPStemmerBase", 0);
          }

          void t_RSLPStemmerBase::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(RSLPStemmerBase).tp_dict, "class_", make_descriptor(RSLPStemmerBase::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(RSLPStemmerBase).tp_dict, "wrapfn_", make_descriptor(t_RSLPStemmerBase::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(RSLPStemmerBase).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_RSLPStemmerBase_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, RSLPStemmerBase::initializeClass, 1)))
              return NULL;
            return t_RSLPStemmerBase::wrap_Object(RSLPStemmerBase(((t_RSLPStemmerBase *) arg)->object.this$));
          }
          static PyObject *t_RSLPStemmerBase_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, RSLPStemmerBase::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_RSLPStemmerBase_init_(t_RSLPStemmerBase *self, PyObject *args, PyObject *kwds)
          {
            RSLPStemmerBase object((jobject) NULL);

            INT_CALL(object = RSLPStemmerBase());
            self->object = object;

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/de/GermanMinimalStemmer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace de {

          ::java::lang::Class *GermanMinimalStemmer::class$ = NULL;
          jmethodID *GermanMinimalStemmer::mids$ = NULL;
          bool GermanMinimalStemmer::live$ = false;

          jclass GermanMinimalStemmer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/de/GermanMinimalStemmer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_stem_ec6430eb] = env->getMethodID(cls, "stem", "([CI)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          GermanMinimalStemmer::GermanMinimalStemmer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint GermanMinimalStemmer::stem(const JArray< jchar > & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_stem_ec6430eb], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace de {
          static PyObject *t_GermanMinimalStemmer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GermanMinimalStemmer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_GermanMinimalStemmer_init_(t_GermanMinimalStemmer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_GermanMinimalStemmer_stem(t_GermanMinimalStemmer *self, PyObject *args);

          static PyMethodDef t_GermanMinimalStemmer__methods_[] = {
            DECLARE_METHOD(t_GermanMinimalStemmer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GermanMinimalStemmer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GermanMinimalStemmer, stem, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(GermanMinimalStemmer, t_GermanMinimalStemmer, ::java::lang::Object, GermanMinimalStemmer, t_GermanMinimalStemmer_init_, 0, 0, 0, 0, 0);

          void t_GermanMinimalStemmer::install(PyObject *module)
          {
            installType(&PY_TYPE(GermanMinimalStemmer), module, "GermanMinimalStemmer", 0);
          }

          void t_GermanMinimalStemmer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(GermanMinimalStemmer).tp_dict, "class_", make_descriptor(GermanMinimalStemmer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(GermanMinimalStemmer).tp_dict, "wrapfn_", make_descriptor(t_GermanMinimalStemmer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(GermanMinimalStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_GermanMinimalStemmer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GermanMinimalStemmer::initializeClass, 1)))
              return NULL;
            return t_GermanMinimalStemmer::wrap_Object(GermanMinimalStemmer(((t_GermanMinimalStemmer *) arg)->object.this$));
          }
          static PyObject *t_GermanMinimalStemmer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GermanMinimalStemmer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_GermanMinimalStemmer_init_(t_GermanMinimalStemmer *self, PyObject *args, PyObject *kwds)
          {
            GermanMinimalStemmer object((jobject) NULL);

            INT_CALL(object = GermanMinimalStemmer());
            self->object = object;

            return 0;
          }

          static PyObject *t_GermanMinimalStemmer_stem(t_GermanMinimalStemmer *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(result = self->object.stem(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "stem", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/postingshighlight/DefaultPassageFormatter.h"
#include "org/apache/lucene/search/postingshighlight/Passage.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace postingshighlight {

          ::java::lang::Class *DefaultPassageFormatter::class$ = NULL;
          jmethodID *DefaultPassageFormatter::mids$ = NULL;
          bool DefaultPassageFormatter::live$ = false;

          jclass DefaultPassageFormatter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/postingshighlight/DefaultPassageFormatter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_7f8a9869] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Z)V");
              mids$[mid_format_4b42952e] = env->getMethodID(cls, "format", "([Lorg/apache/lucene/search/postingshighlight/Passage;Ljava/lang/String;)Ljava/lang/String;");
              mids$[mid_append_5cdac082] = env->getMethodID(cls, "append", "(Ljava/lang/StringBuilder;Ljava/lang/String;II)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          DefaultPassageFormatter::DefaultPassageFormatter() : ::org::apache::lucene::search::postingshighlight::PassageFormatter(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          DefaultPassageFormatter::DefaultPassageFormatter(const ::java::lang::String & a0, const ::java::lang::String & a1, const ::java::lang::String & a2, jboolean a3) : ::org::apache::lucene::search::postingshighlight::PassageFormatter(env->newObject(initializeClass, &mids$, mid_init$_7f8a9869, a0.this$, a1.this$, a2.this$, a3)) {}

          ::java::lang::String DefaultPassageFormatter::format(const JArray< ::org::apache::lucene::search::postingshighlight::Passage > & a0, const ::java::lang::String & a1) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_format_4b42952e], a0.this$, a1.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace postingshighlight {
          static PyObject *t_DefaultPassageFormatter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DefaultPassageFormatter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_DefaultPassageFormatter_init_(t_DefaultPassageFormatter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_DefaultPassageFormatter_format(t_DefaultPassageFormatter *self, PyObject *args);

          static PyMethodDef t_DefaultPassageFormatter__methods_[] = {
            DECLARE_METHOD(t_DefaultPassageFormatter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DefaultPassageFormatter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DefaultPassageFormatter, format, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(DefaultPassageFormatter, t_DefaultPassageFormatter, ::org::apache::lucene::search::postingshighlight::PassageFormatter, DefaultPassageFormatter, t_DefaultPassageFormatter_init_, 0, 0, 0, 0, 0);

          void t_DefaultPassageFormatter::install(PyObject *module)
          {
            installType(&PY_TYPE(DefaultPassageFormatter), module, "DefaultPassageFormatter", 0);
          }

          void t_DefaultPassageFormatter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(DefaultPassageFormatter).tp_dict, "class_", make_descriptor(DefaultPassageFormatter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(DefaultPassageFormatter).tp_dict, "wrapfn_", make_descriptor(t_DefaultPassageFormatter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(DefaultPassageFormatter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_DefaultPassageFormatter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, DefaultPassageFormatter::initializeClass, 1)))
              return NULL;
            return t_DefaultPassageFormatter::wrap_Object(DefaultPassageFormatter(((t_DefaultPassageFormatter *) arg)->object.this$));
          }
          static PyObject *t_DefaultPassageFormatter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, DefaultPassageFormatter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_DefaultPassageFormatter_init_(t_DefaultPassageFormatter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                DefaultPassageFormatter object((jobject) NULL);

                INT_CALL(object = DefaultPassageFormatter());
                self->object = object;
                break;
              }
              goto err;
             case 4:
              {
                ::java::lang::String a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                ::java::lang::String a2((jobject) NULL);
                jboolean a3;
                DefaultPassageFormatter object((jobject) NULL);

                if (!parseArgs(args, "sssZ", &a0, &a1, &a2, &a3))
                {
                  INT_CALL(object = DefaultPassageFormatter(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_DefaultPassageFormatter_format(t_DefaultPassageFormatter *self, PyObject *args)
          {
            JArray< ::org::apache::lucene::search::postingshighlight::Passage > a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "[ks", ::org::apache::lucene::search::postingshighlight::Passage::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.format(a0, a1));
              return j2p(result);
            }

            return callSuper(&PY_TYPE(DefaultPassageFormatter), (PyObject *) self, "format", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/de/GermanStemFilterFactory.h"
#include "org/apache/lucene/analysis/de/GermanStemFilter.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace de {

          ::java::lang::Class *GermanStemFilterFactory::class$ = NULL;
          jmethodID *GermanStemFilterFactory::mids$ = NULL;
          bool GermanStemFilterFactory::live$ = false;

          jclass GermanStemFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/de/GermanStemFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_66272dff] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/de/GermanStemFilter;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          GermanStemFilterFactory::GermanStemFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::de::GermanStemFilter GermanStemFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::de::GermanStemFilter(env->callObjectMethod(this$, mids$[mid_create_66272dff], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace de {
          static PyObject *t_GermanStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GermanStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_GermanStemFilterFactory_init_(t_GermanStemFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_GermanStemFilterFactory_create(t_GermanStemFilterFactory *self, PyObject *args);

          static PyMethodDef t_GermanStemFilterFactory__methods_[] = {
            DECLARE_METHOD(t_GermanStemFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GermanStemFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GermanStemFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(GermanStemFilterFactory, t_GermanStemFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, GermanStemFilterFactory, t_GermanStemFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_GermanStemFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(GermanStemFilterFactory), module, "GermanStemFilterFactory", 0);
          }

          void t_GermanStemFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(GermanStemFilterFactory).tp_dict, "class_", make_descriptor(GermanStemFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(GermanStemFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_GermanStemFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(GermanStemFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_GermanStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GermanStemFilterFactory::initializeClass, 1)))
              return NULL;
            return t_GermanStemFilterFactory::wrap_Object(GermanStemFilterFactory(((t_GermanStemFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_GermanStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GermanStemFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_GermanStemFilterFactory_init_(t_GermanStemFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            GermanStemFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = GermanStemFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_GermanStemFilterFactory_create(t_GermanStemFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::de::GermanStemFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::de::t_GermanStemFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(GermanStemFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/MultiBits$SubResult.h"
#include "org/apache/lucene/util/Bits.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *MultiBits$SubResult::class$ = NULL;
        jmethodID *MultiBits$SubResult::mids$ = NULL;
        jfieldID *MultiBits$SubResult::fids$ = NULL;
        bool MultiBits$SubResult::live$ = false;

        jclass MultiBits$SubResult::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/MultiBits$SubResult");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

            fids$ = new jfieldID[max_fid];
            fids$[fid_matches] = env->getFieldID(cls, "matches", "Z");
            fids$[fid_result] = env->getFieldID(cls, "result", "Lorg/apache/lucene/util/Bits;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        MultiBits$SubResult::MultiBits$SubResult() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jboolean MultiBits$SubResult::_get_matches() const
        {
          return env->getBooleanField(this$, fids$[fid_matches]);
        }

        void MultiBits$SubResult::_set_matches(jboolean a0) const
        {
          env->setBooleanField(this$, fids$[fid_matches], a0);
        }

        ::org::apache::lucene::util::Bits MultiBits$SubResult::_get_result() const
        {
          return ::org::apache::lucene::util::Bits(env->getObjectField(this$, fids$[fid_result]));
        }

        void MultiBits$SubResult::_set_result(const ::org::apache::lucene::util::Bits & a0) const
        {
          env->setObjectField(this$, fids$[fid_result], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_MultiBits$SubResult_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiBits$SubResult_instance_(PyTypeObject *type, PyObject *arg);
        static int t_MultiBits$SubResult_init_(t_MultiBits$SubResult *self, PyObject *args, PyObject *kwds);
        static PyObject *t_MultiBits$SubResult_get__matches(t_MultiBits$SubResult *self, void *data);
        static int t_MultiBits$SubResult_set__matches(t_MultiBits$SubResult *self, PyObject *arg, void *data);
        static PyObject *t_MultiBits$SubResult_get__result(t_MultiBits$SubResult *self, void *data);
        static int t_MultiBits$SubResult_set__result(t_MultiBits$SubResult *self, PyObject *arg, void *data);

        static PyGetSetDef t_MultiBits$SubResult__fields_[] = {
          DECLARE_GETSET_FIELD(t_MultiBits$SubResult, matches),
          DECLARE_GETSET_FIELD(t_MultiBits$SubResult, result),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_MultiBits$SubResult__methods_[] = {
          DECLARE_METHOD(t_MultiBits$SubResult, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiBits$SubResult, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MultiBits$SubResult, t_MultiBits$SubResult, ::java::lang::Object, MultiBits$SubResult, t_MultiBits$SubResult_init_, 0, 0, t_MultiBits$SubResult__fields_, 0, 0);

        void t_MultiBits$SubResult::install(PyObject *module)
        {
          installType(&PY_TYPE(MultiBits$SubResult), module, "MultiBits$SubResult", 0);
        }

        void t_MultiBits$SubResult::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MultiBits$SubResult).tp_dict, "class_", make_descriptor(MultiBits$SubResult::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MultiBits$SubResult).tp_dict, "wrapfn_", make_descriptor(t_MultiBits$SubResult::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MultiBits$SubResult).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MultiBits$SubResult_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MultiBits$SubResult::initializeClass, 1)))
            return NULL;
          return t_MultiBits$SubResult::wrap_Object(MultiBits$SubResult(((t_MultiBits$SubResult *) arg)->object.this$));
        }
        static PyObject *t_MultiBits$SubResult_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MultiBits$SubResult::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_MultiBits$SubResult_init_(t_MultiBits$SubResult *self, PyObject *args, PyObject *kwds)
        {
          MultiBits$SubResult object((jobject) NULL);

          INT_CALL(object = MultiBits$SubResult());
          self->object = object;

          return 0;
        }

        static PyObject *t_MultiBits$SubResult_get__matches(t_MultiBits$SubResult *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object._get_matches());
          Py_RETURN_BOOL(value);
        }
        static int t_MultiBits$SubResult_set__matches(t_MultiBits$SubResult *self, PyObject *arg, void *data)
        {
          jboolean value;
          if (!parseArg(arg, "Z", &value))
          {
            INT_CALL(self->object._set_matches(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "matches", arg);
          return -1;
        }

        static PyObject *t_MultiBits$SubResult_get__result(t_MultiBits$SubResult *self, void *data)
        {
          ::org::apache::lucene::util::Bits value((jobject) NULL);
          OBJ_CALL(value = self->object._get_result());
          return ::org::apache::lucene::util::t_Bits::wrap_Object(value);
        }
        static int t_MultiBits$SubResult_set__result(t_MultiBits$SubResult *self, PyObject *arg, void *data)
        {
          ::org::apache::lucene::util::Bits value((jobject) NULL);
          if (!parseArg(arg, "k", ::org::apache::lucene::util::Bits::initializeClass, &value))
          {
            INT_CALL(self->object._set_result(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "result", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/IndexWriter.h"
#include "org/apache/lucene/index/SegmentCommitInfo.h"
#include "org/apache/lucene/index/IndexWriterConfig.h"
#include "org/apache/lucene/index/Term.h"
#include "java/io/Closeable.h"
#include "org/apache/lucene/store/Directory.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/LiveIndexWriterConfig.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/Accountable.h"
#include "java/lang/Iterable.h"
#include "org/apache/lucene/index/DirectoryReader.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/index/TwoPhaseCommit.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/index/MergePolicy$OneMerge.h"
#include "java/util/Collection.h"
#include "org/apache/lucene/index/IndexableField.h"
#include "org/apache/lucene/document/Field.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *IndexWriter::class$ = NULL;
        jmethodID *IndexWriter::mids$ = NULL;
        bool IndexWriter::live$ = false;
        jint IndexWriter::MAX_DOCS = (jint) 0;
        jint IndexWriter::MAX_TERM_LENGTH = (jint) 0;
        ::java::lang::String *IndexWriter::SOURCE = NULL;
        ::java::lang::String *IndexWriter::SOURCE_ADDINDEXES_READERS = NULL;
        ::java::lang::String *IndexWriter::SOURCE_FLUSH = NULL;
        ::java::lang::String *IndexWriter::SOURCE_MERGE = NULL;
        ::java::lang::String *IndexWriter::WRITE_LOCK_NAME = NULL;

        jclass IndexWriter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/IndexWriter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_02525b2d] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/IndexWriterConfig;)V");
            mids$[mid_abortMerges_54c6a166] = env->getMethodID(cls, "abortMerges", "()V");
            mids$[mid_addDocument_d1cac205] = env->getMethodID(cls, "addDocument", "(Ljava/lang/Iterable;)V");
            mids$[mid_addDocument_f74a1d55] = env->getMethodID(cls, "addDocument", "(Ljava/lang/Iterable;Lorg/apache/lucene/analysis/Analyzer;)V");
            mids$[mid_addDocuments_d1cac205] = env->getMethodID(cls, "addDocuments", "(Ljava/lang/Iterable;)V");
            mids$[mid_addDocuments_f74a1d55] = env->getMethodID(cls, "addDocuments", "(Ljava/lang/Iterable;Lorg/apache/lucene/analysis/Analyzer;)V");
            mids$[mid_addIndexes_a20f8ee9] = env->getMethodID(cls, "addIndexes", "([Lorg/apache/lucene/index/IndexReader;)V");
            mids$[mid_addIndexes_160e6086] = env->getMethodID(cls, "addIndexes", "([Lorg/apache/lucene/store/Directory;)V");
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_close_bb0c767f] = env->getMethodID(cls, "close", "(Z)V");
            mids$[mid_commit_54c6a166] = env->getMethodID(cls, "commit", "()V");
            mids$[mid_deleteAll_54c6a166] = env->getMethodID(cls, "deleteAll", "()V");
            mids$[mid_deleteDocuments_c9f85e01] = env->getMethodID(cls, "deleteDocuments", "([Lorg/apache/lucene/index/Term;)V");
            mids$[mid_deleteDocuments_937b34d3] = env->getMethodID(cls, "deleteDocuments", "([Lorg/apache/lucene/search/Query;)V");
            mids$[mid_deleteUnusedFiles_54c6a166] = env->getMethodID(cls, "deleteUnusedFiles", "()V");
            mids$[mid_forceMerge_39c7bd3c] = env->getMethodID(cls, "forceMerge", "(I)V");
            mids$[mid_forceMerge_b3a85a05] = env->getMethodID(cls, "forceMerge", "(IZ)V");
            mids$[mid_forceMergeDeletes_54c6a166] = env->getMethodID(cls, "forceMergeDeletes", "()V");
            mids$[mid_forceMergeDeletes_bb0c767f] = env->getMethodID(cls, "forceMergeDeletes", "(Z)V");
            mids$[mid_getAnalyzer_347f60a9] = env->getMethodID(cls, "getAnalyzer", "()Lorg/apache/lucene/analysis/Analyzer;");
            mids$[mid_getCommitData_db60befd] = env->getMethodID(cls, "getCommitData", "()Ljava/util/Map;");
            mids$[mid_getConfig_d6b985f6] = env->getMethodID(cls, "getConfig", "()Lorg/apache/lucene/index/LiveIndexWriterConfig;");
            mids$[mid_getDirectory_1f3934bb] = env->getMethodID(cls, "getDirectory", "()Lorg/apache/lucene/store/Directory;");
            mids$[mid_getMergingSegments_2d2d7de4] = env->getMethodID(cls, "getMergingSegments", "()Ljava/util/Collection;");
            mids$[mid_getNextMerge_2a262a14] = env->getMethodID(cls, "getNextMerge", "()Lorg/apache/lucene/index/MergePolicy$OneMerge;");
            mids$[mid_getReader_1de06693] = env->getMethodID(cls, "getReader", "()Lorg/apache/lucene/index/DirectoryReader;");
            mids$[mid_getReader_cfe2828e] = env->getMethodID(cls, "getReader", "(Z)Lorg/apache/lucene/index/DirectoryReader;");
            mids$[mid_hasDeletions_54c6a16a] = env->getMethodID(cls, "hasDeletions", "()Z");
            mids$[mid_hasPendingMerges_54c6a16a] = env->getMethodID(cls, "hasPendingMerges", "()Z");
            mids$[mid_hasUncommittedChanges_54c6a16a] = env->getMethodID(cls, "hasUncommittedChanges", "()Z");
            mids$[mid_isLocked_2e261efe] = env->getStaticMethodID(cls, "isLocked", "(Lorg/apache/lucene/store/Directory;)Z");
            mids$[mid_maxDoc_54c6a179] = env->getMethodID(cls, "maxDoc", "()I");
            mids$[mid_maybeMerge_54c6a166] = env->getMethodID(cls, "maybeMerge", "()V");
            mids$[mid_merge_54badd95] = env->getMethodID(cls, "merge", "(Lorg/apache/lucene/index/MergePolicy$OneMerge;)V");
            mids$[mid_numDeletedDocs_6649cdeb] = env->getMethodID(cls, "numDeletedDocs", "(Lorg/apache/lucene/index/SegmentCommitInfo;)I");
            mids$[mid_numDocs_54c6a179] = env->getMethodID(cls, "numDocs", "()I");
            mids$[mid_numRamDocs_54c6a179] = env->getMethodID(cls, "numRamDocs", "()I");
            mids$[mid_prepareCommit_54c6a166] = env->getMethodID(cls, "prepareCommit", "()V");
            mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");
            mids$[mid_ramSizeInBytes_54c6a17a] = env->getMethodID(cls, "ramSizeInBytes", "()J");
            mids$[mid_rollback_54c6a166] = env->getMethodID(cls, "rollback", "()V");
            mids$[mid_segString_14c7b5c5] = env->getMethodID(cls, "segString", "()Ljava/lang/String;");
            mids$[mid_segString_e5fcb63c] = env->getMethodID(cls, "segString", "(Ljava/lang/Iterable;)Ljava/lang/String;");
            mids$[mid_segString_edb3a3c3] = env->getMethodID(cls, "segString", "(Lorg/apache/lucene/index/SegmentCommitInfo;)Ljava/lang/String;");
            mids$[mid_setCommitData_4c9e2b1c] = env->getMethodID(cls, "setCommitData", "(Ljava/util/Map;)V");
            mids$[mid_tryDeleteDocument_1e4306e9] = env->getMethodID(cls, "tryDeleteDocument", "(Lorg/apache/lucene/index/IndexReader;I)Z");
            mids$[mid_unlock_2e261ef2] = env->getStaticMethodID(cls, "unlock", "(Lorg/apache/lucene/store/Directory;)V");
            mids$[mid_updateBinaryDocValue_1aaa0ac7] = env->getMethodID(cls, "updateBinaryDocValue", "(Lorg/apache/lucene/index/Term;Ljava/lang/String;Lorg/apache/lucene/util/BytesRef;)V");
            mids$[mid_updateDocValues_48345845] = env->getMethodID(cls, "updateDocValues", "(Lorg/apache/lucene/index/Term;[Lorg/apache/lucene/document/Field;)V");
            mids$[mid_updateDocument_b5aef5e2] = env->getMethodID(cls, "updateDocument", "(Lorg/apache/lucene/index/Term;Ljava/lang/Iterable;)V");
            mids$[mid_updateDocument_4d995db8] = env->getMethodID(cls, "updateDocument", "(Lorg/apache/lucene/index/Term;Ljava/lang/Iterable;Lorg/apache/lucene/analysis/Analyzer;)V");
            mids$[mid_updateDocuments_b5aef5e2] = env->getMethodID(cls, "updateDocuments", "(Lorg/apache/lucene/index/Term;Ljava/lang/Iterable;)V");
            mids$[mid_updateDocuments_4d995db8] = env->getMethodID(cls, "updateDocuments", "(Lorg/apache/lucene/index/Term;Ljava/lang/Iterable;Lorg/apache/lucene/analysis/Analyzer;)V");
            mids$[mid_updateNumericDocValue_3866ef1c] = env->getMethodID(cls, "updateNumericDocValue", "(Lorg/apache/lucene/index/Term;Ljava/lang/String;J)V");
            mids$[mid_waitForMerges_54c6a166] = env->getMethodID(cls, "waitForMerges", "()V");
            mids$[mid_flush_46f2e2c4] = env->getMethodID(cls, "flush", "(ZZ)V");
            mids$[mid_ensureOpen_bb0c767f] = env->getMethodID(cls, "ensureOpen", "(Z)V");
            mids$[mid_ensureOpen_54c6a166] = env->getMethodID(cls, "ensureOpen", "()V");
            mids$[mid_doAfterFlush_54c6a166] = env->getMethodID(cls, "doAfterFlush", "()V");
            mids$[mid_doBeforeFlush_54c6a166] = env->getMethodID(cls, "doBeforeFlush", "()V");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            MAX_DOCS = env->getStaticIntField(cls, "MAX_DOCS");
            MAX_TERM_LENGTH = env->getStaticIntField(cls, "MAX_TERM_LENGTH");
            SOURCE = new ::java::lang::String(env->getStaticObjectField(cls, "SOURCE", "Ljava/lang/String;"));
            SOURCE_ADDINDEXES_READERS = new ::java::lang::String(env->getStaticObjectField(cls, "SOURCE_ADDINDEXES_READERS", "Ljava/lang/String;"));
            SOURCE_FLUSH = new ::java::lang::String(env->getStaticObjectField(cls, "SOURCE_FLUSH", "Ljava/lang/String;"));
            SOURCE_MERGE = new ::java::lang::String(env->getStaticObjectField(cls, "SOURCE_MERGE", "Ljava/lang/String;"));
            WRITE_LOCK_NAME = new ::java::lang::String(env->getStaticObjectField(cls, "WRITE_LOCK_NAME", "Ljava/lang/String;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        IndexWriter::IndexWriter(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::IndexWriterConfig & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_02525b2d, a0.this$, a1.this$)) {}

        void IndexWriter::abortMerges() const
        {
          env->callVoidMethod(this$, mids$[mid_abortMerges_54c6a166]);
        }

        void IndexWriter::addDocument(const ::java::lang::Iterable & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_addDocument_d1cac205], a0.this$);
        }

        void IndexWriter::addDocument(const ::java::lang::Iterable & a0, const ::org::apache::lucene::analysis::Analyzer & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_addDocument_f74a1d55], a0.this$, a1.this$);
        }

        void IndexWriter::addDocuments(const ::java::lang::Iterable & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_addDocuments_d1cac205], a0.this$);
        }

        void IndexWriter::addDocuments(const ::java::lang::Iterable & a0, const ::org::apache::lucene::analysis::Analyzer & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_addDocuments_f74a1d55], a0.this$, a1.this$);
        }

        void IndexWriter::addIndexes(const JArray< ::org::apache::lucene::index::IndexReader > & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_addIndexes_a20f8ee9], a0.this$);
        }

        void IndexWriter::addIndexes(const JArray< ::org::apache::lucene::store::Directory > & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_addIndexes_160e6086], a0.this$);
        }

        void IndexWriter::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        void IndexWriter::close(jboolean a0) const
        {
          env->callVoidMethod(this$, mids$[mid_close_bb0c767f], a0);
        }

        void IndexWriter::commit() const
        {
          env->callVoidMethod(this$, mids$[mid_commit_54c6a166]);
        }

        void IndexWriter::deleteAll() const
        {
          env->callVoidMethod(this$, mids$[mid_deleteAll_54c6a166]);
        }

        void IndexWriter::deleteDocuments(const JArray< ::org::apache::lucene::index::Term > & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_deleteDocuments_c9f85e01], a0.this$);
        }

        void IndexWriter::deleteDocuments(const JArray< ::org::apache::lucene::search::Query > & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_deleteDocuments_937b34d3], a0.this$);
        }

        void IndexWriter::deleteUnusedFiles() const
        {
          env->callVoidMethod(this$, mids$[mid_deleteUnusedFiles_54c6a166]);
        }

        void IndexWriter::forceMerge(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_forceMerge_39c7bd3c], a0);
        }

        void IndexWriter::forceMerge(jint a0, jboolean a1) const
        {
          env->callVoidMethod(this$, mids$[mid_forceMerge_b3a85a05], a0, a1);
        }

        void IndexWriter::forceMergeDeletes() const
        {
          env->callVoidMethod(this$, mids$[mid_forceMergeDeletes_54c6a166]);
        }

        void IndexWriter::forceMergeDeletes(jboolean a0) const
        {
          env->callVoidMethod(this$, mids$[mid_forceMergeDeletes_bb0c767f], a0);
        }

        ::org::apache::lucene::analysis::Analyzer IndexWriter::getAnalyzer() const
        {
          return ::org::apache::lucene::analysis::Analyzer(env->callObjectMethod(this$, mids$[mid_getAnalyzer_347f60a9]));
        }

        ::java::util::Map IndexWriter::getCommitData() const
        {
          return ::java::util::Map(env->callObjectMethod(this$, mids$[mid_getCommitData_db60befd]));
        }

        ::org::apache::lucene::index::LiveIndexWriterConfig IndexWriter::getConfig() const
        {
          return ::org::apache::lucene::index::LiveIndexWriterConfig(env->callObjectMethod(this$, mids$[mid_getConfig_d6b985f6]));
        }

        ::org::apache::lucene::store::Directory IndexWriter::getDirectory() const
        {
          return ::org::apache::lucene::store::Directory(env->callObjectMethod(this$, mids$[mid_getDirectory_1f3934bb]));
        }

        ::java::util::Collection IndexWriter::getMergingSegments() const
        {
          return ::java::util::Collection(env->callObjectMethod(this$, mids$[mid_getMergingSegments_2d2d7de4]));
        }

        ::org::apache::lucene::index::MergePolicy$OneMerge IndexWriter::getNextMerge() const
        {
          return ::org::apache::lucene::index::MergePolicy$OneMerge(env->callObjectMethod(this$, mids$[mid_getNextMerge_2a262a14]));
        }

        ::org::apache::lucene::index::DirectoryReader IndexWriter::getReader() const
        {
          return ::org::apache::lucene::index::DirectoryReader(env->callObjectMethod(this$, mids$[mid_getReader_1de06693]));
        }

        ::org::apache::lucene::index::DirectoryReader IndexWriter::getReader(jboolean a0) const
        {
          return ::org::apache::lucene::index::DirectoryReader(env->callObjectMethod(this$, mids$[mid_getReader_cfe2828e], a0));
        }

        jboolean IndexWriter::hasDeletions() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasDeletions_54c6a16a]);
        }

        jboolean IndexWriter::hasPendingMerges() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasPendingMerges_54c6a16a]);
        }

        jboolean IndexWriter::hasUncommittedChanges() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasUncommittedChanges_54c6a16a]);
        }

        jboolean IndexWriter::isLocked(const ::org::apache::lucene::store::Directory & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticBooleanMethod(cls, mids$[mid_isLocked_2e261efe], a0.this$);
        }

        jint IndexWriter::maxDoc() const
        {
          return env->callIntMethod(this$, mids$[mid_maxDoc_54c6a179]);
        }

        void IndexWriter::maybeMerge() const
        {
          env->callVoidMethod(this$, mids$[mid_maybeMerge_54c6a166]);
        }

        void IndexWriter::merge(const ::org::apache::lucene::index::MergePolicy$OneMerge & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_merge_54badd95], a0.this$);
        }

        jint IndexWriter::numDeletedDocs(const ::org::apache::lucene::index::SegmentCommitInfo & a0) const
        {
          return env->callIntMethod(this$, mids$[mid_numDeletedDocs_6649cdeb], a0.this$);
        }

        jint IndexWriter::numDocs() const
        {
          return env->callIntMethod(this$, mids$[mid_numDocs_54c6a179]);
        }

        jint IndexWriter::numRamDocs() const
        {
          return env->callIntMethod(this$, mids$[mid_numRamDocs_54c6a179]);
        }

        void IndexWriter::prepareCommit() const
        {
          env->callVoidMethod(this$, mids$[mid_prepareCommit_54c6a166]);
        }

        jlong IndexWriter::ramBytesUsed() const
        {
          return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
        }

        jlong IndexWriter::ramSizeInBytes() const
        {
          return env->callLongMethod(this$, mids$[mid_ramSizeInBytes_54c6a17a]);
        }

        void IndexWriter::rollback() const
        {
          env->callVoidMethod(this$, mids$[mid_rollback_54c6a166]);
        }

        ::java::lang::String IndexWriter::segString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_segString_14c7b5c5]));
        }

        ::java::lang::String IndexWriter::segString(const ::java::lang::Iterable & a0) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_segString_e5fcb63c], a0.this$));
        }

        ::java::lang::String IndexWriter::segString(const ::org::apache::lucene::index::SegmentCommitInfo & a0) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_segString_edb3a3c3], a0.this$));
        }

        void IndexWriter::setCommitData(const ::java::util::Map & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setCommitData_4c9e2b1c], a0.this$);
        }

        jboolean IndexWriter::tryDeleteDocument(const ::org::apache::lucene::index::IndexReader & a0, jint a1) const
        {
          return env->callBooleanMethod(this$, mids$[mid_tryDeleteDocument_1e4306e9], a0.this$, a1);
        }

        void IndexWriter::unlock(const ::org::apache::lucene::store::Directory & a0)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_unlock_2e261ef2], a0.this$);
        }

        void IndexWriter::updateBinaryDocValue(const ::org::apache::lucene::index::Term & a0, const ::java::lang::String & a1, const ::org::apache::lucene::util::BytesRef & a2) const
        {
          env->callVoidMethod(this$, mids$[mid_updateBinaryDocValue_1aaa0ac7], a0.this$, a1.this$, a2.this$);
        }

        void IndexWriter::updateDocValues(const ::org::apache::lucene::index::Term & a0, const JArray< ::org::apache::lucene::document::Field > & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_updateDocValues_48345845], a0.this$, a1.this$);
        }

        void IndexWriter::updateDocument(const ::org::apache::lucene::index::Term & a0, const ::java::lang::Iterable & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_updateDocument_b5aef5e2], a0.this$, a1.this$);
        }

        void IndexWriter::updateDocument(const ::org::apache::lucene::index::Term & a0, const ::java::lang::Iterable & a1, const ::org::apache::lucene::analysis::Analyzer & a2) const
        {
          env->callVoidMethod(this$, mids$[mid_updateDocument_4d995db8], a0.this$, a1.this$, a2.this$);
        }

        void IndexWriter::updateDocuments(const ::org::apache::lucene::index::Term & a0, const ::java::lang::Iterable & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_updateDocuments_b5aef5e2], a0.this$, a1.this$);
        }

        void IndexWriter::updateDocuments(const ::org::apache::lucene::index::Term & a0, const ::java::lang::Iterable & a1, const ::org::apache::lucene::analysis::Analyzer & a2) const
        {
          env->callVoidMethod(this$, mids$[mid_updateDocuments_4d995db8], a0.this$, a1.this$, a2.this$);
        }

        void IndexWriter::updateNumericDocValue(const ::org::apache::lucene::index::Term & a0, const ::java::lang::String & a1, jlong a2) const
        {
          env->callVoidMethod(this$, mids$[mid_updateNumericDocValue_3866ef1c], a0.this$, a1.this$, a2);
        }

        void IndexWriter::waitForMerges() const
        {
          env->callVoidMethod(this$, mids$[mid_waitForMerges_54c6a166]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/index/IndexWriter$IndexReaderWarmer.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_IndexWriter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexWriter_instance_(PyTypeObject *type, PyObject *arg);
        static int t_IndexWriter_init_(t_IndexWriter *self, PyObject *args, PyObject *kwds);
        static PyObject *t_IndexWriter_abortMerges(t_IndexWriter *self);
        static PyObject *t_IndexWriter_addDocument(t_IndexWriter *self, PyObject *args);
        static PyObject *t_IndexWriter_addDocuments(t_IndexWriter *self, PyObject *args);
        static PyObject *t_IndexWriter_addIndexes(t_IndexWriter *self, PyObject *args);
        static PyObject *t_IndexWriter_close(t_IndexWriter *self, PyObject *args);
        static PyObject *t_IndexWriter_commit(t_IndexWriter *self);
        static PyObject *t_IndexWriter_deleteAll(t_IndexWriter *self);
        static PyObject *t_IndexWriter_deleteDocuments(t_IndexWriter *self, PyObject *args);
        static PyObject *t_IndexWriter_deleteUnusedFiles(t_IndexWriter *self);
        static PyObject *t_IndexWriter_forceMerge(t_IndexWriter *self, PyObject *args);
        static PyObject *t_IndexWriter_forceMergeDeletes(t_IndexWriter *self, PyObject *args);
        static PyObject *t_IndexWriter_getAnalyzer(t_IndexWriter *self);
        static PyObject *t_IndexWriter_getCommitData(t_IndexWriter *self);
        static PyObject *t_IndexWriter_getConfig(t_IndexWriter *self);
        static PyObject *t_IndexWriter_getDirectory(t_IndexWriter *self);
        static PyObject *t_IndexWriter_getMergingSegments(t_IndexWriter *self);
        static PyObject *t_IndexWriter_getNextMerge(t_IndexWriter *self);
        static PyObject *t_IndexWriter_getReader(t_IndexWriter *self, PyObject *args);
        static PyObject *t_IndexWriter_hasDeletions(t_IndexWriter *self);
        static PyObject *t_IndexWriter_hasPendingMerges(t_IndexWriter *self);
        static PyObject *t_IndexWriter_hasUncommittedChanges(t_IndexWriter *self);
        static PyObject *t_IndexWriter_isLocked(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexWriter_maxDoc(t_IndexWriter *self);
        static PyObject *t_IndexWriter_maybeMerge(t_IndexWriter *self);
        static PyObject *t_IndexWriter_merge(t_IndexWriter *self, PyObject *arg);
        static PyObject *t_IndexWriter_numDeletedDocs(t_IndexWriter *self, PyObject *arg);
        static PyObject *t_IndexWriter_numDocs(t_IndexWriter *self);
        static PyObject *t_IndexWriter_numRamDocs(t_IndexWriter *self);
        static PyObject *t_IndexWriter_prepareCommit(t_IndexWriter *self);
        static PyObject *t_IndexWriter_ramBytesUsed(t_IndexWriter *self);
        static PyObject *t_IndexWriter_ramSizeInBytes(t_IndexWriter *self);
        static PyObject *t_IndexWriter_rollback(t_IndexWriter *self);
        static PyObject *t_IndexWriter_segString(t_IndexWriter *self, PyObject *args);
        static PyObject *t_IndexWriter_setCommitData(t_IndexWriter *self, PyObject *arg);
        static PyObject *t_IndexWriter_tryDeleteDocument(t_IndexWriter *self, PyObject *args);
        static PyObject *t_IndexWriter_unlock(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexWriter_updateBinaryDocValue(t_IndexWriter *self, PyObject *args);
        static PyObject *t_IndexWriter_updateDocValues(t_IndexWriter *self, PyObject *args);
        static PyObject *t_IndexWriter_updateDocument(t_IndexWriter *self, PyObject *args);
        static PyObject *t_IndexWriter_updateDocuments(t_IndexWriter *self, PyObject *args);
        static PyObject *t_IndexWriter_updateNumericDocValue(t_IndexWriter *self, PyObject *args);
        static PyObject *t_IndexWriter_waitForMerges(t_IndexWriter *self);
        static PyObject *t_IndexWriter_get__analyzer(t_IndexWriter *self, void *data);
        static PyObject *t_IndexWriter_get__commitData(t_IndexWriter *self, void *data);
        static int t_IndexWriter_set__commitData(t_IndexWriter *self, PyObject *arg, void *data);
        static PyObject *t_IndexWriter_get__config(t_IndexWriter *self, void *data);
        static PyObject *t_IndexWriter_get__directory(t_IndexWriter *self, void *data);
        static PyObject *t_IndexWriter_get__mergingSegments(t_IndexWriter *self, void *data);
        static PyObject *t_IndexWriter_get__nextMerge(t_IndexWriter *self, void *data);
        static PyObject *t_IndexWriter_get__reader(t_IndexWriter *self, void *data);
        static PyGetSetDef t_IndexWriter__fields_[] = {
          DECLARE_GET_FIELD(t_IndexWriter, analyzer),
          DECLARE_GETSET_FIELD(t_IndexWriter, commitData),
          DECLARE_GET_FIELD(t_IndexWriter, config),
          DECLARE_GET_FIELD(t_IndexWriter, directory),
          DECLARE_GET_FIELD(t_IndexWriter, mergingSegments),
          DECLARE_GET_FIELD(t_IndexWriter, nextMerge),
          DECLARE_GET_FIELD(t_IndexWriter, reader),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_IndexWriter__methods_[] = {
          DECLARE_METHOD(t_IndexWriter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexWriter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexWriter, abortMerges, METH_NOARGS),
          DECLARE_METHOD(t_IndexWriter, addDocument, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriter, addDocuments, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriter, addIndexes, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriter, close, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriter, commit, METH_NOARGS),
          DECLARE_METHOD(t_IndexWriter, deleteAll, METH_NOARGS),
          DECLARE_METHOD(t_IndexWriter, deleteDocuments, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriter, deleteUnusedFiles, METH_NOARGS),
          DECLARE_METHOD(t_IndexWriter, forceMerge, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriter, forceMergeDeletes, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriter, getAnalyzer, METH_NOARGS),
          DECLARE_METHOD(t_IndexWriter, getCommitData, METH_NOARGS),
          DECLARE_METHOD(t_IndexWriter, getConfig, METH_NOARGS),
          DECLARE_METHOD(t_IndexWriter, getDirectory, METH_NOARGS),
          DECLARE_METHOD(t_IndexWriter, getMergingSegments, METH_NOARGS),
          DECLARE_METHOD(t_IndexWriter, getNextMerge, METH_NOARGS),
          DECLARE_METHOD(t_IndexWriter, getReader, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriter, hasDeletions, METH_NOARGS),
          DECLARE_METHOD(t_IndexWriter, hasPendingMerges, METH_NOARGS),
          DECLARE_METHOD(t_IndexWriter, hasUncommittedChanges, METH_NOARGS),
          DECLARE_METHOD(t_IndexWriter, isLocked, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexWriter, maxDoc, METH_NOARGS),
          DECLARE_METHOD(t_IndexWriter, maybeMerge, METH_NOARGS),
          DECLARE_METHOD(t_IndexWriter, merge, METH_O),
          DECLARE_METHOD(t_IndexWriter, numDeletedDocs, METH_O),
          DECLARE_METHOD(t_IndexWriter, numDocs, METH_NOARGS),
          DECLARE_METHOD(t_IndexWriter, numRamDocs, METH_NOARGS),
          DECLARE_METHOD(t_IndexWriter, prepareCommit, METH_NOARGS),
          DECLARE_METHOD(t_IndexWriter, ramBytesUsed, METH_NOARGS),
          DECLARE_METHOD(t_IndexWriter, ramSizeInBytes, METH_NOARGS),
          DECLARE_METHOD(t_IndexWriter, rollback, METH_NOARGS),
          DECLARE_METHOD(t_IndexWriter, segString, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriter, setCommitData, METH_O),
          DECLARE_METHOD(t_IndexWriter, tryDeleteDocument, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriter, unlock, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexWriter, updateBinaryDocValue, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriter, updateDocValues, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriter, updateDocument, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriter, updateDocuments, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriter, updateNumericDocValue, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriter, waitForMerges, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(IndexWriter, t_IndexWriter, ::java::lang::Object, IndexWriter, t_IndexWriter_init_, 0, 0, t_IndexWriter__fields_, 0, 0);

        void t_IndexWriter::install(PyObject *module)
        {
          installType(&PY_TYPE(IndexWriter), module, "IndexWriter", 0);
          PyDict_SetItemString(PY_TYPE(IndexWriter).tp_dict, "IndexReaderWarmer", make_descriptor(&PY_TYPE(IndexWriter$IndexReaderWarmer)));
        }

        void t_IndexWriter::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(IndexWriter).tp_dict, "class_", make_descriptor(IndexWriter::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(IndexWriter).tp_dict, "wrapfn_", make_descriptor(t_IndexWriter::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(IndexWriter).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(IndexWriter::initializeClass);
          PyDict_SetItemString(PY_TYPE(IndexWriter).tp_dict, "MAX_DOCS", make_descriptor(IndexWriter::MAX_DOCS));
          PyDict_SetItemString(PY_TYPE(IndexWriter).tp_dict, "MAX_TERM_LENGTH", make_descriptor(IndexWriter::MAX_TERM_LENGTH));
          PyDict_SetItemString(PY_TYPE(IndexWriter).tp_dict, "SOURCE", make_descriptor(j2p(*IndexWriter::SOURCE)));
          PyDict_SetItemString(PY_TYPE(IndexWriter).tp_dict, "SOURCE_ADDINDEXES_READERS", make_descriptor(j2p(*IndexWriter::SOURCE_ADDINDEXES_READERS)));
          PyDict_SetItemString(PY_TYPE(IndexWriter).tp_dict, "SOURCE_FLUSH", make_descriptor(j2p(*IndexWriter::SOURCE_FLUSH)));
          PyDict_SetItemString(PY_TYPE(IndexWriter).tp_dict, "SOURCE_MERGE", make_descriptor(j2p(*IndexWriter::SOURCE_MERGE)));
          PyDict_SetItemString(PY_TYPE(IndexWriter).tp_dict, "WRITE_LOCK_NAME", make_descriptor(j2p(*IndexWriter::WRITE_LOCK_NAME)));
        }

        static PyObject *t_IndexWriter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IndexWriter::initializeClass, 1)))
            return NULL;
          return t_IndexWriter::wrap_Object(IndexWriter(((t_IndexWriter *) arg)->object.this$));
        }
        static PyObject *t_IndexWriter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IndexWriter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_IndexWriter_init_(t_IndexWriter *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::store::Directory a0((jobject) NULL);
          ::org::apache::lucene::index::IndexWriterConfig a1((jobject) NULL);
          IndexWriter object((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::IndexWriterConfig::initializeClass, &a0, &a1))
          {
            INT_CALL(object = IndexWriter(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_IndexWriter_abortMerges(t_IndexWriter *self)
        {
          OBJ_CALL(self->object.abortMerges());
          Py_RETURN_NONE;
        }

        static PyObject *t_IndexWriter_addDocument(t_IndexWriter *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::lang::Iterable a0((jobject) NULL);
              PyTypeObject **p0;

              if (!parseArgs(args, "K", ::java::lang::Iterable::initializeClass, &a0, &p0, ::java::lang::t_Iterable::parameters_))
              {
                OBJ_CALL(self->object.addDocument(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 2:
            {
              ::java::lang::Iterable a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::analysis::Analyzer a1((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::lang::Iterable::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &p0, ::java::lang::t_Iterable::parameters_, &a1))
              {
                OBJ_CALL(self->object.addDocument(a0, a1));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "addDocument", args);
          return NULL;
        }

        static PyObject *t_IndexWriter_addDocuments(t_IndexWriter *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::lang::Iterable a0((jobject) NULL);
              PyTypeObject **p0;

              if (!parseArgs(args, "K", ::java::lang::Iterable::initializeClass, &a0, &p0, ::java::lang::t_Iterable::parameters_))
              {
                OBJ_CALL(self->object.addDocuments(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 2:
            {
              ::java::lang::Iterable a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::analysis::Analyzer a1((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::lang::Iterable::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &p0, ::java::lang::t_Iterable::parameters_, &a1))
              {
                OBJ_CALL(self->object.addDocuments(a0, a1));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "addDocuments", args);
          return NULL;
        }

        static PyObject *t_IndexWriter_addIndexes(t_IndexWriter *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              JArray< ::org::apache::lucene::index::IndexReader > a0((jobject) NULL);

              if (!parseArgs(args, "[k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
              {
                OBJ_CALL(self->object.addIndexes(a0));
                Py_RETURN_NONE;
              }
            }
            {
              JArray< ::org::apache::lucene::store::Directory > a0((jobject) NULL);

              if (!parseArgs(args, "[k", ::org::apache::lucene::store::Directory::initializeClass, &a0))
              {
                OBJ_CALL(self->object.addIndexes(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "addIndexes", args);
          return NULL;
        }

        static PyObject *t_IndexWriter_close(t_IndexWriter *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              OBJ_CALL(self->object.close());
              Py_RETURN_NONE;
            }
            break;
           case 1:
            {
              jboolean a0;

              if (!parseArgs(args, "Z", &a0))
              {
                OBJ_CALL(self->object.close(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "close", args);
          return NULL;
        }

        static PyObject *t_IndexWriter_commit(t_IndexWriter *self)
        {
          OBJ_CALL(self->object.commit());
          Py_RETURN_NONE;
        }

        static PyObject *t_IndexWriter_deleteAll(t_IndexWriter *self)
        {
          OBJ_CALL(self->object.deleteAll());
          Py_RETURN_NONE;
        }

        static PyObject *t_IndexWriter_deleteDocuments(t_IndexWriter *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              JArray< ::org::apache::lucene::index::Term > a0((jobject) NULL);

              if (!parseArgs(args, "[k", ::org::apache::lucene::index::Term::initializeClass, &a0))
              {
                OBJ_CALL(self->object.deleteDocuments(a0));
                Py_RETURN_NONE;
              }
            }
            {
              JArray< ::org::apache::lucene::search::Query > a0((jobject) NULL);

              if (!parseArgs(args, "[k", ::org::apache::lucene::search::Query::initializeClass, &a0))
              {
                OBJ_CALL(self->object.deleteDocuments(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "deleteDocuments", args);
          return NULL;
        }

        static PyObject *t_IndexWriter_deleteUnusedFiles(t_IndexWriter *self)
        {
          OBJ_CALL(self->object.deleteUnusedFiles());
          Py_RETURN_NONE;
        }

        static PyObject *t_IndexWriter_forceMerge(t_IndexWriter *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jint a0;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(self->object.forceMerge(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 2:
            {
              jint a0;
              jboolean a1;

              if (!parseArgs(args, "IZ", &a0, &a1))
              {
                OBJ_CALL(self->object.forceMerge(a0, a1));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "forceMerge", args);
          return NULL;
        }

        static PyObject *t_IndexWriter_forceMergeDeletes(t_IndexWriter *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              OBJ_CALL(self->object.forceMergeDeletes());
              Py_RETURN_NONE;
            }
            break;
           case 1:
            {
              jboolean a0;

              if (!parseArgs(args, "Z", &a0))
              {
                OBJ_CALL(self->object.forceMergeDeletes(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "forceMergeDeletes", args);
          return NULL;
        }

        static PyObject *t_IndexWriter_getAnalyzer(t_IndexWriter *self)
        {
          ::org::apache::lucene::analysis::Analyzer result((jobject) NULL);
          OBJ_CALL(result = self->object.getAnalyzer());
          return ::org::apache::lucene::analysis::t_Analyzer::wrap_Object(result);
        }

        static PyObject *t_IndexWriter_getCommitData(t_IndexWriter *self)
        {
          ::java::util::Map result((jobject) NULL);
          OBJ_CALL(result = self->object.getCommitData());
          return ::java::util::t_Map::wrap_Object(result, &::java::lang::PY_TYPE(String), &::java::lang::PY_TYPE(String));
        }

        static PyObject *t_IndexWriter_getConfig(t_IndexWriter *self)
        {
          ::org::apache::lucene::index::LiveIndexWriterConfig result((jobject) NULL);
          OBJ_CALL(result = self->object.getConfig());
          return ::org::apache::lucene::index::t_LiveIndexWriterConfig::wrap_Object(result);
        }

        static PyObject *t_IndexWriter_getDirectory(t_IndexWriter *self)
        {
          ::org::apache::lucene::store::Directory result((jobject) NULL);
          OBJ_CALL(result = self->object.getDirectory());
          return ::org::apache::lucene::store::t_Directory::wrap_Object(result);
        }

        static PyObject *t_IndexWriter_getMergingSegments(t_IndexWriter *self)
        {
          ::java::util::Collection result((jobject) NULL);
          OBJ_CALL(result = self->object.getMergingSegments());
          return ::java::util::t_Collection::wrap_Object(result, &::org::apache::lucene::index::PY_TYPE(SegmentCommitInfo));
        }

        static PyObject *t_IndexWriter_getNextMerge(t_IndexWriter *self)
        {
          ::org::apache::lucene::index::MergePolicy$OneMerge result((jobject) NULL);
          OBJ_CALL(result = self->object.getNextMerge());
          return ::org::apache::lucene::index::t_MergePolicy$OneMerge::wrap_Object(result);
        }

        static PyObject *t_IndexWriter_getReader(t_IndexWriter *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              ::org::apache::lucene::index::DirectoryReader result((jobject) NULL);
              OBJ_CALL(result = self->object.getReader());
              return ::org::apache::lucene::index::t_DirectoryReader::wrap_Object(result);
            }
            break;
           case 1:
            {
              jboolean a0;
              ::org::apache::lucene::index::DirectoryReader result((jobject) NULL);

              if (!parseArgs(args, "Z", &a0))
              {
                OBJ_CALL(result = self->object.getReader(a0));
                return ::org::apache::lucene::index::t_DirectoryReader::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "getReader", args);
          return NULL;
        }

        static PyObject *t_IndexWriter_hasDeletions(t_IndexWriter *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.hasDeletions());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_IndexWriter_hasPendingMerges(t_IndexWriter *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.hasPendingMerges());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_IndexWriter_hasUncommittedChanges(t_IndexWriter *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.hasUncommittedChanges());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_IndexWriter_isLocked(PyTypeObject *type, PyObject *arg)
        {
          ::org::apache::lucene::store::Directory a0((jobject) NULL);
          jboolean result;

          if (!parseArg(arg, "k", ::org::apache::lucene::store::Directory::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::IndexWriter::isLocked(a0));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError(type, "isLocked", arg);
          return NULL;
        }

        static PyObject *t_IndexWriter_maxDoc(t_IndexWriter *self)
        {
          jint result;
          OBJ_CALL(result = self->object.maxDoc());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_IndexWriter_maybeMerge(t_IndexWriter *self)
        {
          OBJ_CALL(self->object.maybeMerge());
          Py_RETURN_NONE;
        }

        static PyObject *t_IndexWriter_merge(t_IndexWriter *self, PyObject *arg)
        {
          ::org::apache::lucene::index::MergePolicy$OneMerge a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::MergePolicy$OneMerge::initializeClass, &a0))
          {
            OBJ_CALL(self->object.merge(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "merge", arg);
          return NULL;
        }

        static PyObject *t_IndexWriter_numDeletedDocs(t_IndexWriter *self, PyObject *arg)
        {
          ::org::apache::lucene::index::SegmentCommitInfo a0((jobject) NULL);
          jint result;

          if (!parseArg(arg, "k", ::org::apache::lucene::index::SegmentCommitInfo::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.numDeletedDocs(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "numDeletedDocs", arg);
          return NULL;
        }

        static PyObject *t_IndexWriter_numDocs(t_IndexWriter *self)
        {
          jint result;
          OBJ_CALL(result = self->object.numDocs());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_IndexWriter_numRamDocs(t_IndexWriter *self)
        {
          jint result;
          OBJ_CALL(result = self->object.numRamDocs());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_IndexWriter_prepareCommit(t_IndexWriter *self)
        {
          OBJ_CALL(self->object.prepareCommit());
          Py_RETURN_NONE;
        }

        static PyObject *t_IndexWriter_ramBytesUsed(t_IndexWriter *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.ramBytesUsed());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_IndexWriter_ramSizeInBytes(t_IndexWriter *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.ramSizeInBytes());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_IndexWriter_rollback(t_IndexWriter *self)
        {
          OBJ_CALL(self->object.rollback());
          Py_RETURN_NONE;
        }

        static PyObject *t_IndexWriter_segString(t_IndexWriter *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.segString());
              return j2p(result);
            }
            break;
           case 1:
            {
              ::java::lang::Iterable a0((jobject) NULL);
              PyTypeObject **p0;
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "K", ::java::lang::Iterable::initializeClass, &a0, &p0, ::java::lang::t_Iterable::parameters_))
              {
                OBJ_CALL(result = self->object.segString(a0));
                return j2p(result);
              }
            }
            {
              ::org::apache::lucene::index::SegmentCommitInfo a0((jobject) NULL);
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::index::SegmentCommitInfo::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.segString(a0));
                return j2p(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "segString", args);
          return NULL;
        }

        static PyObject *t_IndexWriter_setCommitData(t_IndexWriter *self, PyObject *arg)
        {
          ::java::util::Map a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArg(arg, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
          {
            OBJ_CALL(self->object.setCommitData(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setCommitData", arg);
          return NULL;
        }

        static PyObject *t_IndexWriter_tryDeleteDocument(t_IndexWriter *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          jint a1;
          jboolean result;

          if (!parseArgs(args, "kI", ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.tryDeleteDocument(a0, a1));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError((PyObject *) self, "tryDeleteDocument", args);
          return NULL;
        }

        static PyObject *t_IndexWriter_unlock(PyTypeObject *type, PyObject *arg)
        {
          ::org::apache::lucene::store::Directory a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::store::Directory::initializeClass, &a0))
          {
            OBJ_CALL(::org::apache::lucene::index::IndexWriter::unlock(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "unlock", arg);
          return NULL;
        }

        static PyObject *t_IndexWriter_updateBinaryDocValue(t_IndexWriter *self, PyObject *args)
        {
          ::org::apache::lucene::index::Term a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::org::apache::lucene::util::BytesRef a2((jobject) NULL);

          if (!parseArgs(args, "ksk", ::org::apache::lucene::index::Term::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.updateBinaryDocValue(a0, a1, a2));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "updateBinaryDocValue", args);
          return NULL;
        }

        static PyObject *t_IndexWriter_updateDocValues(t_IndexWriter *self, PyObject *args)
        {
          ::org::apache::lucene::index::Term a0((jobject) NULL);
          JArray< ::org::apache::lucene::document::Field > a1((jobject) NULL);

          if (!parseArgs(args, "k[k", ::org::apache::lucene::index::Term::initializeClass, ::org::apache::lucene::document::Field::initializeClass, &a0, &a1))
          {
            OBJ_CALL(self->object.updateDocValues(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "updateDocValues", args);
          return NULL;
        }

        static PyObject *t_IndexWriter_updateDocument(t_IndexWriter *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::org::apache::lucene::index::Term a0((jobject) NULL);
              ::java::lang::Iterable a1((jobject) NULL);
              PyTypeObject **p1;

              if (!parseArgs(args, "kK", ::org::apache::lucene::index::Term::initializeClass, ::java::lang::Iterable::initializeClass, &a0, &a1, &p1, ::java::lang::t_Iterable::parameters_))
              {
                OBJ_CALL(self->object.updateDocument(a0, a1));
                Py_RETURN_NONE;
              }
            }
            break;
           case 3:
            {
              ::org::apache::lucene::index::Term a0((jobject) NULL);
              ::java::lang::Iterable a1((jobject) NULL);
              PyTypeObject **p1;
              ::org::apache::lucene::analysis::Analyzer a2((jobject) NULL);

              if (!parseArgs(args, "kKk", ::org::apache::lucene::index::Term::initializeClass, ::java::lang::Iterable::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1, &p1, ::java::lang::t_Iterable::parameters_, &a2))
              {
                OBJ_CALL(self->object.updateDocument(a0, a1, a2));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "updateDocument", args);
          return NULL;
        }

        static PyObject *t_IndexWriter_updateDocuments(t_IndexWriter *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::org::apache::lucene::index::Term a0((jobject) NULL);
              ::java::lang::Iterable a1((jobject) NULL);
              PyTypeObject **p1;

              if (!parseArgs(args, "kK", ::org::apache::lucene::index::Term::initializeClass, ::java::lang::Iterable::initializeClass, &a0, &a1, &p1, ::java::lang::t_Iterable::parameters_))
              {
                OBJ_CALL(self->object.updateDocuments(a0, a1));
                Py_RETURN_NONE;
              }
            }
            break;
           case 3:
            {
              ::org::apache::lucene::index::Term a0((jobject) NULL);
              ::java::lang::Iterable a1((jobject) NULL);
              PyTypeObject **p1;
              ::org::apache::lucene::analysis::Analyzer a2((jobject) NULL);

              if (!parseArgs(args, "kKk", ::org::apache::lucene::index::Term::initializeClass, ::java::lang::Iterable::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1, &p1, ::java::lang::t_Iterable::parameters_, &a2))
              {
                OBJ_CALL(self->object.updateDocuments(a0, a1, a2));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "updateDocuments", args);
          return NULL;
        }

        static PyObject *t_IndexWriter_updateNumericDocValue(t_IndexWriter *self, PyObject *args)
        {
          ::org::apache::lucene::index::Term a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          jlong a2;

          if (!parseArgs(args, "ksJ", ::org::apache::lucene::index::Term::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.updateNumericDocValue(a0, a1, a2));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "updateNumericDocValue", args);
          return NULL;
        }

        static PyObject *t_IndexWriter_waitForMerges(t_IndexWriter *self)
        {
          OBJ_CALL(self->object.waitForMerges());
          Py_RETURN_NONE;
        }

        static PyObject *t_IndexWriter_get__analyzer(t_IndexWriter *self, void *data)
        {
          ::org::apache::lucene::analysis::Analyzer value((jobject) NULL);
          OBJ_CALL(value = self->object.getAnalyzer());
          return ::org::apache::lucene::analysis::t_Analyzer::wrap_Object(value);
        }

        static PyObject *t_IndexWriter_get__commitData(t_IndexWriter *self, void *data)
        {
          ::java::util::Map value((jobject) NULL);
          OBJ_CALL(value = self->object.getCommitData());
          return ::java::util::t_Map::wrap_Object(value);
        }
        static int t_IndexWriter_set__commitData(t_IndexWriter *self, PyObject *arg, void *data)
        {
          {
            ::java::util::Map value((jobject) NULL);
            if (!parseArg(arg, "k", ::java::util::Map::initializeClass, &value))
            {
              INT_CALL(self->object.setCommitData(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "commitData", arg);
          return -1;
        }

        static PyObject *t_IndexWriter_get__config(t_IndexWriter *self, void *data)
        {
          ::org::apache::lucene::index::LiveIndexWriterConfig value((jobject) NULL);
          OBJ_CALL(value = self->object.getConfig());
          return ::org::apache::lucene::index::t_LiveIndexWriterConfig::wrap_Object(value);
        }

        static PyObject *t_IndexWriter_get__directory(t_IndexWriter *self, void *data)
        {
          ::org::apache::lucene::store::Directory value((jobject) NULL);
          OBJ_CALL(value = self->object.getDirectory());
          return ::org::apache::lucene::store::t_Directory::wrap_Object(value);
        }

        static PyObject *t_IndexWriter_get__mergingSegments(t_IndexWriter *self, void *data)
        {
          ::java::util::Collection value((jobject) NULL);
          OBJ_CALL(value = self->object.getMergingSegments());
          return ::java::util::t_Collection::wrap_Object(value);
        }

        static PyObject *t_IndexWriter_get__nextMerge(t_IndexWriter *self, void *data)
        {
          ::org::apache::lucene::index::MergePolicy$OneMerge value((jobject) NULL);
          OBJ_CALL(value = self->object.getNextMerge());
          return ::org::apache::lucene::index::t_MergePolicy$OneMerge::wrap_Object(value);
        }

        static PyObject *t_IndexWriter_get__reader(t_IndexWriter *self, void *data)
        {
          ::org::apache::lucene::index::DirectoryReader value((jobject) NULL);
          OBJ_CALL(value = self->object.getReader());
          return ::org::apache::lucene::index::t_DirectoryReader::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/PackedLongDocValuesField.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *PackedLongDocValuesField::class$ = NULL;
        jmethodID *PackedLongDocValuesField::mids$ = NULL;
        bool PackedLongDocValuesField::live$ = false;

        jclass PackedLongDocValuesField::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/PackedLongDocValuesField");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_4372eed5] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;J)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PackedLongDocValuesField::PackedLongDocValuesField(const ::java::lang::String & a0, jlong a1) : ::org::apache::lucene::document::NumericDocValuesField(env->newObject(initializeClass, &mids$, mid_init$_4372eed5, a0.this$, a1)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_PackedLongDocValuesField_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PackedLongDocValuesField_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PackedLongDocValuesField_init_(t_PackedLongDocValuesField *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_PackedLongDocValuesField__methods_[] = {
          DECLARE_METHOD(t_PackedLongDocValuesField, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PackedLongDocValuesField, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PackedLongDocValuesField, t_PackedLongDocValuesField, ::org::apache::lucene::document::NumericDocValuesField, PackedLongDocValuesField, t_PackedLongDocValuesField_init_, 0, 0, 0, 0, 0);

        void t_PackedLongDocValuesField::install(PyObject *module)
        {
          installType(&PY_TYPE(PackedLongDocValuesField), module, "PackedLongDocValuesField", 0);
        }

        void t_PackedLongDocValuesField::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PackedLongDocValuesField).tp_dict, "class_", make_descriptor(PackedLongDocValuesField::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PackedLongDocValuesField).tp_dict, "wrapfn_", make_descriptor(t_PackedLongDocValuesField::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PackedLongDocValuesField).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_PackedLongDocValuesField_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PackedLongDocValuesField::initializeClass, 1)))
            return NULL;
          return t_PackedLongDocValuesField::wrap_Object(PackedLongDocValuesField(((t_PackedLongDocValuesField *) arg)->object.this$));
        }
        static PyObject *t_PackedLongDocValuesField_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PackedLongDocValuesField::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PackedLongDocValuesField_init_(t_PackedLongDocValuesField *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::String a0((jobject) NULL);
          jlong a1;
          PackedLongDocValuesField object((jobject) NULL);

          if (!parseArgs(args, "sJ", &a0, &a1))
          {
            INT_CALL(object = PackedLongDocValuesField(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/payloads/IntegerEncoder.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace payloads {

          ::java::lang::Class *IntegerEncoder::class$ = NULL;
          jmethodID *IntegerEncoder::mids$ = NULL;
          bool IntegerEncoder::live$ = false;

          jclass IntegerEncoder::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/payloads/IntegerEncoder");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_encode_871544e1] = env->getMethodID(cls, "encode", "([CII)Lorg/apache/lucene/util/BytesRef;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          IntegerEncoder::IntegerEncoder() : ::org::apache::lucene::analysis::payloads::AbstractEncoder(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::util::BytesRef IntegerEncoder::encode(const JArray< jchar > & a0, jint a1, jint a2) const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_encode_871544e1], a0.this$, a1, a2));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace payloads {
          static PyObject *t_IntegerEncoder_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IntegerEncoder_instance_(PyTypeObject *type, PyObject *arg);
          static int t_IntegerEncoder_init_(t_IntegerEncoder *self, PyObject *args, PyObject *kwds);
          static PyObject *t_IntegerEncoder_encode(t_IntegerEncoder *self, PyObject *args);

          static PyMethodDef t_IntegerEncoder__methods_[] = {
            DECLARE_METHOD(t_IntegerEncoder, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IntegerEncoder, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IntegerEncoder, encode, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(IntegerEncoder, t_IntegerEncoder, ::org::apache::lucene::analysis::payloads::AbstractEncoder, IntegerEncoder, t_IntegerEncoder_init_, 0, 0, 0, 0, 0);

          void t_IntegerEncoder::install(PyObject *module)
          {
            installType(&PY_TYPE(IntegerEncoder), module, "IntegerEncoder", 0);
          }

          void t_IntegerEncoder::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(IntegerEncoder).tp_dict, "class_", make_descriptor(IntegerEncoder::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(IntegerEncoder).tp_dict, "wrapfn_", make_descriptor(t_IntegerEncoder::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(IntegerEncoder).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_IntegerEncoder_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, IntegerEncoder::initializeClass, 1)))
              return NULL;
            return t_IntegerEncoder::wrap_Object(IntegerEncoder(((t_IntegerEncoder *) arg)->object.this$));
          }
          static PyObject *t_IntegerEncoder_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, IntegerEncoder::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_IntegerEncoder_init_(t_IntegerEncoder *self, PyObject *args, PyObject *kwds)
          {
            IntegerEncoder object((jobject) NULL);

            INT_CALL(object = IntegerEncoder());
            self->object = object;

            return 0;
          }

          static PyObject *t_IntegerEncoder_encode(t_IntegerEncoder *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint a2;
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);

            if (!parseArgs(args, "[CII", &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.encode(a0, a1, a2));
              return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(IntegerEncoder), (PyObject *) self, "encode", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/pylucene/analysis/PythonCharTokenizer.h"
#include "java/io/Reader.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/Throwable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace analysis {

        ::java::lang::Class *PythonCharTokenizer::class$ = NULL;
        jmethodID *PythonCharTokenizer::mids$ = NULL;
        bool PythonCharTokenizer::live$ = false;

        jclass PythonCharTokenizer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/pylucene/analysis/PythonCharTokenizer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_7997a391] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Ljava/io/Reader;)V");
            mids$[mid_finalize_54c6a166] = env->getMethodID(cls, "finalize", "()V");
            mids$[mid_isTokenChar_39c7bd30] = env->getMethodID(cls, "isTokenChar", "(I)Z");
            mids$[mid_normalize_39c7bd23] = env->getMethodID(cls, "normalize", "(I)I");
            mids$[mid_pythonDecRef_54c6a166] = env->getMethodID(cls, "pythonDecRef", "()V");
            mids$[mid_pythonExtension_54c6a17a] = env->getMethodID(cls, "pythonExtension", "()J");
            mids$[mid_pythonExtension_0ee6df2f] = env->getMethodID(cls, "pythonExtension", "(J)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PythonCharTokenizer::PythonCharTokenizer(const ::org::apache::lucene::util::Version & a0, const ::java::io::Reader & a1) : ::org::apache::lucene::analysis::util::CharTokenizer(env->newObject(initializeClass, &mids$, mid_init$_7997a391, a0.this$, a1.this$)) {}

        void PythonCharTokenizer::finalize() const
        {
          env->callVoidMethod(this$, mids$[mid_finalize_54c6a166]);
        }

        jint PythonCharTokenizer::normalize(jint a0) const
        {
          return env->callNonvirtualIntMethod(this$, (jclass) ::org::apache::lucene::analysis::util::CharTokenizer::class$->this$, ::org::apache::lucene::analysis::util::CharTokenizer::mids$[::org::apache::lucene::analysis::util::CharTokenizer::mid_normalize_39c7bd23], a0);
        }

        jlong PythonCharTokenizer::pythonExtension() const
        {
          return env->callLongMethod(this$, mids$[mid_pythonExtension_54c6a17a]);
        }

        void PythonCharTokenizer::pythonExtension(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_pythonExtension_0ee6df2f], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace analysis {
        static PyObject *t_PythonCharTokenizer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PythonCharTokenizer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PythonCharTokenizer_init_(t_PythonCharTokenizer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PythonCharTokenizer_finalize(t_PythonCharTokenizer *self);
        static PyObject *t_PythonCharTokenizer_normalize(t_PythonCharTokenizer *self, PyObject *arg);
        static PyObject *t_PythonCharTokenizer_pythonExtension(t_PythonCharTokenizer *self, PyObject *args);
        static jboolean JNICALL t_PythonCharTokenizer_isTokenChar0(JNIEnv *jenv, jobject jobj, jint a0);
        static jint JNICALL t_PythonCharTokenizer_normalize1(JNIEnv *jenv, jobject jobj, jint a0);
        static void JNICALL t_PythonCharTokenizer_pythonDecRef2(JNIEnv *jenv, jobject jobj);
        static PyObject *t_PythonCharTokenizer_get__self(t_PythonCharTokenizer *self, void *data);
        static PyGetSetDef t_PythonCharTokenizer__fields_[] = {
          DECLARE_GET_FIELD(t_PythonCharTokenizer, self),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PythonCharTokenizer__methods_[] = {
          DECLARE_METHOD(t_PythonCharTokenizer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonCharTokenizer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonCharTokenizer, finalize, METH_NOARGS),
          DECLARE_METHOD(t_PythonCharTokenizer, normalize, METH_O),
          DECLARE_METHOD(t_PythonCharTokenizer, pythonExtension, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PythonCharTokenizer, t_PythonCharTokenizer, ::org::apache::lucene::analysis::util::CharTokenizer, PythonCharTokenizer, t_PythonCharTokenizer_init_, 0, 0, t_PythonCharTokenizer__fields_, 0, 0);

        void t_PythonCharTokenizer::install(PyObject *module)
        {
          installType(&PY_TYPE(PythonCharTokenizer), module, "PythonCharTokenizer", 1);
        }

        void t_PythonCharTokenizer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PythonCharTokenizer).tp_dict, "class_", make_descriptor(PythonCharTokenizer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PythonCharTokenizer).tp_dict, "wrapfn_", make_descriptor(t_PythonCharTokenizer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PythonCharTokenizer).tp_dict, "boxfn_", make_descriptor(boxObject));
          jclass cls = env->getClass(PythonCharTokenizer::initializeClass);
          JNINativeMethod methods[] = {
            { "isTokenChar", "(I)Z", (void *) t_PythonCharTokenizer_isTokenChar0 },
            { "normalize", "(I)I", (void *) t_PythonCharTokenizer_normalize1 },
            { "pythonDecRef", "()V", (void *) t_PythonCharTokenizer_pythonDecRef2 },
          };
          env->registerNatives(cls, methods, 3);
        }

        static PyObject *t_PythonCharTokenizer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PythonCharTokenizer::initializeClass, 1)))
            return NULL;
          return t_PythonCharTokenizer::wrap_Object(PythonCharTokenizer(((t_PythonCharTokenizer *) arg)->object.this$));
        }
        static PyObject *t_PythonCharTokenizer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PythonCharTokenizer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PythonCharTokenizer_init_(t_PythonCharTokenizer *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::util::Version a0((jobject) NULL);
          ::java::io::Reader a1((jobject) NULL);
          PythonCharTokenizer object((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::util::Version::initializeClass, ::java::io::Reader::initializeClass, &a0, &a1))
          {
            INT_CALL(object = PythonCharTokenizer(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          Py_INCREF((PyObject *) self);
          self->object.pythonExtension((jlong) (Py_intptr_t) (void *) self);

          return 0;
        }

        static PyObject *t_PythonCharTokenizer_finalize(t_PythonCharTokenizer *self)
        {
          OBJ_CALL(self->object.finalize());
          Py_RETURN_NONE;
        }

        static PyObject *t_PythonCharTokenizer_normalize(t_PythonCharTokenizer *self, PyObject *arg)
        {
          jint a0;
          jint result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.normalize(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "normalize", arg);
          return NULL;
        }

        static PyObject *t_PythonCharTokenizer_pythonExtension(t_PythonCharTokenizer *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              jlong result;
              OBJ_CALL(result = self->object.pythonExtension());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }
            break;
           case 1:
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.pythonExtension(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "pythonExtension", args);
          return NULL;
        }

        static jboolean JNICALL t_PythonCharTokenizer_isTokenChar0(JNIEnv *jenv, jobject jobj, jint a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonCharTokenizer::mids$[PythonCharTokenizer::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jboolean value;
          PyObject *result = PyObject_CallMethod(obj, "isTokenChar", "i", (int) a0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "Z", &value))
          {
            throwTypeError("isTokenChar", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jboolean) 0;
        }

        static jint JNICALL t_PythonCharTokenizer_normalize1(JNIEnv *jenv, jobject jobj, jint a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonCharTokenizer::mids$[PythonCharTokenizer::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jint value;
          PyObject *result = PyObject_CallMethod(obj, "normalize", "i", (int) a0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "I", &value))
          {
            throwTypeError("normalize", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jint) 0;
        }

        static void JNICALL t_PythonCharTokenizer_pythonDecRef2(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonCharTokenizer::mids$[PythonCharTokenizer::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            jenv->CallVoidMethod(jobj, PythonCharTokenizer::mids$[PythonCharTokenizer::mid_pythonExtension_0ee6df2f], (jlong) 0);
            env->finalizeObject(jenv, obj);
          }
        }

        static PyObject *t_PythonCharTokenizer_get__self(t_PythonCharTokenizer *self, void *data)
        {
          jlong ptr;
          OBJ_CALL(ptr = self->object.pythonExtension());
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            Py_INCREF(obj);
            return obj;
          }
          else
            Py_RETURN_NONE;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/xml/builders/SpanNotBuilder.h"
#include "org/apache/lucene/search/spans/SpanQuery.h"
#include "org/apache/lucene/queryparser/xml/builders/SpanQueryBuilder.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {

            ::java::lang::Class *SpanNotBuilder::class$ = NULL;
            jmethodID *SpanNotBuilder::mids$ = NULL;
            bool SpanNotBuilder::live$ = false;

            jclass SpanNotBuilder::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/xml/builders/SpanNotBuilder");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_d9ca31a9] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/xml/builders/SpanQueryBuilder;)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            SpanNotBuilder::SpanNotBuilder(const ::org::apache::lucene::queryparser::xml::builders::SpanQueryBuilder & a0) : ::org::apache::lucene::queryparser::xml::builders::SpanBuilderBase(env->newObject(initializeClass, &mids$, mid_init$_d9ca31a9, a0.this$)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {
            static PyObject *t_SpanNotBuilder_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_SpanNotBuilder_instance_(PyTypeObject *type, PyObject *arg);
            static int t_SpanNotBuilder_init_(t_SpanNotBuilder *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_SpanNotBuilder__methods_[] = {
              DECLARE_METHOD(t_SpanNotBuilder, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SpanNotBuilder, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(SpanNotBuilder, t_SpanNotBuilder, ::org::apache::lucene::queryparser::xml::builders::SpanBuilderBase, SpanNotBuilder, t_SpanNotBuilder_init_, 0, 0, 0, 0, 0);

            void t_SpanNotBuilder::install(PyObject *module)
            {
              installType(&PY_TYPE(SpanNotBuilder), module, "SpanNotBuilder", 0);
            }

            void t_SpanNotBuilder::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(SpanNotBuilder).tp_dict, "class_", make_descriptor(SpanNotBuilder::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(SpanNotBuilder).tp_dict, "wrapfn_", make_descriptor(t_SpanNotBuilder::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(SpanNotBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_SpanNotBuilder_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, SpanNotBuilder::initializeClass, 1)))
                return NULL;
              return t_SpanNotBuilder::wrap_Object(SpanNotBuilder(((t_SpanNotBuilder *) arg)->object.this$));
            }
            static PyObject *t_SpanNotBuilder_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, SpanNotBuilder::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_SpanNotBuilder_init_(t_SpanNotBuilder *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::queryparser::xml::builders::SpanQueryBuilder a0((jobject) NULL);
              SpanNotBuilder object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::xml::builders::SpanQueryBuilder::initializeClass, &a0))
              {
                INT_CALL(object = SpanNotBuilder(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/NoDeletionPolicy.h"
#include "org/apache/lucene/index/IndexCommit.h"
#include "java/util/List.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *NoDeletionPolicy::class$ = NULL;
        jmethodID *NoDeletionPolicy::mids$ = NULL;
        bool NoDeletionPolicy::live$ = false;
        ::org::apache::lucene::index::IndexDeletionPolicy *NoDeletionPolicy::INSTANCE = NULL;

        jclass NoDeletionPolicy::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/NoDeletionPolicy");

            mids$ = new jmethodID[max_mid];
            mids$[mid_clone_a18376c3] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/index/IndexDeletionPolicy;");
            mids$[mid_onCommit_1fde8fc3] = env->getMethodID(cls, "onCommit", "(Ljava/util/List;)V");
            mids$[mid_onInit_1fde8fc3] = env->getMethodID(cls, "onInit", "(Ljava/util/List;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            INSTANCE = new ::org::apache::lucene::index::IndexDeletionPolicy(env->getStaticObjectField(cls, "INSTANCE", "Lorg/apache/lucene/index/IndexDeletionPolicy;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::index::IndexDeletionPolicy NoDeletionPolicy::clone() const
        {
          return ::org::apache::lucene::index::IndexDeletionPolicy(env->callObjectMethod(this$, mids$[mid_clone_a18376c3]));
        }

        void NoDeletionPolicy::onCommit(const ::java::util::List & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_onCommit_1fde8fc3], a0.this$);
        }

        void NoDeletionPolicy::onInit(const ::java::util::List & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_onInit_1fde8fc3], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_NoDeletionPolicy_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NoDeletionPolicy_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NoDeletionPolicy_clone(t_NoDeletionPolicy *self);
        static PyObject *t_NoDeletionPolicy_onCommit(t_NoDeletionPolicy *self, PyObject *args);
        static PyObject *t_NoDeletionPolicy_onInit(t_NoDeletionPolicy *self, PyObject *args);

        static PyMethodDef t_NoDeletionPolicy__methods_[] = {
          DECLARE_METHOD(t_NoDeletionPolicy, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NoDeletionPolicy, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NoDeletionPolicy, clone, METH_NOARGS),
          DECLARE_METHOD(t_NoDeletionPolicy, onCommit, METH_VARARGS),
          DECLARE_METHOD(t_NoDeletionPolicy, onInit, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(NoDeletionPolicy, t_NoDeletionPolicy, ::org::apache::lucene::index::IndexDeletionPolicy, NoDeletionPolicy, abstract_init, 0, 0, 0, 0, 0);

        void t_NoDeletionPolicy::install(PyObject *module)
        {
          installType(&PY_TYPE(NoDeletionPolicy), module, "NoDeletionPolicy", 0);
        }

        void t_NoDeletionPolicy::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(NoDeletionPolicy).tp_dict, "class_", make_descriptor(NoDeletionPolicy::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(NoDeletionPolicy).tp_dict, "wrapfn_", make_descriptor(t_NoDeletionPolicy::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(NoDeletionPolicy).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(NoDeletionPolicy::initializeClass);
          PyDict_SetItemString(PY_TYPE(NoDeletionPolicy).tp_dict, "INSTANCE", make_descriptor(::org::apache::lucene::index::t_IndexDeletionPolicy::wrap_Object(*NoDeletionPolicy::INSTANCE)));
        }

        static PyObject *t_NoDeletionPolicy_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, NoDeletionPolicy::initializeClass, 1)))
            return NULL;
          return t_NoDeletionPolicy::wrap_Object(NoDeletionPolicy(((t_NoDeletionPolicy *) arg)->object.this$));
        }
        static PyObject *t_NoDeletionPolicy_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, NoDeletionPolicy::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_NoDeletionPolicy_clone(t_NoDeletionPolicy *self)
        {
          ::org::apache::lucene::index::IndexDeletionPolicy result((jobject) NULL);
          OBJ_CALL(result = self->object.clone());
          return ::org::apache::lucene::index::t_IndexDeletionPolicy::wrap_Object(result);
        }

        static PyObject *t_NoDeletionPolicy_onCommit(t_NoDeletionPolicy *self, PyObject *args)
        {
          ::java::util::List a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArgs(args, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
          {
            OBJ_CALL(self->object.onCommit(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(NoDeletionPolicy), (PyObject *) self, "onCommit", args, 2);
        }

        static PyObject *t_NoDeletionPolicy_onInit(t_NoDeletionPolicy *self, PyObject *args)
        {
          ::java::util::List a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArgs(args, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
          {
            OBJ_CALL(self->object.onInit(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(NoDeletionPolicy), (PyObject *) self, "onInit", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/tartarus/snowball/SnowballProgram.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace tartarus {
    namespace snowball {

      ::java::lang::Class *SnowballProgram::class$ = NULL;
      jmethodID *SnowballProgram::mids$ = NULL;
      bool SnowballProgram::live$ = false;

      jclass SnowballProgram::initializeClass(bool getOnly)
      {
        if (getOnly)
          return (jclass) (live$ ? class$->this$ : NULL);
        if (class$ == NULL)
        {
          jclass cls = (jclass) env->findClass("org/tartarus/snowball/SnowballProgram");

          mids$ = new jmethodID[max_mid];
          mids$[mid_getCurrent_14c7b5c5] = env->getMethodID(cls, "getCurrent", "()Ljava/lang/String;");
          mids$[mid_getCurrentBuffer_dab10e7f] = env->getMethodID(cls, "getCurrentBuffer", "()[C");
          mids$[mid_getCurrentBufferLength_54c6a179] = env->getMethodID(cls, "getCurrentBufferLength", "()I");
          mids$[mid_setCurrent_5fdc3f48] = env->getMethodID(cls, "setCurrent", "(Ljava/lang/String;)V");
          mids$[mid_setCurrent_ec6430f4] = env->getMethodID(cls, "setCurrent", "([CI)V");
          mids$[mid_stem_54c6a16a] = env->getMethodID(cls, "stem", "()Z");
          mids$[mid_insert_cb918b82] = env->getMethodID(cls, "insert", "(IILjava/lang/CharSequence;)V");
          mids$[mid_eq_v_a8afc646] = env->getMethodID(cls, "eq_v", "(Ljava/lang/CharSequence;)Z");
          mids$[mid_in_range_b_d8d154aa] = env->getMethodID(cls, "in_range_b", "(II)Z");
          mids$[mid_out_range_d8d154aa] = env->getMethodID(cls, "out_range", "(II)Z");
          mids$[mid_out_range_b_d8d154aa] = env->getMethodID(cls, "out_range_b", "(II)Z");
          mids$[mid_eq_s_b_9145fa84] = env->getMethodID(cls, "eq_s_b", "(ILjava/lang/CharSequence;)Z");
          mids$[mid_eq_v_b_a8afc646] = env->getMethodID(cls, "eq_v_b", "(Ljava/lang/CharSequence;)Z");
          mids$[mid_out_grouping_b_6f0bb35a] = env->getMethodID(cls, "out_grouping_b", "([CII)Z");
          mids$[mid_eq_s_9145fa84] = env->getMethodID(cls, "eq_s", "(ILjava/lang/CharSequence;)Z");
          mids$[mid_in_range_d8d154aa] = env->getMethodID(cls, "in_range", "(II)Z");
          mids$[mid_find_among_0795632a] = env->getMethodID(cls, "find_among", "([Lorg/tartarus/snowball/Among;I)I");
          mids$[mid_replace_s_cb918b9d] = env->getMethodID(cls, "replace_s", "(IILjava/lang/CharSequence;)I");
          mids$[mid_slice_check_54c6a166] = env->getMethodID(cls, "slice_check", "()V");
          mids$[mid_slice_to_468cbe57] = env->getMethodID(cls, "slice_to", "(Ljava/lang/StringBuilder;)Ljava/lang/StringBuilder;");
          mids$[mid_assign_to_468cbe57] = env->getMethodID(cls, "assign_to", "(Ljava/lang/StringBuilder;)Ljava/lang/StringBuilder;");
          mids$[mid_copy_from_cbe15af1] = env->getMethodID(cls, "copy_from", "(Lorg/tartarus/snowball/SnowballProgram;)V");
          mids$[mid_in_grouping_6f0bb35a] = env->getMethodID(cls, "in_grouping", "([CII)Z");
          mids$[mid_out_grouping_6f0bb35a] = env->getMethodID(cls, "out_grouping", "([CII)Z");
          mids$[mid_find_among_b_0795632a] = env->getMethodID(cls, "find_among_b", "([Lorg/tartarus/snowball/Among;I)I");
          mids$[mid_slice_del_54c6a166] = env->getMethodID(cls, "slice_del", "()V");
          mids$[mid_in_grouping_b_6f0bb35a] = env->getMethodID(cls, "in_grouping_b", "([CII)Z");
          mids$[mid_slice_from_a8afc64a] = env->getMethodID(cls, "slice_from", "(Ljava/lang/CharSequence;)V");

          class$ = (::java::lang::Class *) new JObject(cls);
          live$ = true;
        }
        return (jclass) class$->this$;
      }

      ::java::lang::String SnowballProgram::getCurrent() const
      {
        return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getCurrent_14c7b5c5]));
      }

      JArray< jchar > SnowballProgram::getCurrentBuffer() const
      {
        return JArray< jchar >(env->callObjectMethod(this$, mids$[mid_getCurrentBuffer_dab10e7f]));
      }

      jint SnowballProgram::getCurrentBufferLength() const
      {
        return env->callIntMethod(this$, mids$[mid_getCurrentBufferLength_54c6a179]);
      }

      void SnowballProgram::setCurrent(const ::java::lang::String & a0) const
      {
        env->callVoidMethod(this$, mids$[mid_setCurrent_5fdc3f48], a0.this$);
      }

      void SnowballProgram::setCurrent(const JArray< jchar > & a0, jint a1) const
      {
        env->callVoidMethod(this$, mids$[mid_setCurrent_ec6430f4], a0.this$, a1);
      }

      jboolean SnowballProgram::stem() const
      {
        return env->callBooleanMethod(this$, mids$[mid_stem_54c6a16a]);
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      static PyObject *t_SnowballProgram_cast_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_SnowballProgram_instance_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_SnowballProgram_getCurrent(t_SnowballProgram *self);
      static PyObject *t_SnowballProgram_getCurrentBuffer(t_SnowballProgram *self);
      static PyObject *t_SnowballProgram_getCurrentBufferLength(t_SnowballProgram *self);
      static PyObject *t_SnowballProgram_setCurrent(t_SnowballProgram *self, PyObject *args);
      static PyObject *t_SnowballProgram_stem(t_SnowballProgram *self);
      static PyObject *t_SnowballProgram_get__current(t_SnowballProgram *self, void *data);
      static int t_SnowballProgram_set__current(t_SnowballProgram *self, PyObject *arg, void *data);
      static PyObject *t_SnowballProgram_get__currentBuffer(t_SnowballProgram *self, void *data);
      static PyObject *t_SnowballProgram_get__currentBufferLength(t_SnowballProgram *self, void *data);
      static PyGetSetDef t_SnowballProgram__fields_[] = {
        DECLARE_GETSET_FIELD(t_SnowballProgram, current),
        DECLARE_GET_FIELD(t_SnowballProgram, currentBuffer),
        DECLARE_GET_FIELD(t_SnowballProgram, currentBufferLength),
        { NULL, NULL, NULL, NULL, NULL }
      };

      static PyMethodDef t_SnowballProgram__methods_[] = {
        DECLARE_METHOD(t_SnowballProgram, cast_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_SnowballProgram, instance_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_SnowballProgram, getCurrent, METH_NOARGS),
        DECLARE_METHOD(t_SnowballProgram, getCurrentBuffer, METH_NOARGS),
        DECLARE_METHOD(t_SnowballProgram, getCurrentBufferLength, METH_NOARGS),
        DECLARE_METHOD(t_SnowballProgram, setCurrent, METH_VARARGS),
        DECLARE_METHOD(t_SnowballProgram, stem, METH_NOARGS),
        { NULL, NULL, 0, NULL }
      };

      DECLARE_TYPE(SnowballProgram, t_SnowballProgram, ::java::lang::Object, SnowballProgram, abstract_init, 0, 0, t_SnowballProgram__fields_, 0, 0);

      void t_SnowballProgram::install(PyObject *module)
      {
        installType(&PY_TYPE(SnowballProgram), module, "SnowballProgram", 0);
      }

      void t_SnowballProgram::initialize(PyObject *module)
      {
        PyDict_SetItemString(PY_TYPE(SnowballProgram).tp_dict, "class_", make_descriptor(SnowballProgram::initializeClass, 1));
        PyDict_SetItemString(PY_TYPE(SnowballProgram).tp_dict, "wrapfn_", make_descriptor(t_SnowballProgram::wrap_jobject));
        PyDict_SetItemString(PY_TYPE(SnowballProgram).tp_dict, "boxfn_", make_descriptor(boxObject));
      }

      static PyObject *t_SnowballProgram_cast_(PyTypeObject *type, PyObject *arg)
      {
        if (!(arg = castCheck(arg, SnowballProgram::initializeClass, 1)))
          return NULL;
        return t_SnowballProgram::wrap_Object(SnowballProgram(((t_SnowballProgram *) arg)->object.this$));
      }
      static PyObject *t_SnowballProgram_instance_(PyTypeObject *type, PyObject *arg)
      {
        if (!castCheck(arg, SnowballProgram::initializeClass, 0))
          Py_RETURN_FALSE;
        Py_RETURN_TRUE;
      }

      static PyObject *t_SnowballProgram_getCurrent(t_SnowballProgram *self)
      {
        ::java::lang::String result((jobject) NULL);
        OBJ_CALL(result = self->object.getCurrent());
        return j2p(result);
      }

      static PyObject *t_SnowballProgram_getCurrentBuffer(t_SnowballProgram *self)
      {
        JArray< jchar > result((jobject) NULL);
        OBJ_CALL(result = self->object.getCurrentBuffer());
        return result.wrap();
      }

      static PyObject *t_SnowballProgram_getCurrentBufferLength(t_SnowballProgram *self)
      {
        jint result;
        OBJ_CALL(result = self->object.getCurrentBufferLength());
        return PyInt_FromLong((long) result);
      }

      static PyObject *t_SnowballProgram_setCurrent(t_SnowballProgram *self, PyObject *args)
      {
        switch (PyTuple_GET_SIZE(args)) {
         case 1:
          {
            ::java::lang::String a0((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(self->object.setCurrent(a0));
              Py_RETURN_NONE;
            }
          }
          break;
         case 2:
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(self->object.setCurrent(a0, a1));
              Py_RETURN_NONE;
            }
          }
        }

        PyErr_SetArgsError((PyObject *) self, "setCurrent", args);
        return NULL;
      }

      static PyObject *t_SnowballProgram_stem(t_SnowballProgram *self)
      {
        jboolean result;
        OBJ_CALL(result = self->object.stem());
        Py_RETURN_BOOL(result);
      }

      static PyObject *t_SnowballProgram_get__current(t_SnowballProgram *self, void *data)
      {
        ::java::lang::String value((jobject) NULL);
        OBJ_CALL(value = self->object.getCurrent());
        return j2p(value);
      }
      static int t_SnowballProgram_set__current(t_SnowballProgram *self, PyObject *arg, void *data)
      {
        {
          ::java::lang::String value((jobject) NULL);
          if (!parseArg(arg, "s", &value))
          {
            INT_CALL(self->object.setCurrent(value));
            return 0;
          }
        }
        PyErr_SetArgsError((PyObject *) self, "current", arg);
        return -1;
      }

      static PyObject *t_SnowballProgram_get__currentBuffer(t_SnowballProgram *self, void *data)
      {
        JArray< jchar > value((jobject) NULL);
        OBJ_CALL(value = self->object.getCurrentBuffer());
        return value.wrap();
      }

      static PyObject *t_SnowballProgram_get__currentBufferLength(t_SnowballProgram *self, void *data)
      {
        jint value;
        OBJ_CALL(value = self->object.getCurrentBufferLength());
        return PyInt_FromLong((long) value);
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spell/WordBreakSpellChecker.h"
#include "org/apache/lucene/search/spell/SuggestWord.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/spell/WordBreakSpellChecker$BreakSuggestionSortMethod.h"
#include "org/apache/lucene/search/spell/CombineSuggestion.h"
#include "org/apache/lucene/search/spell/SuggestMode.h"
#include "org/apache/lucene/index/Term.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {

          ::java::lang::Class *WordBreakSpellChecker::class$ = NULL;
          jmethodID *WordBreakSpellChecker::mids$ = NULL;
          bool WordBreakSpellChecker::live$ = false;
          ::org::apache::lucene::index::Term *WordBreakSpellChecker::SEPARATOR_TERM = NULL;

          jclass WordBreakSpellChecker::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spell/WordBreakSpellChecker");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_getMaxChanges_54c6a179] = env->getMethodID(cls, "getMaxChanges", "()I");
              mids$[mid_getMaxCombineWordLength_54c6a179] = env->getMethodID(cls, "getMaxCombineWordLength", "()I");
              mids$[mid_getMaxEvaluations_54c6a179] = env->getMethodID(cls, "getMaxEvaluations", "()I");
              mids$[mid_getMinBreakWordLength_54c6a179] = env->getMethodID(cls, "getMinBreakWordLength", "()I");
              mids$[mid_getMinSuggestionFrequency_54c6a179] = env->getMethodID(cls, "getMinSuggestionFrequency", "()I");
              mids$[mid_setMaxChanges_39c7bd3c] = env->getMethodID(cls, "setMaxChanges", "(I)V");
              mids$[mid_setMaxCombineWordLength_39c7bd3c] = env->getMethodID(cls, "setMaxCombineWordLength", "(I)V");
              mids$[mid_setMaxEvaluations_39c7bd3c] = env->getMethodID(cls, "setMaxEvaluations", "(I)V");
              mids$[mid_setMinBreakWordLength_39c7bd3c] = env->getMethodID(cls, "setMinBreakWordLength", "(I)V");
              mids$[mid_setMinSuggestionFrequency_39c7bd3c] = env->getMethodID(cls, "setMinSuggestionFrequency", "(I)V");
              mids$[mid_suggestWordBreaks_50deeffc] = env->getMethodID(cls, "suggestWordBreaks", "(Lorg/apache/lucene/index/Term;ILorg/apache/lucene/index/IndexReader;Lorg/apache/lucene/search/spell/SuggestMode;Lorg/apache/lucene/search/spell/WordBreakSpellChecker$BreakSuggestionSortMethod;)[[Lorg/apache/lucene/search/spell/SuggestWord;");
              mids$[mid_suggestWordCombinations_6d229e7f] = env->getMethodID(cls, "suggestWordCombinations", "([Lorg/apache/lucene/index/Term;ILorg/apache/lucene/index/IndexReader;Lorg/apache/lucene/search/spell/SuggestMode;)[Lorg/apache/lucene/search/spell/CombineSuggestion;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              SEPARATOR_TERM = new ::org::apache::lucene::index::Term(env->getStaticObjectField(cls, "SEPARATOR_TERM", "Lorg/apache/lucene/index/Term;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          WordBreakSpellChecker::WordBreakSpellChecker() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint WordBreakSpellChecker::getMaxChanges() const
          {
            return env->callIntMethod(this$, mids$[mid_getMaxChanges_54c6a179]);
          }

          jint WordBreakSpellChecker::getMaxCombineWordLength() const
          {
            return env->callIntMethod(this$, mids$[mid_getMaxCombineWordLength_54c6a179]);
          }

          jint WordBreakSpellChecker::getMaxEvaluations() const
          {
            return env->callIntMethod(this$, mids$[mid_getMaxEvaluations_54c6a179]);
          }

          jint WordBreakSpellChecker::getMinBreakWordLength() const
          {
            return env->callIntMethod(this$, mids$[mid_getMinBreakWordLength_54c6a179]);
          }

          jint WordBreakSpellChecker::getMinSuggestionFrequency() const
          {
            return env->callIntMethod(this$, mids$[mid_getMinSuggestionFrequency_54c6a179]);
          }

          void WordBreakSpellChecker::setMaxChanges(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMaxChanges_39c7bd3c], a0);
          }

          void WordBreakSpellChecker::setMaxCombineWordLength(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMaxCombineWordLength_39c7bd3c], a0);
          }

          void WordBreakSpellChecker::setMaxEvaluations(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMaxEvaluations_39c7bd3c], a0);
          }

          void WordBreakSpellChecker::setMinBreakWordLength(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMinBreakWordLength_39c7bd3c], a0);
          }

          void WordBreakSpellChecker::setMinSuggestionFrequency(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMinSuggestionFrequency_39c7bd3c], a0);
          }

          JArray< JArray< ::org::apache::lucene::search::spell::SuggestWord > > WordBreakSpellChecker::suggestWordBreaks(const ::org::apache::lucene::index::Term & a0, jint a1, const ::org::apache::lucene::index::IndexReader & a2, const ::org::apache::lucene::search::spell::SuggestMode & a3, const ::org::apache::lucene::search::spell::WordBreakSpellChecker$BreakSuggestionSortMethod & a4) const
          {
            return JArray< JArray< ::org::apache::lucene::search::spell::SuggestWord > >(env->callObjectMethod(this$, mids$[mid_suggestWordBreaks_50deeffc], a0.this$, a1, a2.this$, a3.this$, a4.this$));
          }

          JArray< ::org::apache::lucene::search::spell::CombineSuggestion > WordBreakSpellChecker::suggestWordCombinations(const JArray< ::org::apache::lucene::index::Term > & a0, jint a1, const ::org::apache::lucene::index::IndexReader & a2, const ::org::apache::lucene::search::spell::SuggestMode & a3) const
          {
            return JArray< ::org::apache::lucene::search::spell::CombineSuggestion >(env->callObjectMethod(this$, mids$[mid_suggestWordCombinations_6d229e7f], a0.this$, a1, a2.this$, a3.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {
          static PyObject *t_WordBreakSpellChecker_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_WordBreakSpellChecker_instance_(PyTypeObject *type, PyObject *arg);
          static int t_WordBreakSpellChecker_init_(t_WordBreakSpellChecker *self, PyObject *args, PyObject *kwds);
          static PyObject *t_WordBreakSpellChecker_getMaxChanges(t_WordBreakSpellChecker *self);
          static PyObject *t_WordBreakSpellChecker_getMaxCombineWordLength(t_WordBreakSpellChecker *self);
          static PyObject *t_WordBreakSpellChecker_getMaxEvaluations(t_WordBreakSpellChecker *self);
          static PyObject *t_WordBreakSpellChecker_getMinBreakWordLength(t_WordBreakSpellChecker *self);
          static PyObject *t_WordBreakSpellChecker_getMinSuggestionFrequency(t_WordBreakSpellChecker *self);
          static PyObject *t_WordBreakSpellChecker_setMaxChanges(t_WordBreakSpellChecker *self, PyObject *arg);
          static PyObject *t_WordBreakSpellChecker_setMaxCombineWordLength(t_WordBreakSpellChecker *self, PyObject *arg);
          static PyObject *t_WordBreakSpellChecker_setMaxEvaluations(t_WordBreakSpellChecker *self, PyObject *arg);
          static PyObject *t_WordBreakSpellChecker_setMinBreakWordLength(t_WordBreakSpellChecker *self, PyObject *arg);
          static PyObject *t_WordBreakSpellChecker_setMinSuggestionFrequency(t_WordBreakSpellChecker *self, PyObject *arg);
          static PyObject *t_WordBreakSpellChecker_suggestWordBreaks(t_WordBreakSpellChecker *self, PyObject *args);
          static PyObject *t_WordBreakSpellChecker_suggestWordCombinations(t_WordBreakSpellChecker *self, PyObject *args);
          static PyObject *t_WordBreakSpellChecker_get__maxChanges(t_WordBreakSpellChecker *self, void *data);
          static int t_WordBreakSpellChecker_set__maxChanges(t_WordBreakSpellChecker *self, PyObject *arg, void *data);
          static PyObject *t_WordBreakSpellChecker_get__maxCombineWordLength(t_WordBreakSpellChecker *self, void *data);
          static int t_WordBreakSpellChecker_set__maxCombineWordLength(t_WordBreakSpellChecker *self, PyObject *arg, void *data);
          static PyObject *t_WordBreakSpellChecker_get__maxEvaluations(t_WordBreakSpellChecker *self, void *data);
          static int t_WordBreakSpellChecker_set__maxEvaluations(t_WordBreakSpellChecker *self, PyObject *arg, void *data);
          static PyObject *t_WordBreakSpellChecker_get__minBreakWordLength(t_WordBreakSpellChecker *self, void *data);
          static int t_WordBreakSpellChecker_set__minBreakWordLength(t_WordBreakSpellChecker *self, PyObject *arg, void *data);
          static PyObject *t_WordBreakSpellChecker_get__minSuggestionFrequency(t_WordBreakSpellChecker *self, void *data);
          static int t_WordBreakSpellChecker_set__minSuggestionFrequency(t_WordBreakSpellChecker *self, PyObject *arg, void *data);
          static PyGetSetDef t_WordBreakSpellChecker__fields_[] = {
            DECLARE_GETSET_FIELD(t_WordBreakSpellChecker, maxChanges),
            DECLARE_GETSET_FIELD(t_WordBreakSpellChecker, maxCombineWordLength),
            DECLARE_GETSET_FIELD(t_WordBreakSpellChecker, maxEvaluations),
            DECLARE_GETSET_FIELD(t_WordBreakSpellChecker, minBreakWordLength),
            DECLARE_GETSET_FIELD(t_WordBreakSpellChecker, minSuggestionFrequency),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_WordBreakSpellChecker__methods_[] = {
            DECLARE_METHOD(t_WordBreakSpellChecker, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_WordBreakSpellChecker, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_WordBreakSpellChecker, getMaxChanges, METH_NOARGS),
            DECLARE_METHOD(t_WordBreakSpellChecker, getMaxCombineWordLength, METH_NOARGS),
            DECLARE_METHOD(t_WordBreakSpellChecker, getMaxEvaluations, METH_NOARGS),
            DECLARE_METHOD(t_WordBreakSpellChecker, getMinBreakWordLength, METH_NOARGS),
            DECLARE_METHOD(t_WordBreakSpellChecker, getMinSuggestionFrequency, METH_NOARGS),
            DECLARE_METHOD(t_WordBreakSpellChecker, setMaxChanges, METH_O),
            DECLARE_METHOD(t_WordBreakSpellChecker, setMaxCombineWordLength, METH_O),
            DECLARE_METHOD(t_WordBreakSpellChecker, setMaxEvaluations, METH_O),
            DECLARE_METHOD(t_WordBreakSpellChecker, setMinBreakWordLength, METH_O),
            DECLARE_METHOD(t_WordBreakSpellChecker, setMinSuggestionFrequency, METH_O),
            DECLARE_METHOD(t_WordBreakSpellChecker, suggestWordBreaks, METH_VARARGS),
            DECLARE_METHOD(t_WordBreakSpellChecker, suggestWordCombinations, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(WordBreakSpellChecker, t_WordBreakSpellChecker, ::java::lang::Object, WordBreakSpellChecker, t_WordBreakSpellChecker_init_, 0, 0, t_WordBreakSpellChecker__fields_, 0, 0);

          void t_WordBreakSpellChecker::install(PyObject *module)
          {
            installType(&PY_TYPE(WordBreakSpellChecker), module, "WordBreakSpellChecker", 0);
            PyDict_SetItemString(PY_TYPE(WordBreakSpellChecker).tp_dict, "BreakSuggestionSortMethod", make_descriptor(&PY_TYPE(WordBreakSpellChecker$BreakSuggestionSortMethod)));
          }

          void t_WordBreakSpellChecker::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(WordBreakSpellChecker).tp_dict, "class_", make_descriptor(WordBreakSpellChecker::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(WordBreakSpellChecker).tp_dict, "wrapfn_", make_descriptor(t_WordBreakSpellChecker::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(WordBreakSpellChecker).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(WordBreakSpellChecker::initializeClass);
            PyDict_SetItemString(PY_TYPE(WordBreakSpellChecker).tp_dict, "SEPARATOR_TERM", make_descriptor(::org::apache::lucene::index::t_Term::wrap_Object(*WordBreakSpellChecker::SEPARATOR_TERM)));
          }

          static PyObject *t_WordBreakSpellChecker_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, WordBreakSpellChecker::initializeClass, 1)))
              return NULL;
            return t_WordBreakSpellChecker::wrap_Object(WordBreakSpellChecker(((t_WordBreakSpellChecker *) arg)->object.this$));
          }
          static PyObject *t_WordBreakSpellChecker_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, WordBreakSpellChecker::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_WordBreakSpellChecker_init_(t_WordBreakSpellChecker *self, PyObject *args, PyObject *kwds)
          {
            WordBreakSpellChecker object((jobject) NULL);

            INT_CALL(object = WordBreakSpellChecker());
            self->object = object;

            return 0;
          }

          static PyObject *t_WordBreakSpellChecker_getMaxChanges(t_WordBreakSpellChecker *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getMaxChanges());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_WordBreakSpellChecker_getMaxCombineWordLength(t_WordBreakSpellChecker *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getMaxCombineWordLength());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_WordBreakSpellChecker_getMaxEvaluations(t_WordBreakSpellChecker *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getMaxEvaluations());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_WordBreakSpellChecker_getMinBreakWordLength(t_WordBreakSpellChecker *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getMinBreakWordLength());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_WordBreakSpellChecker_getMinSuggestionFrequency(t_WordBreakSpellChecker *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getMinSuggestionFrequency());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_WordBreakSpellChecker_setMaxChanges(t_WordBreakSpellChecker *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setMaxChanges(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMaxChanges", arg);
            return NULL;
          }

          static PyObject *t_WordBreakSpellChecker_setMaxCombineWordLength(t_WordBreakSpellChecker *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setMaxCombineWordLength(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMaxCombineWordLength", arg);
            return NULL;
          }

          static PyObject *t_WordBreakSpellChecker_setMaxEvaluations(t_WordBreakSpellChecker *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setMaxEvaluations(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMaxEvaluations", arg);
            return NULL;
          }

          static PyObject *t_WordBreakSpellChecker_setMinBreakWordLength(t_WordBreakSpellChecker *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setMinBreakWordLength(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMinBreakWordLength", arg);
            return NULL;
          }

          static PyObject *t_WordBreakSpellChecker_setMinSuggestionFrequency(t_WordBreakSpellChecker *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setMinSuggestionFrequency(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMinSuggestionFrequency", arg);
            return NULL;
          }

          static PyObject *t_WordBreakSpellChecker_suggestWordBreaks(t_WordBreakSpellChecker *self, PyObject *args)
          {
            ::org::apache::lucene::index::Term a0((jobject) NULL);
            jint a1;
            ::org::apache::lucene::index::IndexReader a2((jobject) NULL);
            ::org::apache::lucene::search::spell::SuggestMode a3((jobject) NULL);
            PyTypeObject **p3;
            ::org::apache::lucene::search::spell::WordBreakSpellChecker$BreakSuggestionSortMethod a4((jobject) NULL);
            PyTypeObject **p4;
            JArray< JArray< ::org::apache::lucene::search::spell::SuggestWord > > result((jobject) NULL);

            if (!parseArgs(args, "kIkKK", ::org::apache::lucene::index::Term::initializeClass, ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::search::spell::SuggestMode::initializeClass, ::org::apache::lucene::search::spell::WordBreakSpellChecker$BreakSuggestionSortMethod::initializeClass, &a0, &a1, &a2, &a3, &p3, ::org::apache::lucene::search::spell::t_SuggestMode::parameters_, &a4, &p4, ::org::apache::lucene::search::spell::t_WordBreakSpellChecker$BreakSuggestionSortMethod::parameters_))
            {
              OBJ_CALL(result = self->object.suggestWordBreaks(a0, a1, a2, a3, a4));
              return JArray<jobject>(result.this$).wrap(NULL);
            }

            PyErr_SetArgsError((PyObject *) self, "suggestWordBreaks", args);
            return NULL;
          }

          static PyObject *t_WordBreakSpellChecker_suggestWordCombinations(t_WordBreakSpellChecker *self, PyObject *args)
          {
            JArray< ::org::apache::lucene::index::Term > a0((jobject) NULL);
            jint a1;
            ::org::apache::lucene::index::IndexReader a2((jobject) NULL);
            ::org::apache::lucene::search::spell::SuggestMode a3((jobject) NULL);
            PyTypeObject **p3;
            JArray< ::org::apache::lucene::search::spell::CombineSuggestion > result((jobject) NULL);

            if (!parseArgs(args, "[kIkK", ::org::apache::lucene::index::Term::initializeClass, ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::search::spell::SuggestMode::initializeClass, &a0, &a1, &a2, &a3, &p3, ::org::apache::lucene::search::spell::t_SuggestMode::parameters_))
            {
              OBJ_CALL(result = self->object.suggestWordCombinations(a0, a1, a2, a3));
              return JArray<jobject>(result.this$).wrap(::org::apache::lucene::search::spell::t_CombineSuggestion::wrap_jobject);
            }

            PyErr_SetArgsError((PyObject *) self, "suggestWordCombinations", args);
            return NULL;
          }

          static PyObject *t_WordBreakSpellChecker_get__maxChanges(t_WordBreakSpellChecker *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getMaxChanges());
            return PyInt_FromLong((long) value);
          }
          static int t_WordBreakSpellChecker_set__maxChanges(t_WordBreakSpellChecker *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setMaxChanges(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "maxChanges", arg);
            return -1;
          }

          static PyObject *t_WordBreakSpellChecker_get__maxCombineWordLength(t_WordBreakSpellChecker *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getMaxCombineWordLength());
            return PyInt_FromLong((long) value);
          }
          static int t_WordBreakSpellChecker_set__maxCombineWordLength(t_WordBreakSpellChecker *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setMaxCombineWordLength(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "maxCombineWordLength", arg);
            return -1;
          }

          static PyObject *t_WordBreakSpellChecker_get__maxEvaluations(t_WordBreakSpellChecker *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getMaxEvaluations());
            return PyInt_FromLong((long) value);
          }
          static int t_WordBreakSpellChecker_set__maxEvaluations(t_WordBreakSpellChecker *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setMaxEvaluations(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "maxEvaluations", arg);
            return -1;
          }

          static PyObject *t_WordBreakSpellChecker_get__minBreakWordLength(t_WordBreakSpellChecker *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getMinBreakWordLength());
            return PyInt_FromLong((long) value);
          }
          static int t_WordBreakSpellChecker_set__minBreakWordLength(t_WordBreakSpellChecker *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setMinBreakWordLength(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "minBreakWordLength", arg);
            return -1;
          }

          static PyObject *t_WordBreakSpellChecker_get__minSuggestionFrequency(t_WordBreakSpellChecker *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getMinSuggestionFrequency());
            return PyInt_FromLong((long) value);
          }
          static int t_WordBreakSpellChecker_set__minSuggestionFrequency(t_WordBreakSpellChecker *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setMinSuggestionFrequency(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "minSuggestionFrequency", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/store/IndexOutput.h"
#include "org/apache/lucene/store/ChecksumIndexInput.h"
#include "org/apache/lucene/store/IndexInput.h"
#include "org/apache/lucene/store/Lock.h"
#include "java/io/Closeable.h"
#include "java/util/Collection.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/IOContext.h"
#include "org/apache/lucene/store/LockFactory.h"
#include "java/io/IOException.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *Directory::class$ = NULL;
        jmethodID *Directory::mids$ = NULL;
        bool Directory::live$ = false;

        jclass Directory::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/Directory");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_clearLock_5fdc3f48] = env->getMethodID(cls, "clearLock", "(Ljava/lang/String;)V");
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_copy_146bec62] = env->getMethodID(cls, "copy", "(Lorg/apache/lucene/store/Directory;Ljava/lang/String;Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)V");
            mids$[mid_createOutput_5ad5358d] = env->getMethodID(cls, "createOutput", "(Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/store/IndexOutput;");
            mids$[mid_deleteFile_5fdc3f48] = env->getMethodID(cls, "deleteFile", "(Ljava/lang/String;)V");
            mids$[mid_fileExists_5fdc3f44] = env->getMethodID(cls, "fileExists", "(Ljava/lang/String;)Z");
            mids$[mid_fileLength_5fdc3f54] = env->getMethodID(cls, "fileLength", "(Ljava/lang/String;)J");
            mids$[mid_getLockFactory_e4e9c36d] = env->getMethodID(cls, "getLockFactory", "()Lorg/apache/lucene/store/LockFactory;");
            mids$[mid_getLockID_14c7b5c5] = env->getMethodID(cls, "getLockID", "()Ljava/lang/String;");
            mids$[mid_listAll_2e6d5245] = env->getMethodID(cls, "listAll", "()[Ljava/lang/String;");
            mids$[mid_makeLock_f26bb9a8] = env->getMethodID(cls, "makeLock", "(Ljava/lang/String;)Lorg/apache/lucene/store/Lock;");
            mids$[mid_openChecksumInput_dab98306] = env->getMethodID(cls, "openChecksumInput", "(Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/store/ChecksumIndexInput;");
            mids$[mid_openInput_3e1b5375] = env->getMethodID(cls, "openInput", "(Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/store/IndexInput;");
            mids$[mid_setLockFactory_9892eb8c] = env->getMethodID(cls, "setLockFactory", "(Lorg/apache/lucene/store/LockFactory;)V");
            mids$[mid_sync_9bfb370d] = env->getMethodID(cls, "sync", "(Ljava/util/Collection;)V");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
            mids$[mid_ensureOpen_54c6a166] = env->getMethodID(cls, "ensureOpen", "()V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        Directory::Directory() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void Directory::clearLock(const ::java::lang::String & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_clearLock_5fdc3f48], a0.this$);
        }

        void Directory::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        void Directory::copy(const Directory & a0, const ::java::lang::String & a1, const ::java::lang::String & a2, const ::org::apache::lucene::store::IOContext & a3) const
        {
          env->callVoidMethod(this$, mids$[mid_copy_146bec62], a0.this$, a1.this$, a2.this$, a3.this$);
        }

        ::org::apache::lucene::store::IndexOutput Directory::createOutput(const ::java::lang::String & a0, const ::org::apache::lucene::store::IOContext & a1) const
        {
          return ::org::apache::lucene::store::IndexOutput(env->callObjectMethod(this$, mids$[mid_createOutput_5ad5358d], a0.this$, a1.this$));
        }

        void Directory::deleteFile(const ::java::lang::String & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_deleteFile_5fdc3f48], a0.this$);
        }

        jboolean Directory::fileExists(const ::java::lang::String & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_fileExists_5fdc3f44], a0.this$);
        }

        jlong Directory::fileLength(const ::java::lang::String & a0) const
        {
          return env->callLongMethod(this$, mids$[mid_fileLength_5fdc3f54], a0.this$);
        }

        ::org::apache::lucene::store::LockFactory Directory::getLockFactory() const
        {
          return ::org::apache::lucene::store::LockFactory(env->callObjectMethod(this$, mids$[mid_getLockFactory_e4e9c36d]));
        }

        ::java::lang::String Directory::getLockID() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getLockID_14c7b5c5]));
        }

        JArray< ::java::lang::String > Directory::listAll() const
        {
          return JArray< ::java::lang::String >(env->callObjectMethod(this$, mids$[mid_listAll_2e6d5245]));
        }

        ::org::apache::lucene::store::Lock Directory::makeLock(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::store::Lock(env->callObjectMethod(this$, mids$[mid_makeLock_f26bb9a8], a0.this$));
        }

        ::org::apache::lucene::store::ChecksumIndexInput Directory::openChecksumInput(const ::java::lang::String & a0, const ::org::apache::lucene::store::IOContext & a1) const
        {
          return ::org::apache::lucene::store::ChecksumIndexInput(env->callObjectMethod(this$, mids$[mid_openChecksumInput_dab98306], a0.this$, a1.this$));
        }

        ::org::apache::lucene::store::IndexInput Directory::openInput(const ::java::lang::String & a0, const ::org::apache::lucene::store::IOContext & a1) const
        {
          return ::org::apache::lucene::store::IndexInput(env->callObjectMethod(this$, mids$[mid_openInput_3e1b5375], a0.this$, a1.this$));
        }

        void Directory::setLockFactory(const ::org::apache::lucene::store::LockFactory & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setLockFactory_9892eb8c], a0.this$);
        }

        void Directory::sync(const ::java::util::Collection & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_sync_9bfb370d], a0.this$);
        }

        ::java::lang::String Directory::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_Directory_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Directory_instance_(PyTypeObject *type, PyObject *arg);
        static int t_Directory_init_(t_Directory *self, PyObject *args, PyObject *kwds);
        static PyObject *t_Directory_clearLock(t_Directory *self, PyObject *arg);
        static PyObject *t_Directory_close(t_Directory *self);
        static PyObject *t_Directory_copy(t_Directory *self, PyObject *args);
        static PyObject *t_Directory_createOutput(t_Directory *self, PyObject *args);
        static PyObject *t_Directory_deleteFile(t_Directory *self, PyObject *arg);
        static PyObject *t_Directory_fileExists(t_Directory *self, PyObject *arg);
        static PyObject *t_Directory_fileLength(t_Directory *self, PyObject *arg);
        static PyObject *t_Directory_getLockFactory(t_Directory *self);
        static PyObject *t_Directory_getLockID(t_Directory *self);
        static PyObject *t_Directory_listAll(t_Directory *self);
        static PyObject *t_Directory_makeLock(t_Directory *self, PyObject *arg);
        static PyObject *t_Directory_openChecksumInput(t_Directory *self, PyObject *args);
        static PyObject *t_Directory_openInput(t_Directory *self, PyObject *args);
        static PyObject *t_Directory_setLockFactory(t_Directory *self, PyObject *arg);
        static PyObject *t_Directory_sync(t_Directory *self, PyObject *arg);
        static PyObject *t_Directory_toString(t_Directory *self, PyObject *args);
        static PyObject *t_Directory_get__lockFactory(t_Directory *self, void *data);
        static int t_Directory_set__lockFactory(t_Directory *self, PyObject *arg, void *data);
        static PyObject *t_Directory_get__lockID(t_Directory *self, void *data);
        static PyGetSetDef t_Directory__fields_[] = {
          DECLARE_GETSET_FIELD(t_Directory, lockFactory),
          DECLARE_GET_FIELD(t_Directory, lockID),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_Directory__methods_[] = {
          DECLARE_METHOD(t_Directory, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Directory, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Directory, clearLock, METH_O),
          DECLARE_METHOD(t_Directory, close, METH_NOARGS),
          DECLARE_METHOD(t_Directory, copy, METH_VARARGS),
          DECLARE_METHOD(t_Directory, createOutput, METH_VARARGS),
          DECLARE_METHOD(t_Directory, deleteFile, METH_O),
          DECLARE_METHOD(t_Directory, fileExists, METH_O),
          DECLARE_METHOD(t_Directory, fileLength, METH_O),
          DECLARE_METHOD(t_Directory, getLockFactory, METH_NOARGS),
          DECLARE_METHOD(t_Directory, getLockID, METH_NOARGS),
          DECLARE_METHOD(t_Directory, listAll, METH_NOARGS),
          DECLARE_METHOD(t_Directory, makeLock, METH_O),
          DECLARE_METHOD(t_Directory, openChecksumInput, METH_VARARGS),
          DECLARE_METHOD(t_Directory, openInput, METH_VARARGS),
          DECLARE_METHOD(t_Directory, setLockFactory, METH_O),
          DECLARE_METHOD(t_Directory, sync, METH_O),
          DECLARE_METHOD(t_Directory, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Directory, t_Directory, ::java::lang::Object, Directory, t_Directory_init_, 0, 0, t_Directory__fields_, 0, 0);

        void t_Directory::install(PyObject *module)
        {
          installType(&PY_TYPE(Directory), module, "Directory", 0);
        }

        void t_Directory::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(Directory).tp_dict, "class_", make_descriptor(Directory::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(Directory).tp_dict, "wrapfn_", make_descriptor(t_Directory::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(Directory).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Directory_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Directory::initializeClass, 1)))
            return NULL;
          return t_Directory::wrap_Object(Directory(((t_Directory *) arg)->object.this$));
        }
        static PyObject *t_Directory_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Directory::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_Directory_init_(t_Directory *self, PyObject *args, PyObject *kwds)
        {
          Directory object((jobject) NULL);

          INT_CALL(object = Directory());
          self->object = object;

          return 0;
        }

        static PyObject *t_Directory_clearLock(t_Directory *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(self->object.clearLock(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "clearLock", arg);
          return NULL;
        }

        static PyObject *t_Directory_close(t_Directory *self)
        {
          OBJ_CALL(self->object.close());
          Py_RETURN_NONE;
        }

        static PyObject *t_Directory_copy(t_Directory *self, PyObject *args)
        {
          Directory a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::java::lang::String a2((jobject) NULL);
          ::org::apache::lucene::store::IOContext a3((jobject) NULL);

          if (!parseArgs(args, "kssk", Directory::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(self->object.copy(a0, a1, a2, a3));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "copy", args);
          return NULL;
        }

        static PyObject *t_Directory_createOutput(t_Directory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::store::IOContext a1((jobject) NULL);
          ::org::apache::lucene::store::IndexOutput result((jobject) NULL);

          if (!parseArgs(args, "sk", ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.createOutput(a0, a1));
            return ::org::apache::lucene::store::t_IndexOutput::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "createOutput", args);
          return NULL;
        }

        static PyObject *t_Directory_deleteFile(t_Directory *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(self->object.deleteFile(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "deleteFile", arg);
          return NULL;
        }

        static PyObject *t_Directory_fileExists(t_Directory *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          jboolean result;

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = self->object.fileExists(a0));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError((PyObject *) self, "fileExists", arg);
          return NULL;
        }

        static PyObject *t_Directory_fileLength(t_Directory *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          jlong result;

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = self->object.fileLength(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError((PyObject *) self, "fileLength", arg);
          return NULL;
        }

        static PyObject *t_Directory_getLockFactory(t_Directory *self)
        {
          ::org::apache::lucene::store::LockFactory result((jobject) NULL);
          OBJ_CALL(result = self->object.getLockFactory());
          return ::org::apache::lucene::store::t_LockFactory::wrap_Object(result);
        }

        static PyObject *t_Directory_getLockID(t_Directory *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.getLockID());
          return j2p(result);
        }

        static PyObject *t_Directory_listAll(t_Directory *self)
        {
          JArray< ::java::lang::String > result((jobject) NULL);
          OBJ_CALL(result = self->object.listAll());
          return JArray<jstring>(result.this$).wrap();
        }

        static PyObject *t_Directory_makeLock(t_Directory *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::store::Lock result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = self->object.makeLock(a0));
            return ::org::apache::lucene::store::t_Lock::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "makeLock", arg);
          return NULL;
        }

        static PyObject *t_Directory_openChecksumInput(t_Directory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::store::IOContext a1((jobject) NULL);
          ::org::apache::lucene::store::ChecksumIndexInput result((jobject) NULL);

          if (!parseArgs(args, "sk", ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.openChecksumInput(a0, a1));
            return ::org::apache::lucene::store::t_ChecksumIndexInput::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "openChecksumInput", args);
          return NULL;
        }

        static PyObject *t_Directory_openInput(t_Directory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::store::IOContext a1((jobject) NULL);
          ::org::apache::lucene::store::IndexInput result((jobject) NULL);

          if (!parseArgs(args, "sk", ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.openInput(a0, a1));
            return ::org::apache::lucene::store::t_IndexInput::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "openInput", args);
          return NULL;
        }

        static PyObject *t_Directory_setLockFactory(t_Directory *self, PyObject *arg)
        {
          ::org::apache::lucene::store::LockFactory a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::store::LockFactory::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setLockFactory(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setLockFactory", arg);
          return NULL;
        }

        static PyObject *t_Directory_sync(t_Directory *self, PyObject *arg)
        {
          ::java::util::Collection a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArg(arg, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
          {
            OBJ_CALL(self->object.sync(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "sync", arg);
          return NULL;
        }

        static PyObject *t_Directory_toString(t_Directory *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(Directory), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_Directory_get__lockFactory(t_Directory *self, void *data)
        {
          ::org::apache::lucene::store::LockFactory value((jobject) NULL);
          OBJ_CALL(value = self->object.getLockFactory());
          return ::org::apache::lucene::store::t_LockFactory::wrap_Object(value);
        }
        static int t_Directory_set__lockFactory(t_Directory *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::store::LockFactory value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::store::LockFactory::initializeClass, &value))
            {
              INT_CALL(self->object.setLockFactory(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "lockFactory", arg);
          return -1;
        }

        static PyObject *t_Directory_get__lockID(t_Directory *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object.getLockID());
          return j2p(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/util/CharArrayIterator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {

          ::java::lang::Class *CharArrayIterator::class$ = NULL;
          jmethodID *CharArrayIterator::mids$ = NULL;
          bool CharArrayIterator::live$ = false;
          jboolean CharArrayIterator::HAS_BUGGY_BREAKITERATORS = (jboolean) 0;

          jclass CharArrayIterator::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/util/CharArrayIterator");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_clone_18028ee5] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/analysis/util/CharArrayIterator;");
              mids$[mid_current_54c6a173] = env->getMethodID(cls, "current", "()C");
              mids$[mid_first_54c6a173] = env->getMethodID(cls, "first", "()C");
              mids$[mid_getBeginIndex_54c6a179] = env->getMethodID(cls, "getBeginIndex", "()I");
              mids$[mid_getEndIndex_54c6a179] = env->getMethodID(cls, "getEndIndex", "()I");
              mids$[mid_getIndex_54c6a179] = env->getMethodID(cls, "getIndex", "()I");
              mids$[mid_getLength_54c6a179] = env->getMethodID(cls, "getLength", "()I");
              mids$[mid_getStart_54c6a179] = env->getMethodID(cls, "getStart", "()I");
              mids$[mid_getText_dab10e7f] = env->getMethodID(cls, "getText", "()[C");
              mids$[mid_last_54c6a173] = env->getMethodID(cls, "last", "()C");
              mids$[mid_newSentenceInstance_18028ee5] = env->getStaticMethodID(cls, "newSentenceInstance", "()Lorg/apache/lucene/analysis/util/CharArrayIterator;");
              mids$[mid_newWordInstance_18028ee5] = env->getStaticMethodID(cls, "newWordInstance", "()Lorg/apache/lucene/analysis/util/CharArrayIterator;");
              mids$[mid_next_54c6a173] = env->getMethodID(cls, "next", "()C");
              mids$[mid_previous_54c6a173] = env->getMethodID(cls, "previous", "()C");
              mids$[mid_setIndex_39c7bd29] = env->getMethodID(cls, "setIndex", "(I)C");
              mids$[mid_setText_6f0bb356] = env->getMethodID(cls, "setText", "([CII)V");
              mids$[mid_jreBugWorkaround_87fd544f] = env->getMethodID(cls, "jreBugWorkaround", "(C)C");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              HAS_BUGGY_BREAKITERATORS = env->getStaticBooleanField(cls, "HAS_BUGGY_BREAKITERATORS");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CharArrayIterator::CharArrayIterator() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          CharArrayIterator CharArrayIterator::clone() const
          {
            return CharArrayIterator(env->callObjectMethod(this$, mids$[mid_clone_18028ee5]));
          }

          jchar CharArrayIterator::current() const
          {
            return env->callCharMethod(this$, mids$[mid_current_54c6a173]);
          }

          jchar CharArrayIterator::first() const
          {
            return env->callCharMethod(this$, mids$[mid_first_54c6a173]);
          }

          jint CharArrayIterator::getBeginIndex() const
          {
            return env->callIntMethod(this$, mids$[mid_getBeginIndex_54c6a179]);
          }

          jint CharArrayIterator::getEndIndex() const
          {
            return env->callIntMethod(this$, mids$[mid_getEndIndex_54c6a179]);
          }

          jint CharArrayIterator::getIndex() const
          {
            return env->callIntMethod(this$, mids$[mid_getIndex_54c6a179]);
          }

          jint CharArrayIterator::getLength() const
          {
            return env->callIntMethod(this$, mids$[mid_getLength_54c6a179]);
          }

          jint CharArrayIterator::getStart() const
          {
            return env->callIntMethod(this$, mids$[mid_getStart_54c6a179]);
          }

          JArray< jchar > CharArrayIterator::getText() const
          {
            return JArray< jchar >(env->callObjectMethod(this$, mids$[mid_getText_dab10e7f]));
          }

          jchar CharArrayIterator::last() const
          {
            return env->callCharMethod(this$, mids$[mid_last_54c6a173]);
          }

          CharArrayIterator CharArrayIterator::newSentenceInstance()
          {
            jclass cls = env->getClass(initializeClass);
            return CharArrayIterator(env->callStaticObjectMethod(cls, mids$[mid_newSentenceInstance_18028ee5]));
          }

          CharArrayIterator CharArrayIterator::newWordInstance()
          {
            jclass cls = env->getClass(initializeClass);
            return CharArrayIterator(env->callStaticObjectMethod(cls, mids$[mid_newWordInstance_18028ee5]));
          }

          jchar CharArrayIterator::next() const
          {
            return env->callCharMethod(this$, mids$[mid_next_54c6a173]);
          }

          jchar CharArrayIterator::previous() const
          {
            return env->callCharMethod(this$, mids$[mid_previous_54c6a173]);
          }

          jchar CharArrayIterator::setIndex(jint a0) const
          {
            return env->callCharMethod(this$, mids$[mid_setIndex_39c7bd29], a0);
          }

          void CharArrayIterator::setText(const JArray< jchar > & a0, jint a1, jint a2) const
          {
            env->callVoidMethod(this$, mids$[mid_setText_6f0bb356], a0.this$, a1, a2);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {
          static PyObject *t_CharArrayIterator_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CharArrayIterator_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CharArrayIterator_init_(t_CharArrayIterator *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CharArrayIterator_clone(t_CharArrayIterator *self);
          static PyObject *t_CharArrayIterator_current(t_CharArrayIterator *self);
          static PyObject *t_CharArrayIterator_first(t_CharArrayIterator *self);
          static PyObject *t_CharArrayIterator_getBeginIndex(t_CharArrayIterator *self);
          static PyObject *t_CharArrayIterator_getEndIndex(t_CharArrayIterator *self);
          static PyObject *t_CharArrayIterator_getIndex(t_CharArrayIterator *self);
          static PyObject *t_CharArrayIterator_getLength(t_CharArrayIterator *self);
          static PyObject *t_CharArrayIterator_getStart(t_CharArrayIterator *self);
          static PyObject *t_CharArrayIterator_getText(t_CharArrayIterator *self);
          static PyObject *t_CharArrayIterator_last(t_CharArrayIterator *self);
          static PyObject *t_CharArrayIterator_newSentenceInstance(PyTypeObject *type);
          static PyObject *t_CharArrayIterator_newWordInstance(PyTypeObject *type);
          static PyObject *t_CharArrayIterator_next(t_CharArrayIterator *self);
          static PyObject *t_CharArrayIterator_previous(t_CharArrayIterator *self);
          static PyObject *t_CharArrayIterator_setIndex(t_CharArrayIterator *self, PyObject *arg);
          static PyObject *t_CharArrayIterator_setText(t_CharArrayIterator *self, PyObject *args);
          static PyObject *t_CharArrayIterator_get__beginIndex(t_CharArrayIterator *self, void *data);
          static PyObject *t_CharArrayIterator_get__endIndex(t_CharArrayIterator *self, void *data);
          static PyObject *t_CharArrayIterator_get__index(t_CharArrayIterator *self, void *data);
          static int t_CharArrayIterator_set__index(t_CharArrayIterator *self, PyObject *arg, void *data);
          static PyObject *t_CharArrayIterator_get__length(t_CharArrayIterator *self, void *data);
          static PyObject *t_CharArrayIterator_get__start(t_CharArrayIterator *self, void *data);
          static PyObject *t_CharArrayIterator_get__text(t_CharArrayIterator *self, void *data);
          static PyGetSetDef t_CharArrayIterator__fields_[] = {
            DECLARE_GET_FIELD(t_CharArrayIterator, beginIndex),
            DECLARE_GET_FIELD(t_CharArrayIterator, endIndex),
            DECLARE_GETSET_FIELD(t_CharArrayIterator, index),
            DECLARE_GET_FIELD(t_CharArrayIterator, length),
            DECLARE_GET_FIELD(t_CharArrayIterator, start),
            DECLARE_GET_FIELD(t_CharArrayIterator, text),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_CharArrayIterator__methods_[] = {
            DECLARE_METHOD(t_CharArrayIterator, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CharArrayIterator, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CharArrayIterator, clone, METH_NOARGS),
            DECLARE_METHOD(t_CharArrayIterator, current, METH_NOARGS),
            DECLARE_METHOD(t_CharArrayIterator, first, METH_NOARGS),
            DECLARE_METHOD(t_CharArrayIterator, getBeginIndex, METH_NOARGS),
            DECLARE_METHOD(t_CharArrayIterator, getEndIndex, METH_NOARGS),
            DECLARE_METHOD(t_CharArrayIterator, getIndex, METH_NOARGS),
            DECLARE_METHOD(t_CharArrayIterator, getLength, METH_NOARGS),
            DECLARE_METHOD(t_CharArrayIterator, getStart, METH_NOARGS),
            DECLARE_METHOD(t_CharArrayIterator, getText, METH_NOARGS),
            DECLARE_METHOD(t_CharArrayIterator, last, METH_NOARGS),
            DECLARE_METHOD(t_CharArrayIterator, newSentenceInstance, METH_NOARGS | METH_CLASS),
            DECLARE_METHOD(t_CharArrayIterator, newWordInstance, METH_NOARGS | METH_CLASS),
            DECLARE_METHOD(t_CharArrayIterator, next, METH_NOARGS),
            DECLARE_METHOD(t_CharArrayIterator, previous, METH_NOARGS),
            DECLARE_METHOD(t_CharArrayIterator, setIndex, METH_O),
            DECLARE_METHOD(t_CharArrayIterator, setText, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CharArrayIterator, t_CharArrayIterator, ::java::lang::Object, CharArrayIterator, t_CharArrayIterator_init_, 0, 0, t_CharArrayIterator__fields_, 0, 0);

          void t_CharArrayIterator::install(PyObject *module)
          {
            installType(&PY_TYPE(CharArrayIterator), module, "CharArrayIterator", 0);
          }

          void t_CharArrayIterator::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CharArrayIterator).tp_dict, "class_", make_descriptor(CharArrayIterator::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CharArrayIterator).tp_dict, "wrapfn_", make_descriptor(t_CharArrayIterator::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CharArrayIterator).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(CharArrayIterator::initializeClass);
            PyDict_SetItemString(PY_TYPE(CharArrayIterator).tp_dict, "HAS_BUGGY_BREAKITERATORS", make_descriptor(CharArrayIterator::HAS_BUGGY_BREAKITERATORS));
          }

          static PyObject *t_CharArrayIterator_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CharArrayIterator::initializeClass, 1)))
              return NULL;
            return t_CharArrayIterator::wrap_Object(CharArrayIterator(((t_CharArrayIterator *) arg)->object.this$));
          }
          static PyObject *t_CharArrayIterator_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CharArrayIterator::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CharArrayIterator_init_(t_CharArrayIterator *self, PyObject *args, PyObject *kwds)
          {
            CharArrayIterator object((jobject) NULL);

            INT_CALL(object = CharArrayIterator());
            self->object = object;

            return 0;
          }

          static PyObject *t_CharArrayIterator_clone(t_CharArrayIterator *self)
          {
            CharArrayIterator result((jobject) NULL);
            OBJ_CALL(result = self->object.clone());
            return t_CharArrayIterator::wrap_Object(result);
          }

          static PyObject *t_CharArrayIterator_current(t_CharArrayIterator *self)
          {
            jchar result;
            OBJ_CALL(result = self->object.current());
            return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
          }

          static PyObject *t_CharArrayIterator_first(t_CharArrayIterator *self)
          {
            jchar result;
            OBJ_CALL(result = self->object.first());
            return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
          }

          static PyObject *t_CharArrayIterator_getBeginIndex(t_CharArrayIterator *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getBeginIndex());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_CharArrayIterator_getEndIndex(t_CharArrayIterator *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getEndIndex());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_CharArrayIterator_getIndex(t_CharArrayIterator *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getIndex());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_CharArrayIterator_getLength(t_CharArrayIterator *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getLength());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_CharArrayIterator_getStart(t_CharArrayIterator *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getStart());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_CharArrayIterator_getText(t_CharArrayIterator *self)
          {
            JArray< jchar > result((jobject) NULL);
            OBJ_CALL(result = self->object.getText());
            return result.wrap();
          }

          static PyObject *t_CharArrayIterator_last(t_CharArrayIterator *self)
          {
            jchar result;
            OBJ_CALL(result = self->object.last());
            return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
          }

          static PyObject *t_CharArrayIterator_newSentenceInstance(PyTypeObject *type)
          {
            CharArrayIterator result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::util::CharArrayIterator::newSentenceInstance());
            return t_CharArrayIterator::wrap_Object(result);
          }

          static PyObject *t_CharArrayIterator_newWordInstance(PyTypeObject *type)
          {
            CharArrayIterator result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::util::CharArrayIterator::newWordInstance());
            return t_CharArrayIterator::wrap_Object(result);
          }

          static PyObject *t_CharArrayIterator_next(t_CharArrayIterator *self)
          {
            jchar result;
            OBJ_CALL(result = self->object.next());
            return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
          }

          static PyObject *t_CharArrayIterator_previous(t_CharArrayIterator *self)
          {
            jchar result;
            OBJ_CALL(result = self->object.previous());
            return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
          }

          static PyObject *t_CharArrayIterator_setIndex(t_CharArrayIterator *self, PyObject *arg)
          {
            jint a0;
            jchar result;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.setIndex(a0));
              return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
            }

            PyErr_SetArgsError((PyObject *) self, "setIndex", arg);
            return NULL;
          }

          static PyObject *t_CharArrayIterator_setText(t_CharArrayIterator *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint a2;

            if (!parseArgs(args, "[CII", &a0, &a1, &a2))
            {
              OBJ_CALL(self->object.setText(a0, a1, a2));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setText", args);
            return NULL;
          }

          static PyObject *t_CharArrayIterator_get__beginIndex(t_CharArrayIterator *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getBeginIndex());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_CharArrayIterator_get__endIndex(t_CharArrayIterator *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getEndIndex());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_CharArrayIterator_get__index(t_CharArrayIterator *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getIndex());
            return PyInt_FromLong((long) value);
          }
          static int t_CharArrayIterator_set__index(t_CharArrayIterator *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setIndex(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "index", arg);
            return -1;
          }

          static PyObject *t_CharArrayIterator_get__length(t_CharArrayIterator *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getLength());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_CharArrayIterator_get__start(t_CharArrayIterator *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getStart());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_CharArrayIterator_get__text(t_CharArrayIterator *self, void *data)
          {
            JArray< jchar > value((jobject) NULL);
            OBJ_CALL(value = self->object.getText());
            return value.wrap();
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/vectorhighlight/FieldQuery$QueryPhraseMap.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/vectorhighlight/FieldTermStack$TermInfo.h"
#include "org/apache/lucene/search/vectorhighlight/FieldQuery.h"
#include "java/util/List.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {

          ::java::lang::Class *FieldQuery$QueryPhraseMap::class$ = NULL;
          jmethodID *FieldQuery$QueryPhraseMap::mids$ = NULL;
          bool FieldQuery$QueryPhraseMap::live$ = false;

          jclass FieldQuery$QueryPhraseMap::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/vectorhighlight/FieldQuery$QueryPhraseMap");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_d4060136] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/vectorhighlight/FieldQuery;)V");
              mids$[mid_getBoost_54c6a176] = env->getMethodID(cls, "getBoost", "()F");
              mids$[mid_getSlop_54c6a179] = env->getMethodID(cls, "getSlop", "()I");
              mids$[mid_getTermMap_1ad656ab] = env->getMethodID(cls, "getTermMap", "(Ljava/lang/String;)Lorg/apache/lucene/search/vectorhighlight/FieldQuery$QueryPhraseMap;");
              mids$[mid_getTermOrPhraseNumber_54c6a179] = env->getMethodID(cls, "getTermOrPhraseNumber", "()I");
              mids$[mid_isTerminal_54c6a16a] = env->getMethodID(cls, "isTerminal", "()Z");
              mids$[mid_isValidTermOrPhrase_1fde8fcf] = env->getMethodID(cls, "isValidTermOrPhrase", "(Ljava/util/List;)Z");
              mids$[mid_searchPhrase_94f40592] = env->getMethodID(cls, "searchPhrase", "(Ljava/util/List;)Lorg/apache/lucene/search/vectorhighlight/FieldQuery$QueryPhraseMap;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FieldQuery$QueryPhraseMap::FieldQuery$QueryPhraseMap(const ::org::apache::lucene::search::vectorhighlight::FieldQuery & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_d4060136, a0.this$)) {}

          jfloat FieldQuery$QueryPhraseMap::getBoost() const
          {
            return env->callFloatMethod(this$, mids$[mid_getBoost_54c6a176]);
          }

          jint FieldQuery$QueryPhraseMap::getSlop() const
          {
            return env->callIntMethod(this$, mids$[mid_getSlop_54c6a179]);
          }

          FieldQuery$QueryPhraseMap FieldQuery$QueryPhraseMap::getTermMap(const ::java::lang::String & a0) const
          {
            return FieldQuery$QueryPhraseMap(env->callObjectMethod(this$, mids$[mid_getTermMap_1ad656ab], a0.this$));
          }

          jint FieldQuery$QueryPhraseMap::getTermOrPhraseNumber() const
          {
            return env->callIntMethod(this$, mids$[mid_getTermOrPhraseNumber_54c6a179]);
          }

          jboolean FieldQuery$QueryPhraseMap::isTerminal() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isTerminal_54c6a16a]);
          }

          jboolean FieldQuery$QueryPhraseMap::isValidTermOrPhrase(const ::java::util::List & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_isValidTermOrPhrase_1fde8fcf], a0.this$);
          }

          FieldQuery$QueryPhraseMap FieldQuery$QueryPhraseMap::searchPhrase(const ::java::util::List & a0) const
          {
            return FieldQuery$QueryPhraseMap(env->callObjectMethod(this$, mids$[mid_searchPhrase_94f40592], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {
          static PyObject *t_FieldQuery$QueryPhraseMap_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FieldQuery$QueryPhraseMap_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FieldQuery$QueryPhraseMap_init_(t_FieldQuery$QueryPhraseMap *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FieldQuery$QueryPhraseMap_getBoost(t_FieldQuery$QueryPhraseMap *self);
          static PyObject *t_FieldQuery$QueryPhraseMap_getSlop(t_FieldQuery$QueryPhraseMap *self);
          static PyObject *t_FieldQuery$QueryPhraseMap_getTermMap(t_FieldQuery$QueryPhraseMap *self, PyObject *arg);
          static PyObject *t_FieldQuery$QueryPhraseMap_getTermOrPhraseNumber(t_FieldQuery$QueryPhraseMap *self);
          static PyObject *t_FieldQuery$QueryPhraseMap_isTerminal(t_FieldQuery$QueryPhraseMap *self);
          static PyObject *t_FieldQuery$QueryPhraseMap_isValidTermOrPhrase(t_FieldQuery$QueryPhraseMap *self, PyObject *arg);
          static PyObject *t_FieldQuery$QueryPhraseMap_searchPhrase(t_FieldQuery$QueryPhraseMap *self, PyObject *arg);
          static PyObject *t_FieldQuery$QueryPhraseMap_get__boost(t_FieldQuery$QueryPhraseMap *self, void *data);
          static PyObject *t_FieldQuery$QueryPhraseMap_get__slop(t_FieldQuery$QueryPhraseMap *self, void *data);
          static PyObject *t_FieldQuery$QueryPhraseMap_get__termOrPhraseNumber(t_FieldQuery$QueryPhraseMap *self, void *data);
          static PyObject *t_FieldQuery$QueryPhraseMap_get__terminal(t_FieldQuery$QueryPhraseMap *self, void *data);
          static PyGetSetDef t_FieldQuery$QueryPhraseMap__fields_[] = {
            DECLARE_GET_FIELD(t_FieldQuery$QueryPhraseMap, boost),
            DECLARE_GET_FIELD(t_FieldQuery$QueryPhraseMap, slop),
            DECLARE_GET_FIELD(t_FieldQuery$QueryPhraseMap, termOrPhraseNumber),
            DECLARE_GET_FIELD(t_FieldQuery$QueryPhraseMap, terminal),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_FieldQuery$QueryPhraseMap__methods_[] = {
            DECLARE_METHOD(t_FieldQuery$QueryPhraseMap, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FieldQuery$QueryPhraseMap, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FieldQuery$QueryPhraseMap, getBoost, METH_NOARGS),
            DECLARE_METHOD(t_FieldQuery$QueryPhraseMap, getSlop, METH_NOARGS),
            DECLARE_METHOD(t_FieldQuery$QueryPhraseMap, getTermMap, METH_O),
            DECLARE_METHOD(t_FieldQuery$QueryPhraseMap, getTermOrPhraseNumber, METH_NOARGS),
            DECLARE_METHOD(t_FieldQuery$QueryPhraseMap, isTerminal, METH_NOARGS),
            DECLARE_METHOD(t_FieldQuery$QueryPhraseMap, isValidTermOrPhrase, METH_O),
            DECLARE_METHOD(t_FieldQuery$QueryPhraseMap, searchPhrase, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FieldQuery$QueryPhraseMap, t_FieldQuery$QueryPhraseMap, ::java::lang::Object, FieldQuery$QueryPhraseMap, t_FieldQuery$QueryPhraseMap_init_, 0, 0, t_FieldQuery$QueryPhraseMap__fields_, 0, 0);

          void t_FieldQuery$QueryPhraseMap::install(PyObject *module)
          {
            installType(&PY_TYPE(FieldQuery$QueryPhraseMap), module, "FieldQuery$QueryPhraseMap", 0);
          }

          void t_FieldQuery$QueryPhraseMap::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FieldQuery$QueryPhraseMap).tp_dict, "class_", make_descriptor(FieldQuery$QueryPhraseMap::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FieldQuery$QueryPhraseMap).tp_dict, "wrapfn_", make_descriptor(t_FieldQuery$QueryPhraseMap::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FieldQuery$QueryPhraseMap).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FieldQuery$QueryPhraseMap_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FieldQuery$QueryPhraseMap::initializeClass, 1)))
              return NULL;
            return t_FieldQuery$QueryPhraseMap::wrap_Object(FieldQuery$QueryPhraseMap(((t_FieldQuery$QueryPhraseMap *) arg)->object.this$));
          }
          static PyObject *t_FieldQuery$QueryPhraseMap_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FieldQuery$QueryPhraseMap::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FieldQuery$QueryPhraseMap_init_(t_FieldQuery$QueryPhraseMap *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::search::vectorhighlight::FieldQuery a0((jobject) NULL);
            FieldQuery$QueryPhraseMap object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::search::vectorhighlight::FieldQuery::initializeClass, &a0))
            {
              INT_CALL(object = FieldQuery$QueryPhraseMap(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_FieldQuery$QueryPhraseMap_getBoost(t_FieldQuery$QueryPhraseMap *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getBoost());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_FieldQuery$QueryPhraseMap_getSlop(t_FieldQuery$QueryPhraseMap *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getSlop());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_FieldQuery$QueryPhraseMap_getTermMap(t_FieldQuery$QueryPhraseMap *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            FieldQuery$QueryPhraseMap result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.getTermMap(a0));
              return t_FieldQuery$QueryPhraseMap::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getTermMap", arg);
            return NULL;
          }

          static PyObject *t_FieldQuery$QueryPhraseMap_getTermOrPhraseNumber(t_FieldQuery$QueryPhraseMap *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getTermOrPhraseNumber());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_FieldQuery$QueryPhraseMap_isTerminal(t_FieldQuery$QueryPhraseMap *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isTerminal());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_FieldQuery$QueryPhraseMap_isValidTermOrPhrase(t_FieldQuery$QueryPhraseMap *self, PyObject *arg)
          {
            ::java::util::List a0((jobject) NULL);
            PyTypeObject **p0;
            jboolean result;

            if (!parseArg(arg, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
            {
              OBJ_CALL(result = self->object.isValidTermOrPhrase(a0));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError((PyObject *) self, "isValidTermOrPhrase", arg);
            return NULL;
          }

          static PyObject *t_FieldQuery$QueryPhraseMap_searchPhrase(t_FieldQuery$QueryPhraseMap *self, PyObject *arg)
          {
            ::java::util::List a0((jobject) NULL);
            PyTypeObject **p0;
            FieldQuery$QueryPhraseMap result((jobject) NULL);

            if (!parseArg(arg, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
            {
              OBJ_CALL(result = self->object.searchPhrase(a0));
              return t_FieldQuery$QueryPhraseMap::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "searchPhrase", arg);
            return NULL;
          }

          static PyObject *t_FieldQuery$QueryPhraseMap_get__boost(t_FieldQuery$QueryPhraseMap *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getBoost());
            return PyFloat_FromDouble((double) value);
          }

          static PyObject *t_FieldQuery$QueryPhraseMap_get__slop(t_FieldQuery$QueryPhraseMap *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getSlop());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_FieldQuery$QueryPhraseMap_get__termOrPhraseNumber(t_FieldQuery$QueryPhraseMap *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getTermOrPhraseNumber());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_FieldQuery$QueryPhraseMap_get__terminal(t_FieldQuery$QueryPhraseMap *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isTerminal());
            Py_RETURN_BOOL(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/HyphenatedWordsFilterFactory.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/miscellaneous/HyphenatedWordsFilter.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *HyphenatedWordsFilterFactory::class$ = NULL;
          jmethodID *HyphenatedWordsFilterFactory::mids$ = NULL;
          bool HyphenatedWordsFilterFactory::live$ = false;

          jclass HyphenatedWordsFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/HyphenatedWordsFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_4f2a8112] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/miscellaneous/HyphenatedWordsFilter;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          HyphenatedWordsFilterFactory::HyphenatedWordsFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::miscellaneous::HyphenatedWordsFilter HyphenatedWordsFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::miscellaneous::HyphenatedWordsFilter(env->callObjectMethod(this$, mids$[mid_create_4f2a8112], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_HyphenatedWordsFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_HyphenatedWordsFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_HyphenatedWordsFilterFactory_init_(t_HyphenatedWordsFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_HyphenatedWordsFilterFactory_create(t_HyphenatedWordsFilterFactory *self, PyObject *args);

          static PyMethodDef t_HyphenatedWordsFilterFactory__methods_[] = {
            DECLARE_METHOD(t_HyphenatedWordsFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HyphenatedWordsFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HyphenatedWordsFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(HyphenatedWordsFilterFactory, t_HyphenatedWordsFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, HyphenatedWordsFilterFactory, t_HyphenatedWordsFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_HyphenatedWordsFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(HyphenatedWordsFilterFactory), module, "HyphenatedWordsFilterFactory", 0);
          }

          void t_HyphenatedWordsFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(HyphenatedWordsFilterFactory).tp_dict, "class_", make_descriptor(HyphenatedWordsFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(HyphenatedWordsFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_HyphenatedWordsFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(HyphenatedWordsFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_HyphenatedWordsFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, HyphenatedWordsFilterFactory::initializeClass, 1)))
              return NULL;
            return t_HyphenatedWordsFilterFactory::wrap_Object(HyphenatedWordsFilterFactory(((t_HyphenatedWordsFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_HyphenatedWordsFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, HyphenatedWordsFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_HyphenatedWordsFilterFactory_init_(t_HyphenatedWordsFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            HyphenatedWordsFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = HyphenatedWordsFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_HyphenatedWordsFilterFactory_create(t_HyphenatedWordsFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::miscellaneous::HyphenatedWordsFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::miscellaneous::t_HyphenatedWordsFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(HyphenatedWordsFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/tokenattributes/OffsetAttribute.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {

          ::java::lang::Class *OffsetAttribute::class$ = NULL;
          jmethodID *OffsetAttribute::mids$ = NULL;
          bool OffsetAttribute::live$ = false;

          jclass OffsetAttribute::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/tokenattributes/OffsetAttribute");

              mids$ = new jmethodID[max_mid];
              mids$[mid_endOffset_54c6a179] = env->getMethodID(cls, "endOffset", "()I");
              mids$[mid_setOffset_d8d154a6] = env->getMethodID(cls, "setOffset", "(II)V");
              mids$[mid_startOffset_54c6a179] = env->getMethodID(cls, "startOffset", "()I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jint OffsetAttribute::endOffset() const
          {
            return env->callIntMethod(this$, mids$[mid_endOffset_54c6a179]);
          }

          void OffsetAttribute::setOffset(jint a0, jint a1) const
          {
            env->callVoidMethod(this$, mids$[mid_setOffset_d8d154a6], a0, a1);
          }

          jint OffsetAttribute::startOffset() const
          {
            return env->callIntMethod(this$, mids$[mid_startOffset_54c6a179]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {
          static PyObject *t_OffsetAttribute_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_OffsetAttribute_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_OffsetAttribute_endOffset(t_OffsetAttribute *self);
          static PyObject *t_OffsetAttribute_setOffset(t_OffsetAttribute *self, PyObject *args);
          static PyObject *t_OffsetAttribute_startOffset(t_OffsetAttribute *self);

          static PyMethodDef t_OffsetAttribute__methods_[] = {
            DECLARE_METHOD(t_OffsetAttribute, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_OffsetAttribute, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_OffsetAttribute, endOffset, METH_NOARGS),
            DECLARE_METHOD(t_OffsetAttribute, setOffset, METH_VARARGS),
            DECLARE_METHOD(t_OffsetAttribute, startOffset, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(OffsetAttribute, t_OffsetAttribute, ::org::apache::lucene::util::Attribute, OffsetAttribute, abstract_init, 0, 0, 0, 0, 0);

          void t_OffsetAttribute::install(PyObject *module)
          {
            installType(&PY_TYPE(OffsetAttribute), module, "OffsetAttribute", 0);
          }

          void t_OffsetAttribute::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(OffsetAttribute).tp_dict, "class_", make_descriptor(OffsetAttribute::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(OffsetAttribute).tp_dict, "wrapfn_", make_descriptor(t_OffsetAttribute::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(OffsetAttribute).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_OffsetAttribute_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, OffsetAttribute::initializeClass, 1)))
              return NULL;
            return t_OffsetAttribute::wrap_Object(OffsetAttribute(((t_OffsetAttribute *) arg)->object.this$));
          }
          static PyObject *t_OffsetAttribute_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, OffsetAttribute::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_OffsetAttribute_endOffset(t_OffsetAttribute *self)
          {
            jint result;
            OBJ_CALL(result = self->object.endOffset());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_OffsetAttribute_setOffset(t_OffsetAttribute *self, PyObject *args)
          {
            jint a0;
            jint a1;

            if (!parseArgs(args, "II", &a0, &a1))
            {
              OBJ_CALL(self->object.setOffset(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setOffset", args);
            return NULL;
          }

          static PyObject *t_OffsetAttribute_startOffset(t_OffsetAttribute *self)
          {
            jint result;
            OBJ_CALL(result = self->object.startOffset());
            return PyInt_FromLong((long) result);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/InfoStream.h"
#include "java/io/Closeable.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *InfoStream::class$ = NULL;
        jmethodID *InfoStream::mids$ = NULL;
        bool InfoStream::live$ = false;
        InfoStream *InfoStream::NO_OUTPUT = NULL;

        jclass InfoStream::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/InfoStream");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_getDefault_1923150b] = env->getStaticMethodID(cls, "getDefault", "()Lorg/apache/lucene/util/InfoStream;");
            mids$[mid_isEnabled_5fdc3f44] = env->getMethodID(cls, "isEnabled", "(Ljava/lang/String;)Z");
            mids$[mid_message_4a264742] = env->getMethodID(cls, "message", "(Ljava/lang/String;Ljava/lang/String;)V");
            mids$[mid_setDefault_a5e6dfa2] = env->getStaticMethodID(cls, "setDefault", "(Lorg/apache/lucene/util/InfoStream;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            NO_OUTPUT = new InfoStream(env->getStaticObjectField(cls, "NO_OUTPUT", "Lorg/apache/lucene/util/InfoStream;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        InfoStream::InfoStream() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        InfoStream InfoStream::getDefault()
        {
          jclass cls = env->getClass(initializeClass);
          return InfoStream(env->callStaticObjectMethod(cls, mids$[mid_getDefault_1923150b]));
        }

        jboolean InfoStream::isEnabled(const ::java::lang::String & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_isEnabled_5fdc3f44], a0.this$);
        }

        void InfoStream::message(const ::java::lang::String & a0, const ::java::lang::String & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_message_4a264742], a0.this$, a1.this$);
        }

        void InfoStream::setDefault(const InfoStream & a0)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_setDefault_a5e6dfa2], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_InfoStream_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_InfoStream_instance_(PyTypeObject *type, PyObject *arg);
        static int t_InfoStream_init_(t_InfoStream *self, PyObject *args, PyObject *kwds);
        static PyObject *t_InfoStream_getDefault(PyTypeObject *type);
        static PyObject *t_InfoStream_isEnabled(t_InfoStream *self, PyObject *arg);
        static PyObject *t_InfoStream_message(t_InfoStream *self, PyObject *args);
        static PyObject *t_InfoStream_setDefault(PyTypeObject *type, PyObject *arg);
        static PyObject *t_InfoStream_get__default(t_InfoStream *self, void *data);
        static int t_InfoStream_set__default(t_InfoStream *self, PyObject *arg, void *data);
        static PyGetSetDef t_InfoStream__fields_[] = {
          DECLARE_GETSET_FIELD(t_InfoStream, default),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_InfoStream__methods_[] = {
          DECLARE_METHOD(t_InfoStream, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_InfoStream, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_InfoStream, getDefault, METH_NOARGS | METH_CLASS),
          DECLARE_METHOD(t_InfoStream, isEnabled, METH_O),
          DECLARE_METHOD(t_InfoStream, message, METH_VARARGS),
          DECLARE_METHOD(t_InfoStream, setDefault, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(InfoStream, t_InfoStream, ::java::lang::Object, InfoStream, t_InfoStream_init_, 0, 0, t_InfoStream__fields_, 0, 0);

        void t_InfoStream::install(PyObject *module)
        {
          installType(&PY_TYPE(InfoStream), module, "InfoStream", 0);
        }

        void t_InfoStream::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(InfoStream).tp_dict, "class_", make_descriptor(InfoStream::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(InfoStream).tp_dict, "wrapfn_", make_descriptor(t_InfoStream::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(InfoStream).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(InfoStream::initializeClass);
          PyDict_SetItemString(PY_TYPE(InfoStream).tp_dict, "NO_OUTPUT", make_descriptor(t_InfoStream::wrap_Object(*InfoStream::NO_OUTPUT)));
        }

        static PyObject *t_InfoStream_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, InfoStream::initializeClass, 1)))
            return NULL;
          return t_InfoStream::wrap_Object(InfoStream(((t_InfoStream *) arg)->object.this$));
        }
        static PyObject *t_InfoStream_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, InfoStream::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_InfoStream_init_(t_InfoStream *self, PyObject *args, PyObject *kwds)
        {
          InfoStream object((jobject) NULL);

          INT_CALL(object = InfoStream());
          self->object = object;

          return 0;
        }

        static PyObject *t_InfoStream_getDefault(PyTypeObject *type)
        {
          InfoStream result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::util::InfoStream::getDefault());
          return t_InfoStream::wrap_Object(result);
        }

        static PyObject *t_InfoStream_isEnabled(t_InfoStream *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          jboolean result;

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = self->object.isEnabled(a0));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError((PyObject *) self, "isEnabled", arg);
          return NULL;
        }

        static PyObject *t_InfoStream_message(t_InfoStream *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);

          if (!parseArgs(args, "ss", &a0, &a1))
          {
            OBJ_CALL(self->object.message(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "message", args);
          return NULL;
        }

        static PyObject *t_InfoStream_setDefault(PyTypeObject *type, PyObject *arg)
        {
          InfoStream a0((jobject) NULL);

          if (!parseArg(arg, "k", InfoStream::initializeClass, &a0))
          {
            OBJ_CALL(::org::apache::lucene::util::InfoStream::setDefault(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "setDefault", arg);
          return NULL;
        }

        static PyObject *t_InfoStream_get__default(t_InfoStream *self, void *data)
        {
          InfoStream value((jobject) NULL);
          OBJ_CALL(value = self->object.getDefault());
          return t_InfoStream::wrap_Object(value);
        }
        static int t_InfoStream_set__default(t_InfoStream *self, PyObject *arg, void *data)
        {
          {
            InfoStream value((jobject) NULL);
            if (!parseArg(arg, "k", InfoStream::initializeClass, &value))
            {
              INT_CALL(self->object.setDefault(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "default", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/pylucene/analysis/PythonTokenizer.h"
#include "java/io/IOException.h"
#include "java/io/Reader.h"
#include "java/lang/Throwable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace analysis {

        ::java::lang::Class *PythonTokenizer::class$ = NULL;
        jmethodID *PythonTokenizer::mids$ = NULL;
        bool PythonTokenizer::live$ = false;

        jclass PythonTokenizer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/pylucene/analysis/PythonTokenizer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_cf2e3c10] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;)V");
            mids$[mid_finalize_54c6a166] = env->getMethodID(cls, "finalize", "()V");
            mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
            mids$[mid_pythonDecRef_54c6a166] = env->getMethodID(cls, "pythonDecRef", "()V");
            mids$[mid_pythonExtension_54c6a17a] = env->getMethodID(cls, "pythonExtension", "()J");
            mids$[mid_pythonExtension_0ee6df2f] = env->getMethodID(cls, "pythonExtension", "(J)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PythonTokenizer::PythonTokenizer(const ::java::io::Reader & a0) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_cf2e3c10, a0.this$)) {}

        void PythonTokenizer::finalize() const
        {
          env->callVoidMethod(this$, mids$[mid_finalize_54c6a166]);
        }

        jlong PythonTokenizer::pythonExtension() const
        {
          return env->callLongMethod(this$, mids$[mid_pythonExtension_54c6a17a]);
        }

        void PythonTokenizer::pythonExtension(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_pythonExtension_0ee6df2f], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace analysis {
        static PyObject *t_PythonTokenizer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PythonTokenizer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PythonTokenizer_init_(t_PythonTokenizer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PythonTokenizer_finalize(t_PythonTokenizer *self);
        static PyObject *t_PythonTokenizer_pythonExtension(t_PythonTokenizer *self, PyObject *args);
        static jboolean JNICALL t_PythonTokenizer_incrementToken0(JNIEnv *jenv, jobject jobj);
        static void JNICALL t_PythonTokenizer_pythonDecRef1(JNIEnv *jenv, jobject jobj);
        static PyObject *t_PythonTokenizer_get__self(t_PythonTokenizer *self, void *data);
        static PyGetSetDef t_PythonTokenizer__fields_[] = {
          DECLARE_GET_FIELD(t_PythonTokenizer, self),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PythonTokenizer__methods_[] = {
          DECLARE_METHOD(t_PythonTokenizer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonTokenizer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonTokenizer, finalize, METH_NOARGS),
          DECLARE_METHOD(t_PythonTokenizer, pythonExtension, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PythonTokenizer, t_PythonTokenizer, ::org::apache::lucene::analysis::Tokenizer, PythonTokenizer, t_PythonTokenizer_init_, 0, 0, t_PythonTokenizer__fields_, 0, 0);

        void t_PythonTokenizer::install(PyObject *module)
        {
          installType(&PY_TYPE(PythonTokenizer), module, "PythonTokenizer", 1);
        }

        void t_PythonTokenizer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PythonTokenizer).tp_dict, "class_", make_descriptor(PythonTokenizer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PythonTokenizer).tp_dict, "wrapfn_", make_descriptor(t_PythonTokenizer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PythonTokenizer).tp_dict, "boxfn_", make_descriptor(boxObject));
          jclass cls = env->getClass(PythonTokenizer::initializeClass);
          JNINativeMethod methods[] = {
            { "incrementToken", "()Z", (void *) t_PythonTokenizer_incrementToken0 },
            { "pythonDecRef", "()V", (void *) t_PythonTokenizer_pythonDecRef1 },
          };
          env->registerNatives(cls, methods, 2);
        }

        static PyObject *t_PythonTokenizer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PythonTokenizer::initializeClass, 1)))
            return NULL;
          return t_PythonTokenizer::wrap_Object(PythonTokenizer(((t_PythonTokenizer *) arg)->object.this$));
        }
        static PyObject *t_PythonTokenizer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PythonTokenizer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PythonTokenizer_init_(t_PythonTokenizer *self, PyObject *args, PyObject *kwds)
        {
          ::java::io::Reader a0((jobject) NULL);
          PythonTokenizer object((jobject) NULL);

          if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
          {
            INT_CALL(object = PythonTokenizer(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          Py_INCREF((PyObject *) self);
          self->object.pythonExtension((jlong) (Py_intptr_t) (void *) self);

          return 0;
        }

        static PyObject *t_PythonTokenizer_finalize(t_PythonTokenizer *self)
        {
          OBJ_CALL(self->object.finalize());
          Py_RETURN_NONE;
        }

        static PyObject *t_PythonTokenizer_pythonExtension(t_PythonTokenizer *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              jlong result;
              OBJ_CALL(result = self->object.pythonExtension());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }
            break;
           case 1:
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.pythonExtension(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "pythonExtension", args);
          return NULL;
        }

        static jboolean JNICALL t_PythonTokenizer_incrementToken0(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonTokenizer::mids$[PythonTokenizer::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jboolean value;
          PyObject *result = PyObject_CallMethod(obj, "incrementToken", "");
          if (!result)
            throwPythonError();
          else if (parseArg(result, "Z", &value))
          {
            throwTypeError("incrementToken", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jboolean) 0;
        }

        static void JNICALL t_PythonTokenizer_pythonDecRef1(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonTokenizer::mids$[PythonTokenizer::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            jenv->CallVoidMethod(jobj, PythonTokenizer::mids$[PythonTokenizer::mid_pythonExtension_0ee6df2f], (jlong) 0);
            env->finalizeObject(jenv, obj);
          }
        }

        static PyObject *t_PythonTokenizer_get__self(t_PythonTokenizer *self, void *data)
        {
          jlong ptr;
          OBJ_CALL(ptr = self->object.pythonExtension());
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            Py_INCREF(obj);
            return obj;
          }
          else
            Py_RETURN_NONE;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/StoredFieldVisitor.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/StoredFieldVisitor$Status.h"
#include "org/apache/lucene/index/FieldInfo.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *StoredFieldVisitor::class$ = NULL;
        jmethodID *StoredFieldVisitor::mids$ = NULL;
        bool StoredFieldVisitor::live$ = false;

        jclass StoredFieldVisitor::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/StoredFieldVisitor");

            mids$ = new jmethodID[max_mid];
            mids$[mid_binaryField_f0c94359] = env->getMethodID(cls, "binaryField", "(Lorg/apache/lucene/index/FieldInfo;[B)V");
            mids$[mid_doubleField_59cb8283] = env->getMethodID(cls, "doubleField", "(Lorg/apache/lucene/index/FieldInfo;D)V");
            mids$[mid_floatField_04c0e245] = env->getMethodID(cls, "floatField", "(Lorg/apache/lucene/index/FieldInfo;F)V");
            mids$[mid_intField_d8ebe062] = env->getMethodID(cls, "intField", "(Lorg/apache/lucene/index/FieldInfo;I)V");
            mids$[mid_longField_54f2c7e9] = env->getMethodID(cls, "longField", "(Lorg/apache/lucene/index/FieldInfo;J)V");
            mids$[mid_needsField_be88ccfe] = env->getMethodID(cls, "needsField", "(Lorg/apache/lucene/index/FieldInfo;)Lorg/apache/lucene/index/StoredFieldVisitor$Status;");
            mids$[mid_stringField_20e02bfa] = env->getMethodID(cls, "stringField", "(Lorg/apache/lucene/index/FieldInfo;Ljava/lang/String;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void StoredFieldVisitor::binaryField(const ::org::apache::lucene::index::FieldInfo & a0, const JArray< jbyte > & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_binaryField_f0c94359], a0.this$, a1.this$);
        }

        void StoredFieldVisitor::doubleField(const ::org::apache::lucene::index::FieldInfo & a0, jdouble a1) const
        {
          env->callVoidMethod(this$, mids$[mid_doubleField_59cb8283], a0.this$, a1);
        }

        void StoredFieldVisitor::floatField(const ::org::apache::lucene::index::FieldInfo & a0, jfloat a1) const
        {
          env->callVoidMethod(this$, mids$[mid_floatField_04c0e245], a0.this$, a1);
        }

        void StoredFieldVisitor::intField(const ::org::apache::lucene::index::FieldInfo & a0, jint a1) const
        {
          env->callVoidMethod(this$, mids$[mid_intField_d8ebe062], a0.this$, a1);
        }

        void StoredFieldVisitor::longField(const ::org::apache::lucene::index::FieldInfo & a0, jlong a1) const
        {
          env->callVoidMethod(this$, mids$[mid_longField_54f2c7e9], a0.this$, a1);
        }

        ::org::apache::lucene::index::StoredFieldVisitor$Status StoredFieldVisitor::needsField(const ::org::apache::lucene::index::FieldInfo & a0) const
        {
          return ::org::apache::lucene::index::StoredFieldVisitor$Status(env->callObjectMethod(this$, mids$[mid_needsField_be88ccfe], a0.this$));
        }

        void StoredFieldVisitor::stringField(const ::org::apache::lucene::index::FieldInfo & a0, const ::java::lang::String & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_stringField_20e02bfa], a0.this$, a1.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_StoredFieldVisitor_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_StoredFieldVisitor_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_StoredFieldVisitor_binaryField(t_StoredFieldVisitor *self, PyObject *args);
        static PyObject *t_StoredFieldVisitor_doubleField(t_StoredFieldVisitor *self, PyObject *args);
        static PyObject *t_StoredFieldVisitor_floatField(t_StoredFieldVisitor *self, PyObject *args);
        static PyObject *t_StoredFieldVisitor_intField(t_StoredFieldVisitor *self, PyObject *args);
        static PyObject *t_StoredFieldVisitor_longField(t_StoredFieldVisitor *self, PyObject *args);
        static PyObject *t_StoredFieldVisitor_needsField(t_StoredFieldVisitor *self, PyObject *arg);
        static PyObject *t_StoredFieldVisitor_stringField(t_StoredFieldVisitor *self, PyObject *args);

        static PyMethodDef t_StoredFieldVisitor__methods_[] = {
          DECLARE_METHOD(t_StoredFieldVisitor, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_StoredFieldVisitor, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_StoredFieldVisitor, binaryField, METH_VARARGS),
          DECLARE_METHOD(t_StoredFieldVisitor, doubleField, METH_VARARGS),
          DECLARE_METHOD(t_StoredFieldVisitor, floatField, METH_VARARGS),
          DECLARE_METHOD(t_StoredFieldVisitor, intField, METH_VARARGS),
          DECLARE_METHOD(t_StoredFieldVisitor, longField, METH_VARARGS),
          DECLARE_METHOD(t_StoredFieldVisitor, needsField, METH_O),
          DECLARE_METHOD(t_StoredFieldVisitor, stringField, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(StoredFieldVisitor, t_StoredFieldVisitor, ::java::lang::Object, StoredFieldVisitor, abstract_init, 0, 0, 0, 0, 0);

        void t_StoredFieldVisitor::install(PyObject *module)
        {
          installType(&PY_TYPE(StoredFieldVisitor), module, "StoredFieldVisitor", 0);
          PyDict_SetItemString(PY_TYPE(StoredFieldVisitor).tp_dict, "Status", make_descriptor(&PY_TYPE(StoredFieldVisitor$Status)));
        }

        void t_StoredFieldVisitor::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(StoredFieldVisitor).tp_dict, "class_", make_descriptor(StoredFieldVisitor::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(StoredFieldVisitor).tp_dict, "wrapfn_", make_descriptor(t_StoredFieldVisitor::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(StoredFieldVisitor).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_StoredFieldVisitor_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, StoredFieldVisitor::initializeClass, 1)))
            return NULL;
          return t_StoredFieldVisitor::wrap_Object(StoredFieldVisitor(((t_StoredFieldVisitor *) arg)->object.this$));
        }
        static PyObject *t_StoredFieldVisitor_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, StoredFieldVisitor::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_StoredFieldVisitor_binaryField(t_StoredFieldVisitor *self, PyObject *args)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          JArray< jbyte > a1((jobject) NULL);

          if (!parseArgs(args, "k[B", ::org::apache::lucene::index::FieldInfo::initializeClass, &a0, &a1))
          {
            OBJ_CALL(self->object.binaryField(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "binaryField", args);
          return NULL;
        }

        static PyObject *t_StoredFieldVisitor_doubleField(t_StoredFieldVisitor *self, PyObject *args)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          jdouble a1;

          if (!parseArgs(args, "kD", ::org::apache::lucene::index::FieldInfo::initializeClass, &a0, &a1))
          {
            OBJ_CALL(self->object.doubleField(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "doubleField", args);
          return NULL;
        }

        static PyObject *t_StoredFieldVisitor_floatField(t_StoredFieldVisitor *self, PyObject *args)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          jfloat a1;

          if (!parseArgs(args, "kF", ::org::apache::lucene::index::FieldInfo::initializeClass, &a0, &a1))
          {
            OBJ_CALL(self->object.floatField(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "floatField", args);
          return NULL;
        }

        static PyObject *t_StoredFieldVisitor_intField(t_StoredFieldVisitor *self, PyObject *args)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          jint a1;

          if (!parseArgs(args, "kI", ::org::apache::lucene::index::FieldInfo::initializeClass, &a0, &a1))
          {
            OBJ_CALL(self->object.intField(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "intField", args);
          return NULL;
        }

        static PyObject *t_StoredFieldVisitor_longField(t_StoredFieldVisitor *self, PyObject *args)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          jlong a1;

          if (!parseArgs(args, "kJ", ::org::apache::lucene::index::FieldInfo::initializeClass, &a0, &a1))
          {
            OBJ_CALL(self->object.longField(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "longField", args);
          return NULL;
        }

        static PyObject *t_StoredFieldVisitor_needsField(t_StoredFieldVisitor *self, PyObject *arg)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          ::org::apache::lucene::index::StoredFieldVisitor$Status result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::FieldInfo::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.needsField(a0));
            return ::org::apache::lucene::index::t_StoredFieldVisitor$Status::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "needsField", arg);
          return NULL;
        }

        static PyObject *t_StoredFieldVisitor_stringField(t_StoredFieldVisitor *self, PyObject *args)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);

          if (!parseArgs(args, "ks", ::org::apache::lucene::index::FieldInfo::initializeClass, &a0, &a1))
          {
            OBJ_CALL(self->object.stringField(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "stringField", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/SortedTermFreqIteratorWrapper.h"
#include "org/apache/lucene/search/spell/TermFreqIterator.h"
#include "java/util/Comparator.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {

          ::java::lang::Class *SortedTermFreqIteratorWrapper::class$ = NULL;
          jmethodID *SortedTermFreqIteratorWrapper::mids$ = NULL;
          bool SortedTermFreqIteratorWrapper::live$ = false;

          jclass SortedTermFreqIteratorWrapper::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/SortedTermFreqIteratorWrapper");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_b57afdd1] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/spell/TermFreqIterator;)V");
              mids$[mid_init$_dbfb1d96] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/spell/TermFreqIterator;Ljava/util/Comparator;)V");
              mids$[mid_getComparator_5a7ff2fc] = env->getMethodID(cls, "getComparator", "()Ljava/util/Comparator;");
              mids$[mid_next_4ae19461] = env->getMethodID(cls, "next", "()Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_weight_54c6a17a] = env->getMethodID(cls, "weight", "()J");
              mids$[mid_decode_b368866d] = env->getMethodID(cls, "decode", "(Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/store/ByteArrayDataInput;)J");
              mids$[mid_encode_d3114f43] = env->getMethodID(cls, "encode", "(Lorg/apache/lucene/util/OfflineSorter$ByteSequencesWriter;Lorg/apache/lucene/store/ByteArrayDataOutput;[BLorg/apache/lucene/util/BytesRef;J)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SortedTermFreqIteratorWrapper::SortedTermFreqIteratorWrapper(const ::org::apache::lucene::search::spell::TermFreqIterator & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_b57afdd1, a0.this$)) {}

          SortedTermFreqIteratorWrapper::SortedTermFreqIteratorWrapper(const ::org::apache::lucene::search::spell::TermFreqIterator & a0, const ::java::util::Comparator & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_dbfb1d96, a0.this$, a1.this$)) {}

          ::java::util::Comparator SortedTermFreqIteratorWrapper::getComparator() const
          {
            return ::java::util::Comparator(env->callObjectMethod(this$, mids$[mid_getComparator_5a7ff2fc]));
          }

          ::org::apache::lucene::util::BytesRef SortedTermFreqIteratorWrapper::next() const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_next_4ae19461]));
          }

          jlong SortedTermFreqIteratorWrapper::weight() const
          {
            return env->callLongMethod(this$, mids$[mid_weight_54c6a17a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          static PyObject *t_SortedTermFreqIteratorWrapper_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SortedTermFreqIteratorWrapper_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SortedTermFreqIteratorWrapper_init_(t_SortedTermFreqIteratorWrapper *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SortedTermFreqIteratorWrapper_getComparator(t_SortedTermFreqIteratorWrapper *self);
          static PyObject *t_SortedTermFreqIteratorWrapper_next(t_SortedTermFreqIteratorWrapper *self);
          static PyObject *t_SortedTermFreqIteratorWrapper_weight(t_SortedTermFreqIteratorWrapper *self);
          static PyObject *t_SortedTermFreqIteratorWrapper_get__comparator(t_SortedTermFreqIteratorWrapper *self, void *data);
          static PyGetSetDef t_SortedTermFreqIteratorWrapper__fields_[] = {
            DECLARE_GET_FIELD(t_SortedTermFreqIteratorWrapper, comparator),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SortedTermFreqIteratorWrapper__methods_[] = {
            DECLARE_METHOD(t_SortedTermFreqIteratorWrapper, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SortedTermFreqIteratorWrapper, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SortedTermFreqIteratorWrapper, getComparator, METH_NOARGS),
            DECLARE_METHOD(t_SortedTermFreqIteratorWrapper, next, METH_NOARGS),
            DECLARE_METHOD(t_SortedTermFreqIteratorWrapper, weight, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SortedTermFreqIteratorWrapper, t_SortedTermFreqIteratorWrapper, ::java::lang::Object, SortedTermFreqIteratorWrapper, t_SortedTermFreqIteratorWrapper_init_, PyObject_SelfIter, ((PyObject *(*)(t_SortedTermFreqIteratorWrapper *)) get_next< t_SortedTermFreqIteratorWrapper,::org::apache::lucene::util::t_BytesRef,::org::apache::lucene::util::BytesRef >), t_SortedTermFreqIteratorWrapper__fields_, 0, 0);

          void t_SortedTermFreqIteratorWrapper::install(PyObject *module)
          {
            installType(&PY_TYPE(SortedTermFreqIteratorWrapper), module, "SortedTermFreqIteratorWrapper", 0);
          }

          void t_SortedTermFreqIteratorWrapper::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SortedTermFreqIteratorWrapper).tp_dict, "class_", make_descriptor(SortedTermFreqIteratorWrapper::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SortedTermFreqIteratorWrapper).tp_dict, "wrapfn_", make_descriptor(t_SortedTermFreqIteratorWrapper::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SortedTermFreqIteratorWrapper).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SortedTermFreqIteratorWrapper_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SortedTermFreqIteratorWrapper::initializeClass, 1)))
              return NULL;
            return t_SortedTermFreqIteratorWrapper::wrap_Object(SortedTermFreqIteratorWrapper(((t_SortedTermFreqIteratorWrapper *) arg)->object.this$));
          }
          static PyObject *t_SortedTermFreqIteratorWrapper_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SortedTermFreqIteratorWrapper::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SortedTermFreqIteratorWrapper_init_(t_SortedTermFreqIteratorWrapper *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::search::spell::TermFreqIterator a0((jobject) NULL);
                SortedTermFreqIteratorWrapper object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::search::spell::TermFreqIterator::initializeClass, &a0))
                {
                  INT_CALL(object = SortedTermFreqIteratorWrapper(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::search::spell::TermFreqIterator a0((jobject) NULL);
                ::java::util::Comparator a1((jobject) NULL);
                PyTypeObject **p1;
                SortedTermFreqIteratorWrapper object((jobject) NULL);

                if (!parseArgs(args, "kK", ::org::apache::lucene::search::spell::TermFreqIterator::initializeClass, ::java::util::Comparator::initializeClass, &a0, &a1, &p1, ::java::util::t_Comparator::parameters_))
                {
                  INT_CALL(object = SortedTermFreqIteratorWrapper(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SortedTermFreqIteratorWrapper_getComparator(t_SortedTermFreqIteratorWrapper *self)
          {
            ::java::util::Comparator result((jobject) NULL);
            OBJ_CALL(result = self->object.getComparator());
            return ::java::util::t_Comparator::wrap_Object(result, &::org::apache::lucene::util::PY_TYPE(BytesRef));
          }

          static PyObject *t_SortedTermFreqIteratorWrapper_next(t_SortedTermFreqIteratorWrapper *self)
          {
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);
            OBJ_CALL(result = self->object.next());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          static PyObject *t_SortedTermFreqIteratorWrapper_weight(t_SortedTermFreqIteratorWrapper *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.weight());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_SortedTermFreqIteratorWrapper_get__comparator(t_SortedTermFreqIteratorWrapper *self, void *data)
          {
            ::java::util::Comparator value((jobject) NULL);
            OBJ_CALL(value = self->object.getComparator());
            return ::java::util::t_Comparator::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/core/WhitespaceTokenizer.h"
#include "java/io/Reader.h"
#include "org/apache/lucene/util/Version.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {

          ::java::lang::Class *WhitespaceTokenizer::class$ = NULL;
          jmethodID *WhitespaceTokenizer::mids$ = NULL;
          bool WhitespaceTokenizer::live$ = false;

          jclass WhitespaceTokenizer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/core/WhitespaceTokenizer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_cf2e3c10] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;)V");
              mids$[mid_init$_5877b8f0] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;)V");
              mids$[mid_init$_7997a391] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Ljava/io/Reader;)V");
              mids$[mid_init$_be7a3ecf] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;)V");
              mids$[mid_isTokenChar_39c7bd30] = env->getMethodID(cls, "isTokenChar", "(I)Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          WhitespaceTokenizer::WhitespaceTokenizer(const ::java::io::Reader & a0) : ::org::apache::lucene::analysis::util::CharTokenizer(env->newObject(initializeClass, &mids$, mid_init$_cf2e3c10, a0.this$)) {}

          WhitespaceTokenizer::WhitespaceTokenizer(const ::org::apache::lucene::util::AttributeFactory & a0, const ::java::io::Reader & a1) : ::org::apache::lucene::analysis::util::CharTokenizer(env->newObject(initializeClass, &mids$, mid_init$_5877b8f0, a0.this$, a1.this$)) {}

          WhitespaceTokenizer::WhitespaceTokenizer(const ::org::apache::lucene::util::Version & a0, const ::java::io::Reader & a1) : ::org::apache::lucene::analysis::util::CharTokenizer(env->newObject(initializeClass, &mids$, mid_init$_7997a391, a0.this$, a1.this$)) {}

          WhitespaceTokenizer::WhitespaceTokenizer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::util::AttributeFactory & a1, const ::java::io::Reader & a2) : ::org::apache::lucene::analysis::util::CharTokenizer(env->newObject(initializeClass, &mids$, mid_init$_be7a3ecf, a0.this$, a1.this$, a2.this$)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {
          static PyObject *t_WhitespaceTokenizer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_WhitespaceTokenizer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_WhitespaceTokenizer_init_(t_WhitespaceTokenizer *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_WhitespaceTokenizer__methods_[] = {
            DECLARE_METHOD(t_WhitespaceTokenizer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_WhitespaceTokenizer, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(WhitespaceTokenizer, t_WhitespaceTokenizer, ::org::apache::lucene::analysis::util::CharTokenizer, WhitespaceTokenizer, t_WhitespaceTokenizer_init_, 0, 0, 0, 0, 0);

          void t_WhitespaceTokenizer::install(PyObject *module)
          {
            installType(&PY_TYPE(WhitespaceTokenizer), module, "WhitespaceTokenizer", 0);
          }

          void t_WhitespaceTokenizer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(WhitespaceTokenizer).tp_dict, "class_", make_descriptor(WhitespaceTokenizer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(WhitespaceTokenizer).tp_dict, "wrapfn_", make_descriptor(t_WhitespaceTokenizer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(WhitespaceTokenizer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_WhitespaceTokenizer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, WhitespaceTokenizer::initializeClass, 1)))
              return NULL;
            return t_WhitespaceTokenizer::wrap_Object(WhitespaceTokenizer(((t_WhitespaceTokenizer *) arg)->object.this$));
          }
          static PyObject *t_WhitespaceTokenizer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, WhitespaceTokenizer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_WhitespaceTokenizer_init_(t_WhitespaceTokenizer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::java::io::Reader a0((jobject) NULL);
                WhitespaceTokenizer object((jobject) NULL);

                if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
                {
                  INT_CALL(object = WhitespaceTokenizer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
                ::java::io::Reader a1((jobject) NULL);
                WhitespaceTokenizer object((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = WhitespaceTokenizer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                ::java::io::Reader a1((jobject) NULL);
                WhitespaceTokenizer object((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::util::Version::initializeClass, ::java::io::Reader::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = WhitespaceTokenizer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                ::org::apache::lucene::util::AttributeFactory a1((jobject) NULL);
                ::java::io::Reader a2((jobject) NULL);
                WhitespaceTokenizer object((jobject) NULL);

                if (!parseArgs(args, "kkk", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = WhitespaceTokenizer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene3x/Lucene3xCodec.h"
#include "org/apache/lucene/codecs/FieldInfosFormat.h"
#include "java/util/Set.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/codecs/LiveDocsFormat.h"
#include "org/apache/lucene/codecs/SegmentInfoFormat.h"
#include "org/apache/lucene/codecs/TermVectorsFormat.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "java/lang/String.h"
#include "org/apache/lucene/codecs/NormsFormat.h"
#include "org/apache/lucene/codecs/StoredFieldsFormat.h"
#include "org/apache/lucene/codecs/PostingsFormat.h"
#include "org/apache/lucene/codecs/DocValuesFormat.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene3x {

          ::java::lang::Class *Lucene3xCodec::class$ = NULL;
          jmethodID *Lucene3xCodec::mids$ = NULL;
          bool Lucene3xCodec::live$ = false;

          jclass Lucene3xCodec::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene3x/Lucene3xCodec");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_docValuesFormat_9a259760] = env->getMethodID(cls, "docValuesFormat", "()Lorg/apache/lucene/codecs/DocValuesFormat;");
              mids$[mid_fieldInfosFormat_82160220] = env->getMethodID(cls, "fieldInfosFormat", "()Lorg/apache/lucene/codecs/FieldInfosFormat;");
              mids$[mid_getDocStoreFiles_e7e0a956] = env->getStaticMethodID(cls, "getDocStoreFiles", "(Lorg/apache/lucene/index/SegmentInfo;)Ljava/util/Set;");
              mids$[mid_liveDocsFormat_fcc69d9a] = env->getMethodID(cls, "liveDocsFormat", "()Lorg/apache/lucene/codecs/LiveDocsFormat;");
              mids$[mid_normsFormat_03b89e43] = env->getMethodID(cls, "normsFormat", "()Lorg/apache/lucene/codecs/NormsFormat;");
              mids$[mid_postingsFormat_d12d16c8] = env->getMethodID(cls, "postingsFormat", "()Lorg/apache/lucene/codecs/PostingsFormat;");
              mids$[mid_segmentInfoFormat_c24d8633] = env->getMethodID(cls, "segmentInfoFormat", "()Lorg/apache/lucene/codecs/SegmentInfoFormat;");
              mids$[mid_storedFieldsFormat_2b977101] = env->getMethodID(cls, "storedFieldsFormat", "()Lorg/apache/lucene/codecs/StoredFieldsFormat;");
              mids$[mid_termVectorsFormat_bcd1d8b8] = env->getMethodID(cls, "termVectorsFormat", "()Lorg/apache/lucene/codecs/TermVectorsFormat;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene3xCodec::Lucene3xCodec() : ::org::apache::lucene::codecs::Codec(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::codecs::DocValuesFormat Lucene3xCodec::docValuesFormat() const
          {
            return ::org::apache::lucene::codecs::DocValuesFormat(env->callObjectMethod(this$, mids$[mid_docValuesFormat_9a259760]));
          }

          ::org::apache::lucene::codecs::FieldInfosFormat Lucene3xCodec::fieldInfosFormat() const
          {
            return ::org::apache::lucene::codecs::FieldInfosFormat(env->callObjectMethod(this$, mids$[mid_fieldInfosFormat_82160220]));
          }

          ::java::util::Set Lucene3xCodec::getDocStoreFiles(const ::org::apache::lucene::index::SegmentInfo & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::java::util::Set(env->callStaticObjectMethod(cls, mids$[mid_getDocStoreFiles_e7e0a956], a0.this$));
          }

          ::org::apache::lucene::codecs::LiveDocsFormat Lucene3xCodec::liveDocsFormat() const
          {
            return ::org::apache::lucene::codecs::LiveDocsFormat(env->callObjectMethod(this$, mids$[mid_liveDocsFormat_fcc69d9a]));
          }

          ::org::apache::lucene::codecs::NormsFormat Lucene3xCodec::normsFormat() const
          {
            return ::org::apache::lucene::codecs::NormsFormat(env->callObjectMethod(this$, mids$[mid_normsFormat_03b89e43]));
          }

          ::org::apache::lucene::codecs::PostingsFormat Lucene3xCodec::postingsFormat() const
          {
            return ::org::apache::lucene::codecs::PostingsFormat(env->callObjectMethod(this$, mids$[mid_postingsFormat_d12d16c8]));
          }

          ::org::apache::lucene::codecs::SegmentInfoFormat Lucene3xCodec::segmentInfoFormat() const
          {
            return ::org::apache::lucene::codecs::SegmentInfoFormat(env->callObjectMethod(this$, mids$[mid_segmentInfoFormat_c24d8633]));
          }

          ::org::apache::lucene::codecs::StoredFieldsFormat Lucene3xCodec::storedFieldsFormat() const
          {
            return ::org::apache::lucene::codecs::StoredFieldsFormat(env->callObjectMethod(this$, mids$[mid_storedFieldsFormat_2b977101]));
          }

          ::org::apache::lucene::codecs::TermVectorsFormat Lucene3xCodec::termVectorsFormat() const
          {
            return ::org::apache::lucene::codecs::TermVectorsFormat(env->callObjectMethod(this$, mids$[mid_termVectorsFormat_bcd1d8b8]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene3x {
          static PyObject *t_Lucene3xCodec_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene3xCodec_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene3xCodec_init_(t_Lucene3xCodec *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene3xCodec_docValuesFormat(t_Lucene3xCodec *self, PyObject *args);
          static PyObject *t_Lucene3xCodec_fieldInfosFormat(t_Lucene3xCodec *self, PyObject *args);
          static PyObject *t_Lucene3xCodec_getDocStoreFiles(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene3xCodec_liveDocsFormat(t_Lucene3xCodec *self, PyObject *args);
          static PyObject *t_Lucene3xCodec_normsFormat(t_Lucene3xCodec *self, PyObject *args);
          static PyObject *t_Lucene3xCodec_postingsFormat(t_Lucene3xCodec *self, PyObject *args);
          static PyObject *t_Lucene3xCodec_segmentInfoFormat(t_Lucene3xCodec *self, PyObject *args);
          static PyObject *t_Lucene3xCodec_storedFieldsFormat(t_Lucene3xCodec *self, PyObject *args);
          static PyObject *t_Lucene3xCodec_termVectorsFormat(t_Lucene3xCodec *self, PyObject *args);

          static PyMethodDef t_Lucene3xCodec__methods_[] = {
            DECLARE_METHOD(t_Lucene3xCodec, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene3xCodec, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene3xCodec, docValuesFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene3xCodec, fieldInfosFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene3xCodec, getDocStoreFiles, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene3xCodec, liveDocsFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene3xCodec, normsFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene3xCodec, postingsFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene3xCodec, segmentInfoFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene3xCodec, storedFieldsFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene3xCodec, termVectorsFormat, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene3xCodec, t_Lucene3xCodec, ::org::apache::lucene::codecs::Codec, Lucene3xCodec, t_Lucene3xCodec_init_, 0, 0, 0, 0, 0);

          void t_Lucene3xCodec::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene3xCodec), module, "Lucene3xCodec", 0);
          }

          void t_Lucene3xCodec::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene3xCodec).tp_dict, "class_", make_descriptor(Lucene3xCodec::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene3xCodec).tp_dict, "wrapfn_", make_descriptor(t_Lucene3xCodec::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene3xCodec).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lucene3xCodec_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene3xCodec::initializeClass, 1)))
              return NULL;
            return t_Lucene3xCodec::wrap_Object(Lucene3xCodec(((t_Lucene3xCodec *) arg)->object.this$));
          }
          static PyObject *t_Lucene3xCodec_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene3xCodec::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene3xCodec_init_(t_Lucene3xCodec *self, PyObject *args, PyObject *kwds)
          {
            Lucene3xCodec object((jobject) NULL);

            INT_CALL(object = Lucene3xCodec());
            self->object = object;

            return 0;
          }

          static PyObject *t_Lucene3xCodec_docValuesFormat(t_Lucene3xCodec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::DocValuesFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.docValuesFormat());
              return ::org::apache::lucene::codecs::t_DocValuesFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene3xCodec), (PyObject *) self, "docValuesFormat", args, 2);
          }

          static PyObject *t_Lucene3xCodec_fieldInfosFormat(t_Lucene3xCodec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::FieldInfosFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.fieldInfosFormat());
              return ::org::apache::lucene::codecs::t_FieldInfosFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene3xCodec), (PyObject *) self, "fieldInfosFormat", args, 2);
          }

          static PyObject *t_Lucene3xCodec_getDocStoreFiles(PyTypeObject *type, PyObject *arg)
          {
            ::org::apache::lucene::index::SegmentInfo a0((jobject) NULL);
            ::java::util::Set result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::index::SegmentInfo::initializeClass, &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::codecs::lucene3x::Lucene3xCodec::getDocStoreFiles(a0));
              return ::java::util::t_Set::wrap_Object(result, &::java::lang::PY_TYPE(String));
            }

            PyErr_SetArgsError(type, "getDocStoreFiles", arg);
            return NULL;
          }

          static PyObject *t_Lucene3xCodec_liveDocsFormat(t_Lucene3xCodec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::LiveDocsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.liveDocsFormat());
              return ::org::apache::lucene::codecs::t_LiveDocsFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene3xCodec), (PyObject *) self, "liveDocsFormat", args, 2);
          }

          static PyObject *t_Lucene3xCodec_normsFormat(t_Lucene3xCodec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::NormsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.normsFormat());
              return ::org::apache::lucene::codecs::t_NormsFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene3xCodec), (PyObject *) self, "normsFormat", args, 2);
          }

          static PyObject *t_Lucene3xCodec_postingsFormat(t_Lucene3xCodec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::PostingsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.postingsFormat());
              return ::org::apache::lucene::codecs::t_PostingsFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene3xCodec), (PyObject *) self, "postingsFormat", args, 2);
          }

          static PyObject *t_Lucene3xCodec_segmentInfoFormat(t_Lucene3xCodec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::SegmentInfoFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.segmentInfoFormat());
              return ::org::apache::lucene::codecs::t_SegmentInfoFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene3xCodec), (PyObject *) self, "segmentInfoFormat", args, 2);
          }

          static PyObject *t_Lucene3xCodec_storedFieldsFormat(t_Lucene3xCodec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::StoredFieldsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.storedFieldsFormat());
              return ::org::apache::lucene::codecs::t_StoredFieldsFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene3xCodec), (PyObject *) self, "storedFieldsFormat", args, 2);
          }

          static PyObject *t_Lucene3xCodec_termVectorsFormat(t_Lucene3xCodec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::TermVectorsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.termVectorsFormat());
              return ::org::apache::lucene::codecs::t_TermVectorsFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene3xCodec), (PyObject *) self, "termVectorsFormat", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/processors/TermRangeQueryNodeProcessor.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {

              ::java::lang::Class *TermRangeQueryNodeProcessor::class$ = NULL;
              jmethodID *TermRangeQueryNodeProcessor::mids$ = NULL;
              bool TermRangeQueryNodeProcessor::live$ = false;

              jclass TermRangeQueryNodeProcessor::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/processors/TermRangeQueryNodeProcessor");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_postProcessNode_6705aed7] = env->getMethodID(cls, "postProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_preProcessNode_6705aed7] = env->getMethodID(cls, "preProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_setChildrenOrder_4f378251] = env->getMethodID(cls, "setChildrenOrder", "(Ljava/util/List;)Ljava/util/List;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              TermRangeQueryNodeProcessor::TermRangeQueryNodeProcessor() : ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {
              static PyObject *t_TermRangeQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_TermRangeQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg);
              static int t_TermRangeQueryNodeProcessor_init_(t_TermRangeQueryNodeProcessor *self, PyObject *args, PyObject *kwds);

              static PyMethodDef t_TermRangeQueryNodeProcessor__methods_[] = {
                DECLARE_METHOD(t_TermRangeQueryNodeProcessor, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_TermRangeQueryNodeProcessor, instance_, METH_O | METH_CLASS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(TermRangeQueryNodeProcessor, t_TermRangeQueryNodeProcessor, ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl, TermRangeQueryNodeProcessor, t_TermRangeQueryNodeProcessor_init_, 0, 0, 0, 0, 0);

              void t_TermRangeQueryNodeProcessor::install(PyObject *module)
              {
                installType(&PY_TYPE(TermRangeQueryNodeProcessor), module, "TermRangeQueryNodeProcessor", 0);
              }

              void t_TermRangeQueryNodeProcessor::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(TermRangeQueryNodeProcessor).tp_dict, "class_", make_descriptor(TermRangeQueryNodeProcessor::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(TermRangeQueryNodeProcessor).tp_dict, "wrapfn_", make_descriptor(t_TermRangeQueryNodeProcessor::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(TermRangeQueryNodeProcessor).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_TermRangeQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, TermRangeQueryNodeProcessor::initializeClass, 1)))
                  return NULL;
                return t_TermRangeQueryNodeProcessor::wrap_Object(TermRangeQueryNodeProcessor(((t_TermRangeQueryNodeProcessor *) arg)->object.this$));
              }
              static PyObject *t_TermRangeQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, TermRangeQueryNodeProcessor::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_TermRangeQueryNodeProcessor_init_(t_TermRangeQueryNodeProcessor *self, PyObject *args, PyObject *kwds)
              {
                TermRangeQueryNodeProcessor object((jobject) NULL);

                INT_CALL(object = TermRangeQueryNodeProcessor());
                self->object = object;

                return 0;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/RollingBuffer$Resettable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *RollingBuffer$Resettable::class$ = NULL;
        jmethodID *RollingBuffer$Resettable::mids$ = NULL;
        bool RollingBuffer$Resettable::live$ = false;

        jclass RollingBuffer$Resettable::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/RollingBuffer$Resettable");

            mids$ = new jmethodID[max_mid];
            mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void RollingBuffer$Resettable::reset() const
        {
          env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_RollingBuffer$Resettable_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_RollingBuffer$Resettable_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_RollingBuffer$Resettable_of_(t_RollingBuffer$Resettable *self, PyObject *args);
        static PyObject *t_RollingBuffer$Resettable_reset(t_RollingBuffer$Resettable *self);
        static PyObject *t_RollingBuffer$Resettable_get__parameters_(t_RollingBuffer$Resettable *self, void *data);
        static PyGetSetDef t_RollingBuffer$Resettable__fields_[] = {
          DECLARE_GET_FIELD(t_RollingBuffer$Resettable, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_RollingBuffer$Resettable__methods_[] = {
          DECLARE_METHOD(t_RollingBuffer$Resettable, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RollingBuffer$Resettable, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RollingBuffer$Resettable, of_, METH_VARARGS),
          DECLARE_METHOD(t_RollingBuffer$Resettable, reset, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(RollingBuffer$Resettable, t_RollingBuffer$Resettable, ::java::lang::Object, RollingBuffer$Resettable, abstract_init, 0, 0, t_RollingBuffer$Resettable__fields_, 0, 0);
        PyObject *t_RollingBuffer$Resettable::wrap_Object(const RollingBuffer$Resettable& object, PyTypeObject *p0)
        {
          PyObject *obj = t_RollingBuffer$Resettable::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_RollingBuffer$Resettable *self = (t_RollingBuffer$Resettable *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_RollingBuffer$Resettable::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_RollingBuffer$Resettable::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_RollingBuffer$Resettable *self = (t_RollingBuffer$Resettable *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_RollingBuffer$Resettable::install(PyObject *module)
        {
          installType(&PY_TYPE(RollingBuffer$Resettable), module, "RollingBuffer$Resettable", 0);
        }

        void t_RollingBuffer$Resettable::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(RollingBuffer$Resettable).tp_dict, "class_", make_descriptor(RollingBuffer$Resettable::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(RollingBuffer$Resettable).tp_dict, "wrapfn_", make_descriptor(t_RollingBuffer$Resettable::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(RollingBuffer$Resettable).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_RollingBuffer$Resettable_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, RollingBuffer$Resettable::initializeClass, 1)))
            return NULL;
          return t_RollingBuffer$Resettable::wrap_Object(RollingBuffer$Resettable(((t_RollingBuffer$Resettable *) arg)->object.this$));
        }
        static PyObject *t_RollingBuffer$Resettable_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, RollingBuffer$Resettable::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_RollingBuffer$Resettable_of_(t_RollingBuffer$Resettable *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_RollingBuffer$Resettable_reset(t_RollingBuffer$Resettable *self)
        {
          OBJ_CALL(self->object.reset());
          Py_RETURN_NONE;
        }
        static PyObject *t_RollingBuffer$Resettable_get__parameters_(t_RollingBuffer$Resettable *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/TextField.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "java/io/Reader.h"
#include "org/apache/lucene/document/FieldType.h"
#include "org/apache/lucene/document/Field$Store.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *TextField::class$ = NULL;
        jmethodID *TextField::mids$ = NULL;
        bool TextField::live$ = false;
        ::org::apache::lucene::document::FieldType *TextField::TYPE_NOT_STORED = NULL;
        ::org::apache::lucene::document::FieldType *TextField::TYPE_STORED = NULL;

        jclass TextField::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/TextField");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_7d0c5392] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/analysis/TokenStream;)V");
            mids$[mid_init$_23e5278e] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/io/Reader;)V");
            mids$[mid_init$_064fa087] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/String;Lorg/apache/lucene/document/Field$Store;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            TYPE_NOT_STORED = new ::org::apache::lucene::document::FieldType(env->getStaticObjectField(cls, "TYPE_NOT_STORED", "Lorg/apache/lucene/document/FieldType;"));
            TYPE_STORED = new ::org::apache::lucene::document::FieldType(env->getStaticObjectField(cls, "TYPE_STORED", "Lorg/apache/lucene/document/FieldType;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        TextField::TextField(const ::java::lang::String & a0, const ::org::apache::lucene::analysis::TokenStream & a1) : ::org::apache::lucene::document::Field(env->newObject(initializeClass, &mids$, mid_init$_7d0c5392, a0.this$, a1.this$)) {}

        TextField::TextField(const ::java::lang::String & a0, const ::java::io::Reader & a1) : ::org::apache::lucene::document::Field(env->newObject(initializeClass, &mids$, mid_init$_23e5278e, a0.this$, a1.this$)) {}

        TextField::TextField(const ::java::lang::String & a0, const ::java::lang::String & a1, const ::org::apache::lucene::document::Field$Store & a2) : ::org::apache::lucene::document::Field(env->newObject(initializeClass, &mids$, mid_init$_064fa087, a0.this$, a1.this$, a2.this$)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_TextField_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TextField_instance_(PyTypeObject *type, PyObject *arg);
        static int t_TextField_init_(t_TextField *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_TextField__methods_[] = {
          DECLARE_METHOD(t_TextField, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TextField, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TextField, t_TextField, ::org::apache::lucene::document::Field, TextField, t_TextField_init_, 0, 0, 0, 0, 0);

        void t_TextField::install(PyObject *module)
        {
          installType(&PY_TYPE(TextField), module, "TextField", 0);
        }

        void t_TextField::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TextField).tp_dict, "class_", make_descriptor(TextField::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TextField).tp_dict, "wrapfn_", make_descriptor(t_TextField::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TextField).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(TextField::initializeClass);
          PyDict_SetItemString(PY_TYPE(TextField).tp_dict, "TYPE_NOT_STORED", make_descriptor(::org::apache::lucene::document::t_FieldType::wrap_Object(*TextField::TYPE_NOT_STORED)));
          PyDict_SetItemString(PY_TYPE(TextField).tp_dict, "TYPE_STORED", make_descriptor(::org::apache::lucene::document::t_FieldType::wrap_Object(*TextField::TYPE_STORED)));
        }

        static PyObject *t_TextField_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TextField::initializeClass, 1)))
            return NULL;
          return t_TextField::wrap_Object(TextField(((t_TextField *) arg)->object.this$));
        }
        static PyObject *t_TextField_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TextField::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_TextField_init_(t_TextField *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
              TextField object((jobject) NULL);

              if (!parseArgs(args, "sk", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1))
              {
                INT_CALL(object = TextField(a0, a1));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::io::Reader a1((jobject) NULL);
              TextField object((jobject) NULL);

              if (!parseArgs(args, "sk", ::java::io::Reader::initializeClass, &a0, &a1))
              {
                INT_CALL(object = TextField(a0, a1));
                self->object = object;
                break;
              }
            }
            goto err;
           case 3:
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              ::org::apache::lucene::document::Field$Store a2((jobject) NULL);
              PyTypeObject **p2;
              TextField object((jobject) NULL);

              if (!parseArgs(args, "ssK", ::org::apache::lucene::document::Field$Store::initializeClass, &a0, &a1, &a2, &p2, ::org::apache::lucene::document::t_Field$Store::parameters_))
              {
                INT_CALL(object = TextField(a0, a1, a2));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/parser/ParseException.h"
#include "java/lang/String.h"
#include "org/apache/lucene/queryparser/flexible/standard/parser/Token.h"
#include "org/apache/lucene/queryparser/flexible/messages/Message.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace parser {

              ::java::lang::Class *ParseException::class$ = NULL;
              jmethodID *ParseException::mids$ = NULL;
              jfieldID *ParseException::fids$ = NULL;
              bool ParseException::live$ = false;

              jclass ParseException::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/parser/ParseException");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_init$_1dde9d59] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/flexible/messages/Message;)V");
                  mids$[mid_init$_8fff18a5] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/flexible/standard/parser/Token;[[I[Ljava/lang/String;)V");

                  fids$ = new jfieldID[max_fid];
                  fids$[fid_currentToken] = env->getFieldID(cls, "currentToken", "Lorg/apache/lucene/queryparser/flexible/standard/parser/Token;");
                  fids$[fid_expectedTokenSequences] = env->getFieldID(cls, "expectedTokenSequences", "[[I");
                  fids$[fid_tokenImage] = env->getFieldID(cls, "tokenImage", "[Ljava/lang/String;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              ParseException::ParseException() : ::org::apache::lucene::queryparser::flexible::core::QueryNodeParseException(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              ParseException::ParseException(const ::org::apache::lucene::queryparser::flexible::messages::Message & a0) : ::org::apache::lucene::queryparser::flexible::core::QueryNodeParseException(env->newObject(initializeClass, &mids$, mid_init$_1dde9d59, a0.this$)) {}

              ParseException::ParseException(const ::org::apache::lucene::queryparser::flexible::standard::parser::Token & a0, const JArray< JArray< jint > > & a1, const JArray< ::java::lang::String > & a2) : ::org::apache::lucene::queryparser::flexible::core::QueryNodeParseException(env->newObject(initializeClass, &mids$, mid_init$_8fff18a5, a0.this$, a1.this$, a2.this$)) {}

              ::org::apache::lucene::queryparser::flexible::standard::parser::Token ParseException::_get_currentToken() const
              {
                return ::org::apache::lucene::queryparser::flexible::standard::parser::Token(env->getObjectField(this$, fids$[fid_currentToken]));
              }

              void ParseException::_set_currentToken(const ::org::apache::lucene::queryparser::flexible::standard::parser::Token & a0) const
              {
                env->setObjectField(this$, fids$[fid_currentToken], a0.this$);
              }

              JArray< JArray< jint > > ParseException::_get_expectedTokenSequences() const
              {
                return JArray< JArray< jint > >(env->getObjectField(this$, fids$[fid_expectedTokenSequences]));
              }

              void ParseException::_set_expectedTokenSequences(const JArray< JArray< jint > > & a0) const
              {
                env->setObjectField(this$, fids$[fid_expectedTokenSequences], a0.this$);
              }

              JArray< ::java::lang::String > ParseException::_get_tokenImage() const
              {
                return JArray< ::java::lang::String >(env->getObjectField(this$, fids$[fid_tokenImage]));
              }

              void ParseException::_set_tokenImage(const JArray< ::java::lang::String > & a0) const
              {
                env->setObjectField(this$, fids$[fid_tokenImage], a0.this$);
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace parser {
              static PyObject *t_ParseException_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_ParseException_instance_(PyTypeObject *type, PyObject *arg);
              static int t_ParseException_init_(t_ParseException *self, PyObject *args, PyObject *kwds);
              static PyObject *t_ParseException_get__currentToken(t_ParseException *self, void *data);
              static int t_ParseException_set__currentToken(t_ParseException *self, PyObject *arg, void *data);
              static PyObject *t_ParseException_get__expectedTokenSequences(t_ParseException *self, void *data);
              static int t_ParseException_set__expectedTokenSequences(t_ParseException *self, PyObject *arg, void *data);
              static PyObject *t_ParseException_get__tokenImage(t_ParseException *self, void *data);
              static int t_ParseException_set__tokenImage(t_ParseException *self, PyObject *arg, void *data);

              static PyGetSetDef t_ParseException__fields_[] = {
                DECLARE_GETSET_FIELD(t_ParseException, currentToken),
                DECLARE_GETSET_FIELD(t_ParseException, expectedTokenSequences),
                DECLARE_GETSET_FIELD(t_ParseException, tokenImage),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_ParseException__methods_[] = {
                DECLARE_METHOD(t_ParseException, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_ParseException, instance_, METH_O | METH_CLASS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(ParseException, t_ParseException, ::org::apache::lucene::queryparser::flexible::core::QueryNodeParseException, ParseException, t_ParseException_init_, 0, 0, t_ParseException__fields_, 0, 0);

              void t_ParseException::install(PyObject *module)
              {
                installType(&PY_TYPE(ParseException), module, "ParseException", 0);
              }

              void t_ParseException::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(ParseException).tp_dict, "class_", make_descriptor(ParseException::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(ParseException).tp_dict, "wrapfn_", make_descriptor(t_ParseException::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(ParseException).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_ParseException_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, ParseException::initializeClass, 1)))
                  return NULL;
                return t_ParseException::wrap_Object(ParseException(((t_ParseException *) arg)->object.this$));
              }
              static PyObject *t_ParseException_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, ParseException::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_ParseException_init_(t_ParseException *self, PyObject *args, PyObject *kwds)
              {
                switch (PyTuple_GET_SIZE(args)) {
                 case 0:
                  {
                    ParseException object((jobject) NULL);

                    INT_CALL(object = ParseException());
                    self->object = object;
                    break;
                  }
                  goto err;
                 case 1:
                  {
                    ::org::apache::lucene::queryparser::flexible::messages::Message a0((jobject) NULL);
                    ParseException object((jobject) NULL);

                    if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::messages::Message::initializeClass, &a0))
                    {
                      INT_CALL(object = ParseException(a0));
                      self->object = object;
                      break;
                    }
                  }
                  goto err;
                 case 3:
                  {
                    ::org::apache::lucene::queryparser::flexible::standard::parser::Token a0((jobject) NULL);
                    JArray< JArray< jint > > a1((jobject) NULL);
                    JArray< ::java::lang::String > a2((jobject) NULL);
                    ParseException object((jobject) NULL);

                    if (!parseArgs(args, "k[[I[s", ::org::apache::lucene::queryparser::flexible::standard::parser::Token::initializeClass, &a0, &a1, &a2))
                    {
                      INT_CALL(object = ParseException(a0, a1, a2));
                      self->object = object;
                      break;
                    }
                  }
                 default:
                 err:
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_ParseException_get__currentToken(t_ParseException *self, void *data)
              {
                ::org::apache::lucene::queryparser::flexible::standard::parser::Token value((jobject) NULL);
                OBJ_CALL(value = self->object._get_currentToken());
                return ::org::apache::lucene::queryparser::flexible::standard::parser::t_Token::wrap_Object(value);
              }
              static int t_ParseException_set__currentToken(t_ParseException *self, PyObject *arg, void *data)
              {
                ::org::apache::lucene::queryparser::flexible::standard::parser::Token value((jobject) NULL);
                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::standard::parser::Token::initializeClass, &value))
                {
                  INT_CALL(self->object._set_currentToken(value));
                  return 0;
                }
                PyErr_SetArgsError((PyObject *) self, "currentToken", arg);
                return -1;
              }

              static PyObject *t_ParseException_get__expectedTokenSequences(t_ParseException *self, void *data)
              {
                JArray< JArray< jint > > value((jobject) NULL);
                OBJ_CALL(value = self->object._get_expectedTokenSequences());
                return JArray<jobject>(value.this$).wrap(NULL);
              }
              static int t_ParseException_set__expectedTokenSequences(t_ParseException *self, PyObject *arg, void *data)
              {
                JArray< JArray< jint > > value((jobject) NULL);
                if (!parseArg(arg, "[[I", &value))
                {
                  INT_CALL(self->object._set_expectedTokenSequences(value));
                  return 0;
                }
                PyErr_SetArgsError((PyObject *) self, "expectedTokenSequences", arg);
                return -1;
              }

              static PyObject *t_ParseException_get__tokenImage(t_ParseException *self, void *data)
              {
                JArray< ::java::lang::String > value((jobject) NULL);
                OBJ_CALL(value = self->object._get_tokenImage());
                return JArray<jstring>(value.this$).wrap();
              }
              static int t_ParseException_set__tokenImage(t_ParseException *self, PyObject *arg, void *data)
              {
                JArray< ::java::lang::String > value((jobject) NULL);
                if (!parseArg(arg, "[s", &value))
                {
                  INT_CALL(self->object._set_tokenImage(value));
                  return 0;
                }
                PyErr_SetArgsError((PyObject *) self, "tokenImage", arg);
                return -1;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/xml/builders/UserInputQueryBuilder.h"
#include "org/apache/lucene/queryparser/xml/QueryBuilder.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/classic/QueryParser.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Query.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {

            ::java::lang::Class *UserInputQueryBuilder::class$ = NULL;
            jmethodID *UserInputQueryBuilder::mids$ = NULL;
            bool UserInputQueryBuilder::live$ = false;

            jclass UserInputQueryBuilder::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/xml/builders/UserInputQueryBuilder");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_3b88137f] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/classic/QueryParser;)V");
                mids$[mid_init$_d77cc89a] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/analysis/Analyzer;)V");
                mids$[mid_createQueryParser_0804498e] = env->getMethodID(cls, "createQueryParser", "(Ljava/lang/String;Lorg/apache/lucene/analysis/Analyzer;)Lorg/apache/lucene/queryparser/classic/QueryParser;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            UserInputQueryBuilder::UserInputQueryBuilder(const ::org::apache::lucene::queryparser::classic::QueryParser & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_3b88137f, a0.this$)) {}

            UserInputQueryBuilder::UserInputQueryBuilder(const ::java::lang::String & a0, const ::org::apache::lucene::analysis::Analyzer & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_d77cc89a, a0.this$, a1.this$)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {
            static PyObject *t_UserInputQueryBuilder_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_UserInputQueryBuilder_instance_(PyTypeObject *type, PyObject *arg);
            static int t_UserInputQueryBuilder_init_(t_UserInputQueryBuilder *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_UserInputQueryBuilder__methods_[] = {
              DECLARE_METHOD(t_UserInputQueryBuilder, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_UserInputQueryBuilder, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(UserInputQueryBuilder, t_UserInputQueryBuilder, ::java::lang::Object, UserInputQueryBuilder, t_UserInputQueryBuilder_init_, 0, 0, 0, 0, 0);

            void t_UserInputQueryBuilder::install(PyObject *module)
            {
              installType(&PY_TYPE(UserInputQueryBuilder), module, "UserInputQueryBuilder", 0);
            }

            void t_UserInputQueryBuilder::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(UserInputQueryBuilder).tp_dict, "class_", make_descriptor(UserInputQueryBuilder::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(UserInputQueryBuilder).tp_dict, "wrapfn_", make_descriptor(t_UserInputQueryBuilder::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(UserInputQueryBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_UserInputQueryBuilder_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, UserInputQueryBuilder::initializeClass, 1)))
                return NULL;
              return t_UserInputQueryBuilder::wrap_Object(UserInputQueryBuilder(((t_UserInputQueryBuilder *) arg)->object.this$));
            }
            static PyObject *t_UserInputQueryBuilder_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, UserInputQueryBuilder::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_UserInputQueryBuilder_init_(t_UserInputQueryBuilder *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 1:
                {
                  ::org::apache::lucene::queryparser::classic::QueryParser a0((jobject) NULL);
                  UserInputQueryBuilder object((jobject) NULL);

                  if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::classic::QueryParser::initializeClass, &a0))
                  {
                    INT_CALL(object = UserInputQueryBuilder(a0));
                    self->object = object;
                    break;
                  }
                }
                goto err;
               case 2:
                {
                  ::java::lang::String a0((jobject) NULL);
                  ::org::apache::lucene::analysis::Analyzer a1((jobject) NULL);
                  UserInputQueryBuilder object((jobject) NULL);

                  if (!parseArgs(args, "sk", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1))
                  {
                    INT_CALL(object = UserInputQueryBuilder(a0, a1));
                    self->object = object;
                    break;
                  }
                }
               default:
               err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/range/LongRangeCounter$LongRangeNode.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace range {

          ::java::lang::Class *LongRangeCounter$LongRangeNode::class$ = NULL;
          jmethodID *LongRangeCounter$LongRangeNode::mids$ = NULL;
          bool LongRangeCounter$LongRangeNode::live$ = false;

          jclass LongRangeCounter$LongRangeNode::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/range/LongRangeCounter$LongRangeNode");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_ec849fce] = env->getMethodID(cls, "<init>", "(JJLorg/apache/lucene/facet/range/LongRangeCounter$LongRangeNode;Lorg/apache/lucene/facet/range/LongRangeCounter$LongRangeNode;I)V");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          LongRangeCounter$LongRangeNode::LongRangeCounter$LongRangeNode(jlong a0, jlong a1, const LongRangeCounter$LongRangeNode & a2, const LongRangeCounter$LongRangeNode & a3, jint a4) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_ec849fce, a0, a1, a2.this$, a3.this$, a4)) {}

          ::java::lang::String LongRangeCounter$LongRangeNode::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace range {
          static PyObject *t_LongRangeCounter$LongRangeNode_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LongRangeCounter$LongRangeNode_instance_(PyTypeObject *type, PyObject *arg);
          static int t_LongRangeCounter$LongRangeNode_init_(t_LongRangeCounter$LongRangeNode *self, PyObject *args, PyObject *kwds);
          static PyObject *t_LongRangeCounter$LongRangeNode_toString(t_LongRangeCounter$LongRangeNode *self, PyObject *args);

          static PyMethodDef t_LongRangeCounter$LongRangeNode__methods_[] = {
            DECLARE_METHOD(t_LongRangeCounter$LongRangeNode, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LongRangeCounter$LongRangeNode, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LongRangeCounter$LongRangeNode, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(LongRangeCounter$LongRangeNode, t_LongRangeCounter$LongRangeNode, ::java::lang::Object, LongRangeCounter$LongRangeNode, t_LongRangeCounter$LongRangeNode_init_, 0, 0, 0, 0, 0);

          void t_LongRangeCounter$LongRangeNode::install(PyObject *module)
          {
            installType(&PY_TYPE(LongRangeCounter$LongRangeNode), module, "LongRangeCounter$LongRangeNode", 0);
          }

          void t_LongRangeCounter$LongRangeNode::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(LongRangeCounter$LongRangeNode).tp_dict, "class_", make_descriptor(LongRangeCounter$LongRangeNode::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(LongRangeCounter$LongRangeNode).tp_dict, "wrapfn_", make_descriptor(t_LongRangeCounter$LongRangeNode::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(LongRangeCounter$LongRangeNode).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_LongRangeCounter$LongRangeNode_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LongRangeCounter$LongRangeNode::initializeClass, 1)))
              return NULL;
            return t_LongRangeCounter$LongRangeNode::wrap_Object(LongRangeCounter$LongRangeNode(((t_LongRangeCounter$LongRangeNode *) arg)->object.this$));
          }
          static PyObject *t_LongRangeCounter$LongRangeNode_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LongRangeCounter$LongRangeNode::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_LongRangeCounter$LongRangeNode_init_(t_LongRangeCounter$LongRangeNode *self, PyObject *args, PyObject *kwds)
          {
            jlong a0;
            jlong a1;
            LongRangeCounter$LongRangeNode a2((jobject) NULL);
            LongRangeCounter$LongRangeNode a3((jobject) NULL);
            jint a4;
            LongRangeCounter$LongRangeNode object((jobject) NULL);

            if (!parseArgs(args, "JJkkI", LongRangeCounter$LongRangeNode::initializeClass, LongRangeCounter$LongRangeNode::initializeClass, &a0, &a1, &a2, &a3, &a4))
            {
              INT_CALL(object = LongRangeCounter$LongRangeNode(a0, a1, a2, a3, a4));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_LongRangeCounter$LongRangeNode_toString(t_LongRangeCounter$LongRangeNode *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(LongRangeCounter$LongRangeNode), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/FunctionValues$ValueFiller.h"
#include "org/apache/lucene/util/mutable/MutableValue.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {

          ::java::lang::Class *FunctionValues$ValueFiller::class$ = NULL;
          jmethodID *FunctionValues$ValueFiller::mids$ = NULL;
          bool FunctionValues$ValueFiller::live$ = false;

          jclass FunctionValues$ValueFiller::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/FunctionValues$ValueFiller");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_fillValue_39c7bd3c] = env->getMethodID(cls, "fillValue", "(I)V");
              mids$[mid_getValue_15ab3811] = env->getMethodID(cls, "getValue", "()Lorg/apache/lucene/util/mutable/MutableValue;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FunctionValues$ValueFiller::FunctionValues$ValueFiller() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          void FunctionValues$ValueFiller::fillValue(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_fillValue_39c7bd3c], a0);
          }

          ::org::apache::lucene::util::mutable$::MutableValue FunctionValues$ValueFiller::getValue() const
          {
            return ::org::apache::lucene::util::mutable$::MutableValue(env->callObjectMethod(this$, mids$[mid_getValue_15ab3811]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          static PyObject *t_FunctionValues$ValueFiller_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FunctionValues$ValueFiller_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FunctionValues$ValueFiller_init_(t_FunctionValues$ValueFiller *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FunctionValues$ValueFiller_fillValue(t_FunctionValues$ValueFiller *self, PyObject *arg);
          static PyObject *t_FunctionValues$ValueFiller_getValue(t_FunctionValues$ValueFiller *self);
          static PyObject *t_FunctionValues$ValueFiller_get__value(t_FunctionValues$ValueFiller *self, void *data);
          static PyGetSetDef t_FunctionValues$ValueFiller__fields_[] = {
            DECLARE_GET_FIELD(t_FunctionValues$ValueFiller, value),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_FunctionValues$ValueFiller__methods_[] = {
            DECLARE_METHOD(t_FunctionValues$ValueFiller, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FunctionValues$ValueFiller, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FunctionValues$ValueFiller, fillValue, METH_O),
            DECLARE_METHOD(t_FunctionValues$ValueFiller, getValue, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FunctionValues$ValueFiller, t_FunctionValues$ValueFiller, ::java::lang::Object, FunctionValues$ValueFiller, t_FunctionValues$ValueFiller_init_, 0, 0, t_FunctionValues$ValueFiller__fields_, 0, 0);

          void t_FunctionValues$ValueFiller::install(PyObject *module)
          {
            installType(&PY_TYPE(FunctionValues$ValueFiller), module, "FunctionValues$ValueFiller", 0);
          }

          void t_FunctionValues$ValueFiller::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FunctionValues$ValueFiller).tp_dict, "class_", make_descriptor(FunctionValues$ValueFiller::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FunctionValues$ValueFiller).tp_dict, "wrapfn_", make_descriptor(t_FunctionValues$ValueFiller::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FunctionValues$ValueFiller).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FunctionValues$ValueFiller_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FunctionValues$ValueFiller::initializeClass, 1)))
              return NULL;
            return t_FunctionValues$ValueFiller::wrap_Object(FunctionValues$ValueFiller(((t_FunctionValues$ValueFiller *) arg)->object.this$));
          }
          static PyObject *t_FunctionValues$ValueFiller_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FunctionValues$ValueFiller::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FunctionValues$ValueFiller_init_(t_FunctionValues$ValueFiller *self, PyObject *args, PyObject *kwds)
          {
            FunctionValues$ValueFiller object((jobject) NULL);

            INT_CALL(object = FunctionValues$ValueFiller());
            self->object = object;

            return 0;
          }

          static PyObject *t_FunctionValues$ValueFiller_fillValue(t_FunctionValues$ValueFiller *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.fillValue(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "fillValue", arg);
            return NULL;
          }

          static PyObject *t_FunctionValues$ValueFiller_getValue(t_FunctionValues$ValueFiller *self)
          {
            ::org::apache::lucene::util::mutable$::MutableValue result((jobject) NULL);
            OBJ_CALL(result = self->object.getValue());
            return ::org::apache::lucene::util::mutable$::t_MutableValue::wrap_Object(result);
          }

          static PyObject *t_FunctionValues$ValueFiller_get__value(t_FunctionValues$ValueFiller *self, void *data)
          {
            ::org::apache::lucene::util::mutable$::MutableValue value((jobject) NULL);
            OBJ_CALL(value = self->object.getValue());
            return ::org::apache::lucene::util::mutable$::t_MutableValue::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/collation/CollationKeyFilter.h"
#include "java/io/IOException.h"
#include "java/text/Collator.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace collation {

        ::java::lang::Class *CollationKeyFilter::class$ = NULL;
        jmethodID *CollationKeyFilter::mids$ = NULL;
        bool CollationKeyFilter::live$ = false;

        jclass CollationKeyFilter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/collation/CollationKeyFilter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_9b6c8506] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;Ljava/text/Collator;)V");
            mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        CollationKeyFilter::CollationKeyFilter(const ::org::apache::lucene::analysis::TokenStream & a0, const ::java::text::Collator & a1) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_9b6c8506, a0.this$, a1.this$)) {}

        jboolean CollationKeyFilter::incrementToken() const
        {
          return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace collation {
        static PyObject *t_CollationKeyFilter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CollationKeyFilter_instance_(PyTypeObject *type, PyObject *arg);
        static int t_CollationKeyFilter_init_(t_CollationKeyFilter *self, PyObject *args, PyObject *kwds);
        static PyObject *t_CollationKeyFilter_incrementToken(t_CollationKeyFilter *self, PyObject *args);

        static PyMethodDef t_CollationKeyFilter__methods_[] = {
          DECLARE_METHOD(t_CollationKeyFilter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CollationKeyFilter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CollationKeyFilter, incrementToken, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(CollationKeyFilter, t_CollationKeyFilter, ::org::apache::lucene::analysis::TokenFilter, CollationKeyFilter, t_CollationKeyFilter_init_, 0, 0, 0, 0, 0);

        void t_CollationKeyFilter::install(PyObject *module)
        {
          installType(&PY_TYPE(CollationKeyFilter), module, "CollationKeyFilter", 0);
        }

        void t_CollationKeyFilter::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(CollationKeyFilter).tp_dict, "class_", make_descriptor(CollationKeyFilter::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(CollationKeyFilter).tp_dict, "wrapfn_", make_descriptor(t_CollationKeyFilter::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(CollationKeyFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_CollationKeyFilter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CollationKeyFilter::initializeClass, 1)))
            return NULL;
          return t_CollationKeyFilter::wrap_Object(CollationKeyFilter(((t_CollationKeyFilter *) arg)->object.this$));
        }
        static PyObject *t_CollationKeyFilter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CollationKeyFilter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_CollationKeyFilter_init_(t_CollationKeyFilter *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
          ::java::text::Collator a1((jobject) NULL);
          CollationKeyFilter object((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::analysis::TokenStream::initializeClass, ::java::text::Collator::initializeClass, &a0, &a1))
          {
            INT_CALL(object = CollationKeyFilter(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_CollationKeyFilter_incrementToken(t_CollationKeyFilter *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.incrementToken());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(CollationKeyFilter), (PyObject *) self, "incrementToken", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/fr/FrenchStemFilter.h"
#include "org/apache/lucene/analysis/fr/FrenchStemmer.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fr {

          ::java::lang::Class *FrenchStemFilter::class$ = NULL;
          jmethodID *FrenchStemFilter::mids$ = NULL;
          bool FrenchStemFilter::live$ = false;

          jclass FrenchStemFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/fr/FrenchStemFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_setStemmer_d53125fa] = env->getMethodID(cls, "setStemmer", "(Lorg/apache/lucene/analysis/fr/FrenchStemmer;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FrenchStemFilter::FrenchStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean FrenchStemFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void FrenchStemFilter::setStemmer(const ::org::apache::lucene::analysis::fr::FrenchStemmer & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setStemmer_d53125fa], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fr {
          static PyObject *t_FrenchStemFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FrenchStemFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FrenchStemFilter_init_(t_FrenchStemFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FrenchStemFilter_incrementToken(t_FrenchStemFilter *self, PyObject *args);
          static PyObject *t_FrenchStemFilter_setStemmer(t_FrenchStemFilter *self, PyObject *arg);
          static int t_FrenchStemFilter_set__stemmer(t_FrenchStemFilter *self, PyObject *arg, void *data);
          static PyGetSetDef t_FrenchStemFilter__fields_[] = {
            DECLARE_SET_FIELD(t_FrenchStemFilter, stemmer),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_FrenchStemFilter__methods_[] = {
            DECLARE_METHOD(t_FrenchStemFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FrenchStemFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FrenchStemFilter, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_FrenchStemFilter, setStemmer, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FrenchStemFilter, t_FrenchStemFilter, ::org::apache::lucene::analysis::TokenFilter, FrenchStemFilter, t_FrenchStemFilter_init_, 0, 0, t_FrenchStemFilter__fields_, 0, 0);

          void t_FrenchStemFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(FrenchStemFilter), module, "FrenchStemFilter", 0);
          }

          void t_FrenchStemFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FrenchStemFilter).tp_dict, "class_", make_descriptor(FrenchStemFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FrenchStemFilter).tp_dict, "wrapfn_", make_descriptor(t_FrenchStemFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FrenchStemFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FrenchStemFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FrenchStemFilter::initializeClass, 1)))
              return NULL;
            return t_FrenchStemFilter::wrap_Object(FrenchStemFilter(((t_FrenchStemFilter *) arg)->object.this$));
          }
          static PyObject *t_FrenchStemFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FrenchStemFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FrenchStemFilter_init_(t_FrenchStemFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            FrenchStemFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = FrenchStemFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_FrenchStemFilter_incrementToken(t_FrenchStemFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(FrenchStemFilter), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_FrenchStemFilter_setStemmer(t_FrenchStemFilter *self, PyObject *arg)
          {
            ::org::apache::lucene::analysis::fr::FrenchStemmer a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::analysis::fr::FrenchStemmer::initializeClass, &a0))
            {
              OBJ_CALL(self->object.setStemmer(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setStemmer", arg);
            return NULL;
          }

          static int t_FrenchStemFilter_set__stemmer(t_FrenchStemFilter *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::analysis::fr::FrenchStemmer value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::analysis::fr::FrenchStemmer::initializeClass, &value))
              {
                INT_CALL(self->object.setStemmer(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "stemmer", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/SortedDocValues.h"
#include "org/apache/lucene/index/TermsEnum.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *SortedDocValues::class$ = NULL;
        jmethodID *SortedDocValues::mids$ = NULL;
        bool SortedDocValues::live$ = false;

        jclass SortedDocValues::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/SortedDocValues");

            mids$ = new jmethodID[max_mid];
            mids$[mid_get_b57e9c3f] = env->getMethodID(cls, "get", "(I)Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_getOrd_39c7bd23] = env->getMethodID(cls, "getOrd", "(I)I");
            mids$[mid_getValueCount_54c6a179] = env->getMethodID(cls, "getValueCount", "()I");
            mids$[mid_lookupOrd_b57e9c3f] = env->getMethodID(cls, "lookupOrd", "(I)Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_lookupTerm_7bc03ddb] = env->getMethodID(cls, "lookupTerm", "(Lorg/apache/lucene/util/BytesRef;)I");
            mids$[mid_termsEnum_ea7afd9f] = env->getMethodID(cls, "termsEnum", "()Lorg/apache/lucene/index/TermsEnum;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::util::BytesRef SortedDocValues::get(jint a0) const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_get_b57e9c3f], a0));
        }

        jint SortedDocValues::getOrd(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_getOrd_39c7bd23], a0);
        }

        jint SortedDocValues::getValueCount() const
        {
          return env->callIntMethod(this$, mids$[mid_getValueCount_54c6a179]);
        }

        ::org::apache::lucene::util::BytesRef SortedDocValues::lookupOrd(jint a0) const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_lookupOrd_b57e9c3f], a0));
        }

        jint SortedDocValues::lookupTerm(const ::org::apache::lucene::util::BytesRef & a0) const
        {
          return env->callIntMethod(this$, mids$[mid_lookupTerm_7bc03ddb], a0.this$);
        }

        ::org::apache::lucene::index::TermsEnum SortedDocValues::termsEnum() const
        {
          return ::org::apache::lucene::index::TermsEnum(env->callObjectMethod(this$, mids$[mid_termsEnum_ea7afd9f]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_SortedDocValues_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SortedDocValues_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SortedDocValues_get(t_SortedDocValues *self, PyObject *args);
        static PyObject *t_SortedDocValues_getOrd(t_SortedDocValues *self, PyObject *arg);
        static PyObject *t_SortedDocValues_getValueCount(t_SortedDocValues *self);
        static PyObject *t_SortedDocValues_lookupOrd(t_SortedDocValues *self, PyObject *arg);
        static PyObject *t_SortedDocValues_lookupTerm(t_SortedDocValues *self, PyObject *arg);
        static PyObject *t_SortedDocValues_termsEnum(t_SortedDocValues *self);
        static PyObject *t_SortedDocValues_get__valueCount(t_SortedDocValues *self, void *data);
        static PyGetSetDef t_SortedDocValues__fields_[] = {
          DECLARE_GET_FIELD(t_SortedDocValues, valueCount),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_SortedDocValues__methods_[] = {
          DECLARE_METHOD(t_SortedDocValues, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SortedDocValues, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SortedDocValues, get, METH_VARARGS),
          DECLARE_METHOD(t_SortedDocValues, getOrd, METH_O),
          DECLARE_METHOD(t_SortedDocValues, getValueCount, METH_NOARGS),
          DECLARE_METHOD(t_SortedDocValues, lookupOrd, METH_O),
          DECLARE_METHOD(t_SortedDocValues, lookupTerm, METH_O),
          DECLARE_METHOD(t_SortedDocValues, termsEnum, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SortedDocValues, t_SortedDocValues, ::org::apache::lucene::index::BinaryDocValues, SortedDocValues, abstract_init, 0, 0, t_SortedDocValues__fields_, 0, 0);

        void t_SortedDocValues::install(PyObject *module)
        {
          installType(&PY_TYPE(SortedDocValues), module, "SortedDocValues", 0);
        }

        void t_SortedDocValues::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SortedDocValues).tp_dict, "class_", make_descriptor(SortedDocValues::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SortedDocValues).tp_dict, "wrapfn_", make_descriptor(t_SortedDocValues::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SortedDocValues).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SortedDocValues_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SortedDocValues::initializeClass, 1)))
            return NULL;
          return t_SortedDocValues::wrap_Object(SortedDocValues(((t_SortedDocValues *) arg)->object.this$));
        }
        static PyObject *t_SortedDocValues_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SortedDocValues::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_SortedDocValues_get(t_SortedDocValues *self, PyObject *args)
        {
          jint a0;
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.get(a0));
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(SortedDocValues), (PyObject *) self, "get", args, 2);
        }

        static PyObject *t_SortedDocValues_getOrd(t_SortedDocValues *self, PyObject *arg)
        {
          jint a0;
          jint result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.getOrd(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "getOrd", arg);
          return NULL;
        }

        static PyObject *t_SortedDocValues_getValueCount(t_SortedDocValues *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getValueCount());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_SortedDocValues_lookupOrd(t_SortedDocValues *self, PyObject *arg)
        {
          jint a0;
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.lookupOrd(a0));
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "lookupOrd", arg);
          return NULL;
        }

        static PyObject *t_SortedDocValues_lookupTerm(t_SortedDocValues *self, PyObject *arg)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          jint result;

          if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.lookupTerm(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "lookupTerm", arg);
          return NULL;
        }

        static PyObject *t_SortedDocValues_termsEnum(t_SortedDocValues *self)
        {
          ::org::apache::lucene::index::TermsEnum result((jobject) NULL);
          OBJ_CALL(result = self->object.termsEnum());
          return ::org::apache::lucene::index::t_TermsEnum::wrap_Object(result);
        }

        static PyObject *t_SortedDocValues_get__valueCount(t_SortedDocValues *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getValueCount());
          return PyInt_FromLong((long) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FieldDoc.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FieldDoc::class$ = NULL;
        jmethodID *FieldDoc::mids$ = NULL;
        jfieldID *FieldDoc::fids$ = NULL;
        bool FieldDoc::live$ = false;

        jclass FieldDoc::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FieldDoc");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_abdf2c51] = env->getMethodID(cls, "<init>", "(IF)V");
            mids$[mid_init$_8f5d1bf7] = env->getMethodID(cls, "<init>", "(IF[Ljava/lang/Object;)V");
            mids$[mid_init$_87a6361f] = env->getMethodID(cls, "<init>", "(IF[Ljava/lang/Object;I)V");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            fids$ = new jfieldID[max_fid];
            fids$[fid_fields] = env->getFieldID(cls, "fields", "[Ljava/lang/Object;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FieldDoc::FieldDoc(jint a0, jfloat a1) : ::org::apache::lucene::search::ScoreDoc(env->newObject(initializeClass, &mids$, mid_init$_abdf2c51, a0, a1)) {}

        FieldDoc::FieldDoc(jint a0, jfloat a1, const JArray< ::java::lang::Object > & a2) : ::org::apache::lucene::search::ScoreDoc(env->newObject(initializeClass, &mids$, mid_init$_8f5d1bf7, a0, a1, a2.this$)) {}

        FieldDoc::FieldDoc(jint a0, jfloat a1, const JArray< ::java::lang::Object > & a2, jint a3) : ::org::apache::lucene::search::ScoreDoc(env->newObject(initializeClass, &mids$, mid_init$_87a6361f, a0, a1, a2.this$, a3)) {}

        ::java::lang::String FieldDoc::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }

        JArray< ::java::lang::Object > FieldDoc::_get_fields() const
        {
          return JArray< ::java::lang::Object >(env->getObjectField(this$, fids$[fid_fields]));
        }

        void FieldDoc::_set_fields(const JArray< ::java::lang::Object > & a0) const
        {
          env->setObjectField(this$, fids$[fid_fields], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FieldDoc_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldDoc_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FieldDoc_init_(t_FieldDoc *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FieldDoc_toString(t_FieldDoc *self, PyObject *args);
        static PyObject *t_FieldDoc_get__fields(t_FieldDoc *self, void *data);
        static int t_FieldDoc_set__fields(t_FieldDoc *self, PyObject *arg, void *data);

        static PyGetSetDef t_FieldDoc__fields_[] = {
          DECLARE_GETSET_FIELD(t_FieldDoc, fields),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FieldDoc__methods_[] = {
          DECLARE_METHOD(t_FieldDoc, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldDoc, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldDoc, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldDoc, t_FieldDoc, ::org::apache::lucene::search::ScoreDoc, FieldDoc, t_FieldDoc_init_, 0, 0, t_FieldDoc__fields_, 0, 0);

        void t_FieldDoc::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldDoc), module, "FieldDoc", 0);
        }

        void t_FieldDoc::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldDoc).tp_dict, "class_", make_descriptor(FieldDoc::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldDoc).tp_dict, "wrapfn_", make_descriptor(t_FieldDoc::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldDoc).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldDoc_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldDoc::initializeClass, 1)))
            return NULL;
          return t_FieldDoc::wrap_Object(FieldDoc(((t_FieldDoc *) arg)->object.this$));
        }
        static PyObject *t_FieldDoc_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldDoc::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FieldDoc_init_(t_FieldDoc *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              jint a0;
              jfloat a1;
              FieldDoc object((jobject) NULL);

              if (!parseArgs(args, "IF", &a0, &a1))
              {
                INT_CALL(object = FieldDoc(a0, a1));
                self->object = object;
                break;
              }
            }
            goto err;
           case 3:
            {
              jint a0;
              jfloat a1;
              JArray< ::java::lang::Object > a2((jobject) NULL);
              FieldDoc object((jobject) NULL);

              if (!parseArgs(args, "IF[o", &a0, &a1, &a2))
              {
                INT_CALL(object = FieldDoc(a0, a1, a2));
                self->object = object;
                break;
              }
            }
            goto err;
           case 4:
            {
              jint a0;
              jfloat a1;
              JArray< ::java::lang::Object > a2((jobject) NULL);
              jint a3;
              FieldDoc object((jobject) NULL);

              if (!parseArgs(args, "IF[oI", &a0, &a1, &a2, &a3))
              {
                INT_CALL(object = FieldDoc(a0, a1, a2, a3));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FieldDoc_toString(t_FieldDoc *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(FieldDoc), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_FieldDoc_get__fields(t_FieldDoc *self, void *data)
        {
          JArray< ::java::lang::Object > value((jobject) NULL);
          OBJ_CALL(value = self->object._get_fields());
          return JArray<jobject>(value.this$).wrap(::java::lang::t_Object::wrap_jobject);
        }
        static int t_FieldDoc_set__fields(t_FieldDoc *self, PyObject *arg, void *data)
        {
          JArray< ::java::lang::Object > value((jobject) NULL);
          if (!parseArg(arg, "[o", &value))
          {
            INT_CALL(self->object._set_fields(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "fields", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/WAH8DocIdSet.h"
#include "java/util/Collection.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *WAH8DocIdSet::class$ = NULL;
        jmethodID *WAH8DocIdSet::mids$ = NULL;
        bool WAH8DocIdSet::live$ = false;
        jint WAH8DocIdSet::DEFAULT_INDEX_INTERVAL = (jint) 0;

        jclass WAH8DocIdSet::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/WAH8DocIdSet");

            mids$ = new jmethodID[max_mid];
            mids$[mid_cardinality_54c6a179] = env->getMethodID(cls, "cardinality", "()I");
            mids$[mid_intersect_b06562c3] = env->getStaticMethodID(cls, "intersect", "(Ljava/util/Collection;)Lorg/apache/lucene/util/WAH8DocIdSet;");
            mids$[mid_intersect_8ad105f3] = env->getStaticMethodID(cls, "intersect", "(Ljava/util/Collection;I)Lorg/apache/lucene/util/WAH8DocIdSet;");
            mids$[mid_isCacheable_54c6a16a] = env->getMethodID(cls, "isCacheable", "()Z");
            mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");
            mids$[mid_union_b06562c3] = env->getStaticMethodID(cls, "union", "(Ljava/util/Collection;)Lorg/apache/lucene/util/WAH8DocIdSet;");
            mids$[mid_union_8ad105f3] = env->getStaticMethodID(cls, "union", "(Ljava/util/Collection;I)Lorg/apache/lucene/util/WAH8DocIdSet;");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            DEFAULT_INDEX_INTERVAL = env->getStaticIntField(cls, "DEFAULT_INDEX_INTERVAL");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jint WAH8DocIdSet::cardinality() const
        {
          return env->callIntMethod(this$, mids$[mid_cardinality_54c6a179]);
        }

        WAH8DocIdSet WAH8DocIdSet::intersect(const ::java::util::Collection & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return WAH8DocIdSet(env->callStaticObjectMethod(cls, mids$[mid_intersect_b06562c3], a0.this$));
        }

        WAH8DocIdSet WAH8DocIdSet::intersect(const ::java::util::Collection & a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return WAH8DocIdSet(env->callStaticObjectMethod(cls, mids$[mid_intersect_8ad105f3], a0.this$, a1));
        }

        jboolean WAH8DocIdSet::isCacheable() const
        {
          return env->callBooleanMethod(this$, mids$[mid_isCacheable_54c6a16a]);
        }

        jlong WAH8DocIdSet::ramBytesUsed() const
        {
          return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
        }

        WAH8DocIdSet WAH8DocIdSet::union$(const ::java::util::Collection & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return WAH8DocIdSet(env->callStaticObjectMethod(cls, mids$[mid_union_b06562c3], a0.this$));
        }

        WAH8DocIdSet WAH8DocIdSet::union$(const ::java::util::Collection & a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return WAH8DocIdSet(env->callStaticObjectMethod(cls, mids$[mid_union_8ad105f3], a0.this$, a1));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/util/WAH8DocIdSet$Builder.h"
#include "org/apache/lucene/util/WAH8DocIdSet$WordBuilder.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_WAH8DocIdSet_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_WAH8DocIdSet_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_WAH8DocIdSet_cardinality(t_WAH8DocIdSet *self);
        static PyObject *t_WAH8DocIdSet_intersect(PyTypeObject *type, PyObject *args);
        static PyObject *t_WAH8DocIdSet_isCacheable(t_WAH8DocIdSet *self, PyObject *args);
        static PyObject *t_WAH8DocIdSet_ramBytesUsed(t_WAH8DocIdSet *self, PyObject *args);
        static PyObject *t_WAH8DocIdSet_union(PyTypeObject *type, PyObject *args);
        static PyObject *t_WAH8DocIdSet_get__cacheable(t_WAH8DocIdSet *self, void *data);
        static PyGetSetDef t_WAH8DocIdSet__fields_[] = {
          DECLARE_GET_FIELD(t_WAH8DocIdSet, cacheable),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_WAH8DocIdSet__methods_[] = {
          DECLARE_METHOD(t_WAH8DocIdSet, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_WAH8DocIdSet, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_WAH8DocIdSet, cardinality, METH_NOARGS),
          DECLARE_METHOD(t_WAH8DocIdSet, intersect, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_WAH8DocIdSet, isCacheable, METH_VARARGS),
          DECLARE_METHOD(t_WAH8DocIdSet, ramBytesUsed, METH_VARARGS),
          DECLARE_METHOD(t_WAH8DocIdSet, union, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(WAH8DocIdSet, t_WAH8DocIdSet, ::org::apache::lucene::search::DocIdSet, WAH8DocIdSet, abstract_init, 0, 0, t_WAH8DocIdSet__fields_, 0, 0);

        void t_WAH8DocIdSet::install(PyObject *module)
        {
          installType(&PY_TYPE(WAH8DocIdSet), module, "WAH8DocIdSet", 0);
          PyDict_SetItemString(PY_TYPE(WAH8DocIdSet).tp_dict, "Builder", make_descriptor(&PY_TYPE(WAH8DocIdSet$Builder)));
          PyDict_SetItemString(PY_TYPE(WAH8DocIdSet).tp_dict, "WordBuilder", make_descriptor(&PY_TYPE(WAH8DocIdSet$WordBuilder)));
        }

        void t_WAH8DocIdSet::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(WAH8DocIdSet).tp_dict, "class_", make_descriptor(WAH8DocIdSet::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(WAH8DocIdSet).tp_dict, "wrapfn_", make_descriptor(t_WAH8DocIdSet::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(WAH8DocIdSet).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(WAH8DocIdSet::initializeClass);
          PyDict_SetItemString(PY_TYPE(WAH8DocIdSet).tp_dict, "DEFAULT_INDEX_INTERVAL", make_descriptor(WAH8DocIdSet::DEFAULT_INDEX_INTERVAL));
        }

        static PyObject *t_WAH8DocIdSet_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, WAH8DocIdSet::initializeClass, 1)))
            return NULL;
          return t_WAH8DocIdSet::wrap_Object(WAH8DocIdSet(((t_WAH8DocIdSet *) arg)->object.this$));
        }
        static PyObject *t_WAH8DocIdSet_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, WAH8DocIdSet::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_WAH8DocIdSet_cardinality(t_WAH8DocIdSet *self)
        {
          jint result;
          OBJ_CALL(result = self->object.cardinality());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_WAH8DocIdSet_intersect(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::util::Collection a0((jobject) NULL);
              PyTypeObject **p0;
              WAH8DocIdSet result((jobject) NULL);

              if (!parseArgs(args, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::WAH8DocIdSet::intersect(a0));
                return t_WAH8DocIdSet::wrap_Object(result);
              }
            }
            break;
           case 2:
            {
              ::java::util::Collection a0((jobject) NULL);
              PyTypeObject **p0;
              jint a1;
              WAH8DocIdSet result((jobject) NULL);

              if (!parseArgs(args, "KI", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::WAH8DocIdSet::intersect(a0, a1));
                return t_WAH8DocIdSet::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError(type, "intersect", args);
          return NULL;
        }

        static PyObject *t_WAH8DocIdSet_isCacheable(t_WAH8DocIdSet *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.isCacheable());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(WAH8DocIdSet), (PyObject *) self, "isCacheable", args, 2);
        }

        static PyObject *t_WAH8DocIdSet_ramBytesUsed(t_WAH8DocIdSet *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.ramBytesUsed());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(WAH8DocIdSet), (PyObject *) self, "ramBytesUsed", args, 2);
        }

        static PyObject *t_WAH8DocIdSet_union(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::util::Collection a0((jobject) NULL);
              PyTypeObject **p0;
              WAH8DocIdSet result((jobject) NULL);

              if (!parseArgs(args, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::WAH8DocIdSet::union$(a0));
                return t_WAH8DocIdSet::wrap_Object(result);
              }
            }
            break;
           case 2:
            {
              ::java::util::Collection a0((jobject) NULL);
              PyTypeObject **p0;
              jint a1;
              WAH8DocIdSet result((jobject) NULL);

              if (!parseArgs(args, "KI", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::WAH8DocIdSet::union$(a0, a1));
                return t_WAH8DocIdSet::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError(type, "union", args);
          return NULL;
        }

        static PyObject *t_WAH8DocIdSet_get__cacheable(t_WAH8DocIdSet *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.isCacheable());
          Py_RETURN_BOOL(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/lang/Thread.h"
#include "java/lang/Runnable.h"
#include "java/lang/Class.h"
#include "java/lang/StackTraceElement.h"
#include "java/lang/Thread$State.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/Thread$UncaughtExceptionHandler.h"
#include "java/lang/Throwable.h"
#include "java/lang/ClassLoader.h"
#include "java/lang/String.h"
#include "java/lang/ThreadGroup.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace java {
  namespace lang {

    ::java::lang::Class *Thread::class$ = NULL;
    jmethodID *Thread::mids$ = NULL;
    bool Thread::live$ = false;
    jint Thread::MAX_PRIORITY = (jint) 0;
    jint Thread::MIN_PRIORITY = (jint) 0;
    jint Thread::NORM_PRIORITY = (jint) 0;

    jclass Thread::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/lang/Thread");

        mids$ = new jmethodID[max_mid];
        mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
        mids$[mid_init$_db86d7e2] = env->getMethodID(cls, "<init>", "(Ljava/lang/Runnable;)V");
        mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
        mids$[mid_init$_749aa364] = env->getMethodID(cls, "<init>", "(Ljava/lang/Runnable;Ljava/lang/String;)V");
        mids$[mid_init$_88a58d93] = env->getMethodID(cls, "<init>", "(Ljava/lang/ThreadGroup;Ljava/lang/String;)V");
        mids$[mid_init$_684615b9] = env->getMethodID(cls, "<init>", "(Ljava/lang/ThreadGroup;Ljava/lang/Runnable;)V");
        mids$[mid_init$_5db621bb] = env->getMethodID(cls, "<init>", "(Ljava/lang/ThreadGroup;Ljava/lang/Runnable;Ljava/lang/String;)V");
        mids$[mid_init$_57d87d50] = env->getMethodID(cls, "<init>", "(Ljava/lang/ThreadGroup;Ljava/lang/Runnable;Ljava/lang/String;J)V");
        mids$[mid_activeCount_54c6a179] = env->getStaticMethodID(cls, "activeCount", "()I");
        mids$[mid_checkAccess_54c6a166] = env->getMethodID(cls, "checkAccess", "()V");
        mids$[mid_countStackFrames_54c6a179] = env->getMethodID(cls, "countStackFrames", "()I");
        mids$[mid_currentThread_88082f50] = env->getStaticMethodID(cls, "currentThread", "()Ljava/lang/Thread;");
        mids$[mid_destroy_54c6a166] = env->getMethodID(cls, "destroy", "()V");
        mids$[mid_dumpStack_54c6a166] = env->getStaticMethodID(cls, "dumpStack", "()V");
        mids$[mid_enumerate_9e0743ee] = env->getStaticMethodID(cls, "enumerate", "([Ljava/lang/Thread;)I");
        mids$[mid_getAllStackTraces_db60befd] = env->getStaticMethodID(cls, "getAllStackTraces", "()Ljava/util/Map;");
        mids$[mid_getContextClassLoader_8d2f11fc] = env->getMethodID(cls, "getContextClassLoader", "()Ljava/lang/ClassLoader;");
        mids$[mid_getDefaultUncaughtExceptionHandler_a65feb9b] = env->getStaticMethodID(cls, "getDefaultUncaughtExceptionHandler", "()Ljava/lang/Thread$UncaughtExceptionHandler;");
        mids$[mid_getId_54c6a17a] = env->getMethodID(cls, "getId", "()J");
        mids$[mid_getName_14c7b5c5] = env->getMethodID(cls, "getName", "()Ljava/lang/String;");
        mids$[mid_getPriority_54c6a179] = env->getMethodID(cls, "getPriority", "()I");
        mids$[mid_getStackTrace_25f1f6aa] = env->getMethodID(cls, "getStackTrace", "()[Ljava/lang/StackTraceElement;");
        mids$[mid_getState_bbff3c63] = env->getMethodID(cls, "getState", "()Ljava/lang/Thread$State;");
        mids$[mid_getThreadGroup_172b52b4] = env->getMethodID(cls, "getThreadGroup", "()Ljava/lang/ThreadGroup;");
        mids$[mid_getUncaughtExceptionHandler_a65feb9b] = env->getMethodID(cls, "getUncaughtExceptionHandler", "()Ljava/lang/Thread$UncaughtExceptionHandler;");
        mids$[mid_holdsLock_290588e2] = env->getStaticMethodID(cls, "holdsLock", "(Ljava/lang/Object;)Z");
        mids$[mid_interrupt_54c6a166] = env->getMethodID(cls, "interrupt", "()V");
        mids$[mid_interrupted_54c6a16a] = env->getStaticMethodID(cls, "interrupted", "()Z");
        mids$[mid_isAlive_54c6a16a] = env->getMethodID(cls, "isAlive", "()Z");
        mids$[mid_isDaemon_54c6a16a] = env->getMethodID(cls, "isDaemon", "()Z");
        mids$[mid_isInterrupted_54c6a16a] = env->getMethodID(cls, "isInterrupted", "()Z");
        mids$[mid_join_54c6a166] = env->getMethodID(cls, "join", "()V");
        mids$[mid_join_0ee6df2f] = env->getMethodID(cls, "join", "(J)V");
        mids$[mid_join_25d05c8f] = env->getMethodID(cls, "join", "(JI)V");
        mids$[mid_resume_54c6a166] = env->getMethodID(cls, "resume", "()V");
        mids$[mid_run_54c6a166] = env->getMethodID(cls, "run", "()V");
        mids$[mid_setContextClassLoader_9110048d] = env->getMethodID(cls, "setContextClassLoader", "(Ljava/lang/ClassLoader;)V");
        mids$[mid_setDaemon_bb0c767f] = env->getMethodID(cls, "setDaemon", "(Z)V");
        mids$[mid_setDefaultUncaughtExceptionHandler_4dc005b2] = env->getStaticMethodID(cls, "setDefaultUncaughtExceptionHandler", "(Ljava/lang/Thread$UncaughtExceptionHandler;)V");
        mids$[mid_setName_5fdc3f48] = env->getMethodID(cls, "setName", "(Ljava/lang/String;)V");
        mids$[mid_setPriority_39c7bd3c] = env->getMethodID(cls, "setPriority", "(I)V");
        mids$[mid_setUncaughtExceptionHandler_4dc005b2] = env->getMethodID(cls, "setUncaughtExceptionHandler", "(Ljava/lang/Thread$UncaughtExceptionHandler;)V");
        mids$[mid_sleep_0ee6df2f] = env->getStaticMethodID(cls, "sleep", "(J)V");
        mids$[mid_sleep_25d05c8f] = env->getStaticMethodID(cls, "sleep", "(JI)V");
        mids$[mid_start_54c6a166] = env->getMethodID(cls, "start", "()V");
        mids$[mid_stop_54c6a166] = env->getMethodID(cls, "stop", "()V");
        mids$[mid_stop_c5ec8ca4] = env->getMethodID(cls, "stop", "(Ljava/lang/Throwable;)V");
        mids$[mid_suspend_54c6a166] = env->getMethodID(cls, "suspend", "()V");
        mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
        mids$[mid_yield_54c6a166] = env->getStaticMethodID(cls, "yield", "()V");
        mids$[mid_clone_846352c3] = env->getMethodID(cls, "clone", "()Ljava/lang/Object;");

        class$ = (::java::lang::Class *) new JObject(cls);
        cls = (jclass) class$->this$;

        MAX_PRIORITY = env->getStaticIntField(cls, "MAX_PRIORITY");
        MIN_PRIORITY = env->getStaticIntField(cls, "MIN_PRIORITY");
        NORM_PRIORITY = env->getStaticIntField(cls, "NORM_PRIORITY");
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    Thread::Thread() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

    Thread::Thread(const ::java::lang::Runnable & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_db86d7e2, a0.this$)) {}

    Thread::Thread(const ::java::lang::String & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

    Thread::Thread(const ::java::lang::Runnable & a0, const ::java::lang::String & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_749aa364, a0.this$, a1.this$)) {}

    Thread::Thread(const ::java::lang::ThreadGroup & a0, const ::java::lang::String & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_88a58d93, a0.this$, a1.this$)) {}

    Thread::Thread(const ::java::lang::ThreadGroup & a0, const ::java::lang::Runnable & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_684615b9, a0.this$, a1.this$)) {}

    Thread::Thread(const ::java::lang::ThreadGroup & a0, const ::java::lang::Runnable & a1, const ::java::lang::String & a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_5db621bb, a0.this$, a1.this$, a2.this$)) {}

    Thread::Thread(const ::java::lang::ThreadGroup & a0, const ::java::lang::Runnable & a1, const ::java::lang::String & a2, jlong a3) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_57d87d50, a0.this$, a1.this$, a2.this$, a3)) {}

    jint Thread::activeCount()
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_activeCount_54c6a179]);
    }

    void Thread::checkAccess() const
    {
      env->callVoidMethod(this$, mids$[mid_checkAccess_54c6a166]);
    }

    jint Thread::countStackFrames() const
    {
      return env->callIntMethod(this$, mids$[mid_countStackFrames_54c6a179]);
    }

    Thread Thread::currentThread()
    {
      jclass cls = env->getClass(initializeClass);
      return Thread(env->callStaticObjectMethod(cls, mids$[mid_currentThread_88082f50]));
    }

    void Thread::destroy() const
    {
      env->callVoidMethod(this$, mids$[mid_destroy_54c6a166]);
    }

    void Thread::dumpStack()
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_dumpStack_54c6a166]);
    }

    jint Thread::enumerate(const JArray< Thread > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_enumerate_9e0743ee], a0.this$);
    }

    ::java::util::Map Thread::getAllStackTraces()
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::Map(env->callStaticObjectMethod(cls, mids$[mid_getAllStackTraces_db60befd]));
    }

    ::java::lang::ClassLoader Thread::getContextClassLoader() const
    {
      return ::java::lang::ClassLoader(env->callObjectMethod(this$, mids$[mid_getContextClassLoader_8d2f11fc]));
    }

    ::java::lang::Thread$UncaughtExceptionHandler Thread::getDefaultUncaughtExceptionHandler()
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::Thread$UncaughtExceptionHandler(env->callStaticObjectMethod(cls, mids$[mid_getDefaultUncaughtExceptionHandler_a65feb9b]));
    }

    jlong Thread::getId() const
    {
      return env->callLongMethod(this$, mids$[mid_getId_54c6a17a]);
    }

    ::java::lang::String Thread::getName() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getName_14c7b5c5]));
    }

    jint Thread::getPriority() const
    {
      return env->callIntMethod(this$, mids$[mid_getPriority_54c6a179]);
    }

    JArray< ::java::lang::StackTraceElement > Thread::getStackTrace() const
    {
      return JArray< ::java::lang::StackTraceElement >(env->callObjectMethod(this$, mids$[mid_getStackTrace_25f1f6aa]));
    }

    ::java::lang::Thread$State Thread::getState() const
    {
      return ::java::lang::Thread$State(env->callObjectMethod(this$, mids$[mid_getState_bbff3c63]));
    }

    ::java::lang::ThreadGroup Thread::getThreadGroup() const
    {
      return ::java::lang::ThreadGroup(env->callObjectMethod(this$, mids$[mid_getThreadGroup_172b52b4]));
    }

    ::java::lang::Thread$UncaughtExceptionHandler Thread::getUncaughtExceptionHandler() const
    {
      return ::java::lang::Thread$UncaughtExceptionHandler(env->callObjectMethod(this$, mids$[mid_getUncaughtExceptionHandler_a65feb9b]));
    }

    jboolean Thread::holdsLock(const ::java::lang::Object & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_holdsLock_290588e2], a0.this$);
    }

    void Thread::interrupt() const
    {
      env->callVoidMethod(this$, mids$[mid_interrupt_54c6a166]);
    }

    jboolean Thread::interrupted()
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_interrupted_54c6a16a]);
    }

    jboolean Thread::isAlive() const
    {
      return env->callBooleanMethod(this$, mids$[mid_isAlive_54c6a16a]);
    }

    jboolean Thread::isDaemon() const
    {
      return env->callBooleanMethod(this$, mids$[mid_isDaemon_54c6a16a]);
    }

    jboolean Thread::isInterrupted() const
    {
      return env->callBooleanMethod(this$, mids$[mid_isInterrupted_54c6a16a]);
    }

    void Thread::join() const
    {
      env->callVoidMethod(this$, mids$[mid_join_54c6a166]);
    }

    void Thread::join(jlong a0) const
    {
      env->callVoidMethod(this$, mids$[mid_join_0ee6df2f], a0);
    }

    void Thread::join(jlong a0, jint a1) const
    {
      env->callVoidMethod(this$, mids$[mid_join_25d05c8f], a0, a1);
    }

    void Thread::resume() const
    {
      env->callVoidMethod(this$, mids$[mid_resume_54c6a166]);
    }

    void Thread::run() const
    {
      env->callVoidMethod(this$, mids$[mid_run_54c6a166]);
    }

    void Thread::setContextClassLoader(const ::java::lang::ClassLoader & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_setContextClassLoader_9110048d], a0.this$);
    }

    void Thread::setDaemon(jboolean a0) const
    {
      env->callVoidMethod(this$, mids$[mid_setDaemon_bb0c767f], a0);
    }

    void Thread::setDefaultUncaughtExceptionHandler(const ::java::lang::Thread$UncaughtExceptionHandler & a0)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_setDefaultUncaughtExceptionHandler_4dc005b2], a0.this$);
    }

    void Thread::setName(const ::java::lang::String & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_setName_5fdc3f48], a0.this$);
    }

    void Thread::setPriority(jint a0) const
    {
      env->callVoidMethod(this$, mids$[mid_setPriority_39c7bd3c], a0);
    }

    void Thread::setUncaughtExceptionHandler(const ::java::lang::Thread$UncaughtExceptionHandler & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_setUncaughtExceptionHandler_4dc005b2], a0.this$);
    }

    void Thread::sleep(jlong a0)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_sleep_0ee6df2f], a0);
    }

    void Thread::sleep(jlong a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_sleep_25d05c8f], a0, a1);
    }

    void Thread::start() const
    {
      env->callVoidMethod(this$, mids$[mid_start_54c6a166]);
    }

    void Thread::stop() const
    {
      env->callVoidMethod(this$, mids$[mid_stop_54c6a166]);
    }

    void Thread::stop(const ::java::lang::Throwable & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_stop_c5ec8ca4], a0.this$);
    }

    void Thread::suspend() const
    {
      env->callVoidMethod(this$, mids$[mid_suspend_54c6a166]);
    }

    ::java::lang::String Thread::toString() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
    }

    void Thread::yield()
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_yield_54c6a166]);
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace lang {
    static PyObject *t_Thread_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Thread_instance_(PyTypeObject *type, PyObject *arg);
    static int t_Thread_init_(t_Thread *self, PyObject *args, PyObject *kwds);
    static PyObject *t_Thread_activeCount(PyTypeObject *type);
    static PyObject *t_Thread_checkAccess(t_Thread *self);
    static PyObject *t_Thread_countStackFrames(t_Thread *self);
    static PyObject *t_Thread_currentThread(PyTypeObject *type);
    static PyObject *t_Thread_destroy(t_Thread *self);
    static PyObject *t_Thread_dumpStack(PyTypeObject *type);
    static PyObject *t_Thread_enumerate(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Thread_getAllStackTraces(PyTypeObject *type);
    static PyObject *t_Thread_getContextClassLoader(t_Thread *self);
    static PyObject *t_Thread_getDefaultUncaughtExceptionHandler(PyTypeObject *type);
    static PyObject *t_Thread_getId(t_Thread *self);
    static PyObject *t_Thread_getName(t_Thread *self);
    static PyObject *t_Thread_getPriority(t_Thread *self);
    static PyObject *t_Thread_getStackTrace(t_Thread *self);
    static PyObject *t_Thread_getState(t_Thread *self);
    static PyObject *t_Thread_getThreadGroup(t_Thread *self);
    static PyObject *t_Thread_getUncaughtExceptionHandler(t_Thread *self);
    static PyObject *t_Thread_holdsLock(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Thread_interrupt(t_Thread *self);
    static PyObject *t_Thread_interrupted(PyTypeObject *type);
    static PyObject *t_Thread_isAlive(t_Thread *self);
    static PyObject *t_Thread_isDaemon(t_Thread *self);
    static PyObject *t_Thread_isInterrupted(t_Thread *self);
    static PyObject *t_Thread_join(t_Thread *self, PyObject *args);
    static PyObject *t_Thread_resume(t_Thread *self);
    static PyObject *t_Thread_run(t_Thread *self);
    static PyObject *t_Thread_setContextClassLoader(t_Thread *self, PyObject *arg);
    static PyObject *t_Thread_setDaemon(t_Thread *self, PyObject *arg);
    static PyObject *t_Thread_setDefaultUncaughtExceptionHandler(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Thread_setName(t_Thread *self, PyObject *arg);
    static PyObject *t_Thread_setPriority(t_Thread *self, PyObject *arg);
    static PyObject *t_Thread_setUncaughtExceptionHandler(t_Thread *self, PyObject *arg);
    static PyObject *t_Thread_sleep(PyTypeObject *type, PyObject *args);
    static PyObject *t_Thread_start(t_Thread *self);
    static PyObject *t_Thread_stop(t_Thread *self, PyObject *args);
    static PyObject *t_Thread_suspend(t_Thread *self);
    static PyObject *t_Thread_toString(t_Thread *self, PyObject *args);
    static PyObject *t_Thread_yield(PyTypeObject *type);
    static PyObject *t_Thread_get__alive(t_Thread *self, void *data);
    static PyObject *t_Thread_get__allStackTraces(t_Thread *self, void *data);
    static PyObject *t_Thread_get__contextClassLoader(t_Thread *self, void *data);
    static int t_Thread_set__contextClassLoader(t_Thread *self, PyObject *arg, void *data);
    static PyObject *t_Thread_get__daemon(t_Thread *self, void *data);
    static int t_Thread_set__daemon(t_Thread *self, PyObject *arg, void *data);
    static PyObject *t_Thread_get__defaultUncaughtExceptionHandler(t_Thread *self, void *data);
    static int t_Thread_set__defaultUncaughtExceptionHandler(t_Thread *self, PyObject *arg, void *data);
    static PyObject *t_Thread_get__id(t_Thread *self, void *data);
    static PyObject *t_Thread_get__name(t_Thread *self, void *data);
    static int t_Thread_set__name(t_Thread *self, PyObject *arg, void *data);
    static PyObject *t_Thread_get__priority(t_Thread *self, void *data);
    static int t_Thread_set__priority(t_Thread *self, PyObject *arg, void *data);
    static PyObject *t_Thread_get__stackTrace(t_Thread *self, void *data);
    static PyObject *t_Thread_get__state(t_Thread *self, void *data);
    static PyObject *t_Thread_get__threadGroup(t_Thread *self, void *data);
    static PyObject *t_Thread_get__uncaughtExceptionHandler(t_Thread *self, void *data);
    static int t_Thread_set__uncaughtExceptionHandler(t_Thread *self, PyObject *arg, void *data);
    static PyGetSetDef t_Thread__fields_[] = {
      DECLARE_GET_FIELD(t_Thread, alive),
      DECLARE_GET_FIELD(t_Thread, allStackTraces),
      DECLARE_GETSET_FIELD(t_Thread, contextClassLoader),
      DECLARE_GETSET_FIELD(t_Thread, daemon),
      DECLARE_GETSET_FIELD(t_Thread, defaultUncaughtExceptionHandler),
      DECLARE_GET_FIELD(t_Thread, id),
      DECLARE_GETSET_FIELD(t_Thread, name),
      DECLARE_GETSET_FIELD(t_Thread, priority),
      DECLARE_GET_FIELD(t_Thread, stackTrace),
      DECLARE_GET_FIELD(t_Thread, state),
      DECLARE_GET_FIELD(t_Thread, threadGroup),
      DECLARE_GETSET_FIELD(t_Thread, uncaughtExceptionHandler),
      { NULL, NULL, NULL, NULL, NULL }
    };

    static PyMethodDef t_Thread__methods_[] = {
      DECLARE_METHOD(t_Thread, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Thread, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Thread, activeCount, METH_NOARGS | METH_CLASS),
      DECLARE_METHOD(t_Thread, checkAccess, METH_NOARGS),
      DECLARE_METHOD(t_Thread, countStackFrames, METH_NOARGS),
      DECLARE_METHOD(t_Thread, currentThread, METH_NOARGS | METH_CLASS),
      DECLARE_METHOD(t_Thread, destroy, METH_NOARGS),
      DECLARE_METHOD(t_Thread, dumpStack, METH_NOARGS | METH_CLASS),
      DECLARE_METHOD(t_Thread, enumerate, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Thread, getAllStackTraces, METH_NOARGS | METH_CLASS),
      DECLARE_METHOD(t_Thread, getContextClassLoader, METH_NOARGS),
      DECLARE_METHOD(t_Thread, getDefaultUncaughtExceptionHandler, METH_NOARGS | METH_CLASS),
      DECLARE_METHOD(t_Thread, getId, METH_NOARGS),
      DECLARE_METHOD(t_Thread, getName, METH_NOARGS),
      DECLARE_METHOD(t_Thread, getPriority, METH_NOARGS),
      DECLARE_METHOD(t_Thread, getStackTrace, METH_NOARGS),
      DECLARE_METHOD(t_Thread, getState, METH_NOARGS),
      DECLARE_METHOD(t_Thread, getThreadGroup, METH_NOARGS),
      DECLARE_METHOD(t_Thread, getUncaughtExceptionHandler, METH_NOARGS),
      DECLARE_METHOD(t_Thread, holdsLock, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Thread, interrupt, METH_NOARGS),
      DECLARE_METHOD(t_Thread, interrupted, METH_NOARGS | METH_CLASS),
      DECLARE_METHOD(t_Thread, isAlive, METH_NOARGS),
      DECLARE_METHOD(t_Thread, isDaemon, METH_NOARGS),
      DECLARE_METHOD(t_Thread, isInterrupted, METH_NOARGS),
      DECLARE_METHOD(t_Thread, join, METH_VARARGS),
      DECLARE_METHOD(t_Thread, resume, METH_NOARGS),
      DECLARE_METHOD(t_Thread, run, METH_NOARGS),
      DECLARE_METHOD(t_Thread, setContextClassLoader, METH_O),
      DECLARE_METHOD(t_Thread, setDaemon, METH_O),
      DECLARE_METHOD(t_Thread, setDefaultUncaughtExceptionHandler, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Thread, setName, METH_O),
      DECLARE_METHOD(t_Thread, setPriority, METH_O),
      DECLARE_METHOD(t_Thread, setUncaughtExceptionHandler, METH_O),
      DECLARE_METHOD(t_Thread, sleep, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Thread, start, METH_NOARGS),
      DECLARE_METHOD(t_Thread, stop, METH_VARARGS),
      DECLARE_METHOD(t_Thread, suspend, METH_NOARGS),
      DECLARE_METHOD(t_Thread, toString, METH_VARARGS),
      DECLARE_METHOD(t_Thread, yield, METH_NOARGS | METH_CLASS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(Thread, t_Thread, ::java::lang::Object, Thread, t_Thread_init_, 0, 0, t_Thread__fields_, 0, 0);

    void t_Thread::install(PyObject *module)
    {
      installType(&PY_TYPE(Thread), module, "Thread", 0);
      PyDict_SetItemString(PY_TYPE(Thread).tp_dict, "UncaughtExceptionHandler", make_descriptor(&PY_TYPE(Thread$UncaughtExceptionHandler)));
      PyDict_SetItemString(PY_TYPE(Thread).tp_dict, "State", make_descriptor(&PY_TYPE(Thread$State)));
    }

    void t_Thread::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(Thread).tp_dict, "class_", make_descriptor(Thread::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(Thread).tp_dict, "wrapfn_", make_descriptor(t_Thread::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(Thread).tp_dict, "boxfn_", make_descriptor(boxObject));
      env->getClass(Thread::initializeClass);
      PyDict_SetItemString(PY_TYPE(Thread).tp_dict, "MAX_PRIORITY", make_descriptor(Thread::MAX_PRIORITY));
      PyDict_SetItemString(PY_TYPE(Thread).tp_dict, "MIN_PRIORITY", make_descriptor(Thread::MIN_PRIORITY));
      PyDict_SetItemString(PY_TYPE(Thread).tp_dict, "NORM_PRIORITY", make_descriptor(Thread::NORM_PRIORITY));
    }

    static PyObject *t_Thread_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, Thread::initializeClass, 1)))
        return NULL;
      return t_Thread::wrap_Object(Thread(((t_Thread *) arg)->object.this$));
    }
    static PyObject *t_Thread_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, Thread::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static int t_Thread_init_(t_Thread *self, PyObject *args, PyObject *kwds)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          Thread object((jobject) NULL);

          INT_CALL(object = Thread());
          self->object = object;
          break;
        }
        goto err;
       case 1:
        {
          ::java::lang::Runnable a0((jobject) NULL);
          Thread object((jobject) NULL);

          if (!parseArgs(args, "k", ::java::lang::Runnable::initializeClass, &a0))
          {
            INT_CALL(object = Thread(a0));
            self->object = object;
            break;
          }
        }
        {
          ::java::lang::String a0((jobject) NULL);
          Thread object((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            INT_CALL(object = Thread(a0));
            self->object = object;
            break;
          }
        }
        goto err;
       case 2:
        {
          ::java::lang::Runnable a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          Thread object((jobject) NULL);

          if (!parseArgs(args, "ks", ::java::lang::Runnable::initializeClass, &a0, &a1))
          {
            INT_CALL(object = Thread(a0, a1));
            self->object = object;
            break;
          }
        }
        {
          ::java::lang::ThreadGroup a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          Thread object((jobject) NULL);

          if (!parseArgs(args, "ks", ::java::lang::ThreadGroup::initializeClass, &a0, &a1))
          {
            INT_CALL(object = Thread(a0, a1));
            self->object = object;
            break;
          }
        }
        {
          ::java::lang::ThreadGroup a0((jobject) NULL);
          ::java::lang::Runnable a1((jobject) NULL);
          Thread object((jobject) NULL);

          if (!parseArgs(args, "kk", ::java::lang::ThreadGroup::initializeClass, ::java::lang::Runnable::initializeClass, &a0, &a1))
          {
            INT_CALL(object = Thread(a0, a1));
            self->object = object;
            break;
          }
        }
        goto err;
       case 3:
        {
          ::java::lang::ThreadGroup a0((jobject) NULL);
          ::java::lang::Runnable a1((jobject) NULL);
          ::java::lang::String a2((jobject) NULL);
          Thread object((jobject) NULL);

          if (!parseArgs(args, "kks", ::java::lang::ThreadGroup::initializeClass, ::java::lang::Runnable::initializeClass, &a0, &a1, &a2))
          {
            INT_CALL(object = Thread(a0, a1, a2));
            self->object = object;
            break;
          }
        }
        goto err;
       case 4:
        {
          ::java::lang::ThreadGroup a0((jobject) NULL);
          ::java::lang::Runnable a1((jobject) NULL);
          ::java::lang::String a2((jobject) NULL);
          jlong a3;
          Thread object((jobject) NULL);

          if (!parseArgs(args, "kksJ", ::java::lang::ThreadGroup::initializeClass, ::java::lang::Runnable::initializeClass, &a0, &a1, &a2, &a3))
          {
            INT_CALL(object = Thread(a0, a1, a2, a3));
            self->object = object;
            break;
          }
        }
       default:
       err:
        PyErr_SetArgsError((PyObject *) self, "__init__", args);
        return -1;
      }

      return 0;
    }

    static PyObject *t_Thread_activeCount(PyTypeObject *type)
    {
      jint result;
      OBJ_CALL(result = ::java::lang::Thread::activeCount());
      return PyInt_FromLong((long) result);
    }

    static PyObject *t_Thread_checkAccess(t_Thread *self)
    {
      OBJ_CALL(self->object.checkAccess());
      Py_RETURN_NONE;
    }

    static PyObject *t_Thread_countStackFrames(t_Thread *self)
    {
      jint result;
      OBJ_CALL(result = self->object.countStackFrames());
      return PyInt_FromLong((long) result);
    }

    static PyObject *t_Thread_currentThread(PyTypeObject *type)
    {
      Thread result((jobject) NULL);
      OBJ_CALL(result = ::java::lang::Thread::currentThread());
      return t_Thread::wrap_Object(result);
    }

    static PyObject *t_Thread_destroy(t_Thread *self)
    {
      OBJ_CALL(self->object.destroy());
      Py_RETURN_NONE;
    }

    static PyObject *t_Thread_dumpStack(PyTypeObject *type)
    {
      OBJ_CALL(::java::lang::Thread::dumpStack());
      Py_RETURN_NONE;
    }

    static PyObject *t_Thread_enumerate(PyTypeObject *type, PyObject *arg)
    {
      JArray< Thread > a0((jobject) NULL);
      jint result;

      if (!parseArg(arg, "[k", Thread::initializeClass, &a0))
      {
        OBJ_CALL(result = ::java::lang::Thread::enumerate(a0));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "enumerate", arg);
      return NULL;
    }

    static PyObject *t_Thread_getAllStackTraces(PyTypeObject *type)
    {
      ::java::util::Map result((jobject) NULL);
      OBJ_CALL(result = ::java::lang::Thread::getAllStackTraces());
      return ::java::util::t_Map::wrap_Object(result, &::java::lang::PY_TYPE(Thread), &::java::lang::PY_TYPE(Object));
    }

    static PyObject *t_Thread_getContextClassLoader(t_Thread *self)
    {
      ::java::lang::ClassLoader result((jobject) NULL);
      OBJ_CALL(result = self->object.getContextClassLoader());
      return ::java::lang::t_ClassLoader::wrap_Object(result);
    }

    static PyObject *t_Thread_getDefaultUncaughtExceptionHandler(PyTypeObject *type)
    {
      ::java::lang::Thread$UncaughtExceptionHandler result((jobject) NULL);
      OBJ_CALL(result = ::java::lang::Thread::getDefaultUncaughtExceptionHandler());
      return ::java::lang::t_Thread$UncaughtExceptionHandler::wrap_Object(result);
    }

    static PyObject *t_Thread_getId(t_Thread *self)
    {
      jlong result;
      OBJ_CALL(result = self->object.getId());
      return PyLong_FromLongLong((PY_LONG_LONG) result);
    }

    static PyObject *t_Thread_getName(t_Thread *self)
    {
      ::java::lang::String result((jobject) NULL);
      OBJ_CALL(result = self->object.getName());
      return j2p(result);
    }

    static PyObject *t_Thread_getPriority(t_Thread *self)
    {
      jint result;
      OBJ_CALL(result = self->object.getPriority());
      return PyInt_FromLong((long) result);
    }

    static PyObject *t_Thread_getStackTrace(t_Thread *self)
    {
      JArray< ::java::lang::StackTraceElement > result((jobject) NULL);
      OBJ_CALL(result = self->object.getStackTrace());
      return JArray<jobject>(result.this$).wrap(::java::lang::t_StackTraceElement::wrap_jobject);
    }

    static PyObject *t_Thread_getState(t_Thread *self)
    {
      ::java::lang::Thread$State result((jobject) NULL);
      OBJ_CALL(result = self->object.getState());
      return ::java::lang::t_Thread$State::wrap_Object(result);
    }

    static PyObject *t_Thread_getThreadGroup(t_Thread *self)
    {
      ::java::lang::ThreadGroup result((jobject) NULL);
      OBJ_CALL(result = self->object.getThreadGroup());
      return ::java::lang::t_ThreadGroup::wrap_Object(result);
    }

    static PyObject *t_Thread_getUncaughtExceptionHandler(t_Thread *self)
    {
      ::java::lang::Thread$UncaughtExceptionHandler result((jobject) NULL);
      OBJ_CALL(result = self->object.getUncaughtExceptionHandler());
      return ::java::lang::t_Thread$UncaughtExceptionHandler::wrap_Object(result);
    }

    static PyObject *t_Thread_holdsLock(PyTypeObject *type, PyObject *arg)
    {
      ::java::lang::Object a0((jobject) NULL);
      jboolean result;

      if (!parseArg(arg, "o", &a0))
      {
        OBJ_CALL(result = ::java::lang::Thread::holdsLock(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError(type, "holdsLock", arg);
      return NULL;
    }

    static PyObject *t_Thread_interrupt(t_Thread *self)
    {
      OBJ_CALL(self->object.interrupt());
      Py_RETURN_NONE;
    }

    static PyObject *t_Thread_interrupted(PyTypeObject *type)
    {
      jboolean result;
      OBJ_CALL(result = ::java::lang::Thread::interrupted());
      Py_RETURN_BOOL(result);
    }

    static PyObject *t_Thread_isAlive(t_Thread *self)
    {
      jboolean result;
      OBJ_CALL(result = self->object.isAlive());
      Py_RETURN_BOOL(result);
    }

    static PyObject *t_Thread_isDaemon(t_Thread *self)
    {
      jboolean result;
      OBJ_CALL(result = self->object.isDaemon());
      Py_RETURN_BOOL(result);
    }

    static PyObject *t_Thread_isInterrupted(t_Thread *self)
    {
      jboolean result;
      OBJ_CALL(result = self->object.isInterrupted());
      Py_RETURN_BOOL(result);
    }

    static PyObject *t_Thread_join(t_Thread *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          OBJ_CALL(self->object.join());
          Py_RETURN_NONE;
        }
        break;
       case 1:
        {
          jlong a0;

          if (!parseArgs(args, "J", &a0))
          {
            OBJ_CALL(self->object.join(a0));
            Py_RETURN_NONE;
          }
        }
        break;
       case 2:
        {
          jlong a0;
          jint a1;

          if (!parseArgs(args, "JI", &a0, &a1))
          {
            OBJ_CALL(self->object.join(a0, a1));
            Py_RETURN_NONE;
          }
        }
      }

      PyErr_SetArgsError((PyObject *) self, "join", args);
      return NULL;
    }

    static PyObject *t_Thread_resume(t_Thread *self)
    {
      OBJ_CALL(self->object.resume());
      Py_RETURN_NONE;
    }

    static PyObject *t_Thread_run(t_Thread *self)
    {
      OBJ_CALL(self->object.run());
      Py_RETURN_NONE;
    }

    static PyObject *t_Thread_setContextClassLoader(t_Thread *self, PyObject *arg)
    {
      ::java::lang::ClassLoader a0((jobject) NULL);

      if (!parseArg(arg, "k", ::java::lang::ClassLoader::initializeClass, &a0))
      {
        OBJ_CALL(self->object.setContextClassLoader(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "setContextClassLoader", arg);
      return NULL;
    }

    static PyObject *t_Thread_setDaemon(t_Thread *self, PyObject *arg)
    {
      jboolean a0;

      if (!parseArg(arg, "Z", &a0))
      {
        OBJ_CALL(self->object.setDaemon(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "setDaemon", arg);
      return NULL;
    }

    static PyObject *t_Thread_setDefaultUncaughtExceptionHandler(PyTypeObject *type, PyObject *arg)
    {
      ::java::lang::Thread$UncaughtExceptionHandler a0((jobject) NULL);

      if (!parseArg(arg, "k", ::java::lang::Thread$UncaughtExceptionHandler::initializeClass, &a0))
      {
        OBJ_CALL(::java::lang::Thread::setDefaultUncaughtExceptionHandler(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError(type, "setDefaultUncaughtExceptionHandler", arg);
      return NULL;
    }

    static PyObject *t_Thread_setName(t_Thread *self, PyObject *arg)
    {
      ::java::lang::String a0((jobject) NULL);

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(self->object.setName(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "setName", arg);
      return NULL;
    }

    static PyObject *t_Thread_setPriority(t_Thread *self, PyObject *arg)
    {
      jint a0;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(self->object.setPriority(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "setPriority", arg);
      return NULL;
    }

    static PyObject *t_Thread_setUncaughtExceptionHandler(t_Thread *self, PyObject *arg)
    {
      ::java::lang::Thread$UncaughtExceptionHandler a0((jobject) NULL);

      if (!parseArg(arg, "k", ::java::lang::Thread$UncaughtExceptionHandler::initializeClass, &a0))
      {
        OBJ_CALL(self->object.setUncaughtExceptionHandler(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "setUncaughtExceptionHandler", arg);
      return NULL;
    }

    static PyObject *t_Thread_sleep(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jlong a0;

          if (!parseArgs(args, "J", &a0))
          {
            OBJ_CALL(::java::lang::Thread::sleep(a0));
            Py_RETURN_NONE;
          }
        }
        break;
       case 2:
        {
          jlong a0;
          jint a1;

          if (!parseArgs(args, "JI", &a0, &a1))
          {
            OBJ_CALL(::java::lang::Thread::sleep(a0, a1));
            Py_RETURN_NONE;
          }
        }
      }

      PyErr_SetArgsError(type, "sleep", args);
      return NULL;
    }

    static PyObject *t_Thread_start(t_Thread *self)
    {
      OBJ_CALL(self->object.start());
      Py_RETURN_NONE;
    }

    static PyObject *t_Thread_stop(t_Thread *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          OBJ_CALL(self->object.stop());
          Py_RETURN_NONE;
        }
        break;
       case 1:
        {
          ::java::lang::Throwable a0((jobject) NULL);

          if (!parseArgs(args, "k", ::java::lang::Throwable::initializeClass, &a0))
          {
            OBJ_CALL(self->object.stop(a0));
            Py_RETURN_NONE;
          }
        }
      }

      PyErr_SetArgsError((PyObject *) self, "stop", args);
      return NULL;
    }

    static PyObject *t_Thread_suspend(t_Thread *self)
    {
      OBJ_CALL(self->object.suspend());
      Py_RETURN_NONE;
    }

    static PyObject *t_Thread_toString(t_Thread *self, PyObject *args)
    {
      ::java::lang::String result((jobject) NULL);

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.toString());
        return j2p(result);
      }

      return callSuper(&PY_TYPE(Thread), (PyObject *) self, "toString", args, 2);
    }

    static PyObject *t_Thread_yield(PyTypeObject *type)
    {
      OBJ_CALL(::java::lang::Thread::yield());
      Py_RETURN_NONE;
    }

    static PyObject *t_Thread_get__alive(t_Thread *self, void *data)
    {
      jboolean value;
      OBJ_CALL(value = self->object.isAlive());
      Py_RETURN_BOOL(value);
    }

    static PyObject *t_Thread_get__allStackTraces(t_Thread *self, void *data)
    {
      ::java::util::Map value((jobject) NULL);
      OBJ_CALL(value = self->object.getAllStackTraces());
      return ::java::util::t_Map::wrap_Object(value);
    }

    static PyObject *t_Thread_get__contextClassLoader(t_Thread *self, void *data)
    {
      ::java::lang::ClassLoader value((jobject) NULL);
      OBJ_CALL(value = self->object.getContextClassLoader());
      return ::java::lang::t_ClassLoader::wrap_Object(value);
    }
    static int t_Thread_set__contextClassLoader(t_Thread *self, PyObject *arg, void *data)
    {
      {
        ::java::lang::ClassLoader value((jobject) NULL);
        if (!parseArg(arg, "k", ::java::lang::ClassLoader::initializeClass, &value))
        {
          INT_CALL(self->object.setContextClassLoader(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "contextClassLoader", arg);
      return -1;
    }

    static PyObject *t_Thread_get__daemon(t_Thread *self, void *data)
    {
      jboolean value;
      OBJ_CALL(value = self->object.isDaemon());
      Py_RETURN_BOOL(value);
    }
    static int t_Thread_set__daemon(t_Thread *self, PyObject *arg, void *data)
    {
      {
        jboolean value;
        if (!parseArg(arg, "Z", &value))
        {
          INT_CALL(self->object.setDaemon(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "daemon", arg);
      return -1;
    }

    static PyObject *t_Thread_get__defaultUncaughtExceptionHandler(t_Thread *self, void *data)
    {
      ::java::lang::Thread$UncaughtExceptionHandler value((jobject) NULL);
      OBJ_CALL(value = self->object.getDefaultUncaughtExceptionHandler());
      return ::java::lang::t_Thread$UncaughtExceptionHandler::wrap_Object(value);
    }
    static int t_Thread_set__defaultUncaughtExceptionHandler(t_Thread *self, PyObject *arg, void *data)
    {
      {
        ::java::lang::Thread$UncaughtExceptionHandler value((jobject) NULL);
        if (!parseArg(arg, "k", ::java::lang::Thread$UncaughtExceptionHandler::initializeClass, &value))
        {
          INT_CALL(self->object.setDefaultUncaughtExceptionHandler(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "defaultUncaughtExceptionHandler", arg);
      return -1;
    }

    static PyObject *t_Thread_get__id(t_Thread *self, void *data)
    {
      jlong value;
      OBJ_CALL(value = self->object.getId());
      return PyLong_FromLongLong((PY_LONG_LONG) value);
    }

    static PyObject *t_Thread_get__name(t_Thread *self, void *data)
    {
      ::java::lang::String value((jobject) NULL);
      OBJ_CALL(value = self->object.getName());
      return j2p(value);
    }
    static int t_Thread_set__name(t_Thread *self, PyObject *arg, void *data)
    {
      {
        ::java::lang::String value((jobject) NULL);
        if (!parseArg(arg, "s", &value))
        {
          INT_CALL(self->object.setName(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "name", arg);
      return -1;
    }

    static PyObject *t_Thread_get__priority(t_Thread *self, void *data)
    {
      jint value;
      OBJ_CALL(value = self->object.getPriority());
      return PyInt_FromLong((long) value);
    }
    static int t_Thread_set__priority(t_Thread *self, PyObject *arg, void *data)
    {
      {
        jint value;
        if (!parseArg(arg, "I", &value))
        {
          INT_CALL(self->object.setPriority(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "priority", arg);
      return -1;
    }

    static PyObject *t_Thread_get__stackTrace(t_Thread *self, void *data)
    {
      JArray< ::java::lang::StackTraceElement > value((jobject) NULL);
      OBJ_CALL(value = self->object.getStackTrace());
      return JArray<jobject>(value.this$).wrap(::java::lang::t_StackTraceElement::wrap_jobject);
    }

    static PyObject *t_Thread_get__state(t_Thread *self, void *data)
    {
      ::java::lang::Thread$State value((jobject) NULL);
      OBJ_CALL(value = self->object.getState());
      return ::java::lang::t_Thread$State::wrap_Object(value);
    }

    static PyObject *t_Thread_get__threadGroup(t_Thread *self, void *data)
    {
      ::java::lang::ThreadGroup value((jobject) NULL);
      OBJ_CALL(value = self->object.getThreadGroup());
      return ::java::lang::t_ThreadGroup::wrap_Object(value);
    }

    static PyObject *t_Thread_get__uncaughtExceptionHandler(t_Thread *self, void *data)
    {
      ::java::lang::Thread$UncaughtExceptionHandler value((jobject) NULL);
      OBJ_CALL(value = self->object.getUncaughtExceptionHandler());
      return ::java::lang::t_Thread$UncaughtExceptionHandler::wrap_Object(value);
    }
    static int t_Thread_set__uncaughtExceptionHandler(t_Thread *self, PyObject *arg, void *data)
    {
      {
        ::java::lang::Thread$UncaughtExceptionHandler value((jobject) NULL);
        if (!parseArg(arg, "k", ::java::lang::Thread$UncaughtExceptionHandler::initializeClass, &value))
        {
          INT_CALL(self->object.setUncaughtExceptionHandler(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "uncaughtExceptionHandler", arg);
      return -1;
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/fst/NoOutputs.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "org/apache/lucene/store/DataInput.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {

          ::java::lang::Class *NoOutputs::class$ = NULL;
          jmethodID *NoOutputs::mids$ = NULL;
          bool NoOutputs::live$ = false;

          jclass NoOutputs::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/fst/NoOutputs");

              mids$ = new jmethodID[max_mid];
              mids$[mid_add_537d5bdf] = env->getMethodID(cls, "add", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;");
              mids$[mid_common_537d5bdf] = env->getMethodID(cls, "common", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;");
              mids$[mid_getNoOutput_846352c3] = env->getMethodID(cls, "getNoOutput", "()Ljava/lang/Object;");
              mids$[mid_getSingleton_99c00e31] = env->getStaticMethodID(cls, "getSingleton", "()Lorg/apache/lucene/util/fst/NoOutputs;");
              mids$[mid_merge_537d5bdf] = env->getMethodID(cls, "merge", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;");
              mids$[mid_outputToString_c9db4eed] = env->getMethodID(cls, "outputToString", "(Ljava/lang/Object;)Ljava/lang/String;");
              mids$[mid_ramBytesUsed_290588f2] = env->getMethodID(cls, "ramBytesUsed", "(Ljava/lang/Object;)J");
              mids$[mid_read_7d5f44e2] = env->getMethodID(cls, "read", "(Lorg/apache/lucene/store/DataInput;)Ljava/lang/Object;");
              mids$[mid_subtract_537d5bdf] = env->getMethodID(cls, "subtract", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;");
              mids$[mid_write_208ac1fb] = env->getMethodID(cls, "write", "(Ljava/lang/Object;Lorg/apache/lucene/store/DataOutput;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::java::lang::Object NoOutputs::add(const ::java::lang::Object & a0, const ::java::lang::Object & a1) const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_add_537d5bdf], a0.this$, a1.this$));
          }

          ::java::lang::Object NoOutputs::common(const ::java::lang::Object & a0, const ::java::lang::Object & a1) const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_common_537d5bdf], a0.this$, a1.this$));
          }

          ::java::lang::Object NoOutputs::getNoOutput() const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_getNoOutput_846352c3]));
          }

          NoOutputs NoOutputs::getSingleton()
          {
            jclass cls = env->getClass(initializeClass);
            return NoOutputs(env->callStaticObjectMethod(cls, mids$[mid_getSingleton_99c00e31]));
          }

          ::java::lang::Object NoOutputs::merge(const ::java::lang::Object & a0, const ::java::lang::Object & a1) const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_merge_537d5bdf], a0.this$, a1.this$));
          }

          ::java::lang::String NoOutputs::outputToString(const ::java::lang::Object & a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_outputToString_c9db4eed], a0.this$));
          }

          jlong NoOutputs::ramBytesUsed(const ::java::lang::Object & a0) const
          {
            return env->callLongMethod(this$, mids$[mid_ramBytesUsed_290588f2], a0.this$);
          }

          ::java::lang::Object NoOutputs::read(const ::org::apache::lucene::store::DataInput & a0) const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_read_7d5f44e2], a0.this$));
          }

          ::java::lang::Object NoOutputs::subtract(const ::java::lang::Object & a0, const ::java::lang::Object & a1) const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_subtract_537d5bdf], a0.this$, a1.this$));
          }

          void NoOutputs::write(const ::java::lang::Object & a0, const ::org::apache::lucene::store::DataOutput & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_write_208ac1fb], a0.this$, a1.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {
          static PyObject *t_NoOutputs_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_NoOutputs_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_NoOutputs_of_(t_NoOutputs *self, PyObject *args);
          static PyObject *t_NoOutputs_add(t_NoOutputs *self, PyObject *args);
          static PyObject *t_NoOutputs_common(t_NoOutputs *self, PyObject *args);
          static PyObject *t_NoOutputs_getNoOutput(t_NoOutputs *self, PyObject *args);
          static PyObject *t_NoOutputs_getSingleton(PyTypeObject *type);
          static PyObject *t_NoOutputs_merge(t_NoOutputs *self, PyObject *args);
          static PyObject *t_NoOutputs_outputToString(t_NoOutputs *self, PyObject *args);
          static PyObject *t_NoOutputs_ramBytesUsed(t_NoOutputs *self, PyObject *args);
          static PyObject *t_NoOutputs_read(t_NoOutputs *self, PyObject *args);
          static PyObject *t_NoOutputs_subtract(t_NoOutputs *self, PyObject *args);
          static PyObject *t_NoOutputs_write(t_NoOutputs *self, PyObject *args);
          static PyObject *t_NoOutputs_get__noOutput(t_NoOutputs *self, void *data);
          static PyObject *t_NoOutputs_get__singleton(t_NoOutputs *self, void *data);
          static PyObject *t_NoOutputs_get__parameters_(t_NoOutputs *self, void *data);
          static PyGetSetDef t_NoOutputs__fields_[] = {
            DECLARE_GET_FIELD(t_NoOutputs, noOutput),
            DECLARE_GET_FIELD(t_NoOutputs, singleton),
            DECLARE_GET_FIELD(t_NoOutputs, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_NoOutputs__methods_[] = {
            DECLARE_METHOD(t_NoOutputs, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NoOutputs, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NoOutputs, of_, METH_VARARGS),
            DECLARE_METHOD(t_NoOutputs, add, METH_VARARGS),
            DECLARE_METHOD(t_NoOutputs, common, METH_VARARGS),
            DECLARE_METHOD(t_NoOutputs, getNoOutput, METH_VARARGS),
            DECLARE_METHOD(t_NoOutputs, getSingleton, METH_NOARGS | METH_CLASS),
            DECLARE_METHOD(t_NoOutputs, merge, METH_VARARGS),
            DECLARE_METHOD(t_NoOutputs, outputToString, METH_VARARGS),
            DECLARE_METHOD(t_NoOutputs, ramBytesUsed, METH_VARARGS),
            DECLARE_METHOD(t_NoOutputs, read, METH_VARARGS),
            DECLARE_METHOD(t_NoOutputs, subtract, METH_VARARGS),
            DECLARE_METHOD(t_NoOutputs, write, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(NoOutputs, t_NoOutputs, ::org::apache::lucene::util::fst::Outputs, NoOutputs, abstract_init, 0, 0, t_NoOutputs__fields_, 0, 0);
          PyObject *t_NoOutputs::wrap_Object(const NoOutputs& object, PyTypeObject *p0)
          {
            PyObject *obj = t_NoOutputs::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_NoOutputs *self = (t_NoOutputs *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_NoOutputs::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_NoOutputs::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_NoOutputs *self = (t_NoOutputs *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_NoOutputs::install(PyObject *module)
          {
            installType(&PY_TYPE(NoOutputs), module, "NoOutputs", 0);
          }

          void t_NoOutputs::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(NoOutputs).tp_dict, "class_", make_descriptor(NoOutputs::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(NoOutputs).tp_dict, "wrapfn_", make_descriptor(t_NoOutputs::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(NoOutputs).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_NoOutputs_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, NoOutputs::initializeClass, 1)))
              return NULL;
            return t_NoOutputs::wrap_Object(NoOutputs(((t_NoOutputs *) arg)->object.this$));
          }
          static PyObject *t_NoOutputs_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, NoOutputs::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_NoOutputs_of_(t_NoOutputs *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static PyObject *t_NoOutputs_add(t_NoOutputs *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            ::java::lang::Object a1((jobject) NULL);
            ::java::lang::Object result((jobject) NULL);

            if (!parseArgs(args, "oo", &a0, &a1))
            {
              OBJ_CALL(result = self->object.add(a0, a1));
              return ::java::lang::t_Object::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(NoOutputs), (PyObject *) self, "add", args, 2);
          }

          static PyObject *t_NoOutputs_common(t_NoOutputs *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            ::java::lang::Object a1((jobject) NULL);
            ::java::lang::Object result((jobject) NULL);

            if (!parseArgs(args, "oo", &a0, &a1))
            {
              OBJ_CALL(result = self->object.common(a0, a1));
              return ::java::lang::t_Object::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(NoOutputs), (PyObject *) self, "common", args, 2);
          }

          static PyObject *t_NoOutputs_getNoOutput(t_NoOutputs *self, PyObject *args)
          {
            ::java::lang::Object result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getNoOutput());
              return ::java::lang::t_Object::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(NoOutputs), (PyObject *) self, "getNoOutput", args, 2);
          }

          static PyObject *t_NoOutputs_getSingleton(PyTypeObject *type)
          {
            NoOutputs result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::util::fst::NoOutputs::getSingleton());
            return t_NoOutputs::wrap_Object(result);
          }

          static PyObject *t_NoOutputs_merge(t_NoOutputs *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            ::java::lang::Object a1((jobject) NULL);
            ::java::lang::Object result((jobject) NULL);

            if (!parseArgs(args, "oo", &a0, &a1))
            {
              OBJ_CALL(result = self->object.merge(a0, a1));
              return ::java::lang::t_Object::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(NoOutputs), (PyObject *) self, "merge", args, 2);
          }

          static PyObject *t_NoOutputs_outputToString(t_NoOutputs *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.outputToString(a0));
              return j2p(result);
            }

            return callSuper(&PY_TYPE(NoOutputs), (PyObject *) self, "outputToString", args, 2);
          }

          static PyObject *t_NoOutputs_ramBytesUsed(t_NoOutputs *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jlong result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.ramBytesUsed(a0));
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(&PY_TYPE(NoOutputs), (PyObject *) self, "ramBytesUsed", args, 2);
          }

          static PyObject *t_NoOutputs_read(t_NoOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::store::DataInput a0((jobject) NULL);
            ::java::lang::Object result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::store::DataInput::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.read(a0));
              return ::java::lang::t_Object::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(NoOutputs), (PyObject *) self, "read", args, 2);
          }

          static PyObject *t_NoOutputs_subtract(t_NoOutputs *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            ::java::lang::Object a1((jobject) NULL);
            ::java::lang::Object result((jobject) NULL);

            if (!parseArgs(args, "oo", &a0, &a1))
            {
              OBJ_CALL(result = self->object.subtract(a0, a1));
              return ::java::lang::t_Object::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(NoOutputs), (PyObject *) self, "subtract", args, 2);
          }

          static PyObject *t_NoOutputs_write(t_NoOutputs *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            ::org::apache::lucene::store::DataOutput a1((jobject) NULL);

            if (!parseArgs(args, "ok", ::org::apache::lucene::store::DataOutput::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.write(a0, a1));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(NoOutputs), (PyObject *) self, "write", args, 2);
          }
          static PyObject *t_NoOutputs_get__parameters_(t_NoOutputs *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_NoOutputs_get__noOutput(t_NoOutputs *self, void *data)
          {
            ::java::lang::Object value((jobject) NULL);
            OBJ_CALL(value = self->object.getNoOutput());
            return ::java::lang::t_Object::wrap_Object(value);
          }

          static PyObject *t_NoOutputs_get__singleton(t_NoOutputs *self, void *data)
          {
            NoOutputs value((jobject) NULL);
            OBJ_CALL(value = self->object.getSingleton());
            return t_NoOutputs::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/writercache/CollisionMap.h"
#include "org/apache/lucene/facet/taxonomy/FacetLabel.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          namespace writercache {

            ::java::lang::Class *CollisionMap::class$ = NULL;
            jmethodID *CollisionMap::mids$ = NULL;
            bool CollisionMap::live$ = false;

            jclass CollisionMap::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/writercache/CollisionMap");

                mids$ = new jmethodID[max_mid];
                mids$[mid_addLabel_71708aa9] = env->getMethodID(cls, "addLabel", "(Lorg/apache/lucene/facet/taxonomy/FacetLabel;II)I");
                mids$[mid_addLabelOffset_d3236aa4] = env->getMethodID(cls, "addLabelOffset", "(III)V");
                mids$[mid_capacity_54c6a179] = env->getMethodID(cls, "capacity", "()I");
                mids$[mid_get_7ba580b7] = env->getMethodID(cls, "get", "(Lorg/apache/lucene/facet/taxonomy/FacetLabel;I)I");
                mids$[mid_size_54c6a179] = env->getMethodID(cls, "size", "()I");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            jint CollisionMap::addLabel(const ::org::apache::lucene::facet::taxonomy::FacetLabel & a0, jint a1, jint a2) const
            {
              return env->callIntMethod(this$, mids$[mid_addLabel_71708aa9], a0.this$, a1, a2);
            }

            void CollisionMap::addLabelOffset(jint a0, jint a1, jint a2) const
            {
              env->callVoidMethod(this$, mids$[mid_addLabelOffset_d3236aa4], a0, a1, a2);
            }

            jint CollisionMap::capacity() const
            {
              return env->callIntMethod(this$, mids$[mid_capacity_54c6a179]);
            }

            jint CollisionMap::get(const ::org::apache::lucene::facet::taxonomy::FacetLabel & a0, jint a1) const
            {
              return env->callIntMethod(this$, mids$[mid_get_7ba580b7], a0.this$, a1);
            }

            jint CollisionMap::size() const
            {
              return env->callIntMethod(this$, mids$[mid_size_54c6a179]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          namespace writercache {
            static PyObject *t_CollisionMap_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_CollisionMap_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_CollisionMap_addLabel(t_CollisionMap *self, PyObject *args);
            static PyObject *t_CollisionMap_addLabelOffset(t_CollisionMap *self, PyObject *args);
            static PyObject *t_CollisionMap_capacity(t_CollisionMap *self);
            static PyObject *t_CollisionMap_get(t_CollisionMap *self, PyObject *args);
            static PyObject *t_CollisionMap_size(t_CollisionMap *self);

            static PyMethodDef t_CollisionMap__methods_[] = {
              DECLARE_METHOD(t_CollisionMap, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_CollisionMap, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_CollisionMap, addLabel, METH_VARARGS),
              DECLARE_METHOD(t_CollisionMap, addLabelOffset, METH_VARARGS),
              DECLARE_METHOD(t_CollisionMap, capacity, METH_NOARGS),
              DECLARE_METHOD(t_CollisionMap, get, METH_VARARGS),
              DECLARE_METHOD(t_CollisionMap, size, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(CollisionMap, t_CollisionMap, ::java::lang::Object, CollisionMap, abstract_init, 0, 0, 0, 0, 0);

            void t_CollisionMap::install(PyObject *module)
            {
              installType(&PY_TYPE(CollisionMap), module, "CollisionMap", 0);
            }

            void t_CollisionMap::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(CollisionMap).tp_dict, "class_", make_descriptor(CollisionMap::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(CollisionMap).tp_dict, "wrapfn_", make_descriptor(t_CollisionMap::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(CollisionMap).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_CollisionMap_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, CollisionMap::initializeClass, 1)))
                return NULL;
              return t_CollisionMap::wrap_Object(CollisionMap(((t_CollisionMap *) arg)->object.this$));
            }
            static PyObject *t_CollisionMap_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, CollisionMap::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_CollisionMap_addLabel(t_CollisionMap *self, PyObject *args)
            {
              ::org::apache::lucene::facet::taxonomy::FacetLabel a0((jobject) NULL);
              jint a1;
              jint a2;
              jint result;

              if (!parseArgs(args, "kII", ::org::apache::lucene::facet::taxonomy::FacetLabel::initializeClass, &a0, &a1, &a2))
              {
                OBJ_CALL(result = self->object.addLabel(a0, a1, a2));
                return PyInt_FromLong((long) result);
              }

              PyErr_SetArgsError((PyObject *) self, "addLabel", args);
              return NULL;
            }

            static PyObject *t_CollisionMap_addLabelOffset(t_CollisionMap *self, PyObject *args)
            {
              jint a0;
              jint a1;
              jint a2;

              if (!parseArgs(args, "III", &a0, &a1, &a2))
              {
                OBJ_CALL(self->object.addLabelOffset(a0, a1, a2));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "addLabelOffset", args);
              return NULL;
            }

            static PyObject *t_CollisionMap_capacity(t_CollisionMap *self)
            {
              jint result;
              OBJ_CALL(result = self->object.capacity());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_CollisionMap_get(t_CollisionMap *self, PyObject *args)
            {
              ::org::apache::lucene::facet::taxonomy::FacetLabel a0((jobject) NULL);
              jint a1;
              jint result;

              if (!parseArgs(args, "kI", ::org::apache::lucene::facet::taxonomy::FacetLabel::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = self->object.get(a0, a1));
                return PyInt_FromLong((long) result);
              }

              PyErr_SetArgsError((PyObject *) self, "get", args);
              return NULL;
            }

            static PyObject *t_CollisionMap_size(t_CollisionMap *self)
            {
              jint result;
              OBJ_CALL(result = self->object.size());
              return PyInt_FromLong((long) result);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/en/EnglishMinimalStemFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace en {

          ::java::lang::Class *EnglishMinimalStemFilter::class$ = NULL;
          jmethodID *EnglishMinimalStemFilter::mids$ = NULL;
          bool EnglishMinimalStemFilter::live$ = false;

          jclass EnglishMinimalStemFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/en/EnglishMinimalStemFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          EnglishMinimalStemFilter::EnglishMinimalStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean EnglishMinimalStemFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace en {
          static PyObject *t_EnglishMinimalStemFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_EnglishMinimalStemFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_EnglishMinimalStemFilter_init_(t_EnglishMinimalStemFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_EnglishMinimalStemFilter_incrementToken(t_EnglishMinimalStemFilter *self, PyObject *args);

          static PyMethodDef t_EnglishMinimalStemFilter__methods_[] = {
            DECLARE_METHOD(t_EnglishMinimalStemFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_EnglishMinimalStemFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_EnglishMinimalStemFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(EnglishMinimalStemFilter, t_EnglishMinimalStemFilter, ::org::apache::lucene::analysis::TokenFilter, EnglishMinimalStemFilter, t_EnglishMinimalStemFilter_init_, 0, 0, 0, 0, 0);

          void t_EnglishMinimalStemFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(EnglishMinimalStemFilter), module, "EnglishMinimalStemFilter", 0);
          }

          void t_EnglishMinimalStemFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(EnglishMinimalStemFilter).tp_dict, "class_", make_descriptor(EnglishMinimalStemFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(EnglishMinimalStemFilter).tp_dict, "wrapfn_", make_descriptor(t_EnglishMinimalStemFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(EnglishMinimalStemFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_EnglishMinimalStemFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, EnglishMinimalStemFilter::initializeClass, 1)))
              return NULL;
            return t_EnglishMinimalStemFilter::wrap_Object(EnglishMinimalStemFilter(((t_EnglishMinimalStemFilter *) arg)->object.this$));
          }
          static PyObject *t_EnglishMinimalStemFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, EnglishMinimalStemFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_EnglishMinimalStemFilter_init_(t_EnglishMinimalStemFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            EnglishMinimalStemFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = EnglishMinimalStemFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_EnglishMinimalStemFilter_incrementToken(t_EnglishMinimalStemFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(EnglishMinimalStemFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ar/ArabicStemmer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ar {

          ::java::lang::Class *ArabicStemmer::class$ = NULL;
          jmethodID *ArabicStemmer::mids$ = NULL;
          bool ArabicStemmer::live$ = false;
          jchar ArabicStemmer::ALEF = (jchar) 0;
          jchar ArabicStemmer::BEH = (jchar) 0;
          jchar ArabicStemmer::FEH = (jchar) 0;
          jchar ArabicStemmer::HEH = (jchar) 0;
          jchar ArabicStemmer::KAF = (jchar) 0;
          jchar ArabicStemmer::LAM = (jchar) 0;
          jchar ArabicStemmer::NOON = (jchar) 0;
          jchar ArabicStemmer::TEH = (jchar) 0;
          jchar ArabicStemmer::TEH_MARBUTA = (jchar) 0;
          jchar ArabicStemmer::WAW = (jchar) 0;
          jchar ArabicStemmer::YEH = (jchar) 0;
          JArray< JArray< jchar > > *ArabicStemmer::prefixes = NULL;
          JArray< JArray< jchar > > *ArabicStemmer::suffixes = NULL;

          jclass ArabicStemmer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ar/ArabicStemmer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_stem_ec6430eb] = env->getMethodID(cls, "stem", "([CI)I");
              mids$[mid_stemPrefix_ec6430eb] = env->getMethodID(cls, "stemPrefix", "([CI)I");
              mids$[mid_stemSuffix_ec6430eb] = env->getMethodID(cls, "stemSuffix", "([CI)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              ALEF = env->getStaticCharField(cls, "ALEF");
              BEH = env->getStaticCharField(cls, "BEH");
              FEH = env->getStaticCharField(cls, "FEH");
              HEH = env->getStaticCharField(cls, "HEH");
              KAF = env->getStaticCharField(cls, "KAF");
              LAM = env->getStaticCharField(cls, "LAM");
              NOON = env->getStaticCharField(cls, "NOON");
              TEH = env->getStaticCharField(cls, "TEH");
              TEH_MARBUTA = env->getStaticCharField(cls, "TEH_MARBUTA");
              WAW = env->getStaticCharField(cls, "WAW");
              YEH = env->getStaticCharField(cls, "YEH");
              prefixes = new JArray< JArray< jchar > >(env->getStaticObjectField(cls, "prefixes", "[[C"));
              suffixes = new JArray< JArray< jchar > >(env->getStaticObjectField(cls, "suffixes", "[[C"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ArabicStemmer::ArabicStemmer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint ArabicStemmer::stem(const JArray< jchar > & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_stem_ec6430eb], a0.this$, a1);
          }

          jint ArabicStemmer::stemPrefix(const JArray< jchar > & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_stemPrefix_ec6430eb], a0.this$, a1);
          }

          jint ArabicStemmer::stemSuffix(const JArray< jchar > & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_stemSuffix_ec6430eb], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ar {
          static PyObject *t_ArabicStemmer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ArabicStemmer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ArabicStemmer_init_(t_ArabicStemmer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ArabicStemmer_stem(t_ArabicStemmer *self, PyObject *args);
          static PyObject *t_ArabicStemmer_stemPrefix(t_ArabicStemmer *self, PyObject *args);
          static PyObject *t_ArabicStemmer_stemSuffix(t_ArabicStemmer *self, PyObject *args);

          static PyMethodDef t_ArabicStemmer__methods_[] = {
            DECLARE_METHOD(t_ArabicStemmer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ArabicStemmer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ArabicStemmer, stem, METH_VARARGS),
            DECLARE_METHOD(t_ArabicStemmer, stemPrefix, METH_VARARGS),
            DECLARE_METHOD(t_ArabicStemmer, stemSuffix, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ArabicStemmer, t_ArabicStemmer, ::java::lang::Object, ArabicStemmer, t_ArabicStemmer_init_, 0, 0, 0, 0, 0);

          void t_ArabicStemmer::install(PyObject *module)
          {
            installType(&PY_TYPE(ArabicStemmer), module, "ArabicStemmer", 0);
          }

          void t_ArabicStemmer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ArabicStemmer).tp_dict, "class_", make_descriptor(ArabicStemmer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ArabicStemmer).tp_dict, "wrapfn_", make_descriptor(t_ArabicStemmer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ArabicStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(ArabicStemmer::initializeClass);
            PyDict_SetItemString(PY_TYPE(ArabicStemmer).tp_dict, "ALEF", make_descriptor(ArabicStemmer::ALEF));
            PyDict_SetItemString(PY_TYPE(ArabicStemmer).tp_dict, "BEH", make_descriptor(ArabicStemmer::BEH));
            PyDict_SetItemString(PY_TYPE(ArabicStemmer).tp_dict, "FEH", make_descriptor(ArabicStemmer::FEH));
            PyDict_SetItemString(PY_TYPE(ArabicStemmer).tp_dict, "HEH", make_descriptor(ArabicStemmer::HEH));
            PyDict_SetItemString(PY_TYPE(ArabicStemmer).tp_dict, "KAF", make_descriptor(ArabicStemmer::KAF));
            PyDict_SetItemString(PY_TYPE(ArabicStemmer).tp_dict, "LAM", make_descriptor(ArabicStemmer::LAM));
            PyDict_SetItemString(PY_TYPE(ArabicStemmer).tp_dict, "NOON", make_descriptor(ArabicStemmer::NOON));
            PyDict_SetItemString(PY_TYPE(ArabicStemmer).tp_dict, "TEH", make_descriptor(ArabicStemmer::TEH));
            PyDict_SetItemString(PY_TYPE(ArabicStemmer).tp_dict, "TEH_MARBUTA", make_descriptor(ArabicStemmer::TEH_MARBUTA));
            PyDict_SetItemString(PY_TYPE(ArabicStemmer).tp_dict, "WAW", make_descriptor(ArabicStemmer::WAW));
            PyDict_SetItemString(PY_TYPE(ArabicStemmer).tp_dict, "YEH", make_descriptor(ArabicStemmer::YEH));
            PyDict_SetItemString(PY_TYPE(ArabicStemmer).tp_dict, "prefixes", make_descriptor(JArray<jobject>(ArabicStemmer::prefixes->this$).wrap(NULL)));
            PyDict_SetItemString(PY_TYPE(ArabicStemmer).tp_dict, "suffixes", make_descriptor(JArray<jobject>(ArabicStemmer::suffixes->this$).wrap(NULL)));
          }

          static PyObject *t_ArabicStemmer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ArabicStemmer::initializeClass, 1)))
              return NULL;
            return t_ArabicStemmer::wrap_Object(ArabicStemmer(((t_ArabicStemmer *) arg)->object.this$));
          }
          static PyObject *t_ArabicStemmer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ArabicStemmer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ArabicStemmer_init_(t_ArabicStemmer *self, PyObject *args, PyObject *kwds)
          {
            ArabicStemmer object((jobject) NULL);

            INT_CALL(object = ArabicStemmer());
            self->object = object;

            return 0;
          }

          static PyObject *t_ArabicStemmer_stem(t_ArabicStemmer *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(result = self->object.stem(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "stem", args);
            return NULL;
          }

          static PyObject *t_ArabicStemmer_stemPrefix(t_ArabicStemmer *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(result = self->object.stemPrefix(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "stemPrefix", args);
            return NULL;
          }

          static PyObject *t_ArabicStemmer_stemSuffix(t_ArabicStemmer *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(result = self->object.stemSuffix(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "stemSuffix", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/pylucene/search/PythonIntParser.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/Terms.h"
#include "org/apache/lucene/index/TermsEnum.h"
#include "org/apache/lucene/search/FieldCache$IntParser.h"
#include "java/lang/Throwable.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace search {

        ::java::lang::Class *PythonIntParser::class$ = NULL;
        jmethodID *PythonIntParser::mids$ = NULL;
        bool PythonIntParser::live$ = false;

        jclass PythonIntParser::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/pylucene/search/PythonIntParser");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_finalize_54c6a166] = env->getMethodID(cls, "finalize", "()V");
            mids$[mid_parseInt_7bc03ddb] = env->getMethodID(cls, "parseInt", "(Lorg/apache/lucene/util/BytesRef;)I");
            mids$[mid_pythonDecRef_54c6a166] = env->getMethodID(cls, "pythonDecRef", "()V");
            mids$[mid_pythonExtension_54c6a17a] = env->getMethodID(cls, "pythonExtension", "()J");
            mids$[mid_pythonExtension_0ee6df2f] = env->getMethodID(cls, "pythonExtension", "(J)V");
            mids$[mid_termsEnum_fb3ac14e] = env->getMethodID(cls, "termsEnum", "(Lorg/apache/lucene/index/Terms;)Lorg/apache/lucene/index/TermsEnum;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PythonIntParser::PythonIntParser() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void PythonIntParser::finalize() const
        {
          env->callVoidMethod(this$, mids$[mid_finalize_54c6a166]);
        }

        jlong PythonIntParser::pythonExtension() const
        {
          return env->callLongMethod(this$, mids$[mid_pythonExtension_54c6a17a]);
        }

        void PythonIntParser::pythonExtension(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_pythonExtension_0ee6df2f], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace search {
        static PyObject *t_PythonIntParser_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PythonIntParser_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PythonIntParser_init_(t_PythonIntParser *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PythonIntParser_finalize(t_PythonIntParser *self);
        static PyObject *t_PythonIntParser_pythonExtension(t_PythonIntParser *self, PyObject *args);
        static jint JNICALL t_PythonIntParser_parseInt0(JNIEnv *jenv, jobject jobj, jobject a0);
        static void JNICALL t_PythonIntParser_pythonDecRef1(JNIEnv *jenv, jobject jobj);
        static jobject JNICALL t_PythonIntParser_termsEnum2(JNIEnv *jenv, jobject jobj, jobject a0);
        static PyObject *t_PythonIntParser_get__self(t_PythonIntParser *self, void *data);
        static PyGetSetDef t_PythonIntParser__fields_[] = {
          DECLARE_GET_FIELD(t_PythonIntParser, self),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PythonIntParser__methods_[] = {
          DECLARE_METHOD(t_PythonIntParser, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonIntParser, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonIntParser, finalize, METH_NOARGS),
          DECLARE_METHOD(t_PythonIntParser, pythonExtension, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PythonIntParser, t_PythonIntParser, ::java::lang::Object, PythonIntParser, t_PythonIntParser_init_, 0, 0, t_PythonIntParser__fields_, 0, 0);

        void t_PythonIntParser::install(PyObject *module)
        {
          installType(&PY_TYPE(PythonIntParser), module, "PythonIntParser", 1);
        }

        void t_PythonIntParser::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PythonIntParser).tp_dict, "class_", make_descriptor(PythonIntParser::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PythonIntParser).tp_dict, "wrapfn_", make_descriptor(t_PythonIntParser::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PythonIntParser).tp_dict, "boxfn_", make_descriptor(boxObject));
          jclass cls = env->getClass(PythonIntParser::initializeClass);
          JNINativeMethod methods[] = {
            { "parseInt", "(Lorg/apache/lucene/util/BytesRef;)I", (void *) t_PythonIntParser_parseInt0 },
            { "pythonDecRef", "()V", (void *) t_PythonIntParser_pythonDecRef1 },
            { "termsEnum", "(Lorg/apache/lucene/index/Terms;)Lorg/apache/lucene/index/TermsEnum;", (void *) t_PythonIntParser_termsEnum2 },
          };
          env->registerNatives(cls, methods, 3);
        }

        static PyObject *t_PythonIntParser_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PythonIntParser::initializeClass, 1)))
            return NULL;
          return t_PythonIntParser::wrap_Object(PythonIntParser(((t_PythonIntParser *) arg)->object.this$));
        }
        static PyObject *t_PythonIntParser_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PythonIntParser::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PythonIntParser_init_(t_PythonIntParser *self, PyObject *args, PyObject *kwds)
        {
          PythonIntParser object((jobject) NULL);

          INT_CALL(object = PythonIntParser());
          self->object = object;

          Py_INCREF((PyObject *) self);
          self->object.pythonExtension((jlong) (Py_intptr_t) (void *) self);

          return 0;
        }

        static PyObject *t_PythonIntParser_finalize(t_PythonIntParser *self)
        {
          OBJ_CALL(self->object.finalize());
          Py_RETURN_NONE;
        }

        static PyObject *t_PythonIntParser_pythonExtension(t_PythonIntParser *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              jlong result;
              OBJ_CALL(result = self->object.pythonExtension());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }
            break;
           case 1:
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.pythonExtension(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "pythonExtension", args);
          return NULL;
        }

        static jint JNICALL t_PythonIntParser_parseInt0(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonIntParser::mids$[PythonIntParser::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jint value;
          PyObject *o0 = ::org::apache::lucene::util::t_BytesRef::wrap_Object(::org::apache::lucene::util::BytesRef(a0));
          PyObject *result = PyObject_CallMethod(obj, "parseInt", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "I", &value))
          {
            throwTypeError("parseInt", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jint) 0;
        }

        static void JNICALL t_PythonIntParser_pythonDecRef1(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonIntParser::mids$[PythonIntParser::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            jenv->CallVoidMethod(jobj, PythonIntParser::mids$[PythonIntParser::mid_pythonExtension_0ee6df2f], (jlong) 0);
            env->finalizeObject(jenv, obj);
          }
        }

        static jobject JNICALL t_PythonIntParser_termsEnum2(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonIntParser::mids$[PythonIntParser::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          ::org::apache::lucene::index::TermsEnum value((jobject) NULL);
          PyObject *o0 = ::org::apache::lucene::index::t_Terms::wrap_Object(::org::apache::lucene::index::Terms(a0));
          PyObject *result = PyObject_CallMethod(obj, "termsEnum", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "k", ::org::apache::lucene::index::TermsEnum::initializeClass, &value))
          {
            throwTypeError("termsEnum", result);
            Py_DECREF(result);
          }
          else
          {
            jobj = jenv->NewLocalRef(value.this$);
            Py_DECREF(result);
            return jobj;
          }

          return (jobject) NULL;
        }

        static PyObject *t_PythonIntParser_get__self(t_PythonIntParser *self, void *data)
        {
          jlong ptr;
          OBJ_CALL(ptr = self->object.pythonExtension());
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            Py_INCREF(obj);
            return obj;
          }
          else
            Py_RETURN_NONE;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/standard/ClassicTokenizer.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "java/io/Reader.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {

          ::java::lang::Class *ClassicTokenizer::class$ = NULL;
          jmethodID *ClassicTokenizer::mids$ = NULL;
          bool ClassicTokenizer::live$ = false;
          jint ClassicTokenizer::ACRONYM = (jint) 0;
          jint ClassicTokenizer::ACRONYM_DEP = (jint) 0;
          jint ClassicTokenizer::ALPHANUM = (jint) 0;
          jint ClassicTokenizer::APOSTROPHE = (jint) 0;
          jint ClassicTokenizer::CJ = (jint) 0;
          jint ClassicTokenizer::COMPANY = (jint) 0;
          jint ClassicTokenizer::EMAIL = (jint) 0;
          jint ClassicTokenizer::HOST = (jint) 0;
          jint ClassicTokenizer::NUM = (jint) 0;
          JArray< ::java::lang::String > *ClassicTokenizer::TOKEN_TYPES = NULL;

          jclass ClassicTokenizer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/standard/ClassicTokenizer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_cf2e3c10] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;)V");
              mids$[mid_init$_5877b8f0] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;)V");
              mids$[mid_init$_7997a391] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Ljava/io/Reader;)V");
              mids$[mid_init$_be7a3ecf] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;)V");
              mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
              mids$[mid_end_54c6a166] = env->getMethodID(cls, "end", "()V");
              mids$[mid_getMaxTokenLength_54c6a179] = env->getMethodID(cls, "getMaxTokenLength", "()I");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");
              mids$[mid_setMaxTokenLength_39c7bd3c] = env->getMethodID(cls, "setMaxTokenLength", "(I)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              ACRONYM = env->getStaticIntField(cls, "ACRONYM");
              ACRONYM_DEP = env->getStaticIntField(cls, "ACRONYM_DEP");
              ALPHANUM = env->getStaticIntField(cls, "ALPHANUM");
              APOSTROPHE = env->getStaticIntField(cls, "APOSTROPHE");
              CJ = env->getStaticIntField(cls, "CJ");
              COMPANY = env->getStaticIntField(cls, "COMPANY");
              EMAIL = env->getStaticIntField(cls, "EMAIL");
              HOST = env->getStaticIntField(cls, "HOST");
              NUM = env->getStaticIntField(cls, "NUM");
              TOKEN_TYPES = new JArray< ::java::lang::String >(env->getStaticObjectField(cls, "TOKEN_TYPES", "[Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ClassicTokenizer::ClassicTokenizer(const ::java::io::Reader & a0) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_cf2e3c10, a0.this$)) {}

          ClassicTokenizer::ClassicTokenizer(const ::org::apache::lucene::util::AttributeFactory & a0, const ::java::io::Reader & a1) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_5877b8f0, a0.this$, a1.this$)) {}

          ClassicTokenizer::ClassicTokenizer(const ::org::apache::lucene::util::Version & a0, const ::java::io::Reader & a1) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_7997a391, a0.this$, a1.this$)) {}

          ClassicTokenizer::ClassicTokenizer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::util::AttributeFactory & a1, const ::java::io::Reader & a2) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_be7a3ecf, a0.this$, a1.this$, a2.this$)) {}

          void ClassicTokenizer::close() const
          {
            env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
          }

          void ClassicTokenizer::end() const
          {
            env->callVoidMethod(this$, mids$[mid_end_54c6a166]);
          }

          jint ClassicTokenizer::getMaxTokenLength() const
          {
            return env->callIntMethod(this$, mids$[mid_getMaxTokenLength_54c6a179]);
          }

          jboolean ClassicTokenizer::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void ClassicTokenizer::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }

          void ClassicTokenizer::setMaxTokenLength(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMaxTokenLength_39c7bd3c], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {
          static PyObject *t_ClassicTokenizer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ClassicTokenizer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ClassicTokenizer_init_(t_ClassicTokenizer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ClassicTokenizer_close(t_ClassicTokenizer *self, PyObject *args);
          static PyObject *t_ClassicTokenizer_end(t_ClassicTokenizer *self, PyObject *args);
          static PyObject *t_ClassicTokenizer_getMaxTokenLength(t_ClassicTokenizer *self);
          static PyObject *t_ClassicTokenizer_incrementToken(t_ClassicTokenizer *self, PyObject *args);
          static PyObject *t_ClassicTokenizer_reset(t_ClassicTokenizer *self, PyObject *args);
          static PyObject *t_ClassicTokenizer_setMaxTokenLength(t_ClassicTokenizer *self, PyObject *arg);
          static PyObject *t_ClassicTokenizer_get__maxTokenLength(t_ClassicTokenizer *self, void *data);
          static int t_ClassicTokenizer_set__maxTokenLength(t_ClassicTokenizer *self, PyObject *arg, void *data);
          static PyGetSetDef t_ClassicTokenizer__fields_[] = {
            DECLARE_GETSET_FIELD(t_ClassicTokenizer, maxTokenLength),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_ClassicTokenizer__methods_[] = {
            DECLARE_METHOD(t_ClassicTokenizer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ClassicTokenizer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ClassicTokenizer, close, METH_VARARGS),
            DECLARE_METHOD(t_ClassicTokenizer, end, METH_VARARGS),
            DECLARE_METHOD(t_ClassicTokenizer, getMaxTokenLength, METH_NOARGS),
            DECLARE_METHOD(t_ClassicTokenizer, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_ClassicTokenizer, reset, METH_VARARGS),
            DECLARE_METHOD(t_ClassicTokenizer, setMaxTokenLength, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ClassicTokenizer, t_ClassicTokenizer, ::org::apache::lucene::analysis::Tokenizer, ClassicTokenizer, t_ClassicTokenizer_init_, 0, 0, t_ClassicTokenizer__fields_, 0, 0);

          void t_ClassicTokenizer::install(PyObject *module)
          {
            installType(&PY_TYPE(ClassicTokenizer), module, "ClassicTokenizer", 0);
          }

          void t_ClassicTokenizer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ClassicTokenizer).tp_dict, "class_", make_descriptor(ClassicTokenizer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ClassicTokenizer).tp_dict, "wrapfn_", make_descriptor(t_ClassicTokenizer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ClassicTokenizer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(ClassicTokenizer::initializeClass);
            PyDict_SetItemString(PY_TYPE(ClassicTokenizer).tp_dict, "ACRONYM", make_descriptor(ClassicTokenizer::ACRONYM));
            PyDict_SetItemString(PY_TYPE(ClassicTokenizer).tp_dict, "ACRONYM_DEP", make_descriptor(ClassicTokenizer::ACRONYM_DEP));
            PyDict_SetItemString(PY_TYPE(ClassicTokenizer).tp_dict, "ALPHANUM", make_descriptor(ClassicTokenizer::ALPHANUM));
            PyDict_SetItemString(PY_TYPE(ClassicTokenizer).tp_dict, "APOSTROPHE", make_descriptor(ClassicTokenizer::APOSTROPHE));
            PyDict_SetItemString(PY_TYPE(ClassicTokenizer).tp_dict, "CJ", make_descriptor(ClassicTokenizer::CJ));
            PyDict_SetItemString(PY_TYPE(ClassicTokenizer).tp_dict, "COMPANY", make_descriptor(ClassicTokenizer::COMPANY));
            PyDict_SetItemString(PY_TYPE(ClassicTokenizer).tp_dict, "EMAIL", make_descriptor(ClassicTokenizer::EMAIL));
            PyDict_SetItemString(PY_TYPE(ClassicTokenizer).tp_dict, "HOST", make_descriptor(ClassicTokenizer::HOST));
            PyDict_SetItemString(PY_TYPE(ClassicTokenizer).tp_dict, "NUM", make_descriptor(ClassicTokenizer::NUM));
            PyDict_SetItemString(PY_TYPE(ClassicTokenizer).tp_dict, "TOKEN_TYPES", make_descriptor(JArray<jstring>(ClassicTokenizer::TOKEN_TYPES->this$).wrap()));
          }

          static PyObject *t_ClassicTokenizer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ClassicTokenizer::initializeClass, 1)))
              return NULL;
            return t_ClassicTokenizer::wrap_Object(ClassicTokenizer(((t_ClassicTokenizer *) arg)->object.this$));
          }
          static PyObject *t_ClassicTokenizer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ClassicTokenizer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ClassicTokenizer_init_(t_ClassicTokenizer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::java::io::Reader a0((jobject) NULL);
                ClassicTokenizer object((jobject) NULL);

                if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
                {
                  INT_CALL(object = ClassicTokenizer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
                ::java::io::Reader a1((jobject) NULL);
                ClassicTokenizer object((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = ClassicTokenizer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                ::java::io::Reader a1((jobject) NULL);
                ClassicTokenizer object((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::util::Version::initializeClass, ::java::io::Reader::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = ClassicTokenizer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                ::org::apache::lucene::util::AttributeFactory a1((jobject) NULL);
                ::java::io::Reader a2((jobject) NULL);
                ClassicTokenizer object((jobject) NULL);

                if (!parseArgs(args, "kkk", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = ClassicTokenizer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ClassicTokenizer_close(t_ClassicTokenizer *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.close());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(ClassicTokenizer), (PyObject *) self, "close", args, 2);
          }

          static PyObject *t_ClassicTokenizer_end(t_ClassicTokenizer *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.end());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(ClassicTokenizer), (PyObject *) self, "end", args, 2);
          }

          static PyObject *t_ClassicTokenizer_getMaxTokenLength(t_ClassicTokenizer *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getMaxTokenLength());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_ClassicTokenizer_incrementToken(t_ClassicTokenizer *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(ClassicTokenizer), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_ClassicTokenizer_reset(t_ClassicTokenizer *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(ClassicTokenizer), (PyObject *) self, "reset", args, 2);
          }

          static PyObject *t_ClassicTokenizer_setMaxTokenLength(t_ClassicTokenizer *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setMaxTokenLength(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMaxTokenLength", arg);
            return NULL;
          }

          static PyObject *t_ClassicTokenizer_get__maxTokenLength(t_ClassicTokenizer *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getMaxTokenLength());
            return PyInt_FromLong((long) value);
          }
          static int t_ClassicTokenizer_set__maxTokenLength(t_ClassicTokenizer *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setMaxTokenLength(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "maxTokenLength", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/ArrayUtil.h"
#include "java/lang/Integer.h"
#include "java/lang/Class.h"
#include "java/util/Collection.h"
#include "java/lang/NumberFormatException.h"
#include "java/util/Comparator.h"
#include "java/lang/Comparable.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *ArrayUtil::class$ = NULL;
        jmethodID *ArrayUtil::mids$ = NULL;
        bool ArrayUtil::live$ = false;
        jint ArrayUtil::MAX_ARRAY_LENGTH = (jint) 0;

        jclass ArrayUtil::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/ArrayUtil");

            mids$ = new jmethodID[max_mid];
            mids$[mid_equals_082119cc] = env->getStaticMethodID(cls, "equals", "([II[III)Z");
            mids$[mid_equals_8c28d07c] = env->getStaticMethodID(cls, "equals", "([CI[CII)Z");
            mids$[mid_equals_06f361be] = env->getStaticMethodID(cls, "equals", "([BI[BII)Z");
            mids$[mid_getShrinkSize_d3236abb] = env->getStaticMethodID(cls, "getShrinkSize", "(III)I");
            mids$[mid_grow_4ea7c525] = env->getStaticMethodID(cls, "grow", "([F)[F");
            mids$[mid_grow_607a9cf1] = env->getStaticMethodID(cls, "grow", "([D)[D");
            mids$[mid_grow_21fe49ab] = env->getStaticMethodID(cls, "grow", "([[I)[[I");
            mids$[mid_grow_6dd1ed5d] = env->getStaticMethodID(cls, "grow", "([J)[J");
            mids$[mid_grow_fc3c604f] = env->getStaticMethodID(cls, "grow", "([I)[I");
            mids$[mid_grow_e08af67d] = env->getStaticMethodID(cls, "grow", "([Z)[Z");
            mids$[mid_grow_12f49f5f] = env->getStaticMethodID(cls, "grow", "([C)[C");
            mids$[mid_grow_27787b8f] = env->getStaticMethodID(cls, "grow", "([[F)[[F");
            mids$[mid_grow_3de5243f] = env->getStaticMethodID(cls, "grow", "([S)[S");
            mids$[mid_grow_1193226d] = env->getStaticMethodID(cls, "grow", "([B)[B");
            mids$[mid_grow_e2c1f835] = env->getStaticMethodID(cls, "grow", "([DI)[D");
            mids$[mid_grow_d090ee39] = env->getStaticMethodID(cls, "grow", "([SI)[S");
            mids$[mid_grow_1fbccced] = env->getStaticMethodID(cls, "grow", "([ZI)[Z");
            mids$[mid_grow_62111365] = env->getStaticMethodID(cls, "grow", "([[II)[[I");
            mids$[mid_grow_6bd5869d] = env->getStaticMethodID(cls, "grow", "([BI)[B");
            mids$[mid_grow_91cb90f9] = env->getStaticMethodID(cls, "grow", "([CI)[C");
            mids$[mid_grow_0f9a030d] = env->getStaticMethodID(cls, "grow", "([JI)[J");
            mids$[mid_grow_d766d189] = env->getStaticMethodID(cls, "grow", "([II)[I");
            mids$[mid_grow_92d373eb] = env->getStaticMethodID(cls, "grow", "([[FI)[[F");
            mids$[mid_grow_a415095d] = env->getStaticMethodID(cls, "grow", "([FI)[F");
            mids$[mid_hashCode_6f0bb349] = env->getStaticMethodID(cls, "hashCode", "([CII)I");
            mids$[mid_hashCode_86f44340] = env->getStaticMethodID(cls, "hashCode", "([BII)I");
            mids$[mid_introSort_01dac18d] = env->getStaticMethodID(cls, "introSort", "([Ljava/lang/Comparable;)V");
            mids$[mid_introSort_8c46d789] = env->getStaticMethodID(cls, "introSort", "([Ljava/lang/Object;Ljava/util/Comparator;)V");
            mids$[mid_introSort_266f4139] = env->getStaticMethodID(cls, "introSort", "([Ljava/lang/Comparable;II)V");
            mids$[mid_introSort_7c263389] = env->getStaticMethodID(cls, "introSort", "([Ljava/lang/Object;IILjava/util/Comparator;)V");
            mids$[mid_naturalComparator_5a7ff2fc] = env->getStaticMethodID(cls, "naturalComparator", "()Ljava/util/Comparator;");
            mids$[mid_oversize_d8d154b9] = env->getStaticMethodID(cls, "oversize", "(II)I");
            mids$[mid_parseInt_700e23c9] = env->getStaticMethodID(cls, "parseInt", "([C)I");
            mids$[mid_parseInt_6f0bb349] = env->getStaticMethodID(cls, "parseInt", "([CII)I");
            mids$[mid_parseInt_afe81cab] = env->getStaticMethodID(cls, "parseInt", "([CIII)I");
            mids$[mid_shrink_92d373eb] = env->getStaticMethodID(cls, "shrink", "([[FI)[[F");
            mids$[mid_shrink_0f9a030d] = env->getStaticMethodID(cls, "shrink", "([JI)[J");
            mids$[mid_shrink_1fbccced] = env->getStaticMethodID(cls, "shrink", "([ZI)[Z");
            mids$[mid_shrink_6bd5869d] = env->getStaticMethodID(cls, "shrink", "([BI)[B");
            mids$[mid_shrink_d766d189] = env->getStaticMethodID(cls, "shrink", "([II)[I");
            mids$[mid_shrink_91cb90f9] = env->getStaticMethodID(cls, "shrink", "([CI)[C");
            mids$[mid_shrink_62111365] = env->getStaticMethodID(cls, "shrink", "([[II)[[I");
            mids$[mid_shrink_d090ee39] = env->getStaticMethodID(cls, "shrink", "([SI)[S");
            mids$[mid_swap_4172dade] = env->getStaticMethodID(cls, "swap", "([Ljava/lang/Object;II)V");
            mids$[mid_timSort_01dac18d] = env->getStaticMethodID(cls, "timSort", "([Ljava/lang/Comparable;)V");
            mids$[mid_timSort_8c46d789] = env->getStaticMethodID(cls, "timSort", "([Ljava/lang/Object;Ljava/util/Comparator;)V");
            mids$[mid_timSort_266f4139] = env->getStaticMethodID(cls, "timSort", "([Ljava/lang/Comparable;II)V");
            mids$[mid_timSort_7c263389] = env->getStaticMethodID(cls, "timSort", "([Ljava/lang/Object;IILjava/util/Comparator;)V");
            mids$[mid_toIntArray_d16addd8] = env->getStaticMethodID(cls, "toIntArray", "(Ljava/util/Collection;)[I");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            MAX_ARRAY_LENGTH = env->getStaticIntField(cls, "MAX_ARRAY_LENGTH");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jboolean ArrayUtil::equals(const JArray< jint > & a0, jint a1, const JArray< jint > & a2, jint a3, jint a4)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticBooleanMethod(cls, mids$[mid_equals_082119cc], a0.this$, a1, a2.this$, a3, a4);
        }

        jboolean ArrayUtil::equals(const JArray< jchar > & a0, jint a1, const JArray< jchar > & a2, jint a3, jint a4)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticBooleanMethod(cls, mids$[mid_equals_8c28d07c], a0.this$, a1, a2.this$, a3, a4);
        }

        jboolean ArrayUtil::equals(const JArray< jbyte > & a0, jint a1, const JArray< jbyte > & a2, jint a3, jint a4)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticBooleanMethod(cls, mids$[mid_equals_06f361be], a0.this$, a1, a2.this$, a3, a4);
        }

        jint ArrayUtil::getShrinkSize(jint a0, jint a1, jint a2)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_getShrinkSize_d3236abb], a0, a1, a2);
        }

        JArray< jfloat > ArrayUtil::grow(const JArray< jfloat > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< jfloat >(env->callStaticObjectMethod(cls, mids$[mid_grow_4ea7c525], a0.this$));
        }

        JArray< jdouble > ArrayUtil::grow(const JArray< jdouble > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< jdouble >(env->callStaticObjectMethod(cls, mids$[mid_grow_607a9cf1], a0.this$));
        }

        JArray< JArray< jint > > ArrayUtil::grow(const JArray< JArray< jint > > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< JArray< jint > >(env->callStaticObjectMethod(cls, mids$[mid_grow_21fe49ab], a0.this$));
        }

        JArray< jlong > ArrayUtil::grow(const JArray< jlong > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< jlong >(env->callStaticObjectMethod(cls, mids$[mid_grow_6dd1ed5d], a0.this$));
        }

        JArray< jint > ArrayUtil::grow(const JArray< jint > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< jint >(env->callStaticObjectMethod(cls, mids$[mid_grow_fc3c604f], a0.this$));
        }

        JArray< jboolean > ArrayUtil::grow(const JArray< jboolean > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< jboolean >(env->callStaticObjectMethod(cls, mids$[mid_grow_e08af67d], a0.this$));
        }

        JArray< jchar > ArrayUtil::grow(const JArray< jchar > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< jchar >(env->callStaticObjectMethod(cls, mids$[mid_grow_12f49f5f], a0.this$));
        }

        JArray< JArray< jfloat > > ArrayUtil::grow(const JArray< JArray< jfloat > > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< JArray< jfloat > >(env->callStaticObjectMethod(cls, mids$[mid_grow_27787b8f], a0.this$));
        }

        JArray< jshort > ArrayUtil::grow(const JArray< jshort > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< jshort >(env->callStaticObjectMethod(cls, mids$[mid_grow_3de5243f], a0.this$));
        }

        JArray< jbyte > ArrayUtil::grow(const JArray< jbyte > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< jbyte >(env->callStaticObjectMethod(cls, mids$[mid_grow_1193226d], a0.this$));
        }

        JArray< jdouble > ArrayUtil::grow(const JArray< jdouble > & a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< jdouble >(env->callStaticObjectMethod(cls, mids$[mid_grow_e2c1f835], a0.this$, a1));
        }

        JArray< jshort > ArrayUtil::grow(const JArray< jshort > & a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< jshort >(env->callStaticObjectMethod(cls, mids$[mid_grow_d090ee39], a0.this$, a1));
        }

        JArray< jboolean > ArrayUtil::grow(const JArray< jboolean > & a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< jboolean >(env->callStaticObjectMethod(cls, mids$[mid_grow_1fbccced], a0.this$, a1));
        }

        JArray< JArray< jint > > ArrayUtil::grow(const JArray< JArray< jint > > & a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< JArray< jint > >(env->callStaticObjectMethod(cls, mids$[mid_grow_62111365], a0.this$, a1));
        }

        JArray< jbyte > ArrayUtil::grow(const JArray< jbyte > & a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< jbyte >(env->callStaticObjectMethod(cls, mids$[mid_grow_6bd5869d], a0.this$, a1));
        }

        JArray< jchar > ArrayUtil::grow(const JArray< jchar > & a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< jchar >(env->callStaticObjectMethod(cls, mids$[mid_grow_91cb90f9], a0.this$, a1));
        }

        JArray< jlong > ArrayUtil::grow(const JArray< jlong > & a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< jlong >(env->callStaticObjectMethod(cls, mids$[mid_grow_0f9a030d], a0.this$, a1));
        }

        JArray< jint > ArrayUtil::grow(const JArray< jint > & a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< jint >(env->callStaticObjectMethod(cls, mids$[mid_grow_d766d189], a0.this$, a1));
        }

        JArray< JArray< jfloat > > ArrayUtil::grow(const JArray< JArray< jfloat > > & a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< JArray< jfloat > >(env->callStaticObjectMethod(cls, mids$[mid_grow_92d373eb], a0.this$, a1));
        }

        JArray< jfloat > ArrayUtil::grow(const JArray< jfloat > & a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< jfloat >(env->callStaticObjectMethod(cls, mids$[mid_grow_a415095d], a0.this$, a1));
        }

        jint ArrayUtil::hashCode(const JArray< jchar > & a0, jint a1, jint a2)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_hashCode_6f0bb349], a0.this$, a1, a2);
        }

        jint ArrayUtil::hashCode(const JArray< jbyte > & a0, jint a1, jint a2)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_hashCode_86f44340], a0.this$, a1, a2);
        }

        void ArrayUtil::introSort(const JArray< ::java::lang::Comparable > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_introSort_01dac18d], a0.this$);
        }

        void ArrayUtil::introSort(const JArray< ::java::lang::Object > & a0, const ::java::util::Comparator & a1)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_introSort_8c46d789], a0.this$, a1.this$);
        }

        void ArrayUtil::introSort(const JArray< ::java::lang::Comparable > & a0, jint a1, jint a2)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_introSort_266f4139], a0.this$, a1, a2);
        }

        void ArrayUtil::introSort(const JArray< ::java::lang::Object > & a0, jint a1, jint a2, const ::java::util::Comparator & a3)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_introSort_7c263389], a0.this$, a1, a2, a3.this$);
        }

        ::java::util::Comparator ArrayUtil::naturalComparator()
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::util::Comparator(env->callStaticObjectMethod(cls, mids$[mid_naturalComparator_5a7ff2fc]));
        }

        jint ArrayUtil::oversize(jint a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_oversize_d8d154b9], a0, a1);
        }

        jint ArrayUtil::parseInt(const JArray< jchar > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_parseInt_700e23c9], a0.this$);
        }

        jint ArrayUtil::parseInt(const JArray< jchar > & a0, jint a1, jint a2)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_parseInt_6f0bb349], a0.this$, a1, a2);
        }

        jint ArrayUtil::parseInt(const JArray< jchar > & a0, jint a1, jint a2, jint a3)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_parseInt_afe81cab], a0.this$, a1, a2, a3);
        }

        JArray< JArray< jfloat > > ArrayUtil::shrink(const JArray< JArray< jfloat > > & a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< JArray< jfloat > >(env->callStaticObjectMethod(cls, mids$[mid_shrink_92d373eb], a0.this$, a1));
        }

        JArray< jlong > ArrayUtil::shrink(const JArray< jlong > & a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< jlong >(env->callStaticObjectMethod(cls, mids$[mid_shrink_0f9a030d], a0.this$, a1));
        }

        JArray< jboolean > ArrayUtil::shrink(const JArray< jboolean > & a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< jboolean >(env->callStaticObjectMethod(cls, mids$[mid_shrink_1fbccced], a0.this$, a1));
        }

        JArray< jbyte > ArrayUtil::shrink(const JArray< jbyte > & a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< jbyte >(env->callStaticObjectMethod(cls, mids$[mid_shrink_6bd5869d], a0.this$, a1));
        }

        JArray< jint > ArrayUtil::shrink(const JArray< jint > & a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< jint >(env->callStaticObjectMethod(cls, mids$[mid_shrink_d766d189], a0.this$, a1));
        }

        JArray< jchar > ArrayUtil::shrink(const JArray< jchar > & a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< jchar >(env->callStaticObjectMethod(cls, mids$[mid_shrink_91cb90f9], a0.this$, a1));
        }

        JArray< JArray< jint > > ArrayUtil::shrink(const JArray< JArray< jint > > & a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< JArray< jint > >(env->callStaticObjectMethod(cls, mids$[mid_shrink_62111365], a0.this$, a1));
        }

        JArray< jshort > ArrayUtil::shrink(const JArray< jshort > & a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< jshort >(env->callStaticObjectMethod(cls, mids$[mid_shrink_d090ee39], a0.this$, a1));
        }

        void ArrayUtil::swap(const JArray< ::java::lang::Object > & a0, jint a1, jint a2)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_swap_4172dade], a0.this$, a1, a2);
        }

        void ArrayUtil::timSort(const JArray< ::java::lang::Comparable > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_timSort_01dac18d], a0.this$);
        }

        void ArrayUtil::timSort(const JArray< ::java::lang::Object > & a0, const ::java::util::Comparator & a1)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_timSort_8c46d789], a0.this$, a1.this$);
        }

        void ArrayUtil::timSort(const JArray< ::java::lang::Comparable > & a0, jint a1, jint a2)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_timSort_266f4139], a0.this$, a1, a2);
        }

        void ArrayUtil::timSort(const JArray< ::java::lang::Object > & a0, jint a1, jint a2, const ::java::util::Comparator & a3)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_timSort_7c263389], a0.this$, a1, a2, a3.this$);
        }

        JArray< jint > ArrayUtil::toIntArray(const ::java::util::Collection & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< jint >(env->callStaticObjectMethod(cls, mids$[mid_toIntArray_d16addd8], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_ArrayUtil_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ArrayUtil_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ArrayUtil_equals(PyTypeObject *type, PyObject *args);
        static PyObject *t_ArrayUtil_getShrinkSize(PyTypeObject *type, PyObject *args);
        static PyObject *t_ArrayUtil_grow(PyTypeObject *type, PyObject *args);
        static PyObject *t_ArrayUtil_hashCode(PyTypeObject *type, PyObject *args);
        static PyObject *t_ArrayUtil_introSort(PyTypeObject *type, PyObject *args);
        static PyObject *t_ArrayUtil_naturalComparator(PyTypeObject *type);
        static PyObject *t_ArrayUtil_oversize(PyTypeObject *type, PyObject *args);
        static PyObject *t_ArrayUtil_parseInt(PyTypeObject *type, PyObject *args);
        static PyObject *t_ArrayUtil_shrink(PyTypeObject *type, PyObject *args);
        static PyObject *t_ArrayUtil_swap(PyTypeObject *type, PyObject *args);
        static PyObject *t_ArrayUtil_timSort(PyTypeObject *type, PyObject *args);
        static PyObject *t_ArrayUtil_toIntArray(PyTypeObject *type, PyObject *arg);

        static PyMethodDef t_ArrayUtil__methods_[] = {
          DECLARE_METHOD(t_ArrayUtil, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ArrayUtil, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ArrayUtil, equals, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_ArrayUtil, getShrinkSize, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_ArrayUtil, grow, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_ArrayUtil, hashCode, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_ArrayUtil, introSort, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_ArrayUtil, naturalComparator, METH_NOARGS | METH_CLASS),
          DECLARE_METHOD(t_ArrayUtil, oversize, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_ArrayUtil, parseInt, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_ArrayUtil, shrink, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_ArrayUtil, swap, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_ArrayUtil, timSort, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_ArrayUtil, toIntArray, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(ArrayUtil, t_ArrayUtil, ::java::lang::Object, ArrayUtil, abstract_init, 0, 0, 0, 0, 0);

        void t_ArrayUtil::install(PyObject *module)
        {
          installType(&PY_TYPE(ArrayUtil), module, "ArrayUtil", 0);
        }

        void t_ArrayUtil::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(ArrayUtil).tp_dict, "class_", make_descriptor(ArrayUtil::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(ArrayUtil).tp_dict, "wrapfn_", make_descriptor(t_ArrayUtil::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(ArrayUtil).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(ArrayUtil::initializeClass);
          PyDict_SetItemString(PY_TYPE(ArrayUtil).tp_dict, "MAX_ARRAY_LENGTH", make_descriptor(ArrayUtil::MAX_ARRAY_LENGTH));
        }

        static PyObject *t_ArrayUtil_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, ArrayUtil::initializeClass, 1)))
            return NULL;
          return t_ArrayUtil::wrap_Object(ArrayUtil(((t_ArrayUtil *) arg)->object.this$));
        }
        static PyObject *t_ArrayUtil_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, ArrayUtil::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_ArrayUtil_equals(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 5:
            {
              JArray< jint > a0((jobject) NULL);
              jint a1;
              JArray< jint > a2((jobject) NULL);
              jint a3;
              jint a4;
              jboolean result;

              if (!parseArgs(args, "[II[III", &a0, &a1, &a2, &a3, &a4))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::equals(a0, a1, a2, a3, a4));
                Py_RETURN_BOOL(result);
              }
            }
            {
              JArray< jchar > a0((jobject) NULL);
              jint a1;
              JArray< jchar > a2((jobject) NULL);
              jint a3;
              jint a4;
              jboolean result;

              if (!parseArgs(args, "[CI[CII", &a0, &a1, &a2, &a3, &a4))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::equals(a0, a1, a2, a3, a4));
                Py_RETURN_BOOL(result);
              }
            }
            {
              JArray< jbyte > a0((jobject) NULL);
              jint a1;
              JArray< jbyte > a2((jobject) NULL);
              jint a3;
              jint a4;
              jboolean result;

              if (!parseArgs(args, "[BI[BII", &a0, &a1, &a2, &a3, &a4))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::equals(a0, a1, a2, a3, a4));
                Py_RETURN_BOOL(result);
              }
            }
          }

          return callSuper(type, "equals", args, 2);
        }

        static PyObject *t_ArrayUtil_getShrinkSize(PyTypeObject *type, PyObject *args)
        {
          jint a0;
          jint a1;
          jint a2;
          jint result;

          if (!parseArgs(args, "III", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::getShrinkSize(a0, a1, a2));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError(type, "getShrinkSize", args);
          return NULL;
        }

        static PyObject *t_ArrayUtil_grow(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              JArray< jfloat > a0((jobject) NULL);
              JArray< jfloat > result((jobject) NULL);

              if (!parseArgs(args, "[F", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::grow(a0));
                return result.wrap();
              }
            }
            {
              JArray< jdouble > a0((jobject) NULL);
              JArray< jdouble > result((jobject) NULL);

              if (!parseArgs(args, "[D", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::grow(a0));
                return result.wrap();
              }
            }
            {
              JArray< JArray< jint > > a0((jobject) NULL);
              JArray< JArray< jint > > result((jobject) NULL);

              if (!parseArgs(args, "[[I", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::grow(a0));
                return JArray<jobject>(result.this$).wrap(NULL);
              }
            }
            {
              JArray< jlong > a0((jobject) NULL);
              JArray< jlong > result((jobject) NULL);

              if (!parseArgs(args, "[J", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::grow(a0));
                return result.wrap();
              }
            }
            {
              JArray< jint > a0((jobject) NULL);
              JArray< jint > result((jobject) NULL);

              if (!parseArgs(args, "[I", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::grow(a0));
                return result.wrap();
              }
            }
            {
              JArray< jboolean > a0((jobject) NULL);
              JArray< jboolean > result((jobject) NULL);

              if (!parseArgs(args, "[Z", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::grow(a0));
                return result.wrap();
              }
            }
            {
              JArray< jchar > a0((jobject) NULL);
              JArray< jchar > result((jobject) NULL);

              if (!parseArgs(args, "[C", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::grow(a0));
                return result.wrap();
              }
            }
            {
              JArray< JArray< jfloat > > a0((jobject) NULL);
              JArray< JArray< jfloat > > result((jobject) NULL);

              if (!parseArgs(args, "[[F", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::grow(a0));
                return JArray<jobject>(result.this$).wrap(NULL);
              }
            }
            {
              JArray< jshort > a0((jobject) NULL);
              JArray< jshort > result((jobject) NULL);

              if (!parseArgs(args, "[S", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::grow(a0));
                return result.wrap();
              }
            }
            {
              JArray< jbyte > a0((jobject) NULL);
              JArray< jbyte > result((jobject) NULL);

              if (!parseArgs(args, "[B", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::grow(a0));
                return result.wrap();
              }
            }
            break;
           case 2:
            {
              JArray< jdouble > a0((jobject) NULL);
              jint a1;
              JArray< jdouble > result((jobject) NULL);

              if (!parseArgs(args, "[DI", &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::grow(a0, a1));
                return result.wrap();
              }
            }
            {
              JArray< jshort > a0((jobject) NULL);
              jint a1;
              JArray< jshort > result((jobject) NULL);

              if (!parseArgs(args, "[SI", &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::grow(a0, a1));
                return result.wrap();
              }
            }
            {
              JArray< jboolean > a0((jobject) NULL);
              jint a1;
              JArray< jboolean > result((jobject) NULL);

              if (!parseArgs(args, "[ZI", &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::grow(a0, a1));
                return result.wrap();
              }
            }
            {
              JArray< JArray< jint > > a0((jobject) NULL);
              jint a1;
              JArray< JArray< jint > > result((jobject) NULL);

              if (!parseArgs(args, "[[II", &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::grow(a0, a1));
                return JArray<jobject>(result.this$).wrap(NULL);
              }
            }
            {
              JArray< jbyte > a0((jobject) NULL);
              jint a1;
              JArray< jbyte > result((jobject) NULL);

              if (!parseArgs(args, "[BI", &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::grow(a0, a1));
                return result.wrap();
              }
            }
            {
              JArray< jchar > a0((jobject) NULL);
              jint a1;
              JArray< jchar > result((jobject) NULL);

              if (!parseArgs(args, "[CI", &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::grow(a0, a1));
                return result.wrap();
              }
            }
            {
              JArray< jlong > a0((jobject) NULL);
              jint a1;
              JArray< jlong > result((jobject) NULL);

              if (!parseArgs(args, "[JI", &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::grow(a0, a1));
                return result.wrap();
              }
            }
            {
              JArray< jint > a0((jobject) NULL);
              jint a1;
              JArray< jint > result((jobject) NULL);

              if (!parseArgs(args, "[II", &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::grow(a0, a1));
                return result.wrap();
              }
            }
            {
              JArray< JArray< jfloat > > a0((jobject) NULL);
              jint a1;
              JArray< JArray< jfloat > > result((jobject) NULL);

              if (!parseArgs(args, "[[FI", &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::grow(a0, a1));
                return JArray<jobject>(result.this$).wrap(NULL);
              }
            }
            {
              JArray< jfloat > a0((jobject) NULL);
              jint a1;
              JArray< jfloat > result((jobject) NULL);

              if (!parseArgs(args, "[FI", &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::grow(a0, a1));
                return result.wrap();
              }
            }
          }

          PyErr_SetArgsError(type, "grow", args);
          return NULL;
        }

        static PyObject *t_ArrayUtil_hashCode(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 3:
            {
              JArray< jchar > a0((jobject) NULL);
              jint a1;
              jint a2;
              jint result;

              if (!parseArgs(args, "[CII", &a0, &a1, &a2))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::hashCode(a0, a1, a2));
                return PyInt_FromLong((long) result);
              }
            }
            {
              JArray< jbyte > a0((jobject) NULL);
              jint a1;
              jint a2;
              jint result;

              if (!parseArgs(args, "[BII", &a0, &a1, &a2))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::hashCode(a0, a1, a2));
                return PyInt_FromLong((long) result);
              }
            }
          }

          return callSuper(type, "hashCode", args, 2);
        }

        static PyObject *t_ArrayUtil_introSort(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              JArray< ::java::lang::Comparable > a0((jobject) NULL);
              PyTypeObject **p0;

              if (!parseArgs(args, "[K", ::java::lang::Comparable::initializeClass, &a0, &p0, ::java::lang::t_Comparable::parameters_))
              {
                OBJ_CALL(::org::apache::lucene::util::ArrayUtil::introSort(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 2:
            {
              JArray< ::java::lang::Object > a0((jobject) NULL);
              ::java::util::Comparator a1((jobject) NULL);
              PyTypeObject **p1;

              if (!parseArgs(args, "[oK", ::java::util::Comparator::initializeClass, &a0, &a1, &p1, ::java::util::t_Comparator::parameters_))
              {
                OBJ_CALL(::org::apache::lucene::util::ArrayUtil::introSort(a0, a1));
                Py_RETURN_NONE;
              }
            }
            break;
           case 3:
            {
              JArray< ::java::lang::Comparable > a0((jobject) NULL);
              PyTypeObject **p0;
              jint a1;
              jint a2;

              if (!parseArgs(args, "[KII", ::java::lang::Comparable::initializeClass, &a0, &p0, ::java::lang::t_Comparable::parameters_, &a1, &a2))
              {
                OBJ_CALL(::org::apache::lucene::util::ArrayUtil::introSort(a0, a1, a2));
                Py_RETURN_NONE;
              }
            }
            break;
           case 4:
            {
              JArray< ::java::lang::Object > a0((jobject) NULL);
              jint a1;
              jint a2;
              ::java::util::Comparator a3((jobject) NULL);
              PyTypeObject **p3;

              if (!parseArgs(args, "[oIIK", ::java::util::Comparator::initializeClass, &a0, &a1, &a2, &a3, &p3, ::java::util::t_Comparator::parameters_))
              {
                OBJ_CALL(::org::apache::lucene::util::ArrayUtil::introSort(a0, a1, a2, a3));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError(type, "introSort", args);
          return NULL;
        }

        static PyObject *t_ArrayUtil_naturalComparator(PyTypeObject *type)
        {
          ::java::util::Comparator result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::naturalComparator());
          return ::java::util::t_Comparator::wrap_Object(result);
        }

        static PyObject *t_ArrayUtil_oversize(PyTypeObject *type, PyObject *args)
        {
          jint a0;
          jint a1;
          jint result;

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::oversize(a0, a1));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError(type, "oversize", args);
          return NULL;
        }

        static PyObject *t_ArrayUtil_parseInt(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              JArray< jchar > a0((jobject) NULL);
              jint result;

              if (!parseArgs(args, "[C", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::parseInt(a0));
                return PyInt_FromLong((long) result);
              }
            }
            break;
           case 3:
            {
              JArray< jchar > a0((jobject) NULL);
              jint a1;
              jint a2;
              jint result;

              if (!parseArgs(args, "[CII", &a0, &a1, &a2))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::parseInt(a0, a1, a2));
                return PyInt_FromLong((long) result);
              }
            }
            break;
           case 4:
            {
              JArray< jchar > a0((jobject) NULL);
              jint a1;
              jint a2;
              jint a3;
              jint result;

              if (!parseArgs(args, "[CIII", &a0, &a1, &a2, &a3))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::parseInt(a0, a1, a2, a3));
                return PyInt_FromLong((long) result);
              }
            }
          }

          PyErr_SetArgsError(type, "parseInt", args);
          return NULL;
        }

        static PyObject *t_ArrayUtil_shrink(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              JArray< JArray< jfloat > > a0((jobject) NULL);
              jint a1;
              JArray< JArray< jfloat > > result((jobject) NULL);

              if (!parseArgs(args, "[[FI", &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::shrink(a0, a1));
                return JArray<jobject>(result.this$).wrap(NULL);
              }
            }
            {
              JArray< jlong > a0((jobject) NULL);
              jint a1;
              JArray< jlong > result((jobject) NULL);

              if (!parseArgs(args, "[JI", &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::shrink(a0, a1));
                return result.wrap();
              }
            }
            {
              JArray< jboolean > a0((jobject) NULL);
              jint a1;
              JArray< jboolean > result((jobject) NULL);

              if (!parseArgs(args, "[ZI", &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::shrink(a0, a1));
                return result.wrap();
              }
            }
            {
              JArray< jbyte > a0((jobject) NULL);
              jint a1;
              JArray< jbyte > result((jobject) NULL);

              if (!parseArgs(args, "[BI", &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::shrink(a0, a1));
                return result.wrap();
              }
            }
            {
              JArray< jint > a0((jobject) NULL);
              jint a1;
              JArray< jint > result((jobject) NULL);

              if (!parseArgs(args, "[II", &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::shrink(a0, a1));
                return result.wrap();
              }
            }
            {
              JArray< jchar > a0((jobject) NULL);
              jint a1;
              JArray< jchar > result((jobject) NULL);

              if (!parseArgs(args, "[CI", &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::shrink(a0, a1));
                return result.wrap();
              }
            }
            {
              JArray< JArray< jint > > a0((jobject) NULL);
              jint a1;
              JArray< JArray< jint > > result((jobject) NULL);

              if (!parseArgs(args, "[[II", &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::shrink(a0, a1));
                return JArray<jobject>(result.this$).wrap(NULL);
              }
            }
            {
              JArray< jshort > a0((jobject) NULL);
              jint a1;
              JArray< jshort > result((jobject) NULL);

              if (!parseArgs(args, "[SI", &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::shrink(a0, a1));
                return result.wrap();
              }
            }
          }

          PyErr_SetArgsError(type, "shrink", args);
          return NULL;
        }

        static PyObject *t_ArrayUtil_swap(PyTypeObject *type, PyObject *args)
        {
          JArray< ::java::lang::Object > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[oII", &a0, &a1, &a2))
          {
            OBJ_CALL(::org::apache::lucene::util::ArrayUtil::swap(a0, a1, a2));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "swap", args);
          return NULL;
        }

        static PyObject *t_ArrayUtil_timSort(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              JArray< ::java::lang::Comparable > a0((jobject) NULL);
              PyTypeObject **p0;

              if (!parseArgs(args, "[K", ::java::lang::Comparable::initializeClass, &a0, &p0, ::java::lang::t_Comparable::parameters_))
              {
                OBJ_CALL(::org::apache::lucene::util::ArrayUtil::timSort(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 2:
            {
              JArray< ::java::lang::Object > a0((jobject) NULL);
              ::java::util::Comparator a1((jobject) NULL);
              PyTypeObject **p1;

              if (!parseArgs(args, "[oK", ::java::util::Comparator::initializeClass, &a0, &a1, &p1, ::java::util::t_Comparator::parameters_))
              {
                OBJ_CALL(::org::apache::lucene::util::ArrayUtil::timSort(a0, a1));
                Py_RETURN_NONE;
              }
            }
            break;
           case 3:
            {
              JArray< ::java::lang::Comparable > a0((jobject) NULL);
              PyTypeObject **p0;
              jint a1;
              jint a2;

              if (!parseArgs(args, "[KII", ::java::lang::Comparable::initializeClass, &a0, &p0, ::java::lang::t_Comparable::parameters_, &a1, &a2))
              {
                OBJ_CALL(::org::apache::lucene::util::ArrayUtil::timSort(a0, a1, a2));
                Py_RETURN_NONE;
              }
            }
            break;
           case 4:
            {
              JArray< ::java::lang::Object > a0((jobject) NULL);
              jint a1;
              jint a2;
              ::java::util::Comparator a3((jobject) NULL);
              PyTypeObject **p3;

              if (!parseArgs(args, "[oIIK", ::java::util::Comparator::initializeClass, &a0, &a1, &a2, &a3, &p3, ::java::util::t_Comparator::parameters_))
              {
                OBJ_CALL(::org::apache::lucene::util::ArrayUtil::timSort(a0, a1, a2, a3));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError(type, "timSort", args);
          return NULL;
        }

        static PyObject *t_ArrayUtil_toIntArray(PyTypeObject *type, PyObject *arg)
        {
          ::java::util::Collection a0((jobject) NULL);
          PyTypeObject **p0;
          JArray< jint > result((jobject) NULL);

          if (!parseArg(arg, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::toIntArray(a0));
            return result.wrap();
          }

          PyErr_SetArgsError(type, "toIntArray", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/DrillSideways.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "org/apache/lucene/search/Sort.h"
#include "org/apache/lucene/facet/DrillDownQuery.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/facet/sortedset/SortedSetDocValuesReaderState.h"
#include "org/apache/lucene/search/ScoreDoc.h"
#include "org/apache/lucene/search/Filter.h"
#include "org/apache/lucene/search/Collector.h"
#include "org/apache/lucene/facet/DrillSideways$DrillSidewaysResult.h"
#include "org/apache/lucene/search/FieldDoc.h"
#include "org/apache/lucene/facet/FacetsConfig.h"
#include "org/apache/lucene/facet/taxonomy/TaxonomyReader.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {

        ::java::lang::Class *DrillSideways::class$ = NULL;
        jmethodID *DrillSideways::mids$ = NULL;
        bool DrillSideways::live$ = false;

        jclass DrillSideways::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/facet/DrillSideways");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_47a6ec5e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/facet/FacetsConfig;Lorg/apache/lucene/facet/sortedset/SortedSetDocValuesReaderState;)V");
            mids$[mid_init$_f1ca4e8d] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/facet/FacetsConfig;Lorg/apache/lucene/facet/taxonomy/TaxonomyReader;)V");
            mids$[mid_init$_0ea4c17f] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/facet/FacetsConfig;Lorg/apache/lucene/facet/taxonomy/TaxonomyReader;Lorg/apache/lucene/facet/sortedset/SortedSetDocValuesReaderState;)V");
            mids$[mid_search_f5942c04] = env->getMethodID(cls, "search", "(Lorg/apache/lucene/facet/DrillDownQuery;Lorg/apache/lucene/search/Collector;)Lorg/apache/lucene/facet/DrillSideways$DrillSidewaysResult;");
            mids$[mid_search_37cfd26e] = env->getMethodID(cls, "search", "(Lorg/apache/lucene/facet/DrillDownQuery;I)Lorg/apache/lucene/facet/DrillSideways$DrillSidewaysResult;");
            mids$[mid_search_32a5c782] = env->getMethodID(cls, "search", "(Lorg/apache/lucene/search/ScoreDoc;Lorg/apache/lucene/facet/DrillDownQuery;I)Lorg/apache/lucene/facet/DrillSideways$DrillSidewaysResult;");
            mids$[mid_search_8da44ba0] = env->getMethodID(cls, "search", "(Lorg/apache/lucene/facet/DrillDownQuery;Lorg/apache/lucene/search/Filter;Lorg/apache/lucene/search/FieldDoc;ILorg/apache/lucene/search/Sort;ZZ)Lorg/apache/lucene/facet/DrillSideways$DrillSidewaysResult;");
            mids$[mid_scoreSubDocsAtOnce_54c6a16a] = env->getMethodID(cls, "scoreSubDocsAtOnce", "()Z");
            mids$[mid_buildFacetsResult_3bbe989f] = env->getMethodID(cls, "buildFacetsResult", "(Lorg/apache/lucene/facet/FacetsCollector;[Lorg/apache/lucene/facet/FacetsCollector;[Ljava/lang/String;)Lorg/apache/lucene/facet/Facets;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        DrillSideways::DrillSideways(const ::org::apache::lucene::search::IndexSearcher & a0, const ::org::apache::lucene::facet::FacetsConfig & a1, const ::org::apache::lucene::facet::sortedset::SortedSetDocValuesReaderState & a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_47a6ec5e, a0.this$, a1.this$, a2.this$)) {}

        DrillSideways::DrillSideways(const ::org::apache::lucene::search::IndexSearcher & a0, const ::org::apache::lucene::facet::FacetsConfig & a1, const ::org::apache::lucene::facet::taxonomy::TaxonomyReader & a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f1ca4e8d, a0.this$, a1.this$, a2.this$)) {}

        DrillSideways::DrillSideways(const ::org::apache::lucene::search::IndexSearcher & a0, const ::org::apache::lucene::facet::FacetsConfig & a1, const ::org::apache::lucene::facet::taxonomy::TaxonomyReader & a2, const ::org::apache::lucene::facet::sortedset::SortedSetDocValuesReaderState & a3) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_0ea4c17f, a0.this$, a1.this$, a2.this$, a3.this$)) {}

        ::org::apache::lucene::facet::DrillSideways$DrillSidewaysResult DrillSideways::search(const ::org::apache::lucene::facet::DrillDownQuery & a0, const ::org::apache::lucene::search::Collector & a1) const
        {
          return ::org::apache::lucene::facet::DrillSideways$DrillSidewaysResult(env->callObjectMethod(this$, mids$[mid_search_f5942c04], a0.this$, a1.this$));
        }

        ::org::apache::lucene::facet::DrillSideways$DrillSidewaysResult DrillSideways::search(const ::org::apache::lucene::facet::DrillDownQuery & a0, jint a1) const
        {
          return ::org::apache::lucene::facet::DrillSideways$DrillSidewaysResult(env->callObjectMethod(this$, mids$[mid_search_37cfd26e], a0.this$, a1));
        }

        ::org::apache::lucene::facet::DrillSideways$DrillSidewaysResult DrillSideways::search(const ::org::apache::lucene::search::ScoreDoc & a0, const ::org::apache::lucene::facet::DrillDownQuery & a1, jint a2) const
        {
          return ::org::apache::lucene::facet::DrillSideways$DrillSidewaysResult(env->callObjectMethod(this$, mids$[mid_search_32a5c782], a0.this$, a1.this$, a2));
        }

        ::org::apache::lucene::facet::DrillSideways$DrillSidewaysResult DrillSideways::search(const ::org::apache::lucene::facet::DrillDownQuery & a0, const ::org::apache::lucene::search::Filter & a1, const ::org::apache::lucene::search::FieldDoc & a2, jint a3, const ::org::apache::lucene::search::Sort & a4, jboolean a5, jboolean a6) const
        {
          return ::org::apache::lucene::facet::DrillSideways$DrillSidewaysResult(env->callObjectMethod(this$, mids$[mid_search_8da44ba0], a0.this$, a1.this$, a2.this$, a3, a4.this$, a5, a6));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        static PyObject *t_DrillSideways_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DrillSideways_instance_(PyTypeObject *type, PyObject *arg);
        static int t_DrillSideways_init_(t_DrillSideways *self, PyObject *args, PyObject *kwds);
        static PyObject *t_DrillSideways_search(t_DrillSideways *self, PyObject *args);

        static PyMethodDef t_DrillSideways__methods_[] = {
          DECLARE_METHOD(t_DrillSideways, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DrillSideways, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DrillSideways, search, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(DrillSideways, t_DrillSideways, ::java::lang::Object, DrillSideways, t_DrillSideways_init_, 0, 0, 0, 0, 0);

        void t_DrillSideways::install(PyObject *module)
        {
          installType(&PY_TYPE(DrillSideways), module, "DrillSideways", 0);
          PyDict_SetItemString(PY_TYPE(DrillSideways).tp_dict, "DrillSidewaysResult", make_descriptor(&PY_TYPE(DrillSideways$DrillSidewaysResult)));
        }

        void t_DrillSideways::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(DrillSideways).tp_dict, "class_", make_descriptor(DrillSideways::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(DrillSideways).tp_dict, "wrapfn_", make_descriptor(t_DrillSideways::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(DrillSideways).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_DrillSideways_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, DrillSideways::initializeClass, 1)))
            return NULL;
          return t_DrillSideways::wrap_Object(DrillSideways(((t_DrillSideways *) arg)->object.this$));
        }
        static PyObject *t_DrillSideways_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, DrillSideways::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_DrillSideways_init_(t_DrillSideways *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 3:
            {
              ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
              ::org::apache::lucene::facet::FacetsConfig a1((jobject) NULL);
              ::org::apache::lucene::facet::sortedset::SortedSetDocValuesReaderState a2((jobject) NULL);
              DrillSideways object((jobject) NULL);

              if (!parseArgs(args, "kkk", ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::facet::FacetsConfig::initializeClass, ::org::apache::lucene::facet::sortedset::SortedSetDocValuesReaderState::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = DrillSideways(a0, a1, a2));
                self->object = object;
                break;
              }
            }
            {
              ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
              ::org::apache::lucene::facet::FacetsConfig a1((jobject) NULL);
              ::org::apache::lucene::facet::taxonomy::TaxonomyReader a2((jobject) NULL);
              DrillSideways object((jobject) NULL);

              if (!parseArgs(args, "kkk", ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::facet::FacetsConfig::initializeClass, ::org::apache::lucene::facet::taxonomy::TaxonomyReader::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = DrillSideways(a0, a1, a2));
                self->object = object;
                break;
              }
            }
            goto err;
           case 4:
            {
              ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
              ::org::apache::lucene::facet::FacetsConfig a1((jobject) NULL);
              ::org::apache::lucene::facet::taxonomy::TaxonomyReader a2((jobject) NULL);
              ::org::apache::lucene::facet::sortedset::SortedSetDocValuesReaderState a3((jobject) NULL);
              DrillSideways object((jobject) NULL);

              if (!parseArgs(args, "kkkk", ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::facet::FacetsConfig::initializeClass, ::org::apache::lucene::facet::taxonomy::TaxonomyReader::initializeClass, ::org::apache::lucene::facet::sortedset::SortedSetDocValuesReaderState::initializeClass, &a0, &a1, &a2, &a3))
              {
                INT_CALL(object = DrillSideways(a0, a1, a2, a3));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_DrillSideways_search(t_DrillSideways *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::org::apache::lucene::facet::DrillDownQuery a0((jobject) NULL);
              ::org::apache::lucene::search::Collector a1((jobject) NULL);
              ::org::apache::lucene::facet::DrillSideways$DrillSidewaysResult result((jobject) NULL);

              if (!parseArgs(args, "kk", ::org::apache::lucene::facet::DrillDownQuery::initializeClass, ::org::apache::lucene::search::Collector::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = self->object.search(a0, a1));
                return ::org::apache::lucene::facet::t_DrillSideways$DrillSidewaysResult::wrap_Object(result);
              }
            }
            {
              ::org::apache::lucene::facet::DrillDownQuery a0((jobject) NULL);
              jint a1;
              ::org::apache::lucene::facet::DrillSideways$DrillSidewaysResult result((jobject) NULL);

              if (!parseArgs(args, "kI", ::org::apache::lucene::facet::DrillDownQuery::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = self->object.search(a0, a1));
                return ::org::apache::lucene::facet::t_DrillSideways$DrillSidewaysResult::wrap_Object(result);
              }
            }
            break;
           case 3:
            {
              ::org::apache::lucene::search::ScoreDoc a0((jobject) NULL);
              ::org::apache::lucene::facet::DrillDownQuery a1((jobject) NULL);
              jint a2;
              ::org::apache::lucene::facet::DrillSideways$DrillSidewaysResult result((jobject) NULL);

              if (!parseArgs(args, "kkI", ::org::apache::lucene::search::ScoreDoc::initializeClass, ::org::apache::lucene::facet::DrillDownQuery::initializeClass, &a0, &a1, &a2))
              {
                OBJ_CALL(result = self->object.search(a0, a1, a2));
                return ::org::apache::lucene::facet::t_DrillSideways$DrillSidewaysResult::wrap_Object(result);
              }
            }
            break;
           case 7:
            {
              ::org::apache::lucene::facet::DrillDownQuery a0((jobject) NULL);
              ::org::apache::lucene::search::Filter a1((jobject) NULL);
              ::org::apache::lucene::search::FieldDoc a2((jobject) NULL);
              jint a3;
              ::org::apache::lucene::search::Sort a4((jobject) NULL);
              jboolean a5;
              jboolean a6;
              ::org::apache::lucene::facet::DrillSideways$DrillSidewaysResult result((jobject) NULL);

              if (!parseArgs(args, "kkkIkZZ", ::org::apache::lucene::facet::DrillDownQuery::initializeClass, ::org::apache::lucene::search::Filter::initializeClass, ::org::apache::lucene::search::FieldDoc::initializeClass, ::org::apache::lucene::search::Sort::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5, &a6))
              {
                OBJ_CALL(result = self->object.search(a0, a1, a2, a3, a4, a5, a6));
                return ::org::apache::lucene::facet::t_DrillSideways$DrillSidewaysResult::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "search", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/BytesRefHash$MaxBytesLengthExceededException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *BytesRefHash$MaxBytesLengthExceededException::class$ = NULL;
        jmethodID *BytesRefHash$MaxBytesLengthExceededException::mids$ = NULL;
        bool BytesRefHash$MaxBytesLengthExceededException::live$ = false;

        jclass BytesRefHash$MaxBytesLengthExceededException::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/BytesRefHash$MaxBytesLengthExceededException");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_BytesRefHash$MaxBytesLengthExceededException_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BytesRefHash$MaxBytesLengthExceededException_instance_(PyTypeObject *type, PyObject *arg);

        static PyMethodDef t_BytesRefHash$MaxBytesLengthExceededException__methods_[] = {
          DECLARE_METHOD(t_BytesRefHash$MaxBytesLengthExceededException, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BytesRefHash$MaxBytesLengthExceededException, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(BytesRefHash$MaxBytesLengthExceededException, t_BytesRefHash$MaxBytesLengthExceededException, ::java::lang::RuntimeException, BytesRefHash$MaxBytesLengthExceededException, abstract_init, 0, 0, 0, 0, 0);

        void t_BytesRefHash$MaxBytesLengthExceededException::install(PyObject *module)
        {
          installType(&PY_TYPE(BytesRefHash$MaxBytesLengthExceededException), module, "BytesRefHash$MaxBytesLengthExceededException", 0);
        }

        void t_BytesRefHash$MaxBytesLengthExceededException::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(BytesRefHash$MaxBytesLengthExceededException).tp_dict, "class_", make_descriptor(BytesRefHash$MaxBytesLengthExceededException::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(BytesRefHash$MaxBytesLengthExceededException).tp_dict, "wrapfn_", make_descriptor(t_BytesRefHash$MaxBytesLengthExceededException::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(BytesRefHash$MaxBytesLengthExceededException).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_BytesRefHash$MaxBytesLengthExceededException_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, BytesRefHash$MaxBytesLengthExceededException::initializeClass, 1)))
            return NULL;
          return t_BytesRefHash$MaxBytesLengthExceededException::wrap_Object(BytesRefHash$MaxBytesLengthExceededException(((t_BytesRefHash$MaxBytesLengthExceededException *) arg)->object.this$));
        }
        static PyObject *t_BytesRefHash$MaxBytesLengthExceededException_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, BytesRefHash$MaxBytesLengthExceededException::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/cz/CzechStemFilterFactory.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace cz {

          ::java::lang::Class *CzechStemFilterFactory::class$ = NULL;
          jmethodID *CzechStemFilterFactory::mids$ = NULL;
          bool CzechStemFilterFactory::live$ = false;

          jclass CzechStemFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/cz/CzechStemFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CzechStemFilterFactory::CzechStemFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream CzechStemFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace cz {
          static PyObject *t_CzechStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CzechStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CzechStemFilterFactory_init_(t_CzechStemFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CzechStemFilterFactory_create(t_CzechStemFilterFactory *self, PyObject *args);

          static PyMethodDef t_CzechStemFilterFactory__methods_[] = {
            DECLARE_METHOD(t_CzechStemFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CzechStemFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CzechStemFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CzechStemFilterFactory, t_CzechStemFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, CzechStemFilterFactory, t_CzechStemFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_CzechStemFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(CzechStemFilterFactory), module, "CzechStemFilterFactory", 0);
          }

          void t_CzechStemFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CzechStemFilterFactory).tp_dict, "class_", make_descriptor(CzechStemFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CzechStemFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_CzechStemFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CzechStemFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CzechStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CzechStemFilterFactory::initializeClass, 1)))
              return NULL;
            return t_CzechStemFilterFactory::wrap_Object(CzechStemFilterFactory(((t_CzechStemFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_CzechStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CzechStemFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CzechStemFilterFactory_init_(t_CzechStemFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            CzechStemFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = CzechStemFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_CzechStemFilterFactory_create(t_CzechStemFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(CzechStemFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/ConcurrentMergeScheduler.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/IndexWriter.h"
#include "org/apache/lucene/index/MergeTrigger.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *ConcurrentMergeScheduler::class$ = NULL;
        jmethodID *ConcurrentMergeScheduler::mids$ = NULL;
        bool ConcurrentMergeScheduler::live$ = false;
        jint ConcurrentMergeScheduler::DEFAULT_MAX_MERGE_COUNT = (jint) 0;
        jint ConcurrentMergeScheduler::DEFAULT_MAX_THREAD_COUNT = (jint) 0;

        jclass ConcurrentMergeScheduler::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/ConcurrentMergeScheduler");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_getMaxMergeCount_54c6a179] = env->getMethodID(cls, "getMaxMergeCount", "()I");
            mids$[mid_getMaxThreadCount_54c6a179] = env->getMethodID(cls, "getMaxThreadCount", "()I");
            mids$[mid_getMergeThreadPriority_54c6a179] = env->getMethodID(cls, "getMergeThreadPriority", "()I");
            mids$[mid_merge_5fd7a9f9] = env->getMethodID(cls, "merge", "(Lorg/apache/lucene/index/IndexWriter;Lorg/apache/lucene/index/MergeTrigger;Z)V");
            mids$[mid_setMaxMergesAndThreads_d8d154a6] = env->getMethodID(cls, "setMaxMergesAndThreads", "(II)V");
            mids$[mid_setMergeThreadPriority_39c7bd3c] = env->getMethodID(cls, "setMergeThreadPriority", "(I)V");
            mids$[mid_sync_54c6a166] = env->getMethodID(cls, "sync", "()V");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
            mids$[mid_message_5fdc3f48] = env->getMethodID(cls, "message", "(Ljava/lang/String;)V");
            mids$[mid_handleMergeException_c5ec8ca4] = env->getMethodID(cls, "handleMergeException", "(Ljava/lang/Throwable;)V");
            mids$[mid_mergeThreadCount_54c6a179] = env->getMethodID(cls, "mergeThreadCount", "()I");
            mids$[mid_updateMergeThreads_54c6a166] = env->getMethodID(cls, "updateMergeThreads", "()V");
            mids$[mid_doMerge_54badd95] = env->getMethodID(cls, "doMerge", "(Lorg/apache/lucene/index/MergePolicy$OneMerge;)V");
            mids$[mid_getMergeThread_a2024ae6] = env->getMethodID(cls, "getMergeThread", "(Lorg/apache/lucene/index/IndexWriter;Lorg/apache/lucene/index/MergePolicy$OneMerge;)Lorg/apache/lucene/index/ConcurrentMergeScheduler$MergeThread;");
            mids$[mid_verbose_54c6a16a] = env->getMethodID(cls, "verbose", "()Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            DEFAULT_MAX_MERGE_COUNT = env->getStaticIntField(cls, "DEFAULT_MAX_MERGE_COUNT");
            DEFAULT_MAX_THREAD_COUNT = env->getStaticIntField(cls, "DEFAULT_MAX_THREAD_COUNT");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ConcurrentMergeScheduler::ConcurrentMergeScheduler() : ::org::apache::lucene::index::MergeScheduler(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void ConcurrentMergeScheduler::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        jint ConcurrentMergeScheduler::getMaxMergeCount() const
        {
          return env->callIntMethod(this$, mids$[mid_getMaxMergeCount_54c6a179]);
        }

        jint ConcurrentMergeScheduler::getMaxThreadCount() const
        {
          return env->callIntMethod(this$, mids$[mid_getMaxThreadCount_54c6a179]);
        }

        jint ConcurrentMergeScheduler::getMergeThreadPriority() const
        {
          return env->callIntMethod(this$, mids$[mid_getMergeThreadPriority_54c6a179]);
        }

        void ConcurrentMergeScheduler::merge(const ::org::apache::lucene::index::IndexWriter & a0, const ::org::apache::lucene::index::MergeTrigger & a1, jboolean a2) const
        {
          env->callVoidMethod(this$, mids$[mid_merge_5fd7a9f9], a0.this$, a1.this$, a2);
        }

        void ConcurrentMergeScheduler::setMaxMergesAndThreads(jint a0, jint a1) const
        {
          env->callVoidMethod(this$, mids$[mid_setMaxMergesAndThreads_d8d154a6], a0, a1);
        }

        void ConcurrentMergeScheduler::setMergeThreadPriority(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setMergeThreadPriority_39c7bd3c], a0);
        }

        void ConcurrentMergeScheduler::sync() const
        {
          env->callVoidMethod(this$, mids$[mid_sync_54c6a166]);
        }

        ::java::lang::String ConcurrentMergeScheduler::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_ConcurrentMergeScheduler_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ConcurrentMergeScheduler_instance_(PyTypeObject *type, PyObject *arg);
        static int t_ConcurrentMergeScheduler_init_(t_ConcurrentMergeScheduler *self, PyObject *args, PyObject *kwds);
        static PyObject *t_ConcurrentMergeScheduler_close(t_ConcurrentMergeScheduler *self, PyObject *args);
        static PyObject *t_ConcurrentMergeScheduler_getMaxMergeCount(t_ConcurrentMergeScheduler *self);
        static PyObject *t_ConcurrentMergeScheduler_getMaxThreadCount(t_ConcurrentMergeScheduler *self);
        static PyObject *t_ConcurrentMergeScheduler_getMergeThreadPriority(t_ConcurrentMergeScheduler *self);
        static PyObject *t_ConcurrentMergeScheduler_merge(t_ConcurrentMergeScheduler *self, PyObject *args);
        static PyObject *t_ConcurrentMergeScheduler_setMaxMergesAndThreads(t_ConcurrentMergeScheduler *self, PyObject *args);
        static PyObject *t_ConcurrentMergeScheduler_setMergeThreadPriority(t_ConcurrentMergeScheduler *self, PyObject *arg);
        static PyObject *t_ConcurrentMergeScheduler_sync(t_ConcurrentMergeScheduler *self);
        static PyObject *t_ConcurrentMergeScheduler_toString(t_ConcurrentMergeScheduler *self, PyObject *args);
        static PyObject *t_ConcurrentMergeScheduler_get__maxMergeCount(t_ConcurrentMergeScheduler *self, void *data);
        static PyObject *t_ConcurrentMergeScheduler_get__maxThreadCount(t_ConcurrentMergeScheduler *self, void *data);
        static PyObject *t_ConcurrentMergeScheduler_get__mergeThreadPriority(t_ConcurrentMergeScheduler *self, void *data);
        static int t_ConcurrentMergeScheduler_set__mergeThreadPriority(t_ConcurrentMergeScheduler *self, PyObject *arg, void *data);
        static PyGetSetDef t_ConcurrentMergeScheduler__fields_[] = {
          DECLARE_GET_FIELD(t_ConcurrentMergeScheduler, maxMergeCount),
          DECLARE_GET_FIELD(t_ConcurrentMergeScheduler, maxThreadCount),
          DECLARE_GETSET_FIELD(t_ConcurrentMergeScheduler, mergeThreadPriority),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_ConcurrentMergeScheduler__methods_[] = {
          DECLARE_METHOD(t_ConcurrentMergeScheduler, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ConcurrentMergeScheduler, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ConcurrentMergeScheduler, close, METH_VARARGS),
          DECLARE_METHOD(t_ConcurrentMergeScheduler, getMaxMergeCount, METH_NOARGS),
          DECLARE_METHOD(t_ConcurrentMergeScheduler, getMaxThreadCount, METH_NOARGS),
          DECLARE_METHOD(t_ConcurrentMergeScheduler, getMergeThreadPriority, METH_NOARGS),
          DECLARE_METHOD(t_ConcurrentMergeScheduler, merge, METH_VARARGS),
          DECLARE_METHOD(t_ConcurrentMergeScheduler, setMaxMergesAndThreads, METH_VARARGS),
          DECLARE_METHOD(t_ConcurrentMergeScheduler, setMergeThreadPriority, METH_O),
          DECLARE_METHOD(t_ConcurrentMergeScheduler, sync, METH_NOARGS),
          DECLARE_METHOD(t_ConcurrentMergeScheduler, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(ConcurrentMergeScheduler, t_ConcurrentMergeScheduler, ::org::apache::lucene::index::MergeScheduler, ConcurrentMergeScheduler, t_ConcurrentMergeScheduler_init_, 0, 0, t_ConcurrentMergeScheduler__fields_, 0, 0);

        void t_ConcurrentMergeScheduler::install(PyObject *module)
        {
          installType(&PY_TYPE(ConcurrentMergeScheduler), module, "ConcurrentMergeScheduler", 0);
        }

        void t_ConcurrentMergeScheduler::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(ConcurrentMergeScheduler).tp_dict, "class_", make_descriptor(ConcurrentMergeScheduler::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(ConcurrentMergeScheduler).tp_dict, "wrapfn_", make_descriptor(t_ConcurrentMergeScheduler::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(ConcurrentMergeScheduler).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(ConcurrentMergeScheduler::initializeClass);
          PyDict_SetItemString(PY_TYPE(ConcurrentMergeScheduler).tp_dict, "DEFAULT_MAX_MERGE_COUNT", make_descriptor(ConcurrentMergeScheduler::DEFAULT_MAX_MERGE_COUNT));
          PyDict_SetItemString(PY_TYPE(ConcurrentMergeScheduler).tp_dict, "DEFAULT_MAX_THREAD_COUNT", make_descriptor(ConcurrentMergeScheduler::DEFAULT_MAX_THREAD_COUNT));
        }

        static PyObject *t_ConcurrentMergeScheduler_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, ConcurrentMergeScheduler::initializeClass, 1)))
            return NULL;
          return t_ConcurrentMergeScheduler::wrap_Object(ConcurrentMergeScheduler(((t_ConcurrentMergeScheduler *) arg)->object.this$));
        }
        static PyObject *t_ConcurrentMergeScheduler_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, ConcurrentMergeScheduler::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_ConcurrentMergeScheduler_init_(t_ConcurrentMergeScheduler *self, PyObject *args, PyObject *kwds)
        {
          ConcurrentMergeScheduler object((jobject) NULL);

          INT_CALL(object = ConcurrentMergeScheduler());
          self->object = object;

          return 0;
        }

        static PyObject *t_ConcurrentMergeScheduler_close(t_ConcurrentMergeScheduler *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.close());
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(ConcurrentMergeScheduler), (PyObject *) self, "close", args, 2);
        }

        static PyObject *t_ConcurrentMergeScheduler_getMaxMergeCount(t_ConcurrentMergeScheduler *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getMaxMergeCount());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_ConcurrentMergeScheduler_getMaxThreadCount(t_ConcurrentMergeScheduler *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getMaxThreadCount());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_ConcurrentMergeScheduler_getMergeThreadPriority(t_ConcurrentMergeScheduler *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getMergeThreadPriority());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_ConcurrentMergeScheduler_merge(t_ConcurrentMergeScheduler *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexWriter a0((jobject) NULL);
          ::org::apache::lucene::index::MergeTrigger a1((jobject) NULL);
          PyTypeObject **p1;
          jboolean a2;

          if (!parseArgs(args, "kKZ", ::org::apache::lucene::index::IndexWriter::initializeClass, ::org::apache::lucene::index::MergeTrigger::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::index::t_MergeTrigger::parameters_, &a2))
          {
            OBJ_CALL(self->object.merge(a0, a1, a2));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(ConcurrentMergeScheduler), (PyObject *) self, "merge", args, 2);
        }

        static PyObject *t_ConcurrentMergeScheduler_setMaxMergesAndThreads(t_ConcurrentMergeScheduler *self, PyObject *args)
        {
          jint a0;
          jint a1;

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(self->object.setMaxMergesAndThreads(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setMaxMergesAndThreads", args);
          return NULL;
        }

        static PyObject *t_ConcurrentMergeScheduler_setMergeThreadPriority(t_ConcurrentMergeScheduler *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.setMergeThreadPriority(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setMergeThreadPriority", arg);
          return NULL;
        }

        static PyObject *t_ConcurrentMergeScheduler_sync(t_ConcurrentMergeScheduler *self)
        {
          OBJ_CALL(self->object.sync());
          Py_RETURN_NONE;
        }

        static PyObject *t_ConcurrentMergeScheduler_toString(t_ConcurrentMergeScheduler *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(ConcurrentMergeScheduler), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_ConcurrentMergeScheduler_get__maxMergeCount(t_ConcurrentMergeScheduler *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getMaxMergeCount());
          return PyInt_FromLong((long) value);
        }

        static PyObject *t_ConcurrentMergeScheduler_get__maxThreadCount(t_ConcurrentMergeScheduler *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getMaxThreadCount());
          return PyInt_FromLong((long) value);
        }

        static PyObject *t_ConcurrentMergeScheduler_get__mergeThreadPriority(t_ConcurrentMergeScheduler *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getMergeThreadPriority());
          return PyInt_FromLong((long) value);
        }
        static int t_ConcurrentMergeScheduler_set__mergeThreadPriority(t_ConcurrentMergeScheduler *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setMergeThreadPriority(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "mergeThreadPriority", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/parser/FastCharStream.h"
#include "java/io/Reader.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/queryparser/flexible/standard/parser/CharStream.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace parser {

              ::java::lang::Class *FastCharStream::class$ = NULL;
              jmethodID *FastCharStream::mids$ = NULL;
              bool FastCharStream::live$ = false;

              jclass FastCharStream::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/parser/FastCharStream");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_cf2e3c10] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;)V");
                  mids$[mid_BeginToken_54c6a173] = env->getMethodID(cls, "BeginToken", "()C");
                  mids$[mid_Done_54c6a166] = env->getMethodID(cls, "Done", "()V");
                  mids$[mid_GetImage_14c7b5c5] = env->getMethodID(cls, "GetImage", "()Ljava/lang/String;");
                  mids$[mid_GetSuffix_b4292e99] = env->getMethodID(cls, "GetSuffix", "(I)[C");
                  mids$[mid_backup_39c7bd3c] = env->getMethodID(cls, "backup", "(I)V");
                  mids$[mid_getBeginColumn_54c6a179] = env->getMethodID(cls, "getBeginColumn", "()I");
                  mids$[mid_getBeginLine_54c6a179] = env->getMethodID(cls, "getBeginLine", "()I");
                  mids$[mid_getColumn_54c6a179] = env->getMethodID(cls, "getColumn", "()I");
                  mids$[mid_getEndColumn_54c6a179] = env->getMethodID(cls, "getEndColumn", "()I");
                  mids$[mid_getEndLine_54c6a179] = env->getMethodID(cls, "getEndLine", "()I");
                  mids$[mid_getLine_54c6a179] = env->getMethodID(cls, "getLine", "()I");
                  mids$[mid_readChar_54c6a173] = env->getMethodID(cls, "readChar", "()C");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              FastCharStream::FastCharStream(const ::java::io::Reader & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_cf2e3c10, a0.this$)) {}

              jchar FastCharStream::BeginToken() const
              {
                return env->callCharMethod(this$, mids$[mid_BeginToken_54c6a173]);
              }

              void FastCharStream::Done() const
              {
                env->callVoidMethod(this$, mids$[mid_Done_54c6a166]);
              }

              ::java::lang::String FastCharStream::GetImage() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_GetImage_14c7b5c5]));
              }

              JArray< jchar > FastCharStream::GetSuffix(jint a0) const
              {
                return JArray< jchar >(env->callObjectMethod(this$, mids$[mid_GetSuffix_b4292e99], a0));
              }

              void FastCharStream::backup(jint a0) const
              {
                env->callVoidMethod(this$, mids$[mid_backup_39c7bd3c], a0);
              }

              jint FastCharStream::getBeginColumn() const
              {
                return env->callIntMethod(this$, mids$[mid_getBeginColumn_54c6a179]);
              }

              jint FastCharStream::getBeginLine() const
              {
                return env->callIntMethod(this$, mids$[mid_getBeginLine_54c6a179]);
              }

              jint FastCharStream::getColumn() const
              {
                return env->callIntMethod(this$, mids$[mid_getColumn_54c6a179]);
              }

              jint FastCharStream::getEndColumn() const
              {
                return env->callIntMethod(this$, mids$[mid_getEndColumn_54c6a179]);
              }

              jint FastCharStream::getEndLine() const
              {
                return env->callIntMethod(this$, mids$[mid_getEndLine_54c6a179]);
              }

              jint FastCharStream::getLine() const
              {
                return env->callIntMethod(this$, mids$[mid_getLine_54c6a179]);
              }

              jchar FastCharStream::readChar() const
              {
                return env->callCharMethod(this$, mids$[mid_readChar_54c6a173]);
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace parser {
              static PyObject *t_FastCharStream_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_FastCharStream_instance_(PyTypeObject *type, PyObject *arg);
              static int t_FastCharStream_init_(t_FastCharStream *self, PyObject *args, PyObject *kwds);
              static PyObject *t_FastCharStream_BeginToken(t_FastCharStream *self);
              static PyObject *t_FastCharStream_Done(t_FastCharStream *self);
              static PyObject *t_FastCharStream_GetImage(t_FastCharStream *self);
              static PyObject *t_FastCharStream_GetSuffix(t_FastCharStream *self, PyObject *arg);
              static PyObject *t_FastCharStream_backup(t_FastCharStream *self, PyObject *arg);
              static PyObject *t_FastCharStream_getBeginColumn(t_FastCharStream *self);
              static PyObject *t_FastCharStream_getBeginLine(t_FastCharStream *self);
              static PyObject *t_FastCharStream_getColumn(t_FastCharStream *self);
              static PyObject *t_FastCharStream_getEndColumn(t_FastCharStream *self);
              static PyObject *t_FastCharStream_getEndLine(t_FastCharStream *self);
              static PyObject *t_FastCharStream_getLine(t_FastCharStream *self);
              static PyObject *t_FastCharStream_readChar(t_FastCharStream *self);
              static PyObject *t_FastCharStream_get__beginColumn(t_FastCharStream *self, void *data);
              static PyObject *t_FastCharStream_get__beginLine(t_FastCharStream *self, void *data);
              static PyObject *t_FastCharStream_get__column(t_FastCharStream *self, void *data);
              static PyObject *t_FastCharStream_get__endColumn(t_FastCharStream *self, void *data);
              static PyObject *t_FastCharStream_get__endLine(t_FastCharStream *self, void *data);
              static PyObject *t_FastCharStream_get__line(t_FastCharStream *self, void *data);
              static PyGetSetDef t_FastCharStream__fields_[] = {
                DECLARE_GET_FIELD(t_FastCharStream, beginColumn),
                DECLARE_GET_FIELD(t_FastCharStream, beginLine),
                DECLARE_GET_FIELD(t_FastCharStream, column),
                DECLARE_GET_FIELD(t_FastCharStream, endColumn),
                DECLARE_GET_FIELD(t_FastCharStream, endLine),
                DECLARE_GET_FIELD(t_FastCharStream, line),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_FastCharStream__methods_[] = {
                DECLARE_METHOD(t_FastCharStream, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_FastCharStream, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_FastCharStream, BeginToken, METH_NOARGS),
                DECLARE_METHOD(t_FastCharStream, Done, METH_NOARGS),
                DECLARE_METHOD(t_FastCharStream, GetImage, METH_NOARGS),
                DECLARE_METHOD(t_FastCharStream, GetSuffix, METH_O),
                DECLARE_METHOD(t_FastCharStream, backup, METH_O),
                DECLARE_METHOD(t_FastCharStream, getBeginColumn, METH_NOARGS),
                DECLARE_METHOD(t_FastCharStream, getBeginLine, METH_NOARGS),
                DECLARE_METHOD(t_FastCharStream, getColumn, METH_NOARGS),
                DECLARE_METHOD(t_FastCharStream, getEndColumn, METH_NOARGS),
                DECLARE_METHOD(t_FastCharStream, getEndLine, METH_NOARGS),
                DECLARE_METHOD(t_FastCharStream, getLine, METH_NOARGS),
                DECLARE_METHOD(t_FastCharStream, readChar, METH_NOARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(FastCharStream, t_FastCharStream, ::java::lang::Object, FastCharStream, t_FastCharStream_init_, 0, 0, t_FastCharStream__fields_, 0, 0);

              void t_FastCharStream::install(PyObject *module)
              {
                installType(&PY_TYPE(FastCharStream), module, "FastCharStream", 0);
              }

              void t_FastCharStream::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(FastCharStream).tp_dict, "class_", make_descriptor(FastCharStream::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(FastCharStream).tp_dict, "wrapfn_", make_descriptor(t_FastCharStream::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(FastCharStream).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_FastCharStream_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, FastCharStream::initializeClass, 1)))
                  return NULL;
                return t_FastCharStream::wrap_Object(FastCharStream(((t_FastCharStream *) arg)->object.this$));
              }
              static PyObject *t_FastCharStream_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, FastCharStream::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_FastCharStream_init_(t_FastCharStream *self, PyObject *args, PyObject *kwds)
              {
                ::java::io::Reader a0((jobject) NULL);
                FastCharStream object((jobject) NULL);

                if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
                {
                  INT_CALL(object = FastCharStream(a0));
                  self->object = object;
                }
                else
                {
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_FastCharStream_BeginToken(t_FastCharStream *self)
              {
                jchar result;
                OBJ_CALL(result = self->object.BeginToken());
                return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
              }

              static PyObject *t_FastCharStream_Done(t_FastCharStream *self)
              {
                OBJ_CALL(self->object.Done());
                Py_RETURN_NONE;
              }

              static PyObject *t_FastCharStream_GetImage(t_FastCharStream *self)
              {
                ::java::lang::String result((jobject) NULL);
                OBJ_CALL(result = self->object.GetImage());
                return j2p(result);
              }

              static PyObject *t_FastCharStream_GetSuffix(t_FastCharStream *self, PyObject *arg)
              {
                jint a0;
                JArray< jchar > result((jobject) NULL);

                if (!parseArg(arg, "I", &a0))
                {
                  OBJ_CALL(result = self->object.GetSuffix(a0));
                  return result.wrap();
                }

                PyErr_SetArgsError((PyObject *) self, "GetSuffix", arg);
                return NULL;
              }

              static PyObject *t_FastCharStream_backup(t_FastCharStream *self, PyObject *arg)
              {
                jint a0;

                if (!parseArg(arg, "I", &a0))
                {
                  OBJ_CALL(self->object.backup(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "backup", arg);
                return NULL;
              }

              static PyObject *t_FastCharStream_getBeginColumn(t_FastCharStream *self)
              {
                jint result;
                OBJ_CALL(result = self->object.getBeginColumn());
                return PyInt_FromLong((long) result);
              }

              static PyObject *t_FastCharStream_getBeginLine(t_FastCharStream *self)
              {
                jint result;
                OBJ_CALL(result = self->object.getBeginLine());
                return PyInt_FromLong((long) result);
              }

              static PyObject *t_FastCharStream_getColumn(t_FastCharStream *self)
              {
                jint result;
                OBJ_CALL(result = self->object.getColumn());
                return PyInt_FromLong((long) result);
              }

              static PyObject *t_FastCharStream_getEndColumn(t_FastCharStream *self)
              {
                jint result;
                OBJ_CALL(result = self->object.getEndColumn());
                return PyInt_FromLong((long) result);
              }

              static PyObject *t_FastCharStream_getEndLine(t_FastCharStream *self)
              {
                jint result;
                OBJ_CALL(result = self->object.getEndLine());
                return PyInt_FromLong((long) result);
              }

              static PyObject *t_FastCharStream_getLine(t_FastCharStream *self)
              {
                jint result;
                OBJ_CALL(result = self->object.getLine());
                return PyInt_FromLong((long) result);
              }

              static PyObject *t_FastCharStream_readChar(t_FastCharStream *self)
              {
                jchar result;
                OBJ_CALL(result = self->object.readChar());
                return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
              }

              static PyObject *t_FastCharStream_get__beginColumn(t_FastCharStream *self, void *data)
              {
                jint value;
                OBJ_CALL(value = self->object.getBeginColumn());
                return PyInt_FromLong((long) value);
              }

              static PyObject *t_FastCharStream_get__beginLine(t_FastCharStream *self, void *data)
              {
                jint value;
                OBJ_CALL(value = self->object.getBeginLine());
                return PyInt_FromLong((long) value);
              }

              static PyObject *t_FastCharStream_get__column(t_FastCharStream *self, void *data)
              {
                jint value;
                OBJ_CALL(value = self->object.getColumn());
                return PyInt_FromLong((long) value);
              }

              static PyObject *t_FastCharStream_get__endColumn(t_FastCharStream *self, void *data)
              {
                jint value;
                OBJ_CALL(value = self->object.getEndColumn());
                return PyInt_FromLong((long) value);
              }

              static PyObject *t_FastCharStream_get__endLine(t_FastCharStream *self, void *data)
              {
                jint value;
                OBJ_CALL(value = self->object.getEndLine());
                return PyInt_FromLong((long) value);
              }

              static PyObject *t_FastCharStream_get__line(t_FastCharStream *self, void *data)
              {
                jint value;
                OBJ_CALL(value = self->object.getLine());
                return PyInt_FromLong((long) value);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/FieldType.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/FieldInfo$DocValuesType.h"
#include "org/apache/lucene/index/IndexableFieldType.h"
#include "org/apache/lucene/index/FieldInfo$IndexOptions.h"
#include "org/apache/lucene/document/FieldType$NumericType.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *FieldType::class$ = NULL;
        jmethodID *FieldType::mids$ = NULL;
        bool FieldType::live$ = false;

        jclass FieldType::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/FieldType");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_docValueType_db3dc573] = env->getMethodID(cls, "docValueType", "()Lorg/apache/lucene/index/FieldInfo$DocValuesType;");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_freeze_54c6a166] = env->getMethodID(cls, "freeze", "()V");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_indexOptions_e1b704de] = env->getMethodID(cls, "indexOptions", "()Lorg/apache/lucene/index/FieldInfo$IndexOptions;");
            mids$[mid_indexed_54c6a16a] = env->getMethodID(cls, "indexed", "()Z");
            mids$[mid_numericPrecisionStep_54c6a179] = env->getMethodID(cls, "numericPrecisionStep", "()I");
            mids$[mid_numericType_81bd17c2] = env->getMethodID(cls, "numericType", "()Lorg/apache/lucene/document/FieldType$NumericType;");
            mids$[mid_omitNorms_54c6a16a] = env->getMethodID(cls, "omitNorms", "()Z");
            mids$[mid_setDocValueType_09b98f7a] = env->getMethodID(cls, "setDocValueType", "(Lorg/apache/lucene/index/FieldInfo$DocValuesType;)V");
            mids$[mid_setIndexOptions_9cd708ff] = env->getMethodID(cls, "setIndexOptions", "(Lorg/apache/lucene/index/FieldInfo$IndexOptions;)V");
            mids$[mid_setIndexed_bb0c767f] = env->getMethodID(cls, "setIndexed", "(Z)V");
            mids$[mid_setNumericPrecisionStep_39c7bd3c] = env->getMethodID(cls, "setNumericPrecisionStep", "(I)V");
            mids$[mid_setNumericType_d9029e47] = env->getMethodID(cls, "setNumericType", "(Lorg/apache/lucene/document/FieldType$NumericType;)V");
            mids$[mid_setOmitNorms_bb0c767f] = env->getMethodID(cls, "setOmitNorms", "(Z)V");
            mids$[mid_setStoreTermVectorOffsets_bb0c767f] = env->getMethodID(cls, "setStoreTermVectorOffsets", "(Z)V");
            mids$[mid_setStoreTermVectorPayloads_bb0c767f] = env->getMethodID(cls, "setStoreTermVectorPayloads", "(Z)V");
            mids$[mid_setStoreTermVectorPositions_bb0c767f] = env->getMethodID(cls, "setStoreTermVectorPositions", "(Z)V");
            mids$[mid_setStoreTermVectors_bb0c767f] = env->getMethodID(cls, "setStoreTermVectors", "(Z)V");
            mids$[mid_setStored_bb0c767f] = env->getMethodID(cls, "setStored", "(Z)V");
            mids$[mid_setTokenized_bb0c767f] = env->getMethodID(cls, "setTokenized", "(Z)V");
            mids$[mid_storeTermVectorOffsets_54c6a16a] = env->getMethodID(cls, "storeTermVectorOffsets", "()Z");
            mids$[mid_storeTermVectorPayloads_54c6a16a] = env->getMethodID(cls, "storeTermVectorPayloads", "()Z");
            mids$[mid_storeTermVectorPositions_54c6a16a] = env->getMethodID(cls, "storeTermVectorPositions", "()Z");
            mids$[mid_storeTermVectors_54c6a16a] = env->getMethodID(cls, "storeTermVectors", "()Z");
            mids$[mid_stored_54c6a16a] = env->getMethodID(cls, "stored", "()Z");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
            mids$[mid_tokenized_54c6a16a] = env->getMethodID(cls, "tokenized", "()Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FieldType::FieldType() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        ::org::apache::lucene::index::FieldInfo$DocValuesType FieldType::docValueType() const
        {
          return ::org::apache::lucene::index::FieldInfo$DocValuesType(env->callObjectMethod(this$, mids$[mid_docValueType_db3dc573]));
        }

        jboolean FieldType::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        void FieldType::freeze() const
        {
          env->callVoidMethod(this$, mids$[mid_freeze_54c6a166]);
        }

        jint FieldType::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        ::org::apache::lucene::index::FieldInfo$IndexOptions FieldType::indexOptions() const
        {
          return ::org::apache::lucene::index::FieldInfo$IndexOptions(env->callObjectMethod(this$, mids$[mid_indexOptions_e1b704de]));
        }

        jboolean FieldType::indexed() const
        {
          return env->callBooleanMethod(this$, mids$[mid_indexed_54c6a16a]);
        }

        jint FieldType::numericPrecisionStep() const
        {
          return env->callIntMethod(this$, mids$[mid_numericPrecisionStep_54c6a179]);
        }

        ::org::apache::lucene::document::FieldType$NumericType FieldType::numericType() const
        {
          return ::org::apache::lucene::document::FieldType$NumericType(env->callObjectMethod(this$, mids$[mid_numericType_81bd17c2]));
        }

        jboolean FieldType::omitNorms() const
        {
          return env->callBooleanMethod(this$, mids$[mid_omitNorms_54c6a16a]);
        }

        void FieldType::setDocValueType(const ::org::apache::lucene::index::FieldInfo$DocValuesType & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setDocValueType_09b98f7a], a0.this$);
        }

        void FieldType::setIndexOptions(const ::org::apache::lucene::index::FieldInfo$IndexOptions & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setIndexOptions_9cd708ff], a0.this$);
        }

        void FieldType::setIndexed(jboolean a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setIndexed_bb0c767f], a0);
        }

        void FieldType::setNumericPrecisionStep(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setNumericPrecisionStep_39c7bd3c], a0);
        }

        void FieldType::setNumericType(const ::org::apache::lucene::document::FieldType$NumericType & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setNumericType_d9029e47], a0.this$);
        }

        void FieldType::setOmitNorms(jboolean a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setOmitNorms_bb0c767f], a0);
        }

        void FieldType::setStoreTermVectorOffsets(jboolean a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setStoreTermVectorOffsets_bb0c767f], a0);
        }

        void FieldType::setStoreTermVectorPayloads(jboolean a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setStoreTermVectorPayloads_bb0c767f], a0);
        }

        void FieldType::setStoreTermVectorPositions(jboolean a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setStoreTermVectorPositions_bb0c767f], a0);
        }

        void FieldType::setStoreTermVectors(jboolean a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setStoreTermVectors_bb0c767f], a0);
        }

        void FieldType::setStored(jboolean a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setStored_bb0c767f], a0);
        }

        void FieldType::setTokenized(jboolean a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setTokenized_bb0c767f], a0);
        }

        jboolean FieldType::storeTermVectorOffsets() const
        {
          return env->callBooleanMethod(this$, mids$[mid_storeTermVectorOffsets_54c6a16a]);
        }

        jboolean FieldType::storeTermVectorPayloads() const
        {
          return env->callBooleanMethod(this$, mids$[mid_storeTermVectorPayloads_54c6a16a]);
        }

        jboolean FieldType::storeTermVectorPositions() const
        {
          return env->callBooleanMethod(this$, mids$[mid_storeTermVectorPositions_54c6a16a]);
        }

        jboolean FieldType::storeTermVectors() const
        {
          return env->callBooleanMethod(this$, mids$[mid_storeTermVectors_54c6a16a]);
        }

        jboolean FieldType::stored() const
        {
          return env->callBooleanMethod(this$, mids$[mid_stored_54c6a16a]);
        }

        ::java::lang::String FieldType::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }

        jboolean FieldType::tokenized() const
        {
          return env->callBooleanMethod(this$, mids$[mid_tokenized_54c6a16a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_FieldType_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldType_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FieldType_init_(t_FieldType *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FieldType_docValueType(t_FieldType *self);
        static PyObject *t_FieldType_equals(t_FieldType *self, PyObject *args);
        static PyObject *t_FieldType_freeze(t_FieldType *self);
        static PyObject *t_FieldType_hashCode(t_FieldType *self, PyObject *args);
        static PyObject *t_FieldType_indexOptions(t_FieldType *self);
        static PyObject *t_FieldType_indexed(t_FieldType *self);
        static PyObject *t_FieldType_numericPrecisionStep(t_FieldType *self);
        static PyObject *t_FieldType_numericType(t_FieldType *self);
        static PyObject *t_FieldType_omitNorms(t_FieldType *self);
        static PyObject *t_FieldType_setDocValueType(t_FieldType *self, PyObject *arg);
        static PyObject *t_FieldType_setIndexOptions(t_FieldType *self, PyObject *arg);
        static PyObject *t_FieldType_setIndexed(t_FieldType *self, PyObject *arg);
        static PyObject *t_FieldType_setNumericPrecisionStep(t_FieldType *self, PyObject *arg);
        static PyObject *t_FieldType_setNumericType(t_FieldType *self, PyObject *arg);
        static PyObject *t_FieldType_setOmitNorms(t_FieldType *self, PyObject *arg);
        static PyObject *t_FieldType_setStoreTermVectorOffsets(t_FieldType *self, PyObject *arg);
        static PyObject *t_FieldType_setStoreTermVectorPayloads(t_FieldType *self, PyObject *arg);
        static PyObject *t_FieldType_setStoreTermVectorPositions(t_FieldType *self, PyObject *arg);
        static PyObject *t_FieldType_setStoreTermVectors(t_FieldType *self, PyObject *arg);
        static PyObject *t_FieldType_setStored(t_FieldType *self, PyObject *arg);
        static PyObject *t_FieldType_setTokenized(t_FieldType *self, PyObject *arg);
        static PyObject *t_FieldType_storeTermVectorOffsets(t_FieldType *self);
        static PyObject *t_FieldType_storeTermVectorPayloads(t_FieldType *self);
        static PyObject *t_FieldType_storeTermVectorPositions(t_FieldType *self);
        static PyObject *t_FieldType_storeTermVectors(t_FieldType *self);
        static PyObject *t_FieldType_stored(t_FieldType *self);
        static PyObject *t_FieldType_toString(t_FieldType *self, PyObject *args);
        static PyObject *t_FieldType_tokenized(t_FieldType *self);

        static PyMethodDef t_FieldType__methods_[] = {
          DECLARE_METHOD(t_FieldType, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldType, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldType, docValueType, METH_NOARGS),
          DECLARE_METHOD(t_FieldType, equals, METH_VARARGS),
          DECLARE_METHOD(t_FieldType, freeze, METH_NOARGS),
          DECLARE_METHOD(t_FieldType, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_FieldType, indexOptions, METH_NOARGS),
          DECLARE_METHOD(t_FieldType, indexed, METH_NOARGS),
          DECLARE_METHOD(t_FieldType, numericPrecisionStep, METH_NOARGS),
          DECLARE_METHOD(t_FieldType, numericType, METH_NOARGS),
          DECLARE_METHOD(t_FieldType, omitNorms, METH_NOARGS),
          DECLARE_METHOD(t_FieldType, setDocValueType, METH_O),
          DECLARE_METHOD(t_FieldType, setIndexOptions, METH_O),
          DECLARE_METHOD(t_FieldType, setIndexed, METH_O),
          DECLARE_METHOD(t_FieldType, setNumericPrecisionStep, METH_O),
          DECLARE_METHOD(t_FieldType, setNumericType, METH_O),
          DECLARE_METHOD(t_FieldType, setOmitNorms, METH_O),
          DECLARE_METHOD(t_FieldType, setStoreTermVectorOffsets, METH_O),
          DECLARE_METHOD(t_FieldType, setStoreTermVectorPayloads, METH_O),
          DECLARE_METHOD(t_FieldType, setStoreTermVectorPositions, METH_O),
          DECLARE_METHOD(t_FieldType, setStoreTermVectors, METH_O),
          DECLARE_METHOD(t_FieldType, setStored, METH_O),
          DECLARE_METHOD(t_FieldType, setTokenized, METH_O),
          DECLARE_METHOD(t_FieldType, storeTermVectorOffsets, METH_NOARGS),
          DECLARE_METHOD(t_FieldType, storeTermVectorPayloads, METH_NOARGS),
          DECLARE_METHOD(t_FieldType, storeTermVectorPositions, METH_NOARGS),
          DECLARE_METHOD(t_FieldType, storeTermVectors, METH_NOARGS),
          DECLARE_METHOD(t_FieldType, stored, METH_NOARGS),
          DECLARE_METHOD(t_FieldType, toString, METH_VARARGS),
          DECLARE_METHOD(t_FieldType, tokenized, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldType, t_FieldType, ::java::lang::Object, FieldType, t_FieldType_init_, 0, 0, 0, 0, 0);

        void t_FieldType::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldType), module, "FieldType", 0);
          PyDict_SetItemString(PY_TYPE(FieldType).tp_dict, "NumericType", make_descriptor(&PY_TYPE(FieldType$NumericType)));
        }

        void t_FieldType::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldType).tp_dict, "class_", make_descriptor(FieldType::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldType).tp_dict, "wrapfn_", make_descriptor(t_FieldType::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldType).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldType_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldType::initializeClass, 1)))
            return NULL;
          return t_FieldType::wrap_Object(FieldType(((t_FieldType *) arg)->object.this$));
        }
        static PyObject *t_FieldType_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldType::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FieldType_init_(t_FieldType *self, PyObject *args, PyObject *kwds)
        {
          FieldType object((jobject) NULL);

          INT_CALL(object = FieldType());
          self->object = object;

          return 0;
        }

        static PyObject *t_FieldType_docValueType(t_FieldType *self)
        {
          ::org::apache::lucene::index::FieldInfo$DocValuesType result((jobject) NULL);
          OBJ_CALL(result = self->object.docValueType());
          return ::org::apache::lucene::index::t_FieldInfo$DocValuesType::wrap_Object(result);
        }

        static PyObject *t_FieldType_equals(t_FieldType *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(FieldType), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_FieldType_freeze(t_FieldType *self)
        {
          OBJ_CALL(self->object.freeze());
          Py_RETURN_NONE;
        }

        static PyObject *t_FieldType_hashCode(t_FieldType *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FieldType), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_FieldType_indexOptions(t_FieldType *self)
        {
          ::org::apache::lucene::index::FieldInfo$IndexOptions result((jobject) NULL);
          OBJ_CALL(result = self->object.indexOptions());
          return ::org::apache::lucene::index::t_FieldInfo$IndexOptions::wrap_Object(result);
        }

        static PyObject *t_FieldType_indexed(t_FieldType *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.indexed());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_FieldType_numericPrecisionStep(t_FieldType *self)
        {
          jint result;
          OBJ_CALL(result = self->object.numericPrecisionStep());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_FieldType_numericType(t_FieldType *self)
        {
          ::org::apache::lucene::document::FieldType$NumericType result((jobject) NULL);
          OBJ_CALL(result = self->object.numericType());
          return ::org::apache::lucene::document::t_FieldType$NumericType::wrap_Object(result);
        }

        static PyObject *t_FieldType_omitNorms(t_FieldType *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.omitNorms());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_FieldType_setDocValueType(t_FieldType *self, PyObject *arg)
        {
          ::org::apache::lucene::index::FieldInfo$DocValuesType a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArg(arg, "K", ::org::apache::lucene::index::FieldInfo$DocValuesType::initializeClass, &a0, &p0, ::org::apache::lucene::index::t_FieldInfo$DocValuesType::parameters_))
          {
            OBJ_CALL(self->object.setDocValueType(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setDocValueType", arg);
          return NULL;
        }

        static PyObject *t_FieldType_setIndexOptions(t_FieldType *self, PyObject *arg)
        {
          ::org::apache::lucene::index::FieldInfo$IndexOptions a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArg(arg, "K", ::org::apache::lucene::index::FieldInfo$IndexOptions::initializeClass, &a0, &p0, ::org::apache::lucene::index::t_FieldInfo$IndexOptions::parameters_))
          {
            OBJ_CALL(self->object.setIndexOptions(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setIndexOptions", arg);
          return NULL;
        }

        static PyObject *t_FieldType_setIndexed(t_FieldType *self, PyObject *arg)
        {
          jboolean a0;

          if (!parseArg(arg, "Z", &a0))
          {
            OBJ_CALL(self->object.setIndexed(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setIndexed", arg);
          return NULL;
        }

        static PyObject *t_FieldType_setNumericPrecisionStep(t_FieldType *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.setNumericPrecisionStep(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setNumericPrecisionStep", arg);
          return NULL;
        }

        static PyObject *t_FieldType_setNumericType(t_FieldType *self, PyObject *arg)
        {
          ::org::apache::lucene::document::FieldType$NumericType a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArg(arg, "K", ::org::apache::lucene::document::FieldType$NumericType::initializeClass, &a0, &p0, ::org::apache::lucene::document::t_FieldType$NumericType::parameters_))
          {
            OBJ_CALL(self->object.setNumericType(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setNumericType", arg);
          return NULL;
        }

        static PyObject *t_FieldType_setOmitNorms(t_FieldType *self, PyObject *arg)
        {
          jboolean a0;

          if (!parseArg(arg, "Z", &a0))
          {
            OBJ_CALL(self->object.setOmitNorms(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setOmitNorms", arg);
          return NULL;
        }

        static PyObject *t_FieldType_setStoreTermVectorOffsets(t_FieldType *self, PyObject *arg)
        {
          jboolean a0;

          if (!parseArg(arg, "Z", &a0))
          {
            OBJ_CALL(self->object.setStoreTermVectorOffsets(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setStoreTermVectorOffsets", arg);
          return NULL;
        }

        static PyObject *t_FieldType_setStoreTermVectorPayloads(t_FieldType *self, PyObject *arg)
        {
          jboolean a0;

          if (!parseArg(arg, "Z", &a0))
          {
            OBJ_CALL(self->object.setStoreTermVectorPayloads(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setStoreTermVectorPayloads", arg);
          return NULL;
        }

        static PyObject *t_FieldType_setStoreTermVectorPositions(t_FieldType *self, PyObject *arg)
        {
          jboolean a0;

          if (!parseArg(arg, "Z", &a0))
          {
            OBJ_CALL(self->object.setStoreTermVectorPositions(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setStoreTermVectorPositions", arg);
          return NULL;
        }

        static PyObject *t_FieldType_setStoreTermVectors(t_FieldType *self, PyObject *arg)
        {
          jboolean a0;

          if (!parseArg(arg, "Z", &a0))
          {
            OBJ_CALL(self->object.setStoreTermVectors(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setStoreTermVectors", arg);
          return NULL;
        }

        static PyObject *t_FieldType_setStored(t_FieldType *self, PyObject *arg)
        {
          jboolean a0;

          if (!parseArg(arg, "Z", &a0))
          {
            OBJ_CALL(self->object.setStored(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setStored", arg);
          return NULL;
        }

        static PyObject *t_FieldType_setTokenized(t_FieldType *self, PyObject *arg)
        {
          jboolean a0;

          if (!parseArg(arg, "Z", &a0))
          {
            OBJ_CALL(self->object.setTokenized(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setTokenized", arg);
          return NULL;
        }

        static PyObject *t_FieldType_storeTermVectorOffsets(t_FieldType *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.storeTermVectorOffsets());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_FieldType_storeTermVectorPayloads(t_FieldType *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.storeTermVectorPayloads());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_FieldType_storeTermVectorPositions(t_FieldType *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.storeTermVectorPositions());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_FieldType_storeTermVectors(t_FieldType *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.storeTermVectors());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_FieldType_stored(t_FieldType *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.stored());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_FieldType_toString(t_FieldType *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(FieldType), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_FieldType_tokenized(t_FieldType *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.tokenized());
          Py_RETURN_BOOL(result);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene40/Lucene40TermVectorsWriter.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/MergeState.h"
#include "org/apache/lucene/store/IOContext.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/util/Comparator.h"
#include "org/apache/lucene/index/FieldInfo.h"
#include "org/apache/lucene/store/DataInput.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene40 {

          ::java::lang::Class *Lucene40TermVectorsWriter::class$ = NULL;
          jmethodID *Lucene40TermVectorsWriter::mids$ = NULL;
          bool Lucene40TermVectorsWriter::live$ = false;

          jclass Lucene40TermVectorsWriter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene40/Lucene40TermVectorsWriter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_1962ccd4] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)V");
              mids$[mid_abort_54c6a166] = env->getMethodID(cls, "abort", "()V");
              mids$[mid_addPosition_ffd34a92] = env->getMethodID(cls, "addPosition", "(IIILorg/apache/lucene/util/BytesRef;)V");
              mids$[mid_addProx_395d0aa2] = env->getMethodID(cls, "addProx", "(ILorg/apache/lucene/store/DataInput;Lorg/apache/lucene/store/DataInput;)V");
              mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
              mids$[mid_finish_48f050c2] = env->getMethodID(cls, "finish", "(Lorg/apache/lucene/index/FieldInfos;I)V");
              mids$[mid_finishDocument_54c6a166] = env->getMethodID(cls, "finishDocument", "()V");
              mids$[mid_finishTerm_54c6a166] = env->getMethodID(cls, "finishTerm", "()V");
              mids$[mid_getComparator_5a7ff2fc] = env->getMethodID(cls, "getComparator", "()Ljava/util/Comparator;");
              mids$[mid_merge_fd0cfdeb] = env->getMethodID(cls, "merge", "(Lorg/apache/lucene/index/MergeState;)I");
              mids$[mid_startDocument_39c7bd3c] = env->getMethodID(cls, "startDocument", "(I)V");
              mids$[mid_startField_07c4def5] = env->getMethodID(cls, "startField", "(Lorg/apache/lucene/index/FieldInfo;IZZZ)V");
              mids$[mid_startTerm_738fc2ce] = env->getMethodID(cls, "startTerm", "(Lorg/apache/lucene/util/BytesRef;I)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene40TermVectorsWriter::Lucene40TermVectorsWriter(const ::org::apache::lucene::store::Directory & a0, const ::java::lang::String & a1, const ::org::apache::lucene::store::IOContext & a2) : ::org::apache::lucene::codecs::TermVectorsWriter(env->newObject(initializeClass, &mids$, mid_init$_1962ccd4, a0.this$, a1.this$, a2.this$)) {}

          void Lucene40TermVectorsWriter::abort() const
          {
            env->callVoidMethod(this$, mids$[mid_abort_54c6a166]);
          }

          void Lucene40TermVectorsWriter::addPosition(jint a0, jint a1, jint a2, const ::org::apache::lucene::util::BytesRef & a3) const
          {
            env->callVoidMethod(this$, mids$[mid_addPosition_ffd34a92], a0, a1, a2, a3.this$);
          }

          void Lucene40TermVectorsWriter::addProx(jint a0, const ::org::apache::lucene::store::DataInput & a1, const ::org::apache::lucene::store::DataInput & a2) const
          {
            env->callVoidMethod(this$, mids$[mid_addProx_395d0aa2], a0, a1.this$, a2.this$);
          }

          void Lucene40TermVectorsWriter::close() const
          {
            env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
          }

          void Lucene40TermVectorsWriter::finish(const ::org::apache::lucene::index::FieldInfos & a0, jint a1) const
          {
            env->callVoidMethod(this$, mids$[mid_finish_48f050c2], a0.this$, a1);
          }

          void Lucene40TermVectorsWriter::finishDocument() const
          {
            env->callVoidMethod(this$, mids$[mid_finishDocument_54c6a166]);
          }

          void Lucene40TermVectorsWriter::finishTerm() const
          {
            env->callVoidMethod(this$, mids$[mid_finishTerm_54c6a166]);
          }

          ::java::util::Comparator Lucene40TermVectorsWriter::getComparator() const
          {
            return ::java::util::Comparator(env->callObjectMethod(this$, mids$[mid_getComparator_5a7ff2fc]));
          }

          jint Lucene40TermVectorsWriter::merge(const ::org::apache::lucene::index::MergeState & a0) const
          {
            return env->callIntMethod(this$, mids$[mid_merge_fd0cfdeb], a0.this$);
          }

          void Lucene40TermVectorsWriter::startDocument(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_startDocument_39c7bd3c], a0);
          }

          void Lucene40TermVectorsWriter::startField(const ::org::apache::lucene::index::FieldInfo & a0, jint a1, jboolean a2, jboolean a3, jboolean a4) const
          {
            env->callVoidMethod(this$, mids$[mid_startField_07c4def5], a0.this$, a1, a2, a3, a4);
          }

          void Lucene40TermVectorsWriter::startTerm(const ::org::apache::lucene::util::BytesRef & a0, jint a1) const
          {
            env->callVoidMethod(this$, mids$[mid_startTerm_738fc2ce], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene40 {
          static PyObject *t_Lucene40TermVectorsWriter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene40TermVectorsWriter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene40TermVectorsWriter_init_(t_Lucene40TermVectorsWriter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene40TermVectorsWriter_abort(t_Lucene40TermVectorsWriter *self, PyObject *args);
          static PyObject *t_Lucene40TermVectorsWriter_addPosition(t_Lucene40TermVectorsWriter *self, PyObject *args);
          static PyObject *t_Lucene40TermVectorsWriter_addProx(t_Lucene40TermVectorsWriter *self, PyObject *args);
          static PyObject *t_Lucene40TermVectorsWriter_close(t_Lucene40TermVectorsWriter *self, PyObject *args);
          static PyObject *t_Lucene40TermVectorsWriter_finish(t_Lucene40TermVectorsWriter *self, PyObject *args);
          static PyObject *t_Lucene40TermVectorsWriter_finishDocument(t_Lucene40TermVectorsWriter *self, PyObject *args);
          static PyObject *t_Lucene40TermVectorsWriter_finishTerm(t_Lucene40TermVectorsWriter *self, PyObject *args);
          static PyObject *t_Lucene40TermVectorsWriter_getComparator(t_Lucene40TermVectorsWriter *self, PyObject *args);
          static PyObject *t_Lucene40TermVectorsWriter_merge(t_Lucene40TermVectorsWriter *self, PyObject *args);
          static PyObject *t_Lucene40TermVectorsWriter_startDocument(t_Lucene40TermVectorsWriter *self, PyObject *args);
          static PyObject *t_Lucene40TermVectorsWriter_startField(t_Lucene40TermVectorsWriter *self, PyObject *args);
          static PyObject *t_Lucene40TermVectorsWriter_startTerm(t_Lucene40TermVectorsWriter *self, PyObject *args);
          static PyObject *t_Lucene40TermVectorsWriter_get__comparator(t_Lucene40TermVectorsWriter *self, void *data);
          static PyGetSetDef t_Lucene40TermVectorsWriter__fields_[] = {
            DECLARE_GET_FIELD(t_Lucene40TermVectorsWriter, comparator),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Lucene40TermVectorsWriter__methods_[] = {
            DECLARE_METHOD(t_Lucene40TermVectorsWriter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene40TermVectorsWriter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene40TermVectorsWriter, abort, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40TermVectorsWriter, addPosition, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40TermVectorsWriter, addProx, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40TermVectorsWriter, close, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40TermVectorsWriter, finish, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40TermVectorsWriter, finishDocument, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40TermVectorsWriter, finishTerm, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40TermVectorsWriter, getComparator, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40TermVectorsWriter, merge, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40TermVectorsWriter, startDocument, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40TermVectorsWriter, startField, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40TermVectorsWriter, startTerm, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene40TermVectorsWriter, t_Lucene40TermVectorsWriter, ::org::apache::lucene::codecs::TermVectorsWriter, Lucene40TermVectorsWriter, t_Lucene40TermVectorsWriter_init_, 0, 0, t_Lucene40TermVectorsWriter__fields_, 0, 0);

          void t_Lucene40TermVectorsWriter::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene40TermVectorsWriter), module, "Lucene40TermVectorsWriter", 0);
          }

          void t_Lucene40TermVectorsWriter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene40TermVectorsWriter).tp_dict, "class_", make_descriptor(Lucene40TermVectorsWriter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene40TermVectorsWriter).tp_dict, "wrapfn_", make_descriptor(t_Lucene40TermVectorsWriter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene40TermVectorsWriter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lucene40TermVectorsWriter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene40TermVectorsWriter::initializeClass, 1)))
              return NULL;
            return t_Lucene40TermVectorsWriter::wrap_Object(Lucene40TermVectorsWriter(((t_Lucene40TermVectorsWriter *) arg)->object.this$));
          }
          static PyObject *t_Lucene40TermVectorsWriter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene40TermVectorsWriter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene40TermVectorsWriter_init_(t_Lucene40TermVectorsWriter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::store::Directory a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            ::org::apache::lucene::store::IOContext a2((jobject) NULL);
            Lucene40TermVectorsWriter object((jobject) NULL);

            if (!parseArgs(args, "ksk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2))
            {
              INT_CALL(object = Lucene40TermVectorsWriter(a0, a1, a2));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_Lucene40TermVectorsWriter_abort(t_Lucene40TermVectorsWriter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.abort());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene40TermVectorsWriter), (PyObject *) self, "abort", args, 2);
          }

          static PyObject *t_Lucene40TermVectorsWriter_addPosition(t_Lucene40TermVectorsWriter *self, PyObject *args)
          {
            jint a0;
            jint a1;
            jint a2;
            ::org::apache::lucene::util::BytesRef a3((jobject) NULL);

            if (!parseArgs(args, "IIIk", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2, &a3))
            {
              OBJ_CALL(self->object.addPosition(a0, a1, a2, a3));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene40TermVectorsWriter), (PyObject *) self, "addPosition", args, 2);
          }

          static PyObject *t_Lucene40TermVectorsWriter_addProx(t_Lucene40TermVectorsWriter *self, PyObject *args)
          {
            jint a0;
            ::org::apache::lucene::store::DataInput a1((jobject) NULL);
            ::org::apache::lucene::store::DataInput a2((jobject) NULL);

            if (!parseArgs(args, "Ikk", ::org::apache::lucene::store::DataInput::initializeClass, ::org::apache::lucene::store::DataInput::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(self->object.addProx(a0, a1, a2));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene40TermVectorsWriter), (PyObject *) self, "addProx", args, 2);
          }

          static PyObject *t_Lucene40TermVectorsWriter_close(t_Lucene40TermVectorsWriter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.close());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene40TermVectorsWriter), (PyObject *) self, "close", args, 2);
          }

          static PyObject *t_Lucene40TermVectorsWriter_finish(t_Lucene40TermVectorsWriter *self, PyObject *args)
          {
            ::org::apache::lucene::index::FieldInfos a0((jobject) NULL);
            jint a1;

            if (!parseArgs(args, "kI", ::org::apache::lucene::index::FieldInfos::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.finish(a0, a1));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene40TermVectorsWriter), (PyObject *) self, "finish", args, 2);
          }

          static PyObject *t_Lucene40TermVectorsWriter_finishDocument(t_Lucene40TermVectorsWriter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.finishDocument());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene40TermVectorsWriter), (PyObject *) self, "finishDocument", args, 2);
          }

          static PyObject *t_Lucene40TermVectorsWriter_finishTerm(t_Lucene40TermVectorsWriter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.finishTerm());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene40TermVectorsWriter), (PyObject *) self, "finishTerm", args, 2);
          }

          static PyObject *t_Lucene40TermVectorsWriter_getComparator(t_Lucene40TermVectorsWriter *self, PyObject *args)
          {
            ::java::util::Comparator result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getComparator());
              return ::java::util::t_Comparator::wrap_Object(result, &::org::apache::lucene::util::PY_TYPE(BytesRef));
            }

            return callSuper(&PY_TYPE(Lucene40TermVectorsWriter), (PyObject *) self, "getComparator", args, 2);
          }

          static PyObject *t_Lucene40TermVectorsWriter_merge(t_Lucene40TermVectorsWriter *self, PyObject *args)
          {
            ::org::apache::lucene::index::MergeState a0((jobject) NULL);
            jint result;

            if (!parseArgs(args, "k", ::org::apache::lucene::index::MergeState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.merge(a0));
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(Lucene40TermVectorsWriter), (PyObject *) self, "merge", args, 2);
          }

          static PyObject *t_Lucene40TermVectorsWriter_startDocument(t_Lucene40TermVectorsWriter *self, PyObject *args)
          {
            jint a0;

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(self->object.startDocument(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene40TermVectorsWriter), (PyObject *) self, "startDocument", args, 2);
          }

          static PyObject *t_Lucene40TermVectorsWriter_startField(t_Lucene40TermVectorsWriter *self, PyObject *args)
          {
            ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
            jint a1;
            jboolean a2;
            jboolean a3;
            jboolean a4;

            if (!parseArgs(args, "kIZZZ", ::org::apache::lucene::index::FieldInfo::initializeClass, &a0, &a1, &a2, &a3, &a4))
            {
              OBJ_CALL(self->object.startField(a0, a1, a2, a3, a4));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene40TermVectorsWriter), (PyObject *) self, "startField", args, 2);
          }

          static PyObject *t_Lucene40TermVectorsWriter_startTerm(t_Lucene40TermVectorsWriter *self, PyObject *args)
          {
            ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
            jint a1;

            if (!parseArgs(args, "kI", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.startTerm(a0, a1));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene40TermVectorsWriter), (PyObject *) self, "startTerm", args, 2);
          }

          static PyObject *t_Lucene40TermVectorsWriter_get__comparator(t_Lucene40TermVectorsWriter *self, void *data)
          {
            ::java::util::Comparator value((jobject) NULL);
            OBJ_CALL(value = self->object.getComparator());
            return ::java::util::t_Comparator::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FuzzyTermsEnum.h"
#include "org/apache/lucene/index/DocsEnum.h"
#include "org/apache/lucene/index/TermState.h"
#include "org/apache/lucene/index/Term.h"
#include "org/apache/lucene/index/TermsEnum$SeekStatus.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/DocsAndPositionsEnum.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/Terms.h"
#include "org/apache/lucene/util/AttributeSource.h"
#include "org/apache/lucene/util/Bits.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/util/Comparator.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FuzzyTermsEnum::class$ = NULL;
        jmethodID *FuzzyTermsEnum::mids$ = NULL;
        bool FuzzyTermsEnum::live$ = false;

        jclass FuzzyTermsEnum::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FuzzyTermsEnum");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_538f73aa] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/Terms;Lorg/apache/lucene/util/AttributeSource;Lorg/apache/lucene/index/Term;FIZ)V");
            mids$[mid_docFreq_54c6a179] = env->getMethodID(cls, "docFreq", "()I");
            mids$[mid_docs_e6d4c3ef] = env->getMethodID(cls, "docs", "(Lorg/apache/lucene/util/Bits;Lorg/apache/lucene/index/DocsEnum;I)Lorg/apache/lucene/index/DocsEnum;");
            mids$[mid_docsAndPositions_b5d9c11b] = env->getMethodID(cls, "docsAndPositions", "(Lorg/apache/lucene/util/Bits;Lorg/apache/lucene/index/DocsAndPositionsEnum;I)Lorg/apache/lucene/index/DocsAndPositionsEnum;");
            mids$[mid_getComparator_5a7ff2fc] = env->getMethodID(cls, "getComparator", "()Ljava/util/Comparator;");
            mids$[mid_getMinSimilarity_54c6a176] = env->getMethodID(cls, "getMinSimilarity", "()F");
            mids$[mid_getScaleFactor_54c6a176] = env->getMethodID(cls, "getScaleFactor", "()F");
            mids$[mid_next_4ae19461] = env->getMethodID(cls, "next", "()Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_ord_54c6a17a] = env->getMethodID(cls, "ord", "()J");
            mids$[mid_seekCeil_fa9d72c4] = env->getMethodID(cls, "seekCeil", "(Lorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/index/TermsEnum$SeekStatus;");
            mids$[mid_seekExact_7bc03dc8] = env->getMethodID(cls, "seekExact", "(Lorg/apache/lucene/util/BytesRef;)Z");
            mids$[mid_seekExact_0ee6df2f] = env->getMethodID(cls, "seekExact", "(J)V");
            mids$[mid_seekExact_fe46da51] = env->getMethodID(cls, "seekExact", "(Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/index/TermState;)V");
            mids$[mid_term_4ae19461] = env->getMethodID(cls, "term", "()Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_termState_3e41fede] = env->getMethodID(cls, "termState", "()Lorg/apache/lucene/index/TermState;");
            mids$[mid_totalTermFreq_54c6a17a] = env->getMethodID(cls, "totalTermFreq", "()J");
            mids$[mid_setEnum_0f660bfe] = env->getMethodID(cls, "setEnum", "(Lorg/apache/lucene/index/TermsEnum;)V");
            mids$[mid_maxEditDistanceChanged_0741f897] = env->getMethodID(cls, "maxEditDistanceChanged", "(Lorg/apache/lucene/util/BytesRef;IZ)V");
            mids$[mid_getAutomatonEnum_6dd5cb2f] = env->getMethodID(cls, "getAutomatonEnum", "(ILorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/index/TermsEnum;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FuzzyTermsEnum::FuzzyTermsEnum(const ::org::apache::lucene::index::Terms & a0, const ::org::apache::lucene::util::AttributeSource & a1, const ::org::apache::lucene::index::Term & a2, jfloat a3, jint a4, jboolean a5) : ::org::apache::lucene::index::TermsEnum(env->newObject(initializeClass, &mids$, mid_init$_538f73aa, a0.this$, a1.this$, a2.this$, a3, a4, a5)) {}

        jint FuzzyTermsEnum::docFreq() const
        {
          return env->callIntMethod(this$, mids$[mid_docFreq_54c6a179]);
        }

        ::org::apache::lucene::index::DocsEnum FuzzyTermsEnum::docs(const ::org::apache::lucene::util::Bits & a0, const ::org::apache::lucene::index::DocsEnum & a1, jint a2) const
        {
          return ::org::apache::lucene::index::DocsEnum(env->callObjectMethod(this$, mids$[mid_docs_e6d4c3ef], a0.this$, a1.this$, a2));
        }

        ::org::apache::lucene::index::DocsAndPositionsEnum FuzzyTermsEnum::docsAndPositions(const ::org::apache::lucene::util::Bits & a0, const ::org::apache::lucene::index::DocsAndPositionsEnum & a1, jint a2) const
        {
          return ::org::apache::lucene::index::DocsAndPositionsEnum(env->callObjectMethod(this$, mids$[mid_docsAndPositions_b5d9c11b], a0.this$, a1.this$, a2));
        }

        ::java::util::Comparator FuzzyTermsEnum::getComparator() const
        {
          return ::java::util::Comparator(env->callObjectMethod(this$, mids$[mid_getComparator_5a7ff2fc]));
        }

        jfloat FuzzyTermsEnum::getMinSimilarity() const
        {
          return env->callFloatMethod(this$, mids$[mid_getMinSimilarity_54c6a176]);
        }

        jfloat FuzzyTermsEnum::getScaleFactor() const
        {
          return env->callFloatMethod(this$, mids$[mid_getScaleFactor_54c6a176]);
        }

        ::org::apache::lucene::util::BytesRef FuzzyTermsEnum::next() const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_next_4ae19461]));
        }

        jlong FuzzyTermsEnum::ord() const
        {
          return env->callLongMethod(this$, mids$[mid_ord_54c6a17a]);
        }

        ::org::apache::lucene::index::TermsEnum$SeekStatus FuzzyTermsEnum::seekCeil(const ::org::apache::lucene::util::BytesRef & a0) const
        {
          return ::org::apache::lucene::index::TermsEnum$SeekStatus(env->callObjectMethod(this$, mids$[mid_seekCeil_fa9d72c4], a0.this$));
        }

        jboolean FuzzyTermsEnum::seekExact(const ::org::apache::lucene::util::BytesRef & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_seekExact_7bc03dc8], a0.this$);
        }

        void FuzzyTermsEnum::seekExact(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_seekExact_0ee6df2f], a0);
        }

        void FuzzyTermsEnum::seekExact(const ::org::apache::lucene::util::BytesRef & a0, const ::org::apache::lucene::index::TermState & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_seekExact_fe46da51], a0.this$, a1.this$);
        }

        ::org::apache::lucene::util::BytesRef FuzzyTermsEnum::term() const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_term_4ae19461]));
        }

        ::org::apache::lucene::index::TermState FuzzyTermsEnum::termState() const
        {
          return ::org::apache::lucene::index::TermState(env->callObjectMethod(this$, mids$[mid_termState_3e41fede]));
        }

        jlong FuzzyTermsEnum::totalTermFreq() const
        {
          return env->callLongMethod(this$, mids$[mid_totalTermFreq_54c6a17a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/search/FuzzyTermsEnum$LevenshteinAutomataAttributeImpl.h"
#include "org/apache/lucene/search/FuzzyTermsEnum$LevenshteinAutomataAttribute.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FuzzyTermsEnum_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FuzzyTermsEnum_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FuzzyTermsEnum_init_(t_FuzzyTermsEnum *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FuzzyTermsEnum_docFreq(t_FuzzyTermsEnum *self, PyObject *args);
        static PyObject *t_FuzzyTermsEnum_docs(t_FuzzyTermsEnum *self, PyObject *args);
        static PyObject *t_FuzzyTermsEnum_docsAndPositions(t_FuzzyTermsEnum *self, PyObject *args);
        static PyObject *t_FuzzyTermsEnum_getComparator(t_FuzzyTermsEnum *self, PyObject *args);
        static PyObject *t_FuzzyTermsEnum_getMinSimilarity(t_FuzzyTermsEnum *self);
        static PyObject *t_FuzzyTermsEnum_getScaleFactor(t_FuzzyTermsEnum *self);
        static PyObject *t_FuzzyTermsEnum_next(t_FuzzyTermsEnum *self, PyObject *args);
        static PyObject *t_FuzzyTermsEnum_ord(t_FuzzyTermsEnum *self, PyObject *args);
        static PyObject *t_FuzzyTermsEnum_seekCeil(t_FuzzyTermsEnum *self, PyObject *args);
        static PyObject *t_FuzzyTermsEnum_seekExact(t_FuzzyTermsEnum *self, PyObject *args);
        static PyObject *t_FuzzyTermsEnum_term(t_FuzzyTermsEnum *self, PyObject *args);
        static PyObject *t_FuzzyTermsEnum_termState(t_FuzzyTermsEnum *self, PyObject *args);
        static PyObject *t_FuzzyTermsEnum_totalTermFreq(t_FuzzyTermsEnum *self, PyObject *args);
        static PyObject *t_FuzzyTermsEnum_get__comparator(t_FuzzyTermsEnum *self, void *data);
        static PyObject *t_FuzzyTermsEnum_get__minSimilarity(t_FuzzyTermsEnum *self, void *data);
        static PyObject *t_FuzzyTermsEnum_get__scaleFactor(t_FuzzyTermsEnum *self, void *data);
        static PyGetSetDef t_FuzzyTermsEnum__fields_[] = {
          DECLARE_GET_FIELD(t_FuzzyTermsEnum, comparator),
          DECLARE_GET_FIELD(t_FuzzyTermsEnum, minSimilarity),
          DECLARE_GET_FIELD(t_FuzzyTermsEnum, scaleFactor),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FuzzyTermsEnum__methods_[] = {
          DECLARE_METHOD(t_FuzzyTermsEnum, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FuzzyTermsEnum, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FuzzyTermsEnum, docFreq, METH_VARARGS),
          DECLARE_METHOD(t_FuzzyTermsEnum, docs, METH_VARARGS),
          DECLARE_METHOD(t_FuzzyTermsEnum, docsAndPositions, METH_VARARGS),
          DECLARE_METHOD(t_FuzzyTermsEnum, getComparator, METH_VARARGS),
          DECLARE_METHOD(t_FuzzyTermsEnum, getMinSimilarity, METH_NOARGS),
          DECLARE_METHOD(t_FuzzyTermsEnum, getScaleFactor, METH_NOARGS),
          DECLARE_METHOD(t_FuzzyTermsEnum, next, METH_VARARGS),
          DECLARE_METHOD(t_FuzzyTermsEnum, ord, METH_VARARGS),
          DECLARE_METHOD(t_FuzzyTermsEnum, seekCeil, METH_VARARGS),
          DECLARE_METHOD(t_FuzzyTermsEnum, seekExact, METH_VARARGS),
          DECLARE_METHOD(t_FuzzyTermsEnum, term, METH_VARARGS),
          DECLARE_METHOD(t_FuzzyTermsEnum, termState, METH_VARARGS),
          DECLARE_METHOD(t_FuzzyTermsEnum, totalTermFreq, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FuzzyTermsEnum, t_FuzzyTermsEnum, ::org::apache::lucene::index::TermsEnum, FuzzyTermsEnum, t_FuzzyTermsEnum_init_, PyObject_SelfIter, ((PyObject *(*)(t_FuzzyTermsEnum *)) get_next< t_FuzzyTermsEnum,::org::apache::lucene::util::t_BytesRef,::org::apache::lucene::util::BytesRef >), t_FuzzyTermsEnum__fields_, 0, 0);

        void t_FuzzyTermsEnum::install(PyObject *module)
        {
          installType(&PY_TYPE(FuzzyTermsEnum), module, "FuzzyTermsEnum", 0);
          PyDict_SetItemString(PY_TYPE(FuzzyTermsEnum).tp_dict, "LevenshteinAutomataAttributeImpl", make_descriptor(&PY_TYPE(FuzzyTermsEnum$LevenshteinAutomataAttributeImpl)));
          PyDict_SetItemString(PY_TYPE(FuzzyTermsEnum).tp_dict, "LevenshteinAutomataAttribute", make_descriptor(&PY_TYPE(FuzzyTermsEnum$LevenshteinAutomataAttribute)));
        }

        void t_FuzzyTermsEnum::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FuzzyTermsEnum).tp_dict, "class_", make_descriptor(FuzzyTermsEnum::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FuzzyTermsEnum).tp_dict, "wrapfn_", make_descriptor(t_FuzzyTermsEnum::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FuzzyTermsEnum).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FuzzyTermsEnum_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FuzzyTermsEnum::initializeClass, 1)))
            return NULL;
          return t_FuzzyTermsEnum::wrap_Object(FuzzyTermsEnum(((t_FuzzyTermsEnum *) arg)->object.this$));
        }
        static PyObject *t_FuzzyTermsEnum_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FuzzyTermsEnum::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FuzzyTermsEnum_init_(t_FuzzyTermsEnum *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::index::Terms a0((jobject) NULL);
          ::org::apache::lucene::util::AttributeSource a1((jobject) NULL);
          ::org::apache::lucene::index::Term a2((jobject) NULL);
          jfloat a3;
          jint a4;
          jboolean a5;
          FuzzyTermsEnum object((jobject) NULL);

          if (!parseArgs(args, "kkkFIZ", ::org::apache::lucene::index::Terms::initializeClass, ::org::apache::lucene::util::AttributeSource::initializeClass, ::org::apache::lucene::index::Term::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5))
          {
            INT_CALL(object = FuzzyTermsEnum(a0, a1, a2, a3, a4, a5));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FuzzyTermsEnum_docFreq(t_FuzzyTermsEnum *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.docFreq());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FuzzyTermsEnum), (PyObject *) self, "docFreq", args, 2);
        }

        static PyObject *t_FuzzyTermsEnum_docs(t_FuzzyTermsEnum *self, PyObject *args)
        {
          ::org::apache::lucene::util::Bits a0((jobject) NULL);
          ::org::apache::lucene::index::DocsEnum a1((jobject) NULL);
          jint a2;
          ::org::apache::lucene::index::DocsEnum result((jobject) NULL);

          if (!parseArgs(args, "kkI", ::org::apache::lucene::util::Bits::initializeClass, ::org::apache::lucene::index::DocsEnum::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.docs(a0, a1, a2));
            return ::org::apache::lucene::index::t_DocsEnum::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FuzzyTermsEnum), (PyObject *) self, "docs", args, 2);
        }

        static PyObject *t_FuzzyTermsEnum_docsAndPositions(t_FuzzyTermsEnum *self, PyObject *args)
        {
          ::org::apache::lucene::util::Bits a0((jobject) NULL);
          ::org::apache::lucene::index::DocsAndPositionsEnum a1((jobject) NULL);
          jint a2;
          ::org::apache::lucene::index::DocsAndPositionsEnum result((jobject) NULL);

          if (!parseArgs(args, "kkI", ::org::apache::lucene::util::Bits::initializeClass, ::org::apache::lucene::index::DocsAndPositionsEnum::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.docsAndPositions(a0, a1, a2));
            return ::org::apache::lucene::index::t_DocsAndPositionsEnum::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FuzzyTermsEnum), (PyObject *) self, "docsAndPositions", args, 2);
        }

        static PyObject *t_FuzzyTermsEnum_getComparator(t_FuzzyTermsEnum *self, PyObject *args)
        {
          ::java::util::Comparator result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getComparator());
            return ::java::util::t_Comparator::wrap_Object(result, &::org::apache::lucene::util::PY_TYPE(BytesRef));
          }

          return callSuper(&PY_TYPE(FuzzyTermsEnum), (PyObject *) self, "getComparator", args, 2);
        }

        static PyObject *t_FuzzyTermsEnum_getMinSimilarity(t_FuzzyTermsEnum *self)
        {
          jfloat result;
          OBJ_CALL(result = self->object.getMinSimilarity());
          return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_FuzzyTermsEnum_getScaleFactor(t_FuzzyTermsEnum *self)
        {
          jfloat result;
          OBJ_CALL(result = self->object.getScaleFactor());
          return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_FuzzyTermsEnum_next(t_FuzzyTermsEnum *self, PyObject *args)
        {
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.next());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FuzzyTermsEnum), (PyObject *) self, "next", args, 2);
        }

        static PyObject *t_FuzzyTermsEnum_ord(t_FuzzyTermsEnum *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.ord());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(FuzzyTermsEnum), (PyObject *) self, "ord", args, 2);
        }

        static PyObject *t_FuzzyTermsEnum_seekCeil(t_FuzzyTermsEnum *self, PyObject *args)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          ::org::apache::lucene::index::TermsEnum$SeekStatus result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.seekCeil(a0));
            return ::org::apache::lucene::index::t_TermsEnum$SeekStatus::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FuzzyTermsEnum), (PyObject *) self, "seekCeil", args, 2);
        }

        static PyObject *t_FuzzyTermsEnum_seekExact(t_FuzzyTermsEnum *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.seekExact(a0));
                Py_RETURN_BOOL(result);
              }
            }
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.seekExact(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 2:
            {
              ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
              ::org::apache::lucene::index::TermState a1((jobject) NULL);

              if (!parseArgs(args, "kk", ::org::apache::lucene::util::BytesRef::initializeClass, ::org::apache::lucene::index::TermState::initializeClass, &a0, &a1))
              {
                OBJ_CALL(self->object.seekExact(a0, a1));
                Py_RETURN_NONE;
              }
            }
          }

          return callSuper(&PY_TYPE(FuzzyTermsEnum), (PyObject *) self, "seekExact", args, 2);
        }

        static PyObject *t_FuzzyTermsEnum_term(t_FuzzyTermsEnum *self, PyObject *args)
        {
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.term());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FuzzyTermsEnum), (PyObject *) self, "term", args, 2);
        }

        static PyObject *t_FuzzyTermsEnum_termState(t_FuzzyTermsEnum *self, PyObject *args)
        {
          ::org::apache::lucene::index::TermState result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.termState());
            return ::org::apache::lucene::index::t_TermState::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FuzzyTermsEnum), (PyObject *) self, "termState", args, 2);
        }

        static PyObject *t_FuzzyTermsEnum_totalTermFreq(t_FuzzyTermsEnum *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.totalTermFreq());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(FuzzyTermsEnum), (PyObject *) self, "totalTermFreq", args, 2);
        }

        static PyObject *t_FuzzyTermsEnum_get__comparator(t_FuzzyTermsEnum *self, void *data)
        {
          ::java::util::Comparator value((jobject) NULL);
          OBJ_CALL(value = self->object.getComparator());
          return ::java::util::t_Comparator::wrap_Object(value);
        }

        static PyObject *t_FuzzyTermsEnum_get__minSimilarity(t_FuzzyTermsEnum *self, void *data)
        {
          jfloat value;
          OBJ_CALL(value = self->object.getMinSimilarity());
          return PyFloat_FromDouble((double) value);
        }

        static PyObject *t_FuzzyTermsEnum_get__scaleFactor(t_FuzzyTermsEnum *self, void *data)
        {
          jfloat value;
          OBJ_CALL(value = self->object.getScaleFactor());
          return PyFloat_FromDouble((double) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/DocsEnum.h"
#include "org/apache/lucene/util/AttributeSource.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *DocsEnum::class$ = NULL;
        jmethodID *DocsEnum::mids$ = NULL;
        bool DocsEnum::live$ = false;
        jint DocsEnum::FLAG_FREQS = (jint) 0;
        jint DocsEnum::FLAG_NONE = (jint) 0;

        jclass DocsEnum::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/DocsEnum");

            mids$ = new jmethodID[max_mid];
            mids$[mid_attributes_f901022b] = env->getMethodID(cls, "attributes", "()Lorg/apache/lucene/util/AttributeSource;");
            mids$[mid_freq_54c6a179] = env->getMethodID(cls, "freq", "()I");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            FLAG_FREQS = env->getStaticIntField(cls, "FLAG_FREQS");
            FLAG_NONE = env->getStaticIntField(cls, "FLAG_NONE");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::util::AttributeSource DocsEnum::attributes() const
        {
          return ::org::apache::lucene::util::AttributeSource(env->callObjectMethod(this$, mids$[mid_attributes_f901022b]));
        }

        jint DocsEnum::freq() const
        {
          return env->callIntMethod(this$, mids$[mid_freq_54c6a179]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_DocsEnum_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DocsEnum_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DocsEnum_attributes(t_DocsEnum *self);
        static PyObject *t_DocsEnum_freq(t_DocsEnum *self);

        static PyMethodDef t_DocsEnum__methods_[] = {
          DECLARE_METHOD(t_DocsEnum, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DocsEnum, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DocsEnum, attributes, METH_NOARGS),
          DECLARE_METHOD(t_DocsEnum, freq, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(DocsEnum, t_DocsEnum, ::org::apache::lucene::search::DocIdSetIterator, DocsEnum, abstract_init, 0, 0, 0, 0, 0);

        void t_DocsEnum::install(PyObject *module)
        {
          installType(&PY_TYPE(DocsEnum), module, "DocsEnum", 0);
        }

        void t_DocsEnum::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(DocsEnum).tp_dict, "class_", make_descriptor(DocsEnum::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(DocsEnum).tp_dict, "wrapfn_", make_descriptor(t_DocsEnum::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(DocsEnum).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(DocsEnum::initializeClass);
          PyDict_SetItemString(PY_TYPE(DocsEnum).tp_dict, "FLAG_FREQS", make_descriptor(DocsEnum::FLAG_FREQS));
          PyDict_SetItemString(PY_TYPE(DocsEnum).tp_dict, "FLAG_NONE", make_descriptor(DocsEnum::FLAG_NONE));
        }

        static PyObject *t_DocsEnum_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, DocsEnum::initializeClass, 1)))
            return NULL;
          return t_DocsEnum::wrap_Object(DocsEnum(((t_DocsEnum *) arg)->object.this$));
        }
        static PyObject *t_DocsEnum_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, DocsEnum::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_DocsEnum_attributes(t_DocsEnum *self)
        {
          ::org::apache::lucene::util::AttributeSource result((jobject) NULL);
          OBJ_CALL(result = self->object.attributes());
          return ::org::apache::lucene::util::t_AttributeSource::wrap_Object(result);
        }

        static PyObject *t_DocsEnum_freq(t_DocsEnum *self)
        {
          jint result;
          OBJ_CALL(result = self->object.freq());
          return PyInt_FromLong((long) result);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/processors/WildcardQueryNodeProcessor.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {

              ::java::lang::Class *WildcardQueryNodeProcessor::class$ = NULL;
              jmethodID *WildcardQueryNodeProcessor::mids$ = NULL;
              bool WildcardQueryNodeProcessor::live$ = false;

              jclass WildcardQueryNodeProcessor::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/processors/WildcardQueryNodeProcessor");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_postProcessNode_6705aed7] = env->getMethodID(cls, "postProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_preProcessNode_6705aed7] = env->getMethodID(cls, "preProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_setChildrenOrder_4f378251] = env->getMethodID(cls, "setChildrenOrder", "(Ljava/util/List;)Ljava/util/List;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              WildcardQueryNodeProcessor::WildcardQueryNodeProcessor() : ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {
              static PyObject *t_WildcardQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_WildcardQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg);
              static int t_WildcardQueryNodeProcessor_init_(t_WildcardQueryNodeProcessor *self, PyObject *args, PyObject *kwds);

              static PyMethodDef t_WildcardQueryNodeProcessor__methods_[] = {
                DECLARE_METHOD(t_WildcardQueryNodeProcessor, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_WildcardQueryNodeProcessor, instance_, METH_O | METH_CLASS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(WildcardQueryNodeProcessor, t_WildcardQueryNodeProcessor, ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl, WildcardQueryNodeProcessor, t_WildcardQueryNodeProcessor_init_, 0, 0, 0, 0, 0);

              void t_WildcardQueryNodeProcessor::install(PyObject *module)
              {
                installType(&PY_TYPE(WildcardQueryNodeProcessor), module, "WildcardQueryNodeProcessor", 0);
              }

              void t_WildcardQueryNodeProcessor::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(WildcardQueryNodeProcessor).tp_dict, "class_", make_descriptor(WildcardQueryNodeProcessor::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(WildcardQueryNodeProcessor).tp_dict, "wrapfn_", make_descriptor(t_WildcardQueryNodeProcessor::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(WildcardQueryNodeProcessor).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_WildcardQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, WildcardQueryNodeProcessor::initializeClass, 1)))
                  return NULL;
                return t_WildcardQueryNodeProcessor::wrap_Object(WildcardQueryNodeProcessor(((t_WildcardQueryNodeProcessor *) arg)->object.this$));
              }
              static PyObject *t_WildcardQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, WildcardQueryNodeProcessor::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_WildcardQueryNodeProcessor_init_(t_WildcardQueryNodeProcessor *self, PyObject *args, PyObject *kwds)
              {
                WildcardQueryNodeProcessor object((jobject) NULL);

                INT_CALL(object = WildcardQueryNodeProcessor());
                self->object = object;

                return 0;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/docvalues/BoolDocValues.h"
#include "org/apache/lucene/queries/function/ValueSource.h"
#include "org/apache/lucene/queries/function/FunctionValues$ValueFiller.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace docvalues {

            ::java::lang::Class *BoolDocValues::class$ = NULL;
            jmethodID *BoolDocValues::mids$ = NULL;
            bool BoolDocValues::live$ = false;

            jclass BoolDocValues::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/docvalues/BoolDocValues");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_ca78fe7a] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queries/function/ValueSource;)V");
                mids$[mid_boolVal_39c7bd30] = env->getMethodID(cls, "boolVal", "(I)Z");
                mids$[mid_byteVal_39c7bd28] = env->getMethodID(cls, "byteVal", "(I)B");
                mids$[mid_doubleVal_39c7bd2e] = env->getMethodID(cls, "doubleVal", "(I)D");
                mids$[mid_floatVal_39c7bd2c] = env->getMethodID(cls, "floatVal", "(I)F");
                mids$[mid_getValueFiller_7731f0bd] = env->getMethodID(cls, "getValueFiller", "()Lorg/apache/lucene/queries/function/FunctionValues$ValueFiller;");
                mids$[mid_intVal_39c7bd23] = env->getMethodID(cls, "intVal", "(I)I");
                mids$[mid_longVal_39c7bd20] = env->getMethodID(cls, "longVal", "(I)J");
                mids$[mid_objectVal_29be6a55] = env->getMethodID(cls, "objectVal", "(I)Ljava/lang/Object;");
                mids$[mid_shortVal_39c7bd39] = env->getMethodID(cls, "shortVal", "(I)S");
                mids$[mid_strVal_141401b3] = env->getMethodID(cls, "strVal", "(I)Ljava/lang/String;");
                mids$[mid_toString_141401b3] = env->getMethodID(cls, "toString", "(I)Ljava/lang/String;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            BoolDocValues::BoolDocValues(const ::org::apache::lucene::queries::function::ValueSource & a0) : ::org::apache::lucene::queries::function::FunctionValues(env->newObject(initializeClass, &mids$, mid_init$_ca78fe7a, a0.this$)) {}

            jboolean BoolDocValues::boolVal(jint a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_boolVal_39c7bd30], a0);
            }

            jbyte BoolDocValues::byteVal(jint a0) const
            {
              return env->callByteMethod(this$, mids$[mid_byteVal_39c7bd28], a0);
            }

            jdouble BoolDocValues::doubleVal(jint a0) const
            {
              return env->callDoubleMethod(this$, mids$[mid_doubleVal_39c7bd2e], a0);
            }

            jfloat BoolDocValues::floatVal(jint a0) const
            {
              return env->callFloatMethod(this$, mids$[mid_floatVal_39c7bd2c], a0);
            }

            ::org::apache::lucene::queries::function::FunctionValues$ValueFiller BoolDocValues::getValueFiller() const
            {
              return ::org::apache::lucene::queries::function::FunctionValues$ValueFiller(env->callObjectMethod(this$, mids$[mid_getValueFiller_7731f0bd]));
            }

            jint BoolDocValues::intVal(jint a0) const
            {
              return env->callIntMethod(this$, mids$[mid_intVal_39c7bd23], a0);
            }

            jlong BoolDocValues::longVal(jint a0) const
            {
              return env->callLongMethod(this$, mids$[mid_longVal_39c7bd20], a0);
            }

            ::java::lang::Object BoolDocValues::objectVal(jint a0) const
            {
              return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_objectVal_29be6a55], a0));
            }

            jshort BoolDocValues::shortVal(jint a0) const
            {
              return env->callShortMethod(this$, mids$[mid_shortVal_39c7bd39], a0);
            }

            ::java::lang::String BoolDocValues::strVal(jint a0) const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_strVal_141401b3], a0));
            }

            ::java::lang::String BoolDocValues::toString(jint a0) const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_141401b3], a0));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace docvalues {
            static PyObject *t_BoolDocValues_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_BoolDocValues_instance_(PyTypeObject *type, PyObject *arg);
            static int t_BoolDocValues_init_(t_BoolDocValues *self, PyObject *args, PyObject *kwds);
            static PyObject *t_BoolDocValues_boolVal(t_BoolDocValues *self, PyObject *args);
            static PyObject *t_BoolDocValues_byteVal(t_BoolDocValues *self, PyObject *args);
            static PyObject *t_BoolDocValues_doubleVal(t_BoolDocValues *self, PyObject *args);
            static PyObject *t_BoolDocValues_floatVal(t_BoolDocValues *self, PyObject *args);
            static PyObject *t_BoolDocValues_getValueFiller(t_BoolDocValues *self, PyObject *args);
            static PyObject *t_BoolDocValues_intVal(t_BoolDocValues *self, PyObject *args);
            static PyObject *t_BoolDocValues_longVal(t_BoolDocValues *self, PyObject *args);
            static PyObject *t_BoolDocValues_objectVal(t_BoolDocValues *self, PyObject *args);
            static PyObject *t_BoolDocValues_shortVal(t_BoolDocValues *self, PyObject *args);
            static PyObject *t_BoolDocValues_strVal(t_BoolDocValues *self, PyObject *args);
            static PyObject *t_BoolDocValues_toString(t_BoolDocValues *self, PyObject *args);
            static PyObject *t_BoolDocValues_get__valueFiller(t_BoolDocValues *self, void *data);
            static PyGetSetDef t_BoolDocValues__fields_[] = {
              DECLARE_GET_FIELD(t_BoolDocValues, valueFiller),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_BoolDocValues__methods_[] = {
              DECLARE_METHOD(t_BoolDocValues, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_BoolDocValues, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_BoolDocValues, boolVal, METH_VARARGS),
              DECLARE_METHOD(t_BoolDocValues, byteVal, METH_VARARGS),
              DECLARE_METHOD(t_BoolDocValues, doubleVal, METH_VARARGS),
              DECLARE_METHOD(t_BoolDocValues, floatVal, METH_VARARGS),
              DECLARE_METHOD(t_BoolDocValues, getValueFiller, METH_VARARGS),
              DECLARE_METHOD(t_BoolDocValues, intVal, METH_VARARGS),
              DECLARE_METHOD(t_BoolDocValues, longVal, METH_VARARGS),
              DECLARE_METHOD(t_BoolDocValues, objectVal, METH_VARARGS),
              DECLARE_METHOD(t_BoolDocValues, shortVal, METH_VARARGS),
              DECLARE_METHOD(t_BoolDocValues, strVal, METH_VARARGS),
              DECLARE_METHOD(t_BoolDocValues, toString, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(BoolDocValues, t_BoolDocValues, ::org::apache::lucene::queries::function::FunctionValues, BoolDocValues, t_BoolDocValues_init_, 0, 0, t_BoolDocValues__fields_, 0, 0);

            void t_BoolDocValues::install(PyObject *module)
            {
              installType(&PY_TYPE(BoolDocValues), module, "BoolDocValues", 0);
            }

            void t_BoolDocValues::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(BoolDocValues).tp_dict, "class_", make_descriptor(BoolDocValues::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(BoolDocValues).tp_dict, "wrapfn_", make_descriptor(t_BoolDocValues::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(BoolDocValues).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_BoolDocValues_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, BoolDocValues::initializeClass, 1)))
                return NULL;
              return t_BoolDocValues::wrap_Object(BoolDocValues(((t_BoolDocValues *) arg)->object.this$));
            }
            static PyObject *t_BoolDocValues_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, BoolDocValues::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_BoolDocValues_init_(t_BoolDocValues *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::queries::function::ValueSource a0((jobject) NULL);
              BoolDocValues object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::queries::function::ValueSource::initializeClass, &a0))
              {
                INT_CALL(object = BoolDocValues(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_BoolDocValues_boolVal(t_BoolDocValues *self, PyObject *args)
            {
              jint a0;
              jboolean result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.boolVal(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(BoolDocValues), (PyObject *) self, "boolVal", args, 2);
            }

            static PyObject *t_BoolDocValues_byteVal(t_BoolDocValues *self, PyObject *args)
            {
              jint a0;
              jbyte result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.byteVal(a0));
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(BoolDocValues), (PyObject *) self, "byteVal", args, 2);
            }

            static PyObject *t_BoolDocValues_doubleVal(t_BoolDocValues *self, PyObject *args)
            {
              jint a0;
              jdouble result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.doubleVal(a0));
                return PyFloat_FromDouble((double) result);
              }

              return callSuper(&PY_TYPE(BoolDocValues), (PyObject *) self, "doubleVal", args, 2);
            }

            static PyObject *t_BoolDocValues_floatVal(t_BoolDocValues *self, PyObject *args)
            {
              jint a0;
              jfloat result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.floatVal(a0));
                return PyFloat_FromDouble((double) result);
              }

              return callSuper(&PY_TYPE(BoolDocValues), (PyObject *) self, "floatVal", args, 2);
            }

            static PyObject *t_BoolDocValues_getValueFiller(t_BoolDocValues *self, PyObject *args)
            {
              ::org::apache::lucene::queries::function::FunctionValues$ValueFiller result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getValueFiller());
                return ::org::apache::lucene::queries::function::t_FunctionValues$ValueFiller::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(BoolDocValues), (PyObject *) self, "getValueFiller", args, 2);
            }

            static PyObject *t_BoolDocValues_intVal(t_BoolDocValues *self, PyObject *args)
            {
              jint a0;
              jint result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.intVal(a0));
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(BoolDocValues), (PyObject *) self, "intVal", args, 2);
            }

            static PyObject *t_BoolDocValues_longVal(t_BoolDocValues *self, PyObject *args)
            {
              jint a0;
              jlong result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.longVal(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }

              return callSuper(&PY_TYPE(BoolDocValues), (PyObject *) self, "longVal", args, 2);
            }

            static PyObject *t_BoolDocValues_objectVal(t_BoolDocValues *self, PyObject *args)
            {
              jint a0;
              ::java::lang::Object result((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.objectVal(a0));
                return ::java::lang::t_Object::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(BoolDocValues), (PyObject *) self, "objectVal", args, 2);
            }

            static PyObject *t_BoolDocValues_shortVal(t_BoolDocValues *self, PyObject *args)
            {
              jint a0;
              jshort result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.shortVal(a0));
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(BoolDocValues), (PyObject *) self, "shortVal", args, 2);
            }

            static PyObject *t_BoolDocValues_strVal(t_BoolDocValues *self, PyObject *args)
            {
              jint a0;
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.strVal(a0));
                return j2p(result);
              }

              return callSuper(&PY_TYPE(BoolDocValues), (PyObject *) self, "strVal", args, 2);
            }

            static PyObject *t_BoolDocValues_toString(t_BoolDocValues *self, PyObject *args)
            {
              jint a0;
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.toString(a0));
                return j2p(result);
              }

              return callSuper(&PY_TYPE(BoolDocValues), (PyObject *) self, "toString", args, 2);
            }

            static PyObject *t_BoolDocValues_get__valueFiller(t_BoolDocValues *self, void *data)
            {
              ::org::apache::lucene::queries::function::FunctionValues$ValueFiller value((jobject) NULL);
              OBJ_CALL(value = self->object.getValueFiller());
              return ::org::apache::lucene::queries::function::t_FunctionValues$ValueFiller::wrap_Object(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/pylucene/search/spans/PythonSpans.h"
#include "java/util/Collection.h"
#include "java/io/IOException.h"
#include "java/lang/Throwable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace search {
        namespace spans {

          ::java::lang::Class *PythonSpans::class$ = NULL;
          jmethodID *PythonSpans::mids$ = NULL;
          bool PythonSpans::live$ = false;

          jclass PythonSpans::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/pylucene/search/spans/PythonSpans");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_cost_54c6a17a] = env->getMethodID(cls, "cost", "()J");
              mids$[mid_doc_54c6a179] = env->getMethodID(cls, "doc", "()I");
              mids$[mid_end_54c6a179] = env->getMethodID(cls, "end", "()I");
              mids$[mid_finalize_54c6a166] = env->getMethodID(cls, "finalize", "()V");
              mids$[mid_getPayload_2d2d7de4] = env->getMethodID(cls, "getPayload", "()Ljava/util/Collection;");
              mids$[mid_isPayloadAvailable_54c6a16a] = env->getMethodID(cls, "isPayloadAvailable", "()Z");
              mids$[mid_next_54c6a16a] = env->getMethodID(cls, "next", "()Z");
              mids$[mid_pythonDecRef_54c6a166] = env->getMethodID(cls, "pythonDecRef", "()V");
              mids$[mid_pythonExtension_54c6a17a] = env->getMethodID(cls, "pythonExtension", "()J");
              mids$[mid_pythonExtension_0ee6df2f] = env->getMethodID(cls, "pythonExtension", "(J)V");
              mids$[mid_skipTo_39c7bd30] = env->getMethodID(cls, "skipTo", "(I)Z");
              mids$[mid_start_54c6a179] = env->getMethodID(cls, "start", "()I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PythonSpans::PythonSpans() : ::org::apache::lucene::search::spans::Spans(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          void PythonSpans::finalize() const
          {
            env->callVoidMethod(this$, mids$[mid_finalize_54c6a166]);
          }

          jlong PythonSpans::pythonExtension() const
          {
            return env->callLongMethod(this$, mids$[mid_pythonExtension_54c6a17a]);
          }

          void PythonSpans::pythonExtension(jlong a0) const
          {
            env->callVoidMethod(this$, mids$[mid_pythonExtension_0ee6df2f], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace search {
        namespace spans {
          static PyObject *t_PythonSpans_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PythonSpans_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PythonSpans_init_(t_PythonSpans *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PythonSpans_finalize(t_PythonSpans *self);
          static PyObject *t_PythonSpans_pythonExtension(t_PythonSpans *self, PyObject *args);
          static jlong JNICALL t_PythonSpans_cost0(JNIEnv *jenv, jobject jobj);
          static jint JNICALL t_PythonSpans_doc1(JNIEnv *jenv, jobject jobj);
          static jint JNICALL t_PythonSpans_end2(JNIEnv *jenv, jobject jobj);
          static jobject JNICALL t_PythonSpans_getPayload3(JNIEnv *jenv, jobject jobj);
          static jboolean JNICALL t_PythonSpans_isPayloadAvailable4(JNIEnv *jenv, jobject jobj);
          static jboolean JNICALL t_PythonSpans_next5(JNIEnv *jenv, jobject jobj);
          static void JNICALL t_PythonSpans_pythonDecRef6(JNIEnv *jenv, jobject jobj);
          static jboolean JNICALL t_PythonSpans_skipTo7(JNIEnv *jenv, jobject jobj, jint a0);
          static jint JNICALL t_PythonSpans_start8(JNIEnv *jenv, jobject jobj);
          static PyObject *t_PythonSpans_get__self(t_PythonSpans *self, void *data);
          static PyGetSetDef t_PythonSpans__fields_[] = {
            DECLARE_GET_FIELD(t_PythonSpans, self),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_PythonSpans__methods_[] = {
            DECLARE_METHOD(t_PythonSpans, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PythonSpans, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PythonSpans, finalize, METH_NOARGS),
            DECLARE_METHOD(t_PythonSpans, pythonExtension, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PythonSpans, t_PythonSpans, ::org::apache::lucene::search::spans::Spans, PythonSpans, t_PythonSpans_init_, 0, 0, t_PythonSpans__fields_, 0, 0);

          void t_PythonSpans::install(PyObject *module)
          {
            installType(&PY_TYPE(PythonSpans), module, "PythonSpans", 1);
          }

          void t_PythonSpans::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PythonSpans).tp_dict, "class_", make_descriptor(PythonSpans::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PythonSpans).tp_dict, "wrapfn_", make_descriptor(t_PythonSpans::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PythonSpans).tp_dict, "boxfn_", make_descriptor(boxObject));
            jclass cls = env->getClass(PythonSpans::initializeClass);
            JNINativeMethod methods[] = {
              { "cost", "()J", (void *) t_PythonSpans_cost0 },
              { "doc", "()I", (void *) t_PythonSpans_doc1 },
              { "end", "()I", (void *) t_PythonSpans_end2 },
              { "getPayload", "()Ljava/util/Collection;", (void *) t_PythonSpans_getPayload3 },
              { "isPayloadAvailable", "()Z", (void *) t_PythonSpans_isPayloadAvailable4 },
              { "next", "()Z", (void *) t_PythonSpans_next5 },
              { "pythonDecRef", "()V", (void *) t_PythonSpans_pythonDecRef6 },
              { "skipTo", "(I)Z", (void *) t_PythonSpans_skipTo7 },
              { "start", "()I", (void *) t_PythonSpans_start8 },
            };
            env->registerNatives(cls, methods, 9);
          }

          static PyObject *t_PythonSpans_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PythonSpans::initializeClass, 1)))
              return NULL;
            return t_PythonSpans::wrap_Object(PythonSpans(((t_PythonSpans *) arg)->object.this$));
          }
          static PyObject *t_PythonSpans_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PythonSpans::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PythonSpans_init_(t_PythonSpans *self, PyObject *args, PyObject *kwds)
          {
            PythonSpans object((jobject) NULL);

            INT_CALL(object = PythonSpans());
            self->object = object;

            Py_INCREF((PyObject *) self);
            self->object.pythonExtension((jlong) (Py_intptr_t) (void *) self);

            return 0;
          }

          static PyObject *t_PythonSpans_finalize(t_PythonSpans *self)
          {
            OBJ_CALL(self->object.finalize());
            Py_RETURN_NONE;
          }

          static PyObject *t_PythonSpans_pythonExtension(t_PythonSpans *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                jlong result;
                OBJ_CALL(result = self->object.pythonExtension());
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
              break;
             case 1:
              {
                jlong a0;

                if (!parseArgs(args, "J", &a0))
                {
                  OBJ_CALL(self->object.pythonExtension(a0));
                  Py_RETURN_NONE;
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "pythonExtension", args);
            return NULL;
          }

          static jlong JNICALL t_PythonSpans_cost0(JNIEnv *jenv, jobject jobj)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonSpans::mids$[PythonSpans::mid_pythonExtension_54c6a17a]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
            PythonGIL gil(jenv);
            jlong value;
            PyObject *result = PyObject_CallMethod(obj, "cost", "");
            if (!result)
              throwPythonError();
            else if (parseArg(result, "J", &value))
            {
              throwTypeError("cost", result);
              Py_DECREF(result);
            }
            else
            {
              Py_DECREF(result);
              return value;
            }

            return (jlong) 0;
          }

          static jint JNICALL t_PythonSpans_doc1(JNIEnv *jenv, jobject jobj)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonSpans::mids$[PythonSpans::mid_pythonExtension_54c6a17a]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
            PythonGIL gil(jenv);
            jint value;
            PyObject *result = PyObject_CallMethod(obj, "doc", "");
            if (!result)
              throwPythonError();
            else if (parseArg(result, "I", &value))
            {
              throwTypeError("doc", result);
              Py_DECREF(result);
            }
            else
            {
              Py_DECREF(result);
              return value;
            }

            return (jint) 0;
          }

          static jint JNICALL t_PythonSpans_end2(JNIEnv *jenv, jobject jobj)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonSpans::mids$[PythonSpans::mid_pythonExtension_54c6a17a]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
            PythonGIL gil(jenv);
            jint value;
            PyObject *result = PyObject_CallMethod(obj, "end", "");
            if (!result)
              throwPythonError();
            else if (parseArg(result, "I", &value))
            {
              throwTypeError("end", result);
              Py_DECREF(result);
            }
            else
            {
              Py_DECREF(result);
              return value;
            }

            return (jint) 0;
          }

          static jobject JNICALL t_PythonSpans_getPayload3(JNIEnv *jenv, jobject jobj)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonSpans::mids$[PythonSpans::mid_pythonExtension_54c6a17a]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
            PythonGIL gil(jenv);
            ::java::util::Collection value((jobject) NULL);
            PyObject *result = PyObject_CallMethod(obj, "getPayload", "");
            if (!result)
              throwPythonError();
            else if (parseArg(result, "k", ::java::util::Collection::initializeClass, &value))
            {
              throwTypeError("getPayload", result);
              Py_DECREF(result);
            }
            else
            {
              jobj = jenv->NewLocalRef(value.this$);
              Py_DECREF(result);
              return jobj;
            }

            return (jobject) NULL;
          }

          static jboolean JNICALL t_PythonSpans_isPayloadAvailable4(JNIEnv *jenv, jobject jobj)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonSpans::mids$[PythonSpans::mid_pythonExtension_54c6a17a]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
            PythonGIL gil(jenv);
            jboolean value;
            PyObject *result = PyObject_CallMethod(obj, "isPayloadAvailable", "");
            if (!result)
              throwPythonError();
            else if (parseArg(result, "Z", &value))
            {
              throwTypeError("isPayloadAvailable", result);
              Py_DECREF(result);
            }
            else
            {
              Py_DECREF(result);
              return value;
            }

            return (jboolean) 0;
          }

          static jboolean JNICALL t_PythonSpans_next5(JNIEnv *jenv, jobject jobj)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonSpans::mids$[PythonSpans::mid_pythonExtension_54c6a17a]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
            PythonGIL gil(jenv);
            jboolean value;
            PyObject *result = PyObject_CallMethod(obj, "next", "");
            if (!result)
              throwPythonError();
            else if (parseArg(result, "Z", &value))
            {
              throwTypeError("next", result);
              Py_DECREF(result);
            }
            else
            {
              Py_DECREF(result);
              return value;
            }

            return (jboolean) 0;
          }

          static void JNICALL t_PythonSpans_pythonDecRef6(JNIEnv *jenv, jobject jobj)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonSpans::mids$[PythonSpans::mid_pythonExtension_54c6a17a]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

            if (obj != NULL)
            {
              jenv->CallVoidMethod(jobj, PythonSpans::mids$[PythonSpans::mid_pythonExtension_0ee6df2f], (jlong) 0);
              env->finalizeObject(jenv, obj);
            }
          }

          static jboolean JNICALL t_PythonSpans_skipTo7(JNIEnv *jenv, jobject jobj, jint a0)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonSpans::mids$[PythonSpans::mid_pythonExtension_54c6a17a]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
            PythonGIL gil(jenv);
            jboolean value;
            PyObject *result = PyObject_CallMethod(obj, "skipTo", "i", (int) a0);
            if (!result)
              throwPythonError();
            else if (parseArg(result, "Z", &value))
            {
              throwTypeError("skipTo", result);
              Py_DECREF(result);
            }
            else
            {
              Py_DECREF(result);
              return value;
            }

            return (jboolean) 0;
          }

          static jint JNICALL t_PythonSpans_start8(JNIEnv *jenv, jobject jobj)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonSpans::mids$[PythonSpans::mid_pythonExtension_54c6a17a]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
            PythonGIL gil(jenv);
            jint value;
            PyObject *result = PyObject_CallMethod(obj, "start", "");
            if (!result)
              throwPythonError();
            else if (parseArg(result, "I", &value))
            {
              throwTypeError("start", result);
              Py_DECREF(result);
            }
            else
            {
              Py_DECREF(result);
              return value;
            }

            return (jint) 0;
          }

          static PyObject *t_PythonSpans_get__self(t_PythonSpans *self, void *data)
          {
            jlong ptr;
            OBJ_CALL(ptr = self->object.pythonExtension());
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

            if (obj != NULL)
            {
              Py_INCREF(obj);
              return obj;
            }
            else
              Py_RETURN_NONE;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/core/LowerCaseTokenizerFactory.h"
#include "org/apache/lucene/analysis/util/MultiTermAwareComponent.h"
#include "java/lang/Class.h"
#include "java/io/Reader.h"
#include "org/apache/lucene/analysis/util/AbstractAnalysisFactory.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "org/apache/lucene/analysis/core/LowerCaseTokenizer.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {

          ::java::lang::Class *LowerCaseTokenizerFactory::class$ = NULL;
          jmethodID *LowerCaseTokenizerFactory::mids$ = NULL;
          bool LowerCaseTokenizerFactory::live$ = false;

          jclass LowerCaseTokenizerFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/core/LowerCaseTokenizerFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_3b72128c] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;)Lorg/apache/lucene/analysis/core/LowerCaseTokenizer;");
              mids$[mid_getMultiTermComponent_0a3f1d72] = env->getMethodID(cls, "getMultiTermComponent", "()Lorg/apache/lucene/analysis/util/AbstractAnalysisFactory;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          LowerCaseTokenizerFactory::LowerCaseTokenizerFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenizerFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::core::LowerCaseTokenizer LowerCaseTokenizerFactory::create(const ::org::apache::lucene::util::AttributeFactory & a0, const ::java::io::Reader & a1) const
          {
            return ::org::apache::lucene::analysis::core::LowerCaseTokenizer(env->callObjectMethod(this$, mids$[mid_create_3b72128c], a0.this$, a1.this$));
          }

          ::org::apache::lucene::analysis::util::AbstractAnalysisFactory LowerCaseTokenizerFactory::getMultiTermComponent() const
          {
            return ::org::apache::lucene::analysis::util::AbstractAnalysisFactory(env->callObjectMethod(this$, mids$[mid_getMultiTermComponent_0a3f1d72]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {
          static PyObject *t_LowerCaseTokenizerFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LowerCaseTokenizerFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_LowerCaseTokenizerFactory_init_(t_LowerCaseTokenizerFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_LowerCaseTokenizerFactory_create(t_LowerCaseTokenizerFactory *self, PyObject *args);
          static PyObject *t_LowerCaseTokenizerFactory_getMultiTermComponent(t_LowerCaseTokenizerFactory *self);
          static PyObject *t_LowerCaseTokenizerFactory_get__multiTermComponent(t_LowerCaseTokenizerFactory *self, void *data);
          static PyGetSetDef t_LowerCaseTokenizerFactory__fields_[] = {
            DECLARE_GET_FIELD(t_LowerCaseTokenizerFactory, multiTermComponent),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_LowerCaseTokenizerFactory__methods_[] = {
            DECLARE_METHOD(t_LowerCaseTokenizerFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LowerCaseTokenizerFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LowerCaseTokenizerFactory, create, METH_VARARGS),
            DECLARE_METHOD(t_LowerCaseTokenizerFactory, getMultiTermComponent, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(LowerCaseTokenizerFactory, t_LowerCaseTokenizerFactory, ::org::apache::lucene::analysis::util::TokenizerFactory, LowerCaseTokenizerFactory, t_LowerCaseTokenizerFactory_init_, 0, 0, t_LowerCaseTokenizerFactory__fields_, 0, 0);

          void t_LowerCaseTokenizerFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(LowerCaseTokenizerFactory), module, "LowerCaseTokenizerFactory", 0);
          }

          void t_LowerCaseTokenizerFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(LowerCaseTokenizerFactory).tp_dict, "class_", make_descriptor(LowerCaseTokenizerFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(LowerCaseTokenizerFactory).tp_dict, "wrapfn_", make_descriptor(t_LowerCaseTokenizerFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(LowerCaseTokenizerFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_LowerCaseTokenizerFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LowerCaseTokenizerFactory::initializeClass, 1)))
              return NULL;
            return t_LowerCaseTokenizerFactory::wrap_Object(LowerCaseTokenizerFactory(((t_LowerCaseTokenizerFactory *) arg)->object.this$));
          }
          static PyObject *t_LowerCaseTokenizerFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LowerCaseTokenizerFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_LowerCaseTokenizerFactory_init_(t_LowerCaseTokenizerFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            LowerCaseTokenizerFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = LowerCaseTokenizerFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_LowerCaseTokenizerFactory_create(t_LowerCaseTokenizerFactory *self, PyObject *args)
          {
            ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
            ::java::io::Reader a1((jobject) NULL);
            ::org::apache::lucene::analysis::core::LowerCaseTokenizer result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.create(a0, a1));
              return ::org::apache::lucene::analysis::core::t_LowerCaseTokenizer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(LowerCaseTokenizerFactory), (PyObject *) self, "create", args, 2);
          }

          static PyObject *t_LowerCaseTokenizerFactory_getMultiTermComponent(t_LowerCaseTokenizerFactory *self)
          {
            ::org::apache::lucene::analysis::util::AbstractAnalysisFactory result((jobject) NULL);
            OBJ_CALL(result = self->object.getMultiTermComponent());
            return ::org::apache::lucene::analysis::util::t_AbstractAnalysisFactory::wrap_Object(result);
          }

          static PyObject *t_LowerCaseTokenizerFactory_get__multiTermComponent(t_LowerCaseTokenizerFactory *self, void *data)
          {
            ::org::apache::lucene::analysis::util::AbstractAnalysisFactory value((jobject) NULL);
            OBJ_CALL(value = self->object.getMultiTermComponent());
            return ::org::apache::lucene::analysis::util::t_AbstractAnalysisFactory::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/TaxonomyFacetSumValueSource.h"
#include "org/apache/lucene/queries/function/ValueSource.h"
#include "org/apache/lucene/facet/taxonomy/OrdinalsReader.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/facet/FacetsCollector.h"
#include "org/apache/lucene/facet/FacetsConfig.h"
#include "org/apache/lucene/facet/taxonomy/TaxonomyReader.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {

          ::java::lang::Class *TaxonomyFacetSumValueSource::class$ = NULL;
          jmethodID *TaxonomyFacetSumValueSource::mids$ = NULL;
          bool TaxonomyFacetSumValueSource::live$ = false;

          jclass TaxonomyFacetSumValueSource::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/TaxonomyFacetSumValueSource");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_6182367d] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/facet/taxonomy/TaxonomyReader;Lorg/apache/lucene/facet/FacetsConfig;Lorg/apache/lucene/facet/FacetsCollector;Lorg/apache/lucene/queries/function/ValueSource;)V");
              mids$[mid_init$_855546e7] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/facet/taxonomy/OrdinalsReader;Lorg/apache/lucene/facet/taxonomy/TaxonomyReader;Lorg/apache/lucene/facet/FacetsConfig;Lorg/apache/lucene/facet/FacetsCollector;Lorg/apache/lucene/queries/function/ValueSource;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TaxonomyFacetSumValueSource::TaxonomyFacetSumValueSource(const ::org::apache::lucene::facet::taxonomy::TaxonomyReader & a0, const ::org::apache::lucene::facet::FacetsConfig & a1, const ::org::apache::lucene::facet::FacetsCollector & a2, const ::org::apache::lucene::queries::function::ValueSource & a3) : ::org::apache::lucene::facet::taxonomy::FloatTaxonomyFacets(env->newObject(initializeClass, &mids$, mid_init$_6182367d, a0.this$, a1.this$, a2.this$, a3.this$)) {}

          TaxonomyFacetSumValueSource::TaxonomyFacetSumValueSource(const ::org::apache::lucene::facet::taxonomy::OrdinalsReader & a0, const ::org::apache::lucene::facet::taxonomy::TaxonomyReader & a1, const ::org::apache::lucene::facet::FacetsConfig & a2, const ::org::apache::lucene::facet::FacetsCollector & a3, const ::org::apache::lucene::queries::function::ValueSource & a4) : ::org::apache::lucene::facet::taxonomy::FloatTaxonomyFacets(env->newObject(initializeClass, &mids$, mid_init$_855546e7, a0.this$, a1.this$, a2.this$, a3.this$, a4.this$)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/facet/taxonomy/TaxonomyFacetSumValueSource$ScoreValueSource.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          static PyObject *t_TaxonomyFacetSumValueSource_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TaxonomyFacetSumValueSource_instance_(PyTypeObject *type, PyObject *arg);
          static int t_TaxonomyFacetSumValueSource_init_(t_TaxonomyFacetSumValueSource *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_TaxonomyFacetSumValueSource__methods_[] = {
            DECLARE_METHOD(t_TaxonomyFacetSumValueSource, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TaxonomyFacetSumValueSource, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(TaxonomyFacetSumValueSource, t_TaxonomyFacetSumValueSource, ::org::apache::lucene::facet::taxonomy::FloatTaxonomyFacets, TaxonomyFacetSumValueSource, t_TaxonomyFacetSumValueSource_init_, 0, 0, 0, 0, 0);

          void t_TaxonomyFacetSumValueSource::install(PyObject *module)
          {
            installType(&PY_TYPE(TaxonomyFacetSumValueSource), module, "TaxonomyFacetSumValueSource", 0);
            PyDict_SetItemString(PY_TYPE(TaxonomyFacetSumValueSource).tp_dict, "ScoreValueSource", make_descriptor(&PY_TYPE(TaxonomyFacetSumValueSource$ScoreValueSource)));
          }

          void t_TaxonomyFacetSumValueSource::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(TaxonomyFacetSumValueSource).tp_dict, "class_", make_descriptor(TaxonomyFacetSumValueSource::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(TaxonomyFacetSumValueSource).tp_dict, "wrapfn_", make_descriptor(t_TaxonomyFacetSumValueSource::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(TaxonomyFacetSumValueSource).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TaxonomyFacetSumValueSource_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TaxonomyFacetSumValueSource::initializeClass, 1)))
              return NULL;
            return t_TaxonomyFacetSumValueSource::wrap_Object(TaxonomyFacetSumValueSource(((t_TaxonomyFacetSumValueSource *) arg)->object.this$));
          }
          static PyObject *t_TaxonomyFacetSumValueSource_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TaxonomyFacetSumValueSource::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_TaxonomyFacetSumValueSource_init_(t_TaxonomyFacetSumValueSource *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 4:
              {
                ::org::apache::lucene::facet::taxonomy::TaxonomyReader a0((jobject) NULL);
                ::org::apache::lucene::facet::FacetsConfig a1((jobject) NULL);
                ::org::apache::lucene::facet::FacetsCollector a2((jobject) NULL);
                ::org::apache::lucene::queries::function::ValueSource a3((jobject) NULL);
                TaxonomyFacetSumValueSource object((jobject) NULL);

                if (!parseArgs(args, "kkkk", ::org::apache::lucene::facet::taxonomy::TaxonomyReader::initializeClass, ::org::apache::lucene::facet::FacetsConfig::initializeClass, ::org::apache::lucene::facet::FacetsCollector::initializeClass, ::org::apache::lucene::queries::function::ValueSource::initializeClass, &a0, &a1, &a2, &a3))
                {
                  INT_CALL(object = TaxonomyFacetSumValueSource(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 5:
              {
                ::org::apache::lucene::facet::taxonomy::OrdinalsReader a0((jobject) NULL);
                ::org::apache::lucene::facet::taxonomy::TaxonomyReader a1((jobject) NULL);
                ::org::apache::lucene::facet::FacetsConfig a2((jobject) NULL);
                ::org::apache::lucene::facet::FacetsCollector a3((jobject) NULL);
                ::org::apache::lucene::queries::function::ValueSource a4((jobject) NULL);
                TaxonomyFacetSumValueSource object((jobject) NULL);

                if (!parseArgs(args, "kkkkk", ::org::apache::lucene::facet::taxonomy::OrdinalsReader::initializeClass, ::org::apache::lucene::facet::taxonomy::TaxonomyReader::initializeClass, ::org::apache::lucene::facet::FacetsConfig::initializeClass, ::org::apache::lucene::facet::FacetsCollector::initializeClass, ::org::apache::lucene::queries::function::ValueSource::initializeClass, &a0, &a1, &a2, &a3, &a4))
                {
                  INT_CALL(object = TaxonomyFacetSumValueSource(a0, a1, a2, a3, a4));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/DFRSimilarity.h"
#include "org/apache/lucene/search/similarities/AfterEffect.h"
#include "org/apache/lucene/search/similarities/BasicModel.h"
#include "org/apache/lucene/search/similarities/Normalization.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *DFRSimilarity::class$ = NULL;
          jmethodID *DFRSimilarity::mids$ = NULL;
          bool DFRSimilarity::live$ = false;

          jclass DFRSimilarity::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/DFRSimilarity");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_0c253c94] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/similarities/BasicModel;Lorg/apache/lucene/search/similarities/AfterEffect;Lorg/apache/lucene/search/similarities/Normalization;)V");
              mids$[mid_getAfterEffect_b58cd920] = env->getMethodID(cls, "getAfterEffect", "()Lorg/apache/lucene/search/similarities/AfterEffect;");
              mids$[mid_getBasicModel_05e8921f] = env->getMethodID(cls, "getBasicModel", "()Lorg/apache/lucene/search/similarities/BasicModel;");
              mids$[mid_getNormalization_d2e76e28] = env->getMethodID(cls, "getNormalization", "()Lorg/apache/lucene/search/similarities/Normalization;");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
              mids$[mid_score_63482206] = env->getMethodID(cls, "score", "(Lorg/apache/lucene/search/similarities/BasicStats;FF)F");
              mids$[mid_explain_347d95f8] = env->getMethodID(cls, "explain", "(Lorg/apache/lucene/search/Explanation;Lorg/apache/lucene/search/similarities/BasicStats;IFF)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          DFRSimilarity::DFRSimilarity(const ::org::apache::lucene::search::similarities::BasicModel & a0, const ::org::apache::lucene::search::similarities::AfterEffect & a1, const ::org::apache::lucene::search::similarities::Normalization & a2) : ::org::apache::lucene::search::similarities::SimilarityBase(env->newObject(initializeClass, &mids$, mid_init$_0c253c94, a0.this$, a1.this$, a2.this$)) {}

          ::org::apache::lucene::search::similarities::AfterEffect DFRSimilarity::getAfterEffect() const
          {
            return ::org::apache::lucene::search::similarities::AfterEffect(env->callObjectMethod(this$, mids$[mid_getAfterEffect_b58cd920]));
          }

          ::org::apache::lucene::search::similarities::BasicModel DFRSimilarity::getBasicModel() const
          {
            return ::org::apache::lucene::search::similarities::BasicModel(env->callObjectMethod(this$, mids$[mid_getBasicModel_05e8921f]));
          }

          ::org::apache::lucene::search::similarities::Normalization DFRSimilarity::getNormalization() const
          {
            return ::org::apache::lucene::search::similarities::Normalization(env->callObjectMethod(this$, mids$[mid_getNormalization_d2e76e28]));
          }

          ::java::lang::String DFRSimilarity::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_DFRSimilarity_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DFRSimilarity_instance_(PyTypeObject *type, PyObject *arg);
          static int t_DFRSimilarity_init_(t_DFRSimilarity *self, PyObject *args, PyObject *kwds);
          static PyObject *t_DFRSimilarity_getAfterEffect(t_DFRSimilarity *self);
          static PyObject *t_DFRSimilarity_getBasicModel(t_DFRSimilarity *self);
          static PyObject *t_DFRSimilarity_getNormalization(t_DFRSimilarity *self);
          static PyObject *t_DFRSimilarity_toString(t_DFRSimilarity *self, PyObject *args);
          static PyObject *t_DFRSimilarity_get__afterEffect(t_DFRSimilarity *self, void *data);
          static PyObject *t_DFRSimilarity_get__basicModel(t_DFRSimilarity *self, void *data);
          static PyObject *t_DFRSimilarity_get__normalization(t_DFRSimilarity *self, void *data);
          static PyGetSetDef t_DFRSimilarity__fields_[] = {
            DECLARE_GET_FIELD(t_DFRSimilarity, afterEffect),
            DECLARE_GET_FIELD(t_DFRSimilarity, basicModel),
            DECLARE_GET_FIELD(t_DFRSimilarity, normalization),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_DFRSimilarity__methods_[] = {
            DECLARE_METHOD(t_DFRSimilarity, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DFRSimilarity, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DFRSimilarity, getAfterEffect, METH_NOARGS),
            DECLARE_METHOD(t_DFRSimilarity, getBasicModel, METH_NOARGS),
            DECLARE_METHOD(t_DFRSimilarity, getNormalization, METH_NOARGS),
            DECLARE_METHOD(t_DFRSimilarity, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(DFRSimilarity, t_DFRSimilarity, ::org::apache::lucene::search::similarities::SimilarityBase, DFRSimilarity, t_DFRSimilarity_init_, 0, 0, t_DFRSimilarity__fields_, 0, 0);

          void t_DFRSimilarity::install(PyObject *module)
          {
            installType(&PY_TYPE(DFRSimilarity), module, "DFRSimilarity", 0);
          }

          void t_DFRSimilarity::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(DFRSimilarity).tp_dict, "class_", make_descriptor(DFRSimilarity::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(DFRSimilarity).tp_dict, "wrapfn_", make_descriptor(t_DFRSimilarity::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(DFRSimilarity).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_DFRSimilarity_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, DFRSimilarity::initializeClass, 1)))
              return NULL;
            return t_DFRSimilarity::wrap_Object(DFRSimilarity(((t_DFRSimilarity *) arg)->object.this$));
          }
          static PyObject *t_DFRSimilarity_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, DFRSimilarity::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_DFRSimilarity_init_(t_DFRSimilarity *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::search::similarities::BasicModel a0((jobject) NULL);
            ::org::apache::lucene::search::similarities::AfterEffect a1((jobject) NULL);
            ::org::apache::lucene::search::similarities::Normalization a2((jobject) NULL);
            DFRSimilarity object((jobject) NULL);

            if (!parseArgs(args, "kkk", ::org::apache::lucene::search::similarities::BasicModel::initializeClass, ::org::apache::lucene::search::similarities::AfterEffect::initializeClass, ::org::apache::lucene::search::similarities::Normalization::initializeClass, &a0, &a1, &a2))
            {
              INT_CALL(object = DFRSimilarity(a0, a1, a2));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_DFRSimilarity_getAfterEffect(t_DFRSimilarity *self)
          {
            ::org::apache::lucene::search::similarities::AfterEffect result((jobject) NULL);
            OBJ_CALL(result = self->object.getAfterEffect());
            return ::org::apache::lucene::search::similarities::t_AfterEffect::wrap_Object(result);
          }

          static PyObject *t_DFRSimilarity_getBasicModel(t_DFRSimilarity *self)
          {
            ::org::apache::lucene::search::similarities::BasicModel result((jobject) NULL);
            OBJ_CALL(result = self->object.getBasicModel());
            return ::org::apache::lucene::search::similarities::t_BasicModel::wrap_Object(result);
          }

          static PyObject *t_DFRSimilarity_getNormalization(t_DFRSimilarity *self)
          {
            ::org::apache::lucene::search::similarities::Normalization result((jobject) NULL);
            OBJ_CALL(result = self->object.getNormalization());
            return ::org::apache::lucene::search::similarities::t_Normalization::wrap_Object(result);
          }

          static PyObject *t_DFRSimilarity_toString(t_DFRSimilarity *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(DFRSimilarity), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_DFRSimilarity_get__afterEffect(t_DFRSimilarity *self, void *data)
          {
            ::org::apache::lucene::search::similarities::AfterEffect value((jobject) NULL);
            OBJ_CALL(value = self->object.getAfterEffect());
            return ::org::apache::lucene::search::similarities::t_AfterEffect::wrap_Object(value);
          }

          static PyObject *t_DFRSimilarity_get__basicModel(t_DFRSimilarity *self, void *data)
          {
            ::org::apache::lucene::search::similarities::BasicModel value((jobject) NULL);
            OBJ_CALL(value = self->object.getBasicModel());
            return ::org::apache::lucene::search::similarities::t_BasicModel::wrap_Object(value);
          }

          static PyObject *t_DFRSimilarity_get__normalization(t_DFRSimilarity *self, void *data)
          {
            ::org::apache::lucene::search::similarities::Normalization value((jobject) NULL);
            OBJ_CALL(value = self->object.getNormalization());
            return ::org::apache::lucene::search::similarities::t_Normalization::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/compressing/CompressionMode.h"
#include "org/apache/lucene/codecs/compressing/Decompressor.h"
#include "org/apache/lucene/codecs/compressing/Compressor.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace compressing {

          ::java::lang::Class *CompressionMode::class$ = NULL;
          jmethodID *CompressionMode::mids$ = NULL;
          bool CompressionMode::live$ = false;
          CompressionMode *CompressionMode::FAST = NULL;
          CompressionMode *CompressionMode::FAST_DECOMPRESSION = NULL;
          CompressionMode *CompressionMode::HIGH_COMPRESSION = NULL;

          jclass CompressionMode::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/compressing/CompressionMode");

              mids$ = new jmethodID[max_mid];
              mids$[mid_newCompressor_eb04ef38] = env->getMethodID(cls, "newCompressor", "()Lorg/apache/lucene/codecs/compressing/Compressor;");
              mids$[mid_newDecompressor_7b8f1b1d] = env->getMethodID(cls, "newDecompressor", "()Lorg/apache/lucene/codecs/compressing/Decompressor;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              FAST = new CompressionMode(env->getStaticObjectField(cls, "FAST", "Lorg/apache/lucene/codecs/compressing/CompressionMode;"));
              FAST_DECOMPRESSION = new CompressionMode(env->getStaticObjectField(cls, "FAST_DECOMPRESSION", "Lorg/apache/lucene/codecs/compressing/CompressionMode;"));
              HIGH_COMPRESSION = new CompressionMode(env->getStaticObjectField(cls, "HIGH_COMPRESSION", "Lorg/apache/lucene/codecs/compressing/CompressionMode;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::org::apache::lucene::codecs::compressing::Compressor CompressionMode::newCompressor() const
          {
            return ::org::apache::lucene::codecs::compressing::Compressor(env->callObjectMethod(this$, mids$[mid_newCompressor_eb04ef38]));
          }

          ::org::apache::lucene::codecs::compressing::Decompressor CompressionMode::newDecompressor() const
          {
            return ::org::apache::lucene::codecs::compressing::Decompressor(env->callObjectMethod(this$, mids$[mid_newDecompressor_7b8f1b1d]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace compressing {
          static PyObject *t_CompressionMode_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CompressionMode_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CompressionMode_newCompressor(t_CompressionMode *self);
          static PyObject *t_CompressionMode_newDecompressor(t_CompressionMode *self);

          static PyMethodDef t_CompressionMode__methods_[] = {
            DECLARE_METHOD(t_CompressionMode, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CompressionMode, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CompressionMode, newCompressor, METH_NOARGS),
            DECLARE_METHOD(t_CompressionMode, newDecompressor, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CompressionMode, t_CompressionMode, ::java::lang::Object, CompressionMode, abstract_init, 0, 0, 0, 0, 0);

          void t_CompressionMode::install(PyObject *module)
          {
            installType(&PY_TYPE(CompressionMode), module, "CompressionMode", 0);
          }

          void t_CompressionMode::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CompressionMode).tp_dict, "class_", make_descriptor(CompressionMode::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CompressionMode).tp_dict, "wrapfn_", make_descriptor(t_CompressionMode::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CompressionMode).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(CompressionMode::initializeClass);
            PyDict_SetItemString(PY_TYPE(CompressionMode).tp_dict, "FAST", make_descriptor(t_CompressionMode::wrap_Object(*CompressionMode::FAST)));
            PyDict_SetItemString(PY_TYPE(CompressionMode).tp_dict, "FAST_DECOMPRESSION", make_descriptor(t_CompressionMode::wrap_Object(*CompressionMode::FAST_DECOMPRESSION)));
            PyDict_SetItemString(PY_TYPE(CompressionMode).tp_dict, "HIGH_COMPRESSION", make_descriptor(t_CompressionMode::wrap_Object(*CompressionMode::HIGH_COMPRESSION)));
          }

          static PyObject *t_CompressionMode_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CompressionMode::initializeClass, 1)))
              return NULL;
            return t_CompressionMode::wrap_Object(CompressionMode(((t_CompressionMode *) arg)->object.this$));
          }
          static PyObject *t_CompressionMode_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CompressionMode::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_CompressionMode_newCompressor(t_CompressionMode *self)
          {
            ::org::apache::lucene::codecs::compressing::Compressor result((jobject) NULL);
            OBJ_CALL(result = self->object.newCompressor());
            return ::org::apache::lucene::codecs::compressing::t_Compressor::wrap_Object(result);
          }

          static PyObject *t_CompressionMode_newDecompressor(t_CompressionMode *self)
          {
            ::org::apache::lucene::codecs::compressing::Decompressor result((jobject) NULL);
            OBJ_CALL(result = self->object.newDecompressor());
            return ::org::apache::lucene::codecs::compressing::t_Decompressor::wrap_Object(result);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/vectorhighlight/SimpleBoundaryScanner.h"
#include "java/lang/StringBuilder.h"
#include "java/util/Set.h"
#include "org/apache/lucene/search/vectorhighlight/BoundaryScanner.h"
#include "java/lang/Character.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {

          ::java::lang::Class *SimpleBoundaryScanner::class$ = NULL;
          jmethodID *SimpleBoundaryScanner::mids$ = NULL;
          bool SimpleBoundaryScanner::live$ = false;
          JArray< ::java::lang::Character > *SimpleBoundaryScanner::DEFAULT_BOUNDARY_CHARS = NULL;
          jint SimpleBoundaryScanner::DEFAULT_MAX_SCAN = (jint) 0;

          jclass SimpleBoundaryScanner::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/vectorhighlight/SimpleBoundaryScanner");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_a03f060b] = env->getMethodID(cls, "<init>", "([Ljava/lang/Character;)V");
              mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
              mids$[mid_init$_4d893084] = env->getMethodID(cls, "<init>", "(ILjava/util/Set;)V");
              mids$[mid_init$_ac2fcfe5] = env->getMethodID(cls, "<init>", "(I[Ljava/lang/Character;)V");
              mids$[mid_findEndOffset_f3d950f1] = env->getMethodID(cls, "findEndOffset", "(Ljava/lang/StringBuilder;I)I");
              mids$[mid_findStartOffset_f3d950f1] = env->getMethodID(cls, "findStartOffset", "(Ljava/lang/StringBuilder;I)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_BOUNDARY_CHARS = new JArray< ::java::lang::Character >(env->getStaticObjectField(cls, "DEFAULT_BOUNDARY_CHARS", "[Ljava/lang/Character;"));
              DEFAULT_MAX_SCAN = env->getStaticIntField(cls, "DEFAULT_MAX_SCAN");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SimpleBoundaryScanner::SimpleBoundaryScanner() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          SimpleBoundaryScanner::SimpleBoundaryScanner(const JArray< ::java::lang::Character > & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_a03f060b, a0.this$)) {}

          SimpleBoundaryScanner::SimpleBoundaryScanner(jint a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

          SimpleBoundaryScanner::SimpleBoundaryScanner(jint a0, const ::java::util::Set & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_4d893084, a0, a1.this$)) {}

          SimpleBoundaryScanner::SimpleBoundaryScanner(jint a0, const JArray< ::java::lang::Character > & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_ac2fcfe5, a0, a1.this$)) {}

          jint SimpleBoundaryScanner::findEndOffset(const ::java::lang::StringBuilder & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_findEndOffset_f3d950f1], a0.this$, a1);
          }

          jint SimpleBoundaryScanner::findStartOffset(const ::java::lang::StringBuilder & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_findStartOffset_f3d950f1], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {
          static PyObject *t_SimpleBoundaryScanner_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SimpleBoundaryScanner_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SimpleBoundaryScanner_init_(t_SimpleBoundaryScanner *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SimpleBoundaryScanner_findEndOffset(t_SimpleBoundaryScanner *self, PyObject *args);
          static PyObject *t_SimpleBoundaryScanner_findStartOffset(t_SimpleBoundaryScanner *self, PyObject *args);

          static PyMethodDef t_SimpleBoundaryScanner__methods_[] = {
            DECLARE_METHOD(t_SimpleBoundaryScanner, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SimpleBoundaryScanner, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SimpleBoundaryScanner, findEndOffset, METH_VARARGS),
            DECLARE_METHOD(t_SimpleBoundaryScanner, findStartOffset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SimpleBoundaryScanner, t_SimpleBoundaryScanner, ::java::lang::Object, SimpleBoundaryScanner, t_SimpleBoundaryScanner_init_, 0, 0, 0, 0, 0);

          void t_SimpleBoundaryScanner::install(PyObject *module)
          {
            installType(&PY_TYPE(SimpleBoundaryScanner), module, "SimpleBoundaryScanner", 0);
          }

          void t_SimpleBoundaryScanner::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SimpleBoundaryScanner).tp_dict, "class_", make_descriptor(SimpleBoundaryScanner::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SimpleBoundaryScanner).tp_dict, "wrapfn_", make_descriptor(t_SimpleBoundaryScanner::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SimpleBoundaryScanner).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(SimpleBoundaryScanner::initializeClass);
            PyDict_SetItemString(PY_TYPE(SimpleBoundaryScanner).tp_dict, "DEFAULT_BOUNDARY_CHARS", make_descriptor(JArray<jobject>(SimpleBoundaryScanner::DEFAULT_BOUNDARY_CHARS->this$).wrap(::java::lang::t_Character::wrap_jobject)));
            PyDict_SetItemString(PY_TYPE(SimpleBoundaryScanner).tp_dict, "DEFAULT_MAX_SCAN", make_descriptor(SimpleBoundaryScanner::DEFAULT_MAX_SCAN));
          }

          static PyObject *t_SimpleBoundaryScanner_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SimpleBoundaryScanner::initializeClass, 1)))
              return NULL;
            return t_SimpleBoundaryScanner::wrap_Object(SimpleBoundaryScanner(((t_SimpleBoundaryScanner *) arg)->object.this$));
          }
          static PyObject *t_SimpleBoundaryScanner_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SimpleBoundaryScanner::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SimpleBoundaryScanner_init_(t_SimpleBoundaryScanner *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                SimpleBoundaryScanner object((jobject) NULL);

                INT_CALL(object = SimpleBoundaryScanner());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                JArray< ::java::lang::Character > a0((jobject) NULL);
                SimpleBoundaryScanner object((jobject) NULL);

                if (!parseArgs(args, "[O", &::java::lang::PY_TYPE(Character), &a0))
                {
                  INT_CALL(object = SimpleBoundaryScanner(a0));
                  self->object = object;
                  break;
                }
              }
              {
                jint a0;
                SimpleBoundaryScanner object((jobject) NULL);

                if (!parseArgs(args, "I", &a0))
                {
                  INT_CALL(object = SimpleBoundaryScanner(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                jint a0;
                ::java::util::Set a1((jobject) NULL);
                PyTypeObject **p1;
                SimpleBoundaryScanner object((jobject) NULL);

                if (!parseArgs(args, "IK", ::java::util::Set::initializeClass, &a0, &a1, &p1, ::java::util::t_Set::parameters_))
                {
                  INT_CALL(object = SimpleBoundaryScanner(a0, a1));
                  self->object = object;
                  break;
                }
              }
              {
                jint a0;
                JArray< ::java::lang::Character > a1((jobject) NULL);
                SimpleBoundaryScanner object((jobject) NULL);

                if (!parseArgs(args, "I[O", &::java::lang::PY_TYPE(Character), &a0, &a1))
                {
                  INT_CALL(object = SimpleBoundaryScanner(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SimpleBoundaryScanner_findEndOffset(t_SimpleBoundaryScanner *self, PyObject *args)
          {
            ::java::lang::StringBuilder a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "kI", ::java::lang::StringBuilder::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.findEndOffset(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "findEndOffset", args);
            return NULL;
          }

          static PyObject *t_SimpleBoundaryScanner_findStartOffset(t_SimpleBoundaryScanner *self, PyObject *args)
          {
            ::java::lang::StringBuilder a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "kI", ::java::lang::StringBuilder::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.findStartOffset(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "findStartOffset", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/CachingTokenFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {

        ::java::lang::Class *CachingTokenFilter::class$ = NULL;
        jmethodID *CachingTokenFilter::mids$ = NULL;
        bool CachingTokenFilter::live$ = false;

        jclass CachingTokenFilter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/CachingTokenFilter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
            mids$[mid_end_54c6a166] = env->getMethodID(cls, "end", "()V");
            mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
            mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        CachingTokenFilter::CachingTokenFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

        void CachingTokenFilter::end() const
        {
          env->callVoidMethod(this$, mids$[mid_end_54c6a166]);
        }

        jboolean CachingTokenFilter::incrementToken() const
        {
          return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
        }

        void CachingTokenFilter::reset() const
        {
          env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        static PyObject *t_CachingTokenFilter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CachingTokenFilter_instance_(PyTypeObject *type, PyObject *arg);
        static int t_CachingTokenFilter_init_(t_CachingTokenFilter *self, PyObject *args, PyObject *kwds);
        static PyObject *t_CachingTokenFilter_end(t_CachingTokenFilter *self, PyObject *args);
        static PyObject *t_CachingTokenFilter_incrementToken(t_CachingTokenFilter *self, PyObject *args);
        static PyObject *t_CachingTokenFilter_reset(t_CachingTokenFilter *self, PyObject *args);

        static PyMethodDef t_CachingTokenFilter__methods_[] = {
          DECLARE_METHOD(t_CachingTokenFilter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CachingTokenFilter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CachingTokenFilter, end, METH_VARARGS),
          DECLARE_METHOD(t_CachingTokenFilter, incrementToken, METH_VARARGS),
          DECLARE_METHOD(t_CachingTokenFilter, reset, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(CachingTokenFilter, t_CachingTokenFilter, ::org::apache::lucene::analysis::TokenFilter, CachingTokenFilter, t_CachingTokenFilter_init_, 0, 0, 0, 0, 0);

        void t_CachingTokenFilter::install(PyObject *module)
        {
          installType(&PY_TYPE(CachingTokenFilter), module, "CachingTokenFilter", 0);
        }

        void t_CachingTokenFilter::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(CachingTokenFilter).tp_dict, "class_", make_descriptor(CachingTokenFilter::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(CachingTokenFilter).tp_dict, "wrapfn_", make_descriptor(t_CachingTokenFilter::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(CachingTokenFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_CachingTokenFilter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CachingTokenFilter::initializeClass, 1)))
            return NULL;
          return t_CachingTokenFilter::wrap_Object(CachingTokenFilter(((t_CachingTokenFilter *) arg)->object.this$));
        }
        static PyObject *t_CachingTokenFilter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CachingTokenFilter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_CachingTokenFilter_init_(t_CachingTokenFilter *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
          CachingTokenFilter object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
          {
            INT_CALL(object = CachingTokenFilter(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_CachingTokenFilter_end(t_CachingTokenFilter *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.end());
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(CachingTokenFilter), (PyObject *) self, "end", args, 2);
        }

        static PyObject *t_CachingTokenFilter_incrementToken(t_CachingTokenFilter *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.incrementToken());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(CachingTokenFilter), (PyObject *) self, "incrementToken", args, 2);
        }

        static PyObject *t_CachingTokenFilter_reset(t_CachingTokenFilter *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.reset());
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(CachingTokenFilter), (PyObject *) self, "reset", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/MatchAllDocsQuery.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "java/lang/Class.h"
#include "java/util/Set.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/index/Term.h"
#include "org/apache/lucene/search/Weight.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *MatchAllDocsQuery::class$ = NULL;
        jmethodID *MatchAllDocsQuery::mids$ = NULL;
        bool MatchAllDocsQuery::live$ = false;

        jclass MatchAllDocsQuery::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/MatchAllDocsQuery");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_createWeight_367763cb] = env->getMethodID(cls, "createWeight", "(Lorg/apache/lucene/search/IndexSearcher;)Lorg/apache/lucene/search/Weight;");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_extractTerms_fb4f2b26] = env->getMethodID(cls, "extractTerms", "(Ljava/util/Set;)V");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_toString_97a5258f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        MatchAllDocsQuery::MatchAllDocsQuery() : ::org::apache::lucene::search::Query(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        ::org::apache::lucene::search::Weight MatchAllDocsQuery::createWeight(const ::org::apache::lucene::search::IndexSearcher & a0) const
        {
          return ::org::apache::lucene::search::Weight(env->callObjectMethod(this$, mids$[mid_createWeight_367763cb], a0.this$));
        }

        jboolean MatchAllDocsQuery::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        void MatchAllDocsQuery::extractTerms(const ::java::util::Set & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_extractTerms_fb4f2b26], a0.this$);
        }

        jint MatchAllDocsQuery::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        ::java::lang::String MatchAllDocsQuery::toString(const ::java::lang::String & a0) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_97a5258f], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_MatchAllDocsQuery_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MatchAllDocsQuery_instance_(PyTypeObject *type, PyObject *arg);
        static int t_MatchAllDocsQuery_init_(t_MatchAllDocsQuery *self, PyObject *args, PyObject *kwds);
        static PyObject *t_MatchAllDocsQuery_createWeight(t_MatchAllDocsQuery *self, PyObject *args);
        static PyObject *t_MatchAllDocsQuery_equals(t_MatchAllDocsQuery *self, PyObject *args);
        static PyObject *t_MatchAllDocsQuery_extractTerms(t_MatchAllDocsQuery *self, PyObject *args);
        static PyObject *t_MatchAllDocsQuery_hashCode(t_MatchAllDocsQuery *self, PyObject *args);
        static PyObject *t_MatchAllDocsQuery_toString(t_MatchAllDocsQuery *self, PyObject *args);

        static PyMethodDef t_MatchAllDocsQuery__methods_[] = {
          DECLARE_METHOD(t_MatchAllDocsQuery, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MatchAllDocsQuery, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MatchAllDocsQuery, createWeight, METH_VARARGS),
          DECLARE_METHOD(t_MatchAllDocsQuery, equals, METH_VARARGS),
          DECLARE_METHOD(t_MatchAllDocsQuery, extractTerms, METH_VARARGS),
          DECLARE_METHOD(t_MatchAllDocsQuery, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_MatchAllDocsQuery, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MatchAllDocsQuery, t_MatchAllDocsQuery, ::org::apache::lucene::search::Query, MatchAllDocsQuery, t_MatchAllDocsQuery_init_, 0, 0, 0, 0, 0);

        void t_MatchAllDocsQuery::install(PyObject *module)
        {
          installType(&PY_TYPE(MatchAllDocsQuery), module, "MatchAllDocsQuery", 0);
        }

        void t_MatchAllDocsQuery::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MatchAllDocsQuery).tp_dict, "class_", make_descriptor(MatchAllDocsQuery::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MatchAllDocsQuery).tp_dict, "wrapfn_", make_descriptor(t_MatchAllDocsQuery::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MatchAllDocsQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MatchAllDocsQuery_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MatchAllDocsQuery::initializeClass, 1)))
            return NULL;
          return t_MatchAllDocsQuery::wrap_Object(MatchAllDocsQuery(((t_MatchAllDocsQuery *) arg)->object.this$));
        }
        static PyObject *t_MatchAllDocsQuery_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MatchAllDocsQuery::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_MatchAllDocsQuery_init_(t_MatchAllDocsQuery *self, PyObject *args, PyObject *kwds)
        {
          MatchAllDocsQuery object((jobject) NULL);

          INT_CALL(object = MatchAllDocsQuery());
          self->object = object;

          return 0;
        }

        static PyObject *t_MatchAllDocsQuery_createWeight(t_MatchAllDocsQuery *self, PyObject *args)
        {
          ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
          ::org::apache::lucene::search::Weight result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.createWeight(a0));
            return ::org::apache::lucene::search::t_Weight::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(MatchAllDocsQuery), (PyObject *) self, "createWeight", args, 2);
        }

        static PyObject *t_MatchAllDocsQuery_equals(t_MatchAllDocsQuery *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(MatchAllDocsQuery), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_MatchAllDocsQuery_extractTerms(t_MatchAllDocsQuery *self, PyObject *args)
        {
          ::java::util::Set a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArgs(args, "K", ::java::util::Set::initializeClass, &a0, &p0, ::java::util::t_Set::parameters_))
          {
            OBJ_CALL(self->object.extractTerms(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(MatchAllDocsQuery), (PyObject *) self, "extractTerms", args, 2);
        }

        static PyObject *t_MatchAllDocsQuery_hashCode(t_MatchAllDocsQuery *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(MatchAllDocsQuery), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_MatchAllDocsQuery_toString(t_MatchAllDocsQuery *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.toString(a0));
            return j2p(result);
          }

          return callSuper(&PY_TYPE(MatchAllDocsQuery), (PyObject *) self, "toString", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spell/HighFrequencyDictionary.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/spell/Dictionary.h"
#include "org/apache/lucene/search/suggest/InputIterator.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {

          ::java::lang::Class *HighFrequencyDictionary::class$ = NULL;
          jmethodID *HighFrequencyDictionary::mids$ = NULL;
          bool HighFrequencyDictionary::live$ = false;

          jclass HighFrequencyDictionary::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spell/HighFrequencyDictionary");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_7d517188] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/IndexReader;Ljava/lang/String;F)V");
              mids$[mid_getEntryIterator_23dc46b1] = env->getMethodID(cls, "getEntryIterator", "()Lorg/apache/lucene/search/suggest/InputIterator;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          HighFrequencyDictionary::HighFrequencyDictionary(const ::org::apache::lucene::index::IndexReader & a0, const ::java::lang::String & a1, jfloat a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_7d517188, a0.this$, a1.this$, a2)) {}

          ::org::apache::lucene::search::suggest::InputIterator HighFrequencyDictionary::getEntryIterator() const
          {
            return ::org::apache::lucene::search::suggest::InputIterator(env->callObjectMethod(this$, mids$[mid_getEntryIterator_23dc46b1]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {
          static PyObject *t_HighFrequencyDictionary_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_HighFrequencyDictionary_instance_(PyTypeObject *type, PyObject *arg);
          static int t_HighFrequencyDictionary_init_(t_HighFrequencyDictionary *self, PyObject *args, PyObject *kwds);
          static PyObject *t_HighFrequencyDictionary_getEntryIterator(t_HighFrequencyDictionary *self);
          static PyObject *t_HighFrequencyDictionary_get__entryIterator(t_HighFrequencyDictionary *self, void *data);
          static PyGetSetDef t_HighFrequencyDictionary__fields_[] = {
            DECLARE_GET_FIELD(t_HighFrequencyDictionary, entryIterator),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_HighFrequencyDictionary__methods_[] = {
            DECLARE_METHOD(t_HighFrequencyDictionary, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HighFrequencyDictionary, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HighFrequencyDictionary, getEntryIterator, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(HighFrequencyDictionary, t_HighFrequencyDictionary, ::java::lang::Object, HighFrequencyDictionary, t_HighFrequencyDictionary_init_, 0, 0, t_HighFrequencyDictionary__fields_, 0, 0);

          void t_HighFrequencyDictionary::install(PyObject *module)
          {
            installType(&PY_TYPE(HighFrequencyDictionary), module, "HighFrequencyDictionary", 0);
          }

          void t_HighFrequencyDictionary::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(HighFrequencyDictionary).tp_dict, "class_", make_descriptor(HighFrequencyDictionary::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(HighFrequencyDictionary).tp_dict, "wrapfn_", make_descriptor(t_HighFrequencyDictionary::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(HighFrequencyDictionary).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_HighFrequencyDictionary_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, HighFrequencyDictionary::initializeClass, 1)))
              return NULL;
            return t_HighFrequencyDictionary::wrap_Object(HighFrequencyDictionary(((t_HighFrequencyDictionary *) arg)->object.this$));
          }
          static PyObject *t_HighFrequencyDictionary_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, HighFrequencyDictionary::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_HighFrequencyDictionary_init_(t_HighFrequencyDictionary *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            jfloat a2;
            HighFrequencyDictionary object((jobject) NULL);

            if (!parseArgs(args, "ksF", ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &a1, &a2))
            {
              INT_CALL(object = HighFrequencyDictionary(a0, a1, a2));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_HighFrequencyDictionary_getEntryIterator(t_HighFrequencyDictionary *self)
          {
            ::org::apache::lucene::search::suggest::InputIterator result((jobject) NULL);
            OBJ_CALL(result = self->object.getEntryIterator());
            return ::org::apache::lucene::search::suggest::t_InputIterator::wrap_Object(result);
          }

          static PyObject *t_HighFrequencyDictionary_get__entryIterator(t_HighFrequencyDictionary *self, void *data)
          {
            ::org::apache::lucene::search::suggest::InputIterator value((jobject) NULL);
            OBJ_CALL(value = self->object.getEntryIterator());
            return ::org::apache::lucene::search::suggest::t_InputIterator::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/TokenizedPhraseQueryNode.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/FieldableNode.h"
#include "java/lang/Class.h"
#include "java/lang/CharSequence.h"
#include "org/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax.h"
#include "java/lang/CloneNotSupportedException.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {

              ::java::lang::Class *TokenizedPhraseQueryNode::class$ = NULL;
              jmethodID *TokenizedPhraseQueryNode::mids$ = NULL;
              bool TokenizedPhraseQueryNode::live$ = false;

              jclass TokenizedPhraseQueryNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/nodes/TokenizedPhraseQueryNode");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_cloneTree_b387c5e6] = env->getMethodID(cls, "cloneTree", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_getField_e0adba2f] = env->getMethodID(cls, "getField", "()Ljava/lang/CharSequence;");
                  mids$[mid_setField_a8afc64a] = env->getMethodID(cls, "setField", "(Ljava/lang/CharSequence;)V");
                  mids$[mid_toQueryString_99b8dfe1] = env->getMethodID(cls, "toQueryString", "(Lorg/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax;)Ljava/lang/CharSequence;");
                  mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              TokenizedPhraseQueryNode::TokenizedPhraseQueryNode() : ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNodeImpl(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode TokenizedPhraseQueryNode::cloneTree() const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_cloneTree_b387c5e6]));
              }

              ::java::lang::CharSequence TokenizedPhraseQueryNode::getField() const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_getField_e0adba2f]));
              }

              void TokenizedPhraseQueryNode::setField(const ::java::lang::CharSequence & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setField_a8afc64a], a0.this$);
              }

              ::java::lang::CharSequence TokenizedPhraseQueryNode::toQueryString(const ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax & a0) const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_toQueryString_99b8dfe1], a0.this$));
              }

              ::java::lang::String TokenizedPhraseQueryNode::toString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {
              static PyObject *t_TokenizedPhraseQueryNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_TokenizedPhraseQueryNode_instance_(PyTypeObject *type, PyObject *arg);
              static int t_TokenizedPhraseQueryNode_init_(t_TokenizedPhraseQueryNode *self, PyObject *args, PyObject *kwds);
              static PyObject *t_TokenizedPhraseQueryNode_cloneTree(t_TokenizedPhraseQueryNode *self, PyObject *args);
              static PyObject *t_TokenizedPhraseQueryNode_getField(t_TokenizedPhraseQueryNode *self);
              static PyObject *t_TokenizedPhraseQueryNode_setField(t_TokenizedPhraseQueryNode *self, PyObject *arg);
              static PyObject *t_TokenizedPhraseQueryNode_toQueryString(t_TokenizedPhraseQueryNode *self, PyObject *args);
              static PyObject *t_TokenizedPhraseQueryNode_toString(t_TokenizedPhraseQueryNode *self, PyObject *args);
              static PyObject *t_TokenizedPhraseQueryNode_get__field(t_TokenizedPhraseQueryNode *self, void *data);
              static int t_TokenizedPhraseQueryNode_set__field(t_TokenizedPhraseQueryNode *self, PyObject *arg, void *data);
              static PyGetSetDef t_TokenizedPhraseQueryNode__fields_[] = {
                DECLARE_GETSET_FIELD(t_TokenizedPhraseQueryNode, field),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_TokenizedPhraseQueryNode__methods_[] = {
                DECLARE_METHOD(t_TokenizedPhraseQueryNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_TokenizedPhraseQueryNode, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_TokenizedPhraseQueryNode, cloneTree, METH_VARARGS),
                DECLARE_METHOD(t_TokenizedPhraseQueryNode, getField, METH_NOARGS),
                DECLARE_METHOD(t_TokenizedPhraseQueryNode, setField, METH_O),
                DECLARE_METHOD(t_TokenizedPhraseQueryNode, toQueryString, METH_VARARGS),
                DECLARE_METHOD(t_TokenizedPhraseQueryNode, toString, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(TokenizedPhraseQueryNode, t_TokenizedPhraseQueryNode, ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNodeImpl, TokenizedPhraseQueryNode, t_TokenizedPhraseQueryNode_init_, 0, 0, t_TokenizedPhraseQueryNode__fields_, 0, 0);

              void t_TokenizedPhraseQueryNode::install(PyObject *module)
              {
                installType(&PY_TYPE(TokenizedPhraseQueryNode), module, "TokenizedPhraseQueryNode", 0);
              }

              void t_TokenizedPhraseQueryNode::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(TokenizedPhraseQueryNode).tp_dict, "class_", make_descriptor(TokenizedPhraseQueryNode::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(TokenizedPhraseQueryNode).tp_dict, "wrapfn_", make_descriptor(t_TokenizedPhraseQueryNode::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(TokenizedPhraseQueryNode).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_TokenizedPhraseQueryNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, TokenizedPhraseQueryNode::initializeClass, 1)))
                  return NULL;
                return t_TokenizedPhraseQueryNode::wrap_Object(TokenizedPhraseQueryNode(((t_TokenizedPhraseQueryNode *) arg)->object.this$));
              }
              static PyObject *t_TokenizedPhraseQueryNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, TokenizedPhraseQueryNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_TokenizedPhraseQueryNode_init_(t_TokenizedPhraseQueryNode *self, PyObject *args, PyObject *kwds)
              {
                TokenizedPhraseQueryNode object((jobject) NULL);

                INT_CALL(object = TokenizedPhraseQueryNode());
                self->object = object;

                return 0;
              }

              static PyObject *t_TokenizedPhraseQueryNode_cloneTree(t_TokenizedPhraseQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.cloneTree());
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(TokenizedPhraseQueryNode), (PyObject *) self, "cloneTree", args, 2);
              }

              static PyObject *t_TokenizedPhraseQueryNode_getField(t_TokenizedPhraseQueryNode *self)
              {
                ::java::lang::CharSequence result((jobject) NULL);
                OBJ_CALL(result = self->object.getField());
                return ::java::lang::t_CharSequence::wrap_Object(result);
              }

              static PyObject *t_TokenizedPhraseQueryNode_setField(t_TokenizedPhraseQueryNode *self, PyObject *arg)
              {
                ::java::lang::CharSequence a0((jobject) NULL);

                if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
                {
                  OBJ_CALL(self->object.setField(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setField", arg);
                return NULL;
              }

              static PyObject *t_TokenizedPhraseQueryNode_toQueryString(t_TokenizedPhraseQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax a0((jobject) NULL);
                ::java::lang::CharSequence result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.toQueryString(a0));
                  return ::java::lang::t_CharSequence::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(TokenizedPhraseQueryNode), (PyObject *) self, "toQueryString", args, 2);
              }

              static PyObject *t_TokenizedPhraseQueryNode_toString(t_TokenizedPhraseQueryNode *self, PyObject *args)
              {
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.toString());
                  return j2p(result);
                }

                return callSuper(&PY_TYPE(TokenizedPhraseQueryNode), (PyObject *) self, "toString", args, 2);
              }

              static PyObject *t_TokenizedPhraseQueryNode_get__field(t_TokenizedPhraseQueryNode *self, void *data)
              {
                ::java::lang::CharSequence value((jobject) NULL);
                OBJ_CALL(value = self->object.getField());
                return ::java::lang::t_CharSequence::wrap_Object(value);
              }
              static int t_TokenizedPhraseQueryNode_set__field(t_TokenizedPhraseQueryNode *self, PyObject *arg, void *data)
              {
                {
                  ::java::lang::CharSequence value((jobject) NULL);
                  if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &value))
                  {
                    INT_CALL(self->object.setField(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "field", arg);
                return -1;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/TaxonomyFacetSumValueSource$ScoreValueSource.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {

          ::java::lang::Class *TaxonomyFacetSumValueSource$ScoreValueSource::class$ = NULL;
          jmethodID *TaxonomyFacetSumValueSource$ScoreValueSource::mids$ = NULL;
          bool TaxonomyFacetSumValueSource$ScoreValueSource::live$ = false;

          jclass TaxonomyFacetSumValueSource$ScoreValueSource::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/TaxonomyFacetSumValueSource$ScoreValueSource");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_description_14c7b5c5] = env->getMethodID(cls, "description", "()Ljava/lang/String;");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_getValues_4c566485] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/queries/function/FunctionValues;");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TaxonomyFacetSumValueSource$ScoreValueSource::TaxonomyFacetSumValueSource$ScoreValueSource() : ::org::apache::lucene::queries::function::ValueSource(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::java::lang::String TaxonomyFacetSumValueSource$ScoreValueSource::description() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_description_14c7b5c5]));
          }

          jboolean TaxonomyFacetSumValueSource$ScoreValueSource::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          ::org::apache::lucene::queries::function::FunctionValues TaxonomyFacetSumValueSource$ScoreValueSource::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1) const
          {
            return ::org::apache::lucene::queries::function::FunctionValues(env->callObjectMethod(this$, mids$[mid_getValues_4c566485], a0.this$, a1.this$));
          }

          jint TaxonomyFacetSumValueSource$ScoreValueSource::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          static PyObject *t_TaxonomyFacetSumValueSource$ScoreValueSource_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TaxonomyFacetSumValueSource$ScoreValueSource_instance_(PyTypeObject *type, PyObject *arg);
          static int t_TaxonomyFacetSumValueSource$ScoreValueSource_init_(t_TaxonomyFacetSumValueSource$ScoreValueSource *self, PyObject *args, PyObject *kwds);
          static PyObject *t_TaxonomyFacetSumValueSource$ScoreValueSource_description(t_TaxonomyFacetSumValueSource$ScoreValueSource *self, PyObject *args);
          static PyObject *t_TaxonomyFacetSumValueSource$ScoreValueSource_equals(t_TaxonomyFacetSumValueSource$ScoreValueSource *self, PyObject *args);
          static PyObject *t_TaxonomyFacetSumValueSource$ScoreValueSource_getValues(t_TaxonomyFacetSumValueSource$ScoreValueSource *self, PyObject *args);
          static PyObject *t_TaxonomyFacetSumValueSource$ScoreValueSource_hashCode(t_TaxonomyFacetSumValueSource$ScoreValueSource *self, PyObject *args);

          static PyMethodDef t_TaxonomyFacetSumValueSource$ScoreValueSource__methods_[] = {
            DECLARE_METHOD(t_TaxonomyFacetSumValueSource$ScoreValueSource, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TaxonomyFacetSumValueSource$ScoreValueSource, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TaxonomyFacetSumValueSource$ScoreValueSource, description, METH_VARARGS),
            DECLARE_METHOD(t_TaxonomyFacetSumValueSource$ScoreValueSource, equals, METH_VARARGS),
            DECLARE_METHOD(t_TaxonomyFacetSumValueSource$ScoreValueSource, getValues, METH_VARARGS),
            DECLARE_METHOD(t_TaxonomyFacetSumValueSource$ScoreValueSource, hashCode, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(TaxonomyFacetSumValueSource$ScoreValueSource, t_TaxonomyFacetSumValueSource$ScoreValueSource, ::org::apache::lucene::queries::function::ValueSource, TaxonomyFacetSumValueSource$ScoreValueSource, t_TaxonomyFacetSumValueSource$ScoreValueSource_init_, 0, 0, 0, 0, 0);

          void t_TaxonomyFacetSumValueSource$ScoreValueSource::install(PyObject *module)
          {
            installType(&PY_TYPE(TaxonomyFacetSumValueSource$ScoreValueSource), module, "TaxonomyFacetSumValueSource$ScoreValueSource", 0);
          }

          void t_TaxonomyFacetSumValueSource$ScoreValueSource::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(TaxonomyFacetSumValueSource$ScoreValueSource).tp_dict, "class_", make_descriptor(TaxonomyFacetSumValueSource$ScoreValueSource::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(TaxonomyFacetSumValueSource$ScoreValueSource).tp_dict, "wrapfn_", make_descriptor(t_TaxonomyFacetSumValueSource$ScoreValueSource::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(TaxonomyFacetSumValueSource$ScoreValueSource).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TaxonomyFacetSumValueSource$ScoreValueSource_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TaxonomyFacetSumValueSource$ScoreValueSource::initializeClass, 1)))
              return NULL;
            return t_TaxonomyFacetSumValueSource$ScoreValueSource::wrap_Object(TaxonomyFacetSumValueSource$ScoreValueSource(((t_TaxonomyFacetSumValueSource$ScoreValueSource *) arg)->object.this$));
          }
          static PyObject *t_TaxonomyFacetSumValueSource$ScoreValueSource_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TaxonomyFacetSumValueSource$ScoreValueSource::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_TaxonomyFacetSumValueSource$ScoreValueSource_init_(t_TaxonomyFacetSumValueSource$ScoreValueSource *self, PyObject *args, PyObject *kwds)
          {
            TaxonomyFacetSumValueSource$ScoreValueSource object((jobject) NULL);

            INT_CALL(object = TaxonomyFacetSumValueSource$ScoreValueSource());
            self->object = object;

            return 0;
          }

          static PyObject *t_TaxonomyFacetSumValueSource$ScoreValueSource_description(t_TaxonomyFacetSumValueSource$ScoreValueSource *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.description());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(TaxonomyFacetSumValueSource$ScoreValueSource), (PyObject *) self, "description", args, 2);
          }

          static PyObject *t_TaxonomyFacetSumValueSource$ScoreValueSource_equals(t_TaxonomyFacetSumValueSource$ScoreValueSource *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(TaxonomyFacetSumValueSource$ScoreValueSource), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_TaxonomyFacetSumValueSource$ScoreValueSource_getValues(t_TaxonomyFacetSumValueSource$ScoreValueSource *self, PyObject *args)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
            ::org::apache::lucene::queries::function::FunctionValues result((jobject) NULL);

            if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
            {
              OBJ_CALL(result = self->object.getValues(a0, a1));
              return ::org::apache::lucene::queries::function::t_FunctionValues::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(TaxonomyFacetSumValueSource$ScoreValueSource), (PyObject *) self, "getValues", args, 2);
          }

          static PyObject *t_TaxonomyFacetSumValueSource$ScoreValueSource_hashCode(t_TaxonomyFacetSumValueSource$ScoreValueSource *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(TaxonomyFacetSumValueSource$ScoreValueSource), (PyObject *) self, "hashCode", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/QueryWrapperFilter.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/Bits.h"
#include "org/apache/lucene/search/DocIdSet.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Query.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *QueryWrapperFilter::class$ = NULL;
        jmethodID *QueryWrapperFilter::mids$ = NULL;
        bool QueryWrapperFilter::live$ = false;

        jclass QueryWrapperFilter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/QueryWrapperFilter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_6e301113] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Query;)V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_getDocIdSet_ccce0897] = env->getMethodID(cls, "getDocIdSet", "(Lorg/apache/lucene/index/AtomicReaderContext;Lorg/apache/lucene/util/Bits;)Lorg/apache/lucene/search/DocIdSet;");
            mids$[mid_getQuery_97e3851a] = env->getMethodID(cls, "getQuery", "()Lorg/apache/lucene/search/Query;");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        QueryWrapperFilter::QueryWrapperFilter(const ::org::apache::lucene::search::Query & a0) : ::org::apache::lucene::search::Filter(env->newObject(initializeClass, &mids$, mid_init$_6e301113, a0.this$)) {}

        jboolean QueryWrapperFilter::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        ::org::apache::lucene::search::DocIdSet QueryWrapperFilter::getDocIdSet(const ::org::apache::lucene::index::AtomicReaderContext & a0, const ::org::apache::lucene::util::Bits & a1) const
        {
          return ::org::apache::lucene::search::DocIdSet(env->callObjectMethod(this$, mids$[mid_getDocIdSet_ccce0897], a0.this$, a1.this$));
        }

        ::org::apache::lucene::search::Query QueryWrapperFilter::getQuery() const
        {
          return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_getQuery_97e3851a]));
        }

        jint QueryWrapperFilter::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        ::java::lang::String QueryWrapperFilter::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_QueryWrapperFilter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_QueryWrapperFilter_instance_(PyTypeObject *type, PyObject *arg);
        static int t_QueryWrapperFilter_init_(t_QueryWrapperFilter *self, PyObject *args, PyObject *kwds);
        static PyObject *t_QueryWrapperFilter_equals(t_QueryWrapperFilter *self, PyObject *args);
        static PyObject *t_QueryWrapperFilter_getDocIdSet(t_QueryWrapperFilter *self, PyObject *args);
        static PyObject *t_QueryWrapperFilter_getQuery(t_QueryWrapperFilter *self);
        static PyObject *t_QueryWrapperFilter_hashCode(t_QueryWrapperFilter *self, PyObject *args);
        static PyObject *t_QueryWrapperFilter_toString(t_QueryWrapperFilter *self, PyObject *args);
        static PyObject *t_QueryWrapperFilter_get__query(t_QueryWrapperFilter *self, void *data);
        static PyGetSetDef t_QueryWrapperFilter__fields_[] = {
          DECLARE_GET_FIELD(t_QueryWrapperFilter, query),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_QueryWrapperFilter__methods_[] = {
          DECLARE_METHOD(t_QueryWrapperFilter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_QueryWrapperFilter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_QueryWrapperFilter, equals, METH_VARARGS),
          DECLARE_METHOD(t_QueryWrapperFilter, getDocIdSet, METH_VARARGS),
          DECLARE_METHOD(t_QueryWrapperFilter, getQuery, METH_NOARGS),
          DECLARE_METHOD(t_QueryWrapperFilter, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_QueryWrapperFilter, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(QueryWrapperFilter, t_QueryWrapperFilter, ::org::apache::lucene::search::Filter, QueryWrapperFilter, t_QueryWrapperFilter_init_, 0, 0, t_QueryWrapperFilter__fields_, 0, 0);

        void t_QueryWrapperFilter::install(PyObject *module)
        {
          installType(&PY_TYPE(QueryWrapperFilter), module, "QueryWrapperFilter", 0);
        }

        void t_QueryWrapperFilter::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(QueryWrapperFilter).tp_dict, "class_", make_descriptor(QueryWrapperFilter::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(QueryWrapperFilter).tp_dict, "wrapfn_", make_descriptor(t_QueryWrapperFilter::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(QueryWrapperFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_QueryWrapperFilter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, QueryWrapperFilter::initializeClass, 1)))
            return NULL;
          return t_QueryWrapperFilter::wrap_Object(QueryWrapperFilter(((t_QueryWrapperFilter *) arg)->object.this$));
        }
        static PyObject *t_QueryWrapperFilter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, QueryWrapperFilter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_QueryWrapperFilter_init_(t_QueryWrapperFilter *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::search::Query a0((jobject) NULL);
          QueryWrapperFilter object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::search::Query::initializeClass, &a0))
          {
            INT_CALL(object = QueryWrapperFilter(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_QueryWrapperFilter_equals(t_QueryWrapperFilter *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(QueryWrapperFilter), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_QueryWrapperFilter_getDocIdSet(t_QueryWrapperFilter *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
          ::org::apache::lucene::util::Bits a1((jobject) NULL);
          ::org::apache::lucene::search::DocIdSet result((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.getDocIdSet(a0, a1));
            return ::org::apache::lucene::search::t_DocIdSet::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(QueryWrapperFilter), (PyObject *) self, "getDocIdSet", args, 2);
        }

        static PyObject *t_QueryWrapperFilter_getQuery(t_QueryWrapperFilter *self)
        {
          ::org::apache::lucene::search::Query result((jobject) NULL);
          OBJ_CALL(result = self->object.getQuery());
          return ::org::apache::lucene::search::t_Query::wrap_Object(result);
        }

        static PyObject *t_QueryWrapperFilter_hashCode(t_QueryWrapperFilter *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(QueryWrapperFilter), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_QueryWrapperFilter_toString(t_QueryWrapperFilter *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(QueryWrapperFilter), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_QueryWrapperFilter_get__query(t_QueryWrapperFilter *self, void *data)
        {
          ::org::apache::lucene::search::Query value((jobject) NULL);
          OBJ_CALL(value = self->object.getQuery());
          return ::org::apache::lucene::search::t_Query::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spans/TermSpans.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/DocsAndPositionsEnum.h"
#include "java/util/Collection.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/Term.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {

          ::java::lang::Class *TermSpans::class$ = NULL;
          jmethodID *TermSpans::mids$ = NULL;
          bool TermSpans::live$ = false;
          TermSpans *TermSpans::EMPTY_TERM_SPANS = NULL;

          jclass TermSpans::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spans/TermSpans");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_33ebef71] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/DocsAndPositionsEnum;Lorg/apache/lucene/index/Term;)V");
              mids$[mid_cost_54c6a17a] = env->getMethodID(cls, "cost", "()J");
              mids$[mid_doc_54c6a179] = env->getMethodID(cls, "doc", "()I");
              mids$[mid_end_54c6a179] = env->getMethodID(cls, "end", "()I");
              mids$[mid_getPayload_2d2d7de4] = env->getMethodID(cls, "getPayload", "()Ljava/util/Collection;");
              mids$[mid_getPostings_548e5d87] = env->getMethodID(cls, "getPostings", "()Lorg/apache/lucene/index/DocsAndPositionsEnum;");
              mids$[mid_isPayloadAvailable_54c6a16a] = env->getMethodID(cls, "isPayloadAvailable", "()Z");
              mids$[mid_next_54c6a16a] = env->getMethodID(cls, "next", "()Z");
              mids$[mid_skipTo_39c7bd30] = env->getMethodID(cls, "skipTo", "(I)Z");
              mids$[mid_start_54c6a179] = env->getMethodID(cls, "start", "()I");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              EMPTY_TERM_SPANS = new TermSpans(env->getStaticObjectField(cls, "EMPTY_TERM_SPANS", "Lorg/apache/lucene/search/spans/TermSpans;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TermSpans::TermSpans(const ::org::apache::lucene::index::DocsAndPositionsEnum & a0, const ::org::apache::lucene::index::Term & a1) : ::org::apache::lucene::search::spans::Spans(env->newObject(initializeClass, &mids$, mid_init$_33ebef71, a0.this$, a1.this$)) {}

          jlong TermSpans::cost() const
          {
            return env->callLongMethod(this$, mids$[mid_cost_54c6a17a]);
          }

          jint TermSpans::doc() const
          {
            return env->callIntMethod(this$, mids$[mid_doc_54c6a179]);
          }

          jint TermSpans::end() const
          {
            return env->callIntMethod(this$, mids$[mid_end_54c6a179]);
          }

          ::java::util::Collection TermSpans::getPayload() const
          {
            return ::java::util::Collection(env->callObjectMethod(this$, mids$[mid_getPayload_2d2d7de4]));
          }

          ::org::apache::lucene::index::DocsAndPositionsEnum TermSpans::getPostings() const
          {
            return ::org::apache::lucene::index::DocsAndPositionsEnum(env->callObjectMethod(this$, mids$[mid_getPostings_548e5d87]));
          }

          jboolean TermSpans::isPayloadAvailable() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isPayloadAvailable_54c6a16a]);
          }

          jboolean TermSpans::next() const
          {
            return env->callBooleanMethod(this$, mids$[mid_next_54c6a16a]);
          }

          jboolean TermSpans::skipTo(jint a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_skipTo_39c7bd30], a0);
          }

          jint TermSpans::start() const
          {
            return env->callIntMethod(this$, mids$[mid_start_54c6a179]);
          }

          ::java::lang::String TermSpans::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {
          static PyObject *t_TermSpans_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TermSpans_instance_(PyTypeObject *type, PyObject *arg);
          static int t_TermSpans_init_(t_TermSpans *self, PyObject *args, PyObject *kwds);
          static PyObject *t_TermSpans_cost(t_TermSpans *self, PyObject *args);
          static PyObject *t_TermSpans_doc(t_TermSpans *self, PyObject *args);
          static PyObject *t_TermSpans_end(t_TermSpans *self, PyObject *args);
          static PyObject *t_TermSpans_getPayload(t_TermSpans *self, PyObject *args);
          static PyObject *t_TermSpans_getPostings(t_TermSpans *self);
          static PyObject *t_TermSpans_isPayloadAvailable(t_TermSpans *self, PyObject *args);
          static PyObject *t_TermSpans_next(t_TermSpans *self, PyObject *args);
          static PyObject *t_TermSpans_skipTo(t_TermSpans *self, PyObject *args);
          static PyObject *t_TermSpans_start(t_TermSpans *self, PyObject *args);
          static PyObject *t_TermSpans_toString(t_TermSpans *self, PyObject *args);
          static PyObject *t_TermSpans_get__payload(t_TermSpans *self, void *data);
          static PyObject *t_TermSpans_get__payloadAvailable(t_TermSpans *self, void *data);
          static PyObject *t_TermSpans_get__postings(t_TermSpans *self, void *data);
          static PyGetSetDef t_TermSpans__fields_[] = {
            DECLARE_GET_FIELD(t_TermSpans, payload),
            DECLARE_GET_FIELD(t_TermSpans, payloadAvailable),
            DECLARE_GET_FIELD(t_TermSpans, postings),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_TermSpans__methods_[] = {
            DECLARE_METHOD(t_TermSpans, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TermSpans, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TermSpans, cost, METH_VARARGS),
            DECLARE_METHOD(t_TermSpans, doc, METH_VARARGS),
            DECLARE_METHOD(t_TermSpans, end, METH_VARARGS),
            DECLARE_METHOD(t_TermSpans, getPayload, METH_VARARGS),
            DECLARE_METHOD(t_TermSpans, getPostings, METH_NOARGS),
            DECLARE_METHOD(t_TermSpans, isPayloadAvailable, METH_VARARGS),
            DECLARE_METHOD(t_TermSpans, next, METH_VARARGS),
            DECLARE_METHOD(t_TermSpans, skipTo, METH_VARARGS),
            DECLARE_METHOD(t_TermSpans, start, METH_VARARGS),
            DECLARE_METHOD(t_TermSpans, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(TermSpans, t_TermSpans, ::org::apache::lucene::search::spans::Spans, TermSpans, t_TermSpans_init_, 0, 0, t_TermSpans__fields_, 0, 0);

          void t_TermSpans::install(PyObject *module)
          {
            installType(&PY_TYPE(TermSpans), module, "TermSpans", 0);
          }

          void t_TermSpans::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(TermSpans).tp_dict, "class_", make_descriptor(TermSpans::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(TermSpans).tp_dict, "wrapfn_", make_descriptor(t_TermSpans::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(TermSpans).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(TermSpans::initializeClass);
            PyDict_SetItemString(PY_TYPE(TermSpans).tp_dict, "EMPTY_TERM_SPANS", make_descriptor(t_TermSpans::wrap_Object(*TermSpans::EMPTY_TERM_SPANS)));
          }

          static PyObject *t_TermSpans_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TermSpans::initializeClass, 1)))
              return NULL;
            return t_TermSpans::wrap_Object(TermSpans(((t_TermSpans *) arg)->object.this$));
          }
          static PyObject *t_TermSpans_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TermSpans::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_TermSpans_init_(t_TermSpans *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::index::DocsAndPositionsEnum a0((jobject) NULL);
            ::org::apache::lucene::index::Term a1((jobject) NULL);
            TermSpans object((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::index::DocsAndPositionsEnum::initializeClass, ::org::apache::lucene::index::Term::initializeClass, &a0, &a1))
            {
              INT_CALL(object = TermSpans(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_TermSpans_cost(t_TermSpans *self, PyObject *args)
          {
            jlong result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.cost());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(&PY_TYPE(TermSpans), (PyObject *) self, "cost", args, 2);
          }

          static PyObject *t_TermSpans_doc(t_TermSpans *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.doc());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(TermSpans), (PyObject *) self, "doc", args, 2);
          }

          static PyObject *t_TermSpans_end(t_TermSpans *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.end());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(TermSpans), (PyObject *) self, "end", args, 2);
          }

          static PyObject *t_TermSpans_getPayload(t_TermSpans *self, PyObject *args)
          {
            ::java::util::Collection result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getPayload());
              return ::java::util::t_Collection::wrap_Object(result, &::java::lang::PY_TYPE(Object));
            }

            return callSuper(&PY_TYPE(TermSpans), (PyObject *) self, "getPayload", args, 2);
          }

          static PyObject *t_TermSpans_getPostings(t_TermSpans *self)
          {
            ::org::apache::lucene::index::DocsAndPositionsEnum result((jobject) NULL);
            OBJ_CALL(result = self->object.getPostings());
            return ::org::apache::lucene::index::t_DocsAndPositionsEnum::wrap_Object(result);
          }

          static PyObject *t_TermSpans_isPayloadAvailable(t_TermSpans *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.isPayloadAvailable());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(TermSpans), (PyObject *) self, "isPayloadAvailable", args, 2);
          }

          static PyObject *t_TermSpans_next(t_TermSpans *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.next());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(TermSpans), (PyObject *) self, "next", args, 2);
          }

          static PyObject *t_TermSpans_skipTo(t_TermSpans *self, PyObject *args)
          {
            jint a0;
            jboolean result;

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(result = self->object.skipTo(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(TermSpans), (PyObject *) self, "skipTo", args, 2);
          }

          static PyObject *t_TermSpans_start(t_TermSpans *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.start());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(TermSpans), (PyObject *) self, "start", args, 2);
          }

          static PyObject *t_TermSpans_toString(t_TermSpans *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(TermSpans), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_TermSpans_get__payload(t_TermSpans *self, void *data)
          {
            ::java::util::Collection value((jobject) NULL);
            OBJ_CALL(value = self->object.getPayload());
            return ::java::util::t_Collection::wrap_Object(value);
          }

          static PyObject *t_TermSpans_get__payloadAvailable(t_TermSpans *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isPayloadAvailable());
            Py_RETURN_BOOL(value);
          }

          static PyObject *t_TermSpans_get__postings(t_TermSpans *self, void *data)
          {
            ::org::apache::lucene::index::DocsAndPositionsEnum value((jobject) NULL);
            OBJ_CALL(value = self->object.getPostings());
            return ::org::apache::lucene::index::t_DocsAndPositionsEnum::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/it/ItalianLightStemmer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace it {

          ::java::lang::Class *ItalianLightStemmer::class$ = NULL;
          jmethodID *ItalianLightStemmer::mids$ = NULL;
          bool ItalianLightStemmer::live$ = false;

          jclass ItalianLightStemmer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/it/ItalianLightStemmer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_stem_ec6430eb] = env->getMethodID(cls, "stem", "([CI)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ItalianLightStemmer::ItalianLightStemmer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint ItalianLightStemmer::stem(const JArray< jchar > & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_stem_ec6430eb], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace it {
          static PyObject *t_ItalianLightStemmer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ItalianLightStemmer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ItalianLightStemmer_init_(t_ItalianLightStemmer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ItalianLightStemmer_stem(t_ItalianLightStemmer *self, PyObject *args);

          static PyMethodDef t_ItalianLightStemmer__methods_[] = {
            DECLARE_METHOD(t_ItalianLightStemmer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ItalianLightStemmer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ItalianLightStemmer, stem, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ItalianLightStemmer, t_ItalianLightStemmer, ::java::lang::Object, ItalianLightStemmer, t_ItalianLightStemmer_init_, 0, 0, 0, 0, 0);

          void t_ItalianLightStemmer::install(PyObject *module)
          {
            installType(&PY_TYPE(ItalianLightStemmer), module, "ItalianLightStemmer", 0);
          }

          void t_ItalianLightStemmer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ItalianLightStemmer).tp_dict, "class_", make_descriptor(ItalianLightStemmer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ItalianLightStemmer).tp_dict, "wrapfn_", make_descriptor(t_ItalianLightStemmer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ItalianLightStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ItalianLightStemmer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ItalianLightStemmer::initializeClass, 1)))
              return NULL;
            return t_ItalianLightStemmer::wrap_Object(ItalianLightStemmer(((t_ItalianLightStemmer *) arg)->object.this$));
          }
          static PyObject *t_ItalianLightStemmer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ItalianLightStemmer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ItalianLightStemmer_init_(t_ItalianLightStemmer *self, PyObject *args, PyObject *kwds)
          {
            ItalianLightStemmer object((jobject) NULL);

            INT_CALL(object = ItalianLightStemmer());
            self->object = object;

            return 0;
          }

          static PyObject *t_ItalianLightStemmer_stem(t_ItalianLightStemmer *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(result = self->object.stem(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "stem", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/PatternKeywordMarkerFilter.h"
#include "java/util/regex/Pattern.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *PatternKeywordMarkerFilter::class$ = NULL;
          jmethodID *PatternKeywordMarkerFilter::mids$ = NULL;
          bool PatternKeywordMarkerFilter::live$ = false;

          jclass PatternKeywordMarkerFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/PatternKeywordMarkerFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_df7fd280] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;Ljava/util/regex/Pattern;)V");
              mids$[mid_isKeyword_54c6a16a] = env->getMethodID(cls, "isKeyword", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PatternKeywordMarkerFilter::PatternKeywordMarkerFilter(const ::org::apache::lucene::analysis::TokenStream & a0, const ::java::util::regex::Pattern & a1) : ::org::apache::lucene::analysis::miscellaneous::KeywordMarkerFilter(env->newObject(initializeClass, &mids$, mid_init$_df7fd280, a0.this$, a1.this$)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_PatternKeywordMarkerFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PatternKeywordMarkerFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PatternKeywordMarkerFilter_init_(t_PatternKeywordMarkerFilter *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_PatternKeywordMarkerFilter__methods_[] = {
            DECLARE_METHOD(t_PatternKeywordMarkerFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PatternKeywordMarkerFilter, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PatternKeywordMarkerFilter, t_PatternKeywordMarkerFilter, ::org::apache::lucene::analysis::miscellaneous::KeywordMarkerFilter, PatternKeywordMarkerFilter, t_PatternKeywordMarkerFilter_init_, 0, 0, 0, 0, 0);

          void t_PatternKeywordMarkerFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(PatternKeywordMarkerFilter), module, "PatternKeywordMarkerFilter", 0);
          }

          void t_PatternKeywordMarkerFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PatternKeywordMarkerFilter).tp_dict, "class_", make_descriptor(PatternKeywordMarkerFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PatternKeywordMarkerFilter).tp_dict, "wrapfn_", make_descriptor(t_PatternKeywordMarkerFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PatternKeywordMarkerFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PatternKeywordMarkerFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PatternKeywordMarkerFilter::initializeClass, 1)))
              return NULL;
            return t_PatternKeywordMarkerFilter::wrap_Object(PatternKeywordMarkerFilter(((t_PatternKeywordMarkerFilter *) arg)->object.this$));
          }
          static PyObject *t_PatternKeywordMarkerFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PatternKeywordMarkerFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PatternKeywordMarkerFilter_init_(t_PatternKeywordMarkerFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::java::util::regex::Pattern a1((jobject) NULL);
            PatternKeywordMarkerFilter object((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::analysis::TokenStream::initializeClass, ::java::util::regex::Pattern::initializeClass, &a0, &a1))
            {
              INT_CALL(object = PatternKeywordMarkerFilter(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spans/SpanTermQuery.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/index/TermContext.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "java/util/Set.h"
#include "org/apache/lucene/util/Bits.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/index/Term.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/spans/Spans.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {

          ::java::lang::Class *SpanTermQuery::class$ = NULL;
          jmethodID *SpanTermQuery::mids$ = NULL;
          bool SpanTermQuery::live$ = false;

          jclass SpanTermQuery::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spans/SpanTermQuery");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_7eca6a81] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/Term;)V");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_extractTerms_fb4f2b26] = env->getMethodID(cls, "extractTerms", "(Ljava/util/Set;)V");
              mids$[mid_getField_14c7b5c5] = env->getMethodID(cls, "getField", "()Ljava/lang/String;");
              mids$[mid_getSpans_f003cb44] = env->getMethodID(cls, "getSpans", "(Lorg/apache/lucene/index/AtomicReaderContext;Lorg/apache/lucene/util/Bits;Ljava/util/Map;)Lorg/apache/lucene/search/spans/Spans;");
              mids$[mid_getTerm_0f71f314] = env->getMethodID(cls, "getTerm", "()Lorg/apache/lucene/index/Term;");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_toString_97a5258f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SpanTermQuery::SpanTermQuery(const ::org::apache::lucene::index::Term & a0) : ::org::apache::lucene::search::spans::SpanQuery(env->newObject(initializeClass, &mids$, mid_init$_7eca6a81, a0.this$)) {}

          jboolean SpanTermQuery::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          void SpanTermQuery::extractTerms(const ::java::util::Set & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_extractTerms_fb4f2b26], a0.this$);
          }

          ::java::lang::String SpanTermQuery::getField() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getField_14c7b5c5]));
          }

          ::org::apache::lucene::search::spans::Spans SpanTermQuery::getSpans(const ::org::apache::lucene::index::AtomicReaderContext & a0, const ::org::apache::lucene::util::Bits & a1, const ::java::util::Map & a2) const
          {
            return ::org::apache::lucene::search::spans::Spans(env->callObjectMethod(this$, mids$[mid_getSpans_f003cb44], a0.this$, a1.this$, a2.this$));
          }

          ::org::apache::lucene::index::Term SpanTermQuery::getTerm() const
          {
            return ::org::apache::lucene::index::Term(env->callObjectMethod(this$, mids$[mid_getTerm_0f71f314]));
          }

          jint SpanTermQuery::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          ::java::lang::String SpanTermQuery::toString(const ::java::lang::String & a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_97a5258f], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {
          static PyObject *t_SpanTermQuery_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SpanTermQuery_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SpanTermQuery_init_(t_SpanTermQuery *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SpanTermQuery_equals(t_SpanTermQuery *self, PyObject *args);
          static PyObject *t_SpanTermQuery_extractTerms(t_SpanTermQuery *self, PyObject *args);
          static PyObject *t_SpanTermQuery_getField(t_SpanTermQuery *self, PyObject *args);
          static PyObject *t_SpanTermQuery_getSpans(t_SpanTermQuery *self, PyObject *args);
          static PyObject *t_SpanTermQuery_getTerm(t_SpanTermQuery *self);
          static PyObject *t_SpanTermQuery_hashCode(t_SpanTermQuery *self, PyObject *args);
          static PyObject *t_SpanTermQuery_toString(t_SpanTermQuery *self, PyObject *args);
          static PyObject *t_SpanTermQuery_get__field(t_SpanTermQuery *self, void *data);
          static PyObject *t_SpanTermQuery_get__term(t_SpanTermQuery *self, void *data);
          static PyGetSetDef t_SpanTermQuery__fields_[] = {
            DECLARE_GET_FIELD(t_SpanTermQuery, field),
            DECLARE_GET_FIELD(t_SpanTermQuery, term),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SpanTermQuery__methods_[] = {
            DECLARE_METHOD(t_SpanTermQuery, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanTermQuery, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanTermQuery, equals, METH_VARARGS),
            DECLARE_METHOD(t_SpanTermQuery, extractTerms, METH_VARARGS),
            DECLARE_METHOD(t_SpanTermQuery, getField, METH_VARARGS),
            DECLARE_METHOD(t_SpanTermQuery, getSpans, METH_VARARGS),
            DECLARE_METHOD(t_SpanTermQuery, getTerm, METH_NOARGS),
            DECLARE_METHOD(t_SpanTermQuery, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_SpanTermQuery, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SpanTermQuery, t_SpanTermQuery, ::org::apache::lucene::search::spans::SpanQuery, SpanTermQuery, t_SpanTermQuery_init_, 0, 0, t_SpanTermQuery__fields_, 0, 0);

          void t_SpanTermQuery::install(PyObject *module)
          {
            installType(&PY_TYPE(SpanTermQuery), module, "SpanTermQuery", 0);
          }

          void t_SpanTermQuery::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SpanTermQuery).tp_dict, "class_", make_descriptor(SpanTermQuery::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SpanTermQuery).tp_dict, "wrapfn_", make_descriptor(t_SpanTermQuery::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SpanTermQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SpanTermQuery_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SpanTermQuery::initializeClass, 1)))
              return NULL;
            return t_SpanTermQuery::wrap_Object(SpanTermQuery(((t_SpanTermQuery *) arg)->object.this$));
          }
          static PyObject *t_SpanTermQuery_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SpanTermQuery::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SpanTermQuery_init_(t_SpanTermQuery *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::index::Term a0((jobject) NULL);
            SpanTermQuery object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::Term::initializeClass, &a0))
            {
              INT_CALL(object = SpanTermQuery(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SpanTermQuery_equals(t_SpanTermQuery *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(SpanTermQuery), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_SpanTermQuery_extractTerms(t_SpanTermQuery *self, PyObject *args)
          {
            ::java::util::Set a0((jobject) NULL);
            PyTypeObject **p0;

            if (!parseArgs(args, "K", ::java::util::Set::initializeClass, &a0, &p0, ::java::util::t_Set::parameters_))
            {
              OBJ_CALL(self->object.extractTerms(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(SpanTermQuery), (PyObject *) self, "extractTerms", args, 2);
          }

          static PyObject *t_SpanTermQuery_getField(t_SpanTermQuery *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getField());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(SpanTermQuery), (PyObject *) self, "getField", args, 2);
          }

          static PyObject *t_SpanTermQuery_getSpans(t_SpanTermQuery *self, PyObject *args)
          {
            ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
            ::org::apache::lucene::util::Bits a1((jobject) NULL);
            ::java::util::Map a2((jobject) NULL);
            PyTypeObject **p2;
            ::org::apache::lucene::search::spans::Spans result((jobject) NULL);

            if (!parseArgs(args, "kkK", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, ::java::util::Map::initializeClass, &a0, &a1, &a2, &p2, ::java::util::t_Map::parameters_))
            {
              OBJ_CALL(result = self->object.getSpans(a0, a1, a2));
              return ::org::apache::lucene::search::spans::t_Spans::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(SpanTermQuery), (PyObject *) self, "getSpans", args, 2);
          }

          static PyObject *t_SpanTermQuery_getTerm(t_SpanTermQuery *self)
          {
            ::org::apache::lucene::index::Term result((jobject) NULL);
            OBJ_CALL(result = self->object.getTerm());
            return ::org::apache::lucene::index::t_Term::wrap_Object(result);
          }

          static PyObject *t_SpanTermQuery_hashCode(t_SpanTermQuery *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(SpanTermQuery), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_SpanTermQuery_toString(t_SpanTermQuery *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = self->object.toString(a0));
              return j2p(result);
            }

            return callSuper(&PY_TYPE(SpanTermQuery), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_SpanTermQuery_get__field(t_SpanTermQuery *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getField());
            return j2p(value);
          }

          static PyObject *t_SpanTermQuery_get__term(t_SpanTermQuery *self, void *data)
          {
            ::org::apache::lucene::index::Term value((jobject) NULL);
            OBJ_CALL(value = self->object.getTerm());
            return ::org::apache::lucene::index::t_Term::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/FieldsConsumer.h"
#include "java/io/Closeable.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/MergeState.h"
#include "org/apache/lucene/index/Fields.h"
#include "org/apache/lucene/codecs/TermsConsumer.h"
#include "org/apache/lucene/index/FieldInfo.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {

        ::java::lang::Class *FieldsConsumer::class$ = NULL;
        jmethodID *FieldsConsumer::mids$ = NULL;
        bool FieldsConsumer::live$ = false;

        jclass FieldsConsumer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/FieldsConsumer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_addField_eb6fab90] = env->getMethodID(cls, "addField", "(Lorg/apache/lucene/index/FieldInfo;)Lorg/apache/lucene/codecs/TermsConsumer;");
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_merge_f282c82a] = env->getMethodID(cls, "merge", "(Lorg/apache/lucene/index/MergeState;Lorg/apache/lucene/index/Fields;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::codecs::TermsConsumer FieldsConsumer::addField(const ::org::apache::lucene::index::FieldInfo & a0) const
        {
          return ::org::apache::lucene::codecs::TermsConsumer(env->callObjectMethod(this$, mids$[mid_addField_eb6fab90], a0.this$));
        }

        void FieldsConsumer::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        void FieldsConsumer::merge(const ::org::apache::lucene::index::MergeState & a0, const ::org::apache::lucene::index::Fields & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_merge_f282c82a], a0.this$, a1.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        static PyObject *t_FieldsConsumer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldsConsumer_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldsConsumer_addField(t_FieldsConsumer *self, PyObject *arg);
        static PyObject *t_FieldsConsumer_close(t_FieldsConsumer *self);
        static PyObject *t_FieldsConsumer_merge(t_FieldsConsumer *self, PyObject *args);

        static PyMethodDef t_FieldsConsumer__methods_[] = {
          DECLARE_METHOD(t_FieldsConsumer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldsConsumer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldsConsumer, addField, METH_O),
          DECLARE_METHOD(t_FieldsConsumer, close, METH_NOARGS),
          DECLARE_METHOD(t_FieldsConsumer, merge, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldsConsumer, t_FieldsConsumer, ::java::lang::Object, FieldsConsumer, abstract_init, 0, 0, 0, 0, 0);

        void t_FieldsConsumer::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldsConsumer), module, "FieldsConsumer", 0);
        }

        void t_FieldsConsumer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldsConsumer).tp_dict, "class_", make_descriptor(FieldsConsumer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldsConsumer).tp_dict, "wrapfn_", make_descriptor(t_FieldsConsumer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldsConsumer).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldsConsumer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldsConsumer::initializeClass, 1)))
            return NULL;
          return t_FieldsConsumer::wrap_Object(FieldsConsumer(((t_FieldsConsumer *) arg)->object.this$));
        }
        static PyObject *t_FieldsConsumer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldsConsumer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FieldsConsumer_addField(t_FieldsConsumer *self, PyObject *arg)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          ::org::apache::lucene::codecs::TermsConsumer result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::FieldInfo::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.addField(a0));
            return ::org::apache::lucene::codecs::t_TermsConsumer::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "addField", arg);
          return NULL;
        }

        static PyObject *t_FieldsConsumer_close(t_FieldsConsumer *self)
        {
          OBJ_CALL(self->object.close());
          Py_RETURN_NONE;
        }

        static PyObject *t_FieldsConsumer_merge(t_FieldsConsumer *self, PyObject *args)
        {
          ::org::apache::lucene::index::MergeState a0((jobject) NULL);
          ::org::apache::lucene::index::Fields a1((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::index::MergeState::initializeClass, ::org::apache::lucene::index::Fields::initializeClass, &a0, &a1))
          {
            OBJ_CALL(self->object.merge(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "merge", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/xml/builders/SpanNearBuilder.h"
#include "org/apache/lucene/search/spans/SpanQuery.h"
#include "org/apache/lucene/queryparser/xml/builders/SpanQueryBuilder.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {

            ::java::lang::Class *SpanNearBuilder::class$ = NULL;
            jmethodID *SpanNearBuilder::mids$ = NULL;
            bool SpanNearBuilder::live$ = false;

            jclass SpanNearBuilder::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/xml/builders/SpanNearBuilder");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_d9ca31a9] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/xml/builders/SpanQueryBuilder;)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            SpanNearBuilder::SpanNearBuilder(const ::org::apache::lucene::queryparser::xml::builders::SpanQueryBuilder & a0) : ::org::apache::lucene::queryparser::xml::builders::SpanBuilderBase(env->newObject(initializeClass, &mids$, mid_init$_d9ca31a9, a0.this$)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {
            static PyObject *t_SpanNearBuilder_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_SpanNearBuilder_instance_(PyTypeObject *type, PyObject *arg);
            static int t_SpanNearBuilder_init_(t_SpanNearBuilder *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_SpanNearBuilder__methods_[] = {
              DECLARE_METHOD(t_SpanNearBuilder, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SpanNearBuilder, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(SpanNearBuilder, t_SpanNearBuilder, ::org::apache::lucene::queryparser::xml::builders::SpanBuilderBase, SpanNearBuilder, t_SpanNearBuilder_init_, 0, 0, 0, 0, 0);

            void t_SpanNearBuilder::install(PyObject *module)
            {
              installType(&PY_TYPE(SpanNearBuilder), module, "SpanNearBuilder", 0);
            }

            void t_SpanNearBuilder::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(SpanNearBuilder).tp_dict, "class_", make_descriptor(SpanNearBuilder::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(SpanNearBuilder).tp_dict, "wrapfn_", make_descriptor(t_SpanNearBuilder::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(SpanNearBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_SpanNearBuilder_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, SpanNearBuilder::initializeClass, 1)))
                return NULL;
              return t_SpanNearBuilder::wrap_Object(SpanNearBuilder(((t_SpanNearBuilder *) arg)->object.this$));
            }
            static PyObject *t_SpanNearBuilder_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, SpanNearBuilder::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_SpanNearBuilder_init_(t_SpanNearBuilder *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::queryparser::xml::builders::SpanQueryBuilder a0((jobject) NULL);
              SpanNearBuilder object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::xml::builders::SpanQueryBuilder::initializeClass, &a0))
              {
                INT_CALL(object = SpanNearBuilder(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/vectorhighlight/FieldTermStack$TermInfo.h"
#include "java/lang/String.h"
#include "java/lang/Comparable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {

          ::java::lang::Class *FieldTermStack$TermInfo::class$ = NULL;
          jmethodID *FieldTermStack$TermInfo::mids$ = NULL;
          bool FieldTermStack$TermInfo::live$ = false;

          jclass FieldTermStack$TermInfo::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/vectorhighlight/FieldTermStack$TermInfo");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_649c5657] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;IIIF)V");
              mids$[mid_compareTo_a7ece374] = env->getMethodID(cls, "compareTo", "(Lorg/apache/lucene/search/vectorhighlight/FieldTermStack$TermInfo;)I");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_getEndOffset_54c6a179] = env->getMethodID(cls, "getEndOffset", "()I");
              mids$[mid_getNext_9d9e3d4a] = env->getMethodID(cls, "getNext", "()Lorg/apache/lucene/search/vectorhighlight/FieldTermStack$TermInfo;");
              mids$[mid_getPosition_54c6a179] = env->getMethodID(cls, "getPosition", "()I");
              mids$[mid_getStartOffset_54c6a179] = env->getMethodID(cls, "getStartOffset", "()I");
              mids$[mid_getText_14c7b5c5] = env->getMethodID(cls, "getText", "()Ljava/lang/String;");
              mids$[mid_getWeight_54c6a176] = env->getMethodID(cls, "getWeight", "()F");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FieldTermStack$TermInfo::FieldTermStack$TermInfo(const ::java::lang::String & a0, jint a1, jint a2, jint a3, jfloat a4) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_649c5657, a0.this$, a1, a2, a3, a4)) {}

          jint FieldTermStack$TermInfo::compareTo(const FieldTermStack$TermInfo & a0) const
          {
            return env->callIntMethod(this$, mids$[mid_compareTo_a7ece374], a0.this$);
          }

          jboolean FieldTermStack$TermInfo::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          jint FieldTermStack$TermInfo::getEndOffset() const
          {
            return env->callIntMethod(this$, mids$[mid_getEndOffset_54c6a179]);
          }

          FieldTermStack$TermInfo FieldTermStack$TermInfo::getNext() const
          {
            return FieldTermStack$TermInfo(env->callObjectMethod(this$, mids$[mid_getNext_9d9e3d4a]));
          }

          jint FieldTermStack$TermInfo::getPosition() const
          {
            return env->callIntMethod(this$, mids$[mid_getPosition_54c6a179]);
          }

          jint FieldTermStack$TermInfo::getStartOffset() const
          {
            return env->callIntMethod(this$, mids$[mid_getStartOffset_54c6a179]);
          }

          ::java::lang::String FieldTermStack$TermInfo::getText() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getText_14c7b5c5]));
          }

          jfloat FieldTermStack$TermInfo::getWeight() const
          {
            return env->callFloatMethod(this$, mids$[mid_getWeight_54c6a176]);
          }

          jint FieldTermStack$TermInfo::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          ::java::lang::String FieldTermStack$TermInfo::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {
          static PyObject *t_FieldTermStack$TermInfo_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FieldTermStack$TermInfo_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FieldTermStack$TermInfo_init_(t_FieldTermStack$TermInfo *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FieldTermStack$TermInfo_compareTo(t_FieldTermStack$TermInfo *self, PyObject *arg);
          static PyObject *t_FieldTermStack$TermInfo_equals(t_FieldTermStack$TermInfo *self, PyObject *args);
          static PyObject *t_FieldTermStack$TermInfo_getEndOffset(t_FieldTermStack$TermInfo *self);
          static PyObject *t_FieldTermStack$TermInfo_getNext(t_FieldTermStack$TermInfo *self);
          static PyObject *t_FieldTermStack$TermInfo_getPosition(t_FieldTermStack$TermInfo *self);
          static PyObject *t_FieldTermStack$TermInfo_getStartOffset(t_FieldTermStack$TermInfo *self);
          static PyObject *t_FieldTermStack$TermInfo_getText(t_FieldTermStack$TermInfo *self);
          static PyObject *t_FieldTermStack$TermInfo_getWeight(t_FieldTermStack$TermInfo *self);
          static PyObject *t_FieldTermStack$TermInfo_hashCode(t_FieldTermStack$TermInfo *self, PyObject *args);
          static PyObject *t_FieldTermStack$TermInfo_toString(t_FieldTermStack$TermInfo *self, PyObject *args);
          static PyObject *t_FieldTermStack$TermInfo_get__endOffset(t_FieldTermStack$TermInfo *self, void *data);
          static PyObject *t_FieldTermStack$TermInfo_get__next(t_FieldTermStack$TermInfo *self, void *data);
          static PyObject *t_FieldTermStack$TermInfo_get__position(t_FieldTermStack$TermInfo *self, void *data);
          static PyObject *t_FieldTermStack$TermInfo_get__startOffset(t_FieldTermStack$TermInfo *self, void *data);
          static PyObject *t_FieldTermStack$TermInfo_get__text(t_FieldTermStack$TermInfo *self, void *data);
          static PyObject *t_FieldTermStack$TermInfo_get__weight(t_FieldTermStack$TermInfo *self, void *data);
          static PyGetSetDef t_FieldTermStack$TermInfo__fields_[] = {
            DECLARE_GET_FIELD(t_FieldTermStack$TermInfo, endOffset),
            DECLARE_GET_FIELD(t_FieldTermStack$TermInfo, next),
            DECLARE_GET_FIELD(t_FieldTermStack$TermInfo, position),
            DECLARE_GET_FIELD(t_FieldTermStack$TermInfo, startOffset),
            DECLARE_GET_FIELD(t_FieldTermStack$TermInfo, text),
            DECLARE_GET_FIELD(t_FieldTermStack$TermInfo, weight),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_FieldTermStack$TermInfo__methods_[] = {
            DECLARE_METHOD(t_FieldTermStack$TermInfo, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FieldTermStack$TermInfo, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FieldTermStack$TermInfo, compareTo, METH_O),
            DECLARE_METHOD(t_FieldTermStack$TermInfo, equals, METH_VARARGS),
            DECLARE_METHOD(t_FieldTermStack$TermInfo, getEndOffset, METH_NOARGS),
            DECLARE_METHOD(t_FieldTermStack$TermInfo, getNext, METH_NOARGS),
            DECLARE_METHOD(t_FieldTermStack$TermInfo, getPosition, METH_NOARGS),
            DECLARE_METHOD(t_FieldTermStack$TermInfo, getStartOffset, METH_NOARGS),
            DECLARE_METHOD(t_FieldTermStack$TermInfo, getText, METH_NOARGS),
            DECLARE_METHOD(t_FieldTermStack$TermInfo, getWeight, METH_NOARGS),
            DECLARE_METHOD(t_FieldTermStack$TermInfo, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_FieldTermStack$TermInfo, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FieldTermStack$TermInfo, t_FieldTermStack$TermInfo, ::java::lang::Object, FieldTermStack$TermInfo, t_FieldTermStack$TermInfo_init_, 0, 0, t_FieldTermStack$TermInfo__fields_, 0, 0);

          void t_FieldTermStack$TermInfo::install(PyObject *module)
          {
            installType(&PY_TYPE(FieldTermStack$TermInfo), module, "FieldTermStack$TermInfo", 0);
          }

          void t_FieldTermStack$TermInfo::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FieldTermStack$TermInfo).tp_dict, "class_", make_descriptor(FieldTermStack$TermInfo::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FieldTermStack$TermInfo).tp_dict, "wrapfn_", make_descriptor(t_FieldTermStack$TermInfo::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FieldTermStack$TermInfo).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FieldTermStack$TermInfo_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FieldTermStack$TermInfo::initializeClass, 1)))
              return NULL;
            return t_FieldTermStack$TermInfo::wrap_Object(FieldTermStack$TermInfo(((t_FieldTermStack$TermInfo *) arg)->object.this$));
          }
          static PyObject *t_FieldTermStack$TermInfo_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FieldTermStack$TermInfo::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FieldTermStack$TermInfo_init_(t_FieldTermStack$TermInfo *self, PyObject *args, PyObject *kwds)
          {
            ::java::lang::String a0((jobject) NULL);
            jint a1;
            jint a2;
            jint a3;
            jfloat a4;
            FieldTermStack$TermInfo object((jobject) NULL);

            if (!parseArgs(args, "sIIIF", &a0, &a1, &a2, &a3, &a4))
            {
              INT_CALL(object = FieldTermStack$TermInfo(a0, a1, a2, a3, a4));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_FieldTermStack$TermInfo_compareTo(t_FieldTermStack$TermInfo *self, PyObject *arg)
          {
            FieldTermStack$TermInfo a0((jobject) NULL);
            jint result;

            if (!parseArg(arg, "k", FieldTermStack$TermInfo::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.compareTo(a0));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "compareTo", arg);
            return NULL;
          }

          static PyObject *t_FieldTermStack$TermInfo_equals(t_FieldTermStack$TermInfo *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(FieldTermStack$TermInfo), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_FieldTermStack$TermInfo_getEndOffset(t_FieldTermStack$TermInfo *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getEndOffset());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_FieldTermStack$TermInfo_getNext(t_FieldTermStack$TermInfo *self)
          {
            FieldTermStack$TermInfo result((jobject) NULL);
            OBJ_CALL(result = self->object.getNext());
            return t_FieldTermStack$TermInfo::wrap_Object(result);
          }

          static PyObject *t_FieldTermStack$TermInfo_getPosition(t_FieldTermStack$TermInfo *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getPosition());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_FieldTermStack$TermInfo_getStartOffset(t_FieldTermStack$TermInfo *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getStartOffset());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_FieldTermStack$TermInfo_getText(t_FieldTermStack$TermInfo *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.getText());
            return j2p(result);
          }

          static PyObject *t_FieldTermStack$TermInfo_getWeight(t_FieldTermStack$TermInfo *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getWeight());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_FieldTermStack$TermInfo_hashCode(t_FieldTermStack$TermInfo *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(FieldTermStack$TermInfo), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_FieldTermStack$TermInfo_toString(t_FieldTermStack$TermInfo *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(FieldTermStack$TermInfo), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_FieldTermStack$TermInfo_get__endOffset(t_FieldTermStack$TermInfo *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getEndOffset());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_FieldTermStack$TermInfo_get__next(t_FieldTermStack$TermInfo *self, void *data)
          {
            FieldTermStack$TermInfo value((jobject) NULL);
            OBJ_CALL(value = self->object.getNext());
            return t_FieldTermStack$TermInfo::wrap_Object(value);
          }

          static PyObject *t_FieldTermStack$TermInfo_get__position(t_FieldTermStack$TermInfo *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getPosition());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_FieldTermStack$TermInfo_get__startOffset(t_FieldTermStack$TermInfo *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getStartOffset());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_FieldTermStack$TermInfo_get__text(t_FieldTermStack$TermInfo *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getText());
            return j2p(value);
          }

          static PyObject *t_FieldTermStack$TermInfo_get__weight(t_FieldTermStack$TermInfo *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getWeight());
            return PyFloat_FromDouble((double) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/TaxonomyFacetSumFloatAssociations.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/facet/FacetsCollector.h"
#include "org/apache/lucene/facet/FacetsConfig.h"
#include "org/apache/lucene/facet/taxonomy/TaxonomyReader.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {

          ::java::lang::Class *TaxonomyFacetSumFloatAssociations::class$ = NULL;
          jmethodID *TaxonomyFacetSumFloatAssociations::mids$ = NULL;
          bool TaxonomyFacetSumFloatAssociations::live$ = false;

          jclass TaxonomyFacetSumFloatAssociations::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/TaxonomyFacetSumFloatAssociations");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_33dd1605] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/facet/taxonomy/TaxonomyReader;Lorg/apache/lucene/facet/FacetsConfig;Lorg/apache/lucene/facet/FacetsCollector;)V");
              mids$[mid_init$_9888e06b] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/facet/taxonomy/TaxonomyReader;Lorg/apache/lucene/facet/FacetsConfig;Lorg/apache/lucene/facet/FacetsCollector;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TaxonomyFacetSumFloatAssociations::TaxonomyFacetSumFloatAssociations(const ::org::apache::lucene::facet::taxonomy::TaxonomyReader & a0, const ::org::apache::lucene::facet::FacetsConfig & a1, const ::org::apache::lucene::facet::FacetsCollector & a2) : ::org::apache::lucene::facet::taxonomy::FloatTaxonomyFacets(env->newObject(initializeClass, &mids$, mid_init$_33dd1605, a0.this$, a1.this$, a2.this$)) {}

          TaxonomyFacetSumFloatAssociations::TaxonomyFacetSumFloatAssociations(const ::java::lang::String & a0, const ::org::apache::lucene::facet::taxonomy::TaxonomyReader & a1, const ::org::apache::lucene::facet::FacetsConfig & a2, const ::org::apache::lucene::facet::FacetsCollector & a3) : ::org::apache::lucene::facet::taxonomy::FloatTaxonomyFacets(env->newObject(initializeClass, &mids$, mid_init$_9888e06b, a0.this$, a1.this$, a2.this$, a3.this$)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          static PyObject *t_TaxonomyFacetSumFloatAssociations_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TaxonomyFacetSumFloatAssociations_instance_(PyTypeObject *type, PyObject *arg);
          static int t_TaxonomyFacetSumFloatAssociations_init_(t_TaxonomyFacetSumFloatAssociations *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_TaxonomyFacetSumFloatAssociations__methods_[] = {
            DECLARE_METHOD(t_TaxonomyFacetSumFloatAssociations, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TaxonomyFacetSumFloatAssociations, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(TaxonomyFacetSumFloatAssociations, t_TaxonomyFacetSumFloatAssociations, ::org::apache::lucene::facet::taxonomy::FloatTaxonomyFacets, TaxonomyFacetSumFloatAssociations, t_TaxonomyFacetSumFloatAssociations_init_, 0, 0, 0, 0, 0);

          void t_TaxonomyFacetSumFloatAssociations::install(PyObject *module)
          {
            installType(&PY_TYPE(TaxonomyFacetSumFloatAssociations), module, "TaxonomyFacetSumFloatAssociations", 0);
          }

          void t_TaxonomyFacetSumFloatAssociations::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(TaxonomyFacetSumFloatAssociations).tp_dict, "class_", make_descriptor(TaxonomyFacetSumFloatAssociations::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(TaxonomyFacetSumFloatAssociations).tp_dict, "wrapfn_", make_descriptor(t_TaxonomyFacetSumFloatAssociations::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(TaxonomyFacetSumFloatAssociations).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TaxonomyFacetSumFloatAssociations_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TaxonomyFacetSumFloatAssociations::initializeClass, 1)))
              return NULL;
            return t_TaxonomyFacetSumFloatAssociations::wrap_Object(TaxonomyFacetSumFloatAssociations(((t_TaxonomyFacetSumFloatAssociations *) arg)->object.this$));
          }
          static PyObject *t_TaxonomyFacetSumFloatAssociations_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TaxonomyFacetSumFloatAssociations::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_TaxonomyFacetSumFloatAssociations_init_(t_TaxonomyFacetSumFloatAssociations *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 3:
              {
                ::org::apache::lucene::facet::taxonomy::TaxonomyReader a0((jobject) NULL);
                ::org::apache::lucene::facet::FacetsConfig a1((jobject) NULL);
                ::org::apache::lucene::facet::FacetsCollector a2((jobject) NULL);
                TaxonomyFacetSumFloatAssociations object((jobject) NULL);

                if (!parseArgs(args, "kkk", ::org::apache::lucene::facet::taxonomy::TaxonomyReader::initializeClass, ::org::apache::lucene::facet::FacetsConfig::initializeClass, ::org::apache::lucene::facet::FacetsCollector::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = TaxonomyFacetSumFloatAssociations(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 4:
              {
                ::java::lang::String a0((jobject) NULL);
                ::org::apache::lucene::facet::taxonomy::TaxonomyReader a1((jobject) NULL);
                ::org::apache::lucene::facet::FacetsConfig a2((jobject) NULL);
                ::org::apache::lucene::facet::FacetsCollector a3((jobject) NULL);
                TaxonomyFacetSumFloatAssociations object((jobject) NULL);

                if (!parseArgs(args, "skkk", ::org::apache::lucene::facet::taxonomy::TaxonomyReader::initializeClass, ::org::apache::lucene::facet::FacetsConfig::initializeClass, ::org::apache::lucene::facet::FacetsCollector::initializeClass, &a0, &a1, &a2, &a3))
                {
                  INT_CALL(object = TaxonomyFacetSumFloatAssociations(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/automaton/RegExp.h"
#include "org/apache/lucene/util/automaton/Automaton.h"
#include "java/lang/Class.h"
#include "java/util/Set.h"
#include "java/lang/IllegalArgumentException.h"
#include "org/apache/lucene/util/automaton/AutomatonProvider.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {

          ::java::lang::Class *RegExp::class$ = NULL;
          jmethodID *RegExp::mids$ = NULL;
          bool RegExp::live$ = false;
          jint RegExp::ALL = (jint) 0;
          jint RegExp::ANYSTRING = (jint) 0;
          jint RegExp::AUTOMATON = (jint) 0;
          jint RegExp::COMPLEMENT = (jint) 0;
          jint RegExp::EMPTY = (jint) 0;
          jint RegExp::INTERSECTION = (jint) 0;
          jint RegExp::INTERVAL = (jint) 0;
          jint RegExp::NONE = (jint) 0;

          jclass RegExp::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/automaton/RegExp");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
              mids$[mid_init$_6e53ccc6] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;I)V");
              mids$[mid_getIdentifiers_03e99967] = env->getMethodID(cls, "getIdentifiers", "()Ljava/util/Set;");
              mids$[mid_toAutomaton_9b0d5999] = env->getMethodID(cls, "toAutomaton", "()Lorg/apache/lucene/util/automaton/Automaton;");
              mids$[mid_toAutomaton_5130eb3f] = env->getMethodID(cls, "toAutomaton", "(Ljava/util/Map;)Lorg/apache/lucene/util/automaton/Automaton;");
              mids$[mid_toAutomaton_ab3fd6f0] = env->getMethodID(cls, "toAutomaton", "(Lorg/apache/lucene/util/automaton/AutomatonProvider;)Lorg/apache/lucene/util/automaton/Automaton;");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              ALL = env->getStaticIntField(cls, "ALL");
              ANYSTRING = env->getStaticIntField(cls, "ANYSTRING");
              AUTOMATON = env->getStaticIntField(cls, "AUTOMATON");
              COMPLEMENT = env->getStaticIntField(cls, "COMPLEMENT");
              EMPTY = env->getStaticIntField(cls, "EMPTY");
              INTERSECTION = env->getStaticIntField(cls, "INTERSECTION");
              INTERVAL = env->getStaticIntField(cls, "INTERVAL");
              NONE = env->getStaticIntField(cls, "NONE");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          RegExp::RegExp(const ::java::lang::String & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

          RegExp::RegExp(const ::java::lang::String & a0, jint a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_6e53ccc6, a0.this$, a1)) {}

          ::java::util::Set RegExp::getIdentifiers() const
          {
            return ::java::util::Set(env->callObjectMethod(this$, mids$[mid_getIdentifiers_03e99967]));
          }

          ::org::apache::lucene::util::automaton::Automaton RegExp::toAutomaton() const
          {
            return ::org::apache::lucene::util::automaton::Automaton(env->callObjectMethod(this$, mids$[mid_toAutomaton_9b0d5999]));
          }

          ::org::apache::lucene::util::automaton::Automaton RegExp::toAutomaton(const ::java::util::Map & a0) const
          {
            return ::org::apache::lucene::util::automaton::Automaton(env->callObjectMethod(this$, mids$[mid_toAutomaton_5130eb3f], a0.this$));
          }

          ::org::apache::lucene::util::automaton::Automaton RegExp::toAutomaton(const ::org::apache::lucene::util::automaton::AutomatonProvider & a0) const
          {
            return ::org::apache::lucene::util::automaton::Automaton(env->callObjectMethod(this$, mids$[mid_toAutomaton_ab3fd6f0], a0.this$));
          }

          ::java::lang::String RegExp::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {
          static PyObject *t_RegExp_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_RegExp_instance_(PyTypeObject *type, PyObject *arg);
          static int t_RegExp_init_(t_RegExp *self, PyObject *args, PyObject *kwds);
          static PyObject *t_RegExp_getIdentifiers(t_RegExp *self);
          static PyObject *t_RegExp_toAutomaton(t_RegExp *self, PyObject *args);
          static PyObject *t_RegExp_toString(t_RegExp *self, PyObject *args);
          static PyObject *t_RegExp_get__identifiers(t_RegExp *self, void *data);
          static PyGetSetDef t_RegExp__fields_[] = {
            DECLARE_GET_FIELD(t_RegExp, identifiers),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_RegExp__methods_[] = {
            DECLARE_METHOD(t_RegExp, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_RegExp, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_RegExp, getIdentifiers, METH_NOARGS),
            DECLARE_METHOD(t_RegExp, toAutomaton, METH_VARARGS),
            DECLARE_METHOD(t_RegExp, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(RegExp, t_RegExp, ::java::lang::Object, RegExp, t_RegExp_init_, 0, 0, t_RegExp__fields_, 0, 0);

          void t_RegExp::install(PyObject *module)
          {
            installType(&PY_TYPE(RegExp), module, "RegExp", 0);
          }

          void t_RegExp::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(RegExp).tp_dict, "class_", make_descriptor(RegExp::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(RegExp).tp_dict, "wrapfn_", make_descriptor(t_RegExp::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(RegExp).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(RegExp::initializeClass);
            PyDict_SetItemString(PY_TYPE(RegExp).tp_dict, "ALL", make_descriptor(RegExp::ALL));
            PyDict_SetItemString(PY_TYPE(RegExp).tp_dict, "ANYSTRING", make_descriptor(RegExp::ANYSTRING));
            PyDict_SetItemString(PY_TYPE(RegExp).tp_dict, "AUTOMATON", make_descriptor(RegExp::AUTOMATON));
            PyDict_SetItemString(PY_TYPE(RegExp).tp_dict, "COMPLEMENT", make_descriptor(RegExp::COMPLEMENT));
            PyDict_SetItemString(PY_TYPE(RegExp).tp_dict, "EMPTY", make_descriptor(RegExp::EMPTY));
            PyDict_SetItemString(PY_TYPE(RegExp).tp_dict, "INTERSECTION", make_descriptor(RegExp::INTERSECTION));
            PyDict_SetItemString(PY_TYPE(RegExp).tp_dict, "INTERVAL", make_descriptor(RegExp::INTERVAL));
            PyDict_SetItemString(PY_TYPE(RegExp).tp_dict, "NONE", make_descriptor(RegExp::NONE));
          }

          static PyObject *t_RegExp_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, RegExp::initializeClass, 1)))
              return NULL;
            return t_RegExp::wrap_Object(RegExp(((t_RegExp *) arg)->object.this$));
          }
          static PyObject *t_RegExp_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, RegExp::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_RegExp_init_(t_RegExp *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::java::lang::String a0((jobject) NULL);
                RegExp object((jobject) NULL);

                if (!parseArgs(args, "s", &a0))
                {
                  INT_CALL(object = RegExp(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::java::lang::String a0((jobject) NULL);
                jint a1;
                RegExp object((jobject) NULL);

                if (!parseArgs(args, "sI", &a0, &a1))
                {
                  INT_CALL(object = RegExp(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_RegExp_getIdentifiers(t_RegExp *self)
          {
            ::java::util::Set result((jobject) NULL);
            OBJ_CALL(result = self->object.getIdentifiers());
            return ::java::util::t_Set::wrap_Object(result, &::java::lang::PY_TYPE(String));
          }

          static PyObject *t_RegExp_toAutomaton(t_RegExp *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);
                OBJ_CALL(result = self->object.toAutomaton());
                return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
              }
              break;
             case 1:
              {
                ::java::util::Map a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);

                if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
                {
                  OBJ_CALL(result = self->object.toAutomaton(a0));
                  return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
                }
              }
              {
                ::org::apache::lucene::util::automaton::AutomatonProvider a0((jobject) NULL);
                ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::util::automaton::AutomatonProvider::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.toAutomaton(a0));
                  return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "toAutomaton", args);
            return NULL;
          }

          static PyObject *t_RegExp_toString(t_RegExp *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(RegExp), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_RegExp_get__identifiers(t_RegExp *self, void *data)
          {
            ::java::util::Set value((jobject) NULL);
            OBJ_CALL(value = self->object.getIdentifiers());
            return ::java::util::t_Set::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/compound/DictionaryCompoundWordTokenFilterFactory.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/util/ResourceLoader.h"
#include "org/apache/lucene/analysis/util/ResourceLoaderAware.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace compound {

          ::java::lang::Class *DictionaryCompoundWordTokenFilterFactory::class$ = NULL;
          jmethodID *DictionaryCompoundWordTokenFilterFactory::mids$ = NULL;
          bool DictionaryCompoundWordTokenFilterFactory::live$ = false;

          jclass DictionaryCompoundWordTokenFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/compound/DictionaryCompoundWordTokenFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");
              mids$[mid_inform_d6a4bc97] = env->getMethodID(cls, "inform", "(Lorg/apache/lucene/analysis/util/ResourceLoader;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          DictionaryCompoundWordTokenFilterFactory::DictionaryCompoundWordTokenFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream DictionaryCompoundWordTokenFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }

          void DictionaryCompoundWordTokenFilterFactory::inform(const ::org::apache::lucene::analysis::util::ResourceLoader & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_inform_d6a4bc97], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace compound {
          static PyObject *t_DictionaryCompoundWordTokenFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DictionaryCompoundWordTokenFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_DictionaryCompoundWordTokenFilterFactory_init_(t_DictionaryCompoundWordTokenFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_DictionaryCompoundWordTokenFilterFactory_create(t_DictionaryCompoundWordTokenFilterFactory *self, PyObject *args);
          static PyObject *t_DictionaryCompoundWordTokenFilterFactory_inform(t_DictionaryCompoundWordTokenFilterFactory *self, PyObject *arg);

          static PyMethodDef t_DictionaryCompoundWordTokenFilterFactory__methods_[] = {
            DECLARE_METHOD(t_DictionaryCompoundWordTokenFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DictionaryCompoundWordTokenFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DictionaryCompoundWordTokenFilterFactory, create, METH_VARARGS),
            DECLARE_METHOD(t_DictionaryCompoundWordTokenFilterFactory, inform, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(DictionaryCompoundWordTokenFilterFactory, t_DictionaryCompoundWordTokenFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, DictionaryCompoundWordTokenFilterFactory, t_DictionaryCompoundWordTokenFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_DictionaryCompoundWordTokenFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(DictionaryCompoundWordTokenFilterFactory), module, "DictionaryCompoundWordTokenFilterFactory", 0);
          }

          void t_DictionaryCompoundWordTokenFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(DictionaryCompoundWordTokenFilterFactory).tp_dict, "class_", make_descriptor(DictionaryCompoundWordTokenFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(DictionaryCompoundWordTokenFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_DictionaryCompoundWordTokenFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(DictionaryCompoundWordTokenFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_DictionaryCompoundWordTokenFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, DictionaryCompoundWordTokenFilterFactory::initializeClass, 1)))
              return NULL;
            return t_DictionaryCompoundWordTokenFilterFactory::wrap_Object(DictionaryCompoundWordTokenFilterFactory(((t_DictionaryCompoundWordTokenFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_DictionaryCompoundWordTokenFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, DictionaryCompoundWordTokenFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_DictionaryCompoundWordTokenFilterFactory_init_(t_DictionaryCompoundWordTokenFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            DictionaryCompoundWordTokenFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = DictionaryCompoundWordTokenFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_DictionaryCompoundWordTokenFilterFactory_create(t_DictionaryCompoundWordTokenFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(DictionaryCompoundWordTokenFilterFactory), (PyObject *) self, "create", args, 2);
          }

          static PyObject *t_DictionaryCompoundWordTokenFilterFactory_inform(t_DictionaryCompoundWordTokenFilterFactory *self, PyObject *arg)
          {
            ::org::apache::lucene::analysis::util::ResourceLoader a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::analysis::util::ResourceLoader::initializeClass, &a0))
            {
              OBJ_CALL(self->object.inform(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "inform", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/expressions/js/JavascriptParser$multiplicative_return.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {

          ::java::lang::Class *JavascriptParser$multiplicative_return::class$ = NULL;
          jmethodID *JavascriptParser$multiplicative_return::mids$ = NULL;
          bool JavascriptParser$multiplicative_return::live$ = false;

          jclass JavascriptParser$multiplicative_return::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/expressions/js/JavascriptParser$multiplicative_return");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          JavascriptParser$multiplicative_return::JavascriptParser$multiplicative_return() : ::org::antlr::runtime::ParserRuleReturnScope(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {
          static PyObject *t_JavascriptParser$multiplicative_return_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_JavascriptParser$multiplicative_return_instance_(PyTypeObject *type, PyObject *arg);
          static int t_JavascriptParser$multiplicative_return_init_(t_JavascriptParser$multiplicative_return *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_JavascriptParser$multiplicative_return__methods_[] = {
            DECLARE_METHOD(t_JavascriptParser$multiplicative_return, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_JavascriptParser$multiplicative_return, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(JavascriptParser$multiplicative_return, t_JavascriptParser$multiplicative_return, ::org::antlr::runtime::ParserRuleReturnScope, JavascriptParser$multiplicative_return, t_JavascriptParser$multiplicative_return_init_, 0, 0, 0, 0, 0);

          void t_JavascriptParser$multiplicative_return::install(PyObject *module)
          {
            installType(&PY_TYPE(JavascriptParser$multiplicative_return), module, "JavascriptParser$multiplicative_return", 0);
          }

          void t_JavascriptParser$multiplicative_return::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(JavascriptParser$multiplicative_return).tp_dict, "class_", make_descriptor(JavascriptParser$multiplicative_return::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(JavascriptParser$multiplicative_return).tp_dict, "wrapfn_", make_descriptor(t_JavascriptParser$multiplicative_return::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(JavascriptParser$multiplicative_return).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_JavascriptParser$multiplicative_return_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, JavascriptParser$multiplicative_return::initializeClass, 1)))
              return NULL;
            return t_JavascriptParser$multiplicative_return::wrap_Object(JavascriptParser$multiplicative_return(((t_JavascriptParser$multiplicative_return *) arg)->object.this$));
          }
          static PyObject *t_JavascriptParser$multiplicative_return_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, JavascriptParser$multiplicative_return::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_JavascriptParser$multiplicative_return_init_(t_JavascriptParser$multiplicative_return *self, PyObject *args, PyObject *kwds)
          {
            JavascriptParser$multiplicative_return object((jobject) NULL);

            INT_CALL(object = JavascriptParser$multiplicative_return());
            self->object = object;

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/analyzing/AnalyzingQueryParser.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "java/lang/String.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace analyzing {

          ::java::lang::Class *AnalyzingQueryParser::class$ = NULL;
          jmethodID *AnalyzingQueryParser::mids$ = NULL;
          bool AnalyzingQueryParser::live$ = false;

          jclass AnalyzingQueryParser::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/analyzing/AnalyzingQueryParser");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_d77cc89a] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/analysis/Analyzer;)V");
              mids$[mid_init$_504c192d] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Ljava/lang/String;Lorg/apache/lucene/analysis/Analyzer;)V");
              mids$[mid_analyzeSingleChunk_af6d27e3] = env->getMethodID(cls, "analyzeSingleChunk", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;");
              mids$[mid_getWildcardQuery_38d6e77e] = env->getMethodID(cls, "getWildcardQuery", "(Ljava/lang/String;Ljava/lang/String;)Lorg/apache/lucene/search/Query;");
              mids$[mid_getFuzzyQuery_45995161] = env->getMethodID(cls, "getFuzzyQuery", "(Ljava/lang/String;Ljava/lang/String;F)Lorg/apache/lucene/search/Query;");
              mids$[mid_getPrefixQuery_38d6e77e] = env->getMethodID(cls, "getPrefixQuery", "(Ljava/lang/String;Ljava/lang/String;)Lorg/apache/lucene/search/Query;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          AnalyzingQueryParser::AnalyzingQueryParser(const ::java::lang::String & a0, const ::org::apache::lucene::analysis::Analyzer & a1) : ::org::apache::lucene::queryparser::classic::QueryParser(env->newObject(initializeClass, &mids$, mid_init$_d77cc89a, a0.this$, a1.this$)) {}

          AnalyzingQueryParser::AnalyzingQueryParser(const ::org::apache::lucene::util::Version & a0, const ::java::lang::String & a1, const ::org::apache::lucene::analysis::Analyzer & a2) : ::org::apache::lucene::queryparser::classic::QueryParser(env->newObject(initializeClass, &mids$, mid_init$_504c192d, a0.this$, a1.this$, a2.this$)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace analyzing {
          static PyObject *t_AnalyzingQueryParser_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AnalyzingQueryParser_instance_(PyTypeObject *type, PyObject *arg);
          static int t_AnalyzingQueryParser_init_(t_AnalyzingQueryParser *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_AnalyzingQueryParser__methods_[] = {
            DECLARE_METHOD(t_AnalyzingQueryParser, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AnalyzingQueryParser, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(AnalyzingQueryParser, t_AnalyzingQueryParser, ::org::apache::lucene::queryparser::classic::QueryParser, AnalyzingQueryParser, t_AnalyzingQueryParser_init_, 0, 0, 0, 0, 0);

          void t_AnalyzingQueryParser::install(PyObject *module)
          {
            installType(&PY_TYPE(AnalyzingQueryParser), module, "AnalyzingQueryParser", 0);
          }

          void t_AnalyzingQueryParser::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(AnalyzingQueryParser).tp_dict, "class_", make_descriptor(AnalyzingQueryParser::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(AnalyzingQueryParser).tp_dict, "wrapfn_", make_descriptor(t_AnalyzingQueryParser::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(AnalyzingQueryParser).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_AnalyzingQueryParser_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, AnalyzingQueryParser::initializeClass, 1)))
              return NULL;
            return t_AnalyzingQueryParser::wrap_Object(AnalyzingQueryParser(((t_AnalyzingQueryParser *) arg)->object.this$));
          }
          static PyObject *t_AnalyzingQueryParser_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, AnalyzingQueryParser::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_AnalyzingQueryParser_init_(t_AnalyzingQueryParser *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::java::lang::String a0((jobject) NULL);
                ::org::apache::lucene::analysis::Analyzer a1((jobject) NULL);
                AnalyzingQueryParser object((jobject) NULL);

                if (!parseArgs(args, "sk", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = AnalyzingQueryParser(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                ::org::apache::lucene::analysis::Analyzer a2((jobject) NULL);
                AnalyzingQueryParser object((jobject) NULL);

                if (!parseArgs(args, "ksk", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = AnalyzingQueryParser(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/payloads/PayloadNearQuery$PayloadNearSpanWeight.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/payloads/PayloadNearQuery.h"
#include "org/apache/lucene/util/Bits.h"
#include "org/apache/lucene/search/Scorer.h"
#include "org/apache/lucene/search/Explanation.h"
#include "org/apache/lucene/search/spans/SpanQuery.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace payloads {

          ::java::lang::Class *PayloadNearQuery$PayloadNearSpanWeight::class$ = NULL;
          jmethodID *PayloadNearQuery$PayloadNearSpanWeight::mids$ = NULL;
          bool PayloadNearQuery$PayloadNearSpanWeight::live$ = false;

          jclass PayloadNearQuery$PayloadNearSpanWeight::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/payloads/PayloadNearQuery$PayloadNearSpanWeight");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_a7d11f1c] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/payloads/PayloadNearQuery;Lorg/apache/lucene/search/spans/SpanQuery;Lorg/apache/lucene/search/IndexSearcher;)V");
              mids$[mid_explain_6ad94adc] = env->getMethodID(cls, "explain", "(Lorg/apache/lucene/index/AtomicReaderContext;I)Lorg/apache/lucene/search/Explanation;");
              mids$[mid_scorer_3869ad24] = env->getMethodID(cls, "scorer", "(Lorg/apache/lucene/index/AtomicReaderContext;Lorg/apache/lucene/util/Bits;)Lorg/apache/lucene/search/Scorer;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PayloadNearQuery$PayloadNearSpanWeight::PayloadNearQuery$PayloadNearSpanWeight(const ::org::apache::lucene::search::payloads::PayloadNearQuery & a0, const ::org::apache::lucene::search::spans::SpanQuery & a1, const ::org::apache::lucene::search::IndexSearcher & a2) : ::org::apache::lucene::search::spans::SpanWeight(env->newObject(initializeClass, &mids$, mid_init$_a7d11f1c, a0.this$, a1.this$, a2.this$)) {}

          ::org::apache::lucene::search::Explanation PayloadNearQuery$PayloadNearSpanWeight::explain(const ::org::apache::lucene::index::AtomicReaderContext & a0, jint a1) const
          {
            return ::org::apache::lucene::search::Explanation(env->callObjectMethod(this$, mids$[mid_explain_6ad94adc], a0.this$, a1));
          }

          ::org::apache::lucene::search::Scorer PayloadNearQuery$PayloadNearSpanWeight::scorer(const ::org::apache::lucene::index::AtomicReaderContext & a0, const ::org::apache::lucene::util::Bits & a1) const
          {
            return ::org::apache::lucene::search::Scorer(env->callObjectMethod(this$, mids$[mid_scorer_3869ad24], a0.this$, a1.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace payloads {
          static PyObject *t_PayloadNearQuery$PayloadNearSpanWeight_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PayloadNearQuery$PayloadNearSpanWeight_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PayloadNearQuery$PayloadNearSpanWeight_init_(t_PayloadNearQuery$PayloadNearSpanWeight *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PayloadNearQuery$PayloadNearSpanWeight_explain(t_PayloadNearQuery$PayloadNearSpanWeight *self, PyObject *args);
          static PyObject *t_PayloadNearQuery$PayloadNearSpanWeight_scorer(t_PayloadNearQuery$PayloadNearSpanWeight *self, PyObject *args);

          static PyMethodDef t_PayloadNearQuery$PayloadNearSpanWeight__methods_[] = {
            DECLARE_METHOD(t_PayloadNearQuery$PayloadNearSpanWeight, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PayloadNearQuery$PayloadNearSpanWeight, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PayloadNearQuery$PayloadNearSpanWeight, explain, METH_VARARGS),
            DECLARE_METHOD(t_PayloadNearQuery$PayloadNearSpanWeight, scorer, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PayloadNearQuery$PayloadNearSpanWeight, t_PayloadNearQuery$PayloadNearSpanWeight, ::org::apache::lucene::search::spans::SpanWeight, PayloadNearQuery$PayloadNearSpanWeight, t_PayloadNearQuery$PayloadNearSpanWeight_init_, 0, 0, 0, 0, 0);

          void t_PayloadNearQuery$PayloadNearSpanWeight::install(PyObject *module)
          {
            installType(&PY_TYPE(PayloadNearQuery$PayloadNearSpanWeight), module, "PayloadNearQuery$PayloadNearSpanWeight", 0);
          }

          void t_PayloadNearQuery$PayloadNearSpanWeight::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PayloadNearQuery$PayloadNearSpanWeight).tp_dict, "class_", make_descriptor(PayloadNearQuery$PayloadNearSpanWeight::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PayloadNearQuery$PayloadNearSpanWeight).tp_dict, "wrapfn_", make_descriptor(t_PayloadNearQuery$PayloadNearSpanWeight::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PayloadNearQuery$PayloadNearSpanWeight).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PayloadNearQuery$PayloadNearSpanWeight_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PayloadNearQuery$PayloadNearSpanWeight::initializeClass, 1)))
              return NULL;
            return t_PayloadNearQuery$PayloadNearSpanWeight::wrap_Object(PayloadNearQuery$PayloadNearSpanWeight(((t_PayloadNearQuery$PayloadNearSpanWeight *) arg)->object.this$));
          }
          static PyObject *t_PayloadNearQuery$PayloadNearSpanWeight_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PayloadNearQuery$PayloadNearSpanWeight::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PayloadNearQuery$PayloadNearSpanWeight_init_(t_PayloadNearQuery$PayloadNearSpanWeight *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::search::payloads::PayloadNearQuery a0((jobject) NULL);
            ::org::apache::lucene::search::spans::SpanQuery a1((jobject) NULL);
            ::org::apache::lucene::search::IndexSearcher a2((jobject) NULL);
            PayloadNearQuery$PayloadNearSpanWeight object((jobject) NULL);

            if (!parseArgs(args, "kkk", ::org::apache::lucene::search::payloads::PayloadNearQuery::initializeClass, ::org::apache::lucene::search::spans::SpanQuery::initializeClass, ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0, &a1, &a2))
            {
              INT_CALL(object = PayloadNearQuery$PayloadNearSpanWeight(a0, a1, a2));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PayloadNearQuery$PayloadNearSpanWeight_explain(t_PayloadNearQuery$PayloadNearSpanWeight *self, PyObject *args)
          {
            ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
            jint a1;
            ::org::apache::lucene::search::Explanation result((jobject) NULL);

            if (!parseArgs(args, "kI", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.explain(a0, a1));
              return ::org::apache::lucene::search::t_Explanation::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(PayloadNearQuery$PayloadNearSpanWeight), (PyObject *) self, "explain", args, 2);
          }

          static PyObject *t_PayloadNearQuery$PayloadNearSpanWeight_scorer(t_PayloadNearQuery$PayloadNearSpanWeight *self, PyObject *args)
          {
            ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
            ::org::apache::lucene::util::Bits a1((jobject) NULL);
            ::org::apache::lucene::search::Scorer result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.scorer(a0, a1));
              return ::org::apache::lucene::search::t_Scorer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(PayloadNearQuery$PayloadNearSpanWeight), (PyObject *) self, "scorer", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/util/HashMap.h"
#include "java/lang/Class.h"
#include "java/util/Collection.h"
#include "java/util/Set.h"
#include "java/lang/Cloneable.h"
#include "java/lang/Object.h"
#include "java/io/Serializable.h"
#include "java/util/Map$Entry.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace java {
  namespace util {

    ::java::lang::Class *HashMap::class$ = NULL;
    jmethodID *HashMap::mids$ = NULL;
    bool HashMap::live$ = false;

    jclass HashMap::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/util/HashMap");

        mids$ = new jmethodID[max_mid];
        mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
        mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
        mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
        mids$[mid_init$_abdf2c51] = env->getMethodID(cls, "<init>", "(IF)V");
        mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
        mids$[mid_clone_846352c3] = env->getMethodID(cls, "clone", "()Ljava/lang/Object;");
        mids$[mid_containsKey_290588e2] = env->getMethodID(cls, "containsKey", "(Ljava/lang/Object;)Z");
        mids$[mid_containsValue_290588e2] = env->getMethodID(cls, "containsValue", "(Ljava/lang/Object;)Z");
        mids$[mid_entrySet_03e99967] = env->getMethodID(cls, "entrySet", "()Ljava/util/Set;");
        mids$[mid_get_a932a95f] = env->getMethodID(cls, "get", "(Ljava/lang/Object;)Ljava/lang/Object;");
        mids$[mid_getOrDefault_537d5bdf] = env->getMethodID(cls, "getOrDefault", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;");
        mids$[mid_isEmpty_54c6a16a] = env->getMethodID(cls, "isEmpty", "()Z");
        mids$[mid_keySet_03e99967] = env->getMethodID(cls, "keySet", "()Ljava/util/Set;");
        mids$[mid_put_537d5bdf] = env->getMethodID(cls, "put", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;");
        mids$[mid_putAll_4c9e2b1c] = env->getMethodID(cls, "putAll", "(Ljava/util/Map;)V");
        mids$[mid_putIfAbsent_537d5bdf] = env->getMethodID(cls, "putIfAbsent", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;");
        mids$[mid_remove_a932a95f] = env->getMethodID(cls, "remove", "(Ljava/lang/Object;)Ljava/lang/Object;");
        mids$[mid_remove_466982fe] = env->getMethodID(cls, "remove", "(Ljava/lang/Object;Ljava/lang/Object;)Z");
        mids$[mid_replace_537d5bdf] = env->getMethodID(cls, "replace", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;");
        mids$[mid_replace_1f43c0be] = env->getMethodID(cls, "replace", "(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z");
        mids$[mid_size_54c6a179] = env->getMethodID(cls, "size", "()I");
        mids$[mid_values_2d2d7de4] = env->getMethodID(cls, "values", "()Ljava/util/Collection;");

        class$ = (::java::lang::Class *) new JObject(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    HashMap::HashMap() : ::java::util::AbstractMap(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

    HashMap::HashMap(jint a0) : ::java::util::AbstractMap(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

    HashMap::HashMap(const ::java::util::Map & a0) : ::java::util::AbstractMap(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

    HashMap::HashMap(jint a0, jfloat a1) : ::java::util::AbstractMap(env->newObject(initializeClass, &mids$, mid_init$_abdf2c51, a0, a1)) {}

    void HashMap::clear() const
    {
      env->callVoidMethod(this$, mids$[mid_clear_54c6a166]);
    }

    ::java::lang::Object HashMap::clone() const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_clone_846352c3]));
    }

    jboolean HashMap::containsKey(const ::java::lang::Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_containsKey_290588e2], a0.this$);
    }

    jboolean HashMap::containsValue(const ::java::lang::Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_containsValue_290588e2], a0.this$);
    }

    ::java::util::Set HashMap::entrySet() const
    {
      return ::java::util::Set(env->callObjectMethod(this$, mids$[mid_entrySet_03e99967]));
    }

    ::java::lang::Object HashMap::get(const ::java::lang::Object & a0) const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_get_a932a95f], a0.this$));
    }

    ::java::lang::Object HashMap::getOrDefault(const ::java::lang::Object & a0, const ::java::lang::Object & a1) const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_getOrDefault_537d5bdf], a0.this$, a1.this$));
    }

    jboolean HashMap::isEmpty() const
    {
      return env->callBooleanMethod(this$, mids$[mid_isEmpty_54c6a16a]);
    }

    ::java::util::Set HashMap::keySet() const
    {
      return ::java::util::Set(env->callObjectMethod(this$, mids$[mid_keySet_03e99967]));
    }

    ::java::lang::Object HashMap::put(const ::java::lang::Object & a0, const ::java::lang::Object & a1) const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_put_537d5bdf], a0.this$, a1.this$));
    }

    void HashMap::putAll(const ::java::util::Map & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_putAll_4c9e2b1c], a0.this$);
    }

    ::java::lang::Object HashMap::putIfAbsent(const ::java::lang::Object & a0, const ::java::lang::Object & a1) const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_putIfAbsent_537d5bdf], a0.this$, a1.this$));
    }

    ::java::lang::Object HashMap::remove(const ::java::lang::Object & a0) const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_remove_a932a95f], a0.this$));
    }

    jboolean HashMap::remove(const ::java::lang::Object & a0, const ::java::lang::Object & a1) const
    {
      return env->callBooleanMethod(this$, mids$[mid_remove_466982fe], a0.this$, a1.this$);
    }

    ::java::lang::Object HashMap::replace(const ::java::lang::Object & a0, const ::java::lang::Object & a1) const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_replace_537d5bdf], a0.this$, a1.this$));
    }

    jboolean HashMap::replace(const ::java::lang::Object & a0, const ::java::lang::Object & a1, const ::java::lang::Object & a2) const
    {
      return env->callBooleanMethod(this$, mids$[mid_replace_1f43c0be], a0.this$, a1.this$, a2.this$);
    }

    jint HashMap::size() const
    {
      return env->callIntMethod(this$, mids$[mid_size_54c6a179]);
    }

    ::java::util::Collection HashMap::values() const
    {
      return ::java::util::Collection(env->callObjectMethod(this$, mids$[mid_values_2d2d7de4]));
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace util {
    static PyObject *t_HashMap_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_HashMap_instance_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_HashMap_of_(t_HashMap *self, PyObject *args);
    static int t_HashMap_init_(t_HashMap *self, PyObject *args, PyObject *kwds);
    static PyObject *t_HashMap_clear(t_HashMap *self, PyObject *args);
    static PyObject *t_HashMap_clone(t_HashMap *self);
    static PyObject *t_HashMap_containsKey(t_HashMap *self, PyObject *args);
    static PyObject *t_HashMap_containsValue(t_HashMap *self, PyObject *args);
    static PyObject *t_HashMap_entrySet(t_HashMap *self, PyObject *args);
    static PyObject *t_HashMap_get(t_HashMap *self, PyObject *args);
    static PyObject *t_HashMap_getOrDefault(t_HashMap *self, PyObject *args);
    static PyObject *t_HashMap_isEmpty(t_HashMap *self, PyObject *args);
    static PyObject *t_HashMap_keySet(t_HashMap *self, PyObject *args);
    static PyObject *t_HashMap_put(t_HashMap *self, PyObject *args);
    static PyObject *t_HashMap_putAll(t_HashMap *self, PyObject *args);
    static PyObject *t_HashMap_putIfAbsent(t_HashMap *self, PyObject *args);
    static PyObject *t_HashMap_remove(t_HashMap *self, PyObject *args);
    static PyObject *t_HashMap_replace(t_HashMap *self, PyObject *args);
    static PyObject *t_HashMap_size(t_HashMap *self, PyObject *args);
    static PyObject *t_HashMap_values(t_HashMap *self, PyObject *args);
    static PyObject *t_HashMap_get__empty(t_HashMap *self, void *data);
    static PyObject *t_HashMap_get__parameters_(t_HashMap *self, void *data);
    static PyGetSetDef t_HashMap__fields_[] = {
      DECLARE_GET_FIELD(t_HashMap, empty),
      DECLARE_GET_FIELD(t_HashMap, parameters_),
      { NULL, NULL, NULL, NULL, NULL }
    };

    static PyMethodDef t_HashMap__methods_[] = {
      DECLARE_METHOD(t_HashMap, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_HashMap, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_HashMap, of_, METH_VARARGS),
      DECLARE_METHOD(t_HashMap, clear, METH_VARARGS),
      DECLARE_METHOD(t_HashMap, clone, METH_NOARGS),
      DECLARE_METHOD(t_HashMap, containsKey, METH_VARARGS),
      DECLARE_METHOD(t_HashMap, containsValue, METH_VARARGS),
      DECLARE_METHOD(t_HashMap, entrySet, METH_VARARGS),
      DECLARE_METHOD(t_HashMap, get, METH_VARARGS),
      DECLARE_METHOD(t_HashMap, getOrDefault, METH_VARARGS),
      DECLARE_METHOD(t_HashMap, isEmpty, METH_VARARGS),
      DECLARE_METHOD(t_HashMap, keySet, METH_VARARGS),
      DECLARE_METHOD(t_HashMap, put, METH_VARARGS),
      DECLARE_METHOD(t_HashMap, putAll, METH_VARARGS),
      DECLARE_METHOD(t_HashMap, putIfAbsent, METH_VARARGS),
      DECLARE_METHOD(t_HashMap, remove, METH_VARARGS),
      DECLARE_METHOD(t_HashMap, replace, METH_VARARGS),
      DECLARE_METHOD(t_HashMap, size, METH_VARARGS),
      DECLARE_METHOD(t_HashMap, values, METH_VARARGS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(HashMap, t_HashMap, ::java::util::AbstractMap, HashMap, t_HashMap_init_, 0, 0, t_HashMap__fields_, 0, 0);
    PyObject *t_HashMap::wrap_Object(const HashMap& object, PyTypeObject *p0, PyTypeObject *p1)
    {
      PyObject *obj = t_HashMap::wrap_Object(object);
      if (obj != NULL && obj != Py_None)
      {
        t_HashMap *self = (t_HashMap *) obj;
        self->parameters[0] = p0;
        self->parameters[1] = p1;
      }
      return obj;
    }

    PyObject *t_HashMap::wrap_jobject(const jobject& object, PyTypeObject *p0, PyTypeObject *p1)
    {
      PyObject *obj = t_HashMap::wrap_jobject(object);
      if (obj != NULL && obj != Py_None)
      {
        t_HashMap *self = (t_HashMap *) obj;
        self->parameters[0] = p0;
        self->parameters[1] = p1;
      }
      return obj;
    }

    void t_HashMap::install(PyObject *module)
    {
      installType(&PY_TYPE(HashMap), module, "HashMap", 0);
    }

    void t_HashMap::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(HashMap).tp_dict, "class_", make_descriptor(HashMap::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(HashMap).tp_dict, "wrapfn_", make_descriptor(t_HashMap::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(HashMap).tp_dict, "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_HashMap_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, HashMap::initializeClass, 1)))
        return NULL;
      return t_HashMap::wrap_Object(HashMap(((t_HashMap *) arg)->object.this$));
    }
    static PyObject *t_HashMap_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, HashMap::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static PyObject *t_HashMap_of_(t_HashMap *self, PyObject *args)
    {
      if (!parseArg(args, "T", 2, &(self->parameters)))
        Py_RETURN_SELF;
      return PyErr_SetArgsError((PyObject *) self, "of_", args);
    }

    static int t_HashMap_init_(t_HashMap *self, PyObject *args, PyObject *kwds)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          HashMap object((jobject) NULL);

          INT_CALL(object = HashMap());
          self->object = object;
          break;
        }
        goto err;
       case 1:
        {
          jint a0;
          HashMap object((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            INT_CALL(object = HashMap(a0));
            self->object = object;
            break;
          }
        }
        {
          ::java::util::Map a0((jobject) NULL);
          PyTypeObject **p0;
          HashMap object((jobject) NULL);

          if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
          {
            INT_CALL(object = HashMap(a0));
            self->object = object;
            break;
          }
        }
        goto err;
       case 2:
        {
          jint a0;
          jfloat a1;
          HashMap object((jobject) NULL);

          if (!parseArgs(args, "IF", &a0, &a1))
          {
            INT_CALL(object = HashMap(a0, a1));
            self->object = object;
            break;
          }
        }
       default:
       err:
        PyErr_SetArgsError((PyObject *) self, "__init__", args);
        return -1;
      }

      return 0;
    }

    static PyObject *t_HashMap_clear(t_HashMap *self, PyObject *args)
    {

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(self->object.clear());
        Py_RETURN_NONE;
      }

      return callSuper(&PY_TYPE(HashMap), (PyObject *) self, "clear", args, 2);
    }

    static PyObject *t_HashMap_clone(t_HashMap *self)
    {
      ::java::lang::Object result((jobject) NULL);
      OBJ_CALL(result = self->object.clone());
      return ::java::lang::t_Object::wrap_Object(result);
    }

    static PyObject *t_HashMap_containsKey(t_HashMap *self, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      jboolean result;

      if (!parseArgs(args, "o", &a0))
      {
        OBJ_CALL(result = self->object.containsKey(a0));
        Py_RETURN_BOOL(result);
      }

      return callSuper(&PY_TYPE(HashMap), (PyObject *) self, "containsKey", args, 2);
    }

    static PyObject *t_HashMap_containsValue(t_HashMap *self, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      jboolean result;

      if (!parseArgs(args, "o", &a0))
      {
        OBJ_CALL(result = self->object.containsValue(a0));
        Py_RETURN_BOOL(result);
      }

      return callSuper(&PY_TYPE(HashMap), (PyObject *) self, "containsValue", args, 2);
    }

    static PyObject *t_HashMap_entrySet(t_HashMap *self, PyObject *args)
    {
      ::java::util::Set result((jobject) NULL);

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.entrySet());
        return ::java::util::t_Set::wrap_Object(result);
      }

      return callSuper(&PY_TYPE(HashMap), (PyObject *) self, "entrySet", args, 2);
    }

    static PyObject *t_HashMap_get(t_HashMap *self, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      ::java::lang::Object result((jobject) NULL);

      if (!parseArgs(args, "o", &a0))
      {
        OBJ_CALL(result = self->object.get(a0));
        return self->parameters[1] != NULL ? wrapType(self->parameters[1], result.this$) : ::java::lang::t_Object::wrap_Object(result);
      }

      return callSuper(&PY_TYPE(HashMap), (PyObject *) self, "get", args, 2);
    }

    static PyObject *t_HashMap_getOrDefault(t_HashMap *self, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      ::java::lang::Object a1((jobject) NULL);
      ::java::lang::Object result((jobject) NULL);

      if (!parseArgs(args, "oO", self->parameters[1], &a0, &a1))
      {
        OBJ_CALL(result = self->object.getOrDefault(a0, a1));
        return self->parameters[1] != NULL ? wrapType(self->parameters[1], result.this$) : ::java::lang::t_Object::wrap_Object(result);
      }

      return callSuper(&PY_TYPE(HashMap), (PyObject *) self, "getOrDefault", args, 2);
    }

    static PyObject *t_HashMap_isEmpty(t_HashMap *self, PyObject *args)
    {
      jboolean result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.isEmpty());
        Py_RETURN_BOOL(result);
      }

      return callSuper(&PY_TYPE(HashMap), (PyObject *) self, "isEmpty", args, 2);
    }

    static PyObject *t_HashMap_keySet(t_HashMap *self, PyObject *args)
    {
      ::java::util::Set result((jobject) NULL);

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.keySet());
        return ::java::util::t_Set::wrap_Object(result, self->parameters[0]);
      }

      return callSuper(&PY_TYPE(HashMap), (PyObject *) self, "keySet", args, 2);
    }

    static PyObject *t_HashMap_put(t_HashMap *self, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      ::java::lang::Object a1((jobject) NULL);
      ::java::lang::Object result((jobject) NULL);

      if (!parseArgs(args, "OO", self->parameters[0], self->parameters[1], &a0, &a1))
      {
        OBJ_CALL(result = self->object.put(a0, a1));
        return self->parameters[1] != NULL ? wrapType(self->parameters[1], result.this$) : ::java::lang::t_Object::wrap_Object(result);
      }

      return callSuper(&PY_TYPE(HashMap), (PyObject *) self, "put", args, 2);
    }

    static PyObject *t_HashMap_putAll(t_HashMap *self, PyObject *args)
    {
      ::java::util::Map a0((jobject) NULL);
      PyTypeObject **p0;

      if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
      {
        OBJ_CALL(self->object.putAll(a0));
        Py_RETURN_NONE;
      }

      return callSuper(&PY_TYPE(HashMap), (PyObject *) self, "putAll", args, 2);
    }

    static PyObject *t_HashMap_putIfAbsent(t_HashMap *self, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      ::java::lang::Object a1((jobject) NULL);
      ::java::lang::Object result((jobject) NULL);

      if (!parseArgs(args, "OO", self->parameters[0], self->parameters[1], &a0, &a1))
      {
        OBJ_CALL(result = self->object.putIfAbsent(a0, a1));
        return self->parameters[1] != NULL ? wrapType(self->parameters[1], result.this$) : ::java::lang::t_Object::wrap_Object(result);
      }

      return callSuper(&PY_TYPE(HashMap), (PyObject *) self, "putIfAbsent", args, 2);
    }

    static PyObject *t_HashMap_remove(t_HashMap *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          ::java::lang::Object a0((jobject) NULL);
          ::java::lang::Object result((jobject) NULL);

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.remove(a0));
            return self->parameters[1] != NULL ? wrapType(self->parameters[1], result.this$) : ::java::lang::t_Object::wrap_Object(result);
          }
        }
        break;
       case 2:
        {
          ::java::lang::Object a0((jobject) NULL);
          ::java::lang::Object a1((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "oo", &a0, &a1))
          {
            OBJ_CALL(result = self->object.remove(a0, a1));
            Py_RETURN_BOOL(result);
          }
        }
      }

      return callSuper(&PY_TYPE(HashMap), (PyObject *) self, "remove", args, 2);
    }

    static PyObject *t_HashMap_replace(t_HashMap *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 2:
        {
          ::java::lang::Object a0((jobject) NULL);
          ::java::lang::Object a1((jobject) NULL);
          ::java::lang::Object result((jobject) NULL);

          if (!parseArgs(args, "OO", self->parameters[0], self->parameters[1], &a0, &a1))
          {
            OBJ_CALL(result = self->object.replace(a0, a1));
            return self->parameters[1] != NULL ? wrapType(self->parameters[1], result.this$) : ::java::lang::t_Object::wrap_Object(result);
          }
        }
        break;
       case 3:
        {
          ::java::lang::Object a0((jobject) NULL);
          ::java::lang::Object a1((jobject) NULL);
          ::java::lang::Object a2((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "OOO", self->parameters[0], self->parameters[1], self->parameters[1], &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.replace(a0, a1, a2));
            Py_RETURN_BOOL(result);
          }
        }
      }

      return callSuper(&PY_TYPE(HashMap), (PyObject *) self, "replace", args, 2);
    }

    static PyObject *t_HashMap_size(t_HashMap *self, PyObject *args)
    {
      jint result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.size());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(HashMap), (PyObject *) self, "size", args, 2);
    }

    static PyObject *t_HashMap_values(t_HashMap *self, PyObject *args)
    {
      ::java::util::Collection result((jobject) NULL);

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.values());
        return ::java::util::t_Collection::wrap_Object(result, self->parameters[1]);
      }

      return callSuper(&PY_TYPE(HashMap), (PyObject *) self, "values", args, 2);
    }
    static PyObject *t_HashMap_get__parameters_(t_HashMap *self, void *data)
    {
      return typeParameters(self->parameters, sizeof(self->parameters));
    }

    static PyObject *t_HashMap_get__empty(t_HashMap *self, void *data)
    {
      jboolean value;
      OBJ_CALL(value = self->object.isEmpty());
      Py_RETURN_BOOL(value);
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene45/Lucene45DocValuesFormat.h"
#include "org/apache/lucene/codecs/DocValuesProducer.h"
#include "org/apache/lucene/index/SegmentWriteState.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/codecs/DocValuesConsumer.h"
#include "org/apache/lucene/index/SegmentReadState.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene45 {

          ::java::lang::Class *Lucene45DocValuesFormat::class$ = NULL;
          jmethodID *Lucene45DocValuesFormat::mids$ = NULL;
          bool Lucene45DocValuesFormat::live$ = false;

          jclass Lucene45DocValuesFormat::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene45/Lucene45DocValuesFormat");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_fieldsConsumer_025deb44] = env->getMethodID(cls, "fieldsConsumer", "(Lorg/apache/lucene/index/SegmentWriteState;)Lorg/apache/lucene/codecs/DocValuesConsumer;");
              mids$[mid_fieldsProducer_9b0d4e4a] = env->getMethodID(cls, "fieldsProducer", "(Lorg/apache/lucene/index/SegmentReadState;)Lorg/apache/lucene/codecs/DocValuesProducer;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene45DocValuesFormat::Lucene45DocValuesFormat() : ::org::apache::lucene::codecs::DocValuesFormat(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::codecs::DocValuesConsumer Lucene45DocValuesFormat::fieldsConsumer(const ::org::apache::lucene::index::SegmentWriteState & a0) const
          {
            return ::org::apache::lucene::codecs::DocValuesConsumer(env->callObjectMethod(this$, mids$[mid_fieldsConsumer_025deb44], a0.this$));
          }

          ::org::apache::lucene::codecs::DocValuesProducer Lucene45DocValuesFormat::fieldsProducer(const ::org::apache::lucene::index::SegmentReadState & a0) const
          {
            return ::org::apache::lucene::codecs::DocValuesProducer(env->callObjectMethod(this$, mids$[mid_fieldsProducer_9b0d4e4a], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene45 {
          static PyObject *t_Lucene45DocValuesFormat_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene45DocValuesFormat_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene45DocValuesFormat_init_(t_Lucene45DocValuesFormat *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene45DocValuesFormat_fieldsConsumer(t_Lucene45DocValuesFormat *self, PyObject *args);
          static PyObject *t_Lucene45DocValuesFormat_fieldsProducer(t_Lucene45DocValuesFormat *self, PyObject *args);

          static PyMethodDef t_Lucene45DocValuesFormat__methods_[] = {
            DECLARE_METHOD(t_Lucene45DocValuesFormat, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene45DocValuesFormat, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene45DocValuesFormat, fieldsConsumer, METH_VARARGS),
            DECLARE_METHOD(t_Lucene45DocValuesFormat, fieldsProducer, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene45DocValuesFormat, t_Lucene45DocValuesFormat, ::org::apache::lucene::codecs::DocValuesFormat, Lucene45DocValuesFormat, t_Lucene45DocValuesFormat_init_, 0, 0, 0, 0, 0);

          void t_Lucene45DocValuesFormat::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene45DocValuesFormat), module, "Lucene45DocValuesFormat", 0);
          }

          void t_Lucene45DocValuesFormat::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene45DocValuesFormat).tp_dict, "class_", make_descriptor(Lucene45DocValuesFormat::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene45DocValuesFormat).tp_dict, "wrapfn_", make_descriptor(t_Lucene45DocValuesFormat::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene45DocValuesFormat).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lucene45DocValuesFormat_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene45DocValuesFormat::initializeClass, 1)))
              return NULL;
            return t_Lucene45DocValuesFormat::wrap_Object(Lucene45DocValuesFormat(((t_Lucene45DocValuesFormat *) arg)->object.this$));
          }
          static PyObject *t_Lucene45DocValuesFormat_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene45DocValuesFormat::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene45DocValuesFormat_init_(t_Lucene45DocValuesFormat *self, PyObject *args, PyObject *kwds)
          {
            Lucene45DocValuesFormat object((jobject) NULL);

            INT_CALL(object = Lucene45DocValuesFormat());
            self->object = object;

            return 0;
          }

          static PyObject *t_Lucene45DocValuesFormat_fieldsConsumer(t_Lucene45DocValuesFormat *self, PyObject *args)
          {
            ::org::apache::lucene::index::SegmentWriteState a0((jobject) NULL);
            ::org::apache::lucene::codecs::DocValuesConsumer result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::SegmentWriteState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.fieldsConsumer(a0));
              return ::org::apache::lucene::codecs::t_DocValuesConsumer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene45DocValuesFormat), (PyObject *) self, "fieldsConsumer", args, 2);
          }

          static PyObject *t_Lucene45DocValuesFormat_fieldsProducer(t_Lucene45DocValuesFormat *self, PyObject *args)
          {
            ::org::apache::lucene::index::SegmentReadState a0((jobject) NULL);
            ::org::apache::lucene::codecs::DocValuesProducer result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::SegmentReadState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.fieldsProducer(a0));
              return ::org::apache::lucene::codecs::t_DocValuesProducer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene45DocValuesFormat), (PyObject *) self, "fieldsProducer", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/automaton/CharacterRunAutomaton.h"
#include "org/apache/lucene/util/automaton/Automaton.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {

          ::java::lang::Class *CharacterRunAutomaton::class$ = NULL;
          jmethodID *CharacterRunAutomaton::mids$ = NULL;
          bool CharacterRunAutomaton::live$ = false;

          jclass CharacterRunAutomaton::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/automaton/CharacterRunAutomaton");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_fc7cf394] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/automaton/Automaton;)V");
              mids$[mid_run_5fdc3f44] = env->getMethodID(cls, "run", "(Ljava/lang/String;)Z");
              mids$[mid_run_6f0bb35a] = env->getMethodID(cls, "run", "([CII)Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CharacterRunAutomaton::CharacterRunAutomaton(const ::org::apache::lucene::util::automaton::Automaton & a0) : ::org::apache::lucene::util::automaton::RunAutomaton(env->newObject(initializeClass, &mids$, mid_init$_fc7cf394, a0.this$)) {}

          jboolean CharacterRunAutomaton::run(const ::java::lang::String & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_run_5fdc3f44], a0.this$);
          }

          jboolean CharacterRunAutomaton::run(const JArray< jchar > & a0, jint a1, jint a2) const
          {
            return env->callBooleanMethod(this$, mids$[mid_run_6f0bb35a], a0.this$, a1, a2);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {
          static PyObject *t_CharacterRunAutomaton_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CharacterRunAutomaton_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CharacterRunAutomaton_init_(t_CharacterRunAutomaton *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CharacterRunAutomaton_run(t_CharacterRunAutomaton *self, PyObject *args);

          static PyMethodDef t_CharacterRunAutomaton__methods_[] = {
            DECLARE_METHOD(t_CharacterRunAutomaton, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CharacterRunAutomaton, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CharacterRunAutomaton, run, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CharacterRunAutomaton, t_CharacterRunAutomaton, ::org::apache::lucene::util::automaton::RunAutomaton, CharacterRunAutomaton, t_CharacterRunAutomaton_init_, 0, 0, 0, 0, 0);

          void t_CharacterRunAutomaton::install(PyObject *module)
          {
            installType(&PY_TYPE(CharacterRunAutomaton), module, "CharacterRunAutomaton", 0);
          }

          void t_CharacterRunAutomaton::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CharacterRunAutomaton).tp_dict, "class_", make_descriptor(CharacterRunAutomaton::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CharacterRunAutomaton).tp_dict, "wrapfn_", make_descriptor(t_CharacterRunAutomaton::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CharacterRunAutomaton).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CharacterRunAutomaton_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CharacterRunAutomaton::initializeClass, 1)))
              return NULL;
            return t_CharacterRunAutomaton::wrap_Object(CharacterRunAutomaton(((t_CharacterRunAutomaton *) arg)->object.this$));
          }
          static PyObject *t_CharacterRunAutomaton_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CharacterRunAutomaton::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CharacterRunAutomaton_init_(t_CharacterRunAutomaton *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
            CharacterRunAutomaton object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0))
            {
              INT_CALL(object = CharacterRunAutomaton(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_CharacterRunAutomaton_run(t_CharacterRunAutomaton *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::java::lang::String a0((jobject) NULL);
                jboolean result;

                if (!parseArgs(args, "s", &a0))
                {
                  OBJ_CALL(result = self->object.run(a0));
                  Py_RETURN_BOOL(result);
                }
              }
              break;
             case 3:
              {
                JArray< jchar > a0((jobject) NULL);
                jint a1;
                jint a2;
                jboolean result;

                if (!parseArgs(args, "[CII", &a0, &a1, &a2))
                {
                  OBJ_CALL(result = self->object.run(a0, a1, a2));
                  Py_RETURN_BOOL(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "run", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/ParallelTaxonomyArrays.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {

          ::java::lang::Class *ParallelTaxonomyArrays::class$ = NULL;
          jmethodID *ParallelTaxonomyArrays::mids$ = NULL;
          bool ParallelTaxonomyArrays::live$ = false;

          jclass ParallelTaxonomyArrays::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/ParallelTaxonomyArrays");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_children_dab10e75] = env->getMethodID(cls, "children", "()[I");
              mids$[mid_parents_dab10e75] = env->getMethodID(cls, "parents", "()[I");
              mids$[mid_siblings_dab10e75] = env->getMethodID(cls, "siblings", "()[I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ParallelTaxonomyArrays::ParallelTaxonomyArrays() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          JArray< jint > ParallelTaxonomyArrays::children() const
          {
            return JArray< jint >(env->callObjectMethod(this$, mids$[mid_children_dab10e75]));
          }

          JArray< jint > ParallelTaxonomyArrays::parents() const
          {
            return JArray< jint >(env->callObjectMethod(this$, mids$[mid_parents_dab10e75]));
          }

          JArray< jint > ParallelTaxonomyArrays::siblings() const
          {
            return JArray< jint >(env->callObjectMethod(this$, mids$[mid_siblings_dab10e75]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          static PyObject *t_ParallelTaxonomyArrays_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ParallelTaxonomyArrays_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ParallelTaxonomyArrays_init_(t_ParallelTaxonomyArrays *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ParallelTaxonomyArrays_children(t_ParallelTaxonomyArrays *self);
          static PyObject *t_ParallelTaxonomyArrays_parents(t_ParallelTaxonomyArrays *self);
          static PyObject *t_ParallelTaxonomyArrays_siblings(t_ParallelTaxonomyArrays *self);

          static PyMethodDef t_ParallelTaxonomyArrays__methods_[] = {
            DECLARE_METHOD(t_ParallelTaxonomyArrays, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ParallelTaxonomyArrays, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ParallelTaxonomyArrays, children, METH_NOARGS),
            DECLARE_METHOD(t_ParallelTaxonomyArrays, parents, METH_NOARGS),
            DECLARE_METHOD(t_ParallelTaxonomyArrays, siblings, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ParallelTaxonomyArrays, t_ParallelTaxonomyArrays, ::java::lang::Object, ParallelTaxonomyArrays, t_ParallelTaxonomyArrays_init_, 0, 0, 0, 0, 0);

          void t_ParallelTaxonomyArrays::install(PyObject *module)
          {
            installType(&PY_TYPE(ParallelTaxonomyArrays), module, "ParallelTaxonomyArrays", 0);
          }

          void t_ParallelTaxonomyArrays::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ParallelTaxonomyArrays).tp_dict, "class_", make_descriptor(ParallelTaxonomyArrays::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ParallelTaxonomyArrays).tp_dict, "wrapfn_", make_descriptor(t_ParallelTaxonomyArrays::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ParallelTaxonomyArrays).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ParallelTaxonomyArrays_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ParallelTaxonomyArrays::initializeClass, 1)))
              return NULL;
            return t_ParallelTaxonomyArrays::wrap_Object(ParallelTaxonomyArrays(((t_ParallelTaxonomyArrays *) arg)->object.this$));
          }
          static PyObject *t_ParallelTaxonomyArrays_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ParallelTaxonomyArrays::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ParallelTaxonomyArrays_init_(t_ParallelTaxonomyArrays *self, PyObject *args, PyObject *kwds)
          {
            ParallelTaxonomyArrays object((jobject) NULL);

            INT_CALL(object = ParallelTaxonomyArrays());
            self->object = object;

            return 0;
          }

          static PyObject *t_ParallelTaxonomyArrays_children(t_ParallelTaxonomyArrays *self)
          {
            JArray< jint > result((jobject) NULL);
            OBJ_CALL(result = self->object.children());
            return result.wrap();
          }

          static PyObject *t_ParallelTaxonomyArrays_parents(t_ParallelTaxonomyArrays *self)
          {
            JArray< jint > result((jobject) NULL);
            OBJ_CALL(result = self->object.parents());
            return result.wrap();
          }

          static PyObject *t_ParallelTaxonomyArrays_siblings(t_ParallelTaxonomyArrays *self)
          {
            JArray< jint > result((jobject) NULL);
            OBJ_CALL(result = self->object.siblings());
            return result.wrap();
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/TermContext.h"
#include "org/apache/lucene/index/TermState.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/IndexReaderContext.h"
#include "org/apache/lucene/index/Term.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *TermContext::class$ = NULL;
        jmethodID *TermContext::mids$ = NULL;
        jfieldID *TermContext::fids$ = NULL;
        bool TermContext::live$ = false;

        jclass TermContext::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/TermContext");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_4df5686b] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/IndexReaderContext;)V");
            mids$[mid_init$_5a9a23d9] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/IndexReaderContext;Lorg/apache/lucene/index/TermState;IIJ)V");
            mids$[mid_build_9d3a5124] = env->getStaticMethodID(cls, "build", "(Lorg/apache/lucene/index/IndexReaderContext;Lorg/apache/lucene/index/Term;)Lorg/apache/lucene/index/TermContext;");
            mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
            mids$[mid_docFreq_54c6a179] = env->getMethodID(cls, "docFreq", "()I");
            mids$[mid_get_17d8f64c] = env->getMethodID(cls, "get", "(I)Lorg/apache/lucene/index/TermState;");
            mids$[mid_register_edacd7f4] = env->getMethodID(cls, "register", "(Lorg/apache/lucene/index/TermState;IIJ)V");
            mids$[mid_setDocFreq_39c7bd3c] = env->getMethodID(cls, "setDocFreq", "(I)V");
            mids$[mid_totalTermFreq_54c6a17a] = env->getMethodID(cls, "totalTermFreq", "()J");

            fids$ = new jfieldID[max_fid];
            fids$[fid_topReaderContext] = env->getFieldID(cls, "topReaderContext", "Lorg/apache/lucene/index/IndexReaderContext;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        TermContext::TermContext(const ::org::apache::lucene::index::IndexReaderContext & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_4df5686b, a0.this$)) {}

        TermContext::TermContext(const ::org::apache::lucene::index::IndexReaderContext & a0, const ::org::apache::lucene::index::TermState & a1, jint a2, jint a3, jlong a4) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_5a9a23d9, a0.this$, a1.this$, a2, a3, a4)) {}

        TermContext TermContext::build(const ::org::apache::lucene::index::IndexReaderContext & a0, const ::org::apache::lucene::index::Term & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return TermContext(env->callStaticObjectMethod(cls, mids$[mid_build_9d3a5124], a0.this$, a1.this$));
        }

        void TermContext::clear() const
        {
          env->callVoidMethod(this$, mids$[mid_clear_54c6a166]);
        }

        jint TermContext::docFreq() const
        {
          return env->callIntMethod(this$, mids$[mid_docFreq_54c6a179]);
        }

        ::org::apache::lucene::index::TermState TermContext::get(jint a0) const
        {
          return ::org::apache::lucene::index::TermState(env->callObjectMethod(this$, mids$[mid_get_17d8f64c], a0));
        }

        void TermContext::register$(const ::org::apache::lucene::index::TermState & a0, jint a1, jint a2, jlong a3) const
        {
          env->callVoidMethod(this$, mids$[mid_register_edacd7f4], a0.this$, a1, a2, a3);
        }

        void TermContext::setDocFreq(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setDocFreq_39c7bd3c], a0);
        }

        jlong TermContext::totalTermFreq() const
        {
          return env->callLongMethod(this$, mids$[mid_totalTermFreq_54c6a17a]);
        }

        ::org::apache::lucene::index::IndexReaderContext TermContext::_get_topReaderContext() const
        {
          return ::org::apache::lucene::index::IndexReaderContext(env->getObjectField(this$, fids$[fid_topReaderContext]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_TermContext_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TermContext_instance_(PyTypeObject *type, PyObject *arg);
        static int t_TermContext_init_(t_TermContext *self, PyObject *args, PyObject *kwds);
        static PyObject *t_TermContext_build(PyTypeObject *type, PyObject *args);
        static PyObject *t_TermContext_clear(t_TermContext *self);
        static PyObject *t_TermContext_docFreq(t_TermContext *self);
        static PyObject *t_TermContext_get(t_TermContext *self, PyObject *arg);
        static PyObject *t_TermContext_register(t_TermContext *self, PyObject *args);
        static PyObject *t_TermContext_setDocFreq(t_TermContext *self, PyObject *arg);
        static PyObject *t_TermContext_totalTermFreq(t_TermContext *self);
        static PyObject *t_TermContext_get__topReaderContext(t_TermContext *self, void *data);

        static PyGetSetDef t_TermContext__fields_[] = {
          DECLARE_GET_FIELD(t_TermContext, topReaderContext),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_TermContext__methods_[] = {
          DECLARE_METHOD(t_TermContext, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TermContext, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TermContext, build, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_TermContext, clear, METH_NOARGS),
          DECLARE_METHOD(t_TermContext, docFreq, METH_NOARGS),
          DECLARE_METHOD(t_TermContext, get, METH_O),
          DECLARE_METHOD(t_TermContext, register, METH_VARARGS),
          DECLARE_METHOD(t_TermContext, setDocFreq, METH_O),
          DECLARE_METHOD(t_TermContext, totalTermFreq, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TermContext, t_TermContext, ::java::lang::Object, TermContext, t_TermContext_init_, 0, 0, t_TermContext__fields_, 0, 0);

        void t_TermContext::install(PyObject *module)
        {
          installType(&PY_TYPE(TermContext), module, "TermContext", 0);
        }

        void t_TermContext::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TermContext).tp_dict, "class_", make_descriptor(TermContext::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TermContext).tp_dict, "wrapfn_", make_descriptor(t_TermContext::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TermContext).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TermContext_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TermContext::initializeClass, 1)))
            return NULL;
          return t_TermContext::wrap_Object(TermContext(((t_TermContext *) arg)->object.this$));
        }
        static PyObject *t_TermContext_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TermContext::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_TermContext_init_(t_TermContext *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::index::IndexReaderContext a0((jobject) NULL);
              TermContext object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexReaderContext::initializeClass, &a0))
              {
                INT_CALL(object = TermContext(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 5:
            {
              ::org::apache::lucene::index::IndexReaderContext a0((jobject) NULL);
              ::org::apache::lucene::index::TermState a1((jobject) NULL);
              jint a2;
              jint a3;
              jlong a4;
              TermContext object((jobject) NULL);

              if (!parseArgs(args, "kkIIJ", ::org::apache::lucene::index::IndexReaderContext::initializeClass, ::org::apache::lucene::index::TermState::initializeClass, &a0, &a1, &a2, &a3, &a4))
              {
                INT_CALL(object = TermContext(a0, a1, a2, a3, a4));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_TermContext_build(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::index::IndexReaderContext a0((jobject) NULL);
          ::org::apache::lucene::index::Term a1((jobject) NULL);
          TermContext result((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::index::IndexReaderContext::initializeClass, ::org::apache::lucene::index::Term::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::TermContext::build(a0, a1));
            return t_TermContext::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "build", args);
          return NULL;
        }

        static PyObject *t_TermContext_clear(t_TermContext *self)
        {
          OBJ_CALL(self->object.clear());
          Py_RETURN_NONE;
        }

        static PyObject *t_TermContext_docFreq(t_TermContext *self)
        {
          jint result;
          OBJ_CALL(result = self->object.docFreq());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_TermContext_get(t_TermContext *self, PyObject *arg)
        {
          jint a0;
          ::org::apache::lucene::index::TermState result((jobject) NULL);

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.get(a0));
            return ::org::apache::lucene::index::t_TermState::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "get", arg);
          return NULL;
        }

        static PyObject *t_TermContext_register(t_TermContext *self, PyObject *args)
        {
          ::org::apache::lucene::index::TermState a0((jobject) NULL);
          jint a1;
          jint a2;
          jlong a3;

          if (!parseArgs(args, "kIIJ", ::org::apache::lucene::index::TermState::initializeClass, &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(self->object.register$(a0, a1, a2, a3));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "register", args);
          return NULL;
        }

        static PyObject *t_TermContext_setDocFreq(t_TermContext *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.setDocFreq(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setDocFreq", arg);
          return NULL;
        }

        static PyObject *t_TermContext_totalTermFreq(t_TermContext *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.totalTermFreq());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_TermContext_get__topReaderContext(t_TermContext *self, void *data)
        {
          ::org::apache::lucene::index::IndexReaderContext value((jobject) NULL);
          OBJ_CALL(value = self->object._get_topReaderContext());
          return ::org::apache::lucene::index::t_IndexReaderContext::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/FilterAtomicReader$FilterDocsEnum.h"
#include "org/apache/lucene/util/AttributeSource.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *FilterAtomicReader$FilterDocsEnum::class$ = NULL;
        jmethodID *FilterAtomicReader$FilterDocsEnum::mids$ = NULL;
        bool FilterAtomicReader$FilterDocsEnum::live$ = false;

        jclass FilterAtomicReader$FilterDocsEnum::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/FilterAtomicReader$FilterDocsEnum");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_ea9b58a1] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/DocsEnum;)V");
            mids$[mid_advance_39c7bd23] = env->getMethodID(cls, "advance", "(I)I");
            mids$[mid_attributes_f901022b] = env->getMethodID(cls, "attributes", "()Lorg/apache/lucene/util/AttributeSource;");
            mids$[mid_cost_54c6a17a] = env->getMethodID(cls, "cost", "()J");
            mids$[mid_docID_54c6a179] = env->getMethodID(cls, "docID", "()I");
            mids$[mid_freq_54c6a179] = env->getMethodID(cls, "freq", "()I");
            mids$[mid_nextDoc_54c6a179] = env->getMethodID(cls, "nextDoc", "()I");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FilterAtomicReader$FilterDocsEnum::FilterAtomicReader$FilterDocsEnum(const ::org::apache::lucene::index::DocsEnum & a0) : ::org::apache::lucene::index::DocsEnum(env->newObject(initializeClass, &mids$, mid_init$_ea9b58a1, a0.this$)) {}

        jint FilterAtomicReader$FilterDocsEnum::advance(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_advance_39c7bd23], a0);
        }

        ::org::apache::lucene::util::AttributeSource FilterAtomicReader$FilterDocsEnum::attributes() const
        {
          return ::org::apache::lucene::util::AttributeSource(env->callObjectMethod(this$, mids$[mid_attributes_f901022b]));
        }

        jlong FilterAtomicReader$FilterDocsEnum::cost() const
        {
          return env->callLongMethod(this$, mids$[mid_cost_54c6a17a]);
        }

        jint FilterAtomicReader$FilterDocsEnum::docID() const
        {
          return env->callIntMethod(this$, mids$[mid_docID_54c6a179]);
        }

        jint FilterAtomicReader$FilterDocsEnum::freq() const
        {
          return env->callIntMethod(this$, mids$[mid_freq_54c6a179]);
        }

        jint FilterAtomicReader$FilterDocsEnum::nextDoc() const
        {
          return env->callIntMethod(this$, mids$[mid_nextDoc_54c6a179]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_FilterAtomicReader$FilterDocsEnum_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FilterAtomicReader$FilterDocsEnum_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FilterAtomicReader$FilterDocsEnum_init_(t_FilterAtomicReader$FilterDocsEnum *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FilterAtomicReader$FilterDocsEnum_advance(t_FilterAtomicReader$FilterDocsEnum *self, PyObject *args);
        static PyObject *t_FilterAtomicReader$FilterDocsEnum_attributes(t_FilterAtomicReader$FilterDocsEnum *self, PyObject *args);
        static PyObject *t_FilterAtomicReader$FilterDocsEnum_cost(t_FilterAtomicReader$FilterDocsEnum *self, PyObject *args);
        static PyObject *t_FilterAtomicReader$FilterDocsEnum_docID(t_FilterAtomicReader$FilterDocsEnum *self, PyObject *args);
        static PyObject *t_FilterAtomicReader$FilterDocsEnum_freq(t_FilterAtomicReader$FilterDocsEnum *self, PyObject *args);
        static PyObject *t_FilterAtomicReader$FilterDocsEnum_nextDoc(t_FilterAtomicReader$FilterDocsEnum *self, PyObject *args);

        static PyMethodDef t_FilterAtomicReader$FilterDocsEnum__methods_[] = {
          DECLARE_METHOD(t_FilterAtomicReader$FilterDocsEnum, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterDocsEnum, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterDocsEnum, advance, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterDocsEnum, attributes, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterDocsEnum, cost, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterDocsEnum, docID, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterDocsEnum, freq, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterDocsEnum, nextDoc, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FilterAtomicReader$FilterDocsEnum, t_FilterAtomicReader$FilterDocsEnum, ::org::apache::lucene::index::DocsEnum, FilterAtomicReader$FilterDocsEnum, t_FilterAtomicReader$FilterDocsEnum_init_, 0, 0, 0, 0, 0);

        void t_FilterAtomicReader$FilterDocsEnum::install(PyObject *module)
        {
          installType(&PY_TYPE(FilterAtomicReader$FilterDocsEnum), module, "FilterAtomicReader$FilterDocsEnum", 0);
        }

        void t_FilterAtomicReader$FilterDocsEnum::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FilterAtomicReader$FilterDocsEnum).tp_dict, "class_", make_descriptor(FilterAtomicReader$FilterDocsEnum::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FilterAtomicReader$FilterDocsEnum).tp_dict, "wrapfn_", make_descriptor(t_FilterAtomicReader$FilterDocsEnum::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FilterAtomicReader$FilterDocsEnum).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FilterAtomicReader$FilterDocsEnum_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FilterAtomicReader$FilterDocsEnum::initializeClass, 1)))
            return NULL;
          return t_FilterAtomicReader$FilterDocsEnum::wrap_Object(FilterAtomicReader$FilterDocsEnum(((t_FilterAtomicReader$FilterDocsEnum *) arg)->object.this$));
        }
        static PyObject *t_FilterAtomicReader$FilterDocsEnum_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FilterAtomicReader$FilterDocsEnum::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FilterAtomicReader$FilterDocsEnum_init_(t_FilterAtomicReader$FilterDocsEnum *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::index::DocsEnum a0((jobject) NULL);
          FilterAtomicReader$FilterDocsEnum object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::DocsEnum::initializeClass, &a0))
          {
            INT_CALL(object = FilterAtomicReader$FilterDocsEnum(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FilterAtomicReader$FilterDocsEnum_advance(t_FilterAtomicReader$FilterDocsEnum *self, PyObject *args)
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.advance(a0));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader$FilterDocsEnum), (PyObject *) self, "advance", args, 2);
        }

        static PyObject *t_FilterAtomicReader$FilterDocsEnum_attributes(t_FilterAtomicReader$FilterDocsEnum *self, PyObject *args)
        {
          ::org::apache::lucene::util::AttributeSource result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.attributes());
            return ::org::apache::lucene::util::t_AttributeSource::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader$FilterDocsEnum), (PyObject *) self, "attributes", args, 2);
        }

        static PyObject *t_FilterAtomicReader$FilterDocsEnum_cost(t_FilterAtomicReader$FilterDocsEnum *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.cost());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader$FilterDocsEnum), (PyObject *) self, "cost", args, 2);
        }

        static PyObject *t_FilterAtomicReader$FilterDocsEnum_docID(t_FilterAtomicReader$FilterDocsEnum *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.docID());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader$FilterDocsEnum), (PyObject *) self, "docID", args, 2);
        }

        static PyObject *t_FilterAtomicReader$FilterDocsEnum_freq(t_FilterAtomicReader$FilterDocsEnum *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.freq());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader$FilterDocsEnum), (PyObject *) self, "freq", args, 2);
        }

        static PyObject *t_FilterAtomicReader$FilterDocsEnum_nextDoc(t_FilterAtomicReader$FilterDocsEnum *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.nextDoc());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader$FilterDocsEnum), (PyObject *) self, "nextDoc", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/SimpleBoolFunction.h"
#include "org/apache/lucene/queries/function/ValueSource.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "org/apache/lucene/queries/function/docvalues/BoolDocValues.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *SimpleBoolFunction::class$ = NULL;
            jmethodID *SimpleBoolFunction::mids$ = NULL;
            bool SimpleBoolFunction::live$ = false;

            jclass SimpleBoolFunction::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/SimpleBoolFunction");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_ca78fe7a] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queries/function/ValueSource;)V");
                mids$[mid_createWeight_1b6125ba] = env->getMethodID(cls, "createWeight", "(Ljava/util/Map;Lorg/apache/lucene/search/IndexSearcher;)V");
                mids$[mid_description_14c7b5c5] = env->getMethodID(cls, "description", "()Ljava/lang/String;");
                mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_getValues_ea0ab6f1] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/queries/function/docvalues/BoolDocValues;");
                mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
                mids$[mid_name_14c7b5c5] = env->getMethodID(cls, "name", "()Ljava/lang/String;");
                mids$[mid_func_2223df3d] = env->getMethodID(cls, "func", "(ILorg/apache/lucene/queries/function/FunctionValues;)Z");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            SimpleBoolFunction::SimpleBoolFunction(const ::org::apache::lucene::queries::function::ValueSource & a0) : ::org::apache::lucene::queries::function::valuesource::BoolFunction(env->newObject(initializeClass, &mids$, mid_init$_ca78fe7a, a0.this$)) {}

            void SimpleBoolFunction::createWeight(const ::java::util::Map & a0, const ::org::apache::lucene::search::IndexSearcher & a1) const
            {
              env->callVoidMethod(this$, mids$[mid_createWeight_1b6125ba], a0.this$, a1.this$);
            }

            ::java::lang::String SimpleBoolFunction::description() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_description_14c7b5c5]));
            }

            jboolean SimpleBoolFunction::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
            }

            ::org::apache::lucene::queries::function::docvalues::BoolDocValues SimpleBoolFunction::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::docvalues::BoolDocValues(env->callObjectMethod(this$, mids$[mid_getValues_ea0ab6f1], a0.this$, a1.this$));
            }

            jint SimpleBoolFunction::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_SimpleBoolFunction_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_SimpleBoolFunction_instance_(PyTypeObject *type, PyObject *arg);
            static int t_SimpleBoolFunction_init_(t_SimpleBoolFunction *self, PyObject *args, PyObject *kwds);
            static PyObject *t_SimpleBoolFunction_createWeight(t_SimpleBoolFunction *self, PyObject *args);
            static PyObject *t_SimpleBoolFunction_description(t_SimpleBoolFunction *self, PyObject *args);
            static PyObject *t_SimpleBoolFunction_equals(t_SimpleBoolFunction *self, PyObject *args);
            static PyObject *t_SimpleBoolFunction_getValues(t_SimpleBoolFunction *self, PyObject *args);
            static PyObject *t_SimpleBoolFunction_hashCode(t_SimpleBoolFunction *self, PyObject *args);

            static PyMethodDef t_SimpleBoolFunction__methods_[] = {
              DECLARE_METHOD(t_SimpleBoolFunction, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SimpleBoolFunction, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SimpleBoolFunction, createWeight, METH_VARARGS),
              DECLARE_METHOD(t_SimpleBoolFunction, description, METH_VARARGS),
              DECLARE_METHOD(t_SimpleBoolFunction, equals, METH_VARARGS),
              DECLARE_METHOD(t_SimpleBoolFunction, getValues, METH_VARARGS),
              DECLARE_METHOD(t_SimpleBoolFunction, hashCode, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(SimpleBoolFunction, t_SimpleBoolFunction, ::org::apache::lucene::queries::function::valuesource::BoolFunction, SimpleBoolFunction, t_SimpleBoolFunction_init_, 0, 0, 0, 0, 0);

            void t_SimpleBoolFunction::install(PyObject *module)
            {
              installType(&PY_TYPE(SimpleBoolFunction), module, "SimpleBoolFunction", 0);
            }

            void t_SimpleBoolFunction::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(SimpleBoolFunction).tp_dict, "class_", make_descriptor(SimpleBoolFunction::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(SimpleBoolFunction).tp_dict, "wrapfn_", make_descriptor(t_SimpleBoolFunction::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(SimpleBoolFunction).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_SimpleBoolFunction_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, SimpleBoolFunction::initializeClass, 1)))
                return NULL;
              return t_SimpleBoolFunction::wrap_Object(SimpleBoolFunction(((t_SimpleBoolFunction *) arg)->object.this$));
            }
            static PyObject *t_SimpleBoolFunction_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, SimpleBoolFunction::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_SimpleBoolFunction_init_(t_SimpleBoolFunction *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::queries::function::ValueSource a0((jobject) NULL);
              SimpleBoolFunction object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::queries::function::ValueSource::initializeClass, &a0))
              {
                INT_CALL(object = SimpleBoolFunction(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_SimpleBoolFunction_createWeight(t_SimpleBoolFunction *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::search::IndexSearcher a1((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(self->object.createWeight(a0, a1));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(SimpleBoolFunction), (PyObject *) self, "createWeight", args, 2);
            }

            static PyObject *t_SimpleBoolFunction_description(t_SimpleBoolFunction *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.description());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(SimpleBoolFunction), (PyObject *) self, "description", args, 2);
            }

            static PyObject *t_SimpleBoolFunction_equals(t_SimpleBoolFunction *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(SimpleBoolFunction), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_SimpleBoolFunction_getValues(t_SimpleBoolFunction *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::docvalues::BoolDocValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::docvalues::t_BoolDocValues::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(SimpleBoolFunction), (PyObject *) self, "getValues", args, 2);
            }

            static PyObject *t_SimpleBoolFunction_hashCode(t_SimpleBoolFunction *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(SimpleBoolFunction), (PyObject *) self, "hashCode", args, 2);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/NumericTokenStream.h"
#include "java/lang/String.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {

        ::java::lang::Class *NumericTokenStream::class$ = NULL;
        jmethodID *NumericTokenStream::mids$ = NULL;
        bool NumericTokenStream::live$ = false;
        ::java::lang::String *NumericTokenStream::TOKEN_TYPE_FULL_PREC = NULL;
        ::java::lang::String *NumericTokenStream::TOKEN_TYPE_LOWER_PREC = NULL;

        jclass NumericTokenStream::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/NumericTokenStream");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
            mids$[mid_init$_f6b58e9c] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/AttributeFactory;I)V");
            mids$[mid_getPrecisionStep_54c6a179] = env->getMethodID(cls, "getPrecisionStep", "()I");
            mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
            mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");
            mids$[mid_setDoubleValue_9f5ef2d6] = env->getMethodID(cls, "setDoubleValue", "(D)Lorg/apache/lucene/analysis/NumericTokenStream;");
            mids$[mid_setFloatValue_e2936734] = env->getMethodID(cls, "setFloatValue", "(F)Lorg/apache/lucene/analysis/NumericTokenStream;");
            mids$[mid_setIntValue_ca7ab323] = env->getMethodID(cls, "setIntValue", "(I)Lorg/apache/lucene/analysis/NumericTokenStream;");
            mids$[mid_setLongValue_c6439648] = env->getMethodID(cls, "setLongValue", "(J)Lorg/apache/lucene/analysis/NumericTokenStream;");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            TOKEN_TYPE_FULL_PREC = new ::java::lang::String(env->getStaticObjectField(cls, "TOKEN_TYPE_FULL_PREC", "Ljava/lang/String;"));
            TOKEN_TYPE_LOWER_PREC = new ::java::lang::String(env->getStaticObjectField(cls, "TOKEN_TYPE_LOWER_PREC", "Ljava/lang/String;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        NumericTokenStream::NumericTokenStream() : ::org::apache::lucene::analysis::TokenStream(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        NumericTokenStream::NumericTokenStream(jint a0) : ::org::apache::lucene::analysis::TokenStream(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

        NumericTokenStream::NumericTokenStream(const ::org::apache::lucene::util::AttributeFactory & a0, jint a1) : ::org::apache::lucene::analysis::TokenStream(env->newObject(initializeClass, &mids$, mid_init$_f6b58e9c, a0.this$, a1)) {}

        jint NumericTokenStream::getPrecisionStep() const
        {
          return env->callIntMethod(this$, mids$[mid_getPrecisionStep_54c6a179]);
        }

        jboolean NumericTokenStream::incrementToken() const
        {
          return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
        }

        void NumericTokenStream::reset() const
        {
          env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
        }

        NumericTokenStream NumericTokenStream::setDoubleValue(jdouble a0) const
        {
          return NumericTokenStream(env->callObjectMethod(this$, mids$[mid_setDoubleValue_9f5ef2d6], a0));
        }

        NumericTokenStream NumericTokenStream::setFloatValue(jfloat a0) const
        {
          return NumericTokenStream(env->callObjectMethod(this$, mids$[mid_setFloatValue_e2936734], a0));
        }

        NumericTokenStream NumericTokenStream::setIntValue(jint a0) const
        {
          return NumericTokenStream(env->callObjectMethod(this$, mids$[mid_setIntValue_ca7ab323], a0));
        }

        NumericTokenStream NumericTokenStream::setLongValue(jlong a0) const
        {
          return NumericTokenStream(env->callObjectMethod(this$, mids$[mid_setLongValue_c6439648], a0));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/analysis/NumericTokenStream$NumericTermAttributeImpl.h"
#include "org/apache/lucene/analysis/NumericTokenStream$NumericTermAttribute.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        static PyObject *t_NumericTokenStream_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NumericTokenStream_instance_(PyTypeObject *type, PyObject *arg);
        static int t_NumericTokenStream_init_(t_NumericTokenStream *self, PyObject *args, PyObject *kwds);
        static PyObject *t_NumericTokenStream_getPrecisionStep(t_NumericTokenStream *self);
        static PyObject *t_NumericTokenStream_incrementToken(t_NumericTokenStream *self, PyObject *args);
        static PyObject *t_NumericTokenStream_reset(t_NumericTokenStream *self, PyObject *args);
        static PyObject *t_NumericTokenStream_setDoubleValue(t_NumericTokenStream *self, PyObject *arg);
        static PyObject *t_NumericTokenStream_setFloatValue(t_NumericTokenStream *self, PyObject *arg);
        static PyObject *t_NumericTokenStream_setIntValue(t_NumericTokenStream *self, PyObject *arg);
        static PyObject *t_NumericTokenStream_setLongValue(t_NumericTokenStream *self, PyObject *arg);
        static int t_NumericTokenStream_set__doubleValue(t_NumericTokenStream *self, PyObject *arg, void *data);
        static int t_NumericTokenStream_set__floatValue(t_NumericTokenStream *self, PyObject *arg, void *data);
        static int t_NumericTokenStream_set__intValue(t_NumericTokenStream *self, PyObject *arg, void *data);
        static int t_NumericTokenStream_set__longValue(t_NumericTokenStream *self, PyObject *arg, void *data);
        static PyObject *t_NumericTokenStream_get__precisionStep(t_NumericTokenStream *self, void *data);
        static PyGetSetDef t_NumericTokenStream__fields_[] = {
          DECLARE_SET_FIELD(t_NumericTokenStream, doubleValue),
          DECLARE_SET_FIELD(t_NumericTokenStream, floatValue),
          DECLARE_SET_FIELD(t_NumericTokenStream, intValue),
          DECLARE_SET_FIELD(t_NumericTokenStream, longValue),
          DECLARE_GET_FIELD(t_NumericTokenStream, precisionStep),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_NumericTokenStream__methods_[] = {
          DECLARE_METHOD(t_NumericTokenStream, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NumericTokenStream, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NumericTokenStream, getPrecisionStep, METH_NOARGS),
          DECLARE_METHOD(t_NumericTokenStream, incrementToken, METH_VARARGS),
          DECLARE_METHOD(t_NumericTokenStream, reset, METH_VARARGS),
          DECLARE_METHOD(t_NumericTokenStream, setDoubleValue, METH_O),
          DECLARE_METHOD(t_NumericTokenStream, setFloatValue, METH_O),
          DECLARE_METHOD(t_NumericTokenStream, setIntValue, METH_O),
          DECLARE_METHOD(t_NumericTokenStream, setLongValue, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(NumericTokenStream, t_NumericTokenStream, ::org::apache::lucene::analysis::TokenStream, NumericTokenStream, t_NumericTokenStream_init_, 0, 0, t_NumericTokenStream__fields_, 0, 0);

        void t_NumericTokenStream::install(PyObject *module)
        {
          installType(&PY_TYPE(NumericTokenStream), module, "NumericTokenStream", 0);
          PyDict_SetItemString(PY_TYPE(NumericTokenStream).tp_dict, "NumericTermAttributeImpl", make_descriptor(&PY_TYPE(NumericTokenStream$NumericTermAttributeImpl)));
          PyDict_SetItemString(PY_TYPE(NumericTokenStream).tp_dict, "NumericTermAttribute", make_descriptor(&PY_TYPE(NumericTokenStream$NumericTermAttribute)));
        }

        void t_NumericTokenStream::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(NumericTokenStream).tp_dict, "class_", make_descriptor(NumericTokenStream::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(NumericTokenStream).tp_dict, "wrapfn_", make_descriptor(t_NumericTokenStream::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(NumericTokenStream).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(NumericTokenStream::initializeClass);
          PyDict_SetItemString(PY_TYPE(NumericTokenStream).tp_dict, "TOKEN_TYPE_FULL_PREC", make_descriptor(j2p(*NumericTokenStream::TOKEN_TYPE_FULL_PREC)));
          PyDict_SetItemString(PY_TYPE(NumericTokenStream).tp_dict, "TOKEN_TYPE_LOWER_PREC", make_descriptor(j2p(*NumericTokenStream::TOKEN_TYPE_LOWER_PREC)));
        }

        static PyObject *t_NumericTokenStream_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, NumericTokenStream::initializeClass, 1)))
            return NULL;
          return t_NumericTokenStream::wrap_Object(NumericTokenStream(((t_NumericTokenStream *) arg)->object.this$));
        }
        static PyObject *t_NumericTokenStream_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, NumericTokenStream::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_NumericTokenStream_init_(t_NumericTokenStream *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              NumericTokenStream object((jobject) NULL);

              INT_CALL(object = NumericTokenStream());
              self->object = object;
              break;
            }
            goto err;
           case 1:
            {
              jint a0;
              NumericTokenStream object((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                INT_CALL(object = NumericTokenStream(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
              jint a1;
              NumericTokenStream object((jobject) NULL);

              if (!parseArgs(args, "kI", ::org::apache::lucene::util::AttributeFactory::initializeClass, &a0, &a1))
              {
                INT_CALL(object = NumericTokenStream(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_NumericTokenStream_getPrecisionStep(t_NumericTokenStream *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getPrecisionStep());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_NumericTokenStream_incrementToken(t_NumericTokenStream *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.incrementToken());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(NumericTokenStream), (PyObject *) self, "incrementToken", args, 2);
        }

        static PyObject *t_NumericTokenStream_reset(t_NumericTokenStream *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.reset());
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(NumericTokenStream), (PyObject *) self, "reset", args, 2);
        }

        static PyObject *t_NumericTokenStream_setDoubleValue(t_NumericTokenStream *self, PyObject *arg)
        {
          jdouble a0;
          NumericTokenStream result((jobject) NULL);

          if (!parseArg(arg, "D", &a0))
          {
            OBJ_CALL(result = self->object.setDoubleValue(a0));
            return t_NumericTokenStream::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "setDoubleValue", arg);
          return NULL;
        }

        static PyObject *t_NumericTokenStream_setFloatValue(t_NumericTokenStream *self, PyObject *arg)
        {
          jfloat a0;
          NumericTokenStream result((jobject) NULL);

          if (!parseArg(arg, "F", &a0))
          {
            OBJ_CALL(result = self->object.setFloatValue(a0));
            return t_NumericTokenStream::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "setFloatValue", arg);
          return NULL;
        }

        static PyObject *t_NumericTokenStream_setIntValue(t_NumericTokenStream *self, PyObject *arg)
        {
          jint a0;
          NumericTokenStream result((jobject) NULL);

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.setIntValue(a0));
            return t_NumericTokenStream::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "setIntValue", arg);
          return NULL;
        }

        static PyObject *t_NumericTokenStream_setLongValue(t_NumericTokenStream *self, PyObject *arg)
        {
          jlong a0;
          NumericTokenStream result((jobject) NULL);

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(result = self->object.setLongValue(a0));
            return t_NumericTokenStream::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "setLongValue", arg);
          return NULL;
        }

        static int t_NumericTokenStream_set__doubleValue(t_NumericTokenStream *self, PyObject *arg, void *data)
        {
          {
            jdouble value;
            if (!parseArg(arg, "D", &value))
            {
              INT_CALL(self->object.setDoubleValue(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "doubleValue", arg);
          return -1;
        }

        static int t_NumericTokenStream_set__floatValue(t_NumericTokenStream *self, PyObject *arg, void *data)
        {
          {
            jfloat value;
            if (!parseArg(arg, "F", &value))
            {
              INT_CALL(self->object.setFloatValue(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "floatValue", arg);
          return -1;
        }

        static int t_NumericTokenStream_set__intValue(t_NumericTokenStream *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setIntValue(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "intValue", arg);
          return -1;
        }

        static int t_NumericTokenStream_set__longValue(t_NumericTokenStream *self, PyObject *arg, void *data)
        {
          {
            jlong value;
            if (!parseArg(arg, "J", &value))
            {
              INT_CALL(self->object.setLongValue(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "longValue", arg);
          return -1;
        }

        static PyObject *t_NumericTokenStream_get__precisionStep(t_NumericTokenStream *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getPrecisionStep());
          return PyInt_FromLong((long) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/MultiDocValues$OrdinalMap.h"
#include "org/apache/lucene/util/LongValues.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/Accountable.h"
#include "org/apache/lucene/index/TermsEnum.h"
#include "org/apache/lucene/index/SortedDocValues.h"
#include "org/apache/lucene/index/SortedSetDocValues.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *MultiDocValues$OrdinalMap::class$ = NULL;
        jmethodID *MultiDocValues$OrdinalMap::mids$ = NULL;
        bool MultiDocValues$OrdinalMap::live$ = false;

        jclass MultiDocValues$OrdinalMap::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/MultiDocValues$OrdinalMap");

            mids$ = new jmethodID[max_mid];
            mids$[mid_build_78c390b1] = env->getStaticMethodID(cls, "build", "(Ljava/lang/Object;[Lorg/apache/lucene/index/SortedDocValues;F)Lorg/apache/lucene/index/MultiDocValues$OrdinalMap;");
            mids$[mid_build_b46fc78e] = env->getStaticMethodID(cls, "build", "(Ljava/lang/Object;[Lorg/apache/lucene/index/SortedSetDocValues;F)Lorg/apache/lucene/index/MultiDocValues$OrdinalMap;");
            mids$[mid_build_1c35266b] = env->getStaticMethodID(cls, "build", "(Ljava/lang/Object;[Lorg/apache/lucene/index/TermsEnum;[JF)Lorg/apache/lucene/index/MultiDocValues$OrdinalMap;");
            mids$[mid_getFirstSegmentNumber_0ee6df30] = env->getMethodID(cls, "getFirstSegmentNumber", "(J)I");
            mids$[mid_getFirstSegmentOrd_0ee6df33] = env->getMethodID(cls, "getFirstSegmentOrd", "(J)J");
            mids$[mid_getGlobalOrds_f3def9cd] = env->getMethodID(cls, "getGlobalOrds", "(I)Lorg/apache/lucene/util/LongValues;");
            mids$[mid_getValueCount_54c6a17a] = env->getMethodID(cls, "getValueCount", "()J");
            mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        MultiDocValues$OrdinalMap MultiDocValues$OrdinalMap::build(const ::java::lang::Object & a0, const JArray< ::org::apache::lucene::index::SortedDocValues > & a1, jfloat a2)
        {
          jclass cls = env->getClass(initializeClass);
          return MultiDocValues$OrdinalMap(env->callStaticObjectMethod(cls, mids$[mid_build_78c390b1], a0.this$, a1.this$, a2));
        }

        MultiDocValues$OrdinalMap MultiDocValues$OrdinalMap::build(const ::java::lang::Object & a0, const JArray< ::org::apache::lucene::index::SortedSetDocValues > & a1, jfloat a2)
        {
          jclass cls = env->getClass(initializeClass);
          return MultiDocValues$OrdinalMap(env->callStaticObjectMethod(cls, mids$[mid_build_b46fc78e], a0.this$, a1.this$, a2));
        }

        MultiDocValues$OrdinalMap MultiDocValues$OrdinalMap::build(const ::java::lang::Object & a0, const JArray< ::org::apache::lucene::index::TermsEnum > & a1, const JArray< jlong > & a2, jfloat a3)
        {
          jclass cls = env->getClass(initializeClass);
          return MultiDocValues$OrdinalMap(env->callStaticObjectMethod(cls, mids$[mid_build_1c35266b], a0.this$, a1.this$, a2.this$, a3));
        }

        jint MultiDocValues$OrdinalMap::getFirstSegmentNumber(jlong a0) const
        {
          return env->callIntMethod(this$, mids$[mid_getFirstSegmentNumber_0ee6df30], a0);
        }

        jlong MultiDocValues$OrdinalMap::getFirstSegmentOrd(jlong a0) const
        {
          return env->callLongMethod(this$, mids$[mid_getFirstSegmentOrd_0ee6df33], a0);
        }

        ::org::apache::lucene::util::LongValues MultiDocValues$OrdinalMap::getGlobalOrds(jint a0) const
        {
          return ::org::apache::lucene::util::LongValues(env->callObjectMethod(this$, mids$[mid_getGlobalOrds_f3def9cd], a0));
        }

        jlong MultiDocValues$OrdinalMap::getValueCount() const
        {
          return env->callLongMethod(this$, mids$[mid_getValueCount_54c6a17a]);
        }

        jlong MultiDocValues$OrdinalMap::ramBytesUsed() const
        {
          return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_MultiDocValues$OrdinalMap_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiDocValues$OrdinalMap_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiDocValues$OrdinalMap_build(PyTypeObject *type, PyObject *args);
        static PyObject *t_MultiDocValues$OrdinalMap_getFirstSegmentNumber(t_MultiDocValues$OrdinalMap *self, PyObject *arg);
        static PyObject *t_MultiDocValues$OrdinalMap_getFirstSegmentOrd(t_MultiDocValues$OrdinalMap *self, PyObject *arg);
        static PyObject *t_MultiDocValues$OrdinalMap_getGlobalOrds(t_MultiDocValues$OrdinalMap *self, PyObject *arg);
        static PyObject *t_MultiDocValues$OrdinalMap_getValueCount(t_MultiDocValues$OrdinalMap *self);
        static PyObject *t_MultiDocValues$OrdinalMap_ramBytesUsed(t_MultiDocValues$OrdinalMap *self);
        static PyObject *t_MultiDocValues$OrdinalMap_get__valueCount(t_MultiDocValues$OrdinalMap *self, void *data);
        static PyGetSetDef t_MultiDocValues$OrdinalMap__fields_[] = {
          DECLARE_GET_FIELD(t_MultiDocValues$OrdinalMap, valueCount),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_MultiDocValues$OrdinalMap__methods_[] = {
          DECLARE_METHOD(t_MultiDocValues$OrdinalMap, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiDocValues$OrdinalMap, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiDocValues$OrdinalMap, build, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_MultiDocValues$OrdinalMap, getFirstSegmentNumber, METH_O),
          DECLARE_METHOD(t_MultiDocValues$OrdinalMap, getFirstSegmentOrd, METH_O),
          DECLARE_METHOD(t_MultiDocValues$OrdinalMap, getGlobalOrds, METH_O),
          DECLARE_METHOD(t_MultiDocValues$OrdinalMap, getValueCount, METH_NOARGS),
          DECLARE_METHOD(t_MultiDocValues$OrdinalMap, ramBytesUsed, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MultiDocValues$OrdinalMap, t_MultiDocValues$OrdinalMap, ::java::lang::Object, MultiDocValues$OrdinalMap, abstract_init, 0, 0, t_MultiDocValues$OrdinalMap__fields_, 0, 0);

        void t_MultiDocValues$OrdinalMap::install(PyObject *module)
        {
          installType(&PY_TYPE(MultiDocValues$OrdinalMap), module, "MultiDocValues$OrdinalMap", 0);
        }

        void t_MultiDocValues$OrdinalMap::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MultiDocValues$OrdinalMap).tp_dict, "class_", make_descriptor(MultiDocValues$OrdinalMap::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MultiDocValues$OrdinalMap).tp_dict, "wrapfn_", make_descriptor(t_MultiDocValues$OrdinalMap::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MultiDocValues$OrdinalMap).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MultiDocValues$OrdinalMap_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MultiDocValues$OrdinalMap::initializeClass, 1)))
            return NULL;
          return t_MultiDocValues$OrdinalMap::wrap_Object(MultiDocValues$OrdinalMap(((t_MultiDocValues$OrdinalMap *) arg)->object.this$));
        }
        static PyObject *t_MultiDocValues$OrdinalMap_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MultiDocValues$OrdinalMap::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_MultiDocValues$OrdinalMap_build(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 3:
            {
              ::java::lang::Object a0((jobject) NULL);
              JArray< ::org::apache::lucene::index::SortedDocValues > a1((jobject) NULL);
              jfloat a2;
              MultiDocValues$OrdinalMap result((jobject) NULL);

              if (!parseArgs(args, "o[kF", ::org::apache::lucene::index::SortedDocValues::initializeClass, &a0, &a1, &a2))
              {
                OBJ_CALL(result = ::org::apache::lucene::index::MultiDocValues$OrdinalMap::build(a0, a1, a2));
                return t_MultiDocValues$OrdinalMap::wrap_Object(result);
              }
            }
            {
              ::java::lang::Object a0((jobject) NULL);
              JArray< ::org::apache::lucene::index::SortedSetDocValues > a1((jobject) NULL);
              jfloat a2;
              MultiDocValues$OrdinalMap result((jobject) NULL);

              if (!parseArgs(args, "o[kF", ::org::apache::lucene::index::SortedSetDocValues::initializeClass, &a0, &a1, &a2))
              {
                OBJ_CALL(result = ::org::apache::lucene::index::MultiDocValues$OrdinalMap::build(a0, a1, a2));
                return t_MultiDocValues$OrdinalMap::wrap_Object(result);
              }
            }
            break;
           case 4:
            {
              ::java::lang::Object a0((jobject) NULL);
              JArray< ::org::apache::lucene::index::TermsEnum > a1((jobject) NULL);
              JArray< jlong > a2((jobject) NULL);
              jfloat a3;
              MultiDocValues$OrdinalMap result((jobject) NULL);

              if (!parseArgs(args, "o[k[JF", ::org::apache::lucene::index::TermsEnum::initializeClass, &a0, &a1, &a2, &a3))
              {
                OBJ_CALL(result = ::org::apache::lucene::index::MultiDocValues$OrdinalMap::build(a0, a1, a2, a3));
                return t_MultiDocValues$OrdinalMap::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError(type, "build", args);
          return NULL;
        }

        static PyObject *t_MultiDocValues$OrdinalMap_getFirstSegmentNumber(t_MultiDocValues$OrdinalMap *self, PyObject *arg)
        {
          jlong a0;
          jint result;

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(result = self->object.getFirstSegmentNumber(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "getFirstSegmentNumber", arg);
          return NULL;
        }

        static PyObject *t_MultiDocValues$OrdinalMap_getFirstSegmentOrd(t_MultiDocValues$OrdinalMap *self, PyObject *arg)
        {
          jlong a0;
          jlong result;

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(result = self->object.getFirstSegmentOrd(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError((PyObject *) self, "getFirstSegmentOrd", arg);
          return NULL;
        }

        static PyObject *t_MultiDocValues$OrdinalMap_getGlobalOrds(t_MultiDocValues$OrdinalMap *self, PyObject *arg)
        {
          jint a0;
          ::org::apache::lucene::util::LongValues result((jobject) NULL);

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.getGlobalOrds(a0));
            return ::org::apache::lucene::util::t_LongValues::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getGlobalOrds", arg);
          return NULL;
        }

        static PyObject *t_MultiDocValues$OrdinalMap_getValueCount(t_MultiDocValues$OrdinalMap *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getValueCount());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_MultiDocValues$OrdinalMap_ramBytesUsed(t_MultiDocValues$OrdinalMap *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.ramBytesUsed());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_MultiDocValues$OrdinalMap_get__valueCount(t_MultiDocValues$OrdinalMap *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getValueCount());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/grouping/CollectedSearchGroup.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {

          ::java::lang::Class *CollectedSearchGroup::class$ = NULL;
          jmethodID *CollectedSearchGroup::mids$ = NULL;
          bool CollectedSearchGroup::live$ = false;

          jclass CollectedSearchGroup::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/grouping/CollectedSearchGroup");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CollectedSearchGroup::CollectedSearchGroup() : ::org::apache::lucene::search::grouping::SearchGroup(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          static PyObject *t_CollectedSearchGroup_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CollectedSearchGroup_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CollectedSearchGroup_of_(t_CollectedSearchGroup *self, PyObject *args);
          static int t_CollectedSearchGroup_init_(t_CollectedSearchGroup *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CollectedSearchGroup_get__parameters_(t_CollectedSearchGroup *self, void *data);
          static PyGetSetDef t_CollectedSearchGroup__fields_[] = {
            DECLARE_GET_FIELD(t_CollectedSearchGroup, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_CollectedSearchGroup__methods_[] = {
            DECLARE_METHOD(t_CollectedSearchGroup, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CollectedSearchGroup, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CollectedSearchGroup, of_, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CollectedSearchGroup, t_CollectedSearchGroup, ::org::apache::lucene::search::grouping::SearchGroup, CollectedSearchGroup, t_CollectedSearchGroup_init_, 0, 0, t_CollectedSearchGroup__fields_, 0, 0);
          PyObject *t_CollectedSearchGroup::wrap_Object(const CollectedSearchGroup& object, PyTypeObject *p0)
          {
            PyObject *obj = t_CollectedSearchGroup::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_CollectedSearchGroup *self = (t_CollectedSearchGroup *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_CollectedSearchGroup::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_CollectedSearchGroup::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_CollectedSearchGroup *self = (t_CollectedSearchGroup *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_CollectedSearchGroup::install(PyObject *module)
          {
            installType(&PY_TYPE(CollectedSearchGroup), module, "CollectedSearchGroup", 0);
          }

          void t_CollectedSearchGroup::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CollectedSearchGroup).tp_dict, "class_", make_descriptor(CollectedSearchGroup::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CollectedSearchGroup).tp_dict, "wrapfn_", make_descriptor(t_CollectedSearchGroup::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CollectedSearchGroup).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CollectedSearchGroup_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CollectedSearchGroup::initializeClass, 1)))
              return NULL;
            return t_CollectedSearchGroup::wrap_Object(CollectedSearchGroup(((t_CollectedSearchGroup *) arg)->object.this$));
          }
          static PyObject *t_CollectedSearchGroup_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CollectedSearchGroup::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_CollectedSearchGroup_of_(t_CollectedSearchGroup *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_CollectedSearchGroup_init_(t_CollectedSearchGroup *self, PyObject *args, PyObject *kwds)
          {
            CollectedSearchGroup object((jobject) NULL);

            INT_CALL(object = CollectedSearchGroup());
            self->object = object;

            return 0;
          }
          static PyObject *t_CollectedSearchGroup_get__parameters_(t_CollectedSearchGroup *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/grouping/TopGroups$ScoreMergeMode.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {

          ::java::lang::Class *TopGroups$ScoreMergeMode::class$ = NULL;
          jmethodID *TopGroups$ScoreMergeMode::mids$ = NULL;
          bool TopGroups$ScoreMergeMode::live$ = false;
          TopGroups$ScoreMergeMode *TopGroups$ScoreMergeMode::Avg = NULL;
          TopGroups$ScoreMergeMode *TopGroups$ScoreMergeMode::None = NULL;
          TopGroups$ScoreMergeMode *TopGroups$ScoreMergeMode::Total = NULL;

          jclass TopGroups$ScoreMergeMode::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/grouping/TopGroups$ScoreMergeMode");

              mids$ = new jmethodID[max_mid];
              mids$[mid_valueOf_10e490e6] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/search/grouping/TopGroups$ScoreMergeMode;");
              mids$[mid_values_88270724] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/search/grouping/TopGroups$ScoreMergeMode;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              Avg = new TopGroups$ScoreMergeMode(env->getStaticObjectField(cls, "Avg", "Lorg/apache/lucene/search/grouping/TopGroups$ScoreMergeMode;"));
              None = new TopGroups$ScoreMergeMode(env->getStaticObjectField(cls, "None", "Lorg/apache/lucene/search/grouping/TopGroups$ScoreMergeMode;"));
              Total = new TopGroups$ScoreMergeMode(env->getStaticObjectField(cls, "Total", "Lorg/apache/lucene/search/grouping/TopGroups$ScoreMergeMode;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TopGroups$ScoreMergeMode TopGroups$ScoreMergeMode::valueOf(const ::java::lang::String & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return TopGroups$ScoreMergeMode(env->callStaticObjectMethod(cls, mids$[mid_valueOf_10e490e6], a0.this$));
          }

          JArray< TopGroups$ScoreMergeMode > TopGroups$ScoreMergeMode::values()
          {
            jclass cls = env->getClass(initializeClass);
            return JArray< TopGroups$ScoreMergeMode >(env->callStaticObjectMethod(cls, mids$[mid_values_88270724]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          static PyObject *t_TopGroups$ScoreMergeMode_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TopGroups$ScoreMergeMode_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TopGroups$ScoreMergeMode_of_(t_TopGroups$ScoreMergeMode *self, PyObject *args);
          static PyObject *t_TopGroups$ScoreMergeMode_valueOf(PyTypeObject *type, PyObject *args);
          static PyObject *t_TopGroups$ScoreMergeMode_values(PyTypeObject *type);
          static PyObject *t_TopGroups$ScoreMergeMode_get__parameters_(t_TopGroups$ScoreMergeMode *self, void *data);
          static PyGetSetDef t_TopGroups$ScoreMergeMode__fields_[] = {
            DECLARE_GET_FIELD(t_TopGroups$ScoreMergeMode, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_TopGroups$ScoreMergeMode__methods_[] = {
            DECLARE_METHOD(t_TopGroups$ScoreMergeMode, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TopGroups$ScoreMergeMode, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TopGroups$ScoreMergeMode, of_, METH_VARARGS),
            DECLARE_METHOD(t_TopGroups$ScoreMergeMode, valueOf, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_TopGroups$ScoreMergeMode, values, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(TopGroups$ScoreMergeMode, t_TopGroups$ScoreMergeMode, ::java::lang::Enum, TopGroups$ScoreMergeMode, abstract_init, 0, 0, t_TopGroups$ScoreMergeMode__fields_, 0, 0);
          PyObject *t_TopGroups$ScoreMergeMode::wrap_Object(const TopGroups$ScoreMergeMode& object, PyTypeObject *p0)
          {
            PyObject *obj = t_TopGroups$ScoreMergeMode::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_TopGroups$ScoreMergeMode *self = (t_TopGroups$ScoreMergeMode *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_TopGroups$ScoreMergeMode::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_TopGroups$ScoreMergeMode::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_TopGroups$ScoreMergeMode *self = (t_TopGroups$ScoreMergeMode *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_TopGroups$ScoreMergeMode::install(PyObject *module)
          {
            installType(&PY_TYPE(TopGroups$ScoreMergeMode), module, "TopGroups$ScoreMergeMode", 0);
          }

          void t_TopGroups$ScoreMergeMode::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(TopGroups$ScoreMergeMode).tp_dict, "class_", make_descriptor(TopGroups$ScoreMergeMode::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(TopGroups$ScoreMergeMode).tp_dict, "wrapfn_", make_descriptor(t_TopGroups$ScoreMergeMode::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(TopGroups$ScoreMergeMode).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(TopGroups$ScoreMergeMode::initializeClass);
            PyDict_SetItemString(PY_TYPE(TopGroups$ScoreMergeMode).tp_dict, "Avg", make_descriptor(t_TopGroups$ScoreMergeMode::wrap_Object(*TopGroups$ScoreMergeMode::Avg)));
            PyDict_SetItemString(PY_TYPE(TopGroups$ScoreMergeMode).tp_dict, "None", make_descriptor(t_TopGroups$ScoreMergeMode::wrap_Object(*TopGroups$ScoreMergeMode::None)));
            PyDict_SetItemString(PY_TYPE(TopGroups$ScoreMergeMode).tp_dict, "Total", make_descriptor(t_TopGroups$ScoreMergeMode::wrap_Object(*TopGroups$ScoreMergeMode::Total)));
          }

          static PyObject *t_TopGroups$ScoreMergeMode_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TopGroups$ScoreMergeMode::initializeClass, 1)))
              return NULL;
            return t_TopGroups$ScoreMergeMode::wrap_Object(TopGroups$ScoreMergeMode(((t_TopGroups$ScoreMergeMode *) arg)->object.this$));
          }
          static PyObject *t_TopGroups$ScoreMergeMode_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TopGroups$ScoreMergeMode::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_TopGroups$ScoreMergeMode_of_(t_TopGroups$ScoreMergeMode *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static PyObject *t_TopGroups$ScoreMergeMode_valueOf(PyTypeObject *type, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            TopGroups$ScoreMergeMode result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::search::grouping::TopGroups$ScoreMergeMode::valueOf(a0));
              return t_TopGroups$ScoreMergeMode::wrap_Object(result);
            }

            return callSuper(type, "valueOf", args, 2);
          }

          static PyObject *t_TopGroups$ScoreMergeMode_values(PyTypeObject *type)
          {
            JArray< TopGroups$ScoreMergeMode > result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::search::grouping::TopGroups$ScoreMergeMode::values());
            return JArray<jobject>(result.this$).wrap(t_TopGroups$ScoreMergeMode::wrap_jobject);
          }
          static PyObject *t_TopGroups$ScoreMergeMode_get__parameters_(t_TopGroups$ScoreMergeMode *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/complexPhrase/ComplexPhraseQueryParser.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/classic/ParseException.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Query.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace complexPhrase {

          ::java::lang::Class *ComplexPhraseQueryParser::class$ = NULL;
          jmethodID *ComplexPhraseQueryParser::mids$ = NULL;
          bool ComplexPhraseQueryParser::live$ = false;

          jclass ComplexPhraseQueryParser::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/complexPhrase/ComplexPhraseQueryParser");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_d77cc89a] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/analysis/Analyzer;)V");
              mids$[mid_init$_504c192d] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Ljava/lang/String;Lorg/apache/lucene/analysis/Analyzer;)V");
              mids$[mid_parse_fbed2634] = env->getMethodID(cls, "parse", "(Ljava/lang/String;)Lorg/apache/lucene/search/Query;");
              mids$[mid_setInOrder_bb0c767f] = env->getMethodID(cls, "setInOrder", "(Z)V");
              mids$[mid_getFieldQuery_c7c8d9a8] = env->getMethodID(cls, "getFieldQuery", "(Ljava/lang/String;Ljava/lang/String;I)Lorg/apache/lucene/search/Query;");
              mids$[mid_newTermQuery_c8bbbdc7] = env->getMethodID(cls, "newTermQuery", "(Lorg/apache/lucene/index/Term;)Lorg/apache/lucene/search/Query;");
              mids$[mid_getWildcardQuery_38d6e77e] = env->getMethodID(cls, "getWildcardQuery", "(Ljava/lang/String;Ljava/lang/String;)Lorg/apache/lucene/search/Query;");
              mids$[mid_getRangeQuery_75fd45b6] = env->getMethodID(cls, "getRangeQuery", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ZZ)Lorg/apache/lucene/search/Query;");
              mids$[mid_newRangeQuery_75fd45b6] = env->getMethodID(cls, "newRangeQuery", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ZZ)Lorg/apache/lucene/search/Query;");
              mids$[mid_getFuzzyQuery_45995161] = env->getMethodID(cls, "getFuzzyQuery", "(Ljava/lang/String;Ljava/lang/String;F)Lorg/apache/lucene/search/Query;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ComplexPhraseQueryParser::ComplexPhraseQueryParser(const ::java::lang::String & a0, const ::org::apache::lucene::analysis::Analyzer & a1) : ::org::apache::lucene::queryparser::classic::QueryParser(env->newObject(initializeClass, &mids$, mid_init$_d77cc89a, a0.this$, a1.this$)) {}

          ComplexPhraseQueryParser::ComplexPhraseQueryParser(const ::org::apache::lucene::util::Version & a0, const ::java::lang::String & a1, const ::org::apache::lucene::analysis::Analyzer & a2) : ::org::apache::lucene::queryparser::classic::QueryParser(env->newObject(initializeClass, &mids$, mid_init$_504c192d, a0.this$, a1.this$, a2.this$)) {}

          ::org::apache::lucene::search::Query ComplexPhraseQueryParser::parse(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_parse_fbed2634], a0.this$));
          }

          void ComplexPhraseQueryParser::setInOrder(jboolean a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setInOrder_bb0c767f], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace complexPhrase {
          static PyObject *t_ComplexPhraseQueryParser_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ComplexPhraseQueryParser_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ComplexPhraseQueryParser_init_(t_ComplexPhraseQueryParser *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ComplexPhraseQueryParser_parse(t_ComplexPhraseQueryParser *self, PyObject *args);
          static PyObject *t_ComplexPhraseQueryParser_setInOrder(t_ComplexPhraseQueryParser *self, PyObject *arg);
          static int t_ComplexPhraseQueryParser_set__inOrder(t_ComplexPhraseQueryParser *self, PyObject *arg, void *data);
          static PyGetSetDef t_ComplexPhraseQueryParser__fields_[] = {
            DECLARE_SET_FIELD(t_ComplexPhraseQueryParser, inOrder),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_ComplexPhraseQueryParser__methods_[] = {
            DECLARE_METHOD(t_ComplexPhraseQueryParser, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ComplexPhraseQueryParser, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ComplexPhraseQueryParser, parse, METH_VARARGS),
            DECLARE_METHOD(t_ComplexPhraseQueryParser, setInOrder, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ComplexPhraseQueryParser, t_ComplexPhraseQueryParser, ::org::apache::lucene::queryparser::classic::QueryParser, ComplexPhraseQueryParser, t_ComplexPhraseQueryParser_init_, 0, 0, t_ComplexPhraseQueryParser__fields_, 0, 0);

          void t_ComplexPhraseQueryParser::install(PyObject *module)
          {
            installType(&PY_TYPE(ComplexPhraseQueryParser), module, "ComplexPhraseQueryParser", 0);
          }

          void t_ComplexPhraseQueryParser::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ComplexPhraseQueryParser).tp_dict, "class_", make_descriptor(ComplexPhraseQueryParser::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ComplexPhraseQueryParser).tp_dict, "wrapfn_", make_descriptor(t_ComplexPhraseQueryParser::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ComplexPhraseQueryParser).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ComplexPhraseQueryParser_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ComplexPhraseQueryParser::initializeClass, 1)))
              return NULL;
            return t_ComplexPhraseQueryParser::wrap_Object(ComplexPhraseQueryParser(((t_ComplexPhraseQueryParser *) arg)->object.this$));
          }
          static PyObject *t_ComplexPhraseQueryParser_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ComplexPhraseQueryParser::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ComplexPhraseQueryParser_init_(t_ComplexPhraseQueryParser *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::java::lang::String a0((jobject) NULL);
                ::org::apache::lucene::analysis::Analyzer a1((jobject) NULL);
                ComplexPhraseQueryParser object((jobject) NULL);

                if (!parseArgs(args, "sk", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = ComplexPhraseQueryParser(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                ::org::apache::lucene::analysis::Analyzer a2((jobject) NULL);
                ComplexPhraseQueryParser object((jobject) NULL);

                if (!parseArgs(args, "ksk", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = ComplexPhraseQueryParser(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ComplexPhraseQueryParser_parse(t_ComplexPhraseQueryParser *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = self->object.parse(a0));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(ComplexPhraseQueryParser), (PyObject *) self, "parse", args, 2);
          }

          static PyObject *t_ComplexPhraseQueryParser_setInOrder(t_ComplexPhraseQueryParser *self, PyObject *arg)
          {
            jboolean a0;

            if (!parseArg(arg, "Z", &a0))
            {
              OBJ_CALL(self->object.setInOrder(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setInOrder", arg);
            return NULL;
          }

          static int t_ComplexPhraseQueryParser_set__inOrder(t_ComplexPhraseQueryParser *self, PyObject *arg, void *data)
          {
            {
              jboolean value;
              if (!parseArg(arg, "Z", &value))
              {
                INT_CALL(self->object.setInOrder(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "inOrder", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/CachingWrapperFilter.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/util/Bits.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/DocIdSet.h"
#include "org/apache/lucene/util/Accountable.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *CachingWrapperFilter::class$ = NULL;
        jmethodID *CachingWrapperFilter::mids$ = NULL;
        bool CachingWrapperFilter::live$ = false;

        jclass CachingWrapperFilter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/CachingWrapperFilter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_9bb37152] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Filter;)V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_getDocIdSet_ccce0897] = env->getMethodID(cls, "getDocIdSet", "(Lorg/apache/lucene/index/AtomicReaderContext;Lorg/apache/lucene/util/Bits;)Lorg/apache/lucene/search/DocIdSet;");
            mids$[mid_getFilter_b40f961f] = env->getMethodID(cls, "getFilter", "()Lorg/apache/lucene/search/Filter;");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
            mids$[mid_docIdSetToCache_5fee2a54] = env->getMethodID(cls, "docIdSetToCache", "(Lorg/apache/lucene/search/DocIdSet;Lorg/apache/lucene/index/AtomicReader;)Lorg/apache/lucene/search/DocIdSet;");
            mids$[mid_cacheImpl_33cb740e] = env->getMethodID(cls, "cacheImpl", "(Lorg/apache/lucene/search/DocIdSetIterator;Lorg/apache/lucene/index/AtomicReader;)Lorg/apache/lucene/search/DocIdSet;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        CachingWrapperFilter::CachingWrapperFilter(const ::org::apache::lucene::search::Filter & a0) : ::org::apache::lucene::search::Filter(env->newObject(initializeClass, &mids$, mid_init$_9bb37152, a0.this$)) {}

        jboolean CachingWrapperFilter::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        ::org::apache::lucene::search::DocIdSet CachingWrapperFilter::getDocIdSet(const ::org::apache::lucene::index::AtomicReaderContext & a0, const ::org::apache::lucene::util::Bits & a1) const
        {
          return ::org::apache::lucene::search::DocIdSet(env->callObjectMethod(this$, mids$[mid_getDocIdSet_ccce0897], a0.this$, a1.this$));
        }

        ::org::apache::lucene::search::Filter CachingWrapperFilter::getFilter() const
        {
          return ::org::apache::lucene::search::Filter(env->callObjectMethod(this$, mids$[mid_getFilter_b40f961f]));
        }

        jint CachingWrapperFilter::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jlong CachingWrapperFilter::ramBytesUsed() const
        {
          return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
        }

        ::java::lang::String CachingWrapperFilter::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_CachingWrapperFilter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CachingWrapperFilter_instance_(PyTypeObject *type, PyObject *arg);
        static int t_CachingWrapperFilter_init_(t_CachingWrapperFilter *self, PyObject *args, PyObject *kwds);
        static PyObject *t_CachingWrapperFilter_equals(t_CachingWrapperFilter *self, PyObject *args);
        static PyObject *t_CachingWrapperFilter_getDocIdSet(t_CachingWrapperFilter *self, PyObject *args);
        static PyObject *t_CachingWrapperFilter_getFilter(t_CachingWrapperFilter *self);
        static PyObject *t_CachingWrapperFilter_hashCode(t_CachingWrapperFilter *self, PyObject *args);
        static PyObject *t_CachingWrapperFilter_ramBytesUsed(t_CachingWrapperFilter *self);
        static PyObject *t_CachingWrapperFilter_toString(t_CachingWrapperFilter *self, PyObject *args);
        static PyObject *t_CachingWrapperFilter_get__filter(t_CachingWrapperFilter *self, void *data);
        static PyGetSetDef t_CachingWrapperFilter__fields_[] = {
          DECLARE_GET_FIELD(t_CachingWrapperFilter, filter),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_CachingWrapperFilter__methods_[] = {
          DECLARE_METHOD(t_CachingWrapperFilter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CachingWrapperFilter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CachingWrapperFilter, equals, METH_VARARGS),
          DECLARE_METHOD(t_CachingWrapperFilter, getDocIdSet, METH_VARARGS),
          DECLARE_METHOD(t_CachingWrapperFilter, getFilter, METH_NOARGS),
          DECLARE_METHOD(t_CachingWrapperFilter, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_CachingWrapperFilter, ramBytesUsed, METH_NOARGS),
          DECLARE_METHOD(t_CachingWrapperFilter, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(CachingWrapperFilter, t_CachingWrapperFilter, ::org::apache::lucene::search::Filter, CachingWrapperFilter, t_CachingWrapperFilter_init_, 0, 0, t_CachingWrapperFilter__fields_, 0, 0);

        void t_CachingWrapperFilter::install(PyObject *module)
        {
          installType(&PY_TYPE(CachingWrapperFilter), module, "CachingWrapperFilter", 0);
        }

        void t_CachingWrapperFilter::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(CachingWrapperFilter).tp_dict, "class_", make_descriptor(CachingWrapperFilter::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(CachingWrapperFilter).tp_dict, "wrapfn_", make_descriptor(t_CachingWrapperFilter::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(CachingWrapperFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_CachingWrapperFilter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CachingWrapperFilter::initializeClass, 1)))
            return NULL;
          return t_CachingWrapperFilter::wrap_Object(CachingWrapperFilter(((t_CachingWrapperFilter *) arg)->object.this$));
        }
        static PyObject *t_CachingWrapperFilter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CachingWrapperFilter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_CachingWrapperFilter_init_(t_CachingWrapperFilter *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::search::Filter a0((jobject) NULL);
          CachingWrapperFilter object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::search::Filter::initializeClass, &a0))
          {
            INT_CALL(object = CachingWrapperFilter(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_CachingWrapperFilter_equals(t_CachingWrapperFilter *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(CachingWrapperFilter), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_CachingWrapperFilter_getDocIdSet(t_CachingWrapperFilter *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
          ::org::apache::lucene::util::Bits a1((jobject) NULL);
          ::org::apache::lucene::search::DocIdSet result((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.getDocIdSet(a0, a1));
            return ::org::apache::lucene::search::t_DocIdSet::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(CachingWrapperFilter), (PyObject *) self, "getDocIdSet", args, 2);
        }

        static PyObject *t_CachingWrapperFilter_getFilter(t_CachingWrapperFilter *self)
        {
          ::org::apache::lucene::search::Filter result((jobject) NULL);
          OBJ_CALL(result = self->object.getFilter());
          return ::org::apache::lucene::search::t_Filter::wrap_Object(result);
        }

        static PyObject *t_CachingWrapperFilter_hashCode(t_CachingWrapperFilter *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(CachingWrapperFilter), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_CachingWrapperFilter_ramBytesUsed(t_CachingWrapperFilter *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.ramBytesUsed());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_CachingWrapperFilter_toString(t_CachingWrapperFilter *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(CachingWrapperFilter), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_CachingWrapperFilter_get__filter(t_CachingWrapperFilter *self, void *data)
        {
          ::org::apache::lucene::search::Filter value((jobject) NULL);
          OBJ_CALL(value = self->object.getFilter());
          return ::org::apache::lucene::search::t_Filter::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/tartarus/snowball/ext/EnglishStemmer.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {

        ::java::lang::Class *EnglishStemmer::class$ = NULL;
        jmethodID *EnglishStemmer::mids$ = NULL;
        bool EnglishStemmer::live$ = false;

        jclass EnglishStemmer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/tartarus/snowball/ext/EnglishStemmer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_stem_54c6a16a] = env->getMethodID(cls, "stem", "()Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        EnglishStemmer::EnglishStemmer() : ::org::tartarus::snowball::SnowballProgram(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jboolean EnglishStemmer::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        jint EnglishStemmer::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jboolean EnglishStemmer::stem() const
        {
          return env->callBooleanMethod(this$, mids$[mid_stem_54c6a16a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {
        static PyObject *t_EnglishStemmer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_EnglishStemmer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_EnglishStemmer_init_(t_EnglishStemmer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_EnglishStemmer_equals(t_EnglishStemmer *self, PyObject *args);
        static PyObject *t_EnglishStemmer_hashCode(t_EnglishStemmer *self, PyObject *args);
        static PyObject *t_EnglishStemmer_stem(t_EnglishStemmer *self, PyObject *args);

        static PyMethodDef t_EnglishStemmer__methods_[] = {
          DECLARE_METHOD(t_EnglishStemmer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_EnglishStemmer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_EnglishStemmer, equals, METH_VARARGS),
          DECLARE_METHOD(t_EnglishStemmer, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_EnglishStemmer, stem, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(EnglishStemmer, t_EnglishStemmer, ::org::tartarus::snowball::SnowballProgram, EnglishStemmer, t_EnglishStemmer_init_, 0, 0, 0, 0, 0);

        void t_EnglishStemmer::install(PyObject *module)
        {
          installType(&PY_TYPE(EnglishStemmer), module, "EnglishStemmer", 0);
        }

        void t_EnglishStemmer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(EnglishStemmer).tp_dict, "class_", make_descriptor(EnglishStemmer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(EnglishStemmer).tp_dict, "wrapfn_", make_descriptor(t_EnglishStemmer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(EnglishStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_EnglishStemmer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, EnglishStemmer::initializeClass, 1)))
            return NULL;
          return t_EnglishStemmer::wrap_Object(EnglishStemmer(((t_EnglishStemmer *) arg)->object.this$));
        }
        static PyObject *t_EnglishStemmer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, EnglishStemmer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_EnglishStemmer_init_(t_EnglishStemmer *self, PyObject *args, PyObject *kwds)
        {
          EnglishStemmer object((jobject) NULL);

          INT_CALL(object = EnglishStemmer());
          self->object = object;

          return 0;
        }

        static PyObject *t_EnglishStemmer_equals(t_EnglishStemmer *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(EnglishStemmer), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_EnglishStemmer_hashCode(t_EnglishStemmer *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(EnglishStemmer), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_EnglishStemmer_stem(t_EnglishStemmer *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.stem());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(EnglishStemmer), (PyObject *) self, "stem", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/TermRangeQueryNodeBuilder.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/StandardQueryBuilder.h"
#include "org/apache/lucene/search/TermRangeQuery.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {

              ::java::lang::Class *TermRangeQueryNodeBuilder::class$ = NULL;
              jmethodID *TermRangeQueryNodeBuilder::mids$ = NULL;
              bool TermRangeQueryNodeBuilder::live$ = false;

              jclass TermRangeQueryNodeBuilder::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/builders/TermRangeQueryNodeBuilder");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_build_fc6e9165] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/search/TermRangeQuery;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              TermRangeQueryNodeBuilder::TermRangeQueryNodeBuilder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              ::org::apache::lucene::search::TermRangeQuery TermRangeQueryNodeBuilder::build(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                return ::org::apache::lucene::search::TermRangeQuery(env->callObjectMethod(this$, mids$[mid_build_fc6e9165], a0.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {
              static PyObject *t_TermRangeQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_TermRangeQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg);
              static int t_TermRangeQueryNodeBuilder_init_(t_TermRangeQueryNodeBuilder *self, PyObject *args, PyObject *kwds);
              static PyObject *t_TermRangeQueryNodeBuilder_build(t_TermRangeQueryNodeBuilder *self, PyObject *arg);

              static PyMethodDef t_TermRangeQueryNodeBuilder__methods_[] = {
                DECLARE_METHOD(t_TermRangeQueryNodeBuilder, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_TermRangeQueryNodeBuilder, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_TermRangeQueryNodeBuilder, build, METH_O),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(TermRangeQueryNodeBuilder, t_TermRangeQueryNodeBuilder, ::java::lang::Object, TermRangeQueryNodeBuilder, t_TermRangeQueryNodeBuilder_init_, 0, 0, 0, 0, 0);

              void t_TermRangeQueryNodeBuilder::install(PyObject *module)
              {
                installType(&PY_TYPE(TermRangeQueryNodeBuilder), module, "TermRangeQueryNodeBuilder", 0);
              }

              void t_TermRangeQueryNodeBuilder::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(TermRangeQueryNodeBuilder).tp_dict, "class_", make_descriptor(TermRangeQueryNodeBuilder::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(TermRangeQueryNodeBuilder).tp_dict, "wrapfn_", make_descriptor(t_TermRangeQueryNodeBuilder::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(TermRangeQueryNodeBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_TermRangeQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, TermRangeQueryNodeBuilder::initializeClass, 1)))
                  return NULL;
                return t_TermRangeQueryNodeBuilder::wrap_Object(TermRangeQueryNodeBuilder(((t_TermRangeQueryNodeBuilder *) arg)->object.this$));
              }
              static PyObject *t_TermRangeQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, TermRangeQueryNodeBuilder::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_TermRangeQueryNodeBuilder_init_(t_TermRangeQueryNodeBuilder *self, PyObject *args, PyObject *kwds)
              {
                TermRangeQueryNodeBuilder object((jobject) NULL);

                INT_CALL(object = TermRangeQueryNodeBuilder());
                self->object = object;

                return 0;
              }

              static PyObject *t_TermRangeQueryNodeBuilder_build(t_TermRangeQueryNodeBuilder *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::search::TermRangeQuery result((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.build(a0));
                  return ::org::apache::lucene::search::t_TermRangeQuery::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "build", arg);
                return NULL;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/DataInput.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "java/util/Set.h"
#include "java/lang/Cloneable.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *DataInput::class$ = NULL;
        jmethodID *DataInput::mids$ = NULL;
        bool DataInput::live$ = false;

        jclass DataInput::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/DataInput");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_clone_3fcc829c] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/store/DataInput;");
            mids$[mid_readByte_54c6a172] = env->getMethodID(cls, "readByte", "()B");
            mids$[mid_readBytes_86f4435f] = env->getMethodID(cls, "readBytes", "([BII)V");
            mids$[mid_readBytes_717964e8] = env->getMethodID(cls, "readBytes", "([BIIZ)V");
            mids$[mid_readInt_54c6a179] = env->getMethodID(cls, "readInt", "()I");
            mids$[mid_readLong_54c6a17a] = env->getMethodID(cls, "readLong", "()J");
            mids$[mid_readShort_54c6a163] = env->getMethodID(cls, "readShort", "()S");
            mids$[mid_readString_14c7b5c5] = env->getMethodID(cls, "readString", "()Ljava/lang/String;");
            mids$[mid_readStringSet_03e99967] = env->getMethodID(cls, "readStringSet", "()Ljava/util/Set;");
            mids$[mid_readStringStringMap_db60befd] = env->getMethodID(cls, "readStringStringMap", "()Ljava/util/Map;");
            mids$[mid_readVInt_54c6a179] = env->getMethodID(cls, "readVInt", "()I");
            mids$[mid_readVLong_54c6a17a] = env->getMethodID(cls, "readVLong", "()J");
            mids$[mid_readZInt_54c6a179] = env->getMethodID(cls, "readZInt", "()I");
            mids$[mid_readZLong_54c6a17a] = env->getMethodID(cls, "readZLong", "()J");
            mids$[mid_skipBytes_0ee6df2f] = env->getMethodID(cls, "skipBytes", "(J)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        DataInput::DataInput() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        DataInput DataInput::clone() const
        {
          return DataInput(env->callObjectMethod(this$, mids$[mid_clone_3fcc829c]));
        }

        jbyte DataInput::readByte() const
        {
          return env->callByteMethod(this$, mids$[mid_readByte_54c6a172]);
        }

        void DataInput::readBytes(const JArray< jbyte > & a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_readBytes_86f4435f], a0.this$, a1, a2);
        }

        void DataInput::readBytes(const JArray< jbyte > & a0, jint a1, jint a2, jboolean a3) const
        {
          env->callVoidMethod(this$, mids$[mid_readBytes_717964e8], a0.this$, a1, a2, a3);
        }

        jint DataInput::readInt() const
        {
          return env->callIntMethod(this$, mids$[mid_readInt_54c6a179]);
        }

        jlong DataInput::readLong() const
        {
          return env->callLongMethod(this$, mids$[mid_readLong_54c6a17a]);
        }

        jshort DataInput::readShort() const
        {
          return env->callShortMethod(this$, mids$[mid_readShort_54c6a163]);
        }

        ::java::lang::String DataInput::readString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_readString_14c7b5c5]));
        }

        ::java::util::Set DataInput::readStringSet() const
        {
          return ::java::util::Set(env->callObjectMethod(this$, mids$[mid_readStringSet_03e99967]));
        }

        ::java::util::Map DataInput::readStringStringMap() const
        {
          return ::java::util::Map(env->callObjectMethod(this$, mids$[mid_readStringStringMap_db60befd]));
        }

        jint DataInput::readVInt() const
        {
          return env->callIntMethod(this$, mids$[mid_readVInt_54c6a179]);
        }

        jlong DataInput::readVLong() const
        {
          return env->callLongMethod(this$, mids$[mid_readVLong_54c6a17a]);
        }

        jint DataInput::readZInt() const
        {
          return env->callIntMethod(this$, mids$[mid_readZInt_54c6a179]);
        }

        jlong DataInput::readZLong() const
        {
          return env->callLongMethod(this$, mids$[mid_readZLong_54c6a17a]);
        }

        void DataInput::skipBytes(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_skipBytes_0ee6df2f], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_DataInput_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DataInput_instance_(PyTypeObject *type, PyObject *arg);
        static int t_DataInput_init_(t_DataInput *self, PyObject *args, PyObject *kwds);
        static PyObject *t_DataInput_clone(t_DataInput *self);
        static PyObject *t_DataInput_readByte(t_DataInput *self);
        static PyObject *t_DataInput_readBytes(t_DataInput *self, PyObject *args);
        static PyObject *t_DataInput_readInt(t_DataInput *self);
        static PyObject *t_DataInput_readLong(t_DataInput *self);
        static PyObject *t_DataInput_readShort(t_DataInput *self);
        static PyObject *t_DataInput_readString(t_DataInput *self);
        static PyObject *t_DataInput_readStringSet(t_DataInput *self);
        static PyObject *t_DataInput_readStringStringMap(t_DataInput *self);
        static PyObject *t_DataInput_readVInt(t_DataInput *self);
        static PyObject *t_DataInput_readVLong(t_DataInput *self);
        static PyObject *t_DataInput_readZInt(t_DataInput *self);
        static PyObject *t_DataInput_readZLong(t_DataInput *self);
        static PyObject *t_DataInput_skipBytes(t_DataInput *self, PyObject *arg);

        static PyMethodDef t_DataInput__methods_[] = {
          DECLARE_METHOD(t_DataInput, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DataInput, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DataInput, clone, METH_NOARGS),
          DECLARE_METHOD(t_DataInput, readByte, METH_NOARGS),
          DECLARE_METHOD(t_DataInput, readBytes, METH_VARARGS),
          DECLARE_METHOD(t_DataInput, readInt, METH_NOARGS),
          DECLARE_METHOD(t_DataInput, readLong, METH_NOARGS),
          DECLARE_METHOD(t_DataInput, readShort, METH_NOARGS),
          DECLARE_METHOD(t_DataInput, readString, METH_NOARGS),
          DECLARE_METHOD(t_DataInput, readStringSet, METH_NOARGS),
          DECLARE_METHOD(t_DataInput, readStringStringMap, METH_NOARGS),
          DECLARE_METHOD(t_DataInput, readVInt, METH_NOARGS),
          DECLARE_METHOD(t_DataInput, readVLong, METH_NOARGS),
          DECLARE_METHOD(t_DataInput, readZInt, METH_NOARGS),
          DECLARE_METHOD(t_DataInput, readZLong, METH_NOARGS),
          DECLARE_METHOD(t_DataInput, skipBytes, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(DataInput, t_DataInput, ::java::lang::Object, DataInput, t_DataInput_init_, 0, 0, 0, 0, 0);

        void t_DataInput::install(PyObject *module)
        {
          installType(&PY_TYPE(DataInput), module, "DataInput", 0);
        }

        void t_DataInput::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(DataInput).tp_dict, "class_", make_descriptor(DataInput::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(DataInput).tp_dict, "wrapfn_", make_descriptor(t_DataInput::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(DataInput).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_DataInput_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, DataInput::initializeClass, 1)))
            return NULL;
          return t_DataInput::wrap_Object(DataInput(((t_DataInput *) arg)->object.this$));
        }
        static PyObject *t_DataInput_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, DataInput::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_DataInput_init_(t_DataInput *self, PyObject *args, PyObject *kwds)
        {
          DataInput object((jobject) NULL);

          INT_CALL(object = DataInput());
          self->object = object;

          return 0;
        }

        static PyObject *t_DataInput_clone(t_DataInput *self)
        {
          DataInput result((jobject) NULL);
          OBJ_CALL(result = self->object.clone());
          return t_DataInput::wrap_Object(result);
        }

        static PyObject *t_DataInput_readByte(t_DataInput *self)
        {
          jbyte result;
          OBJ_CALL(result = self->object.readByte());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_DataInput_readBytes(t_DataInput *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 3:
            {
              JArray< jbyte > a0((jobject) NULL);
              jint a1;
              jint a2;

              if (!parseArgs(args, "[BII", &a0, &a1, &a2))
              {
                OBJ_CALL(self->object.readBytes(a0, a1, a2));
                Py_RETURN_NONE;
              }
            }
            break;
           case 4:
            {
              JArray< jbyte > a0((jobject) NULL);
              jint a1;
              jint a2;
              jboolean a3;

              if (!parseArgs(args, "[BIIZ", &a0, &a1, &a2, &a3))
              {
                OBJ_CALL(self->object.readBytes(a0, a1, a2, a3));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "readBytes", args);
          return NULL;
        }

        static PyObject *t_DataInput_readInt(t_DataInput *self)
        {
          jint result;
          OBJ_CALL(result = self->object.readInt());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_DataInput_readLong(t_DataInput *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.readLong());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_DataInput_readShort(t_DataInput *self)
        {
          jshort result;
          OBJ_CALL(result = self->object.readShort());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_DataInput_readString(t_DataInput *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.readString());
          return j2p(result);
        }

        static PyObject *t_DataInput_readStringSet(t_DataInput *self)
        {
          ::java::util::Set result((jobject) NULL);
          OBJ_CALL(result = self->object.readStringSet());
          return ::java::util::t_Set::wrap_Object(result, &::java::lang::PY_TYPE(String));
        }

        static PyObject *t_DataInput_readStringStringMap(t_DataInput *self)
        {
          ::java::util::Map result((jobject) NULL);
          OBJ_CALL(result = self->object.readStringStringMap());
          return ::java::util::t_Map::wrap_Object(result, &::java::lang::PY_TYPE(String), &::java::lang::PY_TYPE(String));
        }

        static PyObject *t_DataInput_readVInt(t_DataInput *self)
        {
          jint result;
          OBJ_CALL(result = self->object.readVInt());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_DataInput_readVLong(t_DataInput *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.readVLong());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_DataInput_readZInt(t_DataInput *self)
        {
          jint result;
          OBJ_CALL(result = self->object.readZInt());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_DataInput_readZLong(t_DataInput *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.readZLong());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_DataInput_skipBytes(t_DataInput *self, PyObject *arg)
        {
          jlong a0;

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(self->object.skipBytes(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "skipBytes", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/synonym/SynonymFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/synonym/SynonymMap.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace synonym {

          ::java::lang::Class *SynonymFilter::class$ = NULL;
          jmethodID *SynonymFilter::mids$ = NULL;
          bool SynonymFilter::live$ = false;
          ::java::lang::String *SynonymFilter::TYPE_SYNONYM = NULL;

          jclass SynonymFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/synonym/SynonymFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_6759cd52] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;Lorg/apache/lucene/analysis/synonym/SynonymMap;Z)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              TYPE_SYNONYM = new ::java::lang::String(env->getStaticObjectField(cls, "TYPE_SYNONYM", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SynonymFilter::SynonymFilter(const ::org::apache::lucene::analysis::TokenStream & a0, const ::org::apache::lucene::analysis::synonym::SynonymMap & a1, jboolean a2) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_6759cd52, a0.this$, a1.this$, a2)) {}

          jboolean SynonymFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void SynonymFilter::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace synonym {
          static PyObject *t_SynonymFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SynonymFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SynonymFilter_init_(t_SynonymFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SynonymFilter_incrementToken(t_SynonymFilter *self, PyObject *args);
          static PyObject *t_SynonymFilter_reset(t_SynonymFilter *self, PyObject *args);

          static PyMethodDef t_SynonymFilter__methods_[] = {
            DECLARE_METHOD(t_SynonymFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SynonymFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SynonymFilter, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_SynonymFilter, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SynonymFilter, t_SynonymFilter, ::org::apache::lucene::analysis::TokenFilter, SynonymFilter, t_SynonymFilter_init_, 0, 0, 0, 0, 0);

          void t_SynonymFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(SynonymFilter), module, "SynonymFilter", 0);
          }

          void t_SynonymFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SynonymFilter).tp_dict, "class_", make_descriptor(SynonymFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SynonymFilter).tp_dict, "wrapfn_", make_descriptor(t_SynonymFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SynonymFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(SynonymFilter::initializeClass);
            PyDict_SetItemString(PY_TYPE(SynonymFilter).tp_dict, "TYPE_SYNONYM", make_descriptor(j2p(*SynonymFilter::TYPE_SYNONYM)));
          }

          static PyObject *t_SynonymFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SynonymFilter::initializeClass, 1)))
              return NULL;
            return t_SynonymFilter::wrap_Object(SynonymFilter(((t_SynonymFilter *) arg)->object.this$));
          }
          static PyObject *t_SynonymFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SynonymFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SynonymFilter_init_(t_SynonymFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::synonym::SynonymMap a1((jobject) NULL);
            jboolean a2;
            SynonymFilter object((jobject) NULL);

            if (!parseArgs(args, "kkZ", ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::analysis::synonym::SynonymMap::initializeClass, &a0, &a1, &a2))
            {
              INT_CALL(object = SynonymFilter(a0, a1, a2));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SynonymFilter_incrementToken(t_SynonymFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(SynonymFilter), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_SynonymFilter_reset(t_SynonymFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(SynonymFilter), (PyObject *) self, "reset", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/ConstantScoreAutoRewrite.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/search/BooleanQuery.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/search/MultiTermQuery.h"
#include "org/apache/lucene/search/Query.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *ConstantScoreAutoRewrite::class$ = NULL;
        jmethodID *ConstantScoreAutoRewrite::mids$ = NULL;
        bool ConstantScoreAutoRewrite::live$ = false;
        jdouble ConstantScoreAutoRewrite::DEFAULT_DOC_COUNT_PERCENT = (jdouble) 0;
        jint ConstantScoreAutoRewrite::DEFAULT_TERM_COUNT_CUTOFF = (jint) 0;

        jclass ConstantScoreAutoRewrite::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/ConstantScoreAutoRewrite");

            mids$ = new jmethodID[max_mid];
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_getDocCountPercent_54c6a174] = env->getMethodID(cls, "getDocCountPercent", "()D");
            mids$[mid_getTermCountCutoff_54c6a179] = env->getMethodID(cls, "getTermCountCutoff", "()I");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_rewrite_925c5bbc] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/index/IndexReader;Lorg/apache/lucene/search/MultiTermQuery;)Lorg/apache/lucene/search/Query;");
            mids$[mid_setDocCountPercent_5d1c7645] = env->getMethodID(cls, "setDocCountPercent", "(D)V");
            mids$[mid_setTermCountCutoff_39c7bd3c] = env->getMethodID(cls, "setTermCountCutoff", "(I)V");
            mids$[mid_getTopLevelQuery_6f9339e7] = env->getMethodID(cls, "getTopLevelQuery", "()Lorg/apache/lucene/search/BooleanQuery;");
            mids$[mid_addClause_82a56efb] = env->getMethodID(cls, "addClause", "(Lorg/apache/lucene/search/BooleanQuery;Lorg/apache/lucene/index/Term;IFLorg/apache/lucene/index/TermContext;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            DEFAULT_DOC_COUNT_PERCENT = env->getStaticDoubleField(cls, "DEFAULT_DOC_COUNT_PERCENT");
            DEFAULT_TERM_COUNT_CUTOFF = env->getStaticIntField(cls, "DEFAULT_TERM_COUNT_CUTOFF");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jboolean ConstantScoreAutoRewrite::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        jdouble ConstantScoreAutoRewrite::getDocCountPercent() const
        {
          return env->callDoubleMethod(this$, mids$[mid_getDocCountPercent_54c6a174]);
        }

        jint ConstantScoreAutoRewrite::getTermCountCutoff() const
        {
          return env->callIntMethod(this$, mids$[mid_getTermCountCutoff_54c6a179]);
        }

        jint ConstantScoreAutoRewrite::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        ::org::apache::lucene::search::Query ConstantScoreAutoRewrite::rewrite(const ::org::apache::lucene::index::IndexReader & a0, const ::org::apache::lucene::search::MultiTermQuery & a1) const
        {
          return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_rewrite_925c5bbc], a0.this$, a1.this$));
        }

        void ConstantScoreAutoRewrite::setDocCountPercent(jdouble a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setDocCountPercent_5d1c7645], a0);
        }

        void ConstantScoreAutoRewrite::setTermCountCutoff(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setTermCountCutoff_39c7bd3c], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_ConstantScoreAutoRewrite_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ConstantScoreAutoRewrite_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ConstantScoreAutoRewrite_of_(t_ConstantScoreAutoRewrite *self, PyObject *args);
        static PyObject *t_ConstantScoreAutoRewrite_equals(t_ConstantScoreAutoRewrite *self, PyObject *args);
        static PyObject *t_ConstantScoreAutoRewrite_getDocCountPercent(t_ConstantScoreAutoRewrite *self);
        static PyObject *t_ConstantScoreAutoRewrite_getTermCountCutoff(t_ConstantScoreAutoRewrite *self);
        static PyObject *t_ConstantScoreAutoRewrite_hashCode(t_ConstantScoreAutoRewrite *self, PyObject *args);
        static PyObject *t_ConstantScoreAutoRewrite_rewrite(t_ConstantScoreAutoRewrite *self, PyObject *args);
        static PyObject *t_ConstantScoreAutoRewrite_setDocCountPercent(t_ConstantScoreAutoRewrite *self, PyObject *arg);
        static PyObject *t_ConstantScoreAutoRewrite_setTermCountCutoff(t_ConstantScoreAutoRewrite *self, PyObject *arg);
        static PyObject *t_ConstantScoreAutoRewrite_get__docCountPercent(t_ConstantScoreAutoRewrite *self, void *data);
        static int t_ConstantScoreAutoRewrite_set__docCountPercent(t_ConstantScoreAutoRewrite *self, PyObject *arg, void *data);
        static PyObject *t_ConstantScoreAutoRewrite_get__termCountCutoff(t_ConstantScoreAutoRewrite *self, void *data);
        static int t_ConstantScoreAutoRewrite_set__termCountCutoff(t_ConstantScoreAutoRewrite *self, PyObject *arg, void *data);
        static PyObject *t_ConstantScoreAutoRewrite_get__parameters_(t_ConstantScoreAutoRewrite *self, void *data);
        static PyGetSetDef t_ConstantScoreAutoRewrite__fields_[] = {
          DECLARE_GETSET_FIELD(t_ConstantScoreAutoRewrite, docCountPercent),
          DECLARE_GETSET_FIELD(t_ConstantScoreAutoRewrite, termCountCutoff),
          DECLARE_GET_FIELD(t_ConstantScoreAutoRewrite, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_ConstantScoreAutoRewrite__methods_[] = {
          DECLARE_METHOD(t_ConstantScoreAutoRewrite, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ConstantScoreAutoRewrite, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ConstantScoreAutoRewrite, of_, METH_VARARGS),
          DECLARE_METHOD(t_ConstantScoreAutoRewrite, equals, METH_VARARGS),
          DECLARE_METHOD(t_ConstantScoreAutoRewrite, getDocCountPercent, METH_NOARGS),
          DECLARE_METHOD(t_ConstantScoreAutoRewrite, getTermCountCutoff, METH_NOARGS),
          DECLARE_METHOD(t_ConstantScoreAutoRewrite, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_ConstantScoreAutoRewrite, rewrite, METH_VARARGS),
          DECLARE_METHOD(t_ConstantScoreAutoRewrite, setDocCountPercent, METH_O),
          DECLARE_METHOD(t_ConstantScoreAutoRewrite, setTermCountCutoff, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(ConstantScoreAutoRewrite, t_ConstantScoreAutoRewrite, ::org::apache::lucene::search::TermCollectingRewrite, ConstantScoreAutoRewrite, abstract_init, 0, 0, t_ConstantScoreAutoRewrite__fields_, 0, 0);
        PyObject *t_ConstantScoreAutoRewrite::wrap_Object(const ConstantScoreAutoRewrite& object, PyTypeObject *p0)
        {
          PyObject *obj = t_ConstantScoreAutoRewrite::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_ConstantScoreAutoRewrite *self = (t_ConstantScoreAutoRewrite *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_ConstantScoreAutoRewrite::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_ConstantScoreAutoRewrite::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_ConstantScoreAutoRewrite *self = (t_ConstantScoreAutoRewrite *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_ConstantScoreAutoRewrite::install(PyObject *module)
        {
          installType(&PY_TYPE(ConstantScoreAutoRewrite), module, "ConstantScoreAutoRewrite", 0);
        }

        void t_ConstantScoreAutoRewrite::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(ConstantScoreAutoRewrite).tp_dict, "class_", make_descriptor(ConstantScoreAutoRewrite::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(ConstantScoreAutoRewrite).tp_dict, "wrapfn_", make_descriptor(t_ConstantScoreAutoRewrite::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(ConstantScoreAutoRewrite).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(ConstantScoreAutoRewrite::initializeClass);
          PyDict_SetItemString(PY_TYPE(ConstantScoreAutoRewrite).tp_dict, "DEFAULT_DOC_COUNT_PERCENT", make_descriptor(ConstantScoreAutoRewrite::DEFAULT_DOC_COUNT_PERCENT));
          PyDict_SetItemString(PY_TYPE(ConstantScoreAutoRewrite).tp_dict, "DEFAULT_TERM_COUNT_CUTOFF", make_descriptor(ConstantScoreAutoRewrite::DEFAULT_TERM_COUNT_CUTOFF));
        }

        static PyObject *t_ConstantScoreAutoRewrite_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, ConstantScoreAutoRewrite::initializeClass, 1)))
            return NULL;
          return t_ConstantScoreAutoRewrite::wrap_Object(ConstantScoreAutoRewrite(((t_ConstantScoreAutoRewrite *) arg)->object.this$));
        }
        static PyObject *t_ConstantScoreAutoRewrite_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, ConstantScoreAutoRewrite::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_ConstantScoreAutoRewrite_of_(t_ConstantScoreAutoRewrite *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_ConstantScoreAutoRewrite_equals(t_ConstantScoreAutoRewrite *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(ConstantScoreAutoRewrite), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_ConstantScoreAutoRewrite_getDocCountPercent(t_ConstantScoreAutoRewrite *self)
        {
          jdouble result;
          OBJ_CALL(result = self->object.getDocCountPercent());
          return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_ConstantScoreAutoRewrite_getTermCountCutoff(t_ConstantScoreAutoRewrite *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getTermCountCutoff());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_ConstantScoreAutoRewrite_hashCode(t_ConstantScoreAutoRewrite *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(ConstantScoreAutoRewrite), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_ConstantScoreAutoRewrite_rewrite(t_ConstantScoreAutoRewrite *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::org::apache::lucene::search::MultiTermQuery a1((jobject) NULL);
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::search::MultiTermQuery::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.rewrite(a0, a1));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(ConstantScoreAutoRewrite), (PyObject *) self, "rewrite", args, 2);
        }

        static PyObject *t_ConstantScoreAutoRewrite_setDocCountPercent(t_ConstantScoreAutoRewrite *self, PyObject *arg)
        {
          jdouble a0;

          if (!parseArg(arg, "D", &a0))
          {
            OBJ_CALL(self->object.setDocCountPercent(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setDocCountPercent", arg);
          return NULL;
        }

        static PyObject *t_ConstantScoreAutoRewrite_setTermCountCutoff(t_ConstantScoreAutoRewrite *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.setTermCountCutoff(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setTermCountCutoff", arg);
          return NULL;
        }
        static PyObject *t_ConstantScoreAutoRewrite_get__parameters_(t_ConstantScoreAutoRewrite *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static PyObject *t_ConstantScoreAutoRewrite_get__docCountPercent(t_ConstantScoreAutoRewrite *self, void *data)
        {
          jdouble value;
          OBJ_CALL(value = self->object.getDocCountPercent());
          return PyFloat_FromDouble((double) value);
        }
        static int t_ConstantScoreAutoRewrite_set__docCountPercent(t_ConstantScoreAutoRewrite *self, PyObject *arg, void *data)
        {
          {
            jdouble value;
            if (!parseArg(arg, "D", &value))
            {
              INT_CALL(self->object.setDocCountPercent(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "docCountPercent", arg);
          return -1;
        }

        static PyObject *t_ConstantScoreAutoRewrite_get__termCountCutoff(t_ConstantScoreAutoRewrite *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getTermCountCutoff());
          return PyInt_FromLong((long) value);
        }
        static int t_ConstantScoreAutoRewrite_set__termCountCutoff(t_ConstantScoreAutoRewrite *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setTermCountCutoff(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "termCountCutoff", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/SearcherTaxonomyManager$SearcherAndTaxonomy.h"
#include "org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {

          ::java::lang::Class *SearcherTaxonomyManager$SearcherAndTaxonomy::class$ = NULL;
          jmethodID *SearcherTaxonomyManager$SearcherAndTaxonomy::mids$ = NULL;
          jfieldID *SearcherTaxonomyManager$SearcherAndTaxonomy::fids$ = NULL;
          bool SearcherTaxonomyManager$SearcherAndTaxonomy::live$ = false;

          jclass SearcherTaxonomyManager$SearcherAndTaxonomy::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/SearcherTaxonomyManager$SearcherAndTaxonomy");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_8978d829] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader;)V");

              fids$ = new jfieldID[max_fid];
              fids$[fid_searcher] = env->getFieldID(cls, "searcher", "Lorg/apache/lucene/search/IndexSearcher;");
              fids$[fid_taxonomyReader] = env->getFieldID(cls, "taxonomyReader", "Lorg/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SearcherTaxonomyManager$SearcherAndTaxonomy::SearcherTaxonomyManager$SearcherAndTaxonomy(const ::org::apache::lucene::search::IndexSearcher & a0, const ::org::apache::lucene::facet::taxonomy::directory::DirectoryTaxonomyReader & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_8978d829, a0.this$, a1.this$)) {}

          ::org::apache::lucene::search::IndexSearcher SearcherTaxonomyManager$SearcherAndTaxonomy::_get_searcher() const
          {
            return ::org::apache::lucene::search::IndexSearcher(env->getObjectField(this$, fids$[fid_searcher]));
          }

          ::org::apache::lucene::facet::taxonomy::directory::DirectoryTaxonomyReader SearcherTaxonomyManager$SearcherAndTaxonomy::_get_taxonomyReader() const
          {
            return ::org::apache::lucene::facet::taxonomy::directory::DirectoryTaxonomyReader(env->getObjectField(this$, fids$[fid_taxonomyReader]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          static PyObject *t_SearcherTaxonomyManager$SearcherAndTaxonomy_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SearcherTaxonomyManager$SearcherAndTaxonomy_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SearcherTaxonomyManager$SearcherAndTaxonomy_of_(t_SearcherTaxonomyManager$SearcherAndTaxonomy *self, PyObject *args);
          static int t_SearcherTaxonomyManager$SearcherAndTaxonomy_init_(t_SearcherTaxonomyManager$SearcherAndTaxonomy *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SearcherTaxonomyManager$SearcherAndTaxonomy_get__searcher(t_SearcherTaxonomyManager$SearcherAndTaxonomy *self, void *data);
          static PyObject *t_SearcherTaxonomyManager$SearcherAndTaxonomy_get__taxonomyReader(t_SearcherTaxonomyManager$SearcherAndTaxonomy *self, void *data);

          static PyObject *t_SearcherTaxonomyManager$SearcherAndTaxonomy_get__parameters_(t_SearcherTaxonomyManager$SearcherAndTaxonomy *self, void *data);
          static PyGetSetDef t_SearcherTaxonomyManager$SearcherAndTaxonomy__fields_[] = {
            DECLARE_GET_FIELD(t_SearcherTaxonomyManager$SearcherAndTaxonomy, searcher),
            DECLARE_GET_FIELD(t_SearcherTaxonomyManager$SearcherAndTaxonomy, taxonomyReader),
            DECLARE_GET_FIELD(t_SearcherTaxonomyManager$SearcherAndTaxonomy, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SearcherTaxonomyManager$SearcherAndTaxonomy__methods_[] = {
            DECLARE_METHOD(t_SearcherTaxonomyManager$SearcherAndTaxonomy, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SearcherTaxonomyManager$SearcherAndTaxonomy, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SearcherTaxonomyManager$SearcherAndTaxonomy, of_, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SearcherTaxonomyManager$SearcherAndTaxonomy, t_SearcherTaxonomyManager$SearcherAndTaxonomy, ::java::lang::Object, SearcherTaxonomyManager$SearcherAndTaxonomy, t_SearcherTaxonomyManager$SearcherAndTaxonomy_init_, 0, 0, t_SearcherTaxonomyManager$SearcherAndTaxonomy__fields_, 0, 0);
          PyObject *t_SearcherTaxonomyManager$SearcherAndTaxonomy::wrap_Object(const SearcherTaxonomyManager$SearcherAndTaxonomy& object, PyTypeObject *p0)
          {
            PyObject *obj = t_SearcherTaxonomyManager$SearcherAndTaxonomy::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_SearcherTaxonomyManager$SearcherAndTaxonomy *self = (t_SearcherTaxonomyManager$SearcherAndTaxonomy *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_SearcherTaxonomyManager$SearcherAndTaxonomy::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_SearcherTaxonomyManager$SearcherAndTaxonomy::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_SearcherTaxonomyManager$SearcherAndTaxonomy *self = (t_SearcherTaxonomyManager$SearcherAndTaxonomy *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_SearcherTaxonomyManager$SearcherAndTaxonomy::install(PyObject *module)
          {
            installType(&PY_TYPE(SearcherTaxonomyManager$SearcherAndTaxonomy), module, "SearcherTaxonomyManager$SearcherAndTaxonomy", 0);
          }

          void t_SearcherTaxonomyManager$SearcherAndTaxonomy::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SearcherTaxonomyManager$SearcherAndTaxonomy).tp_dict, "class_", make_descriptor(SearcherTaxonomyManager$SearcherAndTaxonomy::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SearcherTaxonomyManager$SearcherAndTaxonomy).tp_dict, "wrapfn_", make_descriptor(t_SearcherTaxonomyManager$SearcherAndTaxonomy::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SearcherTaxonomyManager$SearcherAndTaxonomy).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SearcherTaxonomyManager$SearcherAndTaxonomy_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SearcherTaxonomyManager$SearcherAndTaxonomy::initializeClass, 1)))
              return NULL;
            return t_SearcherTaxonomyManager$SearcherAndTaxonomy::wrap_Object(SearcherTaxonomyManager$SearcherAndTaxonomy(((t_SearcherTaxonomyManager$SearcherAndTaxonomy *) arg)->object.this$));
          }
          static PyObject *t_SearcherTaxonomyManager$SearcherAndTaxonomy_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SearcherTaxonomyManager$SearcherAndTaxonomy::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_SearcherTaxonomyManager$SearcherAndTaxonomy_of_(t_SearcherTaxonomyManager$SearcherAndTaxonomy *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_SearcherTaxonomyManager$SearcherAndTaxonomy_init_(t_SearcherTaxonomyManager$SearcherAndTaxonomy *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
            ::org::apache::lucene::facet::taxonomy::directory::DirectoryTaxonomyReader a1((jobject) NULL);
            SearcherTaxonomyManager$SearcherAndTaxonomy object((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::facet::taxonomy::directory::DirectoryTaxonomyReader::initializeClass, &a0, &a1))
            {
              INT_CALL(object = SearcherTaxonomyManager$SearcherAndTaxonomy(a0, a1));
              self->object = object;
              self->parameters[0] = &::org::apache::lucene::facet::taxonomy::PY_TYPE(SearcherTaxonomyManager$SearcherAndTaxonomy);
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
          static PyObject *t_SearcherTaxonomyManager$SearcherAndTaxonomy_get__parameters_(t_SearcherTaxonomyManager$SearcherAndTaxonomy *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_SearcherTaxonomyManager$SearcherAndTaxonomy_get__searcher(t_SearcherTaxonomyManager$SearcherAndTaxonomy *self, void *data)
          {
            ::org::apache::lucene::search::IndexSearcher value((jobject) NULL);
            OBJ_CALL(value = self->object._get_searcher());
            return ::org::apache::lucene::search::t_IndexSearcher::wrap_Object(value);
          }

          static PyObject *t_SearcherTaxonomyManager$SearcherAndTaxonomy_get__taxonomyReader(t_SearcherTaxonomyManager$SearcherAndTaxonomy *self, void *data)
          {
            ::org::apache::lucene::facet::taxonomy::directory::DirectoryTaxonomyReader value((jobject) NULL);
            OBJ_CALL(value = self->object._get_taxonomyReader());
            return ::org::apache::lucene::facet::taxonomy::directory::t_DirectoryTaxonomyReader::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/grouping/SearchGroup.h"
#include "org/apache/lucene/search/Sort.h"
#include "java/lang/Class.h"
#include "java/util/Collection.h"
#include "java/util/List.h"
#include "java/io/IOException.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {

          ::java::lang::Class *SearchGroup::class$ = NULL;
          jmethodID *SearchGroup::mids$ = NULL;
          jfieldID *SearchGroup::fids$ = NULL;
          bool SearchGroup::live$ = false;

          jclass SearchGroup::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/grouping/SearchGroup");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_merge_8879ded5] = env->getStaticMethodID(cls, "merge", "(Ljava/util/List;IILorg/apache/lucene/search/Sort;)Ljava/util/Collection;");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              fids$ = new jfieldID[max_fid];
              fids$[fid_groupValue] = env->getFieldID(cls, "groupValue", "Ljava/lang/Object;");
              fids$[fid_sortValues] = env->getFieldID(cls, "sortValues", "[Ljava/lang/Object;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SearchGroup::SearchGroup() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jboolean SearchGroup::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          jint SearchGroup::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          ::java::util::Collection SearchGroup::merge(const ::java::util::List & a0, jint a1, jint a2, const ::org::apache::lucene::search::Sort & a3)
          {
            jclass cls = env->getClass(initializeClass);
            return ::java::util::Collection(env->callStaticObjectMethod(cls, mids$[mid_merge_8879ded5], a0.this$, a1, a2, a3.this$));
          }

          ::java::lang::String SearchGroup::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }

          ::java::lang::Object SearchGroup::_get_groupValue() const
          {
            return ::java::lang::Object(env->getObjectField(this$, fids$[fid_groupValue]));
          }

          void SearchGroup::_set_groupValue(const ::java::lang::Object & a0) const
          {
            env->setObjectField(this$, fids$[fid_groupValue], a0.this$);
          }

          JArray< ::java::lang::Object > SearchGroup::_get_sortValues() const
          {
            return JArray< ::java::lang::Object >(env->getObjectField(this$, fids$[fid_sortValues]));
          }

          void SearchGroup::_set_sortValues(const JArray< ::java::lang::Object > & a0) const
          {
            env->setObjectField(this$, fids$[fid_sortValues], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          static PyObject *t_SearchGroup_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SearchGroup_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SearchGroup_of_(t_SearchGroup *self, PyObject *args);
          static int t_SearchGroup_init_(t_SearchGroup *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SearchGroup_equals(t_SearchGroup *self, PyObject *args);
          static PyObject *t_SearchGroup_hashCode(t_SearchGroup *self, PyObject *args);
          static PyObject *t_SearchGroup_merge(PyTypeObject *type, PyObject *args);
          static PyObject *t_SearchGroup_toString(t_SearchGroup *self, PyObject *args);
          static PyObject *t_SearchGroup_get__groupValue(t_SearchGroup *self, void *data);
          static int t_SearchGroup_set__groupValue(t_SearchGroup *self, PyObject *arg, void *data);
          static PyObject *t_SearchGroup_get__sortValues(t_SearchGroup *self, void *data);
          static int t_SearchGroup_set__sortValues(t_SearchGroup *self, PyObject *arg, void *data);

          static PyObject *t_SearchGroup_get__parameters_(t_SearchGroup *self, void *data);
          static PyGetSetDef t_SearchGroup__fields_[] = {
            DECLARE_GETSET_FIELD(t_SearchGroup, groupValue),
            DECLARE_GETSET_FIELD(t_SearchGroup, sortValues),
            DECLARE_GET_FIELD(t_SearchGroup, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SearchGroup__methods_[] = {
            DECLARE_METHOD(t_SearchGroup, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SearchGroup, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SearchGroup, of_, METH_VARARGS),
            DECLARE_METHOD(t_SearchGroup, equals, METH_VARARGS),
            DECLARE_METHOD(t_SearchGroup, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_SearchGroup, merge, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_SearchGroup, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SearchGroup, t_SearchGroup, ::java::lang::Object, SearchGroup, t_SearchGroup_init_, 0, 0, t_SearchGroup__fields_, 0, 0);
          PyObject *t_SearchGroup::wrap_Object(const SearchGroup& object, PyTypeObject *p0)
          {
            PyObject *obj = t_SearchGroup::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_SearchGroup *self = (t_SearchGroup *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_SearchGroup::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_SearchGroup::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_SearchGroup *self = (t_SearchGroup *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_SearchGroup::install(PyObject *module)
          {
            installType(&PY_TYPE(SearchGroup), module, "SearchGroup", 0);
          }

          void t_SearchGroup::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SearchGroup).tp_dict, "class_", make_descriptor(SearchGroup::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SearchGroup).tp_dict, "wrapfn_", make_descriptor(t_SearchGroup::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SearchGroup).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SearchGroup_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SearchGroup::initializeClass, 1)))
              return NULL;
            return t_SearchGroup::wrap_Object(SearchGroup(((t_SearchGroup *) arg)->object.this$));
          }
          static PyObject *t_SearchGroup_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SearchGroup::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_SearchGroup_of_(t_SearchGroup *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_SearchGroup_init_(t_SearchGroup *self, PyObject *args, PyObject *kwds)
          {
            SearchGroup object((jobject) NULL);

            INT_CALL(object = SearchGroup());
            self->object = object;

            return 0;
          }

          static PyObject *t_SearchGroup_equals(t_SearchGroup *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(SearchGroup), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_SearchGroup_hashCode(t_SearchGroup *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(SearchGroup), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_SearchGroup_merge(PyTypeObject *type, PyObject *args)
          {
            ::java::util::List a0((jobject) NULL);
            PyTypeObject **p0;
            jint a1;
            jint a2;
            ::org::apache::lucene::search::Sort a3((jobject) NULL);
            ::java::util::Collection result((jobject) NULL);

            if (!parseArgs(args, "KIIk", ::java::util::List::initializeClass, ::org::apache::lucene::search::Sort::initializeClass, &a0, &p0, ::java::util::t_List::parameters_, &a1, &a2, &a3))
            {
              OBJ_CALL(result = ::org::apache::lucene::search::grouping::SearchGroup::merge(a0, a1, a2, a3));
              return ::java::util::t_Collection::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "merge", args);
            return NULL;
          }

          static PyObject *t_SearchGroup_toString(t_SearchGroup *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(SearchGroup), (PyObject *) self, "toString", args, 2);
          }
          static PyObject *t_SearchGroup_get__parameters_(t_SearchGroup *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_SearchGroup_get__groupValue(t_SearchGroup *self, void *data)
          {
            ::java::lang::Object value((jobject) NULL);
            OBJ_CALL(value = self->object._get_groupValue());
            return ::java::lang::t_Object::wrap_Object(value);
          }
          static int t_SearchGroup_set__groupValue(t_SearchGroup *self, PyObject *arg, void *data)
          {
            ::java::lang::Object value((jobject) NULL);
            if (!parseArg(arg, "o", &value))
            {
              INT_CALL(self->object._set_groupValue(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "groupValue", arg);
            return -1;
          }

          static PyObject *t_SearchGroup_get__sortValues(t_SearchGroup *self, void *data)
          {
            JArray< ::java::lang::Object > value((jobject) NULL);
            OBJ_CALL(value = self->object._get_sortValues());
            return JArray<jobject>(value.this$).wrap(::java::lang::t_Object::wrap_jobject);
          }
          static int t_SearchGroup_set__sortValues(t_SearchGroup *self, PyObject *arg, void *data)
          {
            JArray< ::java::lang::Object > value((jobject) NULL);
            if (!parseArg(arg, "[o", &value))
            {
              INT_CALL(self->object._set_sortValues(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "sortValues", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/NativeFSLockFactory.h"
#include "java/io/IOException.h"
#include "java/io/File.h"
#include "org/apache/lucene/store/Lock.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *NativeFSLockFactory::class$ = NULL;
        jmethodID *NativeFSLockFactory::mids$ = NULL;
        bool NativeFSLockFactory::live$ = false;

        jclass NativeFSLockFactory::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/NativeFSLockFactory");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_init$_c3dacf57] = env->getMethodID(cls, "<init>", "(Ljava/io/File;)V");
            mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
            mids$[mid_clearLock_5fdc3f48] = env->getMethodID(cls, "clearLock", "(Ljava/lang/String;)V");
            mids$[mid_makeLock_f26bb9a8] = env->getMethodID(cls, "makeLock", "(Ljava/lang/String;)Lorg/apache/lucene/store/Lock;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        NativeFSLockFactory::NativeFSLockFactory() : ::org::apache::lucene::store::FSLockFactory(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        NativeFSLockFactory::NativeFSLockFactory(const ::java::io::File & a0) : ::org::apache::lucene::store::FSLockFactory(env->newObject(initializeClass, &mids$, mid_init$_c3dacf57, a0.this$)) {}

        NativeFSLockFactory::NativeFSLockFactory(const ::java::lang::String & a0) : ::org::apache::lucene::store::FSLockFactory(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

        void NativeFSLockFactory::clearLock(const ::java::lang::String & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_clearLock_5fdc3f48], a0.this$);
        }

        ::org::apache::lucene::store::Lock NativeFSLockFactory::makeLock(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::store::Lock(env->callObjectMethod(this$, mids$[mid_makeLock_f26bb9a8], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_NativeFSLockFactory_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NativeFSLockFactory_instance_(PyTypeObject *type, PyObject *arg);
        static int t_NativeFSLockFactory_init_(t_NativeFSLockFactory *self, PyObject *args, PyObject *kwds);
        static PyObject *t_NativeFSLockFactory_clearLock(t_NativeFSLockFactory *self, PyObject *args);
        static PyObject *t_NativeFSLockFactory_makeLock(t_NativeFSLockFactory *self, PyObject *args);

        static PyMethodDef t_NativeFSLockFactory__methods_[] = {
          DECLARE_METHOD(t_NativeFSLockFactory, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NativeFSLockFactory, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NativeFSLockFactory, clearLock, METH_VARARGS),
          DECLARE_METHOD(t_NativeFSLockFactory, makeLock, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(NativeFSLockFactory, t_NativeFSLockFactory, ::org::apache::lucene::store::FSLockFactory, NativeFSLockFactory, t_NativeFSLockFactory_init_, 0, 0, 0, 0, 0);

        void t_NativeFSLockFactory::install(PyObject *module)
        {
          installType(&PY_TYPE(NativeFSLockFactory), module, "NativeFSLockFactory", 0);
        }

        void t_NativeFSLockFactory::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(NativeFSLockFactory).tp_dict, "class_", make_descriptor(NativeFSLockFactory::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(NativeFSLockFactory).tp_dict, "wrapfn_", make_descriptor(t_NativeFSLockFactory::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(NativeFSLockFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_NativeFSLockFactory_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, NativeFSLockFactory::initializeClass, 1)))
            return NULL;
          return t_NativeFSLockFactory::wrap_Object(NativeFSLockFactory(((t_NativeFSLockFactory *) arg)->object.this$));
        }
        static PyObject *t_NativeFSLockFactory_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, NativeFSLockFactory::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_NativeFSLockFactory_init_(t_NativeFSLockFactory *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              NativeFSLockFactory object((jobject) NULL);

              INT_CALL(object = NativeFSLockFactory());
              self->object = object;
              break;
            }
            goto err;
           case 1:
            {
              ::java::io::File a0((jobject) NULL);
              NativeFSLockFactory object((jobject) NULL);

              if (!parseArgs(args, "k", ::java::io::File::initializeClass, &a0))
              {
                INT_CALL(object = NativeFSLockFactory(a0));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              NativeFSLockFactory object((jobject) NULL);

              if (!parseArgs(args, "s", &a0))
              {
                INT_CALL(object = NativeFSLockFactory(a0));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_NativeFSLockFactory_clearLock(t_NativeFSLockFactory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(self->object.clearLock(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(NativeFSLockFactory), (PyObject *) self, "clearLock", args, 2);
        }

        static PyObject *t_NativeFSLockFactory_makeLock(t_NativeFSLockFactory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::store::Lock result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.makeLock(a0));
            return ::org::apache::lucene::store::t_Lock::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(NativeFSLockFactory), (PyObject *) self, "makeLock", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene3x/Lucene3xSegmentInfoFormat.h"
#include "org/apache/lucene/codecs/SegmentInfoWriter.h"
#include "java/lang/String.h"
#include "org/apache/lucene/codecs/SegmentInfoReader.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene3x {

          ::java::lang::Class *Lucene3xSegmentInfoFormat::class$ = NULL;
          jmethodID *Lucene3xSegmentInfoFormat::mids$ = NULL;
          bool Lucene3xSegmentInfoFormat::live$ = false;
          ::java::lang::String *Lucene3xSegmentInfoFormat::DS_COMPOUND_KEY = NULL;
          ::java::lang::String *Lucene3xSegmentInfoFormat::DS_NAME_KEY = NULL;
          ::java::lang::String *Lucene3xSegmentInfoFormat::DS_OFFSET_KEY = NULL;
          jint Lucene3xSegmentInfoFormat::FORMAT_3_1 = (jint) 0;
          jint Lucene3xSegmentInfoFormat::FORMAT_DIAGNOSTICS = (jint) 0;
          jint Lucene3xSegmentInfoFormat::FORMAT_HAS_VECTORS = (jint) 0;
          ::java::lang::String *Lucene3xSegmentInfoFormat::NORMGEN_KEY = NULL;
          ::java::lang::String *Lucene3xSegmentInfoFormat::NORMGEN_PREFIX = NULL;
          ::java::lang::String *Lucene3xSegmentInfoFormat::UPGRADED_SI_CODEC_NAME = NULL;
          ::java::lang::String *Lucene3xSegmentInfoFormat::UPGRADED_SI_EXTENSION = NULL;
          jint Lucene3xSegmentInfoFormat::UPGRADED_SI_VERSION_CURRENT = (jint) 0;
          jint Lucene3xSegmentInfoFormat::UPGRADED_SI_VERSION_START = (jint) 0;

          jclass Lucene3xSegmentInfoFormat::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene3x/Lucene3xSegmentInfoFormat");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_getDocStoreIsCompoundFile_196ca35f] = env->getStaticMethodID(cls, "getDocStoreIsCompoundFile", "(Lorg/apache/lucene/index/SegmentInfo;)Z");
              mids$[mid_getDocStoreOffset_196ca34c] = env->getStaticMethodID(cls, "getDocStoreOffset", "(Lorg/apache/lucene/index/SegmentInfo;)I");
              mids$[mid_getDocStoreSegment_44869e72] = env->getStaticMethodID(cls, "getDocStoreSegment", "(Lorg/apache/lucene/index/SegmentInfo;)Ljava/lang/String;");
              mids$[mid_getSegmentInfoReader_1e88b6e7] = env->getMethodID(cls, "getSegmentInfoReader", "()Lorg/apache/lucene/codecs/SegmentInfoReader;");
              mids$[mid_getSegmentInfoWriter_2d4ab533] = env->getMethodID(cls, "getSegmentInfoWriter", "()Lorg/apache/lucene/codecs/SegmentInfoWriter;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DS_COMPOUND_KEY = new ::java::lang::String(env->getStaticObjectField(cls, "DS_COMPOUND_KEY", "Ljava/lang/String;"));
              DS_NAME_KEY = new ::java::lang::String(env->getStaticObjectField(cls, "DS_NAME_KEY", "Ljava/lang/String;"));
              DS_OFFSET_KEY = new ::java::lang::String(env->getStaticObjectField(cls, "DS_OFFSET_KEY", "Ljava/lang/String;"));
              FORMAT_3_1 = env->getStaticIntField(cls, "FORMAT_3_1");
              FORMAT_DIAGNOSTICS = env->getStaticIntField(cls, "FORMAT_DIAGNOSTICS");
              FORMAT_HAS_VECTORS = env->getStaticIntField(cls, "FORMAT_HAS_VECTORS");
              NORMGEN_KEY = new ::java::lang::String(env->getStaticObjectField(cls, "NORMGEN_KEY", "Ljava/lang/String;"));
              NORMGEN_PREFIX = new ::java::lang::String(env->getStaticObjectField(cls, "NORMGEN_PREFIX", "Ljava/lang/String;"));
              UPGRADED_SI_CODEC_NAME = new ::java::lang::String(env->getStaticObjectField(cls, "UPGRADED_SI_CODEC_NAME", "Ljava/lang/String;"));
              UPGRADED_SI_EXTENSION = new ::java::lang::String(env->getStaticObjectField(cls, "UPGRADED_SI_EXTENSION", "Ljava/lang/String;"));
              UPGRADED_SI_VERSION_CURRENT = env->getStaticIntField(cls, "UPGRADED_SI_VERSION_CURRENT");
              UPGRADED_SI_VERSION_START = env->getStaticIntField(cls, "UPGRADED_SI_VERSION_START");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene3xSegmentInfoFormat::Lucene3xSegmentInfoFormat() : ::org::apache::lucene::codecs::SegmentInfoFormat(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jboolean Lucene3xSegmentInfoFormat::getDocStoreIsCompoundFile(const ::org::apache::lucene::index::SegmentInfo & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticBooleanMethod(cls, mids$[mid_getDocStoreIsCompoundFile_196ca35f], a0.this$);
          }

          jint Lucene3xSegmentInfoFormat::getDocStoreOffset(const ::org::apache::lucene::index::SegmentInfo & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticIntMethod(cls, mids$[mid_getDocStoreOffset_196ca34c], a0.this$);
          }

          ::java::lang::String Lucene3xSegmentInfoFormat::getDocStoreSegment(const ::org::apache::lucene::index::SegmentInfo & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_getDocStoreSegment_44869e72], a0.this$));
          }

          ::org::apache::lucene::codecs::SegmentInfoReader Lucene3xSegmentInfoFormat::getSegmentInfoReader() const
          {
            return ::org::apache::lucene::codecs::SegmentInfoReader(env->callObjectMethod(this$, mids$[mid_getSegmentInfoReader_1e88b6e7]));
          }

          ::org::apache::lucene::codecs::SegmentInfoWriter Lucene3xSegmentInfoFormat::getSegmentInfoWriter() const
          {
            return ::org::apache::lucene::codecs::SegmentInfoWriter(env->callObjectMethod(this$, mids$[mid_getSegmentInfoWriter_2d4ab533]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene3x {
          static PyObject *t_Lucene3xSegmentInfoFormat_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene3xSegmentInfoFormat_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene3xSegmentInfoFormat_init_(t_Lucene3xSegmentInfoFormat *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene3xSegmentInfoFormat_getDocStoreIsCompoundFile(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene3xSegmentInfoFormat_getDocStoreOffset(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene3xSegmentInfoFormat_getDocStoreSegment(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene3xSegmentInfoFormat_getSegmentInfoReader(t_Lucene3xSegmentInfoFormat *self, PyObject *args);
          static PyObject *t_Lucene3xSegmentInfoFormat_getSegmentInfoWriter(t_Lucene3xSegmentInfoFormat *self, PyObject *args);
          static PyObject *t_Lucene3xSegmentInfoFormat_get__segmentInfoReader(t_Lucene3xSegmentInfoFormat *self, void *data);
          static PyObject *t_Lucene3xSegmentInfoFormat_get__segmentInfoWriter(t_Lucene3xSegmentInfoFormat *self, void *data);
          static PyGetSetDef t_Lucene3xSegmentInfoFormat__fields_[] = {
            DECLARE_GET_FIELD(t_Lucene3xSegmentInfoFormat, segmentInfoReader),
            DECLARE_GET_FIELD(t_Lucene3xSegmentInfoFormat, segmentInfoWriter),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Lucene3xSegmentInfoFormat__methods_[] = {
            DECLARE_METHOD(t_Lucene3xSegmentInfoFormat, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene3xSegmentInfoFormat, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene3xSegmentInfoFormat, getDocStoreIsCompoundFile, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene3xSegmentInfoFormat, getDocStoreOffset, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene3xSegmentInfoFormat, getDocStoreSegment, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene3xSegmentInfoFormat, getSegmentInfoReader, METH_VARARGS),
            DECLARE_METHOD(t_Lucene3xSegmentInfoFormat, getSegmentInfoWriter, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene3xSegmentInfoFormat, t_Lucene3xSegmentInfoFormat, ::org::apache::lucene::codecs::SegmentInfoFormat, Lucene3xSegmentInfoFormat, t_Lucene3xSegmentInfoFormat_init_, 0, 0, t_Lucene3xSegmentInfoFormat__fields_, 0, 0);

          void t_Lucene3xSegmentInfoFormat::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene3xSegmentInfoFormat), module, "Lucene3xSegmentInfoFormat", 0);
          }

          void t_Lucene3xSegmentInfoFormat::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene3xSegmentInfoFormat).tp_dict, "class_", make_descriptor(Lucene3xSegmentInfoFormat::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene3xSegmentInfoFormat).tp_dict, "wrapfn_", make_descriptor(t_Lucene3xSegmentInfoFormat::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene3xSegmentInfoFormat).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(Lucene3xSegmentInfoFormat::initializeClass);
            PyDict_SetItemString(PY_TYPE(Lucene3xSegmentInfoFormat).tp_dict, "DS_COMPOUND_KEY", make_descriptor(j2p(*Lucene3xSegmentInfoFormat::DS_COMPOUND_KEY)));
            PyDict_SetItemString(PY_TYPE(Lucene3xSegmentInfoFormat).tp_dict, "DS_NAME_KEY", make_descriptor(j2p(*Lucene3xSegmentInfoFormat::DS_NAME_KEY)));
            PyDict_SetItemString(PY_TYPE(Lucene3xSegmentInfoFormat).tp_dict, "DS_OFFSET_KEY", make_descriptor(j2p(*Lucene3xSegmentInfoFormat::DS_OFFSET_KEY)));
            PyDict_SetItemString(PY_TYPE(Lucene3xSegmentInfoFormat).tp_dict, "FORMAT_3_1", make_descriptor(Lucene3xSegmentInfoFormat::FORMAT_3_1));
            PyDict_SetItemString(PY_TYPE(Lucene3xSegmentInfoFormat).tp_dict, "FORMAT_DIAGNOSTICS", make_descriptor(Lucene3xSegmentInfoFormat::FORMAT_DIAGNOSTICS));
            PyDict_SetItemString(PY_TYPE(Lucene3xSegmentInfoFormat).tp_dict, "FORMAT_HAS_VECTORS", make_descriptor(Lucene3xSegmentInfoFormat::FORMAT_HAS_VECTORS));
            PyDict_SetItemString(PY_TYPE(Lucene3xSegmentInfoFormat).tp_dict, "NORMGEN_KEY", make_descriptor(j2p(*Lucene3xSegmentInfoFormat::NORMGEN_KEY)));
            PyDict_SetItemString(PY_TYPE(Lucene3xSegmentInfoFormat).tp_dict, "NORMGEN_PREFIX", make_descriptor(j2p(*Lucene3xSegmentInfoFormat::NORMGEN_PREFIX)));
            PyDict_SetItemString(PY_TYPE(Lucene3xSegmentInfoFormat).tp_dict, "UPGRADED_SI_CODEC_NAME", make_descriptor(j2p(*Lucene3xSegmentInfoFormat::UPGRADED_SI_CODEC_NAME)));
            PyDict_SetItemString(PY_TYPE(Lucene3xSegmentInfoFormat).tp_dict, "UPGRADED_SI_EXTENSION", make_descriptor(j2p(*Lucene3xSegmentInfoFormat::UPGRADED_SI_EXTENSION)));
            PyDict_SetItemString(PY_TYPE(Lucene3xSegmentInfoFormat).tp_dict, "UPGRADED_SI_VERSION_CURRENT", make_descriptor(Lucene3xSegmentInfoFormat::UPGRADED_SI_VERSION_CURRENT));
            PyDict_SetItemString(PY_TYPE(Lucene3xSegmentInfoFormat).tp_dict, "UPGRADED_SI_VERSION_START", make_descriptor(Lucene3xSegmentInfoFormat::UPGRADED_SI_VERSION_START));
          }

          static PyObject *t_Lucene3xSegmentInfoFormat_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene3xSegmentInfoFormat::initializeClass, 1)))
              return NULL;
            return t_Lucene3xSegmentInfoFormat::wrap_Object(Lucene3xSegmentInfoFormat(((t_Lucene3xSegmentInfoFormat *) arg)->object.this$));
          }
          static PyObject *t_Lucene3xSegmentInfoFormat_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene3xSegmentInfoFormat::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene3xSegmentInfoFormat_init_(t_Lucene3xSegmentInfoFormat *self, PyObject *args, PyObject *kwds)
          {
            Lucene3xSegmentInfoFormat object((jobject) NULL);

            INT_CALL(object = Lucene3xSegmentInfoFormat());
            self->object = object;

            return 0;
          }

          static PyObject *t_Lucene3xSegmentInfoFormat_getDocStoreIsCompoundFile(PyTypeObject *type, PyObject *arg)
          {
            ::org::apache::lucene::index::SegmentInfo a0((jobject) NULL);
            jboolean result;

            if (!parseArg(arg, "k", ::org::apache::lucene::index::SegmentInfo::initializeClass, &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::codecs::lucene3x::Lucene3xSegmentInfoFormat::getDocStoreIsCompoundFile(a0));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError(type, "getDocStoreIsCompoundFile", arg);
            return NULL;
          }

          static PyObject *t_Lucene3xSegmentInfoFormat_getDocStoreOffset(PyTypeObject *type, PyObject *arg)
          {
            ::org::apache::lucene::index::SegmentInfo a0((jobject) NULL);
            jint result;

            if (!parseArg(arg, "k", ::org::apache::lucene::index::SegmentInfo::initializeClass, &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::codecs::lucene3x::Lucene3xSegmentInfoFormat::getDocStoreOffset(a0));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError(type, "getDocStoreOffset", arg);
            return NULL;
          }

          static PyObject *t_Lucene3xSegmentInfoFormat_getDocStoreSegment(PyTypeObject *type, PyObject *arg)
          {
            ::org::apache::lucene::index::SegmentInfo a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::index::SegmentInfo::initializeClass, &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::codecs::lucene3x::Lucene3xSegmentInfoFormat::getDocStoreSegment(a0));
              return j2p(result);
            }

            PyErr_SetArgsError(type, "getDocStoreSegment", arg);
            return NULL;
          }

          static PyObject *t_Lucene3xSegmentInfoFormat_getSegmentInfoReader(t_Lucene3xSegmentInfoFormat *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::SegmentInfoReader result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getSegmentInfoReader());
              return ::org::apache::lucene::codecs::t_SegmentInfoReader::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene3xSegmentInfoFormat), (PyObject *) self, "getSegmentInfoReader", args, 2);
          }

          static PyObject *t_Lucene3xSegmentInfoFormat_getSegmentInfoWriter(t_Lucene3xSegmentInfoFormat *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::SegmentInfoWriter result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getSegmentInfoWriter());
              return ::org::apache::lucene::codecs::t_SegmentInfoWriter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene3xSegmentInfoFormat), (PyObject *) self, "getSegmentInfoWriter", args, 2);
          }

          static PyObject *t_Lucene3xSegmentInfoFormat_get__segmentInfoReader(t_Lucene3xSegmentInfoFormat *self, void *data)
          {
            ::org::apache::lucene::codecs::SegmentInfoReader value((jobject) NULL);
            OBJ_CALL(value = self->object.getSegmentInfoReader());
            return ::org::apache::lucene::codecs::t_SegmentInfoReader::wrap_Object(value);
          }

          static PyObject *t_Lucene3xSegmentInfoFormat_get__segmentInfoWriter(t_Lucene3xSegmentInfoFormat *self, void *data)
          {
            ::org::apache::lucene::codecs::SegmentInfoWriter value((jobject) NULL);
            OBJ_CALL(value = self->object.getSegmentInfoWriter());
            return ::org::apache::lucene::codecs::t_SegmentInfoWriter::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/surround/query/SrndTruncQuery.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "java/lang/String.h"
#include "org/apache/lucene/queryparser/surround/query/SimpleTerm$MatchingTermVisitor.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace query {

            ::java::lang::Class *SrndTruncQuery::class$ = NULL;
            jmethodID *SrndTruncQuery::mids$ = NULL;
            bool SrndTruncQuery::live$ = false;

            jclass SrndTruncQuery::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/surround/query/SrndTruncQuery");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_d9707974] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;CC)V");
                mids$[mid_getTruncated_14c7b5c5] = env->getMethodID(cls, "getTruncated", "()Ljava/lang/String;");
                mids$[mid_toStringUnquoted_14c7b5c5] = env->getMethodID(cls, "toStringUnquoted", "()Ljava/lang/String;");
                mids$[mid_visitMatchingTerms_330199a1] = env->getMethodID(cls, "visitMatchingTerms", "(Lorg/apache/lucene/index/IndexReader;Ljava/lang/String;Lorg/apache/lucene/queryparser/surround/query/SimpleTerm$MatchingTermVisitor;)V");
                mids$[mid_matchingChar_87fd5456] = env->getMethodID(cls, "matchingChar", "(C)Z");
                mids$[mid_appendRegExpForChar_1dca1640] = env->getMethodID(cls, "appendRegExpForChar", "(CLjava/lang/StringBuilder;)V");
                mids$[mid_truncatedToPrefixAndPattern_54c6a166] = env->getMethodID(cls, "truncatedToPrefixAndPattern", "()V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            SrndTruncQuery::SrndTruncQuery(const ::java::lang::String & a0, jchar a1, jchar a2) : ::org::apache::lucene::queryparser::surround::query::SimpleTerm(env->newObject(initializeClass, &mids$, mid_init$_d9707974, a0.this$, a1, a2)) {}

            ::java::lang::String SrndTruncQuery::getTruncated() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getTruncated_14c7b5c5]));
            }

            ::java::lang::String SrndTruncQuery::toStringUnquoted() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toStringUnquoted_14c7b5c5]));
            }

            void SrndTruncQuery::visitMatchingTerms(const ::org::apache::lucene::index::IndexReader & a0, const ::java::lang::String & a1, const ::org::apache::lucene::queryparser::surround::query::SimpleTerm$MatchingTermVisitor & a2) const
            {
              env->callVoidMethod(this$, mids$[mid_visitMatchingTerms_330199a1], a0.this$, a1.this$, a2.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace query {
            static PyObject *t_SrndTruncQuery_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_SrndTruncQuery_instance_(PyTypeObject *type, PyObject *arg);
            static int t_SrndTruncQuery_init_(t_SrndTruncQuery *self, PyObject *args, PyObject *kwds);
            static PyObject *t_SrndTruncQuery_getTruncated(t_SrndTruncQuery *self);
            static PyObject *t_SrndTruncQuery_toStringUnquoted(t_SrndTruncQuery *self, PyObject *args);
            static PyObject *t_SrndTruncQuery_visitMatchingTerms(t_SrndTruncQuery *self, PyObject *args);
            static PyObject *t_SrndTruncQuery_get__truncated(t_SrndTruncQuery *self, void *data);
            static PyGetSetDef t_SrndTruncQuery__fields_[] = {
              DECLARE_GET_FIELD(t_SrndTruncQuery, truncated),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_SrndTruncQuery__methods_[] = {
              DECLARE_METHOD(t_SrndTruncQuery, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SrndTruncQuery, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SrndTruncQuery, getTruncated, METH_NOARGS),
              DECLARE_METHOD(t_SrndTruncQuery, toStringUnquoted, METH_VARARGS),
              DECLARE_METHOD(t_SrndTruncQuery, visitMatchingTerms, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(SrndTruncQuery, t_SrndTruncQuery, ::org::apache::lucene::queryparser::surround::query::SimpleTerm, SrndTruncQuery, t_SrndTruncQuery_init_, 0, 0, t_SrndTruncQuery__fields_, 0, 0);

            void t_SrndTruncQuery::install(PyObject *module)
            {
              installType(&PY_TYPE(SrndTruncQuery), module, "SrndTruncQuery", 0);
            }

            void t_SrndTruncQuery::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(SrndTruncQuery).tp_dict, "class_", make_descriptor(SrndTruncQuery::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(SrndTruncQuery).tp_dict, "wrapfn_", make_descriptor(t_SrndTruncQuery::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(SrndTruncQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_SrndTruncQuery_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, SrndTruncQuery::initializeClass, 1)))
                return NULL;
              return t_SrndTruncQuery::wrap_Object(SrndTruncQuery(((t_SrndTruncQuery *) arg)->object.this$));
            }
            static PyObject *t_SrndTruncQuery_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, SrndTruncQuery::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_SrndTruncQuery_init_(t_SrndTruncQuery *self, PyObject *args, PyObject *kwds)
            {
              ::java::lang::String a0((jobject) NULL);
              jchar a1;
              jchar a2;
              SrndTruncQuery object((jobject) NULL);

              if (!parseArgs(args, "sCC", &a0, &a1, &a2))
              {
                INT_CALL(object = SrndTruncQuery(a0, a1, a2));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_SrndTruncQuery_getTruncated(t_SrndTruncQuery *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.getTruncated());
              return j2p(result);
            }

            static PyObject *t_SrndTruncQuery_toStringUnquoted(t_SrndTruncQuery *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.toStringUnquoted());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(SrndTruncQuery), (PyObject *) self, "toStringUnquoted", args, 2);
            }

            static PyObject *t_SrndTruncQuery_visitMatchingTerms(t_SrndTruncQuery *self, PyObject *args)
            {
              ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              ::org::apache::lucene::queryparser::surround::query::SimpleTerm$MatchingTermVisitor a2((jobject) NULL);

              if (!parseArgs(args, "ksk", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::queryparser::surround::query::SimpleTerm$MatchingTermVisitor::initializeClass, &a0, &a1, &a2))
              {
                OBJ_CALL(self->object.visitMatchingTerms(a0, a1, a2));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(SrndTruncQuery), (PyObject *) self, "visitMatchingTerms", args, 2);
            }

            static PyObject *t_SrndTruncQuery_get__truncated(t_SrndTruncQuery *self, void *data)
            {
              ::java::lang::String value((jobject) NULL);
              OBJ_CALL(value = self->object.getTruncated());
              return j2p(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/ScandinavianNormalizationFilterFactory.h"
#include "org/apache/lucene/analysis/miscellaneous/ScandinavianNormalizationFilter.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *ScandinavianNormalizationFilterFactory::class$ = NULL;
          jmethodID *ScandinavianNormalizationFilterFactory::mids$ = NULL;
          bool ScandinavianNormalizationFilterFactory::live$ = false;

          jclass ScandinavianNormalizationFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/ScandinavianNormalizationFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_c49b1257] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/miscellaneous/ScandinavianNormalizationFilter;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ScandinavianNormalizationFilterFactory::ScandinavianNormalizationFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::miscellaneous::ScandinavianNormalizationFilter ScandinavianNormalizationFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::miscellaneous::ScandinavianNormalizationFilter(env->callObjectMethod(this$, mids$[mid_create_c49b1257], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_ScandinavianNormalizationFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ScandinavianNormalizationFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ScandinavianNormalizationFilterFactory_init_(t_ScandinavianNormalizationFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ScandinavianNormalizationFilterFactory_create(t_ScandinavianNormalizationFilterFactory *self, PyObject *args);

          static PyMethodDef t_ScandinavianNormalizationFilterFactory__methods_[] = {
            DECLARE_METHOD(t_ScandinavianNormalizationFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ScandinavianNormalizationFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ScandinavianNormalizationFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ScandinavianNormalizationFilterFactory, t_ScandinavianNormalizationFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, ScandinavianNormalizationFilterFactory, t_ScandinavianNormalizationFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_ScandinavianNormalizationFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(ScandinavianNormalizationFilterFactory), module, "ScandinavianNormalizationFilterFactory", 0);
          }

          void t_ScandinavianNormalizationFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ScandinavianNormalizationFilterFactory).tp_dict, "class_", make_descriptor(ScandinavianNormalizationFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ScandinavianNormalizationFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_ScandinavianNormalizationFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ScandinavianNormalizationFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ScandinavianNormalizationFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ScandinavianNormalizationFilterFactory::initializeClass, 1)))
              return NULL;
            return t_ScandinavianNormalizationFilterFactory::wrap_Object(ScandinavianNormalizationFilterFactory(((t_ScandinavianNormalizationFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_ScandinavianNormalizationFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ScandinavianNormalizationFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ScandinavianNormalizationFilterFactory_init_(t_ScandinavianNormalizationFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            ScandinavianNormalizationFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = ScandinavianNormalizationFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ScandinavianNormalizationFilterFactory_create(t_ScandinavianNormalizationFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::miscellaneous::ScandinavianNormalizationFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::miscellaneous::t_ScandinavianNormalizationFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(ScandinavianNormalizationFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/Counter.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *Counter::class$ = NULL;
        jmethodID *Counter::mids$ = NULL;
        bool Counter::live$ = false;

        jclass Counter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/Counter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_addAndGet_0ee6df33] = env->getMethodID(cls, "addAndGet", "(J)J");
            mids$[mid_get_54c6a17a] = env->getMethodID(cls, "get", "()J");
            mids$[mid_newCounter_781dd30a] = env->getStaticMethodID(cls, "newCounter", "()Lorg/apache/lucene/util/Counter;");
            mids$[mid_newCounter_aad2ede1] = env->getStaticMethodID(cls, "newCounter", "(Z)Lorg/apache/lucene/util/Counter;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        Counter::Counter() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jlong Counter::addAndGet(jlong a0) const
        {
          return env->callLongMethod(this$, mids$[mid_addAndGet_0ee6df33], a0);
        }

        jlong Counter::get() const
        {
          return env->callLongMethod(this$, mids$[mid_get_54c6a17a]);
        }

        Counter Counter::newCounter()
        {
          jclass cls = env->getClass(initializeClass);
          return Counter(env->callStaticObjectMethod(cls, mids$[mid_newCounter_781dd30a]));
        }

        Counter Counter::newCounter(jboolean a0)
        {
          jclass cls = env->getClass(initializeClass);
          return Counter(env->callStaticObjectMethod(cls, mids$[mid_newCounter_aad2ede1], a0));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_Counter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Counter_instance_(PyTypeObject *type, PyObject *arg);
        static int t_Counter_init_(t_Counter *self, PyObject *args, PyObject *kwds);
        static PyObject *t_Counter_addAndGet(t_Counter *self, PyObject *arg);
        static PyObject *t_Counter_get(t_Counter *self);
        static PyObject *t_Counter_newCounter(PyTypeObject *type, PyObject *args);

        static PyMethodDef t_Counter__methods_[] = {
          DECLARE_METHOD(t_Counter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Counter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Counter, addAndGet, METH_O),
          DECLARE_METHOD(t_Counter, get, METH_NOARGS),
          DECLARE_METHOD(t_Counter, newCounter, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Counter, t_Counter, ::java::lang::Object, Counter, t_Counter_init_, 0, 0, 0, 0, 0);

        void t_Counter::install(PyObject *module)
        {
          installType(&PY_TYPE(Counter), module, "Counter", 0);
        }

        void t_Counter::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(Counter).tp_dict, "class_", make_descriptor(Counter::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(Counter).tp_dict, "wrapfn_", make_descriptor(t_Counter::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(Counter).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Counter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Counter::initializeClass, 1)))
            return NULL;
          return t_Counter::wrap_Object(Counter(((t_Counter *) arg)->object.this$));
        }
        static PyObject *t_Counter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Counter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_Counter_init_(t_Counter *self, PyObject *args, PyObject *kwds)
        {
          Counter object((jobject) NULL);

          INT_CALL(object = Counter());
          self->object = object;

          return 0;
        }

        static PyObject *t_Counter_addAndGet(t_Counter *self, PyObject *arg)
        {
          jlong a0;
          jlong result;

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(result = self->object.addAndGet(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError((PyObject *) self, "addAndGet", arg);
          return NULL;
        }

        static PyObject *t_Counter_get(t_Counter *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.get());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_Counter_newCounter(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              Counter result((jobject) NULL);
              OBJ_CALL(result = ::org::apache::lucene::util::Counter::newCounter());
              return t_Counter::wrap_Object(result);
            }
            break;
           case 1:
            {
              jboolean a0;
              Counter result((jobject) NULL);

              if (!parseArgs(args, "Z", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::Counter::newCounter(a0));
                return t_Counter::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError(type, "newCounter", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/lang/Double.h"
#include "java/lang/Class.h"
#include "java/lang/Comparable.h"
#include "java/lang/Object.h"
#include "java/lang/NumberFormatException.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace java {
  namespace lang {

    ::java::lang::Class *Double::class$ = NULL;
    jmethodID *Double::mids$ = NULL;
    bool Double::live$ = false;
    jint Double::BYTES = (jint) 0;
    jint Double::MAX_EXPONENT = (jint) 0;
    jdouble Double::MAX_VALUE = (jdouble) 0;
    jint Double::MIN_EXPONENT = (jint) 0;
    jdouble Double::MIN_NORMAL = (jdouble) 0;
    jdouble Double::MIN_VALUE = (jdouble) 0;
    jdouble Double::NEGATIVE_INFINITY = (jdouble) 0;
    jdouble Double::NaN = (jdouble) 0;
    jdouble Double::POSITIVE_INFINITY = (jdouble) 0;
    jint Double::SIZE = (jint) 0;
    ::java::lang::Class *Double::TYPE = NULL;

    jclass Double::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/lang/Double");

        mids$ = new jmethodID[max_mid];
        mids$[mid_init$_5d1c7645] = env->getMethodID(cls, "<init>", "(D)V");
        mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
        mids$[mid_byteValue_54c6a172] = env->getMethodID(cls, "byteValue", "()B");
        mids$[mid_compare_b1e28667] = env->getStaticMethodID(cls, "compare", "(DD)I");
        mids$[mid_compareTo_8baed073] = env->getMethodID(cls, "compareTo", "(Ljava/lang/Double;)I");
        mids$[mid_doubleToLongBits_5d1c7659] = env->getStaticMethodID(cls, "doubleToLongBits", "(D)J");
        mids$[mid_doubleToRawLongBits_5d1c7659] = env->getStaticMethodID(cls, "doubleToRawLongBits", "(D)J");
        mids$[mid_doubleValue_54c6a174] = env->getMethodID(cls, "doubleValue", "()D");
        mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
        mids$[mid_floatValue_54c6a176] = env->getMethodID(cls, "floatValue", "()F");
        mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
        mids$[mid_hashCode_5d1c765a] = env->getStaticMethodID(cls, "hashCode", "(D)I");
        mids$[mid_intValue_54c6a179] = env->getMethodID(cls, "intValue", "()I");
        mids$[mid_isFinite_5d1c7649] = env->getStaticMethodID(cls, "isFinite", "(D)Z");
        mids$[mid_isInfinite_54c6a16a] = env->getMethodID(cls, "isInfinite", "()Z");
        mids$[mid_isInfinite_5d1c7649] = env->getStaticMethodID(cls, "isInfinite", "(D)Z");
        mids$[mid_isNaN_54c6a16a] = env->getMethodID(cls, "isNaN", "()Z");
        mids$[mid_isNaN_5d1c7649] = env->getStaticMethodID(cls, "isNaN", "(D)Z");
        mids$[mid_longBitsToDouble_0ee6df3d] = env->getStaticMethodID(cls, "longBitsToDouble", "(J)D");
        mids$[mid_longValue_54c6a17a] = env->getMethodID(cls, "longValue", "()J");
        mids$[mid_max_b1e2866a] = env->getStaticMethodID(cls, "max", "(DD)D");
        mids$[mid_min_b1e2866a] = env->getStaticMethodID(cls, "min", "(DD)D");
        mids$[mid_parseDouble_5fdc3f5a] = env->getStaticMethodID(cls, "parseDouble", "(Ljava/lang/String;)D");
        mids$[mid_shortValue_54c6a163] = env->getMethodID(cls, "shortValue", "()S");
        mids$[mid_sum_b1e2866a] = env->getStaticMethodID(cls, "sum", "(DD)D");
        mids$[mid_toHexString_1b4624f8] = env->getStaticMethodID(cls, "toHexString", "(D)Ljava/lang/String;");
        mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
        mids$[mid_toString_1b4624f8] = env->getStaticMethodID(cls, "toString", "(D)Ljava/lang/String;");
        mids$[mid_valueOf_ad1fcbf0] = env->getStaticMethodID(cls, "valueOf", "(D)Ljava/lang/Double;");
        mids$[mid_valueOf_16296787] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Ljava/lang/Double;");

        class$ = (::java::lang::Class *) new JObject(cls);
        cls = (jclass) class$->this$;

        BYTES = env->getStaticIntField(cls, "BYTES");
        MAX_EXPONENT = env->getStaticIntField(cls, "MAX_EXPONENT");
        MAX_VALUE = env->getStaticDoubleField(cls, "MAX_VALUE");
        MIN_EXPONENT = env->getStaticIntField(cls, "MIN_EXPONENT");
        MIN_NORMAL = env->getStaticDoubleField(cls, "MIN_NORMAL");
        MIN_VALUE = env->getStaticDoubleField(cls, "MIN_VALUE");
        NEGATIVE_INFINITY = env->getStaticDoubleField(cls, "NEGATIVE_INFINITY");
        NaN = env->getStaticDoubleField(cls, "NaN");
        POSITIVE_INFINITY = env->getStaticDoubleField(cls, "POSITIVE_INFINITY");
        SIZE = env->getStaticIntField(cls, "SIZE");
        TYPE = new ::java::lang::Class(env->getStaticObjectField(cls, "TYPE", "Ljava/lang/Class;"));
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    Double::Double(jdouble a0) : ::java::lang::Number(env->newObject(initializeClass, &mids$, mid_init$_5d1c7645, a0)) {}

    Double::Double(const ::java::lang::String & a0) : ::java::lang::Number(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

    jbyte Double::byteValue() const
    {
      return env->callByteMethod(this$, mids$[mid_byteValue_54c6a172]);
    }

    jint Double::compare(jdouble a0, jdouble a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_compare_b1e28667], a0, a1);
    }

    jint Double::compareTo(const Double & a0) const
    {
      return env->callIntMethod(this$, mids$[mid_compareTo_8baed073], a0.this$);
    }

    jlong Double::doubleToLongBits(jdouble a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticLongMethod(cls, mids$[mid_doubleToLongBits_5d1c7659], a0);
    }

    jlong Double::doubleToRawLongBits(jdouble a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticLongMethod(cls, mids$[mid_doubleToRawLongBits_5d1c7659], a0);
    }

    jdouble Double::doubleValue() const
    {
      return env->callDoubleMethod(this$, mids$[mid_doubleValue_54c6a174]);
    }

    jboolean Double::equals(const ::java::lang::Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
    }

    jfloat Double::floatValue() const
    {
      return env->callFloatMethod(this$, mids$[mid_floatValue_54c6a176]);
    }

    jint Double::hashCode() const
    {
      return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
    }

    jint Double::hashCode(jdouble a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_hashCode_5d1c765a], a0);
    }

    jint Double::intValue() const
    {
      return env->callIntMethod(this$, mids$[mid_intValue_54c6a179]);
    }

    jboolean Double::isFinite(jdouble a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isFinite_5d1c7649], a0);
    }

    jboolean Double::isInfinite() const
    {
      return env->callBooleanMethod(this$, mids$[mid_isInfinite_54c6a16a]);
    }

    jboolean Double::isInfinite(jdouble a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isInfinite_5d1c7649], a0);
    }

    jboolean Double::isNaN() const
    {
      return env->callBooleanMethod(this$, mids$[mid_isNaN_54c6a16a]);
    }

    jboolean Double::isNaN(jdouble a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isNaN_5d1c7649], a0);
    }

    jdouble Double::longBitsToDouble(jlong a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticDoubleMethod(cls, mids$[mid_longBitsToDouble_0ee6df3d], a0);
    }

    jlong Double::longValue() const
    {
      return env->callLongMethod(this$, mids$[mid_longValue_54c6a17a]);
    }

    jdouble Double::max$(jdouble a0, jdouble a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticDoubleMethod(cls, mids$[mid_max_b1e2866a], a0, a1);
    }

    jdouble Double::min$(jdouble a0, jdouble a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticDoubleMethod(cls, mids$[mid_min_b1e2866a], a0, a1);
    }

    jdouble Double::parseDouble(const ::java::lang::String & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticDoubleMethod(cls, mids$[mid_parseDouble_5fdc3f5a], a0.this$);
    }

    jshort Double::shortValue() const
    {
      return env->callShortMethod(this$, mids$[mid_shortValue_54c6a163]);
    }

    jdouble Double::sum(jdouble a0, jdouble a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticDoubleMethod(cls, mids$[mid_sum_b1e2866a], a0, a1);
    }

    ::java::lang::String Double::toHexString(jdouble a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toHexString_1b4624f8], a0));
    }

    ::java::lang::String Double::toString() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
    }

    ::java::lang::String Double::toString(jdouble a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toString_1b4624f8], a0));
    }

    Double Double::valueOf(jdouble a0)
    {
      jclass cls = env->getClass(initializeClass);
      return Double(env->callStaticObjectMethod(cls, mids$[mid_valueOf_ad1fcbf0], a0));
    }

    Double Double::valueOf(const ::java::lang::String & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return Double(env->callStaticObjectMethod(cls, mids$[mid_valueOf_16296787], a0.this$));
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace lang {
    static PyObject *t_Double_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Double_instance_(PyTypeObject *type, PyObject *arg);
    static int t_Double_init_(t_Double *self, PyObject *args, PyObject *kwds);
    static PyObject *t_Double_byteValue(t_Double *self, PyObject *args);
    static PyObject *t_Double_compare(PyTypeObject *type, PyObject *args);
    static PyObject *t_Double_compareTo(t_Double *self, PyObject *arg);
    static PyObject *t_Double_doubleToLongBits(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Double_doubleToRawLongBits(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Double_doubleValue(t_Double *self, PyObject *args);
    static PyObject *t_Double_equals(t_Double *self, PyObject *args);
    static PyObject *t_Double_floatValue(t_Double *self, PyObject *args);
    static PyObject *t_Double_hashCode(t_Double *self, PyObject *args);
    static PyObject *t_Double_hashCode_(PyTypeObject *type, PyObject *args);
    static PyObject *t_Double_intValue(t_Double *self, PyObject *args);
    static PyObject *t_Double_isFinite(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Double_isInfinite(t_Double *self);
    static PyObject *t_Double_isInfinite_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Double_isNaN(t_Double *self);
    static PyObject *t_Double_isNaN_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Double_longBitsToDouble(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Double_longValue(t_Double *self, PyObject *args);
    static PyObject *t_Double_max(PyTypeObject *type, PyObject *args);
    static PyObject *t_Double_min(PyTypeObject *type, PyObject *args);
    static PyObject *t_Double_parseDouble(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Double_shortValue(t_Double *self, PyObject *args);
    static PyObject *t_Double_sum(PyTypeObject *type, PyObject *args);
    static PyObject *t_Double_toHexString(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Double_toString(t_Double *self, PyObject *args);
    static PyObject *t_Double_toString_(PyTypeObject *type, PyObject *args);
    static PyObject *t_Double_valueOf(PyTypeObject *type, PyObject *args);
    static PyObject *t_Double_get__infinite(t_Double *self, void *data);
    static PyObject *t_Double_get__naN(t_Double *self, void *data);
    static PyGetSetDef t_Double__fields_[] = {
      DECLARE_GET_FIELD(t_Double, infinite),
      DECLARE_GET_FIELD(t_Double, naN),
      { NULL, NULL, NULL, NULL, NULL }
    };

    static PyMethodDef t_Double__methods_[] = {
      DECLARE_METHOD(t_Double, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Double, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Double, byteValue, METH_VARARGS),
      DECLARE_METHOD(t_Double, compare, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Double, compareTo, METH_O),
      DECLARE_METHOD(t_Double, doubleToLongBits, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Double, doubleToRawLongBits, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Double, doubleValue, METH_VARARGS),
      DECLARE_METHOD(t_Double, equals, METH_VARARGS),
      DECLARE_METHOD(t_Double, floatValue, METH_VARARGS),
      DECLARE_METHOD(t_Double, hashCode, METH_VARARGS),
      DECLARE_METHOD(t_Double, hashCode_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Double, intValue, METH_VARARGS),
      DECLARE_METHOD(t_Double, isFinite, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Double, isInfinite, METH_NOARGS),
      DECLARE_METHOD(t_Double, isInfinite_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Double, isNaN, METH_NOARGS),
      DECLARE_METHOD(t_Double, isNaN_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Double, longBitsToDouble, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Double, longValue, METH_VARARGS),
      DECLARE_METHOD(t_Double, max, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Double, min, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Double, parseDouble, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Double, shortValue, METH_VARARGS),
      DECLARE_METHOD(t_Double, sum, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Double, toHexString, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Double, toString, METH_VARARGS),
      DECLARE_METHOD(t_Double, toString_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Double, valueOf, METH_VARARGS | METH_CLASS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(Double, t_Double, ::java::lang::Number, Double, t_Double_init_, 0, 0, t_Double__fields_, 0, 0);

    void t_Double::install(PyObject *module)
    {
      installType(&PY_TYPE(Double), module, "Double", 0);
    }

    void t_Double::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(Double).tp_dict, "class_", make_descriptor(Double::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(Double).tp_dict, "wrapfn_", make_descriptor(unboxDouble));
      PyDict_SetItemString(PY_TYPE(Double).tp_dict, "boxfn_", make_descriptor(boxDouble));
      env->getClass(Double::initializeClass);
      PyDict_SetItemString(PY_TYPE(Double).tp_dict, "BYTES", make_descriptor(Double::BYTES));
      PyDict_SetItemString(PY_TYPE(Double).tp_dict, "MAX_EXPONENT", make_descriptor(Double::MAX_EXPONENT));
      PyDict_SetItemString(PY_TYPE(Double).tp_dict, "MAX_VALUE", make_descriptor(Double::MAX_VALUE));
      PyDict_SetItemString(PY_TYPE(Double).tp_dict, "MIN_EXPONENT", make_descriptor(Double::MIN_EXPONENT));
      PyDict_SetItemString(PY_TYPE(Double).tp_dict, "MIN_NORMAL", make_descriptor(Double::MIN_NORMAL));
      PyDict_SetItemString(PY_TYPE(Double).tp_dict, "MIN_VALUE", make_descriptor(Double::MIN_VALUE));
      PyDict_SetItemString(PY_TYPE(Double).tp_dict, "NEGATIVE_INFINITY", make_descriptor(Double::NEGATIVE_INFINITY));
      PyDict_SetItemString(PY_TYPE(Double).tp_dict, "NaN", make_descriptor(Double::NaN));
      PyDict_SetItemString(PY_TYPE(Double).tp_dict, "POSITIVE_INFINITY", make_descriptor(Double::POSITIVE_INFINITY));
      PyDict_SetItemString(PY_TYPE(Double).tp_dict, "SIZE", make_descriptor(Double::SIZE));
      PyDict_SetItemString(PY_TYPE(Double).tp_dict, "TYPE", make_descriptor(::java::lang::t_Class::wrap_Object(*Double::TYPE)));
    }

    static PyObject *t_Double_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, Double::initializeClass, 1)))
        return NULL;
      return t_Double::wrap_Object(Double(((t_Double *) arg)->object.this$));
    }
    static PyObject *t_Double_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, Double::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static int t_Double_init_(t_Double *self, PyObject *args, PyObject *kwds)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jdouble a0;
          Double object((jobject) NULL);

          if (!parseArgs(args, "D", &a0))
          {
            INT_CALL(object = Double(a0));
            self->object = object;
            break;
          }
        }
        {
          ::java::lang::String a0((jobject) NULL);
          Double object((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            INT_CALL(object = Double(a0));
            self->object = object;
            break;
          }
        }
       default:
        PyErr_SetArgsError((PyObject *) self, "__init__", args);
        return -1;
      }

      return 0;
    }

    static PyObject *t_Double_byteValue(t_Double *self, PyObject *args)
    {
      jbyte result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.byteValue());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(Double), (PyObject *) self, "byteValue", args, 2);
    }

    static PyObject *t_Double_compare(PyTypeObject *type, PyObject *args)
    {
      jdouble a0;
      jdouble a1;
      jint result;

      if (!parseArgs(args, "DD", &a0, &a1))
      {
        OBJ_CALL(result = ::java::lang::Double::compare(a0, a1));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "compare", args);
      return NULL;
    }

    static PyObject *t_Double_compareTo(t_Double *self, PyObject *arg)
    {
      Double a0((jobject) NULL);
      jint result;

      if (!parseArg(arg, "O", &::java::lang::PY_TYPE(Double), &a0))
      {
        OBJ_CALL(result = self->object.compareTo(a0));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError((PyObject *) self, "compareTo", arg);
      return NULL;
    }

    static PyObject *t_Double_doubleToLongBits(PyTypeObject *type, PyObject *arg)
    {
      jdouble a0;
      jlong result;

      if (!parseArg(arg, "D", &a0))
      {
        OBJ_CALL(result = ::java::lang::Double::doubleToLongBits(a0));
        return PyLong_FromLongLong((PY_LONG_LONG) result);
      }

      PyErr_SetArgsError(type, "doubleToLongBits", arg);
      return NULL;
    }

    static PyObject *t_Double_doubleToRawLongBits(PyTypeObject *type, PyObject *arg)
    {
      jdouble a0;
      jlong result;

      if (!parseArg(arg, "D", &a0))
      {
        OBJ_CALL(result = ::java::lang::Double::doubleToRawLongBits(a0));
        return PyLong_FromLongLong((PY_LONG_LONG) result);
      }

      PyErr_SetArgsError(type, "doubleToRawLongBits", arg);
      return NULL;
    }

    static PyObject *t_Double_doubleValue(t_Double *self, PyObject *args)
    {
      jdouble result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.doubleValue());
        return PyFloat_FromDouble((double) result);
      }

      return callSuper(&PY_TYPE(Double), (PyObject *) self, "doubleValue", args, 2);
    }

    static PyObject *t_Double_equals(t_Double *self, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      jboolean result;

      if (!parseArgs(args, "o", &a0))
      {
        OBJ_CALL(result = self->object.equals(a0));
        Py_RETURN_BOOL(result);
      }

      return callSuper(&PY_TYPE(Double), (PyObject *) self, "equals", args, 2);
    }

    static PyObject *t_Double_floatValue(t_Double *self, PyObject *args)
    {
      jfloat result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.floatValue());
        return PyFloat_FromDouble((double) result);
      }

      return callSuper(&PY_TYPE(Double), (PyObject *) self, "floatValue", args, 2);
    }

    static PyObject *t_Double_hashCode(t_Double *self, PyObject *args)
    {
      jint result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.hashCode());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(Double), (PyObject *) self, "hashCode", args, 2);
    }

    static PyObject *t_Double_hashCode_(PyTypeObject *type, PyObject *args)
    {
      jdouble a0;
      jint result;

      if (!parseArgs(args, "D", &a0))
      {
        OBJ_CALL(result = ::java::lang::Double::hashCode(a0));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "hashCode_", args);
      return NULL;
    }

    static PyObject *t_Double_intValue(t_Double *self, PyObject *args)
    {
      jint result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.intValue());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(Double), (PyObject *) self, "intValue", args, 2);
    }

    static PyObject *t_Double_isFinite(PyTypeObject *type, PyObject *arg)
    {
      jdouble a0;
      jboolean result;

      if (!parseArg(arg, "D", &a0))
      {
        OBJ_CALL(result = ::java::lang::Double::isFinite(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError(type, "isFinite", arg);
      return NULL;
    }

    static PyObject *t_Double_isInfinite(t_Double *self)
    {
      jboolean result;
      OBJ_CALL(result = self->object.isInfinite());
      Py_RETURN_BOOL(result);
    }

    static PyObject *t_Double_isInfinite_(PyTypeObject *type, PyObject *arg)
    {
      jdouble a0;
      jboolean result;

      if (!parseArg(arg, "D", &a0))
      {
        OBJ_CALL(result = ::java::lang::Double::isInfinite(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError(type, "isInfinite_", arg);
      return NULL;
    }

    static PyObject *t_Double_isNaN(t_Double *self)
    {
      jboolean result;
      OBJ_CALL(result = self->object.isNaN());
      Py_RETURN_BOOL(result);
    }

    static PyObject *t_Double_isNaN_(PyTypeObject *type, PyObject *arg)
    {
      jdouble a0;
      jboolean result;

      if (!parseArg(arg, "D", &a0))
      {
        OBJ_CALL(result = ::java::lang::Double::isNaN(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError(type, "isNaN_", arg);
      return NULL;
    }

    static PyObject *t_Double_longBitsToDouble(PyTypeObject *type, PyObject *arg)
    {
      jlong a0;
      jdouble result;

      if (!parseArg(arg, "J", &a0))
      {
        OBJ_CALL(result = ::java::lang::Double::longBitsToDouble(a0));
        return PyFloat_FromDouble((double) result);
      }

      PyErr_SetArgsError(type, "longBitsToDouble", arg);
      return NULL;
    }

    static PyObject *t_Double_longValue(t_Double *self, PyObject *args)
    {
      jlong result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.longValue());
        return PyLong_FromLongLong((PY_LONG_LONG) result);
      }

      return callSuper(&PY_TYPE(Double), (PyObject *) self, "longValue", args, 2);
    }

    static PyObject *t_Double_max(PyTypeObject *type, PyObject *args)
    {
      jdouble a0;
      jdouble a1;
      jdouble result;

      if (!parseArgs(args, "DD", &a0, &a1))
      {
        OBJ_CALL(result = ::java::lang::Double::max$(a0, a1));
        return PyFloat_FromDouble((double) result);
      }

      PyErr_SetArgsError(type, "max", args);
      return NULL;
    }

    static PyObject *t_Double_min(PyTypeObject *type, PyObject *args)
    {
      jdouble a0;
      jdouble a1;
      jdouble result;

      if (!parseArgs(args, "DD", &a0, &a1))
      {
        OBJ_CALL(result = ::java::lang::Double::min$(a0, a1));
        return PyFloat_FromDouble((double) result);
      }

      PyErr_SetArgsError(type, "min", args);
      return NULL;
    }

    static PyObject *t_Double_parseDouble(PyTypeObject *type, PyObject *arg)
    {
      ::java::lang::String a0((jobject) NULL);
      jdouble result;

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(result = ::java::lang::Double::parseDouble(a0));
        return PyFloat_FromDouble((double) result);
      }

      PyErr_SetArgsError(type, "parseDouble", arg);
      return NULL;
    }

    static PyObject *t_Double_shortValue(t_Double *self, PyObject *args)
    {
      jshort result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.shortValue());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(Double), (PyObject *) self, "shortValue", args, 2);
    }

    static PyObject *t_Double_sum(PyTypeObject *type, PyObject *args)
    {
      jdouble a0;
      jdouble a1;
      jdouble result;

      if (!parseArgs(args, "DD", &a0, &a1))
      {
        OBJ_CALL(result = ::java::lang::Double::sum(a0, a1));
        return PyFloat_FromDouble((double) result);
      }

      PyErr_SetArgsError(type, "sum", args);
      return NULL;
    }

    static PyObject *t_Double_toHexString(PyTypeObject *type, PyObject *arg)
    {
      jdouble a0;
      ::java::lang::String result((jobject) NULL);

      if (!parseArg(arg, "D", &a0))
      {
        OBJ_CALL(result = ::java::lang::Double::toHexString(a0));
        return j2p(result);
      }

      PyErr_SetArgsError(type, "toHexString", arg);
      return NULL;
    }

    static PyObject *t_Double_toString(t_Double *self, PyObject *args)
    {
      ::java::lang::String result((jobject) NULL);

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.toString());
        return j2p(result);
      }

      return callSuper(&PY_TYPE(Double), (PyObject *) self, "toString", args, 2);
    }

    static PyObject *t_Double_toString_(PyTypeObject *type, PyObject *args)
    {
      jdouble a0;
      ::java::lang::String result((jobject) NULL);

      if (!parseArgs(args, "D", &a0))
      {
        OBJ_CALL(result = ::java::lang::Double::toString(a0));
        return j2p(result);
      }

      PyErr_SetArgsError(type, "toString_", args);
      return NULL;
    }

    static PyObject *t_Double_valueOf(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jdouble a0;
          Double result((jobject) NULL);

          if (!parseArgs(args, "D", &a0))
          {
            OBJ_CALL(result = ::java::lang::Double::valueOf(a0));
            return t_Double::wrap_Object(result);
          }
        }
        {
          ::java::lang::String a0((jobject) NULL);
          Double result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::java::lang::Double::valueOf(a0));
            return t_Double::wrap_Object(result);
          }
        }
      }

      PyErr_SetArgsError(type, "valueOf", args);
      return NULL;
    }

    static PyObject *t_Double_get__infinite(t_Double *self, void *data)
    {
      jboolean value;
      OBJ_CALL(value = self->object.isInfinite());
      Py_RETURN_BOOL(value);
    }

    static PyObject *t_Double_get__naN(t_Double *self, void *data)
    {
      jboolean value;
      OBJ_CALL(value = self->object.isNaN());
      Py_RETURN_BOOL(value);
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/ext/ParserExtension.h"
#include "org/apache/lucene/queryparser/ext/ExtensionQuery.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/queryparser/classic/ParseException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace ext {

          ::java::lang::Class *ParserExtension::class$ = NULL;
          jmethodID *ParserExtension::mids$ = NULL;
          bool ParserExtension::live$ = false;

          jclass ParserExtension::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/ext/ParserExtension");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_parse_d185629b] = env->getMethodID(cls, "parse", "(Lorg/apache/lucene/queryparser/ext/ExtensionQuery;)Lorg/apache/lucene/search/Query;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ParserExtension::ParserExtension() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::search::Query ParserExtension::parse(const ::org::apache::lucene::queryparser::ext::ExtensionQuery & a0) const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_parse_d185629b], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace ext {
          static PyObject *t_ParserExtension_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ParserExtension_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ParserExtension_init_(t_ParserExtension *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ParserExtension_parse(t_ParserExtension *self, PyObject *arg);

          static PyMethodDef t_ParserExtension__methods_[] = {
            DECLARE_METHOD(t_ParserExtension, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ParserExtension, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ParserExtension, parse, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ParserExtension, t_ParserExtension, ::java::lang::Object, ParserExtension, t_ParserExtension_init_, 0, 0, 0, 0, 0);

          void t_ParserExtension::install(PyObject *module)
          {
            installType(&PY_TYPE(ParserExtension), module, "ParserExtension", 0);
          }

          void t_ParserExtension::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ParserExtension).tp_dict, "class_", make_descriptor(ParserExtension::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ParserExtension).tp_dict, "wrapfn_", make_descriptor(t_ParserExtension::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ParserExtension).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ParserExtension_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ParserExtension::initializeClass, 1)))
              return NULL;
            return t_ParserExtension::wrap_Object(ParserExtension(((t_ParserExtension *) arg)->object.this$));
          }
          static PyObject *t_ParserExtension_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ParserExtension::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ParserExtension_init_(t_ParserExtension *self, PyObject *args, PyObject *kwds)
          {
            ParserExtension object((jobject) NULL);

            INT_CALL(object = ParserExtension());
            self->object = object;

            return 0;
          }

          static PyObject *t_ParserExtension_parse(t_ParserExtension *self, PyObject *arg)
          {
            ::org::apache::lucene::queryparser::ext::ExtensionQuery a0((jobject) NULL);
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::ext::ExtensionQuery::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.parse(a0));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "parse", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/PersistentSnapshotDeletionPolicy.h"
#include "org/apache/lucene/index/IndexCommit.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/IndexWriterConfig$OpenMode.h"
#include "org/apache/lucene/index/IndexDeletionPolicy.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *PersistentSnapshotDeletionPolicy::class$ = NULL;
        jmethodID *PersistentSnapshotDeletionPolicy::mids$ = NULL;
        bool PersistentSnapshotDeletionPolicy::live$ = false;
        ::java::lang::String *PersistentSnapshotDeletionPolicy::SNAPSHOTS_PREFIX = NULL;

        jclass PersistentSnapshotDeletionPolicy::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/PersistentSnapshotDeletionPolicy");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_12208c4a] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/IndexDeletionPolicy;Lorg/apache/lucene/store/Directory;)V");
            mids$[mid_init$_7f5c9dc9] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/IndexDeletionPolicy;Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/IndexWriterConfig$OpenMode;)V");
            mids$[mid_getLastSaveFile_14c7b5c5] = env->getMethodID(cls, "getLastSaveFile", "()Ljava/lang/String;");
            mids$[mid_release_fecc65d3] = env->getMethodID(cls, "release", "(Lorg/apache/lucene/index/IndexCommit;)V");
            mids$[mid_release_0ee6df2f] = env->getMethodID(cls, "release", "(J)V");
            mids$[mid_snapshot_09307276] = env->getMethodID(cls, "snapshot", "()Lorg/apache/lucene/index/IndexCommit;");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            SNAPSHOTS_PREFIX = new ::java::lang::String(env->getStaticObjectField(cls, "SNAPSHOTS_PREFIX", "Ljava/lang/String;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PersistentSnapshotDeletionPolicy::PersistentSnapshotDeletionPolicy(const ::org::apache::lucene::index::IndexDeletionPolicy & a0, const ::org::apache::lucene::store::Directory & a1) : ::org::apache::lucene::index::SnapshotDeletionPolicy(env->newObject(initializeClass, &mids$, mid_init$_12208c4a, a0.this$, a1.this$)) {}

        PersistentSnapshotDeletionPolicy::PersistentSnapshotDeletionPolicy(const ::org::apache::lucene::index::IndexDeletionPolicy & a0, const ::org::apache::lucene::store::Directory & a1, const ::org::apache::lucene::index::IndexWriterConfig$OpenMode & a2) : ::org::apache::lucene::index::SnapshotDeletionPolicy(env->newObject(initializeClass, &mids$, mid_init$_7f5c9dc9, a0.this$, a1.this$, a2.this$)) {}

        ::java::lang::String PersistentSnapshotDeletionPolicy::getLastSaveFile() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getLastSaveFile_14c7b5c5]));
        }

        void PersistentSnapshotDeletionPolicy::release(const ::org::apache::lucene::index::IndexCommit & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_release_fecc65d3], a0.this$);
        }

        void PersistentSnapshotDeletionPolicy::release(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_release_0ee6df2f], a0);
        }

        ::org::apache::lucene::index::IndexCommit PersistentSnapshotDeletionPolicy::snapshot() const
        {
          return ::org::apache::lucene::index::IndexCommit(env->callObjectMethod(this$, mids$[mid_snapshot_09307276]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_PersistentSnapshotDeletionPolicy_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PersistentSnapshotDeletionPolicy_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PersistentSnapshotDeletionPolicy_init_(t_PersistentSnapshotDeletionPolicy *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PersistentSnapshotDeletionPolicy_getLastSaveFile(t_PersistentSnapshotDeletionPolicy *self);
        static PyObject *t_PersistentSnapshotDeletionPolicy_release(t_PersistentSnapshotDeletionPolicy *self, PyObject *args);
        static PyObject *t_PersistentSnapshotDeletionPolicy_snapshot(t_PersistentSnapshotDeletionPolicy *self, PyObject *args);
        static PyObject *t_PersistentSnapshotDeletionPolicy_get__lastSaveFile(t_PersistentSnapshotDeletionPolicy *self, void *data);
        static PyGetSetDef t_PersistentSnapshotDeletionPolicy__fields_[] = {
          DECLARE_GET_FIELD(t_PersistentSnapshotDeletionPolicy, lastSaveFile),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PersistentSnapshotDeletionPolicy__methods_[] = {
          DECLARE_METHOD(t_PersistentSnapshotDeletionPolicy, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PersistentSnapshotDeletionPolicy, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PersistentSnapshotDeletionPolicy, getLastSaveFile, METH_NOARGS),
          DECLARE_METHOD(t_PersistentSnapshotDeletionPolicy, release, METH_VARARGS),
          DECLARE_METHOD(t_PersistentSnapshotDeletionPolicy, snapshot, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PersistentSnapshotDeletionPolicy, t_PersistentSnapshotDeletionPolicy, ::org::apache::lucene::index::SnapshotDeletionPolicy, PersistentSnapshotDeletionPolicy, t_PersistentSnapshotDeletionPolicy_init_, 0, 0, t_PersistentSnapshotDeletionPolicy__fields_, 0, 0);

        void t_PersistentSnapshotDeletionPolicy::install(PyObject *module)
        {
          installType(&PY_TYPE(PersistentSnapshotDeletionPolicy), module, "PersistentSnapshotDeletionPolicy", 0);
        }

        void t_PersistentSnapshotDeletionPolicy::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PersistentSnapshotDeletionPolicy).tp_dict, "class_", make_descriptor(PersistentSnapshotDeletionPolicy::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PersistentSnapshotDeletionPolicy).tp_dict, "wrapfn_", make_descriptor(t_PersistentSnapshotDeletionPolicy::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PersistentSnapshotDeletionPolicy).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(PersistentSnapshotDeletionPolicy::initializeClass);
          PyDict_SetItemString(PY_TYPE(PersistentSnapshotDeletionPolicy).tp_dict, "SNAPSHOTS_PREFIX", make_descriptor(j2p(*PersistentSnapshotDeletionPolicy::SNAPSHOTS_PREFIX)));
        }

        static PyObject *t_PersistentSnapshotDeletionPolicy_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PersistentSnapshotDeletionPolicy::initializeClass, 1)))
            return NULL;
          return t_PersistentSnapshotDeletionPolicy::wrap_Object(PersistentSnapshotDeletionPolicy(((t_PersistentSnapshotDeletionPolicy *) arg)->object.this$));
        }
        static PyObject *t_PersistentSnapshotDeletionPolicy_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PersistentSnapshotDeletionPolicy::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PersistentSnapshotDeletionPolicy_init_(t_PersistentSnapshotDeletionPolicy *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::org::apache::lucene::index::IndexDeletionPolicy a0((jobject) NULL);
              ::org::apache::lucene::store::Directory a1((jobject) NULL);
              PersistentSnapshotDeletionPolicy object((jobject) NULL);

              if (!parseArgs(args, "kk", ::org::apache::lucene::index::IndexDeletionPolicy::initializeClass, ::org::apache::lucene::store::Directory::initializeClass, &a0, &a1))
              {
                INT_CALL(object = PersistentSnapshotDeletionPolicy(a0, a1));
                self->object = object;
                break;
              }
            }
            goto err;
           case 3:
            {
              ::org::apache::lucene::index::IndexDeletionPolicy a0((jobject) NULL);
              ::org::apache::lucene::store::Directory a1((jobject) NULL);
              ::org::apache::lucene::index::IndexWriterConfig$OpenMode a2((jobject) NULL);
              PyTypeObject **p2;
              PersistentSnapshotDeletionPolicy object((jobject) NULL);

              if (!parseArgs(args, "kkK", ::org::apache::lucene::index::IndexDeletionPolicy::initializeClass, ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::IndexWriterConfig$OpenMode::initializeClass, &a0, &a1, &a2, &p2, ::org::apache::lucene::index::t_IndexWriterConfig$OpenMode::parameters_))
              {
                INT_CALL(object = PersistentSnapshotDeletionPolicy(a0, a1, a2));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_PersistentSnapshotDeletionPolicy_getLastSaveFile(t_PersistentSnapshotDeletionPolicy *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.getLastSaveFile());
          return j2p(result);
        }

        static PyObject *t_PersistentSnapshotDeletionPolicy_release(t_PersistentSnapshotDeletionPolicy *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::index::IndexCommit a0((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexCommit::initializeClass, &a0))
              {
                OBJ_CALL(self->object.release(a0));
                Py_RETURN_NONE;
              }
            }
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.release(a0));
                Py_RETURN_NONE;
              }
            }
          }

          return callSuper(&PY_TYPE(PersistentSnapshotDeletionPolicy), (PyObject *) self, "release", args, 2);
        }

        static PyObject *t_PersistentSnapshotDeletionPolicy_snapshot(t_PersistentSnapshotDeletionPolicy *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexCommit result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.snapshot());
            return ::org::apache::lucene::index::t_IndexCommit::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(PersistentSnapshotDeletionPolicy), (PyObject *) self, "snapshot", args, 2);
        }

        static PyObject *t_PersistentSnapshotDeletionPolicy_get__lastSaveFile(t_PersistentSnapshotDeletionPolicy *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object.getLastSaveFile());
          return j2p(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/range/LongRange.h"
#include "org/apache/lucene/queries/function/ValueSource.h"
#include "org/apache/lucene/search/Filter.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace range {

          ::java::lang::Class *LongRange::class$ = NULL;
          jmethodID *LongRange::mids$ = NULL;
          jfieldID *LongRange::fids$ = NULL;
          bool LongRange::live$ = false;

          jclass LongRange::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/range/LongRange");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_1777b4ec] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;JZJZ)V");
              mids$[mid_accept_0ee6df23] = env->getMethodID(cls, "accept", "(J)Z");
              mids$[mid_getFilter_fc904367] = env->getMethodID(cls, "getFilter", "(Lorg/apache/lucene/search/Filter;Lorg/apache/lucene/queries/function/ValueSource;)Lorg/apache/lucene/search/Filter;");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              fids$ = new jfieldID[max_fid];
              fids$[fid_max] = env->getFieldID(cls, "max", "J");
              fids$[fid_maxInclusive] = env->getFieldID(cls, "maxInclusive", "Z");
              fids$[fid_min] = env->getFieldID(cls, "min", "J");
              fids$[fid_minInclusive] = env->getFieldID(cls, "minInclusive", "Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          LongRange::LongRange(const ::java::lang::String & a0, jlong a1, jboolean a2, jlong a3, jboolean a4) : ::org::apache::lucene::facet::range::Range(env->newObject(initializeClass, &mids$, mid_init$_1777b4ec, a0.this$, a1, a2, a3, a4)) {}

          jboolean LongRange::accept(jlong a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_accept_0ee6df23], a0);
          }

          ::org::apache::lucene::search::Filter LongRange::getFilter(const ::org::apache::lucene::search::Filter & a0, const ::org::apache::lucene::queries::function::ValueSource & a1) const
          {
            return ::org::apache::lucene::search::Filter(env->callObjectMethod(this$, mids$[mid_getFilter_fc904367], a0.this$, a1.this$));
          }

          ::java::lang::String LongRange::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }

          jlong LongRange::_get_max() const
          {
            return env->getLongField(this$, fids$[fid_max]);
          }

          jboolean LongRange::_get_maxInclusive() const
          {
            return env->getBooleanField(this$, fids$[fid_maxInclusive]);
          }

          jlong LongRange::_get_min() const
          {
            return env->getLongField(this$, fids$[fid_min]);
          }

          jboolean LongRange::_get_minInclusive() const
          {
            return env->getBooleanField(this$, fids$[fid_minInclusive]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace range {
          static PyObject *t_LongRange_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LongRange_instance_(PyTypeObject *type, PyObject *arg);
          static int t_LongRange_init_(t_LongRange *self, PyObject *args, PyObject *kwds);
          static PyObject *t_LongRange_accept(t_LongRange *self, PyObject *arg);
          static PyObject *t_LongRange_getFilter(t_LongRange *self, PyObject *args);
          static PyObject *t_LongRange_toString(t_LongRange *self, PyObject *args);
          static PyObject *t_LongRange_get__max(t_LongRange *self, void *data);
          static PyObject *t_LongRange_get__maxInclusive(t_LongRange *self, void *data);
          static PyObject *t_LongRange_get__min(t_LongRange *self, void *data);
          static PyObject *t_LongRange_get__minInclusive(t_LongRange *self, void *data);

          static PyGetSetDef t_LongRange__fields_[] = {
            DECLARE_GET_FIELD(t_LongRange, max),
            DECLARE_GET_FIELD(t_LongRange, maxInclusive),
            DECLARE_GET_FIELD(t_LongRange, min),
            DECLARE_GET_FIELD(t_LongRange, minInclusive),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_LongRange__methods_[] = {
            DECLARE_METHOD(t_LongRange, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LongRange, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LongRange, accept, METH_O),
            DECLARE_METHOD(t_LongRange, getFilter, METH_VARARGS),
            DECLARE_METHOD(t_LongRange, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(LongRange, t_LongRange, ::org::apache::lucene::facet::range::Range, LongRange, t_LongRange_init_, 0, 0, t_LongRange__fields_, 0, 0);

          void t_LongRange::install(PyObject *module)
          {
            installType(&PY_TYPE(LongRange), module, "LongRange", 0);
          }

          void t_LongRange::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(LongRange).tp_dict, "class_", make_descriptor(LongRange::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(LongRange).tp_dict, "wrapfn_", make_descriptor(t_LongRange::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(LongRange).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_LongRange_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LongRange::initializeClass, 1)))
              return NULL;
            return t_LongRange::wrap_Object(LongRange(((t_LongRange *) arg)->object.this$));
          }
          static PyObject *t_LongRange_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LongRange::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_LongRange_init_(t_LongRange *self, PyObject *args, PyObject *kwds)
          {
            ::java::lang::String a0((jobject) NULL);
            jlong a1;
            jboolean a2;
            jlong a3;
            jboolean a4;
            LongRange object((jobject) NULL);

            if (!parseArgs(args, "sJZJZ", &a0, &a1, &a2, &a3, &a4))
            {
              INT_CALL(object = LongRange(a0, a1, a2, a3, a4));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_LongRange_accept(t_LongRange *self, PyObject *arg)
          {
            jlong a0;
            jboolean result;

            if (!parseArg(arg, "J", &a0))
            {
              OBJ_CALL(result = self->object.accept(a0));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError((PyObject *) self, "accept", arg);
            return NULL;
          }

          static PyObject *t_LongRange_getFilter(t_LongRange *self, PyObject *args)
          {
            ::org::apache::lucene::search::Filter a0((jobject) NULL);
            ::org::apache::lucene::queries::function::ValueSource a1((jobject) NULL);
            ::org::apache::lucene::search::Filter result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::search::Filter::initializeClass, ::org::apache::lucene::queries::function::ValueSource::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.getFilter(a0, a1));
              return ::org::apache::lucene::search::t_Filter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(LongRange), (PyObject *) self, "getFilter", args, 2);
          }

          static PyObject *t_LongRange_toString(t_LongRange *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(LongRange), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_LongRange_get__max(t_LongRange *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object._get_max());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }

          static PyObject *t_LongRange_get__maxInclusive(t_LongRange *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object._get_maxInclusive());
            Py_RETURN_BOOL(value);
          }

          static PyObject *t_LongRange_get__min(t_LongRange *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object._get_min());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }

          static PyObject *t_LongRange_get__minInclusive(t_LongRange *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object._get_minInclusive());
            Py_RETURN_BOOL(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/config/NumberDateFormat.h"
#include "java/lang/Class.h"
#include "java/lang/StringBuffer.h"
#include "java/text/DateFormat.h"
#include "java/lang/Object.h"
#include "java/lang/Number.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace config {

              ::java::lang::Class *NumberDateFormat::class$ = NULL;
              jmethodID *NumberDateFormat::mids$ = NULL;
              bool NumberDateFormat::live$ = false;

              jclass NumberDateFormat::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/config/NumberDateFormat");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_0105dadb] = env->getMethodID(cls, "<init>", "(Ljava/text/DateFormat;)V");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              NumberDateFormat::NumberDateFormat(const ::java::text::DateFormat & a0) : ::java::text::NumberFormat(env->newObject(initializeClass, &mids$, mid_init$_0105dadb, a0.this$)) {}
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace config {
              static PyObject *t_NumberDateFormat_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_NumberDateFormat_instance_(PyTypeObject *type, PyObject *arg);
              static int t_NumberDateFormat_init_(t_NumberDateFormat *self, PyObject *args, PyObject *kwds);

              static PyMethodDef t_NumberDateFormat__methods_[] = {
                DECLARE_METHOD(t_NumberDateFormat, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_NumberDateFormat, instance_, METH_O | METH_CLASS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(NumberDateFormat, t_NumberDateFormat, ::java::text::NumberFormat, NumberDateFormat, t_NumberDateFormat_init_, 0, 0, 0, 0, 0);

              void t_NumberDateFormat::install(PyObject *module)
              {
                installType(&PY_TYPE(NumberDateFormat), module, "NumberDateFormat", 0);
              }

              void t_NumberDateFormat::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(NumberDateFormat).tp_dict, "class_", make_descriptor(NumberDateFormat::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(NumberDateFormat).tp_dict, "wrapfn_", make_descriptor(t_NumberDateFormat::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(NumberDateFormat).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_NumberDateFormat_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, NumberDateFormat::initializeClass, 1)))
                  return NULL;
                return t_NumberDateFormat::wrap_Object(NumberDateFormat(((t_NumberDateFormat *) arg)->object.this$));
              }
              static PyObject *t_NumberDateFormat_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, NumberDateFormat::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_NumberDateFormat_init_(t_NumberDateFormat *self, PyObject *args, PyObject *kwds)
              {
                ::java::text::DateFormat a0((jobject) NULL);
                NumberDateFormat object((jobject) NULL);

                if (!parseArgs(args, "k", ::java::text::DateFormat::initializeClass, &a0))
                {
                  INT_CALL(object = NumberDateFormat(a0));
                  self->object = object;
                }
                else
                {
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/fst/FSTCompletionLookup.h"
#include "org/apache/lucene/search/suggest/InputIterator.h"
#include "java/util/Set.h"
#include "org/apache/lucene/search/suggest/fst/FSTCompletion.h"
#include "java/lang/CharSequence.h"
#include "org/apache/lucene/search/suggest/Lookup$LookupResult.h"
#include "java/lang/Class.h"
#include "java/util/List.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "org/apache/lucene/store/DataInput.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace fst {

            ::java::lang::Class *FSTCompletionLookup::class$ = NULL;
            jmethodID *FSTCompletionLookup::mids$ = NULL;
            bool FSTCompletionLookup::live$ = false;

            jclass FSTCompletionLookup::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/fst/FSTCompletionLookup");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_init$_7fee6a80] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/suggest/fst/FSTCompletion;Z)V");
                mids$[mid_init$_b3a85a05] = env->getMethodID(cls, "<init>", "(IZ)V");
                mids$[mid_build_1754a234] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/search/suggest/InputIterator;)V");
                mids$[mid_get_a739ccff] = env->getMethodID(cls, "get", "(Ljava/lang/CharSequence;)Ljava/lang/Object;");
                mids$[mid_getCount_54c6a17a] = env->getMethodID(cls, "getCount", "()J");
                mids$[mid_load_f5d6a55d] = env->getMethodID(cls, "load", "(Lorg/apache/lucene/store/DataInput;)Z");
                mids$[mid_lookup_dd3e9f51] = env->getMethodID(cls, "lookup", "(Ljava/lang/CharSequence;Ljava/util/Set;ZI)Ljava/util/List;");
                mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");
                mids$[mid_store_27875f5b] = env->getMethodID(cls, "store", "(Lorg/apache/lucene/store/DataOutput;)Z");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            FSTCompletionLookup::FSTCompletionLookup() : ::org::apache::lucene::search::suggest::Lookup(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

            FSTCompletionLookup::FSTCompletionLookup(const ::org::apache::lucene::search::suggest::fst::FSTCompletion & a0, jboolean a1) : ::org::apache::lucene::search::suggest::Lookup(env->newObject(initializeClass, &mids$, mid_init$_7fee6a80, a0.this$, a1)) {}

            FSTCompletionLookup::FSTCompletionLookup(jint a0, jboolean a1) : ::org::apache::lucene::search::suggest::Lookup(env->newObject(initializeClass, &mids$, mid_init$_b3a85a05, a0, a1)) {}

            void FSTCompletionLookup::build(const ::org::apache::lucene::search::suggest::InputIterator & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_build_1754a234], a0.this$);
            }

            ::java::lang::Object FSTCompletionLookup::get(const ::java::lang::CharSequence & a0) const
            {
              return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_get_a739ccff], a0.this$));
            }

            jlong FSTCompletionLookup::getCount() const
            {
              return env->callLongMethod(this$, mids$[mid_getCount_54c6a17a]);
            }

            jboolean FSTCompletionLookup::load(const ::org::apache::lucene::store::DataInput & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_load_f5d6a55d], a0.this$);
            }

            ::java::util::List FSTCompletionLookup::lookup(const ::java::lang::CharSequence & a0, const ::java::util::Set & a1, jboolean a2, jint a3) const
            {
              return ::java::util::List(env->callObjectMethod(this$, mids$[mid_lookup_dd3e9f51], a0.this$, a1.this$, a2, a3));
            }

            jlong FSTCompletionLookup::ramBytesUsed() const
            {
              return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
            }

            jboolean FSTCompletionLookup::store(const ::org::apache::lucene::store::DataOutput & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_store_27875f5b], a0.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace fst {
            static PyObject *t_FSTCompletionLookup_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_FSTCompletionLookup_instance_(PyTypeObject *type, PyObject *arg);
            static int t_FSTCompletionLookup_init_(t_FSTCompletionLookup *self, PyObject *args, PyObject *kwds);
            static PyObject *t_FSTCompletionLookup_build(t_FSTCompletionLookup *self, PyObject *args);
            static PyObject *t_FSTCompletionLookup_get(t_FSTCompletionLookup *self, PyObject *arg);
            static PyObject *t_FSTCompletionLookup_getCount(t_FSTCompletionLookup *self, PyObject *args);
            static PyObject *t_FSTCompletionLookup_load(t_FSTCompletionLookup *self, PyObject *args);
            static PyObject *t_FSTCompletionLookup_lookup(t_FSTCompletionLookup *self, PyObject *args);
            static PyObject *t_FSTCompletionLookup_ramBytesUsed(t_FSTCompletionLookup *self, PyObject *args);
            static PyObject *t_FSTCompletionLookup_store(t_FSTCompletionLookup *self, PyObject *args);
            static PyObject *t_FSTCompletionLookup_get__count(t_FSTCompletionLookup *self, void *data);
            static PyGetSetDef t_FSTCompletionLookup__fields_[] = {
              DECLARE_GET_FIELD(t_FSTCompletionLookup, count),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_FSTCompletionLookup__methods_[] = {
              DECLARE_METHOD(t_FSTCompletionLookup, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FSTCompletionLookup, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FSTCompletionLookup, build, METH_VARARGS),
              DECLARE_METHOD(t_FSTCompletionLookup, get, METH_O),
              DECLARE_METHOD(t_FSTCompletionLookup, getCount, METH_VARARGS),
              DECLARE_METHOD(t_FSTCompletionLookup, load, METH_VARARGS),
              DECLARE_METHOD(t_FSTCompletionLookup, lookup, METH_VARARGS),
              DECLARE_METHOD(t_FSTCompletionLookup, ramBytesUsed, METH_VARARGS),
              DECLARE_METHOD(t_FSTCompletionLookup, store, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(FSTCompletionLookup, t_FSTCompletionLookup, ::org::apache::lucene::search::suggest::Lookup, FSTCompletionLookup, t_FSTCompletionLookup_init_, 0, 0, t_FSTCompletionLookup__fields_, 0, 0);

            void t_FSTCompletionLookup::install(PyObject *module)
            {
              installType(&PY_TYPE(FSTCompletionLookup), module, "FSTCompletionLookup", 0);
            }

            void t_FSTCompletionLookup::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(FSTCompletionLookup).tp_dict, "class_", make_descriptor(FSTCompletionLookup::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(FSTCompletionLookup).tp_dict, "wrapfn_", make_descriptor(t_FSTCompletionLookup::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(FSTCompletionLookup).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_FSTCompletionLookup_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, FSTCompletionLookup::initializeClass, 1)))
                return NULL;
              return t_FSTCompletionLookup::wrap_Object(FSTCompletionLookup(((t_FSTCompletionLookup *) arg)->object.this$));
            }
            static PyObject *t_FSTCompletionLookup_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, FSTCompletionLookup::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_FSTCompletionLookup_init_(t_FSTCompletionLookup *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 0:
                {
                  FSTCompletionLookup object((jobject) NULL);

                  INT_CALL(object = FSTCompletionLookup());
                  self->object = object;
                  break;
                }
                goto err;
               case 2:
                {
                  ::org::apache::lucene::search::suggest::fst::FSTCompletion a0((jobject) NULL);
                  jboolean a1;
                  FSTCompletionLookup object((jobject) NULL);

                  if (!parseArgs(args, "kZ", ::org::apache::lucene::search::suggest::fst::FSTCompletion::initializeClass, &a0, &a1))
                  {
                    INT_CALL(object = FSTCompletionLookup(a0, a1));
                    self->object = object;
                    break;
                  }
                }
                {
                  jint a0;
                  jboolean a1;
                  FSTCompletionLookup object((jobject) NULL);

                  if (!parseArgs(args, "IZ", &a0, &a1))
                  {
                    INT_CALL(object = FSTCompletionLookup(a0, a1));
                    self->object = object;
                    break;
                  }
                }
               default:
               err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_FSTCompletionLookup_build(t_FSTCompletionLookup *self, PyObject *args)
            {
              ::org::apache::lucene::search::suggest::InputIterator a0((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::search::suggest::InputIterator::initializeClass, &a0))
              {
                OBJ_CALL(self->object.build(a0));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(FSTCompletionLookup), (PyObject *) self, "build", args, 2);
            }

            static PyObject *t_FSTCompletionLookup_get(t_FSTCompletionLookup *self, PyObject *arg)
            {
              ::java::lang::CharSequence a0((jobject) NULL);
              ::java::lang::Object result((jobject) NULL);

              if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
              {
                OBJ_CALL(result = self->object.get(a0));
                return ::java::lang::t_Object::wrap_Object(result);
              }

              PyErr_SetArgsError((PyObject *) self, "get", arg);
              return NULL;
            }

            static PyObject *t_FSTCompletionLookup_getCount(t_FSTCompletionLookup *self, PyObject *args)
            {
              jlong result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getCount());
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }

              return callSuper(&PY_TYPE(FSTCompletionLookup), (PyObject *) self, "getCount", args, 2);
            }

            static PyObject *t_FSTCompletionLookup_load(t_FSTCompletionLookup *self, PyObject *args)
            {
              ::org::apache::lucene::store::DataInput a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "k", ::org::apache::lucene::store::DataInput::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.load(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(FSTCompletionLookup), (PyObject *) self, "load", args, 2);
            }

            static PyObject *t_FSTCompletionLookup_lookup(t_FSTCompletionLookup *self, PyObject *args)
            {
              ::java::lang::CharSequence a0((jobject) NULL);
              ::java::util::Set a1((jobject) NULL);
              PyTypeObject **p1;
              jboolean a2;
              jint a3;
              ::java::util::List result((jobject) NULL);

              if (!parseArgs(args, "OKZI", &::java::lang::PY_TYPE(CharSequence), ::java::util::Set::initializeClass, &a0, &a1, &p1, ::java::util::t_Set::parameters_, &a2, &a3))
              {
                OBJ_CALL(result = self->object.lookup(a0, a1, a2, a3));
                return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::search::suggest::PY_TYPE(Lookup$LookupResult));
              }

              return callSuper(&PY_TYPE(FSTCompletionLookup), (PyObject *) self, "lookup", args, 2);
            }

            static PyObject *t_FSTCompletionLookup_ramBytesUsed(t_FSTCompletionLookup *self, PyObject *args)
            {
              jlong result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.ramBytesUsed());
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }

              return callSuper(&PY_TYPE(FSTCompletionLookup), (PyObject *) self, "ramBytesUsed", args, 2);
            }

            static PyObject *t_FSTCompletionLookup_store(t_FSTCompletionLookup *self, PyObject *args)
            {
              ::org::apache::lucene::store::DataOutput a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "k", ::org::apache::lucene::store::DataOutput::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.store(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(FSTCompletionLookup), (PyObject *) self, "store", args, 2);
            }

            static PyObject *t_FSTCompletionLookup_get__count(t_FSTCompletionLookup *self, void *data)
            {
              jlong value;
              OBJ_CALL(value = self->object.getCount());
              return PyLong_FromLongLong((PY_LONG_LONG) value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/util/concurrent/Executors.h"
#include "java/util/concurrent/ThreadFactory.h"
#include "java/lang/Runnable.h"
#include "java/lang/Class.h"
#include "java/util/concurrent/ScheduledExecutorService.h"
#include "java/util/concurrent/Callable.h"
#include "java/util/concurrent/ExecutorService.h"
#include "JArray.h"

namespace java {
  namespace util {
    namespace concurrent {

      ::java::lang::Class *Executors::class$ = NULL;
      jmethodID *Executors::mids$ = NULL;
      bool Executors::live$ = false;

      jclass Executors::initializeClass(bool getOnly)
      {
        if (getOnly)
          return (jclass) (live$ ? class$->this$ : NULL);
        if (class$ == NULL)
        {
          jclass cls = (jclass) env->findClass("java/util/concurrent/Executors");

          mids$ = new jmethodID[max_mid];
          mids$[mid_callable_a93e49d5] = env->getStaticMethodID(cls, "callable", "(Ljava/lang/Runnable;)Ljava/util/concurrent/Callable;");
          mids$[mid_callable_27f60351] = env->getStaticMethodID(cls, "callable", "(Ljava/lang/Runnable;Ljava/lang/Object;)Ljava/util/concurrent/Callable;");
          mids$[mid_defaultThreadFactory_1a8a37c6] = env->getStaticMethodID(cls, "defaultThreadFactory", "()Ljava/util/concurrent/ThreadFactory;");
          mids$[mid_newCachedThreadPool_7959084a] = env->getStaticMethodID(cls, "newCachedThreadPool", "()Ljava/util/concurrent/ExecutorService;");
          mids$[mid_newCachedThreadPool_ef1f74b9] = env->getStaticMethodID(cls, "newCachedThreadPool", "(Ljava/util/concurrent/ThreadFactory;)Ljava/util/concurrent/ExecutorService;");
          mids$[mid_newFixedThreadPool_8e681bb4] = env->getStaticMethodID(cls, "newFixedThreadPool", "(I)Ljava/util/concurrent/ExecutorService;");
          mids$[mid_newFixedThreadPool_366a7197] = env->getStaticMethodID(cls, "newFixedThreadPool", "(ILjava/util/concurrent/ThreadFactory;)Ljava/util/concurrent/ExecutorService;");
          mids$[mid_newScheduledThreadPool_86106422] = env->getStaticMethodID(cls, "newScheduledThreadPool", "(I)Ljava/util/concurrent/ScheduledExecutorService;");
          mids$[mid_newScheduledThreadPool_6380c25f] = env->getStaticMethodID(cls, "newScheduledThreadPool", "(ILjava/util/concurrent/ThreadFactory;)Ljava/util/concurrent/ScheduledExecutorService;");
          mids$[mid_newSingleThreadExecutor_7959084a] = env->getStaticMethodID(cls, "newSingleThreadExecutor", "()Ljava/util/concurrent/ExecutorService;");
          mids$[mid_newSingleThreadExecutor_ef1f74b9] = env->getStaticMethodID(cls, "newSingleThreadExecutor", "(Ljava/util/concurrent/ThreadFactory;)Ljava/util/concurrent/ExecutorService;");
          mids$[mid_newSingleThreadScheduledExecutor_2e78bbb0] = env->getStaticMethodID(cls, "newSingleThreadScheduledExecutor", "()Ljava/util/concurrent/ScheduledExecutorService;");
          mids$[mid_newSingleThreadScheduledExecutor_e92dd26d] = env->getStaticMethodID(cls, "newSingleThreadScheduledExecutor", "(Ljava/util/concurrent/ThreadFactory;)Ljava/util/concurrent/ScheduledExecutorService;");
          mids$[mid_newWorkStealingPool_7959084a] = env->getStaticMethodID(cls, "newWorkStealingPool", "()Ljava/util/concurrent/ExecutorService;");
          mids$[mid_newWorkStealingPool_8e681bb4] = env->getStaticMethodID(cls, "newWorkStealingPool", "(I)Ljava/util/concurrent/ExecutorService;");
          mids$[mid_privilegedCallable_9221e3a3] = env->getStaticMethodID(cls, "privilegedCallable", "(Ljava/util/concurrent/Callable;)Ljava/util/concurrent/Callable;");
          mids$[mid_privilegedCallableUsingCurrentClassLoader_9221e3a3] = env->getStaticMethodID(cls, "privilegedCallableUsingCurrentClassLoader", "(Ljava/util/concurrent/Callable;)Ljava/util/concurrent/Callable;");
          mids$[mid_privilegedThreadFactory_1a8a37c6] = env->getStaticMethodID(cls, "privilegedThreadFactory", "()Ljava/util/concurrent/ThreadFactory;");
          mids$[mid_unconfigurableExecutorService_d4c55b25] = env->getStaticMethodID(cls, "unconfigurableExecutorService", "(Ljava/util/concurrent/ExecutorService;)Ljava/util/concurrent/ExecutorService;");
          mids$[mid_unconfigurableScheduledExecutorService_afd7b7c3] = env->getStaticMethodID(cls, "unconfigurableScheduledExecutorService", "(Ljava/util/concurrent/ScheduledExecutorService;)Ljava/util/concurrent/ScheduledExecutorService;");

          class$ = (::java::lang::Class *) new JObject(cls);
          live$ = true;
        }
        return (jclass) class$->this$;
      }

      ::java::util::concurrent::Callable Executors::callable(const ::java::lang::Runnable & a0)
      {
        jclass cls = env->getClass(initializeClass);
        return ::java::util::concurrent::Callable(env->callStaticObjectMethod(cls, mids$[mid_callable_a93e49d5], a0.this$));
      }

      ::java::util::concurrent::Callable Executors::callable(const ::java::lang::Runnable & a0, const ::java::lang::Object & a1)
      {
        jclass cls = env->getClass(initializeClass);
        return ::java::util::concurrent::Callable(env->callStaticObjectMethod(cls, mids$[mid_callable_27f60351], a0.this$, a1.this$));
      }

      ::java::util::concurrent::ThreadFactory Executors::defaultThreadFactory()
      {
        jclass cls = env->getClass(initializeClass);
        return ::java::util::concurrent::ThreadFactory(env->callStaticObjectMethod(cls, mids$[mid_defaultThreadFactory_1a8a37c6]));
      }

      ::java::util::concurrent::ExecutorService Executors::newCachedThreadPool()
      {
        jclass cls = env->getClass(initializeClass);
        return ::java::util::concurrent::ExecutorService(env->callStaticObjectMethod(cls, mids$[mid_newCachedThreadPool_7959084a]));
      }

      ::java::util::concurrent::ExecutorService Executors::newCachedThreadPool(const ::java::util::concurrent::ThreadFactory & a0)
      {
        jclass cls = env->getClass(initializeClass);
        return ::java::util::concurrent::ExecutorService(env->callStaticObjectMethod(cls, mids$[mid_newCachedThreadPool_ef1f74b9], a0.this$));
      }

      ::java::util::concurrent::ExecutorService Executors::newFixedThreadPool(jint a0)
      {
        jclass cls = env->getClass(initializeClass);
        return ::java::util::concurrent::ExecutorService(env->callStaticObjectMethod(cls, mids$[mid_newFixedThreadPool_8e681bb4], a0));
      }

      ::java::util::concurrent::ExecutorService Executors::newFixedThreadPool(jint a0, const ::java::util::concurrent::ThreadFactory & a1)
      {
        jclass cls = env->getClass(initializeClass);
        return ::java::util::concurrent::ExecutorService(env->callStaticObjectMethod(cls, mids$[mid_newFixedThreadPool_366a7197], a0, a1.this$));
      }

      ::java::util::concurrent::ScheduledExecutorService Executors::newScheduledThreadPool(jint a0)
      {
        jclass cls = env->getClass(initializeClass);
        return ::java::util::concurrent::ScheduledExecutorService(env->callStaticObjectMethod(cls, mids$[mid_newScheduledThreadPool_86106422], a0));
      }

      ::java::util::concurrent::ScheduledExecutorService Executors::newScheduledThreadPool(jint a0, const ::java::util::concurrent::ThreadFactory & a1)
      {
        jclass cls = env->getClass(initializeClass);
        return ::java::util::concurrent::ScheduledExecutorService(env->callStaticObjectMethod(cls, mids$[mid_newScheduledThreadPool_6380c25f], a0, a1.this$));
      }

      ::java::util::concurrent::ExecutorService Executors::newSingleThreadExecutor()
      {
        jclass cls = env->getClass(initializeClass);
        return ::java::util::concurrent::ExecutorService(env->callStaticObjectMethod(cls, mids$[mid_newSingleThreadExecutor_7959084a]));
      }

      ::java::util::concurrent::ExecutorService Executors::newSingleThreadExecutor(const ::java::util::concurrent::ThreadFactory & a0)
      {
        jclass cls = env->getClass(initializeClass);
        return ::java::util::concurrent::ExecutorService(env->callStaticObjectMethod(cls, mids$[mid_newSingleThreadExecutor_ef1f74b9], a0.this$));
      }

      ::java::util::concurrent::ScheduledExecutorService Executors::newSingleThreadScheduledExecutor()
      {
        jclass cls = env->getClass(initializeClass);
        return ::java::util::concurrent::ScheduledExecutorService(env->callStaticObjectMethod(cls, mids$[mid_newSingleThreadScheduledExecutor_2e78bbb0]));
      }

      ::java::util::concurrent::ScheduledExecutorService Executors::newSingleThreadScheduledExecutor(const ::java::util::concurrent::ThreadFactory & a0)
      {
        jclass cls = env->getClass(initializeClass);
        return ::java::util::concurrent::ScheduledExecutorService(env->callStaticObjectMethod(cls, mids$[mid_newSingleThreadScheduledExecutor_e92dd26d], a0.this$));
      }

      ::java::util::concurrent::ExecutorService Executors::newWorkStealingPool()
      {
        jclass cls = env->getClass(initializeClass);
        return ::java::util::concurrent::ExecutorService(env->callStaticObjectMethod(cls, mids$[mid_newWorkStealingPool_7959084a]));
      }

      ::java::util::concurrent::ExecutorService Executors::newWorkStealingPool(jint a0)
      {
        jclass cls = env->getClass(initializeClass);
        return ::java::util::concurrent::ExecutorService(env->callStaticObjectMethod(cls, mids$[mid_newWorkStealingPool_8e681bb4], a0));
      }

      ::java::util::concurrent::Callable Executors::privilegedCallable(const ::java::util::concurrent::Callable & a0)
      {
        jclass cls = env->getClass(initializeClass);
        return ::java::util::concurrent::Callable(env->callStaticObjectMethod(cls, mids$[mid_privilegedCallable_9221e3a3], a0.this$));
      }

      ::java::util::concurrent::Callable Executors::privilegedCallableUsingCurrentClassLoader(const ::java::util::concurrent::Callable & a0)
      {
        jclass cls = env->getClass(initializeClass);
        return ::java::util::concurrent::Callable(env->callStaticObjectMethod(cls, mids$[mid_privilegedCallableUsingCurrentClassLoader_9221e3a3], a0.this$));
      }

      ::java::util::concurrent::ThreadFactory Executors::privilegedThreadFactory()
      {
        jclass cls = env->getClass(initializeClass);
        return ::java::util::concurrent::ThreadFactory(env->callStaticObjectMethod(cls, mids$[mid_privilegedThreadFactory_1a8a37c6]));
      }

      ::java::util::concurrent::ExecutorService Executors::unconfigurableExecutorService(const ::java::util::concurrent::ExecutorService & a0)
      {
        jclass cls = env->getClass(initializeClass);
        return ::java::util::concurrent::ExecutorService(env->callStaticObjectMethod(cls, mids$[mid_unconfigurableExecutorService_d4c55b25], a0.this$));
      }

      ::java::util::concurrent::ScheduledExecutorService Executors::unconfigurableScheduledExecutorService(const ::java::util::concurrent::ScheduledExecutorService & a0)
      {
        jclass cls = env->getClass(initializeClass);
        return ::java::util::concurrent::ScheduledExecutorService(env->callStaticObjectMethod(cls, mids$[mid_unconfigurableScheduledExecutorService_afd7b7c3], a0.this$));
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace util {
    namespace concurrent {
      static PyObject *t_Executors_cast_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_Executors_instance_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_Executors_callable(PyTypeObject *type, PyObject *args);
      static PyObject *t_Executors_defaultThreadFactory(PyTypeObject *type);
      static PyObject *t_Executors_newCachedThreadPool(PyTypeObject *type, PyObject *args);
      static PyObject *t_Executors_newFixedThreadPool(PyTypeObject *type, PyObject *args);
      static PyObject *t_Executors_newScheduledThreadPool(PyTypeObject *type, PyObject *args);
      static PyObject *t_Executors_newSingleThreadExecutor(PyTypeObject *type, PyObject *args);
      static PyObject *t_Executors_newSingleThreadScheduledExecutor(PyTypeObject *type, PyObject *args);
      static PyObject *t_Executors_newWorkStealingPool(PyTypeObject *type, PyObject *args);
      static PyObject *t_Executors_privilegedCallable(PyTypeObject *type, PyObject *arg);
      static PyObject *t_Executors_privilegedCallableUsingCurrentClassLoader(PyTypeObject *type, PyObject *arg);
      static PyObject *t_Executors_privilegedThreadFactory(PyTypeObject *type);
      static PyObject *t_Executors_unconfigurableExecutorService(PyTypeObject *type, PyObject *arg);
      static PyObject *t_Executors_unconfigurableScheduledExecutorService(PyTypeObject *type, PyObject *arg);

      static PyMethodDef t_Executors__methods_[] = {
        DECLARE_METHOD(t_Executors, cast_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_Executors, instance_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_Executors, callable, METH_VARARGS | METH_CLASS),
        DECLARE_METHOD(t_Executors, defaultThreadFactory, METH_NOARGS | METH_CLASS),
        DECLARE_METHOD(t_Executors, newCachedThreadPool, METH_VARARGS | METH_CLASS),
        DECLARE_METHOD(t_Executors, newFixedThreadPool, METH_VARARGS | METH_CLASS),
        DECLARE_METHOD(t_Executors, newScheduledThreadPool, METH_VARARGS | METH_CLASS),
        DECLARE_METHOD(t_Executors, newSingleThreadExecutor, METH_VARARGS | METH_CLASS),
        DECLARE_METHOD(t_Executors, newSingleThreadScheduledExecutor, METH_VARARGS | METH_CLASS),
        DECLARE_METHOD(t_Executors, newWorkStealingPool, METH_VARARGS | METH_CLASS),
        DECLARE_METHOD(t_Executors, privilegedCallable, METH_O | METH_CLASS),
        DECLARE_METHOD(t_Executors, privilegedCallableUsingCurrentClassLoader, METH_O | METH_CLASS),
        DECLARE_METHOD(t_Executors, privilegedThreadFactory, METH_NOARGS | METH_CLASS),
        DECLARE_METHOD(t_Executors, unconfigurableExecutorService, METH_O | METH_CLASS),
        DECLARE_METHOD(t_Executors, unconfigurableScheduledExecutorService, METH_O | METH_CLASS),
        { NULL, NULL, 0, NULL }
      };

      DECLARE_TYPE(Executors, t_Executors, ::java::lang::Object, Executors, abstract_init, 0, 0, 0, 0, 0);

      void t_Executors::install(PyObject *module)
      {
        installType(&PY_TYPE(Executors), module, "Executors", 0);
      }

      void t_Executors::initialize(PyObject *module)
      {
        PyDict_SetItemString(PY_TYPE(Executors).tp_dict, "class_", make_descriptor(Executors::initializeClass, 1));
        PyDict_SetItemString(PY_TYPE(Executors).tp_dict, "wrapfn_", make_descriptor(t_Executors::wrap_jobject));
        PyDict_SetItemString(PY_TYPE(Executors).tp_dict, "boxfn_", make_descriptor(boxObject));
      }

      static PyObject *t_Executors_cast_(PyTypeObject *type, PyObject *arg)
      {
        if (!(arg = castCheck(arg, Executors::initializeClass, 1)))
          return NULL;
        return t_Executors::wrap_Object(Executors(((t_Executors *) arg)->object.this$));
      }
      static PyObject *t_Executors_instance_(PyTypeObject *type, PyObject *arg)
      {
        if (!castCheck(arg, Executors::initializeClass, 0))
          Py_RETURN_FALSE;
        Py_RETURN_TRUE;
      }

      static PyObject *t_Executors_callable(PyTypeObject *type, PyObject *args)
      {
        switch (PyTuple_GET_SIZE(args)) {
         case 1:
          {
            ::java::lang::Runnable a0((jobject) NULL);
            ::java::util::concurrent::Callable result((jobject) NULL);

            if (!parseArgs(args, "k", ::java::lang::Runnable::initializeClass, &a0))
            {
              OBJ_CALL(result = ::java::util::concurrent::Executors::callable(a0));
              return ::java::util::concurrent::t_Callable::wrap_Object(result, &::java::lang::PY_TYPE(Object));
            }
          }
          break;
         case 2:
          {
            ::java::lang::Runnable a0((jobject) NULL);
            ::java::lang::Object a1((jobject) NULL);
            ::java::util::concurrent::Callable result((jobject) NULL);

            if (!parseArgs(args, "ko", ::java::lang::Runnable::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = ::java::util::concurrent::Executors::callable(a0, a1));
              return ::java::util::concurrent::t_Callable::wrap_Object(result);
            }
          }
        }

        PyErr_SetArgsError(type, "callable", args);
        return NULL;
      }

      static PyObject *t_Executors_defaultThreadFactory(PyTypeObject *type)
      {
        ::java::util::concurrent::ThreadFactory result((jobject) NULL);
        OBJ_CALL(result = ::java::util::concurrent::Executors::defaultThreadFactory());
        return ::java::util::concurrent::t_ThreadFactory::wrap_Object(result);
      }

      static PyObject *t_Executors_newCachedThreadPool(PyTypeObject *type, PyObject *args)
      {
        switch (PyTuple_GET_SIZE(args)) {
         case 0:
          {
            ::java::util::concurrent::ExecutorService result((jobject) NULL);
            OBJ_CALL(result = ::java::util::concurrent::Executors::newCachedThreadPool());
            return ::java::util::concurrent::t_ExecutorService::wrap_Object(result);
          }
          break;
         case 1:
          {
            ::java::util::concurrent::ThreadFactory a0((jobject) NULL);
            ::java::util::concurrent::ExecutorService result((jobject) NULL);

            if (!parseArgs(args, "k", ::java::util::concurrent::ThreadFactory::initializeClass, &a0))
            {
              OBJ_CALL(result = ::java::util::concurrent::Executors::newCachedThreadPool(a0));
              return ::java::util::concurrent::t_ExecutorService::wrap_Object(result);
            }
          }
        }

        PyErr_SetArgsError(type, "newCachedThreadPool", args);
        return NULL;
      }

      static PyObject *t_Executors_newFixedThreadPool(PyTypeObject *type, PyObject *args)
      {
        switch (PyTuple_GET_SIZE(args)) {
         case 1:
          {
            jint a0;
            ::java::util::concurrent::ExecutorService result((jobject) NULL);

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(result = ::java::util::concurrent::Executors::newFixedThreadPool(a0));
              return ::java::util::concurrent::t_ExecutorService::wrap_Object(result);
            }
          }
          break;
         case 2:
          {
            jint a0;
            ::java::util::concurrent::ThreadFactory a1((jobject) NULL);
            ::java::util::concurrent::ExecutorService result((jobject) NULL);

            if (!parseArgs(args, "Ik", ::java::util::concurrent::ThreadFactory::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = ::java::util::concurrent::Executors::newFixedThreadPool(a0, a1));
              return ::java::util::concurrent::t_ExecutorService::wrap_Object(result);
            }
          }
        }

        PyErr_SetArgsError(type, "newFixedThreadPool", args);
        return NULL;
      }

      static PyObject *t_Executors_newScheduledThreadPool(PyTypeObject *type, PyObject *args)
      {
        switch (PyTuple_GET_SIZE(args)) {
         case 1:
          {
            jint a0;
            ::java::util::concurrent::ScheduledExecutorService result((jobject) NULL);

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(result = ::java::util::concurrent::Executors::newScheduledThreadPool(a0));
              return ::java::util::concurrent::t_ScheduledExecutorService::wrap_Object(result);
            }
          }
          break;
         case 2:
          {
            jint a0;
            ::java::util::concurrent::ThreadFactory a1((jobject) NULL);
            ::java::util::concurrent::ScheduledExecutorService result((jobject) NULL);

            if (!parseArgs(args, "Ik", ::java::util::concurrent::ThreadFactory::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = ::java::util::concurrent::Executors::newScheduledThreadPool(a0, a1));
              return ::java::util::concurrent::t_ScheduledExecutorService::wrap_Object(result);
            }
          }
        }

        PyErr_SetArgsError(type, "newScheduledThreadPool", args);
        return NULL;
      }

      static PyObject *t_Executors_newSingleThreadExecutor(PyTypeObject *type, PyObject *args)
      {
        switch (PyTuple_GET_SIZE(args)) {
         case 0:
          {
            ::java::util::concurrent::ExecutorService result((jobject) NULL);
            OBJ_CALL(result = ::java::util::concurrent::Executors::newSingleThreadExecutor());
            return ::java::util::concurrent::t_ExecutorService::wrap_Object(result);
          }
          break;
         case 1:
          {
            ::java::util::concurrent::ThreadFactory a0((jobject) NULL);
            ::java::util::concurrent::ExecutorService result((jobject) NULL);

            if (!parseArgs(args, "k", ::java::util::concurrent::ThreadFactory::initializeClass, &a0))
            {
              OBJ_CALL(result = ::java::util::concurrent::Executors::newSingleThreadExecutor(a0));
              return ::java::util::concurrent::t_ExecutorService::wrap_Object(result);
            }
          }
        }

        PyErr_SetArgsError(type, "newSingleThreadExecutor", args);
        return NULL;
      }

      static PyObject *t_Executors_newSingleThreadScheduledExecutor(PyTypeObject *type, PyObject *args)
      {
        switch (PyTuple_GET_SIZE(args)) {
         case 0:
          {
            ::java::util::concurrent::ScheduledExecutorService result((jobject) NULL);
            OBJ_CALL(result = ::java::util::concurrent::Executors::newSingleThreadScheduledExecutor());
            return ::java::util::concurrent::t_ScheduledExecutorService::wrap_Object(result);
          }
          break;
         case 1:
          {
            ::java::util::concurrent::ThreadFactory a0((jobject) NULL);
            ::java::util::concurrent::ScheduledExecutorService result((jobject) NULL);

            if (!parseArgs(args, "k", ::java::util::concurrent::ThreadFactory::initializeClass, &a0))
            {
              OBJ_CALL(result = ::java::util::concurrent::Executors::newSingleThreadScheduledExecutor(a0));
              return ::java::util::concurrent::t_ScheduledExecutorService::wrap_Object(result);
            }
          }
        }

        PyErr_SetArgsError(type, "newSingleThreadScheduledExecutor", args);
        return NULL;
      }

      static PyObject *t_Executors_newWorkStealingPool(PyTypeObject *type, PyObject *args)
      {
        switch (PyTuple_GET_SIZE(args)) {
         case 0:
          {
            ::java::util::concurrent::ExecutorService result((jobject) NULL);
            OBJ_CALL(result = ::java::util::concurrent::Executors::newWorkStealingPool());
            return ::java::util::concurrent::t_ExecutorService::wrap_Object(result);
          }
          break;
         case 1:
          {
            jint a0;
            ::java::util::concurrent::ExecutorService result((jobject) NULL);

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(result = ::java::util::concurrent::Executors::newWorkStealingPool(a0));
              return ::java::util::concurrent::t_ExecutorService::wrap_Object(result);
            }
          }
        }

        PyErr_SetArgsError(type, "newWorkStealingPool", args);
        return NULL;
      }

      static PyObject *t_Executors_privilegedCallable(PyTypeObject *type, PyObject *arg)
      {
        ::java::util::concurrent::Callable a0((jobject) NULL);
        PyTypeObject **p0;
        ::java::util::concurrent::Callable result((jobject) NULL);

        if (!parseArg(arg, "K", ::java::util::concurrent::Callable::initializeClass, &a0, &p0, ::java::util::concurrent::t_Callable::parameters_))
        {
          OBJ_CALL(result = ::java::util::concurrent::Executors::privilegedCallable(a0));
          return ::java::util::concurrent::t_Callable::wrap_Object(result);
        }

        PyErr_SetArgsError(type, "privilegedCallable", arg);
        return NULL;
      }

      static PyObject *t_Executors_privilegedCallableUsingCurrentClassLoader(PyTypeObject *type, PyObject *arg)
      {
        ::java::util::concurrent::Callable a0((jobject) NULL);
        PyTypeObject **p0;
        ::java::util::concurrent::Callable result((jobject) NULL);

        if (!parseArg(arg, "K", ::java::util::concurrent::Callable::initializeClass, &a0, &p0, ::java::util::concurrent::t_Callable::parameters_))
        {
          OBJ_CALL(result = ::java::util::concurrent::Executors::privilegedCallableUsingCurrentClassLoader(a0));
          return ::java::util::concurrent::t_Callable::wrap_Object(result);
        }

        PyErr_SetArgsError(type, "privilegedCallableUsingCurrentClassLoader", arg);
        return NULL;
      }

      static PyObject *t_Executors_privilegedThreadFactory(PyTypeObject *type)
      {
        ::java::util::concurrent::ThreadFactory result((jobject) NULL);
        OBJ_CALL(result = ::java::util::concurrent::Executors::privilegedThreadFactory());
        return ::java::util::concurrent::t_ThreadFactory::wrap_Object(result);
      }

      static PyObject *t_Executors_unconfigurableExecutorService(PyTypeObject *type, PyObject *arg)
      {
        ::java::util::concurrent::ExecutorService a0((jobject) NULL);
        ::java::util::concurrent::ExecutorService result((jobject) NULL);

        if (!parseArg(arg, "k", ::java::util::concurrent::ExecutorService::initializeClass, &a0))
        {
          OBJ_CALL(result = ::java::util::concurrent::Executors::unconfigurableExecutorService(a0));
          return ::java::util::concurrent::t_ExecutorService::wrap_Object(result);
        }

        PyErr_SetArgsError(type, "unconfigurableExecutorService", arg);
        return NULL;
      }

      static PyObject *t_Executors_unconfigurableScheduledExecutorService(PyTypeObject *type, PyObject *arg)
      {
        ::java::util::concurrent::ScheduledExecutorService a0((jobject) NULL);
        ::java::util::concurrent::ScheduledExecutorService result((jobject) NULL);

        if (!parseArg(arg, "k", ::java::util::concurrent::ScheduledExecutorService::initializeClass, &a0))
        {
          OBJ_CALL(result = ::java::util::concurrent::Executors::unconfigurableScheduledExecutorService(a0));
          return ::java::util::concurrent::t_ScheduledExecutorService::wrap_Object(result);
        }

        PyErr_SetArgsError(type, "unconfigurableScheduledExecutorService", arg);
        return NULL;
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/de/GermanLightStemFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace de {

          ::java::lang::Class *GermanLightStemFilter::class$ = NULL;
          jmethodID *GermanLightStemFilter::mids$ = NULL;
          bool GermanLightStemFilter::live$ = false;

          jclass GermanLightStemFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/de/GermanLightStemFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          GermanLightStemFilter::GermanLightStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean GermanLightStemFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace de {
          static PyObject *t_GermanLightStemFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GermanLightStemFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_GermanLightStemFilter_init_(t_GermanLightStemFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_GermanLightStemFilter_incrementToken(t_GermanLightStemFilter *self, PyObject *args);

          static PyMethodDef t_GermanLightStemFilter__methods_[] = {
            DECLARE_METHOD(t_GermanLightStemFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GermanLightStemFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GermanLightStemFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(GermanLightStemFilter, t_GermanLightStemFilter, ::org::apache::lucene::analysis::TokenFilter, GermanLightStemFilter, t_GermanLightStemFilter_init_, 0, 0, 0, 0, 0);

          void t_GermanLightStemFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(GermanLightStemFilter), module, "GermanLightStemFilter", 0);
          }

          void t_GermanLightStemFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(GermanLightStemFilter).tp_dict, "class_", make_descriptor(GermanLightStemFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(GermanLightStemFilter).tp_dict, "wrapfn_", make_descriptor(t_GermanLightStemFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(GermanLightStemFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_GermanLightStemFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GermanLightStemFilter::initializeClass, 1)))
              return NULL;
            return t_GermanLightStemFilter::wrap_Object(GermanLightStemFilter(((t_GermanLightStemFilter *) arg)->object.this$));
          }
          static PyObject *t_GermanLightStemFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GermanLightStemFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_GermanLightStemFilter_init_(t_GermanLightStemFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            GermanLightStemFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = GermanLightStemFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_GermanLightStemFilter_incrementToken(t_GermanLightStemFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(GermanLightStemFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/sandbox/queries/regex/JavaUtilRegexCapabilities.h"
#include "java/lang/String.h"
#include "org/apache/lucene/sandbox/queries/regex/RegexCapabilities$RegexMatcher.h"
#include "org/apache/lucene/sandbox/queries/regex/RegexCapabilities.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace sandbox {
        namespace queries {
          namespace regex {

            ::java::lang::Class *JavaUtilRegexCapabilities::class$ = NULL;
            jmethodID *JavaUtilRegexCapabilities::mids$ = NULL;
            bool JavaUtilRegexCapabilities::live$ = false;
            jint JavaUtilRegexCapabilities::FLAG_CANON_EQ = (jint) 0;
            jint JavaUtilRegexCapabilities::FLAG_CASE_INSENSITIVE = (jint) 0;
            jint JavaUtilRegexCapabilities::FLAG_COMMENTS = (jint) 0;
            jint JavaUtilRegexCapabilities::FLAG_DOTALL = (jint) 0;
            jint JavaUtilRegexCapabilities::FLAG_LITERAL = (jint) 0;
            jint JavaUtilRegexCapabilities::FLAG_MULTILINE = (jint) 0;
            jint JavaUtilRegexCapabilities::FLAG_UNICODE_CASE = (jint) 0;
            jint JavaUtilRegexCapabilities::FLAG_UNIX_LINES = (jint) 0;

            jclass JavaUtilRegexCapabilities::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/sandbox/queries/regex/JavaUtilRegexCapabilities");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
                mids$[mid_compile_3b00aa76] = env->getMethodID(cls, "compile", "(Ljava/lang/String;)Lorg/apache/lucene/sandbox/queries/regex/RegexCapabilities$RegexMatcher;");
                mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");

                class$ = (::java::lang::Class *) new JObject(cls);
                cls = (jclass) class$->this$;

                FLAG_CANON_EQ = env->getStaticIntField(cls, "FLAG_CANON_EQ");
                FLAG_CASE_INSENSITIVE = env->getStaticIntField(cls, "FLAG_CASE_INSENSITIVE");
                FLAG_COMMENTS = env->getStaticIntField(cls, "FLAG_COMMENTS");
                FLAG_DOTALL = env->getStaticIntField(cls, "FLAG_DOTALL");
                FLAG_LITERAL = env->getStaticIntField(cls, "FLAG_LITERAL");
                FLAG_MULTILINE = env->getStaticIntField(cls, "FLAG_MULTILINE");
                FLAG_UNICODE_CASE = env->getStaticIntField(cls, "FLAG_UNICODE_CASE");
                FLAG_UNIX_LINES = env->getStaticIntField(cls, "FLAG_UNIX_LINES");
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            JavaUtilRegexCapabilities::JavaUtilRegexCapabilities() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

            JavaUtilRegexCapabilities::JavaUtilRegexCapabilities(jint a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

            ::org::apache::lucene::sandbox::queries::regex::RegexCapabilities$RegexMatcher JavaUtilRegexCapabilities::compile(const ::java::lang::String & a0) const
            {
              return ::org::apache::lucene::sandbox::queries::regex::RegexCapabilities$RegexMatcher(env->callObjectMethod(this$, mids$[mid_compile_3b00aa76], a0.this$));
            }

            jboolean JavaUtilRegexCapabilities::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
            }

            jint JavaUtilRegexCapabilities::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace sandbox {
        namespace queries {
          namespace regex {
            static PyObject *t_JavaUtilRegexCapabilities_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_JavaUtilRegexCapabilities_instance_(PyTypeObject *type, PyObject *arg);
            static int t_JavaUtilRegexCapabilities_init_(t_JavaUtilRegexCapabilities *self, PyObject *args, PyObject *kwds);
            static PyObject *t_JavaUtilRegexCapabilities_compile(t_JavaUtilRegexCapabilities *self, PyObject *arg);
            static PyObject *t_JavaUtilRegexCapabilities_equals(t_JavaUtilRegexCapabilities *self, PyObject *args);
            static PyObject *t_JavaUtilRegexCapabilities_hashCode(t_JavaUtilRegexCapabilities *self, PyObject *args);

            static PyMethodDef t_JavaUtilRegexCapabilities__methods_[] = {
              DECLARE_METHOD(t_JavaUtilRegexCapabilities, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_JavaUtilRegexCapabilities, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_JavaUtilRegexCapabilities, compile, METH_O),
              DECLARE_METHOD(t_JavaUtilRegexCapabilities, equals, METH_VARARGS),
              DECLARE_METHOD(t_JavaUtilRegexCapabilities, hashCode, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(JavaUtilRegexCapabilities, t_JavaUtilRegexCapabilities, ::java::lang::Object, JavaUtilRegexCapabilities, t_JavaUtilRegexCapabilities_init_, 0, 0, 0, 0, 0);

            void t_JavaUtilRegexCapabilities::install(PyObject *module)
            {
              installType(&PY_TYPE(JavaUtilRegexCapabilities), module, "JavaUtilRegexCapabilities", 0);
            }

            void t_JavaUtilRegexCapabilities::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(JavaUtilRegexCapabilities).tp_dict, "class_", make_descriptor(JavaUtilRegexCapabilities::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(JavaUtilRegexCapabilities).tp_dict, "wrapfn_", make_descriptor(t_JavaUtilRegexCapabilities::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(JavaUtilRegexCapabilities).tp_dict, "boxfn_", make_descriptor(boxObject));
              env->getClass(JavaUtilRegexCapabilities::initializeClass);
              PyDict_SetItemString(PY_TYPE(JavaUtilRegexCapabilities).tp_dict, "FLAG_CANON_EQ", make_descriptor(JavaUtilRegexCapabilities::FLAG_CANON_EQ));
              PyDict_SetItemString(PY_TYPE(JavaUtilRegexCapabilities).tp_dict, "FLAG_CASE_INSENSITIVE", make_descriptor(JavaUtilRegexCapabilities::FLAG_CASE_INSENSITIVE));
              PyDict_SetItemString(PY_TYPE(JavaUtilRegexCapabilities).tp_dict, "FLAG_COMMENTS", make_descriptor(JavaUtilRegexCapabilities::FLAG_COMMENTS));
              PyDict_SetItemString(PY_TYPE(JavaUtilRegexCapabilities).tp_dict, "FLAG_DOTALL", make_descriptor(JavaUtilRegexCapabilities::FLAG_DOTALL));
              PyDict_SetItemString(PY_TYPE(JavaUtilRegexCapabilities).tp_dict, "FLAG_LITERAL", make_descriptor(JavaUtilRegexCapabilities::FLAG_LITERAL));
              PyDict_SetItemString(PY_TYPE(JavaUtilRegexCapabilities).tp_dict, "FLAG_MULTILINE", make_descriptor(JavaUtilRegexCapabilities::FLAG_MULTILINE));
              PyDict_SetItemString(PY_TYPE(JavaUtilRegexCapabilities).tp_dict, "FLAG_UNICODE_CASE", make_descriptor(JavaUtilRegexCapabilities::FLAG_UNICODE_CASE));
              PyDict_SetItemString(PY_TYPE(JavaUtilRegexCapabilities).tp_dict, "FLAG_UNIX_LINES", make_descriptor(JavaUtilRegexCapabilities::FLAG_UNIX_LINES));
            }

            static PyObject *t_JavaUtilRegexCapabilities_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, JavaUtilRegexCapabilities::initializeClass, 1)))
                return NULL;
              return t_JavaUtilRegexCapabilities::wrap_Object(JavaUtilRegexCapabilities(((t_JavaUtilRegexCapabilities *) arg)->object.this$));
            }
            static PyObject *t_JavaUtilRegexCapabilities_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, JavaUtilRegexCapabilities::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_JavaUtilRegexCapabilities_init_(t_JavaUtilRegexCapabilities *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 0:
                {
                  JavaUtilRegexCapabilities object((jobject) NULL);

                  INT_CALL(object = JavaUtilRegexCapabilities());
                  self->object = object;
                  break;
                }
                goto err;
               case 1:
                {
                  jint a0;
                  JavaUtilRegexCapabilities object((jobject) NULL);

                  if (!parseArgs(args, "I", &a0))
                  {
                    INT_CALL(object = JavaUtilRegexCapabilities(a0));
                    self->object = object;
                    break;
                  }
                }
               default:
               err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_JavaUtilRegexCapabilities_compile(t_JavaUtilRegexCapabilities *self, PyObject *arg)
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::sandbox::queries::regex::RegexCapabilities$RegexMatcher result((jobject) NULL);

              if (!parseArg(arg, "s", &a0))
              {
                OBJ_CALL(result = self->object.compile(a0));
                return ::org::apache::lucene::sandbox::queries::regex::t_RegexCapabilities$RegexMatcher::wrap_Object(result);
              }

              PyErr_SetArgsError((PyObject *) self, "compile", arg);
              return NULL;
            }

            static PyObject *t_JavaUtilRegexCapabilities_equals(t_JavaUtilRegexCapabilities *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(JavaUtilRegexCapabilities), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_JavaUtilRegexCapabilities_hashCode(t_JavaUtilRegexCapabilities *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(JavaUtilRegexCapabilities), (PyObject *) self, "hashCode", args, 2);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/en/PorterStemFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace en {

          ::java::lang::Class *PorterStemFilter::class$ = NULL;
          jmethodID *PorterStemFilter::mids$ = NULL;
          bool PorterStemFilter::live$ = false;

          jclass PorterStemFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/en/PorterStemFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PorterStemFilter::PorterStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean PorterStemFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace en {
          static PyObject *t_PorterStemFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PorterStemFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PorterStemFilter_init_(t_PorterStemFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PorterStemFilter_incrementToken(t_PorterStemFilter *self, PyObject *args);

          static PyMethodDef t_PorterStemFilter__methods_[] = {
            DECLARE_METHOD(t_PorterStemFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PorterStemFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PorterStemFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PorterStemFilter, t_PorterStemFilter, ::org::apache::lucene::analysis::TokenFilter, PorterStemFilter, t_PorterStemFilter_init_, 0, 0, 0, 0, 0);

          void t_PorterStemFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(PorterStemFilter), module, "PorterStemFilter", 0);
          }

          void t_PorterStemFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PorterStemFilter).tp_dict, "class_", make_descriptor(PorterStemFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PorterStemFilter).tp_dict, "wrapfn_", make_descriptor(t_PorterStemFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PorterStemFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PorterStemFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PorterStemFilter::initializeClass, 1)))
              return NULL;
            return t_PorterStemFilter::wrap_Object(PorterStemFilter(((t_PorterStemFilter *) arg)->object.this$));
          }
          static PyObject *t_PorterStemFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PorterStemFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PorterStemFilter_init_(t_PorterStemFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            PorterStemFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = PorterStemFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PorterStemFilter_incrementToken(t_PorterStemFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(PorterStemFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/Accountable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *Accountable::class$ = NULL;
        jmethodID *Accountable::mids$ = NULL;
        bool Accountable::live$ = false;

        jclass Accountable::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/Accountable");

            mids$ = new jmethodID[max_mid];
            mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jlong Accountable::ramBytesUsed() const
        {
          return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_Accountable_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Accountable_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Accountable_ramBytesUsed(t_Accountable *self);

        static PyMethodDef t_Accountable__methods_[] = {
          DECLARE_METHOD(t_Accountable, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Accountable, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Accountable, ramBytesUsed, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Accountable, t_Accountable, ::java::lang::Object, Accountable, abstract_init, 0, 0, 0, 0, 0);

        void t_Accountable::install(PyObject *module)
        {
          installType(&PY_TYPE(Accountable), module, "Accountable", 0);
        }

        void t_Accountable::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(Accountable).tp_dict, "class_", make_descriptor(Accountable::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(Accountable).tp_dict, "wrapfn_", make_descriptor(t_Accountable::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(Accountable).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Accountable_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Accountable::initializeClass, 1)))
            return NULL;
          return t_Accountable::wrap_Object(Accountable(((t_Accountable *) arg)->object.this$));
        }
        static PyObject *t_Accountable_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Accountable::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_Accountable_ramBytesUsed(t_Accountable *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.ramBytesUsed());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/reverse/ReverseStringFilter.h"
#include "java/io/IOException.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace reverse {

          ::java::lang::Class *ReverseStringFilter::class$ = NULL;
          jmethodID *ReverseStringFilter::mids$ = NULL;
          bool ReverseStringFilter::live$ = false;
          jchar ReverseStringFilter::INFORMATION_SEPARATOR_MARKER = (jchar) 0;
          jchar ReverseStringFilter::PUA_EC00_MARKER = (jchar) 0;
          jchar ReverseStringFilter::RTL_DIRECTION_MARKER = (jchar) 0;
          jchar ReverseStringFilter::START_OF_HEADING_MARKER = (jchar) 0;

          jclass ReverseStringFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/reverse/ReverseStringFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_init$_7f651764] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;C)V");
              mids$[mid_init$_8f50e725] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_init$_0e43cbd7] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/TokenStream;C)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reverse_700e23d6] = env->getStaticMethodID(cls, "reverse", "([C)V");
              mids$[mid_reverse_97a5258f] = env->getStaticMethodID(cls, "reverse", "(Ljava/lang/String;)Ljava/lang/String;");
              mids$[mid_reverse_4b169143] = env->getStaticMethodID(cls, "reverse", "(Lorg/apache/lucene/util/Version;[C)V");
              mids$[mid_reverse_ec6430f4] = env->getStaticMethodID(cls, "reverse", "([CI)V");
              mids$[mid_reverse_4fcde068] = env->getStaticMethodID(cls, "reverse", "(Lorg/apache/lucene/util/Version;Ljava/lang/String;)Ljava/lang/String;");
              mids$[mid_reverse_6f0bb356] = env->getStaticMethodID(cls, "reverse", "([CII)V");
              mids$[mid_reverse_dcd30fdb] = env->getStaticMethodID(cls, "reverse", "(Lorg/apache/lucene/util/Version;[CI)V");
              mids$[mid_reverse_41701017] = env->getStaticMethodID(cls, "reverse", "(Lorg/apache/lucene/util/Version;[CII)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              INFORMATION_SEPARATOR_MARKER = env->getStaticCharField(cls, "INFORMATION_SEPARATOR_MARKER");
              PUA_EC00_MARKER = env->getStaticCharField(cls, "PUA_EC00_MARKER");
              RTL_DIRECTION_MARKER = env->getStaticCharField(cls, "RTL_DIRECTION_MARKER");
              START_OF_HEADING_MARKER = env->getStaticCharField(cls, "START_OF_HEADING_MARKER");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ReverseStringFilter::ReverseStringFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          ReverseStringFilter::ReverseStringFilter(const ::org::apache::lucene::analysis::TokenStream & a0, jchar a1) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_7f651764, a0.this$, a1)) {}

          ReverseStringFilter::ReverseStringFilter(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::TokenStream & a1) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_8f50e725, a0.this$, a1.this$)) {}

          ReverseStringFilter::ReverseStringFilter(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::TokenStream & a1, jchar a2) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_0e43cbd7, a0.this$, a1.this$, a2)) {}

          jboolean ReverseStringFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void ReverseStringFilter::reverse(const JArray< jchar > & a0)
          {
            jclass cls = env->getClass(initializeClass);
            env->callStaticVoidMethod(cls, mids$[mid_reverse_700e23d6], a0.this$);
          }

          ::java::lang::String ReverseStringFilter::reverse(const ::java::lang::String & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_reverse_97a5258f], a0.this$));
          }

          void ReverseStringFilter::reverse(const ::org::apache::lucene::util::Version & a0, const JArray< jchar > & a1)
          {
            jclass cls = env->getClass(initializeClass);
            env->callStaticVoidMethod(cls, mids$[mid_reverse_4b169143], a0.this$, a1.this$);
          }

          void ReverseStringFilter::reverse(const JArray< jchar > & a0, jint a1)
          {
            jclass cls = env->getClass(initializeClass);
            env->callStaticVoidMethod(cls, mids$[mid_reverse_ec6430f4], a0.this$, a1);
          }

          ::java::lang::String ReverseStringFilter::reverse(const ::org::apache::lucene::util::Version & a0, const ::java::lang::String & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_reverse_4fcde068], a0.this$, a1.this$));
          }

          void ReverseStringFilter::reverse(const JArray< jchar > & a0, jint a1, jint a2)
          {
            jclass cls = env->getClass(initializeClass);
            env->callStaticVoidMethod(cls, mids$[mid_reverse_6f0bb356], a0.this$, a1, a2);
          }

          void ReverseStringFilter::reverse(const ::org::apache::lucene::util::Version & a0, const JArray< jchar > & a1, jint a2)
          {
            jclass cls = env->getClass(initializeClass);
            env->callStaticVoidMethod(cls, mids$[mid_reverse_dcd30fdb], a0.this$, a1.this$, a2);
          }

          void ReverseStringFilter::reverse(const ::org::apache::lucene::util::Version & a0, const JArray< jchar > & a1, jint a2, jint a3)
          {
            jclass cls = env->getClass(initializeClass);
            env->callStaticVoidMethod(cls, mids$[mid_reverse_41701017], a0.this$, a1.this$, a2, a3);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace reverse {
          static PyObject *t_ReverseStringFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ReverseStringFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ReverseStringFilter_init_(t_ReverseStringFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ReverseStringFilter_incrementToken(t_ReverseStringFilter *self, PyObject *args);
          static PyObject *t_ReverseStringFilter_reverse(PyTypeObject *type, PyObject *args);

          static PyMethodDef t_ReverseStringFilter__methods_[] = {
            DECLARE_METHOD(t_ReverseStringFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ReverseStringFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ReverseStringFilter, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_ReverseStringFilter, reverse, METH_VARARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ReverseStringFilter, t_ReverseStringFilter, ::org::apache::lucene::analysis::TokenFilter, ReverseStringFilter, t_ReverseStringFilter_init_, 0, 0, 0, 0, 0);

          void t_ReverseStringFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(ReverseStringFilter), module, "ReverseStringFilter", 0);
          }

          void t_ReverseStringFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ReverseStringFilter).tp_dict, "class_", make_descriptor(ReverseStringFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ReverseStringFilter).tp_dict, "wrapfn_", make_descriptor(t_ReverseStringFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ReverseStringFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(ReverseStringFilter::initializeClass);
            PyDict_SetItemString(PY_TYPE(ReverseStringFilter).tp_dict, "INFORMATION_SEPARATOR_MARKER", make_descriptor(ReverseStringFilter::INFORMATION_SEPARATOR_MARKER));
            PyDict_SetItemString(PY_TYPE(ReverseStringFilter).tp_dict, "PUA_EC00_MARKER", make_descriptor(ReverseStringFilter::PUA_EC00_MARKER));
            PyDict_SetItemString(PY_TYPE(ReverseStringFilter).tp_dict, "RTL_DIRECTION_MARKER", make_descriptor(ReverseStringFilter::RTL_DIRECTION_MARKER));
            PyDict_SetItemString(PY_TYPE(ReverseStringFilter).tp_dict, "START_OF_HEADING_MARKER", make_descriptor(ReverseStringFilter::START_OF_HEADING_MARKER));
          }

          static PyObject *t_ReverseStringFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ReverseStringFilter::initializeClass, 1)))
              return NULL;
            return t_ReverseStringFilter::wrap_Object(ReverseStringFilter(((t_ReverseStringFilter *) arg)->object.this$));
          }
          static PyObject *t_ReverseStringFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ReverseStringFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ReverseStringFilter_init_(t_ReverseStringFilter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                ReverseStringFilter object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
                {
                  INT_CALL(object = ReverseStringFilter(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                jchar a1;
                ReverseStringFilter object((jobject) NULL);

                if (!parseArgs(args, "kC", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = ReverseStringFilter(a0, a1));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
                ReverseStringFilter object((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = ReverseStringFilter(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
                jchar a2;
                ReverseStringFilter object((jobject) NULL);

                if (!parseArgs(args, "kkC", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = ReverseStringFilter(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ReverseStringFilter_incrementToken(t_ReverseStringFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(ReverseStringFilter), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_ReverseStringFilter_reverse(PyTypeObject *type, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                JArray< jchar > a0((jobject) NULL);

                if (!parseArgs(args, "[C", &a0))
                {
                  OBJ_CALL(::org::apache::lucene::analysis::reverse::ReverseStringFilter::reverse(a0));
                  Py_RETURN_NONE;
                }
              }
              {
                ::java::lang::String a0((jobject) NULL);
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, "s", &a0))
                {
                  OBJ_CALL(result = ::org::apache::lucene::analysis::reverse::ReverseStringFilter::reverse(a0));
                  return j2p(result);
                }
              }
              break;
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                JArray< jchar > a1((jobject) NULL);

                if (!parseArgs(args, "k[C", ::org::apache::lucene::util::Version::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(::org::apache::lucene::analysis::reverse::ReverseStringFilter::reverse(a0, a1));
                  Py_RETURN_NONE;
                }
              }
              {
                JArray< jchar > a0((jobject) NULL);
                jint a1;

                if (!parseArgs(args, "[CI", &a0, &a1))
                {
                  OBJ_CALL(::org::apache::lucene::analysis::reverse::ReverseStringFilter::reverse(a0, a1));
                  Py_RETURN_NONE;
                }
              }
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, "ks", ::org::apache::lucene::util::Version::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(result = ::org::apache::lucene::analysis::reverse::ReverseStringFilter::reverse(a0, a1));
                  return j2p(result);
                }
              }
              break;
             case 3:
              {
                JArray< jchar > a0((jobject) NULL);
                jint a1;
                jint a2;

                if (!parseArgs(args, "[CII", &a0, &a1, &a2))
                {
                  OBJ_CALL(::org::apache::lucene::analysis::reverse::ReverseStringFilter::reverse(a0, a1, a2));
                  Py_RETURN_NONE;
                }
              }
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                JArray< jchar > a1((jobject) NULL);
                jint a2;

                if (!parseArgs(args, "k[CI", ::org::apache::lucene::util::Version::initializeClass, &a0, &a1, &a2))
                {
                  OBJ_CALL(::org::apache::lucene::analysis::reverse::ReverseStringFilter::reverse(a0, a1, a2));
                  Py_RETURN_NONE;
                }
              }
              break;
             case 4:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                JArray< jchar > a1((jobject) NULL);
                jint a2;
                jint a3;

                if (!parseArgs(args, "k[CII", ::org::apache::lucene::util::Version::initializeClass, &a0, &a1, &a2, &a3))
                {
                  OBJ_CALL(::org::apache::lucene::analysis::reverse::ReverseStringFilter::reverse(a0, a1, a2, a3));
                  Py_RETURN_NONE;
                }
              }
            }

            PyErr_SetArgsError(type, "reverse", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/pt/PortugueseMinimalStemFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pt {

          ::java::lang::Class *PortugueseMinimalStemFilter::class$ = NULL;
          jmethodID *PortugueseMinimalStemFilter::mids$ = NULL;
          bool PortugueseMinimalStemFilter::live$ = false;

          jclass PortugueseMinimalStemFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/pt/PortugueseMinimalStemFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PortugueseMinimalStemFilter::PortugueseMinimalStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean PortugueseMinimalStemFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pt {
          static PyObject *t_PortugueseMinimalStemFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PortugueseMinimalStemFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PortugueseMinimalStemFilter_init_(t_PortugueseMinimalStemFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PortugueseMinimalStemFilter_incrementToken(t_PortugueseMinimalStemFilter *self, PyObject *args);

          static PyMethodDef t_PortugueseMinimalStemFilter__methods_[] = {
            DECLARE_METHOD(t_PortugueseMinimalStemFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PortugueseMinimalStemFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PortugueseMinimalStemFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PortugueseMinimalStemFilter, t_PortugueseMinimalStemFilter, ::org::apache::lucene::analysis::TokenFilter, PortugueseMinimalStemFilter, t_PortugueseMinimalStemFilter_init_, 0, 0, 0, 0, 0);

          void t_PortugueseMinimalStemFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(PortugueseMinimalStemFilter), module, "PortugueseMinimalStemFilter", 0);
          }

          void t_PortugueseMinimalStemFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PortugueseMinimalStemFilter).tp_dict, "class_", make_descriptor(PortugueseMinimalStemFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PortugueseMinimalStemFilter).tp_dict, "wrapfn_", make_descriptor(t_PortugueseMinimalStemFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PortugueseMinimalStemFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PortugueseMinimalStemFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PortugueseMinimalStemFilter::initializeClass, 1)))
              return NULL;
            return t_PortugueseMinimalStemFilter::wrap_Object(PortugueseMinimalStemFilter(((t_PortugueseMinimalStemFilter *) arg)->object.this$));
          }
          static PyObject *t_PortugueseMinimalStemFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PortugueseMinimalStemFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PortugueseMinimalStemFilter_init_(t_PortugueseMinimalStemFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            PortugueseMinimalStemFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = PortugueseMinimalStemFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PortugueseMinimalStemFilter_incrementToken(t_PortugueseMinimalStemFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(PortugueseMinimalStemFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/IndexUpgrader.h"
#include "org/apache/lucene/index/IndexWriterConfig.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "java/io/IOException.h"
#include "java/lang/String.h"
#include "org/apache/lucene/util/InfoStream.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *IndexUpgrader::class$ = NULL;
        jmethodID *IndexUpgrader::mids$ = NULL;
        bool IndexUpgrader::live$ = false;

        jclass IndexUpgrader::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/IndexUpgrader");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_3b411aab] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/util/Version;)V");
            mids$[mid_init$_884b85de] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/IndexWriterConfig;Z)V");
            mids$[mid_init$_2b2ed566] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/util/Version;Lorg/apache/lucene/util/InfoStream;Z)V");
            mids$[mid_main_4dd4540c] = env->getStaticMethodID(cls, "main", "([Ljava/lang/String;)V");
            mids$[mid_upgrade_54c6a166] = env->getMethodID(cls, "upgrade", "()V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        IndexUpgrader::IndexUpgrader(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::util::Version & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_3b411aab, a0.this$, a1.this$)) {}

        IndexUpgrader::IndexUpgrader(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::IndexWriterConfig & a1, jboolean a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_884b85de, a0.this$, a1.this$, a2)) {}

        IndexUpgrader::IndexUpgrader(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::util::Version & a1, const ::org::apache::lucene::util::InfoStream & a2, jboolean a3) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_2b2ed566, a0.this$, a1.this$, a2.this$, a3)) {}

        void IndexUpgrader::main(const JArray< ::java::lang::String > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_main_4dd4540c], a0.this$);
        }

        void IndexUpgrader::upgrade() const
        {
          env->callVoidMethod(this$, mids$[mid_upgrade_54c6a166]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_IndexUpgrader_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexUpgrader_instance_(PyTypeObject *type, PyObject *arg);
        static int t_IndexUpgrader_init_(t_IndexUpgrader *self, PyObject *args, PyObject *kwds);
        static PyObject *t_IndexUpgrader_main(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexUpgrader_upgrade(t_IndexUpgrader *self);

        static PyMethodDef t_IndexUpgrader__methods_[] = {
          DECLARE_METHOD(t_IndexUpgrader, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexUpgrader, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexUpgrader, main, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexUpgrader, upgrade, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(IndexUpgrader, t_IndexUpgrader, ::java::lang::Object, IndexUpgrader, t_IndexUpgrader_init_, 0, 0, 0, 0, 0);

        void t_IndexUpgrader::install(PyObject *module)
        {
          installType(&PY_TYPE(IndexUpgrader), module, "IndexUpgrader", 0);
        }

        void t_IndexUpgrader::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(IndexUpgrader).tp_dict, "class_", make_descriptor(IndexUpgrader::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(IndexUpgrader).tp_dict, "wrapfn_", make_descriptor(t_IndexUpgrader::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(IndexUpgrader).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_IndexUpgrader_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IndexUpgrader::initializeClass, 1)))
            return NULL;
          return t_IndexUpgrader::wrap_Object(IndexUpgrader(((t_IndexUpgrader *) arg)->object.this$));
        }
        static PyObject *t_IndexUpgrader_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IndexUpgrader::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_IndexUpgrader_init_(t_IndexUpgrader *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::org::apache::lucene::store::Directory a0((jobject) NULL);
              ::org::apache::lucene::util::Version a1((jobject) NULL);
              IndexUpgrader object((jobject) NULL);

              if (!parseArgs(args, "kk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::util::Version::initializeClass, &a0, &a1))
              {
                INT_CALL(object = IndexUpgrader(a0, a1));
                self->object = object;
                break;
              }
            }
            goto err;
           case 3:
            {
              ::org::apache::lucene::store::Directory a0((jobject) NULL);
              ::org::apache::lucene::index::IndexWriterConfig a1((jobject) NULL);
              jboolean a2;
              IndexUpgrader object((jobject) NULL);

              if (!parseArgs(args, "kkZ", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::IndexWriterConfig::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = IndexUpgrader(a0, a1, a2));
                self->object = object;
                break;
              }
            }
            goto err;
           case 4:
            {
              ::org::apache::lucene::store::Directory a0((jobject) NULL);
              ::org::apache::lucene::util::Version a1((jobject) NULL);
              ::org::apache::lucene::util::InfoStream a2((jobject) NULL);
              jboolean a3;
              IndexUpgrader object((jobject) NULL);

              if (!parseArgs(args, "kkkZ", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::util::InfoStream::initializeClass, &a0, &a1, &a2, &a3))
              {
                INT_CALL(object = IndexUpgrader(a0, a1, a2, a3));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_IndexUpgrader_main(PyTypeObject *type, PyObject *arg)
        {
          JArray< ::java::lang::String > a0((jobject) NULL);

          if (!parseArg(arg, "[s", &a0))
          {
            OBJ_CALL(::org::apache::lucene::index::IndexUpgrader::main(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "main", arg);
          return NULL;
        }

        static PyObject *t_IndexUpgrader_upgrade(t_IndexUpgrader *self)
        {
          OBJ_CALL(self->object.upgrade());
          Py_RETURN_NONE;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene42/Lucene42DocValuesFormat.h"
#include "org/apache/lucene/codecs/DocValuesProducer.h"
#include "org/apache/lucene/index/SegmentWriteState.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/codecs/DocValuesConsumer.h"
#include "org/apache/lucene/index/SegmentReadState.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene42 {

          ::java::lang::Class *Lucene42DocValuesFormat::class$ = NULL;
          jmethodID *Lucene42DocValuesFormat::mids$ = NULL;
          bool Lucene42DocValuesFormat::live$ = false;
          jint Lucene42DocValuesFormat::MAX_BINARY_FIELD_LENGTH = (jint) 0;

          jclass Lucene42DocValuesFormat::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene42/Lucene42DocValuesFormat");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_06298cab] = env->getMethodID(cls, "<init>", "(F)V");
              mids$[mid_fieldsConsumer_025deb44] = env->getMethodID(cls, "fieldsConsumer", "(Lorg/apache/lucene/index/SegmentWriteState;)Lorg/apache/lucene/codecs/DocValuesConsumer;");
              mids$[mid_fieldsProducer_9b0d4e4a] = env->getMethodID(cls, "fieldsProducer", "(Lorg/apache/lucene/index/SegmentReadState;)Lorg/apache/lucene/codecs/DocValuesProducer;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              MAX_BINARY_FIELD_LENGTH = env->getStaticIntField(cls, "MAX_BINARY_FIELD_LENGTH");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene42DocValuesFormat::Lucene42DocValuesFormat() : ::org::apache::lucene::codecs::DocValuesFormat(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          Lucene42DocValuesFormat::Lucene42DocValuesFormat(jfloat a0) : ::org::apache::lucene::codecs::DocValuesFormat(env->newObject(initializeClass, &mids$, mid_init$_06298cab, a0)) {}

          ::org::apache::lucene::codecs::DocValuesConsumer Lucene42DocValuesFormat::fieldsConsumer(const ::org::apache::lucene::index::SegmentWriteState & a0) const
          {
            return ::org::apache::lucene::codecs::DocValuesConsumer(env->callObjectMethod(this$, mids$[mid_fieldsConsumer_025deb44], a0.this$));
          }

          ::org::apache::lucene::codecs::DocValuesProducer Lucene42DocValuesFormat::fieldsProducer(const ::org::apache::lucene::index::SegmentReadState & a0) const
          {
            return ::org::apache::lucene::codecs::DocValuesProducer(env->callObjectMethod(this$, mids$[mid_fieldsProducer_9b0d4e4a], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene42 {
          static PyObject *t_Lucene42DocValuesFormat_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene42DocValuesFormat_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene42DocValuesFormat_init_(t_Lucene42DocValuesFormat *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene42DocValuesFormat_fieldsConsumer(t_Lucene42DocValuesFormat *self, PyObject *args);
          static PyObject *t_Lucene42DocValuesFormat_fieldsProducer(t_Lucene42DocValuesFormat *self, PyObject *args);

          static PyMethodDef t_Lucene42DocValuesFormat__methods_[] = {
            DECLARE_METHOD(t_Lucene42DocValuesFormat, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene42DocValuesFormat, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene42DocValuesFormat, fieldsConsumer, METH_VARARGS),
            DECLARE_METHOD(t_Lucene42DocValuesFormat, fieldsProducer, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene42DocValuesFormat, t_Lucene42DocValuesFormat, ::org::apache::lucene::codecs::DocValuesFormat, Lucene42DocValuesFormat, t_Lucene42DocValuesFormat_init_, 0, 0, 0, 0, 0);

          void t_Lucene42DocValuesFormat::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene42DocValuesFormat), module, "Lucene42DocValuesFormat", 0);
          }

          void t_Lucene42DocValuesFormat::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene42DocValuesFormat).tp_dict, "class_", make_descriptor(Lucene42DocValuesFormat::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene42DocValuesFormat).tp_dict, "wrapfn_", make_descriptor(t_Lucene42DocValuesFormat::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene42DocValuesFormat).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(Lucene42DocValuesFormat::initializeClass);
            PyDict_SetItemString(PY_TYPE(Lucene42DocValuesFormat).tp_dict, "MAX_BINARY_FIELD_LENGTH", make_descriptor(Lucene42DocValuesFormat::MAX_BINARY_FIELD_LENGTH));
          }

          static PyObject *t_Lucene42DocValuesFormat_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene42DocValuesFormat::initializeClass, 1)))
              return NULL;
            return t_Lucene42DocValuesFormat::wrap_Object(Lucene42DocValuesFormat(((t_Lucene42DocValuesFormat *) arg)->object.this$));
          }
          static PyObject *t_Lucene42DocValuesFormat_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene42DocValuesFormat::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene42DocValuesFormat_init_(t_Lucene42DocValuesFormat *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                Lucene42DocValuesFormat object((jobject) NULL);

                INT_CALL(object = Lucene42DocValuesFormat());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                jfloat a0;
                Lucene42DocValuesFormat object((jobject) NULL);

                if (!parseArgs(args, "F", &a0))
                {
                  INT_CALL(object = Lucene42DocValuesFormat(a0));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_Lucene42DocValuesFormat_fieldsConsumer(t_Lucene42DocValuesFormat *self, PyObject *args)
          {
            ::org::apache::lucene::index::SegmentWriteState a0((jobject) NULL);
            ::org::apache::lucene::codecs::DocValuesConsumer result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::SegmentWriteState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.fieldsConsumer(a0));
              return ::org::apache::lucene::codecs::t_DocValuesConsumer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene42DocValuesFormat), (PyObject *) self, "fieldsConsumer", args, 2);
          }

          static PyObject *t_Lucene42DocValuesFormat_fieldsProducer(t_Lucene42DocValuesFormat *self, PyObject *args)
          {
            ::org::apache::lucene::index::SegmentReadState a0((jobject) NULL);
            ::org::apache::lucene::codecs::DocValuesProducer result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::SegmentReadState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.fieldsProducer(a0));
              return ::org::apache::lucene::codecs::t_DocValuesProducer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene42DocValuesFormat), (PyObject *) self, "fieldsProducer", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/IfFunction.h"
#include "org/apache/lucene/queries/function/ValueSource.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *IfFunction::class$ = NULL;
            jmethodID *IfFunction::mids$ = NULL;
            bool IfFunction::live$ = false;

            jclass IfFunction::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/IfFunction");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_b33eec32] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queries/function/ValueSource;Lorg/apache/lucene/queries/function/ValueSource;Lorg/apache/lucene/queries/function/ValueSource;)V");
                mids$[mid_createWeight_1b6125ba] = env->getMethodID(cls, "createWeight", "(Ljava/util/Map;Lorg/apache/lucene/search/IndexSearcher;)V");
                mids$[mid_description_14c7b5c5] = env->getMethodID(cls, "description", "()Ljava/lang/String;");
                mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_getValues_4c566485] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/queries/function/FunctionValues;");
                mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            IfFunction::IfFunction(const ::org::apache::lucene::queries::function::ValueSource & a0, const ::org::apache::lucene::queries::function::ValueSource & a1, const ::org::apache::lucene::queries::function::ValueSource & a2) : ::org::apache::lucene::queries::function::valuesource::BoolFunction(env->newObject(initializeClass, &mids$, mid_init$_b33eec32, a0.this$, a1.this$, a2.this$)) {}

            void IfFunction::createWeight(const ::java::util::Map & a0, const ::org::apache::lucene::search::IndexSearcher & a1) const
            {
              env->callVoidMethod(this$, mids$[mid_createWeight_1b6125ba], a0.this$, a1.this$);
            }

            ::java::lang::String IfFunction::description() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_description_14c7b5c5]));
            }

            jboolean IfFunction::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
            }

            ::org::apache::lucene::queries::function::FunctionValues IfFunction::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::FunctionValues(env->callObjectMethod(this$, mids$[mid_getValues_4c566485], a0.this$, a1.this$));
            }

            jint IfFunction::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_IfFunction_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_IfFunction_instance_(PyTypeObject *type, PyObject *arg);
            static int t_IfFunction_init_(t_IfFunction *self, PyObject *args, PyObject *kwds);
            static PyObject *t_IfFunction_createWeight(t_IfFunction *self, PyObject *args);
            static PyObject *t_IfFunction_description(t_IfFunction *self, PyObject *args);
            static PyObject *t_IfFunction_equals(t_IfFunction *self, PyObject *args);
            static PyObject *t_IfFunction_getValues(t_IfFunction *self, PyObject *args);
            static PyObject *t_IfFunction_hashCode(t_IfFunction *self, PyObject *args);

            static PyMethodDef t_IfFunction__methods_[] = {
              DECLARE_METHOD(t_IfFunction, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_IfFunction, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_IfFunction, createWeight, METH_VARARGS),
              DECLARE_METHOD(t_IfFunction, description, METH_VARARGS),
              DECLARE_METHOD(t_IfFunction, equals, METH_VARARGS),
              DECLARE_METHOD(t_IfFunction, getValues, METH_VARARGS),
              DECLARE_METHOD(t_IfFunction, hashCode, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(IfFunction, t_IfFunction, ::org::apache::lucene::queries::function::valuesource::BoolFunction, IfFunction, t_IfFunction_init_, 0, 0, 0, 0, 0);

            void t_IfFunction::install(PyObject *module)
            {
              installType(&PY_TYPE(IfFunction), module, "IfFunction", 0);
            }

            void t_IfFunction::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(IfFunction).tp_dict, "class_", make_descriptor(IfFunction::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(IfFunction).tp_dict, "wrapfn_", make_descriptor(t_IfFunction::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(IfFunction).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_IfFunction_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, IfFunction::initializeClass, 1)))
                return NULL;
              return t_IfFunction::wrap_Object(IfFunction(((t_IfFunction *) arg)->object.this$));
            }
            static PyObject *t_IfFunction_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, IfFunction::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_IfFunction_init_(t_IfFunction *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::queries::function::ValueSource a0((jobject) NULL);
              ::org::apache::lucene::queries::function::ValueSource a1((jobject) NULL);
              ::org::apache::lucene::queries::function::ValueSource a2((jobject) NULL);
              IfFunction object((jobject) NULL);

              if (!parseArgs(args, "kkk", ::org::apache::lucene::queries::function::ValueSource::initializeClass, ::org::apache::lucene::queries::function::ValueSource::initializeClass, ::org::apache::lucene::queries::function::ValueSource::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = IfFunction(a0, a1, a2));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_IfFunction_createWeight(t_IfFunction *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::search::IndexSearcher a1((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(self->object.createWeight(a0, a1));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(IfFunction), (PyObject *) self, "createWeight", args, 2);
            }

            static PyObject *t_IfFunction_description(t_IfFunction *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.description());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(IfFunction), (PyObject *) self, "description", args, 2);
            }

            static PyObject *t_IfFunction_equals(t_IfFunction *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(IfFunction), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_IfFunction_getValues(t_IfFunction *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::FunctionValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::t_FunctionValues::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(IfFunction), (PyObject *) self, "getValues", args, 2);
            }

            static PyObject *t_IfFunction_hashCode(t_IfFunction *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(IfFunction), (PyObject *) self, "hashCode", args, 2);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/TermRangeTermsEnum.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/index/TermsEnum.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *TermRangeTermsEnum::class$ = NULL;
        jmethodID *TermRangeTermsEnum::mids$ = NULL;
        bool TermRangeTermsEnum::live$ = false;

        jclass TermRangeTermsEnum::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/TermRangeTermsEnum");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_cf65bdfc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/TermsEnum;Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/util/BytesRef;ZZ)V");
            mids$[mid_accept_30bc08e1] = env->getMethodID(cls, "accept", "(Lorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/index/FilteredTermsEnum$AcceptStatus;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        TermRangeTermsEnum::TermRangeTermsEnum(const ::org::apache::lucene::index::TermsEnum & a0, const ::org::apache::lucene::util::BytesRef & a1, const ::org::apache::lucene::util::BytesRef & a2, jboolean a3, jboolean a4) : ::org::apache::lucene::index::FilteredTermsEnum(env->newObject(initializeClass, &mids$, mid_init$_cf65bdfc, a0.this$, a1.this$, a2.this$, a3, a4)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_TermRangeTermsEnum_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TermRangeTermsEnum_instance_(PyTypeObject *type, PyObject *arg);
        static int t_TermRangeTermsEnum_init_(t_TermRangeTermsEnum *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_TermRangeTermsEnum__methods_[] = {
          DECLARE_METHOD(t_TermRangeTermsEnum, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TermRangeTermsEnum, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TermRangeTermsEnum, t_TermRangeTermsEnum, ::org::apache::lucene::index::FilteredTermsEnum, TermRangeTermsEnum, t_TermRangeTermsEnum_init_, 0, 0, 0, 0, 0);

        void t_TermRangeTermsEnum::install(PyObject *module)
        {
          installType(&PY_TYPE(TermRangeTermsEnum), module, "TermRangeTermsEnum", 0);
        }

        void t_TermRangeTermsEnum::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TermRangeTermsEnum).tp_dict, "class_", make_descriptor(TermRangeTermsEnum::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TermRangeTermsEnum).tp_dict, "wrapfn_", make_descriptor(t_TermRangeTermsEnum::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TermRangeTermsEnum).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TermRangeTermsEnum_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TermRangeTermsEnum::initializeClass, 1)))
            return NULL;
          return t_TermRangeTermsEnum::wrap_Object(TermRangeTermsEnum(((t_TermRangeTermsEnum *) arg)->object.this$));
        }
        static PyObject *t_TermRangeTermsEnum_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TermRangeTermsEnum::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_TermRangeTermsEnum_init_(t_TermRangeTermsEnum *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::index::TermsEnum a0((jobject) NULL);
          ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
          ::org::apache::lucene::util::BytesRef a2((jobject) NULL);
          jboolean a3;
          jboolean a4;
          TermRangeTermsEnum object((jobject) NULL);

          if (!parseArgs(args, "kkkZZ", ::org::apache::lucene::index::TermsEnum::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2, &a3, &a4))
          {
            INT_CALL(object = TermRangeTermsEnum(a0, a1, a2, a3, a4));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/PostingsFormat.h"
#include "java/util/Set.h"
#include "org/apache/lucene/codecs/FieldsConsumer.h"
#include "org/apache/lucene/index/SegmentWriteState.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/NamedSPILoader$NamedSPI.h"
#include "org/apache/lucene/codecs/FieldsProducer.h"
#include "org/apache/lucene/index/SegmentReadState.h"
#include "java/lang/ClassLoader.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {

        ::java::lang::Class *PostingsFormat::class$ = NULL;
        jmethodID *PostingsFormat::mids$ = NULL;
        bool PostingsFormat::live$ = false;
        JArray< PostingsFormat > *PostingsFormat::EMPTY = NULL;

        jclass PostingsFormat::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/PostingsFormat");

            mids$ = new jmethodID[max_mid];
            mids$[mid_availablePostingsFormats_03e99967] = env->getStaticMethodID(cls, "availablePostingsFormats", "()Ljava/util/Set;");
            mids$[mid_fieldsConsumer_a15793c6] = env->getMethodID(cls, "fieldsConsumer", "(Lorg/apache/lucene/index/SegmentWriteState;)Lorg/apache/lucene/codecs/FieldsConsumer;");
            mids$[mid_fieldsProducer_c86c62bc] = env->getMethodID(cls, "fieldsProducer", "(Lorg/apache/lucene/index/SegmentReadState;)Lorg/apache/lucene/codecs/FieldsProducer;");
            mids$[mid_forName_19d2f1c6] = env->getStaticMethodID(cls, "forName", "(Ljava/lang/String;)Lorg/apache/lucene/codecs/PostingsFormat;");
            mids$[mid_getName_14c7b5c5] = env->getMethodID(cls, "getName", "()Ljava/lang/String;");
            mids$[mid_reloadPostingsFormats_9110048d] = env->getStaticMethodID(cls, "reloadPostingsFormats", "(Ljava/lang/ClassLoader;)V");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            EMPTY = new JArray< PostingsFormat >(env->getStaticObjectField(cls, "EMPTY", "[Lorg/apache/lucene/codecs/PostingsFormat;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::java::util::Set PostingsFormat::availablePostingsFormats()
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::util::Set(env->callStaticObjectMethod(cls, mids$[mid_availablePostingsFormats_03e99967]));
        }

        ::org::apache::lucene::codecs::FieldsConsumer PostingsFormat::fieldsConsumer(const ::org::apache::lucene::index::SegmentWriteState & a0) const
        {
          return ::org::apache::lucene::codecs::FieldsConsumer(env->callObjectMethod(this$, mids$[mid_fieldsConsumer_a15793c6], a0.this$));
        }

        ::org::apache::lucene::codecs::FieldsProducer PostingsFormat::fieldsProducer(const ::org::apache::lucene::index::SegmentReadState & a0) const
        {
          return ::org::apache::lucene::codecs::FieldsProducer(env->callObjectMethod(this$, mids$[mid_fieldsProducer_c86c62bc], a0.this$));
        }

        PostingsFormat PostingsFormat::forName(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return PostingsFormat(env->callStaticObjectMethod(cls, mids$[mid_forName_19d2f1c6], a0.this$));
        }

        ::java::lang::String PostingsFormat::getName() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getName_14c7b5c5]));
        }

        void PostingsFormat::reloadPostingsFormats(const ::java::lang::ClassLoader & a0)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_reloadPostingsFormats_9110048d], a0.this$);
        }

        ::java::lang::String PostingsFormat::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        static PyObject *t_PostingsFormat_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PostingsFormat_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PostingsFormat_availablePostingsFormats(PyTypeObject *type);
        static PyObject *t_PostingsFormat_fieldsConsumer(t_PostingsFormat *self, PyObject *arg);
        static PyObject *t_PostingsFormat_fieldsProducer(t_PostingsFormat *self, PyObject *arg);
        static PyObject *t_PostingsFormat_forName(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PostingsFormat_getName(t_PostingsFormat *self);
        static PyObject *t_PostingsFormat_reloadPostingsFormats(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PostingsFormat_toString(t_PostingsFormat *self, PyObject *args);
        static PyObject *t_PostingsFormat_get__name(t_PostingsFormat *self, void *data);
        static PyGetSetDef t_PostingsFormat__fields_[] = {
          DECLARE_GET_FIELD(t_PostingsFormat, name),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PostingsFormat__methods_[] = {
          DECLARE_METHOD(t_PostingsFormat, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PostingsFormat, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PostingsFormat, availablePostingsFormats, METH_NOARGS | METH_CLASS),
          DECLARE_METHOD(t_PostingsFormat, fieldsConsumer, METH_O),
          DECLARE_METHOD(t_PostingsFormat, fieldsProducer, METH_O),
          DECLARE_METHOD(t_PostingsFormat, forName, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PostingsFormat, getName, METH_NOARGS),
          DECLARE_METHOD(t_PostingsFormat, reloadPostingsFormats, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PostingsFormat, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PostingsFormat, t_PostingsFormat, ::java::lang::Object, PostingsFormat, abstract_init, 0, 0, t_PostingsFormat__fields_, 0, 0);

        void t_PostingsFormat::install(PyObject *module)
        {
          installType(&PY_TYPE(PostingsFormat), module, "PostingsFormat", 0);
        }

        void t_PostingsFormat::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PostingsFormat).tp_dict, "class_", make_descriptor(PostingsFormat::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PostingsFormat).tp_dict, "wrapfn_", make_descriptor(t_PostingsFormat::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PostingsFormat).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(PostingsFormat::initializeClass);
          PyDict_SetItemString(PY_TYPE(PostingsFormat).tp_dict, "EMPTY", make_descriptor(JArray<jobject>(PostingsFormat::EMPTY->this$).wrap(t_PostingsFormat::wrap_jobject)));
        }

        static PyObject *t_PostingsFormat_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PostingsFormat::initializeClass, 1)))
            return NULL;
          return t_PostingsFormat::wrap_Object(PostingsFormat(((t_PostingsFormat *) arg)->object.this$));
        }
        static PyObject *t_PostingsFormat_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PostingsFormat::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_PostingsFormat_availablePostingsFormats(PyTypeObject *type)
        {
          ::java::util::Set result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::codecs::PostingsFormat::availablePostingsFormats());
          return ::java::util::t_Set::wrap_Object(result, &::java::lang::PY_TYPE(String));
        }

        static PyObject *t_PostingsFormat_fieldsConsumer(t_PostingsFormat *self, PyObject *arg)
        {
          ::org::apache::lucene::index::SegmentWriteState a0((jobject) NULL);
          ::org::apache::lucene::codecs::FieldsConsumer result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::SegmentWriteState::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.fieldsConsumer(a0));
            return ::org::apache::lucene::codecs::t_FieldsConsumer::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "fieldsConsumer", arg);
          return NULL;
        }

        static PyObject *t_PostingsFormat_fieldsProducer(t_PostingsFormat *self, PyObject *arg)
        {
          ::org::apache::lucene::index::SegmentReadState a0((jobject) NULL);
          ::org::apache::lucene::codecs::FieldsProducer result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::SegmentReadState::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.fieldsProducer(a0));
            return ::org::apache::lucene::codecs::t_FieldsProducer::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "fieldsProducer", arg);
          return NULL;
        }

        static PyObject *t_PostingsFormat_forName(PyTypeObject *type, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          PostingsFormat result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::codecs::PostingsFormat::forName(a0));
            return t_PostingsFormat::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "forName", arg);
          return NULL;
        }

        static PyObject *t_PostingsFormat_getName(t_PostingsFormat *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.getName());
          return j2p(result);
        }

        static PyObject *t_PostingsFormat_reloadPostingsFormats(PyTypeObject *type, PyObject *arg)
        {
          ::java::lang::ClassLoader a0((jobject) NULL);

          if (!parseArg(arg, "k", ::java::lang::ClassLoader::initializeClass, &a0))
          {
            OBJ_CALL(::org::apache::lucene::codecs::PostingsFormat::reloadPostingsFormats(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "reloadPostingsFormats", arg);
          return NULL;
        }

        static PyObject *t_PostingsFormat_toString(t_PostingsFormat *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(PostingsFormat), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_PostingsFormat_get__name(t_PostingsFormat *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object.getName());
          return j2p(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/packed/PackedInts$Writer.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {

          ::java::lang::Class *PackedInts$Writer::class$ = NULL;
          jmethodID *PackedInts$Writer::mids$ = NULL;
          bool PackedInts$Writer::live$ = false;

          jclass PackedInts$Writer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/packed/PackedInts$Writer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_add_0ee6df2f] = env->getMethodID(cls, "add", "(J)V");
              mids$[mid_bitsPerValue_54c6a179] = env->getMethodID(cls, "bitsPerValue", "()I");
              mids$[mid_finish_54c6a166] = env->getMethodID(cls, "finish", "()V");
              mids$[mid_ord_54c6a179] = env->getMethodID(cls, "ord", "()I");
              mids$[mid_getFormat_2580793f] = env->getMethodID(cls, "getFormat", "()Lorg/apache/lucene/util/packed/PackedInts$Format;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          void PackedInts$Writer::add(jlong a0) const
          {
            env->callVoidMethod(this$, mids$[mid_add_0ee6df2f], a0);
          }

          jint PackedInts$Writer::bitsPerValue() const
          {
            return env->callIntMethod(this$, mids$[mid_bitsPerValue_54c6a179]);
          }

          void PackedInts$Writer::finish() const
          {
            env->callVoidMethod(this$, mids$[mid_finish_54c6a166]);
          }

          jint PackedInts$Writer::ord() const
          {
            return env->callIntMethod(this$, mids$[mid_ord_54c6a179]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {
          static PyObject *t_PackedInts$Writer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PackedInts$Writer_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PackedInts$Writer_add(t_PackedInts$Writer *self, PyObject *arg);
          static PyObject *t_PackedInts$Writer_bitsPerValue(t_PackedInts$Writer *self);
          static PyObject *t_PackedInts$Writer_finish(t_PackedInts$Writer *self);
          static PyObject *t_PackedInts$Writer_ord(t_PackedInts$Writer *self);

          static PyMethodDef t_PackedInts$Writer__methods_[] = {
            DECLARE_METHOD(t_PackedInts$Writer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedInts$Writer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedInts$Writer, add, METH_O),
            DECLARE_METHOD(t_PackedInts$Writer, bitsPerValue, METH_NOARGS),
            DECLARE_METHOD(t_PackedInts$Writer, finish, METH_NOARGS),
            DECLARE_METHOD(t_PackedInts$Writer, ord, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PackedInts$Writer, t_PackedInts$Writer, ::java::lang::Object, PackedInts$Writer, abstract_init, 0, 0, 0, 0, 0);

          void t_PackedInts$Writer::install(PyObject *module)
          {
            installType(&PY_TYPE(PackedInts$Writer), module, "PackedInts$Writer", 0);
          }

          void t_PackedInts$Writer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PackedInts$Writer).tp_dict, "class_", make_descriptor(PackedInts$Writer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PackedInts$Writer).tp_dict, "wrapfn_", make_descriptor(t_PackedInts$Writer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PackedInts$Writer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PackedInts$Writer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PackedInts$Writer::initializeClass, 1)))
              return NULL;
            return t_PackedInts$Writer::wrap_Object(PackedInts$Writer(((t_PackedInts$Writer *) arg)->object.this$));
          }
          static PyObject *t_PackedInts$Writer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PackedInts$Writer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_PackedInts$Writer_add(t_PackedInts$Writer *self, PyObject *arg)
          {
            jlong a0;

            if (!parseArg(arg, "J", &a0))
            {
              OBJ_CALL(self->object.add(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "add", arg);
            return NULL;
          }

          static PyObject *t_PackedInts$Writer_bitsPerValue(t_PackedInts$Writer *self)
          {
            jint result;
            OBJ_CALL(result = self->object.bitsPerValue());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_PackedInts$Writer_finish(t_PackedInts$Writer *self)
          {
            OBJ_CALL(self->object.finish());
            Py_RETURN_NONE;
          }

          static PyObject *t_PackedInts$Writer_ord(t_PackedInts$Writer *self)
          {
            jint result;
            OBJ_CALL(result = self->object.ord());
            return PyInt_FromLong((long) result);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/DoubleBarrelLRUCache.h"
#include "org/apache/lucene/util/DoubleBarrelLRUCache$CloneableKey.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *DoubleBarrelLRUCache::class$ = NULL;
        jmethodID *DoubleBarrelLRUCache::mids$ = NULL;
        bool DoubleBarrelLRUCache::live$ = false;

        jclass DoubleBarrelLRUCache::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/DoubleBarrelLRUCache");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
            mids$[mid_get_08c4f70e] = env->getMethodID(cls, "get", "(Lorg/apache/lucene/util/DoubleBarrelLRUCache$CloneableKey;)Ljava/lang/Object;");
            mids$[mid_put_49de5bfd] = env->getMethodID(cls, "put", "(Lorg/apache/lucene/util/DoubleBarrelLRUCache$CloneableKey;Ljava/lang/Object;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        DoubleBarrelLRUCache::DoubleBarrelLRUCache(jint a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

        ::java::lang::Object DoubleBarrelLRUCache::get(const ::org::apache::lucene::util::DoubleBarrelLRUCache$CloneableKey & a0) const
        {
          return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_get_08c4f70e], a0.this$));
        }

        void DoubleBarrelLRUCache::put(const ::org::apache::lucene::util::DoubleBarrelLRUCache$CloneableKey & a0, const ::java::lang::Object & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_put_49de5bfd], a0.this$, a1.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_DoubleBarrelLRUCache_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DoubleBarrelLRUCache_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DoubleBarrelLRUCache_of_(t_DoubleBarrelLRUCache *self, PyObject *args);
        static int t_DoubleBarrelLRUCache_init_(t_DoubleBarrelLRUCache *self, PyObject *args, PyObject *kwds);
        static PyObject *t_DoubleBarrelLRUCache_get(t_DoubleBarrelLRUCache *self, PyObject *arg);
        static PyObject *t_DoubleBarrelLRUCache_put(t_DoubleBarrelLRUCache *self, PyObject *args);
        static PyObject *t_DoubleBarrelLRUCache_get__parameters_(t_DoubleBarrelLRUCache *self, void *data);
        static PyGetSetDef t_DoubleBarrelLRUCache__fields_[] = {
          DECLARE_GET_FIELD(t_DoubleBarrelLRUCache, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_DoubleBarrelLRUCache__methods_[] = {
          DECLARE_METHOD(t_DoubleBarrelLRUCache, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DoubleBarrelLRUCache, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DoubleBarrelLRUCache, of_, METH_VARARGS),
          DECLARE_METHOD(t_DoubleBarrelLRUCache, get, METH_O),
          DECLARE_METHOD(t_DoubleBarrelLRUCache, put, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(DoubleBarrelLRUCache, t_DoubleBarrelLRUCache, ::java::lang::Object, DoubleBarrelLRUCache, t_DoubleBarrelLRUCache_init_, 0, 0, t_DoubleBarrelLRUCache__fields_, 0, 0);
        PyObject *t_DoubleBarrelLRUCache::wrap_Object(const DoubleBarrelLRUCache& object, PyTypeObject *p0, PyTypeObject *p1)
        {
          PyObject *obj = t_DoubleBarrelLRUCache::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_DoubleBarrelLRUCache *self = (t_DoubleBarrelLRUCache *) obj;
            self->parameters[0] = p0;
            self->parameters[1] = p1;
          }
          return obj;
        }

        PyObject *t_DoubleBarrelLRUCache::wrap_jobject(const jobject& object, PyTypeObject *p0, PyTypeObject *p1)
        {
          PyObject *obj = t_DoubleBarrelLRUCache::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_DoubleBarrelLRUCache *self = (t_DoubleBarrelLRUCache *) obj;
            self->parameters[0] = p0;
            self->parameters[1] = p1;
          }
          return obj;
        }

        void t_DoubleBarrelLRUCache::install(PyObject *module)
        {
          installType(&PY_TYPE(DoubleBarrelLRUCache), module, "DoubleBarrelLRUCache", 0);
          PyDict_SetItemString(PY_TYPE(DoubleBarrelLRUCache).tp_dict, "CloneableKey", make_descriptor(&PY_TYPE(DoubleBarrelLRUCache$CloneableKey)));
        }

        void t_DoubleBarrelLRUCache::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(DoubleBarrelLRUCache).tp_dict, "class_", make_descriptor(DoubleBarrelLRUCache::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(DoubleBarrelLRUCache).tp_dict, "wrapfn_", make_descriptor(t_DoubleBarrelLRUCache::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(DoubleBarrelLRUCache).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_DoubleBarrelLRUCache_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, DoubleBarrelLRUCache::initializeClass, 1)))
            return NULL;
          return t_DoubleBarrelLRUCache::wrap_Object(DoubleBarrelLRUCache(((t_DoubleBarrelLRUCache *) arg)->object.this$));
        }
        static PyObject *t_DoubleBarrelLRUCache_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, DoubleBarrelLRUCache::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_DoubleBarrelLRUCache_of_(t_DoubleBarrelLRUCache *self, PyObject *args)
        {
          if (!parseArg(args, "T", 2, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_DoubleBarrelLRUCache_init_(t_DoubleBarrelLRUCache *self, PyObject *args, PyObject *kwds)
        {
          jint a0;
          DoubleBarrelLRUCache object((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            INT_CALL(object = DoubleBarrelLRUCache(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_DoubleBarrelLRUCache_get(t_DoubleBarrelLRUCache *self, PyObject *arg)
        {
          ::org::apache::lucene::util::DoubleBarrelLRUCache$CloneableKey a0((jobject) NULL);
          PyTypeObject **p0;
          ::java::lang::Object result((jobject) NULL);

          if (!parseArg(arg, "K", ::org::apache::lucene::util::DoubleBarrelLRUCache$CloneableKey::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_DoubleBarrelLRUCache$CloneableKey::parameters_))
          {
            OBJ_CALL(result = self->object.get(a0));
            return self->parameters[1] != NULL ? wrapType(self->parameters[1], result.this$) : ::java::lang::t_Object::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "get", arg);
          return NULL;
        }

        static PyObject *t_DoubleBarrelLRUCache_put(t_DoubleBarrelLRUCache *self, PyObject *args)
        {
          ::org::apache::lucene::util::DoubleBarrelLRUCache$CloneableKey a0((jobject) NULL);
          PyTypeObject **p0;
          ::java::lang::Object a1((jobject) NULL);

          if (!parseArgs(args, "KO", ::org::apache::lucene::util::DoubleBarrelLRUCache$CloneableKey::initializeClass, self->parameters[1], &a0, &p0, ::org::apache::lucene::util::t_DoubleBarrelLRUCache$CloneableKey::parameters_, &a1))
          {
            OBJ_CALL(self->object.put(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "put", args);
          return NULL;
        }
        static PyObject *t_DoubleBarrelLRUCache_get__parameters_(t_DoubleBarrelLRUCache *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/RollingBuffer.h"
#include "org/apache/lucene/util/RollingBuffer$Resettable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *RollingBuffer::class$ = NULL;
        jmethodID *RollingBuffer::mids$ = NULL;
        bool RollingBuffer::live$ = false;

        jclass RollingBuffer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/RollingBuffer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_freeBefore_39c7bd3c] = env->getMethodID(cls, "freeBefore", "(I)V");
            mids$[mid_get_730fb8ff] = env->getMethodID(cls, "get", "(I)Lorg/apache/lucene/util/RollingBuffer$Resettable;");
            mids$[mid_getMaxPos_54c6a179] = env->getMethodID(cls, "getMaxPos", "()I");
            mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");
            mids$[mid_newInstance_a57a1151] = env->getMethodID(cls, "newInstance", "()Lorg/apache/lucene/util/RollingBuffer$Resettable;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        RollingBuffer::RollingBuffer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void RollingBuffer::freeBefore(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_freeBefore_39c7bd3c], a0);
        }

        ::org::apache::lucene::util::RollingBuffer$Resettable RollingBuffer::get(jint a0) const
        {
          return ::org::apache::lucene::util::RollingBuffer$Resettable(env->callObjectMethod(this$, mids$[mid_get_730fb8ff], a0));
        }

        jint RollingBuffer::getMaxPos() const
        {
          return env->callIntMethod(this$, mids$[mid_getMaxPos_54c6a179]);
        }

        void RollingBuffer::reset() const
        {
          env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_RollingBuffer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_RollingBuffer_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_RollingBuffer_of_(t_RollingBuffer *self, PyObject *args);
        static int t_RollingBuffer_init_(t_RollingBuffer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_RollingBuffer_freeBefore(t_RollingBuffer *self, PyObject *arg);
        static PyObject *t_RollingBuffer_get(t_RollingBuffer *self, PyObject *arg);
        static PyObject *t_RollingBuffer_getMaxPos(t_RollingBuffer *self);
        static PyObject *t_RollingBuffer_reset(t_RollingBuffer *self);
        static PyObject *t_RollingBuffer_get__maxPos(t_RollingBuffer *self, void *data);
        static PyObject *t_RollingBuffer_get__parameters_(t_RollingBuffer *self, void *data);
        static PyGetSetDef t_RollingBuffer__fields_[] = {
          DECLARE_GET_FIELD(t_RollingBuffer, maxPos),
          DECLARE_GET_FIELD(t_RollingBuffer, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_RollingBuffer__methods_[] = {
          DECLARE_METHOD(t_RollingBuffer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RollingBuffer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RollingBuffer, of_, METH_VARARGS),
          DECLARE_METHOD(t_RollingBuffer, freeBefore, METH_O),
          DECLARE_METHOD(t_RollingBuffer, get, METH_O),
          DECLARE_METHOD(t_RollingBuffer, getMaxPos, METH_NOARGS),
          DECLARE_METHOD(t_RollingBuffer, reset, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(RollingBuffer, t_RollingBuffer, ::java::lang::Object, RollingBuffer, t_RollingBuffer_init_, 0, 0, t_RollingBuffer__fields_, 0, 0);
        PyObject *t_RollingBuffer::wrap_Object(const RollingBuffer& object, PyTypeObject *p0)
        {
          PyObject *obj = t_RollingBuffer::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_RollingBuffer *self = (t_RollingBuffer *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_RollingBuffer::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_RollingBuffer::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_RollingBuffer *self = (t_RollingBuffer *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_RollingBuffer::install(PyObject *module)
        {
          installType(&PY_TYPE(RollingBuffer), module, "RollingBuffer", 0);
          PyDict_SetItemString(PY_TYPE(RollingBuffer).tp_dict, "Resettable", make_descriptor(&PY_TYPE(RollingBuffer$Resettable)));
        }

        void t_RollingBuffer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(RollingBuffer).tp_dict, "class_", make_descriptor(RollingBuffer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(RollingBuffer).tp_dict, "wrapfn_", make_descriptor(t_RollingBuffer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(RollingBuffer).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_RollingBuffer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, RollingBuffer::initializeClass, 1)))
            return NULL;
          return t_RollingBuffer::wrap_Object(RollingBuffer(((t_RollingBuffer *) arg)->object.this$));
        }
        static PyObject *t_RollingBuffer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, RollingBuffer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_RollingBuffer_of_(t_RollingBuffer *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_RollingBuffer_init_(t_RollingBuffer *self, PyObject *args, PyObject *kwds)
        {
          RollingBuffer object((jobject) NULL);

          INT_CALL(object = RollingBuffer());
          self->object = object;

          return 0;
        }

        static PyObject *t_RollingBuffer_freeBefore(t_RollingBuffer *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.freeBefore(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "freeBefore", arg);
          return NULL;
        }

        static PyObject *t_RollingBuffer_get(t_RollingBuffer *self, PyObject *arg)
        {
          jint a0;
          ::org::apache::lucene::util::RollingBuffer$Resettable result((jobject) NULL);

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.get(a0));
            return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::org::apache::lucene::util::t_RollingBuffer$Resettable::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "get", arg);
          return NULL;
        }

        static PyObject *t_RollingBuffer_getMaxPos(t_RollingBuffer *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getMaxPos());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_RollingBuffer_reset(t_RollingBuffer *self)
        {
          OBJ_CALL(self->object.reset());
          Py_RETURN_NONE;
        }
        static PyObject *t_RollingBuffer_get__parameters_(t_RollingBuffer *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static PyObject *t_RollingBuffer_get__maxPos(t_RollingBuffer *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getMaxPos());
          return PyInt_FromLong((long) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/PathQueryNode.h"
#include "java/lang/Class.h"
#include "java/lang/CharSequence.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/PathQueryNode$QueryText.h"
#include "java/util/List.h"
#include "org/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax.h"
#include "java/lang/CloneNotSupportedException.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {

              ::java::lang::Class *PathQueryNode::class$ = NULL;
              jmethodID *PathQueryNode::mids$ = NULL;
              bool PathQueryNode::live$ = false;

              jclass PathQueryNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/nodes/PathQueryNode");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_1fde8fc3] = env->getMethodID(cls, "<init>", "(Ljava/util/List;)V");
                  mids$[mid_cloneTree_b387c5e6] = env->getMethodID(cls, "cloneTree", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_getFirstPathElement_e0adba2f] = env->getMethodID(cls, "getFirstPathElement", "()Ljava/lang/CharSequence;");
                  mids$[mid_getPathElement_989d102c] = env->getMethodID(cls, "getPathElement", "(I)Lorg/apache/lucene/queryparser/flexible/core/nodes/PathQueryNode$QueryText;");
                  mids$[mid_getPathElements_87851566] = env->getMethodID(cls, "getPathElements", "()Ljava/util/List;");
                  mids$[mid_getPathElements_cdc2a528] = env->getMethodID(cls, "getPathElements", "(I)Ljava/util/List;");
                  mids$[mid_setPathElements_1fde8fc3] = env->getMethodID(cls, "setPathElements", "(Ljava/util/List;)V");
                  mids$[mid_toQueryString_99b8dfe1] = env->getMethodID(cls, "toQueryString", "(Lorg/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax;)Ljava/lang/CharSequence;");
                  mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              PathQueryNode::PathQueryNode(const ::java::util::List & a0) : ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNodeImpl(env->newObject(initializeClass, &mids$, mid_init$_1fde8fc3, a0.this$)) {}

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode PathQueryNode::cloneTree() const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_cloneTree_b387c5e6]));
              }

              ::java::lang::CharSequence PathQueryNode::getFirstPathElement() const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_getFirstPathElement_e0adba2f]));
              }

              ::org::apache::lucene::queryparser::flexible::core::nodes::PathQueryNode$QueryText PathQueryNode::getPathElement(jint a0) const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::PathQueryNode$QueryText(env->callObjectMethod(this$, mids$[mid_getPathElement_989d102c], a0));
              }

              ::java::util::List PathQueryNode::getPathElements() const
              {
                return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getPathElements_87851566]));
              }

              ::java::util::List PathQueryNode::getPathElements(jint a0) const
              {
                return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getPathElements_cdc2a528], a0));
              }

              void PathQueryNode::setPathElements(const ::java::util::List & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setPathElements_1fde8fc3], a0.this$);
              }

              ::java::lang::CharSequence PathQueryNode::toQueryString(const ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax & a0) const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_toQueryString_99b8dfe1], a0.this$));
              }

              ::java::lang::String PathQueryNode::toString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {
              static PyObject *t_PathQueryNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_PathQueryNode_instance_(PyTypeObject *type, PyObject *arg);
              static int t_PathQueryNode_init_(t_PathQueryNode *self, PyObject *args, PyObject *kwds);
              static PyObject *t_PathQueryNode_cloneTree(t_PathQueryNode *self, PyObject *args);
              static PyObject *t_PathQueryNode_getFirstPathElement(t_PathQueryNode *self);
              static PyObject *t_PathQueryNode_getPathElement(t_PathQueryNode *self, PyObject *arg);
              static PyObject *t_PathQueryNode_getPathElements(t_PathQueryNode *self, PyObject *args);
              static PyObject *t_PathQueryNode_setPathElements(t_PathQueryNode *self, PyObject *arg);
              static PyObject *t_PathQueryNode_toQueryString(t_PathQueryNode *self, PyObject *args);
              static PyObject *t_PathQueryNode_toString(t_PathQueryNode *self, PyObject *args);
              static PyObject *t_PathQueryNode_get__firstPathElement(t_PathQueryNode *self, void *data);
              static PyObject *t_PathQueryNode_get__pathElements(t_PathQueryNode *self, void *data);
              static int t_PathQueryNode_set__pathElements(t_PathQueryNode *self, PyObject *arg, void *data);
              static PyGetSetDef t_PathQueryNode__fields_[] = {
                DECLARE_GET_FIELD(t_PathQueryNode, firstPathElement),
                DECLARE_GETSET_FIELD(t_PathQueryNode, pathElements),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_PathQueryNode__methods_[] = {
                DECLARE_METHOD(t_PathQueryNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_PathQueryNode, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_PathQueryNode, cloneTree, METH_VARARGS),
                DECLARE_METHOD(t_PathQueryNode, getFirstPathElement, METH_NOARGS),
                DECLARE_METHOD(t_PathQueryNode, getPathElement, METH_O),
                DECLARE_METHOD(t_PathQueryNode, getPathElements, METH_VARARGS),
                DECLARE_METHOD(t_PathQueryNode, setPathElements, METH_O),
                DECLARE_METHOD(t_PathQueryNode, toQueryString, METH_VARARGS),
                DECLARE_METHOD(t_PathQueryNode, toString, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(PathQueryNode, t_PathQueryNode, ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNodeImpl, PathQueryNode, t_PathQueryNode_init_, 0, 0, t_PathQueryNode__fields_, 0, 0);

              void t_PathQueryNode::install(PyObject *module)
              {
                installType(&PY_TYPE(PathQueryNode), module, "PathQueryNode", 0);
                PyDict_SetItemString(PY_TYPE(PathQueryNode).tp_dict, "QueryText", make_descriptor(&PY_TYPE(PathQueryNode$QueryText)));
              }

              void t_PathQueryNode::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(PathQueryNode).tp_dict, "class_", make_descriptor(PathQueryNode::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(PathQueryNode).tp_dict, "wrapfn_", make_descriptor(t_PathQueryNode::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(PathQueryNode).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_PathQueryNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, PathQueryNode::initializeClass, 1)))
                  return NULL;
                return t_PathQueryNode::wrap_Object(PathQueryNode(((t_PathQueryNode *) arg)->object.this$));
              }
              static PyObject *t_PathQueryNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, PathQueryNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_PathQueryNode_init_(t_PathQueryNode *self, PyObject *args, PyObject *kwds)
              {
                ::java::util::List a0((jobject) NULL);
                PyTypeObject **p0;
                PathQueryNode object((jobject) NULL);

                if (!parseArgs(args, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
                {
                  INT_CALL(object = PathQueryNode(a0));
                  self->object = object;
                }
                else
                {
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_PathQueryNode_cloneTree(t_PathQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.cloneTree());
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(PathQueryNode), (PyObject *) self, "cloneTree", args, 2);
              }

              static PyObject *t_PathQueryNode_getFirstPathElement(t_PathQueryNode *self)
              {
                ::java::lang::CharSequence result((jobject) NULL);
                OBJ_CALL(result = self->object.getFirstPathElement());
                return ::java::lang::t_CharSequence::wrap_Object(result);
              }

              static PyObject *t_PathQueryNode_getPathElement(t_PathQueryNode *self, PyObject *arg)
              {
                jint a0;
                ::org::apache::lucene::queryparser::flexible::core::nodes::PathQueryNode$QueryText result((jobject) NULL);

                if (!parseArg(arg, "I", &a0))
                {
                  OBJ_CALL(result = self->object.getPathElement(a0));
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_PathQueryNode$QueryText::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "getPathElement", arg);
                return NULL;
              }

              static PyObject *t_PathQueryNode_getPathElements(t_PathQueryNode *self, PyObject *args)
              {
                switch (PyTuple_GET_SIZE(args)) {
                 case 0:
                  {
                    ::java::util::List result((jobject) NULL);
                    OBJ_CALL(result = self->object.getPathElements());
                    return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::queryparser::flexible::core::nodes::PY_TYPE(PathQueryNode$QueryText));
                  }
                  break;
                 case 1:
                  {
                    jint a0;
                    ::java::util::List result((jobject) NULL);

                    if (!parseArgs(args, "I", &a0))
                    {
                      OBJ_CALL(result = self->object.getPathElements(a0));
                      return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::queryparser::flexible::core::nodes::PY_TYPE(PathQueryNode$QueryText));
                    }
                  }
                }

                PyErr_SetArgsError((PyObject *) self, "getPathElements", args);
                return NULL;
              }

              static PyObject *t_PathQueryNode_setPathElements(t_PathQueryNode *self, PyObject *arg)
              {
                ::java::util::List a0((jobject) NULL);
                PyTypeObject **p0;

                if (!parseArg(arg, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
                {
                  OBJ_CALL(self->object.setPathElements(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setPathElements", arg);
                return NULL;
              }

              static PyObject *t_PathQueryNode_toQueryString(t_PathQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax a0((jobject) NULL);
                ::java::lang::CharSequence result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.toQueryString(a0));
                  return ::java::lang::t_CharSequence::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(PathQueryNode), (PyObject *) self, "toQueryString", args, 2);
              }

              static PyObject *t_PathQueryNode_toString(t_PathQueryNode *self, PyObject *args)
              {
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.toString());
                  return j2p(result);
                }

                return callSuper(&PY_TYPE(PathQueryNode), (PyObject *) self, "toString", args, 2);
              }

              static PyObject *t_PathQueryNode_get__firstPathElement(t_PathQueryNode *self, void *data)
              {
                ::java::lang::CharSequence value((jobject) NULL);
                OBJ_CALL(value = self->object.getFirstPathElement());
                return ::java::lang::t_CharSequence::wrap_Object(value);
              }

              static PyObject *t_PathQueryNode_get__pathElements(t_PathQueryNode *self, void *data)
              {
                ::java::util::List value((jobject) NULL);
                OBJ_CALL(value = self->object.getPathElements());
                return ::java::util::t_List::wrap_Object(value);
              }
              static int t_PathQueryNode_set__pathElements(t_PathQueryNode *self, PyObject *arg, void *data)
              {
                {
                  ::java::util::List value((jobject) NULL);
                  if (!parseArg(arg, "k", ::java::util::List::initializeClass, &value))
                  {
                    INT_CALL(self->object.setPathElements(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "pathElements", arg);
                return -1;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/xml/builders/FuzzyLikeThisQueryBuilder.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "org/apache/lucene/queryparser/xml/QueryBuilder.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {

            ::java::lang::Class *FuzzyLikeThisQueryBuilder::class$ = NULL;
            jmethodID *FuzzyLikeThisQueryBuilder::mids$ = NULL;
            bool FuzzyLikeThisQueryBuilder::live$ = false;

            jclass FuzzyLikeThisQueryBuilder::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/xml/builders/FuzzyLikeThisQueryBuilder");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_31619410] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Analyzer;)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            FuzzyLikeThisQueryBuilder::FuzzyLikeThisQueryBuilder(const ::org::apache::lucene::analysis::Analyzer & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_31619410, a0.this$)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {
            static PyObject *t_FuzzyLikeThisQueryBuilder_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_FuzzyLikeThisQueryBuilder_instance_(PyTypeObject *type, PyObject *arg);
            static int t_FuzzyLikeThisQueryBuilder_init_(t_FuzzyLikeThisQueryBuilder *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_FuzzyLikeThisQueryBuilder__methods_[] = {
              DECLARE_METHOD(t_FuzzyLikeThisQueryBuilder, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FuzzyLikeThisQueryBuilder, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(FuzzyLikeThisQueryBuilder, t_FuzzyLikeThisQueryBuilder, ::java::lang::Object, FuzzyLikeThisQueryBuilder, t_FuzzyLikeThisQueryBuilder_init_, 0, 0, 0, 0, 0);

            void t_FuzzyLikeThisQueryBuilder::install(PyObject *module)
            {
              installType(&PY_TYPE(FuzzyLikeThisQueryBuilder), module, "FuzzyLikeThisQueryBuilder", 0);
            }

            void t_FuzzyLikeThisQueryBuilder::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(FuzzyLikeThisQueryBuilder).tp_dict, "class_", make_descriptor(FuzzyLikeThisQueryBuilder::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(FuzzyLikeThisQueryBuilder).tp_dict, "wrapfn_", make_descriptor(t_FuzzyLikeThisQueryBuilder::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(FuzzyLikeThisQueryBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_FuzzyLikeThisQueryBuilder_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, FuzzyLikeThisQueryBuilder::initializeClass, 1)))
                return NULL;
              return t_FuzzyLikeThisQueryBuilder::wrap_Object(FuzzyLikeThisQueryBuilder(((t_FuzzyLikeThisQueryBuilder *) arg)->object.this$));
            }
            static PyObject *t_FuzzyLikeThisQueryBuilder_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, FuzzyLikeThisQueryBuilder::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_FuzzyLikeThisQueryBuilder_init_(t_FuzzyLikeThisQueryBuilder *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
              FuzzyLikeThisQueryBuilder object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0))
              {
                INT_CALL(object = FuzzyLikeThisQueryBuilder(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spans/SpanNearQuery.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/index/TermContext.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "java/util/Set.h"
#include "org/apache/lucene/util/Bits.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/index/Term.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/search/Query.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/spans/Spans.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {

          ::java::lang::Class *SpanNearQuery::class$ = NULL;
          jmethodID *SpanNearQuery::mids$ = NULL;
          bool SpanNearQuery::live$ = false;

          jclass SpanNearQuery::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spans/SpanNearQuery");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4e7e9f44] = env->getMethodID(cls, "<init>", "([Lorg/apache/lucene/search/spans/SpanQuery;IZ)V");
              mids$[mid_init$_ff909895] = env->getMethodID(cls, "<init>", "([Lorg/apache/lucene/search/spans/SpanQuery;IZZ)V");
              mids$[mid_clone_7013cfcc] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/search/spans/SpanNearQuery;");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_extractTerms_fb4f2b26] = env->getMethodID(cls, "extractTerms", "(Ljava/util/Set;)V");
              mids$[mid_getClauses_19569402] = env->getMethodID(cls, "getClauses", "()[Lorg/apache/lucene/search/spans/SpanQuery;");
              mids$[mid_getField_14c7b5c5] = env->getMethodID(cls, "getField", "()Ljava/lang/String;");
              mids$[mid_getSlop_54c6a179] = env->getMethodID(cls, "getSlop", "()I");
              mids$[mid_getSpans_f003cb44] = env->getMethodID(cls, "getSpans", "(Lorg/apache/lucene/index/AtomicReaderContext;Lorg/apache/lucene/util/Bits;Ljava/util/Map;)Lorg/apache/lucene/search/spans/Spans;");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_isInOrder_54c6a16a] = env->getMethodID(cls, "isInOrder", "()Z");
              mids$[mid_rewrite_7edcaa43] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/index/IndexReader;)Lorg/apache/lucene/search/Query;");
              mids$[mid_toString_97a5258f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SpanNearQuery::SpanNearQuery(const JArray< ::org::apache::lucene::search::spans::SpanQuery > & a0, jint a1, jboolean a2) : ::org::apache::lucene::search::spans::SpanQuery(env->newObject(initializeClass, &mids$, mid_init$_4e7e9f44, a0.this$, a1, a2)) {}

          SpanNearQuery::SpanNearQuery(const JArray< ::org::apache::lucene::search::spans::SpanQuery > & a0, jint a1, jboolean a2, jboolean a3) : ::org::apache::lucene::search::spans::SpanQuery(env->newObject(initializeClass, &mids$, mid_init$_ff909895, a0.this$, a1, a2, a3)) {}

          SpanNearQuery SpanNearQuery::clone() const
          {
            return SpanNearQuery(env->callObjectMethod(this$, mids$[mid_clone_7013cfcc]));
          }

          jboolean SpanNearQuery::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          void SpanNearQuery::extractTerms(const ::java::util::Set & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_extractTerms_fb4f2b26], a0.this$);
          }

          JArray< ::org::apache::lucene::search::spans::SpanQuery > SpanNearQuery::getClauses() const
          {
            return JArray< ::org::apache::lucene::search::spans::SpanQuery >(env->callObjectMethod(this$, mids$[mid_getClauses_19569402]));
          }

          ::java::lang::String SpanNearQuery::getField() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getField_14c7b5c5]));
          }

          jint SpanNearQuery::getSlop() const
          {
            return env->callIntMethod(this$, mids$[mid_getSlop_54c6a179]);
          }

          ::org::apache::lucene::search::spans::Spans SpanNearQuery::getSpans(const ::org::apache::lucene::index::AtomicReaderContext & a0, const ::org::apache::lucene::util::Bits & a1, const ::java::util::Map & a2) const
          {
            return ::org::apache::lucene::search::spans::Spans(env->callObjectMethod(this$, mids$[mid_getSpans_f003cb44], a0.this$, a1.this$, a2.this$));
          }

          jint SpanNearQuery::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          jboolean SpanNearQuery::isInOrder() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isInOrder_54c6a16a]);
          }

          ::org::apache::lucene::search::Query SpanNearQuery::rewrite(const ::org::apache::lucene::index::IndexReader & a0) const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_rewrite_7edcaa43], a0.this$));
          }

          ::java::lang::String SpanNearQuery::toString(const ::java::lang::String & a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_97a5258f], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {
          static PyObject *t_SpanNearQuery_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SpanNearQuery_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SpanNearQuery_init_(t_SpanNearQuery *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SpanNearQuery_clone(t_SpanNearQuery *self, PyObject *args);
          static PyObject *t_SpanNearQuery_equals(t_SpanNearQuery *self, PyObject *args);
          static PyObject *t_SpanNearQuery_extractTerms(t_SpanNearQuery *self, PyObject *args);
          static PyObject *t_SpanNearQuery_getClauses(t_SpanNearQuery *self);
          static PyObject *t_SpanNearQuery_getField(t_SpanNearQuery *self, PyObject *args);
          static PyObject *t_SpanNearQuery_getSlop(t_SpanNearQuery *self);
          static PyObject *t_SpanNearQuery_getSpans(t_SpanNearQuery *self, PyObject *args);
          static PyObject *t_SpanNearQuery_hashCode(t_SpanNearQuery *self, PyObject *args);
          static PyObject *t_SpanNearQuery_isInOrder(t_SpanNearQuery *self);
          static PyObject *t_SpanNearQuery_rewrite(t_SpanNearQuery *self, PyObject *args);
          static PyObject *t_SpanNearQuery_toString(t_SpanNearQuery *self, PyObject *args);
          static PyObject *t_SpanNearQuery_get__clauses(t_SpanNearQuery *self, void *data);
          static PyObject *t_SpanNearQuery_get__field(t_SpanNearQuery *self, void *data);
          static PyObject *t_SpanNearQuery_get__inOrder(t_SpanNearQuery *self, void *data);
          static PyObject *t_SpanNearQuery_get__slop(t_SpanNearQuery *self, void *data);
          static PyGetSetDef t_SpanNearQuery__fields_[] = {
            DECLARE_GET_FIELD(t_SpanNearQuery, clauses),
            DECLARE_GET_FIELD(t_SpanNearQuery, field),
            DECLARE_GET_FIELD(t_SpanNearQuery, inOrder),
            DECLARE_GET_FIELD(t_SpanNearQuery, slop),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SpanNearQuery__methods_[] = {
            DECLARE_METHOD(t_SpanNearQuery, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanNearQuery, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanNearQuery, clone, METH_VARARGS),
            DECLARE_METHOD(t_SpanNearQuery, equals, METH_VARARGS),
            DECLARE_METHOD(t_SpanNearQuery, extractTerms, METH_VARARGS),
            DECLARE_METHOD(t_SpanNearQuery, getClauses, METH_NOARGS),
            DECLARE_METHOD(t_SpanNearQuery, getField, METH_VARARGS),
            DECLARE_METHOD(t_SpanNearQuery, getSlop, METH_NOARGS),
            DECLARE_METHOD(t_SpanNearQuery, getSpans, METH_VARARGS),
            DECLARE_METHOD(t_SpanNearQuery, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_SpanNearQuery, isInOrder, METH_NOARGS),
            DECLARE_METHOD(t_SpanNearQuery, rewrite, METH_VARARGS),
            DECLARE_METHOD(t_SpanNearQuery, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SpanNearQuery, t_SpanNearQuery, ::org::apache::lucene::search::spans::SpanQuery, SpanNearQuery, t_SpanNearQuery_init_, 0, 0, t_SpanNearQuery__fields_, 0, 0);

          void t_SpanNearQuery::install(PyObject *module)
          {
            installType(&PY_TYPE(SpanNearQuery), module, "SpanNearQuery", 0);
          }

          void t_SpanNearQuery::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SpanNearQuery).tp_dict, "class_", make_descriptor(SpanNearQuery::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SpanNearQuery).tp_dict, "wrapfn_", make_descriptor(t_SpanNearQuery::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SpanNearQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SpanNearQuery_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SpanNearQuery::initializeClass, 1)))
              return NULL;
            return t_SpanNearQuery::wrap_Object(SpanNearQuery(((t_SpanNearQuery *) arg)->object.this$));
          }
          static PyObject *t_SpanNearQuery_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SpanNearQuery::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SpanNearQuery_init_(t_SpanNearQuery *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 3:
              {
                JArray< ::org::apache::lucene::search::spans::SpanQuery > a0((jobject) NULL);
                jint a1;
                jboolean a2;
                SpanNearQuery object((jobject) NULL);

                if (!parseArgs(args, "[kIZ", ::org::apache::lucene::search::spans::SpanQuery::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = SpanNearQuery(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 4:
              {
                JArray< ::org::apache::lucene::search::spans::SpanQuery > a0((jobject) NULL);
                jint a1;
                jboolean a2;
                jboolean a3;
                SpanNearQuery object((jobject) NULL);

                if (!parseArgs(args, "[kIZZ", ::org::apache::lucene::search::spans::SpanQuery::initializeClass, &a0, &a1, &a2, &a3))
                {
                  INT_CALL(object = SpanNearQuery(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SpanNearQuery_clone(t_SpanNearQuery *self, PyObject *args)
          {
            SpanNearQuery result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.clone());
              return t_SpanNearQuery::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(SpanNearQuery), (PyObject *) self, "clone", args, 2);
          }

          static PyObject *t_SpanNearQuery_equals(t_SpanNearQuery *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(SpanNearQuery), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_SpanNearQuery_extractTerms(t_SpanNearQuery *self, PyObject *args)
          {
            ::java::util::Set a0((jobject) NULL);
            PyTypeObject **p0;

            if (!parseArgs(args, "K", ::java::util::Set::initializeClass, &a0, &p0, ::java::util::t_Set::parameters_))
            {
              OBJ_CALL(self->object.extractTerms(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(SpanNearQuery), (PyObject *) self, "extractTerms", args, 2);
          }

          static PyObject *t_SpanNearQuery_getClauses(t_SpanNearQuery *self)
          {
            JArray< ::org::apache::lucene::search::spans::SpanQuery > result((jobject) NULL);
            OBJ_CALL(result = self->object.getClauses());
            return JArray<jobject>(result.this$).wrap(::org::apache::lucene::search::spans::t_SpanQuery::wrap_jobject);
          }

          static PyObject *t_SpanNearQuery_getField(t_SpanNearQuery *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getField());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(SpanNearQuery), (PyObject *) self, "getField", args, 2);
          }

          static PyObject *t_SpanNearQuery_getSlop(t_SpanNearQuery *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getSlop());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_SpanNearQuery_getSpans(t_SpanNearQuery *self, PyObject *args)
          {
            ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
            ::org::apache::lucene::util::Bits a1((jobject) NULL);
            ::java::util::Map a2((jobject) NULL);
            PyTypeObject **p2;
            ::org::apache::lucene::search::spans::Spans result((jobject) NULL);

            if (!parseArgs(args, "kkK", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, ::java::util::Map::initializeClass, &a0, &a1, &a2, &p2, ::java::util::t_Map::parameters_))
            {
              OBJ_CALL(result = self->object.getSpans(a0, a1, a2));
              return ::org::apache::lucene::search::spans::t_Spans::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(SpanNearQuery), (PyObject *) self, "getSpans", args, 2);
          }

          static PyObject *t_SpanNearQuery_hashCode(t_SpanNearQuery *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(SpanNearQuery), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_SpanNearQuery_isInOrder(t_SpanNearQuery *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isInOrder());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_SpanNearQuery_rewrite(t_SpanNearQuery *self, PyObject *args)
          {
            ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.rewrite(a0));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(SpanNearQuery), (PyObject *) self, "rewrite", args, 2);
          }

          static PyObject *t_SpanNearQuery_toString(t_SpanNearQuery *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = self->object.toString(a0));
              return j2p(result);
            }

            return callSuper(&PY_TYPE(SpanNearQuery), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_SpanNearQuery_get__clauses(t_SpanNearQuery *self, void *data)
          {
            JArray< ::org::apache::lucene::search::spans::SpanQuery > value((jobject) NULL);
            OBJ_CALL(value = self->object.getClauses());
            return JArray<jobject>(value.this$).wrap(::org::apache::lucene::search::spans::t_SpanQuery::wrap_jobject);
          }

          static PyObject *t_SpanNearQuery_get__field(t_SpanNearQuery *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getField());
            return j2p(value);
          }

          static PyObject *t_SpanNearQuery_get__inOrder(t_SpanNearQuery *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isInOrder());
            Py_RETURN_BOOL(value);
          }

          static PyObject *t_SpanNearQuery_get__slop(t_SpanNearQuery *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getSlop());
            return PyInt_FromLong((long) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/TaxonomyWriter.h"
#include "org/apache/lucene/index/TwoPhaseCommit.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/facet/taxonomy/FacetLabel.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {

          ::java::lang::Class *TaxonomyWriter::class$ = NULL;
          jmethodID *TaxonomyWriter::mids$ = NULL;
          bool TaxonomyWriter::live$ = false;

          jclass TaxonomyWriter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/TaxonomyWriter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_addCategory_283f83f5] = env->getMethodID(cls, "addCategory", "(Lorg/apache/lucene/facet/taxonomy/FacetLabel;)I");
              mids$[mid_getCommitData_db60befd] = env->getMethodID(cls, "getCommitData", "()Ljava/util/Map;");
              mids$[mid_getParent_39c7bd23] = env->getMethodID(cls, "getParent", "(I)I");
              mids$[mid_getSize_54c6a179] = env->getMethodID(cls, "getSize", "()I");
              mids$[mid_setCommitData_4c9e2b1c] = env->getMethodID(cls, "setCommitData", "(Ljava/util/Map;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jint TaxonomyWriter::addCategory(const ::org::apache::lucene::facet::taxonomy::FacetLabel & a0) const
          {
            return env->callIntMethod(this$, mids$[mid_addCategory_283f83f5], a0.this$);
          }

          ::java::util::Map TaxonomyWriter::getCommitData() const
          {
            return ::java::util::Map(env->callObjectMethod(this$, mids$[mid_getCommitData_db60befd]));
          }

          jint TaxonomyWriter::getParent(jint a0) const
          {
            return env->callIntMethod(this$, mids$[mid_getParent_39c7bd23], a0);
          }

          jint TaxonomyWriter::getSize() const
          {
            return env->callIntMethod(this$, mids$[mid_getSize_54c6a179]);
          }

          void TaxonomyWriter::setCommitData(const ::java::util::Map & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setCommitData_4c9e2b1c], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          static PyObject *t_TaxonomyWriter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TaxonomyWriter_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TaxonomyWriter_addCategory(t_TaxonomyWriter *self, PyObject *arg);
          static PyObject *t_TaxonomyWriter_getCommitData(t_TaxonomyWriter *self);
          static PyObject *t_TaxonomyWriter_getParent(t_TaxonomyWriter *self, PyObject *arg);
          static PyObject *t_TaxonomyWriter_getSize(t_TaxonomyWriter *self);
          static PyObject *t_TaxonomyWriter_setCommitData(t_TaxonomyWriter *self, PyObject *arg);
          static PyObject *t_TaxonomyWriter_get__commitData(t_TaxonomyWriter *self, void *data);
          static int t_TaxonomyWriter_set__commitData(t_TaxonomyWriter *self, PyObject *arg, void *data);
          static PyObject *t_TaxonomyWriter_get__size(t_TaxonomyWriter *self, void *data);
          static PyGetSetDef t_TaxonomyWriter__fields_[] = {
            DECLARE_GETSET_FIELD(t_TaxonomyWriter, commitData),
            DECLARE_GET_FIELD(t_TaxonomyWriter, size),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_TaxonomyWriter__methods_[] = {
            DECLARE_METHOD(t_TaxonomyWriter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TaxonomyWriter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TaxonomyWriter, addCategory, METH_O),
            DECLARE_METHOD(t_TaxonomyWriter, getCommitData, METH_NOARGS),
            DECLARE_METHOD(t_TaxonomyWriter, getParent, METH_O),
            DECLARE_METHOD(t_TaxonomyWriter, getSize, METH_NOARGS),
            DECLARE_METHOD(t_TaxonomyWriter, setCommitData, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(TaxonomyWriter, t_TaxonomyWriter, ::java::io::Closeable, TaxonomyWriter, abstract_init, 0, 0, t_TaxonomyWriter__fields_, 0, 0);

          void t_TaxonomyWriter::install(PyObject *module)
          {
            installType(&PY_TYPE(TaxonomyWriter), module, "TaxonomyWriter", 0);
          }

          void t_TaxonomyWriter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(TaxonomyWriter).tp_dict, "class_", make_descriptor(TaxonomyWriter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(TaxonomyWriter).tp_dict, "wrapfn_", make_descriptor(t_TaxonomyWriter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(TaxonomyWriter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TaxonomyWriter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TaxonomyWriter::initializeClass, 1)))
              return NULL;
            return t_TaxonomyWriter::wrap_Object(TaxonomyWriter(((t_TaxonomyWriter *) arg)->object.this$));
          }
          static PyObject *t_TaxonomyWriter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TaxonomyWriter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_TaxonomyWriter_addCategory(t_TaxonomyWriter *self, PyObject *arg)
          {
            ::org::apache::lucene::facet::taxonomy::FacetLabel a0((jobject) NULL);
            jint result;

            if (!parseArg(arg, "k", ::org::apache::lucene::facet::taxonomy::FacetLabel::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.addCategory(a0));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "addCategory", arg);
            return NULL;
          }

          static PyObject *t_TaxonomyWriter_getCommitData(t_TaxonomyWriter *self)
          {
            ::java::util::Map result((jobject) NULL);
            OBJ_CALL(result = self->object.getCommitData());
            return ::java::util::t_Map::wrap_Object(result, &::java::lang::PY_TYPE(String), &::java::lang::PY_TYPE(String));
          }

          static PyObject *t_TaxonomyWriter_getParent(t_TaxonomyWriter *self, PyObject *arg)
          {
            jint a0;
            jint result;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.getParent(a0));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "getParent", arg);
            return NULL;
          }

          static PyObject *t_TaxonomyWriter_getSize(t_TaxonomyWriter *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getSize());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_TaxonomyWriter_setCommitData(t_TaxonomyWriter *self, PyObject *arg)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;

            if (!parseArg(arg, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              OBJ_CALL(self->object.setCommitData(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setCommitData", arg);
            return NULL;
          }

          static PyObject *t_TaxonomyWriter_get__commitData(t_TaxonomyWriter *self, void *data)
          {
            ::java::util::Map value((jobject) NULL);
            OBJ_CALL(value = self->object.getCommitData());
            return ::java::util::t_Map::wrap_Object(value);
          }
          static int t_TaxonomyWriter_set__commitData(t_TaxonomyWriter *self, PyObject *arg, void *data)
          {
            {
              ::java::util::Map value((jobject) NULL);
              if (!parseArg(arg, "k", ::java::util::Map::initializeClass, &value))
              {
                INT_CALL(self->object.setCommitData(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "commitData", arg);
            return -1;
          }

          static PyObject *t_TaxonomyWriter_get__size(t_TaxonomyWriter *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getSize());
            return PyInt_FromLong((long) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene46/Lucene46SegmentInfoWriter.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "org/apache/lucene/store/IOContext.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene46 {

          ::java::lang::Class *Lucene46SegmentInfoWriter::class$ = NULL;
          jmethodID *Lucene46SegmentInfoWriter::mids$ = NULL;
          bool Lucene46SegmentInfoWriter::live$ = false;

          jclass Lucene46SegmentInfoWriter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene46/Lucene46SegmentInfoWriter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_write_3589180f] = env->getMethodID(cls, "write", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/SegmentInfo;Lorg/apache/lucene/index/FieldInfos;Lorg/apache/lucene/store/IOContext;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene46SegmentInfoWriter::Lucene46SegmentInfoWriter() : ::org::apache::lucene::codecs::SegmentInfoWriter(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          void Lucene46SegmentInfoWriter::write(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::SegmentInfo & a1, const ::org::apache::lucene::index::FieldInfos & a2, const ::org::apache::lucene::store::IOContext & a3) const
          {
            env->callVoidMethod(this$, mids$[mid_write_3589180f], a0.this$, a1.this$, a2.this$, a3.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene46 {
          static PyObject *t_Lucene46SegmentInfoWriter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene46SegmentInfoWriter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene46SegmentInfoWriter_init_(t_Lucene46SegmentInfoWriter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene46SegmentInfoWriter_write(t_Lucene46SegmentInfoWriter *self, PyObject *args);

          static PyMethodDef t_Lucene46SegmentInfoWriter__methods_[] = {
            DECLARE_METHOD(t_Lucene46SegmentInfoWriter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene46SegmentInfoWriter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene46SegmentInfoWriter, write, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene46SegmentInfoWriter, t_Lucene46SegmentInfoWriter, ::org::apache::lucene::codecs::SegmentInfoWriter, Lucene46SegmentInfoWriter, t_Lucene46SegmentInfoWriter_init_, 0, 0, 0, 0, 0);

          void t_Lucene46SegmentInfoWriter::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene46SegmentInfoWriter), module, "Lucene46SegmentInfoWriter", 0);
          }

          void t_Lucene46SegmentInfoWriter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene46SegmentInfoWriter).tp_dict, "class_", make_descriptor(Lucene46SegmentInfoWriter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene46SegmentInfoWriter).tp_dict, "wrapfn_", make_descriptor(t_Lucene46SegmentInfoWriter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene46SegmentInfoWriter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lucene46SegmentInfoWriter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene46SegmentInfoWriter::initializeClass, 1)))
              return NULL;
            return t_Lucene46SegmentInfoWriter::wrap_Object(Lucene46SegmentInfoWriter(((t_Lucene46SegmentInfoWriter *) arg)->object.this$));
          }
          static PyObject *t_Lucene46SegmentInfoWriter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene46SegmentInfoWriter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene46SegmentInfoWriter_init_(t_Lucene46SegmentInfoWriter *self, PyObject *args, PyObject *kwds)
          {
            Lucene46SegmentInfoWriter object((jobject) NULL);

            INT_CALL(object = Lucene46SegmentInfoWriter());
            self->object = object;

            return 0;
          }

          static PyObject *t_Lucene46SegmentInfoWriter_write(t_Lucene46SegmentInfoWriter *self, PyObject *args)
          {
            ::org::apache::lucene::store::Directory a0((jobject) NULL);
            ::org::apache::lucene::index::SegmentInfo a1((jobject) NULL);
            ::org::apache::lucene::index::FieldInfos a2((jobject) NULL);
            ::org::apache::lucene::store::IOContext a3((jobject) NULL);

            if (!parseArgs(args, "kkkk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::SegmentInfo::initializeClass, ::org::apache::lucene::index::FieldInfos::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2, &a3))
            {
              OBJ_CALL(self->object.write(a0, a1, a2, a3));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene46SegmentInfoWriter), (PyObject *) self, "write", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/FloatFieldSource.h"
#include "org/apache/lucene/search/FieldCache$FloatParser.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *FloatFieldSource::class$ = NULL;
            jmethodID *FloatFieldSource::mids$ = NULL;
            bool FloatFieldSource::live$ = false;

            jclass FloatFieldSource::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/FloatFieldSource");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
                mids$[mid_init$_971bf26d] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/search/FieldCache$FloatParser;)V");
                mids$[mid_description_14c7b5c5] = env->getMethodID(cls, "description", "()Ljava/lang/String;");
                mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_getValues_4c566485] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/queries/function/FunctionValues;");
                mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            FloatFieldSource::FloatFieldSource(const ::java::lang::String & a0) : ::org::apache::lucene::queries::function::valuesource::FieldCacheSource(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

            FloatFieldSource::FloatFieldSource(const ::java::lang::String & a0, const ::org::apache::lucene::search::FieldCache$FloatParser & a1) : ::org::apache::lucene::queries::function::valuesource::FieldCacheSource(env->newObject(initializeClass, &mids$, mid_init$_971bf26d, a0.this$, a1.this$)) {}

            ::java::lang::String FloatFieldSource::description() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_description_14c7b5c5]));
            }

            jboolean FloatFieldSource::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
            }

            ::org::apache::lucene::queries::function::FunctionValues FloatFieldSource::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::FunctionValues(env->callObjectMethod(this$, mids$[mid_getValues_4c566485], a0.this$, a1.this$));
            }

            jint FloatFieldSource::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_FloatFieldSource_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_FloatFieldSource_instance_(PyTypeObject *type, PyObject *arg);
            static int t_FloatFieldSource_init_(t_FloatFieldSource *self, PyObject *args, PyObject *kwds);
            static PyObject *t_FloatFieldSource_description(t_FloatFieldSource *self, PyObject *args);
            static PyObject *t_FloatFieldSource_equals(t_FloatFieldSource *self, PyObject *args);
            static PyObject *t_FloatFieldSource_getValues(t_FloatFieldSource *self, PyObject *args);
            static PyObject *t_FloatFieldSource_hashCode(t_FloatFieldSource *self, PyObject *args);

            static PyMethodDef t_FloatFieldSource__methods_[] = {
              DECLARE_METHOD(t_FloatFieldSource, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FloatFieldSource, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FloatFieldSource, description, METH_VARARGS),
              DECLARE_METHOD(t_FloatFieldSource, equals, METH_VARARGS),
              DECLARE_METHOD(t_FloatFieldSource, getValues, METH_VARARGS),
              DECLARE_METHOD(t_FloatFieldSource, hashCode, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(FloatFieldSource, t_FloatFieldSource, ::org::apache::lucene::queries::function::valuesource::FieldCacheSource, FloatFieldSource, t_FloatFieldSource_init_, 0, 0, 0, 0, 0);

            void t_FloatFieldSource::install(PyObject *module)
            {
              installType(&PY_TYPE(FloatFieldSource), module, "FloatFieldSource", 0);
            }

            void t_FloatFieldSource::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(FloatFieldSource).tp_dict, "class_", make_descriptor(FloatFieldSource::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(FloatFieldSource).tp_dict, "wrapfn_", make_descriptor(t_FloatFieldSource::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(FloatFieldSource).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_FloatFieldSource_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, FloatFieldSource::initializeClass, 1)))
                return NULL;
              return t_FloatFieldSource::wrap_Object(FloatFieldSource(((t_FloatFieldSource *) arg)->object.this$));
            }
            static PyObject *t_FloatFieldSource_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, FloatFieldSource::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_FloatFieldSource_init_(t_FloatFieldSource *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 1:
                {
                  ::java::lang::String a0((jobject) NULL);
                  FloatFieldSource object((jobject) NULL);

                  if (!parseArgs(args, "s", &a0))
                  {
                    INT_CALL(object = FloatFieldSource(a0));
                    self->object = object;
                    break;
                  }
                }
                goto err;
               case 2:
                {
                  ::java::lang::String a0((jobject) NULL);
                  ::org::apache::lucene::search::FieldCache$FloatParser a1((jobject) NULL);
                  FloatFieldSource object((jobject) NULL);

                  if (!parseArgs(args, "sk", ::org::apache::lucene::search::FieldCache$FloatParser::initializeClass, &a0, &a1))
                  {
                    INT_CALL(object = FloatFieldSource(a0, a1));
                    self->object = object;
                    break;
                  }
                }
               default:
               err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_FloatFieldSource_description(t_FloatFieldSource *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.description());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(FloatFieldSource), (PyObject *) self, "description", args, 2);
            }

            static PyObject *t_FloatFieldSource_equals(t_FloatFieldSource *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(FloatFieldSource), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_FloatFieldSource_getValues(t_FloatFieldSource *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::FunctionValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::t_FunctionValues::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(FloatFieldSource), (PyObject *) self, "getValues", args, 2);
            }

            static PyObject *t_FloatFieldSource_hashCode(t_FloatFieldSource *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(FloatFieldSource), (PyObject *) self, "hashCode", args, 2);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FieldValueHitQueue$Entry.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FieldValueHitQueue$Entry::class$ = NULL;
        jmethodID *FieldValueHitQueue$Entry::mids$ = NULL;
        jfieldID *FieldValueHitQueue$Entry::fids$ = NULL;
        bool FieldValueHitQueue$Entry::live$ = false;

        jclass FieldValueHitQueue$Entry::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FieldValueHitQueue$Entry");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_a74e6883] = env->getMethodID(cls, "<init>", "(IIF)V");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            fids$ = new jfieldID[max_fid];
            fids$[fid_slot] = env->getFieldID(cls, "slot", "I");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FieldValueHitQueue$Entry::FieldValueHitQueue$Entry(jint a0, jint a1, jfloat a2) : ::org::apache::lucene::search::ScoreDoc(env->newObject(initializeClass, &mids$, mid_init$_a74e6883, a0, a1, a2)) {}

        ::java::lang::String FieldValueHitQueue$Entry::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }

        jint FieldValueHitQueue$Entry::_get_slot() const
        {
          return env->getIntField(this$, fids$[fid_slot]);
        }

        void FieldValueHitQueue$Entry::_set_slot(jint a0) const
        {
          env->setIntField(this$, fids$[fid_slot], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FieldValueHitQueue$Entry_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldValueHitQueue$Entry_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldValueHitQueue$Entry_of_(t_FieldValueHitQueue$Entry *self, PyObject *args);
        static int t_FieldValueHitQueue$Entry_init_(t_FieldValueHitQueue$Entry *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FieldValueHitQueue$Entry_toString(t_FieldValueHitQueue$Entry *self, PyObject *args);
        static PyObject *t_FieldValueHitQueue$Entry_get__slot(t_FieldValueHitQueue$Entry *self, void *data);
        static int t_FieldValueHitQueue$Entry_set__slot(t_FieldValueHitQueue$Entry *self, PyObject *arg, void *data);

        static PyObject *t_FieldValueHitQueue$Entry_get__parameters_(t_FieldValueHitQueue$Entry *self, void *data);
        static PyGetSetDef t_FieldValueHitQueue$Entry__fields_[] = {
          DECLARE_GETSET_FIELD(t_FieldValueHitQueue$Entry, slot),
          DECLARE_GET_FIELD(t_FieldValueHitQueue$Entry, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FieldValueHitQueue$Entry__methods_[] = {
          DECLARE_METHOD(t_FieldValueHitQueue$Entry, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldValueHitQueue$Entry, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldValueHitQueue$Entry, of_, METH_VARARGS),
          DECLARE_METHOD(t_FieldValueHitQueue$Entry, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldValueHitQueue$Entry, t_FieldValueHitQueue$Entry, ::org::apache::lucene::search::ScoreDoc, FieldValueHitQueue$Entry, t_FieldValueHitQueue$Entry_init_, 0, 0, t_FieldValueHitQueue$Entry__fields_, 0, 0);
        PyObject *t_FieldValueHitQueue$Entry::wrap_Object(const FieldValueHitQueue$Entry& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FieldValueHitQueue$Entry::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FieldValueHitQueue$Entry *self = (t_FieldValueHitQueue$Entry *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_FieldValueHitQueue$Entry::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FieldValueHitQueue$Entry::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FieldValueHitQueue$Entry *self = (t_FieldValueHitQueue$Entry *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_FieldValueHitQueue$Entry::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldValueHitQueue$Entry), module, "FieldValueHitQueue$Entry", 0);
        }

        void t_FieldValueHitQueue$Entry::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldValueHitQueue$Entry).tp_dict, "class_", make_descriptor(FieldValueHitQueue$Entry::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldValueHitQueue$Entry).tp_dict, "wrapfn_", make_descriptor(t_FieldValueHitQueue$Entry::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldValueHitQueue$Entry).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldValueHitQueue$Entry_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldValueHitQueue$Entry::initializeClass, 1)))
            return NULL;
          return t_FieldValueHitQueue$Entry::wrap_Object(FieldValueHitQueue$Entry(((t_FieldValueHitQueue$Entry *) arg)->object.this$));
        }
        static PyObject *t_FieldValueHitQueue$Entry_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldValueHitQueue$Entry::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FieldValueHitQueue$Entry_of_(t_FieldValueHitQueue$Entry *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_FieldValueHitQueue$Entry_init_(t_FieldValueHitQueue$Entry *self, PyObject *args, PyObject *kwds)
        {
          jint a0;
          jint a1;
          jfloat a2;
          FieldValueHitQueue$Entry object((jobject) NULL);

          if (!parseArgs(args, "IIF", &a0, &a1, &a2))
          {
            INT_CALL(object = FieldValueHitQueue$Entry(a0, a1, a2));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FieldValueHitQueue$Entry_toString(t_FieldValueHitQueue$Entry *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(FieldValueHitQueue$Entry), (PyObject *) self, "toString", args, 2);
        }
        static PyObject *t_FieldValueHitQueue$Entry_get__parameters_(t_FieldValueHitQueue$Entry *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static PyObject *t_FieldValueHitQueue$Entry_get__slot(t_FieldValueHitQueue$Entry *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_slot());
          return PyInt_FromLong((long) value);
        }
        static int t_FieldValueHitQueue$Entry_set__slot(t_FieldValueHitQueue$Entry *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_slot(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "slot", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/vectorhighlight/FieldPhraseList.h"
#include "org/apache/lucene/search/vectorhighlight/FieldTermStack.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/vectorhighlight/FieldPhraseList$WeightedPhraseInfo.h"
#include "java/util/List.h"
#include "org/apache/lucene/search/vectorhighlight/FieldQuery.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {

          ::java::lang::Class *FieldPhraseList::class$ = NULL;
          jmethodID *FieldPhraseList::mids$ = NULL;
          bool FieldPhraseList::live$ = false;

          jclass FieldPhraseList::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/vectorhighlight/FieldPhraseList");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_e0573fb6] = env->getMethodID(cls, "<init>", "([Lorg/apache/lucene/search/vectorhighlight/FieldPhraseList;)V");
              mids$[mid_init$_ed2eefc8] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/vectorhighlight/FieldTermStack;Lorg/apache/lucene/search/vectorhighlight/FieldQuery;)V");
              mids$[mid_init$_5d494a16] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/vectorhighlight/FieldTermStack;Lorg/apache/lucene/search/vectorhighlight/FieldQuery;I)V");
              mids$[mid_addIfNoOverlap_3f58e089] = env->getMethodID(cls, "addIfNoOverlap", "(Lorg/apache/lucene/search/vectorhighlight/FieldPhraseList$WeightedPhraseInfo;)V");
              mids$[mid_getPhraseList_87851566] = env->getMethodID(cls, "getPhraseList", "()Ljava/util/List;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FieldPhraseList::FieldPhraseList(const JArray< FieldPhraseList > & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_e0573fb6, a0.this$)) {}

          FieldPhraseList::FieldPhraseList(const ::org::apache::lucene::search::vectorhighlight::FieldTermStack & a0, const ::org::apache::lucene::search::vectorhighlight::FieldQuery & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_ed2eefc8, a0.this$, a1.this$)) {}

          FieldPhraseList::FieldPhraseList(const ::org::apache::lucene::search::vectorhighlight::FieldTermStack & a0, const ::org::apache::lucene::search::vectorhighlight::FieldQuery & a1, jint a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_5d494a16, a0.this$, a1.this$, a2)) {}

          void FieldPhraseList::addIfNoOverlap(const ::org::apache::lucene::search::vectorhighlight::FieldPhraseList$WeightedPhraseInfo & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_addIfNoOverlap_3f58e089], a0.this$);
          }

          ::java::util::List FieldPhraseList::getPhraseList() const
          {
            return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getPhraseList_87851566]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {
          static PyObject *t_FieldPhraseList_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FieldPhraseList_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FieldPhraseList_init_(t_FieldPhraseList *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FieldPhraseList_addIfNoOverlap(t_FieldPhraseList *self, PyObject *arg);
          static PyObject *t_FieldPhraseList_getPhraseList(t_FieldPhraseList *self);
          static PyObject *t_FieldPhraseList_get__phraseList(t_FieldPhraseList *self, void *data);
          static PyGetSetDef t_FieldPhraseList__fields_[] = {
            DECLARE_GET_FIELD(t_FieldPhraseList, phraseList),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_FieldPhraseList__methods_[] = {
            DECLARE_METHOD(t_FieldPhraseList, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FieldPhraseList, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FieldPhraseList, addIfNoOverlap, METH_O),
            DECLARE_METHOD(t_FieldPhraseList, getPhraseList, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FieldPhraseList, t_FieldPhraseList, ::java::lang::Object, FieldPhraseList, t_FieldPhraseList_init_, 0, 0, t_FieldPhraseList__fields_, 0, 0);

          void t_FieldPhraseList::install(PyObject *module)
          {
            installType(&PY_TYPE(FieldPhraseList), module, "FieldPhraseList", 0);
            PyDict_SetItemString(PY_TYPE(FieldPhraseList).tp_dict, "WeightedPhraseInfo", make_descriptor(&PY_TYPE(FieldPhraseList$WeightedPhraseInfo)));
          }

          void t_FieldPhraseList::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FieldPhraseList).tp_dict, "class_", make_descriptor(FieldPhraseList::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FieldPhraseList).tp_dict, "wrapfn_", make_descriptor(t_FieldPhraseList::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FieldPhraseList).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FieldPhraseList_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FieldPhraseList::initializeClass, 1)))
              return NULL;
            return t_FieldPhraseList::wrap_Object(FieldPhraseList(((t_FieldPhraseList *) arg)->object.this$));
          }
          static PyObject *t_FieldPhraseList_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FieldPhraseList::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FieldPhraseList_init_(t_FieldPhraseList *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                JArray< FieldPhraseList > a0((jobject) NULL);
                FieldPhraseList object((jobject) NULL);

                if (!parseArgs(args, "[k", FieldPhraseList::initializeClass, &a0))
                {
                  INT_CALL(object = FieldPhraseList(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::search::vectorhighlight::FieldTermStack a0((jobject) NULL);
                ::org::apache::lucene::search::vectorhighlight::FieldQuery a1((jobject) NULL);
                FieldPhraseList object((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::search::vectorhighlight::FieldTermStack::initializeClass, ::org::apache::lucene::search::vectorhighlight::FieldQuery::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = FieldPhraseList(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::search::vectorhighlight::FieldTermStack a0((jobject) NULL);
                ::org::apache::lucene::search::vectorhighlight::FieldQuery a1((jobject) NULL);
                jint a2;
                FieldPhraseList object((jobject) NULL);

                if (!parseArgs(args, "kkI", ::org::apache::lucene::search::vectorhighlight::FieldTermStack::initializeClass, ::org::apache::lucene::search::vectorhighlight::FieldQuery::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = FieldPhraseList(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_FieldPhraseList_addIfNoOverlap(t_FieldPhraseList *self, PyObject *arg)
          {
            ::org::apache::lucene::search::vectorhighlight::FieldPhraseList$WeightedPhraseInfo a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::search::vectorhighlight::FieldPhraseList$WeightedPhraseInfo::initializeClass, &a0))
            {
              OBJ_CALL(self->object.addIfNoOverlap(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "addIfNoOverlap", arg);
            return NULL;
          }

          static PyObject *t_FieldPhraseList_getPhraseList(t_FieldPhraseList *self)
          {
            ::java::util::List result((jobject) NULL);
            OBJ_CALL(result = self->object.getPhraseList());
            return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::search::vectorhighlight::PY_TYPE(FieldPhraseList$WeightedPhraseInfo));
          }

          static PyObject *t_FieldPhraseList_get__phraseList(t_FieldPhraseList *self, void *data)
          {
            ::java::util::List value((jobject) NULL);
            OBJ_CALL(value = self->object.getPhraseList());
            return ::java::util::t_List::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/FilterAtomicReader$FilterDocsAndPositionsEnum.h"
#include "org/apache/lucene/util/AttributeSource.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *FilterAtomicReader$FilterDocsAndPositionsEnum::class$ = NULL;
        jmethodID *FilterAtomicReader$FilterDocsAndPositionsEnum::mids$ = NULL;
        bool FilterAtomicReader$FilterDocsAndPositionsEnum::live$ = false;

        jclass FilterAtomicReader$FilterDocsAndPositionsEnum::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/FilterAtomicReader$FilterDocsAndPositionsEnum");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_9604ac16] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/DocsAndPositionsEnum;)V");
            mids$[mid_advance_39c7bd23] = env->getMethodID(cls, "advance", "(I)I");
            mids$[mid_attributes_f901022b] = env->getMethodID(cls, "attributes", "()Lorg/apache/lucene/util/AttributeSource;");
            mids$[mid_cost_54c6a17a] = env->getMethodID(cls, "cost", "()J");
            mids$[mid_docID_54c6a179] = env->getMethodID(cls, "docID", "()I");
            mids$[mid_endOffset_54c6a179] = env->getMethodID(cls, "endOffset", "()I");
            mids$[mid_freq_54c6a179] = env->getMethodID(cls, "freq", "()I");
            mids$[mid_getPayload_4ae19461] = env->getMethodID(cls, "getPayload", "()Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_nextDoc_54c6a179] = env->getMethodID(cls, "nextDoc", "()I");
            mids$[mid_nextPosition_54c6a179] = env->getMethodID(cls, "nextPosition", "()I");
            mids$[mid_startOffset_54c6a179] = env->getMethodID(cls, "startOffset", "()I");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FilterAtomicReader$FilterDocsAndPositionsEnum::FilterAtomicReader$FilterDocsAndPositionsEnum(const ::org::apache::lucene::index::DocsAndPositionsEnum & a0) : ::org::apache::lucene::index::DocsAndPositionsEnum(env->newObject(initializeClass, &mids$, mid_init$_9604ac16, a0.this$)) {}

        jint FilterAtomicReader$FilterDocsAndPositionsEnum::advance(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_advance_39c7bd23], a0);
        }

        ::org::apache::lucene::util::AttributeSource FilterAtomicReader$FilterDocsAndPositionsEnum::attributes() const
        {
          return ::org::apache::lucene::util::AttributeSource(env->callObjectMethod(this$, mids$[mid_attributes_f901022b]));
        }

        jlong FilterAtomicReader$FilterDocsAndPositionsEnum::cost() const
        {
          return env->callLongMethod(this$, mids$[mid_cost_54c6a17a]);
        }

        jint FilterAtomicReader$FilterDocsAndPositionsEnum::docID() const
        {
          return env->callIntMethod(this$, mids$[mid_docID_54c6a179]);
        }

        jint FilterAtomicReader$FilterDocsAndPositionsEnum::endOffset() const
        {
          return env->callIntMethod(this$, mids$[mid_endOffset_54c6a179]);
        }

        jint FilterAtomicReader$FilterDocsAndPositionsEnum::freq() const
        {
          return env->callIntMethod(this$, mids$[mid_freq_54c6a179]);
        }

        ::org::apache::lucene::util::BytesRef FilterAtomicReader$FilterDocsAndPositionsEnum::getPayload() const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_getPayload_4ae19461]));
        }

        jint FilterAtomicReader$FilterDocsAndPositionsEnum::nextDoc() const
        {
          return env->callIntMethod(this$, mids$[mid_nextDoc_54c6a179]);
        }

        jint FilterAtomicReader$FilterDocsAndPositionsEnum::nextPosition() const
        {
          return env->callIntMethod(this$, mids$[mid_nextPosition_54c6a179]);
        }

        jint FilterAtomicReader$FilterDocsAndPositionsEnum::startOffset() const
        {
          return env->callIntMethod(this$, mids$[mid_startOffset_54c6a179]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_FilterAtomicReader$FilterDocsAndPositionsEnum_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FilterAtomicReader$FilterDocsAndPositionsEnum_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FilterAtomicReader$FilterDocsAndPositionsEnum_init_(t_FilterAtomicReader$FilterDocsAndPositionsEnum *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FilterAtomicReader$FilterDocsAndPositionsEnum_advance(t_FilterAtomicReader$FilterDocsAndPositionsEnum *self, PyObject *args);
        static PyObject *t_FilterAtomicReader$FilterDocsAndPositionsEnum_attributes(t_FilterAtomicReader$FilterDocsAndPositionsEnum *self, PyObject *args);
        static PyObject *t_FilterAtomicReader$FilterDocsAndPositionsEnum_cost(t_FilterAtomicReader$FilterDocsAndPositionsEnum *self, PyObject *args);
        static PyObject *t_FilterAtomicReader$FilterDocsAndPositionsEnum_docID(t_FilterAtomicReader$FilterDocsAndPositionsEnum *self, PyObject *args);
        static PyObject *t_FilterAtomicReader$FilterDocsAndPositionsEnum_endOffset(t_FilterAtomicReader$FilterDocsAndPositionsEnum *self, PyObject *args);
        static PyObject *t_FilterAtomicReader$FilterDocsAndPositionsEnum_freq(t_FilterAtomicReader$FilterDocsAndPositionsEnum *self, PyObject *args);
        static PyObject *t_FilterAtomicReader$FilterDocsAndPositionsEnum_getPayload(t_FilterAtomicReader$FilterDocsAndPositionsEnum *self, PyObject *args);
        static PyObject *t_FilterAtomicReader$FilterDocsAndPositionsEnum_nextDoc(t_FilterAtomicReader$FilterDocsAndPositionsEnum *self, PyObject *args);
        static PyObject *t_FilterAtomicReader$FilterDocsAndPositionsEnum_nextPosition(t_FilterAtomicReader$FilterDocsAndPositionsEnum *self, PyObject *args);
        static PyObject *t_FilterAtomicReader$FilterDocsAndPositionsEnum_startOffset(t_FilterAtomicReader$FilterDocsAndPositionsEnum *self, PyObject *args);
        static PyObject *t_FilterAtomicReader$FilterDocsAndPositionsEnum_get__payload(t_FilterAtomicReader$FilterDocsAndPositionsEnum *self, void *data);
        static PyGetSetDef t_FilterAtomicReader$FilterDocsAndPositionsEnum__fields_[] = {
          DECLARE_GET_FIELD(t_FilterAtomicReader$FilterDocsAndPositionsEnum, payload),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FilterAtomicReader$FilterDocsAndPositionsEnum__methods_[] = {
          DECLARE_METHOD(t_FilterAtomicReader$FilterDocsAndPositionsEnum, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterDocsAndPositionsEnum, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterDocsAndPositionsEnum, advance, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterDocsAndPositionsEnum, attributes, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterDocsAndPositionsEnum, cost, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterDocsAndPositionsEnum, docID, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterDocsAndPositionsEnum, endOffset, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterDocsAndPositionsEnum, freq, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterDocsAndPositionsEnum, getPayload, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterDocsAndPositionsEnum, nextDoc, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterDocsAndPositionsEnum, nextPosition, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterDocsAndPositionsEnum, startOffset, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FilterAtomicReader$FilterDocsAndPositionsEnum, t_FilterAtomicReader$FilterDocsAndPositionsEnum, ::org::apache::lucene::index::DocsAndPositionsEnum, FilterAtomicReader$FilterDocsAndPositionsEnum, t_FilterAtomicReader$FilterDocsAndPositionsEnum_init_, 0, 0, t_FilterAtomicReader$FilterDocsAndPositionsEnum__fields_, 0, 0);

        void t_FilterAtomicReader$FilterDocsAndPositionsEnum::install(PyObject *module)
        {
          installType(&PY_TYPE(FilterAtomicReader$FilterDocsAndPositionsEnum), module, "FilterAtomicReader$FilterDocsAndPositionsEnum", 0);
        }

        void t_FilterAtomicReader$FilterDocsAndPositionsEnum::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FilterAtomicReader$FilterDocsAndPositionsEnum).tp_dict, "class_", make_descriptor(FilterAtomicReader$FilterDocsAndPositionsEnum::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FilterAtomicReader$FilterDocsAndPositionsEnum).tp_dict, "wrapfn_", make_descriptor(t_FilterAtomicReader$FilterDocsAndPositionsEnum::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FilterAtomicReader$FilterDocsAndPositionsEnum).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FilterAtomicReader$FilterDocsAndPositionsEnum_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FilterAtomicReader$FilterDocsAndPositionsEnum::initializeClass, 1)))
            return NULL;
          return t_FilterAtomicReader$FilterDocsAndPositionsEnum::wrap_Object(FilterAtomicReader$FilterDocsAndPositionsEnum(((t_FilterAtomicReader$FilterDocsAndPositionsEnum *) arg)->object.this$));
        }
        static PyObject *t_FilterAtomicReader$FilterDocsAndPositionsEnum_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FilterAtomicReader$FilterDocsAndPositionsEnum::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FilterAtomicReader$FilterDocsAndPositionsEnum_init_(t_FilterAtomicReader$FilterDocsAndPositionsEnum *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::index::DocsAndPositionsEnum a0((jobject) NULL);
          FilterAtomicReader$FilterDocsAndPositionsEnum object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::DocsAndPositionsEnum::initializeClass, &a0))
          {
            INT_CALL(object = FilterAtomicReader$FilterDocsAndPositionsEnum(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FilterAtomicReader$FilterDocsAndPositionsEnum_advance(t_FilterAtomicReader$FilterDocsAndPositionsEnum *self, PyObject *args)
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.advance(a0));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader$FilterDocsAndPositionsEnum), (PyObject *) self, "advance", args, 2);
        }

        static PyObject *t_FilterAtomicReader$FilterDocsAndPositionsEnum_attributes(t_FilterAtomicReader$FilterDocsAndPositionsEnum *self, PyObject *args)
        {
          ::org::apache::lucene::util::AttributeSource result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.attributes());
            return ::org::apache::lucene::util::t_AttributeSource::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader$FilterDocsAndPositionsEnum), (PyObject *) self, "attributes", args, 2);
        }

        static PyObject *t_FilterAtomicReader$FilterDocsAndPositionsEnum_cost(t_FilterAtomicReader$FilterDocsAndPositionsEnum *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.cost());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader$FilterDocsAndPositionsEnum), (PyObject *) self, "cost", args, 2);
        }

        static PyObject *t_FilterAtomicReader$FilterDocsAndPositionsEnum_docID(t_FilterAtomicReader$FilterDocsAndPositionsEnum *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.docID());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader$FilterDocsAndPositionsEnum), (PyObject *) self, "docID", args, 2);
        }

        static PyObject *t_FilterAtomicReader$FilterDocsAndPositionsEnum_endOffset(t_FilterAtomicReader$FilterDocsAndPositionsEnum *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.endOffset());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader$FilterDocsAndPositionsEnum), (PyObject *) self, "endOffset", args, 2);
        }

        static PyObject *t_FilterAtomicReader$FilterDocsAndPositionsEnum_freq(t_FilterAtomicReader$FilterDocsAndPositionsEnum *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.freq());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader$FilterDocsAndPositionsEnum), (PyObject *) self, "freq", args, 2);
        }

        static PyObject *t_FilterAtomicReader$FilterDocsAndPositionsEnum_getPayload(t_FilterAtomicReader$FilterDocsAndPositionsEnum *self, PyObject *args)
        {
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getPayload());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader$FilterDocsAndPositionsEnum), (PyObject *) self, "getPayload", args, 2);
        }

        static PyObject *t_FilterAtomicReader$FilterDocsAndPositionsEnum_nextDoc(t_FilterAtomicReader$FilterDocsAndPositionsEnum *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.nextDoc());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader$FilterDocsAndPositionsEnum), (PyObject *) self, "nextDoc", args, 2);
        }

        static PyObject *t_FilterAtomicReader$FilterDocsAndPositionsEnum_nextPosition(t_FilterAtomicReader$FilterDocsAndPositionsEnum *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.nextPosition());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader$FilterDocsAndPositionsEnum), (PyObject *) self, "nextPosition", args, 2);
        }

        static PyObject *t_FilterAtomicReader$FilterDocsAndPositionsEnum_startOffset(t_FilterAtomicReader$FilterDocsAndPositionsEnum *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.startOffset());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader$FilterDocsAndPositionsEnum), (PyObject *) self, "startOffset", args, 2);
        }

        static PyObject *t_FilterAtomicReader$FilterDocsAndPositionsEnum_get__payload(t_FilterAtomicReader$FilterDocsAndPositionsEnum *self, void *data)
        {
          ::org::apache::lucene::util::BytesRef value((jobject) NULL);
          OBJ_CALL(value = self->object.getPayload());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/highlight/SimpleHTMLFormatter.h"
#include "org/apache/lucene/search/highlight/Formatter.h"
#include "org/apache/lucene/search/highlight/TokenGroup.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {

          ::java::lang::Class *SimpleHTMLFormatter::class$ = NULL;
          jmethodID *SimpleHTMLFormatter::mids$ = NULL;
          bool SimpleHTMLFormatter::live$ = false;

          jclass SimpleHTMLFormatter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/highlight/SimpleHTMLFormatter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_4a264742] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/String;)V");
              mids$[mid_highlightTerm_8838cc58] = env->getMethodID(cls, "highlightTerm", "(Ljava/lang/String;Lorg/apache/lucene/search/highlight/TokenGroup;)Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SimpleHTMLFormatter::SimpleHTMLFormatter() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          SimpleHTMLFormatter::SimpleHTMLFormatter(const ::java::lang::String & a0, const ::java::lang::String & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_4a264742, a0.this$, a1.this$)) {}

          ::java::lang::String SimpleHTMLFormatter::highlightTerm(const ::java::lang::String & a0, const ::org::apache::lucene::search::highlight::TokenGroup & a1) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_highlightTerm_8838cc58], a0.this$, a1.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {
          static PyObject *t_SimpleHTMLFormatter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SimpleHTMLFormatter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SimpleHTMLFormatter_init_(t_SimpleHTMLFormatter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SimpleHTMLFormatter_highlightTerm(t_SimpleHTMLFormatter *self, PyObject *args);

          static PyMethodDef t_SimpleHTMLFormatter__methods_[] = {
            DECLARE_METHOD(t_SimpleHTMLFormatter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SimpleHTMLFormatter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SimpleHTMLFormatter, highlightTerm, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SimpleHTMLFormatter, t_SimpleHTMLFormatter, ::java::lang::Object, SimpleHTMLFormatter, t_SimpleHTMLFormatter_init_, 0, 0, 0, 0, 0);

          void t_SimpleHTMLFormatter::install(PyObject *module)
          {
            installType(&PY_TYPE(SimpleHTMLFormatter), module, "SimpleHTMLFormatter", 0);
          }

          void t_SimpleHTMLFormatter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SimpleHTMLFormatter).tp_dict, "class_", make_descriptor(SimpleHTMLFormatter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SimpleHTMLFormatter).tp_dict, "wrapfn_", make_descriptor(t_SimpleHTMLFormatter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SimpleHTMLFormatter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SimpleHTMLFormatter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SimpleHTMLFormatter::initializeClass, 1)))
              return NULL;
            return t_SimpleHTMLFormatter::wrap_Object(SimpleHTMLFormatter(((t_SimpleHTMLFormatter *) arg)->object.this$));
          }
          static PyObject *t_SimpleHTMLFormatter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SimpleHTMLFormatter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SimpleHTMLFormatter_init_(t_SimpleHTMLFormatter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                SimpleHTMLFormatter object((jobject) NULL);

                INT_CALL(object = SimpleHTMLFormatter());
                self->object = object;
                break;
              }
              goto err;
             case 2:
              {
                ::java::lang::String a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                SimpleHTMLFormatter object((jobject) NULL);

                if (!parseArgs(args, "ss", &a0, &a1))
                {
                  INT_CALL(object = SimpleHTMLFormatter(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SimpleHTMLFormatter_highlightTerm(t_SimpleHTMLFormatter *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::search::highlight::TokenGroup a1((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "sk", ::org::apache::lucene::search::highlight::TokenGroup::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.highlightTerm(a0, a1));
              return j2p(result);
            }

            PyErr_SetArgsError((PyObject *) self, "highlightTerm", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/br/BrazilianStemFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace br {

          ::java::lang::Class *BrazilianStemFilter::class$ = NULL;
          jmethodID *BrazilianStemFilter::mids$ = NULL;
          bool BrazilianStemFilter::live$ = false;

          jclass BrazilianStemFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/br/BrazilianStemFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BrazilianStemFilter::BrazilianStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean BrazilianStemFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace br {
          static PyObject *t_BrazilianStemFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BrazilianStemFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_BrazilianStemFilter_init_(t_BrazilianStemFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_BrazilianStemFilter_incrementToken(t_BrazilianStemFilter *self, PyObject *args);

          static PyMethodDef t_BrazilianStemFilter__methods_[] = {
            DECLARE_METHOD(t_BrazilianStemFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BrazilianStemFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BrazilianStemFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(BrazilianStemFilter, t_BrazilianStemFilter, ::org::apache::lucene::analysis::TokenFilter, BrazilianStemFilter, t_BrazilianStemFilter_init_, 0, 0, 0, 0, 0);

          void t_BrazilianStemFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(BrazilianStemFilter), module, "BrazilianStemFilter", 0);
          }

          void t_BrazilianStemFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(BrazilianStemFilter).tp_dict, "class_", make_descriptor(BrazilianStemFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(BrazilianStemFilter).tp_dict, "wrapfn_", make_descriptor(t_BrazilianStemFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(BrazilianStemFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_BrazilianStemFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BrazilianStemFilter::initializeClass, 1)))
              return NULL;
            return t_BrazilianStemFilter::wrap_Object(BrazilianStemFilter(((t_BrazilianStemFilter *) arg)->object.this$));
          }
          static PyObject *t_BrazilianStemFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BrazilianStemFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_BrazilianStemFilter_init_(t_BrazilianStemFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            BrazilianStemFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = BrazilianStemFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_BrazilianStemFilter_incrementToken(t_BrazilianStemFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(BrazilianStemFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/compressing/CompressingTermVectorsFormat.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/codecs/TermVectorsReader.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/codecs/TermVectorsWriter.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "org/apache/lucene/store/IOContext.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/codecs/compressing/CompressionMode.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace compressing {

          ::java::lang::Class *CompressingTermVectorsFormat::class$ = NULL;
          jmethodID *CompressingTermVectorsFormat::mids$ = NULL;
          bool CompressingTermVectorsFormat::live$ = false;

          jclass CompressingTermVectorsFormat::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/compressing/CompressingTermVectorsFormat");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_5a706bd2] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/String;Lorg/apache/lucene/codecs/compressing/CompressionMode;I)V");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
              mids$[mid_vectorsReader_9c23221f] = env->getMethodID(cls, "vectorsReader", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/SegmentInfo;Lorg/apache/lucene/index/FieldInfos;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/codecs/TermVectorsReader;");
              mids$[mid_vectorsWriter_0c8458c9] = env->getMethodID(cls, "vectorsWriter", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/SegmentInfo;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/codecs/TermVectorsWriter;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CompressingTermVectorsFormat::CompressingTermVectorsFormat(const ::java::lang::String & a0, const ::java::lang::String & a1, const ::org::apache::lucene::codecs::compressing::CompressionMode & a2, jint a3) : ::org::apache::lucene::codecs::TermVectorsFormat(env->newObject(initializeClass, &mids$, mid_init$_5a706bd2, a0.this$, a1.this$, a2.this$, a3)) {}

          ::java::lang::String CompressingTermVectorsFormat::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }

          ::org::apache::lucene::codecs::TermVectorsReader CompressingTermVectorsFormat::vectorsReader(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::SegmentInfo & a1, const ::org::apache::lucene::index::FieldInfos & a2, const ::org::apache::lucene::store::IOContext & a3) const
          {
            return ::org::apache::lucene::codecs::TermVectorsReader(env->callObjectMethod(this$, mids$[mid_vectorsReader_9c23221f], a0.this$, a1.this$, a2.this$, a3.this$));
          }

          ::org::apache::lucene::codecs::TermVectorsWriter CompressingTermVectorsFormat::vectorsWriter(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::SegmentInfo & a1, const ::org::apache::lucene::store::IOContext & a2) const
          {
            return ::org::apache::lucene::codecs::TermVectorsWriter(env->callObjectMethod(this$, mids$[mid_vectorsWriter_0c8458c9], a0.this$, a1.this$, a2.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace compressing {
          static PyObject *t_CompressingTermVectorsFormat_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CompressingTermVectorsFormat_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CompressingTermVectorsFormat_init_(t_CompressingTermVectorsFormat *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CompressingTermVectorsFormat_toString(t_CompressingTermVectorsFormat *self, PyObject *args);
          static PyObject *t_CompressingTermVectorsFormat_vectorsReader(t_CompressingTermVectorsFormat *self, PyObject *args);
          static PyObject *t_CompressingTermVectorsFormat_vectorsWriter(t_CompressingTermVectorsFormat *self, PyObject *args);

          static PyMethodDef t_CompressingTermVectorsFormat__methods_[] = {
            DECLARE_METHOD(t_CompressingTermVectorsFormat, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CompressingTermVectorsFormat, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CompressingTermVectorsFormat, toString, METH_VARARGS),
            DECLARE_METHOD(t_CompressingTermVectorsFormat, vectorsReader, METH_VARARGS),
            DECLARE_METHOD(t_CompressingTermVectorsFormat, vectorsWriter, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CompressingTermVectorsFormat, t_CompressingTermVectorsFormat, ::org::apache::lucene::codecs::TermVectorsFormat, CompressingTermVectorsFormat, t_CompressingTermVectorsFormat_init_, 0, 0, 0, 0, 0);

          void t_CompressingTermVectorsFormat::install(PyObject *module)
          {
            installType(&PY_TYPE(CompressingTermVectorsFormat), module, "CompressingTermVectorsFormat", 0);
          }

          void t_CompressingTermVectorsFormat::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CompressingTermVectorsFormat).tp_dict, "class_", make_descriptor(CompressingTermVectorsFormat::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CompressingTermVectorsFormat).tp_dict, "wrapfn_", make_descriptor(t_CompressingTermVectorsFormat::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CompressingTermVectorsFormat).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CompressingTermVectorsFormat_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CompressingTermVectorsFormat::initializeClass, 1)))
              return NULL;
            return t_CompressingTermVectorsFormat::wrap_Object(CompressingTermVectorsFormat(((t_CompressingTermVectorsFormat *) arg)->object.this$));
          }
          static PyObject *t_CompressingTermVectorsFormat_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CompressingTermVectorsFormat::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CompressingTermVectorsFormat_init_(t_CompressingTermVectorsFormat *self, PyObject *args, PyObject *kwds)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            ::org::apache::lucene::codecs::compressing::CompressionMode a2((jobject) NULL);
            jint a3;
            CompressingTermVectorsFormat object((jobject) NULL);

            if (!parseArgs(args, "sskI", ::org::apache::lucene::codecs::compressing::CompressionMode::initializeClass, &a0, &a1, &a2, &a3))
            {
              INT_CALL(object = CompressingTermVectorsFormat(a0, a1, a2, a3));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_CompressingTermVectorsFormat_toString(t_CompressingTermVectorsFormat *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(CompressingTermVectorsFormat), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_CompressingTermVectorsFormat_vectorsReader(t_CompressingTermVectorsFormat *self, PyObject *args)
          {
            ::org::apache::lucene::store::Directory a0((jobject) NULL);
            ::org::apache::lucene::index::SegmentInfo a1((jobject) NULL);
            ::org::apache::lucene::index::FieldInfos a2((jobject) NULL);
            ::org::apache::lucene::store::IOContext a3((jobject) NULL);
            ::org::apache::lucene::codecs::TermVectorsReader result((jobject) NULL);

            if (!parseArgs(args, "kkkk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::SegmentInfo::initializeClass, ::org::apache::lucene::index::FieldInfos::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2, &a3))
            {
              OBJ_CALL(result = self->object.vectorsReader(a0, a1, a2, a3));
              return ::org::apache::lucene::codecs::t_TermVectorsReader::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(CompressingTermVectorsFormat), (PyObject *) self, "vectorsReader", args, 2);
          }

          static PyObject *t_CompressingTermVectorsFormat_vectorsWriter(t_CompressingTermVectorsFormat *self, PyObject *args)
          {
            ::org::apache::lucene::store::Directory a0((jobject) NULL);
            ::org::apache::lucene::index::SegmentInfo a1((jobject) NULL);
            ::org::apache::lucene::store::IOContext a2((jobject) NULL);
            ::org::apache::lucene::codecs::TermVectorsWriter result((jobject) NULL);

            if (!parseArgs(args, "kkk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::SegmentInfo::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.vectorsWriter(a0, a1, a2));
              return ::org::apache::lucene::codecs::t_TermVectorsWriter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(CompressingTermVectorsFormat), (PyObject *) self, "vectorsWriter", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/xml/builders/TermsQueryBuilder.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "org/apache/lucene/queryparser/xml/QueryBuilder.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {

            ::java::lang::Class *TermsQueryBuilder::class$ = NULL;
            jmethodID *TermsQueryBuilder::mids$ = NULL;
            bool TermsQueryBuilder::live$ = false;

            jclass TermsQueryBuilder::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/xml/builders/TermsQueryBuilder");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_31619410] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Analyzer;)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            TermsQueryBuilder::TermsQueryBuilder(const ::org::apache::lucene::analysis::Analyzer & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_31619410, a0.this$)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {
            static PyObject *t_TermsQueryBuilder_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_TermsQueryBuilder_instance_(PyTypeObject *type, PyObject *arg);
            static int t_TermsQueryBuilder_init_(t_TermsQueryBuilder *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_TermsQueryBuilder__methods_[] = {
              DECLARE_METHOD(t_TermsQueryBuilder, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TermsQueryBuilder, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(TermsQueryBuilder, t_TermsQueryBuilder, ::java::lang::Object, TermsQueryBuilder, t_TermsQueryBuilder_init_, 0, 0, 0, 0, 0);

            void t_TermsQueryBuilder::install(PyObject *module)
            {
              installType(&PY_TYPE(TermsQueryBuilder), module, "TermsQueryBuilder", 0);
            }

            void t_TermsQueryBuilder::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(TermsQueryBuilder).tp_dict, "class_", make_descriptor(TermsQueryBuilder::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(TermsQueryBuilder).tp_dict, "wrapfn_", make_descriptor(t_TermsQueryBuilder::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(TermsQueryBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_TermsQueryBuilder_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, TermsQueryBuilder::initializeClass, 1)))
                return NULL;
              return t_TermsQueryBuilder::wrap_Object(TermsQueryBuilder(((t_TermsQueryBuilder *) arg)->object.this$));
            }
            static PyObject *t_TermsQueryBuilder_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, TermsQueryBuilder::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_TermsQueryBuilder_init_(t_TermsQueryBuilder *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
              TermsQueryBuilder object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0))
              {
                INT_CALL(object = TermsQueryBuilder(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/IndexableBinaryStringTools.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *IndexableBinaryStringTools::class$ = NULL;
        jmethodID *IndexableBinaryStringTools::mids$ = NULL;
        bool IndexableBinaryStringTools::live$ = false;

        jclass IndexableBinaryStringTools::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/IndexableBinaryStringTools");

            mids$ = new jmethodID[max_mid];
            mids$[mid_decode_af6092ff] = env->getStaticMethodID(cls, "decode", "([CII[BII)V");
            mids$[mid_encode_f24ebb03] = env->getStaticMethodID(cls, "encode", "([BII[CII)V");
            mids$[mid_getDecodedLength_6f0bb349] = env->getStaticMethodID(cls, "getDecodedLength", "([CII)I");
            mids$[mid_getEncodedLength_86f44340] = env->getStaticMethodID(cls, "getEncodedLength", "([BII)I");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void IndexableBinaryStringTools::decode(const JArray< jchar > & a0, jint a1, jint a2, const JArray< jbyte > & a3, jint a4, jint a5)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_decode_af6092ff], a0.this$, a1, a2, a3.this$, a4, a5);
        }

        void IndexableBinaryStringTools::encode(const JArray< jbyte > & a0, jint a1, jint a2, const JArray< jchar > & a3, jint a4, jint a5)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_encode_f24ebb03], a0.this$, a1, a2, a3.this$, a4, a5);
        }

        jint IndexableBinaryStringTools::getDecodedLength(const JArray< jchar > & a0, jint a1, jint a2)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_getDecodedLength_6f0bb349], a0.this$, a1, a2);
        }

        jint IndexableBinaryStringTools::getEncodedLength(const JArray< jbyte > & a0, jint a1, jint a2)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_getEncodedLength_86f44340], a0.this$, a1, a2);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_IndexableBinaryStringTools_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexableBinaryStringTools_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexableBinaryStringTools_decode(PyTypeObject *type, PyObject *args);
        static PyObject *t_IndexableBinaryStringTools_encode(PyTypeObject *type, PyObject *args);
        static PyObject *t_IndexableBinaryStringTools_getDecodedLength(PyTypeObject *type, PyObject *args);
        static PyObject *t_IndexableBinaryStringTools_getEncodedLength(PyTypeObject *type, PyObject *args);

        static PyMethodDef t_IndexableBinaryStringTools__methods_[] = {
          DECLARE_METHOD(t_IndexableBinaryStringTools, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexableBinaryStringTools, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexableBinaryStringTools, decode, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_IndexableBinaryStringTools, encode, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_IndexableBinaryStringTools, getDecodedLength, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_IndexableBinaryStringTools, getEncodedLength, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(IndexableBinaryStringTools, t_IndexableBinaryStringTools, ::java::lang::Object, IndexableBinaryStringTools, abstract_init, 0, 0, 0, 0, 0);

        void t_IndexableBinaryStringTools::install(PyObject *module)
        {
          installType(&PY_TYPE(IndexableBinaryStringTools), module, "IndexableBinaryStringTools", 0);
        }

        void t_IndexableBinaryStringTools::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(IndexableBinaryStringTools).tp_dict, "class_", make_descriptor(IndexableBinaryStringTools::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(IndexableBinaryStringTools).tp_dict, "wrapfn_", make_descriptor(t_IndexableBinaryStringTools::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(IndexableBinaryStringTools).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_IndexableBinaryStringTools_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IndexableBinaryStringTools::initializeClass, 1)))
            return NULL;
          return t_IndexableBinaryStringTools::wrap_Object(IndexableBinaryStringTools(((t_IndexableBinaryStringTools *) arg)->object.this$));
        }
        static PyObject *t_IndexableBinaryStringTools_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IndexableBinaryStringTools::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_IndexableBinaryStringTools_decode(PyTypeObject *type, PyObject *args)
        {
          JArray< jchar > a0((jobject) NULL);
          jint a1;
          jint a2;
          JArray< jbyte > a3((jobject) NULL);
          jint a4;
          jint a5;

          if (!parseArgs(args, "[CII[BII", &a0, &a1, &a2, &a3, &a4, &a5))
          {
            OBJ_CALL(::org::apache::lucene::util::IndexableBinaryStringTools::decode(a0, a1, a2, a3, a4, a5));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "decode", args);
          return NULL;
        }

        static PyObject *t_IndexableBinaryStringTools_encode(PyTypeObject *type, PyObject *args)
        {
          JArray< jbyte > a0((jobject) NULL);
          jint a1;
          jint a2;
          JArray< jchar > a3((jobject) NULL);
          jint a4;
          jint a5;

          if (!parseArgs(args, "[BII[CII", &a0, &a1, &a2, &a3, &a4, &a5))
          {
            OBJ_CALL(::org::apache::lucene::util::IndexableBinaryStringTools::encode(a0, a1, a2, a3, a4, a5));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "encode", args);
          return NULL;
        }

        static PyObject *t_IndexableBinaryStringTools_getDecodedLength(PyTypeObject *type, PyObject *args)
        {
          JArray< jchar > a0((jobject) NULL);
          jint a1;
          jint a2;
          jint result;

          if (!parseArgs(args, "[CII", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::IndexableBinaryStringTools::getDecodedLength(a0, a1, a2));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError(type, "getDecodedLength", args);
          return NULL;
        }

        static PyObject *t_IndexableBinaryStringTools_getEncodedLength(PyTypeObject *type, PyObject *args)
        {
          JArray< jbyte > a0((jobject) NULL);
          jint a1;
          jint a2;
          jint result;

          if (!parseArgs(args, "[BII", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::IndexableBinaryStringTools::getEncodedLength(a0, a1, a2));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError(type, "getEncodedLength", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/fa/PersianCharFilterFactory.h"
#include "org/apache/lucene/analysis/CharFilter.h"
#include "org/apache/lucene/analysis/util/MultiTermAwareComponent.h"
#include "java/lang/Class.h"
#include "java/io/Reader.h"
#include "org/apache/lucene/analysis/util/AbstractAnalysisFactory.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fa {

          ::java::lang::Class *PersianCharFilterFactory::class$ = NULL;
          jmethodID *PersianCharFilterFactory::mids$ = NULL;
          bool PersianCharFilterFactory::live$ = false;

          jclass PersianCharFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/fa/PersianCharFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_567624d1] = env->getMethodID(cls, "create", "(Ljava/io/Reader;)Lorg/apache/lucene/analysis/CharFilter;");
              mids$[mid_getMultiTermComponent_0a3f1d72] = env->getMethodID(cls, "getMultiTermComponent", "()Lorg/apache/lucene/analysis/util/AbstractAnalysisFactory;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PersianCharFilterFactory::PersianCharFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::CharFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::CharFilter PersianCharFilterFactory::create(const ::java::io::Reader & a0) const
          {
            return ::org::apache::lucene::analysis::CharFilter(env->callObjectMethod(this$, mids$[mid_create_567624d1], a0.this$));
          }

          ::org::apache::lucene::analysis::util::AbstractAnalysisFactory PersianCharFilterFactory::getMultiTermComponent() const
          {
            return ::org::apache::lucene::analysis::util::AbstractAnalysisFactory(env->callObjectMethod(this$, mids$[mid_getMultiTermComponent_0a3f1d72]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fa {
          static PyObject *t_PersianCharFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PersianCharFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PersianCharFilterFactory_init_(t_PersianCharFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PersianCharFilterFactory_create(t_PersianCharFilterFactory *self, PyObject *args);
          static PyObject *t_PersianCharFilterFactory_getMultiTermComponent(t_PersianCharFilterFactory *self);
          static PyObject *t_PersianCharFilterFactory_get__multiTermComponent(t_PersianCharFilterFactory *self, void *data);
          static PyGetSetDef t_PersianCharFilterFactory__fields_[] = {
            DECLARE_GET_FIELD(t_PersianCharFilterFactory, multiTermComponent),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_PersianCharFilterFactory__methods_[] = {
            DECLARE_METHOD(t_PersianCharFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PersianCharFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PersianCharFilterFactory, create, METH_VARARGS),
            DECLARE_METHOD(t_PersianCharFilterFactory, getMultiTermComponent, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PersianCharFilterFactory, t_PersianCharFilterFactory, ::org::apache::lucene::analysis::util::CharFilterFactory, PersianCharFilterFactory, t_PersianCharFilterFactory_init_, 0, 0, t_PersianCharFilterFactory__fields_, 0, 0);

          void t_PersianCharFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(PersianCharFilterFactory), module, "PersianCharFilterFactory", 0);
          }

          void t_PersianCharFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PersianCharFilterFactory).tp_dict, "class_", make_descriptor(PersianCharFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PersianCharFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_PersianCharFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PersianCharFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PersianCharFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PersianCharFilterFactory::initializeClass, 1)))
              return NULL;
            return t_PersianCharFilterFactory::wrap_Object(PersianCharFilterFactory(((t_PersianCharFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_PersianCharFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PersianCharFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PersianCharFilterFactory_init_(t_PersianCharFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            PersianCharFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = PersianCharFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PersianCharFilterFactory_create(t_PersianCharFilterFactory *self, PyObject *args)
          {
            ::java::io::Reader a0((jobject) NULL);
            ::org::apache::lucene::analysis::CharFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_CharFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(PersianCharFilterFactory), (PyObject *) self, "create", args, 2);
          }

          static PyObject *t_PersianCharFilterFactory_getMultiTermComponent(t_PersianCharFilterFactory *self)
          {
            ::org::apache::lucene::analysis::util::AbstractAnalysisFactory result((jobject) NULL);
            OBJ_CALL(result = self->object.getMultiTermComponent());
            return ::org::apache::lucene::analysis::util::t_AbstractAnalysisFactory::wrap_Object(result);
          }

          static PyObject *t_PersianCharFilterFactory_get__multiTermComponent(t_PersianCharFilterFactory *self, void *data)
          {
            ::org::apache::lucene::analysis::util::AbstractAnalysisFactory value((jobject) NULL);
            OBJ_CALL(value = self->object.getMultiTermComponent());
            return ::org::apache::lucene::analysis::util::t_AbstractAnalysisFactory::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/nodes/RegexpQueryNode.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/FieldableNode.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "java/lang/CharSequence.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/TextableQueryNode.h"
#include "org/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax.h"
#include "java/lang/CloneNotSupportedException.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace nodes {

              ::java::lang::Class *RegexpQueryNode::class$ = NULL;
              jmethodID *RegexpQueryNode::mids$ = NULL;
              bool RegexpQueryNode::live$ = false;

              jclass RegexpQueryNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/nodes/RegexpQueryNode");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_ddd81d4e] = env->getMethodID(cls, "<init>", "(Ljava/lang/CharSequence;Ljava/lang/CharSequence;II)V");
                  mids$[mid_cloneTree_6f121059] = env->getMethodID(cls, "cloneTree", "()Lorg/apache/lucene/queryparser/flexible/standard/nodes/RegexpQueryNode;");
                  mids$[mid_getField_e0adba2f] = env->getMethodID(cls, "getField", "()Ljava/lang/CharSequence;");
                  mids$[mid_getFieldAsString_14c7b5c5] = env->getMethodID(cls, "getFieldAsString", "()Ljava/lang/String;");
                  mids$[mid_getText_e0adba2f] = env->getMethodID(cls, "getText", "()Ljava/lang/CharSequence;");
                  mids$[mid_setField_a8afc64a] = env->getMethodID(cls, "setField", "(Ljava/lang/CharSequence;)V");
                  mids$[mid_setText_a8afc64a] = env->getMethodID(cls, "setText", "(Ljava/lang/CharSequence;)V");
                  mids$[mid_textToBytesRef_4ae19461] = env->getMethodID(cls, "textToBytesRef", "()Lorg/apache/lucene/util/BytesRef;");
                  mids$[mid_toQueryString_99b8dfe1] = env->getMethodID(cls, "toQueryString", "(Lorg/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax;)Ljava/lang/CharSequence;");
                  mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              RegexpQueryNode::RegexpQueryNode(const ::java::lang::CharSequence & a0, const ::java::lang::CharSequence & a1, jint a2, jint a3) : ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNodeImpl(env->newObject(initializeClass, &mids$, mid_init$_ddd81d4e, a0.this$, a1.this$, a2, a3)) {}

              RegexpQueryNode RegexpQueryNode::cloneTree() const
              {
                return RegexpQueryNode(env->callObjectMethod(this$, mids$[mid_cloneTree_6f121059]));
              }

              ::java::lang::CharSequence RegexpQueryNode::getField() const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_getField_e0adba2f]));
              }

              ::java::lang::String RegexpQueryNode::getFieldAsString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getFieldAsString_14c7b5c5]));
              }

              ::java::lang::CharSequence RegexpQueryNode::getText() const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_getText_e0adba2f]));
              }

              void RegexpQueryNode::setField(const ::java::lang::CharSequence & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setField_a8afc64a], a0.this$);
              }

              void RegexpQueryNode::setText(const ::java::lang::CharSequence & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setText_a8afc64a], a0.this$);
              }

              ::org::apache::lucene::util::BytesRef RegexpQueryNode::textToBytesRef() const
              {
                return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_textToBytesRef_4ae19461]));
              }

              ::java::lang::CharSequence RegexpQueryNode::toQueryString(const ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax & a0) const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_toQueryString_99b8dfe1], a0.this$));
              }

              ::java::lang::String RegexpQueryNode::toString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace nodes {
              static PyObject *t_RegexpQueryNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_RegexpQueryNode_instance_(PyTypeObject *type, PyObject *arg);
              static int t_RegexpQueryNode_init_(t_RegexpQueryNode *self, PyObject *args, PyObject *kwds);
              static PyObject *t_RegexpQueryNode_cloneTree(t_RegexpQueryNode *self, PyObject *args);
              static PyObject *t_RegexpQueryNode_getField(t_RegexpQueryNode *self);
              static PyObject *t_RegexpQueryNode_getFieldAsString(t_RegexpQueryNode *self);
              static PyObject *t_RegexpQueryNode_getText(t_RegexpQueryNode *self);
              static PyObject *t_RegexpQueryNode_setField(t_RegexpQueryNode *self, PyObject *arg);
              static PyObject *t_RegexpQueryNode_setText(t_RegexpQueryNode *self, PyObject *arg);
              static PyObject *t_RegexpQueryNode_textToBytesRef(t_RegexpQueryNode *self);
              static PyObject *t_RegexpQueryNode_toQueryString(t_RegexpQueryNode *self, PyObject *args);
              static PyObject *t_RegexpQueryNode_toString(t_RegexpQueryNode *self, PyObject *args);
              static PyObject *t_RegexpQueryNode_get__field(t_RegexpQueryNode *self, void *data);
              static int t_RegexpQueryNode_set__field(t_RegexpQueryNode *self, PyObject *arg, void *data);
              static PyObject *t_RegexpQueryNode_get__fieldAsString(t_RegexpQueryNode *self, void *data);
              static PyObject *t_RegexpQueryNode_get__text(t_RegexpQueryNode *self, void *data);
              static int t_RegexpQueryNode_set__text(t_RegexpQueryNode *self, PyObject *arg, void *data);
              static PyGetSetDef t_RegexpQueryNode__fields_[] = {
                DECLARE_GETSET_FIELD(t_RegexpQueryNode, field),
                DECLARE_GET_FIELD(t_RegexpQueryNode, fieldAsString),
                DECLARE_GETSET_FIELD(t_RegexpQueryNode, text),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_RegexpQueryNode__methods_[] = {
                DECLARE_METHOD(t_RegexpQueryNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_RegexpQueryNode, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_RegexpQueryNode, cloneTree, METH_VARARGS),
                DECLARE_METHOD(t_RegexpQueryNode, getField, METH_NOARGS),
                DECLARE_METHOD(t_RegexpQueryNode, getFieldAsString, METH_NOARGS),
                DECLARE_METHOD(t_RegexpQueryNode, getText, METH_NOARGS),
                DECLARE_METHOD(t_RegexpQueryNode, setField, METH_O),
                DECLARE_METHOD(t_RegexpQueryNode, setText, METH_O),
                DECLARE_METHOD(t_RegexpQueryNode, textToBytesRef, METH_NOARGS),
                DECLARE_METHOD(t_RegexpQueryNode, toQueryString, METH_VARARGS),
                DECLARE_METHOD(t_RegexpQueryNode, toString, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(RegexpQueryNode, t_RegexpQueryNode, ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNodeImpl, RegexpQueryNode, t_RegexpQueryNode_init_, 0, 0, t_RegexpQueryNode__fields_, 0, 0);

              void t_RegexpQueryNode::install(PyObject *module)
              {
                installType(&PY_TYPE(RegexpQueryNode), module, "RegexpQueryNode", 0);
              }

              void t_RegexpQueryNode::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(RegexpQueryNode).tp_dict, "class_", make_descriptor(RegexpQueryNode::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(RegexpQueryNode).tp_dict, "wrapfn_", make_descriptor(t_RegexpQueryNode::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(RegexpQueryNode).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_RegexpQueryNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, RegexpQueryNode::initializeClass, 1)))
                  return NULL;
                return t_RegexpQueryNode::wrap_Object(RegexpQueryNode(((t_RegexpQueryNode *) arg)->object.this$));
              }
              static PyObject *t_RegexpQueryNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, RegexpQueryNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_RegexpQueryNode_init_(t_RegexpQueryNode *self, PyObject *args, PyObject *kwds)
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                ::java::lang::CharSequence a1((jobject) NULL);
                jint a2;
                jint a3;
                RegexpQueryNode object((jobject) NULL);

                if (!parseArgs(args, "OOII", &::java::lang::PY_TYPE(CharSequence), &::java::lang::PY_TYPE(CharSequence), &a0, &a1, &a2, &a3))
                {
                  INT_CALL(object = RegexpQueryNode(a0, a1, a2, a3));
                  self->object = object;
                }
                else
                {
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_RegexpQueryNode_cloneTree(t_RegexpQueryNode *self, PyObject *args)
              {
                RegexpQueryNode result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.cloneTree());
                  return t_RegexpQueryNode::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(RegexpQueryNode), (PyObject *) self, "cloneTree", args, 2);
              }

              static PyObject *t_RegexpQueryNode_getField(t_RegexpQueryNode *self)
              {
                ::java::lang::CharSequence result((jobject) NULL);
                OBJ_CALL(result = self->object.getField());
                return ::java::lang::t_CharSequence::wrap_Object(result);
              }

              static PyObject *t_RegexpQueryNode_getFieldAsString(t_RegexpQueryNode *self)
              {
                ::java::lang::String result((jobject) NULL);
                OBJ_CALL(result = self->object.getFieldAsString());
                return j2p(result);
              }

              static PyObject *t_RegexpQueryNode_getText(t_RegexpQueryNode *self)
              {
                ::java::lang::CharSequence result((jobject) NULL);
                OBJ_CALL(result = self->object.getText());
                return ::java::lang::t_CharSequence::wrap_Object(result);
              }

              static PyObject *t_RegexpQueryNode_setField(t_RegexpQueryNode *self, PyObject *arg)
              {
                ::java::lang::CharSequence a0((jobject) NULL);

                if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
                {
                  OBJ_CALL(self->object.setField(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setField", arg);
                return NULL;
              }

              static PyObject *t_RegexpQueryNode_setText(t_RegexpQueryNode *self, PyObject *arg)
              {
                ::java::lang::CharSequence a0((jobject) NULL);

                if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
                {
                  OBJ_CALL(self->object.setText(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setText", arg);
                return NULL;
              }

              static PyObject *t_RegexpQueryNode_textToBytesRef(t_RegexpQueryNode *self)
              {
                ::org::apache::lucene::util::BytesRef result((jobject) NULL);
                OBJ_CALL(result = self->object.textToBytesRef());
                return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
              }

              static PyObject *t_RegexpQueryNode_toQueryString(t_RegexpQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax a0((jobject) NULL);
                ::java::lang::CharSequence result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.toQueryString(a0));
                  return ::java::lang::t_CharSequence::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(RegexpQueryNode), (PyObject *) self, "toQueryString", args, 2);
              }

              static PyObject *t_RegexpQueryNode_toString(t_RegexpQueryNode *self, PyObject *args)
              {
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.toString());
                  return j2p(result);
                }

                return callSuper(&PY_TYPE(RegexpQueryNode), (PyObject *) self, "toString", args, 2);
              }

              static PyObject *t_RegexpQueryNode_get__field(t_RegexpQueryNode *self, void *data)
              {
                ::java::lang::CharSequence value((jobject) NULL);
                OBJ_CALL(value = self->object.getField());
                return ::java::lang::t_CharSequence::wrap_Object(value);
              }
              static int t_RegexpQueryNode_set__field(t_RegexpQueryNode *self, PyObject *arg, void *data)
              {
                {
                  ::java::lang::CharSequence value((jobject) NULL);
                  if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &value))
                  {
                    INT_CALL(self->object.setField(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "field", arg);
                return -1;
              }

              static PyObject *t_RegexpQueryNode_get__fieldAsString(t_RegexpQueryNode *self, void *data)
              {
                ::java::lang::String value((jobject) NULL);
                OBJ_CALL(value = self->object.getFieldAsString());
                return j2p(value);
              }

              static PyObject *t_RegexpQueryNode_get__text(t_RegexpQueryNode *self, void *data)
              {
                ::java::lang::CharSequence value((jobject) NULL);
                OBJ_CALL(value = self->object.getText());
                return ::java::lang::t_CharSequence::wrap_Object(value);
              }
              static int t_RegexpQueryNode_set__text(t_RegexpQueryNode *self, PyObject *arg, void *data)
              {
                {
                  ::java::lang::CharSequence value((jobject) NULL);
                  if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &value))
                  {
                    INT_CALL(self->object.setText(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "text", arg);
                return -1;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/idversion/VersionBlockTreeTermsReader.h"
#include "org/apache/lucene/index/Terms.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "org/apache/lucene/store/IOContext.h"
#include "java/util/Iterator.h"
#include "org/apache/lucene/codecs/PostingsReaderBase.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace idversion {

          ::java::lang::Class *VersionBlockTreeTermsReader::class$ = NULL;
          jmethodID *VersionBlockTreeTermsReader::mids$ = NULL;
          bool VersionBlockTreeTermsReader::live$ = false;

          jclass VersionBlockTreeTermsReader::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/idversion/VersionBlockTreeTermsReader");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_1c92d475] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/FieldInfos;Lorg/apache/lucene/index/SegmentInfo;Lorg/apache/lucene/codecs/PostingsReaderBase;Lorg/apache/lucene/store/IOContext;Ljava/lang/String;)V");
              mids$[mid_checkIntegrity_54c6a166] = env->getMethodID(cls, "checkIntegrity", "()V");
              mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
              mids$[mid_iterator_40858c90] = env->getMethodID(cls, "iterator", "()Ljava/util/Iterator;");
              mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");
              mids$[mid_size_54c6a179] = env->getMethodID(cls, "size", "()I");
              mids$[mid_terms_ee262ab4] = env->getMethodID(cls, "terms", "(Ljava/lang/String;)Lorg/apache/lucene/index/Terms;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          VersionBlockTreeTermsReader::VersionBlockTreeTermsReader(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::FieldInfos & a1, const ::org::apache::lucene::index::SegmentInfo & a2, const ::org::apache::lucene::codecs::PostingsReaderBase & a3, const ::org::apache::lucene::store::IOContext & a4, const ::java::lang::String & a5) : ::org::apache::lucene::codecs::FieldsProducer(env->newObject(initializeClass, &mids$, mid_init$_1c92d475, a0.this$, a1.this$, a2.this$, a3.this$, a4.this$, a5.this$)) {}

          void VersionBlockTreeTermsReader::checkIntegrity() const
          {
            env->callVoidMethod(this$, mids$[mid_checkIntegrity_54c6a166]);
          }

          void VersionBlockTreeTermsReader::close() const
          {
            env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
          }

          ::java::util::Iterator VersionBlockTreeTermsReader::iterator() const
          {
            return ::java::util::Iterator(env->callObjectMethod(this$, mids$[mid_iterator_40858c90]));
          }

          jlong VersionBlockTreeTermsReader::ramBytesUsed() const
          {
            return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
          }

          jint VersionBlockTreeTermsReader::size() const
          {
            return env->callIntMethod(this$, mids$[mid_size_54c6a179]);
          }

          ::org::apache::lucene::index::Terms VersionBlockTreeTermsReader::terms(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::index::Terms(env->callObjectMethod(this$, mids$[mid_terms_ee262ab4], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace idversion {
          static PyObject *t_VersionBlockTreeTermsReader_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_VersionBlockTreeTermsReader_instance_(PyTypeObject *type, PyObject *arg);
          static int t_VersionBlockTreeTermsReader_init_(t_VersionBlockTreeTermsReader *self, PyObject *args, PyObject *kwds);
          static PyObject *t_VersionBlockTreeTermsReader_checkIntegrity(t_VersionBlockTreeTermsReader *self, PyObject *args);
          static PyObject *t_VersionBlockTreeTermsReader_close(t_VersionBlockTreeTermsReader *self, PyObject *args);
          static PyObject *t_VersionBlockTreeTermsReader_iterator(t_VersionBlockTreeTermsReader *self, PyObject *args);
          static PyObject *t_VersionBlockTreeTermsReader_ramBytesUsed(t_VersionBlockTreeTermsReader *self, PyObject *args);
          static PyObject *t_VersionBlockTreeTermsReader_size(t_VersionBlockTreeTermsReader *self, PyObject *args);
          static PyObject *t_VersionBlockTreeTermsReader_terms(t_VersionBlockTreeTermsReader *self, PyObject *args);

          static PyMethodDef t_VersionBlockTreeTermsReader__methods_[] = {
            DECLARE_METHOD(t_VersionBlockTreeTermsReader, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_VersionBlockTreeTermsReader, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_VersionBlockTreeTermsReader, checkIntegrity, METH_VARARGS),
            DECLARE_METHOD(t_VersionBlockTreeTermsReader, close, METH_VARARGS),
            DECLARE_METHOD(t_VersionBlockTreeTermsReader, iterator, METH_VARARGS),
            DECLARE_METHOD(t_VersionBlockTreeTermsReader, ramBytesUsed, METH_VARARGS),
            DECLARE_METHOD(t_VersionBlockTreeTermsReader, size, METH_VARARGS),
            DECLARE_METHOD(t_VersionBlockTreeTermsReader, terms, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(VersionBlockTreeTermsReader, t_VersionBlockTreeTermsReader, ::org::apache::lucene::codecs::FieldsProducer, VersionBlockTreeTermsReader, t_VersionBlockTreeTermsReader_init_, ((PyObject *(*)(t_VersionBlockTreeTermsReader *)) get_iterator< t_VersionBlockTreeTermsReader >), 0, 0, 0, 0);

          void t_VersionBlockTreeTermsReader::install(PyObject *module)
          {
            installType(&PY_TYPE(VersionBlockTreeTermsReader), module, "VersionBlockTreeTermsReader", 0);
          }

          void t_VersionBlockTreeTermsReader::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(VersionBlockTreeTermsReader).tp_dict, "class_", make_descriptor(VersionBlockTreeTermsReader::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(VersionBlockTreeTermsReader).tp_dict, "wrapfn_", make_descriptor(t_VersionBlockTreeTermsReader::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(VersionBlockTreeTermsReader).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_VersionBlockTreeTermsReader_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, VersionBlockTreeTermsReader::initializeClass, 1)))
              return NULL;
            return t_VersionBlockTreeTermsReader::wrap_Object(VersionBlockTreeTermsReader(((t_VersionBlockTreeTermsReader *) arg)->object.this$));
          }
          static PyObject *t_VersionBlockTreeTermsReader_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, VersionBlockTreeTermsReader::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_VersionBlockTreeTermsReader_init_(t_VersionBlockTreeTermsReader *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::store::Directory a0((jobject) NULL);
            ::org::apache::lucene::index::FieldInfos a1((jobject) NULL);
            ::org::apache::lucene::index::SegmentInfo a2((jobject) NULL);
            ::org::apache::lucene::codecs::PostingsReaderBase a3((jobject) NULL);
            ::org::apache::lucene::store::IOContext a4((jobject) NULL);
            ::java::lang::String a5((jobject) NULL);
            VersionBlockTreeTermsReader object((jobject) NULL);

            if (!parseArgs(args, "kkkkks", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::FieldInfos::initializeClass, ::org::apache::lucene::index::SegmentInfo::initializeClass, ::org::apache::lucene::codecs::PostingsReaderBase::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5))
            {
              INT_CALL(object = VersionBlockTreeTermsReader(a0, a1, a2, a3, a4, a5));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_VersionBlockTreeTermsReader_checkIntegrity(t_VersionBlockTreeTermsReader *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.checkIntegrity());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(VersionBlockTreeTermsReader), (PyObject *) self, "checkIntegrity", args, 2);
          }

          static PyObject *t_VersionBlockTreeTermsReader_close(t_VersionBlockTreeTermsReader *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.close());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(VersionBlockTreeTermsReader), (PyObject *) self, "close", args, 2);
          }

          static PyObject *t_VersionBlockTreeTermsReader_iterator(t_VersionBlockTreeTermsReader *self, PyObject *args)
          {
            ::java::util::Iterator result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.iterator());
              return ::java::util::t_Iterator::wrap_Object(result, &::java::lang::PY_TYPE(String));
            }

            return callSuper(&PY_TYPE(VersionBlockTreeTermsReader), (PyObject *) self, "iterator", args, 2);
          }

          static PyObject *t_VersionBlockTreeTermsReader_ramBytesUsed(t_VersionBlockTreeTermsReader *self, PyObject *args)
          {
            jlong result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.ramBytesUsed());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(&PY_TYPE(VersionBlockTreeTermsReader), (PyObject *) self, "ramBytesUsed", args, 2);
          }

          static PyObject *t_VersionBlockTreeTermsReader_size(t_VersionBlockTreeTermsReader *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.size());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(VersionBlockTreeTermsReader), (PyObject *) self, "size", args, 2);
          }

          static PyObject *t_VersionBlockTreeTermsReader_terms(t_VersionBlockTreeTermsReader *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::index::Terms result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = self->object.terms(a0));
              return ::org::apache::lucene::index::t_Terms::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(VersionBlockTreeTermsReader), (PyObject *) self, "terms", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/processors/DefaultPhraseSlopQueryNodeProcessor.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {

              ::java::lang::Class *DefaultPhraseSlopQueryNodeProcessor::class$ = NULL;
              jmethodID *DefaultPhraseSlopQueryNodeProcessor::mids$ = NULL;
              bool DefaultPhraseSlopQueryNodeProcessor::live$ = false;

              jclass DefaultPhraseSlopQueryNodeProcessor::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/processors/DefaultPhraseSlopQueryNodeProcessor");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_process_6705aed7] = env->getMethodID(cls, "process", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_postProcessNode_6705aed7] = env->getMethodID(cls, "postProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_preProcessNode_6705aed7] = env->getMethodID(cls, "preProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_setChildrenOrder_4f378251] = env->getMethodID(cls, "setChildrenOrder", "(Ljava/util/List;)Ljava/util/List;");
                  mids$[mid_processChildren_cc04aeef] = env->getMethodID(cls, "processChildren", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)V");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              DefaultPhraseSlopQueryNodeProcessor::DefaultPhraseSlopQueryNodeProcessor() : ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode DefaultPhraseSlopQueryNodeProcessor::process(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_process_6705aed7], a0.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {
              static PyObject *t_DefaultPhraseSlopQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_DefaultPhraseSlopQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg);
              static int t_DefaultPhraseSlopQueryNodeProcessor_init_(t_DefaultPhraseSlopQueryNodeProcessor *self, PyObject *args, PyObject *kwds);
              static PyObject *t_DefaultPhraseSlopQueryNodeProcessor_process(t_DefaultPhraseSlopQueryNodeProcessor *self, PyObject *args);

              static PyMethodDef t_DefaultPhraseSlopQueryNodeProcessor__methods_[] = {
                DECLARE_METHOD(t_DefaultPhraseSlopQueryNodeProcessor, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_DefaultPhraseSlopQueryNodeProcessor, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_DefaultPhraseSlopQueryNodeProcessor, process, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(DefaultPhraseSlopQueryNodeProcessor, t_DefaultPhraseSlopQueryNodeProcessor, ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl, DefaultPhraseSlopQueryNodeProcessor, t_DefaultPhraseSlopQueryNodeProcessor_init_, 0, 0, 0, 0, 0);

              void t_DefaultPhraseSlopQueryNodeProcessor::install(PyObject *module)
              {
                installType(&PY_TYPE(DefaultPhraseSlopQueryNodeProcessor), module, "DefaultPhraseSlopQueryNodeProcessor", 0);
              }

              void t_DefaultPhraseSlopQueryNodeProcessor::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(DefaultPhraseSlopQueryNodeProcessor).tp_dict, "class_", make_descriptor(DefaultPhraseSlopQueryNodeProcessor::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(DefaultPhraseSlopQueryNodeProcessor).tp_dict, "wrapfn_", make_descriptor(t_DefaultPhraseSlopQueryNodeProcessor::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(DefaultPhraseSlopQueryNodeProcessor).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_DefaultPhraseSlopQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, DefaultPhraseSlopQueryNodeProcessor::initializeClass, 1)))
                  return NULL;
                return t_DefaultPhraseSlopQueryNodeProcessor::wrap_Object(DefaultPhraseSlopQueryNodeProcessor(((t_DefaultPhraseSlopQueryNodeProcessor *) arg)->object.this$));
              }
              static PyObject *t_DefaultPhraseSlopQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, DefaultPhraseSlopQueryNodeProcessor::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_DefaultPhraseSlopQueryNodeProcessor_init_(t_DefaultPhraseSlopQueryNodeProcessor *self, PyObject *args, PyObject *kwds)
              {
                DefaultPhraseSlopQueryNodeProcessor object((jobject) NULL);

                INT_CALL(object = DefaultPhraseSlopQueryNodeProcessor());
                self->object = object;

                return 0;
              }

              static PyObject *t_DefaultPhraseSlopQueryNodeProcessor_process(t_DefaultPhraseSlopQueryNodeProcessor *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.process(a0));
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(DefaultPhraseSlopQueryNodeProcessor), (PyObject *) self, "process", args, 2);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/BoostAttribute.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *BoostAttribute::class$ = NULL;
        jmethodID *BoostAttribute::mids$ = NULL;
        bool BoostAttribute::live$ = false;

        jclass BoostAttribute::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/BoostAttribute");

            mids$ = new jmethodID[max_mid];
            mids$[mid_getBoost_54c6a176] = env->getMethodID(cls, "getBoost", "()F");
            mids$[mid_setBoost_06298cab] = env->getMethodID(cls, "setBoost", "(F)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jfloat BoostAttribute::getBoost() const
        {
          return env->callFloatMethod(this$, mids$[mid_getBoost_54c6a176]);
        }

        void BoostAttribute::setBoost(jfloat a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setBoost_06298cab], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_BoostAttribute_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BoostAttribute_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BoostAttribute_getBoost(t_BoostAttribute *self);
        static PyObject *t_BoostAttribute_setBoost(t_BoostAttribute *self, PyObject *arg);
        static PyObject *t_BoostAttribute_get__boost(t_BoostAttribute *self, void *data);
        static int t_BoostAttribute_set__boost(t_BoostAttribute *self, PyObject *arg, void *data);
        static PyGetSetDef t_BoostAttribute__fields_[] = {
          DECLARE_GETSET_FIELD(t_BoostAttribute, boost),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_BoostAttribute__methods_[] = {
          DECLARE_METHOD(t_BoostAttribute, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BoostAttribute, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BoostAttribute, getBoost, METH_NOARGS),
          DECLARE_METHOD(t_BoostAttribute, setBoost, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(BoostAttribute, t_BoostAttribute, ::org::apache::lucene::util::Attribute, BoostAttribute, abstract_init, 0, 0, t_BoostAttribute__fields_, 0, 0);

        void t_BoostAttribute::install(PyObject *module)
        {
          installType(&PY_TYPE(BoostAttribute), module, "BoostAttribute", 0);
        }

        void t_BoostAttribute::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(BoostAttribute).tp_dict, "class_", make_descriptor(BoostAttribute::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(BoostAttribute).tp_dict, "wrapfn_", make_descriptor(t_BoostAttribute::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(BoostAttribute).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_BoostAttribute_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, BoostAttribute::initializeClass, 1)))
            return NULL;
          return t_BoostAttribute::wrap_Object(BoostAttribute(((t_BoostAttribute *) arg)->object.this$));
        }
        static PyObject *t_BoostAttribute_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, BoostAttribute::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_BoostAttribute_getBoost(t_BoostAttribute *self)
        {
          jfloat result;
          OBJ_CALL(result = self->object.getBoost());
          return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_BoostAttribute_setBoost(t_BoostAttribute *self, PyObject *arg)
        {
          jfloat a0;

          if (!parseArg(arg, "F", &a0))
          {
            OBJ_CALL(self->object.setBoost(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setBoost", arg);
          return NULL;
        }

        static PyObject *t_BoostAttribute_get__boost(t_BoostAttribute *self, void *data)
        {
          jfloat value;
          OBJ_CALL(value = self->object.getBoost());
          return PyFloat_FromDouble((double) value);
        }
        static int t_BoostAttribute_set__boost(t_BoostAttribute *self, PyObject *arg, void *data)
        {
          {
            jfloat value;
            if (!parseArg(arg, "F", &value))
            {
              INT_CALL(self->object.setBoost(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "boost", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene40/Lucene40SegmentInfoReader.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "org/apache/lucene/store/IOContext.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene40 {

          ::java::lang::Class *Lucene40SegmentInfoReader::class$ = NULL;
          jmethodID *Lucene40SegmentInfoReader::mids$ = NULL;
          bool Lucene40SegmentInfoReader::live$ = false;

          jclass Lucene40SegmentInfoReader::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene40/Lucene40SegmentInfoReader");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_read_ff05cda4] = env->getMethodID(cls, "read", "(Lorg/apache/lucene/store/Directory;Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/index/SegmentInfo;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene40SegmentInfoReader::Lucene40SegmentInfoReader() : ::org::apache::lucene::codecs::SegmentInfoReader(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::index::SegmentInfo Lucene40SegmentInfoReader::read(const ::org::apache::lucene::store::Directory & a0, const ::java::lang::String & a1, const ::org::apache::lucene::store::IOContext & a2) const
          {
            return ::org::apache::lucene::index::SegmentInfo(env->callObjectMethod(this$, mids$[mid_read_ff05cda4], a0.this$, a1.this$, a2.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene40 {
          static PyObject *t_Lucene40SegmentInfoReader_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene40SegmentInfoReader_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene40SegmentInfoReader_init_(t_Lucene40SegmentInfoReader *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene40SegmentInfoReader_read(t_Lucene40SegmentInfoReader *self, PyObject *args);

          static PyMethodDef t_Lucene40SegmentInfoReader__methods_[] = {
            DECLARE_METHOD(t_Lucene40SegmentInfoReader, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene40SegmentInfoReader, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene40SegmentInfoReader, read, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene40SegmentInfoReader, t_Lucene40SegmentInfoReader, ::org::apache::lucene::codecs::SegmentInfoReader, Lucene40SegmentInfoReader, t_Lucene40SegmentInfoReader_init_, 0, 0, 0, 0, 0);

          void t_Lucene40SegmentInfoReader::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene40SegmentInfoReader), module, "Lucene40SegmentInfoReader", 0);
          }

          void t_Lucene40SegmentInfoReader::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene40SegmentInfoReader).tp_dict, "class_", make_descriptor(Lucene40SegmentInfoReader::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene40SegmentInfoReader).tp_dict, "wrapfn_", make_descriptor(t_Lucene40SegmentInfoReader::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene40SegmentInfoReader).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lucene40SegmentInfoReader_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene40SegmentInfoReader::initializeClass, 1)))
              return NULL;
            return t_Lucene40SegmentInfoReader::wrap_Object(Lucene40SegmentInfoReader(((t_Lucene40SegmentInfoReader *) arg)->object.this$));
          }
          static PyObject *t_Lucene40SegmentInfoReader_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene40SegmentInfoReader::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene40SegmentInfoReader_init_(t_Lucene40SegmentInfoReader *self, PyObject *args, PyObject *kwds)
          {
            Lucene40SegmentInfoReader object((jobject) NULL);

            INT_CALL(object = Lucene40SegmentInfoReader());
            self->object = object;

            return 0;
          }

          static PyObject *t_Lucene40SegmentInfoReader_read(t_Lucene40SegmentInfoReader *self, PyObject *args)
          {
            ::org::apache::lucene::store::Directory a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            ::org::apache::lucene::store::IOContext a2((jobject) NULL);
            ::org::apache::lucene::index::SegmentInfo result((jobject) NULL);

            if (!parseArgs(args, "ksk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.read(a0, a1, a2));
              return ::org::apache::lucene::index::t_SegmentInfo::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene40SegmentInfoReader), (PyObject *) self, "read", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/packed/EliasFanoEncoder.h"
#include "org/apache/lucene/util/packed/EliasFanoDecoder.h"
#include "java/lang/String.h"
#include "org/apache/lucene/util/Accountable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {

          ::java::lang::Class *EliasFanoEncoder::class$ = NULL;
          jmethodID *EliasFanoEncoder::mids$ = NULL;
          bool EliasFanoEncoder::live$ = false;
          jlong EliasFanoEncoder::DEFAULT_INDEX_INTERVAL = (jlong) 0;

          jclass EliasFanoEncoder::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/packed/EliasFanoEncoder");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_a7e12ca4] = env->getMethodID(cls, "<init>", "(JJ)V");
              mids$[mid_init$_16913989] = env->getMethodID(cls, "<init>", "(JJJ)V");
              mids$[mid_encodeNext_0ee6df2f] = env->getMethodID(cls, "encodeNext", "(J)V");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_getDecoder_38e2d30d] = env->getMethodID(cls, "getDecoder", "()Lorg/apache/lucene/util/packed/EliasFanoDecoder;");
              mids$[mid_getIndexBits_dab10e76] = env->getMethodID(cls, "getIndexBits", "()[J");
              mids$[mid_getLowerBits_dab10e76] = env->getMethodID(cls, "getLowerBits", "()[J");
              mids$[mid_getUpperBits_dab10e76] = env->getMethodID(cls, "getUpperBits", "()[J");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");
              mids$[mid_sufficientlySmallerThanBitSet_a7e12ca8] = env->getStaticMethodID(cls, "sufficientlySmallerThanBitSet", "(JJ)Z");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_INDEX_INTERVAL = env->getStaticLongField(cls, "DEFAULT_INDEX_INTERVAL");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          EliasFanoEncoder::EliasFanoEncoder(jlong a0, jlong a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_a7e12ca4, a0, a1)) {}

          EliasFanoEncoder::EliasFanoEncoder(jlong a0, jlong a1, jlong a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_16913989, a0, a1, a2)) {}

          void EliasFanoEncoder::encodeNext(jlong a0) const
          {
            env->callVoidMethod(this$, mids$[mid_encodeNext_0ee6df2f], a0);
          }

          jboolean EliasFanoEncoder::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          ::org::apache::lucene::util::packed::EliasFanoDecoder EliasFanoEncoder::getDecoder() const
          {
            return ::org::apache::lucene::util::packed::EliasFanoDecoder(env->callObjectMethod(this$, mids$[mid_getDecoder_38e2d30d]));
          }

          JArray< jlong > EliasFanoEncoder::getIndexBits() const
          {
            return JArray< jlong >(env->callObjectMethod(this$, mids$[mid_getIndexBits_dab10e76]));
          }

          JArray< jlong > EliasFanoEncoder::getLowerBits() const
          {
            return JArray< jlong >(env->callObjectMethod(this$, mids$[mid_getLowerBits_dab10e76]));
          }

          JArray< jlong > EliasFanoEncoder::getUpperBits() const
          {
            return JArray< jlong >(env->callObjectMethod(this$, mids$[mid_getUpperBits_dab10e76]));
          }

          jint EliasFanoEncoder::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          jlong EliasFanoEncoder::ramBytesUsed() const
          {
            return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
          }

          jboolean EliasFanoEncoder::sufficientlySmallerThanBitSet(jlong a0, jlong a1)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticBooleanMethod(cls, mids$[mid_sufficientlySmallerThanBitSet_a7e12ca8], a0, a1);
          }

          ::java::lang::String EliasFanoEncoder::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {
          static PyObject *t_EliasFanoEncoder_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_EliasFanoEncoder_instance_(PyTypeObject *type, PyObject *arg);
          static int t_EliasFanoEncoder_init_(t_EliasFanoEncoder *self, PyObject *args, PyObject *kwds);
          static PyObject *t_EliasFanoEncoder_encodeNext(t_EliasFanoEncoder *self, PyObject *arg);
          static PyObject *t_EliasFanoEncoder_equals(t_EliasFanoEncoder *self, PyObject *args);
          static PyObject *t_EliasFanoEncoder_getDecoder(t_EliasFanoEncoder *self);
          static PyObject *t_EliasFanoEncoder_getIndexBits(t_EliasFanoEncoder *self);
          static PyObject *t_EliasFanoEncoder_getLowerBits(t_EliasFanoEncoder *self);
          static PyObject *t_EliasFanoEncoder_getUpperBits(t_EliasFanoEncoder *self);
          static PyObject *t_EliasFanoEncoder_hashCode(t_EliasFanoEncoder *self, PyObject *args);
          static PyObject *t_EliasFanoEncoder_ramBytesUsed(t_EliasFanoEncoder *self);
          static PyObject *t_EliasFanoEncoder_sufficientlySmallerThanBitSet(PyTypeObject *type, PyObject *args);
          static PyObject *t_EliasFanoEncoder_toString(t_EliasFanoEncoder *self, PyObject *args);
          static PyObject *t_EliasFanoEncoder_get__decoder(t_EliasFanoEncoder *self, void *data);
          static PyObject *t_EliasFanoEncoder_get__indexBits(t_EliasFanoEncoder *self, void *data);
          static PyObject *t_EliasFanoEncoder_get__lowerBits(t_EliasFanoEncoder *self, void *data);
          static PyObject *t_EliasFanoEncoder_get__upperBits(t_EliasFanoEncoder *self, void *data);
          static PyGetSetDef t_EliasFanoEncoder__fields_[] = {
            DECLARE_GET_FIELD(t_EliasFanoEncoder, decoder),
            DECLARE_GET_FIELD(t_EliasFanoEncoder, indexBits),
            DECLARE_GET_FIELD(t_EliasFanoEncoder, lowerBits),
            DECLARE_GET_FIELD(t_EliasFanoEncoder, upperBits),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_EliasFanoEncoder__methods_[] = {
            DECLARE_METHOD(t_EliasFanoEncoder, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_EliasFanoEncoder, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_EliasFanoEncoder, encodeNext, METH_O),
            DECLARE_METHOD(t_EliasFanoEncoder, equals, METH_VARARGS),
            DECLARE_METHOD(t_EliasFanoEncoder, getDecoder, METH_NOARGS),
            DECLARE_METHOD(t_EliasFanoEncoder, getIndexBits, METH_NOARGS),
            DECLARE_METHOD(t_EliasFanoEncoder, getLowerBits, METH_NOARGS),
            DECLARE_METHOD(t_EliasFanoEncoder, getUpperBits, METH_NOARGS),
            DECLARE_METHOD(t_EliasFanoEncoder, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_EliasFanoEncoder, ramBytesUsed, METH_NOARGS),
            DECLARE_METHOD(t_EliasFanoEncoder, sufficientlySmallerThanBitSet, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_EliasFanoEncoder, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(EliasFanoEncoder, t_EliasFanoEncoder, ::java::lang::Object, EliasFanoEncoder, t_EliasFanoEncoder_init_, 0, 0, t_EliasFanoEncoder__fields_, 0, 0);

          void t_EliasFanoEncoder::install(PyObject *module)
          {
            installType(&PY_TYPE(EliasFanoEncoder), module, "EliasFanoEncoder", 0);
          }

          void t_EliasFanoEncoder::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(EliasFanoEncoder).tp_dict, "class_", make_descriptor(EliasFanoEncoder::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(EliasFanoEncoder).tp_dict, "wrapfn_", make_descriptor(t_EliasFanoEncoder::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(EliasFanoEncoder).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(EliasFanoEncoder::initializeClass);
            PyDict_SetItemString(PY_TYPE(EliasFanoEncoder).tp_dict, "DEFAULT_INDEX_INTERVAL", make_descriptor(EliasFanoEncoder::DEFAULT_INDEX_INTERVAL));
          }

          static PyObject *t_EliasFanoEncoder_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, EliasFanoEncoder::initializeClass, 1)))
              return NULL;
            return t_EliasFanoEncoder::wrap_Object(EliasFanoEncoder(((t_EliasFanoEncoder *) arg)->object.this$));
          }
          static PyObject *t_EliasFanoEncoder_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, EliasFanoEncoder::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_EliasFanoEncoder_init_(t_EliasFanoEncoder *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                jlong a0;
                jlong a1;
                EliasFanoEncoder object((jobject) NULL);

                if (!parseArgs(args, "JJ", &a0, &a1))
                {
                  INT_CALL(object = EliasFanoEncoder(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                jlong a0;
                jlong a1;
                jlong a2;
                EliasFanoEncoder object((jobject) NULL);

                if (!parseArgs(args, "JJJ", &a0, &a1, &a2))
                {
                  INT_CALL(object = EliasFanoEncoder(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_EliasFanoEncoder_encodeNext(t_EliasFanoEncoder *self, PyObject *arg)
          {
            jlong a0;

            if (!parseArg(arg, "J", &a0))
            {
              OBJ_CALL(self->object.encodeNext(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "encodeNext", arg);
            return NULL;
          }

          static PyObject *t_EliasFanoEncoder_equals(t_EliasFanoEncoder *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(EliasFanoEncoder), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_EliasFanoEncoder_getDecoder(t_EliasFanoEncoder *self)
          {
            ::org::apache::lucene::util::packed::EliasFanoDecoder result((jobject) NULL);
            OBJ_CALL(result = self->object.getDecoder());
            return ::org::apache::lucene::util::packed::t_EliasFanoDecoder::wrap_Object(result);
          }

          static PyObject *t_EliasFanoEncoder_getIndexBits(t_EliasFanoEncoder *self)
          {
            JArray< jlong > result((jobject) NULL);
            OBJ_CALL(result = self->object.getIndexBits());
            return result.wrap();
          }

          static PyObject *t_EliasFanoEncoder_getLowerBits(t_EliasFanoEncoder *self)
          {
            JArray< jlong > result((jobject) NULL);
            OBJ_CALL(result = self->object.getLowerBits());
            return result.wrap();
          }

          static PyObject *t_EliasFanoEncoder_getUpperBits(t_EliasFanoEncoder *self)
          {
            JArray< jlong > result((jobject) NULL);
            OBJ_CALL(result = self->object.getUpperBits());
            return result.wrap();
          }

          static PyObject *t_EliasFanoEncoder_hashCode(t_EliasFanoEncoder *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(EliasFanoEncoder), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_EliasFanoEncoder_ramBytesUsed(t_EliasFanoEncoder *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.ramBytesUsed());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_EliasFanoEncoder_sufficientlySmallerThanBitSet(PyTypeObject *type, PyObject *args)
          {
            jlong a0;
            jlong a1;
            jboolean result;

            if (!parseArgs(args, "JJ", &a0, &a1))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::packed::EliasFanoEncoder::sufficientlySmallerThanBitSet(a0, a1));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError(type, "sufficientlySmallerThanBitSet", args);
            return NULL;
          }

          static PyObject *t_EliasFanoEncoder_toString(t_EliasFanoEncoder *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(EliasFanoEncoder), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_EliasFanoEncoder_get__decoder(t_EliasFanoEncoder *self, void *data)
          {
            ::org::apache::lucene::util::packed::EliasFanoDecoder value((jobject) NULL);
            OBJ_CALL(value = self->object.getDecoder());
            return ::org::apache::lucene::util::packed::t_EliasFanoDecoder::wrap_Object(value);
          }

          static PyObject *t_EliasFanoEncoder_get__indexBits(t_EliasFanoEncoder *self, void *data)
          {
            JArray< jlong > value((jobject) NULL);
            OBJ_CALL(value = self->object.getIndexBits());
            return value.wrap();
          }

          static PyObject *t_EliasFanoEncoder_get__lowerBits(t_EliasFanoEncoder *self, void *data)
          {
            JArray< jlong > value((jobject) NULL);
            OBJ_CALL(value = self->object.getLowerBits());
            return value.wrap();
          }

          static PyObject *t_EliasFanoEncoder_get__upperBits(t_EliasFanoEncoder *self, void *data)
          {
            JArray< jlong > value((jobject) NULL);
            OBJ_CALL(value = self->object.getUpperBits());
            return value.wrap();
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/fst/FSTEnum.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {

          ::java::lang::Class *FSTEnum::class$ = NULL;
          jmethodID *FSTEnum::mids$ = NULL;
          bool FSTEnum::live$ = false;

          jclass FSTEnum::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/fst/FSTEnum");

              mids$ = new jmethodID[max_mid];
              mids$[mid_grow_54c6a166] = env->getMethodID(cls, "grow", "()V");
              mids$[mid_doNext_54c6a166] = env->getMethodID(cls, "doNext", "()V");
              mids$[mid_getTargetLabel_54c6a179] = env->getMethodID(cls, "getTargetLabel", "()I");
              mids$[mid_getCurrentLabel_54c6a179] = env->getMethodID(cls, "getCurrentLabel", "()I");
              mids$[mid_setCurrentLabel_39c7bd3c] = env->getMethodID(cls, "setCurrentLabel", "(I)V");
              mids$[mid_doSeekCeil_54c6a166] = env->getMethodID(cls, "doSeekCeil", "()V");
              mids$[mid_doSeekFloor_54c6a166] = env->getMethodID(cls, "doSeekFloor", "()V");
              mids$[mid_doSeekExact_54c6a16a] = env->getMethodID(cls, "doSeekExact", "()Z");
              mids$[mid_rewindPrefix_54c6a166] = env->getMethodID(cls, "rewindPrefix", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {
          static PyObject *t_FSTEnum_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FSTEnum_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FSTEnum_of_(t_FSTEnum *self, PyObject *args);
          static PyObject *t_FSTEnum_get__parameters_(t_FSTEnum *self, void *data);
          static PyGetSetDef t_FSTEnum__fields_[] = {
            DECLARE_GET_FIELD(t_FSTEnum, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_FSTEnum__methods_[] = {
            DECLARE_METHOD(t_FSTEnum, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FSTEnum, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FSTEnum, of_, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FSTEnum, t_FSTEnum, ::java::lang::Object, FSTEnum, abstract_init, 0, 0, t_FSTEnum__fields_, 0, 0);
          PyObject *t_FSTEnum::wrap_Object(const FSTEnum& object, PyTypeObject *p0)
          {
            PyObject *obj = t_FSTEnum::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_FSTEnum *self = (t_FSTEnum *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_FSTEnum::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_FSTEnum::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_FSTEnum *self = (t_FSTEnum *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_FSTEnum::install(PyObject *module)
          {
            installType(&PY_TYPE(FSTEnum), module, "FSTEnum", 0);
          }

          void t_FSTEnum::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FSTEnum).tp_dict, "class_", make_descriptor(FSTEnum::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FSTEnum).tp_dict, "wrapfn_", make_descriptor(t_FSTEnum::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FSTEnum).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FSTEnum_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FSTEnum::initializeClass, 1)))
              return NULL;
            return t_FSTEnum::wrap_Object(FSTEnum(((t_FSTEnum *) arg)->object.this$));
          }
          static PyObject *t_FSTEnum_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FSTEnum::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_FSTEnum_of_(t_FSTEnum *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }
          static PyObject *t_FSTEnum_get__parameters_(t_FSTEnum *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/fst/FST$INPUT_TYPE.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {

          ::java::lang::Class *FST$INPUT_TYPE::class$ = NULL;
          jmethodID *FST$INPUT_TYPE::mids$ = NULL;
          bool FST$INPUT_TYPE::live$ = false;
          FST$INPUT_TYPE *FST$INPUT_TYPE::BYTE1 = NULL;
          FST$INPUT_TYPE *FST$INPUT_TYPE::BYTE2 = NULL;
          FST$INPUT_TYPE *FST$INPUT_TYPE::BYTE4 = NULL;

          jclass FST$INPUT_TYPE::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/fst/FST$INPUT_TYPE");

              mids$ = new jmethodID[max_mid];
              mids$[mid_valueOf_06b999b9] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/util/fst/FST$INPUT_TYPE;");
              mids$[mid_values_da3dc83f] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/util/fst/FST$INPUT_TYPE;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              BYTE1 = new FST$INPUT_TYPE(env->getStaticObjectField(cls, "BYTE1", "Lorg/apache/lucene/util/fst/FST$INPUT_TYPE;"));
              BYTE2 = new FST$INPUT_TYPE(env->getStaticObjectField(cls, "BYTE2", "Lorg/apache/lucene/util/fst/FST$INPUT_TYPE;"));
              BYTE4 = new FST$INPUT_TYPE(env->getStaticObjectField(cls, "BYTE4", "Lorg/apache/lucene/util/fst/FST$INPUT_TYPE;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FST$INPUT_TYPE FST$INPUT_TYPE::valueOf(const ::java::lang::String & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return FST$INPUT_TYPE(env->callStaticObjectMethod(cls, mids$[mid_valueOf_06b999b9], a0.this$));
          }

          JArray< FST$INPUT_TYPE > FST$INPUT_TYPE::values()
          {
            jclass cls = env->getClass(initializeClass);
            return JArray< FST$INPUT_TYPE >(env->callStaticObjectMethod(cls, mids$[mid_values_da3dc83f]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {
          static PyObject *t_FST$INPUT_TYPE_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FST$INPUT_TYPE_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FST$INPUT_TYPE_of_(t_FST$INPUT_TYPE *self, PyObject *args);
          static PyObject *t_FST$INPUT_TYPE_valueOf(PyTypeObject *type, PyObject *args);
          static PyObject *t_FST$INPUT_TYPE_values(PyTypeObject *type);
          static PyObject *t_FST$INPUT_TYPE_get__parameters_(t_FST$INPUT_TYPE *self, void *data);
          static PyGetSetDef t_FST$INPUT_TYPE__fields_[] = {
            DECLARE_GET_FIELD(t_FST$INPUT_TYPE, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_FST$INPUT_TYPE__methods_[] = {
            DECLARE_METHOD(t_FST$INPUT_TYPE, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FST$INPUT_TYPE, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FST$INPUT_TYPE, of_, METH_VARARGS),
            DECLARE_METHOD(t_FST$INPUT_TYPE, valueOf, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_FST$INPUT_TYPE, values, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FST$INPUT_TYPE, t_FST$INPUT_TYPE, ::java::lang::Enum, FST$INPUT_TYPE, abstract_init, 0, 0, t_FST$INPUT_TYPE__fields_, 0, 0);
          PyObject *t_FST$INPUT_TYPE::wrap_Object(const FST$INPUT_TYPE& object, PyTypeObject *p0)
          {
            PyObject *obj = t_FST$INPUT_TYPE::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_FST$INPUT_TYPE *self = (t_FST$INPUT_TYPE *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_FST$INPUT_TYPE::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_FST$INPUT_TYPE::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_FST$INPUT_TYPE *self = (t_FST$INPUT_TYPE *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_FST$INPUT_TYPE::install(PyObject *module)
          {
            installType(&PY_TYPE(FST$INPUT_TYPE), module, "FST$INPUT_TYPE", 0);
          }

          void t_FST$INPUT_TYPE::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FST$INPUT_TYPE).tp_dict, "class_", make_descriptor(FST$INPUT_TYPE::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FST$INPUT_TYPE).tp_dict, "wrapfn_", make_descriptor(t_FST$INPUT_TYPE::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FST$INPUT_TYPE).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(FST$INPUT_TYPE::initializeClass);
            PyDict_SetItemString(PY_TYPE(FST$INPUT_TYPE).tp_dict, "BYTE1", make_descriptor(t_FST$INPUT_TYPE::wrap_Object(*FST$INPUT_TYPE::BYTE1)));
            PyDict_SetItemString(PY_TYPE(FST$INPUT_TYPE).tp_dict, "BYTE2", make_descriptor(t_FST$INPUT_TYPE::wrap_Object(*FST$INPUT_TYPE::BYTE2)));
            PyDict_SetItemString(PY_TYPE(FST$INPUT_TYPE).tp_dict, "BYTE4", make_descriptor(t_FST$INPUT_TYPE::wrap_Object(*FST$INPUT_TYPE::BYTE4)));
          }

          static PyObject *t_FST$INPUT_TYPE_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FST$INPUT_TYPE::initializeClass, 1)))
              return NULL;
            return t_FST$INPUT_TYPE::wrap_Object(FST$INPUT_TYPE(((t_FST$INPUT_TYPE *) arg)->object.this$));
          }
          static PyObject *t_FST$INPUT_TYPE_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FST$INPUT_TYPE::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_FST$INPUT_TYPE_of_(t_FST$INPUT_TYPE *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static PyObject *t_FST$INPUT_TYPE_valueOf(PyTypeObject *type, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            FST$INPUT_TYPE result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::fst::FST$INPUT_TYPE::valueOf(a0));
              return t_FST$INPUT_TYPE::wrap_Object(result);
            }

            return callSuper(type, "valueOf", args, 2);
          }

          static PyObject *t_FST$INPUT_TYPE_values(PyTypeObject *type)
          {
            JArray< FST$INPUT_TYPE > result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::util::fst::FST$INPUT_TYPE::values());
            return JArray<jobject>(result.this$).wrap(t_FST$INPUT_TYPE::wrap_jobject);
          }
          static PyObject *t_FST$INPUT_TYPE_get__parameters_(t_FST$INPUT_TYPE *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/fr/FrenchLightStemFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fr {

          ::java::lang::Class *FrenchLightStemFilter::class$ = NULL;
          jmethodID *FrenchLightStemFilter::mids$ = NULL;
          bool FrenchLightStemFilter::live$ = false;

          jclass FrenchLightStemFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/fr/FrenchLightStemFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FrenchLightStemFilter::FrenchLightStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean FrenchLightStemFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fr {
          static PyObject *t_FrenchLightStemFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FrenchLightStemFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FrenchLightStemFilter_init_(t_FrenchLightStemFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FrenchLightStemFilter_incrementToken(t_FrenchLightStemFilter *self, PyObject *args);

          static PyMethodDef t_FrenchLightStemFilter__methods_[] = {
            DECLARE_METHOD(t_FrenchLightStemFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FrenchLightStemFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FrenchLightStemFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FrenchLightStemFilter, t_FrenchLightStemFilter, ::org::apache::lucene::analysis::TokenFilter, FrenchLightStemFilter, t_FrenchLightStemFilter_init_, 0, 0, 0, 0, 0);

          void t_FrenchLightStemFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(FrenchLightStemFilter), module, "FrenchLightStemFilter", 0);
          }

          void t_FrenchLightStemFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FrenchLightStemFilter).tp_dict, "class_", make_descriptor(FrenchLightStemFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FrenchLightStemFilter).tp_dict, "wrapfn_", make_descriptor(t_FrenchLightStemFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FrenchLightStemFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FrenchLightStemFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FrenchLightStemFilter::initializeClass, 1)))
              return NULL;
            return t_FrenchLightStemFilter::wrap_Object(FrenchLightStemFilter(((t_FrenchLightStemFilter *) arg)->object.this$));
          }
          static PyObject *t_FrenchLightStemFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FrenchLightStemFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FrenchLightStemFilter_init_(t_FrenchLightStemFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            FrenchLightStemFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = FrenchLightStemFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_FrenchLightStemFilter_incrementToken(t_FrenchLightStemFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(FrenchLightStemFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ru/RussianLightStemFilterFactory.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ru {

          ::java::lang::Class *RussianLightStemFilterFactory::class$ = NULL;
          jmethodID *RussianLightStemFilterFactory::mids$ = NULL;
          bool RussianLightStemFilterFactory::live$ = false;

          jclass RussianLightStemFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ru/RussianLightStemFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          RussianLightStemFilterFactory::RussianLightStemFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream RussianLightStemFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ru {
          static PyObject *t_RussianLightStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_RussianLightStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_RussianLightStemFilterFactory_init_(t_RussianLightStemFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_RussianLightStemFilterFactory_create(t_RussianLightStemFilterFactory *self, PyObject *args);

          static PyMethodDef t_RussianLightStemFilterFactory__methods_[] = {
            DECLARE_METHOD(t_RussianLightStemFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_RussianLightStemFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_RussianLightStemFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(RussianLightStemFilterFactory, t_RussianLightStemFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, RussianLightStemFilterFactory, t_RussianLightStemFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_RussianLightStemFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(RussianLightStemFilterFactory), module, "RussianLightStemFilterFactory", 0);
          }

          void t_RussianLightStemFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(RussianLightStemFilterFactory).tp_dict, "class_", make_descriptor(RussianLightStemFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(RussianLightStemFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_RussianLightStemFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(RussianLightStemFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_RussianLightStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, RussianLightStemFilterFactory::initializeClass, 1)))
              return NULL;
            return t_RussianLightStemFilterFactory::wrap_Object(RussianLightStemFilterFactory(((t_RussianLightStemFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_RussianLightStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, RussianLightStemFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_RussianLightStemFilterFactory_init_(t_RussianLightStemFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            RussianLightStemFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = RussianLightStemFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_RussianLightStemFilterFactory_create(t_RussianLightStemFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(RussianLightStemFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/AttributeSource.h"
#include "org/apache/lucene/util/AttributeImpl.h"
#include "org/apache/lucene/util/Attribute.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/AttributeSource$State.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/util/Iterator.h"
#include "org/apache/lucene/util/AttributeReflector.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *AttributeSource::class$ = NULL;
        jmethodID *AttributeSource::mids$ = NULL;
        bool AttributeSource::live$ = false;
        ::org::apache::lucene::util::AttributeFactory *AttributeSource::DEFAULT_ATTRIBUTE_FACTORY = NULL;

        jclass AttributeSource::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/AttributeSource");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_init$_a5f989be] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/AttributeFactory;)V");
            mids$[mid_addAttribute_2e7bf8aa] = env->getMethodID(cls, "addAttribute", "(Ljava/lang/Class;)Lorg/apache/lucene/util/Attribute;");
            mids$[mid_addAttributeImpl_d86caa9f] = env->getMethodID(cls, "addAttributeImpl", "(Lorg/apache/lucene/util/AttributeImpl;)V");
            mids$[mid_captureState_0f9ed4d4] = env->getMethodID(cls, "captureState", "()Lorg/apache/lucene/util/AttributeSource$State;");
            mids$[mid_clearAttributes_54c6a166] = env->getMethodID(cls, "clearAttributes", "()V");
            mids$[mid_cloneAttributes_f901022b] = env->getMethodID(cls, "cloneAttributes", "()Lorg/apache/lucene/util/AttributeSource;");
            mids$[mid_copyTo_aea2d6ea] = env->getMethodID(cls, "copyTo", "(Lorg/apache/lucene/util/AttributeSource;)V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_getAttribute_2e7bf8aa] = env->getMethodID(cls, "getAttribute", "(Ljava/lang/Class;)Lorg/apache/lucene/util/Attribute;");
            mids$[mid_getAttributeClassesIterator_40858c90] = env->getMethodID(cls, "getAttributeClassesIterator", "()Ljava/util/Iterator;");
            mids$[mid_getAttributeFactory_bb394e5b] = env->getMethodID(cls, "getAttributeFactory", "()Lorg/apache/lucene/util/AttributeFactory;");
            mids$[mid_getAttributeImplsIterator_40858c90] = env->getMethodID(cls, "getAttributeImplsIterator", "()Ljava/util/Iterator;");
            mids$[mid_hasAttribute_a5deaff8] = env->getMethodID(cls, "hasAttribute", "(Ljava/lang/Class;)Z");
            mids$[mid_hasAttributes_54c6a16a] = env->getMethodID(cls, "hasAttributes", "()Z");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_reflectAsString_445a175e] = env->getMethodID(cls, "reflectAsString", "(Z)Ljava/lang/String;");
            mids$[mid_reflectWith_5f3f5102] = env->getMethodID(cls, "reflectWith", "(Lorg/apache/lucene/util/AttributeReflector;)V");
            mids$[mid_restoreState_b31fff69] = env->getMethodID(cls, "restoreState", "(Lorg/apache/lucene/util/AttributeSource$State;)V");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            DEFAULT_ATTRIBUTE_FACTORY = new ::org::apache::lucene::util::AttributeFactory(env->getStaticObjectField(cls, "DEFAULT_ATTRIBUTE_FACTORY", "Lorg/apache/lucene/util/AttributeFactory;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        AttributeSource::AttributeSource() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        AttributeSource::AttributeSource(const ::org::apache::lucene::util::AttributeFactory & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_a5f989be, a0.this$)) {}

        ::org::apache::lucene::util::Attribute AttributeSource::addAttribute(const ::java::lang::Class & a0) const
        {
          return ::org::apache::lucene::util::Attribute(env->callObjectMethod(this$, mids$[mid_addAttribute_2e7bf8aa], a0.this$));
        }

        void AttributeSource::addAttributeImpl(const ::org::apache::lucene::util::AttributeImpl & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_addAttributeImpl_d86caa9f], a0.this$);
        }

        ::org::apache::lucene::util::AttributeSource$State AttributeSource::captureState() const
        {
          return ::org::apache::lucene::util::AttributeSource$State(env->callObjectMethod(this$, mids$[mid_captureState_0f9ed4d4]));
        }

        void AttributeSource::clearAttributes() const
        {
          env->callVoidMethod(this$, mids$[mid_clearAttributes_54c6a166]);
        }

        AttributeSource AttributeSource::cloneAttributes() const
        {
          return AttributeSource(env->callObjectMethod(this$, mids$[mid_cloneAttributes_f901022b]));
        }

        void AttributeSource::copyTo(const AttributeSource & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_copyTo_aea2d6ea], a0.this$);
        }

        jboolean AttributeSource::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        ::org::apache::lucene::util::Attribute AttributeSource::getAttribute(const ::java::lang::Class & a0) const
        {
          return ::org::apache::lucene::util::Attribute(env->callObjectMethod(this$, mids$[mid_getAttribute_2e7bf8aa], a0.this$));
        }

        ::java::util::Iterator AttributeSource::getAttributeClassesIterator() const
        {
          return ::java::util::Iterator(env->callObjectMethod(this$, mids$[mid_getAttributeClassesIterator_40858c90]));
        }

        ::org::apache::lucene::util::AttributeFactory AttributeSource::getAttributeFactory() const
        {
          return ::org::apache::lucene::util::AttributeFactory(env->callObjectMethod(this$, mids$[mid_getAttributeFactory_bb394e5b]));
        }

        ::java::util::Iterator AttributeSource::getAttributeImplsIterator() const
        {
          return ::java::util::Iterator(env->callObjectMethod(this$, mids$[mid_getAttributeImplsIterator_40858c90]));
        }

        jboolean AttributeSource::hasAttribute(const ::java::lang::Class & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasAttribute_a5deaff8], a0.this$);
        }

        jboolean AttributeSource::hasAttributes() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasAttributes_54c6a16a]);
        }

        jint AttributeSource::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        ::java::lang::String AttributeSource::reflectAsString(jboolean a0) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_reflectAsString_445a175e], a0));
        }

        void AttributeSource::reflectWith(const ::org::apache::lucene::util::AttributeReflector & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_reflectWith_5f3f5102], a0.this$);
        }

        void AttributeSource::restoreState(const ::org::apache::lucene::util::AttributeSource$State & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_restoreState_b31fff69], a0.this$);
        }

        ::java::lang::String AttributeSource::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_AttributeSource_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_AttributeSource_instance_(PyTypeObject *type, PyObject *arg);
        static int t_AttributeSource_init_(t_AttributeSource *self, PyObject *args, PyObject *kwds);
        static PyObject *t_AttributeSource_addAttribute(t_AttributeSource *self, PyObject *arg);
        static PyObject *t_AttributeSource_addAttributeImpl(t_AttributeSource *self, PyObject *arg);
        static PyObject *t_AttributeSource_captureState(t_AttributeSource *self);
        static PyObject *t_AttributeSource_clearAttributes(t_AttributeSource *self);
        static PyObject *t_AttributeSource_cloneAttributes(t_AttributeSource *self);
        static PyObject *t_AttributeSource_copyTo(t_AttributeSource *self, PyObject *arg);
        static PyObject *t_AttributeSource_equals(t_AttributeSource *self, PyObject *args);
        static PyObject *t_AttributeSource_getAttribute(t_AttributeSource *self, PyObject *arg);
        static PyObject *t_AttributeSource_getAttributeClassesIterator(t_AttributeSource *self);
        static PyObject *t_AttributeSource_getAttributeFactory(t_AttributeSource *self);
        static PyObject *t_AttributeSource_getAttributeImplsIterator(t_AttributeSource *self);
        static PyObject *t_AttributeSource_hasAttribute(t_AttributeSource *self, PyObject *arg);
        static PyObject *t_AttributeSource_hasAttributes(t_AttributeSource *self);
        static PyObject *t_AttributeSource_hashCode(t_AttributeSource *self, PyObject *args);
        static PyObject *t_AttributeSource_reflectAsString(t_AttributeSource *self, PyObject *arg);
        static PyObject *t_AttributeSource_reflectWith(t_AttributeSource *self, PyObject *arg);
        static PyObject *t_AttributeSource_restoreState(t_AttributeSource *self, PyObject *arg);
        static PyObject *t_AttributeSource_toString(t_AttributeSource *self, PyObject *args);
        static PyObject *t_AttributeSource_get__attributeClassesIterator(t_AttributeSource *self, void *data);
        static PyObject *t_AttributeSource_get__attributeFactory(t_AttributeSource *self, void *data);
        static PyObject *t_AttributeSource_get__attributeImplsIterator(t_AttributeSource *self, void *data);
        static PyGetSetDef t_AttributeSource__fields_[] = {
          DECLARE_GET_FIELD(t_AttributeSource, attributeClassesIterator),
          DECLARE_GET_FIELD(t_AttributeSource, attributeFactory),
          DECLARE_GET_FIELD(t_AttributeSource, attributeImplsIterator),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_AttributeSource__methods_[] = {
          DECLARE_METHOD(t_AttributeSource, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_AttributeSource, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_AttributeSource, addAttribute, METH_O),
          DECLARE_METHOD(t_AttributeSource, addAttributeImpl, METH_O),
          DECLARE_METHOD(t_AttributeSource, captureState, METH_NOARGS),
          DECLARE_METHOD(t_AttributeSource, clearAttributes, METH_NOARGS),
          DECLARE_METHOD(t_AttributeSource, cloneAttributes, METH_NOARGS),
          DECLARE_METHOD(t_AttributeSource, copyTo, METH_O),
          DECLARE_METHOD(t_AttributeSource, equals, METH_VARARGS),
          DECLARE_METHOD(t_AttributeSource, getAttribute, METH_O),
          DECLARE_METHOD(t_AttributeSource, getAttributeClassesIterator, METH_NOARGS),
          DECLARE_METHOD(t_AttributeSource, getAttributeFactory, METH_NOARGS),
          DECLARE_METHOD(t_AttributeSource, getAttributeImplsIterator, METH_NOARGS),
          DECLARE_METHOD(t_AttributeSource, hasAttribute, METH_O),
          DECLARE_METHOD(t_AttributeSource, hasAttributes, METH_NOARGS),
          DECLARE_METHOD(t_AttributeSource, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_AttributeSource, reflectAsString, METH_O),
          DECLARE_METHOD(t_AttributeSource, reflectWith, METH_O),
          DECLARE_METHOD(t_AttributeSource, restoreState, METH_O),
          DECLARE_METHOD(t_AttributeSource, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(AttributeSource, t_AttributeSource, ::java::lang::Object, AttributeSource, t_AttributeSource_init_, 0, 0, t_AttributeSource__fields_, 0, 0);

        void t_AttributeSource::install(PyObject *module)
        {
          installType(&PY_TYPE(AttributeSource), module, "AttributeSource", 0);
          PyDict_SetItemString(PY_TYPE(AttributeSource).tp_dict, "State", make_descriptor(&PY_TYPE(AttributeSource$State)));
        }

        void t_AttributeSource::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(AttributeSource).tp_dict, "class_", make_descriptor(AttributeSource::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(AttributeSource).tp_dict, "wrapfn_", make_descriptor(t_AttributeSource::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(AttributeSource).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(AttributeSource::initializeClass);
          PyDict_SetItemString(PY_TYPE(AttributeSource).tp_dict, "DEFAULT_ATTRIBUTE_FACTORY", make_descriptor(::org::apache::lucene::util::t_AttributeFactory::wrap_Object(*AttributeSource::DEFAULT_ATTRIBUTE_FACTORY)));
        }

        static PyObject *t_AttributeSource_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, AttributeSource::initializeClass, 1)))
            return NULL;
          return t_AttributeSource::wrap_Object(AttributeSource(((t_AttributeSource *) arg)->object.this$));
        }
        static PyObject *t_AttributeSource_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, AttributeSource::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_AttributeSource_init_(t_AttributeSource *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              AttributeSource object((jobject) NULL);

              INT_CALL(object = AttributeSource());
              self->object = object;
              break;
            }
            goto err;
           case 1:
            {
              ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
              AttributeSource object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::util::AttributeFactory::initializeClass, &a0))
              {
                INT_CALL(object = AttributeSource(a0));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_AttributeSource_addAttribute(t_AttributeSource *self, PyObject *arg)
        {
          ::java::lang::Class a0((jobject) NULL);
          PyTypeObject **p0;
          ::org::apache::lucene::util::Attribute result((jobject) NULL);

          if (!parseArg(arg, "K", ::java::lang::Class::initializeClass, &a0, &p0, ::java::lang::t_Class::parameters_))
          {
            OBJ_CALL(result = self->object.addAttribute(a0));
            return p0 != NULL && p0[0] != NULL ? wrapType(p0[0], result.this$) : ::org::apache::lucene::util::t_Attribute::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "addAttribute", arg);
          return NULL;
        }

        static PyObject *t_AttributeSource_addAttributeImpl(t_AttributeSource *self, PyObject *arg)
        {
          ::org::apache::lucene::util::AttributeImpl a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::util::AttributeImpl::initializeClass, &a0))
          {
            OBJ_CALL(self->object.addAttributeImpl(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "addAttributeImpl", arg);
          return NULL;
        }

        static PyObject *t_AttributeSource_captureState(t_AttributeSource *self)
        {
          ::org::apache::lucene::util::AttributeSource$State result((jobject) NULL);
          OBJ_CALL(result = self->object.captureState());
          return ::org::apache::lucene::util::t_AttributeSource$State::wrap_Object(result);
        }

        static PyObject *t_AttributeSource_clearAttributes(t_AttributeSource *self)
        {
          OBJ_CALL(self->object.clearAttributes());
          Py_RETURN_NONE;
        }

        static PyObject *t_AttributeSource_cloneAttributes(t_AttributeSource *self)
        {
          AttributeSource result((jobject) NULL);
          OBJ_CALL(result = self->object.cloneAttributes());
          return t_AttributeSource::wrap_Object(result);
        }

        static PyObject *t_AttributeSource_copyTo(t_AttributeSource *self, PyObject *arg)
        {
          AttributeSource a0((jobject) NULL);

          if (!parseArg(arg, "k", AttributeSource::initializeClass, &a0))
          {
            OBJ_CALL(self->object.copyTo(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "copyTo", arg);
          return NULL;
        }

        static PyObject *t_AttributeSource_equals(t_AttributeSource *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(AttributeSource), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_AttributeSource_getAttribute(t_AttributeSource *self, PyObject *arg)
        {
          ::java::lang::Class a0((jobject) NULL);
          PyTypeObject **p0;
          ::org::apache::lucene::util::Attribute result((jobject) NULL);

          if (!parseArg(arg, "K", ::java::lang::Class::initializeClass, &a0, &p0, ::java::lang::t_Class::parameters_))
          {
            OBJ_CALL(result = self->object.getAttribute(a0));
            return p0 != NULL && p0[0] != NULL ? wrapType(p0[0], result.this$) : ::org::apache::lucene::util::t_Attribute::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getAttribute", arg);
          return NULL;
        }

        static PyObject *t_AttributeSource_getAttributeClassesIterator(t_AttributeSource *self)
        {
          ::java::util::Iterator result((jobject) NULL);
          OBJ_CALL(result = self->object.getAttributeClassesIterator());
          return ::java::util::t_Iterator::wrap_Object(result);
        }

        static PyObject *t_AttributeSource_getAttributeFactory(t_AttributeSource *self)
        {
          ::org::apache::lucene::util::AttributeFactory result((jobject) NULL);
          OBJ_CALL(result = self->object.getAttributeFactory());
          return ::org::apache::lucene::util::t_AttributeFactory::wrap_Object(result);
        }

        static PyObject *t_AttributeSource_getAttributeImplsIterator(t_AttributeSource *self)
        {
          ::java::util::Iterator result((jobject) NULL);
          OBJ_CALL(result = self->object.getAttributeImplsIterator());
          return ::java::util::t_Iterator::wrap_Object(result, &::org::apache::lucene::util::PY_TYPE(AttributeImpl));
        }

        static PyObject *t_AttributeSource_hasAttribute(t_AttributeSource *self, PyObject *arg)
        {
          ::java::lang::Class a0((jobject) NULL);
          PyTypeObject **p0;
          jboolean result;

          if (!parseArg(arg, "K", ::java::lang::Class::initializeClass, &a0, &p0, ::java::lang::t_Class::parameters_))
          {
            OBJ_CALL(result = self->object.hasAttribute(a0));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError((PyObject *) self, "hasAttribute", arg);
          return NULL;
        }

        static PyObject *t_AttributeSource_hasAttributes(t_AttributeSource *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.hasAttributes());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_AttributeSource_hashCode(t_AttributeSource *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(AttributeSource), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_AttributeSource_reflectAsString(t_AttributeSource *self, PyObject *arg)
        {
          jboolean a0;
          ::java::lang::String result((jobject) NULL);

          if (!parseArg(arg, "Z", &a0))
          {
            OBJ_CALL(result = self->object.reflectAsString(a0));
            return j2p(result);
          }

          PyErr_SetArgsError((PyObject *) self, "reflectAsString", arg);
          return NULL;
        }

        static PyObject *t_AttributeSource_reflectWith(t_AttributeSource *self, PyObject *arg)
        {
          ::org::apache::lucene::util::AttributeReflector a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::util::AttributeReflector::initializeClass, &a0))
          {
            OBJ_CALL(self->object.reflectWith(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "reflectWith", arg);
          return NULL;
        }

        static PyObject *t_AttributeSource_restoreState(t_AttributeSource *self, PyObject *arg)
        {
          ::org::apache::lucene::util::AttributeSource$State a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::util::AttributeSource$State::initializeClass, &a0))
          {
            OBJ_CALL(self->object.restoreState(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "restoreState", arg);
          return NULL;
        }

        static PyObject *t_AttributeSource_toString(t_AttributeSource *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(AttributeSource), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_AttributeSource_get__attributeClassesIterator(t_AttributeSource *self, void *data)
        {
          ::java::util::Iterator value((jobject) NULL);
          OBJ_CALL(value = self->object.getAttributeClassesIterator());
          return ::java::util::t_Iterator::wrap_Object(value);
        }

        static PyObject *t_AttributeSource_get__attributeFactory(t_AttributeSource *self, void *data)
        {
          ::org::apache::lucene::util::AttributeFactory value((jobject) NULL);
          OBJ_CALL(value = self->object.getAttributeFactory());
          return ::org::apache::lucene::util::t_AttributeFactory::wrap_Object(value);
        }

        static PyObject *t_AttributeSource_get__attributeImplsIterator(t_AttributeSource *self, void *data)
        {
          ::java::util::Iterator value((jobject) NULL);
          OBJ_CALL(value = self->object.getAttributeImplsIterator());
          return ::java::util::t_Iterator::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/ByteFieldSource.h"
#include "org/apache/lucene/search/FieldCache$ByteParser.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *ByteFieldSource::class$ = NULL;
            jmethodID *ByteFieldSource::mids$ = NULL;
            bool ByteFieldSource::live$ = false;

            jclass ByteFieldSource::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/ByteFieldSource");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
                mids$[mid_init$_03909c56] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/search/FieldCache$ByteParser;)V");
                mids$[mid_description_14c7b5c5] = env->getMethodID(cls, "description", "()Ljava/lang/String;");
                mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_getValues_4c566485] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/queries/function/FunctionValues;");
                mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            ByteFieldSource::ByteFieldSource(const ::java::lang::String & a0) : ::org::apache::lucene::queries::function::valuesource::FieldCacheSource(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

            ByteFieldSource::ByteFieldSource(const ::java::lang::String & a0, const ::org::apache::lucene::search::FieldCache$ByteParser & a1) : ::org::apache::lucene::queries::function::valuesource::FieldCacheSource(env->newObject(initializeClass, &mids$, mid_init$_03909c56, a0.this$, a1.this$)) {}

            ::java::lang::String ByteFieldSource::description() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_description_14c7b5c5]));
            }

            jboolean ByteFieldSource::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
            }

            ::org::apache::lucene::queries::function::FunctionValues ByteFieldSource::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::FunctionValues(env->callObjectMethod(this$, mids$[mid_getValues_4c566485], a0.this$, a1.this$));
            }

            jint ByteFieldSource::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_ByteFieldSource_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_ByteFieldSource_instance_(PyTypeObject *type, PyObject *arg);
            static int t_ByteFieldSource_init_(t_ByteFieldSource *self, PyObject *args, PyObject *kwds);
            static PyObject *t_ByteFieldSource_description(t_ByteFieldSource *self, PyObject *args);
            static PyObject *t_ByteFieldSource_equals(t_ByteFieldSource *self, PyObject *args);
            static PyObject *t_ByteFieldSource_getValues(t_ByteFieldSource *self, PyObject *args);
            static PyObject *t_ByteFieldSource_hashCode(t_ByteFieldSource *self, PyObject *args);

            static PyMethodDef t_ByteFieldSource__methods_[] = {
              DECLARE_METHOD(t_ByteFieldSource, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_ByteFieldSource, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_ByteFieldSource, description, METH_VARARGS),
              DECLARE_METHOD(t_ByteFieldSource, equals, METH_VARARGS),
              DECLARE_METHOD(t_ByteFieldSource, getValues, METH_VARARGS),
              DECLARE_METHOD(t_ByteFieldSource, hashCode, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(ByteFieldSource, t_ByteFieldSource, ::org::apache::lucene::queries::function::valuesource::FieldCacheSource, ByteFieldSource, t_ByteFieldSource_init_, 0, 0, 0, 0, 0);

            void t_ByteFieldSource::install(PyObject *module)
            {
              installType(&PY_TYPE(ByteFieldSource), module, "ByteFieldSource", 0);
            }

            void t_ByteFieldSource::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(ByteFieldSource).tp_dict, "class_", make_descriptor(ByteFieldSource::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(ByteFieldSource).tp_dict, "wrapfn_", make_descriptor(t_ByteFieldSource::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(ByteFieldSource).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_ByteFieldSource_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, ByteFieldSource::initializeClass, 1)))
                return NULL;
              return t_ByteFieldSource::wrap_Object(ByteFieldSource(((t_ByteFieldSource *) arg)->object.this$));
            }
            static PyObject *t_ByteFieldSource_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, ByteFieldSource::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_ByteFieldSource_init_(t_ByteFieldSource *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 1:
                {
                  ::java::lang::String a0((jobject) NULL);
                  ByteFieldSource object((jobject) NULL);

                  if (!parseArgs(args, "s", &a0))
                  {
                    INT_CALL(object = ByteFieldSource(a0));
                    self->object = object;
                    break;
                  }
                }
                goto err;
               case 2:
                {
                  ::java::lang::String a0((jobject) NULL);
                  ::org::apache::lucene::search::FieldCache$ByteParser a1((jobject) NULL);
                  ByteFieldSource object((jobject) NULL);

                  if (!parseArgs(args, "sk", ::org::apache::lucene::search::FieldCache$ByteParser::initializeClass, &a0, &a1))
                  {
                    INT_CALL(object = ByteFieldSource(a0, a1));
                    self->object = object;
                    break;
                  }
                }
               default:
               err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_ByteFieldSource_description(t_ByteFieldSource *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.description());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(ByteFieldSource), (PyObject *) self, "description", args, 2);
            }

            static PyObject *t_ByteFieldSource_equals(t_ByteFieldSource *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(ByteFieldSource), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_ByteFieldSource_getValues(t_ByteFieldSource *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::FunctionValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::t_FunctionValues::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(ByteFieldSource), (PyObject *) self, "getValues", args, 2);
            }

            static PyObject *t_ByteFieldSource_hashCode(t_ByteFieldSource *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(ByteFieldSource), (PyObject *) self, "hashCode", args, 2);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/DrillSideways$DrillSidewaysResult.h"
#include "org/apache/lucene/facet/Facets.h"
#include "org/apache/lucene/search/TopDocs.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {

        ::java::lang::Class *DrillSideways$DrillSidewaysResult::class$ = NULL;
        jmethodID *DrillSideways$DrillSidewaysResult::mids$ = NULL;
        jfieldID *DrillSideways$DrillSidewaysResult::fids$ = NULL;
        bool DrillSideways$DrillSidewaysResult::live$ = false;

        jclass DrillSideways$DrillSidewaysResult::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/facet/DrillSideways$DrillSidewaysResult");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_34005d2b] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/facet/Facets;Lorg/apache/lucene/search/TopDocs;)V");

            fids$ = new jfieldID[max_fid];
            fids$[fid_facets] = env->getFieldID(cls, "facets", "Lorg/apache/lucene/facet/Facets;");
            fids$[fid_hits] = env->getFieldID(cls, "hits", "Lorg/apache/lucene/search/TopDocs;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        DrillSideways$DrillSidewaysResult::DrillSideways$DrillSidewaysResult(const ::org::apache::lucene::facet::Facets & a0, const ::org::apache::lucene::search::TopDocs & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_34005d2b, a0.this$, a1.this$)) {}

        ::org::apache::lucene::facet::Facets DrillSideways$DrillSidewaysResult::_get_facets() const
        {
          return ::org::apache::lucene::facet::Facets(env->getObjectField(this$, fids$[fid_facets]));
        }

        ::org::apache::lucene::search::TopDocs DrillSideways$DrillSidewaysResult::_get_hits() const
        {
          return ::org::apache::lucene::search::TopDocs(env->getObjectField(this$, fids$[fid_hits]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        static PyObject *t_DrillSideways$DrillSidewaysResult_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DrillSideways$DrillSidewaysResult_instance_(PyTypeObject *type, PyObject *arg);
        static int t_DrillSideways$DrillSidewaysResult_init_(t_DrillSideways$DrillSidewaysResult *self, PyObject *args, PyObject *kwds);
        static PyObject *t_DrillSideways$DrillSidewaysResult_get__facets(t_DrillSideways$DrillSidewaysResult *self, void *data);
        static PyObject *t_DrillSideways$DrillSidewaysResult_get__hits(t_DrillSideways$DrillSidewaysResult *self, void *data);

        static PyGetSetDef t_DrillSideways$DrillSidewaysResult__fields_[] = {
          DECLARE_GET_FIELD(t_DrillSideways$DrillSidewaysResult, facets),
          DECLARE_GET_FIELD(t_DrillSideways$DrillSidewaysResult, hits),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_DrillSideways$DrillSidewaysResult__methods_[] = {
          DECLARE_METHOD(t_DrillSideways$DrillSidewaysResult, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DrillSideways$DrillSidewaysResult, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(DrillSideways$DrillSidewaysResult, t_DrillSideways$DrillSidewaysResult, ::java::lang::Object, DrillSideways$DrillSidewaysResult, t_DrillSideways$DrillSidewaysResult_init_, 0, 0, t_DrillSideways$DrillSidewaysResult__fields_, 0, 0);

        void t_DrillSideways$DrillSidewaysResult::install(PyObject *module)
        {
          installType(&PY_TYPE(DrillSideways$DrillSidewaysResult), module, "DrillSideways$DrillSidewaysResult", 0);
        }

        void t_DrillSideways$DrillSidewaysResult::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(DrillSideways$DrillSidewaysResult).tp_dict, "class_", make_descriptor(DrillSideways$DrillSidewaysResult::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(DrillSideways$DrillSidewaysResult).tp_dict, "wrapfn_", make_descriptor(t_DrillSideways$DrillSidewaysResult::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(DrillSideways$DrillSidewaysResult).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_DrillSideways$DrillSidewaysResult_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, DrillSideways$DrillSidewaysResult::initializeClass, 1)))
            return NULL;
          return t_DrillSideways$DrillSidewaysResult::wrap_Object(DrillSideways$DrillSidewaysResult(((t_DrillSideways$DrillSidewaysResult *) arg)->object.this$));
        }
        static PyObject *t_DrillSideways$DrillSidewaysResult_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, DrillSideways$DrillSidewaysResult::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_DrillSideways$DrillSidewaysResult_init_(t_DrillSideways$DrillSidewaysResult *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::facet::Facets a0((jobject) NULL);
          ::org::apache::lucene::search::TopDocs a1((jobject) NULL);
          DrillSideways$DrillSidewaysResult object((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::facet::Facets::initializeClass, ::org::apache::lucene::search::TopDocs::initializeClass, &a0, &a1))
          {
            INT_CALL(object = DrillSideways$DrillSidewaysResult(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_DrillSideways$DrillSidewaysResult_get__facets(t_DrillSideways$DrillSidewaysResult *self, void *data)
        {
          ::org::apache::lucene::facet::Facets value((jobject) NULL);
          OBJ_CALL(value = self->object._get_facets());
          return ::org::apache::lucene::facet::t_Facets::wrap_Object(value);
        }

        static PyObject *t_DrillSideways$DrillSidewaysResult_get__hits(t_DrillSideways$DrillSidewaysResult *self, void *data)
        {
          ::org::apache::lucene::search::TopDocs value((jobject) NULL);
          OBJ_CALL(value = self->object._get_hits());
          return ::org::apache::lucene::search::t_TopDocs::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/AndQueryNode.h"
#include "java/lang/Class.h"
#include "java/lang/CharSequence.h"
#include "java/util/List.h"
#include "org/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {

              ::java::lang::Class *AndQueryNode::class$ = NULL;
              jmethodID *AndQueryNode::mids$ = NULL;
              bool AndQueryNode::live$ = false;

              jclass AndQueryNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/nodes/AndQueryNode");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_1fde8fc3] = env->getMethodID(cls, "<init>", "(Ljava/util/List;)V");
                  mids$[mid_toQueryString_99b8dfe1] = env->getMethodID(cls, "toQueryString", "(Lorg/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax;)Ljava/lang/CharSequence;");
                  mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              AndQueryNode::AndQueryNode(const ::java::util::List & a0) : ::org::apache::lucene::queryparser::flexible::core::nodes::BooleanQueryNode(env->newObject(initializeClass, &mids$, mid_init$_1fde8fc3, a0.this$)) {}

              ::java::lang::CharSequence AndQueryNode::toQueryString(const ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax & a0) const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_toQueryString_99b8dfe1], a0.this$));
              }

              ::java::lang::String AndQueryNode::toString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {
              static PyObject *t_AndQueryNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_AndQueryNode_instance_(PyTypeObject *type, PyObject *arg);
              static int t_AndQueryNode_init_(t_AndQueryNode *self, PyObject *args, PyObject *kwds);
              static PyObject *t_AndQueryNode_toQueryString(t_AndQueryNode *self, PyObject *args);
              static PyObject *t_AndQueryNode_toString(t_AndQueryNode *self, PyObject *args);

              static PyMethodDef t_AndQueryNode__methods_[] = {
                DECLARE_METHOD(t_AndQueryNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_AndQueryNode, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_AndQueryNode, toQueryString, METH_VARARGS),
                DECLARE_METHOD(t_AndQueryNode, toString, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(AndQueryNode, t_AndQueryNode, ::org::apache::lucene::queryparser::flexible::core::nodes::BooleanQueryNode, AndQueryNode, t_AndQueryNode_init_, 0, 0, 0, 0, 0);

              void t_AndQueryNode::install(PyObject *module)
              {
                installType(&PY_TYPE(AndQueryNode), module, "AndQueryNode", 0);
              }

              void t_AndQueryNode::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(AndQueryNode).tp_dict, "class_", make_descriptor(AndQueryNode::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(AndQueryNode).tp_dict, "wrapfn_", make_descriptor(t_AndQueryNode::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(AndQueryNode).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_AndQueryNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, AndQueryNode::initializeClass, 1)))
                  return NULL;
                return t_AndQueryNode::wrap_Object(AndQueryNode(((t_AndQueryNode *) arg)->object.this$));
              }
              static PyObject *t_AndQueryNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, AndQueryNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_AndQueryNode_init_(t_AndQueryNode *self, PyObject *args, PyObject *kwds)
              {
                ::java::util::List a0((jobject) NULL);
                PyTypeObject **p0;
                AndQueryNode object((jobject) NULL);

                if (!parseArgs(args, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
                {
                  INT_CALL(object = AndQueryNode(a0));
                  self->object = object;
                }
                else
                {
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_AndQueryNode_toQueryString(t_AndQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax a0((jobject) NULL);
                ::java::lang::CharSequence result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.toQueryString(a0));
                  return ::java::lang::t_CharSequence::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(AndQueryNode), (PyObject *) self, "toQueryString", args, 2);
              }

              static PyObject *t_AndQueryNode_toString(t_AndQueryNode *self, PyObject *args)
              {
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.toString());
                  return j2p(result);
                }

                return callSuper(&PY_TYPE(AndQueryNode), (PyObject *) self, "toString", args, 2);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/PagedBytes$PagedBytesDataInput.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *PagedBytes$PagedBytesDataInput::class$ = NULL;
        jmethodID *PagedBytes$PagedBytesDataInput::mids$ = NULL;
        bool PagedBytes$PagedBytesDataInput::live$ = false;

        jclass PagedBytes$PagedBytesDataInput::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/PagedBytes$PagedBytesDataInput");

            mids$ = new jmethodID[max_mid];
            mids$[mid_clone_da9ab8b7] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/util/PagedBytes$PagedBytesDataInput;");
            mids$[mid_getPosition_54c6a17a] = env->getMethodID(cls, "getPosition", "()J");
            mids$[mid_readByte_54c6a172] = env->getMethodID(cls, "readByte", "()B");
            mids$[mid_readBytes_86f4435f] = env->getMethodID(cls, "readBytes", "([BII)V");
            mids$[mid_setPosition_0ee6df2f] = env->getMethodID(cls, "setPosition", "(J)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PagedBytes$PagedBytesDataInput PagedBytes$PagedBytesDataInput::clone() const
        {
          return PagedBytes$PagedBytesDataInput(env->callObjectMethod(this$, mids$[mid_clone_da9ab8b7]));
        }

        jlong PagedBytes$PagedBytesDataInput::getPosition() const
        {
          return env->callLongMethod(this$, mids$[mid_getPosition_54c6a17a]);
        }

        jbyte PagedBytes$PagedBytesDataInput::readByte() const
        {
          return env->callByteMethod(this$, mids$[mid_readByte_54c6a172]);
        }

        void PagedBytes$PagedBytesDataInput::readBytes(const JArray< jbyte > & a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_readBytes_86f4435f], a0.this$, a1, a2);
        }

        void PagedBytes$PagedBytesDataInput::setPosition(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setPosition_0ee6df2f], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_PagedBytes$PagedBytesDataInput_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PagedBytes$PagedBytesDataInput_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PagedBytes$PagedBytesDataInput_clone(t_PagedBytes$PagedBytesDataInput *self, PyObject *args);
        static PyObject *t_PagedBytes$PagedBytesDataInput_getPosition(t_PagedBytes$PagedBytesDataInput *self);
        static PyObject *t_PagedBytes$PagedBytesDataInput_readByte(t_PagedBytes$PagedBytesDataInput *self, PyObject *args);
        static PyObject *t_PagedBytes$PagedBytesDataInput_readBytes(t_PagedBytes$PagedBytesDataInput *self, PyObject *args);
        static PyObject *t_PagedBytes$PagedBytesDataInput_setPosition(t_PagedBytes$PagedBytesDataInput *self, PyObject *arg);
        static PyObject *t_PagedBytes$PagedBytesDataInput_get__position(t_PagedBytes$PagedBytesDataInput *self, void *data);
        static int t_PagedBytes$PagedBytesDataInput_set__position(t_PagedBytes$PagedBytesDataInput *self, PyObject *arg, void *data);
        static PyGetSetDef t_PagedBytes$PagedBytesDataInput__fields_[] = {
          DECLARE_GETSET_FIELD(t_PagedBytes$PagedBytesDataInput, position),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PagedBytes$PagedBytesDataInput__methods_[] = {
          DECLARE_METHOD(t_PagedBytes$PagedBytesDataInput, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PagedBytes$PagedBytesDataInput, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PagedBytes$PagedBytesDataInput, clone, METH_VARARGS),
          DECLARE_METHOD(t_PagedBytes$PagedBytesDataInput, getPosition, METH_NOARGS),
          DECLARE_METHOD(t_PagedBytes$PagedBytesDataInput, readByte, METH_VARARGS),
          DECLARE_METHOD(t_PagedBytes$PagedBytesDataInput, readBytes, METH_VARARGS),
          DECLARE_METHOD(t_PagedBytes$PagedBytesDataInput, setPosition, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PagedBytes$PagedBytesDataInput, t_PagedBytes$PagedBytesDataInput, ::org::apache::lucene::store::DataInput, PagedBytes$PagedBytesDataInput, abstract_init, 0, 0, t_PagedBytes$PagedBytesDataInput__fields_, 0, 0);

        void t_PagedBytes$PagedBytesDataInput::install(PyObject *module)
        {
          installType(&PY_TYPE(PagedBytes$PagedBytesDataInput), module, "PagedBytes$PagedBytesDataInput", 0);
        }

        void t_PagedBytes$PagedBytesDataInput::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PagedBytes$PagedBytesDataInput).tp_dict, "class_", make_descriptor(PagedBytes$PagedBytesDataInput::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PagedBytes$PagedBytesDataInput).tp_dict, "wrapfn_", make_descriptor(t_PagedBytes$PagedBytesDataInput::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PagedBytes$PagedBytesDataInput).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_PagedBytes$PagedBytesDataInput_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PagedBytes$PagedBytesDataInput::initializeClass, 1)))
            return NULL;
          return t_PagedBytes$PagedBytesDataInput::wrap_Object(PagedBytes$PagedBytesDataInput(((t_PagedBytes$PagedBytesDataInput *) arg)->object.this$));
        }
        static PyObject *t_PagedBytes$PagedBytesDataInput_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PagedBytes$PagedBytesDataInput::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_PagedBytes$PagedBytesDataInput_clone(t_PagedBytes$PagedBytesDataInput *self, PyObject *args)
        {
          PagedBytes$PagedBytesDataInput result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.clone());
            return t_PagedBytes$PagedBytesDataInput::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(PagedBytes$PagedBytesDataInput), (PyObject *) self, "clone", args, 2);
        }

        static PyObject *t_PagedBytes$PagedBytesDataInput_getPosition(t_PagedBytes$PagedBytesDataInput *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getPosition());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_PagedBytes$PagedBytesDataInput_readByte(t_PagedBytes$PagedBytesDataInput *self, PyObject *args)
        {
          jbyte result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.readByte());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(PagedBytes$PagedBytesDataInput), (PyObject *) self, "readByte", args, 2);
        }

        static PyObject *t_PagedBytes$PagedBytesDataInput_readBytes(t_PagedBytes$PagedBytesDataInput *self, PyObject *args)
        {
          JArray< jbyte > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[BII", &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.readBytes(a0, a1, a2));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(PagedBytes$PagedBytesDataInput), (PyObject *) self, "readBytes", args, 2);
        }

        static PyObject *t_PagedBytes$PagedBytesDataInput_setPosition(t_PagedBytes$PagedBytesDataInput *self, PyObject *arg)
        {
          jlong a0;

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(self->object.setPosition(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setPosition", arg);
          return NULL;
        }

        static PyObject *t_PagedBytes$PagedBytesDataInput_get__position(t_PagedBytes$PagedBytesDataInput *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getPosition());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
        static int t_PagedBytes$PagedBytesDataInput_set__position(t_PagedBytes$PagedBytesDataInput *self, PyObject *arg, void *data)
        {
          {
            jlong value;
            if (!parseArg(arg, "J", &value))
            {
              INT_CALL(self->object.setPosition(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "position", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/snowball/SnowballAnalyzer.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "java/lang/Class.h"
#include "java/io/Reader.h"
#include "org/apache/lucene/analysis/Analyzer$TokenStreamComponents.h"
#include "java/lang/String.h"
#include "org/apache/lucene/util/Version.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace snowball {

          ::java::lang::Class *SnowballAnalyzer::class$ = NULL;
          jmethodID *SnowballAnalyzer::mids$ = NULL;
          bool SnowballAnalyzer::live$ = false;

          jclass SnowballAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/snowball/SnowballAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_1d68b8f5] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Ljava/lang/String;)V");
              mids$[mid_init$_df6e5eaa] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Ljava/lang/String;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SnowballAnalyzer::SnowballAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::java::lang::String & a1) : ::org::apache::lucene::analysis::Analyzer(env->newObject(initializeClass, &mids$, mid_init$_1d68b8f5, a0.this$, a1.this$)) {}

          SnowballAnalyzer::SnowballAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::java::lang::String & a1, const ::org::apache::lucene::analysis::util::CharArraySet & a2) : ::org::apache::lucene::analysis::Analyzer(env->newObject(initializeClass, &mids$, mid_init$_df6e5eaa, a0.this$, a1.this$, a2.this$)) {}

          ::org::apache::lucene::analysis::Analyzer$TokenStreamComponents SnowballAnalyzer::createComponents(const ::java::lang::String & a0, const ::java::io::Reader & a1) const
          {
            return ::org::apache::lucene::analysis::Analyzer$TokenStreamComponents(env->callObjectMethod(this$, mids$[mid_createComponents_1be39cae], a0.this$, a1.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace snowball {
          static PyObject *t_SnowballAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SnowballAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SnowballAnalyzer_init_(t_SnowballAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SnowballAnalyzer_createComponents(t_SnowballAnalyzer *self, PyObject *args);

          static PyMethodDef t_SnowballAnalyzer__methods_[] = {
            DECLARE_METHOD(t_SnowballAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SnowballAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SnowballAnalyzer, createComponents, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SnowballAnalyzer, t_SnowballAnalyzer, ::org::apache::lucene::analysis::Analyzer, SnowballAnalyzer, t_SnowballAnalyzer_init_, 0, 0, 0, 0, 0);

          void t_SnowballAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(SnowballAnalyzer), module, "SnowballAnalyzer", 0);
          }

          void t_SnowballAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SnowballAnalyzer).tp_dict, "class_", make_descriptor(SnowballAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SnowballAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_SnowballAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SnowballAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SnowballAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SnowballAnalyzer::initializeClass, 1)))
              return NULL;
            return t_SnowballAnalyzer::wrap_Object(SnowballAnalyzer(((t_SnowballAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_SnowballAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SnowballAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SnowballAnalyzer_init_(t_SnowballAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                SnowballAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "ks", ::org::apache::lucene::util::Version::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = SnowballAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                ::org::apache::lucene::analysis::util::CharArraySet a2((jobject) NULL);
                PyTypeObject **p2;
                SnowballAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "ksK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &a1, &a2, &p2, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = SnowballAnalyzer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SnowballAnalyzer_createComponents(t_SnowballAnalyzer *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::io::Reader a1((jobject) NULL);
            ::org::apache::lucene::analysis::Analyzer$TokenStreamComponents result((jobject) NULL);

            if (!parseArgs(args, "sk", ::java::io::Reader::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.createComponents(a0, a1));
              return ::org::apache::lucene::analysis::t_Analyzer$TokenStreamComponents::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "createComponents", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/RateLimitedDirectoryWrapper.h"
#include "org/apache/lucene/store/IndexOutput.h"
#include "java/lang/Double.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/store/RateLimiter.h"
#include "org/apache/lucene/store/IOContext.h"
#include "java/io/IOException.h"
#include "java/lang/String.h"
#include "org/apache/lucene/store/IOContext$Context.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *RateLimitedDirectoryWrapper::class$ = NULL;
        jmethodID *RateLimitedDirectoryWrapper::mids$ = NULL;
        bool RateLimitedDirectoryWrapper::live$ = false;

        jclass RateLimitedDirectoryWrapper::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/RateLimitedDirectoryWrapper");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_2e261ef2] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;)V");
            mids$[mid_copy_146bec62] = env->getMethodID(cls, "copy", "(Lorg/apache/lucene/store/Directory;Ljava/lang/String;Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)V");
            mids$[mid_createOutput_5ad5358d] = env->getMethodID(cls, "createOutput", "(Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/store/IndexOutput;");
            mids$[mid_getMaxWriteMBPerSec_c79e30dc] = env->getMethodID(cls, "getMaxWriteMBPerSec", "(Lorg/apache/lucene/store/IOContext$Context;)Ljava/lang/Double;");
            mids$[mid_setMaxWriteMBPerSec_947ec9bf] = env->getMethodID(cls, "setMaxWriteMBPerSec", "(Ljava/lang/Double;Lorg/apache/lucene/store/IOContext$Context;)V");
            mids$[mid_setRateLimiter_6afce4a8] = env->getMethodID(cls, "setRateLimiter", "(Lorg/apache/lucene/store/RateLimiter;Lorg/apache/lucene/store/IOContext$Context;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        RateLimitedDirectoryWrapper::RateLimitedDirectoryWrapper(const ::org::apache::lucene::store::Directory & a0) : ::org::apache::lucene::store::FilterDirectory(env->newObject(initializeClass, &mids$, mid_init$_2e261ef2, a0.this$)) {}

        void RateLimitedDirectoryWrapper::copy(const ::org::apache::lucene::store::Directory & a0, const ::java::lang::String & a1, const ::java::lang::String & a2, const ::org::apache::lucene::store::IOContext & a3) const
        {
          env->callVoidMethod(this$, mids$[mid_copy_146bec62], a0.this$, a1.this$, a2.this$, a3.this$);
        }

        ::org::apache::lucene::store::IndexOutput RateLimitedDirectoryWrapper::createOutput(const ::java::lang::String & a0, const ::org::apache::lucene::store::IOContext & a1) const
        {
          return ::org::apache::lucene::store::IndexOutput(env->callObjectMethod(this$, mids$[mid_createOutput_5ad5358d], a0.this$, a1.this$));
        }

        ::java::lang::Double RateLimitedDirectoryWrapper::getMaxWriteMBPerSec(const ::org::apache::lucene::store::IOContext$Context & a0) const
        {
          return ::java::lang::Double(env->callObjectMethod(this$, mids$[mid_getMaxWriteMBPerSec_c79e30dc], a0.this$));
        }

        void RateLimitedDirectoryWrapper::setMaxWriteMBPerSec(const ::java::lang::Double & a0, const ::org::apache::lucene::store::IOContext$Context & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_setMaxWriteMBPerSec_947ec9bf], a0.this$, a1.this$);
        }

        void RateLimitedDirectoryWrapper::setRateLimiter(const ::org::apache::lucene::store::RateLimiter & a0, const ::org::apache::lucene::store::IOContext$Context & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_setRateLimiter_6afce4a8], a0.this$, a1.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_RateLimitedDirectoryWrapper_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_RateLimitedDirectoryWrapper_instance_(PyTypeObject *type, PyObject *arg);
        static int t_RateLimitedDirectoryWrapper_init_(t_RateLimitedDirectoryWrapper *self, PyObject *args, PyObject *kwds);
        static PyObject *t_RateLimitedDirectoryWrapper_copy(t_RateLimitedDirectoryWrapper *self, PyObject *args);
        static PyObject *t_RateLimitedDirectoryWrapper_createOutput(t_RateLimitedDirectoryWrapper *self, PyObject *args);
        static PyObject *t_RateLimitedDirectoryWrapper_getMaxWriteMBPerSec(t_RateLimitedDirectoryWrapper *self, PyObject *arg);
        static PyObject *t_RateLimitedDirectoryWrapper_setMaxWriteMBPerSec(t_RateLimitedDirectoryWrapper *self, PyObject *args);
        static PyObject *t_RateLimitedDirectoryWrapper_setRateLimiter(t_RateLimitedDirectoryWrapper *self, PyObject *args);

        static PyMethodDef t_RateLimitedDirectoryWrapper__methods_[] = {
          DECLARE_METHOD(t_RateLimitedDirectoryWrapper, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RateLimitedDirectoryWrapper, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RateLimitedDirectoryWrapper, copy, METH_VARARGS),
          DECLARE_METHOD(t_RateLimitedDirectoryWrapper, createOutput, METH_VARARGS),
          DECLARE_METHOD(t_RateLimitedDirectoryWrapper, getMaxWriteMBPerSec, METH_O),
          DECLARE_METHOD(t_RateLimitedDirectoryWrapper, setMaxWriteMBPerSec, METH_VARARGS),
          DECLARE_METHOD(t_RateLimitedDirectoryWrapper, setRateLimiter, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(RateLimitedDirectoryWrapper, t_RateLimitedDirectoryWrapper, ::org::apache::lucene::store::FilterDirectory, RateLimitedDirectoryWrapper, t_RateLimitedDirectoryWrapper_init_, 0, 0, 0, 0, 0);

        void t_RateLimitedDirectoryWrapper::install(PyObject *module)
        {
          installType(&PY_TYPE(RateLimitedDirectoryWrapper), module, "RateLimitedDirectoryWrapper", 0);
        }

        void t_RateLimitedDirectoryWrapper::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(RateLimitedDirectoryWrapper).tp_dict, "class_", make_descriptor(RateLimitedDirectoryWrapper::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(RateLimitedDirectoryWrapper).tp_dict, "wrapfn_", make_descriptor(t_RateLimitedDirectoryWrapper::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(RateLimitedDirectoryWrapper).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_RateLimitedDirectoryWrapper_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, RateLimitedDirectoryWrapper::initializeClass, 1)))
            return NULL;
          return t_RateLimitedDirectoryWrapper::wrap_Object(RateLimitedDirectoryWrapper(((t_RateLimitedDirectoryWrapper *) arg)->object.this$));
        }
        static PyObject *t_RateLimitedDirectoryWrapper_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, RateLimitedDirectoryWrapper::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_RateLimitedDirectoryWrapper_init_(t_RateLimitedDirectoryWrapper *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::store::Directory a0((jobject) NULL);
          RateLimitedDirectoryWrapper object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::store::Directory::initializeClass, &a0))
          {
            INT_CALL(object = RateLimitedDirectoryWrapper(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_RateLimitedDirectoryWrapper_copy(t_RateLimitedDirectoryWrapper *self, PyObject *args)
        {
          ::org::apache::lucene::store::Directory a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::java::lang::String a2((jobject) NULL);
          ::org::apache::lucene::store::IOContext a3((jobject) NULL);

          if (!parseArgs(args, "kssk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(self->object.copy(a0, a1, a2, a3));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(RateLimitedDirectoryWrapper), (PyObject *) self, "copy", args, 2);
        }

        static PyObject *t_RateLimitedDirectoryWrapper_createOutput(t_RateLimitedDirectoryWrapper *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::store::IOContext a1((jobject) NULL);
          ::org::apache::lucene::store::IndexOutput result((jobject) NULL);

          if (!parseArgs(args, "sk", ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.createOutput(a0, a1));
            return ::org::apache::lucene::store::t_IndexOutput::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(RateLimitedDirectoryWrapper), (PyObject *) self, "createOutput", args, 2);
        }

        static PyObject *t_RateLimitedDirectoryWrapper_getMaxWriteMBPerSec(t_RateLimitedDirectoryWrapper *self, PyObject *arg)
        {
          ::org::apache::lucene::store::IOContext$Context a0((jobject) NULL);
          PyTypeObject **p0;
          ::java::lang::Double result((jobject) NULL);

          if (!parseArg(arg, "K", ::org::apache::lucene::store::IOContext$Context::initializeClass, &a0, &p0, ::org::apache::lucene::store::t_IOContext$Context::parameters_))
          {
            OBJ_CALL(result = self->object.getMaxWriteMBPerSec(a0));
            return ::java::lang::t_Double::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getMaxWriteMBPerSec", arg);
          return NULL;
        }

        static PyObject *t_RateLimitedDirectoryWrapper_setMaxWriteMBPerSec(t_RateLimitedDirectoryWrapper *self, PyObject *args)
        {
          ::java::lang::Double a0((jobject) NULL);
          ::org::apache::lucene::store::IOContext$Context a1((jobject) NULL);
          PyTypeObject **p1;

          if (!parseArgs(args, "OK", &::java::lang::PY_TYPE(Double), ::org::apache::lucene::store::IOContext$Context::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::store::t_IOContext$Context::parameters_))
          {
            OBJ_CALL(self->object.setMaxWriteMBPerSec(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setMaxWriteMBPerSec", args);
          return NULL;
        }

        static PyObject *t_RateLimitedDirectoryWrapper_setRateLimiter(t_RateLimitedDirectoryWrapper *self, PyObject *args)
        {
          ::org::apache::lucene::store::RateLimiter a0((jobject) NULL);
          ::org::apache::lucene::store::IOContext$Context a1((jobject) NULL);
          PyTypeObject **p1;

          if (!parseArgs(args, "kK", ::org::apache::lucene::store::RateLimiter::initializeClass, ::org::apache::lucene::store::IOContext$Context::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::store::t_IOContext$Context::parameters_))
          {
            OBJ_CALL(self->object.setRateLimiter(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setRateLimiter", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/core/StopFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/Class.h"
#include "java/util/List.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {

          ::java::lang::Class *StopFilter::class$ = NULL;
          jmethodID *StopFilter::mids$ = NULL;
          bool StopFilter::live$ = false;

          jclass StopFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/core/StopFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_64fb9de3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_e67dd59e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/TokenStream;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_makeStopSet_092e6fb3] = env->getStaticMethodID(cls, "makeStopSet", "(Ljava/util/List;)Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_makeStopSet_b86fc6ee] = env->getStaticMethodID(cls, "makeStopSet", "([Ljava/lang/String;)Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_makeStopSet_7d659c81] = env->getStaticMethodID(cls, "makeStopSet", "([Ljava/lang/String;Z)Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_makeStopSet_bbdc7fc0] = env->getStaticMethodID(cls, "makeStopSet", "(Lorg/apache/lucene/util/Version;Ljava/util/List;)Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_makeStopSet_ac8bc37a] = env->getStaticMethodID(cls, "makeStopSet", "(Ljava/util/List;Z)Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_makeStopSet_9f4ce96f] = env->getStaticMethodID(cls, "makeStopSet", "(Lorg/apache/lucene/util/Version;[Ljava/lang/String;)Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_makeStopSet_81b79166] = env->getStaticMethodID(cls, "makeStopSet", "(Lorg/apache/lucene/util/Version;[Ljava/lang/String;Z)Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_makeStopSet_08a7acff] = env->getStaticMethodID(cls, "makeStopSet", "(Lorg/apache/lucene/util/Version;Ljava/util/List;Z)Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_accept_54c6a16a] = env->getMethodID(cls, "accept", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          StopFilter::StopFilter(const ::org::apache::lucene::analysis::TokenStream & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::util::FilteringTokenFilter(env->newObject(initializeClass, &mids$, mid_init$_64fb9de3, a0.this$, a1.this$)) {}

          StopFilter::StopFilter(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::TokenStream & a1, const ::org::apache::lucene::analysis::util::CharArraySet & a2) : ::org::apache::lucene::analysis::util::FilteringTokenFilter(env->newObject(initializeClass, &mids$, mid_init$_e67dd59e, a0.this$, a1.this$, a2.this$)) {}

          ::org::apache::lucene::analysis::util::CharArraySet StopFilter::makeStopSet(const ::java::util::List & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_makeStopSet_092e6fb3], a0.this$));
          }

          ::org::apache::lucene::analysis::util::CharArraySet StopFilter::makeStopSet(const JArray< ::java::lang::String > & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_makeStopSet_b86fc6ee], a0.this$));
          }

          ::org::apache::lucene::analysis::util::CharArraySet StopFilter::makeStopSet(const JArray< ::java::lang::String > & a0, jboolean a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_makeStopSet_7d659c81], a0.this$, a1));
          }

          ::org::apache::lucene::analysis::util::CharArraySet StopFilter::makeStopSet(const ::org::apache::lucene::util::Version & a0, const ::java::util::List & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_makeStopSet_bbdc7fc0], a0.this$, a1.this$));
          }

          ::org::apache::lucene::analysis::util::CharArraySet StopFilter::makeStopSet(const ::java::util::List & a0, jboolean a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_makeStopSet_ac8bc37a], a0.this$, a1));
          }

          ::org::apache::lucene::analysis::util::CharArraySet StopFilter::makeStopSet(const ::org::apache::lucene::util::Version & a0, const JArray< ::java::lang::String > & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_makeStopSet_9f4ce96f], a0.this$, a1.this$));
          }

          ::org::apache::lucene::analysis::util::CharArraySet StopFilter::makeStopSet(const ::org::apache::lucene::util::Version & a0, const JArray< ::java::lang::String > & a1, jboolean a2)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_makeStopSet_81b79166], a0.this$, a1.this$, a2));
          }

          ::org::apache::lucene::analysis::util::CharArraySet StopFilter::makeStopSet(const ::org::apache::lucene::util::Version & a0, const ::java::util::List & a1, jboolean a2)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_makeStopSet_08a7acff], a0.this$, a1.this$, a2));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {
          static PyObject *t_StopFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_StopFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_StopFilter_init_(t_StopFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_StopFilter_makeStopSet(PyTypeObject *type, PyObject *args);

          static PyMethodDef t_StopFilter__methods_[] = {
            DECLARE_METHOD(t_StopFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StopFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StopFilter, makeStopSet, METH_VARARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(StopFilter, t_StopFilter, ::org::apache::lucene::analysis::util::FilteringTokenFilter, StopFilter, t_StopFilter_init_, 0, 0, 0, 0, 0);

          void t_StopFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(StopFilter), module, "StopFilter", 0);
          }

          void t_StopFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(StopFilter).tp_dict, "class_", make_descriptor(StopFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(StopFilter).tp_dict, "wrapfn_", make_descriptor(t_StopFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(StopFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_StopFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, StopFilter::initializeClass, 1)))
              return NULL;
            return t_StopFilter::wrap_Object(StopFilter(((t_StopFilter *) arg)->object.this$));
          }
          static PyObject *t_StopFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, StopFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_StopFilter_init_(t_StopFilter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                StopFilter object((jobject) NULL);

                if (!parseArgs(args, "kK", ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = StopFilter(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
                ::org::apache::lucene::analysis::util::CharArraySet a2((jobject) NULL);
                PyTypeObject **p2;
                StopFilter object((jobject) NULL);

                if (!parseArgs(args, "kkK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &a1, &a2, &p2, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = StopFilter(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_StopFilter_makeStopSet(PyTypeObject *type, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::java::util::List a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);

                if (!parseArgs(args, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
                {
                  OBJ_CALL(result = ::org::apache::lucene::analysis::core::StopFilter::makeStopSet(a0));
                  return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
                }
              }
              {
                JArray< ::java::lang::String > a0((jobject) NULL);
                ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);

                if (!parseArgs(args, "[s", &a0))
                {
                  OBJ_CALL(result = ::org::apache::lucene::analysis::core::StopFilter::makeStopSet(a0));
                  return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
                }
              }
              break;
             case 2:
              {
                JArray< ::java::lang::String > a0((jobject) NULL);
                jboolean a1;
                ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);

                if (!parseArgs(args, "[sZ", &a0, &a1))
                {
                  OBJ_CALL(result = ::org::apache::lucene::analysis::core::StopFilter::makeStopSet(a0, a1));
                  return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
                }
              }
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                ::java::util::List a1((jobject) NULL);
                PyTypeObject **p1;
                ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);

                if (!parseArgs(args, "kK", ::org::apache::lucene::util::Version::initializeClass, ::java::util::List::initializeClass, &a0, &a1, &p1, ::java::util::t_List::parameters_))
                {
                  OBJ_CALL(result = ::org::apache::lucene::analysis::core::StopFilter::makeStopSet(a0, a1));
                  return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
                }
              }
              {
                ::java::util::List a0((jobject) NULL);
                PyTypeObject **p0;
                jboolean a1;
                ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);

                if (!parseArgs(args, "KZ", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_, &a1))
                {
                  OBJ_CALL(result = ::org::apache::lucene::analysis::core::StopFilter::makeStopSet(a0, a1));
                  return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
                }
              }
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                JArray< ::java::lang::String > a1((jobject) NULL);
                ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);

                if (!parseArgs(args, "k[s", ::org::apache::lucene::util::Version::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(result = ::org::apache::lucene::analysis::core::StopFilter::makeStopSet(a0, a1));
                  return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
                }
              }
              break;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                JArray< ::java::lang::String > a1((jobject) NULL);
                jboolean a2;
                ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);

                if (!parseArgs(args, "k[sZ", ::org::apache::lucene::util::Version::initializeClass, &a0, &a1, &a2))
                {
                  OBJ_CALL(result = ::org::apache::lucene::analysis::core::StopFilter::makeStopSet(a0, a1, a2));
                  return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
                }
              }
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                ::java::util::List a1((jobject) NULL);
                PyTypeObject **p1;
                jboolean a2;
                ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);

                if (!parseArgs(args, "kKZ", ::org::apache::lucene::util::Version::initializeClass, ::java::util::List::initializeClass, &a0, &a1, &p1, ::java::util::t_List::parameters_, &a2))
                {
                  OBJ_CALL(result = ::org::apache::lucene::analysis::core::StopFilter::makeStopSet(a0, a1, a2));
                  return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError(type, "makeStopSet", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/JoinDocFreqValueSource.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *JoinDocFreqValueSource::class$ = NULL;
            jmethodID *JoinDocFreqValueSource::mids$ = NULL;
            bool JoinDocFreqValueSource::live$ = false;
            ::java::lang::String *JoinDocFreqValueSource::NAME = NULL;

            jclass JoinDocFreqValueSource::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/JoinDocFreqValueSource");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_4a264742] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/String;)V");
                mids$[mid_description_14c7b5c5] = env->getMethodID(cls, "description", "()Ljava/lang/String;");
                mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_getValues_4c566485] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/queries/function/FunctionValues;");
                mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");

                class$ = (::java::lang::Class *) new JObject(cls);
                cls = (jclass) class$->this$;

                NAME = new ::java::lang::String(env->getStaticObjectField(cls, "NAME", "Ljava/lang/String;"));
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            JoinDocFreqValueSource::JoinDocFreqValueSource(const ::java::lang::String & a0, const ::java::lang::String & a1) : ::org::apache::lucene::queries::function::valuesource::FieldCacheSource(env->newObject(initializeClass, &mids$, mid_init$_4a264742, a0.this$, a1.this$)) {}

            ::java::lang::String JoinDocFreqValueSource::description() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_description_14c7b5c5]));
            }

            jboolean JoinDocFreqValueSource::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
            }

            ::org::apache::lucene::queries::function::FunctionValues JoinDocFreqValueSource::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::FunctionValues(env->callObjectMethod(this$, mids$[mid_getValues_4c566485], a0.this$, a1.this$));
            }

            jint JoinDocFreqValueSource::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_JoinDocFreqValueSource_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_JoinDocFreqValueSource_instance_(PyTypeObject *type, PyObject *arg);
            static int t_JoinDocFreqValueSource_init_(t_JoinDocFreqValueSource *self, PyObject *args, PyObject *kwds);
            static PyObject *t_JoinDocFreqValueSource_description(t_JoinDocFreqValueSource *self, PyObject *args);
            static PyObject *t_JoinDocFreqValueSource_equals(t_JoinDocFreqValueSource *self, PyObject *args);
            static PyObject *t_JoinDocFreqValueSource_getValues(t_JoinDocFreqValueSource *self, PyObject *args);
            static PyObject *t_JoinDocFreqValueSource_hashCode(t_JoinDocFreqValueSource *self, PyObject *args);

            static PyMethodDef t_JoinDocFreqValueSource__methods_[] = {
              DECLARE_METHOD(t_JoinDocFreqValueSource, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_JoinDocFreqValueSource, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_JoinDocFreqValueSource, description, METH_VARARGS),
              DECLARE_METHOD(t_JoinDocFreqValueSource, equals, METH_VARARGS),
              DECLARE_METHOD(t_JoinDocFreqValueSource, getValues, METH_VARARGS),
              DECLARE_METHOD(t_JoinDocFreqValueSource, hashCode, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(JoinDocFreqValueSource, t_JoinDocFreqValueSource, ::org::apache::lucene::queries::function::valuesource::FieldCacheSource, JoinDocFreqValueSource, t_JoinDocFreqValueSource_init_, 0, 0, 0, 0, 0);

            void t_JoinDocFreqValueSource::install(PyObject *module)
            {
              installType(&PY_TYPE(JoinDocFreqValueSource), module, "JoinDocFreqValueSource", 0);
            }

            void t_JoinDocFreqValueSource::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(JoinDocFreqValueSource).tp_dict, "class_", make_descriptor(JoinDocFreqValueSource::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(JoinDocFreqValueSource).tp_dict, "wrapfn_", make_descriptor(t_JoinDocFreqValueSource::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(JoinDocFreqValueSource).tp_dict, "boxfn_", make_descriptor(boxObject));
              env->getClass(JoinDocFreqValueSource::initializeClass);
              PyDict_SetItemString(PY_TYPE(JoinDocFreqValueSource).tp_dict, "NAME", make_descriptor(j2p(*JoinDocFreqValueSource::NAME)));
            }

            static PyObject *t_JoinDocFreqValueSource_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, JoinDocFreqValueSource::initializeClass, 1)))
                return NULL;
              return t_JoinDocFreqValueSource::wrap_Object(JoinDocFreqValueSource(((t_JoinDocFreqValueSource *) arg)->object.this$));
            }
            static PyObject *t_JoinDocFreqValueSource_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, JoinDocFreqValueSource::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_JoinDocFreqValueSource_init_(t_JoinDocFreqValueSource *self, PyObject *args, PyObject *kwds)
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              JoinDocFreqValueSource object((jobject) NULL);

              if (!parseArgs(args, "ss", &a0, &a1))
              {
                INT_CALL(object = JoinDocFreqValueSource(a0, a1));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_JoinDocFreqValueSource_description(t_JoinDocFreqValueSource *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.description());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(JoinDocFreqValueSource), (PyObject *) self, "description", args, 2);
            }

            static PyObject *t_JoinDocFreqValueSource_equals(t_JoinDocFreqValueSource *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(JoinDocFreqValueSource), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_JoinDocFreqValueSource_getValues(t_JoinDocFreqValueSource *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::FunctionValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::t_FunctionValues::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(JoinDocFreqValueSource), (PyObject *) self, "getValues", args, 2);
            }

            static PyObject *t_JoinDocFreqValueSource_hashCode(t_JoinDocFreqValueSource *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(JoinDocFreqValueSource), (PyObject *) self, "hashCode", args, 2);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/charfilter/HTMLStripCharFilter.h"
#include "java/io/IOException.h"
#include "java/io/Reader.h"
#include "java/util/Set.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace charfilter {

          ::java::lang::Class *HTMLStripCharFilter::class$ = NULL;
          jmethodID *HTMLStripCharFilter::mids$ = NULL;
          bool HTMLStripCharFilter::live$ = false;

          jclass HTMLStripCharFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/charfilter/HTMLStripCharFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_cf2e3c10] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;)V");
              mids$[mid_init$_2df021b4] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;Ljava/util/Set;)V");
              mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
              mids$[mid_read_54c6a179] = env->getMethodID(cls, "read", "()I");
              mids$[mid_read_6f0bb349] = env->getMethodID(cls, "read", "([CII)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          HTMLStripCharFilter::HTMLStripCharFilter(const ::java::io::Reader & a0) : ::org::apache::lucene::analysis::charfilter::BaseCharFilter(env->newObject(initializeClass, &mids$, mid_init$_cf2e3c10, a0.this$)) {}

          HTMLStripCharFilter::HTMLStripCharFilter(const ::java::io::Reader & a0, const ::java::util::Set & a1) : ::org::apache::lucene::analysis::charfilter::BaseCharFilter(env->newObject(initializeClass, &mids$, mid_init$_2df021b4, a0.this$, a1.this$)) {}

          void HTMLStripCharFilter::close() const
          {
            env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
          }

          jint HTMLStripCharFilter::read() const
          {
            return env->callIntMethod(this$, mids$[mid_read_54c6a179]);
          }

          jint HTMLStripCharFilter::read(const JArray< jchar > & a0, jint a1, jint a2) const
          {
            return env->callIntMethod(this$, mids$[mid_read_6f0bb349], a0.this$, a1, a2);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace charfilter {
          static PyObject *t_HTMLStripCharFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_HTMLStripCharFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_HTMLStripCharFilter_init_(t_HTMLStripCharFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_HTMLStripCharFilter_close(t_HTMLStripCharFilter *self, PyObject *args);
          static PyObject *t_HTMLStripCharFilter_read(t_HTMLStripCharFilter *self, PyObject *args);

          static PyMethodDef t_HTMLStripCharFilter__methods_[] = {
            DECLARE_METHOD(t_HTMLStripCharFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HTMLStripCharFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HTMLStripCharFilter, close, METH_VARARGS),
            DECLARE_METHOD(t_HTMLStripCharFilter, read, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(HTMLStripCharFilter, t_HTMLStripCharFilter, ::org::apache::lucene::analysis::charfilter::BaseCharFilter, HTMLStripCharFilter, t_HTMLStripCharFilter_init_, 0, 0, 0, 0, 0);

          void t_HTMLStripCharFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(HTMLStripCharFilter), module, "HTMLStripCharFilter", 0);
          }

          void t_HTMLStripCharFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(HTMLStripCharFilter).tp_dict, "class_", make_descriptor(HTMLStripCharFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(HTMLStripCharFilter).tp_dict, "wrapfn_", make_descriptor(t_HTMLStripCharFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(HTMLStripCharFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_HTMLStripCharFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, HTMLStripCharFilter::initializeClass, 1)))
              return NULL;
            return t_HTMLStripCharFilter::wrap_Object(HTMLStripCharFilter(((t_HTMLStripCharFilter *) arg)->object.this$));
          }
          static PyObject *t_HTMLStripCharFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, HTMLStripCharFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_HTMLStripCharFilter_init_(t_HTMLStripCharFilter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::java::io::Reader a0((jobject) NULL);
                HTMLStripCharFilter object((jobject) NULL);

                if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
                {
                  INT_CALL(object = HTMLStripCharFilter(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::java::io::Reader a0((jobject) NULL);
                ::java::util::Set a1((jobject) NULL);
                PyTypeObject **p1;
                HTMLStripCharFilter object((jobject) NULL);

                if (!parseArgs(args, "kK", ::java::io::Reader::initializeClass, ::java::util::Set::initializeClass, &a0, &a1, &p1, ::java::util::t_Set::parameters_))
                {
                  INT_CALL(object = HTMLStripCharFilter(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_HTMLStripCharFilter_close(t_HTMLStripCharFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.close());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(HTMLStripCharFilter), (PyObject *) self, "close", args, 2);
          }

          static PyObject *t_HTMLStripCharFilter_read(t_HTMLStripCharFilter *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                jint result;
                OBJ_CALL(result = self->object.read());
                return PyInt_FromLong((long) result);
              }
              break;
             case 3:
              {
                JArray< jchar > a0((jobject) NULL);
                jint a1;
                jint a2;
                jint result;

                if (!parseArgs(args, "[CII", &a0, &a1, &a2))
                {
                  OBJ_CALL(result = self->object.read(a0, a1, a2));
                  return PyInt_FromLong((long) result);
                }
              }
            }

            return callSuper(&PY_TYPE(HTMLStripCharFilter), (PyObject *) self, "read", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/SlowCompositeReaderWrapper.h"
#include "org/apache/lucene/index/StoredFieldVisitor.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/BinaryDocValues.h"
#include "org/apache/lucene/index/Fields.h"
#include "org/apache/lucene/index/SortedDocValues.h"
#include "org/apache/lucene/util/Bits.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/index/NumericDocValues.h"
#include "org/apache/lucene/index/SortedNumericDocValues.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/index/AtomicReader$CoreClosedListener.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/SortedSetDocValues.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *SlowCompositeReaderWrapper::class$ = NULL;
        jmethodID *SlowCompositeReaderWrapper::mids$ = NULL;
        bool SlowCompositeReaderWrapper::live$ = false;

        jclass SlowCompositeReaderWrapper::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/SlowCompositeReaderWrapper");

            mids$ = new jmethodID[max_mid];
            mids$[mid_addCoreClosedListener_cbc2818f] = env->getMethodID(cls, "addCoreClosedListener", "(Lorg/apache/lucene/index/AtomicReader$CoreClosedListener;)V");
            mids$[mid_checkIntegrity_54c6a166] = env->getMethodID(cls, "checkIntegrity", "()V");
            mids$[mid_document_a2ea3ebe] = env->getMethodID(cls, "document", "(ILorg/apache/lucene/index/StoredFieldVisitor;)V");
            mids$[mid_fields_77db581d] = env->getMethodID(cls, "fields", "()Lorg/apache/lucene/index/Fields;");
            mids$[mid_getBinaryDocValues_ecab96be] = env->getMethodID(cls, "getBinaryDocValues", "(Ljava/lang/String;)Lorg/apache/lucene/index/BinaryDocValues;");
            mids$[mid_getCombinedCoreAndDeletesKey_846352c3] = env->getMethodID(cls, "getCombinedCoreAndDeletesKey", "()Ljava/lang/Object;");
            mids$[mid_getCoreCacheKey_846352c3] = env->getMethodID(cls, "getCoreCacheKey", "()Ljava/lang/Object;");
            mids$[mid_getDocsWithField_e1c6a7db] = env->getMethodID(cls, "getDocsWithField", "(Ljava/lang/String;)Lorg/apache/lucene/util/Bits;");
            mids$[mid_getFieldInfos_9ba20825] = env->getMethodID(cls, "getFieldInfos", "()Lorg/apache/lucene/index/FieldInfos;");
            mids$[mid_getLiveDocs_03c2457d] = env->getMethodID(cls, "getLiveDocs", "()Lorg/apache/lucene/util/Bits;");
            mids$[mid_getNormValues_d2b19f49] = env->getMethodID(cls, "getNormValues", "(Ljava/lang/String;)Lorg/apache/lucene/index/NumericDocValues;");
            mids$[mid_getNumericDocValues_d2b19f49] = env->getMethodID(cls, "getNumericDocValues", "(Ljava/lang/String;)Lorg/apache/lucene/index/NumericDocValues;");
            mids$[mid_getSortedDocValues_7b8b1a0a] = env->getMethodID(cls, "getSortedDocValues", "(Ljava/lang/String;)Lorg/apache/lucene/index/SortedDocValues;");
            mids$[mid_getSortedNumericDocValues_37cd1812] = env->getMethodID(cls, "getSortedNumericDocValues", "(Ljava/lang/String;)Lorg/apache/lucene/index/SortedNumericDocValues;");
            mids$[mid_getSortedSetDocValues_43e0e807] = env->getMethodID(cls, "getSortedSetDocValues", "(Ljava/lang/String;)Lorg/apache/lucene/index/SortedSetDocValues;");
            mids$[mid_getTermVectors_ef1c9c73] = env->getMethodID(cls, "getTermVectors", "(I)Lorg/apache/lucene/index/Fields;");
            mids$[mid_maxDoc_54c6a179] = env->getMethodID(cls, "maxDoc", "()I");
            mids$[mid_numDocs_54c6a179] = env->getMethodID(cls, "numDocs", "()I");
            mids$[mid_removeCoreClosedListener_cbc2818f] = env->getMethodID(cls, "removeCoreClosedListener", "(Lorg/apache/lucene/index/AtomicReader$CoreClosedListener;)V");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
            mids$[mid_wrap_b2ba15f1] = env->getStaticMethodID(cls, "wrap", "(Lorg/apache/lucene/index/IndexReader;)Lorg/apache/lucene/index/AtomicReader;");
            mids$[mid_doClose_54c6a166] = env->getMethodID(cls, "doClose", "()V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void SlowCompositeReaderWrapper::addCoreClosedListener(const ::org::apache::lucene::index::AtomicReader$CoreClosedListener & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_addCoreClosedListener_cbc2818f], a0.this$);
        }

        void SlowCompositeReaderWrapper::checkIntegrity() const
        {
          env->callVoidMethod(this$, mids$[mid_checkIntegrity_54c6a166]);
        }

        void SlowCompositeReaderWrapper::document(jint a0, const ::org::apache::lucene::index::StoredFieldVisitor & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_document_a2ea3ebe], a0, a1.this$);
        }

        ::org::apache::lucene::index::Fields SlowCompositeReaderWrapper::fields() const
        {
          return ::org::apache::lucene::index::Fields(env->callObjectMethod(this$, mids$[mid_fields_77db581d]));
        }

        ::org::apache::lucene::index::BinaryDocValues SlowCompositeReaderWrapper::getBinaryDocValues(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::BinaryDocValues(env->callObjectMethod(this$, mids$[mid_getBinaryDocValues_ecab96be], a0.this$));
        }

        ::java::lang::Object SlowCompositeReaderWrapper::getCombinedCoreAndDeletesKey() const
        {
          return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_getCombinedCoreAndDeletesKey_846352c3]));
        }

        ::java::lang::Object SlowCompositeReaderWrapper::getCoreCacheKey() const
        {
          return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_getCoreCacheKey_846352c3]));
        }

        ::org::apache::lucene::util::Bits SlowCompositeReaderWrapper::getDocsWithField(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::util::Bits(env->callObjectMethod(this$, mids$[mid_getDocsWithField_e1c6a7db], a0.this$));
        }

        ::org::apache::lucene::index::FieldInfos SlowCompositeReaderWrapper::getFieldInfos() const
        {
          return ::org::apache::lucene::index::FieldInfos(env->callObjectMethod(this$, mids$[mid_getFieldInfos_9ba20825]));
        }

        ::org::apache::lucene::util::Bits SlowCompositeReaderWrapper::getLiveDocs() const
        {
          return ::org::apache::lucene::util::Bits(env->callObjectMethod(this$, mids$[mid_getLiveDocs_03c2457d]));
        }

        ::org::apache::lucene::index::NumericDocValues SlowCompositeReaderWrapper::getNormValues(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::NumericDocValues(env->callObjectMethod(this$, mids$[mid_getNormValues_d2b19f49], a0.this$));
        }

        ::org::apache::lucene::index::NumericDocValues SlowCompositeReaderWrapper::getNumericDocValues(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::NumericDocValues(env->callObjectMethod(this$, mids$[mid_getNumericDocValues_d2b19f49], a0.this$));
        }

        ::org::apache::lucene::index::SortedDocValues SlowCompositeReaderWrapper::getSortedDocValues(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::SortedDocValues(env->callObjectMethod(this$, mids$[mid_getSortedDocValues_7b8b1a0a], a0.this$));
        }

        ::org::apache::lucene::index::SortedNumericDocValues SlowCompositeReaderWrapper::getSortedNumericDocValues(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::SortedNumericDocValues(env->callObjectMethod(this$, mids$[mid_getSortedNumericDocValues_37cd1812], a0.this$));
        }

        ::org::apache::lucene::index::SortedSetDocValues SlowCompositeReaderWrapper::getSortedSetDocValues(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::SortedSetDocValues(env->callObjectMethod(this$, mids$[mid_getSortedSetDocValues_43e0e807], a0.this$));
        }

        ::org::apache::lucene::index::Fields SlowCompositeReaderWrapper::getTermVectors(jint a0) const
        {
          return ::org::apache::lucene::index::Fields(env->callObjectMethod(this$, mids$[mid_getTermVectors_ef1c9c73], a0));
        }

        jint SlowCompositeReaderWrapper::maxDoc() const
        {
          return env->callIntMethod(this$, mids$[mid_maxDoc_54c6a179]);
        }

        jint SlowCompositeReaderWrapper::numDocs() const
        {
          return env->callIntMethod(this$, mids$[mid_numDocs_54c6a179]);
        }

        void SlowCompositeReaderWrapper::removeCoreClosedListener(const ::org::apache::lucene::index::AtomicReader$CoreClosedListener & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_removeCoreClosedListener_cbc2818f], a0.this$);
        }

        ::java::lang::String SlowCompositeReaderWrapper::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }

        ::org::apache::lucene::index::AtomicReader SlowCompositeReaderWrapper::wrap(const ::org::apache::lucene::index::IndexReader & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::AtomicReader(env->callStaticObjectMethod(cls, mids$[mid_wrap_b2ba15f1], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_SlowCompositeReaderWrapper_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SlowCompositeReaderWrapper_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SlowCompositeReaderWrapper_addCoreClosedListener(t_SlowCompositeReaderWrapper *self, PyObject *args);
        static PyObject *t_SlowCompositeReaderWrapper_checkIntegrity(t_SlowCompositeReaderWrapper *self, PyObject *args);
        static PyObject *t_SlowCompositeReaderWrapper_document(t_SlowCompositeReaderWrapper *self, PyObject *args);
        static PyObject *t_SlowCompositeReaderWrapper_fields(t_SlowCompositeReaderWrapper *self, PyObject *args);
        static PyObject *t_SlowCompositeReaderWrapper_getBinaryDocValues(t_SlowCompositeReaderWrapper *self, PyObject *args);
        static PyObject *t_SlowCompositeReaderWrapper_getCombinedCoreAndDeletesKey(t_SlowCompositeReaderWrapper *self, PyObject *args);
        static PyObject *t_SlowCompositeReaderWrapper_getCoreCacheKey(t_SlowCompositeReaderWrapper *self, PyObject *args);
        static PyObject *t_SlowCompositeReaderWrapper_getDocsWithField(t_SlowCompositeReaderWrapper *self, PyObject *args);
        static PyObject *t_SlowCompositeReaderWrapper_getFieldInfos(t_SlowCompositeReaderWrapper *self, PyObject *args);
        static PyObject *t_SlowCompositeReaderWrapper_getLiveDocs(t_SlowCompositeReaderWrapper *self, PyObject *args);
        static PyObject *t_SlowCompositeReaderWrapper_getNormValues(t_SlowCompositeReaderWrapper *self, PyObject *args);
        static PyObject *t_SlowCompositeReaderWrapper_getNumericDocValues(t_SlowCompositeReaderWrapper *self, PyObject *args);
        static PyObject *t_SlowCompositeReaderWrapper_getSortedDocValues(t_SlowCompositeReaderWrapper *self, PyObject *args);
        static PyObject *t_SlowCompositeReaderWrapper_getSortedNumericDocValues(t_SlowCompositeReaderWrapper *self, PyObject *args);
        static PyObject *t_SlowCompositeReaderWrapper_getSortedSetDocValues(t_SlowCompositeReaderWrapper *self, PyObject *args);
        static PyObject *t_SlowCompositeReaderWrapper_getTermVectors(t_SlowCompositeReaderWrapper *self, PyObject *args);
        static PyObject *t_SlowCompositeReaderWrapper_maxDoc(t_SlowCompositeReaderWrapper *self, PyObject *args);
        static PyObject *t_SlowCompositeReaderWrapper_numDocs(t_SlowCompositeReaderWrapper *self, PyObject *args);
        static PyObject *t_SlowCompositeReaderWrapper_removeCoreClosedListener(t_SlowCompositeReaderWrapper *self, PyObject *args);
        static PyObject *t_SlowCompositeReaderWrapper_toString(t_SlowCompositeReaderWrapper *self, PyObject *args);
        static PyObject *t_SlowCompositeReaderWrapper_wrap(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SlowCompositeReaderWrapper_get__combinedCoreAndDeletesKey(t_SlowCompositeReaderWrapper *self, void *data);
        static PyObject *t_SlowCompositeReaderWrapper_get__coreCacheKey(t_SlowCompositeReaderWrapper *self, void *data);
        static PyObject *t_SlowCompositeReaderWrapper_get__fieldInfos(t_SlowCompositeReaderWrapper *self, void *data);
        static PyObject *t_SlowCompositeReaderWrapper_get__liveDocs(t_SlowCompositeReaderWrapper *self, void *data);
        static PyGetSetDef t_SlowCompositeReaderWrapper__fields_[] = {
          DECLARE_GET_FIELD(t_SlowCompositeReaderWrapper, combinedCoreAndDeletesKey),
          DECLARE_GET_FIELD(t_SlowCompositeReaderWrapper, coreCacheKey),
          DECLARE_GET_FIELD(t_SlowCompositeReaderWrapper, fieldInfos),
          DECLARE_GET_FIELD(t_SlowCompositeReaderWrapper, liveDocs),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_SlowCompositeReaderWrapper__methods_[] = {
          DECLARE_METHOD(t_SlowCompositeReaderWrapper, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SlowCompositeReaderWrapper, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SlowCompositeReaderWrapper, addCoreClosedListener, METH_VARARGS),
          DECLARE_METHOD(t_SlowCompositeReaderWrapper, checkIntegrity, METH_VARARGS),
          DECLARE_METHOD(t_SlowCompositeReaderWrapper, document, METH_VARARGS),
          DECLARE_METHOD(t_SlowCompositeReaderWrapper, fields, METH_VARARGS),
          DECLARE_METHOD(t_SlowCompositeReaderWrapper, getBinaryDocValues, METH_VARARGS),
          DECLARE_METHOD(t_SlowCompositeReaderWrapper, getCombinedCoreAndDeletesKey, METH_VARARGS),
          DECLARE_METHOD(t_SlowCompositeReaderWrapper, getCoreCacheKey, METH_VARARGS),
          DECLARE_METHOD(t_SlowCompositeReaderWrapper, getDocsWithField, METH_VARARGS),
          DECLARE_METHOD(t_SlowCompositeReaderWrapper, getFieldInfos, METH_VARARGS),
          DECLARE_METHOD(t_SlowCompositeReaderWrapper, getLiveDocs, METH_VARARGS),
          DECLARE_METHOD(t_SlowCompositeReaderWrapper, getNormValues, METH_VARARGS),
          DECLARE_METHOD(t_SlowCompositeReaderWrapper, getNumericDocValues, METH_VARARGS),
          DECLARE_METHOD(t_SlowCompositeReaderWrapper, getSortedDocValues, METH_VARARGS),
          DECLARE_METHOD(t_SlowCompositeReaderWrapper, getSortedNumericDocValues, METH_VARARGS),
          DECLARE_METHOD(t_SlowCompositeReaderWrapper, getSortedSetDocValues, METH_VARARGS),
          DECLARE_METHOD(t_SlowCompositeReaderWrapper, getTermVectors, METH_VARARGS),
          DECLARE_METHOD(t_SlowCompositeReaderWrapper, maxDoc, METH_VARARGS),
          DECLARE_METHOD(t_SlowCompositeReaderWrapper, numDocs, METH_VARARGS),
          DECLARE_METHOD(t_SlowCompositeReaderWrapper, removeCoreClosedListener, METH_VARARGS),
          DECLARE_METHOD(t_SlowCompositeReaderWrapper, toString, METH_VARARGS),
          DECLARE_METHOD(t_SlowCompositeReaderWrapper, wrap, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SlowCompositeReaderWrapper, t_SlowCompositeReaderWrapper, ::org::apache::lucene::index::AtomicReader, SlowCompositeReaderWrapper, abstract_init, 0, 0, t_SlowCompositeReaderWrapper__fields_, 0, 0);

        void t_SlowCompositeReaderWrapper::install(PyObject *module)
        {
          installType(&PY_TYPE(SlowCompositeReaderWrapper), module, "SlowCompositeReaderWrapper", 0);
        }

        void t_SlowCompositeReaderWrapper::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SlowCompositeReaderWrapper).tp_dict, "class_", make_descriptor(SlowCompositeReaderWrapper::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SlowCompositeReaderWrapper).tp_dict, "wrapfn_", make_descriptor(t_SlowCompositeReaderWrapper::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SlowCompositeReaderWrapper).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SlowCompositeReaderWrapper_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SlowCompositeReaderWrapper::initializeClass, 1)))
            return NULL;
          return t_SlowCompositeReaderWrapper::wrap_Object(SlowCompositeReaderWrapper(((t_SlowCompositeReaderWrapper *) arg)->object.this$));
        }
        static PyObject *t_SlowCompositeReaderWrapper_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SlowCompositeReaderWrapper::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_SlowCompositeReaderWrapper_addCoreClosedListener(t_SlowCompositeReaderWrapper *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReader$CoreClosedListener a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReader$CoreClosedListener::initializeClass, &a0))
          {
            OBJ_CALL(self->object.addCoreClosedListener(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(SlowCompositeReaderWrapper), (PyObject *) self, "addCoreClosedListener", args, 2);
        }

        static PyObject *t_SlowCompositeReaderWrapper_checkIntegrity(t_SlowCompositeReaderWrapper *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.checkIntegrity());
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(SlowCompositeReaderWrapper), (PyObject *) self, "checkIntegrity", args, 2);
        }

        static PyObject *t_SlowCompositeReaderWrapper_document(t_SlowCompositeReaderWrapper *self, PyObject *args)
        {
          jint a0;
          ::org::apache::lucene::index::StoredFieldVisitor a1((jobject) NULL);

          if (!parseArgs(args, "Ik", ::org::apache::lucene::index::StoredFieldVisitor::initializeClass, &a0, &a1))
          {
            OBJ_CALL(self->object.document(a0, a1));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(SlowCompositeReaderWrapper), (PyObject *) self, "document", args, 2);
        }

        static PyObject *t_SlowCompositeReaderWrapper_fields(t_SlowCompositeReaderWrapper *self, PyObject *args)
        {
          ::org::apache::lucene::index::Fields result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.fields());
            return ::org::apache::lucene::index::t_Fields::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(SlowCompositeReaderWrapper), (PyObject *) self, "fields", args, 2);
        }

        static PyObject *t_SlowCompositeReaderWrapper_getBinaryDocValues(t_SlowCompositeReaderWrapper *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::BinaryDocValues result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getBinaryDocValues(a0));
            return ::org::apache::lucene::index::t_BinaryDocValues::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(SlowCompositeReaderWrapper), (PyObject *) self, "getBinaryDocValues", args, 2);
        }

        static PyObject *t_SlowCompositeReaderWrapper_getCombinedCoreAndDeletesKey(t_SlowCompositeReaderWrapper *self, PyObject *args)
        {
          ::java::lang::Object result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getCombinedCoreAndDeletesKey());
            return ::java::lang::t_Object::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(SlowCompositeReaderWrapper), (PyObject *) self, "getCombinedCoreAndDeletesKey", args, 2);
        }

        static PyObject *t_SlowCompositeReaderWrapper_getCoreCacheKey(t_SlowCompositeReaderWrapper *self, PyObject *args)
        {
          ::java::lang::Object result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getCoreCacheKey());
            return ::java::lang::t_Object::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(SlowCompositeReaderWrapper), (PyObject *) self, "getCoreCacheKey", args, 2);
        }

        static PyObject *t_SlowCompositeReaderWrapper_getDocsWithField(t_SlowCompositeReaderWrapper *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::util::Bits result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getDocsWithField(a0));
            return ::org::apache::lucene::util::t_Bits::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(SlowCompositeReaderWrapper), (PyObject *) self, "getDocsWithField", args, 2);
        }

        static PyObject *t_SlowCompositeReaderWrapper_getFieldInfos(t_SlowCompositeReaderWrapper *self, PyObject *args)
        {
          ::org::apache::lucene::index::FieldInfos result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getFieldInfos());
            return ::org::apache::lucene::index::t_FieldInfos::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(SlowCompositeReaderWrapper), (PyObject *) self, "getFieldInfos", args, 2);
        }

        static PyObject *t_SlowCompositeReaderWrapper_getLiveDocs(t_SlowCompositeReaderWrapper *self, PyObject *args)
        {
          ::org::apache::lucene::util::Bits result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getLiveDocs());
            return ::org::apache::lucene::util::t_Bits::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(SlowCompositeReaderWrapper), (PyObject *) self, "getLiveDocs", args, 2);
        }

        static PyObject *t_SlowCompositeReaderWrapper_getNormValues(t_SlowCompositeReaderWrapper *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::NumericDocValues result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getNormValues(a0));
            return ::org::apache::lucene::index::t_NumericDocValues::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(SlowCompositeReaderWrapper), (PyObject *) self, "getNormValues", args, 2);
        }

        static PyObject *t_SlowCompositeReaderWrapper_getNumericDocValues(t_SlowCompositeReaderWrapper *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::NumericDocValues result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getNumericDocValues(a0));
            return ::org::apache::lucene::index::t_NumericDocValues::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(SlowCompositeReaderWrapper), (PyObject *) self, "getNumericDocValues", args, 2);
        }

        static PyObject *t_SlowCompositeReaderWrapper_getSortedDocValues(t_SlowCompositeReaderWrapper *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::SortedDocValues result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getSortedDocValues(a0));
            return ::org::apache::lucene::index::t_SortedDocValues::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(SlowCompositeReaderWrapper), (PyObject *) self, "getSortedDocValues", args, 2);
        }

        static PyObject *t_SlowCompositeReaderWrapper_getSortedNumericDocValues(t_SlowCompositeReaderWrapper *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::SortedNumericDocValues result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getSortedNumericDocValues(a0));
            return ::org::apache::lucene::index::t_SortedNumericDocValues::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(SlowCompositeReaderWrapper), (PyObject *) self, "getSortedNumericDocValues", args, 2);
        }

        static PyObject *t_SlowCompositeReaderWrapper_getSortedSetDocValues(t_SlowCompositeReaderWrapper *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::SortedSetDocValues result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getSortedSetDocValues(a0));
            return ::org::apache::lucene::index::t_SortedSetDocValues::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(SlowCompositeReaderWrapper), (PyObject *) self, "getSortedSetDocValues", args, 2);
        }

        static PyObject *t_SlowCompositeReaderWrapper_getTermVectors(t_SlowCompositeReaderWrapper *self, PyObject *args)
        {
          jint a0;
          ::org::apache::lucene::index::Fields result((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.getTermVectors(a0));
            return ::org::apache::lucene::index::t_Fields::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(SlowCompositeReaderWrapper), (PyObject *) self, "getTermVectors", args, 2);
        }

        static PyObject *t_SlowCompositeReaderWrapper_maxDoc(t_SlowCompositeReaderWrapper *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.maxDoc());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(SlowCompositeReaderWrapper), (PyObject *) self, "maxDoc", args, 2);
        }

        static PyObject *t_SlowCompositeReaderWrapper_numDocs(t_SlowCompositeReaderWrapper *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.numDocs());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(SlowCompositeReaderWrapper), (PyObject *) self, "numDocs", args, 2);
        }

        static PyObject *t_SlowCompositeReaderWrapper_removeCoreClosedListener(t_SlowCompositeReaderWrapper *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReader$CoreClosedListener a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReader$CoreClosedListener::initializeClass, &a0))
          {
            OBJ_CALL(self->object.removeCoreClosedListener(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(SlowCompositeReaderWrapper), (PyObject *) self, "removeCoreClosedListener", args, 2);
        }

        static PyObject *t_SlowCompositeReaderWrapper_toString(t_SlowCompositeReaderWrapper *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(SlowCompositeReaderWrapper), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_SlowCompositeReaderWrapper_wrap(PyTypeObject *type, PyObject *arg)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::org::apache::lucene::index::AtomicReader result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::SlowCompositeReaderWrapper::wrap(a0));
            return ::org::apache::lucene::index::t_AtomicReader::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "wrap", arg);
          return NULL;
        }

        static PyObject *t_SlowCompositeReaderWrapper_get__combinedCoreAndDeletesKey(t_SlowCompositeReaderWrapper *self, void *data)
        {
          ::java::lang::Object value((jobject) NULL);
          OBJ_CALL(value = self->object.getCombinedCoreAndDeletesKey());
          return ::java::lang::t_Object::wrap_Object(value);
        }

        static PyObject *t_SlowCompositeReaderWrapper_get__coreCacheKey(t_SlowCompositeReaderWrapper *self, void *data)
        {
          ::java::lang::Object value((jobject) NULL);
          OBJ_CALL(value = self->object.getCoreCacheKey());
          return ::java::lang::t_Object::wrap_Object(value);
        }

        static PyObject *t_SlowCompositeReaderWrapper_get__fieldInfos(t_SlowCompositeReaderWrapper *self, void *data)
        {
          ::org::apache::lucene::index::FieldInfos value((jobject) NULL);
          OBJ_CALL(value = self->object.getFieldInfos());
          return ::org::apache::lucene::index::t_FieldInfos::wrap_Object(value);
        }

        static PyObject *t_SlowCompositeReaderWrapper_get__liveDocs(t_SlowCompositeReaderWrapper *self, void *data)
        {
          ::org::apache::lucene::util::Bits value((jobject) NULL);
          OBJ_CALL(value = self->object.getLiveDocs());
          return ::org::apache::lucene::util::t_Bits::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/mutable/MutableValueFloat.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace mutable$ {

          ::java::lang::Class *MutableValueFloat::class$ = NULL;
          jmethodID *MutableValueFloat::mids$ = NULL;
          jfieldID *MutableValueFloat::fids$ = NULL;
          bool MutableValueFloat::live$ = false;

          jclass MutableValueFloat::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/mutable/MutableValueFloat");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_compareSameType_290588f1] = env->getMethodID(cls, "compareSameType", "(Ljava/lang/Object;)I");
              mids$[mid_copy_d590ce7c] = env->getMethodID(cls, "copy", "(Lorg/apache/lucene/util/mutable/MutableValue;)V");
              mids$[mid_duplicate_15ab3811] = env->getMethodID(cls, "duplicate", "()Lorg/apache/lucene/util/mutable/MutableValue;");
              mids$[mid_equalsSameType_290588e2] = env->getMethodID(cls, "equalsSameType", "(Ljava/lang/Object;)Z");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_toObject_846352c3] = env->getMethodID(cls, "toObject", "()Ljava/lang/Object;");

              fids$ = new jfieldID[max_fid];
              fids$[fid_value] = env->getFieldID(cls, "value", "F");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          MutableValueFloat::MutableValueFloat() : ::org::apache::lucene::util::mutable$::MutableValue(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint MutableValueFloat::compareSameType(const ::java::lang::Object & a0) const
          {
            return env->callIntMethod(this$, mids$[mid_compareSameType_290588f1], a0.this$);
          }

          void MutableValueFloat::copy(const ::org::apache::lucene::util::mutable$::MutableValue & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_copy_d590ce7c], a0.this$);
          }

          ::org::apache::lucene::util::mutable$::MutableValue MutableValueFloat::duplicate() const
          {
            return ::org::apache::lucene::util::mutable$::MutableValue(env->callObjectMethod(this$, mids$[mid_duplicate_15ab3811]));
          }

          jboolean MutableValueFloat::equalsSameType(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equalsSameType_290588e2], a0.this$);
          }

          jint MutableValueFloat::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          ::java::lang::Object MutableValueFloat::toObject() const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_toObject_846352c3]));
          }

          jfloat MutableValueFloat::_get_value() const
          {
            return env->getFloatField(this$, fids$[fid_value]);
          }

          void MutableValueFloat::_set_value(jfloat a0) const
          {
            env->setFloatField(this$, fids$[fid_value], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace mutable$ {
          static PyObject *t_MutableValueFloat_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_MutableValueFloat_instance_(PyTypeObject *type, PyObject *arg);
          static int t_MutableValueFloat_init_(t_MutableValueFloat *self, PyObject *args, PyObject *kwds);
          static PyObject *t_MutableValueFloat_compareSameType(t_MutableValueFloat *self, PyObject *args);
          static PyObject *t_MutableValueFloat_copy(t_MutableValueFloat *self, PyObject *args);
          static PyObject *t_MutableValueFloat_duplicate(t_MutableValueFloat *self, PyObject *args);
          static PyObject *t_MutableValueFloat_equalsSameType(t_MutableValueFloat *self, PyObject *args);
          static PyObject *t_MutableValueFloat_hashCode(t_MutableValueFloat *self, PyObject *args);
          static PyObject *t_MutableValueFloat_toObject(t_MutableValueFloat *self, PyObject *args);
          static PyObject *t_MutableValueFloat_get__value(t_MutableValueFloat *self, void *data);
          static int t_MutableValueFloat_set__value(t_MutableValueFloat *self, PyObject *arg, void *data);

          static PyGetSetDef t_MutableValueFloat__fields_[] = {
            DECLARE_GETSET_FIELD(t_MutableValueFloat, value),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_MutableValueFloat__methods_[] = {
            DECLARE_METHOD(t_MutableValueFloat, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MutableValueFloat, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MutableValueFloat, compareSameType, METH_VARARGS),
            DECLARE_METHOD(t_MutableValueFloat, copy, METH_VARARGS),
            DECLARE_METHOD(t_MutableValueFloat, duplicate, METH_VARARGS),
            DECLARE_METHOD(t_MutableValueFloat, equalsSameType, METH_VARARGS),
            DECLARE_METHOD(t_MutableValueFloat, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_MutableValueFloat, toObject, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(MutableValueFloat, t_MutableValueFloat, ::org::apache::lucene::util::mutable$::MutableValue, MutableValueFloat, t_MutableValueFloat_init_, 0, 0, t_MutableValueFloat__fields_, 0, 0);

          void t_MutableValueFloat::install(PyObject *module)
          {
            installType(&PY_TYPE(MutableValueFloat), module, "MutableValueFloat", 0);
          }

          void t_MutableValueFloat::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(MutableValueFloat).tp_dict, "class_", make_descriptor(MutableValueFloat::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(MutableValueFloat).tp_dict, "wrapfn_", make_descriptor(t_MutableValueFloat::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(MutableValueFloat).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_MutableValueFloat_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, MutableValueFloat::initializeClass, 1)))
              return NULL;
            return t_MutableValueFloat::wrap_Object(MutableValueFloat(((t_MutableValueFloat *) arg)->object.this$));
          }
          static PyObject *t_MutableValueFloat_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, MutableValueFloat::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_MutableValueFloat_init_(t_MutableValueFloat *self, PyObject *args, PyObject *kwds)
          {
            MutableValueFloat object((jobject) NULL);

            INT_CALL(object = MutableValueFloat());
            self->object = object;

            return 0;
          }

          static PyObject *t_MutableValueFloat_compareSameType(t_MutableValueFloat *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jint result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.compareSameType(a0));
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(MutableValueFloat), (PyObject *) self, "compareSameType", args, 2);
          }

          static PyObject *t_MutableValueFloat_copy(t_MutableValueFloat *self, PyObject *args)
          {
            ::org::apache::lucene::util::mutable$::MutableValue a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::util::mutable$::MutableValue::initializeClass, &a0))
            {
              OBJ_CALL(self->object.copy(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(MutableValueFloat), (PyObject *) self, "copy", args, 2);
          }

          static PyObject *t_MutableValueFloat_duplicate(t_MutableValueFloat *self, PyObject *args)
          {
            ::org::apache::lucene::util::mutable$::MutableValue result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.duplicate());
              return ::org::apache::lucene::util::mutable$::t_MutableValue::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(MutableValueFloat), (PyObject *) self, "duplicate", args, 2);
          }

          static PyObject *t_MutableValueFloat_equalsSameType(t_MutableValueFloat *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equalsSameType(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(MutableValueFloat), (PyObject *) self, "equalsSameType", args, 2);
          }

          static PyObject *t_MutableValueFloat_hashCode(t_MutableValueFloat *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(MutableValueFloat), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_MutableValueFloat_toObject(t_MutableValueFloat *self, PyObject *args)
          {
            ::java::lang::Object result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toObject());
              return ::java::lang::t_Object::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(MutableValueFloat), (PyObject *) self, "toObject", args, 2);
          }

          static PyObject *t_MutableValueFloat_get__value(t_MutableValueFloat *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object._get_value());
            return PyFloat_FromDouble((double) value);
          }
          static int t_MutableValueFloat_set__value(t_MutableValueFloat *self, PyObject *arg, void *data)
          {
            jfloat value;
            if (!parseArg(arg, "F", &value))
            {
              INT_CALL(self->object._set_value(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "value", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/FieldInfo$DocValuesType.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *FieldInfo$DocValuesType::class$ = NULL;
        jmethodID *FieldInfo$DocValuesType::mids$ = NULL;
        bool FieldInfo$DocValuesType::live$ = false;
        FieldInfo$DocValuesType *FieldInfo$DocValuesType::BINARY = NULL;
        FieldInfo$DocValuesType *FieldInfo$DocValuesType::NUMERIC = NULL;
        FieldInfo$DocValuesType *FieldInfo$DocValuesType::SORTED = NULL;
        FieldInfo$DocValuesType *FieldInfo$DocValuesType::SORTED_NUMERIC = NULL;
        FieldInfo$DocValuesType *FieldInfo$DocValuesType::SORTED_SET = NULL;

        jclass FieldInfo$DocValuesType::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/FieldInfo$DocValuesType");

            mids$ = new jmethodID[max_mid];
            mids$[mid_valueOf_df70c72d] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/index/FieldInfo$DocValuesType;");
            mids$[mid_values_3d388c3f] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/index/FieldInfo$DocValuesType;");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            BINARY = new FieldInfo$DocValuesType(env->getStaticObjectField(cls, "BINARY", "Lorg/apache/lucene/index/FieldInfo$DocValuesType;"));
            NUMERIC = new FieldInfo$DocValuesType(env->getStaticObjectField(cls, "NUMERIC", "Lorg/apache/lucene/index/FieldInfo$DocValuesType;"));
            SORTED = new FieldInfo$DocValuesType(env->getStaticObjectField(cls, "SORTED", "Lorg/apache/lucene/index/FieldInfo$DocValuesType;"));
            SORTED_NUMERIC = new FieldInfo$DocValuesType(env->getStaticObjectField(cls, "SORTED_NUMERIC", "Lorg/apache/lucene/index/FieldInfo$DocValuesType;"));
            SORTED_SET = new FieldInfo$DocValuesType(env->getStaticObjectField(cls, "SORTED_SET", "Lorg/apache/lucene/index/FieldInfo$DocValuesType;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FieldInfo$DocValuesType FieldInfo$DocValuesType::valueOf(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return FieldInfo$DocValuesType(env->callStaticObjectMethod(cls, mids$[mid_valueOf_df70c72d], a0.this$));
        }

        JArray< FieldInfo$DocValuesType > FieldInfo$DocValuesType::values()
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< FieldInfo$DocValuesType >(env->callStaticObjectMethod(cls, mids$[mid_values_3d388c3f]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_FieldInfo$DocValuesType_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldInfo$DocValuesType_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldInfo$DocValuesType_of_(t_FieldInfo$DocValuesType *self, PyObject *args);
        static PyObject *t_FieldInfo$DocValuesType_valueOf(PyTypeObject *type, PyObject *args);
        static PyObject *t_FieldInfo$DocValuesType_values(PyTypeObject *type);
        static PyObject *t_FieldInfo$DocValuesType_get__parameters_(t_FieldInfo$DocValuesType *self, void *data);
        static PyGetSetDef t_FieldInfo$DocValuesType__fields_[] = {
          DECLARE_GET_FIELD(t_FieldInfo$DocValuesType, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FieldInfo$DocValuesType__methods_[] = {
          DECLARE_METHOD(t_FieldInfo$DocValuesType, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldInfo$DocValuesType, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldInfo$DocValuesType, of_, METH_VARARGS),
          DECLARE_METHOD(t_FieldInfo$DocValuesType, valueOf, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_FieldInfo$DocValuesType, values, METH_NOARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldInfo$DocValuesType, t_FieldInfo$DocValuesType, ::java::lang::Enum, FieldInfo$DocValuesType, abstract_init, 0, 0, t_FieldInfo$DocValuesType__fields_, 0, 0);
        PyObject *t_FieldInfo$DocValuesType::wrap_Object(const FieldInfo$DocValuesType& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FieldInfo$DocValuesType::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FieldInfo$DocValuesType *self = (t_FieldInfo$DocValuesType *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_FieldInfo$DocValuesType::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FieldInfo$DocValuesType::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FieldInfo$DocValuesType *self = (t_FieldInfo$DocValuesType *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_FieldInfo$DocValuesType::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldInfo$DocValuesType), module, "FieldInfo$DocValuesType", 0);
        }

        void t_FieldInfo$DocValuesType::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldInfo$DocValuesType).tp_dict, "class_", make_descriptor(FieldInfo$DocValuesType::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldInfo$DocValuesType).tp_dict, "wrapfn_", make_descriptor(t_FieldInfo$DocValuesType::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldInfo$DocValuesType).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(FieldInfo$DocValuesType::initializeClass);
          PyDict_SetItemString(PY_TYPE(FieldInfo$DocValuesType).tp_dict, "BINARY", make_descriptor(t_FieldInfo$DocValuesType::wrap_Object(*FieldInfo$DocValuesType::BINARY)));
          PyDict_SetItemString(PY_TYPE(FieldInfo$DocValuesType).tp_dict, "NUMERIC", make_descriptor(t_FieldInfo$DocValuesType::wrap_Object(*FieldInfo$DocValuesType::NUMERIC)));
          PyDict_SetItemString(PY_TYPE(FieldInfo$DocValuesType).tp_dict, "SORTED", make_descriptor(t_FieldInfo$DocValuesType::wrap_Object(*FieldInfo$DocValuesType::SORTED)));
          PyDict_SetItemString(PY_TYPE(FieldInfo$DocValuesType).tp_dict, "SORTED_NUMERIC", make_descriptor(t_FieldInfo$DocValuesType::wrap_Object(*FieldInfo$DocValuesType::SORTED_NUMERIC)));
          PyDict_SetItemString(PY_TYPE(FieldInfo$DocValuesType).tp_dict, "SORTED_SET", make_descriptor(t_FieldInfo$DocValuesType::wrap_Object(*FieldInfo$DocValuesType::SORTED_SET)));
        }

        static PyObject *t_FieldInfo$DocValuesType_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldInfo$DocValuesType::initializeClass, 1)))
            return NULL;
          return t_FieldInfo$DocValuesType::wrap_Object(FieldInfo$DocValuesType(((t_FieldInfo$DocValuesType *) arg)->object.this$));
        }
        static PyObject *t_FieldInfo$DocValuesType_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldInfo$DocValuesType::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FieldInfo$DocValuesType_of_(t_FieldInfo$DocValuesType *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_FieldInfo$DocValuesType_valueOf(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          FieldInfo$DocValuesType result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::FieldInfo$DocValuesType::valueOf(a0));
            return t_FieldInfo$DocValuesType::wrap_Object(result);
          }

          return callSuper(type, "valueOf", args, 2);
        }

        static PyObject *t_FieldInfo$DocValuesType_values(PyTypeObject *type)
        {
          JArray< FieldInfo$DocValuesType > result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::index::FieldInfo$DocValuesType::values());
          return JArray<jobject>(result.this$).wrap(t_FieldInfo$DocValuesType::wrap_jobject);
        }
        static PyObject *t_FieldInfo$DocValuesType_get__parameters_(t_FieldInfo$DocValuesType *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/vectorhighlight/BoundaryScanner.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {

          ::java::lang::Class *BoundaryScanner::class$ = NULL;
          jmethodID *BoundaryScanner::mids$ = NULL;
          bool BoundaryScanner::live$ = false;

          jclass BoundaryScanner::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/vectorhighlight/BoundaryScanner");

              mids$ = new jmethodID[max_mid];
              mids$[mid_findEndOffset_f3d950f1] = env->getMethodID(cls, "findEndOffset", "(Ljava/lang/StringBuilder;I)I");
              mids$[mid_findStartOffset_f3d950f1] = env->getMethodID(cls, "findStartOffset", "(Ljava/lang/StringBuilder;I)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jint BoundaryScanner::findEndOffset(const ::java::lang::StringBuilder & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_findEndOffset_f3d950f1], a0.this$, a1);
          }

          jint BoundaryScanner::findStartOffset(const ::java::lang::StringBuilder & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_findStartOffset_f3d950f1], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {
          static PyObject *t_BoundaryScanner_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BoundaryScanner_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BoundaryScanner_findEndOffset(t_BoundaryScanner *self, PyObject *args);
          static PyObject *t_BoundaryScanner_findStartOffset(t_BoundaryScanner *self, PyObject *args);

          static PyMethodDef t_BoundaryScanner__methods_[] = {
            DECLARE_METHOD(t_BoundaryScanner, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BoundaryScanner, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BoundaryScanner, findEndOffset, METH_VARARGS),
            DECLARE_METHOD(t_BoundaryScanner, findStartOffset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(BoundaryScanner, t_BoundaryScanner, ::java::lang::Object, BoundaryScanner, abstract_init, 0, 0, 0, 0, 0);

          void t_BoundaryScanner::install(PyObject *module)
          {
            installType(&PY_TYPE(BoundaryScanner), module, "BoundaryScanner", 0);
          }

          void t_BoundaryScanner::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(BoundaryScanner).tp_dict, "class_", make_descriptor(BoundaryScanner::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(BoundaryScanner).tp_dict, "wrapfn_", make_descriptor(t_BoundaryScanner::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(BoundaryScanner).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_BoundaryScanner_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BoundaryScanner::initializeClass, 1)))
              return NULL;
            return t_BoundaryScanner::wrap_Object(BoundaryScanner(((t_BoundaryScanner *) arg)->object.this$));
          }
          static PyObject *t_BoundaryScanner_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BoundaryScanner::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_BoundaryScanner_findEndOffset(t_BoundaryScanner *self, PyObject *args)
          {
            ::java::lang::StringBuilder a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "kI", ::java::lang::StringBuilder::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.findEndOffset(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "findEndOffset", args);
            return NULL;
          }

          static PyObject *t_BoundaryScanner_findStartOffset(t_BoundaryScanner *self, PyObject *args)
          {
            ::java::lang::StringBuilder a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "kI", ::java::lang::StringBuilder::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.findStartOffset(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "findStartOffset", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/payloads/AveragePayloadFunction.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace payloads {

          ::java::lang::Class *AveragePayloadFunction::class$ = NULL;
          jmethodID *AveragePayloadFunction::mids$ = NULL;
          bool AveragePayloadFunction::live$ = false;

          jclass AveragePayloadFunction::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/payloads/AveragePayloadFunction");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_currentScore_9fe8c3f6] = env->getMethodID(cls, "currentScore", "(ILjava/lang/String;IIIFF)F");
              mids$[mid_docScore_08788a8d] = env->getMethodID(cls, "docScore", "(ILjava/lang/String;IF)F");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          AveragePayloadFunction::AveragePayloadFunction() : ::org::apache::lucene::search::payloads::PayloadFunction(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jfloat AveragePayloadFunction::currentScore(jint a0, const ::java::lang::String & a1, jint a2, jint a3, jint a4, jfloat a5, jfloat a6) const
          {
            return env->callFloatMethod(this$, mids$[mid_currentScore_9fe8c3f6], a0, a1.this$, a2, a3, a4, a5, a6);
          }

          jfloat AveragePayloadFunction::docScore(jint a0, const ::java::lang::String & a1, jint a2, jfloat a3) const
          {
            return env->callFloatMethod(this$, mids$[mid_docScore_08788a8d], a0, a1.this$, a2, a3);
          }

          jboolean AveragePayloadFunction::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          jint AveragePayloadFunction::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace payloads {
          static PyObject *t_AveragePayloadFunction_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AveragePayloadFunction_instance_(PyTypeObject *type, PyObject *arg);
          static int t_AveragePayloadFunction_init_(t_AveragePayloadFunction *self, PyObject *args, PyObject *kwds);
          static PyObject *t_AveragePayloadFunction_currentScore(t_AveragePayloadFunction *self, PyObject *args);
          static PyObject *t_AveragePayloadFunction_docScore(t_AveragePayloadFunction *self, PyObject *args);
          static PyObject *t_AveragePayloadFunction_equals(t_AveragePayloadFunction *self, PyObject *args);
          static PyObject *t_AveragePayloadFunction_hashCode(t_AveragePayloadFunction *self, PyObject *args);

          static PyMethodDef t_AveragePayloadFunction__methods_[] = {
            DECLARE_METHOD(t_AveragePayloadFunction, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AveragePayloadFunction, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AveragePayloadFunction, currentScore, METH_VARARGS),
            DECLARE_METHOD(t_AveragePayloadFunction, docScore, METH_VARARGS),
            DECLARE_METHOD(t_AveragePayloadFunction, equals, METH_VARARGS),
            DECLARE_METHOD(t_AveragePayloadFunction, hashCode, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(AveragePayloadFunction, t_AveragePayloadFunction, ::org::apache::lucene::search::payloads::PayloadFunction, AveragePayloadFunction, t_AveragePayloadFunction_init_, 0, 0, 0, 0, 0);

          void t_AveragePayloadFunction::install(PyObject *module)
          {
            installType(&PY_TYPE(AveragePayloadFunction), module, "AveragePayloadFunction", 0);
          }

          void t_AveragePayloadFunction::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(AveragePayloadFunction).tp_dict, "class_", make_descriptor(AveragePayloadFunction::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(AveragePayloadFunction).tp_dict, "wrapfn_", make_descriptor(t_AveragePayloadFunction::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(AveragePayloadFunction).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_AveragePayloadFunction_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, AveragePayloadFunction::initializeClass, 1)))
              return NULL;
            return t_AveragePayloadFunction::wrap_Object(AveragePayloadFunction(((t_AveragePayloadFunction *) arg)->object.this$));
          }
          static PyObject *t_AveragePayloadFunction_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, AveragePayloadFunction::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_AveragePayloadFunction_init_(t_AveragePayloadFunction *self, PyObject *args, PyObject *kwds)
          {
            AveragePayloadFunction object((jobject) NULL);

            INT_CALL(object = AveragePayloadFunction());
            self->object = object;

            return 0;
          }

          static PyObject *t_AveragePayloadFunction_currentScore(t_AveragePayloadFunction *self, PyObject *args)
          {
            jint a0;
            ::java::lang::String a1((jobject) NULL);
            jint a2;
            jint a3;
            jint a4;
            jfloat a5;
            jfloat a6;
            jfloat result;

            if (!parseArgs(args, "IsIIIFF", &a0, &a1, &a2, &a3, &a4, &a5, &a6))
            {
              OBJ_CALL(result = self->object.currentScore(a0, a1, a2, a3, a4, a5, a6));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(AveragePayloadFunction), (PyObject *) self, "currentScore", args, 2);
          }

          static PyObject *t_AveragePayloadFunction_docScore(t_AveragePayloadFunction *self, PyObject *args)
          {
            jint a0;
            ::java::lang::String a1((jobject) NULL);
            jint a2;
            jfloat a3;
            jfloat result;

            if (!parseArgs(args, "IsIF", &a0, &a1, &a2, &a3))
            {
              OBJ_CALL(result = self->object.docScore(a0, a1, a2, a3));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(AveragePayloadFunction), (PyObject *) self, "docScore", args, 2);
          }

          static PyObject *t_AveragePayloadFunction_equals(t_AveragePayloadFunction *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(AveragePayloadFunction), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_AveragePayloadFunction_hashCode(t_AveragePayloadFunction *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(AveragePayloadFunction), (PyObject *) self, "hashCode", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/writercache/LruTaxonomyWriterCache$LRUType.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          namespace writercache {

            ::java::lang::Class *LruTaxonomyWriterCache$LRUType::class$ = NULL;
            jmethodID *LruTaxonomyWriterCache$LRUType::mids$ = NULL;
            bool LruTaxonomyWriterCache$LRUType::live$ = false;
            LruTaxonomyWriterCache$LRUType *LruTaxonomyWriterCache$LRUType::LRU_HASHED = NULL;
            LruTaxonomyWriterCache$LRUType *LruTaxonomyWriterCache$LRUType::LRU_STRING = NULL;

            jclass LruTaxonomyWriterCache$LRUType::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/writercache/LruTaxonomyWriterCache$LRUType");

                mids$ = new jmethodID[max_mid];
                mids$[mid_valueOf_dc8e332a] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/facet/taxonomy/writercache/LruTaxonomyWriterCache$LRUType;");
                mids$[mid_values_bbbf1f8c] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/facet/taxonomy/writercache/LruTaxonomyWriterCache$LRUType;");

                class$ = (::java::lang::Class *) new JObject(cls);
                cls = (jclass) class$->this$;

                LRU_HASHED = new LruTaxonomyWriterCache$LRUType(env->getStaticObjectField(cls, "LRU_HASHED", "Lorg/apache/lucene/facet/taxonomy/writercache/LruTaxonomyWriterCache$LRUType;"));
                LRU_STRING = new LruTaxonomyWriterCache$LRUType(env->getStaticObjectField(cls, "LRU_STRING", "Lorg/apache/lucene/facet/taxonomy/writercache/LruTaxonomyWriterCache$LRUType;"));
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            LruTaxonomyWriterCache$LRUType LruTaxonomyWriterCache$LRUType::valueOf(const ::java::lang::String & a0)
            {
              jclass cls = env->getClass(initializeClass);
              return LruTaxonomyWriterCache$LRUType(env->callStaticObjectMethod(cls, mids$[mid_valueOf_dc8e332a], a0.this$));
            }

            JArray< LruTaxonomyWriterCache$LRUType > LruTaxonomyWriterCache$LRUType::values()
            {
              jclass cls = env->getClass(initializeClass);
              return JArray< LruTaxonomyWriterCache$LRUType >(env->callStaticObjectMethod(cls, mids$[mid_values_bbbf1f8c]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          namespace writercache {
            static PyObject *t_LruTaxonomyWriterCache$LRUType_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_LruTaxonomyWriterCache$LRUType_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_LruTaxonomyWriterCache$LRUType_of_(t_LruTaxonomyWriterCache$LRUType *self, PyObject *args);
            static PyObject *t_LruTaxonomyWriterCache$LRUType_valueOf(PyTypeObject *type, PyObject *args);
            static PyObject *t_LruTaxonomyWriterCache$LRUType_values(PyTypeObject *type);
            static PyObject *t_LruTaxonomyWriterCache$LRUType_get__parameters_(t_LruTaxonomyWriterCache$LRUType *self, void *data);
            static PyGetSetDef t_LruTaxonomyWriterCache$LRUType__fields_[] = {
              DECLARE_GET_FIELD(t_LruTaxonomyWriterCache$LRUType, parameters_),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_LruTaxonomyWriterCache$LRUType__methods_[] = {
              DECLARE_METHOD(t_LruTaxonomyWriterCache$LRUType, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_LruTaxonomyWriterCache$LRUType, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_LruTaxonomyWriterCache$LRUType, of_, METH_VARARGS),
              DECLARE_METHOD(t_LruTaxonomyWriterCache$LRUType, valueOf, METH_VARARGS | METH_CLASS),
              DECLARE_METHOD(t_LruTaxonomyWriterCache$LRUType, values, METH_NOARGS | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(LruTaxonomyWriterCache$LRUType, t_LruTaxonomyWriterCache$LRUType, ::java::lang::Enum, LruTaxonomyWriterCache$LRUType, abstract_init, 0, 0, t_LruTaxonomyWriterCache$LRUType__fields_, 0, 0);
            PyObject *t_LruTaxonomyWriterCache$LRUType::wrap_Object(const LruTaxonomyWriterCache$LRUType& object, PyTypeObject *p0)
            {
              PyObject *obj = t_LruTaxonomyWriterCache$LRUType::wrap_Object(object);
              if (obj != NULL && obj != Py_None)
              {
                t_LruTaxonomyWriterCache$LRUType *self = (t_LruTaxonomyWriterCache$LRUType *) obj;
                self->parameters[0] = p0;
              }
              return obj;
            }

            PyObject *t_LruTaxonomyWriterCache$LRUType::wrap_jobject(const jobject& object, PyTypeObject *p0)
            {
              PyObject *obj = t_LruTaxonomyWriterCache$LRUType::wrap_jobject(object);
              if (obj != NULL && obj != Py_None)
              {
                t_LruTaxonomyWriterCache$LRUType *self = (t_LruTaxonomyWriterCache$LRUType *) obj;
                self->parameters[0] = p0;
              }
              return obj;
            }

            void t_LruTaxonomyWriterCache$LRUType::install(PyObject *module)
            {
              installType(&PY_TYPE(LruTaxonomyWriterCache$LRUType), module, "LruTaxonomyWriterCache$LRUType", 0);
            }

            void t_LruTaxonomyWriterCache$LRUType::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(LruTaxonomyWriterCache$LRUType).tp_dict, "class_", make_descriptor(LruTaxonomyWriterCache$LRUType::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(LruTaxonomyWriterCache$LRUType).tp_dict, "wrapfn_", make_descriptor(t_LruTaxonomyWriterCache$LRUType::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(LruTaxonomyWriterCache$LRUType).tp_dict, "boxfn_", make_descriptor(boxObject));
              env->getClass(LruTaxonomyWriterCache$LRUType::initializeClass);
              PyDict_SetItemString(PY_TYPE(LruTaxonomyWriterCache$LRUType).tp_dict, "LRU_HASHED", make_descriptor(t_LruTaxonomyWriterCache$LRUType::wrap_Object(*LruTaxonomyWriterCache$LRUType::LRU_HASHED)));
              PyDict_SetItemString(PY_TYPE(LruTaxonomyWriterCache$LRUType).tp_dict, "LRU_STRING", make_descriptor(t_LruTaxonomyWriterCache$LRUType::wrap_Object(*LruTaxonomyWriterCache$LRUType::LRU_STRING)));
            }

            static PyObject *t_LruTaxonomyWriterCache$LRUType_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, LruTaxonomyWriterCache$LRUType::initializeClass, 1)))
                return NULL;
              return t_LruTaxonomyWriterCache$LRUType::wrap_Object(LruTaxonomyWriterCache$LRUType(((t_LruTaxonomyWriterCache$LRUType *) arg)->object.this$));
            }
            static PyObject *t_LruTaxonomyWriterCache$LRUType_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, LruTaxonomyWriterCache$LRUType::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_LruTaxonomyWriterCache$LRUType_of_(t_LruTaxonomyWriterCache$LRUType *self, PyObject *args)
            {
              if (!parseArg(args, "T", 1, &(self->parameters)))
                Py_RETURN_SELF;
              return PyErr_SetArgsError((PyObject *) self, "of_", args);
            }

            static PyObject *t_LruTaxonomyWriterCache$LRUType_valueOf(PyTypeObject *type, PyObject *args)
            {
              ::java::lang::String a0((jobject) NULL);
              LruTaxonomyWriterCache$LRUType result((jobject) NULL);

              if (!parseArgs(args, "s", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::facet::taxonomy::writercache::LruTaxonomyWriterCache$LRUType::valueOf(a0));
                return t_LruTaxonomyWriterCache$LRUType::wrap_Object(result);
              }

              return callSuper(type, "valueOf", args, 2);
            }

            static PyObject *t_LruTaxonomyWriterCache$LRUType_values(PyTypeObject *type)
            {
              JArray< LruTaxonomyWriterCache$LRUType > result((jobject) NULL);
              OBJ_CALL(result = ::org::apache::lucene::facet::taxonomy::writercache::LruTaxonomyWriterCache$LRUType::values());
              return JArray<jobject>(result.this$).wrap(t_LruTaxonomyWriterCache$LRUType::wrap_jobject);
            }
            static PyObject *t_LruTaxonomyWriterCache$LRUType_get__parameters_(t_LruTaxonomyWriterCache$LRUType *self, void *data)
            {
              return typeParameters(self->parameters, sizeof(self->parameters));
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/cn/ChineseTokenizerFactory.h"
#include "java/lang/Class.h"
#include "java/io/Reader.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/cn/ChineseTokenizer.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace cn {

          ::java::lang::Class *ChineseTokenizerFactory::class$ = NULL;
          jmethodID *ChineseTokenizerFactory::mids$ = NULL;
          bool ChineseTokenizerFactory::live$ = false;

          jclass ChineseTokenizerFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/cn/ChineseTokenizerFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_3378b1fc] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;)Lorg/apache/lucene/analysis/cn/ChineseTokenizer;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ChineseTokenizerFactory::ChineseTokenizerFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenizerFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::cn::ChineseTokenizer ChineseTokenizerFactory::create(const ::org::apache::lucene::util::AttributeFactory & a0, const ::java::io::Reader & a1) const
          {
            return ::org::apache::lucene::analysis::cn::ChineseTokenizer(env->callObjectMethod(this$, mids$[mid_create_3378b1fc], a0.this$, a1.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace cn {
          static PyObject *t_ChineseTokenizerFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ChineseTokenizerFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ChineseTokenizerFactory_init_(t_ChineseTokenizerFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ChineseTokenizerFactory_create(t_ChineseTokenizerFactory *self, PyObject *args);

          static PyMethodDef t_ChineseTokenizerFactory__methods_[] = {
            DECLARE_METHOD(t_ChineseTokenizerFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ChineseTokenizerFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ChineseTokenizerFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ChineseTokenizerFactory, t_ChineseTokenizerFactory, ::org::apache::lucene::analysis::util::TokenizerFactory, ChineseTokenizerFactory, t_ChineseTokenizerFactory_init_, 0, 0, 0, 0, 0);

          void t_ChineseTokenizerFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(ChineseTokenizerFactory), module, "ChineseTokenizerFactory", 0);
          }

          void t_ChineseTokenizerFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ChineseTokenizerFactory).tp_dict, "class_", make_descriptor(ChineseTokenizerFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ChineseTokenizerFactory).tp_dict, "wrapfn_", make_descriptor(t_ChineseTokenizerFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ChineseTokenizerFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ChineseTokenizerFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ChineseTokenizerFactory::initializeClass, 1)))
              return NULL;
            return t_ChineseTokenizerFactory::wrap_Object(ChineseTokenizerFactory(((t_ChineseTokenizerFactory *) arg)->object.this$));
          }
          static PyObject *t_ChineseTokenizerFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ChineseTokenizerFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ChineseTokenizerFactory_init_(t_ChineseTokenizerFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            ChineseTokenizerFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = ChineseTokenizerFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ChineseTokenizerFactory_create(t_ChineseTokenizerFactory *self, PyObject *args)
          {
            ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
            ::java::io::Reader a1((jobject) NULL);
            ::org::apache::lucene::analysis::cn::ChineseTokenizer result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.create(a0, a1));
              return ::org::apache::lucene::analysis::cn::t_ChineseTokenizer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(ChineseTokenizerFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/surround/query/DistanceQuery.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/surround/query/BasicQueryFactory.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/queryparser/surround/query/SpanNearClauseFactory.h"
#include "org/apache/lucene/queryparser/surround/query/SrndQuery.h"
#include "java/util/List.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/queryparser/surround/query/DistanceSubQuery.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Query.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace query {

            ::java::lang::Class *DistanceQuery::class$ = NULL;
            jmethodID *DistanceQuery::mids$ = NULL;
            bool DistanceQuery::live$ = false;

            jclass DistanceQuery::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/surround/query/DistanceQuery");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_6c38956d] = env->getMethodID(cls, "<init>", "(Ljava/util/List;ZILjava/lang/String;Z)V");
                mids$[mid_addSpanQueries_0564f431] = env->getMethodID(cls, "addSpanQueries", "(Lorg/apache/lucene/queryparser/surround/query/SpanNearClauseFactory;)V");
                mids$[mid_distanceSubQueryNotAllowed_14c7b5c5] = env->getMethodID(cls, "distanceSubQueryNotAllowed", "()Ljava/lang/String;");
                mids$[mid_getOpDistance_54c6a179] = env->getMethodID(cls, "getOpDistance", "()I");
                mids$[mid_getSpanNearQuery_b440d198] = env->getMethodID(cls, "getSpanNearQuery", "(Lorg/apache/lucene/index/IndexReader;Ljava/lang/String;FLorg/apache/lucene/queryparser/surround/query/BasicQueryFactory;)Lorg/apache/lucene/search/Query;");
                mids$[mid_makeLuceneQueryFieldNoBoost_1aaeee30] = env->getMethodID(cls, "makeLuceneQueryFieldNoBoost", "(Ljava/lang/String;Lorg/apache/lucene/queryparser/surround/query/BasicQueryFactory;)Lorg/apache/lucene/search/Query;");
                mids$[mid_subQueriesOrdered_54c6a16a] = env->getMethodID(cls, "subQueriesOrdered", "()Z");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            DistanceQuery::DistanceQuery(const ::java::util::List & a0, jboolean a1, jint a2, const ::java::lang::String & a3, jboolean a4) : ::org::apache::lucene::queryparser::surround::query::ComposedQuery(env->newObject(initializeClass, &mids$, mid_init$_6c38956d, a0.this$, a1, a2, a3.this$, a4)) {}

            void DistanceQuery::addSpanQueries(const ::org::apache::lucene::queryparser::surround::query::SpanNearClauseFactory & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_addSpanQueries_0564f431], a0.this$);
            }

            ::java::lang::String DistanceQuery::distanceSubQueryNotAllowed() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_distanceSubQueryNotAllowed_14c7b5c5]));
            }

            jint DistanceQuery::getOpDistance() const
            {
              return env->callIntMethod(this$, mids$[mid_getOpDistance_54c6a179]);
            }

            ::org::apache::lucene::search::Query DistanceQuery::getSpanNearQuery(const ::org::apache::lucene::index::IndexReader & a0, const ::java::lang::String & a1, jfloat a2, const ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory & a3) const
            {
              return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_getSpanNearQuery_b440d198], a0.this$, a1.this$, a2, a3.this$));
            }

            ::org::apache::lucene::search::Query DistanceQuery::makeLuceneQueryFieldNoBoost(const ::java::lang::String & a0, const ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory & a1) const
            {
              return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_makeLuceneQueryFieldNoBoost_1aaeee30], a0.this$, a1.this$));
            }

            jboolean DistanceQuery::subQueriesOrdered() const
            {
              return env->callBooleanMethod(this$, mids$[mid_subQueriesOrdered_54c6a16a]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace query {
            static PyObject *t_DistanceQuery_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_DistanceQuery_instance_(PyTypeObject *type, PyObject *arg);
            static int t_DistanceQuery_init_(t_DistanceQuery *self, PyObject *args, PyObject *kwds);
            static PyObject *t_DistanceQuery_addSpanQueries(t_DistanceQuery *self, PyObject *arg);
            static PyObject *t_DistanceQuery_distanceSubQueryNotAllowed(t_DistanceQuery *self);
            static PyObject *t_DistanceQuery_getOpDistance(t_DistanceQuery *self);
            static PyObject *t_DistanceQuery_getSpanNearQuery(t_DistanceQuery *self, PyObject *args);
            static PyObject *t_DistanceQuery_makeLuceneQueryFieldNoBoost(t_DistanceQuery *self, PyObject *args);
            static PyObject *t_DistanceQuery_subQueriesOrdered(t_DistanceQuery *self);
            static PyObject *t_DistanceQuery_get__opDistance(t_DistanceQuery *self, void *data);
            static PyGetSetDef t_DistanceQuery__fields_[] = {
              DECLARE_GET_FIELD(t_DistanceQuery, opDistance),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_DistanceQuery__methods_[] = {
              DECLARE_METHOD(t_DistanceQuery, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_DistanceQuery, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_DistanceQuery, addSpanQueries, METH_O),
              DECLARE_METHOD(t_DistanceQuery, distanceSubQueryNotAllowed, METH_NOARGS),
              DECLARE_METHOD(t_DistanceQuery, getOpDistance, METH_NOARGS),
              DECLARE_METHOD(t_DistanceQuery, getSpanNearQuery, METH_VARARGS),
              DECLARE_METHOD(t_DistanceQuery, makeLuceneQueryFieldNoBoost, METH_VARARGS),
              DECLARE_METHOD(t_DistanceQuery, subQueriesOrdered, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(DistanceQuery, t_DistanceQuery, ::org::apache::lucene::queryparser::surround::query::ComposedQuery, DistanceQuery, t_DistanceQuery_init_, 0, 0, t_DistanceQuery__fields_, 0, 0);

            void t_DistanceQuery::install(PyObject *module)
            {
              installType(&PY_TYPE(DistanceQuery), module, "DistanceQuery", 0);
            }

            void t_DistanceQuery::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(DistanceQuery).tp_dict, "class_", make_descriptor(DistanceQuery::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(DistanceQuery).tp_dict, "wrapfn_", make_descriptor(t_DistanceQuery::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(DistanceQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_DistanceQuery_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, DistanceQuery::initializeClass, 1)))
                return NULL;
              return t_DistanceQuery::wrap_Object(DistanceQuery(((t_DistanceQuery *) arg)->object.this$));
            }
            static PyObject *t_DistanceQuery_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, DistanceQuery::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_DistanceQuery_init_(t_DistanceQuery *self, PyObject *args, PyObject *kwds)
            {
              ::java::util::List a0((jobject) NULL);
              PyTypeObject **p0;
              jboolean a1;
              jint a2;
              ::java::lang::String a3((jobject) NULL);
              jboolean a4;
              DistanceQuery object((jobject) NULL);

              if (!parseArgs(args, "KZIsZ", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_, &a1, &a2, &a3, &a4))
              {
                INT_CALL(object = DistanceQuery(a0, a1, a2, a3, a4));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_DistanceQuery_addSpanQueries(t_DistanceQuery *self, PyObject *arg)
            {
              ::org::apache::lucene::queryparser::surround::query::SpanNearClauseFactory a0((jobject) NULL);

              if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::surround::query::SpanNearClauseFactory::initializeClass, &a0))
              {
                OBJ_CALL(self->object.addSpanQueries(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "addSpanQueries", arg);
              return NULL;
            }

            static PyObject *t_DistanceQuery_distanceSubQueryNotAllowed(t_DistanceQuery *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.distanceSubQueryNotAllowed());
              return j2p(result);
            }

            static PyObject *t_DistanceQuery_getOpDistance(t_DistanceQuery *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getOpDistance());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_DistanceQuery_getSpanNearQuery(t_DistanceQuery *self, PyObject *args)
            {
              ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              jfloat a2;
              ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory a3((jobject) NULL);
              ::org::apache::lucene::search::Query result((jobject) NULL);

              if (!parseArgs(args, "ksFk", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory::initializeClass, &a0, &a1, &a2, &a3))
              {
                OBJ_CALL(result = self->object.getSpanNearQuery(a0, a1, a2, a3));
                return ::org::apache::lucene::search::t_Query::wrap_Object(result);
              }

              PyErr_SetArgsError((PyObject *) self, "getSpanNearQuery", args);
              return NULL;
            }

            static PyObject *t_DistanceQuery_makeLuceneQueryFieldNoBoost(t_DistanceQuery *self, PyObject *args)
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory a1((jobject) NULL);
              ::org::apache::lucene::search::Query result((jobject) NULL);

              if (!parseArgs(args, "sk", ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = self->object.makeLuceneQueryFieldNoBoost(a0, a1));
                return ::org::apache::lucene::search::t_Query::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(DistanceQuery), (PyObject *) self, "makeLuceneQueryFieldNoBoost", args, 2);
            }

            static PyObject *t_DistanceQuery_subQueriesOrdered(t_DistanceQuery *self)
            {
              jboolean result;
              OBJ_CALL(result = self->object.subQueriesOrdered());
              Py_RETURN_BOOL(result);
            }

            static PyObject *t_DistanceQuery_get__opDistance(t_DistanceQuery *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getOpDistance());
              return PyInt_FromLong((long) value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/xml/builders/SpanQueryBuilder.h"
#include "org/apache/lucene/search/spans/SpanQuery.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {

            ::java::lang::Class *SpanQueryBuilder::class$ = NULL;
            jmethodID *SpanQueryBuilder::mids$ = NULL;
            bool SpanQueryBuilder::live$ = false;

            jclass SpanQueryBuilder::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/xml/builders/SpanQueryBuilder");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {
            static PyObject *t_SpanQueryBuilder_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_SpanQueryBuilder_instance_(PyTypeObject *type, PyObject *arg);

            static PyMethodDef t_SpanQueryBuilder__methods_[] = {
              DECLARE_METHOD(t_SpanQueryBuilder, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SpanQueryBuilder, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(SpanQueryBuilder, t_SpanQueryBuilder, ::org::apache::lucene::queryparser::xml::QueryBuilder, SpanQueryBuilder, abstract_init, 0, 0, 0, 0, 0);

            void t_SpanQueryBuilder::install(PyObject *module)
            {
              installType(&PY_TYPE(SpanQueryBuilder), module, "SpanQueryBuilder", 0);
            }

            void t_SpanQueryBuilder::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(SpanQueryBuilder).tp_dict, "class_", make_descriptor(SpanQueryBuilder::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(SpanQueryBuilder).tp_dict, "wrapfn_", make_descriptor(t_SpanQueryBuilder::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(SpanQueryBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_SpanQueryBuilder_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, SpanQueryBuilder::initializeClass, 1)))
                return NULL;
              return t_SpanQueryBuilder::wrap_Object(SpanQueryBuilder(((t_SpanQueryBuilder *) arg)->object.this$));
            }
            static PyObject *t_SpanQueryBuilder_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, SpanQueryBuilder::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/Lucene47WordDelimiterFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *Lucene47WordDelimiterFilter::class$ = NULL;
          jmethodID *Lucene47WordDelimiterFilter::mids$ = NULL;
          bool Lucene47WordDelimiterFilter::live$ = false;
          jint Lucene47WordDelimiterFilter::ALPHA = (jint) 0;
          jint Lucene47WordDelimiterFilter::ALPHANUM = (jint) 0;
          jint Lucene47WordDelimiterFilter::CATENATE_ALL = (jint) 0;
          jint Lucene47WordDelimiterFilter::CATENATE_NUMBERS = (jint) 0;
          jint Lucene47WordDelimiterFilter::CATENATE_WORDS = (jint) 0;
          jint Lucene47WordDelimiterFilter::DIGIT = (jint) 0;
          jint Lucene47WordDelimiterFilter::GENERATE_NUMBER_PARTS = (jint) 0;
          jint Lucene47WordDelimiterFilter::GENERATE_WORD_PARTS = (jint) 0;
          jint Lucene47WordDelimiterFilter::LOWER = (jint) 0;
          jint Lucene47WordDelimiterFilter::PRESERVE_ORIGINAL = (jint) 0;
          jint Lucene47WordDelimiterFilter::SPLIT_ON_CASE_CHANGE = (jint) 0;
          jint Lucene47WordDelimiterFilter::SPLIT_ON_NUMERICS = (jint) 0;
          jint Lucene47WordDelimiterFilter::STEM_ENGLISH_POSSESSIVE = (jint) 0;
          jint Lucene47WordDelimiterFilter::SUBWORD_DELIM = (jint) 0;
          jint Lucene47WordDelimiterFilter::UPPER = (jint) 0;

          jclass Lucene47WordDelimiterFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/Lucene47WordDelimiterFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_70257dbd] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;ILorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_06e41d2a] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;[BILorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              ALPHA = env->getStaticIntField(cls, "ALPHA");
              ALPHANUM = env->getStaticIntField(cls, "ALPHANUM");
              CATENATE_ALL = env->getStaticIntField(cls, "CATENATE_ALL");
              CATENATE_NUMBERS = env->getStaticIntField(cls, "CATENATE_NUMBERS");
              CATENATE_WORDS = env->getStaticIntField(cls, "CATENATE_WORDS");
              DIGIT = env->getStaticIntField(cls, "DIGIT");
              GENERATE_NUMBER_PARTS = env->getStaticIntField(cls, "GENERATE_NUMBER_PARTS");
              GENERATE_WORD_PARTS = env->getStaticIntField(cls, "GENERATE_WORD_PARTS");
              LOWER = env->getStaticIntField(cls, "LOWER");
              PRESERVE_ORIGINAL = env->getStaticIntField(cls, "PRESERVE_ORIGINAL");
              SPLIT_ON_CASE_CHANGE = env->getStaticIntField(cls, "SPLIT_ON_CASE_CHANGE");
              SPLIT_ON_NUMERICS = env->getStaticIntField(cls, "SPLIT_ON_NUMERICS");
              STEM_ENGLISH_POSSESSIVE = env->getStaticIntField(cls, "STEM_ENGLISH_POSSESSIVE");
              SUBWORD_DELIM = env->getStaticIntField(cls, "SUBWORD_DELIM");
              UPPER = env->getStaticIntField(cls, "UPPER");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene47WordDelimiterFilter::Lucene47WordDelimiterFilter(const ::org::apache::lucene::analysis::TokenStream & a0, jint a1, const ::org::apache::lucene::analysis::util::CharArraySet & a2) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_70257dbd, a0.this$, a1, a2.this$)) {}

          Lucene47WordDelimiterFilter::Lucene47WordDelimiterFilter(const ::org::apache::lucene::analysis::TokenStream & a0, const JArray< jbyte > & a1, jint a2, const ::org::apache::lucene::analysis::util::CharArraySet & a3) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_06e41d2a, a0.this$, a1.this$, a2, a3.this$)) {}

          jboolean Lucene47WordDelimiterFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void Lucene47WordDelimiterFilter::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_Lucene47WordDelimiterFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene47WordDelimiterFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene47WordDelimiterFilter_init_(t_Lucene47WordDelimiterFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene47WordDelimiterFilter_incrementToken(t_Lucene47WordDelimiterFilter *self, PyObject *args);
          static PyObject *t_Lucene47WordDelimiterFilter_reset(t_Lucene47WordDelimiterFilter *self, PyObject *args);

          static PyMethodDef t_Lucene47WordDelimiterFilter__methods_[] = {
            DECLARE_METHOD(t_Lucene47WordDelimiterFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene47WordDelimiterFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene47WordDelimiterFilter, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_Lucene47WordDelimiterFilter, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene47WordDelimiterFilter, t_Lucene47WordDelimiterFilter, ::org::apache::lucene::analysis::TokenFilter, Lucene47WordDelimiterFilter, t_Lucene47WordDelimiterFilter_init_, 0, 0, 0, 0, 0);

          void t_Lucene47WordDelimiterFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene47WordDelimiterFilter), module, "Lucene47WordDelimiterFilter", 0);
          }

          void t_Lucene47WordDelimiterFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene47WordDelimiterFilter).tp_dict, "class_", make_descriptor(Lucene47WordDelimiterFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene47WordDelimiterFilter).tp_dict, "wrapfn_", make_descriptor(t_Lucene47WordDelimiterFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene47WordDelimiterFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(Lucene47WordDelimiterFilter::initializeClass);
            PyDict_SetItemString(PY_TYPE(Lucene47WordDelimiterFilter).tp_dict, "ALPHA", make_descriptor(Lucene47WordDelimiterFilter::ALPHA));
            PyDict_SetItemString(PY_TYPE(Lucene47WordDelimiterFilter).tp_dict, "ALPHANUM", make_descriptor(Lucene47WordDelimiterFilter::ALPHANUM));
            PyDict_SetItemString(PY_TYPE(Lucene47WordDelimiterFilter).tp_dict, "CATENATE_ALL", make_descriptor(Lucene47WordDelimiterFilter::CATENATE_ALL));
            PyDict_SetItemString(PY_TYPE(Lucene47WordDelimiterFilter).tp_dict, "CATENATE_NUMBERS", make_descriptor(Lucene47WordDelimiterFilter::CATENATE_NUMBERS));
            PyDict_SetItemString(PY_TYPE(Lucene47WordDelimiterFilter).tp_dict, "CATENATE_WORDS", make_descriptor(Lucene47WordDelimiterFilter::CATENATE_WORDS));
            PyDict_SetItemString(PY_TYPE(Lucene47WordDelimiterFilter).tp_dict, "DIGIT", make_descriptor(Lucene47WordDelimiterFilter::DIGIT));
            PyDict_SetItemString(PY_TYPE(Lucene47WordDelimiterFilter).tp_dict, "GENERATE_NUMBER_PARTS", make_descriptor(Lucene47WordDelimiterFilter::GENERATE_NUMBER_PARTS));
            PyDict_SetItemString(PY_TYPE(Lucene47WordDelimiterFilter).tp_dict, "GENERATE_WORD_PARTS", make_descriptor(Lucene47WordDelimiterFilter::GENERATE_WORD_PARTS));
            PyDict_SetItemString(PY_TYPE(Lucene47WordDelimiterFilter).tp_dict, "LOWER", make_descriptor(Lucene47WordDelimiterFilter::LOWER));
            PyDict_SetItemString(PY_TYPE(Lucene47WordDelimiterFilter).tp_dict, "PRESERVE_ORIGINAL", make_descriptor(Lucene47WordDelimiterFilter::PRESERVE_ORIGINAL));
            PyDict_SetItemString(PY_TYPE(Lucene47WordDelimiterFilter).tp_dict, "SPLIT_ON_CASE_CHANGE", make_descriptor(Lucene47WordDelimiterFilter::SPLIT_ON_CASE_CHANGE));
            PyDict_SetItemString(PY_TYPE(Lucene47WordDelimiterFilter).tp_dict, "SPLIT_ON_NUMERICS", make_descriptor(Lucene47WordDelimiterFilter::SPLIT_ON_NUMERICS));
            PyDict_SetItemString(PY_TYPE(Lucene47WordDelimiterFilter).tp_dict, "STEM_ENGLISH_POSSESSIVE", make_descriptor(Lucene47WordDelimiterFilter::STEM_ENGLISH_POSSESSIVE));
            PyDict_SetItemString(PY_TYPE(Lucene47WordDelimiterFilter).tp_dict, "SUBWORD_DELIM", make_descriptor(Lucene47WordDelimiterFilter::SUBWORD_DELIM));
            PyDict_SetItemString(PY_TYPE(Lucene47WordDelimiterFilter).tp_dict, "UPPER", make_descriptor(Lucene47WordDelimiterFilter::UPPER));
          }

          static PyObject *t_Lucene47WordDelimiterFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene47WordDelimiterFilter::initializeClass, 1)))
              return NULL;
            return t_Lucene47WordDelimiterFilter::wrap_Object(Lucene47WordDelimiterFilter(((t_Lucene47WordDelimiterFilter *) arg)->object.this$));
          }
          static PyObject *t_Lucene47WordDelimiterFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene47WordDelimiterFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene47WordDelimiterFilter_init_(t_Lucene47WordDelimiterFilter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 3:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                jint a1;
                ::org::apache::lucene::analysis::util::CharArraySet a2((jobject) NULL);
                PyTypeObject **p2;
                Lucene47WordDelimiterFilter object((jobject) NULL);

                if (!parseArgs(args, "kIK", ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &a1, &a2, &p2, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = Lucene47WordDelimiterFilter(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 4:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                JArray< jbyte > a1((jobject) NULL);
                jint a2;
                ::org::apache::lucene::analysis::util::CharArraySet a3((jobject) NULL);
                PyTypeObject **p3;
                Lucene47WordDelimiterFilter object((jobject) NULL);

                if (!parseArgs(args, "k[BIK", ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &a1, &a2, &a3, &p3, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = Lucene47WordDelimiterFilter(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_Lucene47WordDelimiterFilter_incrementToken(t_Lucene47WordDelimiterFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(Lucene47WordDelimiterFilter), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_Lucene47WordDelimiterFilter_reset(t_Lucene47WordDelimiterFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene47WordDelimiterFilter), (PyObject *) self, "reset", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/TermCollectingRewrite.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *TermCollectingRewrite::class$ = NULL;
        jmethodID *TermCollectingRewrite::mids$ = NULL;
        bool TermCollectingRewrite::live$ = false;

        jclass TermCollectingRewrite::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/TermCollectingRewrite");

            mids$ = new jmethodID[max_mid];
            mids$[mid_getTopLevelQuery_97e3851a] = env->getMethodID(cls, "getTopLevelQuery", "()Lorg/apache/lucene/search/Query;");
            mids$[mid_addClause_6e72b6c4] = env->getMethodID(cls, "addClause", "(Lorg/apache/lucene/search/Query;Lorg/apache/lucene/index/Term;IFLorg/apache/lucene/index/TermContext;)V");
            mids$[mid_addClause_5594f39b] = env->getMethodID(cls, "addClause", "(Lorg/apache/lucene/search/Query;Lorg/apache/lucene/index/Term;IF)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_TermCollectingRewrite_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TermCollectingRewrite_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TermCollectingRewrite_of_(t_TermCollectingRewrite *self, PyObject *args);
        static PyObject *t_TermCollectingRewrite_get__parameters_(t_TermCollectingRewrite *self, void *data);
        static PyGetSetDef t_TermCollectingRewrite__fields_[] = {
          DECLARE_GET_FIELD(t_TermCollectingRewrite, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_TermCollectingRewrite__methods_[] = {
          DECLARE_METHOD(t_TermCollectingRewrite, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TermCollectingRewrite, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TermCollectingRewrite, of_, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TermCollectingRewrite, t_TermCollectingRewrite, ::org::apache::lucene::search::MultiTermQuery$RewriteMethod, TermCollectingRewrite, abstract_init, 0, 0, t_TermCollectingRewrite__fields_, 0, 0);
        PyObject *t_TermCollectingRewrite::wrap_Object(const TermCollectingRewrite& object, PyTypeObject *p0)
        {
          PyObject *obj = t_TermCollectingRewrite::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_TermCollectingRewrite *self = (t_TermCollectingRewrite *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_TermCollectingRewrite::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_TermCollectingRewrite::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_TermCollectingRewrite *self = (t_TermCollectingRewrite *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_TermCollectingRewrite::install(PyObject *module)
        {
          installType(&PY_TYPE(TermCollectingRewrite), module, "TermCollectingRewrite", 0);
        }

        void t_TermCollectingRewrite::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TermCollectingRewrite).tp_dict, "class_", make_descriptor(TermCollectingRewrite::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TermCollectingRewrite).tp_dict, "wrapfn_", make_descriptor(t_TermCollectingRewrite::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TermCollectingRewrite).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TermCollectingRewrite_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TermCollectingRewrite::initializeClass, 1)))
            return NULL;
          return t_TermCollectingRewrite::wrap_Object(TermCollectingRewrite(((t_TermCollectingRewrite *) arg)->object.this$));
        }
        static PyObject *t_TermCollectingRewrite_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TermCollectingRewrite::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_TermCollectingRewrite_of_(t_TermCollectingRewrite *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }
        static PyObject *t_TermCollectingRewrite_get__parameters_(t_TermCollectingRewrite *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/StemmerOverrideFilter$Builder.h"
#include "org/apache/lucene/analysis/miscellaneous/StemmerOverrideFilter$StemmerOverrideMap.h"
#include "java/lang/CharSequence.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *StemmerOverrideFilter$Builder::class$ = NULL;
          jmethodID *StemmerOverrideFilter$Builder::mids$ = NULL;
          bool StemmerOverrideFilter$Builder::live$ = false;

          jclass StemmerOverrideFilter$Builder::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/StemmerOverrideFilter$Builder");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_bb0c767f] = env->getMethodID(cls, "<init>", "(Z)V");
              mids$[mid_add_db1d05a2] = env->getMethodID(cls, "add", "(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Z");
              mids$[mid_build_c052cd10] = env->getMethodID(cls, "build", "()Lorg/apache/lucene/analysis/miscellaneous/StemmerOverrideFilter$StemmerOverrideMap;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          StemmerOverrideFilter$Builder::StemmerOverrideFilter$Builder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          StemmerOverrideFilter$Builder::StemmerOverrideFilter$Builder(jboolean a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_bb0c767f, a0)) {}

          jboolean StemmerOverrideFilter$Builder::add(const ::java::lang::CharSequence & a0, const ::java::lang::CharSequence & a1) const
          {
            return env->callBooleanMethod(this$, mids$[mid_add_db1d05a2], a0.this$, a1.this$);
          }

          ::org::apache::lucene::analysis::miscellaneous::StemmerOverrideFilter$StemmerOverrideMap StemmerOverrideFilter$Builder::build() const
          {
            return ::org::apache::lucene::analysis::miscellaneous::StemmerOverrideFilter$StemmerOverrideMap(env->callObjectMethod(this$, mids$[mid_build_c052cd10]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_StemmerOverrideFilter$Builder_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_StemmerOverrideFilter$Builder_instance_(PyTypeObject *type, PyObject *arg);
          static int t_StemmerOverrideFilter$Builder_init_(t_StemmerOverrideFilter$Builder *self, PyObject *args, PyObject *kwds);
          static PyObject *t_StemmerOverrideFilter$Builder_add(t_StemmerOverrideFilter$Builder *self, PyObject *args);
          static PyObject *t_StemmerOverrideFilter$Builder_build(t_StemmerOverrideFilter$Builder *self);

          static PyMethodDef t_StemmerOverrideFilter$Builder__methods_[] = {
            DECLARE_METHOD(t_StemmerOverrideFilter$Builder, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StemmerOverrideFilter$Builder, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StemmerOverrideFilter$Builder, add, METH_VARARGS),
            DECLARE_METHOD(t_StemmerOverrideFilter$Builder, build, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(StemmerOverrideFilter$Builder, t_StemmerOverrideFilter$Builder, ::java::lang::Object, StemmerOverrideFilter$Builder, t_StemmerOverrideFilter$Builder_init_, 0, 0, 0, 0, 0);

          void t_StemmerOverrideFilter$Builder::install(PyObject *module)
          {
            installType(&PY_TYPE(StemmerOverrideFilter$Builder), module, "StemmerOverrideFilter$Builder", 0);
          }

          void t_StemmerOverrideFilter$Builder::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(StemmerOverrideFilter$Builder).tp_dict, "class_", make_descriptor(StemmerOverrideFilter$Builder::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(StemmerOverrideFilter$Builder).tp_dict, "wrapfn_", make_descriptor(t_StemmerOverrideFilter$Builder::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(StemmerOverrideFilter$Builder).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_StemmerOverrideFilter$Builder_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, StemmerOverrideFilter$Builder::initializeClass, 1)))
              return NULL;
            return t_StemmerOverrideFilter$Builder::wrap_Object(StemmerOverrideFilter$Builder(((t_StemmerOverrideFilter$Builder *) arg)->object.this$));
          }
          static PyObject *t_StemmerOverrideFilter$Builder_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, StemmerOverrideFilter$Builder::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_StemmerOverrideFilter$Builder_init_(t_StemmerOverrideFilter$Builder *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                StemmerOverrideFilter$Builder object((jobject) NULL);

                INT_CALL(object = StemmerOverrideFilter$Builder());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                jboolean a0;
                StemmerOverrideFilter$Builder object((jobject) NULL);

                if (!parseArgs(args, "Z", &a0))
                {
                  INT_CALL(object = StemmerOverrideFilter$Builder(a0));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_StemmerOverrideFilter$Builder_add(t_StemmerOverrideFilter$Builder *self, PyObject *args)
          {
            ::java::lang::CharSequence a0((jobject) NULL);
            ::java::lang::CharSequence a1((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "OO", &::java::lang::PY_TYPE(CharSequence), &::java::lang::PY_TYPE(CharSequence), &a0, &a1))
            {
              OBJ_CALL(result = self->object.add(a0, a1));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError((PyObject *) self, "add", args);
            return NULL;
          }

          static PyObject *t_StemmerOverrideFilter$Builder_build(t_StemmerOverrideFilter$Builder *self)
          {
            ::org::apache::lucene::analysis::miscellaneous::StemmerOverrideFilter$StemmerOverrideMap result((jobject) NULL);
            OBJ_CALL(result = self->object.build());
            return ::org::apache::lucene::analysis::miscellaneous::t_StemmerOverrideFilter$StemmerOverrideMap::wrap_Object(result);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/DistributionSPL.h"
#include "org/apache/lucene/search/similarities/BasicStats.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *DistributionSPL::class$ = NULL;
          jmethodID *DistributionSPL::mids$ = NULL;
          bool DistributionSPL::live$ = false;

          jclass DistributionSPL::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/DistributionSPL");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_score_63482206] = env->getMethodID(cls, "score", "(Lorg/apache/lucene/search/similarities/BasicStats;FF)F");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          DistributionSPL::DistributionSPL() : ::org::apache::lucene::search::similarities::Distribution(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jfloat DistributionSPL::score(const ::org::apache::lucene::search::similarities::BasicStats & a0, jfloat a1, jfloat a2) const
          {
            return env->callFloatMethod(this$, mids$[mid_score_63482206], a0.this$, a1, a2);
          }

          ::java::lang::String DistributionSPL::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_DistributionSPL_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DistributionSPL_instance_(PyTypeObject *type, PyObject *arg);
          static int t_DistributionSPL_init_(t_DistributionSPL *self, PyObject *args, PyObject *kwds);
          static PyObject *t_DistributionSPL_score(t_DistributionSPL *self, PyObject *args);
          static PyObject *t_DistributionSPL_toString(t_DistributionSPL *self, PyObject *args);

          static PyMethodDef t_DistributionSPL__methods_[] = {
            DECLARE_METHOD(t_DistributionSPL, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DistributionSPL, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DistributionSPL, score, METH_VARARGS),
            DECLARE_METHOD(t_DistributionSPL, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(DistributionSPL, t_DistributionSPL, ::org::apache::lucene::search::similarities::Distribution, DistributionSPL, t_DistributionSPL_init_, 0, 0, 0, 0, 0);

          void t_DistributionSPL::install(PyObject *module)
          {
            installType(&PY_TYPE(DistributionSPL), module, "DistributionSPL", 0);
          }

          void t_DistributionSPL::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(DistributionSPL).tp_dict, "class_", make_descriptor(DistributionSPL::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(DistributionSPL).tp_dict, "wrapfn_", make_descriptor(t_DistributionSPL::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(DistributionSPL).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_DistributionSPL_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, DistributionSPL::initializeClass, 1)))
              return NULL;
            return t_DistributionSPL::wrap_Object(DistributionSPL(((t_DistributionSPL *) arg)->object.this$));
          }
          static PyObject *t_DistributionSPL_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, DistributionSPL::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_DistributionSPL_init_(t_DistributionSPL *self, PyObject *args, PyObject *kwds)
          {
            DistributionSPL object((jobject) NULL);

            INT_CALL(object = DistributionSPL());
            self->object = object;

            return 0;
          }

          static PyObject *t_DistributionSPL_score(t_DistributionSPL *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jfloat a1;
            jfloat a2;
            jfloat result;

            if (!parseArgs(args, "kFF", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.score(a0, a1, a2));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(DistributionSPL), (PyObject *) self, "score", args, 2);
          }

          static PyObject *t_DistributionSPL_toString(t_DistributionSPL *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(DistributionSPL), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/snowball/SnowballFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "org/tartarus/snowball/SnowballProgram.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace snowball {

          ::java::lang::Class *SnowballFilter::class$ = NULL;
          jmethodID *SnowballFilter::mids$ = NULL;
          bool SnowballFilter::live$ = false;

          jclass SnowballFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/snowball/SnowballFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_a7671c33] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;Lorg/tartarus/snowball/SnowballProgram;)V");
              mids$[mid_init$_be0a1066] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;Ljava/lang/String;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SnowballFilter::SnowballFilter(const ::org::apache::lucene::analysis::TokenStream & a0, const ::org::tartarus::snowball::SnowballProgram & a1) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_a7671c33, a0.this$, a1.this$)) {}

          SnowballFilter::SnowballFilter(const ::org::apache::lucene::analysis::TokenStream & a0, const ::java::lang::String & a1) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_be0a1066, a0.this$, a1.this$)) {}

          jboolean SnowballFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace snowball {
          static PyObject *t_SnowballFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SnowballFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SnowballFilter_init_(t_SnowballFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SnowballFilter_incrementToken(t_SnowballFilter *self, PyObject *args);

          static PyMethodDef t_SnowballFilter__methods_[] = {
            DECLARE_METHOD(t_SnowballFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SnowballFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SnowballFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SnowballFilter, t_SnowballFilter, ::org::apache::lucene::analysis::TokenFilter, SnowballFilter, t_SnowballFilter_init_, 0, 0, 0, 0, 0);

          void t_SnowballFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(SnowballFilter), module, "SnowballFilter", 0);
          }

          void t_SnowballFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SnowballFilter).tp_dict, "class_", make_descriptor(SnowballFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SnowballFilter).tp_dict, "wrapfn_", make_descriptor(t_SnowballFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SnowballFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SnowballFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SnowballFilter::initializeClass, 1)))
              return NULL;
            return t_SnowballFilter::wrap_Object(SnowballFilter(((t_SnowballFilter *) arg)->object.this$));
          }
          static PyObject *t_SnowballFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SnowballFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SnowballFilter_init_(t_SnowballFilter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                ::org::tartarus::snowball::SnowballProgram a1((jobject) NULL);
                SnowballFilter object((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::tartarus::snowball::SnowballProgram::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = SnowballFilter(a0, a1));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                SnowballFilter object((jobject) NULL);

                if (!parseArgs(args, "ks", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = SnowballFilter(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SnowballFilter_incrementToken(t_SnowballFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(SnowballFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/xml/builders/NumericRangeQueryBuilder.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/queryparser/xml/QueryBuilder.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {

            ::java::lang::Class *NumericRangeQueryBuilder::class$ = NULL;
            jmethodID *NumericRangeQueryBuilder::mids$ = NULL;
            bool NumericRangeQueryBuilder::live$ = false;

            jclass NumericRangeQueryBuilder::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/xml/builders/NumericRangeQueryBuilder");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            NumericRangeQueryBuilder::NumericRangeQueryBuilder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {
            static PyObject *t_NumericRangeQueryBuilder_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_NumericRangeQueryBuilder_instance_(PyTypeObject *type, PyObject *arg);
            static int t_NumericRangeQueryBuilder_init_(t_NumericRangeQueryBuilder *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_NumericRangeQueryBuilder__methods_[] = {
              DECLARE_METHOD(t_NumericRangeQueryBuilder, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_NumericRangeQueryBuilder, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(NumericRangeQueryBuilder, t_NumericRangeQueryBuilder, ::java::lang::Object, NumericRangeQueryBuilder, t_NumericRangeQueryBuilder_init_, 0, 0, 0, 0, 0);

            void t_NumericRangeQueryBuilder::install(PyObject *module)
            {
              installType(&PY_TYPE(NumericRangeQueryBuilder), module, "NumericRangeQueryBuilder", 0);
            }

            void t_NumericRangeQueryBuilder::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(NumericRangeQueryBuilder).tp_dict, "class_", make_descriptor(NumericRangeQueryBuilder::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(NumericRangeQueryBuilder).tp_dict, "wrapfn_", make_descriptor(t_NumericRangeQueryBuilder::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(NumericRangeQueryBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_NumericRangeQueryBuilder_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, NumericRangeQueryBuilder::initializeClass, 1)))
                return NULL;
              return t_NumericRangeQueryBuilder::wrap_Object(NumericRangeQueryBuilder(((t_NumericRangeQueryBuilder *) arg)->object.this$));
            }
            static PyObject *t_NumericRangeQueryBuilder_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, NumericRangeQueryBuilder::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_NumericRangeQueryBuilder_init_(t_NumericRangeQueryBuilder *self, PyObject *args, PyObject *kwds)
            {
              NumericRangeQueryBuilder object((jobject) NULL);

              INT_CALL(object = NumericRangeQueryBuilder());
              self->object = object;

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/SingleFunction.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *SingleFunction::class$ = NULL;
            jmethodID *SingleFunction::mids$ = NULL;
            bool SingleFunction::live$ = false;

            jclass SingleFunction::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/SingleFunction");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_ca78fe7a] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queries/function/ValueSource;)V");
                mids$[mid_createWeight_1b6125ba] = env->getMethodID(cls, "createWeight", "(Ljava/util/Map;Lorg/apache/lucene/search/IndexSearcher;)V");
                mids$[mid_description_14c7b5c5] = env->getMethodID(cls, "description", "()Ljava/lang/String;");
                mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
                mids$[mid_name_14c7b5c5] = env->getMethodID(cls, "name", "()Ljava/lang/String;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            SingleFunction::SingleFunction(const ::org::apache::lucene::queries::function::ValueSource & a0) : ::org::apache::lucene::queries::function::ValueSource(env->newObject(initializeClass, &mids$, mid_init$_ca78fe7a, a0.this$)) {}

            void SingleFunction::createWeight(const ::java::util::Map & a0, const ::org::apache::lucene::search::IndexSearcher & a1) const
            {
              env->callVoidMethod(this$, mids$[mid_createWeight_1b6125ba], a0.this$, a1.this$);
            }

            ::java::lang::String SingleFunction::description() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_description_14c7b5c5]));
            }

            jboolean SingleFunction::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
            }

            jint SingleFunction::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_SingleFunction_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_SingleFunction_instance_(PyTypeObject *type, PyObject *arg);
            static int t_SingleFunction_init_(t_SingleFunction *self, PyObject *args, PyObject *kwds);
            static PyObject *t_SingleFunction_createWeight(t_SingleFunction *self, PyObject *args);
            static PyObject *t_SingleFunction_description(t_SingleFunction *self, PyObject *args);
            static PyObject *t_SingleFunction_equals(t_SingleFunction *self, PyObject *args);
            static PyObject *t_SingleFunction_hashCode(t_SingleFunction *self, PyObject *args);

            static PyMethodDef t_SingleFunction__methods_[] = {
              DECLARE_METHOD(t_SingleFunction, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SingleFunction, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SingleFunction, createWeight, METH_VARARGS),
              DECLARE_METHOD(t_SingleFunction, description, METH_VARARGS),
              DECLARE_METHOD(t_SingleFunction, equals, METH_VARARGS),
              DECLARE_METHOD(t_SingleFunction, hashCode, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(SingleFunction, t_SingleFunction, ::org::apache::lucene::queries::function::ValueSource, SingleFunction, t_SingleFunction_init_, 0, 0, 0, 0, 0);

            void t_SingleFunction::install(PyObject *module)
            {
              installType(&PY_TYPE(SingleFunction), module, "SingleFunction", 0);
            }

            void t_SingleFunction::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(SingleFunction).tp_dict, "class_", make_descriptor(SingleFunction::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(SingleFunction).tp_dict, "wrapfn_", make_descriptor(t_SingleFunction::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(SingleFunction).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_SingleFunction_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, SingleFunction::initializeClass, 1)))
                return NULL;
              return t_SingleFunction::wrap_Object(SingleFunction(((t_SingleFunction *) arg)->object.this$));
            }
            static PyObject *t_SingleFunction_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, SingleFunction::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_SingleFunction_init_(t_SingleFunction *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::queries::function::ValueSource a0((jobject) NULL);
              SingleFunction object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::queries::function::ValueSource::initializeClass, &a0))
              {
                INT_CALL(object = SingleFunction(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_SingleFunction_createWeight(t_SingleFunction *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::search::IndexSearcher a1((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(self->object.createWeight(a0, a1));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(SingleFunction), (PyObject *) self, "createWeight", args, 2);
            }

            static PyObject *t_SingleFunction_description(t_SingleFunction *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.description());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(SingleFunction), (PyObject *) self, "description", args, 2);
            }

            static PyObject *t_SingleFunction_equals(t_SingleFunction *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(SingleFunction), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_SingleFunction_hashCode(t_SingleFunction *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(SingleFunction), (PyObject *) self, "hashCode", args, 2);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/xml/builders/BoostingTermBuilder.h"
#include "org/apache/lucene/search/spans/SpanQuery.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {

            ::java::lang::Class *BoostingTermBuilder::class$ = NULL;
            jmethodID *BoostingTermBuilder::mids$ = NULL;
            bool BoostingTermBuilder::live$ = false;

            jclass BoostingTermBuilder::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/xml/builders/BoostingTermBuilder");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            BoostingTermBuilder::BoostingTermBuilder() : ::org::apache::lucene::queryparser::xml::builders::SpanBuilderBase(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {
            static PyObject *t_BoostingTermBuilder_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_BoostingTermBuilder_instance_(PyTypeObject *type, PyObject *arg);
            static int t_BoostingTermBuilder_init_(t_BoostingTermBuilder *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_BoostingTermBuilder__methods_[] = {
              DECLARE_METHOD(t_BoostingTermBuilder, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_BoostingTermBuilder, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(BoostingTermBuilder, t_BoostingTermBuilder, ::org::apache::lucene::queryparser::xml::builders::SpanBuilderBase, BoostingTermBuilder, t_BoostingTermBuilder_init_, 0, 0, 0, 0, 0);

            void t_BoostingTermBuilder::install(PyObject *module)
            {
              installType(&PY_TYPE(BoostingTermBuilder), module, "BoostingTermBuilder", 0);
            }

            void t_BoostingTermBuilder::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(BoostingTermBuilder).tp_dict, "class_", make_descriptor(BoostingTermBuilder::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(BoostingTermBuilder).tp_dict, "wrapfn_", make_descriptor(t_BoostingTermBuilder::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(BoostingTermBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_BoostingTermBuilder_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, BoostingTermBuilder::initializeClass, 1)))
                return NULL;
              return t_BoostingTermBuilder::wrap_Object(BoostingTermBuilder(((t_BoostingTermBuilder *) arg)->object.this$));
            }
            static PyObject *t_BoostingTermBuilder_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, BoostingTermBuilder::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_BoostingTermBuilder_init_(t_BoostingTermBuilder *self, PyObject *args, PyObject *kwds)
            {
              BoostingTermBuilder object((jobject) NULL);

              INT_CALL(object = BoostingTermBuilder());
              self->object = object;

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/nodes/BooleanModifierNode.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/ModifierQueryNode$Modifier.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace nodes {

              ::java::lang::Class *BooleanModifierNode::class$ = NULL;
              jmethodID *BooleanModifierNode::mids$ = NULL;
              bool BooleanModifierNode::live$ = false;

              jclass BooleanModifierNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/nodes/BooleanModifierNode");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_6bd34b3d] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;Lorg/apache/lucene/queryparser/flexible/core/nodes/ModifierQueryNode$Modifier;)V");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              BooleanModifierNode::BooleanModifierNode(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0, const ::org::apache::lucene::queryparser::flexible::core::nodes::ModifierQueryNode$Modifier & a1) : ::org::apache::lucene::queryparser::flexible::core::nodes::ModifierQueryNode(env->newObject(initializeClass, &mids$, mid_init$_6bd34b3d, a0.this$, a1.this$)) {}
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace nodes {
              static PyObject *t_BooleanModifierNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_BooleanModifierNode_instance_(PyTypeObject *type, PyObject *arg);
              static int t_BooleanModifierNode_init_(t_BooleanModifierNode *self, PyObject *args, PyObject *kwds);

              static PyMethodDef t_BooleanModifierNode__methods_[] = {
                DECLARE_METHOD(t_BooleanModifierNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_BooleanModifierNode, instance_, METH_O | METH_CLASS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(BooleanModifierNode, t_BooleanModifierNode, ::org::apache::lucene::queryparser::flexible::core::nodes::ModifierQueryNode, BooleanModifierNode, t_BooleanModifierNode_init_, 0, 0, 0, 0, 0);

              void t_BooleanModifierNode::install(PyObject *module)
              {
                installType(&PY_TYPE(BooleanModifierNode), module, "BooleanModifierNode", 0);
              }

              void t_BooleanModifierNode::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(BooleanModifierNode).tp_dict, "class_", make_descriptor(BooleanModifierNode::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(BooleanModifierNode).tp_dict, "wrapfn_", make_descriptor(t_BooleanModifierNode::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(BooleanModifierNode).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_BooleanModifierNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, BooleanModifierNode::initializeClass, 1)))
                  return NULL;
                return t_BooleanModifierNode::wrap_Object(BooleanModifierNode(((t_BooleanModifierNode *) arg)->object.this$));
              }
              static PyObject *t_BooleanModifierNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, BooleanModifierNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_BooleanModifierNode_init_(t_BooleanModifierNode *self, PyObject *args, PyObject *kwds)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::queryparser::flexible::core::nodes::ModifierQueryNode$Modifier a1((jobject) NULL);
                PyTypeObject **p1;
                BooleanModifierNode object((jobject) NULL);

                if (!parseArgs(args, "kK", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, ::org::apache::lucene::queryparser::flexible::core::nodes::ModifierQueryNode$Modifier::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::queryparser::flexible::core::nodes::t_ModifierQueryNode$Modifier::parameters_))
                {
                  INT_CALL(object = BooleanModifierNode(a0, a1));
                  self->object = object;
                }
                else
                {
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ngram/NGramTokenizerFactory.h"
#include "java/lang/Class.h"
#include "java/io/Reader.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "org/apache/lucene/analysis/Tokenizer.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ngram {

          ::java::lang::Class *NGramTokenizerFactory::class$ = NULL;
          jmethodID *NGramTokenizerFactory::mids$ = NULL;
          bool NGramTokenizerFactory::live$ = false;

          jclass NGramTokenizerFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ngram/NGramTokenizerFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_e51780e9] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Tokenizer;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          NGramTokenizerFactory::NGramTokenizerFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenizerFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::Tokenizer NGramTokenizerFactory::create(const ::org::apache::lucene::util::AttributeFactory & a0, const ::java::io::Reader & a1) const
          {
            return ::org::apache::lucene::analysis::Tokenizer(env->callObjectMethod(this$, mids$[mid_create_e51780e9], a0.this$, a1.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ngram {
          static PyObject *t_NGramTokenizerFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_NGramTokenizerFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_NGramTokenizerFactory_init_(t_NGramTokenizerFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_NGramTokenizerFactory_create(t_NGramTokenizerFactory *self, PyObject *args);

          static PyMethodDef t_NGramTokenizerFactory__methods_[] = {
            DECLARE_METHOD(t_NGramTokenizerFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NGramTokenizerFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NGramTokenizerFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(NGramTokenizerFactory, t_NGramTokenizerFactory, ::org::apache::lucene::analysis::util::TokenizerFactory, NGramTokenizerFactory, t_NGramTokenizerFactory_init_, 0, 0, 0, 0, 0);

          void t_NGramTokenizerFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(NGramTokenizerFactory), module, "NGramTokenizerFactory", 0);
          }

          void t_NGramTokenizerFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(NGramTokenizerFactory).tp_dict, "class_", make_descriptor(NGramTokenizerFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(NGramTokenizerFactory).tp_dict, "wrapfn_", make_descriptor(t_NGramTokenizerFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(NGramTokenizerFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_NGramTokenizerFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, NGramTokenizerFactory::initializeClass, 1)))
              return NULL;
            return t_NGramTokenizerFactory::wrap_Object(NGramTokenizerFactory(((t_NGramTokenizerFactory *) arg)->object.this$));
          }
          static PyObject *t_NGramTokenizerFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, NGramTokenizerFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_NGramTokenizerFactory_init_(t_NGramTokenizerFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            NGramTokenizerFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = NGramTokenizerFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_NGramTokenizerFactory_create(t_NGramTokenizerFactory *self, PyObject *args)
          {
            ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
            ::java::io::Reader a1((jobject) NULL);
            ::org::apache::lucene::analysis::Tokenizer result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.create(a0, a1));
              return ::org::apache::lucene::analysis::t_Tokenizer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(NGramTokenizerFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/LimitTokenCountFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *LimitTokenCountFilter::class$ = NULL;
          jmethodID *LimitTokenCountFilter::mids$ = NULL;
          bool LimitTokenCountFilter::live$ = false;

          jclass LimitTokenCountFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/LimitTokenCountFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_d53bcf42] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;I)V");
              mids$[mid_init$_4f7f61d3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;IZ)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          LimitTokenCountFilter::LimitTokenCountFilter(const ::org::apache::lucene::analysis::TokenStream & a0, jint a1) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_d53bcf42, a0.this$, a1)) {}

          LimitTokenCountFilter::LimitTokenCountFilter(const ::org::apache::lucene::analysis::TokenStream & a0, jint a1, jboolean a2) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_4f7f61d3, a0.this$, a1, a2)) {}

          jboolean LimitTokenCountFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void LimitTokenCountFilter::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_LimitTokenCountFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LimitTokenCountFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_LimitTokenCountFilter_init_(t_LimitTokenCountFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_LimitTokenCountFilter_incrementToken(t_LimitTokenCountFilter *self, PyObject *args);
          static PyObject *t_LimitTokenCountFilter_reset(t_LimitTokenCountFilter *self, PyObject *args);

          static PyMethodDef t_LimitTokenCountFilter__methods_[] = {
            DECLARE_METHOD(t_LimitTokenCountFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LimitTokenCountFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LimitTokenCountFilter, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_LimitTokenCountFilter, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(LimitTokenCountFilter, t_LimitTokenCountFilter, ::org::apache::lucene::analysis::TokenFilter, LimitTokenCountFilter, t_LimitTokenCountFilter_init_, 0, 0, 0, 0, 0);

          void t_LimitTokenCountFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(LimitTokenCountFilter), module, "LimitTokenCountFilter", 0);
          }

          void t_LimitTokenCountFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(LimitTokenCountFilter).tp_dict, "class_", make_descriptor(LimitTokenCountFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(LimitTokenCountFilter).tp_dict, "wrapfn_", make_descriptor(t_LimitTokenCountFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(LimitTokenCountFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_LimitTokenCountFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LimitTokenCountFilter::initializeClass, 1)))
              return NULL;
            return t_LimitTokenCountFilter::wrap_Object(LimitTokenCountFilter(((t_LimitTokenCountFilter *) arg)->object.this$));
          }
          static PyObject *t_LimitTokenCountFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LimitTokenCountFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_LimitTokenCountFilter_init_(t_LimitTokenCountFilter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                jint a1;
                LimitTokenCountFilter object((jobject) NULL);

                if (!parseArgs(args, "kI", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = LimitTokenCountFilter(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                jint a1;
                jboolean a2;
                LimitTokenCountFilter object((jobject) NULL);

                if (!parseArgs(args, "kIZ", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = LimitTokenCountFilter(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_LimitTokenCountFilter_incrementToken(t_LimitTokenCountFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(LimitTokenCountFilter), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_LimitTokenCountFilter_reset(t_LimitTokenCountFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(LimitTokenCountFilter), (PyObject *) self, "reset", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/egothor/stemmer/Gener.h"
#include "org/egothor/stemmer/Trie.h"
#include "org/egothor/stemmer/Row.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace egothor {
    namespace stemmer {

      ::java::lang::Class *Gener::class$ = NULL;
      jmethodID *Gener::mids$ = NULL;
      bool Gener::live$ = false;

      jclass Gener::initializeClass(bool getOnly)
      {
        if (getOnly)
          return (jclass) (live$ ? class$->this$ : NULL);
        if (class$ == NULL)
        {
          jclass cls = (jclass) env->findClass("org/egothor/stemmer/Gener");

          mids$ = new jmethodID[max_mid];
          mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
          mids$[mid_eat_9f3e69e2] = env->getMethodID(cls, "eat", "(Lorg/egothor/stemmer/Row;[I)Z");
          mids$[mid_optimize_c26c0475] = env->getMethodID(cls, "optimize", "(Lorg/egothor/stemmer/Trie;)Lorg/egothor/stemmer/Trie;");

          class$ = (::java::lang::Class *) new JObject(cls);
          live$ = true;
        }
        return (jclass) class$->this$;
      }

      Gener::Gener() : ::org::egothor::stemmer::Reduce(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

      jboolean Gener::eat(const ::org::egothor::stemmer::Row & a0, const JArray< jint > & a1) const
      {
        return env->callBooleanMethod(this$, mids$[mid_eat_9f3e69e2], a0.this$, a1.this$);
      }

      ::org::egothor::stemmer::Trie Gener::optimize(const ::org::egothor::stemmer::Trie & a0) const
      {
        return ::org::egothor::stemmer::Trie(env->callObjectMethod(this$, mids$[mid_optimize_c26c0475], a0.this$));
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace egothor {
    namespace stemmer {
      static PyObject *t_Gener_cast_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_Gener_instance_(PyTypeObject *type, PyObject *arg);
      static int t_Gener_init_(t_Gener *self, PyObject *args, PyObject *kwds);
      static PyObject *t_Gener_eat(t_Gener *self, PyObject *args);
      static PyObject *t_Gener_optimize(t_Gener *self, PyObject *args);

      static PyMethodDef t_Gener__methods_[] = {
        DECLARE_METHOD(t_Gener, cast_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_Gener, instance_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_Gener, eat, METH_VARARGS),
        DECLARE_METHOD(t_Gener, optimize, METH_VARARGS),
        { NULL, NULL, 0, NULL }
      };

      DECLARE_TYPE(Gener, t_Gener, ::org::egothor::stemmer::Reduce, Gener, t_Gener_init_, 0, 0, 0, 0, 0);

      void t_Gener::install(PyObject *module)
      {
        installType(&PY_TYPE(Gener), module, "Gener", 0);
      }

      void t_Gener::initialize(PyObject *module)
      {
        PyDict_SetItemString(PY_TYPE(Gener).tp_dict, "class_", make_descriptor(Gener::initializeClass, 1));
        PyDict_SetItemString(PY_TYPE(Gener).tp_dict, "wrapfn_", make_descriptor(t_Gener::wrap_jobject));
        PyDict_SetItemString(PY_TYPE(Gener).tp_dict, "boxfn_", make_descriptor(boxObject));
      }

      static PyObject *t_Gener_cast_(PyTypeObject *type, PyObject *arg)
      {
        if (!(arg = castCheck(arg, Gener::initializeClass, 1)))
          return NULL;
        return t_Gener::wrap_Object(Gener(((t_Gener *) arg)->object.this$));
      }
      static PyObject *t_Gener_instance_(PyTypeObject *type, PyObject *arg)
      {
        if (!castCheck(arg, Gener::initializeClass, 0))
          Py_RETURN_FALSE;
        Py_RETURN_TRUE;
      }

      static int t_Gener_init_(t_Gener *self, PyObject *args, PyObject *kwds)
      {
        Gener object((jobject) NULL);

        INT_CALL(object = Gener());
        self->object = object;

        return 0;
      }

      static PyObject *t_Gener_eat(t_Gener *self, PyObject *args)
      {
        ::org::egothor::stemmer::Row a0((jobject) NULL);
        JArray< jint > a1((jobject) NULL);
        jboolean result;

        if (!parseArgs(args, "k[I", ::org::egothor::stemmer::Row::initializeClass, &a0, &a1))
        {
          OBJ_CALL(result = self->object.eat(a0, a1));
          Py_RETURN_BOOL(result);
        }

        PyErr_SetArgsError((PyObject *) self, "eat", args);
        return NULL;
      }

      static PyObject *t_Gener_optimize(t_Gener *self, PyObject *args)
      {
        ::org::egothor::stemmer::Trie a0((jobject) NULL);
        ::org::egothor::stemmer::Trie result((jobject) NULL);

        if (!parseArgs(args, "k", ::org::egothor::stemmer::Trie::initializeClass, &a0))
        {
          OBJ_CALL(result = self->object.optimize(a0));
          return ::org::egothor::stemmer::t_Trie::wrap_Object(result);
        }

        return callSuper(&PY_TYPE(Gener), (PyObject *) self, "optimize", args, 2);
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/FloatTaxonomyFacets.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/facet/FacetResult.h"
#include "java/lang/Number.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {

          ::java::lang::Class *FloatTaxonomyFacets::class$ = NULL;
          jmethodID *FloatTaxonomyFacets::mids$ = NULL;
          bool FloatTaxonomyFacets::live$ = false;

          jclass FloatTaxonomyFacets::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/FloatTaxonomyFacets");

              mids$ = new jmethodID[max_mid];
              mids$[mid_getSpecificValue_8ecbcac9] = env->getMethodID(cls, "getSpecificValue", "(Ljava/lang/String;[Ljava/lang/String;)Ljava/lang/Number;");
              mids$[mid_getTopChildren_37e8c044] = env->getMethodID(cls, "getTopChildren", "(ILjava/lang/String;[Ljava/lang/String;)Lorg/apache/lucene/facet/FacetResult;");
              mids$[mid_rollup_54c6a166] = env->getMethodID(cls, "rollup", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::java::lang::Number FloatTaxonomyFacets::getSpecificValue(const ::java::lang::String & a0, const JArray< ::java::lang::String > & a1) const
          {
            return ::java::lang::Number(env->callObjectMethod(this$, mids$[mid_getSpecificValue_8ecbcac9], a0.this$, a1.this$));
          }

          ::org::apache::lucene::facet::FacetResult FloatTaxonomyFacets::getTopChildren(jint a0, const ::java::lang::String & a1, const JArray< ::java::lang::String > & a2) const
          {
            return ::org::apache::lucene::facet::FacetResult(env->callObjectMethod(this$, mids$[mid_getTopChildren_37e8c044], a0, a1.this$, a2.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          static PyObject *t_FloatTaxonomyFacets_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FloatTaxonomyFacets_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FloatTaxonomyFacets_getSpecificValue(t_FloatTaxonomyFacets *self, PyObject *args);
          static PyObject *t_FloatTaxonomyFacets_getTopChildren(t_FloatTaxonomyFacets *self, PyObject *args);

          static PyMethodDef t_FloatTaxonomyFacets__methods_[] = {
            DECLARE_METHOD(t_FloatTaxonomyFacets, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FloatTaxonomyFacets, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FloatTaxonomyFacets, getSpecificValue, METH_VARARGS),
            DECLARE_METHOD(t_FloatTaxonomyFacets, getTopChildren, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FloatTaxonomyFacets, t_FloatTaxonomyFacets, ::org::apache::lucene::facet::taxonomy::TaxonomyFacets, FloatTaxonomyFacets, abstract_init, 0, 0, 0, 0, 0);

          void t_FloatTaxonomyFacets::install(PyObject *module)
          {
            installType(&PY_TYPE(FloatTaxonomyFacets), module, "FloatTaxonomyFacets", 0);
          }

          void t_FloatTaxonomyFacets::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FloatTaxonomyFacets).tp_dict, "class_", make_descriptor(FloatTaxonomyFacets::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FloatTaxonomyFacets).tp_dict, "wrapfn_", make_descriptor(t_FloatTaxonomyFacets::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FloatTaxonomyFacets).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FloatTaxonomyFacets_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FloatTaxonomyFacets::initializeClass, 1)))
              return NULL;
            return t_FloatTaxonomyFacets::wrap_Object(FloatTaxonomyFacets(((t_FloatTaxonomyFacets *) arg)->object.this$));
          }
          static PyObject *t_FloatTaxonomyFacets_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FloatTaxonomyFacets::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_FloatTaxonomyFacets_getSpecificValue(t_FloatTaxonomyFacets *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            JArray< ::java::lang::String > a1((jobject) NULL);
            ::java::lang::Number result((jobject) NULL);

            if (!parseArgs(args, "s[s", &a0, &a1))
            {
              OBJ_CALL(result = self->object.getSpecificValue(a0, a1));
              return ::java::lang::t_Number::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(FloatTaxonomyFacets), (PyObject *) self, "getSpecificValue", args, 2);
          }

          static PyObject *t_FloatTaxonomyFacets_getTopChildren(t_FloatTaxonomyFacets *self, PyObject *args)
          {
            jint a0;
            ::java::lang::String a1((jobject) NULL);
            JArray< ::java::lang::String > a2((jobject) NULL);
            ::org::apache::lucene::facet::FacetResult result((jobject) NULL);

            if (!parseArgs(args, "Is[s", &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.getTopChildren(a0, a1, a2));
              return ::org::apache::lucene::facet::t_FacetResult::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(FloatTaxonomyFacets), (PyObject *) self, "getTopChildren", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/FacetResult.h"
#include "org/apache/lucene/facet/LabelAndValue.h"
#include "java/lang/Number.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {

        ::java::lang::Class *FacetResult::class$ = NULL;
        jmethodID *FacetResult::mids$ = NULL;
        jfieldID *FacetResult::fids$ = NULL;
        bool FacetResult::live$ = false;

        jclass FacetResult::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/facet/FacetResult");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_4b7182dd] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;[Ljava/lang/String;Ljava/lang/Number;[Lorg/apache/lucene/facet/LabelAndValue;I)V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            fids$ = new jfieldID[max_fid];
            fids$[fid_childCount] = env->getFieldID(cls, "childCount", "I");
            fids$[fid_dim] = env->getFieldID(cls, "dim", "Ljava/lang/String;");
            fids$[fid_labelValues] = env->getFieldID(cls, "labelValues", "[Lorg/apache/lucene/facet/LabelAndValue;");
            fids$[fid_path] = env->getFieldID(cls, "path", "[Ljava/lang/String;");
            fids$[fid_value] = env->getFieldID(cls, "value", "Ljava/lang/Number;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FacetResult::FacetResult(const ::java::lang::String & a0, const JArray< ::java::lang::String > & a1, const ::java::lang::Number & a2, const JArray< ::org::apache::lucene::facet::LabelAndValue > & a3, jint a4) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_4b7182dd, a0.this$, a1.this$, a2.this$, a3.this$, a4)) {}

        jboolean FacetResult::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        jint FacetResult::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        ::java::lang::String FacetResult::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }

        jint FacetResult::_get_childCount() const
        {
          return env->getIntField(this$, fids$[fid_childCount]);
        }

        ::java::lang::String FacetResult::_get_dim() const
        {
          return ::java::lang::String(env->getObjectField(this$, fids$[fid_dim]));
        }

        JArray< ::org::apache::lucene::facet::LabelAndValue > FacetResult::_get_labelValues() const
        {
          return JArray< ::org::apache::lucene::facet::LabelAndValue >(env->getObjectField(this$, fids$[fid_labelValues]));
        }

        JArray< ::java::lang::String > FacetResult::_get_path() const
        {
          return JArray< ::java::lang::String >(env->getObjectField(this$, fids$[fid_path]));
        }

        ::java::lang::Number FacetResult::_get_value() const
        {
          return ::java::lang::Number(env->getObjectField(this$, fids$[fid_value]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        static PyObject *t_FacetResult_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FacetResult_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FacetResult_init_(t_FacetResult *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FacetResult_equals(t_FacetResult *self, PyObject *args);
        static PyObject *t_FacetResult_hashCode(t_FacetResult *self, PyObject *args);
        static PyObject *t_FacetResult_toString(t_FacetResult *self, PyObject *args);
        static PyObject *t_FacetResult_get__childCount(t_FacetResult *self, void *data);
        static PyObject *t_FacetResult_get__dim(t_FacetResult *self, void *data);
        static PyObject *t_FacetResult_get__labelValues(t_FacetResult *self, void *data);
        static PyObject *t_FacetResult_get__path(t_FacetResult *self, void *data);
        static PyObject *t_FacetResult_get__value(t_FacetResult *self, void *data);

        static PyGetSetDef t_FacetResult__fields_[] = {
          DECLARE_GET_FIELD(t_FacetResult, childCount),
          DECLARE_GET_FIELD(t_FacetResult, dim),
          DECLARE_GET_FIELD(t_FacetResult, labelValues),
          DECLARE_GET_FIELD(t_FacetResult, path),
          DECLARE_GET_FIELD(t_FacetResult, value),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FacetResult__methods_[] = {
          DECLARE_METHOD(t_FacetResult, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FacetResult, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FacetResult, equals, METH_VARARGS),
          DECLARE_METHOD(t_FacetResult, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_FacetResult, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FacetResult, t_FacetResult, ::java::lang::Object, FacetResult, t_FacetResult_init_, 0, 0, t_FacetResult__fields_, 0, 0);

        void t_FacetResult::install(PyObject *module)
        {
          installType(&PY_TYPE(FacetResult), module, "FacetResult", 0);
        }

        void t_FacetResult::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FacetResult).tp_dict, "class_", make_descriptor(FacetResult::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FacetResult).tp_dict, "wrapfn_", make_descriptor(t_FacetResult::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FacetResult).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FacetResult_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FacetResult::initializeClass, 1)))
            return NULL;
          return t_FacetResult::wrap_Object(FacetResult(((t_FacetResult *) arg)->object.this$));
        }
        static PyObject *t_FacetResult_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FacetResult::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FacetResult_init_(t_FacetResult *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::String a0((jobject) NULL);
          JArray< ::java::lang::String > a1((jobject) NULL);
          ::java::lang::Number a2((jobject) NULL);
          JArray< ::org::apache::lucene::facet::LabelAndValue > a3((jobject) NULL);
          jint a4;
          FacetResult object((jobject) NULL);

          if (!parseArgs(args, "s[sO[kI", &::java::lang::PY_TYPE(Number), ::org::apache::lucene::facet::LabelAndValue::initializeClass, &a0, &a1, &a2, &a3, &a4))
          {
            INT_CALL(object = FacetResult(a0, a1, a2, a3, a4));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FacetResult_equals(t_FacetResult *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(FacetResult), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_FacetResult_hashCode(t_FacetResult *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FacetResult), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_FacetResult_toString(t_FacetResult *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(FacetResult), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_FacetResult_get__childCount(t_FacetResult *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_childCount());
          return PyInt_FromLong((long) value);
        }

        static PyObject *t_FacetResult_get__dim(t_FacetResult *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object._get_dim());
          return j2p(value);
        }

        static PyObject *t_FacetResult_get__labelValues(t_FacetResult *self, void *data)
        {
          JArray< ::org::apache::lucene::facet::LabelAndValue > value((jobject) NULL);
          OBJ_CALL(value = self->object._get_labelValues());
          return JArray<jobject>(value.this$).wrap(::org::apache::lucene::facet::t_LabelAndValue::wrap_jobject);
        }

        static PyObject *t_FacetResult_get__path(t_FacetResult *self, void *data)
        {
          JArray< ::java::lang::String > value((jobject) NULL);
          OBJ_CALL(value = self->object._get_path());
          return JArray<jstring>(value.this$).wrap();
        }

        static PyObject *t_FacetResult_get__value(t_FacetResult *self, void *data)
        {
          ::java::lang::Number value((jobject) NULL);
          OBJ_CALL(value = self->object._get_value());
          return ::java::lang::t_Number::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ar/ArabicNormalizer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ar {

          ::java::lang::Class *ArabicNormalizer::class$ = NULL;
          jmethodID *ArabicNormalizer::mids$ = NULL;
          bool ArabicNormalizer::live$ = false;
          jchar ArabicNormalizer::ALEF = (jchar) 0;
          jchar ArabicNormalizer::ALEF_HAMZA_ABOVE = (jchar) 0;
          jchar ArabicNormalizer::ALEF_HAMZA_BELOW = (jchar) 0;
          jchar ArabicNormalizer::ALEF_MADDA = (jchar) 0;
          jchar ArabicNormalizer::DAMMA = (jchar) 0;
          jchar ArabicNormalizer::DAMMATAN = (jchar) 0;
          jchar ArabicNormalizer::DOTLESS_YEH = (jchar) 0;
          jchar ArabicNormalizer::FATHA = (jchar) 0;
          jchar ArabicNormalizer::FATHATAN = (jchar) 0;
          jchar ArabicNormalizer::HEH = (jchar) 0;
          jchar ArabicNormalizer::KASRA = (jchar) 0;
          jchar ArabicNormalizer::KASRATAN = (jchar) 0;
          jchar ArabicNormalizer::SHADDA = (jchar) 0;
          jchar ArabicNormalizer::SUKUN = (jchar) 0;
          jchar ArabicNormalizer::TATWEEL = (jchar) 0;
          jchar ArabicNormalizer::TEH_MARBUTA = (jchar) 0;
          jchar ArabicNormalizer::YEH = (jchar) 0;

          jclass ArabicNormalizer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ar/ArabicNormalizer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_normalize_ec6430eb] = env->getMethodID(cls, "normalize", "([CI)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              ALEF = env->getStaticCharField(cls, "ALEF");
              ALEF_HAMZA_ABOVE = env->getStaticCharField(cls, "ALEF_HAMZA_ABOVE");
              ALEF_HAMZA_BELOW = env->getStaticCharField(cls, "ALEF_HAMZA_BELOW");
              ALEF_MADDA = env->getStaticCharField(cls, "ALEF_MADDA");
              DAMMA = env->getStaticCharField(cls, "DAMMA");
              DAMMATAN = env->getStaticCharField(cls, "DAMMATAN");
              DOTLESS_YEH = env->getStaticCharField(cls, "DOTLESS_YEH");
              FATHA = env->getStaticCharField(cls, "FATHA");
              FATHATAN = env->getStaticCharField(cls, "FATHATAN");
              HEH = env->getStaticCharField(cls, "HEH");
              KASRA = env->getStaticCharField(cls, "KASRA");
              KASRATAN = env->getStaticCharField(cls, "KASRATAN");
              SHADDA = env->getStaticCharField(cls, "SHADDA");
              SUKUN = env->getStaticCharField(cls, "SUKUN");
              TATWEEL = env->getStaticCharField(cls, "TATWEEL");
              TEH_MARBUTA = env->getStaticCharField(cls, "TEH_MARBUTA");
              YEH = env->getStaticCharField(cls, "YEH");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ArabicNormalizer::ArabicNormalizer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint ArabicNormalizer::normalize(const JArray< jchar > & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_normalize_ec6430eb], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ar {
          static PyObject *t_ArabicNormalizer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ArabicNormalizer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ArabicNormalizer_init_(t_ArabicNormalizer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ArabicNormalizer_normalize(t_ArabicNormalizer *self, PyObject *args);

          static PyMethodDef t_ArabicNormalizer__methods_[] = {
            DECLARE_METHOD(t_ArabicNormalizer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ArabicNormalizer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ArabicNormalizer, normalize, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ArabicNormalizer, t_ArabicNormalizer, ::java::lang::Object, ArabicNormalizer, t_ArabicNormalizer_init_, 0, 0, 0, 0, 0);

          void t_ArabicNormalizer::install(PyObject *module)
          {
            installType(&PY_TYPE(ArabicNormalizer), module, "ArabicNormalizer", 0);
          }

          void t_ArabicNormalizer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ArabicNormalizer).tp_dict, "class_", make_descriptor(ArabicNormalizer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ArabicNormalizer).tp_dict, "wrapfn_", make_descriptor(t_ArabicNormalizer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ArabicNormalizer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(ArabicNormalizer::initializeClass);
            PyDict_SetItemString(PY_TYPE(ArabicNormalizer).tp_dict, "ALEF", make_descriptor(ArabicNormalizer::ALEF));
            PyDict_SetItemString(PY_TYPE(ArabicNormalizer).tp_dict, "ALEF_HAMZA_ABOVE", make_descriptor(ArabicNormalizer::ALEF_HAMZA_ABOVE));
            PyDict_SetItemString(PY_TYPE(ArabicNormalizer).tp_dict, "ALEF_HAMZA_BELOW", make_descriptor(ArabicNormalizer::ALEF_HAMZA_BELOW));
            PyDict_SetItemString(PY_TYPE(ArabicNormalizer).tp_dict, "ALEF_MADDA", make_descriptor(ArabicNormalizer::ALEF_MADDA));
            PyDict_SetItemString(PY_TYPE(ArabicNormalizer).tp_dict, "DAMMA", make_descriptor(ArabicNormalizer::DAMMA));
            PyDict_SetItemString(PY_TYPE(ArabicNormalizer).tp_dict, "DAMMATAN", make_descriptor(ArabicNormalizer::DAMMATAN));
            PyDict_SetItemString(PY_TYPE(ArabicNormalizer).tp_dict, "DOTLESS_YEH", make_descriptor(ArabicNormalizer::DOTLESS_YEH));
            PyDict_SetItemString(PY_TYPE(ArabicNormalizer).tp_dict, "FATHA", make_descriptor(ArabicNormalizer::FATHA));
            PyDict_SetItemString(PY_TYPE(ArabicNormalizer).tp_dict, "FATHATAN", make_descriptor(ArabicNormalizer::FATHATAN));
            PyDict_SetItemString(PY_TYPE(ArabicNormalizer).tp_dict, "HEH", make_descriptor(ArabicNormalizer::HEH));
            PyDict_SetItemString(PY_TYPE(ArabicNormalizer).tp_dict, "KASRA", make_descriptor(ArabicNormalizer::KASRA));
            PyDict_SetItemString(PY_TYPE(ArabicNormalizer).tp_dict, "KASRATAN", make_descriptor(ArabicNormalizer::KASRATAN));
            PyDict_SetItemString(PY_TYPE(ArabicNormalizer).tp_dict, "SHADDA", make_descriptor(ArabicNormalizer::SHADDA));
            PyDict_SetItemString(PY_TYPE(ArabicNormalizer).tp_dict, "SUKUN", make_descriptor(ArabicNormalizer::SUKUN));
            PyDict_SetItemString(PY_TYPE(ArabicNormalizer).tp_dict, "TATWEEL", make_descriptor(ArabicNormalizer::TATWEEL));
            PyDict_SetItemString(PY_TYPE(ArabicNormalizer).tp_dict, "TEH_MARBUTA", make_descriptor(ArabicNormalizer::TEH_MARBUTA));
            PyDict_SetItemString(PY_TYPE(ArabicNormalizer).tp_dict, "YEH", make_descriptor(ArabicNormalizer::YEH));
          }

          static PyObject *t_ArabicNormalizer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ArabicNormalizer::initializeClass, 1)))
              return NULL;
            return t_ArabicNormalizer::wrap_Object(ArabicNormalizer(((t_ArabicNormalizer *) arg)->object.this$));
          }
          static PyObject *t_ArabicNormalizer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ArabicNormalizer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ArabicNormalizer_init_(t_ArabicNormalizer *self, PyObject *args, PyObject *kwds)
          {
            ArabicNormalizer object((jobject) NULL);

            INT_CALL(object = ArabicNormalizer());
            self->object = object;

            return 0;
          }

          static PyObject *t_ArabicNormalizer_normalize(t_ArabicNormalizer *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(result = self->object.normalize(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "normalize", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/StoredFieldsReader.h"
#include "java/io/Closeable.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/StoredFieldVisitor.h"
#include "org/apache/lucene/util/Accountable.h"
#include "java/lang/Cloneable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {

        ::java::lang::Class *StoredFieldsReader::class$ = NULL;
        jmethodID *StoredFieldsReader::mids$ = NULL;
        bool StoredFieldsReader::live$ = false;

        jclass StoredFieldsReader::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/StoredFieldsReader");

            mids$ = new jmethodID[max_mid];
            mids$[mid_checkIntegrity_54c6a166] = env->getMethodID(cls, "checkIntegrity", "()V");
            mids$[mid_clone_ef585f0d] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/codecs/StoredFieldsReader;");
            mids$[mid_visitDocument_a2ea3ebe] = env->getMethodID(cls, "visitDocument", "(ILorg/apache/lucene/index/StoredFieldVisitor;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void StoredFieldsReader::checkIntegrity() const
        {
          env->callVoidMethod(this$, mids$[mid_checkIntegrity_54c6a166]);
        }

        StoredFieldsReader StoredFieldsReader::clone() const
        {
          return StoredFieldsReader(env->callObjectMethod(this$, mids$[mid_clone_ef585f0d]));
        }

        void StoredFieldsReader::visitDocument(jint a0, const ::org::apache::lucene::index::StoredFieldVisitor & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_visitDocument_a2ea3ebe], a0, a1.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        static PyObject *t_StoredFieldsReader_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_StoredFieldsReader_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_StoredFieldsReader_checkIntegrity(t_StoredFieldsReader *self);
        static PyObject *t_StoredFieldsReader_clone(t_StoredFieldsReader *self);
        static PyObject *t_StoredFieldsReader_visitDocument(t_StoredFieldsReader *self, PyObject *args);

        static PyMethodDef t_StoredFieldsReader__methods_[] = {
          DECLARE_METHOD(t_StoredFieldsReader, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_StoredFieldsReader, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_StoredFieldsReader, checkIntegrity, METH_NOARGS),
          DECLARE_METHOD(t_StoredFieldsReader, clone, METH_NOARGS),
          DECLARE_METHOD(t_StoredFieldsReader, visitDocument, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(StoredFieldsReader, t_StoredFieldsReader, ::java::lang::Object, StoredFieldsReader, abstract_init, 0, 0, 0, 0, 0);

        void t_StoredFieldsReader::install(PyObject *module)
        {
          installType(&PY_TYPE(StoredFieldsReader), module, "StoredFieldsReader", 0);
        }

        void t_StoredFieldsReader::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(StoredFieldsReader).tp_dict, "class_", make_descriptor(StoredFieldsReader::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(StoredFieldsReader).tp_dict, "wrapfn_", make_descriptor(t_StoredFieldsReader::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(StoredFieldsReader).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_StoredFieldsReader_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, StoredFieldsReader::initializeClass, 1)))
            return NULL;
          return t_StoredFieldsReader::wrap_Object(StoredFieldsReader(((t_StoredFieldsReader *) arg)->object.this$));
        }
        static PyObject *t_StoredFieldsReader_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, StoredFieldsReader::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_StoredFieldsReader_checkIntegrity(t_StoredFieldsReader *self)
        {
          OBJ_CALL(self->object.checkIntegrity());
          Py_RETURN_NONE;
        }

        static PyObject *t_StoredFieldsReader_clone(t_StoredFieldsReader *self)
        {
          StoredFieldsReader result((jobject) NULL);
          OBJ_CALL(result = self->object.clone());
          return t_StoredFieldsReader::wrap_Object(result);
        }

        static PyObject *t_StoredFieldsReader_visitDocument(t_StoredFieldsReader *self, PyObject *args)
        {
          jint a0;
          ::org::apache::lucene::index::StoredFieldVisitor a1((jobject) NULL);

          if (!parseArgs(args, "Ik", ::org::apache::lucene::index::StoredFieldVisitor::initializeClass, &a0, &a1))
          {
            OBJ_CALL(self->object.visitDocument(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "visitDocument", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/MatchAllDocsQueryNode.h"
#include "java/lang/Class.h"
#include "java/lang/CharSequence.h"
#include "org/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax.h"
#include "java/lang/CloneNotSupportedException.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {

              ::java::lang::Class *MatchAllDocsQueryNode::class$ = NULL;
              jmethodID *MatchAllDocsQueryNode::mids$ = NULL;
              bool MatchAllDocsQueryNode::live$ = false;

              jclass MatchAllDocsQueryNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/nodes/MatchAllDocsQueryNode");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_cloneTree_54ec1c5f] = env->getMethodID(cls, "cloneTree", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/MatchAllDocsQueryNode;");
                  mids$[mid_toQueryString_99b8dfe1] = env->getMethodID(cls, "toQueryString", "(Lorg/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax;)Ljava/lang/CharSequence;");
                  mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              MatchAllDocsQueryNode::MatchAllDocsQueryNode() : ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNodeImpl(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              MatchAllDocsQueryNode MatchAllDocsQueryNode::cloneTree() const
              {
                return MatchAllDocsQueryNode(env->callObjectMethod(this$, mids$[mid_cloneTree_54ec1c5f]));
              }

              ::java::lang::CharSequence MatchAllDocsQueryNode::toQueryString(const ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax & a0) const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_toQueryString_99b8dfe1], a0.this$));
              }

              ::java::lang::String MatchAllDocsQueryNode::toString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {
              static PyObject *t_MatchAllDocsQueryNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_MatchAllDocsQueryNode_instance_(PyTypeObject *type, PyObject *arg);
              static int t_MatchAllDocsQueryNode_init_(t_MatchAllDocsQueryNode *self, PyObject *args, PyObject *kwds);
              static PyObject *t_MatchAllDocsQueryNode_cloneTree(t_MatchAllDocsQueryNode *self, PyObject *args);
              static PyObject *t_MatchAllDocsQueryNode_toQueryString(t_MatchAllDocsQueryNode *self, PyObject *args);
              static PyObject *t_MatchAllDocsQueryNode_toString(t_MatchAllDocsQueryNode *self, PyObject *args);

              static PyMethodDef t_MatchAllDocsQueryNode__methods_[] = {
                DECLARE_METHOD(t_MatchAllDocsQueryNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_MatchAllDocsQueryNode, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_MatchAllDocsQueryNode, cloneTree, METH_VARARGS),
                DECLARE_METHOD(t_MatchAllDocsQueryNode, toQueryString, METH_VARARGS),
                DECLARE_METHOD(t_MatchAllDocsQueryNode, toString, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(MatchAllDocsQueryNode, t_MatchAllDocsQueryNode, ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNodeImpl, MatchAllDocsQueryNode, t_MatchAllDocsQueryNode_init_, 0, 0, 0, 0, 0);

              void t_MatchAllDocsQueryNode::install(PyObject *module)
              {
                installType(&PY_TYPE(MatchAllDocsQueryNode), module, "MatchAllDocsQueryNode", 0);
              }

              void t_MatchAllDocsQueryNode::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(MatchAllDocsQueryNode).tp_dict, "class_", make_descriptor(MatchAllDocsQueryNode::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(MatchAllDocsQueryNode).tp_dict, "wrapfn_", make_descriptor(t_MatchAllDocsQueryNode::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(MatchAllDocsQueryNode).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_MatchAllDocsQueryNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, MatchAllDocsQueryNode::initializeClass, 1)))
                  return NULL;
                return t_MatchAllDocsQueryNode::wrap_Object(MatchAllDocsQueryNode(((t_MatchAllDocsQueryNode *) arg)->object.this$));
              }
              static PyObject *t_MatchAllDocsQueryNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, MatchAllDocsQueryNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_MatchAllDocsQueryNode_init_(t_MatchAllDocsQueryNode *self, PyObject *args, PyObject *kwds)
              {
                MatchAllDocsQueryNode object((jobject) NULL);

                INT_CALL(object = MatchAllDocsQueryNode());
                self->object = object;

                return 0;
              }

              static PyObject *t_MatchAllDocsQueryNode_cloneTree(t_MatchAllDocsQueryNode *self, PyObject *args)
              {
                MatchAllDocsQueryNode result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.cloneTree());
                  return t_MatchAllDocsQueryNode::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(MatchAllDocsQueryNode), (PyObject *) self, "cloneTree", args, 2);
              }

              static PyObject *t_MatchAllDocsQueryNode_toQueryString(t_MatchAllDocsQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax a0((jobject) NULL);
                ::java::lang::CharSequence result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.toQueryString(a0));
                  return ::java::lang::t_CharSequence::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(MatchAllDocsQueryNode), (PyObject *) self, "toQueryString", args, 2);
              }

              static PyObject *t_MatchAllDocsQueryNode_toString(t_MatchAllDocsQueryNode *self, PyObject *args)
              {
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.toString());
                  return j2p(result);
                }

                return callSuper(&PY_TYPE(MatchAllDocsQueryNode), (PyObject *) self, "toString", args, 2);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/vectorhighlight/FragmentsBuilder.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/vectorhighlight/FieldFragList.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/search/highlight/Encoder.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {

          ::java::lang::Class *FragmentsBuilder::class$ = NULL;
          jmethodID *FragmentsBuilder::mids$ = NULL;
          bool FragmentsBuilder::live$ = false;

          jclass FragmentsBuilder::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/vectorhighlight/FragmentsBuilder");

              mids$ = new jmethodID[max_mid];
              mids$[mid_createFragment_dbdbadf3] = env->getMethodID(cls, "createFragment", "(Lorg/apache/lucene/index/IndexReader;ILjava/lang/String;Lorg/apache/lucene/search/vectorhighlight/FieldFragList;)Ljava/lang/String;");
              mids$[mid_createFragment_4ae15401] = env->getMethodID(cls, "createFragment", "(Lorg/apache/lucene/index/IndexReader;ILjava/lang/String;Lorg/apache/lucene/search/vectorhighlight/FieldFragList;[Ljava/lang/String;[Ljava/lang/String;Lorg/apache/lucene/search/highlight/Encoder;)Ljava/lang/String;");
              mids$[mid_createFragments_b5534699] = env->getMethodID(cls, "createFragments", "(Lorg/apache/lucene/index/IndexReader;ILjava/lang/String;Lorg/apache/lucene/search/vectorhighlight/FieldFragList;I)[Ljava/lang/String;");
              mids$[mid_createFragments_a6aed56f] = env->getMethodID(cls, "createFragments", "(Lorg/apache/lucene/index/IndexReader;ILjava/lang/String;Lorg/apache/lucene/search/vectorhighlight/FieldFragList;I[Ljava/lang/String;[Ljava/lang/String;Lorg/apache/lucene/search/highlight/Encoder;)[Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::java::lang::String FragmentsBuilder::createFragment(const ::org::apache::lucene::index::IndexReader & a0, jint a1, const ::java::lang::String & a2, const ::org::apache::lucene::search::vectorhighlight::FieldFragList & a3) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_createFragment_dbdbadf3], a0.this$, a1, a2.this$, a3.this$));
          }

          ::java::lang::String FragmentsBuilder::createFragment(const ::org::apache::lucene::index::IndexReader & a0, jint a1, const ::java::lang::String & a2, const ::org::apache::lucene::search::vectorhighlight::FieldFragList & a3, const JArray< ::java::lang::String > & a4, const JArray< ::java::lang::String > & a5, const ::org::apache::lucene::search::highlight::Encoder & a6) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_createFragment_4ae15401], a0.this$, a1, a2.this$, a3.this$, a4.this$, a5.this$, a6.this$));
          }

          JArray< ::java::lang::String > FragmentsBuilder::createFragments(const ::org::apache::lucene::index::IndexReader & a0, jint a1, const ::java::lang::String & a2, const ::org::apache::lucene::search::vectorhighlight::FieldFragList & a3, jint a4) const
          {
            return JArray< ::java::lang::String >(env->callObjectMethod(this$, mids$[mid_createFragments_b5534699], a0.this$, a1, a2.this$, a3.this$, a4));
          }

          JArray< ::java::lang::String > FragmentsBuilder::createFragments(const ::org::apache::lucene::index::IndexReader & a0, jint a1, const ::java::lang::String & a2, const ::org::apache::lucene::search::vectorhighlight::FieldFragList & a3, jint a4, const JArray< ::java::lang::String > & a5, const JArray< ::java::lang::String > & a6, const ::org::apache::lucene::search::highlight::Encoder & a7) const
          {
            return JArray< ::java::lang::String >(env->callObjectMethod(this$, mids$[mid_createFragments_a6aed56f], a0.this$, a1, a2.this$, a3.this$, a4, a5.this$, a6.this$, a7.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {
          static PyObject *t_FragmentsBuilder_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FragmentsBuilder_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FragmentsBuilder_createFragment(t_FragmentsBuilder *self, PyObject *args);
          static PyObject *t_FragmentsBuilder_createFragments(t_FragmentsBuilder *self, PyObject *args);

          static PyMethodDef t_FragmentsBuilder__methods_[] = {
            DECLARE_METHOD(t_FragmentsBuilder, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FragmentsBuilder, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FragmentsBuilder, createFragment, METH_VARARGS),
            DECLARE_METHOD(t_FragmentsBuilder, createFragments, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FragmentsBuilder, t_FragmentsBuilder, ::java::lang::Object, FragmentsBuilder, abstract_init, 0, 0, 0, 0, 0);

          void t_FragmentsBuilder::install(PyObject *module)
          {
            installType(&PY_TYPE(FragmentsBuilder), module, "FragmentsBuilder", 0);
          }

          void t_FragmentsBuilder::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FragmentsBuilder).tp_dict, "class_", make_descriptor(FragmentsBuilder::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FragmentsBuilder).tp_dict, "wrapfn_", make_descriptor(t_FragmentsBuilder::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FragmentsBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FragmentsBuilder_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FragmentsBuilder::initializeClass, 1)))
              return NULL;
            return t_FragmentsBuilder::wrap_Object(FragmentsBuilder(((t_FragmentsBuilder *) arg)->object.this$));
          }
          static PyObject *t_FragmentsBuilder_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FragmentsBuilder::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_FragmentsBuilder_createFragment(t_FragmentsBuilder *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 4:
              {
                ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
                jint a1;
                ::java::lang::String a2((jobject) NULL);
                ::org::apache::lucene::search::vectorhighlight::FieldFragList a3((jobject) NULL);
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, "kIsk", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::search::vectorhighlight::FieldFragList::initializeClass, &a0, &a1, &a2, &a3))
                {
                  OBJ_CALL(result = self->object.createFragment(a0, a1, a2, a3));
                  return j2p(result);
                }
              }
              break;
             case 7:
              {
                ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
                jint a1;
                ::java::lang::String a2((jobject) NULL);
                ::org::apache::lucene::search::vectorhighlight::FieldFragList a3((jobject) NULL);
                JArray< ::java::lang::String > a4((jobject) NULL);
                JArray< ::java::lang::String > a5((jobject) NULL);
                ::org::apache::lucene::search::highlight::Encoder a6((jobject) NULL);
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, "kIsk[s[sk", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::search::vectorhighlight::FieldFragList::initializeClass, ::org::apache::lucene::search::highlight::Encoder::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5, &a6))
                {
                  OBJ_CALL(result = self->object.createFragment(a0, a1, a2, a3, a4, a5, a6));
                  return j2p(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "createFragment", args);
            return NULL;
          }

          static PyObject *t_FragmentsBuilder_createFragments(t_FragmentsBuilder *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 5:
              {
                ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
                jint a1;
                ::java::lang::String a2((jobject) NULL);
                ::org::apache::lucene::search::vectorhighlight::FieldFragList a3((jobject) NULL);
                jint a4;
                JArray< ::java::lang::String > result((jobject) NULL);

                if (!parseArgs(args, "kIskI", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::search::vectorhighlight::FieldFragList::initializeClass, &a0, &a1, &a2, &a3, &a4))
                {
                  OBJ_CALL(result = self->object.createFragments(a0, a1, a2, a3, a4));
                  return JArray<jstring>(result.this$).wrap();
                }
              }
              break;
             case 8:
              {
                ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
                jint a1;
                ::java::lang::String a2((jobject) NULL);
                ::org::apache::lucene::search::vectorhighlight::FieldFragList a3((jobject) NULL);
                jint a4;
                JArray< ::java::lang::String > a5((jobject) NULL);
                JArray< ::java::lang::String > a6((jobject) NULL);
                ::org::apache::lucene::search::highlight::Encoder a7((jobject) NULL);
                JArray< ::java::lang::String > result((jobject) NULL);

                if (!parseArgs(args, "kIskI[s[sk", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::search::vectorhighlight::FieldFragList::initializeClass, ::org::apache::lucene::search::highlight::Encoder::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7))
                {
                  OBJ_CALL(result = self->object.createFragments(a0, a1, a2, a3, a4, a5, a6, a7));
                  return JArray<jstring>(result.this$).wrap();
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "createFragments", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/nl/DutchAnalyzer.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "org/apache/lucene/analysis/util/CharArrayMap.h"
#include "java/lang/String.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace nl {

          ::java::lang::Class *DutchAnalyzer::class$ = NULL;
          jmethodID *DutchAnalyzer::mids$ = NULL;
          bool DutchAnalyzer::live$ = false;
          ::java::lang::String *DutchAnalyzer::DEFAULT_STOPWORD_FILE = NULL;

          jclass DutchAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/nl/DutchAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_0d96cf33] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;)V");
              mids$[mid_init$_6d1f9881] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_83eafe28] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_3ea629c6] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/util/CharArraySet;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_c9d7e4a3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_a02110cb] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/util/CharArraySet;Lorg/apache/lucene/analysis/util/CharArraySet;Lorg/apache/lucene/analysis/util/CharArrayMap;)V");
              mids$[mid_init$_0a2f8356] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;Lorg/apache/lucene/analysis/util/CharArraySet;Lorg/apache/lucene/analysis/util/CharArrayMap;)V");
              mids$[mid_getDefaultStopSet_d2d3505c] = env->getStaticMethodID(cls, "getDefaultStopSet", "()Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_STOPWORD_FILE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_STOPWORD_FILE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          DutchAnalyzer::DutchAnalyzer() : ::org::apache::lucene::analysis::Analyzer(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          DutchAnalyzer::DutchAnalyzer(const ::org::apache::lucene::util::Version & a0) : ::org::apache::lucene::analysis::Analyzer(env->newObject(initializeClass, &mids$, mid_init$_0d96cf33, a0.this$)) {}

          DutchAnalyzer::DutchAnalyzer(const ::org::apache::lucene::analysis::util::CharArraySet & a0) : ::org::apache::lucene::analysis::Analyzer(env->newObject(initializeClass, &mids$, mid_init$_6d1f9881, a0.this$)) {}

          DutchAnalyzer::DutchAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::Analyzer(env->newObject(initializeClass, &mids$, mid_init$_83eafe28, a0.this$, a1.this$)) {}

          DutchAnalyzer::DutchAnalyzer(const ::org::apache::lucene::analysis::util::CharArraySet & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::Analyzer(env->newObject(initializeClass, &mids$, mid_init$_3ea629c6, a0.this$, a1.this$)) {}

          DutchAnalyzer::DutchAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1, const ::org::apache::lucene::analysis::util::CharArraySet & a2) : ::org::apache::lucene::analysis::Analyzer(env->newObject(initializeClass, &mids$, mid_init$_c9d7e4a3, a0.this$, a1.this$, a2.this$)) {}

          DutchAnalyzer::DutchAnalyzer(const ::org::apache::lucene::analysis::util::CharArraySet & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1, const ::org::apache::lucene::analysis::util::CharArrayMap & a2) : ::org::apache::lucene::analysis::Analyzer(env->newObject(initializeClass, &mids$, mid_init$_a02110cb, a0.this$, a1.this$, a2.this$)) {}

          DutchAnalyzer::DutchAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1, const ::org::apache::lucene::analysis::util::CharArraySet & a2, const ::org::apache::lucene::analysis::util::CharArrayMap & a3) : ::org::apache::lucene::analysis::Analyzer(env->newObject(initializeClass, &mids$, mid_init$_0a2f8356, a0.this$, a1.this$, a2.this$, a3.this$)) {}

          ::org::apache::lucene::analysis::util::CharArraySet DutchAnalyzer::getDefaultStopSet()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getDefaultStopSet_d2d3505c]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace nl {
          static PyObject *t_DutchAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DutchAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_DutchAnalyzer_init_(t_DutchAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_DutchAnalyzer_getDefaultStopSet(PyTypeObject *type);
          static PyObject *t_DutchAnalyzer_get__defaultStopSet(t_DutchAnalyzer *self, void *data);
          static PyGetSetDef t_DutchAnalyzer__fields_[] = {
            DECLARE_GET_FIELD(t_DutchAnalyzer, defaultStopSet),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_DutchAnalyzer__methods_[] = {
            DECLARE_METHOD(t_DutchAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DutchAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DutchAnalyzer, getDefaultStopSet, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(DutchAnalyzer, t_DutchAnalyzer, ::org::apache::lucene::analysis::Analyzer, DutchAnalyzer, t_DutchAnalyzer_init_, 0, 0, t_DutchAnalyzer__fields_, 0, 0);

          void t_DutchAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(DutchAnalyzer), module, "DutchAnalyzer", 0);
          }

          void t_DutchAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(DutchAnalyzer).tp_dict, "class_", make_descriptor(DutchAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(DutchAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_DutchAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(DutchAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(DutchAnalyzer::initializeClass);
            PyDict_SetItemString(PY_TYPE(DutchAnalyzer).tp_dict, "DEFAULT_STOPWORD_FILE", make_descriptor(j2p(*DutchAnalyzer::DEFAULT_STOPWORD_FILE)));
          }

          static PyObject *t_DutchAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, DutchAnalyzer::initializeClass, 1)))
              return NULL;
            return t_DutchAnalyzer::wrap_Object(DutchAnalyzer(((t_DutchAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_DutchAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, DutchAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_DutchAnalyzer_init_(t_DutchAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                DutchAnalyzer object((jobject) NULL);

                INT_CALL(object = DutchAnalyzer());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                DutchAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::util::Version::initializeClass, &a0))
                {
                  INT_CALL(object = DutchAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::analysis::util::CharArraySet a0((jobject) NULL);
                PyTypeObject **p0;
                DutchAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = DutchAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                DutchAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "kK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = DutchAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::analysis::util::CharArraySet a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                DutchAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = DutchAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                ::org::apache::lucene::analysis::util::CharArraySet a2((jobject) NULL);
                PyTypeObject **p2;
                DutchAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "kKK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_, &a2, &p2, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = DutchAnalyzer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::analysis::util::CharArraySet a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                ::org::apache::lucene::analysis::util::CharArrayMap a2((jobject) NULL);
                PyTypeObject **p2;
                DutchAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KKK", ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, ::org::apache::lucene::analysis::util::CharArrayMap::initializeClass, &a0, &p0, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_, &a2, &p2, ::org::apache::lucene::analysis::util::t_CharArrayMap::parameters_))
                {
                  INT_CALL(object = DutchAnalyzer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 4:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                ::org::apache::lucene::analysis::util::CharArraySet a2((jobject) NULL);
                PyTypeObject **p2;
                ::org::apache::lucene::analysis::util::CharArrayMap a3((jobject) NULL);
                PyTypeObject **p3;
                DutchAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "kKKK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, ::org::apache::lucene::analysis::util::CharArrayMap::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_, &a2, &p2, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_, &a3, &p3, ::org::apache::lucene::analysis::util::t_CharArrayMap::parameters_))
                {
                  INT_CALL(object = DutchAnalyzer(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_DutchAnalyzer_getDefaultStopSet(PyTypeObject *type)
          {
            ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::nl::DutchAnalyzer::getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_DutchAnalyzer_get__defaultStopSet(t_DutchAnalyzer *self, void *data)
          {
            ::org::apache::lucene::analysis::util::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/BasicModelBE.h"
#include "org/apache/lucene/search/similarities/BasicStats.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *BasicModelBE::class$ = NULL;
          jmethodID *BasicModelBE::mids$ = NULL;
          bool BasicModelBE::live$ = false;

          jclass BasicModelBE::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/BasicModelBE");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_score_076760a9] = env->getMethodID(cls, "score", "(Lorg/apache/lucene/search/similarities/BasicStats;F)F");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BasicModelBE::BasicModelBE() : ::org::apache::lucene::search::similarities::BasicModel(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jfloat BasicModelBE::score(const ::org::apache::lucene::search::similarities::BasicStats & a0, jfloat a1) const
          {
            return env->callFloatMethod(this$, mids$[mid_score_076760a9], a0.this$, a1);
          }

          ::java::lang::String BasicModelBE::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_BasicModelBE_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BasicModelBE_instance_(PyTypeObject *type, PyObject *arg);
          static int t_BasicModelBE_init_(t_BasicModelBE *self, PyObject *args, PyObject *kwds);
          static PyObject *t_BasicModelBE_score(t_BasicModelBE *self, PyObject *args);
          static PyObject *t_BasicModelBE_toString(t_BasicModelBE *self, PyObject *args);

          static PyMethodDef t_BasicModelBE__methods_[] = {
            DECLARE_METHOD(t_BasicModelBE, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BasicModelBE, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BasicModelBE, score, METH_VARARGS),
            DECLARE_METHOD(t_BasicModelBE, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(BasicModelBE, t_BasicModelBE, ::org::apache::lucene::search::similarities::BasicModel, BasicModelBE, t_BasicModelBE_init_, 0, 0, 0, 0, 0);

          void t_BasicModelBE::install(PyObject *module)
          {
            installType(&PY_TYPE(BasicModelBE), module, "BasicModelBE", 0);
          }

          void t_BasicModelBE::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(BasicModelBE).tp_dict, "class_", make_descriptor(BasicModelBE::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(BasicModelBE).tp_dict, "wrapfn_", make_descriptor(t_BasicModelBE::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(BasicModelBE).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_BasicModelBE_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BasicModelBE::initializeClass, 1)))
              return NULL;
            return t_BasicModelBE::wrap_Object(BasicModelBE(((t_BasicModelBE *) arg)->object.this$));
          }
          static PyObject *t_BasicModelBE_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BasicModelBE::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_BasicModelBE_init_(t_BasicModelBE *self, PyObject *args, PyObject *kwds)
          {
            BasicModelBE object((jobject) NULL);

            INT_CALL(object = BasicModelBE());
            self->object = object;

            return 0;
          }

          static PyObject *t_BasicModelBE_score(t_BasicModelBE *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jfloat a1;
            jfloat result;

            if (!parseArgs(args, "kF", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.score(a0, a1));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(BasicModelBE), (PyObject *) self, "score", args, 2);
          }

          static PyObject *t_BasicModelBE_toString(t_BasicModelBE *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(BasicModelBE), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/DefFunction.h"
#include "org/apache/lucene/queries/function/ValueSource.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *DefFunction::class$ = NULL;
            jmethodID *DefFunction::mids$ = NULL;
            bool DefFunction::live$ = false;

            jclass DefFunction::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/DefFunction");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_1fde8fc3] = env->getMethodID(cls, "<init>", "(Ljava/util/List;)V");
                mids$[mid_getValues_4c566485] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/queries/function/FunctionValues;");
                mids$[mid_name_14c7b5c5] = env->getMethodID(cls, "name", "()Ljava/lang/String;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            DefFunction::DefFunction(const ::java::util::List & a0) : ::org::apache::lucene::queries::function::valuesource::MultiFunction(env->newObject(initializeClass, &mids$, mid_init$_1fde8fc3, a0.this$)) {}

            ::org::apache::lucene::queries::function::FunctionValues DefFunction::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::FunctionValues(env->callObjectMethod(this$, mids$[mid_getValues_4c566485], a0.this$, a1.this$));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_DefFunction_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_DefFunction_instance_(PyTypeObject *type, PyObject *arg);
            static int t_DefFunction_init_(t_DefFunction *self, PyObject *args, PyObject *kwds);
            static PyObject *t_DefFunction_getValues(t_DefFunction *self, PyObject *args);

            static PyMethodDef t_DefFunction__methods_[] = {
              DECLARE_METHOD(t_DefFunction, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_DefFunction, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_DefFunction, getValues, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(DefFunction, t_DefFunction, ::org::apache::lucene::queries::function::valuesource::MultiFunction, DefFunction, t_DefFunction_init_, 0, 0, 0, 0, 0);

            void t_DefFunction::install(PyObject *module)
            {
              installType(&PY_TYPE(DefFunction), module, "DefFunction", 0);
            }

            void t_DefFunction::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(DefFunction).tp_dict, "class_", make_descriptor(DefFunction::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(DefFunction).tp_dict, "wrapfn_", make_descriptor(t_DefFunction::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(DefFunction).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_DefFunction_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, DefFunction::initializeClass, 1)))
                return NULL;
              return t_DefFunction::wrap_Object(DefFunction(((t_DefFunction *) arg)->object.this$));
            }
            static PyObject *t_DefFunction_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, DefFunction::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_DefFunction_init_(t_DefFunction *self, PyObject *args, PyObject *kwds)
            {
              ::java::util::List a0((jobject) NULL);
              PyTypeObject **p0;
              DefFunction object((jobject) NULL);

              if (!parseArgs(args, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
              {
                INT_CALL(object = DefFunction(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_DefFunction_getValues(t_DefFunction *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::FunctionValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::t_FunctionValues::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(DefFunction), (PyObject *) self, "getValues", args, 2);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/IntDocValuesField.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *IntDocValuesField::class$ = NULL;
        jmethodID *IntDocValuesField::mids$ = NULL;
        bool IntDocValuesField::live$ = false;

        jclass IntDocValuesField::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/IntDocValuesField");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_6e53ccc6] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;I)V");
            mids$[mid_setIntValue_39c7bd3c] = env->getMethodID(cls, "setIntValue", "(I)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        IntDocValuesField::IntDocValuesField(const ::java::lang::String & a0, jint a1) : ::org::apache::lucene::document::NumericDocValuesField(env->newObject(initializeClass, &mids$, mid_init$_6e53ccc6, a0.this$, a1)) {}

        void IntDocValuesField::setIntValue(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setIntValue_39c7bd3c], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_IntDocValuesField_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IntDocValuesField_instance_(PyTypeObject *type, PyObject *arg);
        static int t_IntDocValuesField_init_(t_IntDocValuesField *self, PyObject *args, PyObject *kwds);
        static PyObject *t_IntDocValuesField_setIntValue(t_IntDocValuesField *self, PyObject *args);
        static int t_IntDocValuesField_set__intValue(t_IntDocValuesField *self, PyObject *arg, void *data);
        static PyGetSetDef t_IntDocValuesField__fields_[] = {
          DECLARE_SET_FIELD(t_IntDocValuesField, intValue),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_IntDocValuesField__methods_[] = {
          DECLARE_METHOD(t_IntDocValuesField, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IntDocValuesField, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IntDocValuesField, setIntValue, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(IntDocValuesField, t_IntDocValuesField, ::org::apache::lucene::document::NumericDocValuesField, IntDocValuesField, t_IntDocValuesField_init_, 0, 0, t_IntDocValuesField__fields_, 0, 0);

        void t_IntDocValuesField::install(PyObject *module)
        {
          installType(&PY_TYPE(IntDocValuesField), module, "IntDocValuesField", 0);
        }

        void t_IntDocValuesField::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(IntDocValuesField).tp_dict, "class_", make_descriptor(IntDocValuesField::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(IntDocValuesField).tp_dict, "wrapfn_", make_descriptor(t_IntDocValuesField::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(IntDocValuesField).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_IntDocValuesField_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IntDocValuesField::initializeClass, 1)))
            return NULL;
          return t_IntDocValuesField::wrap_Object(IntDocValuesField(((t_IntDocValuesField *) arg)->object.this$));
        }
        static PyObject *t_IntDocValuesField_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IntDocValuesField::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_IntDocValuesField_init_(t_IntDocValuesField *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::String a0((jobject) NULL);
          jint a1;
          IntDocValuesField object((jobject) NULL);

          if (!parseArgs(args, "sI", &a0, &a1))
          {
            INT_CALL(object = IntDocValuesField(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_IntDocValuesField_setIntValue(t_IntDocValuesField *self, PyObject *args)
        {
          jint a0;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(self->object.setIntValue(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(IntDocValuesField), (PyObject *) self, "setIntValue", args, 2);
        }

        static int t_IntDocValuesField_set__intValue(t_IntDocValuesField *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setIntValue(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "intValue", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/AfterEffectB.h"
#include "org/apache/lucene/search/Explanation.h"
#include "org/apache/lucene/search/similarities/BasicStats.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *AfterEffectB::class$ = NULL;
          jmethodID *AfterEffectB::mids$ = NULL;
          bool AfterEffectB::live$ = false;

          jclass AfterEffectB::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/AfterEffectB");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_explain_05d4946a] = env->getMethodID(cls, "explain", "(Lorg/apache/lucene/search/similarities/BasicStats;F)Lorg/apache/lucene/search/Explanation;");
              mids$[mid_score_076760a9] = env->getMethodID(cls, "score", "(Lorg/apache/lucene/search/similarities/BasicStats;F)F");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          AfterEffectB::AfterEffectB() : ::org::apache::lucene::search::similarities::AfterEffect(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::search::Explanation AfterEffectB::explain(const ::org::apache::lucene::search::similarities::BasicStats & a0, jfloat a1) const
          {
            return ::org::apache::lucene::search::Explanation(env->callObjectMethod(this$, mids$[mid_explain_05d4946a], a0.this$, a1));
          }

          jfloat AfterEffectB::score(const ::org::apache::lucene::search::similarities::BasicStats & a0, jfloat a1) const
          {
            return env->callFloatMethod(this$, mids$[mid_score_076760a9], a0.this$, a1);
          }

          ::java::lang::String AfterEffectB::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_AfterEffectB_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AfterEffectB_instance_(PyTypeObject *type, PyObject *arg);
          static int t_AfterEffectB_init_(t_AfterEffectB *self, PyObject *args, PyObject *kwds);
          static PyObject *t_AfterEffectB_explain(t_AfterEffectB *self, PyObject *args);
          static PyObject *t_AfterEffectB_score(t_AfterEffectB *self, PyObject *args);
          static PyObject *t_AfterEffectB_toString(t_AfterEffectB *self, PyObject *args);

          static PyMethodDef t_AfterEffectB__methods_[] = {
            DECLARE_METHOD(t_AfterEffectB, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AfterEffectB, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AfterEffectB, explain, METH_VARARGS),
            DECLARE_METHOD(t_AfterEffectB, score, METH_VARARGS),
            DECLARE_METHOD(t_AfterEffectB, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(AfterEffectB, t_AfterEffectB, ::org::apache::lucene::search::similarities::AfterEffect, AfterEffectB, t_AfterEffectB_init_, 0, 0, 0, 0, 0);

          void t_AfterEffectB::install(PyObject *module)
          {
            installType(&PY_TYPE(AfterEffectB), module, "AfterEffectB", 0);
          }

          void t_AfterEffectB::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(AfterEffectB).tp_dict, "class_", make_descriptor(AfterEffectB::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(AfterEffectB).tp_dict, "wrapfn_", make_descriptor(t_AfterEffectB::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(AfterEffectB).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_AfterEffectB_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, AfterEffectB::initializeClass, 1)))
              return NULL;
            return t_AfterEffectB::wrap_Object(AfterEffectB(((t_AfterEffectB *) arg)->object.this$));
          }
          static PyObject *t_AfterEffectB_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, AfterEffectB::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_AfterEffectB_init_(t_AfterEffectB *self, PyObject *args, PyObject *kwds)
          {
            AfterEffectB object((jobject) NULL);

            INT_CALL(object = AfterEffectB());
            self->object = object;

            return 0;
          }

          static PyObject *t_AfterEffectB_explain(t_AfterEffectB *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jfloat a1;
            ::org::apache::lucene::search::Explanation result((jobject) NULL);

            if (!parseArgs(args, "kF", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.explain(a0, a1));
              return ::org::apache::lucene::search::t_Explanation::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(AfterEffectB), (PyObject *) self, "explain", args, 2);
          }

          static PyObject *t_AfterEffectB_score(t_AfterEffectB *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jfloat a1;
            jfloat result;

            if (!parseArgs(args, "kF", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.score(a0, a1));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(AfterEffectB), (PyObject *) self, "score", args, 2);
          }

          static PyObject *t_AfterEffectB_toString(t_AfterEffectB *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(AfterEffectB), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/parser/SyntaxParser.h"
#include "java/lang/CharSequence.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeParseException.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace parser {

              ::java::lang::Class *SyntaxParser::class$ = NULL;
              jmethodID *SyntaxParser::mids$ = NULL;
              bool SyntaxParser::live$ = false;

              jclass SyntaxParser::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/parser/SyntaxParser");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_parse_051054be] = env->getMethodID(cls, "parse", "(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode SyntaxParser::parse(const ::java::lang::CharSequence & a0, const ::java::lang::CharSequence & a1) const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_parse_051054be], a0.this$, a1.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace parser {
              static PyObject *t_SyntaxParser_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_SyntaxParser_instance_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_SyntaxParser_parse(t_SyntaxParser *self, PyObject *args);

              static PyMethodDef t_SyntaxParser__methods_[] = {
                DECLARE_METHOD(t_SyntaxParser, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_SyntaxParser, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_SyntaxParser, parse, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(SyntaxParser, t_SyntaxParser, ::java::lang::Object, SyntaxParser, abstract_init, 0, 0, 0, 0, 0);

              void t_SyntaxParser::install(PyObject *module)
              {
                installType(&PY_TYPE(SyntaxParser), module, "SyntaxParser", 0);
              }

              void t_SyntaxParser::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(SyntaxParser).tp_dict, "class_", make_descriptor(SyntaxParser::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(SyntaxParser).tp_dict, "wrapfn_", make_descriptor(t_SyntaxParser::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(SyntaxParser).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_SyntaxParser_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, SyntaxParser::initializeClass, 1)))
                  return NULL;
                return t_SyntaxParser::wrap_Object(SyntaxParser(((t_SyntaxParser *) arg)->object.this$));
              }
              static PyObject *t_SyntaxParser_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, SyntaxParser::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static PyObject *t_SyntaxParser_parse(t_SyntaxParser *self, PyObject *args)
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                ::java::lang::CharSequence a1((jobject) NULL);
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArgs(args, "OO", &::java::lang::PY_TYPE(CharSequence), &::java::lang::PY_TYPE(CharSequence), &a0, &a1))
                {
                  OBJ_CALL(result = self->object.parse(a0, a1));
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "parse", args);
                return NULL;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/io/FilterInputStream.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace java {
  namespace io {

    ::java::lang::Class *FilterInputStream::class$ = NULL;
    jmethodID *FilterInputStream::mids$ = NULL;
    bool FilterInputStream::live$ = false;

    jclass FilterInputStream::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/io/FilterInputStream");

        mids$ = new jmethodID[max_mid];
        mids$[mid_available_54c6a179] = env->getMethodID(cls, "available", "()I");
        mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
        mids$[mid_mark_39c7bd3c] = env->getMethodID(cls, "mark", "(I)V");
        mids$[mid_markSupported_54c6a16a] = env->getMethodID(cls, "markSupported", "()Z");
        mids$[mid_read_54c6a179] = env->getMethodID(cls, "read", "()I");
        mids$[mid_read_49b4f134] = env->getMethodID(cls, "read", "([B)I");
        mids$[mid_read_86f44340] = env->getMethodID(cls, "read", "([BII)I");
        mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");
        mids$[mid_skip_0ee6df33] = env->getMethodID(cls, "skip", "(J)J");

        class$ = (::java::lang::Class *) new JObject(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    jint FilterInputStream::available() const
    {
      return env->callIntMethod(this$, mids$[mid_available_54c6a179]);
    }

    void FilterInputStream::close() const
    {
      env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
    }

    void FilterInputStream::mark(jint a0) const
    {
      env->callVoidMethod(this$, mids$[mid_mark_39c7bd3c], a0);
    }

    jboolean FilterInputStream::markSupported() const
    {
      return env->callBooleanMethod(this$, mids$[mid_markSupported_54c6a16a]);
    }

    jint FilterInputStream::read() const
    {
      return env->callIntMethod(this$, mids$[mid_read_54c6a179]);
    }

    jint FilterInputStream::read(const JArray< jbyte > & a0) const
    {
      return env->callIntMethod(this$, mids$[mid_read_49b4f134], a0.this$);
    }

    jint FilterInputStream::read(const JArray< jbyte > & a0, jint a1, jint a2) const
    {
      return env->callIntMethod(this$, mids$[mid_read_86f44340], a0.this$, a1, a2);
    }

    void FilterInputStream::reset() const
    {
      env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
    }

    jlong FilterInputStream::skip(jlong a0) const
    {
      return env->callLongMethod(this$, mids$[mid_skip_0ee6df33], a0);
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace io {
    static PyObject *t_FilterInputStream_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_FilterInputStream_instance_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_FilterInputStream_available(t_FilterInputStream *self, PyObject *args);
    static PyObject *t_FilterInputStream_close(t_FilterInputStream *self, PyObject *args);
    static PyObject *t_FilterInputStream_mark(t_FilterInputStream *self, PyObject *args);
    static PyObject *t_FilterInputStream_markSupported(t_FilterInputStream *self, PyObject *args);
    static PyObject *t_FilterInputStream_read(t_FilterInputStream *self, PyObject *args);
    static PyObject *t_FilterInputStream_reset(t_FilterInputStream *self, PyObject *args);
    static PyObject *t_FilterInputStream_skip(t_FilterInputStream *self, PyObject *args);

    static PyMethodDef t_FilterInputStream__methods_[] = {
      DECLARE_METHOD(t_FilterInputStream, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_FilterInputStream, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_FilterInputStream, available, METH_VARARGS),
      DECLARE_METHOD(t_FilterInputStream, close, METH_VARARGS),
      DECLARE_METHOD(t_FilterInputStream, mark, METH_VARARGS),
      DECLARE_METHOD(t_FilterInputStream, markSupported, METH_VARARGS),
      DECLARE_METHOD(t_FilterInputStream, read, METH_VARARGS),
      DECLARE_METHOD(t_FilterInputStream, reset, METH_VARARGS),
      DECLARE_METHOD(t_FilterInputStream, skip, METH_VARARGS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(FilterInputStream, t_FilterInputStream, ::java::io::InputStream, FilterInputStream, abstract_init, 0, 0, 0, 0, 0);

    void t_FilterInputStream::install(PyObject *module)
    {
      installType(&PY_TYPE(FilterInputStream), module, "FilterInputStream", 0);
    }

    void t_FilterInputStream::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(FilterInputStream).tp_dict, "class_", make_descriptor(FilterInputStream::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(FilterInputStream).tp_dict, "wrapfn_", make_descriptor(t_FilterInputStream::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(FilterInputStream).tp_dict, "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_FilterInputStream_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, FilterInputStream::initializeClass, 1)))
        return NULL;
      return t_FilterInputStream::wrap_Object(FilterInputStream(((t_FilterInputStream *) arg)->object.this$));
    }
    static PyObject *t_FilterInputStream_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, FilterInputStream::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static PyObject *t_FilterInputStream_available(t_FilterInputStream *self, PyObject *args)
    {
      jint result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.available());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(FilterInputStream), (PyObject *) self, "available", args, 2);
    }

    static PyObject *t_FilterInputStream_close(t_FilterInputStream *self, PyObject *args)
    {

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(self->object.close());
        Py_RETURN_NONE;
      }

      return callSuper(&PY_TYPE(FilterInputStream), (PyObject *) self, "close", args, 2);
    }

    static PyObject *t_FilterInputStream_mark(t_FilterInputStream *self, PyObject *args)
    {
      jint a0;

      if (!parseArgs(args, "I", &a0))
      {
        OBJ_CALL(self->object.mark(a0));
        Py_RETURN_NONE;
      }

      return callSuper(&PY_TYPE(FilterInputStream), (PyObject *) self, "mark", args, 2);
    }

    static PyObject *t_FilterInputStream_markSupported(t_FilterInputStream *self, PyObject *args)
    {
      jboolean result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.markSupported());
        Py_RETURN_BOOL(result);
      }

      return callSuper(&PY_TYPE(FilterInputStream), (PyObject *) self, "markSupported", args, 2);
    }

    static PyObject *t_FilterInputStream_read(t_FilterInputStream *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          jint result;
          OBJ_CALL(result = self->object.read());
          return PyInt_FromLong((long) result);
        }
        break;
       case 1:
        {
          JArray< jbyte > a0((jobject) NULL);
          jint result;

          if (!parseArgs(args, "[B", &a0))
          {
            OBJ_CALL(result = self->object.read(a0));
            return PyInt_FromLong((long) result);
          }
        }
        break;
       case 3:
        {
          JArray< jbyte > a0((jobject) NULL);
          jint a1;
          jint a2;
          jint result;

          if (!parseArgs(args, "[BII", &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.read(a0, a1, a2));
            return PyInt_FromLong((long) result);
          }
        }
      }

      return callSuper(&PY_TYPE(FilterInputStream), (PyObject *) self, "read", args, 2);
    }

    static PyObject *t_FilterInputStream_reset(t_FilterInputStream *self, PyObject *args)
    {

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(self->object.reset());
        Py_RETURN_NONE;
      }

      return callSuper(&PY_TYPE(FilterInputStream), (PyObject *) self, "reset", args, 2);
    }

    static PyObject *t_FilterInputStream_skip(t_FilterInputStream *self, PyObject *args)
    {
      jlong a0;
      jlong result;

      if (!parseArgs(args, "J", &a0))
      {
        OBJ_CALL(result = self->object.skip(a0));
        return PyLong_FromLongLong((PY_LONG_LONG) result);
      }

      return callSuper(&PY_TYPE(FilterInputStream), (PyObject *) self, "skip", args, 2);
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/pl/PolishAnalyzer.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "org/egothor/stemmer/Trie.h"
#include "java/lang/String.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pl {

          ::java::lang::Class *PolishAnalyzer::class$ = NULL;
          jmethodID *PolishAnalyzer::mids$ = NULL;
          bool PolishAnalyzer::live$ = false;
          ::java::lang::String *PolishAnalyzer::DEFAULT_STEMMER_FILE = NULL;
          ::java::lang::String *PolishAnalyzer::DEFAULT_STOPWORD_FILE = NULL;

          jclass PolishAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/pl/PolishAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_0d96cf33] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;)V");
              mids$[mid_init$_6d1f9881] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_83eafe28] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_3ea629c6] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/util/CharArraySet;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_c9d7e4a3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_getDefaultStopSet_d2d3505c] = env->getStaticMethodID(cls, "getDefaultStopSet", "()Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_getDefaultTable_0b271714] = env->getStaticMethodID(cls, "getDefaultTable", "()Lorg/egothor/stemmer/Trie;");
              mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_STEMMER_FILE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_STEMMER_FILE", "Ljava/lang/String;"));
              DEFAULT_STOPWORD_FILE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_STOPWORD_FILE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PolishAnalyzer::PolishAnalyzer() : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          PolishAnalyzer::PolishAnalyzer(const ::org::apache::lucene::util::Version & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_0d96cf33, a0.this$)) {}

          PolishAnalyzer::PolishAnalyzer(const ::org::apache::lucene::analysis::util::CharArraySet & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_6d1f9881, a0.this$)) {}

          PolishAnalyzer::PolishAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_83eafe28, a0.this$, a1.this$)) {}

          PolishAnalyzer::PolishAnalyzer(const ::org::apache::lucene::analysis::util::CharArraySet & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_3ea629c6, a0.this$, a1.this$)) {}

          PolishAnalyzer::PolishAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1, const ::org::apache::lucene::analysis::util::CharArraySet & a2) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_c9d7e4a3, a0.this$, a1.this$, a2.this$)) {}

          ::org::apache::lucene::analysis::util::CharArraySet PolishAnalyzer::getDefaultStopSet()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getDefaultStopSet_d2d3505c]));
          }

          ::org::egothor::stemmer::Trie PolishAnalyzer::getDefaultTable()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::egothor::stemmer::Trie(env->callStaticObjectMethod(cls, mids$[mid_getDefaultTable_0b271714]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pl {
          static PyObject *t_PolishAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PolishAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PolishAnalyzer_init_(t_PolishAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PolishAnalyzer_getDefaultStopSet(PyTypeObject *type);
          static PyObject *t_PolishAnalyzer_getDefaultTable(PyTypeObject *type);
          static PyObject *t_PolishAnalyzer_get__defaultStopSet(t_PolishAnalyzer *self, void *data);
          static PyObject *t_PolishAnalyzer_get__defaultTable(t_PolishAnalyzer *self, void *data);
          static PyGetSetDef t_PolishAnalyzer__fields_[] = {
            DECLARE_GET_FIELD(t_PolishAnalyzer, defaultStopSet),
            DECLARE_GET_FIELD(t_PolishAnalyzer, defaultTable),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_PolishAnalyzer__methods_[] = {
            DECLARE_METHOD(t_PolishAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PolishAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PolishAnalyzer, getDefaultStopSet, METH_NOARGS | METH_CLASS),
            DECLARE_METHOD(t_PolishAnalyzer, getDefaultTable, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PolishAnalyzer, t_PolishAnalyzer, ::org::apache::lucene::analysis::util::StopwordAnalyzerBase, PolishAnalyzer, t_PolishAnalyzer_init_, 0, 0, t_PolishAnalyzer__fields_, 0, 0);

          void t_PolishAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(PolishAnalyzer), module, "PolishAnalyzer", 0);
          }

          void t_PolishAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PolishAnalyzer).tp_dict, "class_", make_descriptor(PolishAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PolishAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_PolishAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PolishAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(PolishAnalyzer::initializeClass);
            PyDict_SetItemString(PY_TYPE(PolishAnalyzer).tp_dict, "DEFAULT_STEMMER_FILE", make_descriptor(j2p(*PolishAnalyzer::DEFAULT_STEMMER_FILE)));
            PyDict_SetItemString(PY_TYPE(PolishAnalyzer).tp_dict, "DEFAULT_STOPWORD_FILE", make_descriptor(j2p(*PolishAnalyzer::DEFAULT_STOPWORD_FILE)));
          }

          static PyObject *t_PolishAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PolishAnalyzer::initializeClass, 1)))
              return NULL;
            return t_PolishAnalyzer::wrap_Object(PolishAnalyzer(((t_PolishAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_PolishAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PolishAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PolishAnalyzer_init_(t_PolishAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                PolishAnalyzer object((jobject) NULL);

                INT_CALL(object = PolishAnalyzer());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PolishAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::util::Version::initializeClass, &a0))
                {
                  INT_CALL(object = PolishAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::analysis::util::CharArraySet a0((jobject) NULL);
                PyTypeObject **p0;
                PolishAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = PolishAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                PolishAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "kK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = PolishAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::analysis::util::CharArraySet a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                PolishAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = PolishAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                ::org::apache::lucene::analysis::util::CharArraySet a2((jobject) NULL);
                PyTypeObject **p2;
                PolishAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "kKK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_, &a2, &p2, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = PolishAnalyzer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PolishAnalyzer_getDefaultStopSet(PyTypeObject *type)
          {
            ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::pl::PolishAnalyzer::getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_PolishAnalyzer_getDefaultTable(PyTypeObject *type)
          {
            ::org::egothor::stemmer::Trie result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::pl::PolishAnalyzer::getDefaultTable());
            return ::org::egothor::stemmer::t_Trie::wrap_Object(result);
          }

          static PyObject *t_PolishAnalyzer_get__defaultStopSet(t_PolishAnalyzer *self, void *data)
          {
            ::org::apache::lucene::analysis::util::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(value);
          }

          static PyObject *t_PolishAnalyzer_get__defaultTable(t_PolishAnalyzer *self, void *data)
          {
            ::org::egothor::stemmer::Trie value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultTable());
            return ::org::egothor::stemmer::t_Trie::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FieldCache.h"
#include "org/apache/lucene/search/FieldCache$Floats.h"
#include "org/apache/lucene/search/FieldCache$FloatParser.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/Bits.h"
#include "org/apache/lucene/search/FieldCache$Bytes.h"
#include "org/apache/lucene/search/FieldCache$ByteParser.h"
#include "org/apache/lucene/search/FieldCache$DoubleParser.h"
#include "org/apache/lucene/search/FieldCache$CacheEntry.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/FieldCache$Longs.h"
#include "org/apache/lucene/search/FieldCache$ShortParser.h"
#include "org/apache/lucene/search/FieldCache$Shorts.h"
#include "org/apache/lucene/index/BinaryDocValues.h"
#include "org/apache/lucene/search/FieldCache$IntParser.h"
#include "org/apache/lucene/search/FieldCache$Ints.h"
#include "org/apache/lucene/search/FieldCache$LongParser.h"
#include "org/apache/lucene/index/AtomicReader.h"
#include "java/io/PrintStream.h"
#include "org/apache/lucene/index/SortedDocValues.h"
#include "org/apache/lucene/search/FieldCache$Doubles.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/SortedSetDocValues.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FieldCache::class$ = NULL;
        jmethodID *FieldCache::mids$ = NULL;
        bool FieldCache::live$ = false;
        FieldCache *FieldCache::DEFAULT = NULL;
        ::org::apache::lucene::search::FieldCache$ByteParser *FieldCache::DEFAULT_BYTE_PARSER = NULL;
        ::org::apache::lucene::search::FieldCache$DoubleParser *FieldCache::DEFAULT_DOUBLE_PARSER = NULL;
        ::org::apache::lucene::search::FieldCache$FloatParser *FieldCache::DEFAULT_FLOAT_PARSER = NULL;
        ::org::apache::lucene::search::FieldCache$IntParser *FieldCache::DEFAULT_INT_PARSER = NULL;
        ::org::apache::lucene::search::FieldCache$LongParser *FieldCache::DEFAULT_LONG_PARSER = NULL;
        ::org::apache::lucene::search::FieldCache$ShortParser *FieldCache::DEFAULT_SHORT_PARSER = NULL;
        ::org::apache::lucene::search::FieldCache$DoubleParser *FieldCache::NUMERIC_UTILS_DOUBLE_PARSER = NULL;
        ::org::apache::lucene::search::FieldCache$FloatParser *FieldCache::NUMERIC_UTILS_FLOAT_PARSER = NULL;
        ::org::apache::lucene::search::FieldCache$IntParser *FieldCache::NUMERIC_UTILS_INT_PARSER = NULL;
        ::org::apache::lucene::search::FieldCache$LongParser *FieldCache::NUMERIC_UTILS_LONG_PARSER = NULL;

        jclass FieldCache::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FieldCache");

            mids$ = new jmethodID[max_mid];
            mids$[mid_getBytes_5b2430b0] = env->getMethodID(cls, "getBytes", "(Lorg/apache/lucene/index/AtomicReader;Ljava/lang/String;Z)Lorg/apache/lucene/search/FieldCache$Bytes;");
            mids$[mid_getBytes_63e2679a] = env->getMethodID(cls, "getBytes", "(Lorg/apache/lucene/index/AtomicReader;Ljava/lang/String;Lorg/apache/lucene/search/FieldCache$ByteParser;Z)Lorg/apache/lucene/search/FieldCache$Bytes;");
            mids$[mid_getCacheEntries_2bd7104e] = env->getMethodID(cls, "getCacheEntries", "()[Lorg/apache/lucene/search/FieldCache$CacheEntry;");
            mids$[mid_getDocTermOrds_1498712e] = env->getMethodID(cls, "getDocTermOrds", "(Lorg/apache/lucene/index/AtomicReader;Ljava/lang/String;)Lorg/apache/lucene/index/SortedSetDocValues;");
            mids$[mid_getDocsWithField_b8ffc438] = env->getMethodID(cls, "getDocsWithField", "(Lorg/apache/lucene/index/AtomicReader;Ljava/lang/String;)Lorg/apache/lucene/util/Bits;");
            mids$[mid_getDoubles_1da3b06b] = env->getMethodID(cls, "getDoubles", "(Lorg/apache/lucene/index/AtomicReader;Ljava/lang/String;Z)Lorg/apache/lucene/search/FieldCache$Doubles;");
            mids$[mid_getDoubles_081c1232] = env->getMethodID(cls, "getDoubles", "(Lorg/apache/lucene/index/AtomicReader;Ljava/lang/String;Lorg/apache/lucene/search/FieldCache$DoubleParser;Z)Lorg/apache/lucene/search/FieldCache$Doubles;");
            mids$[mid_getFloats_d56c7f61] = env->getMethodID(cls, "getFloats", "(Lorg/apache/lucene/index/AtomicReader;Ljava/lang/String;Z)Lorg/apache/lucene/search/FieldCache$Floats;");
            mids$[mid_getFloats_16f5ff86] = env->getMethodID(cls, "getFloats", "(Lorg/apache/lucene/index/AtomicReader;Ljava/lang/String;Lorg/apache/lucene/search/FieldCache$FloatParser;Z)Lorg/apache/lucene/search/FieldCache$Floats;");
            mids$[mid_getInfoStream_00215d9e] = env->getMethodID(cls, "getInfoStream", "()Ljava/io/PrintStream;");
            mids$[mid_getInts_09885a02] = env->getMethodID(cls, "getInts", "(Lorg/apache/lucene/index/AtomicReader;Ljava/lang/String;Z)Lorg/apache/lucene/search/FieldCache$Ints;");
            mids$[mid_getInts_428a6914] = env->getMethodID(cls, "getInts", "(Lorg/apache/lucene/index/AtomicReader;Ljava/lang/String;Lorg/apache/lucene/search/FieldCache$IntParser;Z)Lorg/apache/lucene/search/FieldCache$Ints;");
            mids$[mid_getLongs_4d412004] = env->getMethodID(cls, "getLongs", "(Lorg/apache/lucene/index/AtomicReader;Ljava/lang/String;Z)Lorg/apache/lucene/search/FieldCache$Longs;");
            mids$[mid_getLongs_ef1b546a] = env->getMethodID(cls, "getLongs", "(Lorg/apache/lucene/index/AtomicReader;Ljava/lang/String;Lorg/apache/lucene/search/FieldCache$LongParser;Z)Lorg/apache/lucene/search/FieldCache$Longs;");
            mids$[mid_getShorts_2d8fda45] = env->getMethodID(cls, "getShorts", "(Lorg/apache/lucene/index/AtomicReader;Ljava/lang/String;Z)Lorg/apache/lucene/search/FieldCache$Shorts;");
            mids$[mid_getShorts_cf5b3ec2] = env->getMethodID(cls, "getShorts", "(Lorg/apache/lucene/index/AtomicReader;Ljava/lang/String;Lorg/apache/lucene/search/FieldCache$ShortParser;Z)Lorg/apache/lucene/search/FieldCache$Shorts;");
            mids$[mid_getTerms_d17729c6] = env->getMethodID(cls, "getTerms", "(Lorg/apache/lucene/index/AtomicReader;Ljava/lang/String;Z)Lorg/apache/lucene/index/BinaryDocValues;");
            mids$[mid_getTerms_4f27b8ab] = env->getMethodID(cls, "getTerms", "(Lorg/apache/lucene/index/AtomicReader;Ljava/lang/String;ZF)Lorg/apache/lucene/index/BinaryDocValues;");
            mids$[mid_getTermsIndex_e27a1341] = env->getMethodID(cls, "getTermsIndex", "(Lorg/apache/lucene/index/AtomicReader;Ljava/lang/String;)Lorg/apache/lucene/index/SortedDocValues;");
            mids$[mid_getTermsIndex_774ad832] = env->getMethodID(cls, "getTermsIndex", "(Lorg/apache/lucene/index/AtomicReader;Ljava/lang/String;F)Lorg/apache/lucene/index/SortedDocValues;");
            mids$[mid_purgeAllCaches_54c6a166] = env->getMethodID(cls, "purgeAllCaches", "()V");
            mids$[mid_purgeByCacheKey_290588ee] = env->getMethodID(cls, "purgeByCacheKey", "(Ljava/lang/Object;)V");
            mids$[mid_setInfoStream_1b7c898b] = env->getMethodID(cls, "setInfoStream", "(Ljava/io/PrintStream;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            DEFAULT = new FieldCache(env->getStaticObjectField(cls, "DEFAULT", "Lorg/apache/lucene/search/FieldCache;"));
            DEFAULT_BYTE_PARSER = new ::org::apache::lucene::search::FieldCache$ByteParser(env->getStaticObjectField(cls, "DEFAULT_BYTE_PARSER", "Lorg/apache/lucene/search/FieldCache$ByteParser;"));
            DEFAULT_DOUBLE_PARSER = new ::org::apache::lucene::search::FieldCache$DoubleParser(env->getStaticObjectField(cls, "DEFAULT_DOUBLE_PARSER", "Lorg/apache/lucene/search/FieldCache$DoubleParser;"));
            DEFAULT_FLOAT_PARSER = new ::org::apache::lucene::search::FieldCache$FloatParser(env->getStaticObjectField(cls, "DEFAULT_FLOAT_PARSER", "Lorg/apache/lucene/search/FieldCache$FloatParser;"));
            DEFAULT_INT_PARSER = new ::org::apache::lucene::search::FieldCache$IntParser(env->getStaticObjectField(cls, "DEFAULT_INT_PARSER", "Lorg/apache/lucene/search/FieldCache$IntParser;"));
            DEFAULT_LONG_PARSER = new ::org::apache::lucene::search::FieldCache$LongParser(env->getStaticObjectField(cls, "DEFAULT_LONG_PARSER", "Lorg/apache/lucene/search/FieldCache$LongParser;"));
            DEFAULT_SHORT_PARSER = new ::org::apache::lucene::search::FieldCache$ShortParser(env->getStaticObjectField(cls, "DEFAULT_SHORT_PARSER", "Lorg/apache/lucene/search/FieldCache$ShortParser;"));
            NUMERIC_UTILS_DOUBLE_PARSER = new ::org::apache::lucene::search::FieldCache$DoubleParser(env->getStaticObjectField(cls, "NUMERIC_UTILS_DOUBLE_PARSER", "Lorg/apache/lucene/search/FieldCache$DoubleParser;"));
            NUMERIC_UTILS_FLOAT_PARSER = new ::org::apache::lucene::search::FieldCache$FloatParser(env->getStaticObjectField(cls, "NUMERIC_UTILS_FLOAT_PARSER", "Lorg/apache/lucene/search/FieldCache$FloatParser;"));
            NUMERIC_UTILS_INT_PARSER = new ::org::apache::lucene::search::FieldCache$IntParser(env->getStaticObjectField(cls, "NUMERIC_UTILS_INT_PARSER", "Lorg/apache/lucene/search/FieldCache$IntParser;"));
            NUMERIC_UTILS_LONG_PARSER = new ::org::apache::lucene::search::FieldCache$LongParser(env->getStaticObjectField(cls, "NUMERIC_UTILS_LONG_PARSER", "Lorg/apache/lucene/search/FieldCache$LongParser;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::search::FieldCache$Bytes FieldCache::getBytes(const ::org::apache::lucene::index::AtomicReader & a0, const ::java::lang::String & a1, jboolean a2) const
        {
          return ::org::apache::lucene::search::FieldCache$Bytes(env->callObjectMethod(this$, mids$[mid_getBytes_5b2430b0], a0.this$, a1.this$, a2));
        }

        ::org::apache::lucene::search::FieldCache$Bytes FieldCache::getBytes(const ::org::apache::lucene::index::AtomicReader & a0, const ::java::lang::String & a1, const ::org::apache::lucene::search::FieldCache$ByteParser & a2, jboolean a3) const
        {
          return ::org::apache::lucene::search::FieldCache$Bytes(env->callObjectMethod(this$, mids$[mid_getBytes_63e2679a], a0.this$, a1.this$, a2.this$, a3));
        }

        JArray< ::org::apache::lucene::search::FieldCache$CacheEntry > FieldCache::getCacheEntries() const
        {
          return JArray< ::org::apache::lucene::search::FieldCache$CacheEntry >(env->callObjectMethod(this$, mids$[mid_getCacheEntries_2bd7104e]));
        }

        ::org::apache::lucene::index::SortedSetDocValues FieldCache::getDocTermOrds(const ::org::apache::lucene::index::AtomicReader & a0, const ::java::lang::String & a1) const
        {
          return ::org::apache::lucene::index::SortedSetDocValues(env->callObjectMethod(this$, mids$[mid_getDocTermOrds_1498712e], a0.this$, a1.this$));
        }

        ::org::apache::lucene::util::Bits FieldCache::getDocsWithField(const ::org::apache::lucene::index::AtomicReader & a0, const ::java::lang::String & a1) const
        {
          return ::org::apache::lucene::util::Bits(env->callObjectMethod(this$, mids$[mid_getDocsWithField_b8ffc438], a0.this$, a1.this$));
        }

        ::org::apache::lucene::search::FieldCache$Doubles FieldCache::getDoubles(const ::org::apache::lucene::index::AtomicReader & a0, const ::java::lang::String & a1, jboolean a2) const
        {
          return ::org::apache::lucene::search::FieldCache$Doubles(env->callObjectMethod(this$, mids$[mid_getDoubles_1da3b06b], a0.this$, a1.this$, a2));
        }

        ::org::apache::lucene::search::FieldCache$Doubles FieldCache::getDoubles(const ::org::apache::lucene::index::AtomicReader & a0, const ::java::lang::String & a1, const ::org::apache::lucene::search::FieldCache$DoubleParser & a2, jboolean a3) const
        {
          return ::org::apache::lucene::search::FieldCache$Doubles(env->callObjectMethod(this$, mids$[mid_getDoubles_081c1232], a0.this$, a1.this$, a2.this$, a3));
        }

        ::org::apache::lucene::search::FieldCache$Floats FieldCache::getFloats(const ::org::apache::lucene::index::AtomicReader & a0, const ::java::lang::String & a1, jboolean a2) const
        {
          return ::org::apache::lucene::search::FieldCache$Floats(env->callObjectMethod(this$, mids$[mid_getFloats_d56c7f61], a0.this$, a1.this$, a2));
        }

        ::org::apache::lucene::search::FieldCache$Floats FieldCache::getFloats(const ::org::apache::lucene::index::AtomicReader & a0, const ::java::lang::String & a1, const ::org::apache::lucene::search::FieldCache$FloatParser & a2, jboolean a3) const
        {
          return ::org::apache::lucene::search::FieldCache$Floats(env->callObjectMethod(this$, mids$[mid_getFloats_16f5ff86], a0.this$, a1.this$, a2.this$, a3));
        }

        ::java::io::PrintStream FieldCache::getInfoStream() const
        {
          return ::java::io::PrintStream(env->callObjectMethod(this$, mids$[mid_getInfoStream_00215d9e]));
        }

        ::org::apache::lucene::search::FieldCache$Ints FieldCache::getInts(const ::org::apache::lucene::index::AtomicReader & a0, const ::java::lang::String & a1, jboolean a2) const
        {
          return ::org::apache::lucene::search::FieldCache$Ints(env->callObjectMethod(this$, mids$[mid_getInts_09885a02], a0.this$, a1.this$, a2));
        }

        ::org::apache::lucene::search::FieldCache$Ints FieldCache::getInts(const ::org::apache::lucene::index::AtomicReader & a0, const ::java::lang::String & a1, const ::org::apache::lucene::search::FieldCache$IntParser & a2, jboolean a3) const
        {
          return ::org::apache::lucene::search::FieldCache$Ints(env->callObjectMethod(this$, mids$[mid_getInts_428a6914], a0.this$, a1.this$, a2.this$, a3));
        }

        ::org::apache::lucene::search::FieldCache$Longs FieldCache::getLongs(const ::org::apache::lucene::index::AtomicReader & a0, const ::java::lang::String & a1, jboolean a2) const
        {
          return ::org::apache::lucene::search::FieldCache$Longs(env->callObjectMethod(this$, mids$[mid_getLongs_4d412004], a0.this$, a1.this$, a2));
        }

        ::org::apache::lucene::search::FieldCache$Longs FieldCache::getLongs(const ::org::apache::lucene::index::AtomicReader & a0, const ::java::lang::String & a1, const ::org::apache::lucene::search::FieldCache$LongParser & a2, jboolean a3) const
        {
          return ::org::apache::lucene::search::FieldCache$Longs(env->callObjectMethod(this$, mids$[mid_getLongs_ef1b546a], a0.this$, a1.this$, a2.this$, a3));
        }

        ::org::apache::lucene::search::FieldCache$Shorts FieldCache::getShorts(const ::org::apache::lucene::index::AtomicReader & a0, const ::java::lang::String & a1, jboolean a2) const
        {
          return ::org::apache::lucene::search::FieldCache$Shorts(env->callObjectMethod(this$, mids$[mid_getShorts_2d8fda45], a0.this$, a1.this$, a2));
        }

        ::org::apache::lucene::search::FieldCache$Shorts FieldCache::getShorts(const ::org::apache::lucene::index::AtomicReader & a0, const ::java::lang::String & a1, const ::org::apache::lucene::search::FieldCache$ShortParser & a2, jboolean a3) const
        {
          return ::org::apache::lucene::search::FieldCache$Shorts(env->callObjectMethod(this$, mids$[mid_getShorts_cf5b3ec2], a0.this$, a1.this$, a2.this$, a3));
        }

        ::org::apache::lucene::index::BinaryDocValues FieldCache::getTerms(const ::org::apache::lucene::index::AtomicReader & a0, const ::java::lang::String & a1, jboolean a2) const
        {
          return ::org::apache::lucene::index::BinaryDocValues(env->callObjectMethod(this$, mids$[mid_getTerms_d17729c6], a0.this$, a1.this$, a2));
        }

        ::org::apache::lucene::index::BinaryDocValues FieldCache::getTerms(const ::org::apache::lucene::index::AtomicReader & a0, const ::java::lang::String & a1, jboolean a2, jfloat a3) const
        {
          return ::org::apache::lucene::index::BinaryDocValues(env->callObjectMethod(this$, mids$[mid_getTerms_4f27b8ab], a0.this$, a1.this$, a2, a3));
        }

        ::org::apache::lucene::index::SortedDocValues FieldCache::getTermsIndex(const ::org::apache::lucene::index::AtomicReader & a0, const ::java::lang::String & a1) const
        {
          return ::org::apache::lucene::index::SortedDocValues(env->callObjectMethod(this$, mids$[mid_getTermsIndex_e27a1341], a0.this$, a1.this$));
        }

        ::org::apache::lucene::index::SortedDocValues FieldCache::getTermsIndex(const ::org::apache::lucene::index::AtomicReader & a0, const ::java::lang::String & a1, jfloat a2) const
        {
          return ::org::apache::lucene::index::SortedDocValues(env->callObjectMethod(this$, mids$[mid_getTermsIndex_774ad832], a0.this$, a1.this$, a2));
        }

        void FieldCache::purgeAllCaches() const
        {
          env->callVoidMethod(this$, mids$[mid_purgeAllCaches_54c6a166]);
        }

        void FieldCache::purgeByCacheKey(const ::java::lang::Object & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_purgeByCacheKey_290588ee], a0.this$);
        }

        void FieldCache::setInfoStream(const ::java::io::PrintStream & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setInfoStream_1b7c898b], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/search/FieldCache$Parser.h"
#include "org/apache/lucene/search/FieldCache$CreationPlaceholder.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FieldCache_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldCache_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldCache_getBytes(t_FieldCache *self, PyObject *args);
        static PyObject *t_FieldCache_getCacheEntries(t_FieldCache *self);
        static PyObject *t_FieldCache_getDocTermOrds(t_FieldCache *self, PyObject *args);
        static PyObject *t_FieldCache_getDocsWithField(t_FieldCache *self, PyObject *args);
        static PyObject *t_FieldCache_getDoubles(t_FieldCache *self, PyObject *args);
        static PyObject *t_FieldCache_getFloats(t_FieldCache *self, PyObject *args);
        static PyObject *t_FieldCache_getInfoStream(t_FieldCache *self);
        static PyObject *t_FieldCache_getInts(t_FieldCache *self, PyObject *args);
        static PyObject *t_FieldCache_getLongs(t_FieldCache *self, PyObject *args);
        static PyObject *t_FieldCache_getShorts(t_FieldCache *self, PyObject *args);
        static PyObject *t_FieldCache_getTerms(t_FieldCache *self, PyObject *args);
        static PyObject *t_FieldCache_getTermsIndex(t_FieldCache *self, PyObject *args);
        static PyObject *t_FieldCache_purgeAllCaches(t_FieldCache *self);
        static PyObject *t_FieldCache_purgeByCacheKey(t_FieldCache *self, PyObject *arg);
        static PyObject *t_FieldCache_setInfoStream(t_FieldCache *self, PyObject *arg);
        static PyObject *t_FieldCache_get__cacheEntries(t_FieldCache *self, void *data);
        static PyObject *t_FieldCache_get__infoStream(t_FieldCache *self, void *data);
        static int t_FieldCache_set__infoStream(t_FieldCache *self, PyObject *arg, void *data);
        static PyGetSetDef t_FieldCache__fields_[] = {
          DECLARE_GET_FIELD(t_FieldCache, cacheEntries),
          DECLARE_GETSET_FIELD(t_FieldCache, infoStream),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FieldCache__methods_[] = {
          DECLARE_METHOD(t_FieldCache, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCache, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCache, getBytes, METH_VARARGS),
          DECLARE_METHOD(t_FieldCache, getCacheEntries, METH_NOARGS),
          DECLARE_METHOD(t_FieldCache, getDocTermOrds, METH_VARARGS),
          DECLARE_METHOD(t_FieldCache, getDocsWithField, METH_VARARGS),
          DECLARE_METHOD(t_FieldCache, getDoubles, METH_VARARGS),
          DECLARE_METHOD(t_FieldCache, getFloats, METH_VARARGS),
          DECLARE_METHOD(t_FieldCache, getInfoStream, METH_NOARGS),
          DECLARE_METHOD(t_FieldCache, getInts, METH_VARARGS),
          DECLARE_METHOD(t_FieldCache, getLongs, METH_VARARGS),
          DECLARE_METHOD(t_FieldCache, getShorts, METH_VARARGS),
          DECLARE_METHOD(t_FieldCache, getTerms, METH_VARARGS),
          DECLARE_METHOD(t_FieldCache, getTermsIndex, METH_VARARGS),
          DECLARE_METHOD(t_FieldCache, purgeAllCaches, METH_NOARGS),
          DECLARE_METHOD(t_FieldCache, purgeByCacheKey, METH_O),
          DECLARE_METHOD(t_FieldCache, setInfoStream, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldCache, t_FieldCache, ::java::lang::Object, FieldCache, abstract_init, 0, 0, t_FieldCache__fields_, 0, 0);

        void t_FieldCache::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldCache), module, "FieldCache", 0);
          PyDict_SetItemString(PY_TYPE(FieldCache).tp_dict, "CacheEntry", make_descriptor(&PY_TYPE(FieldCache$CacheEntry)));
          PyDict_SetItemString(PY_TYPE(FieldCache).tp_dict, "DoubleParser", make_descriptor(&PY_TYPE(FieldCache$DoubleParser)));
          PyDict_SetItemString(PY_TYPE(FieldCache).tp_dict, "LongParser", make_descriptor(&PY_TYPE(FieldCache$LongParser)));
          PyDict_SetItemString(PY_TYPE(FieldCache).tp_dict, "FloatParser", make_descriptor(&PY_TYPE(FieldCache$FloatParser)));
          PyDict_SetItemString(PY_TYPE(FieldCache).tp_dict, "IntParser", make_descriptor(&PY_TYPE(FieldCache$IntParser)));
          PyDict_SetItemString(PY_TYPE(FieldCache).tp_dict, "ShortParser", make_descriptor(&PY_TYPE(FieldCache$ShortParser)));
          PyDict_SetItemString(PY_TYPE(FieldCache).tp_dict, "ByteParser", make_descriptor(&PY_TYPE(FieldCache$ByteParser)));
          PyDict_SetItemString(PY_TYPE(FieldCache).tp_dict, "Parser", make_descriptor(&PY_TYPE(FieldCache$Parser)));
          PyDict_SetItemString(PY_TYPE(FieldCache).tp_dict, "CreationPlaceholder", make_descriptor(&PY_TYPE(FieldCache$CreationPlaceholder)));
          PyDict_SetItemString(PY_TYPE(FieldCache).tp_dict, "Doubles", make_descriptor(&PY_TYPE(FieldCache$Doubles)));
          PyDict_SetItemString(PY_TYPE(FieldCache).tp_dict, "Floats", make_descriptor(&PY_TYPE(FieldCache$Floats)));
          PyDict_SetItemString(PY_TYPE(FieldCache).tp_dict, "Longs", make_descriptor(&PY_TYPE(FieldCache$Longs)));
          PyDict_SetItemString(PY_TYPE(FieldCache).tp_dict, "Ints", make_descriptor(&PY_TYPE(FieldCache$Ints)));
          PyDict_SetItemString(PY_TYPE(FieldCache).tp_dict, "Shorts", make_descriptor(&PY_TYPE(FieldCache$Shorts)));
          PyDict_SetItemString(PY_TYPE(FieldCache).tp_dict, "Bytes", make_descriptor(&PY_TYPE(FieldCache$Bytes)));
        }

        void t_FieldCache::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldCache).tp_dict, "class_", make_descriptor(FieldCache::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldCache).tp_dict, "wrapfn_", make_descriptor(t_FieldCache::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldCache).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(FieldCache::initializeClass);
          PyDict_SetItemString(PY_TYPE(FieldCache).tp_dict, "DEFAULT", make_descriptor(t_FieldCache::wrap_Object(*FieldCache::DEFAULT)));
          PyDict_SetItemString(PY_TYPE(FieldCache).tp_dict, "DEFAULT_BYTE_PARSER", make_descriptor(::org::apache::lucene::search::t_FieldCache$ByteParser::wrap_Object(*FieldCache::DEFAULT_BYTE_PARSER)));
          PyDict_SetItemString(PY_TYPE(FieldCache).tp_dict, "DEFAULT_DOUBLE_PARSER", make_descriptor(::org::apache::lucene::search::t_FieldCache$DoubleParser::wrap_Object(*FieldCache::DEFAULT_DOUBLE_PARSER)));
          PyDict_SetItemString(PY_TYPE(FieldCache).tp_dict, "DEFAULT_FLOAT_PARSER", make_descriptor(::org::apache::lucene::search::t_FieldCache$FloatParser::wrap_Object(*FieldCache::DEFAULT_FLOAT_PARSER)));
          PyDict_SetItemString(PY_TYPE(FieldCache).tp_dict, "DEFAULT_INT_PARSER", make_descriptor(::org::apache::lucene::search::t_FieldCache$IntParser::wrap_Object(*FieldCache::DEFAULT_INT_PARSER)));
          PyDict_SetItemString(PY_TYPE(FieldCache).tp_dict, "DEFAULT_LONG_PARSER", make_descriptor(::org::apache::lucene::search::t_FieldCache$LongParser::wrap_Object(*FieldCache::DEFAULT_LONG_PARSER)));
          PyDict_SetItemString(PY_TYPE(FieldCache).tp_dict, "DEFAULT_SHORT_PARSER", make_descriptor(::org::apache::lucene::search::t_FieldCache$ShortParser::wrap_Object(*FieldCache::DEFAULT_SHORT_PARSER)));
          PyDict_SetItemString(PY_TYPE(FieldCache).tp_dict, "NUMERIC_UTILS_DOUBLE_PARSER", make_descriptor(::org::apache::lucene::search::t_FieldCache$DoubleParser::wrap_Object(*FieldCache::NUMERIC_UTILS_DOUBLE_PARSER)));
          PyDict_SetItemString(PY_TYPE(FieldCache).tp_dict, "NUMERIC_UTILS_FLOAT_PARSER", make_descriptor(::org::apache::lucene::search::t_FieldCache$FloatParser::wrap_Object(*FieldCache::NUMERIC_UTILS_FLOAT_PARSER)));
          PyDict_SetItemString(PY_TYPE(FieldCache).tp_dict, "NUMERIC_UTILS_INT_PARSER", make_descriptor(::org::apache::lucene::search::t_FieldCache$IntParser::wrap_Object(*FieldCache::NUMERIC_UTILS_INT_PARSER)));
          PyDict_SetItemString(PY_TYPE(FieldCache).tp_dict, "NUMERIC_UTILS_LONG_PARSER", make_descriptor(::org::apache::lucene::search::t_FieldCache$LongParser::wrap_Object(*FieldCache::NUMERIC_UTILS_LONG_PARSER)));
        }

        static PyObject *t_FieldCache_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldCache::initializeClass, 1)))
            return NULL;
          return t_FieldCache::wrap_Object(FieldCache(((t_FieldCache *) arg)->object.this$));
        }
        static PyObject *t_FieldCache_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldCache::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FieldCache_getBytes(t_FieldCache *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 3:
            {
              ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              jboolean a2;
              ::org::apache::lucene::search::FieldCache$Bytes result((jobject) NULL);

              if (!parseArgs(args, "ksZ", ::org::apache::lucene::index::AtomicReader::initializeClass, &a0, &a1, &a2))
              {
                OBJ_CALL(result = self->object.getBytes(a0, a1, a2));
                return ::org::apache::lucene::search::t_FieldCache$Bytes::wrap_Object(result);
              }
            }
            break;
           case 4:
            {
              ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              ::org::apache::lucene::search::FieldCache$ByteParser a2((jobject) NULL);
              jboolean a3;
              ::org::apache::lucene::search::FieldCache$Bytes result((jobject) NULL);

              if (!parseArgs(args, "kskZ", ::org::apache::lucene::index::AtomicReader::initializeClass, ::org::apache::lucene::search::FieldCache$ByteParser::initializeClass, &a0, &a1, &a2, &a3))
              {
                OBJ_CALL(result = self->object.getBytes(a0, a1, a2, a3));
                return ::org::apache::lucene::search::t_FieldCache$Bytes::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "getBytes", args);
          return NULL;
        }

        static PyObject *t_FieldCache_getCacheEntries(t_FieldCache *self)
        {
          JArray< ::org::apache::lucene::search::FieldCache$CacheEntry > result((jobject) NULL);
          OBJ_CALL(result = self->object.getCacheEntries());
          return JArray<jobject>(result.this$).wrap(::org::apache::lucene::search::t_FieldCache$CacheEntry::wrap_jobject);
        }

        static PyObject *t_FieldCache_getDocTermOrds(t_FieldCache *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::org::apache::lucene::index::SortedSetDocValues result((jobject) NULL);

          if (!parseArgs(args, "ks", ::org::apache::lucene::index::AtomicReader::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.getDocTermOrds(a0, a1));
            return ::org::apache::lucene::index::t_SortedSetDocValues::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getDocTermOrds", args);
          return NULL;
        }

        static PyObject *t_FieldCache_getDocsWithField(t_FieldCache *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::org::apache::lucene::util::Bits result((jobject) NULL);

          if (!parseArgs(args, "ks", ::org::apache::lucene::index::AtomicReader::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.getDocsWithField(a0, a1));
            return ::org::apache::lucene::util::t_Bits::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getDocsWithField", args);
          return NULL;
        }

        static PyObject *t_FieldCache_getDoubles(t_FieldCache *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 3:
            {
              ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              jboolean a2;
              ::org::apache::lucene::search::FieldCache$Doubles result((jobject) NULL);

              if (!parseArgs(args, "ksZ", ::org::apache::lucene::index::AtomicReader::initializeClass, &a0, &a1, &a2))
              {
                OBJ_CALL(result = self->object.getDoubles(a0, a1, a2));
                return ::org::apache::lucene::search::t_FieldCache$Doubles::wrap_Object(result);
              }
            }
            break;
           case 4:
            {
              ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              ::org::apache::lucene::search::FieldCache$DoubleParser a2((jobject) NULL);
              jboolean a3;
              ::org::apache::lucene::search::FieldCache$Doubles result((jobject) NULL);

              if (!parseArgs(args, "kskZ", ::org::apache::lucene::index::AtomicReader::initializeClass, ::org::apache::lucene::search::FieldCache$DoubleParser::initializeClass, &a0, &a1, &a2, &a3))
              {
                OBJ_CALL(result = self->object.getDoubles(a0, a1, a2, a3));
                return ::org::apache::lucene::search::t_FieldCache$Doubles::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "getDoubles", args);
          return NULL;
        }

        static PyObject *t_FieldCache_getFloats(t_FieldCache *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 3:
            {
              ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              jboolean a2;
              ::org::apache::lucene::search::FieldCache$Floats result((jobject) NULL);

              if (!parseArgs(args, "ksZ", ::org::apache::lucene::index::AtomicReader::initializeClass, &a0, &a1, &a2))
              {
                OBJ_CALL(result = self->object.getFloats(a0, a1, a2));
                return ::org::apache::lucene::search::t_FieldCache$Floats::wrap_Object(result);
              }
            }
            break;
           case 4:
            {
              ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              ::org::apache::lucene::search::FieldCache$FloatParser a2((jobject) NULL);
              jboolean a3;
              ::org::apache::lucene::search::FieldCache$Floats result((jobject) NULL);

              if (!parseArgs(args, "kskZ", ::org::apache::lucene::index::AtomicReader::initializeClass, ::org::apache::lucene::search::FieldCache$FloatParser::initializeClass, &a0, &a1, &a2, &a3))
              {
                OBJ_CALL(result = self->object.getFloats(a0, a1, a2, a3));
                return ::org::apache::lucene::search::t_FieldCache$Floats::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "getFloats", args);
          return NULL;
        }

        static PyObject *t_FieldCache_getInfoStream(t_FieldCache *self)
        {
          ::java::io::PrintStream result((jobject) NULL);
          OBJ_CALL(result = self->object.getInfoStream());
          return ::java::io::t_PrintStream::wrap_Object(result);
        }

        static PyObject *t_FieldCache_getInts(t_FieldCache *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 3:
            {
              ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              jboolean a2;
              ::org::apache::lucene::search::FieldCache$Ints result((jobject) NULL);

              if (!parseArgs(args, "ksZ", ::org::apache::lucene::index::AtomicReader::initializeClass, &a0, &a1, &a2))
              {
                OBJ_CALL(result = self->object.getInts(a0, a1, a2));
                return ::org::apache::lucene::search::t_FieldCache$Ints::wrap_Object(result);
              }
            }
            break;
           case 4:
            {
              ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              ::org::apache::lucene::search::FieldCache$IntParser a2((jobject) NULL);
              jboolean a3;
              ::org::apache::lucene::search::FieldCache$Ints result((jobject) NULL);

              if (!parseArgs(args, "kskZ", ::org::apache::lucene::index::AtomicReader::initializeClass, ::org::apache::lucene::search::FieldCache$IntParser::initializeClass, &a0, &a1, &a2, &a3))
              {
                OBJ_CALL(result = self->object.getInts(a0, a1, a2, a3));
                return ::org::apache::lucene::search::t_FieldCache$Ints::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "getInts", args);
          return NULL;
        }

        static PyObject *t_FieldCache_getLongs(t_FieldCache *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 3:
            {
              ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              jboolean a2;
              ::org::apache::lucene::search::FieldCache$Longs result((jobject) NULL);

              if (!parseArgs(args, "ksZ", ::org::apache::lucene::index::AtomicReader::initializeClass, &a0, &a1, &a2))
              {
                OBJ_CALL(result = self->object.getLongs(a0, a1, a2));
                return ::org::apache::lucene::search::t_FieldCache$Longs::wrap_Object(result);
              }
            }
            break;
           case 4:
            {
              ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              ::org::apache::lucene::search::FieldCache$LongParser a2((jobject) NULL);
              jboolean a3;
              ::org::apache::lucene::search::FieldCache$Longs result((jobject) NULL);

              if (!parseArgs(args, "kskZ", ::org::apache::lucene::index::AtomicReader::initializeClass, ::org::apache::lucene::search::FieldCache$LongParser::initializeClass, &a0, &a1, &a2, &a3))
              {
                OBJ_CALL(result = self->object.getLongs(a0, a1, a2, a3));
                return ::org::apache::lucene::search::t_FieldCache$Longs::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "getLongs", args);
          return NULL;
        }

        static PyObject *t_FieldCache_getShorts(t_FieldCache *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 3:
            {
              ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              jboolean a2;
              ::org::apache::lucene::search::FieldCache$Shorts result((jobject) NULL);

              if (!parseArgs(args, "ksZ", ::org::apache::lucene::index::AtomicReader::initializeClass, &a0, &a1, &a2))
              {
                OBJ_CALL(result = self->object.getShorts(a0, a1, a2));
                return ::org::apache::lucene::search::t_FieldCache$Shorts::wrap_Object(result);
              }
            }
            break;
           case 4:
            {
              ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              ::org::apache::lucene::search::FieldCache$ShortParser a2((jobject) NULL);
              jboolean a3;
              ::org::apache::lucene::search::FieldCache$Shorts result((jobject) NULL);

              if (!parseArgs(args, "kskZ", ::org::apache::lucene::index::AtomicReader::initializeClass, ::org::apache::lucene::search::FieldCache$ShortParser::initializeClass, &a0, &a1, &a2, &a3))
              {
                OBJ_CALL(result = self->object.getShorts(a0, a1, a2, a3));
                return ::org::apache::lucene::search::t_FieldCache$Shorts::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "getShorts", args);
          return NULL;
        }

        static PyObject *t_FieldCache_getTerms(t_FieldCache *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 3:
            {
              ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              jboolean a2;
              ::org::apache::lucene::index::BinaryDocValues result((jobject) NULL);

              if (!parseArgs(args, "ksZ", ::org::apache::lucene::index::AtomicReader::initializeClass, &a0, &a1, &a2))
              {
                OBJ_CALL(result = self->object.getTerms(a0, a1, a2));
                return ::org::apache::lucene::index::t_BinaryDocValues::wrap_Object(result);
              }
            }
            break;
           case 4:
            {
              ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              jboolean a2;
              jfloat a3;
              ::org::apache::lucene::index::BinaryDocValues result((jobject) NULL);

              if (!parseArgs(args, "ksZF", ::org::apache::lucene::index::AtomicReader::initializeClass, &a0, &a1, &a2, &a3))
              {
                OBJ_CALL(result = self->object.getTerms(a0, a1, a2, a3));
                return ::org::apache::lucene::index::t_BinaryDocValues::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "getTerms", args);
          return NULL;
        }

        static PyObject *t_FieldCache_getTermsIndex(t_FieldCache *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              ::org::apache::lucene::index::SortedDocValues result((jobject) NULL);

              if (!parseArgs(args, "ks", ::org::apache::lucene::index::AtomicReader::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = self->object.getTermsIndex(a0, a1));
                return ::org::apache::lucene::index::t_SortedDocValues::wrap_Object(result);
              }
            }
            break;
           case 3:
            {
              ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              jfloat a2;
              ::org::apache::lucene::index::SortedDocValues result((jobject) NULL);

              if (!parseArgs(args, "ksF", ::org::apache::lucene::index::AtomicReader::initializeClass, &a0, &a1, &a2))
              {
                OBJ_CALL(result = self->object.getTermsIndex(a0, a1, a2));
                return ::org::apache::lucene::index::t_SortedDocValues::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "getTermsIndex", args);
          return NULL;
        }

        static PyObject *t_FieldCache_purgeAllCaches(t_FieldCache *self)
        {
          OBJ_CALL(self->object.purgeAllCaches());
          Py_RETURN_NONE;
        }

        static PyObject *t_FieldCache_purgeByCacheKey(t_FieldCache *self, PyObject *arg)
        {
          ::java::lang::Object a0((jobject) NULL);

          if (!parseArg(arg, "o", &a0))
          {
            OBJ_CALL(self->object.purgeByCacheKey(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "purgeByCacheKey", arg);
          return NULL;
        }

        static PyObject *t_FieldCache_setInfoStream(t_FieldCache *self, PyObject *arg)
        {
          ::java::io::PrintStream a0((jobject) NULL);

          if (!parseArg(arg, "k", ::java::io::PrintStream::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setInfoStream(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setInfoStream", arg);
          return NULL;
        }

        static PyObject *t_FieldCache_get__cacheEntries(t_FieldCache *self, void *data)
        {
          JArray< ::org::apache::lucene::search::FieldCache$CacheEntry > value((jobject) NULL);
          OBJ_CALL(value = self->object.getCacheEntries());
          return JArray<jobject>(value.this$).wrap(::org::apache::lucene::search::t_FieldCache$CacheEntry::wrap_jobject);
        }

        static PyObject *t_FieldCache_get__infoStream(t_FieldCache *self, void *data)
        {
          ::java::io::PrintStream value((jobject) NULL);
          OBJ_CALL(value = self->object.getInfoStream());
          return ::java::io::t_PrintStream::wrap_Object(value);
        }
        static int t_FieldCache_set__infoStream(t_FieldCache *self, PyObject *arg, void *data)
        {
          {
            ::java::io::PrintStream value((jobject) NULL);
            if (!parseArg(arg, "k", ::java::io::PrintStream::initializeClass, &value))
            {
              INT_CALL(self->object.setInfoStream(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "infoStream", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/cjk/CJKTokenizerFactory.h"
#include "org/apache/lucene/analysis/cjk/CJKTokenizer.h"
#include "java/lang/Class.h"
#include "java/io/Reader.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace cjk {

          ::java::lang::Class *CJKTokenizerFactory::class$ = NULL;
          jmethodID *CJKTokenizerFactory::mids$ = NULL;
          bool CJKTokenizerFactory::live$ = false;

          jclass CJKTokenizerFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/cjk/CJKTokenizerFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_277e6a01] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;)Lorg/apache/lucene/analysis/cjk/CJKTokenizer;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CJKTokenizerFactory::CJKTokenizerFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenizerFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::cjk::CJKTokenizer CJKTokenizerFactory::create(const ::org::apache::lucene::util::AttributeFactory & a0, const ::java::io::Reader & a1) const
          {
            return ::org::apache::lucene::analysis::cjk::CJKTokenizer(env->callObjectMethod(this$, mids$[mid_create_277e6a01], a0.this$, a1.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace cjk {
          static PyObject *t_CJKTokenizerFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CJKTokenizerFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CJKTokenizerFactory_init_(t_CJKTokenizerFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CJKTokenizerFactory_create(t_CJKTokenizerFactory *self, PyObject *args);

          static PyMethodDef t_CJKTokenizerFactory__methods_[] = {
            DECLARE_METHOD(t_CJKTokenizerFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CJKTokenizerFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CJKTokenizerFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CJKTokenizerFactory, t_CJKTokenizerFactory, ::org::apache::lucene::analysis::util::TokenizerFactory, CJKTokenizerFactory, t_CJKTokenizerFactory_init_, 0, 0, 0, 0, 0);

          void t_CJKTokenizerFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(CJKTokenizerFactory), module, "CJKTokenizerFactory", 0);
          }

          void t_CJKTokenizerFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CJKTokenizerFactory).tp_dict, "class_", make_descriptor(CJKTokenizerFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CJKTokenizerFactory).tp_dict, "wrapfn_", make_descriptor(t_CJKTokenizerFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CJKTokenizerFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CJKTokenizerFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CJKTokenizerFactory::initializeClass, 1)))
              return NULL;
            return t_CJKTokenizerFactory::wrap_Object(CJKTokenizerFactory(((t_CJKTokenizerFactory *) arg)->object.this$));
          }
          static PyObject *t_CJKTokenizerFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CJKTokenizerFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CJKTokenizerFactory_init_(t_CJKTokenizerFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            CJKTokenizerFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = CJKTokenizerFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_CJKTokenizerFactory_create(t_CJKTokenizerFactory *self, PyObject *args)
          {
            ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
            ::java::io::Reader a1((jobject) NULL);
            ::org::apache::lucene::analysis::cjk::CJKTokenizer result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.create(a0, a1));
              return ::org::apache::lucene::analysis::cjk::t_CJKTokenizer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(CJKTokenizerFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/analyzing/AnalyzingSuggester.h"
#include "org/apache/lucene/search/suggest/InputIterator.h"
#include "java/lang/Class.h"
#include "java/lang/CharSequence.h"
#include "org/apache/lucene/search/suggest/Lookup$LookupResult.h"
#include "java/util/Set.h"
#include "java/util/List.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "org/apache/lucene/store/DataInput.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace analyzing {

            ::java::lang::Class *AnalyzingSuggester::class$ = NULL;
            jmethodID *AnalyzingSuggester::mids$ = NULL;
            bool AnalyzingSuggester::live$ = false;
            jint AnalyzingSuggester::EXACT_FIRST = (jint) 0;
            jint AnalyzingSuggester::PRESERVE_SEP = (jint) 0;

            jclass AnalyzingSuggester::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/analyzing/AnalyzingSuggester");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_31619410] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Analyzer;)V");
                mids$[mid_init$_6a3c5772] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Analyzer;Lorg/apache/lucene/analysis/Analyzer;)V");
                mids$[mid_init$_9a7c82f9] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Analyzer;Lorg/apache/lucene/analysis/Analyzer;IIIZ)V");
                mids$[mid_build_1754a234] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/search/suggest/InputIterator;)V");
                mids$[mid_get_a739ccff] = env->getMethodID(cls, "get", "(Ljava/lang/CharSequence;)Ljava/lang/Object;");
                mids$[mid_getCount_54c6a17a] = env->getMethodID(cls, "getCount", "()J");
                mids$[mid_load_f5d6a55d] = env->getMethodID(cls, "load", "(Lorg/apache/lucene/store/DataInput;)Z");
                mids$[mid_lookup_dd3e9f51] = env->getMethodID(cls, "lookup", "(Ljava/lang/CharSequence;Ljava/util/Set;ZI)Ljava/util/List;");
                mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");
                mids$[mid_store_27875f5b] = env->getMethodID(cls, "store", "(Lorg/apache/lucene/store/DataOutput;)Z");
                mids$[mid_convertAutomaton_7aca8e1f] = env->getMethodID(cls, "convertAutomaton", "(Lorg/apache/lucene/util/automaton/Automaton;)Lorg/apache/lucene/util/automaton/Automaton;");
                mids$[mid_getFullPrefixPaths_a9ea3855] = env->getMethodID(cls, "getFullPrefixPaths", "(Ljava/util/List;Lorg/apache/lucene/util/automaton/Automaton;Lorg/apache/lucene/util/fst/FST;)Ljava/util/List;");

                class$ = (::java::lang::Class *) new JObject(cls);
                cls = (jclass) class$->this$;

                EXACT_FIRST = env->getStaticIntField(cls, "EXACT_FIRST");
                PRESERVE_SEP = env->getStaticIntField(cls, "PRESERVE_SEP");
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            AnalyzingSuggester::AnalyzingSuggester(const ::org::apache::lucene::analysis::Analyzer & a0) : ::org::apache::lucene::search::suggest::Lookup(env->newObject(initializeClass, &mids$, mid_init$_31619410, a0.this$)) {}

            AnalyzingSuggester::AnalyzingSuggester(const ::org::apache::lucene::analysis::Analyzer & a0, const ::org::apache::lucene::analysis::Analyzer & a1) : ::org::apache::lucene::search::suggest::Lookup(env->newObject(initializeClass, &mids$, mid_init$_6a3c5772, a0.this$, a1.this$)) {}

            AnalyzingSuggester::AnalyzingSuggester(const ::org::apache::lucene::analysis::Analyzer & a0, const ::org::apache::lucene::analysis::Analyzer & a1, jint a2, jint a3, jint a4, jboolean a5) : ::org::apache::lucene::search::suggest::Lookup(env->newObject(initializeClass, &mids$, mid_init$_9a7c82f9, a0.this$, a1.this$, a2, a3, a4, a5)) {}

            void AnalyzingSuggester::build(const ::org::apache::lucene::search::suggest::InputIterator & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_build_1754a234], a0.this$);
            }

            ::java::lang::Object AnalyzingSuggester::get(const ::java::lang::CharSequence & a0) const
            {
              return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_get_a739ccff], a0.this$));
            }

            jlong AnalyzingSuggester::getCount() const
            {
              return env->callLongMethod(this$, mids$[mid_getCount_54c6a17a]);
            }

            jboolean AnalyzingSuggester::load(const ::org::apache::lucene::store::DataInput & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_load_f5d6a55d], a0.this$);
            }

            ::java::util::List AnalyzingSuggester::lookup(const ::java::lang::CharSequence & a0, const ::java::util::Set & a1, jboolean a2, jint a3) const
            {
              return ::java::util::List(env->callObjectMethod(this$, mids$[mid_lookup_dd3e9f51], a0.this$, a1.this$, a2, a3));
            }

            jlong AnalyzingSuggester::ramBytesUsed() const
            {
              return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
            }

            jboolean AnalyzingSuggester::store(const ::org::apache::lucene::store::DataOutput & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_store_27875f5b], a0.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace analyzing {
            static PyObject *t_AnalyzingSuggester_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_AnalyzingSuggester_instance_(PyTypeObject *type, PyObject *arg);
            static int t_AnalyzingSuggester_init_(t_AnalyzingSuggester *self, PyObject *args, PyObject *kwds);
            static PyObject *t_AnalyzingSuggester_build(t_AnalyzingSuggester *self, PyObject *args);
            static PyObject *t_AnalyzingSuggester_get(t_AnalyzingSuggester *self, PyObject *arg);
            static PyObject *t_AnalyzingSuggester_getCount(t_AnalyzingSuggester *self, PyObject *args);
            static PyObject *t_AnalyzingSuggester_load(t_AnalyzingSuggester *self, PyObject *args);
            static PyObject *t_AnalyzingSuggester_lookup(t_AnalyzingSuggester *self, PyObject *args);
            static PyObject *t_AnalyzingSuggester_ramBytesUsed(t_AnalyzingSuggester *self, PyObject *args);
            static PyObject *t_AnalyzingSuggester_store(t_AnalyzingSuggester *self, PyObject *args);
            static PyObject *t_AnalyzingSuggester_get__count(t_AnalyzingSuggester *self, void *data);
            static PyGetSetDef t_AnalyzingSuggester__fields_[] = {
              DECLARE_GET_FIELD(t_AnalyzingSuggester, count),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_AnalyzingSuggester__methods_[] = {
              DECLARE_METHOD(t_AnalyzingSuggester, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_AnalyzingSuggester, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_AnalyzingSuggester, build, METH_VARARGS),
              DECLARE_METHOD(t_AnalyzingSuggester, get, METH_O),
              DECLARE_METHOD(t_AnalyzingSuggester, getCount, METH_VARARGS),
              DECLARE_METHOD(t_AnalyzingSuggester, load, METH_VARARGS),
              DECLARE_METHOD(t_AnalyzingSuggester, lookup, METH_VARARGS),
              DECLARE_METHOD(t_AnalyzingSuggester, ramBytesUsed, METH_VARARGS),
              DECLARE_METHOD(t_AnalyzingSuggester, store, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(AnalyzingSuggester, t_AnalyzingSuggester, ::org::apache::lucene::search::suggest::Lookup, AnalyzingSuggester, t_AnalyzingSuggester_init_, 0, 0, t_AnalyzingSuggester__fields_, 0, 0);

            void t_AnalyzingSuggester::install(PyObject *module)
            {
              installType(&PY_TYPE(AnalyzingSuggester), module, "AnalyzingSuggester", 0);
            }

            void t_AnalyzingSuggester::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(AnalyzingSuggester).tp_dict, "class_", make_descriptor(AnalyzingSuggester::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(AnalyzingSuggester).tp_dict, "wrapfn_", make_descriptor(t_AnalyzingSuggester::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(AnalyzingSuggester).tp_dict, "boxfn_", make_descriptor(boxObject));
              env->getClass(AnalyzingSuggester::initializeClass);
              PyDict_SetItemString(PY_TYPE(AnalyzingSuggester).tp_dict, "EXACT_FIRST", make_descriptor(AnalyzingSuggester::EXACT_FIRST));
              PyDict_SetItemString(PY_TYPE(AnalyzingSuggester).tp_dict, "PRESERVE_SEP", make_descriptor(AnalyzingSuggester::PRESERVE_SEP));
            }

            static PyObject *t_AnalyzingSuggester_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, AnalyzingSuggester::initializeClass, 1)))
                return NULL;
              return t_AnalyzingSuggester::wrap_Object(AnalyzingSuggester(((t_AnalyzingSuggester *) arg)->object.this$));
            }
            static PyObject *t_AnalyzingSuggester_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, AnalyzingSuggester::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_AnalyzingSuggester_init_(t_AnalyzingSuggester *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 1:
                {
                  ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
                  AnalyzingSuggester object((jobject) NULL);

                  if (!parseArgs(args, "k", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0))
                  {
                    INT_CALL(object = AnalyzingSuggester(a0));
                    self->object = object;
                    break;
                  }
                }
                goto err;
               case 2:
                {
                  ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
                  ::org::apache::lucene::analysis::Analyzer a1((jobject) NULL);
                  AnalyzingSuggester object((jobject) NULL);

                  if (!parseArgs(args, "kk", ::org::apache::lucene::analysis::Analyzer::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1))
                  {
                    INT_CALL(object = AnalyzingSuggester(a0, a1));
                    self->object = object;
                    break;
                  }
                }
                goto err;
               case 6:
                {
                  ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
                  ::org::apache::lucene::analysis::Analyzer a1((jobject) NULL);
                  jint a2;
                  jint a3;
                  jint a4;
                  jboolean a5;
                  AnalyzingSuggester object((jobject) NULL);

                  if (!parseArgs(args, "kkIIIZ", ::org::apache::lucene::analysis::Analyzer::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5))
                  {
                    INT_CALL(object = AnalyzingSuggester(a0, a1, a2, a3, a4, a5));
                    self->object = object;
                    break;
                  }
                }
               default:
               err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_AnalyzingSuggester_build(t_AnalyzingSuggester *self, PyObject *args)
            {
              ::org::apache::lucene::search::suggest::InputIterator a0((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::search::suggest::InputIterator::initializeClass, &a0))
              {
                OBJ_CALL(self->object.build(a0));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(AnalyzingSuggester), (PyObject *) self, "build", args, 2);
            }

            static PyObject *t_AnalyzingSuggester_get(t_AnalyzingSuggester *self, PyObject *arg)
            {
              ::java::lang::CharSequence a0((jobject) NULL);
              ::java::lang::Object result((jobject) NULL);

              if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
              {
                OBJ_CALL(result = self->object.get(a0));
                return ::java::lang::t_Object::wrap_Object(result);
              }

              PyErr_SetArgsError((PyObject *) self, "get", arg);
              return NULL;
            }

            static PyObject *t_AnalyzingSuggester_getCount(t_AnalyzingSuggester *self, PyObject *args)
            {
              jlong result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getCount());
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }

              return callSuper(&PY_TYPE(AnalyzingSuggester), (PyObject *) self, "getCount", args, 2);
            }

            static PyObject *t_AnalyzingSuggester_load(t_AnalyzingSuggester *self, PyObject *args)
            {
              ::org::apache::lucene::store::DataInput a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "k", ::org::apache::lucene::store::DataInput::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.load(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(AnalyzingSuggester), (PyObject *) self, "load", args, 2);
            }

            static PyObject *t_AnalyzingSuggester_lookup(t_AnalyzingSuggester *self, PyObject *args)
            {
              ::java::lang::CharSequence a0((jobject) NULL);
              ::java::util::Set a1((jobject) NULL);
              PyTypeObject **p1;
              jboolean a2;
              jint a3;
              ::java::util::List result((jobject) NULL);

              if (!parseArgs(args, "OKZI", &::java::lang::PY_TYPE(CharSequence), ::java::util::Set::initializeClass, &a0, &a1, &p1, ::java::util::t_Set::parameters_, &a2, &a3))
              {
                OBJ_CALL(result = self->object.lookup(a0, a1, a2, a3));
                return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::search::suggest::PY_TYPE(Lookup$LookupResult));
              }

              return callSuper(&PY_TYPE(AnalyzingSuggester), (PyObject *) self, "lookup", args, 2);
            }

            static PyObject *t_AnalyzingSuggester_ramBytesUsed(t_AnalyzingSuggester *self, PyObject *args)
            {
              jlong result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.ramBytesUsed());
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }

              return callSuper(&PY_TYPE(AnalyzingSuggester), (PyObject *) self, "ramBytesUsed", args, 2);
            }

            static PyObject *t_AnalyzingSuggester_store(t_AnalyzingSuggester *self, PyObject *args)
            {
              ::org::apache::lucene::store::DataOutput a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "k", ::org::apache::lucene::store::DataOutput::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.store(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(AnalyzingSuggester), (PyObject *) self, "store", args, 2);
            }

            static PyObject *t_AnalyzingSuggester_get__count(t_AnalyzingSuggester *self, void *data)
            {
              jlong value;
              OBJ_CALL(value = self->object.getCount());
              return PyLong_FromLongLong((PY_LONG_LONG) value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/surround/query/FieldsQuery.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/surround/query/BasicQueryFactory.h"
#include "java/util/List.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Query.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace query {

            ::java::lang::Class *FieldsQuery::class$ = NULL;
            jmethodID *FieldsQuery::mids$ = NULL;
            bool FieldsQuery::live$ = false;

            jclass FieldsQuery::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/surround/query/FieldsQuery");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_2649f1ba] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/surround/query/SrndQuery;Ljava/util/List;C)V");
                mids$[mid_init$_bcbc5f3f] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/surround/query/SrndQuery;Ljava/lang/String;C)V");
                mids$[mid_getFieldNames_87851566] = env->getMethodID(cls, "getFieldNames", "()Ljava/util/List;");
                mids$[mid_getFieldOperator_54c6a173] = env->getMethodID(cls, "getFieldOperator", "()C");
                mids$[mid_isFieldsSubQueryAcceptable_54c6a16a] = env->getMethodID(cls, "isFieldsSubQueryAcceptable", "()Z");
                mids$[mid_makeLuceneQueryFieldNoBoost_1aaeee30] = env->getMethodID(cls, "makeLuceneQueryFieldNoBoost", "(Ljava/lang/String;Lorg/apache/lucene/queryparser/surround/query/BasicQueryFactory;)Lorg/apache/lucene/search/Query;");
                mids$[mid_makeLuceneQueryNoBoost_3d79835e] = env->getMethodID(cls, "makeLuceneQueryNoBoost", "(Lorg/apache/lucene/queryparser/surround/query/BasicQueryFactory;)Lorg/apache/lucene/search/Query;");
                mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
                mids$[mid_fieldNamesToString_9f94ae34] = env->getMethodID(cls, "fieldNamesToString", "(Ljava/lang/StringBuilder;)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            FieldsQuery::FieldsQuery(const ::org::apache::lucene::queryparser::surround::query::SrndQuery & a0, const ::java::util::List & a1, jchar a2) : ::org::apache::lucene::queryparser::surround::query::SrndQuery(env->newObject(initializeClass, &mids$, mid_init$_2649f1ba, a0.this$, a1.this$, a2)) {}

            FieldsQuery::FieldsQuery(const ::org::apache::lucene::queryparser::surround::query::SrndQuery & a0, const ::java::lang::String & a1, jchar a2) : ::org::apache::lucene::queryparser::surround::query::SrndQuery(env->newObject(initializeClass, &mids$, mid_init$_bcbc5f3f, a0.this$, a1.this$, a2)) {}

            ::java::util::List FieldsQuery::getFieldNames() const
            {
              return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getFieldNames_87851566]));
            }

            jchar FieldsQuery::getFieldOperator() const
            {
              return env->callCharMethod(this$, mids$[mid_getFieldOperator_54c6a173]);
            }

            jboolean FieldsQuery::isFieldsSubQueryAcceptable() const
            {
              return env->callBooleanMethod(this$, mids$[mid_isFieldsSubQueryAcceptable_54c6a16a]);
            }

            ::org::apache::lucene::search::Query FieldsQuery::makeLuceneQueryFieldNoBoost(const ::java::lang::String & a0, const ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory & a1) const
            {
              return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_makeLuceneQueryFieldNoBoost_1aaeee30], a0.this$, a1.this$));
            }

            ::org::apache::lucene::search::Query FieldsQuery::makeLuceneQueryNoBoost(const ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory & a0) const
            {
              return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_makeLuceneQueryNoBoost_3d79835e], a0.this$));
            }

            ::java::lang::String FieldsQuery::toString() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace query {
            static PyObject *t_FieldsQuery_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_FieldsQuery_instance_(PyTypeObject *type, PyObject *arg);
            static int t_FieldsQuery_init_(t_FieldsQuery *self, PyObject *args, PyObject *kwds);
            static PyObject *t_FieldsQuery_getFieldNames(t_FieldsQuery *self);
            static PyObject *t_FieldsQuery_getFieldOperator(t_FieldsQuery *self);
            static PyObject *t_FieldsQuery_isFieldsSubQueryAcceptable(t_FieldsQuery *self, PyObject *args);
            static PyObject *t_FieldsQuery_makeLuceneQueryFieldNoBoost(t_FieldsQuery *self, PyObject *args);
            static PyObject *t_FieldsQuery_makeLuceneQueryNoBoost(t_FieldsQuery *self, PyObject *arg);
            static PyObject *t_FieldsQuery_toString(t_FieldsQuery *self, PyObject *args);
            static PyObject *t_FieldsQuery_get__fieldNames(t_FieldsQuery *self, void *data);
            static PyObject *t_FieldsQuery_get__fieldOperator(t_FieldsQuery *self, void *data);
            static PyObject *t_FieldsQuery_get__fieldsSubQueryAcceptable(t_FieldsQuery *self, void *data);
            static PyGetSetDef t_FieldsQuery__fields_[] = {
              DECLARE_GET_FIELD(t_FieldsQuery, fieldNames),
              DECLARE_GET_FIELD(t_FieldsQuery, fieldOperator),
              DECLARE_GET_FIELD(t_FieldsQuery, fieldsSubQueryAcceptable),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_FieldsQuery__methods_[] = {
              DECLARE_METHOD(t_FieldsQuery, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FieldsQuery, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FieldsQuery, getFieldNames, METH_NOARGS),
              DECLARE_METHOD(t_FieldsQuery, getFieldOperator, METH_NOARGS),
              DECLARE_METHOD(t_FieldsQuery, isFieldsSubQueryAcceptable, METH_VARARGS),
              DECLARE_METHOD(t_FieldsQuery, makeLuceneQueryFieldNoBoost, METH_VARARGS),
              DECLARE_METHOD(t_FieldsQuery, makeLuceneQueryNoBoost, METH_O),
              DECLARE_METHOD(t_FieldsQuery, toString, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(FieldsQuery, t_FieldsQuery, ::org::apache::lucene::queryparser::surround::query::SrndQuery, FieldsQuery, t_FieldsQuery_init_, 0, 0, t_FieldsQuery__fields_, 0, 0);

            void t_FieldsQuery::install(PyObject *module)
            {
              installType(&PY_TYPE(FieldsQuery), module, "FieldsQuery", 0);
            }

            void t_FieldsQuery::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(FieldsQuery).tp_dict, "class_", make_descriptor(FieldsQuery::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(FieldsQuery).tp_dict, "wrapfn_", make_descriptor(t_FieldsQuery::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(FieldsQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_FieldsQuery_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, FieldsQuery::initializeClass, 1)))
                return NULL;
              return t_FieldsQuery::wrap_Object(FieldsQuery(((t_FieldsQuery *) arg)->object.this$));
            }
            static PyObject *t_FieldsQuery_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, FieldsQuery::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_FieldsQuery_init_(t_FieldsQuery *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 3:
                {
                  ::org::apache::lucene::queryparser::surround::query::SrndQuery a0((jobject) NULL);
                  ::java::util::List a1((jobject) NULL);
                  PyTypeObject **p1;
                  jchar a2;
                  FieldsQuery object((jobject) NULL);

                  if (!parseArgs(args, "kKC", ::org::apache::lucene::queryparser::surround::query::SrndQuery::initializeClass, ::java::util::List::initializeClass, &a0, &a1, &p1, ::java::util::t_List::parameters_, &a2))
                  {
                    INT_CALL(object = FieldsQuery(a0, a1, a2));
                    self->object = object;
                    break;
                  }
                }
                {
                  ::org::apache::lucene::queryparser::surround::query::SrndQuery a0((jobject) NULL);
                  ::java::lang::String a1((jobject) NULL);
                  jchar a2;
                  FieldsQuery object((jobject) NULL);

                  if (!parseArgs(args, "ksC", ::org::apache::lucene::queryparser::surround::query::SrndQuery::initializeClass, &a0, &a1, &a2))
                  {
                    INT_CALL(object = FieldsQuery(a0, a1, a2));
                    self->object = object;
                    break;
                  }
                }
               default:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_FieldsQuery_getFieldNames(t_FieldsQuery *self)
            {
              ::java::util::List result((jobject) NULL);
              OBJ_CALL(result = self->object.getFieldNames());
              return ::java::util::t_List::wrap_Object(result, &::java::lang::PY_TYPE(String));
            }

            static PyObject *t_FieldsQuery_getFieldOperator(t_FieldsQuery *self)
            {
              jchar result;
              OBJ_CALL(result = self->object.getFieldOperator());
              return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
            }

            static PyObject *t_FieldsQuery_isFieldsSubQueryAcceptable(t_FieldsQuery *self, PyObject *args)
            {
              jboolean result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.isFieldsSubQueryAcceptable());
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(FieldsQuery), (PyObject *) self, "isFieldsSubQueryAcceptable", args, 2);
            }

            static PyObject *t_FieldsQuery_makeLuceneQueryFieldNoBoost(t_FieldsQuery *self, PyObject *args)
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory a1((jobject) NULL);
              ::org::apache::lucene::search::Query result((jobject) NULL);

              if (!parseArgs(args, "sk", ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = self->object.makeLuceneQueryFieldNoBoost(a0, a1));
                return ::org::apache::lucene::search::t_Query::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(FieldsQuery), (PyObject *) self, "makeLuceneQueryFieldNoBoost", args, 2);
            }

            static PyObject *t_FieldsQuery_makeLuceneQueryNoBoost(t_FieldsQuery *self, PyObject *arg)
            {
              ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory a0((jobject) NULL);
              ::org::apache::lucene::search::Query result((jobject) NULL);

              if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.makeLuceneQueryNoBoost(a0));
                return ::org::apache::lucene::search::t_Query::wrap_Object(result);
              }

              PyErr_SetArgsError((PyObject *) self, "makeLuceneQueryNoBoost", arg);
              return NULL;
            }

            static PyObject *t_FieldsQuery_toString(t_FieldsQuery *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.toString());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(FieldsQuery), (PyObject *) self, "toString", args, 2);
            }

            static PyObject *t_FieldsQuery_get__fieldNames(t_FieldsQuery *self, void *data)
            {
              ::java::util::List value((jobject) NULL);
              OBJ_CALL(value = self->object.getFieldNames());
              return ::java::util::t_List::wrap_Object(value);
            }

            static PyObject *t_FieldsQuery_get__fieldOperator(t_FieldsQuery *self, void *data)
            {
              jchar value;
              OBJ_CALL(value = self->object.getFieldOperator());
              return PyUnicode_FromUnicode((Py_UNICODE *) &value, 1);
            }

            static PyObject *t_FieldsQuery_get__fieldsSubQueryAcceptable(t_FieldsQuery *self, void *data)
            {
              jboolean value;
              OBJ_CALL(value = self->object.isFieldsSubQueryAcceptable());
              Py_RETURN_BOOL(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/expressions/js/JavascriptParser$bitwise_or_return.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {

          ::java::lang::Class *JavascriptParser$bitwise_or_return::class$ = NULL;
          jmethodID *JavascriptParser$bitwise_or_return::mids$ = NULL;
          bool JavascriptParser$bitwise_or_return::live$ = false;

          jclass JavascriptParser$bitwise_or_return::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/expressions/js/JavascriptParser$bitwise_or_return");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          JavascriptParser$bitwise_or_return::JavascriptParser$bitwise_or_return() : ::org::antlr::runtime::ParserRuleReturnScope(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {
          static PyObject *t_JavascriptParser$bitwise_or_return_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_JavascriptParser$bitwise_or_return_instance_(PyTypeObject *type, PyObject *arg);
          static int t_JavascriptParser$bitwise_or_return_init_(t_JavascriptParser$bitwise_or_return *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_JavascriptParser$bitwise_or_return__methods_[] = {
            DECLARE_METHOD(t_JavascriptParser$bitwise_or_return, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_JavascriptParser$bitwise_or_return, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(JavascriptParser$bitwise_or_return, t_JavascriptParser$bitwise_or_return, ::org::antlr::runtime::ParserRuleReturnScope, JavascriptParser$bitwise_or_return, t_JavascriptParser$bitwise_or_return_init_, 0, 0, 0, 0, 0);

          void t_JavascriptParser$bitwise_or_return::install(PyObject *module)
          {
            installType(&PY_TYPE(JavascriptParser$bitwise_or_return), module, "JavascriptParser$bitwise_or_return", 0);
          }

          void t_JavascriptParser$bitwise_or_return::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(JavascriptParser$bitwise_or_return).tp_dict, "class_", make_descriptor(JavascriptParser$bitwise_or_return::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(JavascriptParser$bitwise_or_return).tp_dict, "wrapfn_", make_descriptor(t_JavascriptParser$bitwise_or_return::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(JavascriptParser$bitwise_or_return).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_JavascriptParser$bitwise_or_return_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, JavascriptParser$bitwise_or_return::initializeClass, 1)))
              return NULL;
            return t_JavascriptParser$bitwise_or_return::wrap_Object(JavascriptParser$bitwise_or_return(((t_JavascriptParser$bitwise_or_return *) arg)->object.this$));
          }
          static PyObject *t_JavascriptParser$bitwise_or_return_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, JavascriptParser$bitwise_or_return::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_JavascriptParser$bitwise_or_return_init_(t_JavascriptParser$bitwise_or_return *self, PyObject *args, PyObject *kwds)
          {
            JavascriptParser$bitwise_or_return object((jobject) NULL);

            INT_CALL(object = JavascriptParser$bitwise_or_return());
            self->object = object;

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/CompositeReader.h"
#include "org/apache/lucene/index/CompositeReaderContext.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *CompositeReader::class$ = NULL;
        jmethodID *CompositeReader::mids$ = NULL;
        bool CompositeReader::live$ = false;

        jclass CompositeReader::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/CompositeReader");

            mids$ = new jmethodID[max_mid];
            mids$[mid_getContext_00eb2977] = env->getMethodID(cls, "getContext", "()Lorg/apache/lucene/index/CompositeReaderContext;");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
            mids$[mid_getSequentialSubReaders_87851566] = env->getMethodID(cls, "getSequentialSubReaders", "()Ljava/util/List;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::index::CompositeReaderContext CompositeReader::getContext() const
        {
          return ::org::apache::lucene::index::CompositeReaderContext(env->callObjectMethod(this$, mids$[mid_getContext_00eb2977]));
        }

        ::java::lang::String CompositeReader::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_CompositeReader_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CompositeReader_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CompositeReader_getContext(t_CompositeReader *self, PyObject *args);
        static PyObject *t_CompositeReader_toString(t_CompositeReader *self, PyObject *args);
        static PyObject *t_CompositeReader_get__context(t_CompositeReader *self, void *data);
        static PyGetSetDef t_CompositeReader__fields_[] = {
          DECLARE_GET_FIELD(t_CompositeReader, context),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_CompositeReader__methods_[] = {
          DECLARE_METHOD(t_CompositeReader, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CompositeReader, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CompositeReader, getContext, METH_VARARGS),
          DECLARE_METHOD(t_CompositeReader, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(CompositeReader, t_CompositeReader, ::org::apache::lucene::index::IndexReader, CompositeReader, abstract_init, 0, 0, t_CompositeReader__fields_, 0, 0);

        void t_CompositeReader::install(PyObject *module)
        {
          installType(&PY_TYPE(CompositeReader), module, "CompositeReader", 0);
        }

        void t_CompositeReader::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(CompositeReader).tp_dict, "class_", make_descriptor(CompositeReader::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(CompositeReader).tp_dict, "wrapfn_", make_descriptor(t_CompositeReader::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(CompositeReader).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_CompositeReader_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CompositeReader::initializeClass, 1)))
            return NULL;
          return t_CompositeReader::wrap_Object(CompositeReader(((t_CompositeReader *) arg)->object.this$));
        }
        static PyObject *t_CompositeReader_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CompositeReader::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_CompositeReader_getContext(t_CompositeReader *self, PyObject *args)
        {
          ::org::apache::lucene::index::CompositeReaderContext result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getContext());
            return ::org::apache::lucene::index::t_CompositeReaderContext::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(CompositeReader), (PyObject *) self, "getContext", args, 2);
        }

        static PyObject *t_CompositeReader_toString(t_CompositeReader *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(CompositeReader), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_CompositeReader_get__context(t_CompositeReader *self, void *data)
        {
          ::org::apache::lucene::index::CompositeReaderContext value((jobject) NULL);
          OBJ_CALL(value = self->object.getContext());
          return ::org::apache::lucene::index::t_CompositeReaderContext::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/el/GreekStemmer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace el {

          ::java::lang::Class *GreekStemmer::class$ = NULL;
          jmethodID *GreekStemmer::mids$ = NULL;
          bool GreekStemmer::live$ = false;

          jclass GreekStemmer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/el/GreekStemmer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_stem_ec6430eb] = env->getMethodID(cls, "stem", "([CI)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          GreekStemmer::GreekStemmer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint GreekStemmer::stem(const JArray< jchar > & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_stem_ec6430eb], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace el {
          static PyObject *t_GreekStemmer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GreekStemmer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_GreekStemmer_init_(t_GreekStemmer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_GreekStemmer_stem(t_GreekStemmer *self, PyObject *args);

          static PyMethodDef t_GreekStemmer__methods_[] = {
            DECLARE_METHOD(t_GreekStemmer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GreekStemmer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GreekStemmer, stem, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(GreekStemmer, t_GreekStemmer, ::java::lang::Object, GreekStemmer, t_GreekStemmer_init_, 0, 0, 0, 0, 0);

          void t_GreekStemmer::install(PyObject *module)
          {
            installType(&PY_TYPE(GreekStemmer), module, "GreekStemmer", 0);
          }

          void t_GreekStemmer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(GreekStemmer).tp_dict, "class_", make_descriptor(GreekStemmer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(GreekStemmer).tp_dict, "wrapfn_", make_descriptor(t_GreekStemmer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(GreekStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_GreekStemmer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GreekStemmer::initializeClass, 1)))
              return NULL;
            return t_GreekStemmer::wrap_Object(GreekStemmer(((t_GreekStemmer *) arg)->object.this$));
          }
          static PyObject *t_GreekStemmer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GreekStemmer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_GreekStemmer_init_(t_GreekStemmer *self, PyObject *args, PyObject *kwds)
          {
            GreekStemmer object((jobject) NULL);

            INT_CALL(object = GreekStemmer());
            self->object = object;

            return 0;
          }

          static PyObject *t_GreekStemmer_stem(t_GreekStemmer *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(result = self->object.stem(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "stem", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/IBSimilarity.h"
#include "org/apache/lucene/search/similarities/Distribution.h"
#include "org/apache/lucene/search/similarities/Normalization.h"
#include "org/apache/lucene/search/similarities/Lambda.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *IBSimilarity::class$ = NULL;
          jmethodID *IBSimilarity::mids$ = NULL;
          bool IBSimilarity::live$ = false;

          jclass IBSimilarity::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/IBSimilarity");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c1a9dba4] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/similarities/Distribution;Lorg/apache/lucene/search/similarities/Lambda;Lorg/apache/lucene/search/similarities/Normalization;)V");
              mids$[mid_getDistribution_997d9b00] = env->getMethodID(cls, "getDistribution", "()Lorg/apache/lucene/search/similarities/Distribution;");
              mids$[mid_getLambda_c82cedff] = env->getMethodID(cls, "getLambda", "()Lorg/apache/lucene/search/similarities/Lambda;");
              mids$[mid_getNormalization_d2e76e28] = env->getMethodID(cls, "getNormalization", "()Lorg/apache/lucene/search/similarities/Normalization;");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
              mids$[mid_score_63482206] = env->getMethodID(cls, "score", "(Lorg/apache/lucene/search/similarities/BasicStats;FF)F");
              mids$[mid_explain_347d95f8] = env->getMethodID(cls, "explain", "(Lorg/apache/lucene/search/Explanation;Lorg/apache/lucene/search/similarities/BasicStats;IFF)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          IBSimilarity::IBSimilarity(const ::org::apache::lucene::search::similarities::Distribution & a0, const ::org::apache::lucene::search::similarities::Lambda & a1, const ::org::apache::lucene::search::similarities::Normalization & a2) : ::org::apache::lucene::search::similarities::SimilarityBase(env->newObject(initializeClass, &mids$, mid_init$_c1a9dba4, a0.this$, a1.this$, a2.this$)) {}

          ::org::apache::lucene::search::similarities::Distribution IBSimilarity::getDistribution() const
          {
            return ::org::apache::lucene::search::similarities::Distribution(env->callObjectMethod(this$, mids$[mid_getDistribution_997d9b00]));
          }

          ::org::apache::lucene::search::similarities::Lambda IBSimilarity::getLambda() const
          {
            return ::org::apache::lucene::search::similarities::Lambda(env->callObjectMethod(this$, mids$[mid_getLambda_c82cedff]));
          }

          ::org::apache::lucene::search::similarities::Normalization IBSimilarity::getNormalization() const
          {
            return ::org::apache::lucene::search::similarities::Normalization(env->callObjectMethod(this$, mids$[mid_getNormalization_d2e76e28]));
          }

          ::java::lang::String IBSimilarity::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_IBSimilarity_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IBSimilarity_instance_(PyTypeObject *type, PyObject *arg);
          static int t_IBSimilarity_init_(t_IBSimilarity *self, PyObject *args, PyObject *kwds);
          static PyObject *t_IBSimilarity_getDistribution(t_IBSimilarity *self);
          static PyObject *t_IBSimilarity_getLambda(t_IBSimilarity *self);
          static PyObject *t_IBSimilarity_getNormalization(t_IBSimilarity *self);
          static PyObject *t_IBSimilarity_toString(t_IBSimilarity *self, PyObject *args);
          static PyObject *t_IBSimilarity_get__distribution(t_IBSimilarity *self, void *data);
          static PyObject *t_IBSimilarity_get__lambda(t_IBSimilarity *self, void *data);
          static PyObject *t_IBSimilarity_get__normalization(t_IBSimilarity *self, void *data);
          static PyGetSetDef t_IBSimilarity__fields_[] = {
            DECLARE_GET_FIELD(t_IBSimilarity, distribution),
            DECLARE_GET_FIELD(t_IBSimilarity, lambda),
            DECLARE_GET_FIELD(t_IBSimilarity, normalization),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_IBSimilarity__methods_[] = {
            DECLARE_METHOD(t_IBSimilarity, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IBSimilarity, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IBSimilarity, getDistribution, METH_NOARGS),
            DECLARE_METHOD(t_IBSimilarity, getLambda, METH_NOARGS),
            DECLARE_METHOD(t_IBSimilarity, getNormalization, METH_NOARGS),
            DECLARE_METHOD(t_IBSimilarity, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(IBSimilarity, t_IBSimilarity, ::org::apache::lucene::search::similarities::SimilarityBase, IBSimilarity, t_IBSimilarity_init_, 0, 0, t_IBSimilarity__fields_, 0, 0);

          void t_IBSimilarity::install(PyObject *module)
          {
            installType(&PY_TYPE(IBSimilarity), module, "IBSimilarity", 0);
          }

          void t_IBSimilarity::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(IBSimilarity).tp_dict, "class_", make_descriptor(IBSimilarity::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(IBSimilarity).tp_dict, "wrapfn_", make_descriptor(t_IBSimilarity::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(IBSimilarity).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_IBSimilarity_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, IBSimilarity::initializeClass, 1)))
              return NULL;
            return t_IBSimilarity::wrap_Object(IBSimilarity(((t_IBSimilarity *) arg)->object.this$));
          }
          static PyObject *t_IBSimilarity_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, IBSimilarity::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_IBSimilarity_init_(t_IBSimilarity *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::search::similarities::Distribution a0((jobject) NULL);
            ::org::apache::lucene::search::similarities::Lambda a1((jobject) NULL);
            ::org::apache::lucene::search::similarities::Normalization a2((jobject) NULL);
            IBSimilarity object((jobject) NULL);

            if (!parseArgs(args, "kkk", ::org::apache::lucene::search::similarities::Distribution::initializeClass, ::org::apache::lucene::search::similarities::Lambda::initializeClass, ::org::apache::lucene::search::similarities::Normalization::initializeClass, &a0, &a1, &a2))
            {
              INT_CALL(object = IBSimilarity(a0, a1, a2));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_IBSimilarity_getDistribution(t_IBSimilarity *self)
          {
            ::org::apache::lucene::search::similarities::Distribution result((jobject) NULL);
            OBJ_CALL(result = self->object.getDistribution());
            return ::org::apache::lucene::search::similarities::t_Distribution::wrap_Object(result);
          }

          static PyObject *t_IBSimilarity_getLambda(t_IBSimilarity *self)
          {
            ::org::apache::lucene::search::similarities::Lambda result((jobject) NULL);
            OBJ_CALL(result = self->object.getLambda());
            return ::org::apache::lucene::search::similarities::t_Lambda::wrap_Object(result);
          }

          static PyObject *t_IBSimilarity_getNormalization(t_IBSimilarity *self)
          {
            ::org::apache::lucene::search::similarities::Normalization result((jobject) NULL);
            OBJ_CALL(result = self->object.getNormalization());
            return ::org::apache::lucene::search::similarities::t_Normalization::wrap_Object(result);
          }

          static PyObject *t_IBSimilarity_toString(t_IBSimilarity *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(IBSimilarity), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_IBSimilarity_get__distribution(t_IBSimilarity *self, void *data)
          {
            ::org::apache::lucene::search::similarities::Distribution value((jobject) NULL);
            OBJ_CALL(value = self->object.getDistribution());
            return ::org::apache::lucene::search::similarities::t_Distribution::wrap_Object(value);
          }

          static PyObject *t_IBSimilarity_get__lambda(t_IBSimilarity *self, void *data)
          {
            ::org::apache::lucene::search::similarities::Lambda value((jobject) NULL);
            OBJ_CALL(value = self->object.getLambda());
            return ::org::apache::lucene::search::similarities::t_Lambda::wrap_Object(value);
          }

          static PyObject *t_IBSimilarity_get__normalization(t_IBSimilarity *self, void *data)
          {
            ::org::apache::lucene::search::similarities::Normalization value((jobject) NULL);
            OBJ_CALL(value = self->object.getNormalization());
            return ::org::apache::lucene::search::similarities::t_Normalization::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/BufferedChecksumIndexInput.h"
#include "org/apache/lucene/store/IndexInput.h"
#include "java/io/IOException.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *BufferedChecksumIndexInput::class$ = NULL;
        jmethodID *BufferedChecksumIndexInput::mids$ = NULL;
        bool BufferedChecksumIndexInput::live$ = false;

        jclass BufferedChecksumIndexInput::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/BufferedChecksumIndexInput");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_0441f0b2] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/IndexInput;)V");
            mids$[mid_clone_4baa952b] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/store/IndexInput;");
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_getChecksum_54c6a17a] = env->getMethodID(cls, "getChecksum", "()J");
            mids$[mid_getFilePointer_54c6a17a] = env->getMethodID(cls, "getFilePointer", "()J");
            mids$[mid_length_54c6a17a] = env->getMethodID(cls, "length", "()J");
            mids$[mid_readByte_54c6a172] = env->getMethodID(cls, "readByte", "()B");
            mids$[mid_readBytes_86f4435f] = env->getMethodID(cls, "readBytes", "([BII)V");
            mids$[mid_slice_d00c83eb] = env->getMethodID(cls, "slice", "(Ljava/lang/String;JJ)Lorg/apache/lucene/store/IndexInput;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        BufferedChecksumIndexInput::BufferedChecksumIndexInput(const ::org::apache::lucene::store::IndexInput & a0) : ::org::apache::lucene::store::ChecksumIndexInput(env->newObject(initializeClass, &mids$, mid_init$_0441f0b2, a0.this$)) {}

        ::org::apache::lucene::store::IndexInput BufferedChecksumIndexInput::clone() const
        {
          return ::org::apache::lucene::store::IndexInput(env->callObjectMethod(this$, mids$[mid_clone_4baa952b]));
        }

        void BufferedChecksumIndexInput::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        jlong BufferedChecksumIndexInput::getChecksum() const
        {
          return env->callLongMethod(this$, mids$[mid_getChecksum_54c6a17a]);
        }

        jlong BufferedChecksumIndexInput::getFilePointer() const
        {
          return env->callLongMethod(this$, mids$[mid_getFilePointer_54c6a17a]);
        }

        jlong BufferedChecksumIndexInput::length() const
        {
          return env->callLongMethod(this$, mids$[mid_length_54c6a17a]);
        }

        jbyte BufferedChecksumIndexInput::readByte() const
        {
          return env->callByteMethod(this$, mids$[mid_readByte_54c6a172]);
        }

        void BufferedChecksumIndexInput::readBytes(const JArray< jbyte > & a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_readBytes_86f4435f], a0.this$, a1, a2);
        }

        ::org::apache::lucene::store::IndexInput BufferedChecksumIndexInput::slice(const ::java::lang::String & a0, jlong a1, jlong a2) const
        {
          return ::org::apache::lucene::store::IndexInput(env->callObjectMethod(this$, mids$[mid_slice_d00c83eb], a0.this$, a1, a2));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_BufferedChecksumIndexInput_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BufferedChecksumIndexInput_instance_(PyTypeObject *type, PyObject *arg);
        static int t_BufferedChecksumIndexInput_init_(t_BufferedChecksumIndexInput *self, PyObject *args, PyObject *kwds);
        static PyObject *t_BufferedChecksumIndexInput_clone(t_BufferedChecksumIndexInput *self, PyObject *args);
        static PyObject *t_BufferedChecksumIndexInput_close(t_BufferedChecksumIndexInput *self, PyObject *args);
        static PyObject *t_BufferedChecksumIndexInput_getChecksum(t_BufferedChecksumIndexInput *self, PyObject *args);
        static PyObject *t_BufferedChecksumIndexInput_getFilePointer(t_BufferedChecksumIndexInput *self, PyObject *args);
        static PyObject *t_BufferedChecksumIndexInput_length(t_BufferedChecksumIndexInput *self, PyObject *args);
        static PyObject *t_BufferedChecksumIndexInput_readByte(t_BufferedChecksumIndexInput *self, PyObject *args);
        static PyObject *t_BufferedChecksumIndexInput_readBytes(t_BufferedChecksumIndexInput *self, PyObject *args);
        static PyObject *t_BufferedChecksumIndexInput_slice(t_BufferedChecksumIndexInput *self, PyObject *args);
        static PyObject *t_BufferedChecksumIndexInput_get__checksum(t_BufferedChecksumIndexInput *self, void *data);
        static PyObject *t_BufferedChecksumIndexInput_get__filePointer(t_BufferedChecksumIndexInput *self, void *data);
        static PyGetSetDef t_BufferedChecksumIndexInput__fields_[] = {
          DECLARE_GET_FIELD(t_BufferedChecksumIndexInput, checksum),
          DECLARE_GET_FIELD(t_BufferedChecksumIndexInput, filePointer),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_BufferedChecksumIndexInput__methods_[] = {
          DECLARE_METHOD(t_BufferedChecksumIndexInput, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BufferedChecksumIndexInput, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BufferedChecksumIndexInput, clone, METH_VARARGS),
          DECLARE_METHOD(t_BufferedChecksumIndexInput, close, METH_VARARGS),
          DECLARE_METHOD(t_BufferedChecksumIndexInput, getChecksum, METH_VARARGS),
          DECLARE_METHOD(t_BufferedChecksumIndexInput, getFilePointer, METH_VARARGS),
          DECLARE_METHOD(t_BufferedChecksumIndexInput, length, METH_VARARGS),
          DECLARE_METHOD(t_BufferedChecksumIndexInput, readByte, METH_VARARGS),
          DECLARE_METHOD(t_BufferedChecksumIndexInput, readBytes, METH_VARARGS),
          DECLARE_METHOD(t_BufferedChecksumIndexInput, slice, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(BufferedChecksumIndexInput, t_BufferedChecksumIndexInput, ::org::apache::lucene::store::ChecksumIndexInput, BufferedChecksumIndexInput, t_BufferedChecksumIndexInput_init_, 0, 0, t_BufferedChecksumIndexInput__fields_, 0, 0);

        void t_BufferedChecksumIndexInput::install(PyObject *module)
        {
          installType(&PY_TYPE(BufferedChecksumIndexInput), module, "BufferedChecksumIndexInput", 0);
        }

        void t_BufferedChecksumIndexInput::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(BufferedChecksumIndexInput).tp_dict, "class_", make_descriptor(BufferedChecksumIndexInput::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(BufferedChecksumIndexInput).tp_dict, "wrapfn_", make_descriptor(t_BufferedChecksumIndexInput::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(BufferedChecksumIndexInput).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_BufferedChecksumIndexInput_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, BufferedChecksumIndexInput::initializeClass, 1)))
            return NULL;
          return t_BufferedChecksumIndexInput::wrap_Object(BufferedChecksumIndexInput(((t_BufferedChecksumIndexInput *) arg)->object.this$));
        }
        static PyObject *t_BufferedChecksumIndexInput_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, BufferedChecksumIndexInput::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_BufferedChecksumIndexInput_init_(t_BufferedChecksumIndexInput *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::store::IndexInput a0((jobject) NULL);
          BufferedChecksumIndexInput object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::store::IndexInput::initializeClass, &a0))
          {
            INT_CALL(object = BufferedChecksumIndexInput(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_BufferedChecksumIndexInput_clone(t_BufferedChecksumIndexInput *self, PyObject *args)
        {
          ::org::apache::lucene::store::IndexInput result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.clone());
            return ::org::apache::lucene::store::t_IndexInput::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(BufferedChecksumIndexInput), (PyObject *) self, "clone", args, 2);
        }

        static PyObject *t_BufferedChecksumIndexInput_close(t_BufferedChecksumIndexInput *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.close());
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(BufferedChecksumIndexInput), (PyObject *) self, "close", args, 2);
        }

        static PyObject *t_BufferedChecksumIndexInput_getChecksum(t_BufferedChecksumIndexInput *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getChecksum());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(BufferedChecksumIndexInput), (PyObject *) self, "getChecksum", args, 2);
        }

        static PyObject *t_BufferedChecksumIndexInput_getFilePointer(t_BufferedChecksumIndexInput *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getFilePointer());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(BufferedChecksumIndexInput), (PyObject *) self, "getFilePointer", args, 2);
        }

        static PyObject *t_BufferedChecksumIndexInput_length(t_BufferedChecksumIndexInput *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.length());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(BufferedChecksumIndexInput), (PyObject *) self, "length", args, 2);
        }

        static PyObject *t_BufferedChecksumIndexInput_readByte(t_BufferedChecksumIndexInput *self, PyObject *args)
        {
          jbyte result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.readByte());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(BufferedChecksumIndexInput), (PyObject *) self, "readByte", args, 2);
        }

        static PyObject *t_BufferedChecksumIndexInput_readBytes(t_BufferedChecksumIndexInput *self, PyObject *args)
        {
          JArray< jbyte > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[BII", &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.readBytes(a0, a1, a2));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(BufferedChecksumIndexInput), (PyObject *) self, "readBytes", args, 2);
        }

        static PyObject *t_BufferedChecksumIndexInput_slice(t_BufferedChecksumIndexInput *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          jlong a1;
          jlong a2;
          ::org::apache::lucene::store::IndexInput result((jobject) NULL);

          if (!parseArgs(args, "sJJ", &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.slice(a0, a1, a2));
            return ::org::apache::lucene::store::t_IndexInput::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(BufferedChecksumIndexInput), (PyObject *) self, "slice", args, 2);
        }

        static PyObject *t_BufferedChecksumIndexInput_get__checksum(t_BufferedChecksumIndexInput *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getChecksum());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }

        static PyObject *t_BufferedChecksumIndexInput_get__filePointer(t_BufferedChecksumIndexInput *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getFilePointer());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/range/DoubleRangeFacetCounts.h"
#include "org/apache/lucene/queries/function/ValueSource.h"
#include "org/apache/lucene/facet/range/DoubleRange.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/Filter.h"
#include "org/apache/lucene/facet/FacetsCollector.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace range {

          ::java::lang::Class *DoubleRangeFacetCounts::class$ = NULL;
          jmethodID *DoubleRangeFacetCounts::mids$ = NULL;
          bool DoubleRangeFacetCounts::live$ = false;

          jclass DoubleRangeFacetCounts::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/range/DoubleRangeFacetCounts");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_9ae8847d] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/facet/FacetsCollector;[Lorg/apache/lucene/facet/range/DoubleRange;)V");
              mids$[mid_init$_828c1751] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/queries/function/ValueSource;Lorg/apache/lucene/facet/FacetsCollector;[Lorg/apache/lucene/facet/range/DoubleRange;)V");
              mids$[mid_init$_f6d04191] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/queries/function/ValueSource;Lorg/apache/lucene/facet/FacetsCollector;Lorg/apache/lucene/search/Filter;[Lorg/apache/lucene/facet/range/DoubleRange;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          DoubleRangeFacetCounts::DoubleRangeFacetCounts(const ::java::lang::String & a0, const ::org::apache::lucene::facet::FacetsCollector & a1, const JArray< ::org::apache::lucene::facet::range::DoubleRange > & a2) : ::org::apache::lucene::facet::range::RangeFacetCounts(env->newObject(initializeClass, &mids$, mid_init$_9ae8847d, a0.this$, a1.this$, a2.this$)) {}

          DoubleRangeFacetCounts::DoubleRangeFacetCounts(const ::java::lang::String & a0, const ::org::apache::lucene::queries::function::ValueSource & a1, const ::org::apache::lucene::facet::FacetsCollector & a2, const JArray< ::org::apache::lucene::facet::range::DoubleRange > & a3) : ::org::apache::lucene::facet::range::RangeFacetCounts(env->newObject(initializeClass, &mids$, mid_init$_828c1751, a0.this$, a1.this$, a2.this$, a3.this$)) {}

          DoubleRangeFacetCounts::DoubleRangeFacetCounts(const ::java::lang::String & a0, const ::org::apache::lucene::queries::function::ValueSource & a1, const ::org::apache::lucene::facet::FacetsCollector & a2, const ::org::apache::lucene::search::Filter & a3, const JArray< ::org::apache::lucene::facet::range::DoubleRange > & a4) : ::org::apache::lucene::facet::range::RangeFacetCounts(env->newObject(initializeClass, &mids$, mid_init$_f6d04191, a0.this$, a1.this$, a2.this$, a3.this$, a4.this$)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace range {
          static PyObject *t_DoubleRangeFacetCounts_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DoubleRangeFacetCounts_instance_(PyTypeObject *type, PyObject *arg);
          static int t_DoubleRangeFacetCounts_init_(t_DoubleRangeFacetCounts *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_DoubleRangeFacetCounts__methods_[] = {
            DECLARE_METHOD(t_DoubleRangeFacetCounts, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DoubleRangeFacetCounts, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(DoubleRangeFacetCounts, t_DoubleRangeFacetCounts, ::org::apache::lucene::facet::range::RangeFacetCounts, DoubleRangeFacetCounts, t_DoubleRangeFacetCounts_init_, 0, 0, 0, 0, 0);

          void t_DoubleRangeFacetCounts::install(PyObject *module)
          {
            installType(&PY_TYPE(DoubleRangeFacetCounts), module, "DoubleRangeFacetCounts", 0);
          }

          void t_DoubleRangeFacetCounts::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(DoubleRangeFacetCounts).tp_dict, "class_", make_descriptor(DoubleRangeFacetCounts::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(DoubleRangeFacetCounts).tp_dict, "wrapfn_", make_descriptor(t_DoubleRangeFacetCounts::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(DoubleRangeFacetCounts).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_DoubleRangeFacetCounts_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, DoubleRangeFacetCounts::initializeClass, 1)))
              return NULL;
            return t_DoubleRangeFacetCounts::wrap_Object(DoubleRangeFacetCounts(((t_DoubleRangeFacetCounts *) arg)->object.this$));
          }
          static PyObject *t_DoubleRangeFacetCounts_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, DoubleRangeFacetCounts::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_DoubleRangeFacetCounts_init_(t_DoubleRangeFacetCounts *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 3:
              {
                ::java::lang::String a0((jobject) NULL);
                ::org::apache::lucene::facet::FacetsCollector a1((jobject) NULL);
                JArray< ::org::apache::lucene::facet::range::DoubleRange > a2((jobject) NULL);
                DoubleRangeFacetCounts object((jobject) NULL);

                if (!parseArgs(args, "sk[k", ::org::apache::lucene::facet::FacetsCollector::initializeClass, ::org::apache::lucene::facet::range::DoubleRange::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = DoubleRangeFacetCounts(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 4:
              {
                ::java::lang::String a0((jobject) NULL);
                ::org::apache::lucene::queries::function::ValueSource a1((jobject) NULL);
                ::org::apache::lucene::facet::FacetsCollector a2((jobject) NULL);
                JArray< ::org::apache::lucene::facet::range::DoubleRange > a3((jobject) NULL);
                DoubleRangeFacetCounts object((jobject) NULL);

                if (!parseArgs(args, "skk[k", ::org::apache::lucene::queries::function::ValueSource::initializeClass, ::org::apache::lucene::facet::FacetsCollector::initializeClass, ::org::apache::lucene::facet::range::DoubleRange::initializeClass, &a0, &a1, &a2, &a3))
                {
                  INT_CALL(object = DoubleRangeFacetCounts(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 5:
              {
                ::java::lang::String a0((jobject) NULL);
                ::org::apache::lucene::queries::function::ValueSource a1((jobject) NULL);
                ::org::apache::lucene::facet::FacetsCollector a2((jobject) NULL);
                ::org::apache::lucene::search::Filter a3((jobject) NULL);
                JArray< ::org::apache::lucene::facet::range::DoubleRange > a4((jobject) NULL);
                DoubleRangeFacetCounts object((jobject) NULL);

                if (!parseArgs(args, "skkk[k", ::org::apache::lucene::queries::function::ValueSource::initializeClass, ::org::apache::lucene::facet::FacetsCollector::initializeClass, ::org::apache::lucene::search::Filter::initializeClass, ::org::apache::lucene::facet::range::DoubleRange::initializeClass, &a0, &a1, &a2, &a3, &a4))
                {
                  INT_CALL(object = DoubleRangeFacetCounts(a0, a1, a2, a3, a4));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/util/RollingCharBuffer.h"
#include "java/io/IOException.h"
#include "java/io/Reader.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {

          ::java::lang::Class *RollingCharBuffer::class$ = NULL;
          jmethodID *RollingCharBuffer::mids$ = NULL;
          bool RollingCharBuffer::live$ = false;

          jclass RollingCharBuffer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/util/RollingCharBuffer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_freeBefore_39c7bd3c] = env->getMethodID(cls, "freeBefore", "(I)V");
              mids$[mid_get_39c7bd23] = env->getMethodID(cls, "get", "(I)I");
              mids$[mid_get_acd005cf] = env->getMethodID(cls, "get", "(II)[C");
              mids$[mid_reset_cf2e3c10] = env->getMethodID(cls, "reset", "(Ljava/io/Reader;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          RollingCharBuffer::RollingCharBuffer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          void RollingCharBuffer::freeBefore(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_freeBefore_39c7bd3c], a0);
          }

          jint RollingCharBuffer::get(jint a0) const
          {
            return env->callIntMethod(this$, mids$[mid_get_39c7bd23], a0);
          }

          JArray< jchar > RollingCharBuffer::get(jint a0, jint a1) const
          {
            return JArray< jchar >(env->callObjectMethod(this$, mids$[mid_get_acd005cf], a0, a1));
          }

          void RollingCharBuffer::reset(const ::java::io::Reader & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_reset_cf2e3c10], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {
          static PyObject *t_RollingCharBuffer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_RollingCharBuffer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_RollingCharBuffer_init_(t_RollingCharBuffer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_RollingCharBuffer_freeBefore(t_RollingCharBuffer *self, PyObject *arg);
          static PyObject *t_RollingCharBuffer_get(t_RollingCharBuffer *self, PyObject *args);
          static PyObject *t_RollingCharBuffer_reset(t_RollingCharBuffer *self, PyObject *arg);

          static PyMethodDef t_RollingCharBuffer__methods_[] = {
            DECLARE_METHOD(t_RollingCharBuffer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_RollingCharBuffer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_RollingCharBuffer, freeBefore, METH_O),
            DECLARE_METHOD(t_RollingCharBuffer, get, METH_VARARGS),
            DECLARE_METHOD(t_RollingCharBuffer, reset, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(RollingCharBuffer, t_RollingCharBuffer, ::java::lang::Object, RollingCharBuffer, t_RollingCharBuffer_init_, 0, 0, 0, 0, 0);

          void t_RollingCharBuffer::install(PyObject *module)
          {
            installType(&PY_TYPE(RollingCharBuffer), module, "RollingCharBuffer", 0);
          }

          void t_RollingCharBuffer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(RollingCharBuffer).tp_dict, "class_", make_descriptor(RollingCharBuffer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(RollingCharBuffer).tp_dict, "wrapfn_", make_descriptor(t_RollingCharBuffer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(RollingCharBuffer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_RollingCharBuffer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, RollingCharBuffer::initializeClass, 1)))
              return NULL;
            return t_RollingCharBuffer::wrap_Object(RollingCharBuffer(((t_RollingCharBuffer *) arg)->object.this$));
          }
          static PyObject *t_RollingCharBuffer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, RollingCharBuffer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_RollingCharBuffer_init_(t_RollingCharBuffer *self, PyObject *args, PyObject *kwds)
          {
            RollingCharBuffer object((jobject) NULL);

            INT_CALL(object = RollingCharBuffer());
            self->object = object;

            return 0;
          }

          static PyObject *t_RollingCharBuffer_freeBefore(t_RollingCharBuffer *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.freeBefore(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "freeBefore", arg);
            return NULL;
          }

          static PyObject *t_RollingCharBuffer_get(t_RollingCharBuffer *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                jint a0;
                jint result;

                if (!parseArgs(args, "I", &a0))
                {
                  OBJ_CALL(result = self->object.get(a0));
                  return PyInt_FromLong((long) result);
                }
              }
              break;
             case 2:
              {
                jint a0;
                jint a1;
                JArray< jchar > result((jobject) NULL);

                if (!parseArgs(args, "II", &a0, &a1))
                {
                  OBJ_CALL(result = self->object.get(a0, a1));
                  return result.wrap();
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "get", args);
            return NULL;
          }

          static PyObject *t_RollingCharBuffer_reset(t_RollingCharBuffer *self, PyObject *arg)
          {
            ::java::io::Reader a0((jobject) NULL);

            if (!parseArg(arg, "k", ::java::io::Reader::initializeClass, &a0))
            {
              OBJ_CALL(self->object.reset(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "reset", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/DocumentValueSourceDictionary.h"
#include "org/apache/lucene/queries/function/ValueSource.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/suggest/InputIterator.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {

          ::java::lang::Class *DocumentValueSourceDictionary::class$ = NULL;
          jmethodID *DocumentValueSourceDictionary::mids$ = NULL;
          bool DocumentValueSourceDictionary::live$ = false;

          jclass DocumentValueSourceDictionary::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/DocumentValueSourceDictionary");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_11b82207] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/IndexReader;Ljava/lang/String;Lorg/apache/lucene/queries/function/ValueSource;)V");
              mids$[mid_init$_c3072aa9] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/IndexReader;Ljava/lang/String;Lorg/apache/lucene/queries/function/ValueSource;Ljava/lang/String;)V");
              mids$[mid_init$_8f8f3fa3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/IndexReader;Ljava/lang/String;Lorg/apache/lucene/queries/function/ValueSource;Ljava/lang/String;Ljava/lang/String;)V");
              mids$[mid_getEntryIterator_23dc46b1] = env->getMethodID(cls, "getEntryIterator", "()Lorg/apache/lucene/search/suggest/InputIterator;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          DocumentValueSourceDictionary::DocumentValueSourceDictionary(const ::org::apache::lucene::index::IndexReader & a0, const ::java::lang::String & a1, const ::org::apache::lucene::queries::function::ValueSource & a2) : ::org::apache::lucene::search::suggest::DocumentDictionary(env->newObject(initializeClass, &mids$, mid_init$_11b82207, a0.this$, a1.this$, a2.this$)) {}

          DocumentValueSourceDictionary::DocumentValueSourceDictionary(const ::org::apache::lucene::index::IndexReader & a0, const ::java::lang::String & a1, const ::org::apache::lucene::queries::function::ValueSource & a2, const ::java::lang::String & a3) : ::org::apache::lucene::search::suggest::DocumentDictionary(env->newObject(initializeClass, &mids$, mid_init$_c3072aa9, a0.this$, a1.this$, a2.this$, a3.this$)) {}

          DocumentValueSourceDictionary::DocumentValueSourceDictionary(const ::org::apache::lucene::index::IndexReader & a0, const ::java::lang::String & a1, const ::org::apache::lucene::queries::function::ValueSource & a2, const ::java::lang::String & a3, const ::java::lang::String & a4) : ::org::apache::lucene::search::suggest::DocumentDictionary(env->newObject(initializeClass, &mids$, mid_init$_8f8f3fa3, a0.this$, a1.this$, a2.this$, a3.this$, a4.this$)) {}

          ::org::apache::lucene::search::suggest::InputIterator DocumentValueSourceDictionary::getEntryIterator() const
          {
            return ::org::apache::lucene::search::suggest::InputIterator(env->callObjectMethod(this$, mids$[mid_getEntryIterator_23dc46b1]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          static PyObject *t_DocumentValueSourceDictionary_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DocumentValueSourceDictionary_instance_(PyTypeObject *type, PyObject *arg);
          static int t_DocumentValueSourceDictionary_init_(t_DocumentValueSourceDictionary *self, PyObject *args, PyObject *kwds);
          static PyObject *t_DocumentValueSourceDictionary_getEntryIterator(t_DocumentValueSourceDictionary *self, PyObject *args);
          static PyObject *t_DocumentValueSourceDictionary_get__entryIterator(t_DocumentValueSourceDictionary *self, void *data);
          static PyGetSetDef t_DocumentValueSourceDictionary__fields_[] = {
            DECLARE_GET_FIELD(t_DocumentValueSourceDictionary, entryIterator),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_DocumentValueSourceDictionary__methods_[] = {
            DECLARE_METHOD(t_DocumentValueSourceDictionary, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DocumentValueSourceDictionary, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DocumentValueSourceDictionary, getEntryIterator, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(DocumentValueSourceDictionary, t_DocumentValueSourceDictionary, ::org::apache::lucene::search::suggest::DocumentDictionary, DocumentValueSourceDictionary, t_DocumentValueSourceDictionary_init_, 0, 0, t_DocumentValueSourceDictionary__fields_, 0, 0);

          void t_DocumentValueSourceDictionary::install(PyObject *module)
          {
            installType(&PY_TYPE(DocumentValueSourceDictionary), module, "DocumentValueSourceDictionary", 0);
          }

          void t_DocumentValueSourceDictionary::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(DocumentValueSourceDictionary).tp_dict, "class_", make_descriptor(DocumentValueSourceDictionary::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(DocumentValueSourceDictionary).tp_dict, "wrapfn_", make_descriptor(t_DocumentValueSourceDictionary::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(DocumentValueSourceDictionary).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_DocumentValueSourceDictionary_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, DocumentValueSourceDictionary::initializeClass, 1)))
              return NULL;
            return t_DocumentValueSourceDictionary::wrap_Object(DocumentValueSourceDictionary(((t_DocumentValueSourceDictionary *) arg)->object.this$));
          }
          static PyObject *t_DocumentValueSourceDictionary_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, DocumentValueSourceDictionary::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_DocumentValueSourceDictionary_init_(t_DocumentValueSourceDictionary *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 3:
              {
                ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                ::org::apache::lucene::queries::function::ValueSource a2((jobject) NULL);
                DocumentValueSourceDictionary object((jobject) NULL);

                if (!parseArgs(args, "ksk", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::queries::function::ValueSource::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = DocumentValueSourceDictionary(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 4:
              {
                ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                ::org::apache::lucene::queries::function::ValueSource a2((jobject) NULL);
                ::java::lang::String a3((jobject) NULL);
                DocumentValueSourceDictionary object((jobject) NULL);

                if (!parseArgs(args, "ksks", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::queries::function::ValueSource::initializeClass, &a0, &a1, &a2, &a3))
                {
                  INT_CALL(object = DocumentValueSourceDictionary(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 5:
              {
                ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                ::org::apache::lucene::queries::function::ValueSource a2((jobject) NULL);
                ::java::lang::String a3((jobject) NULL);
                ::java::lang::String a4((jobject) NULL);
                DocumentValueSourceDictionary object((jobject) NULL);

                if (!parseArgs(args, "kskss", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::queries::function::ValueSource::initializeClass, &a0, &a1, &a2, &a3, &a4))
                {
                  INT_CALL(object = DocumentValueSourceDictionary(a0, a1, a2, a3, a4));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_DocumentValueSourceDictionary_getEntryIterator(t_DocumentValueSourceDictionary *self, PyObject *args)
          {
            ::org::apache::lucene::search::suggest::InputIterator result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getEntryIterator());
              return ::org::apache::lucene::search::suggest::t_InputIterator::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(DocumentValueSourceDictionary), (PyObject *) self, "getEntryIterator", args, 2);
          }

          static PyObject *t_DocumentValueSourceDictionary_get__entryIterator(t_DocumentValueSourceDictionary *self, void *data)
          {
            ::org::apache::lucene::search::suggest::InputIterator value((jobject) NULL);
            OBJ_CALL(value = self->object.getEntryIterator());
            return ::org::apache::lucene::search::suggest::t_InputIterator::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/egothor/stemmer/Reduce.h"
#include "org/egothor/stemmer/Trie.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace egothor {
    namespace stemmer {

      ::java::lang::Class *Reduce::class$ = NULL;
      jmethodID *Reduce::mids$ = NULL;
      bool Reduce::live$ = false;

      jclass Reduce::initializeClass(bool getOnly)
      {
        if (getOnly)
          return (jclass) (live$ ? class$->this$ : NULL);
        if (class$ == NULL)
        {
          jclass cls = (jclass) env->findClass("org/egothor/stemmer/Reduce");

          mids$ = new jmethodID[max_mid];
          mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
          mids$[mid_optimize_c26c0475] = env->getMethodID(cls, "optimize", "(Lorg/egothor/stemmer/Trie;)Lorg/egothor/stemmer/Trie;");

          class$ = (::java::lang::Class *) new JObject(cls);
          live$ = true;
        }
        return (jclass) class$->this$;
      }

      Reduce::Reduce() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

      ::org::egothor::stemmer::Trie Reduce::optimize(const ::org::egothor::stemmer::Trie & a0) const
      {
        return ::org::egothor::stemmer::Trie(env->callObjectMethod(this$, mids$[mid_optimize_c26c0475], a0.this$));
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace egothor {
    namespace stemmer {
      static PyObject *t_Reduce_cast_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_Reduce_instance_(PyTypeObject *type, PyObject *arg);
      static int t_Reduce_init_(t_Reduce *self, PyObject *args, PyObject *kwds);
      static PyObject *t_Reduce_optimize(t_Reduce *self, PyObject *arg);

      static PyMethodDef t_Reduce__methods_[] = {
        DECLARE_METHOD(t_Reduce, cast_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_Reduce, instance_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_Reduce, optimize, METH_O),
        { NULL, NULL, 0, NULL }
      };

      DECLARE_TYPE(Reduce, t_Reduce, ::java::lang::Object, Reduce, t_Reduce_init_, 0, 0, 0, 0, 0);

      void t_Reduce::install(PyObject *module)
      {
        installType(&PY_TYPE(Reduce), module, "Reduce", 0);
      }

      void t_Reduce::initialize(PyObject *module)
      {
        PyDict_SetItemString(PY_TYPE(Reduce).tp_dict, "class_", make_descriptor(Reduce::initializeClass, 1));
        PyDict_SetItemString(PY_TYPE(Reduce).tp_dict, "wrapfn_", make_descriptor(t_Reduce::wrap_jobject));
        PyDict_SetItemString(PY_TYPE(Reduce).tp_dict, "boxfn_", make_descriptor(boxObject));
      }

      static PyObject *t_Reduce_cast_(PyTypeObject *type, PyObject *arg)
      {
        if (!(arg = castCheck(arg, Reduce::initializeClass, 1)))
          return NULL;
        return t_Reduce::wrap_Object(Reduce(((t_Reduce *) arg)->object.this$));
      }
      static PyObject *t_Reduce_instance_(PyTypeObject *type, PyObject *arg)
      {
        if (!castCheck(arg, Reduce::initializeClass, 0))
          Py_RETURN_FALSE;
        Py_RETURN_TRUE;
      }

      static int t_Reduce_init_(t_Reduce *self, PyObject *args, PyObject *kwds)
      {
        Reduce object((jobject) NULL);

        INT_CALL(object = Reduce());
        self->object = object;

        return 0;
      }

      static PyObject *t_Reduce_optimize(t_Reduce *self, PyObject *arg)
      {
        ::org::egothor::stemmer::Trie a0((jobject) NULL);
        ::org::egothor::stemmer::Trie result((jobject) NULL);

        if (!parseArg(arg, "k", ::org::egothor::stemmer::Trie::initializeClass, &a0))
        {
          OBJ_CALL(result = self->object.optimize(a0));
          return ::org::egothor::stemmer::t_Trie::wrap_Object(result);
        }

        PyErr_SetArgsError((PyObject *) self, "optimize", arg);
        return NULL;
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/NoMergePolicy.h"
#include "org/apache/lucene/index/SegmentCommitInfo.h"
#include "org/apache/lucene/index/SegmentInfos.h"
#include "org/apache/lucene/index/MergePolicy$MergeSpecification.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/IndexWriter.h"
#include "java/lang/Boolean.h"
#include "org/apache/lucene/index/MergeTrigger.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *NoMergePolicy::class$ = NULL;
        jmethodID *NoMergePolicy::mids$ = NULL;
        bool NoMergePolicy::live$ = false;
        ::org::apache::lucene::index::MergePolicy *NoMergePolicy::INSTANCE = NULL;

        jclass NoMergePolicy::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/NoMergePolicy");

            mids$ = new jmethodID[max_mid];
            mids$[mid_findForcedDeletesMerges_581dbc49] = env->getMethodID(cls, "findForcedDeletesMerges", "(Lorg/apache/lucene/index/SegmentInfos;Lorg/apache/lucene/index/IndexWriter;)Lorg/apache/lucene/index/MergePolicy$MergeSpecification;");
            mids$[mid_findForcedMerges_4fe4a5b5] = env->getMethodID(cls, "findForcedMerges", "(Lorg/apache/lucene/index/SegmentInfos;ILjava/util/Map;Lorg/apache/lucene/index/IndexWriter;)Lorg/apache/lucene/index/MergePolicy$MergeSpecification;");
            mids$[mid_findMerges_cada0df0] = env->getMethodID(cls, "findMerges", "(Lorg/apache/lucene/index/MergeTrigger;Lorg/apache/lucene/index/SegmentInfos;Lorg/apache/lucene/index/IndexWriter;)Lorg/apache/lucene/index/MergePolicy$MergeSpecification;");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
            mids$[mid_useCompoundFile_70dc8488] = env->getMethodID(cls, "useCompoundFile", "(Lorg/apache/lucene/index/SegmentInfos;Lorg/apache/lucene/index/SegmentCommitInfo;Lorg/apache/lucene/index/IndexWriter;)Z");
            mids$[mid_size_5454cb07] = env->getMethodID(cls, "size", "(Lorg/apache/lucene/index/SegmentCommitInfo;Lorg/apache/lucene/index/IndexWriter;)J");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            INSTANCE = new ::org::apache::lucene::index::MergePolicy(env->getStaticObjectField(cls, "INSTANCE", "Lorg/apache/lucene/index/MergePolicy;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::index::MergePolicy$MergeSpecification NoMergePolicy::findForcedDeletesMerges(const ::org::apache::lucene::index::SegmentInfos & a0, const ::org::apache::lucene::index::IndexWriter & a1) const
        {
          return ::org::apache::lucene::index::MergePolicy$MergeSpecification(env->callObjectMethod(this$, mids$[mid_findForcedDeletesMerges_581dbc49], a0.this$, a1.this$));
        }

        ::org::apache::lucene::index::MergePolicy$MergeSpecification NoMergePolicy::findForcedMerges(const ::org::apache::lucene::index::SegmentInfos & a0, jint a1, const ::java::util::Map & a2, const ::org::apache::lucene::index::IndexWriter & a3) const
        {
          return ::org::apache::lucene::index::MergePolicy$MergeSpecification(env->callObjectMethod(this$, mids$[mid_findForcedMerges_4fe4a5b5], a0.this$, a1, a2.this$, a3.this$));
        }

        ::org::apache::lucene::index::MergePolicy$MergeSpecification NoMergePolicy::findMerges(const ::org::apache::lucene::index::MergeTrigger & a0, const ::org::apache::lucene::index::SegmentInfos & a1, const ::org::apache::lucene::index::IndexWriter & a2) const
        {
          return ::org::apache::lucene::index::MergePolicy$MergeSpecification(env->callObjectMethod(this$, mids$[mid_findMerges_cada0df0], a0.this$, a1.this$, a2.this$));
        }

        ::java::lang::String NoMergePolicy::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }

        jboolean NoMergePolicy::useCompoundFile(const ::org::apache::lucene::index::SegmentInfos & a0, const ::org::apache::lucene::index::SegmentCommitInfo & a1, const ::org::apache::lucene::index::IndexWriter & a2) const
        {
          return env->callBooleanMethod(this$, mids$[mid_useCompoundFile_70dc8488], a0.this$, a1.this$, a2.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_NoMergePolicy_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NoMergePolicy_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NoMergePolicy_findForcedDeletesMerges(t_NoMergePolicy *self, PyObject *args);
        static PyObject *t_NoMergePolicy_findForcedMerges(t_NoMergePolicy *self, PyObject *args);
        static PyObject *t_NoMergePolicy_findMerges(t_NoMergePolicy *self, PyObject *args);
        static PyObject *t_NoMergePolicy_toString(t_NoMergePolicy *self, PyObject *args);
        static PyObject *t_NoMergePolicy_useCompoundFile(t_NoMergePolicy *self, PyObject *args);

        static PyMethodDef t_NoMergePolicy__methods_[] = {
          DECLARE_METHOD(t_NoMergePolicy, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NoMergePolicy, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NoMergePolicy, findForcedDeletesMerges, METH_VARARGS),
          DECLARE_METHOD(t_NoMergePolicy, findForcedMerges, METH_VARARGS),
          DECLARE_METHOD(t_NoMergePolicy, findMerges, METH_VARARGS),
          DECLARE_METHOD(t_NoMergePolicy, toString, METH_VARARGS),
          DECLARE_METHOD(t_NoMergePolicy, useCompoundFile, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(NoMergePolicy, t_NoMergePolicy, ::org::apache::lucene::index::MergePolicy, NoMergePolicy, abstract_init, 0, 0, 0, 0, 0);

        void t_NoMergePolicy::install(PyObject *module)
        {
          installType(&PY_TYPE(NoMergePolicy), module, "NoMergePolicy", 0);
        }

        void t_NoMergePolicy::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(NoMergePolicy).tp_dict, "class_", make_descriptor(NoMergePolicy::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(NoMergePolicy).tp_dict, "wrapfn_", make_descriptor(t_NoMergePolicy::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(NoMergePolicy).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(NoMergePolicy::initializeClass);
          PyDict_SetItemString(PY_TYPE(NoMergePolicy).tp_dict, "INSTANCE", make_descriptor(::org::apache::lucene::index::t_MergePolicy::wrap_Object(*NoMergePolicy::INSTANCE)));
        }

        static PyObject *t_NoMergePolicy_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, NoMergePolicy::initializeClass, 1)))
            return NULL;
          return t_NoMergePolicy::wrap_Object(NoMergePolicy(((t_NoMergePolicy *) arg)->object.this$));
        }
        static PyObject *t_NoMergePolicy_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, NoMergePolicy::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_NoMergePolicy_findForcedDeletesMerges(t_NoMergePolicy *self, PyObject *args)
        {
          ::org::apache::lucene::index::SegmentInfos a0((jobject) NULL);
          ::org::apache::lucene::index::IndexWriter a1((jobject) NULL);
          ::org::apache::lucene::index::MergePolicy$MergeSpecification result((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::index::SegmentInfos::initializeClass, ::org::apache::lucene::index::IndexWriter::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.findForcedDeletesMerges(a0, a1));
            return ::org::apache::lucene::index::t_MergePolicy$MergeSpecification::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(NoMergePolicy), (PyObject *) self, "findForcedDeletesMerges", args, 2);
        }

        static PyObject *t_NoMergePolicy_findForcedMerges(t_NoMergePolicy *self, PyObject *args)
        {
          ::org::apache::lucene::index::SegmentInfos a0((jobject) NULL);
          jint a1;
          ::java::util::Map a2((jobject) NULL);
          PyTypeObject **p2;
          ::org::apache::lucene::index::IndexWriter a3((jobject) NULL);
          ::org::apache::lucene::index::MergePolicy$MergeSpecification result((jobject) NULL);

          if (!parseArgs(args, "kIKk", ::org::apache::lucene::index::SegmentInfos::initializeClass, ::java::util::Map::initializeClass, ::org::apache::lucene::index::IndexWriter::initializeClass, &a0, &a1, &a2, &p2, ::java::util::t_Map::parameters_, &a3))
          {
            OBJ_CALL(result = self->object.findForcedMerges(a0, a1, a2, a3));
            return ::org::apache::lucene::index::t_MergePolicy$MergeSpecification::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(NoMergePolicy), (PyObject *) self, "findForcedMerges", args, 2);
        }

        static PyObject *t_NoMergePolicy_findMerges(t_NoMergePolicy *self, PyObject *args)
        {
          ::org::apache::lucene::index::MergeTrigger a0((jobject) NULL);
          PyTypeObject **p0;
          ::org::apache::lucene::index::SegmentInfos a1((jobject) NULL);
          ::org::apache::lucene::index::IndexWriter a2((jobject) NULL);
          ::org::apache::lucene::index::MergePolicy$MergeSpecification result((jobject) NULL);

          if (!parseArgs(args, "Kkk", ::org::apache::lucene::index::MergeTrigger::initializeClass, ::org::apache::lucene::index::SegmentInfos::initializeClass, ::org::apache::lucene::index::IndexWriter::initializeClass, &a0, &p0, ::org::apache::lucene::index::t_MergeTrigger::parameters_, &a1, &a2))
          {
            OBJ_CALL(result = self->object.findMerges(a0, a1, a2));
            return ::org::apache::lucene::index::t_MergePolicy$MergeSpecification::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(NoMergePolicy), (PyObject *) self, "findMerges", args, 2);
        }

        static PyObject *t_NoMergePolicy_toString(t_NoMergePolicy *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(NoMergePolicy), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_NoMergePolicy_useCompoundFile(t_NoMergePolicy *self, PyObject *args)
        {
          ::org::apache::lucene::index::SegmentInfos a0((jobject) NULL);
          ::org::apache::lucene::index::SegmentCommitInfo a1((jobject) NULL);
          ::org::apache::lucene::index::IndexWriter a2((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "kkk", ::org::apache::lucene::index::SegmentInfos::initializeClass, ::org::apache::lucene::index::SegmentCommitInfo::initializeClass, ::org::apache::lucene::index::IndexWriter::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.useCompoundFile(a0, a1, a2));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(NoMergePolicy), (PyObject *) self, "useCompoundFile", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/IntBlockPool$DirectAllocator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *IntBlockPool$DirectAllocator::class$ = NULL;
        jmethodID *IntBlockPool$DirectAllocator::mids$ = NULL;
        bool IntBlockPool$DirectAllocator::live$ = false;

        jclass IntBlockPool$DirectAllocator::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/IntBlockPool$DirectAllocator");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_recycleIntBlocks_9f62f13c] = env->getMethodID(cls, "recycleIntBlocks", "([[III)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        IntBlockPool$DirectAllocator::IntBlockPool$DirectAllocator() : ::org::apache::lucene::util::IntBlockPool$Allocator(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void IntBlockPool$DirectAllocator::recycleIntBlocks(const JArray< JArray< jint > > & a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_recycleIntBlocks_9f62f13c], a0.this$, a1, a2);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_IntBlockPool$DirectAllocator_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IntBlockPool$DirectAllocator_instance_(PyTypeObject *type, PyObject *arg);
        static int t_IntBlockPool$DirectAllocator_init_(t_IntBlockPool$DirectAllocator *self, PyObject *args, PyObject *kwds);
        static PyObject *t_IntBlockPool$DirectAllocator_recycleIntBlocks(t_IntBlockPool$DirectAllocator *self, PyObject *args);

        static PyMethodDef t_IntBlockPool$DirectAllocator__methods_[] = {
          DECLARE_METHOD(t_IntBlockPool$DirectAllocator, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IntBlockPool$DirectAllocator, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IntBlockPool$DirectAllocator, recycleIntBlocks, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(IntBlockPool$DirectAllocator, t_IntBlockPool$DirectAllocator, ::org::apache::lucene::util::IntBlockPool$Allocator, IntBlockPool$DirectAllocator, t_IntBlockPool$DirectAllocator_init_, 0, 0, 0, 0, 0);

        void t_IntBlockPool$DirectAllocator::install(PyObject *module)
        {
          installType(&PY_TYPE(IntBlockPool$DirectAllocator), module, "IntBlockPool$DirectAllocator", 0);
        }

        void t_IntBlockPool$DirectAllocator::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(IntBlockPool$DirectAllocator).tp_dict, "class_", make_descriptor(IntBlockPool$DirectAllocator::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(IntBlockPool$DirectAllocator).tp_dict, "wrapfn_", make_descriptor(t_IntBlockPool$DirectAllocator::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(IntBlockPool$DirectAllocator).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_IntBlockPool$DirectAllocator_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IntBlockPool$DirectAllocator::initializeClass, 1)))
            return NULL;
          return t_IntBlockPool$DirectAllocator::wrap_Object(IntBlockPool$DirectAllocator(((t_IntBlockPool$DirectAllocator *) arg)->object.this$));
        }
        static PyObject *t_IntBlockPool$DirectAllocator_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IntBlockPool$DirectAllocator::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_IntBlockPool$DirectAllocator_init_(t_IntBlockPool$DirectAllocator *self, PyObject *args, PyObject *kwds)
        {
          IntBlockPool$DirectAllocator object((jobject) NULL);

          INT_CALL(object = IntBlockPool$DirectAllocator());
          self->object = object;

          return 0;
        }

        static PyObject *t_IntBlockPool$DirectAllocator_recycleIntBlocks(t_IntBlockPool$DirectAllocator *self, PyObject *args)
        {
          JArray< JArray< jint > > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[[III", &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.recycleIntBlocks(a0, a1, a2));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(IntBlockPool$DirectAllocator), (PyObject *) self, "recycleIntBlocks", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/pylucene/analysis/PythonTokenFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Throwable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace analysis {

        ::java::lang::Class *PythonTokenFilter::class$ = NULL;
        jmethodID *PythonTokenFilter::mids$ = NULL;
        bool PythonTokenFilter::live$ = false;

        jclass PythonTokenFilter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/pylucene/analysis/PythonTokenFilter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
            mids$[mid_finalize_54c6a166] = env->getMethodID(cls, "finalize", "()V");
            mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
            mids$[mid_pythonDecRef_54c6a166] = env->getMethodID(cls, "pythonDecRef", "()V");
            mids$[mid_pythonExtension_54c6a17a] = env->getMethodID(cls, "pythonExtension", "()J");
            mids$[mid_pythonExtension_0ee6df2f] = env->getMethodID(cls, "pythonExtension", "(J)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PythonTokenFilter::PythonTokenFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

        void PythonTokenFilter::finalize() const
        {
          env->callVoidMethod(this$, mids$[mid_finalize_54c6a166]);
        }

        jlong PythonTokenFilter::pythonExtension() const
        {
          return env->callLongMethod(this$, mids$[mid_pythonExtension_54c6a17a]);
        }

        void PythonTokenFilter::pythonExtension(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_pythonExtension_0ee6df2f], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace analysis {
        static PyObject *t_PythonTokenFilter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PythonTokenFilter_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PythonTokenFilter_init_(t_PythonTokenFilter *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PythonTokenFilter_finalize(t_PythonTokenFilter *self);
        static PyObject *t_PythonTokenFilter_pythonExtension(t_PythonTokenFilter *self, PyObject *args);
        static jboolean JNICALL t_PythonTokenFilter_incrementToken0(JNIEnv *jenv, jobject jobj);
        static void JNICALL t_PythonTokenFilter_pythonDecRef1(JNIEnv *jenv, jobject jobj);
        static PyObject *t_PythonTokenFilter_get__self(t_PythonTokenFilter *self, void *data);
        static PyGetSetDef t_PythonTokenFilter__fields_[] = {
          DECLARE_GET_FIELD(t_PythonTokenFilter, self),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PythonTokenFilter__methods_[] = {
          DECLARE_METHOD(t_PythonTokenFilter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonTokenFilter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonTokenFilter, finalize, METH_NOARGS),
          DECLARE_METHOD(t_PythonTokenFilter, pythonExtension, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PythonTokenFilter, t_PythonTokenFilter, ::org::apache::lucene::analysis::TokenFilter, PythonTokenFilter, t_PythonTokenFilter_init_, 0, 0, t_PythonTokenFilter__fields_, 0, 0);

        void t_PythonTokenFilter::install(PyObject *module)
        {
          installType(&PY_TYPE(PythonTokenFilter), module, "PythonTokenFilter", 1);
        }

        void t_PythonTokenFilter::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PythonTokenFilter).tp_dict, "class_", make_descriptor(PythonTokenFilter::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PythonTokenFilter).tp_dict, "wrapfn_", make_descriptor(t_PythonTokenFilter::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PythonTokenFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          jclass cls = env->getClass(PythonTokenFilter::initializeClass);
          JNINativeMethod methods[] = {
            { "incrementToken", "()Z", (void *) t_PythonTokenFilter_incrementToken0 },
            { "pythonDecRef", "()V", (void *) t_PythonTokenFilter_pythonDecRef1 },
          };
          env->registerNatives(cls, methods, 2);
        }

        static PyObject *t_PythonTokenFilter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PythonTokenFilter::initializeClass, 1)))
            return NULL;
          return t_PythonTokenFilter::wrap_Object(PythonTokenFilter(((t_PythonTokenFilter *) arg)->object.this$));
        }
        static PyObject *t_PythonTokenFilter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PythonTokenFilter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PythonTokenFilter_init_(t_PythonTokenFilter *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
          PythonTokenFilter object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
          {
            INT_CALL(object = PythonTokenFilter(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          Py_INCREF((PyObject *) self);
          self->object.pythonExtension((jlong) (Py_intptr_t) (void *) self);

          return 0;
        }

        static PyObject *t_PythonTokenFilter_finalize(t_PythonTokenFilter *self)
        {
          OBJ_CALL(self->object.finalize());
          Py_RETURN_NONE;
        }

        static PyObject *t_PythonTokenFilter_pythonExtension(t_PythonTokenFilter *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              jlong result;
              OBJ_CALL(result = self->object.pythonExtension());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }
            break;
           case 1:
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.pythonExtension(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "pythonExtension", args);
          return NULL;
        }

        static jboolean JNICALL t_PythonTokenFilter_incrementToken0(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonTokenFilter::mids$[PythonTokenFilter::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jboolean value;
          PyObject *result = PyObject_CallMethod(obj, "incrementToken", "");
          if (!result)
            throwPythonError();
          else if (parseArg(result, "Z", &value))
          {
            throwTypeError("incrementToken", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jboolean) 0;
        }

        static void JNICALL t_PythonTokenFilter_pythonDecRef1(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonTokenFilter::mids$[PythonTokenFilter::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            jenv->CallVoidMethod(jobj, PythonTokenFilter::mids$[PythonTokenFilter::mid_pythonExtension_0ee6df2f], (jlong) 0);
            env->finalizeObject(jenv, obj);
          }
        }

        static PyObject *t_PythonTokenFilter_get__self(t_PythonTokenFilter *self, void *data)
        {
          jlong ptr;
          OBJ_CALL(ptr = self->object.pythonExtension());
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            Py_INCREF(obj);
            return obj;
          }
          else
            Py_RETURN_NONE;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/tartarus/snowball/ext/TurkishStemmer.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {

        ::java::lang::Class *TurkishStemmer::class$ = NULL;
        jmethodID *TurkishStemmer::mids$ = NULL;
        bool TurkishStemmer::live$ = false;

        jclass TurkishStemmer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/tartarus/snowball/ext/TurkishStemmer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_stem_54c6a16a] = env->getMethodID(cls, "stem", "()Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        TurkishStemmer::TurkishStemmer() : ::org::tartarus::snowball::SnowballProgram(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jboolean TurkishStemmer::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        jint TurkishStemmer::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jboolean TurkishStemmer::stem() const
        {
          return env->callBooleanMethod(this$, mids$[mid_stem_54c6a16a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {
        static PyObject *t_TurkishStemmer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TurkishStemmer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_TurkishStemmer_init_(t_TurkishStemmer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_TurkishStemmer_equals(t_TurkishStemmer *self, PyObject *args);
        static PyObject *t_TurkishStemmer_hashCode(t_TurkishStemmer *self, PyObject *args);
        static PyObject *t_TurkishStemmer_stem(t_TurkishStemmer *self, PyObject *args);

        static PyMethodDef t_TurkishStemmer__methods_[] = {
          DECLARE_METHOD(t_TurkishStemmer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TurkishStemmer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TurkishStemmer, equals, METH_VARARGS),
          DECLARE_METHOD(t_TurkishStemmer, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_TurkishStemmer, stem, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TurkishStemmer, t_TurkishStemmer, ::org::tartarus::snowball::SnowballProgram, TurkishStemmer, t_TurkishStemmer_init_, 0, 0, 0, 0, 0);

        void t_TurkishStemmer::install(PyObject *module)
        {
          installType(&PY_TYPE(TurkishStemmer), module, "TurkishStemmer", 0);
        }

        void t_TurkishStemmer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TurkishStemmer).tp_dict, "class_", make_descriptor(TurkishStemmer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TurkishStemmer).tp_dict, "wrapfn_", make_descriptor(t_TurkishStemmer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TurkishStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TurkishStemmer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TurkishStemmer::initializeClass, 1)))
            return NULL;
          return t_TurkishStemmer::wrap_Object(TurkishStemmer(((t_TurkishStemmer *) arg)->object.this$));
        }
        static PyObject *t_TurkishStemmer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TurkishStemmer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_TurkishStemmer_init_(t_TurkishStemmer *self, PyObject *args, PyObject *kwds)
        {
          TurkishStemmer object((jobject) NULL);

          INT_CALL(object = TurkishStemmer());
          self->object = object;

          return 0;
        }

        static PyObject *t_TurkishStemmer_equals(t_TurkishStemmer *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(TurkishStemmer), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_TurkishStemmer_hashCode(t_TurkishStemmer *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(TurkishStemmer), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_TurkishStemmer_stem(t_TurkishStemmer *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.stem());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(TurkishStemmer), (PyObject *) self, "stem", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/tartarus/snowball/ext/LovinsStemmer.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {

        ::java::lang::Class *LovinsStemmer::class$ = NULL;
        jmethodID *LovinsStemmer::mids$ = NULL;
        bool LovinsStemmer::live$ = false;

        jclass LovinsStemmer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/tartarus/snowball/ext/LovinsStemmer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_stem_54c6a16a] = env->getMethodID(cls, "stem", "()Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        LovinsStemmer::LovinsStemmer() : ::org::tartarus::snowball::SnowballProgram(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jboolean LovinsStemmer::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        jint LovinsStemmer::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jboolean LovinsStemmer::stem() const
        {
          return env->callBooleanMethod(this$, mids$[mid_stem_54c6a16a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {
        static PyObject *t_LovinsStemmer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_LovinsStemmer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_LovinsStemmer_init_(t_LovinsStemmer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_LovinsStemmer_equals(t_LovinsStemmer *self, PyObject *args);
        static PyObject *t_LovinsStemmer_hashCode(t_LovinsStemmer *self, PyObject *args);
        static PyObject *t_LovinsStemmer_stem(t_LovinsStemmer *self, PyObject *args);

        static PyMethodDef t_LovinsStemmer__methods_[] = {
          DECLARE_METHOD(t_LovinsStemmer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LovinsStemmer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LovinsStemmer, equals, METH_VARARGS),
          DECLARE_METHOD(t_LovinsStemmer, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_LovinsStemmer, stem, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(LovinsStemmer, t_LovinsStemmer, ::org::tartarus::snowball::SnowballProgram, LovinsStemmer, t_LovinsStemmer_init_, 0, 0, 0, 0, 0);

        void t_LovinsStemmer::install(PyObject *module)
        {
          installType(&PY_TYPE(LovinsStemmer), module, "LovinsStemmer", 0);
        }

        void t_LovinsStemmer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(LovinsStemmer).tp_dict, "class_", make_descriptor(LovinsStemmer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(LovinsStemmer).tp_dict, "wrapfn_", make_descriptor(t_LovinsStemmer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(LovinsStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_LovinsStemmer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, LovinsStemmer::initializeClass, 1)))
            return NULL;
          return t_LovinsStemmer::wrap_Object(LovinsStemmer(((t_LovinsStemmer *) arg)->object.this$));
        }
        static PyObject *t_LovinsStemmer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, LovinsStemmer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_LovinsStemmer_init_(t_LovinsStemmer *self, PyObject *args, PyObject *kwds)
        {
          LovinsStemmer object((jobject) NULL);

          INT_CALL(object = LovinsStemmer());
          self->object = object;

          return 0;
        }

        static PyObject *t_LovinsStemmer_equals(t_LovinsStemmer *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(LovinsStemmer), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_LovinsStemmer_hashCode(t_LovinsStemmer *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(LovinsStemmer), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_LovinsStemmer_stem(t_LovinsStemmer *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.stem());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(LovinsStemmer), (PyObject *) self, "stem", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ngram/NGramFilterFactory.h"
#include "org/apache/lucene/analysis/TokenFilter.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ngram {

          ::java::lang::Class *NGramFilterFactory::class$ = NULL;
          jmethodID *NGramFilterFactory::mids$ = NULL;
          bool NGramFilterFactory::live$ = false;

          jclass NGramFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ngram/NGramFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_2969f76d] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenFilter;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          NGramFilterFactory::NGramFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenFilter NGramFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenFilter(env->callObjectMethod(this$, mids$[mid_create_2969f76d], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ngram {
          static PyObject *t_NGramFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_NGramFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_NGramFilterFactory_init_(t_NGramFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_NGramFilterFactory_create(t_NGramFilterFactory *self, PyObject *args);

          static PyMethodDef t_NGramFilterFactory__methods_[] = {
            DECLARE_METHOD(t_NGramFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NGramFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NGramFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(NGramFilterFactory, t_NGramFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, NGramFilterFactory, t_NGramFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_NGramFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(NGramFilterFactory), module, "NGramFilterFactory", 0);
          }

          void t_NGramFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(NGramFilterFactory).tp_dict, "class_", make_descriptor(NGramFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(NGramFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_NGramFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(NGramFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_NGramFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, NGramFilterFactory::initializeClass, 1)))
              return NULL;
            return t_NGramFilterFactory::wrap_Object(NGramFilterFactory(((t_NGramFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_NGramFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, NGramFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_NGramFilterFactory_init_(t_NGramFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            NGramFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = NGramFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_NGramFilterFactory_create(t_NGramFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(NGramFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/surround/query/NotQuery.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/surround/query/SrndQuery.h"
#include "org/apache/lucene/queryparser/surround/query/BasicQueryFactory.h"
#include "java/util/List.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Query.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace query {

            ::java::lang::Class *NotQuery::class$ = NULL;
            jmethodID *NotQuery::mids$ = NULL;
            bool NotQuery::live$ = false;

            jclass NotQuery::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/surround/query/NotQuery");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_f09ca325] = env->getMethodID(cls, "<init>", "(Ljava/util/List;Ljava/lang/String;)V");
                mids$[mid_makeLuceneQueryFieldNoBoost_1aaeee30] = env->getMethodID(cls, "makeLuceneQueryFieldNoBoost", "(Ljava/lang/String;Lorg/apache/lucene/queryparser/surround/query/BasicQueryFactory;)Lorg/apache/lucene/search/Query;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            NotQuery::NotQuery(const ::java::util::List & a0, const ::java::lang::String & a1) : ::org::apache::lucene::queryparser::surround::query::ComposedQuery(env->newObject(initializeClass, &mids$, mid_init$_f09ca325, a0.this$, a1.this$)) {}

            ::org::apache::lucene::search::Query NotQuery::makeLuceneQueryFieldNoBoost(const ::java::lang::String & a0, const ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory & a1) const
            {
              return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_makeLuceneQueryFieldNoBoost_1aaeee30], a0.this$, a1.this$));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace query {
            static PyObject *t_NotQuery_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_NotQuery_instance_(PyTypeObject *type, PyObject *arg);
            static int t_NotQuery_init_(t_NotQuery *self, PyObject *args, PyObject *kwds);
            static PyObject *t_NotQuery_makeLuceneQueryFieldNoBoost(t_NotQuery *self, PyObject *args);

            static PyMethodDef t_NotQuery__methods_[] = {
              DECLARE_METHOD(t_NotQuery, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_NotQuery, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_NotQuery, makeLuceneQueryFieldNoBoost, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(NotQuery, t_NotQuery, ::org::apache::lucene::queryparser::surround::query::ComposedQuery, NotQuery, t_NotQuery_init_, 0, 0, 0, 0, 0);

            void t_NotQuery::install(PyObject *module)
            {
              installType(&PY_TYPE(NotQuery), module, "NotQuery", 0);
            }

            void t_NotQuery::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(NotQuery).tp_dict, "class_", make_descriptor(NotQuery::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(NotQuery).tp_dict, "wrapfn_", make_descriptor(t_NotQuery::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(NotQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_NotQuery_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, NotQuery::initializeClass, 1)))
                return NULL;
              return t_NotQuery::wrap_Object(NotQuery(((t_NotQuery *) arg)->object.this$));
            }
            static PyObject *t_NotQuery_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, NotQuery::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_NotQuery_init_(t_NotQuery *self, PyObject *args, PyObject *kwds)
            {
              ::java::util::List a0((jobject) NULL);
              PyTypeObject **p0;
              ::java::lang::String a1((jobject) NULL);
              NotQuery object((jobject) NULL);

              if (!parseArgs(args, "Ks", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_, &a1))
              {
                INT_CALL(object = NotQuery(a0, a1));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_NotQuery_makeLuceneQueryFieldNoBoost(t_NotQuery *self, PyObject *args)
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory a1((jobject) NULL);
              ::org::apache::lucene::search::Query result((jobject) NULL);

              if (!parseArgs(args, "sk", ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = self->object.makeLuceneQueryFieldNoBoost(a0, a1));
                return ::org::apache::lucene::search::t_Query::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(NotQuery), (PyObject *) self, "makeLuceneQueryFieldNoBoost", args, 2);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/it/ItalianLightStemFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace it {

          ::java::lang::Class *ItalianLightStemFilter::class$ = NULL;
          jmethodID *ItalianLightStemFilter::mids$ = NULL;
          bool ItalianLightStemFilter::live$ = false;

          jclass ItalianLightStemFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/it/ItalianLightStemFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ItalianLightStemFilter::ItalianLightStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean ItalianLightStemFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace it {
          static PyObject *t_ItalianLightStemFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ItalianLightStemFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ItalianLightStemFilter_init_(t_ItalianLightStemFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ItalianLightStemFilter_incrementToken(t_ItalianLightStemFilter *self, PyObject *args);

          static PyMethodDef t_ItalianLightStemFilter__methods_[] = {
            DECLARE_METHOD(t_ItalianLightStemFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ItalianLightStemFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ItalianLightStemFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ItalianLightStemFilter, t_ItalianLightStemFilter, ::org::apache::lucene::analysis::TokenFilter, ItalianLightStemFilter, t_ItalianLightStemFilter_init_, 0, 0, 0, 0, 0);

          void t_ItalianLightStemFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(ItalianLightStemFilter), module, "ItalianLightStemFilter", 0);
          }

          void t_ItalianLightStemFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ItalianLightStemFilter).tp_dict, "class_", make_descriptor(ItalianLightStemFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ItalianLightStemFilter).tp_dict, "wrapfn_", make_descriptor(t_ItalianLightStemFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ItalianLightStemFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ItalianLightStemFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ItalianLightStemFilter::initializeClass, 1)))
              return NULL;
            return t_ItalianLightStemFilter::wrap_Object(ItalianLightStemFilter(((t_ItalianLightStemFilter *) arg)->object.this$));
          }
          static PyObject *t_ItalianLightStemFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ItalianLightStemFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ItalianLightStemFilter_init_(t_ItalianLightStemFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ItalianLightStemFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = ItalianLightStemFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ItalianLightStemFilter_incrementToken(t_ItalianLightStemFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(ItalianLightStemFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/automaton/RunAutomaton.h"
#include "org/apache/lucene/util/automaton/Automaton.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {

          ::java::lang::Class *RunAutomaton::class$ = NULL;
          jmethodID *RunAutomaton::mids$ = NULL;
          bool RunAutomaton::live$ = false;

          jclass RunAutomaton::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/automaton/RunAutomaton");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_930c56a3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/automaton/Automaton;IZ)V");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_getCharIntervals_dab10e75] = env->getMethodID(cls, "getCharIntervals", "()[I");
              mids$[mid_getInitialState_54c6a179] = env->getMethodID(cls, "getInitialState", "()I");
              mids$[mid_getSize_54c6a179] = env->getMethodID(cls, "getSize", "()I");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_isAccept_39c7bd30] = env->getMethodID(cls, "isAccept", "(I)Z");
              mids$[mid_step_d8d154b9] = env->getMethodID(cls, "step", "(II)I");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          RunAutomaton::RunAutomaton(const ::org::apache::lucene::util::automaton::Automaton & a0, jint a1, jboolean a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_930c56a3, a0.this$, a1, a2)) {}

          jboolean RunAutomaton::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          JArray< jint > RunAutomaton::getCharIntervals() const
          {
            return JArray< jint >(env->callObjectMethod(this$, mids$[mid_getCharIntervals_dab10e75]));
          }

          jint RunAutomaton::getInitialState() const
          {
            return env->callIntMethod(this$, mids$[mid_getInitialState_54c6a179]);
          }

          jint RunAutomaton::getSize() const
          {
            return env->callIntMethod(this$, mids$[mid_getSize_54c6a179]);
          }

          jint RunAutomaton::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          jboolean RunAutomaton::isAccept(jint a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_isAccept_39c7bd30], a0);
          }

          jint RunAutomaton::step(jint a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_step_d8d154b9], a0, a1);
          }

          ::java::lang::String RunAutomaton::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {
          static PyObject *t_RunAutomaton_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_RunAutomaton_instance_(PyTypeObject *type, PyObject *arg);
          static int t_RunAutomaton_init_(t_RunAutomaton *self, PyObject *args, PyObject *kwds);
          static PyObject *t_RunAutomaton_equals(t_RunAutomaton *self, PyObject *args);
          static PyObject *t_RunAutomaton_getCharIntervals(t_RunAutomaton *self);
          static PyObject *t_RunAutomaton_getInitialState(t_RunAutomaton *self);
          static PyObject *t_RunAutomaton_getSize(t_RunAutomaton *self);
          static PyObject *t_RunAutomaton_hashCode(t_RunAutomaton *self, PyObject *args);
          static PyObject *t_RunAutomaton_isAccept(t_RunAutomaton *self, PyObject *arg);
          static PyObject *t_RunAutomaton_step(t_RunAutomaton *self, PyObject *args);
          static PyObject *t_RunAutomaton_toString(t_RunAutomaton *self, PyObject *args);
          static PyObject *t_RunAutomaton_get__charIntervals(t_RunAutomaton *self, void *data);
          static PyObject *t_RunAutomaton_get__initialState(t_RunAutomaton *self, void *data);
          static PyObject *t_RunAutomaton_get__size(t_RunAutomaton *self, void *data);
          static PyGetSetDef t_RunAutomaton__fields_[] = {
            DECLARE_GET_FIELD(t_RunAutomaton, charIntervals),
            DECLARE_GET_FIELD(t_RunAutomaton, initialState),
            DECLARE_GET_FIELD(t_RunAutomaton, size),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_RunAutomaton__methods_[] = {
            DECLARE_METHOD(t_RunAutomaton, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_RunAutomaton, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_RunAutomaton, equals, METH_VARARGS),
            DECLARE_METHOD(t_RunAutomaton, getCharIntervals, METH_NOARGS),
            DECLARE_METHOD(t_RunAutomaton, getInitialState, METH_NOARGS),
            DECLARE_METHOD(t_RunAutomaton, getSize, METH_NOARGS),
            DECLARE_METHOD(t_RunAutomaton, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_RunAutomaton, isAccept, METH_O),
            DECLARE_METHOD(t_RunAutomaton, step, METH_VARARGS),
            DECLARE_METHOD(t_RunAutomaton, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(RunAutomaton, t_RunAutomaton, ::java::lang::Object, RunAutomaton, t_RunAutomaton_init_, 0, 0, t_RunAutomaton__fields_, 0, 0);

          void t_RunAutomaton::install(PyObject *module)
          {
            installType(&PY_TYPE(RunAutomaton), module, "RunAutomaton", 0);
          }

          void t_RunAutomaton::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(RunAutomaton).tp_dict, "class_", make_descriptor(RunAutomaton::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(RunAutomaton).tp_dict, "wrapfn_", make_descriptor(t_RunAutomaton::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(RunAutomaton).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_RunAutomaton_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, RunAutomaton::initializeClass, 1)))
              return NULL;
            return t_RunAutomaton::wrap_Object(RunAutomaton(((t_RunAutomaton *) arg)->object.this$));
          }
          static PyObject *t_RunAutomaton_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, RunAutomaton::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_RunAutomaton_init_(t_RunAutomaton *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
            jint a1;
            jboolean a2;
            RunAutomaton object((jobject) NULL);

            if (!parseArgs(args, "kIZ", ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0, &a1, &a2))
            {
              INT_CALL(object = RunAutomaton(a0, a1, a2));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_RunAutomaton_equals(t_RunAutomaton *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(RunAutomaton), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_RunAutomaton_getCharIntervals(t_RunAutomaton *self)
          {
            JArray< jint > result((jobject) NULL);
            OBJ_CALL(result = self->object.getCharIntervals());
            return result.wrap();
          }

          static PyObject *t_RunAutomaton_getInitialState(t_RunAutomaton *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getInitialState());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_RunAutomaton_getSize(t_RunAutomaton *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getSize());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_RunAutomaton_hashCode(t_RunAutomaton *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(RunAutomaton), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_RunAutomaton_isAccept(t_RunAutomaton *self, PyObject *arg)
          {
            jint a0;
            jboolean result;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.isAccept(a0));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError((PyObject *) self, "isAccept", arg);
            return NULL;
          }

          static PyObject *t_RunAutomaton_step(t_RunAutomaton *self, PyObject *args)
          {
            jint a0;
            jint a1;
            jint result;

            if (!parseArgs(args, "II", &a0, &a1))
            {
              OBJ_CALL(result = self->object.step(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "step", args);
            return NULL;
          }

          static PyObject *t_RunAutomaton_toString(t_RunAutomaton *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(RunAutomaton), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_RunAutomaton_get__charIntervals(t_RunAutomaton *self, void *data)
          {
            JArray< jint > value((jobject) NULL);
            OBJ_CALL(value = self->object.getCharIntervals());
            return value.wrap();
          }

          static PyObject *t_RunAutomaton_get__initialState(t_RunAutomaton *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getInitialState());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_RunAutomaton_get__size(t_RunAutomaton *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getSize());
            return PyInt_FromLong((long) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/StringHelper.h"
#include "java/lang/String.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *StringHelper::class$ = NULL;
        jmethodID *StringHelper::mids$ = NULL;
        bool StringHelper::live$ = false;
        jint StringHelper::GOOD_FAST_HASH_SEED = (jint) 0;

        jclass StringHelper::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/StringHelper");

            mids$ = new jmethodID[max_mid];
            mids$[mid_bytesDifference_594e5ef9] = env->getStaticMethodID(cls, "bytesDifference", "(Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/util/BytesRef;)I");
            mids$[mid_endsWith_594e5eea] = env->getStaticMethodID(cls, "endsWith", "(Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/util/BytesRef;)Z");
            mids$[mid_equals_4a26474e] = env->getStaticMethodID(cls, "equals", "(Ljava/lang/String;Ljava/lang/String;)Z");
            mids$[mid_murmurhash3_x86_32_738fc2d1] = env->getStaticMethodID(cls, "murmurhash3_x86_32", "(Lorg/apache/lucene/util/BytesRef;I)I");
            mids$[mid_murmurhash3_x86_32_96a25f14] = env->getStaticMethodID(cls, "murmurhash3_x86_32", "([BIII)I");
            mids$[mid_sortKeyLength_594e5ef9] = env->getStaticMethodID(cls, "sortKeyLength", "(Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/util/BytesRef;)I");
            mids$[mid_startsWith_b608e2b3] = env->getStaticMethodID(cls, "startsWith", "([BLorg/apache/lucene/util/BytesRef;)Z");
            mids$[mid_startsWith_594e5eea] = env->getStaticMethodID(cls, "startsWith", "(Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/util/BytesRef;)Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            GOOD_FAST_HASH_SEED = env->getStaticIntField(cls, "GOOD_FAST_HASH_SEED");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jint StringHelper::bytesDifference(const ::org::apache::lucene::util::BytesRef & a0, const ::org::apache::lucene::util::BytesRef & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_bytesDifference_594e5ef9], a0.this$, a1.this$);
        }

        jboolean StringHelper::endsWith(const ::org::apache::lucene::util::BytesRef & a0, const ::org::apache::lucene::util::BytesRef & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticBooleanMethod(cls, mids$[mid_endsWith_594e5eea], a0.this$, a1.this$);
        }

        jboolean StringHelper::equals(const ::java::lang::String & a0, const ::java::lang::String & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticBooleanMethod(cls, mids$[mid_equals_4a26474e], a0.this$, a1.this$);
        }

        jint StringHelper::murmurhash3_x86_32(const ::org::apache::lucene::util::BytesRef & a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_murmurhash3_x86_32_738fc2d1], a0.this$, a1);
        }

        jint StringHelper::murmurhash3_x86_32(const JArray< jbyte > & a0, jint a1, jint a2, jint a3)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_murmurhash3_x86_32_96a25f14], a0.this$, a1, a2, a3);
        }

        jint StringHelper::sortKeyLength(const ::org::apache::lucene::util::BytesRef & a0, const ::org::apache::lucene::util::BytesRef & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_sortKeyLength_594e5ef9], a0.this$, a1.this$);
        }

        jboolean StringHelper::startsWith(const JArray< jbyte > & a0, const ::org::apache::lucene::util::BytesRef & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticBooleanMethod(cls, mids$[mid_startsWith_b608e2b3], a0.this$, a1.this$);
        }

        jboolean StringHelper::startsWith(const ::org::apache::lucene::util::BytesRef & a0, const ::org::apache::lucene::util::BytesRef & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticBooleanMethod(cls, mids$[mid_startsWith_594e5eea], a0.this$, a1.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_StringHelper_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_StringHelper_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_StringHelper_bytesDifference(PyTypeObject *type, PyObject *args);
        static PyObject *t_StringHelper_endsWith(PyTypeObject *type, PyObject *args);
        static PyObject *t_StringHelper_equals(PyTypeObject *type, PyObject *args);
        static PyObject *t_StringHelper_murmurhash3_x86_32(PyTypeObject *type, PyObject *args);
        static PyObject *t_StringHelper_sortKeyLength(PyTypeObject *type, PyObject *args);
        static PyObject *t_StringHelper_startsWith(PyTypeObject *type, PyObject *args);

        static PyMethodDef t_StringHelper__methods_[] = {
          DECLARE_METHOD(t_StringHelper, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_StringHelper, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_StringHelper, bytesDifference, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_StringHelper, endsWith, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_StringHelper, equals, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_StringHelper, murmurhash3_x86_32, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_StringHelper, sortKeyLength, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_StringHelper, startsWith, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(StringHelper, t_StringHelper, ::java::lang::Object, StringHelper, abstract_init, 0, 0, 0, 0, 0);

        void t_StringHelper::install(PyObject *module)
        {
          installType(&PY_TYPE(StringHelper), module, "StringHelper", 0);
        }

        void t_StringHelper::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(StringHelper).tp_dict, "class_", make_descriptor(StringHelper::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(StringHelper).tp_dict, "wrapfn_", make_descriptor(t_StringHelper::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(StringHelper).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(StringHelper::initializeClass);
          PyDict_SetItemString(PY_TYPE(StringHelper).tp_dict, "GOOD_FAST_HASH_SEED", make_descriptor(StringHelper::GOOD_FAST_HASH_SEED));
        }

        static PyObject *t_StringHelper_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, StringHelper::initializeClass, 1)))
            return NULL;
          return t_StringHelper::wrap_Object(StringHelper(((t_StringHelper *) arg)->object.this$));
        }
        static PyObject *t_StringHelper_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, StringHelper::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_StringHelper_bytesDifference(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
          jint result;

          if (!parseArgs(args, "kk", ::org::apache::lucene::util::BytesRef::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::StringHelper::bytesDifference(a0, a1));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError(type, "bytesDifference", args);
          return NULL;
        }

        static PyObject *t_StringHelper_endsWith(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "kk", ::org::apache::lucene::util::BytesRef::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::StringHelper::endsWith(a0, a1));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError(type, "endsWith", args);
          return NULL;
        }

        static PyObject *t_StringHelper_equals(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "ss", &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::StringHelper::equals(a0, a1));
            Py_RETURN_BOOL(result);
          }

          return callSuper(type, "equals", args, 2);
        }

        static PyObject *t_StringHelper_murmurhash3_x86_32(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
              jint a1;
              jint result;

              if (!parseArgs(args, "kI", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::StringHelper::murmurhash3_x86_32(a0, a1));
                return PyInt_FromLong((long) result);
              }
            }
            break;
           case 4:
            {
              JArray< jbyte > a0((jobject) NULL);
              jint a1;
              jint a2;
              jint a3;
              jint result;

              if (!parseArgs(args, "[BIII", &a0, &a1, &a2, &a3))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::StringHelper::murmurhash3_x86_32(a0, a1, a2, a3));
                return PyInt_FromLong((long) result);
              }
            }
          }

          PyErr_SetArgsError(type, "murmurhash3_x86_32", args);
          return NULL;
        }

        static PyObject *t_StringHelper_sortKeyLength(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
          jint result;

          if (!parseArgs(args, "kk", ::org::apache::lucene::util::BytesRef::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::StringHelper::sortKeyLength(a0, a1));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError(type, "sortKeyLength", args);
          return NULL;
        }

        static PyObject *t_StringHelper_startsWith(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              JArray< jbyte > a0((jobject) NULL);
              ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "[Bk", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::StringHelper::startsWith(a0, a1));
                Py_RETURN_BOOL(result);
              }
            }
            {
              ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
              ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "kk", ::org::apache::lucene::util::BytesRef::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::StringHelper::startsWith(a0, a1));
                Py_RETURN_BOOL(result);
              }
            }
          }

          PyErr_SetArgsError(type, "startsWith", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/core/TypeTokenFilterFactory.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "java/util/Set.h"
#include "org/apache/lucene/analysis/util/ResourceLoader.h"
#include "org/apache/lucene/analysis/util/ResourceLoaderAware.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {

          ::java::lang::Class *TypeTokenFilterFactory::class$ = NULL;
          jmethodID *TypeTokenFilterFactory::mids$ = NULL;
          bool TypeTokenFilterFactory::live$ = false;

          jclass TypeTokenFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/core/TypeTokenFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");
              mids$[mid_getStopTypes_03e99967] = env->getMethodID(cls, "getStopTypes", "()Ljava/util/Set;");
              mids$[mid_inform_d6a4bc97] = env->getMethodID(cls, "inform", "(Lorg/apache/lucene/analysis/util/ResourceLoader;)V");
              mids$[mid_isEnablePositionIncrements_54c6a16a] = env->getMethodID(cls, "isEnablePositionIncrements", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TypeTokenFilterFactory::TypeTokenFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream TypeTokenFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }

          ::java::util::Set TypeTokenFilterFactory::getStopTypes() const
          {
            return ::java::util::Set(env->callObjectMethod(this$, mids$[mid_getStopTypes_03e99967]));
          }

          void TypeTokenFilterFactory::inform(const ::org::apache::lucene::analysis::util::ResourceLoader & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_inform_d6a4bc97], a0.this$);
          }

          jboolean TypeTokenFilterFactory::isEnablePositionIncrements() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isEnablePositionIncrements_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {
          static PyObject *t_TypeTokenFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TypeTokenFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_TypeTokenFilterFactory_init_(t_TypeTokenFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_TypeTokenFilterFactory_create(t_TypeTokenFilterFactory *self, PyObject *args);
          static PyObject *t_TypeTokenFilterFactory_getStopTypes(t_TypeTokenFilterFactory *self);
          static PyObject *t_TypeTokenFilterFactory_inform(t_TypeTokenFilterFactory *self, PyObject *arg);
          static PyObject *t_TypeTokenFilterFactory_isEnablePositionIncrements(t_TypeTokenFilterFactory *self);
          static PyObject *t_TypeTokenFilterFactory_get__enablePositionIncrements(t_TypeTokenFilterFactory *self, void *data);
          static PyObject *t_TypeTokenFilterFactory_get__stopTypes(t_TypeTokenFilterFactory *self, void *data);
          static PyGetSetDef t_TypeTokenFilterFactory__fields_[] = {
            DECLARE_GET_FIELD(t_TypeTokenFilterFactory, enablePositionIncrements),
            DECLARE_GET_FIELD(t_TypeTokenFilterFactory, stopTypes),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_TypeTokenFilterFactory__methods_[] = {
            DECLARE_METHOD(t_TypeTokenFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TypeTokenFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TypeTokenFilterFactory, create, METH_VARARGS),
            DECLARE_METHOD(t_TypeTokenFilterFactory, getStopTypes, METH_NOARGS),
            DECLARE_METHOD(t_TypeTokenFilterFactory, inform, METH_O),
            DECLARE_METHOD(t_TypeTokenFilterFactory, isEnablePositionIncrements, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(TypeTokenFilterFactory, t_TypeTokenFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, TypeTokenFilterFactory, t_TypeTokenFilterFactory_init_, 0, 0, t_TypeTokenFilterFactory__fields_, 0, 0);

          void t_TypeTokenFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(TypeTokenFilterFactory), module, "TypeTokenFilterFactory", 0);
          }

          void t_TypeTokenFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(TypeTokenFilterFactory).tp_dict, "class_", make_descriptor(TypeTokenFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(TypeTokenFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_TypeTokenFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(TypeTokenFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TypeTokenFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TypeTokenFilterFactory::initializeClass, 1)))
              return NULL;
            return t_TypeTokenFilterFactory::wrap_Object(TypeTokenFilterFactory(((t_TypeTokenFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_TypeTokenFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TypeTokenFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_TypeTokenFilterFactory_init_(t_TypeTokenFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            TypeTokenFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = TypeTokenFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_TypeTokenFilterFactory_create(t_TypeTokenFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(TypeTokenFilterFactory), (PyObject *) self, "create", args, 2);
          }

          static PyObject *t_TypeTokenFilterFactory_getStopTypes(t_TypeTokenFilterFactory *self)
          {
            ::java::util::Set result((jobject) NULL);
            OBJ_CALL(result = self->object.getStopTypes());
            return ::java::util::t_Set::wrap_Object(result, &::java::lang::PY_TYPE(String));
          }

          static PyObject *t_TypeTokenFilterFactory_inform(t_TypeTokenFilterFactory *self, PyObject *arg)
          {
            ::org::apache::lucene::analysis::util::ResourceLoader a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::analysis::util::ResourceLoader::initializeClass, &a0))
            {
              OBJ_CALL(self->object.inform(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "inform", arg);
            return NULL;
          }

          static PyObject *t_TypeTokenFilterFactory_isEnablePositionIncrements(t_TypeTokenFilterFactory *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isEnablePositionIncrements());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_TypeTokenFilterFactory_get__enablePositionIncrements(t_TypeTokenFilterFactory *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isEnablePositionIncrements());
            Py_RETURN_BOOL(value);
          }

          static PyObject *t_TypeTokenFilterFactory_get__stopTypes(t_TypeTokenFilterFactory *self, void *data)
          {
            ::java::util::Set value((jobject) NULL);
            OBJ_CALL(value = self->object.getStopTypes());
            return ::java::util::t_Set::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/DocIdBitSet.h"
#include "org/apache/lucene/util/Bits.h"
#include "java/util/BitSet.h"
#include "org/apache/lucene/search/DocIdSetIterator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *DocIdBitSet::class$ = NULL;
        jmethodID *DocIdBitSet::mids$ = NULL;
        bool DocIdBitSet::live$ = false;

        jclass DocIdBitSet::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/DocIdBitSet");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_c8849d64] = env->getMethodID(cls, "<init>", "(Ljava/util/BitSet;)V");
            mids$[mid_bits_03c2457d] = env->getMethodID(cls, "bits", "()Lorg/apache/lucene/util/Bits;");
            mids$[mid_get_39c7bd30] = env->getMethodID(cls, "get", "(I)Z");
            mids$[mid_getBitSet_59c0eb4d] = env->getMethodID(cls, "getBitSet", "()Ljava/util/BitSet;");
            mids$[mid_isCacheable_54c6a16a] = env->getMethodID(cls, "isCacheable", "()Z");
            mids$[mid_iterator_dc23660c] = env->getMethodID(cls, "iterator", "()Lorg/apache/lucene/search/DocIdSetIterator;");
            mids$[mid_length_54c6a179] = env->getMethodID(cls, "length", "()I");
            mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        DocIdBitSet::DocIdBitSet(const ::java::util::BitSet & a0) : ::org::apache::lucene::search::DocIdSet(env->newObject(initializeClass, &mids$, mid_init$_c8849d64, a0.this$)) {}

        ::org::apache::lucene::util::Bits DocIdBitSet::bits() const
        {
          return ::org::apache::lucene::util::Bits(env->callObjectMethod(this$, mids$[mid_bits_03c2457d]));
        }

        jboolean DocIdBitSet::get(jint a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_get_39c7bd30], a0);
        }

        ::java::util::BitSet DocIdBitSet::getBitSet() const
        {
          return ::java::util::BitSet(env->callObjectMethod(this$, mids$[mid_getBitSet_59c0eb4d]));
        }

        jboolean DocIdBitSet::isCacheable() const
        {
          return env->callBooleanMethod(this$, mids$[mid_isCacheable_54c6a16a]);
        }

        ::org::apache::lucene::search::DocIdSetIterator DocIdBitSet::iterator() const
        {
          return ::org::apache::lucene::search::DocIdSetIterator(env->callObjectMethod(this$, mids$[mid_iterator_dc23660c]));
        }

        jint DocIdBitSet::length() const
        {
          return env->callIntMethod(this$, mids$[mid_length_54c6a179]);
        }

        jlong DocIdBitSet::ramBytesUsed() const
        {
          return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_DocIdBitSet_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DocIdBitSet_instance_(PyTypeObject *type, PyObject *arg);
        static int t_DocIdBitSet_init_(t_DocIdBitSet *self, PyObject *args, PyObject *kwds);
        static PyObject *t_DocIdBitSet_bits(t_DocIdBitSet *self, PyObject *args);
        static PyObject *t_DocIdBitSet_get(t_DocIdBitSet *self, PyObject *arg);
        static PyObject *t_DocIdBitSet_getBitSet(t_DocIdBitSet *self);
        static PyObject *t_DocIdBitSet_isCacheable(t_DocIdBitSet *self, PyObject *args);
        static PyObject *t_DocIdBitSet_iterator(t_DocIdBitSet *self, PyObject *args);
        static PyObject *t_DocIdBitSet_length(t_DocIdBitSet *self);
        static PyObject *t_DocIdBitSet_ramBytesUsed(t_DocIdBitSet *self, PyObject *args);
        static PyObject *t_DocIdBitSet_get__bitSet(t_DocIdBitSet *self, void *data);
        static PyObject *t_DocIdBitSet_get__cacheable(t_DocIdBitSet *self, void *data);
        static PyGetSetDef t_DocIdBitSet__fields_[] = {
          DECLARE_GET_FIELD(t_DocIdBitSet, bitSet),
          DECLARE_GET_FIELD(t_DocIdBitSet, cacheable),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_DocIdBitSet__methods_[] = {
          DECLARE_METHOD(t_DocIdBitSet, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DocIdBitSet, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DocIdBitSet, bits, METH_VARARGS),
          DECLARE_METHOD(t_DocIdBitSet, get, METH_O),
          DECLARE_METHOD(t_DocIdBitSet, getBitSet, METH_NOARGS),
          DECLARE_METHOD(t_DocIdBitSet, isCacheable, METH_VARARGS),
          DECLARE_METHOD(t_DocIdBitSet, iterator, METH_VARARGS),
          DECLARE_METHOD(t_DocIdBitSet, length, METH_NOARGS),
          DECLARE_METHOD(t_DocIdBitSet, ramBytesUsed, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(DocIdBitSet, t_DocIdBitSet, ::org::apache::lucene::search::DocIdSet, DocIdBitSet, t_DocIdBitSet_init_, 0, 0, t_DocIdBitSet__fields_, 0, 0);

        void t_DocIdBitSet::install(PyObject *module)
        {
          installType(&PY_TYPE(DocIdBitSet), module, "DocIdBitSet", 0);
        }

        void t_DocIdBitSet::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(DocIdBitSet).tp_dict, "class_", make_descriptor(DocIdBitSet::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(DocIdBitSet).tp_dict, "wrapfn_", make_descriptor(t_DocIdBitSet::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(DocIdBitSet).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_DocIdBitSet_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, DocIdBitSet::initializeClass, 1)))
            return NULL;
          return t_DocIdBitSet::wrap_Object(DocIdBitSet(((t_DocIdBitSet *) arg)->object.this$));
        }
        static PyObject *t_DocIdBitSet_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, DocIdBitSet::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_DocIdBitSet_init_(t_DocIdBitSet *self, PyObject *args, PyObject *kwds)
        {
          ::java::util::BitSet a0((jobject) NULL);
          DocIdBitSet object((jobject) NULL);

          if (!parseArgs(args, "k", ::java::util::BitSet::initializeClass, &a0))
          {
            INT_CALL(object = DocIdBitSet(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_DocIdBitSet_bits(t_DocIdBitSet *self, PyObject *args)
        {
          ::org::apache::lucene::util::Bits result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.bits());
            return ::org::apache::lucene::util::t_Bits::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(DocIdBitSet), (PyObject *) self, "bits", args, 2);
        }

        static PyObject *t_DocIdBitSet_get(t_DocIdBitSet *self, PyObject *arg)
        {
          jint a0;
          jboolean result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.get(a0));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError((PyObject *) self, "get", arg);
          return NULL;
        }

        static PyObject *t_DocIdBitSet_getBitSet(t_DocIdBitSet *self)
        {
          ::java::util::BitSet result((jobject) NULL);
          OBJ_CALL(result = self->object.getBitSet());
          return ::java::util::t_BitSet::wrap_Object(result);
        }

        static PyObject *t_DocIdBitSet_isCacheable(t_DocIdBitSet *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.isCacheable());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(DocIdBitSet), (PyObject *) self, "isCacheable", args, 2);
        }

        static PyObject *t_DocIdBitSet_iterator(t_DocIdBitSet *self, PyObject *args)
        {
          ::org::apache::lucene::search::DocIdSetIterator result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.iterator());
            return ::org::apache::lucene::search::t_DocIdSetIterator::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(DocIdBitSet), (PyObject *) self, "iterator", args, 2);
        }

        static PyObject *t_DocIdBitSet_length(t_DocIdBitSet *self)
        {
          jint result;
          OBJ_CALL(result = self->object.length());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_DocIdBitSet_ramBytesUsed(t_DocIdBitSet *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.ramBytesUsed());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(DocIdBitSet), (PyObject *) self, "ramBytesUsed", args, 2);
        }

        static PyObject *t_DocIdBitSet_get__bitSet(t_DocIdBitSet *self, void *data)
        {
          ::java::util::BitSet value((jobject) NULL);
          OBJ_CALL(value = self->object.getBitSet());
          return ::java::util::t_BitSet::wrap_Object(value);
        }

        static PyObject *t_DocIdBitSet_get__cacheable(t_DocIdBitSet *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.isCacheable());
          Py_RETURN_BOOL(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FieldCacheRangeFilter.h"
#include "org/apache/lucene/search/FieldCache$FloatParser.h"
#include "java/lang/Integer.h"
#include "java/lang/Double.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/Bits.h"
#include "java/lang/Short.h"
#include "org/apache/lucene/search/FieldCache$Parser.h"
#include "org/apache/lucene/search/FieldCache$ByteParser.h"
#include "org/apache/lucene/search/FieldCache$DoubleParser.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/FieldCache$IntParser.h"
#include "org/apache/lucene/search/FieldCache$LongParser.h"
#include "org/apache/lucene/search/FieldCache$ShortParser.h"
#include "java/lang/Byte.h"
#include "org/apache/lucene/search/DocIdSet.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/Long.h"
#include "java/lang/Float.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FieldCacheRangeFilter::class$ = NULL;
        jmethodID *FieldCacheRangeFilter::mids$ = NULL;
        bool FieldCacheRangeFilter::live$ = false;

        jclass FieldCacheRangeFilter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FieldCacheRangeFilter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_getDocIdSet_ccce0897] = env->getMethodID(cls, "getDocIdSet", "(Lorg/apache/lucene/index/AtomicReaderContext;Lorg/apache/lucene/util/Bits;)Lorg/apache/lucene/search/DocIdSet;");
            mids$[mid_getField_14c7b5c5] = env->getMethodID(cls, "getField", "()Ljava/lang/String;");
            mids$[mid_getLowerVal_846352c3] = env->getMethodID(cls, "getLowerVal", "()Ljava/lang/Object;");
            mids$[mid_getParser_6ee4ab67] = env->getMethodID(cls, "getParser", "()Lorg/apache/lucene/search/FieldCache$Parser;");
            mids$[mid_getUpperVal_846352c3] = env->getMethodID(cls, "getUpperVal", "()Ljava/lang/Object;");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_includesLower_54c6a16a] = env->getMethodID(cls, "includesLower", "()Z");
            mids$[mid_includesUpper_54c6a16a] = env->getMethodID(cls, "includesUpper", "()Z");
            mids$[mid_newByteRange_16d27fcb] = env->getStaticMethodID(cls, "newByteRange", "(Ljava/lang/String;Ljava/lang/Byte;Ljava/lang/Byte;ZZ)Lorg/apache/lucene/search/FieldCacheRangeFilter;");
            mids$[mid_newByteRange_8dbc9d65] = env->getStaticMethodID(cls, "newByteRange", "(Ljava/lang/String;Lorg/apache/lucene/search/FieldCache$ByteParser;Ljava/lang/Byte;Ljava/lang/Byte;ZZ)Lorg/apache/lucene/search/FieldCacheRangeFilter;");
            mids$[mid_newBytesRefRange_ada19313] = env->getStaticMethodID(cls, "newBytesRefRange", "(Ljava/lang/String;Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/util/BytesRef;ZZ)Lorg/apache/lucene/search/FieldCacheRangeFilter;");
            mids$[mid_newDoubleRange_1f46882f] = env->getStaticMethodID(cls, "newDoubleRange", "(Ljava/lang/String;Ljava/lang/Double;Ljava/lang/Double;ZZ)Lorg/apache/lucene/search/FieldCacheRangeFilter;");
            mids$[mid_newDoubleRange_45b4662e] = env->getStaticMethodID(cls, "newDoubleRange", "(Ljava/lang/String;Lorg/apache/lucene/search/FieldCache$DoubleParser;Ljava/lang/Double;Ljava/lang/Double;ZZ)Lorg/apache/lucene/search/FieldCacheRangeFilter;");
            mids$[mid_newFloatRange_6957c90b] = env->getStaticMethodID(cls, "newFloatRange", "(Ljava/lang/String;Ljava/lang/Float;Ljava/lang/Float;ZZ)Lorg/apache/lucene/search/FieldCacheRangeFilter;");
            mids$[mid_newFloatRange_ec92e8b8] = env->getStaticMethodID(cls, "newFloatRange", "(Ljava/lang/String;Lorg/apache/lucene/search/FieldCache$FloatParser;Ljava/lang/Float;Ljava/lang/Float;ZZ)Lorg/apache/lucene/search/FieldCacheRangeFilter;");
            mids$[mid_newIntRange_dee3e03b] = env->getStaticMethodID(cls, "newIntRange", "(Ljava/lang/String;Ljava/lang/Integer;Ljava/lang/Integer;ZZ)Lorg/apache/lucene/search/FieldCacheRangeFilter;");
            mids$[mid_newIntRange_6952cfdf] = env->getStaticMethodID(cls, "newIntRange", "(Ljava/lang/String;Lorg/apache/lucene/search/FieldCache$IntParser;Ljava/lang/Integer;Ljava/lang/Integer;ZZ)Lorg/apache/lucene/search/FieldCacheRangeFilter;");
            mids$[mid_newLongRange_48e495eb] = env->getStaticMethodID(cls, "newLongRange", "(Ljava/lang/String;Ljava/lang/Long;Ljava/lang/Long;ZZ)Lorg/apache/lucene/search/FieldCacheRangeFilter;");
            mids$[mid_newLongRange_51d4b8f9] = env->getStaticMethodID(cls, "newLongRange", "(Ljava/lang/String;Lorg/apache/lucene/search/FieldCache$LongParser;Ljava/lang/Long;Ljava/lang/Long;ZZ)Lorg/apache/lucene/search/FieldCacheRangeFilter;");
            mids$[mid_newShortRange_89cd93a7] = env->getStaticMethodID(cls, "newShortRange", "(Ljava/lang/String;Ljava/lang/Short;Ljava/lang/Short;ZZ)Lorg/apache/lucene/search/FieldCacheRangeFilter;");
            mids$[mid_newShortRange_d637c7bc] = env->getStaticMethodID(cls, "newShortRange", "(Ljava/lang/String;Lorg/apache/lucene/search/FieldCache$ShortParser;Ljava/lang/Short;Ljava/lang/Short;ZZ)Lorg/apache/lucene/search/FieldCacheRangeFilter;");
            mids$[mid_newStringRange_05fb19b7] = env->getStaticMethodID(cls, "newStringRange", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ZZ)Lorg/apache/lucene/search/FieldCacheRangeFilter;");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jboolean FieldCacheRangeFilter::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        ::org::apache::lucene::search::DocIdSet FieldCacheRangeFilter::getDocIdSet(const ::org::apache::lucene::index::AtomicReaderContext & a0, const ::org::apache::lucene::util::Bits & a1) const
        {
          return ::org::apache::lucene::search::DocIdSet(env->callObjectMethod(this$, mids$[mid_getDocIdSet_ccce0897], a0.this$, a1.this$));
        }

        ::java::lang::String FieldCacheRangeFilter::getField() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getField_14c7b5c5]));
        }

        ::java::lang::Object FieldCacheRangeFilter::getLowerVal() const
        {
          return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_getLowerVal_846352c3]));
        }

        ::org::apache::lucene::search::FieldCache$Parser FieldCacheRangeFilter::getParser() const
        {
          return ::org::apache::lucene::search::FieldCache$Parser(env->callObjectMethod(this$, mids$[mid_getParser_6ee4ab67]));
        }

        ::java::lang::Object FieldCacheRangeFilter::getUpperVal() const
        {
          return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_getUpperVal_846352c3]));
        }

        jint FieldCacheRangeFilter::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jboolean FieldCacheRangeFilter::includesLower() const
        {
          return env->callBooleanMethod(this$, mids$[mid_includesLower_54c6a16a]);
        }

        jboolean FieldCacheRangeFilter::includesUpper() const
        {
          return env->callBooleanMethod(this$, mids$[mid_includesUpper_54c6a16a]);
        }

        FieldCacheRangeFilter FieldCacheRangeFilter::newByteRange(const ::java::lang::String & a0, const ::java::lang::Byte & a1, const ::java::lang::Byte & a2, jboolean a3, jboolean a4)
        {
          jclass cls = env->getClass(initializeClass);
          return FieldCacheRangeFilter(env->callStaticObjectMethod(cls, mids$[mid_newByteRange_16d27fcb], a0.this$, a1.this$, a2.this$, a3, a4));
        }

        FieldCacheRangeFilter FieldCacheRangeFilter::newByteRange(const ::java::lang::String & a0, const ::org::apache::lucene::search::FieldCache$ByteParser & a1, const ::java::lang::Byte & a2, const ::java::lang::Byte & a3, jboolean a4, jboolean a5)
        {
          jclass cls = env->getClass(initializeClass);
          return FieldCacheRangeFilter(env->callStaticObjectMethod(cls, mids$[mid_newByteRange_8dbc9d65], a0.this$, a1.this$, a2.this$, a3.this$, a4, a5));
        }

        FieldCacheRangeFilter FieldCacheRangeFilter::newBytesRefRange(const ::java::lang::String & a0, const ::org::apache::lucene::util::BytesRef & a1, const ::org::apache::lucene::util::BytesRef & a2, jboolean a3, jboolean a4)
        {
          jclass cls = env->getClass(initializeClass);
          return FieldCacheRangeFilter(env->callStaticObjectMethod(cls, mids$[mid_newBytesRefRange_ada19313], a0.this$, a1.this$, a2.this$, a3, a4));
        }

        FieldCacheRangeFilter FieldCacheRangeFilter::newDoubleRange(const ::java::lang::String & a0, const ::java::lang::Double & a1, const ::java::lang::Double & a2, jboolean a3, jboolean a4)
        {
          jclass cls = env->getClass(initializeClass);
          return FieldCacheRangeFilter(env->callStaticObjectMethod(cls, mids$[mid_newDoubleRange_1f46882f], a0.this$, a1.this$, a2.this$, a3, a4));
        }

        FieldCacheRangeFilter FieldCacheRangeFilter::newDoubleRange(const ::java::lang::String & a0, const ::org::apache::lucene::search::FieldCache$DoubleParser & a1, const ::java::lang::Double & a2, const ::java::lang::Double & a3, jboolean a4, jboolean a5)
        {
          jclass cls = env->getClass(initializeClass);
          return FieldCacheRangeFilter(env->callStaticObjectMethod(cls, mids$[mid_newDoubleRange_45b4662e], a0.this$, a1.this$, a2.this$, a3.this$, a4, a5));
        }

        FieldCacheRangeFilter FieldCacheRangeFilter::newFloatRange(const ::java::lang::String & a0, const ::java::lang::Float & a1, const ::java::lang::Float & a2, jboolean a3, jboolean a4)
        {
          jclass cls = env->getClass(initializeClass);
          return FieldCacheRangeFilter(env->callStaticObjectMethod(cls, mids$[mid_newFloatRange_6957c90b], a0.this$, a1.this$, a2.this$, a3, a4));
        }

        FieldCacheRangeFilter FieldCacheRangeFilter::newFloatRange(const ::java::lang::String & a0, const ::org::apache::lucene::search::FieldCache$FloatParser & a1, const ::java::lang::Float & a2, const ::java::lang::Float & a3, jboolean a4, jboolean a5)
        {
          jclass cls = env->getClass(initializeClass);
          return FieldCacheRangeFilter(env->callStaticObjectMethod(cls, mids$[mid_newFloatRange_ec92e8b8], a0.this$, a1.this$, a2.this$, a3.this$, a4, a5));
        }

        FieldCacheRangeFilter FieldCacheRangeFilter::newIntRange(const ::java::lang::String & a0, const ::java::lang::Integer & a1, const ::java::lang::Integer & a2, jboolean a3, jboolean a4)
        {
          jclass cls = env->getClass(initializeClass);
          return FieldCacheRangeFilter(env->callStaticObjectMethod(cls, mids$[mid_newIntRange_dee3e03b], a0.this$, a1.this$, a2.this$, a3, a4));
        }

        FieldCacheRangeFilter FieldCacheRangeFilter::newIntRange(const ::java::lang::String & a0, const ::org::apache::lucene::search::FieldCache$IntParser & a1, const ::java::lang::Integer & a2, const ::java::lang::Integer & a3, jboolean a4, jboolean a5)
        {
          jclass cls = env->getClass(initializeClass);
          return FieldCacheRangeFilter(env->callStaticObjectMethod(cls, mids$[mid_newIntRange_6952cfdf], a0.this$, a1.this$, a2.this$, a3.this$, a4, a5));
        }

        FieldCacheRangeFilter FieldCacheRangeFilter::newLongRange(const ::java::lang::String & a0, const ::java::lang::Long & a1, const ::java::lang::Long & a2, jboolean a3, jboolean a4)
        {
          jclass cls = env->getClass(initializeClass);
          return FieldCacheRangeFilter(env->callStaticObjectMethod(cls, mids$[mid_newLongRange_48e495eb], a0.this$, a1.this$, a2.this$, a3, a4));
        }

        FieldCacheRangeFilter FieldCacheRangeFilter::newLongRange(const ::java::lang::String & a0, const ::org::apache::lucene::search::FieldCache$LongParser & a1, const ::java::lang::Long & a2, const ::java::lang::Long & a3, jboolean a4, jboolean a5)
        {
          jclass cls = env->getClass(initializeClass);
          return FieldCacheRangeFilter(env->callStaticObjectMethod(cls, mids$[mid_newLongRange_51d4b8f9], a0.this$, a1.this$, a2.this$, a3.this$, a4, a5));
        }

        FieldCacheRangeFilter FieldCacheRangeFilter::newShortRange(const ::java::lang::String & a0, const ::java::lang::Short & a1, const ::java::lang::Short & a2, jboolean a3, jboolean a4)
        {
          jclass cls = env->getClass(initializeClass);
          return FieldCacheRangeFilter(env->callStaticObjectMethod(cls, mids$[mid_newShortRange_89cd93a7], a0.this$, a1.this$, a2.this$, a3, a4));
        }

        FieldCacheRangeFilter FieldCacheRangeFilter::newShortRange(const ::java::lang::String & a0, const ::org::apache::lucene::search::FieldCache$ShortParser & a1, const ::java::lang::Short & a2, const ::java::lang::Short & a3, jboolean a4, jboolean a5)
        {
          jclass cls = env->getClass(initializeClass);
          return FieldCacheRangeFilter(env->callStaticObjectMethod(cls, mids$[mid_newShortRange_d637c7bc], a0.this$, a1.this$, a2.this$, a3.this$, a4, a5));
        }

        FieldCacheRangeFilter FieldCacheRangeFilter::newStringRange(const ::java::lang::String & a0, const ::java::lang::String & a1, const ::java::lang::String & a2, jboolean a3, jboolean a4)
        {
          jclass cls = env->getClass(initializeClass);
          return FieldCacheRangeFilter(env->callStaticObjectMethod(cls, mids$[mid_newStringRange_05fb19b7], a0.this$, a1.this$, a2.this$, a3, a4));
        }

        ::java::lang::String FieldCacheRangeFilter::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FieldCacheRangeFilter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldCacheRangeFilter_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldCacheRangeFilter_of_(t_FieldCacheRangeFilter *self, PyObject *args);
        static PyObject *t_FieldCacheRangeFilter_equals(t_FieldCacheRangeFilter *self, PyObject *args);
        static PyObject *t_FieldCacheRangeFilter_getDocIdSet(t_FieldCacheRangeFilter *self, PyObject *args);
        static PyObject *t_FieldCacheRangeFilter_getField(t_FieldCacheRangeFilter *self);
        static PyObject *t_FieldCacheRangeFilter_getLowerVal(t_FieldCacheRangeFilter *self);
        static PyObject *t_FieldCacheRangeFilter_getParser(t_FieldCacheRangeFilter *self);
        static PyObject *t_FieldCacheRangeFilter_getUpperVal(t_FieldCacheRangeFilter *self);
        static PyObject *t_FieldCacheRangeFilter_hashCode(t_FieldCacheRangeFilter *self, PyObject *args);
        static PyObject *t_FieldCacheRangeFilter_includesLower(t_FieldCacheRangeFilter *self);
        static PyObject *t_FieldCacheRangeFilter_includesUpper(t_FieldCacheRangeFilter *self);
        static PyObject *t_FieldCacheRangeFilter_newByteRange(PyTypeObject *type, PyObject *args);
        static PyObject *t_FieldCacheRangeFilter_newBytesRefRange(PyTypeObject *type, PyObject *args);
        static PyObject *t_FieldCacheRangeFilter_newDoubleRange(PyTypeObject *type, PyObject *args);
        static PyObject *t_FieldCacheRangeFilter_newFloatRange(PyTypeObject *type, PyObject *args);
        static PyObject *t_FieldCacheRangeFilter_newIntRange(PyTypeObject *type, PyObject *args);
        static PyObject *t_FieldCacheRangeFilter_newLongRange(PyTypeObject *type, PyObject *args);
        static PyObject *t_FieldCacheRangeFilter_newShortRange(PyTypeObject *type, PyObject *args);
        static PyObject *t_FieldCacheRangeFilter_newStringRange(PyTypeObject *type, PyObject *args);
        static PyObject *t_FieldCacheRangeFilter_toString(t_FieldCacheRangeFilter *self, PyObject *args);
        static PyObject *t_FieldCacheRangeFilter_get__field(t_FieldCacheRangeFilter *self, void *data);
        static PyObject *t_FieldCacheRangeFilter_get__lowerVal(t_FieldCacheRangeFilter *self, void *data);
        static PyObject *t_FieldCacheRangeFilter_get__parser(t_FieldCacheRangeFilter *self, void *data);
        static PyObject *t_FieldCacheRangeFilter_get__upperVal(t_FieldCacheRangeFilter *self, void *data);
        static PyObject *t_FieldCacheRangeFilter_get__parameters_(t_FieldCacheRangeFilter *self, void *data);
        static PyGetSetDef t_FieldCacheRangeFilter__fields_[] = {
          DECLARE_GET_FIELD(t_FieldCacheRangeFilter, field),
          DECLARE_GET_FIELD(t_FieldCacheRangeFilter, lowerVal),
          DECLARE_GET_FIELD(t_FieldCacheRangeFilter, parser),
          DECLARE_GET_FIELD(t_FieldCacheRangeFilter, upperVal),
          DECLARE_GET_FIELD(t_FieldCacheRangeFilter, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FieldCacheRangeFilter__methods_[] = {
          DECLARE_METHOD(t_FieldCacheRangeFilter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCacheRangeFilter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCacheRangeFilter, of_, METH_VARARGS),
          DECLARE_METHOD(t_FieldCacheRangeFilter, equals, METH_VARARGS),
          DECLARE_METHOD(t_FieldCacheRangeFilter, getDocIdSet, METH_VARARGS),
          DECLARE_METHOD(t_FieldCacheRangeFilter, getField, METH_NOARGS),
          DECLARE_METHOD(t_FieldCacheRangeFilter, getLowerVal, METH_NOARGS),
          DECLARE_METHOD(t_FieldCacheRangeFilter, getParser, METH_NOARGS),
          DECLARE_METHOD(t_FieldCacheRangeFilter, getUpperVal, METH_NOARGS),
          DECLARE_METHOD(t_FieldCacheRangeFilter, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_FieldCacheRangeFilter, includesLower, METH_NOARGS),
          DECLARE_METHOD(t_FieldCacheRangeFilter, includesUpper, METH_NOARGS),
          DECLARE_METHOD(t_FieldCacheRangeFilter, newByteRange, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_FieldCacheRangeFilter, newBytesRefRange, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_FieldCacheRangeFilter, newDoubleRange, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_FieldCacheRangeFilter, newFloatRange, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_FieldCacheRangeFilter, newIntRange, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_FieldCacheRangeFilter, newLongRange, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_FieldCacheRangeFilter, newShortRange, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_FieldCacheRangeFilter, newStringRange, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_FieldCacheRangeFilter, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldCacheRangeFilter, t_FieldCacheRangeFilter, ::org::apache::lucene::search::Filter, FieldCacheRangeFilter, abstract_init, 0, 0, t_FieldCacheRangeFilter__fields_, 0, 0);
        PyObject *t_FieldCacheRangeFilter::wrap_Object(const FieldCacheRangeFilter& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FieldCacheRangeFilter::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FieldCacheRangeFilter *self = (t_FieldCacheRangeFilter *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_FieldCacheRangeFilter::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FieldCacheRangeFilter::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FieldCacheRangeFilter *self = (t_FieldCacheRangeFilter *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_FieldCacheRangeFilter::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldCacheRangeFilter), module, "FieldCacheRangeFilter", 0);
        }

        void t_FieldCacheRangeFilter::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldCacheRangeFilter).tp_dict, "class_", make_descriptor(FieldCacheRangeFilter::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldCacheRangeFilter).tp_dict, "wrapfn_", make_descriptor(t_FieldCacheRangeFilter::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldCacheRangeFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldCacheRangeFilter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldCacheRangeFilter::initializeClass, 1)))
            return NULL;
          return t_FieldCacheRangeFilter::wrap_Object(FieldCacheRangeFilter(((t_FieldCacheRangeFilter *) arg)->object.this$));
        }
        static PyObject *t_FieldCacheRangeFilter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldCacheRangeFilter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FieldCacheRangeFilter_of_(t_FieldCacheRangeFilter *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_FieldCacheRangeFilter_equals(t_FieldCacheRangeFilter *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(FieldCacheRangeFilter), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_FieldCacheRangeFilter_getDocIdSet(t_FieldCacheRangeFilter *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
          ::org::apache::lucene::util::Bits a1((jobject) NULL);
          ::org::apache::lucene::search::DocIdSet result((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.getDocIdSet(a0, a1));
            return ::org::apache::lucene::search::t_DocIdSet::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FieldCacheRangeFilter), (PyObject *) self, "getDocIdSet", args, 2);
        }

        static PyObject *t_FieldCacheRangeFilter_getField(t_FieldCacheRangeFilter *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.getField());
          return j2p(result);
        }

        static PyObject *t_FieldCacheRangeFilter_getLowerVal(t_FieldCacheRangeFilter *self)
        {
          ::java::lang::Object result((jobject) NULL);
          OBJ_CALL(result = self->object.getLowerVal());
          return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
        }

        static PyObject *t_FieldCacheRangeFilter_getParser(t_FieldCacheRangeFilter *self)
        {
          ::org::apache::lucene::search::FieldCache$Parser result((jobject) NULL);
          OBJ_CALL(result = self->object.getParser());
          return ::org::apache::lucene::search::t_FieldCache$Parser::wrap_Object(result);
        }

        static PyObject *t_FieldCacheRangeFilter_getUpperVal(t_FieldCacheRangeFilter *self)
        {
          ::java::lang::Object result((jobject) NULL);
          OBJ_CALL(result = self->object.getUpperVal());
          return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
        }

        static PyObject *t_FieldCacheRangeFilter_hashCode(t_FieldCacheRangeFilter *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FieldCacheRangeFilter), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_FieldCacheRangeFilter_includesLower(t_FieldCacheRangeFilter *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.includesLower());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_FieldCacheRangeFilter_includesUpper(t_FieldCacheRangeFilter *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.includesUpper());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_FieldCacheRangeFilter_newByteRange(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 5:
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::Byte a1((jobject) NULL);
              ::java::lang::Byte a2((jobject) NULL);
              jboolean a3;
              jboolean a4;
              FieldCacheRangeFilter result((jobject) NULL);

              if (!parseArgs(args, "sOOZZ", &::java::lang::PY_TYPE(Byte), &::java::lang::PY_TYPE(Byte), &a0, &a1, &a2, &a3, &a4))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::FieldCacheRangeFilter::newByteRange(a0, a1, a2, a3, a4));
                return t_FieldCacheRangeFilter::wrap_Object(result, &::java::lang::PY_TYPE(Byte));
              }
            }
            break;
           case 6:
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::search::FieldCache$ByteParser a1((jobject) NULL);
              ::java::lang::Byte a2((jobject) NULL);
              ::java::lang::Byte a3((jobject) NULL);
              jboolean a4;
              jboolean a5;
              FieldCacheRangeFilter result((jobject) NULL);

              if (!parseArgs(args, "skOOZZ", ::org::apache::lucene::search::FieldCache$ByteParser::initializeClass, &::java::lang::PY_TYPE(Byte), &::java::lang::PY_TYPE(Byte), &a0, &a1, &a2, &a3, &a4, &a5))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::FieldCacheRangeFilter::newByteRange(a0, a1, a2, a3, a4, a5));
                return t_FieldCacheRangeFilter::wrap_Object(result, &::java::lang::PY_TYPE(Byte));
              }
            }
          }

          PyErr_SetArgsError(type, "newByteRange", args);
          return NULL;
        }

        static PyObject *t_FieldCacheRangeFilter_newBytesRefRange(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
          ::org::apache::lucene::util::BytesRef a2((jobject) NULL);
          jboolean a3;
          jboolean a4;
          FieldCacheRangeFilter result((jobject) NULL);

          if (!parseArgs(args, "skkZZ", ::org::apache::lucene::util::BytesRef::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2, &a3, &a4))
          {
            OBJ_CALL(result = ::org::apache::lucene::search::FieldCacheRangeFilter::newBytesRefRange(a0, a1, a2, a3, a4));
            return t_FieldCacheRangeFilter::wrap_Object(result, &::org::apache::lucene::util::PY_TYPE(BytesRef));
          }

          PyErr_SetArgsError(type, "newBytesRefRange", args);
          return NULL;
        }

        static PyObject *t_FieldCacheRangeFilter_newDoubleRange(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 5:
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::Double a1((jobject) NULL);
              ::java::lang::Double a2((jobject) NULL);
              jboolean a3;
              jboolean a4;
              FieldCacheRangeFilter result((jobject) NULL);

              if (!parseArgs(args, "sOOZZ", &::java::lang::PY_TYPE(Double), &::java::lang::PY_TYPE(Double), &a0, &a1, &a2, &a3, &a4))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::FieldCacheRangeFilter::newDoubleRange(a0, a1, a2, a3, a4));
                return t_FieldCacheRangeFilter::wrap_Object(result, &::java::lang::PY_TYPE(Double));
              }
            }
            break;
           case 6:
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::search::FieldCache$DoubleParser a1((jobject) NULL);
              ::java::lang::Double a2((jobject) NULL);
              ::java::lang::Double a3((jobject) NULL);
              jboolean a4;
              jboolean a5;
              FieldCacheRangeFilter result((jobject) NULL);

              if (!parseArgs(args, "skOOZZ", ::org::apache::lucene::search::FieldCache$DoubleParser::initializeClass, &::java::lang::PY_TYPE(Double), &::java::lang::PY_TYPE(Double), &a0, &a1, &a2, &a3, &a4, &a5))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::FieldCacheRangeFilter::newDoubleRange(a0, a1, a2, a3, a4, a5));
                return t_FieldCacheRangeFilter::wrap_Object(result, &::java::lang::PY_TYPE(Double));
              }
            }
          }

          PyErr_SetArgsError(type, "newDoubleRange", args);
          return NULL;
        }

        static PyObject *t_FieldCacheRangeFilter_newFloatRange(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 5:
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::Float a1((jobject) NULL);
              ::java::lang::Float a2((jobject) NULL);
              jboolean a3;
              jboolean a4;
              FieldCacheRangeFilter result((jobject) NULL);

              if (!parseArgs(args, "sOOZZ", &::java::lang::PY_TYPE(Float), &::java::lang::PY_TYPE(Float), &a0, &a1, &a2, &a3, &a4))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::FieldCacheRangeFilter::newFloatRange(a0, a1, a2, a3, a4));
                return t_FieldCacheRangeFilter::wrap_Object(result, &::java::lang::PY_TYPE(Float));
              }
            }
            break;
           case 6:
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::search::FieldCache$FloatParser a1((jobject) NULL);
              ::java::lang::Float a2((jobject) NULL);
              ::java::lang::Float a3((jobject) NULL);
              jboolean a4;
              jboolean a5;
              FieldCacheRangeFilter result((jobject) NULL);

              if (!parseArgs(args, "skOOZZ", ::org::apache::lucene::search::FieldCache$FloatParser::initializeClass, &::java::lang::PY_TYPE(Float), &::java::lang::PY_TYPE(Float), &a0, &a1, &a2, &a3, &a4, &a5))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::FieldCacheRangeFilter::newFloatRange(a0, a1, a2, a3, a4, a5));
                return t_FieldCacheRangeFilter::wrap_Object(result, &::java::lang::PY_TYPE(Float));
              }
            }
          }

          PyErr_SetArgsError(type, "newFloatRange", args);
          return NULL;
        }

        static PyObject *t_FieldCacheRangeFilter_newIntRange(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 5:
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::Integer a1((jobject) NULL);
              ::java::lang::Integer a2((jobject) NULL);
              jboolean a3;
              jboolean a4;
              FieldCacheRangeFilter result((jobject) NULL);

              if (!parseArgs(args, "sOOZZ", &::java::lang::PY_TYPE(Integer), &::java::lang::PY_TYPE(Integer), &a0, &a1, &a2, &a3, &a4))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::FieldCacheRangeFilter::newIntRange(a0, a1, a2, a3, a4));
                return t_FieldCacheRangeFilter::wrap_Object(result, &::java::lang::PY_TYPE(Integer));
              }
            }
            break;
           case 6:
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::search::FieldCache$IntParser a1((jobject) NULL);
              ::java::lang::Integer a2((jobject) NULL);
              ::java::lang::Integer a3((jobject) NULL);
              jboolean a4;
              jboolean a5;
              FieldCacheRangeFilter result((jobject) NULL);

              if (!parseArgs(args, "skOOZZ", ::org::apache::lucene::search::FieldCache$IntParser::initializeClass, &::java::lang::PY_TYPE(Integer), &::java::lang::PY_TYPE(Integer), &a0, &a1, &a2, &a3, &a4, &a5))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::FieldCacheRangeFilter::newIntRange(a0, a1, a2, a3, a4, a5));
                return t_FieldCacheRangeFilter::wrap_Object(result, &::java::lang::PY_TYPE(Integer));
              }
            }
          }

          PyErr_SetArgsError(type, "newIntRange", args);
          return NULL;
        }

        static PyObject *t_FieldCacheRangeFilter_newLongRange(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 5:
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::Long a1((jobject) NULL);
              ::java::lang::Long a2((jobject) NULL);
              jboolean a3;
              jboolean a4;
              FieldCacheRangeFilter result((jobject) NULL);

              if (!parseArgs(args, "sOOZZ", &::java::lang::PY_TYPE(Long), &::java::lang::PY_TYPE(Long), &a0, &a1, &a2, &a3, &a4))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::FieldCacheRangeFilter::newLongRange(a0, a1, a2, a3, a4));
                return t_FieldCacheRangeFilter::wrap_Object(result, &::java::lang::PY_TYPE(Long));
              }
            }
            break;
           case 6:
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::search::FieldCache$LongParser a1((jobject) NULL);
              ::java::lang::Long a2((jobject) NULL);
              ::java::lang::Long a3((jobject) NULL);
              jboolean a4;
              jboolean a5;
              FieldCacheRangeFilter result((jobject) NULL);

              if (!parseArgs(args, "skOOZZ", ::org::apache::lucene::search::FieldCache$LongParser::initializeClass, &::java::lang::PY_TYPE(Long), &::java::lang::PY_TYPE(Long), &a0, &a1, &a2, &a3, &a4, &a5))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::FieldCacheRangeFilter::newLongRange(a0, a1, a2, a3, a4, a5));
                return t_FieldCacheRangeFilter::wrap_Object(result, &::java::lang::PY_TYPE(Long));
              }
            }
          }

          PyErr_SetArgsError(type, "newLongRange", args);
          return NULL;
        }

        static PyObject *t_FieldCacheRangeFilter_newShortRange(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 5:
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::Short a1((jobject) NULL);
              ::java::lang::Short a2((jobject) NULL);
              jboolean a3;
              jboolean a4;
              FieldCacheRangeFilter result((jobject) NULL);

              if (!parseArgs(args, "sOOZZ", &::java::lang::PY_TYPE(Short), &::java::lang::PY_TYPE(Short), &a0, &a1, &a2, &a3, &a4))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::FieldCacheRangeFilter::newShortRange(a0, a1, a2, a3, a4));
                return t_FieldCacheRangeFilter::wrap_Object(result, &::java::lang::PY_TYPE(Short));
              }
            }
            break;
           case 6:
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::search::FieldCache$ShortParser a1((jobject) NULL);
              ::java::lang::Short a2((jobject) NULL);
              ::java::lang::Short a3((jobject) NULL);
              jboolean a4;
              jboolean a5;
              FieldCacheRangeFilter result((jobject) NULL);

              if (!parseArgs(args, "skOOZZ", ::org::apache::lucene::search::FieldCache$ShortParser::initializeClass, &::java::lang::PY_TYPE(Short), &::java::lang::PY_TYPE(Short), &a0, &a1, &a2, &a3, &a4, &a5))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::FieldCacheRangeFilter::newShortRange(a0, a1, a2, a3, a4, a5));
                return t_FieldCacheRangeFilter::wrap_Object(result, &::java::lang::PY_TYPE(Short));
              }
            }
          }

          PyErr_SetArgsError(type, "newShortRange", args);
          return NULL;
        }

        static PyObject *t_FieldCacheRangeFilter_newStringRange(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::java::lang::String a2((jobject) NULL);
          jboolean a3;
          jboolean a4;
          FieldCacheRangeFilter result((jobject) NULL);

          if (!parseArgs(args, "sssZZ", &a0, &a1, &a2, &a3, &a4))
          {
            OBJ_CALL(result = ::org::apache::lucene::search::FieldCacheRangeFilter::newStringRange(a0, a1, a2, a3, a4));
            return t_FieldCacheRangeFilter::wrap_Object(result, &::java::lang::PY_TYPE(String));
          }

          PyErr_SetArgsError(type, "newStringRange", args);
          return NULL;
        }

        static PyObject *t_FieldCacheRangeFilter_toString(t_FieldCacheRangeFilter *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(FieldCacheRangeFilter), (PyObject *) self, "toString", args, 2);
        }
        static PyObject *t_FieldCacheRangeFilter_get__parameters_(t_FieldCacheRangeFilter *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static PyObject *t_FieldCacheRangeFilter_get__field(t_FieldCacheRangeFilter *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object.getField());
          return j2p(value);
        }

        static PyObject *t_FieldCacheRangeFilter_get__lowerVal(t_FieldCacheRangeFilter *self, void *data)
        {
          ::java::lang::Object value((jobject) NULL);
          OBJ_CALL(value = self->object.getLowerVal());
          return ::java::lang::t_Object::wrap_Object(value);
        }

        static PyObject *t_FieldCacheRangeFilter_get__parser(t_FieldCacheRangeFilter *self, void *data)
        {
          ::org::apache::lucene::search::FieldCache$Parser value((jobject) NULL);
          OBJ_CALL(value = self->object.getParser());
          return ::org::apache::lucene::search::t_FieldCache$Parser::wrap_Object(value);
        }

        static PyObject *t_FieldCacheRangeFilter_get__upperVal(t_FieldCacheRangeFilter *self, void *data)
        {
          ::java::lang::Object value((jobject) NULL);
          OBJ_CALL(value = self->object.getUpperVal());
          return ::java::lang::t_Object::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ckb/SoraniAnalyzer.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ckb {

          ::java::lang::Class *SoraniAnalyzer::class$ = NULL;
          jmethodID *SoraniAnalyzer::mids$ = NULL;
          bool SoraniAnalyzer::live$ = false;
          ::java::lang::String *SoraniAnalyzer::DEFAULT_STOPWORD_FILE = NULL;

          jclass SoraniAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ckb/SoraniAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_6d1f9881] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_0d96cf33] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;)V");
              mids$[mid_init$_3ea629c6] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/util/CharArraySet;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_83eafe28] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_c9d7e4a3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_getDefaultStopSet_d2d3505c] = env->getStaticMethodID(cls, "getDefaultStopSet", "()Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_STOPWORD_FILE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_STOPWORD_FILE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SoraniAnalyzer::SoraniAnalyzer() : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          SoraniAnalyzer::SoraniAnalyzer(const ::org::apache::lucene::analysis::util::CharArraySet & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_6d1f9881, a0.this$)) {}

          SoraniAnalyzer::SoraniAnalyzer(const ::org::apache::lucene::util::Version & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_0d96cf33, a0.this$)) {}

          SoraniAnalyzer::SoraniAnalyzer(const ::org::apache::lucene::analysis::util::CharArraySet & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_3ea629c6, a0.this$, a1.this$)) {}

          SoraniAnalyzer::SoraniAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_83eafe28, a0.this$, a1.this$)) {}

          SoraniAnalyzer::SoraniAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1, const ::org::apache::lucene::analysis::util::CharArraySet & a2) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_c9d7e4a3, a0.this$, a1.this$, a2.this$)) {}

          ::org::apache::lucene::analysis::util::CharArraySet SoraniAnalyzer::getDefaultStopSet()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getDefaultStopSet_d2d3505c]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ckb {
          static PyObject *t_SoraniAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SoraniAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SoraniAnalyzer_init_(t_SoraniAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SoraniAnalyzer_getDefaultStopSet(PyTypeObject *type);
          static PyObject *t_SoraniAnalyzer_get__defaultStopSet(t_SoraniAnalyzer *self, void *data);
          static PyGetSetDef t_SoraniAnalyzer__fields_[] = {
            DECLARE_GET_FIELD(t_SoraniAnalyzer, defaultStopSet),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SoraniAnalyzer__methods_[] = {
            DECLARE_METHOD(t_SoraniAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SoraniAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SoraniAnalyzer, getDefaultStopSet, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SoraniAnalyzer, t_SoraniAnalyzer, ::org::apache::lucene::analysis::util::StopwordAnalyzerBase, SoraniAnalyzer, t_SoraniAnalyzer_init_, 0, 0, t_SoraniAnalyzer__fields_, 0, 0);

          void t_SoraniAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(SoraniAnalyzer), module, "SoraniAnalyzer", 0);
          }

          void t_SoraniAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SoraniAnalyzer).tp_dict, "class_", make_descriptor(SoraniAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SoraniAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_SoraniAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SoraniAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(SoraniAnalyzer::initializeClass);
            PyDict_SetItemString(PY_TYPE(SoraniAnalyzer).tp_dict, "DEFAULT_STOPWORD_FILE", make_descriptor(j2p(*SoraniAnalyzer::DEFAULT_STOPWORD_FILE)));
          }

          static PyObject *t_SoraniAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SoraniAnalyzer::initializeClass, 1)))
              return NULL;
            return t_SoraniAnalyzer::wrap_Object(SoraniAnalyzer(((t_SoraniAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_SoraniAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SoraniAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SoraniAnalyzer_init_(t_SoraniAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                SoraniAnalyzer object((jobject) NULL);

                INT_CALL(object = SoraniAnalyzer());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                ::org::apache::lucene::analysis::util::CharArraySet a0((jobject) NULL);
                PyTypeObject **p0;
                SoraniAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = SoraniAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                SoraniAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::util::Version::initializeClass, &a0))
                {
                  INT_CALL(object = SoraniAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::analysis::util::CharArraySet a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                SoraniAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = SoraniAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                SoraniAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "kK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = SoraniAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                ::org::apache::lucene::analysis::util::CharArraySet a2((jobject) NULL);
                PyTypeObject **p2;
                SoraniAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "kKK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_, &a2, &p2, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = SoraniAnalyzer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SoraniAnalyzer_getDefaultStopSet(PyTypeObject *type)
          {
            ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::ckb::SoraniAnalyzer::getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_SoraniAnalyzer_get__defaultStopSet(t_SoraniAnalyzer *self, void *data)
          {
            ::org::apache::lucene::analysis::util::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/core/KeywordAnalyzer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {

          ::java::lang::Class *KeywordAnalyzer::class$ = NULL;
          jmethodID *KeywordAnalyzer::mids$ = NULL;
          bool KeywordAnalyzer::live$ = false;

          jclass KeywordAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/core/KeywordAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          KeywordAnalyzer::KeywordAnalyzer() : ::org::apache::lucene::analysis::Analyzer(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {
          static PyObject *t_KeywordAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_KeywordAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_KeywordAnalyzer_init_(t_KeywordAnalyzer *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_KeywordAnalyzer__methods_[] = {
            DECLARE_METHOD(t_KeywordAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_KeywordAnalyzer, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(KeywordAnalyzer, t_KeywordAnalyzer, ::org::apache::lucene::analysis::Analyzer, KeywordAnalyzer, t_KeywordAnalyzer_init_, 0, 0, 0, 0, 0);

          void t_KeywordAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(KeywordAnalyzer), module, "KeywordAnalyzer", 0);
          }

          void t_KeywordAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(KeywordAnalyzer).tp_dict, "class_", make_descriptor(KeywordAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(KeywordAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_KeywordAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(KeywordAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_KeywordAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, KeywordAnalyzer::initializeClass, 1)))
              return NULL;
            return t_KeywordAnalyzer::wrap_Object(KeywordAnalyzer(((t_KeywordAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_KeywordAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, KeywordAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_KeywordAnalyzer_init_(t_KeywordAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            KeywordAnalyzer object((jobject) NULL);

            INT_CALL(object = KeywordAnalyzer());
            self->object = object;

            return 0;
          }
        }
      }
    }
  }
}
